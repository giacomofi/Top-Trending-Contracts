['pragma solidity^0.4.17;\n', '\n', 'contract BountyEscrow {\n', '\n', '  address public admin;\n', '\n', '  mapping(address => bool) public authorizations;\n', '\n', '  event Bounty(\n', '    address indexed sender,\n', '    uint256 indexed amount\n', '  );\n', '\n', '  event Payout(\n', '    uint256 indexed id,\n', '    bool indexed success\n', '  );\n', '\n', '  function BountyEscrow() public {\n', '    admin = msg.sender;\n', '  }\n', '\n', '  // Default bounty function\n', '  function () public payable {\n', '    Bounty(msg.sender, msg.value);\n', '  }\n', '\n', '\n', '  modifier onlyAdmin {\n', '    require(msg.sender == admin);\n', '    _;\n', '  }\n', '\n', '  modifier authorized {\n', '    require(msg.sender == admin || authorizations[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  function payout(uint256[] ids, address[] recipients, uint256[] amounts) public authorized {\n', '    require(ids.length == recipients.length && ids.length == amounts.length);\n', '    for (uint i = 0; i < recipients.length; i++) {\n', '      Payout(ids[i], recipients[i].send(amounts[i]));\n', '    }\n', '  }\n', '\n', '  function deauthorize(address agent) public onlyAdmin {\n', '    authorizations[agent] = false;\n', '  }\n', '\n', '  function authorize(address agent) public onlyAdmin {\n', '    authorizations[agent] = true;\n', '  }\n', '\n', '}']