['pragma solidity ^0.4.16;\n', '\n', 'contract Token {\n', '    uint8 public decimals = 6;\n', '    uint8 public referralPromille = 20;\n', '    uint256 public totalSupply = 2000000000000;\n', '    uint256 public buyPrice = 1600000000;\n', '    uint256 public sellPrice = 1400000000;\n', '    string public name = "Brisfund token";\n', '    string public symbol = "BRIS";\n', '    mapping (address => bool) public lock;\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    address owner;\n', '\n', '    function Token() public {\n', '        owner = msg.sender;\n', '        balanceOf[owner] = totalSupply;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(!lock[msg.sender]);\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(!lock[_from]);\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        allowance[_from][msg.sender] -= _value;\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function setBlocking(address _address, bool _state) public onlyOwner returns (bool) {\n', '        lock[_address] = _state;\n', '        return true;\n', '    }\n', '\n', '    function setReferralPromille(uint8 _promille) public onlyOwner returns (bool) {\n', '        require(_promille < 100);\n', '        referralPromille = _promille;\n', '        return true;\n', '    }\n', '\n', '    function setPrice(uint256 _buyPrice, uint256 _sellPrice) public onlyOwner returns (bool) {\n', '        require(_sellPrice > 0);\n', '        require(_buyPrice > _sellPrice);\n', '        buyPrice = _buyPrice;\n', '        sellPrice = _sellPrice;\n', '        return true;\n', '    }\n', '\n', '    function buy() public payable returns (bool) {\n', '        uint value = msg.value / buyPrice;\n', '        require(balanceOf[owner] >= value);\n', '        require(balanceOf[msg.sender] + value > balanceOf[msg.sender]);\n', '        balanceOf[owner] -= value;\n', '        balanceOf[msg.sender] += value;\n', '        Transfer(owner, msg.sender, value);\n', '        return true;\n', '    }\n', '\n', '    function buyWithReferral(address _referral) public payable returns (bool) {\n', '        uint value = msg.value / buyPrice;\n', '        uint bonus = value / 1000 * referralPromille;\n', '        require(balanceOf[owner] >= value + bonus);\n', '        require(balanceOf[msg.sender] + value > balanceOf[msg.sender]);\n', '        require(balanceOf[_referral] + bonus >= balanceOf[_referral]);\n', '        balanceOf[owner] -= value + bonus;\n', '        balanceOf[msg.sender] += value;\n', '        balanceOf[_referral] += bonus;\n', '        Transfer(owner, msg.sender, value);\n', '        Transfer(owner, _referral, bonus);\n', '        return true;\n', '    }\n', '\n', '    function sell(uint256 _tokenAmount) public returns (bool) {\n', '        require(!lock[msg.sender]);\n', '        uint ethValue = _tokenAmount * sellPrice;\n', '        require(this.balance >= ethValue);\n', '        require(balanceOf[msg.sender] >= _tokenAmount);\n', '        require(balanceOf[owner] + _tokenAmount > balanceOf[owner]);\n', '        balanceOf[msg.sender] -= _tokenAmount;\n', '        balanceOf[owner] += _tokenAmount;\n', '        msg.sender.transfer(ethValue);\n', '        Transfer(msg.sender, owner, _tokenAmount);\n', '        return true;\n', '    }\n', '\n', '    function changeSupply(uint256 _value, bool _add) public onlyOwner returns (bool) {\n', '        if(_add) {\n', '            require(balanceOf[owner] + _value > balanceOf[owner]);\n', '            balanceOf[owner] += _value;\n', '            totalSupply += _value;\n', '            Transfer(0, owner, _value);\n', '        } else {\n', '            require(balanceOf[owner] >= _value);\n', '            balanceOf[owner] -= _value;\n', '            totalSupply -= _value;\n', '            Transfer(owner, 0, _value);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function reverse(address _reversed, uint256 _value) public onlyOwner returns (bool) {\n', '        require(balanceOf[_reversed] >= _value);\n', '        require(balanceOf[owner] + _value > balanceOf[owner]);\n', '        balanceOf[_reversed] -= _value;\n', '        balanceOf[owner] += _value;\n', '        Transfer(_reversed, owner, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '\n', '    function kill() public onlyOwner {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}']
['pragma solidity ^0.4.16;\n', '\n', 'contract Token {\n', '    uint8 public decimals = 6;\n', '    uint8 public referralPromille = 20;\n', '    uint256 public totalSupply = 2000000000000;\n', '    uint256 public buyPrice = 1600000000;\n', '    uint256 public sellPrice = 1400000000;\n', '    string public name = "Brisfund token";\n', '    string public symbol = "BRIS";\n', '    mapping (address => bool) public lock;\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    address owner;\n', '\n', '    function Token() public {\n', '        owner = msg.sender;\n', '        balanceOf[owner] = totalSupply;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(!lock[msg.sender]);\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(!lock[_from]);\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        allowance[_from][msg.sender] -= _value;\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function setBlocking(address _address, bool _state) public onlyOwner returns (bool) {\n', '        lock[_address] = _state;\n', '        return true;\n', '    }\n', '\n', '    function setReferralPromille(uint8 _promille) public onlyOwner returns (bool) {\n', '        require(_promille < 100);\n', '        referralPromille = _promille;\n', '        return true;\n', '    }\n', '\n', '    function setPrice(uint256 _buyPrice, uint256 _sellPrice) public onlyOwner returns (bool) {\n', '        require(_sellPrice > 0);\n', '        require(_buyPrice > _sellPrice);\n', '        buyPrice = _buyPrice;\n', '        sellPrice = _sellPrice;\n', '        return true;\n', '    }\n', '\n', '    function buy() public payable returns (bool) {\n', '        uint value = msg.value / buyPrice;\n', '        require(balanceOf[owner] >= value);\n', '        require(balanceOf[msg.sender] + value > balanceOf[msg.sender]);\n', '        balanceOf[owner] -= value;\n', '        balanceOf[msg.sender] += value;\n', '        Transfer(owner, msg.sender, value);\n', '        return true;\n', '    }\n', '\n', '    function buyWithReferral(address _referral) public payable returns (bool) {\n', '        uint value = msg.value / buyPrice;\n', '        uint bonus = value / 1000 * referralPromille;\n', '        require(balanceOf[owner] >= value + bonus);\n', '        require(balanceOf[msg.sender] + value > balanceOf[msg.sender]);\n', '        require(balanceOf[_referral] + bonus >= balanceOf[_referral]);\n', '        balanceOf[owner] -= value + bonus;\n', '        balanceOf[msg.sender] += value;\n', '        balanceOf[_referral] += bonus;\n', '        Transfer(owner, msg.sender, value);\n', '        Transfer(owner, _referral, bonus);\n', '        return true;\n', '    }\n', '\n', '    function sell(uint256 _tokenAmount) public returns (bool) {\n', '        require(!lock[msg.sender]);\n', '        uint ethValue = _tokenAmount * sellPrice;\n', '        require(this.balance >= ethValue);\n', '        require(balanceOf[msg.sender] >= _tokenAmount);\n', '        require(balanceOf[owner] + _tokenAmount > balanceOf[owner]);\n', '        balanceOf[msg.sender] -= _tokenAmount;\n', '        balanceOf[owner] += _tokenAmount;\n', '        msg.sender.transfer(ethValue);\n', '        Transfer(msg.sender, owner, _tokenAmount);\n', '        return true;\n', '    }\n', '\n', '    function changeSupply(uint256 _value, bool _add) public onlyOwner returns (bool) {\n', '        if(_add) {\n', '            require(balanceOf[owner] + _value > balanceOf[owner]);\n', '            balanceOf[owner] += _value;\n', '            totalSupply += _value;\n', '            Transfer(0, owner, _value);\n', '        } else {\n', '            require(balanceOf[owner] >= _value);\n', '            balanceOf[owner] -= _value;\n', '            totalSupply -= _value;\n', '            Transfer(owner, 0, _value);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function reverse(address _reversed, uint256 _value) public onlyOwner returns (bool) {\n', '        require(balanceOf[_reversed] >= _value);\n', '        require(balanceOf[owner] + _value > balanceOf[owner]);\n', '        balanceOf[_reversed] -= _value;\n', '        balanceOf[owner] += _value;\n', '        Transfer(_reversed, owner, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '\n', '    function kill() public onlyOwner {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}']
