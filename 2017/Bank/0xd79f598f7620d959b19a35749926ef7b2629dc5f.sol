['pragma solidity ^0.4.17;\n', '\n', '/*\n', '\n', 'Signals Society Membership Contract\n', '-----------------------------------\n', '\n', '*/\n', '\n', '/**\n', ' * Ownership functionality\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '  address public bot;\n', '  // constructor, sets original owner address\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '  // modifier to restruct function use to the owner\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }    \n', '  // modifier to restruct function use to the bot\n', '  modifier onlyBot() {\n', '    require(msg.sender == bot);\n', '    _;\n', '  }\n', '  // lets owner change his address\n', '  function changeOwner(address addr) public onlyOwner {\n', '      owner = addr;\n', '  }\n', "  // lets owner change the bot's address    \n", '  function changeBot(address addr) public onlyOwner {\n', '      bot = addr;\n', '  }\n', '  // allows destruction of contract only if balance is empty\n', '  function kill() public onlyOwner {\n', '\t\trequire(this.balance == 0);\n', '\t\tselfdestruct(owner);\n', '\t}\n', '}\n', '\n', '/**\n', ' * Manages membership prices\n', ' */\n', 'contract Memberships is Ownable {\n', '  // enumerates memberships (0, 1, 2)\n', '  enum Membership { Day, Month, Lifetime }\n', '  // holds the prices for the memberships\n', '  mapping (uint => uint) internal prices;\n', '  // returns the price for a single membership\n', '  function getMembershipPrice(Membership membership) public view returns(uint) {\n', '    return prices[uint(membership)];\n', '  }\n', '  // lets the owner set the price for a single membership\n', '  function setMembershipPrice(Membership membership, uint amount) public onlyOwner {    \n', '\t\trequire(amount > 0);\n', '    prices[uint(membership)] = amount;\n', '  }\n', '}\n', '\n', '/**\n', ' * SignalsSociety Contract\n', ' */\n', 'contract SignalsSociety is Ownable, Memberships {\n', '  // lets the bot know a deposit was made\n', '  event Deposited(address account, uint amount, uint balance, uint timestamp);\n', '  // lets the bot know a membership was paid\n', '  event MembershipPaid(address account, Membership membership, uint timestamp);\n', '\n', '  // store the amount of ETH deposited by each account.\n', '  mapping (address => uint) public balances;\n', '\n', '  // allows user to withdraw his balance\n', '  function withdraw() public {\n', '    uint amount = balances[msg.sender];\n', '    // zero the pending refund before sending to prevent re-entrancy attacks\n', '    balances[msg.sender] = 0;\n', '    msg.sender.transfer(amount);\n', '  }\n', "  // deposits ETH to a user's account\n", '  function deposit(address account, uint amount) public {\n', "    // deposit the amount to the user's account\n", '    balances[account] += amount;\n', '    // let the bot know something was deposited\n', '    Deposited(account, amount, balances[account], now);\n', '  }\n', "  // accepts the membership payment by moving eth from the user's account\n", "  // to the owner's account\n", '  function acceptMembership(address account, Membership membership, uint discount) public onlyBot {\n', '    // get the price for the membership they selected minus any discounts for special promotions\n', '    var price = getMembershipPrice(membership) - discount;\n', '    // make sure they have enough balance to pay for it\n', '    require(balances[account] >= price);\n', '    // transfer the price to the contract owner account\n', '    balances[account] -= price;\n', '    balances[owner] += price;\n', '    // let the bot know the membershipt was paid\n', '    MembershipPaid(account, membership, now);\n', '  }\n', '  // default function.  Called when a user sends ETH to the contract.\n', '  // deposits the eth to their bank account\n', '  function () public payable {\n', '    deposit(msg.sender, msg.value);\n', '  }\n', '}']