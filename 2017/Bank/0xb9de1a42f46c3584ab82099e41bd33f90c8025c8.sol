['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract EnjinGiveaway {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public totalShares = 1400000;\n', '  uint256 public totalReleased = 0;\n', '\n', '  mapping(address => uint256) public shares;\n', '  mapping(address => uint256) public released;\n', '  address[] public payees;\n', '  address public owner;\n', '  address public tokenContract;\n', '  \n', '  /**\n', '   * @dev Constructor\n', '   */\n', '  function EnjinGiveaway() public {\n', '    owner = msg.sender;\n', '    tokenContract = 0xF629cBd94d3791C9250152BD8dfBDF380E2a3B9c;\n', '  }\n', '\n', '  /**\n', '   * @dev Add a new payee to the contract.\n', '   * @param _payee The address of the payee to add.\n', '   * @param _shares The number of shares owned by the payee.\n', '   */\n', '  function addPayee(address _payee, uint256 _shares) internal {\n', '    require(_payee != address(0));\n', '    require(_shares > 0);\n', '    require(shares[_payee] == 0);\n', '\n', '    payees.push(_payee);\n', '    shares[_payee] = _shares;\n', '  }\n', '  \n', '  function () payable {\n', '      require(totalReleased < totalShares);\n', '      uint256 amount = msg.value;\n', '      uint256 payeeShares = amount * 7000 / 1e18;\n', '      totalReleased = totalReleased + payeeShares;\n', '      addPayee(msg.sender, payeeShares);\n', '      owner.transfer(msg.value);\n', '  }\n', '\n', '  function creditTokens() public {\n', '    require(msg.sender == owner);\n', '    \n', '    for (uint i=0; i < payees.length; i++) {\n', '        tokenContract.call(bytes4(sha3("transferFrom(address,address,uint256)")), this, payees[i], shares[payees[i]]);\n', '    }\n', '  }    \n', '}']