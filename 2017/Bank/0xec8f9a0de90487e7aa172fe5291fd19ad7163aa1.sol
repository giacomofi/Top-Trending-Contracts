['pragma solidity ^0.4.13;\n', '\n', 'contract token { \n', '    function transfer(address _to, uint256 _value);\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '}\n', '\n', 'contract BDSMAirdrop {\n', '    \n', '    token public sharesTokenAddress;\n', '    uint256 public tokenFree = 0;\n', '    address owner;\n', '    uint256 public defValue = 5000000;\n', '\n', 'modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '}\n', '    \n', 'function BDSMAirdrop(address _tokenAddress) {\n', '    sharesTokenAddress = token(_tokenAddress);\n', '    owner = msg.sender;\n', '}\n', '\n', 'function multiSend(address[] _dests) onlyOwner public {\n', '    \n', '    uint256 i = 0;\n', '\n', '    while (i < _dests.length) {\n', '        sharesTokenAddress.transfer(_dests[i], defValue);\n', '        i += 1;\n', '    }\n', '    \n', '    tokenFree = sharesTokenAddress.balanceOf(this);\n', '}\n', '\n', 'function tokensBack() onlyOwner public {    \n', '    sharesTokenAddress.transfer(owner, sharesTokenAddress.balanceOf(this));\n', '    tokenFree = 0;\n', '}\t\n', '\n', 'function changeAirdropValue(uint256 _value) onlyOwner public {\n', '    defValue = _value;\n', '}\n', '\n', '}']