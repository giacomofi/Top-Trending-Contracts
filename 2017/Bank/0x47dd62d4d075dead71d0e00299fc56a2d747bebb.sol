['pragma solidity ^0.4.18;\n', '\n', 'contract Token {\n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() constant returns (uint256 supply);\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Burn(address indexed from, uint256 value);\n', '    event UpdateToken(address _newtoken);\n', '    \n', '    // Function to set balances from new Token\n', '    function setBalance(address _to,uint256 _value) external ;\n', '    \n', '    // Function to set allowed from new Token\n', '    function setAllowed(address _spender,address _to,uint256 _value) external;\n', '    \n', '    // Function to set total supply from new Token.\n', '    function setTotalSupply(uint256 _value) external;\n', '    \n', '    function getDecimals() constant returns (uint256 decimals);\n', '    \n', '    function eventTransfer(address _from, address  _to, uint256 _value) external;\n', '    function eventApproval(address _owner, address  _spender, uint256 _value) external;\n', '    function eventBurn(address from, uint256 value) external;\n', '}\n', '\n', 'contract NewToken{\n', '    \n', '    function transfer(address _sender,address _to,uint256 value) returns (bool);\n', '    function transferFrom(address _sender,address from,address _to,uint256 value) returns (bool);\n', '    function approve(address _sender,address _spender, uint256 _value) returns (bool success);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function onePercent(uint256 a) internal constant returns (uint256){\n', '      return div(a,uint256(100));\n', '  }\n', '  \n', '  function power(uint256 a,uint256 b) internal constant returns (uint256){\n', '      return mul(a,10**b);\n', '  }\n', '}\n', '\n', 'contract StandardToken is Token {\n', '    using SafeMath for uint256;\n', '    address newToken=0x0;\n', '    \n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public _totalSupply=0;\n', "    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\n", '    // there is 3 level. 1 - inbound tx, 2 - outbount tx, 3 - all tx;\n', '    mapping(uint8 =>mapping(address=>bool)) internal whitelist;\n', '    mapping(address=>uint8) internal whitelistModerator;\n', '    \n', '    uint256 public maxFee;\n', '    uint256 public feePercantage;\n', '    address public _owner;\n', '    \n', '    modifier onlyOwner {\n', '        require(msg.sender == _owner);\n', '        _;\n', '    }\n', '\n', '    modifier canModifyWhitelistIn {\n', '        require(whitelistModerator[msg.sender]==1 || whitelistModerator[msg.sender]==3);\n', '        _;\n', '    }\n', '    \n', '    modifier canModifyWhitelistOut {\n', '        require(whitelistModerator[msg.sender]==2 || whitelistModerator[msg.sender]==3);\n', '        _;\n', '    }\n', '    \n', '    modifier canModifyWhitelist {\n', '        require(whitelistModerator[msg.sender]==3);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyNewToken {\n', '        require(msg.sender==newToken);\n', '        _;\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if(newToken!=0x0){\n', '            return NewToken(newToken).transfer(msg.sender,_to,_value);\n', '        }\n', '        uint256 fee=getFee(_value);\n', '        uint256 valueWithFee=_value;\n', '         if(withFee(msg.sender,_to)){\n', '            valueWithFee=valueWithFee.add(fee);\n', '        }\n', '        if (balances[msg.sender] >= valueWithFee && _value > 0) {\n', '            //Do Transfer\n', '            doTransfer(msg.sender,_to,_value,fee);\n', '            return true;\n', '        }  else { return false; }\n', '    }\n', '    \n', '    function withFee(address _from,address _to) private returns(bool){\n', '        return !whitelist[2][_from] && !whitelist[1][_to] && !whitelist[3][_to] && !whitelist[3][_from];\n', '    }\n', '    \n', '    function getFee(uint256 _value) private returns (uint256){\n', '        uint256 feeOfValue=_value.onePercent().mul(feePercantage);\n', '        uint256 fee=uint256(maxFee).power(decimals);\n', '         // Check if 1% burn fee exceeds maxfee\n', '        // If so then hard cap for burn fee is maxfee\n', '        if (feeOfValue>= fee) {\n', '            return fee;\n', '        // If 1% burn fee is less than maxfee\n', '        // then use 1% burn fee\n', '        } \n', '        if (feeOfValue < fee) {\n', '            return feeOfValue;\n', '        }\n', '    }\n', '    function doTransfer(address _from,address _to,uint256 _value,uint256 fee) internal {\n', '            balances[_from] =balances[_from].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            Transfer(_from, _to, _value);\n', '            if(withFee(_from,_to)) {\n', '                doBurn(_from,fee);\n', '            }\n', '    }\n', '    \n', '    function doBurn(address _from,uint256 _value) private returns (bool success){\n', '        require(balanceOf(_from) >= _value);   // Check if the sender has enough\n', '        balances[_from] =balances[_from].sub(_value);            // Subtract from the sender\n', '        _totalSupply =_totalSupply.sub(_value);                      // Updates totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '    \n', '    function burn(address _from,uint256 _value) onlyOwner public returns (bool success) {\n', '        return doBurn(_from,_value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if(newToken!=0x0){\n', '            return NewToken(newToken).transferFrom(msg.sender,_from,_to,_value);\n', '        }\n', '        uint256 fee=getFee(_value);\n', '        uint256 valueWithFee=_value;\n', '        if(withFee(_from,_to)){\n', '            valueWithFee=valueWithFee.add(fee);\n', '        }\n', '        if (balances[_from] >= valueWithFee && \n', '            (allowed[_from][msg.sender] >= valueWithFee || allowed[_from][msg.sender] == _value) &&\n', '            _value > 0 ) {\n', '            doTransfer(_from,_to,_value,fee);\n', '            if(allowed[_from][msg.sender] == _value){\n', '                allowed[_from][msg.sender] =allowed[_from][msg.sender].sub(_value);\n', '            }\n', '            else{\n', '                allowed[_from][msg.sender] =allowed[_from][msg.sender].sub(valueWithFee);\n', '            }\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        if(newToken!=0x0){\n', '            return NewToken(newToken).approve(msg.sender,_spender,_value);\n', '        }\n', '        uint256 valueWithFee=_value;\n', '        if(withFee(_spender,0x0)){\n', '            uint256 fee=getFee(_value);  \n', '            valueWithFee=valueWithFee.add(fee);\n', '        }\n', '        allowed[msg.sender][_spender] = valueWithFee;\n', '        Approval(msg.sender, _spender, valueWithFee);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function totalSupply() constant returns (uint totalSupply){\n', '        return _totalSupply;\n', '    }\n', '    \n', '    function setTotalSupply(uint256 _value) onlyNewToken external {\n', '        _totalSupply=_value;\n', '    }\n', '    \n', '    function setBalance(address _to,uint256 _value) onlyNewToken external {\n', '        balances[_to]=_value;\n', '    }\n', '    \n', '    function setAllowed(address _spender,address _to,uint256 _value) onlyNewToken external {\n', '        allowed[_to][_spender]=_value;\n', '    }\n', '    function getDecimals() constant returns (uint256 decimals){\n', '        return decimals;\n', '    }\n', '    \n', '    function eventTransfer(address _from, address  _to, uint256 _value) onlyNewToken external{\n', '        Transfer(_from,_to,_value);\n', '    }\n', '    \n', '    function eventApproval(address _owner, address  _spender, uint256 _value)onlyNewToken external{\n', '        Approval(_owner,_spender,_value);\n', '    }\n', '    function eventBurn(address from, uint256 value)onlyNewToken external{\n', '        Burn(from,value);\n', '    }\n', '}\n', '\n', '\n', 'contract EqualToken is StandardToken {\n', '\n', '    function () {\n', '        //if ether is sent to this address, send it back.\n', '        revert();\n', '    }\n', '\n', '    /* Public variables of the token */\n', '    \n', '    /*\n', '    NOTE:\n', '    The following variables are OPTIONAL vanities. One does not have to include them.\n', '    They allow one to customise the token contract & in no way influences the core functionality.\n', '    Some wallets/interfaces might not even bother to look at this information.\n', '    */\n', '    string public name;                   //fancy name: eg Simon Bucks\n', '    string public symbol;                 //An identifier: eg SBX\n', "    string public version = 'H1.0';       //human 0.1 standard. Just an arbitrary versioning scheme.\n", '    address public oldToken=0x0;    \n', '    // Fee info\n', '    string public feeInfo = "Each operation costs 1% of the transaction amount, but not more than 250 tokens.";\n', '\n', '    function EqualToken() {\n', '        _owner=msg.sender;\n', '        whitelistModerator[msg.sender]=3;\n', '        whitelist[3][msg.sender]=true;\n', '        \n', '        \n', '        maxFee=250; // max fee for transfer\n', '        feePercantage=1; // fee in percents\n', '        \n', '        name = "EQUAL";                      // Set the name for display purposes\n', '        decimals = 18;                            // Amount of decimals for display purposes\n', '        symbol = "EQL";                          // Set the symbol for display purposes\n', '    }\n', '\n', '    function setOldToken(address _oldToken) onlyOwner public{\n', '        require(oldToken==0x0);\n', '        oldToken=_oldToken;\n', '        Token token=Token(_oldToken);\n', '        _totalSupply=token.totalSupply();\n', '        balances[msg.sender] =_totalSupply;\n', '        Transfer(0x0,msg.sender,_totalSupply);\n', '    }\n', '    \n', '    // Redistibute new token with same balances;\n', '    function redistribute(address[] holders) onlyOwner public{\n', '        require(oldToken!=0x0);\n', '        Token token=Token(oldToken);\n', '        for(uint256 i=0;i<holders.length;++i){\n', '            address _to=holders[i];\n', '            if(balances[_to]==0){\n', '                uint256 balance=token.balanceOf(_to);\n', '                balances[_to]=balance;\n', '                balances[msg.sender]=balances[msg.sender].sub(balance);\n', '                Transfer(msg.sender,_to,balance);\n', '            }\n', '        }\n', '    }\n', '    \n', '    function allocate(address _address,uint256 percent) private{\n', '        uint256 bal=_totalSupply.onePercent().mul(percent);\n', '        //balances[_address]=bal;\n', '        whitelist[3][_address]=true;\n', '        doTransfer(msg.sender,_address,bal,0);\n', '    }\n', '   \n', '    // Set address access to inbound whitelist. \n', '    function setWhitelistIn(address _address,bool _value) canModifyWhitelistIn public{\n', '        setWhitelistValue(_address,_value,1);\n', '    }\n', '    \n', '    // Set address access to outbound whitelist. \n', '    function setWhitelistOut(address _address,bool _value) canModifyWhitelistOut public{\n', '        setWhitelistValue(_address,_value,2);\n', '    }\n', '    \n', '    // Set address access to inbound and outbound whitelist. \n', '    function setWhitelist(address _address,bool _value) canModifyWhitelist public{\n', '        setWhitelistValue(_address,_value,3);\n', '    }\n', '    \n', '    function setWhitelistValue(address _address,bool _withoutFee,uint8 _type) internal {\n', '        whitelist[_type][_address]=_withoutFee;\n', '    }\n', '    \n', '    // Set address of moderator whitelist\n', '    // _level can be: 0 -not moderator, 1 -inbound,2 - outbound, 3 -all\n', '    function setWhitelistModerator(address _address,uint8 _level) onlyOwner public {\n', '        whitelistModerator[_address]=_level;\n', '    }\n', '    \n', '    //Set max fee value\n', '    function setMaxFee(uint256 newFee) onlyOwner public {\n', '        maxFee=newFee;\n', '    }\n', '    \n', '    //Set fee percent value\n', '    function setFeePercent(uint256 newFee) onlyOwner public {\n', '        feePercantage=newFee;\n', '    }\n', '    \n', '    //Set fee info\n', '    function setFeeInfo(string newFeeInfo) onlyOwner public {\n', '       feeInfo=newFeeInfo;\n', '    }\n', '    \n', '    function setNewToken(address _newtoken) onlyOwner public{\n', '        newToken=_newtoken;\n', '        UpdateToken(_newtoken);\n', '    }\n', '    \n', '    /* Approves and then calls the receiving contract */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        if(!approve(_spender,_value)){\n', '            return false;\n', '        }\n', "        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n", '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { revert(); }\n', '        return true;\n', '    }\n', '}']