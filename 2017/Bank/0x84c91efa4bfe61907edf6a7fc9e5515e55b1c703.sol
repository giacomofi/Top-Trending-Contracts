['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', 'interface token {\n', '    function transfer(address receiver, uint amount);\n', '    function balanceOf(address) returns (uint256);\n', '}\n', '\n', 'contract Crowdsale {\n', '    address public beneficiary;\n', '    uint public tokenBalance;\n', '    uint public amountRaised;\n', '    uint public deadline;\n', '    uint dollar_exchange;\n', '    uint test_factor;\n', '    uint start_time;\n', '    uint price;\n', '    token public tokenReward;\n', '    mapping(address => uint256) public balanceOf;\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Setup the owner\n', '     */\n', '    function Crowdsale() {\n', '        beneficiary = 0xD83A4537f917feFf68088eAB619dC6C529A55ad4;\n', '        start_time = now;\n', '        deadline = start_time + 14 * 1 days;    \n', '        dollar_exchange = 280;\n', '        tokenReward = token(0x2ca8e1fbcde534c8c71d8f39864395c2ed76fb0e);  //chozun coin address\n', '    }\n', '\n', '    /**\n', '     * Fallback function\n', '    **/\n', '\n', '    function () payable beforeDeadline {\n', '\n', '        uint amount = msg.value;\n', '        balanceOf[msg.sender] += amount;\n', '        amountRaised += amount;\n', '        price = SafeMath.div(0.35 * 1 ether, dollar_exchange);\n', '        if (amount >= 37.5 ether && amount < 83 ether) {price = SafeMath.div(SafeMath.mul(100, price), 110);} \n', '        if (amount >= 87.5 ether && amount < 166 ether) {price = SafeMath.div(SafeMath.mul(100, price), 115);} \n', '        if (amount >= 175 ether) {price = SafeMath.div(SafeMath.mul(100, price), 120);}\n', '        tokenBalance = SafeMath.sub(tokenBalance, SafeMath.div(amount, price));\n', '        if (tokenBalance < 0 ) { revert(); }\n', '        tokenReward.transfer(msg.sender, SafeMath.div(amount * 1 ether, price));\n', '        FundTransfer(msg.sender, amount, true);\n', '        \n', '    }\n', '\n', '    modifier afterDeadline() { if (now >= deadline) _; }\n', '    modifier beforeDeadline() { if (now <= deadline) _; }\n', '\n', '    function safeWithdrawal() afterDeadline {\n', '\n', '        if (beneficiary.send(amountRaised)) {\n', '            FundTransfer(beneficiary, amountRaised, false);\n', '            tokenReward.transfer(beneficiary, tokenReward.balanceOf(this));\n', '            tokenBalance = 0;\n', '        }\n', '    }\n', '}']