['pragma solidity 0.4.15;\n', '\n', '\n', 'contract Owned {\n', '    // The address of the account of the current owner\n', '    address public owner;\n', '\n', '    // The publiser is the inital owner\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * Access is restricted to the current owner\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Transfer ownership to `_newOwner`\n', '     *\n', '     * @param _newOwner The address of the account that will become the new owner\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'contract ERC20Interface {\n', '    // Total supply\n', '    uint256 public totalSupply; // Implicit getter\n', '\n', '    // Get the account balance of another account with address _owner\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    // Send _amount amount of tokens to address _to\n', '    function transfer(address _to, uint256 _amount) returns (bool success);\n', '\n', '    // Send _amount amount of tokens from address _from to address _to\n', '    function transferFrom(address _from, address _to, uint256 _amount) returns (bool success);\n', '\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _amount amount.\n', '    // If this function is called again it overwrites the current allowance with _amount.\n', '    // this function is required for some DEX functionality\n', '    function approve(address _spender, uint256 _amount) returns (bool success);\n', '\n', '    // Returns the amount which _spender is still allowed to withdraw from _owner\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    // Triggered when tokens are transferred.\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n', '\n', '    // Triggered whenever approve(address _spender, uint256 _amount) is called.\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _amount);\n', '}\n', '\n', '\n', '/**\n', ' * Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\n', ' *\n', ' * Modified version of https://github.com/ConsenSys/Tokens that implements the\n', ' * original Token contract, an abstract contract for the full ERC 20 Token standard\n', ' */\n', 'contract EngravedToken is ERC20Interface, Owned {\n', '    string public constant symbol = "EGR";\n', '    string public constant name = "Engraved Token";\n', '    uint8 public constant decimals = 3;\n', '\n', '    // Core team incentive distribution\n', '    bool public incentiveDistributionStarted = false;\n', '    uint256 public incentiveDistributionDate = 0;\n', '    uint256 public incentiveDistributionRound = 1;\n', '    uint256 public incentiveDistributionMaxRounds = 4;\n', '    uint256 public incentiveDistributionInterval = 1 years;\n', '    uint256 public incentiveDistributionRoundDenominator = 2;\n', '\n', '    // Core team incentives\n', '    struct Incentive {\n', '        address recipient;\n', '        uint8 percentage;\n', '    }\n', '\n', '    Incentive[] public incentives;\n', '\n', '    // Token starts if the locked state restricting transfers\n', '    bool public locked;\n', '\n', '    // Balances for each account\n', '    mapping(address => uint256) balances;\n', '\n', '    // Owner of account approves the transfer of an amount to another account\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    // Constructor\n', '    function EngravedToken() {\n', '        owner = msg.sender;\n', '        balances[owner] = 0;\n', '        totalSupply = 0;\n', '        locked = true;\n', '\n', '        incentives.push(Incentive(0xCA73c8705cbc5942f42Ad39bC7EAeCA8228894BB, 5)); // 5% founder\n', '        incentives.push(Incentive(0xd721f5c14a4AF2625AF1E1E107Cc148C8660BA72, 5)); // 5% founder\n', '    }\n', '\n', '    /**\n', '     * Get balance of `_owner`\n', '     *\n', '     * @param _owner The address from which the balance will be retrieved\n', '     * @return The balance\n', '     */\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * Send `_amount` token to `_to` from `msg.sender`\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _amount The amount of token to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     */\n', '    function transfer(address _to, uint256 _amount) returns (bool success) {\n', '\n', '        require(!locked);\n', '        require(balances[msg.sender] >= _amount);\n', '        require(_amount > 0);\n', '        assert(balances[_to] + _amount > balances[_to]);\n', '\n', '        balances[msg.sender] -= _amount;\n', '        balances[_to] += _amount;\n', '        Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Send `_amount` token to `_to` from `_from` on the condition it is approved by `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _amount The amount of token to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     */\n', '    function transferFrom (\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) public returns (bool success) {\n', '        require(!locked);\n', '        require(balances[_from] >= _amount);\n', '        require(allowed[_from][msg.sender] >= _amount);\n', '        require(_amount > 0);\n', '        assert(balances[_to] + _amount > balances[_to]);\n', '\n', '        balances[_from] -= _amount;\n', '        allowed[_from][msg.sender] -= _amount;\n', '        balances[_to] += _amount;\n', '        Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * `msg.sender` approves `_spender` to spend `_amount` tokens\n', '     *\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @param _amount The amount of tokens to be approved for transfer\n', '     * @return Whether the approval was successful or not\n', '     */\n', '    function approve(address _spender, uint256 _amount) returns (bool success) {\n', '        require(!locked);\n', '\n', '        // Update allowance\n', '        allowed[msg.sender][_spender] = _amount;\n', '\n', '        // Notify listners\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Get the amount of remaining tokens that `_spender` is allowed to spend from `_owner`\n', '     *\n', '     * @param _owner The address of the account owning tokens\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @return Amount of remaining tokens allowed to spent\n', '     */\n', '    function allowance(address _owner, address _spender) public constant returns (\n', '        uint256 remaining\n', '    ) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * Starts incentive distribution\n', '     *\n', '     * Called by the crowdsale contract when tokenholders voted\n', '     * for the transfer of ownership of the token contract to DCorp\n', '     *\n', '     * @return Whether the incentive distribution was started\n', '     */\n', '    function startIncentiveDistribution() public onlyOwner returns (bool success) {\n', '        if (!incentiveDistributionStarted) {\n', '            incentiveDistributionDate = now;\n', '            incentiveDistributionStarted = true;\n', '        }\n', '\n', '        return incentiveDistributionStarted;\n', '    }\n', '\n', '    /**\n', '     * Distributes incentives over the core team members as\n', '     * described in the whitepaper\n', '     */\n', '    function withdrawIncentives() public {\n', '        // Crowdsale triggers incentive distribution\n', '        require(incentiveDistributionStarted);\n', '\n', '        // Enforce max distribution rounds\n', '        require(incentiveDistributionRound < incentiveDistributionMaxRounds);\n', '\n', '        // Enforce time interval\n', '        require(now > incentiveDistributionDate);\n', '\n', '        uint256 totalSupplyToDate = totalSupply;\n', '        uint256 denominator = 1;\n', '\n', '        // Incentive decreased each round\n', '        if (incentiveDistributionRound > 1) {\n', '            denominator = incentiveDistributionRoundDenominator**(incentiveDistributionRound - 1);\n', '        }\n', '\n', '        for (uint256 i = 0; i < incentives.length; i++) {\n', '\n', '            uint256 amount = totalSupplyToDate * incentives[i].percentage / 10**2 / denominator;\n', '            address recipient = incentives[i].recipient;\n', '\n', '            // Create tokens\n', '            balances[recipient] += amount;\n', '            totalSupply += amount;\n', '\n', '            // Notify listeners\n', '            Transfer(0, this, amount);\n', '            Transfer(this, recipient, amount);\n', '        }\n', '\n', '        // Next round\n', '        incentiveDistributionDate = now + incentiveDistributionInterval;\n', '        incentiveDistributionRound++;\n', '    }\n', '\n', '    /**\n', '     * Unlocks the token irreversibly so that the transfering of value is enabled\n', '     *\n', '     * @return Whether the unlocking was successful or not\n', '     */\n', '    function unlock() public onlyOwner returns (bool success) {\n', '        locked = false;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Issues `_amount` new tokens to `_recipient` (_amount < 0 guarantees that tokens are never removed)\n', '     *\n', '     * @param _recipient The address to which the tokens will be issued\n', '     * @param _amount The amount of new tokens to issue\n', '     * @return Whether the approval was successful or not\n', '     */\n', '    function issue(address _recipient, uint256 _amount) public onlyOwner returns (bool success) {\n', '        // Guarantee positive\n', '        require(_amount >= 0);\n', '\n', '        // Create tokens\n', '        balances[_recipient] += _amount;\n', '        totalSupply += _amount;\n', '\n', '        // Notify listners\n', '        Transfer(0, owner, _amount);\n', '        Transfer(owner, _recipient, _amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Prevents accidental sending of ether\n', '     */\n', '    function () {\n', '        assert(false);\n', '    }\n', '\n', '}']