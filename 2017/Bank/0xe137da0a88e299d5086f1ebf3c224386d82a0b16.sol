['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' *\n', ' * Version: B\n', ' * @author  <newtwist@protonmail.com>\n', ' *\n', ' * Overview:\n', ' * Divides all incoming funds among various `activity` accounts. The division cannot be changed\n', ' * after the contract is locked.\n', ' */\n', '\n', 'contract OrganizeFunds {\n', '\n', '  struct ActivityAccount {\n', '    uint credited;   // total funds credited to this account\n', '    uint balance;    // current balance = credited - amount withdrawn\n', '    uint pctx10;     // percent allocation times ten\n', '    address addr;    // payout addr of this acct\n', '    string name;\n', '  }\n', '\n', '  uint constant TENHUNDWEI = 1000;                     // need gt. 1000 wei to distribute\n', '  uint constant MAX_ACCOUNTS = 10;                     // max accounts this contract can handle\n', '\n', '  event MessageEvent(string message);\n', '  event MessageEventI(string message, uint val);\n', '\n', '\n', '  bool public isLocked;\n', '  string public name;\n', '  address public owner;                                // deployer executor\n', '  mapping (uint => ActivityAccount) activityAccounts;  // accounts by index\n', '  uint public activityCount;                           // how many activity accounts\n', '  uint public totalFundsReceived;                      // amount received since begin of time\n', '  uint public totalFundsDistributed;                   // amount distributed since begin of time\n', '  uint public totalFundsWithdrawn;                     // amount withdrawn since begin of time\n', '  uint public withdrawGas = 100000;                    // gas for withdrawals\n', '\n', '  modifier ownerOnly {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  modifier unlockedOnly {\n', '    require(!isLocked);\n', '    _;\n', '  }\n', '\n', '\n', '\n', '  //\n', '  // constructor\n', '  //\n', '  function OrganizeFunds() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function lock() public ownerOnly {\n', '    isLocked = true;\n', '  }\n', '\n', '  function setName(string _name) public ownerOnly {\n', '    name = _name;\n', '  }\n', '\n', '  //\n', '  // reset\n', '  // reset all activity accounts\n', '  // in case we have any funds that have not been withdrawn, they become  newly received and undistributed.\n', '  //\n', '  function reset() public ownerOnly unlockedOnly {\n', '    totalFundsReceived = this.balance;\n', '    totalFundsDistributed = 0;\n', '    totalFundsWithdrawn = 0;\n', '    activityCount = 0;\n', '    MessageEvent("ok: all accts reset");\n', '  }\n', '\n', '\n', '  //\n', '  // set withdrawal gas\n', '  // nonstandard gas is necessary to support push-withdrawals to other contract\n', '  //\n', '  function setWitdrawGas(uint256 _withdrawGas) public ownerOnly unlockedOnly {\n', '    withdrawGas = _withdrawGas;\n', '    MessageEventI("ok: withdraw gas set", withdrawGas);\n', '  }\n', '\n', '\n', '  //\n', '  // add a new activity account\n', '  //\n', '  function addActivityAccount(address _addr, uint256 _pctx10, string _name) public ownerOnly unlockedOnly {\n', '    if (activityCount >= MAX_ACCOUNTS) {\n', '      MessageEvent("err: max accounts");\n', '      return;\n', '    }\n', '    activityAccounts[activityCount].addr = _addr;\n', '    activityAccounts[activityCount].pctx10 = _pctx10;\n', '    activityAccounts[activityCount].credited = 0;\n', '    activityAccounts[activityCount].balance = 0;\n', '    activityAccounts[activityCount].name = _name;\n', '    ++activityCount;\n', '    MessageEvent("ok: acct added");\n', '  }\n', '\n', '\n', '  // ----------------------------\n', '  // get acct info\n', '  // ----------------------------\n', '  function getActivityAccountInfo(address _addr) public constant returns(uint _idx, uint _pctx10, string _name, uint _credited, uint _balance) {\n', '    for (uint i = 0; i < activityCount; i++ ) {\n', '      address addr = activityAccounts[i].addr;\n', '      if (addr == _addr) {\n', '        _idx = i;\n', '        _pctx10 = activityAccounts[i].pctx10;\n', '        _name = activityAccounts[i].name;\n', '        _credited = activityAccounts[i].credited;\n', '        _balance = activityAccounts[i].balance;\n', '        return;\n', '      }\n', '    }\n', '  }\n', '\n', '\n', '  //\n', '  // get total percentages x10\n', '  //\n', '  function getTotalPctx10() public constant returns(uint _totalPctx10) {\n', '    _totalPctx10 = 0;\n', '    for (uint i = 0; i < activityCount; i++ ) {\n', '      _totalPctx10 += activityAccounts[i].pctx10;\n', '    }\n', '  }\n', '\n', '\n', '  //\n', '  // default payable function.\n', '  // call us with plenty of gas, or catastrophe will ensue\n', '  //\n', '  function () public payable {\n', '    totalFundsReceived += msg.value;\n', '    MessageEventI("ok: received", msg.value);\n', '  }\n', '\n', '\n', '  //\n', '  // distribute funds to all activities\n', '  //\n', '  function distribute() public {\n', '    //only payout if we have more than 1000 wei\n', '    if (this.balance < TENHUNDWEI) {\n', '      return;\n', '    }\n', '    //each account gets their prescribed percentage of this holdover.\n', '    uint i;\n', '    uint pctx10;\n', '    uint acctDist;\n', '    for (i = 0; i < activityCount; i++ ) {\n', '      pctx10 = activityAccounts[i].pctx10;\n', '      acctDist = totalFundsReceived * pctx10 / TENHUNDWEI;\n', '      //we also double check to ensure that the amount credited cannot exceed the total amount due to this acct\n', '      if (activityAccounts[i].credited >= acctDist) {\n', '        acctDist = 0;\n', '      } else {\n', '        acctDist = acctDist - activityAccounts[i].credited;\n', '      }\n', '      activityAccounts[i].credited += acctDist;\n', '      activityAccounts[i].balance += acctDist;\n', '      totalFundsDistributed += acctDist;\n', '    }\n', '    MessageEvent("ok: distributed funds");\n', '  }\n', '\n', '\n', '  //\n', '  // withdraw actvity balance\n', '  // can be called by owner to push funds to another contract\n', '  //\n', '  function withdraw() public {\n', '    for (uint i = 0; i < activityCount; i++ ) {\n', '      address addr = activityAccounts[i].addr;\n', '      if (addr == msg.sender || msg.sender == owner) {\n', '        uint amount = activityAccounts[i].balance;\n', '        if (amount > 0) {\n', '          activityAccounts[i].balance = 0;\n', '          totalFundsWithdrawn += amount;\n', '          if (!addr.call.gas(withdrawGas).value(amount)()) {\n', '            //put back funds in case of err\n', '            activityAccounts[i].balance = amount;\n', '            totalFundsWithdrawn -= amount;\n', '            MessageEvent("err: error sending funds");\n', '            return;\n', '          }\n', '        }\n', '      }\n', '    }\n', '  }\n', '\n', '\n', '  //\n', '  // suicide\n', '  //\n', '  function hariKari() public ownerOnly unlockedOnly {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '}']