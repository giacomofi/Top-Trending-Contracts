['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * ERC 20 token\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface Token {\n', '\n', '    /// @return total amount of tokens\n', '    /// function totalSupply() public constant returns (uint256 supply);\n', '    /// do not declare totalSupply() here, see https://github.com/OpenZeppelin/zeppelin-solidity/issues/434\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', '\n', '/** @title Publica Pebbles (PBL contract) **/\n', '\n', 'contract Pebbles is Token {\n', '\n', '    string public constant name = "Pebbles";\n', '    string public constant symbol = "PBL";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public constant totalSupply = 33787150 * 10**18;\n', '\n', '    uint public launched = 0; // Time of locking distribution and retiring founder; 0 means not launched\n', "    address public founder = 0xa99Ab2FcC5DdFd5c1Cbe6C3D760420D2dDb63d99; // Founder's address\n", "    address public team = 0xe32A4bb42AcE38DcaAa7f23aD94c41dE0334A500; // Team's address\n", '    address public treasury = 0xc46e5D11754129790B336d62ee90b12479af7cB5; // Treasury address\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', "    uint256 public balanceTeam = 0; // Actual Team's frozen balance = balanceTeam - withdrawnTeam\n", '    uint256 public withdrawnTeam = 0;\n', "    uint256 public balanceTreasury = 0; // Treasury's frozen balance\n", '\n', '    function Pebbles() public {\n', '        balances[founder] = totalSupply;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        if (balances[msg.sender] < _value) {\n', '            return false;\n', '        }\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        if (balances[_from] < _value || allowed[_from][msg.sender] < _value) {\n', '            return false;\n', '        }\n', '        allowed[_from][msg.sender] -= _value;\n', '        balances[_from] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**@dev Launch and retire the founder */\n', '    function launch() public {\n', '        require(msg.sender == founder);\n', '        launched = block.timestamp;\n', '        founder = 0x0;\n', '    }\n', '\n', '    /**@dev Give _value PBLs to balances[team] during 5 years (20% per year) after launch\n', '     * @param _value Number of PBLs\n', '     */\n', '    function reserveTeam(uint256 _value) public {\n', '        require(msg.sender == founder);\n', '        require(balances[founder] >= _value);\n', '        balances[founder] -= _value;\n', '        balanceTeam += _value;\n', '    }\n', '\n', '    /**@dev Give _value PBLs to balances[treasury] after 3 months after launch\n', '     * @param _value Number of PBLs\n', '     */\n', '    function reserveTreasury(uint256 _value) public {\n', '        require(msg.sender == founder);\n', '        require(balances[founder] >= _value);\n', '        balances[founder] -= _value;\n', '        balanceTreasury += _value;\n', '    }\n', '\n', '    /**@dev Unfreeze some tokens for team and treasury, if the time has come\n', '     */\n', '    function withdrawDeferred() public {\n', '        require(msg.sender == team);\n', '        require(launched != 0);\n', '        uint yearsSinceLaunch = (block.timestamp - launched) / 1 years;\n', '        if (yearsSinceLaunch < 5) {\n', '            uint256 teamTokensAvailable = balanceTeam / 5 * yearsSinceLaunch;\n', '            balances[team] += teamTokensAvailable - withdrawnTeam;\n', '            withdrawnTeam = teamTokensAvailable;\n', '        } else {\n', '            balances[team] += balanceTeam - withdrawnTeam;\n', '            balanceTeam = 0;\n', '            withdrawnTeam = 0;\n', '            team = 0x0;\n', '        }\n', '        if (block.timestamp - launched >= 90 days) {\n', '            balances[treasury] += balanceTreasury;\n', '            balanceTreasury = 0;\n', '            treasury = 0x0;\n', '        }\n', '    }\n', '\n', '    function() public { // no direct purchases\n', '        revert();\n', '    }\n', '\n', '}']