['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address who) public constant returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '    mapping (address => uint256) balances;\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public  constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        var _allowance = allowed[_from][msg.sender];\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '\n', '    event MintFinished();\n', '\n', '\n', '    bool public mintingFinished = false;\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function destroy(uint256 _amount, address destroyer) public onlyOwner {\n', '        uint256 myBalance = balances[destroyer];\n', '        if (myBalance > _amount) {\n', '            totalSupply = totalSupply.sub(_amount);\n', '            balances[destroyer] = myBalance.sub(_amount);\n', '        }\n', '        else {\n', '            if (myBalance != 0) totalSupply = totalSupply.sub(myBalance);\n', '            balances[destroyer] = 0;\n', '        }\n', '    }\n', '\n', '    function finishMinting() public onlyOwner returns (bool) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract Crowdsale is Ownable {\n', '    using SafeMath for uint256;\n', '    // The token being sold\n', '    ObizcoinCrowdsaleToken public token;\n', '    // address where funds are collected\n', '    address public wallet;\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount, uint mytime);\n', '\n', '    function Crowdsale()public {\n', '        token = createTokenContract();\n', '        wallet = msg.sender;\n', '    }\n', '\n', '    function setNewWallet(address newWallet) public onlyOwner {\n', '        require(newWallet != 0x0);\n', '        wallet = newWallet;\n', '    }\n', '\n', '    function createTokenContract() internal returns (ObizcoinCrowdsaleToken) {\n', '        return new ObizcoinCrowdsaleToken();\n', '    }\n', '    // fallback function can be used to buy tokens\n', '    function() public payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    function profitSharing() payable public {\n', '        uint256 weiAmount = msg.value;\n', '        uint256 ballanceOfHolder;\n', '        for (uint i = 0; i < holders.length; i++)\n', '        {\n', '            ballanceOfHolder = token.balanceOf(holders[i]);\n', '            if (ballanceOfHolder > 0) {\n', '                holders[i].transfer(ballanceOfHolder.mul(weiAmount).div(token.totalSupply()));\n', '            }\n', '        }\n', '    }\n', '\n', '    function destroyMyToken(uint256 amount) public onlyOwner {\n', '        token.destroy(amount.mul(1000000000000000000), msg.sender);\n', '    }\n', '\n', '    uint time0 = 1512970200; // now; // 11th dec, 2017 at 05:30 hrs UTC\n', '    //uint time0 = block.timestamp;\n', '    uint time1 = time0 + 15 days;\n', '\n', '    uint time2 = time1 + 44 days + 5 hours + 5 minutes; // 24th Jan,2018 at 11:00 hrs UTC\n', '\n', '    uint time3 = time0 + 49 days;\n', '\n', '    uint time4 = time3 + 1 weeks;\n', '\n', '    uint time5 = time3 + 2 weeks;\n', '\n', '    uint time6 = time3 + 3 weeks;\n', '\n', '    uint time7 = time2 + 34 days;\n', '\n', '    // low level token purchase function\n', '    function buyTokens(address beneficiary) public payable {\n', '        require(beneficiary != 0x0);\n', '        require(validPurchase());\n', '        require(!hasEnded());\n', '        uint256 weiAmount = msg.value;\n', '        uint256 tokens;\n', '        // calculate token amount to be created\n', '\n', '        if (block.timestamp >= time0 && block.timestamp < time2) tokens = weiAmount.mul(11000);\n', '        else if (block.timestamp >= time3 && block.timestamp < time7) tokens = weiAmount.mul(10000);\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        token.mint(beneficiary, tokens);\n', '        addNewHolder(beneficiary);\n', '        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens, block.timestamp);\n', '        forwardFunds();\n', '    }\n', '\n', '    function mintTokens(address beneficiary, uint256 tokens) internal {\n', '        uint256 weiAmount;\n', '        if (block.timestamp >= time0 && block.timestamp < time2) weiAmount = tokens.div(11000);\n', '        else if (block.timestamp >= time3 && block.timestamp < time7) weiAmount = tokens.div(10000);\n', '\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        token.mint(beneficiary, tokens);\n', '        addNewHolder(beneficiary);\n', '        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens, block.timestamp);\n', '    }\n', '\n', '    // send ether to the fund collection wallet\n', '    // override to create custom fund forwarding mechanisms\n', '    function forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '    // @return true if the transaction can buy tokens\n', '    function validPurchase() internal constant returns (bool) {\n', '        return msg.value != 0;\n', '    }\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public constant returns (bool) {\n', '        return block.timestamp < time0 || (block.timestamp > time2 && block.timestamp < time3) || block.timestamp > time7;\n', '    }\n', '\n', '    mapping (address => bool) isHolder;\n', '\n', '    address[] public holders;\n', '\n', '    function addNewHolder(address newHolder) internal {\n', '        if (!isHolder[newHolder]) {\n', '            holders.push(newHolder);\n', '            isHolder[newHolder] = true;\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'contract ObizcoinCrowdsaleToken is MintableToken {\n', '    string public name;\n', '\n', '    string public symbol;\n', '\n', '    uint8 public decimals;\n', '\n', '    function ObizcoinCrowdsaleToken() public {\n', '        name = "OBZ ICO TOKEN SALE";\n', '        symbol = "OBZ";\n', '        decimals = 18;\n', '    }\n', '}\n', '\n', '\n', 'contract ObizcoinCrowdsale is Crowdsale {\n', '\n', '    uint256 public investors;\n', '\n', '    ProfitSharingObizcoin public profitSharingContract;\n', '\n', '    function ObizcoinCrowdsale () public\n', '    Crowdsale()\n', '    {\n', '        investors = 0;\n', '        profitSharingContract = new ProfitSharingObizcoin();\n', '    }\n', '\n', '\n', '    function buyObizcoinTokens(address _sender) public payable {\n', '        investors++;\n', '        buyTokens(_sender);\n', '    }\n', '\n', '    function mintObizcoinTokens(address beneficiary, uint256 tokens) public onlyOwner {\n', '        investors++;\n', '        mintTokens(beneficiary, tokens.mul(1000000000000000000));\n', '    }\n', '\n', '    function() public payable {\n', '        buyObizcoinTokens(msg.sender);\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract ProfitSharingObizcoin is Ownable {\n', '\n', '    ObizcoinCrowdsale crowdsale;\n', '\n', '    function ProfitSharingObizcoin()public {\n', '        crowdsale = ObizcoinCrowdsale(msg.sender);\n', '    }\n', '\n', '    function() public payable {\n', '        crowdsale.profitSharing.value(msg.value)();\n', '    }\n', '}']