['pragma solidity ^0.4.11;\n', '\n', '/* taking ideas from FirstBlood token */\n', 'contract SafeMath {\n', '\n', 'function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n', 'uint256 z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '\n', '}\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/*  ERC 20 token */\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract test4 is StandardToken, SafeMath {\n', '\n', '    // metadata\n', '    string public constant name = "test4";\n', '    string public constant symbol = "tt4";\n', '    uint256 public constant decimals = 18;\n', '    string public version = "1.0";\n', '\n', '    // contracts\n', '    address public ethFundDeposit;      // deposit address for ETH for Phoenix\n', '    address public PhoenixFundDeposit;      // deposit address for depositing tokens for owners\n', '    address public PhoenixExchangeDeposit;      // deposit address depositing tokens for promotion, Exchange\n', '\n', '    // crowdsale parameters\n', '    bool public isFinalized;              // switched to true in operational state\n', '    bool public saleStarted; //switched to true during ICO\n', '    uint public firstWeek;\n', '    uint public secondWeek;\n', '    uint public thirdWeek;\n', '    uint public fourthWeek;\n', '    uint256 public bonus;\n', '    uint256 public constant PhoenixFund = 500 * (10**5) * 10**decimals;   // 12.5m Phoenix reserved for Owners\n', '    uint256 public constant PhoenixExchangeFund = 500 * (10**5) * 10**decimals;   // 12.5m Phoenix reserved for Promotion, Exchange etc.\n', '    uint256 public tokenExchangeRate = 55; //  Phoenix tokens per 1 ETH\n', '    uint256 public constant tokenCreationCap =  200 * (10**6) * 10**decimals;\n', '    uint256 public constant tokenPreSaleCap =  1500 * (10**5) * 10**decimals;\n', '\n', '\n', '    // events\n', '    event CreatePHX(address indexed _to, uint256 _value);\n', '\n', '    // constructor\n', '    function test4()\n', '    {\n', '      isFinalized = false;                   //controls pre through crowdsale state\n', '      saleStarted = false;\n', '      PhoenixFundDeposit = 0x1e8973b531f3eAb8a998C9d9eB89C8d51f90575D;\n', '      PhoenixExchangeDeposit = 0x1F7cA22AD1BceD2FC624a3086b4b77BB1ec575E8;\n', '      ethFundDeposit = 0xE61686aA75f59328C49b51e9ffb907D9680fC3Fb;\n', '      totalSupply = PhoenixFund + PhoenixExchangeFund;\n', '      balances[PhoenixFundDeposit] = PhoenixFund;    // Deposit tokens for Owners\n', '      balances[PhoenixExchangeDeposit] = PhoenixExchangeFund;    // Deposit tokens for Exchange and Promotion\n', '      CreatePHX(PhoenixFundDeposit, PhoenixFund);  // logs Owners deposit\n', '      CreatePHX(PhoenixExchangeDeposit, PhoenixExchangeFund);  // logs Exchange deposit\n', '    }\n', '\n', '    /// @dev Accepts ether and creates new BAT tokens.\n', '    function () payable {\n', '      bool isPreSale = true;\n', '      if (isFinalized) throw;\n', '      if (!saleStarted) throw;\n', '      if (msg.value == 0) throw;\n', '      //change exchange rate based on duration\n', '      if (now > firstWeek && now < secondWeek){\n', '        tokenExchangeRate = 41;\n', '      }\n', '      else if (now > secondWeek && now < thirdWeek){\n', '        tokenExchangeRate = 29;\n', '      }\n', '      else if (now > thirdWeek && now < fourthWeek){\n', '        tokenExchangeRate = 25;\n', '      }\n', '      else if (now > fourthWeek){\n', '        tokenExchangeRate = 18;\n', '        isPreSale = false;\n', '      }\n', '      //create tokens\n', "      uint256 tokens = safeMult(msg.value, tokenExchangeRate); // check that we're not over totals\n", '      uint256 checkedSupply = safeAdd(totalSupply, tokens);\n', '\n', '      // return money if something goes wrong\n', '      if(isPreSale && tokenPreSaleCap < checkedSupply) throw;\n', "      if (tokenCreationCap < checkedSupply) throw;  // odd fractions won't be found\n", '      totalSupply = checkedSupply;\n', '      //All good. start the transfer\n', '      balances[msg.sender] += tokens;  // safeAdd not needed\n', '      CreatePHX(msg.sender, tokens);  // logs token creation\n', '    }\n', '\n', '    /// Phoenix Ends the funding period and sends the ETH home\n', '    function finalize() external {\n', '      if (isFinalized) throw;\n', '      if (msg.sender != ethFundDeposit) throw; // locks finalize to the ultimate ETH owner\n', '      if (totalSupply < tokenCreationCap){\n', '        uint256 remainingTokens = safeSubtract(tokenCreationCap, totalSupply);\n', '        uint256 checkedSupply = safeAdd(totalSupply, remainingTokens);\n', '        if (tokenCreationCap < checkedSupply) throw;\n', '        totalSupply = checkedSupply;\n', '        balances[msg.sender] += remainingTokens;\n', '        CreatePHX(msg.sender, remainingTokens);\n', '      }\n', '      // move to operational\n', '      if(!ethFundDeposit.send(this.balance)) throw;\n', '      isFinalized = true;  // send the eth to Phoenix\n', '    }\n', '\n', '    function startSale() external {\n', '      if(saleStarted) throw;\n', '      if (msg.sender != ethFundDeposit) throw; // locks start sale to the ultimate ETH owner\n', '      firstWeek = now + 1 weeks; //sets duration of first cutoff\n', '      secondWeek = firstWeek + 1 weeks; //sets duration of second cutoff\n', '      thirdWeek = secondWeek + 1 weeks; //sets duration of third cutoff\n', '      fourthWeek = thirdWeek + 1 weeks; //sets duration of fourth cutoff\n', '      saleStarted = true; //start the sale\n', '    }\n', '\n', '\n', '}']