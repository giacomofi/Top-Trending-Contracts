['pragma solidity ^0.4.15;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title  \n', ' * @dev DatTokenSale is a contract for managing a token crowdsale.\n', ' * DatTokenSale have a start and end date, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a refundable valut \n', ' * as they arrive.\n', ' */\n', 'contract DatumTokenSale is  Ownable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  address public whiteListControllerAddress;\n', '\n', '  //lookup addresses for whitelist\n', '  mapping (address => bool) public whiteListAddresses;\n', '\n', '  //lookup addresses for special bonuses\n', '  mapping (address => uint) public bonusAddresses;\n', '\n', '  //loopup for max token amount per user allowed\n', '  mapping(address => uint256) public maxAmountAddresses;\n', '\n', '  //loopup for balances\n', '  mapping(address => uint256) public balances;\n', '\n', '  // start and end date where investments are allowed (both inclusive)\n', '  uint256 public startDate = 1509282000;//29 Oct 2017 13:00:00 +00:00 UTC\n', '  //uint256 public startDate = 1509210891;//29 Oct 2017 13:00:00 +00:00 UTC\n', '  \n', '  uint256 public endDate = 1511960400; //29 Nov 2017 13:00:00 +00:00 UTC\n', '\n', '  // Minimum amount to participate (wei for internal usage)\n', '  uint256 public minimumParticipationAmount = 300000000000000000 wei; //0.1 ether\n', '\n', '  // Maximum amount to participate\n', '  uint256 public maximalParticipationAmount = 1000 ether; //1000 ether\n', '\n', '  // address where funds are collected\n', '  address wallet;\n', '\n', '  // how many token units a buyer gets per ether\n', '  uint256 rate = 25000;\n', '\n', '  // amount of raised money in wei\n', '  uint256 private weiRaised;\n', '\n', '  //flag for final of crowdsale\n', '  bool public isFinalized = false;\n', '\n', '  //cap for the sale in ether\n', '  uint256 public cap = 61200 ether; //61200 ether\n', '\n', '  //total tokenSupply\n', '  uint256 public totalTokenSupply = 1530000000 ether;\n', '\n', '  // amount of tokens sold\n', '  uint256 public tokensInWeiSold;\n', '\n', '  uint private bonus1Rate = 28750;\n', '  uint private bonus2Rate = 28375;\n', '  uint private bonus3Rate = 28000;\n', '  uint private bonus4Rate = 27625;\n', '  uint private bonus5Rate = 27250;\n', '  uint private bonus6Rate = 26875;\n', '  uint private bonus7Rate = 26500;\n', '  uint private bonus8Rate = 26125;\n', '  uint private bonus9Rate = 25750;\n', '  uint private bonus10Rate = 25375;\n', '   \n', '  event Finalized();\n', '  /**\n', '  * @notice Log an event for each funding contributed during the public phase\n', '  * @notice Events are not logged when the constructor is being executed during\n', '  *         deployment, so the preallocations will not be logged\n', '  */\n', '  event LogParticipation(address indexed sender, uint256 value);\n', '  \n', '\n', '  /**\n', '  * @notice Log an event for each funding contributed converted to earned tokens\n', '  * @notice Events are not logged when the constructor is being executed during\n', '  *         deployment, so the preallocations will not be logged\n', '  */\n', '  event LogTokenReceiver(address indexed sender, uint256 value);\n', '\n', '\n', '  /**\n', '  * @notice Log an event for each funding contributed converted to earned tokens\n', '  * @notice Events are not logged when the constructor is being executed during\n', '  *         deployment, so the preallocations will not be logged\n', '  */\n', '  event LogTokenRemover(address indexed sender, uint256 value);\n', '  \n', '  function DatumTokenSale(address _wallet) payable {\n', '    wallet = _wallet;\n', '  }\n', '\n', '  function () payable {\n', '    require(whiteListAddresses[msg.sender]);\n', '    require(validPurchase());\n', '\n', '    buyTokens(msg.value);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(uint256 amount) internal {\n', '    //get ammount in wei\n', '    uint256 weiAmount = amount;\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    // get token amount\n', '    uint256 tokens = getTokenAmount(weiAmount);\n', '    tokensInWeiSold = tokensInWeiSold.add(tokens);\n', '\n', '    //fire token receive event\n', '    LogTokenReceiver(msg.sender, tokens);\n', '\n', '    //update balances for user\n', '    balances[msg.sender] = balances[msg.sender].add(tokens);\n', '\n', '    //fire eth purchase event\n', '    LogParticipation(msg.sender,msg.value);\n', '\n', '    //forward funds to wallet\n', '    forwardFunds(amount);\n', '  }\n', '\n', '\n', '  // manually update the tokens sold count to reserve tokens or update stats if other way bought\n', '  function reserveTokens(address _address, uint256 amount)\n', '  {\n', '    require(msg.sender == whiteListControllerAddress);\n', '\n', '    //update balances for user\n', '    balances[_address] = balances[_address].add(amount);\n', '\n', '    //fire event\n', '    LogTokenReceiver(_address, amount);\n', '\n', '    tokensInWeiSold = tokensInWeiSold.add(amount);\n', '  }\n', '\n', '  //release tokens from sold statistist, used if the account was not verified with KYC\n', '  function releaseTokens(address _address, uint256 amount)\n', '  {\n', '    require(msg.sender == whiteListControllerAddress);\n', '\n', '    balances[_address] = balances[_address].sub(amount);\n', '\n', '    //fire event\n', '    LogTokenRemover(_address, amount);\n', '\n', '    tokensInWeiSold = tokensInWeiSold.sub(amount);\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds(uint256 amount) internal {\n', '    wallet.transfer(amount);\n', '  }\n', '\n', '  // should be called after crowdsale ends or to emergency stop the sale\n', '  function finalize() onlyOwner {\n', '    require(!isFinalized);\n', '    Finalized();\n', '    isFinalized = true;\n', '  }\n', '\n', '  function setWhitelistControllerAddress(address _controller) onlyOwner\n', '  {\n', '     whiteListControllerAddress = _controller;\n', '  }\n', '\n', '  function addWhitelistAddress(address _addressToAdd)\n', '  {\n', '      require(msg.sender == whiteListControllerAddress);\n', '      whiteListAddresses[_addressToAdd] = true;\n', '  }\n', '\n', '  function addSpecialBonusConditions(address _address, uint _bonusPercent, uint256 _maxAmount) \n', '  {\n', '      require(msg.sender == whiteListControllerAddress);\n', '\n', '      bonusAddresses[_address] = _bonusPercent;\n', '      maxAmountAddresses[_address] = _maxAmount;\n', '  }\n', '\n', '  function removeSpecialBonusConditions(address _address) \n', '  {\n', '      require(msg.sender == whiteListControllerAddress);\n', '\n', '      delete bonusAddresses[_address];\n', '      delete maxAmountAddresses[_address];\n', '  }\n', '\n', '  function addWhitelistAddresArray(address[] _addressesToAdd)\n', '  {\n', '      require(msg.sender == whiteListControllerAddress);\n', '\n', '      for (uint256 i = 0; i < _addressesToAdd.length;i++) \n', '      {\n', '        whiteListAddresses[_addressesToAdd[i]] = true;\n', '      }\n', '      \n', '  }\n', '\n', '  function removeWhitelistAddress(address _addressToAdd)\n', '  {\n', '      require(msg.sender == whiteListControllerAddress);\n', '\n', '      delete whiteListAddresses[_addressToAdd];\n', '  }\n', '\n', '\n', '    function getTokenAmount(uint256 weiAmount) internal returns (uint256 tokens){\n', '        //add bonus\n', '        uint256 bonusRate = getBonus();\n', '\n', '        //check for special bonus and override rate if exists\n', '        if(bonusAddresses[msg.sender] != 0)\n', '        {\n', '            uint bonus = bonusAddresses[msg.sender];\n', '            //TODO: CALUC SHCHECK\n', '            bonusRate = rate.add((rate.mul(bonus)).div(100));\n', '        } \n', '\n', '        // calculate token amount to be created\n', '        uint256 weiTokenAmount = weiAmount.mul(bonusRate);\n', '        return weiTokenAmount;\n', '    }\n', '\n', '\n', '    //When a user buys our token they will recieve a bonus depedning on time:,\n', '    function getBonus() internal constant returns (uint256 amount){\n', '        uint diffInSeconds = now - startDate;\n', '        uint diffInHours = (diffInSeconds/60)/60;\n', '        \n', '        // 10/29/2017 - 11/1/2017\n', '        if(diffInHours < 72){\n', '            return bonus1Rate;\n', '        }\n', '\n', '        // 11/1/2017 - 11/4/2017\n', '        if(diffInHours >= 72 && diffInHours < 144){\n', '            return bonus2Rate;\n', '        }\n', '\n', '        // 11/4/2017 - 11/7/2017\n', '        if(diffInHours >= 144 && diffInHours < 216){\n', '            return bonus3Rate;\n', '        }\n', '\n', '        // 11/7/2017 - 11/10/2017\n', '        if(diffInHours >= 216 && diffInHours < 288){\n', '            return bonus4Rate;\n', '        }\n', '\n', '         // 11/10/2017 - 11/13/2017\n', '        if(diffInHours >= 288 && diffInHours < 360){\n', '            return bonus5Rate;\n', '        }\n', '\n', '         // 11/13/2017 - 11/16/2017\n', '        if(diffInHours >= 360 && diffInHours < 432){\n', '            return bonus6Rate;\n', '        }\n', '\n', '         // 11/16/2017 - 11/19/2017\n', '        if(diffInHours >= 432 && diffInHours < 504){\n', '            return bonus7Rate;\n', '        }\n', '\n', '         // 11/19/2017 - 11/22/2017\n', '        if(diffInHours >= 504 && diffInHours < 576){\n', '            return bonus8Rate;\n', '        }\n', '\n', '          // 11/22/2017 - 11/25/2017\n', '        if(diffInHours >= 576 && diffInHours < 648){\n', '            return bonus9Rate;\n', '        }\n', '\n', '          // 11/25/2017 - 11/28/2017\n', '        if(diffInHours >= 648 && diffInHours < 720){\n', '            return bonus10Rate;\n', '        }\n', '\n', '        return rate; \n', '    }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  // check for valid time period, min amount and within cap\n', '  function validPurchase() internal constant returns (bool) {\n', '    uint256 tokenAmount = getTokenAmount(msg.value);\n', '    bool withinPeriod = startDate <= now && endDate >= now;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    bool minAmount = msg.value >= minimumParticipationAmount;\n', '    bool maxAmount = msg.value <= maximalParticipationAmount;\n', '    bool withTokensSupply = tokensInWeiSold.add(tokenAmount) <= totalTokenSupply;\n', '    //bool withinCap = weiRaised.add(msg.value) <= cap;\n', '    bool withMaxAmountForAddress = maxAmountAddresses[msg.sender] == 0 || balances[msg.sender].add(tokenAmount) <= maxAmountAddresses[msg.sender];\n', '\n', '    if(maxAmountAddresses[msg.sender] != 0)\n', '    {\n', '      maxAmount = balances[msg.sender].add(tokenAmount) <= maxAmountAddresses[msg.sender];\n', '    }\n', '\n', '    return withinPeriod && nonZeroPurchase && minAmount && !isFinalized && withTokensSupply && withMaxAmountForAddress && maxAmount;\n', '  }\n', '\n', '    // @return true if the goal is reached\n', '  function capReached() public constant returns (bool) {\n', '    return tokensInWeiSold >= totalTokenSupply;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return isFinalized;\n', '  }\n', '\n', '}']