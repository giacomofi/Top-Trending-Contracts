['pragma solidity ^0.4.10;\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract CccTokenIco is StandardToken {\n', '    using SafeMath for uint256;\n', '    string public name = "Crypto Credit Card Token";\n', '    string public symbol = "CCCR";\n', '    uint8 public constant decimals = 6;\n', '    \n', '    uint256 public cntMembers = 0;\n', '    uint256 public totalSupply = 200000000 * (uint256(10) ** decimals);\n', '    uint256 public totalRaised;\n', '\n', '    uint256 public startTimestamp;\n', '    uint256 public durationSeconds = uint256(86400 * 7 * 11);\n', '\n', '    uint256 public minCap = 3000000 * (uint256(10) ** decimals);\n', '    uint256 public maxCap = 200000000 * (uint256(10) ** decimals);\n', '    \n', '    uint256 public avgRate = uint256(uint256(10)**(18-decimals)).div(460);\n', '\n', '    address public stuff = 0x0CcCb9bAAdD61F9e0ab25bD782765013817821bD;\n', '    address public teama = 0xfc6851324e2901b3ea6170a90Cc43BFe667D617A;\n', '    address public teamb = 0x21f0F5E81BEF4dc696C6BF0196c60a1aC797f953;\n', '    address public teamc = 0xE8726942a46E6C6B3C1F061c14a15c0053A97B6b;\n', '    address public founder = 0xbb2efFab932a4c2f77Fc1617C1a563738D71B0a7;\n', '    address public baseowner;\n', '\n', '    event LogTransfer(address sender, address to, uint amount);\n', '    event Clearing(address to, uint256 amount);\n', '\n', '    function CccTokenIco(\n', '    ) \n', '    {\n', '        cntMembers = 0;\n', '        startTimestamp = now - 14 days;\n', '        baseowner = msg.sender;\n', '        balances[baseowner] = totalSupply;\n', '        Transfer(0x0, baseowner, totalSupply);\n', '    }\n', '\n', '    function bva(address partner, uint256 value, uint256 rate, address adviser) isIcoOpen payable public \n', '    {\n', '      uint256 tokenAmount = calculateTokenAmount(value);\n', '      if(msg.value != 0)\n', '      {\n', '        tokenAmount = calculateTokenCount(msg.value,avgRate);\n', '      }else\n', '      {\n', '        require(msg.sender == stuff);\n', '        avgRate = avgRate.add(rate).div(2);\n', '      }\n', '      if(msg.value != 0)\n', '      {\n', '        Clearing(teama, msg.value.mul(7).div(100));\n', '        teama.transfer(msg.value.mul(7).div(100));\n', '        Clearing(teamb, msg.value.mul(12).div(1000));\n', '        teamb.transfer(msg.value.mul(12).div(1000));\n', '        Clearing(teamc, msg.value.mul(9).div(1000));\n', '        teamc.transfer(msg.value.mul(9).div(1000));\n', '        Clearing(stuff, msg.value.mul(9).div(1000));\n', '        stuff.transfer(msg.value.mul(9).div(1000));\n', '        Clearing(founder, msg.value.mul(70).div(100));\n', '        founder.transfer(msg.value.mul(70).div(100));\n', '        if(partner != adviser)\n', '        {\n', '          Clearing(adviser, msg.value.mul(20).div(100));\n', '          adviser.transfer(msg.value.mul(20).div(100));\n', '        }else\n', '        {\n', '          Clearing(founder, msg.value.mul(20).div(100));\n', '          founder.transfer(msg.value.mul(20).div(100));\n', '        } \n', '      }\n', '      totalRaised = totalRaised.add(tokenAmount);\n', '      balances[baseowner] = balances[baseowner].sub(tokenAmount);\n', '      balances[partner] = balances[partner].add(tokenAmount);\n', '      Transfer(baseowner, partner, tokenAmount);\n', '      cntMembers = cntMembers.add(1);\n', '    }\n', '    \n', '    function() isIcoOpen payable public\n', '    {\n', '      if(msg.value != 0)\n', '      {\n', '        uint256 tokenAmount = calculateTokenCount(msg.value,avgRate);\n', '        Clearing(teama, msg.value.mul(7).div(100));\n', '        teama.transfer(msg.value.mul(7).div(100));\n', '        Clearing(teamb, msg.value.mul(12).div(1000));\n', '        teamb.transfer(msg.value.mul(12).div(1000));\n', '        Clearing(teamc, msg.value.mul(9).div(1000));\n', '        teamc.transfer(msg.value.mul(9).div(1000));\n', '        Clearing(stuff, msg.value.mul(9).div(1000));\n', '        stuff.transfer(msg.value.mul(9).div(1000));\n', '        Clearing(founder, msg.value.mul(90).div(100));\n', '        founder.transfer(msg.value.mul(90).div(100));\n', '        totalRaised = totalRaised.add(tokenAmount);\n', '        balances[baseowner] = balances[baseowner].sub(tokenAmount);\n', '        balances[msg.sender] = balances[msg.sender].add(tokenAmount);\n', '        Transfer(baseowner, msg.sender, tokenAmount);\n', '        cntMembers = cntMembers.add(1);\n', '      }\n', '    }\n', '\n', '    function calculateTokenAmount(uint256 count) constant returns(uint256) \n', '    {\n', '        uint256 icoDeflator = getIcoDeflator();\n', '        return count.mul(icoDeflator).div(100);\n', '    }\n', '\n', '    function calculateTokenCount(uint256 weiAmount, uint256 rate) constant returns(uint256) \n', '    {\n', '        if(rate==0)revert();\n', '        uint256 icoDeflator = getIcoDeflator();\n', '        return weiAmount.div(rate).mul(icoDeflator).div(100);\n', '    }\n', '\n', '    function getIcoDeflator() constant returns (uint256)\n', '    {\n', '        if (now <= startTimestamp + 15 days) \n', '        {\n', '            return 138;\n', '        }else if (now <= startTimestamp + 29 days) \n', '        {\n', '            return 123;\n', '        }else if (now <= startTimestamp + 43 days) \n', '        {\n', '            return 115;\n', '        }else \n', '        {\n', '            return 109;\n', '        }\n', '    }\n', '\n', '    function finalize(uint256 weiAmount) isIcoFinished isStuff payable public\n', '    {\n', '      if(msg.sender == founder)\n', '      {\n', '        founder.transfer(weiAmount);\n', '      }\n', '    }\n', '\n', '    function transfer(address _to, uint _value) isIcoFinished returns (bool) \n', '    {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) isIcoFinished returns (bool) \n', '    {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    modifier isStuff() \n', '    {\n', '        require(msg.sender == stuff || msg.sender == founder);\n', '        _;\n', '    }\n', '\n', '    modifier isIcoOpen() \n', '    {\n', '        require(now >= startTimestamp);//15.11-29.11 pre ICO\n', '        require(now <= startTimestamp + 14 days || now >= startTimestamp + 19 days);//gap 29.11-04.12\n', '        require(now <= (startTimestamp + durationSeconds) || totalRaised < minCap);//04.12-02.02 ICO\n', '        require(totalRaised <= maxCap);\n', '        _;\n', '    }\n', '\n', '    modifier isIcoFinished() \n', '    {\n', '        require(now >= startTimestamp);\n', '        require(totalRaised >= maxCap || (now >= (startTimestamp + durationSeconds) && totalRaised >= minCap));\n', '        _;\n', '    }\n', '\n', '}']