['pragma solidity 0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' *\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', 'contract CostumeToken is PausableToken {\n', '  using SafeMath for uint256;\n', '\n', '  // Token Details\n', "  string public constant name = 'Costume Token';\n", "  string public constant symbol = 'COST';\n", '  uint8 public constant decimals = 18;\n', '\n', '  // 200 Million Total Supply\n', '  uint256 public constant totalSupply = 200e24;\n', '\n', '  // 120 Million - Supply not for Crowdsale\n', '  uint256 public initialSupply = 120e24;\n', '\n', '  // 80 Million - Crowdsale limit\n', '  uint256 public limitCrowdsale = 80e24;\n', '\n', '  // Tokens Distributed - Crowdsale Buyers\n', '  uint256 public tokensDistributedCrowdsale = 0;\n', '\n', '  // The address of the crowdsale\n', '  address public crowdsale;\n', '\n', '  // -- MODIFIERS\n', '\n', '  // Modifier, must be called from Crowdsale contract\n', '  modifier onlyCrowdsale() {\n', '    require(msg.sender == crowdsale);\n', '    _;\n', '  }\n', '\n', '  // Constructor - send initial supply to owner\n', '  function CostumeToken() public {\n', '    balances[msg.sender] = initialSupply;\n', '  }\n', '\n', '  // Set crowdsale address, only by owner\n', '  // @param - crowdsale address\n', '  function setCrowdsaleAddress(address _crowdsale) external onlyOwner whenNotPaused {\n', '    require(crowdsale == address(0));\n', '    require(_crowdsale != address(0));\n', '    crowdsale = _crowdsale;\n', '  }\n', '\n', '  // Distribute tokens, only by crowdsale\n', '  // @param _buyer The buyer address\n', '  // @param tokens The amount of tokens to send to that address\n', '  function distributeCrowdsaleTokens(address _buyer, uint tokens) external onlyCrowdsale whenNotPaused {\n', '    require(_buyer != address(0));\n', '    require(tokens > 0);\n', '\n', '    require(tokensDistributedCrowdsale < limitCrowdsale);\n', '    require(tokensDistributedCrowdsale.add(tokens) <= limitCrowdsale);\n', '\n', '    // Tick up the distributed amount\n', '    tokensDistributedCrowdsale = tokensDistributedCrowdsale.add(tokens);\n', '\n', '    // Add the funds to buyer address\n', '    balances[_buyer] = balances[_buyer].add(tokens);\n', '  }\n', '\n', '}\n', '\n', 'contract Crowdsale is Pausable {\n', '   using SafeMath for uint256;\n', '\n', '   // The token being sold\n', '   CostumeToken public token;\n', '\n', '   // 12.15.2017 - 12:00:00 GMT\n', '   uint256 public startTime = 1513339200;\n', '\n', '   // 1.31.2018 - 12:00:00 GMT\n', '   uint256 public endTime = 1517400000;\n', '\n', '   // Costume Wallet\n', '   address public wallet;\n', '\n', '   // Set tier rates\n', '   uint256 public rate = 3400;\n', '   uint256 public rateTier2 = 3200;\n', '   uint256 public rateTier3 = 3000;\n', '   uint256 public rateTier4 = 2800;\n', '\n', '   // The maximum amount of wei for each tier\n', '   // 20 Million Intervals\n', '   uint256 public limitTier1 = 20e24;\n', '   uint256 public limitTier2 = 40e24;\n', '   uint256 public limitTier3 = 60e24;\n', '\n', '   // 80 Million Tokens available for crowdsale\n', '   uint256 public constant maxTokensRaised = 80e24;\n', '\n', '   // The amount of wei raised\n', '   uint256 public weiRaised = 0;\n', '\n', '   // The amount of tokens raised\n', '   uint256 public tokensRaised = 0;\n', '\n', '   // 0.1 ether minumum per contribution\n', '   uint256 public constant minPurchase = 100 finney;\n', '\n', '   // Crowdsale tokens not purchased\n', '   bool public remainingTransfered = false;\n', '\n', '   // The number of transactions\n', '   uint256 public numberOfTransactions;\n', '\n', '   // -- DATA-SETS\n', '\n', '   // Amount each address paid for tokens\n', '   mapping(address => uint256) public crowdsaleBalances;\n', '\n', '   // Amount of tokens each address received\n', '   mapping(address => uint256) public tokensBought;\n', '\n', '   // -- EVENTS\n', '\n', '   // Trigger TokenPurchase event\n', '   event TokenPurchase(address indexed buyer, uint256 value, uint256 amountOfTokens);\n', '\n', '   // Crowdsale Ended\n', '   event Finalized();\n', '\n', '   // -- MODIFIERS\n', '\n', '   // Only allow the execution of the function before the crowdsale starts\n', '   modifier beforeStarting() {\n', '      require(now < startTime);\n', '      _;\n', '   }\n', '\n', '   // Main Constructor\n', '   // @param _wallet - Fund wallet address\n', '   // @param _tokenAddress - Associated token address\n', '   // @param _startTime - Crowdsale start time\n', '   // @param _endTime - Crowdsale end time\n', '   function Crowdsale(\n', '      address _wallet,\n', '      address _tokenAddress,\n', '      uint256 _startTime,\n', '      uint256 _endTime\n', '   ) public {\n', '      require(_wallet != address(0));\n', '      require(_tokenAddress != address(0));\n', '\n', '      if (_startTime > 0 && _endTime > 0) {\n', '          require(_startTime < _endTime);\n', '      }\n', '\n', '      wallet = _wallet;\n', '      token = CostumeToken(_tokenAddress);\n', '\n', '      if (_startTime > 0) {\n', '          startTime = _startTime;\n', '      }\n', '\n', '      if (_endTime > 0) {\n', '          endTime = _endTime;\n', '      }\n', '\n', '   }\n', '\n', '   /// Buy tokens fallback\n', '   function () external payable {\n', '      buyTokens();\n', '   }\n', '\n', '   /// Buy tokens main\n', '   function buyTokens() public payable whenNotPaused {\n', '      require(validPurchase());\n', '\n', '      uint256 tokens = 0;\n', '      uint256 amountPaid = adjustAmountValue();\n', '\n', '      if (tokensRaised < limitTier1) {\n', '\n', '         // Tier 1\n', '         tokens = amountPaid.mul(rate);\n', '\n', '         // If the amount of tokens that you want to buy gets out of this tier\n', '         if (tokensRaised.add(tokens) > limitTier1) {\n', '\n', '            tokens = adjustTokenTierValue(amountPaid, limitTier1, 1, rate);\n', '         }\n', '\n', '      } else if (tokensRaised >= limitTier1 && tokensRaised < limitTier2) {\n', '\n', '         // Tier 2\n', '         tokens = amountPaid.mul(rateTier2);\n', '\n', '          // Breaks tier cap\n', '         if (tokensRaised.add(tokens) > limitTier2) {\n', '            tokens = adjustTokenTierValue(amountPaid, limitTier2, 2, rateTier2);\n', '         }\n', '\n', '      } else if (tokensRaised >= limitTier2 && tokensRaised < limitTier3) {\n', '\n', '         // Tier 3\n', '         tokens = amountPaid.mul(rateTier3);\n', '\n', '         // Breaks tier cap\n', '         if (tokensRaised.add(tokens) > limitTier3) {\n', '            tokens = adjustTokenTierValue(amountPaid, limitTier3, 3, rateTier3);\n', '         }\n', '\n', '      } else if (tokensRaised >= limitTier3) {\n', '\n', '         // Tier 4\n', '         tokens = amountPaid.mul(rateTier4);\n', '\n', '      }\n', '\n', '      weiRaised = weiRaised.add(amountPaid);\n', '      tokensRaised = tokensRaised.add(tokens);\n', '      token.distributeCrowdsaleTokens(msg.sender, tokens);\n', '\n', '      // Keep the records\n', '      tokensBought[msg.sender] = tokensBought[msg.sender].add(tokens);\n', '\n', '      // Broadcast event\n', '      TokenPurchase(msg.sender, amountPaid, tokens);\n', '\n', '      // Update records\n', '      numberOfTransactions = numberOfTransactions.add(1);\n', '\n', '      forwardFunds(amountPaid);\n', '   }\n', '\n', '   // Forward funds to fund wallet\n', '   function forwardFunds(uint256 amountPaid) internal whenNotPaused {\n', '\n', '     // Send directly to dev wallet\n', '     wallet.transfer(amountPaid);\n', '   }\n', '\n', '   // Adjust wei based on tier, refund if necessaey\n', '   function adjustAmountValue() internal whenNotPaused returns(uint256) {\n', '      uint256 amountPaid = msg.value;\n', '      uint256 differenceWei = 0;\n', '\n', '      // Check final tier\n', '      if(tokensRaised >= limitTier3) {\n', '         uint256 addedTokens = tokensRaised.add(amountPaid.mul(rateTier4));\n', '\n', '         // Have we reached the max?\n', '         if(addedTokens > maxTokensRaised) {\n', '\n', '            // Find the amount over the max\n', '            uint256 difference = addedTokens.sub(maxTokensRaised);\n', '            differenceWei = difference.div(rateTier4);\n', '            amountPaid = amountPaid.sub(differenceWei);\n', '         }\n', '      }\n', '\n', '      // Update balances dataset\n', '      crowdsaleBalances[msg.sender] = crowdsaleBalances[msg.sender].add(amountPaid);\n', '\n', '      // Transfer at the end\n', '      if (differenceWei > 0) msg.sender.transfer(differenceWei);\n', '\n', '      return amountPaid;\n', '   }\n', '\n', '   // Set / change tier rates\n', '   // @param tier1 - tier4 - Rate per tier\n', '   function setTierRates(uint256 tier1, uint256 tier2, uint256 tier3, uint256 tier4)\n', '      external onlyOwner whenNotPaused {\n', '\n', '      require(tier1 > 0 && tier2 > 0 && tier3 > 0 && tier4 > 0);\n', '      require(tier1 > tier2 && tier2 > tier3 && tier3 > tier4);\n', '\n', '      rate = tier1;\n', '      rateTier2 = tier2;\n', '      rateTier3 = tier3;\n', '      rateTier4 = tier4;\n', '   }\n', '\n', '   // Adjust token per tier, return wei if necessay\n', '   // @param amount - Amount buyer paid\n', '   // @param tokensThisTier - Tokens in tier\n', '   // @param tierSelected - The current tier\n', '   // @param _rate - Current rate\n', '   function adjustTokenTierValue(\n', '      uint256 amount,\n', '      uint256 tokensThisTier,\n', '      uint256 tierSelected,\n', '      uint256 _rate\n', '   ) internal returns(uint256 totalTokens) {\n', '      require(amount > 0 && tokensThisTier > 0 && _rate > 0);\n', '      require(tierSelected >= 1 && tierSelected <= 4);\n', '\n', '      uint weiThisTier = tokensThisTier.sub(tokensRaised).div(_rate);\n', '      uint weiNextTier = amount.sub(weiThisTier);\n', '      uint tokensNextTier = 0;\n', '      bool returnTokens = false;\n', '\n', "      // If there's excessive wei for the last tier, refund those\n", '      if(tierSelected != 4) {\n', '\n', '         tokensNextTier = calculateTokensPerTier(weiNextTier, tierSelected.add(1));\n', '\n', '      } else {\n', '\n', '         returnTokens = true;\n', '\n', '      }\n', '\n', '      totalTokens = tokensThisTier.sub(tokensRaised).add(tokensNextTier);\n', '\n', '      // Do the transfer at the end\n', '      if (returnTokens) msg.sender.transfer(weiNextTier);\n', '   }\n', '\n', '   // Return token amount based on wei paid\n', '   // @param weiPaid - Amount buyer paid\n', '   // @param tierSelected - The current tier\n', '   function calculateTokensPerTier(uint256 weiPaid, uint256 tierSelected)\n', '        internal constant returns(uint256 calculatedTokens)\n', '    {\n', '      require(weiPaid > 0);\n', '      require(tierSelected >= 1 && tierSelected <= 4);\n', '\n', '      if (tierSelected == 1) {\n', '\n', '         calculatedTokens = weiPaid.mul(rate);\n', '\n', '      } else if (tierSelected == 2) {\n', '\n', '         calculatedTokens = weiPaid.mul(rateTier2);\n', '\n', '      } else if (tierSelected == 3) {\n', '\n', '         calculatedTokens = weiPaid.mul(rateTier3);\n', '\n', '      } else {\n', '\n', '         calculatedTokens = weiPaid.mul(rateTier4);\n', '     }\n', '   }\n', '\n', '   // Confirm valid purchase\n', '   function validPurchase() internal constant returns(bool) {\n', '      bool withinPeriod = now >= startTime && now <= endTime;\n', '      bool nonZeroPurchase = msg.value > 0;\n', '      bool withinTokenLimit = tokensRaised < maxTokensRaised;\n', '      bool minimumPurchase = msg.value >= minPurchase;\n', '\n', '      return withinPeriod && nonZeroPurchase && withinTokenLimit && minimumPurchase;\n', '   }\n', '\n', '   // Check if sale ended\n', '   function hasEnded() public constant returns(bool) {\n', '       return now > endTime || tokensRaised >= maxTokensRaised;\n', '   }\n', '\n', '   // Finalize if ended\n', '   function completeCrowdsale() external onlyOwner whenNotPaused {\n', '       require(hasEnded());\n', '\n', '       // Transfer left over tokens\n', '       transferTokensLeftOver();\n', '\n', '       // Call finalized event\n', '       Finalized();\n', '   }\n', '\n', '   // Transfer any remaining tokens from Crowdsale\n', '   function transferTokensLeftOver() internal {\n', '       require(!remainingTransfered);\n', '       require(maxTokensRaised > tokensRaised);\n', '\n', '       remainingTransfered = true;\n', '\n', '       uint256 remainingTokens = maxTokensRaised.sub(tokensRaised);\n', '       token.distributeCrowdsaleTokens(msg.sender, remainingTokens);\n', '   }\n', '\n', '   // Change dates before crowdsale has started\n', '   // @param _startTime - New start time\n', '   // @param _endTime - New end time\n', '   function changeDates(uint256 _startTime, uint256 _endTime)\n', '        external onlyOwner beforeStarting\n', '    {\n', '\n', '       if (_startTime > 0 && _endTime > 0) {\n', '           require(_startTime < _endTime);\n', '       }\n', '\n', '       if (_startTime > 0) {\n', '           startTime = _startTime;\n', '       }\n', '\n', '       if (_endTime > 0) {\n', '           endTime = _endTime;\n', '       }\n', '   }\n', '\n', '   // Change the end date\n', '   // @param _endTime - New end time\n', '   function changeEndDate(uint256 _endTime) external onlyOwner {\n', '       require(_endTime > startTime);\n', '       require(_endTime > now);\n', '       require(!hasEnded());\n', '\n', '       if (_endTime > 0) {\n', '           endTime = _endTime;\n', '       }\n', '   }\n', '\n', '}']