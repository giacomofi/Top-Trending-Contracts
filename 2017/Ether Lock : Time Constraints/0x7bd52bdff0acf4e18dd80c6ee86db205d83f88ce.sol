['pragma solidity ^0.4.18;\n', '/**\n', ' * Holds funds for a year.  Send to or deposit directly to this contract.\n', ' * Each new acccount is initialized with a 1 year hold period, and is only \n', ' * retrievable from the designated address after the set hold time.\n', '*/\n', 'contract HodlerInvestmentClub {\n', '    uint public hodl_interval= 1 years;\n', '    uint public m_hodlers = 1;\n', '    \n', '    struct Hodler {\n', '        uint value;\n', '        uint time;\n', '    }\n', '    \n', '    mapping(address => Hodler) public hodlers;\n', '    \n', '    modifier onlyHodler {\n', '        require(hodlers[msg.sender].value > 0);\n', '        _;\n', '    }\n', '    \n', '    /* Constructor */\n', '    function HodlerInvestmentClub() payable public {\n', '        if (msg.value > 0)  {\n', '            hodlers[msg.sender].value = msg.value;\n', '            hodlers[msg.sender].time = now + hodl_interval;\n', '        }\n', '    }\n', '    \n', '    // join the club!\n', '    // make a deposit to another account if it exists \n', '    // or initialize a deposit for a new account\n', '    function deposit(address _to) payable public {\n', '        require(msg.value > 0);\n', '        if (_to == 0) _to = msg.sender;\n', '        // if a new member, init a hodl time\n', '        if (hodlers[_to].time == 0) {\n', '            hodlers[_to].time = now + hodl_interval;\n', '            m_hodlers++;\n', '        } \n', '        hodlers[_to].value += msg.value;\n', '    }\n', '    \n', '    // withdrawal can only occur after deposit time is exceeded\n', '    function withdraw() public onlyHodler {\n', '        require(hodlers[msg.sender].time <= now);\n', '        uint256 value = hodlers[msg.sender].value;\n', '        delete hodlers[msg.sender];\n', '        m_hodlers--;\n', '        require(msg.sender.send(value));\n', '    }\n', '    \n', '    // join the club!\n', '    // simple deposit and hold time set for msg.sender\n', '    function() payable public {\n', '        require(msg.value > 0);\n', '        hodlers[msg.sender].value += msg.value;\n', '        // init for first deposit\n', '        if (hodlers[msg.sender].time == 0) {\n', '            hodlers[msg.sender].time = now + hodl_interval;\n', '            m_hodlers++;\n', '        }\n', '    }\n', '\n', '}']