['pragma solidity ^0.4.13;\n', '\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract Configurable is Ownable {\n', '  // Event triggered when the contract has been configured by the owner\n', '  event Configured();\n', '\n', '  bool public configured = false;\n', '\n', '  // @dev Finalize configuration, prohibiting further configuration\n', '  function finishConfiguration() public configuration returns (bool) {\n', '    configured = true;\n', '    Configured();\n', '    return true;\n', '  }\n', '\n', '  // @dev Enforce that a function is an owner-only configuration method.\n', "  //   Intentionally duplicates the `onlyOwner` check so that we can't\n", '  //   accidentally create a configuration option that without the owner modifier.\n', '  //   This modifier will not let a function be called if the `finalizeConfiguration`\n', '  //   has been called.\n', '  modifier configuration() {\n', '    require(msg.sender == owner);\n', '    require(!configured);\n', '    _;\n', '  }\n', '\n', '  modifier onlyAfterConfiguration() {\n', '    require(configured);\n', '    _;\n', '  }\n', '}\n', '\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n', '    require(_startTime >= now); // solhint-disable not-rely-on-time\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != 0x0);\n', '\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () public payable {\n', '    proxyPayment(msg.sender);\n', '  }\n', '\n', '  // Make a payment for the provided address\n', '  //\n', '  // @param _owner address that will own the purchased tokens\n', '  function proxyPayment(address _owner) public payable returns(bool);\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '}\n', '\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedCrowdsale(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  // overriding Crowdsale#hasEnded to add cap logic\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    return super.hasEnded() || capReached;\n', '  }\n', '\n', '  // overriding Crowdsale#validPurchase to add extra cap logic\n', '  // @return true if investors can buy at the moment\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinCap = weiRaised.add(msg.value) <= cap;\n', '    return super.validPurchase() && withinCap;\n', '  }\n', '\n', '}\n', '\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalize() public onlyOwner {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal { } // solhint-disable no-empty-blocks\n', '}\n', '\n', 'contract TokenController {\n', '    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n', '    /// @param _owner The address that sent the ether to create tokens\n', '    /// @return True if the ether is accepted, false if it throws\n', '    function proxyPayment(address _owner) payable returns(bool);\n', '\n', '    /// @notice Notifies the controller about a token transfer allowing the\n', '    ///  controller to react if desired\n', '    /// @param _from The origin of the transfer\n', '    /// @param _to The destination of the transfer\n', '    /// @param _amount The amount of the transfer\n', '    /// @return False if the controller does not authorize the transfer\n', '    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n', '\n', '    /// @notice Notifies the controller about an approval allowing the\n', '    ///  controller to react if desired\n', '    /// @param _owner The address that calls `approve()`\n', '    /// @param _spender The spender in the `approve()` call\n', '    /// @param _amount The amount in the `approve()` call\n', '    /// @return False if the controller does not authorize the approval\n', '    function onApprove(address _owner, address _spender, uint _amount)\n', '        returns(bool);\n', '}\n', '\n', 'contract BloomTokenSale is CappedCrowdsale, Ownable, TokenController, Pausable, Configurable, FinalizableCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  BLT public token;\n', '\n', '  // Solhint breaks on combination of scientific notation and `ether` keyword so disable next line\n', '  // solhint-disable-next-line\n', '  uint256 public constant TOTAL_SUPPLY = 1.5e8 ether; // 150 million BLT with 18 decimals\n', '  uint256 internal constant FOUNDATION_SUPPLY = (TOTAL_SUPPLY * 4) / 10; // 40% supply\n', '  uint256 internal constant ADVISOR_SUPPLY = TOTAL_SUPPLY / 20; // 5% supply\n', '  uint256 internal constant PARTNERSHIP_SUPPLY = TOTAL_SUPPLY / 20; // 5% supply\n', '  uint256 internal constant CONTROLLER_ALLOCATION =\n', '    TOTAL_SUPPLY - FOUNDATION_SUPPLY - PARTNERSHIP_SUPPLY; // 55%\n', '  uint256 internal constant WALLET_ALLOCATION = TOTAL_SUPPLY - CONTROLLER_ALLOCATION; // 45%\n', '  uint256 internal constant MAX_RAISE_IN_USD = 5e7; // Maximum raise of $50M\n', '\n', '  // Wei ether with two extra decimal places. Useful for conversion when we set the ether price\n', '  uint256 internal constant WEI_PER_ETHER_TWO_DECIMALS = 1e20;\n', '  uint256 internal constant TOKEN_UNITS_PER_TOKEN = 1e18; // Decimal units per BLT\n', '\n', '  uint256 public advisorPool = ADVISOR_SUPPLY;\n', '\n', '  uint256 internal constant DUST = 1 finney; // Minimum payment\n', '\n', '  event NewPresaleAllocation(address indexed holder, uint256 bltAmount);\n', '\n', '  function BloomTokenSale(\n', '    uint256 _startTime,\n', '    uint256 _endTime,\n', '    uint256 _rate,\n', '    address _wallet,\n', '    uint256 _cap\n', '  ) public\n', '    Crowdsale(_startTime, _endTime, _rate, _wallet)\n', '    CappedCrowdsale(_cap) { } // solhint-disable-line no-empty-blocks\n', '\n', '  // @dev Link the token to the Crowdsale\n', '  // @param _token address of the deployed token\n', '  function setToken(address _token) public presaleOnly {\n', '    token = BLT(_token);\n', '  }\n', '\n', '  // @dev Allocate our initial token supply\n', '  function allocateSupply() public presaleOnly {\n', '    require(token.totalSupply() == 0);\n', '    token.generateTokens(address(this), CONTROLLER_ALLOCATION);\n', '    token.generateTokens(wallet, WALLET_ALLOCATION);\n', '  }\n', '\n', '  // @dev Explicitly allocate tokens from the advisor pool, updating how much is left in the pool.\n', '  //\n', '  // @param _receiver Recipient of grant\n', '  // @param _amount Total BLT units allocated\n', '  // @param _cliffDate Vesting cliff\n', '  // @param _vestingDate Date that the vesting finishes\n', '  function allocateAdvisorTokens(address _receiver, uint256 _amount, uint64 _cliffDate, uint64 _vestingDate)\n', '           public\n', '           presaleOnly {\n', '    require(_amount <= advisorPool);\n', '    advisorPool = advisorPool.sub(_amount);\n', '    allocatePresaleTokens(_receiver, _amount, _cliffDate, _vestingDate);\n', '  }\n', '\n', '  // @dev Allocate a normal presale grant. Does not necessarily come from a limited pool like the advisor tokens.\n', '  //\n', '  // @param _receiver Recipient of grant\n', '  // @param _amount Total BLT units allocated\n', '  // @param _cliffDate Vesting cliff\n', '  // @param _vestingDate Date that the vesting finishes\n', '  function allocatePresaleTokens(address _receiver, uint256 _amount, uint64 cliffDate, uint64 vestingDate)\n', '           public\n', '           presaleOnly {\n', '\n', '    require(_amount <= 10 ** 25); // 10 million BLT. No presale partner will have more than this allocated. Prevent overflows.\n', '\n', '    // solhint-disable-next-line not-rely-on-time\n', '    token.grantVestedTokens(_receiver, _amount, uint64(now), cliffDate, vestingDate, true, false);\n', '\n', '    NewPresaleAllocation(_receiver, _amount);\n', '  }\n', '\n', '  // @dev Set the stage for the sale:\n', '  //   1. Sets the `cap` controller variable based on the USD/ETH price\n', '  //   2. Updates the `weiRaised` to the balance of our wallet\n', '  //   3. Takes the unallocated portion of the advisor pool and transfers to the wallet\n', '  //   4. Sets the `rate` for the sale now based on the remaining tokens and cap\n', '  //\n', '  // @param _cents The number of cents in USD to purchase 1 ETH\n', '  // @param _weiRaisedOffChain Total amount of wei raised (at specified conversion rate) outside of wallet\n', '  function finishPresale(uint256 _cents, uint256 _weiRaisedOffChain) public presaleOnly returns (bool) {\n', '    setCapFromEtherPrice(_cents);\n', '    syncPresaleWeiRaised(_weiRaisedOffChain);\n', '    transferUnallocatedAdvisorTokens();\n', '    updateRateBasedOnFundsAndSupply();\n', '    finishConfiguration();\n', '  }\n', '\n', '  // @dev Revoke a token grant, transfering the unvested tokens to our sale wallet\n', '  //\n', '  // @param _holder Owner of the vesting grant that is being revoked\n', '  // @param _grantId ID of the grant being revoked\n', '  function revokeGrant(address _holder, uint256 _grantId) public onlyOwner {\n', '    token.revokeTokenGrant(_holder, wallet, _grantId);\n', '  }\n', '\n', '  // @dev low level token purchase function\n', '  // @param _beneficiary address the tokens will be credited to\n', '  function proxyPayment(address _beneficiary)\n', '    public\n', '    payable\n', '    whenNotPaused\n', '    onlyAfterConfiguration\n', '    returns (bool) {\n', '    require(_beneficiary != 0x0);\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // Update the total wei raised\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    // Transfer tokens from the controller to the _beneficiary\n', '    allocateTokens(_beneficiary, weiAmount);\n', '\n', '    // Send the transfered wei to our wallet\n', '    forwardFunds();\n', '\n', '    return true;\n', '  }\n', '\n', '  // @dev controller callback for approving token transfers. Only supports\n', '  //   transfers from the controller for now.\n', '  //\n', '  // @param _from address that wants to transfer their tokens\n', '  function onTransfer(address _from, address _to, uint) public returns (bool) {\n', '    return _from == address(this) || _to == address(wallet);\n', '  }\n', '\n', '  // @dev controller callback for approving token transfers. This feature\n', '  //   is disabled during the crowdsale for the sake of simplicity\n', '  function onApprove(address, address, uint) public returns (bool) {\n', '    return false;\n', '  }\n', '\n', '  // @dev Change the token controller once the sale is over\n', '  //\n', '  // @param _newController Address of new token controller\n', '  function changeTokenController(address _newController) public onlyOwner whenFinalized {\n', '    token.changeController(_newController);\n', '  }\n', '\n', '  // @dev Set the crowdsale cap based on the ether price\n', '  // @param _cents The number of cents in USD to purchase 1 ETH\n', '  function setCapFromEtherPrice(uint256 _cents) internal {\n', '    require(_cents > 10000 && _cents < 100000);\n', '    uint256 weiPerDollar = WEI_PER_ETHER_TWO_DECIMALS.div(_cents);\n', '    cap = MAX_RAISE_IN_USD.mul(weiPerDollar);\n', '  }\n', '\n', '  // @dev Set the `weiRaised` for this contract to the balance of the sale wallet\n', '  function syncPresaleWeiRaised(uint256 _weiRaisedOffChain) internal {\n', '    require(weiRaised == 0);\n', '    weiRaised = wallet.balance.add(_weiRaisedOffChain);\n', '  }\n', '\n', '  // @dev Transfer unallocated advisor tokens to our wallet. Lets us sell any leftovers\n', '  function transferUnallocatedAdvisorTokens() internal {\n', '    uint256 _unallocatedTokens = advisorPool;\n', '    // Advisor pool will not be used again but we zero it out anyways for the sake of book keeping\n', '    advisorPool = 0;\n', '    token.transferFrom(address(this), wallet, _unallocatedTokens);\n', '  }\n', '\n', '  // @dev Set the `rate` based on our remaining token supply and how much we still need to raise\n', '  function updateRateBasedOnFundsAndSupply() internal {\n', '    uint256 _unraisedWei = cap - weiRaised;\n', '    uint256 _tokensForSale = token.balanceOf(address(this));\n', '    rate = _tokensForSale.mul(1e18).div(_unraisedWei);\n', '  }\n', '\n', "  // @dev Transfer funds from the controller's address to the _beneficiary. Uses\n", '  //   _weiAmount to compute the number of tokens purchased.\n', '  // @param _beneficiary recipient of tokens\n', '  // @param _weiAmount wei transfered to crowdsale\n', '  function allocateTokens(address _beneficiary, uint256 _weiAmount) internal {\n', '    token.transferFrom(address(this), _beneficiary, tokensFor(_weiAmount));\n', '  }\n', '\n', '  // @dev Compute number of token units a given amount of wei gets\n', '  //\n', '  // @param _weiAmount Amount of wei to convert\n', '  function tokensFor(uint256 _weiAmount) internal constant returns (uint256) {\n', '    return _weiAmount.mul(rate).div(1e18);\n', '  }\n', '\n', '  // @dev validate purchases. Delegates to super method and also requires that\n', '  //   the initial configuration phase is finished.\n', '  function validPurchase() internal constant returns (bool) {\n', '    return super.validPurchase() && msg.value >= DUST && configured;\n', '  }\n', '\n', '  // @dev transfer leftover tokens to our wallet\n', '  function finalization() internal {\n', '    token.transferFrom(address(this), wallet, token.balanceOf(address(this)));\n', '  }\n', '\n', '  function inPresalePhase() internal constant beforeSale configuration returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  modifier presaleOnly() {\n', '    require(inPresalePhase());\n', '    _;\n', '  }\n', '\n', '  modifier beforeSale {\n', '    require(now < startTime); // solhint-disable-line not-rely-on-time\n', '    _;\n', '  }\n', '\n', '  modifier whenFinalized {\n', '    require(isFinalized);\n', '    _;\n', '  }\n', '}\n', '\n', 'contract Controlled {\n', '    /// @notice The address of the controller is the only address that can call\n', '    ///  a function with this modifier\n', '    modifier onlyController { require(msg.sender == controller); _; }\n', '\n', '    address public controller;\n', '\n', '    function Controlled() { controller = msg.sender;}\n', '\n', '    /// @notice Changes the controller of the contract\n', '    /// @param _newController The new controller of the contract\n', '    function changeController(address _newController) onlyController {\n', '        controller = _newController;\n', '    }\n', '}\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n', '}\n', '\n', 'contract MiniMeToken is Controlled {\n', '\n', "    string public name;                //The Token's name: e.g. DigixDAO Tokens\n", '    uint8 public decimals;             //Number of decimals of the smallest unit\n', '    string public symbol;              //An identifier: e.g. REP\n', "    string public version = 'MMT_0.1'; //An arbitrary versioning scheme\n", '\n', '\n', '    /// @dev `Checkpoint` is the structure that attaches a block number to a\n', '    ///  given value, the block number attached is the one that last changed the\n', '    ///  value\n', '    struct  Checkpoint {\n', '\n', '        // `fromBlock` is the block number that the value was generated from\n', '        uint128 fromBlock;\n', '\n', '        // `value` is the amount of tokens at a specific block number\n', '        uint128 value;\n', '    }\n', '\n', '    // `parentToken` is the Token address that was cloned to produce this token;\n', '    //  it will be 0x0 for a token that was not cloned\n', '    MiniMeToken public parentToken;\n', '\n', '    // `parentSnapShotBlock` is the block number from the Parent Token that was\n', '    //  used to determine the initial distribution of the Clone Token\n', '    uint public parentSnapShotBlock;\n', '\n', '    // `creationBlock` is the block number that the Clone Token was created\n', '    uint public creationBlock;\n', '\n', '    // `balances` is the map that tracks the balance of each address, in this\n', '    //  contract when the balance changes the block number that the change\n', '    //  occurred is also included in the map\n', '    mapping (address => Checkpoint[]) balances;\n', '\n', '    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    // Tracks the history of the `totalSupply` of the token\n', '    Checkpoint[] totalSupplyHistory;\n', '\n', '    // Flag that determines if the token is transferable or not.\n', '    bool public transfersEnabled;\n', '\n', '    // The factory used to create new clone tokens\n', '    MiniMeTokenFactory public tokenFactory;\n', '\n', '////////////////\n', '// Constructor\n', '////////////////\n', '\n', '    /// @notice Constructor to create a MiniMeToken\n', '    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n', '    ///  will create the Clone token contracts, the token factory needs to be\n', '    ///  deployed first\n', '    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n', '    ///  new token\n', '    /// @param _parentSnapShotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token, set to 0 if it\n', '    ///  is a new token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    function MiniMeToken(\n', '        address _tokenFactory,\n', '        address _parentToken,\n', '        uint _parentSnapShotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) {\n', '        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n', '        name = _tokenName;                                 // Set the name\n', '        decimals = _decimalUnits;                          // Set the decimals\n', '        symbol = _tokenSymbol;                             // Set the symbol\n', '        parentToken = MiniMeToken(_parentToken);\n', '        parentSnapShotBlock = _parentSnapShotBlock;\n', '        transfersEnabled = _transfersEnabled;\n', '        creationBlock = block.number;\n', '    }\n', '\n', '\n', '///////////////////\n', '// ERC20 Methods\n', '///////////////////\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _amount) returns (bool success) {\n', '        require(transfersEnabled);\n', '        return doTransfer(msg.sender, _to, _amount);\n', '    }\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n', '    ///  is approved by `_from`\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function transferFrom(address _from, address _to, uint256 _amount\n', '    ) returns (bool success) {\n', '\n', '        // The controller of this contract can move tokens around at will,\n', '        //  this is important to recognize! Confirm that you trust the\n', '        //  controller of this contract, which in most situations should be\n', '        //  another open source smart contract or 0x0\n', '        if (msg.sender != controller) {\n', '            require(transfersEnabled);\n', '\n', '            // The standard ERC 20 transferFrom functionality\n', '            if (allowed[_from][msg.sender] < _amount) return false;\n', '            allowed[_from][msg.sender] -= _amount;\n', '        }\n', '        return doTransfer(_from, _to, _amount);\n', '    }\n', '\n', '    /// @dev This is the actual transfer function in the token contract, it can\n', '    ///  only be called by other functions in this contract.\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function doTransfer(address _from, address _to, uint _amount\n', '    ) internal returns(bool) {\n', '\n', '           if (_amount == 0) {\n', '               return true;\n', '           }\n', '\n', '           require(parentSnapShotBlock < block.number);\n', '\n', '           // Do not allow transfer to 0x0 or the token contract itself\n', '           require((_to != 0) && (_to != address(this)));\n', '\n', '           // If the amount being transfered is more than the balance of the\n', '           //  account the transfer returns false\n', '           var previousBalanceFrom = balanceOfAt(_from, block.number);\n', '           if (previousBalanceFrom < _amount) {\n', '               return false;\n', '           }\n', '\n', '           // Alerts the token controller of the transfer\n', '           if (isContract(controller)) {\n', '               require(TokenController(controller).onTransfer(_from, _to, _amount));\n', '           }\n', '\n', '           // First update the balance array with the new value for the address\n', '           //  sending the tokens\n', '           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n', '\n', '           // Then update the balance array with the new value for the address\n', '           //  receiving the tokens\n', '           var previousBalanceTo = balanceOfAt(_to, block.number);\n', '           require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n', '           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n', '\n', '           // An event to make the transfer easy to find on the blockchain\n', '           Transfer(_from, _to, _amount);\n', '\n', '           return true;\n', '    }\n', '\n', "    /// @param _owner The address that's balance is being requested\n", '    /// @return The balance of `_owner` at the current block\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balanceOfAt(_owner, block.number);\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n', '    ///  its behalf. This is a modified version of the ERC20 approve function\n', '    ///  to be a little bit safer\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the approval was successful\n', '    function approve(address _spender, uint256 _amount) returns (bool success) {\n', '        require(transfersEnabled);\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        // Alerts the token controller of the approve function call\n', '        if (isContract(controller)) {\n', '            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n', '        }\n', '\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to read the `allowed[]` map\n', '    /// @param _owner The address of the account that owns the token\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens of _owner that _spender is allowed\n', '    ///  to spend\n', '    function allowance(address _owner, address _spender\n', '    ) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n', '    ///  its behalf, and then a function is triggered in the contract that is\n', '    ///  being approved, `_spender`. This allows users to use their tokens to\n', '    ///  interact with contracts in one function call instead of two\n', '    /// @param _spender The address of the contract able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the function call was successful\n', '    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n', '    ) returns (bool success) {\n', '        require(approve(_spender, _amount));\n', '\n', '        ApproveAndCallFallBack(_spender).receiveApproval(\n', '            msg.sender,\n', '            _amount,\n', '            this,\n', '            _extraData\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to get the total number of tokens\n', '    /// @return The total number of tokens\n', '    function totalSupply() constant returns (uint) {\n', '        return totalSupplyAt(block.number);\n', '    }\n', '\n', '\n', '////////////////\n', '// Query balance and totalSupply in History\n', '////////////////\n', '\n', '    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @param _blockNumber The block number when the balance is queried\n', '    /// @return The balance at `_blockNumber`\n', '    function balanceOfAt(address _owner, uint _blockNumber) constant\n', '        returns (uint) {\n', '\n', '        // These next few lines are used when the balance of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.balanceOfAt` be queried at the\n', '        //  genesis block for that token as this contains initial balance of\n', '        //  this token\n', '        if ((balances[_owner].length == 0)\n', '            || (balances[_owner][0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != 0) {\n', '                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                // Has no parent\n', '                return 0;\n', '            }\n', '\n', '        // This will return the expected balance during normal situations\n', '        } else {\n', '            return getValueAt(balances[_owner], _blockNumber);\n', '        }\n', '    }\n', '\n', '    /// @notice Total amount of tokens at a specific `_blockNumber`.\n', '    /// @param _blockNumber The block number when the totalSupply is queried\n', '    /// @return The total amount of tokens at `_blockNumber`\n', '    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n', '\n', '        // These next few lines are used when the totalSupply of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.totalSupplyAt` be queried at the\n', '        //  genesis block for this token as that contains totalSupply of this\n', '        //  token at this block number.\n', '        if ((totalSupplyHistory.length == 0)\n', '            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != 0) {\n', '                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                return 0;\n', '            }\n', '\n', '        // This will return the expected totalSupply during normal situations\n', '        } else {\n', '            return getValueAt(totalSupplyHistory, _blockNumber);\n', '        }\n', '    }\n', '\n', '////////////////\n', '// Clone Token Method\n', '////////////////\n', '\n', '    /// @notice Creates a new clone token with the initial distribution being\n', '    ///  this token at `_snapshotBlock`\n', '    /// @param _cloneTokenName Name of the clone token\n', '    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\n', '    /// @param _cloneTokenSymbol Symbol of the clone token\n', '    /// @param _snapshotBlock Block when the distribution of the parent token is\n', '    ///  copied to set the initial distribution of the new clone token;\n', '    ///  if the block is zero than the actual block, the current block is used\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    /// @return The address of the new MiniMeToken Contract\n', '    function createCloneToken(\n', '        string _cloneTokenName,\n', '        uint8 _cloneDecimalUnits,\n', '        string _cloneTokenSymbol,\n', '        uint _snapshotBlock,\n', '        bool _transfersEnabled\n', '        ) returns(address) {\n', '        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n', '        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n', '            this,\n', '            _snapshotBlock,\n', '            _cloneTokenName,\n', '            _cloneDecimalUnits,\n', '            _cloneTokenSymbol,\n', '            _transfersEnabled\n', '            );\n', '\n', '        cloneToken.changeController(msg.sender);\n', '\n', '        // An event to make the token easy to find on the blockchain\n', '        NewCloneToken(address(cloneToken), _snapshotBlock);\n', '        return address(cloneToken);\n', '    }\n', '\n', '////////////////\n', '// Generate and destroy tokens\n', '////////////////\n', '\n', '    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n', '    /// @param _owner The address that will be assigned the new tokens\n', '    /// @param _amount The quantity of tokens generated\n', '    /// @return True if the tokens are generated correctly\n', '    function generateTokens(address _owner, uint _amount\n', '    ) onlyController returns (bool) {\n', '        uint curTotalSupply = totalSupply();\n', '        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n', '        uint previousBalanceTo = balanceOf(_owner);\n', '        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n', '        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n', '        Transfer(0, _owner, _amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    /// @notice Burns `_amount` tokens from `_owner`\n', '    /// @param _owner The address that will lose the tokens\n', '    /// @param _amount The quantity of tokens to burn\n', '    /// @return True if the tokens are burned correctly\n', '    function destroyTokens(address _owner, uint _amount\n', '    ) onlyController returns (bool) {\n', '        uint curTotalSupply = totalSupply();\n', '        require(curTotalSupply >= _amount);\n', '        uint previousBalanceFrom = balanceOf(_owner);\n', '        require(previousBalanceFrom >= _amount);\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n', '        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n', '        Transfer(_owner, 0, _amount);\n', '        return true;\n', '    }\n', '\n', '////////////////\n', '// Enable tokens transfers\n', '////////////////\n', '\n', '\n', '    /// @notice Enables token holders to transfer their tokens freely if true\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    function enableTransfers(bool _transfersEnabled) onlyController {\n', '        transfersEnabled = _transfersEnabled;\n', '    }\n', '\n', '////////////////\n', '// Internal helper functions to query and set a value in a snapshot array\n', '////////////////\n', '\n', '    /// @dev `getValueAt` retrieves the number of tokens at a given block number\n', '    /// @param checkpoints The history of values being queried\n', '    /// @param _block The block number to retrieve the value at\n', '    /// @return The number of tokens being queried\n', '    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n', '    ) constant internal returns (uint) {\n', '        if (checkpoints.length == 0) return 0;\n', '\n', '        // Shortcut for the actual value\n', '        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n', '            return checkpoints[checkpoints.length-1].value;\n', '        if (_block < checkpoints[0].fromBlock) return 0;\n', '\n', '        // Binary search of the value in the array\n', '        uint min = 0;\n', '        uint max = checkpoints.length-1;\n', '        while (max > min) {\n', '            uint mid = (max + min + 1)/ 2;\n', '            if (checkpoints[mid].fromBlock<=_block) {\n', '                min = mid;\n', '            } else {\n', '                max = mid-1;\n', '            }\n', '        }\n', '        return checkpoints[min].value;\n', '    }\n', '\n', '    /// @dev `updateValueAtNow` used to update the `balances` map and the\n', '    ///  `totalSupplyHistory`\n', '    /// @param checkpoints The history of data being updated\n', '    /// @param _value The new number of tokens\n', '    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n', '    ) internal  {\n', '        if ((checkpoints.length == 0)\n', '        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\n', '               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n', '               newCheckPoint.fromBlock =  uint128(block.number);\n', '               newCheckPoint.value = uint128(_value);\n', '           } else {\n', '               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\n', '               oldCheckPoint.value = uint128(_value);\n', '           }\n', '    }\n', '\n', '    /// @dev Internal function to determine if an address is a contract\n', '    /// @param _addr The address being queried\n', '    /// @return True if `_addr` is a contract\n', '    function isContract(address _addr) constant internal returns(bool) {\n', '        uint size;\n', '        if (_addr == 0) return false;\n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '        return size>0;\n', '    }\n', '\n', '    /// @dev Helper function to return a min betwen the two uints\n', '    function min(uint a, uint b) internal returns (uint) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', "    /// @notice The fallback function: If the contract's controller has not been\n", '    ///  set to 0, then the `proxyPayment` method is called which relays the\n', '    ///  ether and creates tokens as described in the token controller contract\n', '    function ()  payable {\n', '        require(isContract(controller));\n', '        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n', '    }\n', '\n', '//////////\n', '// Safety Methods\n', '//////////\n', '\n', '    /// @notice This method can be used by the controller to extract mistakenly\n', '    ///  sent tokens to this contract.\n', '    /// @param _token The address of the token contract that you want to recover\n', '    ///  set to 0 in case you want to extract ether.\n', '    function claimTokens(address _token) onlyController {\n', '        if (_token == 0x0) {\n', '            controller.transfer(this.balance);\n', '            return;\n', '        }\n', '\n', '        MiniMeToken token = MiniMeToken(_token);\n', '        uint balance = token.balanceOf(this);\n', '        token.transfer(controller, balance);\n', '        ClaimedTokens(_token, controller, balance);\n', '    }\n', '\n', '////////////////\n', '// Events\n', '////////////////\n', '    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n', '    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n', '    event Approval(\n', '        address indexed _owner,\n', '        address indexed _spender,\n', '        uint256 _amount\n', '        );\n', '\n', '}\n', '\n', 'contract MiniMeTokenFactory {\n', '\n', '    /// @notice Update the DApp by creating a new token with new functionalities\n', '    ///  the msg.sender becomes the controller of this clone token\n', '    /// @param _parentToken Address of the token being cloned\n', '    /// @param _snapshotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    /// @return The address of the new token contract\n', '    function createCloneToken(\n', '        address _parentToken,\n', '        uint _snapshotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) returns (MiniMeToken) {\n', '        MiniMeToken newToken = new MiniMeToken(\n', '            this,\n', '            _parentToken,\n', '            _snapshotBlock,\n', '            _tokenName,\n', '            _decimalUnits,\n', '            _tokenSymbol,\n', '            _transfersEnabled\n', '            );\n', '\n', '        newToken.changeController(msg.sender);\n', '        return newToken;\n', '    }\n', '}\n', '\n', 'contract MiniMeVestedToken is MiniMeToken {\n', '  using SafeMath for uint256;\n', '  using Math for uint64;\n', '\n', '  struct TokenGrant {\n', '    address granter;     // 20 bytes\n', '    uint256 value;       // 32 bytes\n', '    uint64 cliff;\n', '    uint64 vesting;\n', '    uint64 start;        // 3 * 8 = 24 bytes\n', '    bool revokable;\n', '    bool burnsOnRevoke;  // 2 * 1 = 2 bits? or 2 bytes?\n', '  } // total 78 bytes = 3 sstore per operation (32 per sstore)\n', '\n', '  event NewTokenGrant(address indexed from, address indexed to, uint256 value, uint256 grantId);\n', '\n', '  mapping (address => TokenGrant[]) public grants;\n', '\n', '  mapping (address => bool) public canCreateGrants;\n', '  address public vestingWhitelister;\n', '\n', '  modifier canTransfer(address _sender, uint _value) {\n', '    require(spendableBalanceOf(_sender) >= _value);\n', '    _;\n', '  }\n', '\n', '  modifier onlyVestingWhitelister {\n', '    require(msg.sender == vestingWhitelister);\n', '    _;\n', '  }\n', '\n', '  function MiniMeVestedToken (\n', '      address _tokenFactory,\n', '      address _parentToken,\n', '      uint _parentSnapShotBlock,\n', '      string _tokenName,\n', '      uint8 _decimalUnits,\n', '      string _tokenSymbol,\n', '      bool _transfersEnabled\n', '  ) public\n', '    MiniMeToken(_tokenFactory, _parentToken, _parentSnapShotBlock, _tokenName, _decimalUnits, _tokenSymbol, _transfersEnabled) {\n', '    vestingWhitelister = msg.sender;\n', '    doSetCanCreateGrants(vestingWhitelister, true);\n', '  }\n', '\n', '  // @dev Add canTransfer modifier before allowing transfer and transferFrom to go through\n', '  function transfer(address _to, uint _value)\n', '           public\n', '           canTransfer(msg.sender, _value)\n', '           returns (bool success) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value)\n', '           public\n', '           canTransfer(_from, _value)\n', '           returns (bool success) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function spendableBalanceOf(address _holder) public constant returns (uint) {\n', '    return transferableTokens(_holder, uint64(now)); // solhint-disable not-rely-on-time\n', '  }\n', '\n', '  /**\n', '   * @dev Grant tokens to a specified address\n', '   * @param _to address The address which the tokens will be granted to.\n', '   * @param _value uint256 The amount of tokens to be granted.\n', '   * @param _start uint64 Time of the beginning of the grant.\n', '   * @param _cliff uint64 Time of the cliff period.\n', '   * @param _vesting uint64 The vesting period.\n', '   */\n', '  function grantVestedTokens(\n', '    address _to,\n', '    uint256 _value,\n', '    uint64 _start,\n', '    uint64 _cliff,\n', '    uint64 _vesting,\n', '    bool _revokable,\n', '    bool _burnsOnRevoke\n', '  ) public {\n', '    // Check start, cliff and vesting are properly order to ensure correct functionality of the formula.\n', '    require(_cliff >= _start);\n', '    require(_vesting >= _cliff);\n', '\n', '    require(canCreateGrants[msg.sender]);\n', '    require(tokenGrantsCount(_to) < 20);   // To prevent a user being spammed and have his balance locked (out of gas attack when calculating vesting).\n', '\n', '    TokenGrant memory grant = TokenGrant(\n', '      _revokable ? msg.sender : 0,\n', '      _value,\n', '      _cliff,\n', '      _vesting,\n', '      _start,\n', '      _revokable,\n', '      _burnsOnRevoke\n', '    );\n', '\n', '    uint256 count = grants[_to].push(grant);\n', '\n', '    assert(transfer(_to, _value));\n', '\n', '    NewTokenGrant(msg.sender, _to, _value, count - 1);\n', '  }\n', '\n', '  function setCanCreateGrants(address _addr, bool _allowed)\n', '           public onlyVestingWhitelister {\n', '    doSetCanCreateGrants(_addr, _allowed);\n', '  }\n', '\n', '  function changeVestingWhitelister(address _newWhitelister) public onlyVestingWhitelister {\n', '    require(_newWhitelister != 0);\n', '    doSetCanCreateGrants(vestingWhitelister, false);\n', '    vestingWhitelister = _newWhitelister;\n', '    doSetCanCreateGrants(vestingWhitelister, true);\n', '  }\n', '\n', '  /**\n', '   * @dev Revoke the grant of tokens of a specifed address.\n', '   * @param _holder The address which will have its tokens revoked.\n', '   * @param _receiver Recipient of revoked tokens.\n', '   * @param _grantId The id of the token grant.\n', '   */\n', '  function revokeTokenGrant(address _holder, address _receiver, uint256 _grantId) public onlyVestingWhitelister {\n', '    require(_receiver != 0);\n', '\n', '    TokenGrant storage grant = grants[_holder][_grantId];\n', '\n', '    require(grant.revokable);\n', '    require(grant.granter == msg.sender); // Only granter can revoke it\n', '\n', '    address receiver = grant.burnsOnRevoke ? 0xdead : _receiver;\n', '\n', '    uint256 nonVested = nonVestedTokens(grant, uint64(now));\n', '\n', '    // remove grant from array\n', '    delete grants[_holder][_grantId];\n', '    grants[_holder][_grantId] = grants[_holder][grants[_holder].length.sub(1)];\n', '    grants[_holder].length -= 1;\n', '\n', '    doTransfer(_holder, receiver, nonVested);\n', '  }\n', '\n', '  /**\n', '   * @dev Check the amount of grants that an address has.\n', '   * @param _holder The holder of the grants.\n', '   * @return A uint256 representing the total amount of grants.\n', '   */\n', '  function tokenGrantsCount(address _holder) public constant returns (uint index) {\n', '    return grants[_holder].length;\n', '  }\n', '\n', '  /**\n', '   * @dev Get all information about a specific grant.\n', '   * @param _holder The address which will have its tokens revoked.\n', '   * @param _grantId The id of the token grant.\n', '   * @return Returns all the values that represent a TokenGrant(address, value, start, cliff,\n', '   * revokability, burnsOnRevoke, and vesting) plus the vested value at the current time.\n', '   */\n', '  function tokenGrant(address _holder, uint256 _grantId) public constant returns (address granter, uint256 value, uint256 vested, uint64 start, uint64 cliff, uint64 vesting, bool revokable, bool burnsOnRevoke) {\n', '    TokenGrant storage grant = grants[_holder][_grantId];\n', '\n', '    granter = grant.granter;\n', '    value = grant.value;\n', '    start = grant.start;\n', '    cliff = grant.cliff;\n', '    vesting = grant.vesting;\n', '    revokable = grant.revokable;\n', '    burnsOnRevoke = grant.burnsOnRevoke;\n', '\n', '    vested = vestedTokens(grant, uint64(now));\n', '  }\n', '\n', '  // @dev The date in which all tokens are transferable for the holder\n', '  // Useful for displaying purposes (not used in any logic calculations)\n', '  function lastTokenIsTransferableDate(address holder) public constant returns (uint64 date) {\n', '    date = uint64(now);\n', '    uint256 grantIndex = tokenGrantsCount(holder);\n', '    for (uint256 i = 0; i < grantIndex; i++) {\n', '      date = grants[holder][i].vesting.max64(date);\n', '    }\n', '    return date;\n', '  }\n', '\n', '  // @dev How many tokens can a holder transfer at a point in time\n', '  function transferableTokens(address holder, uint64 time) public constant returns (uint256) {\n', '    uint256 grantIndex = tokenGrantsCount(holder);\n', '\n', '    if (grantIndex == 0) return balanceOf(holder); // shortcut for holder without grants\n', '\n', '    // Iterate through all the grants the holder has, and add all non-vested tokens\n', '    uint256 nonVested = 0;\n', '    for (uint256 i = 0; i < grantIndex; i++) {\n', '      nonVested = nonVested.add(nonVestedTokens(grants[holder][i], time));\n', '    }\n', '\n', '    // Balance - totalNonVested is the amount of tokens a holder can transfer at any given time\n', '    return balanceOf(holder).sub(nonVested);\n', '  }\n', '\n', '  function doSetCanCreateGrants(address _addr, bool _allowed)\n', '           internal {\n', '    canCreateGrants[_addr] = _allowed;\n', '  }\n', '\n', '  /**\n', '   * @dev Calculate amount of vested tokens at a specific time\n', '   * @param tokens uint256 The amount of tokens granted\n', '   * @param time uint64 The time to be checked\n', '   * @param start uint64 The time representing the beginning of the grant\n', '   * @param cliff uint64  The cliff period, the period before nothing can be paid out\n', '   * @param vesting uint64 The vesting period\n', '   * @return An uint256 representing the amount of vested tokens of a specific grant\n', '   *  transferableTokens\n', '   *   |                         _/--------   vestedTokens rect\n', '   *   |                       _/\n', '   *   |                     _/\n', '   *   |                   _/\n', '   *   |                 _/\n', '   *   |                /\n', '   *   |              .|\n', '   *   |            .  |\n', '   *   |          .    |\n', '   *   |        .      |\n', '   *   |      .        |\n', '   *   |    .          |\n', '   *   +===+===========+---------+----------> time\n', '   *      Start       Cliff    Vesting\n', '   */\n', '  function calculateVestedTokens(\n', '    uint256 tokens,\n', '    uint256 time,\n', '    uint256 start,\n', '    uint256 cliff,\n', '    uint256 vesting) internal constant returns (uint256)\n', '    {\n', '\n', '    // Shortcuts for before cliff and after vesting cases.\n', '    if (time < cliff) return 0;\n', '    if (time >= vesting) return tokens;\n', '\n', '    // Interpolate all vested tokens.\n', '    // As before cliff the shortcut returns 0, we can use just this function to\n', '    // calculate it.\n', '\n', '    // vested = tokens * (time - start) / (vesting - start)\n', '    uint256 vested = tokens.mul(\n', '                             time.sub(start)\n', '                           ).div(vesting.sub(start));\n', '\n', '    return vested;\n', '  }\n', '\n', '  /**\n', '   * @dev Calculate the amount of non vested tokens at a specific time.\n', '   * @param grant TokenGrant The grant to be checked.\n', '   * @param time uint64 The time to be checked\n', '   * @return An uint256 representing the amount of non vested tokens of a specific grant on the\n', '   * passed time frame.\n', '   */\n', '  function nonVestedTokens(TokenGrant storage grant, uint64 time) internal constant returns (uint256) {\n', '    // Of all the tokens of the grant, how many of them are not vested?\n', '    // grantValue - vestedTokens\n', '    return grant.value.sub(vestedTokens(grant, time));\n', '  }\n', '\n', '  /**\n', '   * @dev Get the amount of vested tokens at a specific time.\n', '   * @param grant TokenGrant The grant to be checked.\n', '   * @param time The time to be checked\n', '   * @return An uint256 representing the amount of vested tokens of a specific grant at a specific time.\n', '   */\n', '  function vestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\n', '    return calculateVestedTokens(\n', '      grant.value,\n', '      uint256(time),\n', '      uint256(grant.start),\n', '      uint256(grant.cliff),\n', '      uint256(grant.vesting)\n', '    );\n', '  }\n', '}\n', '\n', 'contract BLT is MiniMeVestedToken {\n', '  function BLT(address _tokenFactory) public MiniMeVestedToken(\n', '    _tokenFactory,\n', '    0x0,           // no parent token\n', '    0,             // no snapshot block number from parent\n', '    "Bloom Token", // Token name\n', '    18,            // Decimals\n', '    "BLT",         // Symbol\n', '    true           // Enable transfers\n', '  ) {} // solhint-disable-line no-empty-blocks\n', '}']