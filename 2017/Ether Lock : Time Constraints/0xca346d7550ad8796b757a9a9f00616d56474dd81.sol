['pragma solidity ^0.4.18;\n', '\n', 'contract owned {\n', '\taddress public owner;\n', '\taddress public server;\n', '\n', '\tfunction owned() {\n', '\t\towner = msg.sender;\n', '\t\tserver = msg.sender;\n', '\t}\n', '\n', '\tfunction changeOwner(address newOwner) onlyOwner {\n', '\t\towner = newOwner;\n', '\t}\n', '\n', '\tfunction changeServer(address newServer) onlyOwner {\n', '\t\tserver = newServer;\n', '\t}\n', '\n', '\tmodifier onlyOwner {\n', '\t\trequire(msg.sender == owner);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier onlyServer {\n', '\t\trequire(msg.sender == server);\n', '\t\t_;\n', '\t}\n', '}\n', '\n', '\n', 'contract Utils {\n', '\n', '\tfunction Utils() {\n', '\t}\n', '\n', "\t// Validates an address - currently only checks that it isn't null\n", '\tmodifier validAddress(address _address) {\n', '\t\trequire(_address != 0x0);\n', '\t\t_;\n', '\t}\n', '}\n', '\n', 'contract Crowdsale is owned,Utils {\n', '    \n', '    //*** Pre-sale ***//\n', '    uint preSaleStart=1513771200;\n', '    uint preSaleEnd=1515585600;\n', '    uint256 preSaleTotalTokens=30000000;\n', '    uint256 preSaleTokenCost=6000;\n', '    address preSaleAddress;\n', '    \n', '     //*** ICO ***//\n', '    uint icoStart;\n', '    uint256 icoSaleTotalTokens=400000000;\n', '    address icoAddress;\n', '    \n', '    //*** Advisers,Consultants ***//\n', '    uint256 advisersConsultantTokens=15000000;\n', '    address advisersConsultantsAddress;\n', '    \n', '    //*** Bounty ***//\n', '    uint256 bountyTokens=15000000;\n', '    address bountyAddress=0xD53E82Aea770feED8e57433D3D61674caEC1D1Be;\n', '    \n', '    //*** Founders ***//\n', '    uint256 founderTokens=40000000;\n', '    address founderAddress;\n', '    \n', '    //***Balance***//\n', '    mapping (address => uint256) public balanceOf;\n', '    \n', '    //*** Tranfer ***//\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    //*** GraphenePowerCrowdsale ***//\n', '    function GraphenePowerCrowdsale(){\n', '        balanceOf[this]=500000000;\n', '        preSaleAddress=0xC07850969A0EC345A84289f9C5bb5F979f27110f;\n', '        icoAddress=0x1C21Cf57BF4e2dd28883eE68C03a9725056D29F1;\n', '        advisersConsultantsAddress=0xe8B6dA1B801b7F57e3061C1c53a011b31C9315C7;\n', '        bountyAddress=0xD53E82Aea770feED8e57433D3D61674caEC1D1Be;\n', '        founderAddress=0xDA0D3Dad39165EA2d7386f18F96664Ee2e9FD8db;\n', '    }\n', '    \n', '    //*** Start ico ***//\n', '    function startIco() onlyOwner internal{\n', '        icoStart=now;\n', '    }\n', '    \n', '    //*** Is ico closed ***//\n', '    function isIcoClosed() constant returns (bool closed) {\n', '\t\treturn ((icoStart+(35*24*60*60)) >= now);\n', '\t}\n', '    \n', '    //*** Is preSale closed ***//\n', '    function isPreSaleClosed() constant returns (bool closed) {\n', '\t\treturn (preSaleEnd >= now);\n', '\t}\n', '\t\n', '\t//*** Get Bounty Tokens ***//\n', '\tfunction getBountyTokens() onlyOwner{\n', '\t    require(bountyTokens>0);\n', '\t    payment(bountyAddress,bountyTokens);\n', '\t    bountyTokens=0;\n', '\t}\n', '\t\n', '\t//*** Get Founders Tokens ***//\n', '\tfunction getFoundersTokens() onlyOwner{\n', '\t    require(founderTokens>0);\n', '\t    payment(founderAddress,founderTokens);\n', '\t    founderTokens=0;\n', '\t}\n', '\t\n', '\t//*** Get Advisers,Consultants Tokens ***//\n', '\tfunction getAdvisersConsultantsTokens() onlyOwner{\n', '\t    require(advisersConsultantTokens>0);\n', '\t    payment(advisersConsultantsAddress,advisersConsultantTokens);\n', '\t    advisersConsultantTokens=0;\n', '\t}\n', '\t\n', '\t//*** Payment ***//\n', '    function payment(address _from,uint256 _tokens) internal{\n', '        if(balanceOf[this] > _tokens){\n', '            balanceOf[msg.sender] += _tokens;\n', '            balanceOf[this] -= _tokens;\n', '            Transfer(this, _from, _tokens);\n', '        }\n', '    }\n', '    \n', '    //*** Payable ***//\n', '    function() payable {\n', '        require(msg.value>0);\n', '        \n', '        if(!isPreSaleClosed()){\n', '            uint256 tokensPreSale = preSaleTotalTokens * msg.value / 1000000000000000000;\n', '            require(preSaleTotalTokens >= tokensPreSale);\n', '            payment(msg.sender,tokensPreSale);\n', '        }\n', '        else if(!isIcoClosed()){\n', '             if((icoStart+(7*24*60*60)) >= now){\n', '                 uint256 tokensWeek1 = 4000 * msg.value / 1000000000000000000;\n', '                 require(icoSaleTotalTokens >= tokensWeek1);\n', '                 payment(msg.sender,tokensWeek1);\n', '                 icoSaleTotalTokens-=tokensWeek1;\n', '            }\n', '            else if((icoStart+(14*24*60*60)) >= now){\n', '                 uint256 tokensWeek2 = 3750 * msg.value / 1000000000000000000;\n', '                 require(icoSaleTotalTokens >= tokensWeek2);\n', '                 payment(msg.sender,tokensWeek2);\n', '                 icoSaleTotalTokens-=tokensWeek2;\n', '            }\n', '            else if((icoStart+(21*24*60*60)) >= now){\n', '                 uint256 tokensWeek3 = 3500 * msg.value / 1000000000000000000;\n', '                 require(icoSaleTotalTokens >= tokensWeek3);\n', '                 payment(msg.sender,tokensWeek3);\n', '                 icoSaleTotalTokens-=tokensWeek3;\n', '            }\n', '            else if((icoStart+(28*24*60*60)) >= now){\n', '                 uint256 tokensWeek4 = 3250 * msg.value / 1000000000000000000;\n', '                 require(icoSaleTotalTokens >= tokensWeek4);\n', '                 payment(msg.sender,tokensWeek4);\n', '                 icoSaleTotalTokens-=tokensWeek4;\n', '            }\n', '            else if((icoStart+(35*24*60*60)) >= now){\n', '                 uint256 tokensWeek5 = 3000 * msg.value / 1000000000000000000;\n', '                 require(icoSaleTotalTokens >= tokensWeek5);\n', '                 payment(msg.sender, tokensWeek5);\n', '                 icoSaleTotalTokens-=tokensWeek5;\n', '            }\n', '        }\n', '\t}\n', '}\n', '\n', 'contract GraphenePowerToken is Crowdsale {\n', '    \n', '    /* Public variables of the token */\n', "\tstring public standard = 'Token 0.1';\n", '\n', "\tstring public name = 'Graphene Power';\n", '\n', "\tstring public symbol = 'GRP';\n", '\n', '\tuint8 public decimals = 18;\n', '\n', '\tuint256 _totalSupply =500000000;\n', '\n', '\t/* This creates an array with all balances */\n', '\tmapping (address => uint256) balances;\n', '\n', '\t/* This generates a public event on the blockchain that will notify clients */\n', '\tevent Transfer(address from, address to, uint256 value);\n', '\n', '    bool transfersEnable=false;\n', '    \n', '\t//*** Total Supply ***//\n', '\tfunction totalSupply() constant returns (uint256 totalSupply) {\n', '\t\ttotalSupply = _totalSupply;\n', '\t}\n', '\t\n', '\t/*** Send coins ***/\n', '\tfunction transfer(address _to, uint256 _value) returns (bool success) {\n', '\t\tif (transfersEnable) {\n', '\t       require(balanceOf[msg.sender] >= _value);\n', '           balanceOf[msg.sender] -= _value;\n', '           balanceOf[_to] += _value;\n', '           Transfer(msg.sender, _to, _value);\n', '\t\t   return true;\n', '\t\t}\n', '      \telse{\n', '\t           return false;\n', '\t        }\n', '\t}\n', '\t\n', '\t//*** Transfer Enabled ***//\n', '\tfunction transfersEnabled() onlyOwner{\n', '\t    require(!transfersEnable);\n', '\t    transfersEnable=true;\n', '\t}\n', '}']