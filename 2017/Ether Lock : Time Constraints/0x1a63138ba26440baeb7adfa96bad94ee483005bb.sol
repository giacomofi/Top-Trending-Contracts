['pragma solidity ^0.4.12;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// Abstract contract for the full ERC 20 Token standard\n', '// https://github.com/ethereum/EIPs/issues/20\n', '\n', 'contract Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens, after that function `receiveApproval`\n', '    /// @notice will be called on `_spender` address\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @param _extraData Some data to pass in callback function\n', '    /// @return Whether the approval was successful or not\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Issuance(address indexed _to, uint256 _value);\n', '    event Burn(address indexed _from, uint256 _value);\n', '}\n', '\n', '/*\n', 'Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\n', '.*/\n', '\n', '\n', 'contract StandardToken is Token {\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        //Default assumes totalSupply can&#39;t be over max (2^256 - 1).\n', '        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn&#39;t wrap.\n', '        //Replace the if with this one instead.\n', '        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_from] -= _value;\n', '            balances[_to] += _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        string memory signature = "receiveApproval(address,uint256,address,bytes)";\n', '\n', '        if (!_spender.call(bytes4(bytes32(sha3(signature))), msg.sender, _value, this, _extraData)) {\n', '            revert();\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract LATToken is StandardToken {\n', '    using SafeMath for uint256;\n', '    /* Public variables of the token */\n', '\n', '    address     public founder;\n', '    address     public minter = 0;\n', '    address     public exchanger = 0;\n', '\n', '    string      public name             =       "LAToken";\n', '    uint8       public decimals         =       18;\n', '    string      public symbol           =       "LAToken";\n', '    string      public version          =       "0.7.2";\n', '\n', '\n', '    modifier onlyFounder() {\n', '        if (msg.sender != founder) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier onlyMinterAndExchanger() {\n', '        if (msg.sender != minter && msg.sender != exchanger) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '\n', '        if (exchanger != 0x0 && _to == exchanger) {\n', '            assert(ExchangeContract(exchanger).exchange(msg.sender, _value));\n', '            return true;\n', '        }\n', '\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '\n', '            balances[msg.sender] = balances[msg.sender].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function issueTokens(address _for, uint tokenCount)\n', '        external\n', '        onlyMinterAndExchanger\n', '        returns (bool)\n', '    {\n', '        if (tokenCount == 0) {\n', '            return false;\n', '        }\n', '\n', '        totalSupply = totalSupply.add(tokenCount);\n', '        balances[_for] = balances[_for].add(tokenCount);\n', '        Issuance(_for, tokenCount);\n', '        return true;\n', '    }\n', '\n', '    function burnTokens(address _for, uint tokenCount)\n', '        external\n', '        onlyMinterAndExchanger\n', '        returns (bool)\n', '    {\n', '        if (tokenCount == 0) {\n', '            return false;\n', '        }\n', '\n', '        if (totalSupply.sub(tokenCount) > totalSupply) {\n', '            revert();\n', '        }\n', '\n', '        if (balances[_for].sub(tokenCount) > balances[_for]) {\n', '            revert();\n', '        }\n', '\n', '        totalSupply = totalSupply.sub(tokenCount);\n', '        balances[_for] = balances[_for].sub(tokenCount);\n', '        Burn(_for, tokenCount);\n', '        return true;\n', '    }\n', '\n', '    function changeMinter(address newAddress)\n', '        public\n', '        onlyFounder\n', '        returns (bool)\n', '    {\n', '        minter = newAddress;\n', '        return true;\n', '    }\n', '\n', '    function changeFounder(address newAddress)\n', '        public\n', '        onlyFounder\n', '        returns (bool)\n', '    {\n', '        founder = newAddress;\n', '        return true;\n', '    }\n', '\n', '    function changeExchanger(address newAddress)\n', '        public\n', '        onlyFounder\n', '        returns (bool)\n', '    {\n', '        exchanger = newAddress;\n', '        return true;\n', '    }\n', '\n', '    function () payable {\n', '        require(false);\n', '    }\n', '\n', '    function LATToken() {\n', '        founder = msg.sender;\n', '        totalSupply = 0;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract ExchangeContract {\n', '    using SafeMath for uint256;\n', '\n', '\taddress public founder;\n', '\tuint256 public prevCourse;\n', '\tuint256 public nextCourse;\n', '\n', '\taddress public prevTokenAddress;\n', '\taddress public nextTokenAddress;\n', '\n', '\tmodifier onlyFounder() {\n', '        if (msg.sender != founder) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier onlyPreviousToken() {\n', '    \tif (msg.sender != prevTokenAddress) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '    // sets new conversion rate\n', '\tfunction changeCourse(uint256 _prevCourse, uint256 _nextCourse)\n', '\t\tpublic\n', '\t\tonlyFounder\n', '\t{\n', '\t\tprevCourse = _prevCourse;\n', '\t\tnextCourse = _nextCourse;\n', '\t}\n', '\n', '\tfunction exchange(address _for, uint256 prevTokensAmount)\n', '\t\tpublic\n', '\t\tonlyPreviousToken\n', '\t\treturns (bool)\n', '\t{\n', '\n', '\t\tLATToken prevToken = LATToken(prevTokenAddress);\n', '     \tLATToken nextToken = LATToken(nextTokenAddress);\n', '\n', '\t\t// check if balance is correct\n', '\t\tif (prevToken.balanceOf(_for) >= prevTokensAmount) {\n', '\t\t\tuint256 amount = prevTokensAmount.div(prevCourse);\n', '\n', '\t\t\tassert(prevToken.burnTokens(_for, amount.mul(prevCourse))); // remove previous tokens\n', '\t\t\tassert(nextToken.issueTokens(_for, amount.mul(nextCourse))); // give new ones\n', '\n', '\t\t\treturn true;\n', '\t\t} else {\n', '\t\t\trevert();\n', '\t\t}\n', '\t}\n', '\n', '\tfunction changeFounder(address newAddress)\n', '        external\n', '        onlyFounder\n', '        returns (bool)\n', '    {\n', '        founder = newAddress;\n', '        return true;\n', '    }\n', '\n', '\tfunction ExchangeContract(address _prevTokenAddress, address _nextTokenAddress, uint256 _prevCourse, uint256 _nextCourse) {\n', '\t\tfounder = msg.sender;\n', '\n', '\t\tprevTokenAddress = _prevTokenAddress;\n', '\t\tnextTokenAddress = _nextTokenAddress;\n', '\n', '\t\tchangeCourse(_prevCourse, _nextCourse);\n', '\t}\n', '}\n', '\n', '\n', '\n', 'contract LATokenMinter {\n', '    using SafeMath for uint256;\n', '\n', '    LATToken public token; // Token contract\n', '\n', '    address public founder; // Address of founder\n', '    address public helper;  // Address of helper\n', '\n', '    address public teamPoolInstant; // Address of team pool for instant issuance after token sale end\n', '    address public teamPoolForFrozenTokens; // Address of team pool for smooth unfroze during 5 years after 5 years from token sale start\n', '\n', '    bool public teamInstantSent = false; // Flag to prevent multiple issuance for team pool after token sale\n', '\n', '    uint public startTime;               // Unix timestamp of start\n', '    uint public endTime;                 // Unix timestamp of end\n', '    uint public numberOfDays;            // Number of windows after 0\n', '    uint public unfrozePerDay;           // Tokens sold in each window\n', '    uint public alreadyHarvestedTokens;  // Tokens were already harvested and sent to team pool\n', '\n', '    /*\n', '     *  Modifiers\n', '     */\n', '    modifier onlyFounder() {\n', '        // Only founder is allowed to do this action.\n', '        if (msg.sender != founder) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier onlyHelper() {\n', '        // Only helper is allowed to do this action.\n', '        if (msg.sender != helper) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '    // sends 400 millions of tokens to teamPool at the token sale ending (200m for distribution + 200m for company)\n', '    function fundTeamInstant()\n', '        external\n', '        onlyFounder\n', '        returns (bool)\n', '    {\n', '        require(!teamInstantSent);\n', '\n', '        uint baseValue = 400000000;\n', '        uint totalInstantAmount = baseValue.mul(1000000000000000000); // 400 millions with 18 decimal points\n', '\n', '        require(token.issueTokens(teamPoolInstant, totalInstantAmount));\n', '\n', '        teamInstantSent = true;\n', '        return true;\n', '    }\n', '\n', '    function changeTokenAddress(address newAddress)\n', '        external\n', '        onlyFounder\n', '        returns (bool)\n', '    {\n', '        token = LATToken(newAddress);\n', '        return true;\n', '    }\n', '\n', '    function changeFounder(address newAddress)\n', '        external\n', '        onlyFounder\n', '        returns (bool)\n', '    {\n', '        founder = newAddress;\n', '        return true;\n', '    }\n', '\n', '    function changeHelper(address newAddress)\n', '        external\n', '        onlyFounder\n', '        returns (bool)\n', '    {\n', '        helper = newAddress;\n', '        return true;\n', '    }\n', '\n', '    function changeTeamPoolInstant(address newAddress)\n', '        external\n', '        onlyFounder\n', '        returns (bool)\n', '    {\n', '        teamPoolInstant = newAddress;\n', '        return true;\n', '    }\n', '\n', '    function changeTeamPoolForFrozenTokens(address newAddress)\n', '        external\n', '        onlyFounder\n', '        returns (bool)\n', '    {\n', '        teamPoolForFrozenTokens = newAddress;\n', '        return true;\n', '    }\n', '\n', '    // method which will be called each day after 5 years to get unfrozen tokens\n', '    function harvest()\n', '        external\n', '        onlyHelper\n', '        returns (uint)\n', '    {\n', '        require(teamPoolForFrozenTokens != 0x0);\n', '\n', '        uint currentTimeDiff = getBlockTimestamp().sub(startTime);\n', '        uint secondsPerDay = 24 * 3600;\n', '        uint daysFromStart = currentTimeDiff.div(secondsPerDay);\n', '        uint currentDay = daysFromStart.add(1);\n', '\n', '        if (getBlockTimestamp() >= endTime) {\n', '            currentTimeDiff = endTime.sub(startTime).add(1);\n', '            currentDay = 5 * 365;\n', '        }\n', '\n', '        uint maxCurrentHarvest = currentDay.mul(unfrozePerDay);\n', '        uint wasNotHarvested = maxCurrentHarvest.sub(alreadyHarvestedTokens);\n', '\n', '        require(wasNotHarvested > 0);\n', '        require(token.issueTokens(teamPoolForFrozenTokens, wasNotHarvested));\n', '        alreadyHarvestedTokens = alreadyHarvestedTokens.add(wasNotHarvested);\n', '\n', '        return wasNotHarvested;\n', '    }\n', '\n', '    function LATokenMinter(address _LATTokenAddress, address _helperAddress) {\n', '        founder = msg.sender;\n', '        helper = _helperAddress;\n', '        token = LATToken(_LATTokenAddress);\n', '\n', '        numberOfDays = 5 * 365; // 5 years\n', '        startTime = 1661166000; // 22 august 2022 11:00 GMT+0;\n', '        endTime = numberOfDays.mul(1 days).add(startTime);\n', '\n', '        uint baseValue = 600000000;\n', '        uint frozenTokens = baseValue.mul(1000000000000000000); // 600 millions with 18 decimal points\n', '        alreadyHarvestedTokens = 0;\n', '\n', '        unfrozePerDay = frozenTokens.div(numberOfDays);\n', '    }\n', '\n', '    function () payable {\n', '        require(false);\n', '    }\n', '\n', '    function getBlockTimestamp() returns (uint256) {\n', '        return block.timestamp;\n', '    }\n', '}']