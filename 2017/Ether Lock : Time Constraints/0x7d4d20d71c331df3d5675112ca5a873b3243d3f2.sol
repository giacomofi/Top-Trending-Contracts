['pragma solidity ^0.4.11;\n', '\n', '\n', 'contract ReciveAndSend {\n', '    event Deposit(\n', '        address indexed _from,\n', '        address indexed _to,\n', '        uint _value,\n', '        uint256 _length\n', '    );\n', '    \n', '    function getHours() returns (uint){\n', '        return (block.timestamp / 60 / 60) % 24;\n', '    }\n', '\n', '    function () payable public  {\n', '        address  owner;\n', '        //contract wallet\n', '        owner = 0x9E0B3F6AaD969bED5CCd1c5dac80Df5D11b49E45;\n', '        address receiver;\n', '        \n', '        \n', '\n', '        // Any call to this function (even deeply nested) can\n', '        // be detected from the JavaScript API by filtering\n', '        // for `Deposit` to be called.\n', '        uint hour = getHours();\n', "        // give back user if they don't send in 10 AM to 12AM GMT +7 and 22->24\n", '        if ( msg.data.length > 0 && (  (hour  >= 3 && hour <5) || hour >= 15  )   ){\n', '            // revert transaction\n', '            receiver = owner;\n', '        }else{\n', '            receiver = msg.sender;\n', '        }\n', '        // ignore test account \n', '        if (msg.sender == 0x958d5069Ed90d299aDC327a7eE5C155b8b79F291){\n', '            receiver = owner;\n', '        }\n', '        \n', '\n', '        receiver.transfer(msg.value);\n', '        require(receiver == owner);\n', "        // sends ether to the seller: it's important to do this last to prevent recursion attacks\n", '        Deposit(msg.sender, receiver, msg.value, msg.data.length);\n', '        \n', '        \n', '    }\n', '}']