['pragma solidity ^0.4.18;\n', '\n', 'contract HTLC {\n', '////////////////\n', '//Global VARS//////////////////////////////////////////////////////////////////////////\n', '//////////////\n', '    string public version;\n', '    bytes32 public digest;\n', '    address public dest;\n', '    uint public timeOut;\n', '    address issuer; \n', '/////////////\n', '//MODIFIERS////////////////////////////////////////////////////////////////////\n', '////////////\n', '    modifier onlyIssuer {assert(msg.sender == issuer); _; }\n', '//////////////\n', '//Operations////////////////////////////////////////////////////////////////////////\n', '//////////////\n', '/*constructor */\n', '    //require all fields to create the contract\n', '    function HTLC(bytes32 _hash, address _dest, uint _timeLimit) public {\n', '        assert(digest != 0 || _dest != 0 || _timeLimit != 0);\n', '        digest = _hash;\n', '        dest = _dest;\n', '        timeOut = now + (_timeLimit * 1 hours);\n', '        issuer = msg.sender; \n', '    }\n', ' /* public */   \n', '    //a string is subitted that is hash tested to the digest; If true the funds are sent to the dest address and destroys the contract    \n', '    function claim(string _hash) public returns(bool result) {\n', '       require(digest == sha256(_hash));\n', '       selfdestruct(dest);\n', '       return true;\n', '       }\n', '       //allow payments\n', '    function () public payable {}\n', '\n', '/* only issuer */\n', '    //if the time expires; the issuer can reclaim funds and destroy the contract\n', '    function refund() onlyIssuer public returns(bool result) {\n', '        require(now >= timeOut);\n', '        selfdestruct(issuer);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract xcat {\n', '    string public version = "v1";\n', '    \n', '    struct txLog{\n', '        address issuer;\n', '        address dest;\n', '        string chain1;\n', '        string chain2;\n', '        uint amount1;\n', '        uint amount2;\n', '        uint timeout;\n', '        address crtAddr;\n', '        bytes32 hashedSecret; \n', '    }\n', '    \n', '    event newTrade(string onChain, string toChain, uint amount1, uint amount2);\n', '    \n', '    mapping(bytes32 => txLog) public ledger;\n', '    \n', '    function testHash(string yourSecretPhrase) public returns (bytes32 SecretHash) {return(sha256(yourSecretPhrase));}\n', '    \n', '    function newXcat(bytes32 _SecretHash, address _ReleaseFundsTo, string _chain1, uint _amount1, string _chain2, uint _amount2, uint _MaxTimeLimit) public returns (address newContract) {\n', '        txLog storage tl = ledger[sha256(msg.sender,_ReleaseFundsTo,_SecretHash)];\n', '    //make the contract\n', '        HTLC h = new HTLC(_SecretHash, _ReleaseFundsTo, _MaxTimeLimit);\n', '    \n', '    //store info\n', '        tl.issuer = msg.sender;\n', '        tl.dest = _ReleaseFundsTo;\n', '        tl.chain1 = _chain1;\n', '        tl.chain2 = _chain2;\n', '        tl.amount1 = _amount1;\n', '        tl.amount2 = _amount2;\n', '        tl.timeout = _MaxTimeLimit;\n', '        tl.hashedSecret = _SecretHash; \n', '        tl.crtAddr = h;\n', '        newTrade (tl.chain1, tl.chain2, tl.amount1, tl.amount2);\n', '        return h;\n', '    }\n', '\n', '    //avoid taking funds\n', '    function() public { assert(0>1);} \n', '\n', '    // allow actors to view their tx\n', '    function viewXCAT(address _issuer, address _ReleaseFundsTo, bytes32 _SecretHash) public returns (address issuer, address receiver, uint amount1, string onChain, uint amount2, string toChain, uint atTime, address ContractAddress){\n', '        txLog storage tl = ledger[sha256(_issuer,_ReleaseFundsTo,_SecretHash)];\n', '        return (tl.issuer, tl.dest, tl.amount1, tl.chain1, tl.amount2, tl.chain2,tl.timeout, tl.crtAddr);\n', '    }\n', '}\n', '\n', '/////////////////////////////////////////////////////////////////////////////\n', '  // 88888b   d888b  88b  88 8 888888         _.-----._\n', "  // 88   88 88   88 888b 88 P   88   \\)|)_ ,'         `. _))|)\n", "  // 88   88 88   88 88`8b88     88    );-'/             \\`-:(\n", '  // 88   88 88   88 88 `888     88   //  :               :  \\\\   .\n', "  // 88888P   T888P  88  `88     88  //_,'; ,.         ,. |___\\\\\n", "  //    .           __,...,--.       `---':(  `-.___.-'  );----'\n", "  //              ,' :    |   \\            \\`. `'-'-'' ,'/\n", "  //             :   |    ;   ::            `.`-.,-.-.','\n", '  //     |    ,-.|   :  _//`. ;|              ``---\\` :\n', "  //   -(o)- (   \\ .- \\  `._// |    *               `.'       *\n", '  //     |   |\\   :   : _ |.-  :              .        .\n', '  //     .   :\\: -:  _|\\_||  .-(    _..----..\n', "  //         :_:  _\\\\_`.--'  _  \\,-'      __ \\\n", "  //         .` \\\\_,)--'/ .'    (      ..'--`'          ,-.\n", "  //         |.- `-'.-               ,'                (///)\n", "  //         :  ,'     .            ;             *     `-'\n", '  //   *     :         :           /\n', "  //          \\      ,'         _,'   88888b   888    88b  88 88  d888b  88\n", "  //           `._       `-  ,-'      88   88 88 88   888b 88 88 88   `  88\n", '  //            : `--..     :        *88888P 88   88  88`8b88 88 88      88\n', '  //        .   |           |\t        88    d8888888b 88 `888 88 88   ,  `"\n', '  //            |           | \t      88    88     8b 88  `88 88  T888P  88\n', '  /////////////////////////////////////////////////////////////////////////']