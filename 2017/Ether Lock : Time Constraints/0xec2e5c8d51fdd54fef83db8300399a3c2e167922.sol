['pragma solidity ^0.4.11;\n', '\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) \n', '  {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) \n', '  {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) \n', '  {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) \n', '  {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' */\n', 'contract Ownable \n', '{\n', '  address public owner;\n', '\n', '  event OwnerChanged(address indexed _oldOwner, address indexed _newOwner);\n', '\t\n', '\tfunction Ownable() public\n', '  {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() \n', '  {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function changeOwner(address _newOwner) onlyOwner public \n', '  {\n', '    require(_newOwner != address(0));\n', '    \n', '    address oldOwner = owner;\n', '    if (oldOwner != _newOwner)\n', '    {\n', '    \towner = _newOwner;\n', '    \t\n', '    \tOwnerChanged(oldOwner, _newOwner);\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Manageable\n', ' */\n', 'contract Manageable is Ownable\n', '{\n', '\taddress public manager;\n', '\t\n', '\tevent ManagerChanged(address indexed _oldManager, address _newManager);\n', '\t\n', '\tfunction Manageable() public\n', '\t{\n', '\t\tmanager = msg.sender;\n', '\t}\n', '\t\n', '\tmodifier onlyManager()\n', '\t{\n', '\t\trequire(msg.sender == manager);\n', '\t\t_;\n', '\t}\n', '\t\n', '\tmodifier onlyOwnerOrManager() \n', '\t{\n', '\t\trequire(msg.sender == owner || msg.sender == manager);\n', '\t\t_;\n', '\t}\n', '\t\n', '\tfunction changeManager(address _newManager) onlyOwner public \n', '\t{\n', '\t\trequire(_newManager != address(0));\n', '\t\t\n', '\t\taddress oldManager = manager;\n', '\t\tif (oldManager != _newManager)\n', '\t\t{\n', '\t\t\tmanager = _newManager;\n', '\t\t\t\n', '\t\t\tManagerChanged(oldManager, _newManager);\n', '\t\t}\n', '\t}\n', '\t\n', '}\n', '\n', '\n', '/**\n', ' * @title CrowdsaleToken\n', ' */\n', 'contract CrowdsaleToken is Manageable\n', '{\n', '  using SafeMath for uint256;\n', '\n', '  string public constant name     = "EBCoin";\n', '  string public constant symbol   = "EBC";\n', '  uint8  public constant decimals = 18;\n', '  \n', '  uint256 public totalSupply;\n', '  mapping(address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '  mapping (address => uint256) public releaseTime;\n', '  bool public released;\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '  event Mint(address indexed _to, uint256 _value);\n', '  event ReleaseTimeChanged(address indexed _owner, uint256 _oldReleaseTime, uint256 _newReleaseTime);\n', '  event ReleasedChanged(bool _oldReleased, bool _newReleased);\n', '\n', '  modifier canTransfer(address _from)\n', '  {\n', '  \tif (releaseTime[_from] == 0)\n', '  \t{\n', '  \t\trequire(released);\n', '  \t}\n', '  \telse\n', '  \t{\n', '  \t\trequire(releaseTime[_from] <= now);\n', '  \t}\n', '  \t_;\n', '  }\n', '\n', '  function balanceOf(address _owner) public constant returns (uint256)\n', '  {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) canTransfer(msg.sender) public returns (bool) \n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    \n', '    Transfer(msg.sender, _to, _value);\n', '    \n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public constant returns (uint256) \n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  \n', '  function transferFrom(address _from, address _to, uint256 _value) canTransfer(_from) public returns (bool) \n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    \n', '    Transfer(_from, _to, _value);\n', '    \n', '    return true;\n', '  }\n', '  \n', '  function allocate(address _sale, address _investor, uint256 _value) onlyOwnerOrManager public \n', '  {\n', '  \trequire(_sale != address(0));\n', '  \tCrowdsale sale = Crowdsale(_sale);\n', '  \taddress pool = sale.pool();\n', '\n', '    require(_investor != address(0));\n', '    require(_value <= balances[pool]);\n', '    require(_value <= allowed[pool][msg.sender]);\n', '\n', '    balances[pool] = balances[pool].sub(_value);\n', '    balances[_investor] = balances[_investor].add(_value);\n', '    allowed[pool][_sale] = allowed[pool][_sale].sub(_value);\n', '    \n', '    Transfer(pool, _investor, _value);\n', '  }\n', '  \n', '  function deallocate(address _sale, address _investor, uint256 _value) onlyOwnerOrManager public \n', '  {\n', '  \trequire(_sale != address(0));\n', '  \tCrowdsale sale = Crowdsale(_sale);\n', '  \taddress pool = sale.pool();\n', '  \t\n', '    require(_investor != address(0));\n', '  \trequire(_value <= balances[_investor]);\n', '  \t\n', '  \tbalances[_investor] = balances[_investor].sub(_value);\n', '  \tbalances[pool] = balances[pool].add(_value);\n', '  \tallowed[pool][_sale] = allowed[pool][_sale].add(_value);\n', '  \t\n', '  \tTransfer(_investor, pool, _value);\n', '  }\n', '\n', ' \tfunction approve(address _spender, uint256 _value) public returns (bool) \n', ' \t{\n', '    allowed[msg.sender][_spender] = _value;\n', '    \n', '    Approval(msg.sender, _spender, _value);\n', '    \n', '    return true;\n', '  }\n', '\n', '  function mint(address _to, uint256 _value, uint256 _releaseTime) onlyOwnerOrManager public returns (bool) \n', '  {\n', '  \trequire(_to != address(0));\n', '  \t\n', '    totalSupply = totalSupply.add(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    \n', '    Mint(_to, _value);\n', '    Transfer(0x0, _to, _value);\n', '    \n', '    setReleaseTime(_to, _releaseTime);\n', '    \n', '    return true;\n', '  }\n', '\n', '  function setReleaseTime(address _owner, uint256 _newReleaseTime) onlyOwnerOrManager public\n', '  {\n', '    require(_owner != address(0));\n', '    \n', '  \tuint256 oldReleaseTime = releaseTime[_owner];\n', '  \tif (oldReleaseTime != _newReleaseTime)\n', '  \t{\n', '  \t\treleaseTime[_owner] = _newReleaseTime;\n', '    \n', '    \tReleaseTimeChanged(_owner, oldReleaseTime, _newReleaseTime);\n', '    }\n', '  }\n', '  \n', '  function setReleased(bool _newReleased) onlyOwnerOrManager public\n', '  {\n', '  \tbool oldReleased = released;\n', '  \tif (oldReleased != _newReleased)\n', '  \t{\n', '  \t\treleased = _newReleased;\n', '  \t\n', '  \t\tReleasedChanged(oldReleased, _newReleased);\n', '  \t}\n', '  }\n', '  \n', '}\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' */\n', 'contract Crowdsale is Manageable\n', '{\n', '  using SafeMath for uint256;\n', '\n', '  CrowdsaleToken public token;\n', '\n', '  uint256 public startTime;\n', '  uint256 public endTime  ;\n', '\n', '  uint256 public rate;\n', '  \n', '  uint256 public constant decimals = 18;\n', '  \n', '  uint256 public tokenSaleWeiCap;\t\t\n', '  uint256 public tokenSaleWeiGoal;\t\n', '  uint256 public tokenSaleWeiMax;\t\t\n', '  uint256 public tokenSaleWeiMin;\t\t\n', '  \n', '  address public pool; \n', '  address public wallet;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  enum State { Created, Active, Closed }\n', '\n', '  uint256 public totalAllocated;\n', '  mapping (address => uint256) public allocated;\n', '  \n', '  uint256 public totalDeposited;\n', '  mapping (address => uint256) public deposited;\n', '\n', '  State public state;\n', '\n', '  event Closed();\n', '  event Finalized();\n', '  event FundWithdrawed(uint256 ethAmount);\n', '  event TokenPurchased(address indexed _purchaser, address indexed _investor, uint256 _value, uint256 _amount, bytes _data);\n', '  event TokenReturned(address indexed _investor, uint256 _value);\n', '\n', '  function Crowdsale() public\n', '  {\n', '  \tstate = State.Created;\n', '  }\n', '  \n', '  function initCrowdsale(address _pool, address _token, uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _tokenSaleWeiCap, uint256 _tokenSaleWeiGoal, uint256 _tokenSaleWeiMax, uint256 _tokenSaleWeiMin, address _wallet) onlyOwnerOrManager public\n', '  {\n', '    require(state == State.Created);\n', '  \trequire(_pool != address(0));\n', '    require(_token != address(0));\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_endTime >= now);\n', '    require(_rate > 0);\n', '    require(_tokenSaleWeiCap >= _tokenSaleWeiGoal);\n', '    require(_wallet != 0x0);\n', '    \n', '    state = State.Active;\n', '    \n', '    pool             = _pool;\n', '    token            = CrowdsaleToken(_token);\n', '    startTime        = _startTime;\n', '    endTime          = _endTime;\n', '    rate             = _rate;\n', '    tokenSaleWeiCap  = _tokenSaleWeiCap;\n', '    tokenSaleWeiGoal = _tokenSaleWeiGoal;\n', '    tokenSaleWeiMax  = _tokenSaleWeiMax;\n', '    tokenSaleWeiMin  = _tokenSaleWeiMin;\n', '    wallet           = _wallet;\n', '  }\n', '\n', '  function allocation(address _investor) public constant returns (uint256)\n', '  {\n', '  \treturn allocated[_investor];\n', '  }\n', '\n', '  function () payable public\n', '  {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  function buyTokens(address _investor) public payable \n', '  {\n', '    require(_investor != 0x0);\n', '    require(startTime <= now && now <= endTime);\n', '    require(msg.value != 0);\n', '    require(state == State.Active);\n', '    \n', '    require(totalAllocated <= tokenSaleWeiCap);\n', '    \n', '    uint256 ethWeiAmount = msg.value;\n', '    \n', '    uint256 tokenWeiAmount = ethWeiAmount.mul(rate);\n', '    \n', '    uint256 personTokenWeiAmount = allocated[_investor].add(tokenWeiAmount);\n', '    \n', '    require(tokenSaleWeiMin <= personTokenWeiAmount);\n', '    require(personTokenWeiAmount <= tokenSaleWeiMax);\n', '    \n', '    totalAllocated = totalAllocated.add(tokenWeiAmount);\n', '\n', '    totalDeposited = totalDeposited.add(ethWeiAmount);\n', '    \n', '    allocated[_investor] = personTokenWeiAmount;\n', '    \n', '    deposited[_investor] = deposited[_investor].add(ethWeiAmount);\n', '    \n', '    token.allocate(this, _investor, tokenWeiAmount);\n', '    \n', '    TokenPurchased(msg.sender, _investor, ethWeiAmount, tokenWeiAmount, msg.data);\n', '  }\n', '\n', '  function deallocate(address _investor, uint256 _value) onlyOwnerOrManager public \n', '  {\n', '  \trequire(_investor != address(0));\n', '  \trequire(_value > 0);\n', '    require(_value <= allocated[_investor]);\n', '\n', '\t\ttotalAllocated = totalAllocated.sub(_value);\n', '\t\t\n', '\t\tallocated[_investor] = allocated[_investor].sub(_value);\n', '\t\t\n', '\t\ttoken.deallocate(this, _investor, _value);\n', '\t\t\n', '\t\tTokenReturned(_investor, _value);\n', '  }\n', '\n', '  function goalReached() public constant returns (bool)\n', '  {\n', '    return totalAllocated >= tokenSaleWeiGoal;\n', '  }\n', '\n', '  function hasEnded() public constant returns (bool) \n', '  {\n', '    bool capReached = (totalAllocated >= tokenSaleWeiCap);\n', '    return (now > endTime) || capReached;\n', '  }\n', '\n', '  function finalize() onlyOwnerOrManager public \n', '  {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    if (goalReached()) \n', '    {\n', '      close();\n', '    } \n', '    \n', '    Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  function close() onlyOwnerOrManager public\n', '  {\n', '    require(state == State.Active);\n', '    \n', '    state = State.Closed;\n', '    \n', '    Closed();\n', '  }\n', '\n', '  function withdraw() onlyOwnerOrManager public\n', '  {\n', '  \trequire(state == State.Closed);\n', '  \t\n', '  \tuint256 depositedValue = this.balance;\n', '  \tif (depositedValue > 0)\n', '  \t{\n', '  \t\twallet.transfer(depositedValue);\n', '  \t\n', '  \t\tFundWithdrawed(depositedValue);\n', '  \t}\n', '  }\n', '  \n', '}\n', '\n', '\n', '/**\n', ' * @title CrowdsaleManager\n', ' */\n', 'contract CrowdsaleManager is Manageable \n', '{\n', '  using SafeMath for uint256;\n', '  \n', '  uint256 public constant decimals = 18;\n', '\n', '  CrowdsaleToken public token;\n', '  Crowdsale      public sale1;\n', '  Crowdsale      public sale2;\n', '  Crowdsale      public sale3;\n', '  \n', '  address public constant tokenReserved1Deposit = 0x6EE96ba492a738BDD080d7353516133ea806DDee;\n', '  address public constant tokenReserved2Deposit = 0xAFBcB72fE97A5191d03E328dE07BB217dA21EaE4;\n', '  address public constant tokenReserved3Deposit = 0xd7118eE872870040d86495f13E61b88EE5C93586;\n', '  address public constant tokenReserved4Deposit = 0x08ce2b3512aE0387495AB5f61e6B0Cf846Ae59a7;\n', '  \n', '  address public constant withdrawWallet1       = 0xf8dafE5ee19a28b95Ad93e05575269EcEE19DDf2;\n', '  address public constant withdrawWallet2       = 0x6f4aF515ECcE22EA0D1AB82F8742E058Ac4d9cb3;\n', '  address public constant withdrawWallet3       = 0xd172E0DEe60Af67dA3019Ad539ce3190a191d71D;\n', '\n', '  uint256 public constant tokenSale      = 750000000 * 10**decimals + 3000 * 1000 * 10**decimals;\n', '  uint256 public constant tokenReserved1 = 150000000 * 10**decimals - 3000 * 1000 * 10**decimals;\n', '  uint256 public constant tokenReserved2 = 270000000 * 10**decimals;           \t\t\t \n', '  uint256 public constant tokenReserved3 = 105000000 * 10**decimals;                \t\t\n', '  uint256 public constant tokenReserved4 = 225000000 * 10**decimals;                      \t\n', '  \n', '  function CrowdsaleManager() public\n', '  {\n', '  }\n', '  \n', '  function createToken() onlyOwnerOrManager public\n', '  {\n', '    token = new CrowdsaleToken();\n', '  }\n', '  \n', '  function mintToken() onlyOwnerOrManager public\n', '  {\n', '    token.mint(this                 , tokenSale     , now       );\n', '    token.mint(tokenReserved1Deposit, tokenReserved1, now       );\n', '    token.mint(tokenReserved2Deposit, tokenReserved2, 1544158800);\n', '    token.mint(tokenReserved3Deposit, tokenReserved3, 1544158800);\n', '    token.mint(tokenReserved4Deposit, tokenReserved4, 0         );\n', '  }\n', '  \n', '  function createSale1() onlyOwnerOrManager public\n', '  {\n', '    sale1 = new Crowdsale();\n', '  }\n', '  \n', '  function initSale1() onlyOwnerOrManager public\n', '  {\n', '    uint256 startTime \t\t\t\t= 1512622800;\n', '    uint256 endTime   \t\t\t\t= 1515301200;\n', '    uint256 rate      \t\t\t\t= 3450;\t\t\n', '    \n', '    uint256 tokenSaleWeiCap\t\t= 150000000000000000000000000;\n', '    uint256 tokenSaleWeiGoal\t=  10350000000000000000000000;\t\t\n', '    uint256 tokenSaleWeiMax\t\t=    345000000000000000000000;\t\n', '    uint256 tokenSaleWeiMin\t\t=      3450000000000000000000;\t\n', '    \n', '    sale1.initCrowdsale(this, token, startTime, endTime, rate, tokenSaleWeiCap, tokenSaleWeiGoal, tokenSaleWeiMax, tokenSaleWeiMin, withdrawWallet1);\n', '    \n', '    token.approve(sale1, tokenSaleWeiCap.add(tokenSaleWeiMax));\n', '    \n', '    token.changeManager(sale1);\n', '  }\n', '  \n', '  function finalizeSale1() onlyOwnerOrManager public\n', '  {\n', '  \tsale1.finalize();\n', '  }\n', '  \n', '  function closeSale1() onlyOwnerOrManager public\n', '  {\n', '  \tsale1.close();\n', '  }\n', '  \n', '  function withdrawSale1() onlyOwnerOrManager public\n', '  {\n', '  \tsale1.withdraw();\n', '  }\n', '  \n', '  function createSale2() onlyOwnerOrManager public\n', '  {\n', '    sale2 = new Crowdsale();\n', '  }\n', '  \n', '  function initSale2() onlyOwnerOrManager public\n', '  {\n', '    uint256 startTime \t\t\t\t= 1515474000;\n', '    uint256 endTime   \t\t\t\t= 1517288400;\n', '    uint256 rate      \t\t\t\t= 3000;\t\t\n', '    \n', '    uint256 tokenSaleWeiCap\t\t= 375000000000000000000000000;\n', '    uint256 tokenSaleWeiGoal\t=                           0;\t\t\n', '    uint256 tokenSaleWeiMax\t\t=   3000000000000000000000000;\t\n', '    uint256 tokenSaleWeiMin\t\t=      3000000000000000000000;\t\n', '\n', '   \ttokenSaleWeiCap = tokenSaleWeiCap.add(sale1.tokenSaleWeiCap());\n', '   \ttokenSaleWeiCap = tokenSaleWeiCap.sub(sale1.totalAllocated());\n', '    \n', '    sale2.initCrowdsale(this, token, startTime, endTime, rate, tokenSaleWeiCap, tokenSaleWeiGoal, tokenSaleWeiMax, tokenSaleWeiMin, withdrawWallet2);\n', '    \n', '    token.approve(sale2, tokenSaleWeiCap.add(tokenSaleWeiMax));\n', '    \n', '    token.changeManager(sale2);\n', '  }\n', '  \n', '  function finalizeSale2() onlyOwnerOrManager public\n', '  {\n', '  \tsale2.finalize();\n', '  }\n', '  \n', '  function closeSale2() onlyOwnerOrManager public\n', '  {\n', '  \tsale2.close();\n', '  }\n', '  \n', '  function withdrawSale2() onlyOwnerOrManager public\n', '  {\n', '  \tsale2.withdraw();\n', '  }\n', '  \n', '  function createSale3() onlyOwnerOrManager public\n', '  {\n', '    sale3 = new Crowdsale();\n', '  }\n', '  \n', '  function initSale3(uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _cap, uint256 _goal, uint256 _max, uint _min) onlyOwnerOrManager public\n', '  {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_cap >= _goal);\n', '  \n', '    uint256 startTime \t\t\t\t= _startTime;\n', '    uint256 endTime   \t\t\t\t= _endTime;\n', '    uint256 rate      \t\t\t\t= _rate;\n', '    \n', '    uint256 tokenSaleWeiCap\t\t= _cap;\n', '    uint256 tokenSaleWeiGoal\t= _goal;\t\n', '    uint256 tokenSaleWeiMax\t\t= _max;\t\n', '    uint256 tokenSaleWeiMin\t\t= _min;\t\n', '\n', '    sale3.initCrowdsale(this, token, startTime, endTime, rate, tokenSaleWeiCap, tokenSaleWeiGoal, tokenSaleWeiMax, tokenSaleWeiMin, withdrawWallet3);\n', '    \n', '    token.approve(sale3, tokenSaleWeiCap.add(tokenSaleWeiMax));\n', '    \n', '    token.changeManager(sale3);\n', '  }\n', '  \n', '  function finalizeSale3() onlyOwnerOrManager public\n', '  {\n', '  \tsale3.finalize();\n', '  }\n', '  \n', '  function closeSale3() onlyOwnerOrManager public\n', '  {\n', '  \tsale3.close();\n', '  }\n', '  \n', '  function withdrawSale3() onlyOwnerOrManager public\n', '  {\n', '  \tsale3.withdraw();\n', '  }\n', '  \n', '  function releaseTokenTransfer(bool _newReleased) onlyOwner public\n', '  {\n', '  \ttoken.setReleased(_newReleased);\n', '  }\n', '  \n', '  function changeTokenManager(address _newManager) onlyOwner public\n', '  {\n', '  \ttoken.changeManager(_newManager);\n', '  }\n', '  \n', '  function changeSaleManager(address _sale, address _newManager) onlyOwner public\n', '  {\n', '  \trequire(_sale != address(0));\n', '  \tCrowdsale sale = Crowdsale(_sale);\n', '  \t\n', '  \tsale.changeManager(_newManager);\n', '  }\n', '  \n', '  function deallocate(address _sale, address _investor) onlyOwner public\n', '  {\n', '  \trequire(_sale != address(0));\n', '  \tCrowdsale sale = Crowdsale(_sale);\n', '  \t\n', '  \tuint256 allocatedValue = sale.allocation(_investor);\n', '  \t\n', '  \tsale.deallocate(_investor, allocatedValue);\n', '  }\n', '  \n', '  function promotionAllocate(address _investor, uint256 _value) onlyOwner public\n', '  {\n', '  \ttoken.transfer(_investor, _value);\n', '  }\n', '  \n', '}']