['pragma solidity ^0.4.15;\n', '\n', 'contract ERC20 {\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);  \n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract BasicToken is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool) {\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] = balances[msg.sender].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '\n', '    /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '}\n', '\n', '\n', '    /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '\n', '}\n', '\n', 'contract EPTToken is BasicToken {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    string public name = "e-Pocket Token";                      //name of the token\n', '    string public symbol = "EPT";                               //symbol of the token\n', '    uint8 public decimals = 18;                                 //decimals\n', '    uint256 public initialSupply = 64000000 * 10**18;           //total supply of Tokens\n', '\n', '    //variables\n', '    uint256 public totalAllocatedTokens;                         //variable to keep track of funds allocated\n', '    uint256 public tokensAllocatedToCrowdFund;                   //funds allocated to crowdfund\n', '    uint256 public foundersAllocation;                           //funds allocated to founder\n', '\n', '    //addresses\n', '    address public founderMultiSigAddress;                       //Multi sign address of founder\n', '    address public crowdFundAddress;                             //Address of crowdfund contract\n', '\n', '    //events\n', '    event ChangeFoundersWalletAddress(uint256 _blockTimeStamp, address indexed _foundersWalletAddress);\n', '    \n', '    //modifierss\n', '\n', '    modifier nonZeroAddress(address _to){\n', '        require(_to != 0x0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyFounders(){\n', '        require(msg.sender == founderMultiSigAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlyCrowdfund(){\n', '        require(msg.sender == crowdFundAddress);\n', '        _;\n', '    }\n', '\n', '    /**\n', '        @dev EPTToken Constructor to initiate the variables with some input argument\n', '        @param _crowdFundAddress This is the address of the crowdfund which leads the distribution of tokens\n', '        @param _founderMultiSigAddress This is the address of the founder which have the hold over the contract.\n', '    \n', '     */\n', '    \n', '    function EPTToken(address _crowdFundAddress, address _founderMultiSigAddress) {\n', '        crowdFundAddress = _crowdFundAddress;\n', '        founderMultiSigAddress = _founderMultiSigAddress;\n', '    \n', '        //token allocation\n', '        tokensAllocatedToCrowdFund = 32 * 10**24;\n', '        foundersAllocation = 32 * 10**24;\n', '\n', '        // Assigned balances\n', '        balances[crowdFundAddress] = tokensAllocatedToCrowdFund;\n', '        balances[founderMultiSigAddress] = foundersAllocation;\n', '\n', '        totalAllocatedTokens = balances[founderMultiSigAddress];\n', '    }\n', '\n', '    /**\n', '        @dev changeTotalSupply is the function used to variate the variable totalAllocatedTokens\n', '        @param _amount amount of tokens are sold out to increase the value of totalAllocatedTokens\n', '     */\n', '\n', '    function changeTotalSupply(uint256 _amount) onlyCrowdfund {\n', '        totalAllocatedTokens += _amount;\n', '    }\n', '\n', '\n', '    /**\n', '        @dev changeFounderMultiSigAddress function use to change the ownership of the contract\n', '        @param _newFounderMultiSigAddress New address which will take the ownership of the contract\n', '     */\n', '    \n', '    function changeFounderMultiSigAddress(address _newFounderMultiSigAddress) onlyFounders nonZeroAddress(_newFounderMultiSigAddress) {\n', '        founderMultiSigAddress = _newFounderMultiSigAddress;\n', '        ChangeFoundersWalletAddress(now, founderMultiSigAddress);\n', '    }\n', '\n', '  \n', '}\n', '\n', '\n', 'contract EPTCrowdfund {\n', '    \n', '    using SafeMath for uint256;\n', '\n', '    EPTToken public token;                                      // Token contract reference\n', '    \n', '    address public beneficiaryAddress;                          // Address where all funds get allocated \n', '    address public founderAddress;                              // Founders address\n', '    uint256 public crowdfundStartTime = 1516579201;             // Monday, 22-Jan-18 00:00:01 UTC\n', '    uint256 public crowdfundEndTime = 1518998399;               // Sunday, 18-Feb-18 23:59:59 UTC\n', '    uint256 public presaleStartTime = 1513123201;               // Wednesday, 13-Dec-17 00:00:01\n', '    uint256 public presaleEndTime = 1516579199;                 // Sunday, 21-Jan-18 23:59:59\n', '    uint256 public ethRaised;                                   // Counter to track the amount raised\n', '    bool private tokenDeployed = false;                         // Flag to track the token deployment -- only can be set once\n', '    uint256 public tokenSold;                                   // Counter to track the amount of token sold\n', '    uint256 private ethRate;\n', '    \n', '    \n', '    //events\n', '    event ChangeFounderAddress(address indexed _newFounderAddress , uint256 _timestamp);\n', '    event TokenPurchase(address indexed _beneficiary, uint256 _value, uint256 _amount);\n', '    event CrowdFundClosed(uint256 _timestamp);\n', '    \n', '    enum State {PreSale, CrowdSale, Finish}\n', '    \n', '    //Modifiers\n', '    modifier onlyfounder() {\n', '        require(msg.sender == founderAddress);\n', '        _;\n', '    }\n', '\n', '    modifier nonZeroAddress(address _to) {\n', '        require(_to != 0x0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyPublic() {\n', '        require(msg.sender != founderAddress);\n', '        _;\n', '    }\n', '\n', '    modifier nonZeroEth() {\n', '        require(msg.value != 0);\n', '        _;\n', '    }\n', '\n', '    modifier isTokenDeployed() {\n', '        require(tokenDeployed == true);\n', '        _;\n', '    }\n', '\n', '    modifier isBetween() {\n', '        require(now >= presaleStartTime && now <= crowdfundEndTime);\n', '        _;\n', '    }\n', '\n', '    /**\n', '        @dev EPTCrowdfund Constructor used to initialize the required variable.\n', '        @param _founderAddress Founder address \n', '        @param _ethRate Rate of ether in dollars at the time of deployment.\n', '        @param _beneficiaryAddress Address that hold all funds collected from investors\n', '\n', '     */\n', '\n', '    function EPTCrowdfund(address _founderAddress, address _beneficiaryAddress, uint256 _ethRate) {\n', '        beneficiaryAddress = _beneficiaryAddress;\n', '        founderAddress = _founderAddress;\n', '        ethRate = uint256(_ethRate);\n', '    }\n', '   \n', '    /**\n', '        @dev setToken Function used to set the token address into the contract.\n', '        @param _tokenAddress variable that contains deployed token address \n', '     */\n', '\n', '    function setToken(address _tokenAddress) nonZeroAddress(_tokenAddress) onlyfounder {\n', '         require(tokenDeployed == false);\n', '         token = EPTToken(_tokenAddress);\n', '         tokenDeployed = true;\n', '    }\n', '    \n', '    \n', '    /**\n', '        @dev changeFounderWalletAddress used to change the wallet address or change the ownership\n', '        @param _newAddress new founder wallet address\n', '     */\n', '\n', '    function changeFounderWalletAddress(address _newAddress) onlyfounder nonZeroAddress(_newAddress) {\n', '         founderAddress = _newAddress;\n', '         ChangeFounderAddress(founderAddress,now);\n', '    }\n', '\n', '    \n', '    /**\n', '        @dev buyTokens function used to buy the tokens using ethers only. sale \n', '            is only processed between start time and end time. \n', '        @param _beneficiary address of the investor\n', '        @return bool \n', '     */\n', '\n', '    function buyTokens (address _beneficiary)\n', '    isBetween\n', '    onlyPublic\n', '    nonZeroAddress(_beneficiary)\n', '    nonZeroEth\n', '    isTokenDeployed\n', '    payable\n', '    public\n', '    returns (bool)\n', '    {\n', '         uint256 amount = msg.value.mul(((ethRate.mul(100)).div(getRate())));\n', '    \n', '        if (token.transfer(_beneficiary, amount)) {\n', '            fundTransfer(msg.value);\n', '            \n', '            ethRaised = ethRaised.add(msg.value);\n', '            tokenSold = tokenSold.add(amount);\n', '            token.changeTotalSupply(amount); \n', '            TokenPurchase(_beneficiary, msg.value, amount);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '        @dev setEthRate function used to set the ether Rate\n', '        @param _newEthRate latest eth rate\n', '        @return bool\n', '     \n', '     */\n', '\n', '    function setEthRate(uint256 _newEthRate) onlyfounder returns (bool) {\n', '        require(_newEthRate > 0);\n', '        ethRate = _newEthRate;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        @dev getRate used to get the price of each token on weekly basis\n', '        @return uint256 price of each tokens in dollar\n', '    \n', '     */\n', '\n', '    function getRate() internal returns(uint256) {\n', '\n', '        if (getState() == State.PreSale) {\n', '            return 10;\n', '        } \n', '        if(getState() == State.CrowdSale) {\n', '            if (now >= crowdfundStartTime + 3 weeks && now <= crowdfundEndTime) {\n', '                return 30;\n', '             }\n', '            if (now >= crowdfundStartTime + 2 weeks) {\n', '                return 25;\n', '            }\n', '            if (now >= crowdfundStartTime + 1 weeks) {\n', '                return 20;\n', '            }\n', '            if (now >= crowdfundStartTime) {\n', '                return 15;\n', '            }  \n', '        } else {\n', '            return 0;\n', '        }\n', '              \n', '    }  \n', '\n', '    /**\n', '        @dev `getState` used to findout the state of the crowdfund\n', '        @return State \n', '     */\n', '\n', '    function getState() private returns(State) {\n', '        if (now >= crowdfundStartTime && now <= crowdfundEndTime) {\n', '            return State.CrowdSale;\n', '        }\n', '        if (now >= presaleStartTime && now <= presaleEndTime) {\n', '            return State.PreSale;\n', '        } else {\n', '            return State.Finish;\n', '        }\n', '\n', '    }\n', '\n', '    /**\n', '        @dev endCrowdFund called only after the end time of crowdfund . use to end the sale.\n', '        @return bool\n', '     */\n', '\n', '    function endCrowdFund() onlyfounder returns(bool) {\n', '        require(now > crowdfundEndTime);\n', '        uint256 remainingtoken = token.balanceOf(this);\n', '\n', '        if (remainingtoken != 0) {\n', '            token.transfer(founderAddress,remainingtoken);\n', '            CrowdFundClosed(now);\n', '            return true;\n', '        }\n', '        CrowdFundClosed(now);\n', '        return false;    \n', ' } \n', '\n', '    /**\n', '        @dev fundTransfer used to transfer collected ether into the beneficary address\n', '     */\n', '\n', '    function fundTransfer(uint256 _funds) private {\n', '        beneficiaryAddress.transfer(_funds);\n', '    }\n', '\n', '    // Crowdfund entry\n', '    // send ether to the contract address\n', '    // gas used 200000\n', '    function () payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.15;\n', '\n', 'contract ERC20 {\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);  \n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract BasicToken is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool) {\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] = balances[msg.sender].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '\n', '    /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '}\n', '\n', '\n', '    /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '\n', '}\n', '\n', 'contract EPTToken is BasicToken {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    string public name = "e-Pocket Token";                      //name of the token\n', '    string public symbol = "EPT";                               //symbol of the token\n', '    uint8 public decimals = 18;                                 //decimals\n', '    uint256 public initialSupply = 64000000 * 10**18;           //total supply of Tokens\n', '\n', '    //variables\n', '    uint256 public totalAllocatedTokens;                         //variable to keep track of funds allocated\n', '    uint256 public tokensAllocatedToCrowdFund;                   //funds allocated to crowdfund\n', '    uint256 public foundersAllocation;                           //funds allocated to founder\n', '\n', '    //addresses\n', '    address public founderMultiSigAddress;                       //Multi sign address of founder\n', '    address public crowdFundAddress;                             //Address of crowdfund contract\n', '\n', '    //events\n', '    event ChangeFoundersWalletAddress(uint256 _blockTimeStamp, address indexed _foundersWalletAddress);\n', '    \n', '    //modifierss\n', '\n', '    modifier nonZeroAddress(address _to){\n', '        require(_to != 0x0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyFounders(){\n', '        require(msg.sender == founderMultiSigAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlyCrowdfund(){\n', '        require(msg.sender == crowdFundAddress);\n', '        _;\n', '    }\n', '\n', '    /**\n', '        @dev EPTToken Constructor to initiate the variables with some input argument\n', '        @param _crowdFundAddress This is the address of the crowdfund which leads the distribution of tokens\n', '        @param _founderMultiSigAddress This is the address of the founder which have the hold over the contract.\n', '    \n', '     */\n', '    \n', '    function EPTToken(address _crowdFundAddress, address _founderMultiSigAddress) {\n', '        crowdFundAddress = _crowdFundAddress;\n', '        founderMultiSigAddress = _founderMultiSigAddress;\n', '    \n', '        //token allocation\n', '        tokensAllocatedToCrowdFund = 32 * 10**24;\n', '        foundersAllocation = 32 * 10**24;\n', '\n', '        // Assigned balances\n', '        balances[crowdFundAddress] = tokensAllocatedToCrowdFund;\n', '        balances[founderMultiSigAddress] = foundersAllocation;\n', '\n', '        totalAllocatedTokens = balances[founderMultiSigAddress];\n', '    }\n', '\n', '    /**\n', '        @dev changeTotalSupply is the function used to variate the variable totalAllocatedTokens\n', '        @param _amount amount of tokens are sold out to increase the value of totalAllocatedTokens\n', '     */\n', '\n', '    function changeTotalSupply(uint256 _amount) onlyCrowdfund {\n', '        totalAllocatedTokens += _amount;\n', '    }\n', '\n', '\n', '    /**\n', '        @dev changeFounderMultiSigAddress function use to change the ownership of the contract\n', '        @param _newFounderMultiSigAddress New address which will take the ownership of the contract\n', '     */\n', '    \n', '    function changeFounderMultiSigAddress(address _newFounderMultiSigAddress) onlyFounders nonZeroAddress(_newFounderMultiSigAddress) {\n', '        founderMultiSigAddress = _newFounderMultiSigAddress;\n', '        ChangeFoundersWalletAddress(now, founderMultiSigAddress);\n', '    }\n', '\n', '  \n', '}\n', '\n', '\n', 'contract EPTCrowdfund {\n', '    \n', '    using SafeMath for uint256;\n', '\n', '    EPTToken public token;                                      // Token contract reference\n', '    \n', '    address public beneficiaryAddress;                          // Address where all funds get allocated \n', '    address public founderAddress;                              // Founders address\n', '    uint256 public crowdfundStartTime = 1516579201;             // Monday, 22-Jan-18 00:00:01 UTC\n', '    uint256 public crowdfundEndTime = 1518998399;               // Sunday, 18-Feb-18 23:59:59 UTC\n', '    uint256 public presaleStartTime = 1513123201;               // Wednesday, 13-Dec-17 00:00:01\n', '    uint256 public presaleEndTime = 1516579199;                 // Sunday, 21-Jan-18 23:59:59\n', '    uint256 public ethRaised;                                   // Counter to track the amount raised\n', '    bool private tokenDeployed = false;                         // Flag to track the token deployment -- only can be set once\n', '    uint256 public tokenSold;                                   // Counter to track the amount of token sold\n', '    uint256 private ethRate;\n', '    \n', '    \n', '    //events\n', '    event ChangeFounderAddress(address indexed _newFounderAddress , uint256 _timestamp);\n', '    event TokenPurchase(address indexed _beneficiary, uint256 _value, uint256 _amount);\n', '    event CrowdFundClosed(uint256 _timestamp);\n', '    \n', '    enum State {PreSale, CrowdSale, Finish}\n', '    \n', '    //Modifiers\n', '    modifier onlyfounder() {\n', '        require(msg.sender == founderAddress);\n', '        _;\n', '    }\n', '\n', '    modifier nonZeroAddress(address _to) {\n', '        require(_to != 0x0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyPublic() {\n', '        require(msg.sender != founderAddress);\n', '        _;\n', '    }\n', '\n', '    modifier nonZeroEth() {\n', '        require(msg.value != 0);\n', '        _;\n', '    }\n', '\n', '    modifier isTokenDeployed() {\n', '        require(tokenDeployed == true);\n', '        _;\n', '    }\n', '\n', '    modifier isBetween() {\n', '        require(now >= presaleStartTime && now <= crowdfundEndTime);\n', '        _;\n', '    }\n', '\n', '    /**\n', '        @dev EPTCrowdfund Constructor used to initialize the required variable.\n', '        @param _founderAddress Founder address \n', '        @param _ethRate Rate of ether in dollars at the time of deployment.\n', '        @param _beneficiaryAddress Address that hold all funds collected from investors\n', '\n', '     */\n', '\n', '    function EPTCrowdfund(address _founderAddress, address _beneficiaryAddress, uint256 _ethRate) {\n', '        beneficiaryAddress = _beneficiaryAddress;\n', '        founderAddress = _founderAddress;\n', '        ethRate = uint256(_ethRate);\n', '    }\n', '   \n', '    /**\n', '        @dev setToken Function used to set the token address into the contract.\n', '        @param _tokenAddress variable that contains deployed token address \n', '     */\n', '\n', '    function setToken(address _tokenAddress) nonZeroAddress(_tokenAddress) onlyfounder {\n', '         require(tokenDeployed == false);\n', '         token = EPTToken(_tokenAddress);\n', '         tokenDeployed = true;\n', '    }\n', '    \n', '    \n', '    /**\n', '        @dev changeFounderWalletAddress used to change the wallet address or change the ownership\n', '        @param _newAddress new founder wallet address\n', '     */\n', '\n', '    function changeFounderWalletAddress(address _newAddress) onlyfounder nonZeroAddress(_newAddress) {\n', '         founderAddress = _newAddress;\n', '         ChangeFounderAddress(founderAddress,now);\n', '    }\n', '\n', '    \n', '    /**\n', '        @dev buyTokens function used to buy the tokens using ethers only. sale \n', '            is only processed between start time and end time. \n', '        @param _beneficiary address of the investor\n', '        @return bool \n', '     */\n', '\n', '    function buyTokens (address _beneficiary)\n', '    isBetween\n', '    onlyPublic\n', '    nonZeroAddress(_beneficiary)\n', '    nonZeroEth\n', '    isTokenDeployed\n', '    payable\n', '    public\n', '    returns (bool)\n', '    {\n', '         uint256 amount = msg.value.mul(((ethRate.mul(100)).div(getRate())));\n', '    \n', '        if (token.transfer(_beneficiary, amount)) {\n', '            fundTransfer(msg.value);\n', '            \n', '            ethRaised = ethRaised.add(msg.value);\n', '            tokenSold = tokenSold.add(amount);\n', '            token.changeTotalSupply(amount); \n', '            TokenPurchase(_beneficiary, msg.value, amount);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '        @dev setEthRate function used to set the ether Rate\n', '        @param _newEthRate latest eth rate\n', '        @return bool\n', '     \n', '     */\n', '\n', '    function setEthRate(uint256 _newEthRate) onlyfounder returns (bool) {\n', '        require(_newEthRate > 0);\n', '        ethRate = _newEthRate;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        @dev getRate used to get the price of each token on weekly basis\n', '        @return uint256 price of each tokens in dollar\n', '    \n', '     */\n', '\n', '    function getRate() internal returns(uint256) {\n', '\n', '        if (getState() == State.PreSale) {\n', '            return 10;\n', '        } \n', '        if(getState() == State.CrowdSale) {\n', '            if (now >= crowdfundStartTime + 3 weeks && now <= crowdfundEndTime) {\n', '                return 30;\n', '             }\n', '            if (now >= crowdfundStartTime + 2 weeks) {\n', '                return 25;\n', '            }\n', '            if (now >= crowdfundStartTime + 1 weeks) {\n', '                return 20;\n', '            }\n', '            if (now >= crowdfundStartTime) {\n', '                return 15;\n', '            }  \n', '        } else {\n', '            return 0;\n', '        }\n', '              \n', '    }  \n', '\n', '    /**\n', '        @dev `getState` used to findout the state of the crowdfund\n', '        @return State \n', '     */\n', '\n', '    function getState() private returns(State) {\n', '        if (now >= crowdfundStartTime && now <= crowdfundEndTime) {\n', '            return State.CrowdSale;\n', '        }\n', '        if (now >= presaleStartTime && now <= presaleEndTime) {\n', '            return State.PreSale;\n', '        } else {\n', '            return State.Finish;\n', '        }\n', '\n', '    }\n', '\n', '    /**\n', '        @dev endCrowdFund called only after the end time of crowdfund . use to end the sale.\n', '        @return bool\n', '     */\n', '\n', '    function endCrowdFund() onlyfounder returns(bool) {\n', '        require(now > crowdfundEndTime);\n', '        uint256 remainingtoken = token.balanceOf(this);\n', '\n', '        if (remainingtoken != 0) {\n', '            token.transfer(founderAddress,remainingtoken);\n', '            CrowdFundClosed(now);\n', '            return true;\n', '        }\n', '        CrowdFundClosed(now);\n', '        return false;    \n', ' } \n', '\n', '    /**\n', '        @dev fundTransfer used to transfer collected ether into the beneficary address\n', '     */\n', '\n', '    function fundTransfer(uint256 _funds) private {\n', '        beneficiaryAddress.transfer(_funds);\n', '    }\n', '\n', '    // Crowdfund entry\n', '    // send ether to the contract address\n', '    // gas used 200000\n', '    function () payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '}']
