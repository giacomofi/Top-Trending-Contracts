['pragma solidity ^0.4.18;\n', '\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function withdraw() public onlyOwner {\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(owner == msg.sender);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Distributor is Owned {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    ERC20 public token;\n', '    uint256 public eligibleTokens;\n', '    mapping(address => uint256) public distributed;\n', '    uint256 public totalDistributionAmountInWei;\n', '\n', '    event Dividend(address holder, uint256 amountDistributed);\n', '\n', '    function Distributor(address _targetToken, uint256 _eligibleTokens) public payable {\n', '        require(msg.value > 0);\n', '\n', '        token = ERC20(_targetToken);\n', '        assert(_eligibleTokens <= token.totalSupply());\n', '        eligibleTokens = _eligibleTokens;\n', '        totalDistributionAmountInWei = msg.value;\n', '    }\n', '\n', '    function percent(uint numerator, uint denominator, uint precision) internal pure returns (uint quotient) {\n', '        uint _numerator = numerator * 10 ** (precision + 1);\n', '        quotient = ((_numerator / denominator) + 5) / 10;\n', '    }\n', '\n', '    function distribute(address holder) public onlyOwner returns (uint256 amountDistributed) {\n', '        require(distributed[holder] == 0);\n', '\n', '        uint256 holderBalance = token.balanceOf(holder);\n', '        uint256 portion = percent(holderBalance, eligibleTokens, uint256(4));\n', '        amountDistributed = totalDistributionAmountInWei.mul(portion).div(10000);\n', '\n', '        distributed[holder] = amountDistributed;\n', '        Dividend(holder, amountDistributed);\n', '        holder.transfer(amountDistributed);\n', '    }\n', '\n', '\n', '}']