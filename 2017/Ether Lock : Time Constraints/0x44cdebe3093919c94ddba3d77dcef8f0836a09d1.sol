['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract IERC20 {\n', '\n', '    function balanceOf(address _to) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public;\n', '    function transferFrom(address from, address to, uint256 value) public;\n', '    function approve(address spender, uint256 value) public;\n', '    function allowance(address owner, address spender) public constant returns(uint256);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'contract StandardToken is IERC20{\n', '    using SafeMath for uint256;\n', '    // Balances for each account\n', '    mapping (address => uint256) balances;\n', '    // Owner of account approves the transfer of an amount to another account\n', '    mapping (address => mapping(address => uint256)) allowed;\n', '\n', '    // What is the balance of a particular account?\n', '    // @param who The address of the particular account\n', '    // @return the balanace the particular account\n', '    function balanceOf(address _to) public constant returns (uint256) {\n', '        return balances[_to];\n', '    }\n', '\n', '    // @notice send `value` token to `to` from `msg.sender`\n', '    // @param to The address of the recipient\n', '    // @param value The amount of token to be transferred\n', '    // @return the transaction address and send the event as Transfer\n', '    function transfer(address to, uint256 value) public {\n', '        require (\n', '            balances[msg.sender] >= value && value > 0\n', '        );\n', '        balances[msg.sender] = balances[msg.sender].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        Transfer(msg.sender, to, value);\n', '    }\n', '\n', '\n', '    // @notice send `value` token to `to` from `from`\n', '    // @param from The address of the sender\n', '    // @param to The address of the recipient\n', '    // @param value The amount of token to be transferred\n', '    // @return the transaction address and send the event as Transfer\n', '    function transferFrom(address from, address to, uint256 value) public {\n', '        require (\n', '            allowed[from][msg.sender] >= value && balances[from] >= value && value > 0\n', '        );\n', '        balances[from] = balances[from].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\n', '        Transfer(from, to, value);\n', '    }\n', '\n', '    // Allow spender to withdraw from your account, multiple times, up to the value amount.\n', '    // If this function is called again it overwrites the current allowance with value.\n', '    // @param spender The address of the sender\n', '    // @param value The amount to be approved\n', '    // @return the transaction address and send the event as Approval\n', '    function approve(address spender, uint256 value) public {\n', '        require (\n', '            balances[msg.sender] >= value && value > 0\n', '        );\n', '        allowed[msg.sender][spender] = value;\n', '        Approval(msg.sender, spender, value);\n', '    }\n', '\n', '    // Check the allowed value for the spender to withdraw from owner\n', '    // @param owner The address of the owner\n', '    // @param spender The address of the spender\n', '    // @return the amount which spender is still allowed to withdraw from owner\n', '    function allowance(address _owner, address spender) public constant returns (uint256) {\n', '        return allowed[_owner][spender];\n', '    }\n', '}\n', 'contract TLC is StandardToken {\n', '    \n', '  using SafeMath for uint256;\n', ' \n', '  string public constant name = "Toplancer";\n', '  string public constant symbol = "TLC";\n', '  uint256 public constant decimals = 18;\n', '  \n', '  uint256 public constant totalSupply = 400000000e18;  \n', '}\n', '\n', '\n', 'contract TLCMarketCrowdsale is TLC {\n', '    \n', '  uint256 public minContribAmount = 0.1 ether; // 0.1 ether\n', '  uint256 public presaleCap = 20000000e18; // 5%\n', '  uint256 public soldTokenInPresale;\n', '  uint256 public publicSaleCap = 320000000e18; // 80%\n', '  uint256 public soldTokenInPublicsale;\n', '  uint256 public distributionSupply = 60000000e18; // 15%\n', '  uint256 public softCap = 5000 ether;\n', '  uint256 public hardCap = 60000 ether;\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised = 0;\n', '   // Wallet Address of Token\n', '  address public multisig;\n', '  // Owner of Token\n', '  address public owner;\n', '   // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate = 3500 ; // 1 ether = 3500 TLC\n', '  // How much ETH each address has invested to this publicsale\n', '  mapping (address => uint256) public investedAmountOf;\n', '  // How many distinct addresses have invested\n', '  uint256 public investorCount;\n', '  // fund raised during public sale \n', '  uint256 public fundRaisedDuringPublicSale = 0;\n', '  // How much wei we have returned back to the contract after a failed crowdfund.\n', '  uint256 public loadedRefund = 0;\n', '  // How much wei we have given back to investors.\n', '  uint256 public weiRefunded = 0;\n', '\n', '  enum Stage {PRESALE, PUBLICSALE, SUCCESS, FAILURE, REFUNDING, CLOSED}\n', '  Stage public stage;\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  // Refund was processed for a contributor\n', '  event Refund(address investor, uint256 weiAmount);\n', ' \n', '\n', '  function TLCMarketCrowdsale(uint256 _startTime, uint256 _endTime, address _wallet) {\n', '        require( _endTime >= _startTime && _wallet != 0x0);\n', '\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '        multisig = _wallet;\n', '        owner=msg.sender;\n', '        balances[multisig] = totalSupply;\n', '        stage = Stage.PRESALE;\n', '  }\n', '  \n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '    uint256 weiAmount = msg.value;\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '    weiRaised = weiRaised.add(weiAmount);\n', '   \n', '    uint256 timebasedBonus = tokens.mul(getTimebasedBonusRate()).div(100);\n', '    tokens = tokens.add(timebasedBonus);\n', '    forwardFunds();\n', '    if (stage == Stage.PRESALE) {\n', '        assert (soldTokenInPresale + tokens <= presaleCap);\n', '        soldTokenInPresale = soldTokenInPresale.add(tokens);\n', '    } else {\n', '        assert (soldTokenInPublicsale + tokens <= publicSaleCap);\n', '         if(investedAmountOf[beneficiary] == 0) {\n', '           // A new investor\n', '           investorCount++;\n', '        }\n', '        // Update investor\n', '        investedAmountOf[beneficiary] = investedAmountOf[beneficiary].add(weiAmount);\n', '        fundRaisedDuringPublicSale = fundRaisedDuringPublicSale.add(weiAmount);\n', '        soldTokenInPublicsale = soldTokenInPublicsale.add(tokens);\n', '    }\n', '    balances[multisig] = balances[multisig].sub(tokens);\n', '    balances[beneficiary] = balances[beneficiary].add(tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '  }\n', '    // send ether to the fund collection wallet\n', '   // override to create custom fund forwarding mechanisms\n', '    function forwardFunds() internal {\n', '        multisig.transfer(msg.value);\n', '    }\n', '     // Payable method\n', '    // @notice Anyone can buy the tokens on tokensale by paying ether\n', '    function () public payable {\n', '        buyTokens(msg.sender);\n', '    }\n', ' \n', '    // modifier to allow only owner has full control on the function\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '     modifier isRefunding {\n', '        require (stage == Stage.REFUNDING);\n', '        _;\n', '    }\n', '     modifier isFailure {\n', '        require (stage == Stage.FAILURE);\n', '        _;\n', '    }\n', '    // @return true if crowdsale current lot event has ended\n', '    function hasEnded() public constant returns (bool) {\n', '        return getNow() > endTime;\n', '    }\n', '     // @return  current time\n', '    function getNow() public constant returns (uint256) {\n', '        return (now * 1000);\n', '    }\n', '   \n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '        bool withinPeriod = getNow() >= startTime && getNow() <= endTime;\n', '        bool nonZeroPurchase = msg.value != 0;\n', '        bool minContribution = minContribAmount <= msg.value;\n', '        return withinPeriod && nonZeroPurchase && minContribution;\n', '    }\n', '  // Get the time-based bonus rate\n', '  function getTimebasedBonusRate() internal constant returns (uint256) {\n', '  \t  uint256 bonusRate = 0;\n', '      if (stage == Stage.PRESALE) {\n', '          bonusRate = 50;\n', '      } else {\n', '          uint256 nowTime = getNow();\n', '          uint256 bonusFirstWeek = startTime + (7 days * 1000);\n', '          uint256 bonusSecondWeek = bonusFirstWeek + (7 days * 1000);\n', '          uint256 bonusThirdWeek = bonusSecondWeek + (7 days * 1000);\n', '          uint256 bonusFourthWeek = bonusThirdWeek + (7 days * 1000);\n', '          if (nowTime <= bonusFirstWeek) {\n', '              bonusRate = 25;\n', '          } else if (nowTime <= bonusSecondWeek) {\n', '              bonusRate = 20;\n', '          } else if (nowTime <= bonusThirdWeek) {\n', '              bonusRate = 10;\n', '          } else if (nowTime <= bonusFourthWeek) {\n', '              bonusRate = 5;\n', '          }\n', '      }\n', '      return bonusRate;\n', '  }\n', '\n', '  // Start public sale\n', '  function startPublicsale(uint256 _startTime, uint256 _endTime, uint256 _tokenPrice) public onlyOwner {\n', '      require(hasEnded() && stage == Stage.PRESALE && _endTime >= _startTime && _tokenPrice > 0);\n', '      stage = Stage.PUBLICSALE;\n', '      startTime = _startTime;\n', '      endTime = _endTime;\n', '      rate = _tokenPrice;\n', '  }\n', '  \n', '    // @return true if the crowdsale has raised enough money to be successful.\n', '    function isMaximumGoalReached() public constant returns (bool reached) {\n', '        return weiRaised >= hardCap;\n', '    }\n', '\n', '    // Validate and update the crowdsale stage\n', '    function updateICOStatus() public onlyOwner {\n', '        require(hasEnded() && stage == Stage.PUBLICSALE);\n', '        if (hasEnded() && weiRaised >= softCap) {\n', '            stage = Stage.SUCCESS;\n', '        } else if (hasEnded()) {\n', '            stage = Stage.FAILURE;\n', '        }\n', '    }\n', '\n', '    //  Allow load refunds back on the contract for the refunding. The team can transfer the funds back on the smart contract in the case the minimum goal was not reached.\n', '    function loadRefund() public payable isFailure{\n', '        require(msg.value != 0);\n', '        loadedRefund = loadedRefund.add(msg.value);\n', '        if (loadedRefund <= fundRaisedDuringPublicSale) {\n', '            stage = Stage.REFUNDING;\n', '        }\n', '    }\n', '\n', '    // Investors can claim refund.\n', '    // Note that any refunds from indirect buyers should be handled separately, and not through this contract.\n', '    function refund() public isRefunding {\n', '        uint256 weiValue = investedAmountOf[msg.sender];\n', '        require (weiValue != 0);\n', '\n', '        investedAmountOf[msg.sender] = 0;\n', '        balances[msg.sender] = 0;\n', '        weiRefunded = weiRefunded.add(weiValue);\n', '        Refund(msg.sender, weiValue);\n', '        \n', '        msg.sender.transfer(weiValue);\n', '        \n', '        if (weiRefunded <= fundRaisedDuringPublicSale) {\n', '            stage = Stage.CLOSED;\n', '        }\n', '    }\n', '  \n', '    // Set/change Multi-signature wallet address\n', '    function changeMultiSignatureWallet (address _multisig)public onlyOwner{\n', '        multisig = _multisig;\n', '    }\n', '    // Change Minimum contribution\n', '    function changeMinContribution(uint256 _minContribAmount)public onlyOwner {\n', '        minContribAmount = _minContribAmount;\n', '    }\n', '     \n', '     //Change Presale Publicsale end time\n', '     function changeEndTime(uint256 _endTime) public onlyOwner {\n', '        require(endTime > startTime);\n', '    \tendTime = _endTime;\n', '    }\n', '\n', '    // Token distribution to Founder, Key Employee Allocation\n', '    // _founderAndTeamCap = 10000000e18; 10%\n', '     function sendFounderAndTeamToken(address to, uint256 value) public onlyOwner{\n', '         require (\n', '             to != 0x0 && value > 0 && distributionSupply >= value\n', '         );\n', '         balances[multisig] = balances[multisig].sub(value);\n', '         balances[to] = balances[to].add(value);\n', '         distributionSupply = distributionSupply.sub(value);\n', '         Transfer(multisig, to, value);\n', '     }\n', '}']