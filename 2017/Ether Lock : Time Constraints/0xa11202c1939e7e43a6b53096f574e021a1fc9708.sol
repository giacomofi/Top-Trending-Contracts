['pragma solidity ^0.4.17;\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    function Owned() { owner = msg.sender; }\n', '    modifier onlyOwner { if (msg.sender != owner) revert(); _; }\n', '}\n', '\n', 'contract PasswordRecoverableWallet is Owned {\n', '    event Deposit(address from, uint amount);\n', '    event Withdrawal(address from, uint amount);\n', '    address public owner = msg.sender;\n', '    bytes32 recoveryHash;\n', '    uint256 recoveryValue;\n', '\n', '    function() public payable {\n', '        Deposit(msg.sender, msg.value);\n', '    }\n', '\n', '    function setRecoveryInfo(bytes32 hash, uint256 value) public onlyOwner {\n', '        recoveryHash = hash;\n', '        recoveryValue = value;\n', '    }\n', '\n', '    function recover(bytes32 password) public payable {\n', '        if ((sha256(password) == recoveryHash) && (msg.value == recoveryValue)) owner = msg.sender;\n', '    }\n', '\n', '    function withdraw(uint amount) public onlyOwner {\n', '        msg.sender.transfer(amount);\n', '        Withdrawal(msg.sender, amount);\n', '    }\n', '}']