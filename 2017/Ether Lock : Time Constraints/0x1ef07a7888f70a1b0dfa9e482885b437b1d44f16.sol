['pragma solidity ^0.4.13;\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is Token {\n', '  \n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract TokenSafe {\n', '  mapping (uint256 => uint256) allocations;\n', '  mapping (address => bool) isAddressInclude;\n', '  uint256 public unlockTimeLine;\n', '  uint256 public constant firstTimeLine = 1514044800;\n', '  uint256 public constant secondTimeLine = 1521820800;\n', '  uint256 public constant thirdTimeLine = 1529769600;\n', '  address public originalContract;\n', '  uint256 public constant exponent = 10**8;\n', '  uint256 public constant limitAmount = 1500000000*exponent;\n', '  uint256 public balance = 1500000000*exponent;\n', '  \n', '\n', '  function TokenSafe(address _originalContract) {\n', '    originalContract = _originalContract;\n', '    //init amount available for 1,3,6th month\n', '    //33.3%\n', '    allocations[1] = 333;\n', '    //66.6%\n', '    allocations[2] = 666;\n', '    //100%\n', '    allocations[3] = 1000;\n', '    \n', '    isAddressInclude[0xd3d45cd6210f9fa061a46406b5472d76a43dafd5] = true;\n', '    isAddressInclude[0xb94a75e6fd07bfba543930a500e1648c2e8c9622] = true;\n', '    isAddressInclude[0x59c582aefb682e0f32c9274a6cd1c2aa45353a1f] = true;\n', '  }\n', '\n', '  function unlock() external{\n', '    require(now > firstTimeLine); //prevent untimely call\n', '    require(isAddressInclude[msg.sender] == true); //prevent address unauthorized\n', '    \n', '    if(now >= firstTimeLine){\n', '        unlockTimeLine = 1;\n', '    }\n', '    if(now >= secondTimeLine){\n', '        unlockTimeLine = 2;\n', '    }\n', '    if (now >= thirdTimeLine){\n', '        unlockTimeLine = 3;\n', '    }\n', '    \n', '    uint256 balanceShouldRest = limitAmount - limitAmount * allocations[unlockTimeLine] / 1000;\n', '    uint256 canWithdrawAmount = balance - balanceShouldRest;\n', '    \n', '    require(canWithdrawAmount > 0);\n', '    \n', '    if (!StandardToken(originalContract).transfer(msg.sender, canWithdrawAmount )){\n', '        //failed\n', '        revert();\n', '    }\n', '    \n', '    //success\n', '    balance = balance - canWithdrawAmount;\n', '    \n', '  }\n', '\n', '}']