['pragma solidity 0.4.18;\n', '\n', '\n', 'contract CrowdsaleParameters {\n', '    // Vesting time stamps:\n', '    // 1534672800 = August 19, 2018. 180 days from February 20, 2018. 10:00:00 GMT\n', '    // 1526896800 = May 21, 2018. 90 days from February 20, 2018. 10:00:00 GMT\n', '    uint32 internal vestingTime90Days = 1526896800;\n', '    uint32 internal vestingTime180Days = 1534672800;\n', '\n', '    uint256 internal constant presaleStartDate = 1513072800; // Dec-12-2017 10:00:00 GMT\n', '    uint256 internal constant presaleEndDate = 1515751200; // Jan-12-2018 10:00:00 GMT\n', '    uint256 internal constant generalSaleStartDate = 1516442400; // Jan-20-2018 00:00:00 GMT\n', '    uint256 internal constant generalSaleEndDate = 1519120800; // Feb-20-2018 00:00:00 GMT\n', '\n', '    struct AddressTokenAllocation {\n', '        address addr;\n', '        uint256 amount;\n', '        uint256 vestingTS;\n', '    }\n', '\n', '    AddressTokenAllocation internal presaleWallet       = AddressTokenAllocation(0x43C5FB6b419E6dF1a021B9Ad205A18369c19F57F, 100e6, 0);\n', '    AddressTokenAllocation internal generalSaleWallet   = AddressTokenAllocation(0x0635c57CD62dA489f05c3dC755bAF1B148FeEdb0, 550e6, 0);\n', '    AddressTokenAllocation internal wallet1             = AddressTokenAllocation(0xae46bae68D0a884812bD20A241b6707F313Cb03a,  20e6, vestingTime180Days);\n', '    AddressTokenAllocation internal wallet2             = AddressTokenAllocation(0xfe472389F3311e5ea19B4Cd2c9945b6D64732F13,  20e6, vestingTime180Days);\n', '    AddressTokenAllocation internal wallet3             = AddressTokenAllocation(0xE37dfF409AF16B7358Fae98D2223459b17be0B0B,  20e6, vestingTime180Days);\n', '    AddressTokenAllocation internal wallet4             = AddressTokenAllocation(0x39482f4cd374D0deDD68b93eB7F3fc29ae7105db,  10e6, vestingTime180Days);\n', '    AddressTokenAllocation internal wallet5             = AddressTokenAllocation(0x03736d5B560fE0784b0F5c2D0eA76A7F15E5b99e,   5e6, vestingTime180Days);\n', '    AddressTokenAllocation internal wallet6             = AddressTokenAllocation(0xD21726226c32570Ab88E12A9ac0fb2ed20BE88B9,   5e6, vestingTime180Days);\n', '    AddressTokenAllocation internal foundersWallet      = AddressTokenAllocation(0xC66Cbb7Ba88F120E86920C0f85A97B2c68784755,  30e6, vestingTime90Days);\n', '    AddressTokenAllocation internal wallet7             = AddressTokenAllocation(0x24ce108d1975f79B57c6790B9d4D91fC20DEaf2d,   6e6, 0);\n', '    AddressTokenAllocation internal wallet8genesis      = AddressTokenAllocation(0x0125c6Be773bd90C0747012f051b15692Cd6Df31,   5e6, 0);\n', '    AddressTokenAllocation internal wallet9             = AddressTokenAllocation(0xFCF0589B6fa8A3f262C4B0350215f6f0ed2F630D,   5e6, 0);\n', '    AddressTokenAllocation internal wallet10            = AddressTokenAllocation(0x0D016B233e305f889BC5E8A0fd6A5f99B07F8ece,   4e6, 0);\n', '    AddressTokenAllocation internal wallet11bounty      = AddressTokenAllocation(0x68433cFb33A7Fdbfa74Ea5ECad0Bc8b1D97d82E9,  19e6, 0);\n', '    AddressTokenAllocation internal wallet12            = AddressTokenAllocation(0xd620A688adA6c7833F0edF48a45F3e39480149A6,   4e6, 0);\n', '    AddressTokenAllocation internal wallet13rsv         = AddressTokenAllocation(0x8C393F520f75ec0F3e14d87d67E95adE4E8b16B1, 100e6, 0);\n', '    AddressTokenAllocation internal wallet14partners    = AddressTokenAllocation(0x6F842b971F0076C4eEA83b051523d76F098Ffa52,  96e6, 0);\n', '    AddressTokenAllocation internal wallet15lottery     = AddressTokenAllocation(0xcaA48d91D49f5363B2974bb4B2DBB36F0852cf83,   1e6, 0);\n', '\n', '    uint256 public minimumICOCap = 3333;\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '    *  Constructor\n', '    *\n', '    *  Sets contract owner to address of constructor caller\n', '    */\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    *  Change Owner\n', '    *\n', '    *  Changes ownership of this contract. Only owner can call this method.\n', '    *\n', "    * @param newOwner - new owner's address\n", '    */\n', '    function changeOwner(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0));\n', '        require(newOwner != owner);\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract TKLNToken is Owned, CrowdsaleParameters {\n', "    string public standard = 'Token 0.1';\n", "    string public name = 'Taklimakan';\n", "    string public symbol = 'TKLN';\n", '    uint8 public decimals = 18;\n', '    uint256 public totalSupply = 0;\n', '    bool public transfersEnabled = true;\n', '\n', '    function approveCrowdsale(address _crowdsaleAddress) external;\n', '    function approvePresale(address _presaleAddress) external;\n', '    function balanceOf(address _address) public constant returns (uint256 balance);\n', '    function vestedBalanceOf(address _address) public constant returns (uint256 balance);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _currentValue, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function toggleTransfers(bool _enable) external;\n', '    function closePresale() external;\n', '    function closeGeneralSale() external;\n', '}\n', '\n', 'contract TaklimakanCrowdsale is Owned, CrowdsaleParameters {\n', '    /* ICO and Pre-ICO Parameters */\n', '    address internal saleWalletAddress;\n', '    uint private tokenMultiplier = 10;\n', '    uint public saleStartTimestamp;\n', '    uint public saleStopTimestamp;\n', '    uint public saleGoal;\n', '    uint8 public stageBonus;\n', '    bool public goalReached = false;\n', '\n', '    /* Token and records */\n', '    TKLNToken private token;\n', '    uint public totalCollected = 0;\n', '    mapping (address => uint256) private investmentRecords;\n', '\n', '    /* Events */\n', '    event TokenSale(address indexed tokenReceiver, uint indexed etherAmount, uint indexed tokenAmount, uint tokensPerEther);\n', '    event FundTransfer(address indexed from, address indexed to, uint indexed amount);\n', '    event Refund(address indexed backer, uint amount);\n', '\n', '    /**\n', '    * Constructor\n', '    *\n', '    * @param _tokenAddress - address of token (deployed before this contract)\n', '    */\n', '    function TaklimakanCrowdsale(address _tokenAddress) public {\n', '        token = TKLNToken(_tokenAddress);\n', '        tokenMultiplier = tokenMultiplier ** token.decimals();\n', '        saleWalletAddress = CrowdsaleParameters.generalSaleWallet.addr;\n', '\n', '        saleStartTimestamp = CrowdsaleParameters.generalSaleStartDate;\n', '        saleStopTimestamp = CrowdsaleParameters.generalSaleEndDate;\n', '\n', '        // Initialize sale goal\n', '        saleGoal = CrowdsaleParameters.generalSaleWallet.amount;\n', '        stageBonus = 1;\n', '    }\n', '\n', '    /**\n', '    * Is sale active\n', '    *\n', '    * @return active - True, if sale is active\n', '    */\n', '    function isICOActive() public constant returns (bool active) {\n', '        active = ((saleStartTimestamp <= now) && (now < saleStopTimestamp) && (!goalReached));\n', '        return active;\n', '    }\n', '\n', '    /**\n', '    *  Process received payment\n', '    *\n', '    *  Determine the integer number of tokens that was purchased considering current\n', '    *  stage, tier bonus, and remaining amount of tokens in the sale wallet.\n', '    *  Transfer purchased tokens to bakerAddress and return unused portion of\n', '    *  ether (change)\n', '    *\n', '    * @param bakerAddress - address that ether was sent from\n', '    * @param amount - amount of Wei received\n', '    */\n', '    function processPayment(address bakerAddress, uint amount) internal {\n', '        require(isICOActive());\n', '\n', '        // Before Metropolis update require will not refund gas, but\n', '        // for some reason require statement around msg.value always throws\n', '        assert(msg.value > 0 finney);\n', '\n', '        // Tell everyone about the transfer\n', '        FundTransfer(bakerAddress, address(this), amount);\n', '\n', '        // Calculate tokens per ETH for this tier\n', '        uint tokensPerEth = 16500;\n', '\n', '        if (amount < 3 ether)\n', '            tokensPerEth = 15000;\n', '        else if (amount < 7 ether)\n', '            tokensPerEth = 15150;\n', '        else if (amount < 15 ether)\n', '            tokensPerEth = 15300;\n', '        else if (amount < 30 ether)\n', '            tokensPerEth = 15450;\n', '        else if (amount < 75 ether)\n', '            tokensPerEth = 15600;\n', '        else if (amount < 150 ether)\n', '            tokensPerEth = 15750;\n', '        else if (amount < 250 ether)\n', '            tokensPerEth = 15900;\n', '        else if (amount < 500 ether)\n', '            tokensPerEth = 16050;\n', '        else if (amount < 750 ether)\n', '            tokensPerEth = 16200;\n', '        else if (amount < 1000 ether)\n', '            tokensPerEth = 16350;\n', '\n', '        tokensPerEth = tokensPerEth * stageBonus;\n', '\n', '        // Calculate token amount that is purchased,\n', '        // truncate to integer\n', '        uint tokenAmount = amount * tokensPerEth / 1e18;\n', '\n', '        // Check that stage wallet has enough tokens. If not, sell the rest and\n', '        // return change.\n', '        uint remainingTokenBalance = token.balanceOf(saleWalletAddress) / tokenMultiplier;\n', '        if (remainingTokenBalance < tokenAmount) {\n', '            tokenAmount = remainingTokenBalance;\n', '            goalReached = true;\n', '        }\n', '\n', '        // Calculate Wei amount that was received in this transaction\n', '        // adjusted to rounding and remaining token amount\n', '        uint acceptedAmount = tokenAmount * 1e18 / tokensPerEth;\n', '\n', '        // Transfer tokens to baker and return ETH change\n', '        token.transferFrom(saleWalletAddress, bakerAddress, tokenAmount * tokenMultiplier);\n', '        TokenSale(bakerAddress, amount, tokenAmount, tokensPerEth);\n', '\n', '        // Return change\n', '        uint change = amount - acceptedAmount;\n', '        if (change > 0) {\n', '            if (bakerAddress.send(change)) {\n', '                FundTransfer(address(this), bakerAddress, change);\n', '            }\n', '            else revert();\n', '        }\n', '\n', '        // Update crowdsale performance\n', '        investmentRecords[bakerAddress] += acceptedAmount;\n', '        totalCollected += acceptedAmount;\n', '    }\n', '\n', '    /**\n', "    *  Transfer ETH amount from contract to owner's address.\n", '    *  Can only be used if ICO is closed\n', '    *\n', '    * @param amount - ETH amount to transfer in Wei\n', '    */\n', '    function safeWithdrawal(uint amount) external onlyOwner {\n', '        require(this.balance >= amount);\n', '        require(!isICOActive());\n', '\n', '        if (owner.send(amount)) {\n', '            FundTransfer(address(this), msg.sender, amount);\n', '        }\n', '    }\n', '\n', '    /**\n', '    *  Default method\n', '    *\n', '    *  Processes all ETH that it receives and credits TKLN tokens to sender\n', '    *  according to current stage bonus\n', '    */\n', '    function () external payable {\n', '        processPayment(msg.sender, msg.value);\n', '    }\n', '\n', '    /**\n', '    *  Kill method\n', '    *\n', '    *  Destructs this contract\n', '    */\n', '    function kill() external onlyOwner {\n', '        require(!isICOActive());\n', '        selfdestruct(owner);\n', '    }\n', '\n', '    /**\n', '    *  Refund\n', '    *\n', '    *  Sends a refund to the sender who calls this method.\n', '    */\n', '    function refund() external {\n', '        require((now > saleStopTimestamp) && (totalCollected < CrowdsaleParameters.minimumICOCap * 1e18));\n', '        require(investmentRecords[msg.sender] > 0);\n', '\n', '        var amountToReturn = investmentRecords[msg.sender];\n', '\n', '        require(this.balance >= amountToReturn);\n', '\n', '        investmentRecords[msg.sender] = 0;\n', '        msg.sender.transfer(amountToReturn);\n', '        Refund(msg.sender, amountToReturn);\n', '    }\n', '}\n', '\n', 'contract TaklimakanPreICO is TaklimakanCrowdsale {\n', '    /**\n', '    * Constructor\n', '    *\n', '    * @param _tokenAddress - address of token (deployed before this contract)\n', '    */\n', '    function TaklimakanPreICO(address _tokenAddress) TaklimakanCrowdsale(_tokenAddress) public {\n', '        saleWalletAddress = CrowdsaleParameters.presaleWallet.addr;\n', '\n', '        saleStartTimestamp = CrowdsaleParameters.presaleStartDate;\n', '        saleStopTimestamp = CrowdsaleParameters.presaleEndDate;\n', '\n', '        // Initialize sale goal\n', '        saleGoal = CrowdsaleParameters.presaleWallet.amount;\n', '        stageBonus = 2;\n', '    }\n', '\n', '    /**\n', '    *  Allow anytime withdrawals\n', '    *\n', '    * @param amount - ETH amount to transfer in Wei\n', '    */\n', '    function safeWithdrawal(uint amount) external onlyOwner {\n', '        require(this.balance >= amount);\n', '\n', '        if (owner.send(amount)) {\n', '            FundTransfer(address(this), msg.sender, amount);\n', '        }\n', '    }\n', '\n', '    /**\n', '    *  Refund\n', '    *\n', '    *  Pre ICO refunds are not provided\n', '    */\n', '    function refund() external {\n', '        revert();\n', '    }\n', '}']