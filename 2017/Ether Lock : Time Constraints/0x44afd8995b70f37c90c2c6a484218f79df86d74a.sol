['contract Ethereumshares {\n', '    string public symbol = "ETS";\n', '    string public name = "Ethereumshares";\n', '    uint8 public constant decimals = 18;\n', '    uint256 _totalSupply = 5000000000000000000000000;\n', '\tuint256 _maxTotalSupply = 7000000000000000000000000;\n', '\tuint256 _miningReward = 1000000000000000000000; //One time 1000 ETS\n', '\tuint256 _maxMiningReward = 1500000000000000000000; //One time 1500 ETS\n', '\tuint256 _rewardHalvingTimePeriod = 63113852; //2 years\n', '\tuint256 _nextRewardHalving = now + _rewardHalvingTimePeriod;\n', '\tuint256 _rewardTimePeriod = 600; //10 minutes\n', '\tuint256 _rewardStart = now;\n', '\tuint256 _rewardEnd = now + _rewardTimePeriod;\n', '\tuint256 _currentMined = 0;\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', ' \n', '    mapping(address => uint256) balances;\n', ' \n', '    mapping(address => mapping (address => uint256)) allowed;\n', ' \n', '    function totalSupply() constant returns (uint256) {        \n', '\t\treturn _totalSupply;\n', '    }\n', ' \n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', ' \n', '    function transfer(address _to, uint256 _amount) returns (bool success) {\n', '        if (balances[msg.sender] >= _amount \n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', ' \n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) returns (bool success) {\n', '        if (balances[_from] >= _amount\n', '            && allowed[_from][msg.sender] >= _amount\n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[_from] -= _amount;\n', '            allowed[_from][msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', ' \n', '    function approve(address _spender, uint256 _amount) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', ' \n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\t\n', '\tfunction Mine() returns (bool success)\n', '\t{\n', '\t\tif (now < _rewardEnd && _currentMined >= _maxMiningReward)\n', '\t\t\trevert();\n', '\t\telse if (now >= _rewardEnd)\n', '\t\t{\n', '\t\t\t_rewardStart = now;\n', '\t\t\t_rewardEnd = now + _rewardTimePeriod;\n', '\t\t\t_currentMined = 0;\n', '\t\t}\n', '\t\n', '\t\tif (now >= _nextRewardHalving)\n', '\t\t{\n', '\t\t\t_nextRewardHalving = now + _rewardHalvingTimePeriod;\n', '\t\t\t_miningReward = _miningReward / 2;\n', '\t\t\t_maxMiningReward = _maxMiningReward / 2;\n', '\t\t\t_currentMined = 0;\n', '\t\t\t_rewardStart = now;\n', '\t\t\t_rewardEnd = now + _rewardTimePeriod;\n', '\t\t}\t\n', '\t\t\n', '\t\tif ((_currentMined < _maxMiningReward) && (_totalSupply < _maxTotalSupply) && (balances[msg.sender] <=1))\n', '\t\t{\n', '\t\t\tbalances[msg.sender] += _miningReward;\n', '\t\t\t_currentMined += _miningReward;\n', '\t\t\t_totalSupply += _miningReward;\n', '\t\t\tTransfer(this, msg.sender, _miningReward);\n', '\t\t\treturn true;\n', '\t\t}\t\t\t\t\n', '\t\treturn false;\n', '\t}\n', '\t\n', '\tfunction MaxTotalSupply() constant returns(uint256)\n', '\t{\n', '\t\treturn _maxTotalSupply;\n', '\t}\n', '\t\n', '\tfunction MiningReward() constant returns(uint256)\n', '\t{\n', '\t\treturn _miningReward;\n', '\t}\n', '\t\n', '\tfunction MaxMiningReward() constant returns(uint256)\n', '\t{\n', '\t\treturn _maxMiningReward;\n', '\t}\n', '\t\n', '\tfunction RewardHalvingTimePeriod() constant returns(uint256)\n', '\t{\n', '\t\treturn _rewardHalvingTimePeriod;\n', '\t}\n', '\t\n', '\tfunction NextRewardHalving() constant returns(uint256)\n', '\t{\n', '\t\treturn _nextRewardHalving;\n', '\t}\n', '\t\n', '\tfunction RewardTimePeriod() constant returns(uint256)\n', '\t{\n', '\t\treturn _rewardTimePeriod;\n', '\t}\n', '\t\n', '\tfunction RewardStart() constant returns(uint256)\n', '\t{\n', '\t\treturn _rewardStart;\n', '\t}\n', '\t\n', '\tfunction RewardEnd() constant returns(uint256)\n', '\t{\n', '\t\treturn _rewardEnd;\n', '\t}\n', '\t\n', '\tfunction CurrentMined() constant returns(uint256)\n', '\t{\n', '\t\treturn _currentMined;\n', '\t}\n', '\t\n', '\tfunction TimeNow() constant returns(uint256)\n', '\t{\n', '\t\treturn now;\n', '\t}\n', '    }']