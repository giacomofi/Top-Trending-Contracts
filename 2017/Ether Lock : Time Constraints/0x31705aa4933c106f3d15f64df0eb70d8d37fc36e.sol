['pragma solidity ^0.4.13;\n', '\n', 'contract Ownable {\n', '    \n', '    address owner;\n', '    \n', '    function Ownable() public{\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner{\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract CoinTour is Ownable {\n', '    \n', '    string public  name  = "Coin Tour";\n', '    \n', '    string public  symbol = "COT";\n', '    \n', '    uint32 public  decimals = 8 ;\n', '    \n', '    uint public totalSupply = 2100000000000000;\n', '    \n', '    uint public etap = 1000000000000000;\n', '    \n', '    uint public forCommand = 100000000000000;\n', '    \n', '    uint public sendCount = 200000000000;\n', '    \n', '    address public commandAddress = 0xA92AdaA9B9C4F2A4219132E6B9bd07B6a1F4e01e;\n', '    \n', '    uint startEtap1 = 1511949600;\n', '    uint endEtap1 = 1512028800;\n', '    \n', '    uint startEtap2 = 1512468000;\n', '    uint endEtap2 = 1512554400;\n', '\n', '    mapping (address => uint) balances;\n', '    \n', '    mapping (address => mapping(address => uint)) allowed;\n', '    \n', '    function CoinTour() public {\n', '        balances[commandAddress] = forCommand;\n', '        balances[owner] = totalSupply-forCommand;\n', '    }\n', '    \n', '    function balanceOf(address who) public constant returns (uint balance) {\n', '        return balances[who];\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '            if(balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {\n', '                balances[msg.sender] -= _value; \n', '                balances[_to] += _value;\n', '                Transfer(msg.sender, _to, _value);\n', '                return true;\n', '            }\n', '        return false;\n', '    }\n', '    \n', '    function multisend(address[] temp) public onlyOwner returns (bool success){\n', '        if((now > startEtap1 && now < endEtap1)||(now > startEtap2 && now < endEtap2)){\n', '            for(uint i = 0; i < temp.length; i++) {\n', '                if (now>=startEtap1 && now <=endEtap1 && balances[owner]>etap || now>=startEtap2 && now <=endEtap2 && balances[owner]>0){\n', '                    balances[owner] -= sendCount;\n', '                    balances[temp[i]] += sendCount;\n', '                    Transfer(owner, temp[i],sendCount);\n', '                }\n', '            }\n', '            return true; \n', '        }\n', '        return false;\n', '    }\n', '    \n', '    function burn() onlyOwner public {\n', '        require (now>=endEtap1 && now <=startEtap2 || now >= endEtap2);\n', '        uint _value;\n', '        if (now>=endEtap1 && now <=startEtap2) {\n', '            _value = balances[owner] - etap;\n', '            require(_value > 0);\n', '        }\n', '        else _value = balances[owner];\n', '        balances[owner] -= _value;\n', '        totalSupply -= _value;\n', '        Burn(owner, _value);\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n', '        if( allowed[_from][msg.sender] >= _value && balances[_from] >= _value && balances[_to] + _value >= balances[_to]) {\n', '            allowed[_from][msg.sender] -= _value;\n', '            balances[_from] -= _value; \n', '            balances[_to] += _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } \n', '        return false;\n', '    }\n', '     \n', '    function approve(address _spender, uint _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '        \n', '    event Burn(address indexed burner, uint indexed value);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    \n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);   \n', '}']