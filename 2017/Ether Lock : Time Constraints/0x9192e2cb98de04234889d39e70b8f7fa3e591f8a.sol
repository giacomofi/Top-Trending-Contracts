['pragma solidity ^0.4.15;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '   require(newOwner != address(0));\n', '   owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused returns (bool) {\n', '    paused = true;\n', '    Pause();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused returns (bool) {\n', '    paused = false;\n', '    Unpause();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * Pausable token\n', ' *\n', ' * Simple ERC20 Token example, with pausable token creation\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint _value) whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  function RefundVault(address _wallet) {\n', '    require(_wallet != 0x0);\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  function deposit(address investor) onlyOwner payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    Closed();\n', '    wallet.transfer(this.balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    RefundsEnabled();\n', '  }\n', '\n', '  function refund(address investor) {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', '// @title The TestPCoin\n', '/// @author Manoj Patidar\n', 'contract TestPCoin is PausableToken {\n', '   using SafeMath for uint256;\n', '\n', "   string public constant name = 'TestPCoin';\n", '\n', "   string public constant symbol = 'TESTP';\n", '\n', '   uint8 public constant decimals = 18;\n', '\n', '   uint256 public  totalSupply = 100e24; // 100M tokens with 18 decimals\n', '\n', '   bool public remainingTokenBurnt = false;\n', '\n', '   // The tokens already used for the presale buyers\n', '   uint256 public tokensDistributedPresale = 0;\n', '\n', '   // The tokens already used for the ICO buyers\n', '   uint256 public tokensDistributedCrowdsale = 0;\n', '\n', '   // The address of the crowdsale\n', '   address public crowdsale;\n', '\n', '   // The initial supply used for platform and development as specified in the whitepaper\n', '   uint256 public initialSupply = 40e24;\n', '\n', '   // The maximum amount of tokens for the presale investors\n', '   uint256 public limitPresale = 10e24;\n', '\n', '   // The maximum amount of tokens sold in the crowdsale\n', '   uint256 public limitCrowdsale = 50e24;\n', '\n', "   /// @notice Only allows the execution of the function if it's comming from crowdsale\n", '   modifier onlyCrowdsale() {\n', '      require(msg.sender == crowdsale);\n', '      _;\n', '   }\n', '\n', '   // When someone refunds tokens\n', '   event RefundedTokens(address indexed user, uint256 tokens);\n', '\n', '   /// @notice Constructor used to set the platform & development tokens. This is\n', '   /// The 20% + 20% of the 100 M tokens used for platform and development team.\n', '   /// The owner, msg.sender, is able to do allowance for other contracts. Remember\n', "   /// to use `transferFrom()` if you're allowed\n", '   function TestPCoin() {\n', '      balances[msg.sender] = initialSupply; // 40M tokens wei\n', '   }\n', '\n', "   /// @notice Function to set the crowdsale smart contract's address only by the owner of this token\n", '   /// @param _crowdsale The address that will be used\n', '   function setCrowdsaleAddress(address _crowdsale) external onlyOwner whenNotPaused {\n', '      require(_crowdsale != address(0));\n', '\n', '      crowdsale = _crowdsale;\n', '   }\n', '\n', '   /// @notice Distributes the presale tokens. Only the owner can do this\n', '   /// @param _buyer The address of the buyer\n', '   /// @param tokens The amount of tokens corresponding to that buyer\n', '   function distributePresaleTokens(address _buyer, uint tokens) external onlyOwner whenNotPaused {\n', '      require(_buyer != address(0));\n', '      require(tokens > 0 && tokens <= limitPresale);\n', '\n', "      // Check that the limit of 10M presale tokens hasn't been met yet\n", '      require(tokensDistributedPresale < limitPresale);\n', '      require(tokensDistributedPresale.add(tokens) < limitPresale);\n', '\n', '      tokensDistributedPresale = tokensDistributedPresale.add(tokens);\n', '      balances[_buyer] = balances[_buyer].add(tokens);\n', '   }\n', '\n', '   /// @notice Distributes the ICO tokens. Only the crowdsale address can execute this\n', '   /// @param _buyer The buyer address\n', '   /// @param tokens The amount of tokens to send to that address\n', '   function distributeICOTokens(address _buyer, uint tokens) external onlyCrowdsale whenNotPaused {\n', '      require(_buyer != address(0));\n', '      require(tokens > 0);\n', '\n', "      // Check that the limit of 50M ICO tokens hasn't been met yet\n", '      require(tokensDistributedCrowdsale < limitCrowdsale);\n', '      require(tokensDistributedCrowdsale.add(tokens) <= limitCrowdsale);\n', '\n', '      tokensDistributedCrowdsale = tokensDistributedCrowdsale.add(tokens);\n', '      balances[_buyer] = balances[_buyer].add(tokens);\n', '   }\n', '\n', '   /// @notice Deletes the amount of tokens refunded from that buyer balance\n', '   /// @param _buyer The buyer that wants the refund\n', '   /// @param tokens The tokens to return\n', '   function refundTokens(address _buyer, uint256 tokens) external onlyCrowdsale whenNotPaused {\n', '      require(_buyer != address(0));\n', '      require(tokens > 0);\n', '      require(balances[_buyer] >= tokens);\n', '\n', '      balances[_buyer] = balances[_buyer].sub(tokens);\n', '      RefundedTokens(_buyer, tokens);\n', '   }\n', '\n', '   /// @notice Burn the amount of tokens remaining after ICO ends\n', '   function burnTokens() external onlyCrowdsale whenNotPaused {\n', '\n', '      uint256 remainingICOToken = limitCrowdsale.sub(tokensDistributedCrowdsale);\n', '      if(remainingICOToken > 0 && !remainingTokenBurnt) {\n', '      remainingTokenBurnt = true;\n', '      limitCrowdsale = limitCrowdsale.sub(remainingICOToken);\n', '      totalSupply = totalSupply.sub(remainingICOToken);\n', '      }\n', '   }\n', '}\n', '/// 1. First you set the address of the wallet in the RefundVault contract that will store the deposit of ether\n', '// 2. If the goal is reached, the state of the vault will change and the ether will be sent to the address\n', '// 3. If the goal is not reached , the state of the vault will change to refunding and the users will be able to call claimRefund() to get their ether\n', '\n', '/// @author Manoj Patidar <patidarmanoj@gmail.com>\n', 'contract Crowdsale is Pausable {\n', '   using SafeMath for uint256;\n', '\n', '   // The token being sold\n', '   TestPCoin public token;\n', '\n', '   // The vault that will store the ether until the goal is reached\n', '   RefundVault public vault;\n', '\n', '   // The block number of when the crowdsale starts\n', '   // 10/15/2017 @ 11:00am (UTC)\n', '   // 10/15/2017 @ 12:00pm (GMT + 1)\n', '   uint256 public startTime = 1511068829;\n', '\n', '   // The block number of when the crowdsale ends\n', '   // 11/13/2017 @ 11:00am (UTC)\n', '   // 11/13/2017 @ 12:00pm (GMT + 1)\n', '   uint256 public endTime = 1512021029;\n', '\n', '   // The wallet that holds the Wei raised on the crowdsale\n', '   address public wallet;\n', '\n', '   // The wallet that holds the Wei raised on the crowdsale after soft cap reached\n', '   address public walletB;\n', '\n', '   // The rate of tokens per ether. Only applied for the first tier, the first\n', '   // 12.5 million tokens sold\n', '   uint256 public rate;\n', '\n', '   // The rate of tokens per ether. Only applied for the second tier, at between\n', '   // 12.5 million tokens sold and 25 million tokens sold\n', '   uint256 public rateTier2;\n', '\n', '   // The rate of tokens per ether. Only applied for the third tier, at between\n', '   // 25 million tokens sold and 37.5 million tokens sold\n', '   uint256 public rateTier3;\n', '\n', '   // The rate of tokens per ether. Only applied for the fourth tier, at between\n', '   // 37.5 million tokens sold and 50 million tokens sold\n', '   uint256 public rateTier4;\n', '\n', '   // The maximum amount of wei for each tier\n', '   uint256 public limitTier1 = 12.5e24;\n', '   uint256 public limitTier2 = 25e24;\n', '   uint256 public limitTier3 = 37.5e24;\n', '\n', '   // The amount of wei raised\n', '   uint256 public weiRaised = 0;\n', '\n', '   // The amount of tokens raised\n', '   uint256 public tokensRaised = 0;\n', '\n', '   // You can only buy up to 50 M tokens during the ICO\n', '   uint256 public constant maxTokensRaised = 50e24;\n', '\n', '   // The minimum amount of Wei you must pay to participate in the crowdsale\n', '   uint256 public constant minPurchase = 10 finney; // 0.01 ether\n', '\n', '   // The max amount of Wei that you can pay to participate in the crowdsale\n', '   uint256 public constant maxPurchase = 2000 ether;\n', '\n', '   // Minimum amount of tokens to be raised. 7.5 million tokens which is the 15%\n', '   // of the total of 50 million tokens sold in the crowdsale\n', '   // 7.5e6 + 1e18\n', '   uint256 public constant minimumGoal = 5.33e19;\n', '\n', "   // If the crowdsale wasn't successful, this will be true and users will be able\n", '   // to claim the refund of their ether\n', '   bool public isRefunding = false;\n', '\n', '   // If the crowdsale has ended or not\n', '   bool public isEnded = false;\n', '\n', '   // The number of transactions\n', '   uint256 public numberOfTransactions;\n', '\n', '   // The gas price to buy tokens must be 50 gwei or below\n', '   uint256 public limitGasPrice = 50000000000 wei;\n', '\n', '   // How much each user paid for the crowdsale\n', '   mapping(address => uint256) public crowdsaleBalances;\n', '\n', '   // How many tokens each user got for the crowdsale\n', '   mapping(address => uint256) public tokensBought;\n', '\n', '   // To indicate who purchased what amount of tokens and who received what amount of wei\n', '   event TokenPurchase(address indexed buyer, uint256 value, uint256 amountOfTokens);\n', '\n', '   // Indicates if the crowdsale has ended\n', '   event Finalized();\n', '\n', '   // Only allow the execution of the function before the crowdsale starts\n', '   modifier beforeStarting() {\n', '      require(now < startTime);\n', '      _;\n', '   }\n', '\n', '   /// @notice Constructor of the crowsale to set up the main variables and create a token\n', '   /// @param _wallet The wallet address that stores the Wei raised\n', '   /// @param _walletB The wallet address that stores the Wei raised after soft cap reached\n', '   /// @param _tokenAddress The token used for the ICO\n', '   function Crowdsale(\n', '      address _wallet,\n', '      address _walletB,\n', '      address _tokenAddress,\n', '      uint256 _startTime,\n', '      uint256 _endTime\n', '   ) public {\n', '      require(_wallet != address(0));\n', '      require(_tokenAddress != address(0));\n', '      require(_walletB != address(0));\n', '\n', '      // If you send the start and end time on the constructor, the end must be larger\n', '      if(_startTime > 0 && _endTime > 0)\n', '         require(_startTime < _endTime);\n', '\n', '      wallet = _wallet;\n', '      walletB = _walletB;\n', '      token = TestPCoin(_tokenAddress);\n', '      vault = new RefundVault(_wallet);\n', '\n', '      if(_startTime > 0)\n', '         startTime = _startTime;\n', '\n', '      if(_endTime > 0)\n', '         endTime = _endTime;\n', '   }\n', '\n', '   /// @notice Fallback function to buy tokens\n', '   function () payable {\n', '      buyTokens();\n', '   }\n', '\n', '   /// @notice To buy tokens given an address\n', '   function buyTokens() public payable whenNotPaused {\n', '      require(validPurchase());\n', '\n', '      uint256 tokens = 0;\n', '\n', '      uint256 amountPaid = calculateExcessBalance();\n', '\n', '      if(tokensRaised < limitTier1) {\n', '\n', '         // Tier 1\n', '         tokens = amountPaid.mul(rate);\n', '\n', '         // If the amount of tokens that you want to buy gets out of this tier\n', '         if(tokensRaised.add(tokens) > limitTier1)\n', '            tokens = calculateExcessTokens(amountPaid, limitTier1, 1, rate);\n', '      } else if(tokensRaised >= limitTier1 && tokensRaised < limitTier2) {\n', '\n', '         // Tier 2\n', '         tokens = amountPaid.mul(rateTier2);\n', '\n', '         // If the amount of tokens that you want to buy gets out of this tier\n', '         if(tokensRaised.add(tokens) > limitTier2)\n', '            tokens = calculateExcessTokens(amountPaid, limitTier2, 2, rateTier2);\n', '      } else if(tokensRaised >= limitTier2 && tokensRaised < limitTier3) {\n', '\n', '         // Tier 3\n', '         tokens = amountPaid.mul(rateTier3);\n', '\n', '         // If the amount of tokens that you want to buy gets out of this tier\n', '         if(tokensRaised.add(tokens) > limitTier3)\n', '            tokens = calculateExcessTokens(amountPaid, limitTier3, 3, rateTier3);\n', '      } else if(tokensRaised >= limitTier3) {\n', '\n', '         // Tier 4\n', '         tokens = amountPaid.mul(rateTier4);\n', '      }\n', '\n', '      weiRaised = weiRaised.add(amountPaid);\n', '      uint256 tokensRaisedBeforeThisTransaction = tokensRaised;\n', '      tokensRaised = tokensRaised.add(tokens);\n', '      token.distributeICOTokens(msg.sender, tokens);\n', '\n', '      // Keep a record of how many tokens everybody gets in case we need to do refunds\n', '      tokensBought[msg.sender] = tokensBought[msg.sender].add(tokens);\n', '      TokenPurchase(msg.sender, amountPaid, tokens);\n', '      numberOfTransactions = numberOfTransactions.add(1);\n', '\n', '      if(tokensRaisedBeforeThisTransaction > minimumGoal) {\n', '\n', '         walletB.transfer(amountPaid);\n', '\n', '      } else {\n', '         vault.deposit.value(amountPaid)(msg.sender);\n', '         if(goalReached()) {\n', '          vault.close();\n', '         }\n', '\n', '      }\n', '\n', '      // If the minimum goal of the ICO has been reach, close the vault to send\n', '      // the ether to the wallet of the crowdsale\n', '      checkCompletedCrowdsale();\n', '   }\n', '\n', '   /// @notice Calculates how many ether will be used to generate the tokens in\n', '   /// case the buyer sends more than the maximum balance but has some balance left\n', '   /// and updates the balance of that buyer.\n', "   /// For instance if he's 500 balance and he sends 1000, it will return 500\n", '   /// and refund the other 500 ether\n', '   function calculateExcessBalance() internal whenNotPaused returns(uint256) {\n', '      uint256 amountPaid = msg.value;\n', '      uint256 differenceWei = 0;\n', '      uint256 exceedingBalance = 0;\n', '\n', "      // If we're in the last tier, check that the limit hasn't been reached\n", '      // and if so, refund the difference and return what will be used to\n', '      // buy the remaining tokens\n', '      if(tokensRaised >= limitTier3) {\n', '         uint256 addedTokens = tokensRaised.add(amountPaid.mul(rateTier4));\n', '\n', '         // If tokensRaised + what you paid converted to tokens is bigger than the max\n', '         if(addedTokens > maxTokensRaised) {\n', '\n', '            // Refund the difference\n', '            uint256 difference = addedTokens.sub(maxTokensRaised);\n', '            differenceWei = difference.div(rateTier4);\n', '            amountPaid = amountPaid.sub(differenceWei);\n', '         }\n', '      }\n', '\n', '      uint256 addedBalance = crowdsaleBalances[msg.sender].add(amountPaid);\n', '\n', '      // Checking that the individual limit of 1000 ETH per user is not reached\n', '      if(addedBalance <= maxPurchase) {\n', '         crowdsaleBalances[msg.sender] = crowdsaleBalances[msg.sender].add(amountPaid);\n', '      } else {\n', '\n', '         // Substracting 1000 ether in wei\n', '         exceedingBalance = addedBalance.sub(maxPurchase);\n', '         amountPaid = amountPaid.sub(exceedingBalance);\n', '\n', '         // Add that balance to the balances\n', '         crowdsaleBalances[msg.sender] = crowdsaleBalances[msg.sender].add(amountPaid);\n', '      }\n', '\n', '      // Make the transfers at the end of the function for security purposes\n', '      if(differenceWei > 0)\n', '         msg.sender.transfer(differenceWei);\n', '\n', '      if(exceedingBalance > 0) {\n', '\n', '         // Return the exceeding balance to the buyer\n', '         msg.sender.transfer(exceedingBalance);\n', '      }\n', '\n', '      return amountPaid;\n', '   }\n', '\n', "   /// @notice Set's the rate of tokens per ether for each tier. Use it after the\n", '   /// smart contract is deployed to set the price according to the ether price\n', '   /// at the start of the ICO\n', '   /// @param tier1 The amount of tokens you get in the tier one\n', '   /// @param tier2 The amount of tokens you get in the tier two\n', '   /// @param tier3 The amount of tokens you get in the tier three\n', '   /// @param tier4 The amount of tokens you get in the tier four\n', '   function setTierRates(uint256 tier1, uint256 tier2, uint256 tier3, uint256 tier4)\n', '      external onlyOwner whenNotPaused\n', '   {\n', '      require(tier1 > 0 && tier2 > 0 && tier3 > 0 && tier4 > 0);\n', '      require(tier1 > tier2 && tier2 > tier3 && tier3 > tier4);\n', '\n', '      rate = tier1;\n', '      rateTier2 = tier2;\n', '      rateTier3 = tier3;\n', '      rateTier4 = tier4;\n', '   }\n', '\n', '   /// @notice Allow to extend ICO end date\n', '   /// @param _endTime Endtime of ICO\n', '   function setEndDate(uint256 _endTime)\n', '      external onlyOwner whenNotPaused\n', '   {\n', '      require(now <= _endTime);\n', '      require(startTime < _endTime);\n', '\n', '      endTime = _endTime;\n', '   }\n', '\n', '\n', '   /// @notice Check if the crowdsale has ended and enables refunds only in case the\n', "   /// goal hasn't been reached\n", '   function checkCompletedCrowdsale() public whenNotPaused {\n', '      if(!isEnded) {\n', '         if(hasEnded() && !goalReached()){\n', '            vault.enableRefunds();\n', '\n', '            isRefunding = true;\n', '            isEnded = true;\n', '            Finalized();\n', '         } else if(hasEnded()  && goalReached()) {\n', '\n', '\n', '            isEnded = true;\n', '\n', '\n', '            // Burn token only when minimum goal reached and maxGoal not reached.\n', '            if(tokensRaised < maxTokensRaised) {\n', '\n', '               token.burnTokens();\n', '\n', '            }\n', '\n', '            Finalized();\n', '         }\n', '\n', '\n', '      }\n', '   }\n', '\n', '   /// @notice If crowdsale is unsuccessful, investors can claim refunds here\n', '   function claimRefund() public whenNotPaused {\n', '     require(hasEnded() && !goalReached() && isRefunding);\n', '\n', '     vault.refund(msg.sender);\n', '     token.refundTokens(msg.sender, tokensBought[msg.sender]);\n', '   }\n', '\n', '   /// @notice Buys the tokens for the specified tier and for the next one\n', '   /// @param amount The amount of ether paid to buy the tokens\n', '   /// @param tokensThisTier The limit of tokens of that tier\n', '   /// @param tierSelected The tier selected\n', '   /// @param _rate The rate used for that `tierSelected`\n', '   /// @return uint The total amount of tokens bought combining the tier prices\n', '   function calculateExcessTokens(\n', '      uint256 amount,\n', '      uint256 tokensThisTier,\n', '      uint256 tierSelected,\n', '      uint256 _rate\n', '   ) public returns(uint256 totalTokens) {\n', '      require(amount > 0 && tokensThisTier > 0 && _rate > 0);\n', '      require(tierSelected >= 1 && tierSelected <= 4);\n', '\n', '      uint weiThisTier = tokensThisTier.sub(tokensRaised).div(_rate);\n', '      uint weiNextTier = amount.sub(weiThisTier);\n', '      uint tokensNextTier = 0;\n', '      bool returnTokens = false;\n', '\n', "      // If there's excessive wei for the last tier, refund those\n", '      if(tierSelected != 4)\n', '         tokensNextTier = calculateTokensTier(weiNextTier, tierSelected.add(1));\n', '      else\n', '         returnTokens = true;\n', '\n', '      totalTokens = tokensThisTier.sub(tokensRaised).add(tokensNextTier);\n', '\n', '      // Do the transfer at the end\n', '      if(returnTokens) msg.sender.transfer(weiNextTier);\n', '   }\n', '\n', '   /// @notice Buys the tokens given the price of the tier one and the wei paid\n', '   /// @param weiPaid The amount of wei paid that will be used to buy tokens\n', "   /// @param tierSelected The tier that you'll use for thir purchase\n", "   /// @return calculatedTokens Returns how many tokens you've bought for that wei paid\n", '   function calculateTokensTier(uint256 weiPaid, uint256 tierSelected)\n', '        internal constant returns(uint256 calculatedTokens)\n', '   {\n', '      require(weiPaid > 0);\n', '      require(tierSelected >= 1 && tierSelected <= 4);\n', '\n', '      if(tierSelected == 1)\n', '         calculatedTokens = weiPaid.mul(rate);\n', '      else if(tierSelected == 2)\n', '         calculatedTokens = weiPaid.mul(rateTier2);\n', '      else if(tierSelected == 3)\n', '         calculatedTokens = weiPaid.mul(rateTier3);\n', '      else\n', '         calculatedTokens = weiPaid.mul(rateTier4);\n', '   }\n', '\n', '\n', '   /// @notice Checks if a purchase is considered valid\n', '   /// @return bool If the purchase is valid or not\n', '   function validPurchase() internal constant returns(bool) {\n', '      bool withinPeriod = now >= startTime && now <= endTime;\n', '      bool nonZeroPurchase = msg.value > 0;\n', '      bool withinTokenLimit = tokensRaised < maxTokensRaised;\n', '      bool minimumPurchase = msg.value >= minPurchase;\n', '      bool hasBalanceAvailable = crowdsaleBalances[msg.sender] < maxPurchase;\n', '\n', '      // We want to limit the gas to avoid giving priority to the biggest paying contributors\n', '      //bool limitGas = tx.gasprice <= limitGasPrice;\n', '\n', '      return withinPeriod && nonZeroPurchase && withinTokenLimit && minimumPurchase && hasBalanceAvailable;\n', '   }\n', '\n', '   /// @notice To see if the minimum goal of tokens of the ICO has been reached\n', '   /// @return bool True if the tokens raised are bigger than the goal or false otherwise\n', '   function goalReached() public constant returns(bool) {\n', '      return tokensRaised >= minimumGoal;\n', '   }\n', '\n', '   /// @notice Public function to check if the crowdsale has ended or not\n', '   function hasEnded() public constant returns(bool) {\n', '      return now > endTime || tokensRaised >= maxTokensRaised;\n', '   }\n', '}']