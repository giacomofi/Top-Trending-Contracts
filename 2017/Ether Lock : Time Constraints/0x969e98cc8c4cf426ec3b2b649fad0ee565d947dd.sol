['pragma solidity ^0.4.18;\n', '\n', 'contract myOwned {\n', '    address public contractOwner;\n', '    function myOwned() public { contractOwner = msg.sender; }\n', '    modifier onlyOwner { require(msg.sender == contractOwner); _;}\n', '    function exOwner(address newOwner) onlyOwner public { contractOwner = newOwner;}\n', '}\n', '\n', 'interface token {\n', '    function transfer(address receiver, uint amount) public;\n', '}\n', '\n', 'contract AIAcrowdsale is myOwned {\n', '    uint public startDate;\n', '    uint public stopDate;\n', '    uint public fundingGoal;\n', '    uint public amountRaised;\n', '    token public contractTokenReward;\n', '    address public contractWallet;\n', '    mapping(address => uint256) public balanceOf;\n', '    event GoalReached(address receiver, uint amount);\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '\n', '    function AIAcrowdsale (\n', '        uint _startDate,\n', '        uint _stopDate,\n', '        uint _fundingGoal,\n', '        address _contractWallet,\n', '        address _contractTokenReward\n', '    ) public {\n', '        startDate = _startDate;\n', '        stopDate = _stopDate;\n', '        fundingGoal = _fundingGoal * 1 ether;\n', '        contractWallet = _contractWallet;\n', '        contractTokenReward = token(_contractTokenReward);\n', '    }\n', '    \n', '    function getCurrentTimestamp () internal constant returns (uint256) {\n', '        return now;\n', '    }\n', '\n', '    function saleActive() public constant returns (bool) {\n', '        return (now >= startDate && now <= stopDate && amountRaised < fundingGoal);\n', '    }\n', '\n', '    function getRateAt(uint256 at) public constant returns (uint256) {\n', '        if (at < startDate) {return 0;} \n', '        else if (at < (startDate + 168 hours)) {return 10000;} \n', '        else if (at < (startDate + 336 hours)) {return 9000;} \n', '        else if (at < (startDate + 528 hours)) {return 8100;} \n', '        else if (at <= stopDate) {return 7300;} \n', '        else if (at > stopDate) {return 0;}\n', '    }\n', '\n', '    function getRateNow() public constant returns (uint256) {\n', '        return getRateAt(now);\n', '    }\n', '\n', '    function () public payable {\n', '        require(saleActive());\n', '        require(amountRaised < fundingGoal);\n', '        uint amount = msg.value;\n', '        balanceOf[msg.sender] += amount;\n', '        amountRaised += amount;\n', '        uint price =  0.0001 ether / getRateAt(now);\n', '        contractTokenReward.transfer(msg.sender, amount / price);\n', '        FundTransfer(msg.sender, amount, true);\n', '        contractWallet.transfer(msg.value);\n', '    }\n', '\n', '    function saleEnd() public onlyOwner {\n', '        require(!saleActive());\n', '        require(now > stopDate );\n', '        contractWallet.transfer(this.balance);\n', '        contractTokenReward.transfer(contractWallet, this.balance);\n', '    }\n', '}']