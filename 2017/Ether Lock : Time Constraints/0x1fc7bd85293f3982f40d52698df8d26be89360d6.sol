['pragma solidity ^0.4.16;\n', '\n', '// copyright contact@Etheremon.com\n', '\n', 'contract SafeMath {\n', '\n', '    /* function assert(bool assertion) internal { */\n', '    /*   if (!assertion) { */\n', '    /*     throw; */\n', '    /*   } */\n', '    /* }      // assert no longer needed once solidity is on 0.4.10 */\n', '\n', '    function safeAdd(uint256 x, uint256 y) pure internal returns(uint256) {\n', '      uint256 z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtract(uint256 x, uint256 y) pure internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) pure internal returns(uint256) {\n', '      uint256 z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '\n', '}\n', '\n', 'contract BasicAccessControl {\n', '    address public owner;\n', '    // address[] public moderators;\n', '    uint16 public totalModerators = 0;\n', '    mapping (address => bool) public moderators;\n', '    bool public isMaintaining = true;\n', '\n', '    function BasicAccessControl() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyModerators() {\n', '        require(moderators[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '    modifier isActive {\n', '        require(!isMaintaining);\n', '        _;\n', '    }\n', '\n', '    function ChangeOwner(address _newOwner) onlyOwner public {\n', '        if (_newOwner != address(0)) {\n', '            owner = _newOwner;\n', '        }\n', '    }\n', '\n', '    function AddModerator(address _newModerator) onlyOwner public {\n', '        if (moderators[_newModerator] == false) {\n', '            moderators[_newModerator] = true;\n', '            totalModerators += 1;\n', '        }\n', '    }\n', '    \n', '    function RemoveModerator(address _oldModerator) onlyOwner public {\n', '        if (moderators[_oldModerator] == true) {\n', '            moderators[_oldModerator] = false;\n', '            totalModerators -= 1;\n', '        }\n', '    }\n', '    \n', '    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\n', '        isMaintaining = _isMaintaining;\n', '    }\n', '}\n', '\n', 'contract EtheremonEnum {\n', '\n', '    enum ResultCode {\n', '        SUCCESS,\n', '        ERROR_CLASS_NOT_FOUND,\n', '        ERROR_LOW_BALANCE,\n', '        ERROR_SEND_FAIL,\n', '        ERROR_NOT_TRAINER,\n', '        ERROR_NOT_ENOUGH_MONEY,\n', '        ERROR_INVALID_AMOUNT\n', '    }\n', '    \n', '    enum ArrayType {\n', '        CLASS_TYPE,\n', '        STAT_STEP,\n', '        STAT_START,\n', '        STAT_BASE,\n', '        OBJ_SKILL\n', '    }\n', '    \n', '    enum PropertyType {\n', '        ANCESTOR,\n', '        XFACTOR\n', '    }\n', '}\n', '\n', 'contract EtheremonDataBase is EtheremonEnum, BasicAccessControl, SafeMath {\n', '    \n', '    uint64 public totalMonster;\n', '    uint32 public totalClass;\n', '    \n', '    // write\n', '    function withdrawEther(address _sendTo, uint _amount) onlyOwner public returns(ResultCode);\n', '    function addElementToArrayType(ArrayType _type, uint64 _id, uint8 _value) onlyModerators public returns(uint);\n', '    function updateIndexOfArrayType(ArrayType _type, uint64 _id, uint _index, uint8 _value) onlyModerators public returns(uint);\n', '    function setMonsterClass(uint32 _classId, uint256 _price, uint256 _returnPrice, bool _catchable) onlyModerators public returns(uint32);\n', '    function addMonsterObj(uint32 _classId, address _trainer, string _name) onlyModerators public returns(uint64);\n', '    function setMonsterObj(uint64 _objId, string _name, uint32 _exp, uint32 _createIndex, uint32 _lastClaimIndex) onlyModerators public;\n', '    function increaseMonsterExp(uint64 _objId, uint32 amount) onlyModerators public;\n', '    function decreaseMonsterExp(uint64 _objId, uint32 amount) onlyModerators public;\n', '    function removeMonsterIdMapping(address _trainer, uint64 _monsterId) onlyModerators public;\n', '    function addMonsterIdMapping(address _trainer, uint64 _monsterId) onlyModerators public;\n', '    function clearMonsterReturnBalance(uint64 _monsterId) onlyModerators public returns(uint256 amount);\n', '    function collectAllReturnBalance(address _trainer) onlyModerators public returns(uint256 amount);\n', '    function transferMonster(address _from, address _to, uint64 _monsterId) onlyModerators public returns(ResultCode);\n', '    function addExtraBalance(address _trainer, uint256 _amount) onlyModerators public returns(uint256);\n', '    function deductExtraBalance(address _trainer, uint256 _amount) onlyModerators public returns(uint256);\n', '    function setExtraBalance(address _trainer, uint256 _amount) onlyModerators public;\n', '    \n', '    // read\n', '    function getSizeArrayType(ArrayType _type, uint64 _id) constant public returns(uint);\n', '    function getElementInArrayType(ArrayType _type, uint64 _id, uint _index) constant public returns(uint8);\n', '    function getMonsterClass(uint32 _classId) constant public returns(uint32 classId, uint256 price, uint256 returnPrice, uint32 total, bool catchable);\n', '    function getMonsterObj(uint64 _objId) constant public returns(uint64 objId, uint32 classId, address trainer, uint32 exp, uint32 createIndex, uint32 lastClaimIndex, uint createTime);\n', '    function getMonsterName(uint64 _objId) constant public returns(string name);\n', '    function getExtraBalance(address _trainer) constant public returns(uint256);\n', '    function getMonsterDexSize(address _trainer) constant public returns(uint);\n', '    function getMonsterObjId(address _trainer, uint index) constant public returns(uint64);\n', '    function getExpectedBalance(address _trainer) constant public returns(uint256);\n', '    function getMonsterReturn(uint64 _objId) constant public returns(uint256 current, uint256 total);\n', '}\n', '\n', 'contract EtheremonGateway is EtheremonEnum, BasicAccessControl {\n', '    // using for battle contract later\n', '    function increaseMonsterExp(uint64 _objId, uint32 amount) onlyModerators public;\n', '    function decreaseMonsterExp(uint64 _objId, uint32 amount) onlyModerators public;\n', '    \n', '    // read \n', '    function isGason(uint64 _objId) constant external returns(bool);\n', '    function getObjBattleInfo(uint64 _objId) constant external returns(uint32 classId, uint32 exp, bool isGason, \n', '        uint ancestorLength, uint xfactorsLength);\n', '    function getClassPropertySize(uint32 _classId, PropertyType _type) constant external returns(uint);\n', '    function getClassPropertyValue(uint32 _classId, PropertyType _type, uint index) constant external returns(uint32);\n', '}\n', '\n', 'contract EtheremonWorld is EtheremonGateway, SafeMath {\n', '    // old processor\n', '    address constant public ETHEREMON_PROCESSOR = address(0x8a60806F05876f4d6dB00c877B0558DbCAD30682);\n', '    uint8 constant public STAT_COUNT = 6;\n', '    uint8 constant public STAT_MAX = 32;\n', '    uint8 constant public GEN0_NO = 24;\n', '    \n', '    struct MonsterClassAcc {\n', '        uint32 classId;\n', '        uint256 price;\n', '        uint256 returnPrice;\n', '        uint32 total;\n', '        bool catchable;\n', '    }\n', '\n', '    struct MonsterObjAcc {\n', '        uint64 monsterId;\n', '        uint32 classId;\n', '        address trainer;\n', '        string name;\n', '        uint32 exp;\n', '        uint32 createIndex;\n', '        uint32 lastClaimIndex;\n', '        uint createTime;\n', '    }\n', '    \n', '    // Gen0 has return price & no longer can be caught when this contract is deployed\n', '    struct Gen0Config {\n', '        uint32 classId;\n', '        uint256 originalPrice;\n', '        uint256 returnPrice;\n', '        uint32 total; // total caught (not count those from eggs)\n', '    }\n', '    \n', '    struct GenXProperty {\n', '        uint32 classId;\n', '        bool isGason;\n', '        uint32[] ancestors;\n', '        uint32[] xfactors;\n', '    }\n', '    \n', '    mapping(uint32 => Gen0Config) public gen0Config;\n', '    mapping(uint32 => GenXProperty) public genxProperty;\n', '    uint256 public totalCashout = 0; // for admin\n', '    uint256 public totalEarn = 0; // exclude gen 0\n', '    uint16 public priceIncreasingRatio = 1000;\n', '    uint public maxDexSize = 500;\n', '    \n', '    address private lastHunter = address(0x0);\n', '\n', '    // data contract\n', '    address public dataContract;\n', '    \n', '    // event\n', '    event EventCatchMonster(address indexed trainer, uint64 objId);\n', '    event EventCashOut(address indexed trainer, ResultCode result, uint256 amount);\n', '    event EventWithdrawEther(address indexed sendTo, ResultCode result, uint256 amount);\n', '    \n', '    function EtheremonWorld(address _dataContract) public {\n', '        dataContract = _dataContract;\n', '    }\n', '    \n', '     // admin & moderators\n', '    function setMaxDexSize(uint _value) onlyModerators external {\n', '        maxDexSize = _value;\n', '    }\n', '    \n', '    function setOriginalPriceGen0() onlyModerators external {\n', '        gen0Config[1] = Gen0Config(1, 0.3 ether, 0.003 ether, 374);\n', '        gen0Config[2] = Gen0Config(2, 0.3 ether, 0.003 ether, 408);\n', '        gen0Config[3] = Gen0Config(3, 0.3 ether, 0.003 ether, 373);\n', '        gen0Config[4] = Gen0Config(4, 0.2 ether, 0.002 ether, 437);\n', '        gen0Config[5] = Gen0Config(5, 0.1 ether, 0.001 ether, 497);\n', '        gen0Config[6] = Gen0Config(6, 0.3 ether, 0.003 ether, 380); \n', '        gen0Config[7] = Gen0Config(7, 0.2 ether, 0.002 ether, 345);\n', '        gen0Config[8] = Gen0Config(8, 0.1 ether, 0.001 ether, 518); \n', '        gen0Config[9] = Gen0Config(9, 0.1 ether, 0.001 ether, 447);\n', '        gen0Config[10] = Gen0Config(10, 0.2 ether, 0.002 ether, 380); \n', '        gen0Config[11] = Gen0Config(11, 0.2 ether, 0.002 ether, 354);\n', '        gen0Config[12] = Gen0Config(12, 0.2 ether, 0.002 ether, 346);\n', '        gen0Config[13] = Gen0Config(13, 0.2 ether, 0.002 ether, 351); \n', '        gen0Config[14] = Gen0Config(14, 0.2 ether, 0.002 ether, 338);\n', '        gen0Config[15] = Gen0Config(15, 0.2 ether, 0.002 ether, 341);\n', '        gen0Config[16] = Gen0Config(16, 0.35 ether, 0.0035 ether, 384);\n', '        gen0Config[17] = Gen0Config(17, 0.1 ether, 0.001 ether, 305); \n', '        gen0Config[18] = Gen0Config(18, 0.1 ether, 0.001 ether, 427);\n', '        gen0Config[19] = Gen0Config(19, 0.1 ether, 0.001 ether, 304);\n', '        gen0Config[20] = Gen0Config(20, 0.4 ether, 0.005 ether, 82);\n', '        gen0Config[21] = Gen0Config(21, 1, 1, 123);\n', '        gen0Config[22] = Gen0Config(22, 0.2 ether, 0.001 ether, 468);\n', '        gen0Config[23] = Gen0Config(23, 0.5 ether, 0.0025 ether, 302);\n', '        gen0Config[24] = Gen0Config(24, 1 ether, 0.005 ether, 195);\n', '    }\n', '\n', '    function getEarningAmount() constant public returns(uint256) {\n', '        // calculate value for gen0\n', '        uint256 totalValidAmount = 0;\n', '        for (uint32 classId=1; classId <= GEN0_NO; classId++) {\n', '            // make sure there is a class\n', '            Gen0Config storage gen0 = gen0Config[classId];\n', '            if (gen0.total >0 && gen0.classId == classId && gen0.originalPrice > 0 && gen0.returnPrice > 0) {\n', '                uint256 rate = gen0.originalPrice/gen0.returnPrice;\n', '                if (rate < gen0.total) {\n', '                    totalValidAmount += (gen0.originalPrice + gen0.returnPrice) * rate / 2;\n', '                    totalValidAmount += (gen0.total - rate) * gen0.returnPrice;\n', '                } else {\n', '                    totalValidAmount += (gen0.originalPrice + gen0.returnPrice * (rate - gen0.total + 1)) / 2 * gen0.total;\n', '                }\n', '            }\n', '        }\n', '        \n', '        // add in earn from genx\n', '        totalValidAmount = safeAdd(totalValidAmount, totalEarn);\n', '        // deduct amount of cashing out \n', '        totalValidAmount = safeSubtract(totalValidAmount, totalCashout);\n', '        \n', '        return totalValidAmount;\n', '    }\n', '    \n', '    function withdrawEther(address _sendTo, uint _amount) onlyModerators external returns(ResultCode) {\n', '        if (_amount > this.balance) {\n', '            EventWithdrawEther(_sendTo, ResultCode.ERROR_INVALID_AMOUNT, 0);\n', '            return ResultCode.ERROR_INVALID_AMOUNT;\n', '        }\n', '        \n', '        uint256 totalValidAmount = getEarningAmount();\n', '        if (_amount > totalValidAmount) {\n', '            EventWithdrawEther(_sendTo, ResultCode.ERROR_INVALID_AMOUNT, 0);\n', '            return ResultCode.ERROR_INVALID_AMOUNT;\n', '        }\n', '        \n', '        _sendTo.transfer(_amount);\n', '        totalCashout += _amount;\n', '        EventWithdrawEther(_sendTo, ResultCode.SUCCESS, _amount);\n', '        return ResultCode.SUCCESS;\n', '    }\n', '\n', '    // convenient tool to add monster\n', '    function addMonsterClassBasic(uint32 _classId, uint8 _type, uint256 _price, uint256 _returnPrice,\n', '        uint8 _ss1, uint8 _ss2, uint8 _ss3, uint8 _ss4, uint8 _ss5, uint8 _ss6) onlyModerators external {\n', '        \n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        MonsterClassAcc memory class;\n', '        (class.classId, class.price, class.returnPrice, class.total, class.catchable) = data.getMonsterClass(_classId);\n', '        // can add only one time\n', '        if (_classId == 0 || class.classId == _classId)\n', '            revert();\n', '\n', '        data.setMonsterClass(_classId, _price, _returnPrice, true);\n', '        data.addElementToArrayType(ArrayType.CLASS_TYPE, uint64(_classId), _type);\n', '        \n', '        // add stat step\n', '        data.addElementToArrayType(ArrayType.STAT_START, uint64(_classId), _ss1);\n', '        data.addElementToArrayType(ArrayType.STAT_START, uint64(_classId), _ss2);\n', '        data.addElementToArrayType(ArrayType.STAT_START, uint64(_classId), _ss3);\n', '        data.addElementToArrayType(ArrayType.STAT_START, uint64(_classId), _ss4);\n', '        data.addElementToArrayType(ArrayType.STAT_START, uint64(_classId), _ss5);\n', '        data.addElementToArrayType(ArrayType.STAT_START, uint64(_classId), _ss6);\n', '        \n', '    }\n', '    \n', '    function addMonsterClassExtend(uint32 _classId, uint8 _type2, uint8 _type3, \n', '        uint8 _st1, uint8 _st2, uint8 _st3, uint8 _st4, uint8 _st5, uint8 _st6 ) onlyModerators external {\n', '\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        if (_classId == 0 || data.getSizeArrayType(ArrayType.STAT_STEP, uint64(_classId)) > 0)\n', '            revert();\n', '\n', '        if (_type2 > 0) {\n', '            data.addElementToArrayType(ArrayType.CLASS_TYPE, uint64(_classId), _type2);\n', '        }\n', '        if (_type3 > 0) {\n', '            data.addElementToArrayType(ArrayType.CLASS_TYPE, uint64(_classId), _type3);\n', '        }\n', '        \n', '        // add stat base\n', '        data.addElementToArrayType(ArrayType.STAT_STEP, uint64(_classId), _st1);\n', '        data.addElementToArrayType(ArrayType.STAT_STEP, uint64(_classId), _st2);\n', '        data.addElementToArrayType(ArrayType.STAT_STEP, uint64(_classId), _st3);\n', '        data.addElementToArrayType(ArrayType.STAT_STEP, uint64(_classId), _st4);\n', '        data.addElementToArrayType(ArrayType.STAT_STEP, uint64(_classId), _st5);\n', '        data.addElementToArrayType(ArrayType.STAT_STEP, uint64(_classId), _st6);\n', '    }\n', '    \n', '    function setCatchable(uint32 _classId, bool catchable) onlyModerators external {\n', '        // can not edit gen 0 - can not catch forever\n', '        Gen0Config storage gen0 = gen0Config[_classId];\n', '        if (gen0.classId == _classId)\n', '            revert();\n', '        \n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        MonsterClassAcc memory class;\n', '        (class.classId, class.price, class.returnPrice, class.total, class.catchable) = data.getMonsterClass(_classId);\n', '        data.setMonsterClass(class.classId, class.price, class.returnPrice, catchable);\n', '    }\n', '    \n', '    function setPriceIncreasingRatio(uint16 _ratio) onlyModerators external {\n', '        priceIncreasingRatio = _ratio;\n', '    }\n', '    \n', '    function setGason(uint32 _classId, bool _isGason) onlyModerators external {\n', '        GenXProperty storage pro = genxProperty[_classId];\n', '        pro.isGason = _isGason;\n', '    }\n', '    \n', '    function addClassProperty(uint32 _classId, PropertyType _type, uint32 value) onlyModerators external {\n', '        GenXProperty storage pro = genxProperty[_classId];\n', '        pro.classId = _classId;\n', '        if (_type == PropertyType.ANCESTOR) {\n', '            pro.ancestors.push(value);\n', '        } else {\n', '            pro.xfactors.push(value);\n', '        }\n', '    }\n', '    \n', '    // gate way \n', '    function increaseMonsterExp(uint64 _objId, uint32 amount) onlyModerators public {\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        data.increaseMonsterExp(_objId, amount);\n', '    }\n', '    \n', '    function decreaseMonsterExp(uint64 _objId, uint32 amount) onlyModerators public {\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        data.decreaseMonsterExp(_objId, amount);\n', '    }\n', '    \n', '    // helper\n', '    function getRandom(uint8 maxRan, uint8 index, address priAddress) constant public returns(uint8) {\n', '        uint256 genNum = uint256(block.blockhash(block.number-1)) + uint256(priAddress);\n', '        for (uint8 i = 0; i < index && i < 6; i ++) {\n', '            genNum /= 256;\n', '        }\n', '        return uint8(genNum % maxRan);\n', '    }\n', '    \n', '    function () payable public {\n', '        if (msg.sender != ETHEREMON_PROCESSOR)\n', '            revert();\n', '    }\n', '    \n', '    // public\n', '    \n', '    function isGason(uint64 _objId) constant external returns(bool) {\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        MonsterObjAcc memory obj;\n', '        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(_objId);\n', '        GenXProperty storage pro = genxProperty[obj.classId];\n', '        return pro.isGason;\n', '    }\n', '    \n', '    function getObjIndex(uint64 _objId) constant public returns(uint32 classId, uint32 createIndex, uint32 lastClaimIndex) {\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        MonsterObjAcc memory obj;\n', '        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(_objId);\n', '        return (obj.classId, obj.createIndex, obj.lastClaimIndex);\n', '    }\n', '    \n', '    function getObjBattleInfo(uint64 _objId) constant external returns(uint32 classId, uint32 exp, bool isGason, \n', '        uint ancestorLength, uint xfactorsLength) {\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        MonsterObjAcc memory obj;\n', '        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(_objId);\n', '        GenXProperty storage pro = genxProperty[obj.classId];\n', '        return (obj.classId, obj.exp, pro.isGason, pro.ancestors.length, pro.xfactors.length);\n', '    }\n', '    \n', '    function getClassPropertySize(uint32 _classId, PropertyType _type) constant external returns(uint) {\n', '        if (_type == PropertyType.ANCESTOR) \n', '            return genxProperty[_classId].ancestors.length;\n', '        else\n', '            return genxProperty[_classId].xfactors.length;\n', '    }\n', '    \n', '    function getClassPropertyValue(uint32 _classId, PropertyType _type, uint index) constant external returns(uint32) {\n', '        if (_type == PropertyType.ANCESTOR)\n', '            return genxProperty[_classId].ancestors[index];\n', '        else\n', '            return genxProperty[_classId].xfactors[index];\n', '    }\n', '    \n', '    // only gen 0\n', '    function getGen0COnfig(uint32 _classId) constant public returns(uint32, uint256, uint32) {\n', '        Gen0Config storage gen0 = gen0Config[_classId];\n', '        return (gen0.classId, gen0.originalPrice, gen0.total);\n', '    }\n', '    \n', '    // only gen 0\n', '    function getReturnFromMonster(uint64 _objId) constant public returns(uint256 current, uint256 total) {\n', '        /*\n', '        1. Gen 0 can not be caught anymore.\n', '        2. Egg will not give return.\n', '        */\n', '        \n', '        uint32 classId = 0;\n', '        uint32 createIndex = 0;\n', '        uint32 lastClaimIndex = 0;\n', '        (classId, createIndex, lastClaimIndex) = getObjIndex(_objId);\n', '        Gen0Config storage gen0 = gen0Config[classId];\n', '        if (gen0.classId != classId) {\n', '            return (0, 0);\n', '        }\n', '        \n', '        uint32 currentGap = 0;\n', '        uint32 totalGap = 0;\n', '        if (lastClaimIndex < gen0.total)\n', '            currentGap = gen0.total - lastClaimIndex;\n', '        if (createIndex < gen0.total)\n', '            totalGap = gen0.total - createIndex;\n', '        return (safeMult(currentGap, gen0.returnPrice), safeMult(totalGap, gen0.returnPrice));\n', '    }\n', '    \n', '    // write access\n', '    \n', '    function moveDataContractBalanceToWorld() external {\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        data.withdrawEther(address(this), data.balance);\n', '    }\n', '    \n', '    function renameMonster(uint64 _objId, string name) isActive external {\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        MonsterObjAcc memory obj;\n', '        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(_objId);\n', '        if (obj.monsterId != _objId || obj.trainer != msg.sender) {\n', '            revert();\n', '        }\n', '        data.setMonsterObj(_objId, name, obj.exp, obj.createIndex, obj.lastClaimIndex);\n', '    }\n', '    \n', '    function catchMonster(uint32 _classId, string _name) isActive external payable {\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        MonsterClassAcc memory class;\n', '        (class.classId, class.price, class.returnPrice, class.total, class.catchable) = data.getMonsterClass(_classId);\n', '        \n', '        if (class.classId == 0 || class.catchable == false) {\n', '            revert();\n', '        }\n', '        \n', '        // can not keep too much etheremon \n', '        if (data.getMonsterDexSize(msg.sender) > maxDexSize)\n', '            revert();\n', '        \n', '        uint256 totalBalance = safeAdd(msg.value, data.getExtraBalance(msg.sender));\n', '        uint256 payPrice = class.price;\n', '        // increase price for each etheremon created\n', '        if (class.total > 0)\n', '            payPrice += class.price*(class.total-1)/priceIncreasingRatio;\n', '        if (payPrice > totalBalance) {\n', '            revert();\n', '        }\n', '        totalEarn += payPrice;\n', '        \n', '        // deduct the balance\n', '        data.setExtraBalance(msg.sender, safeSubtract(totalBalance, payPrice));\n', '        \n', '        // add monster\n', '        uint64 objId = data.addMonsterObj(_classId, msg.sender, _name);\n', '        // generate base stat for the previous one\n', '        for (uint i=0; i < STAT_COUNT; i+= 1) {\n', '            uint8 value = getRandom(STAT_MAX, uint8(i), lastHunter) + data.getElementInArrayType(ArrayType.STAT_START, uint64(_classId), i);\n', '            data.addElementToArrayType(ArrayType.STAT_BASE, objId, value);\n', '        }\n', '        \n', '        lastHunter = msg.sender;\n', '        EventCatchMonster(msg.sender, objId);\n', '    }\n', '\n', '\n', '    function cashOut(uint256 _amount) public returns(ResultCode) {\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        \n', '        uint256 totalAmount = data.getExtraBalance(msg.sender);\n', '        uint64 objId = 0;\n', '\n', '        // collect gen 0 return price \n', '        uint dexSize = data.getMonsterDexSize(msg.sender);\n', '        for (uint i = 0; i < dexSize; i++) {\n', '            objId = data.getMonsterObjId(msg.sender, i);\n', '            if (objId > 0) {\n', '                MonsterObjAcc memory obj;\n', '                (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(objId);\n', '                Gen0Config storage gen0 = gen0Config[obj.classId];\n', '                if (gen0.classId == obj.classId) {\n', '                    if (obj.lastClaimIndex < gen0.total) {\n', '                        uint32 gap = uint32(safeSubtract(gen0.total, obj.lastClaimIndex));\n', '                        if (gap > 0) {\n', '                            totalAmount += safeMult(gap, gen0.returnPrice);\n', '                            // reset total (except name is cleared :( )\n', '                            data.setMonsterObj(obj.monsterId, " name me ", obj.exp, obj.createIndex, gen0.total);\n', '                        }\n', '                    }\n', '                }\n', '            }\n', '        }\n', '        \n', '        // default to cash out all\n', '        if (_amount == 0) {\n', '            _amount = totalAmount;\n', '        }\n', '        if (_amount > totalAmount) {\n', '            revert();\n', '        }\n', '        \n', '        // check contract has enough money\n', '        if (this.balance + data.balance < _amount){\n', '            revert();\n', '        } else if (this.balance < _amount) {\n', '            data.withdrawEther(address(this), data.balance);\n', '        }\n', '        \n', '        if (_amount > 0) {\n', '            data.setExtraBalance(msg.sender, totalAmount - _amount);\n', '            if (!msg.sender.send(_amount)) {\n', '                data.setExtraBalance(msg.sender, totalAmount);\n', '                EventCashOut(msg.sender, ResultCode.ERROR_SEND_FAIL, 0);\n', '                return ResultCode.ERROR_SEND_FAIL;\n', '            }\n', '        }\n', '        \n', '        EventCashOut(msg.sender, ResultCode.SUCCESS, _amount);\n', '        return ResultCode.SUCCESS;\n', '    }\n', '    \n', '    // read access\n', '    \n', '    function getTrainerEarn(address _trainer) constant public returns(uint256) {\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        uint256 returnFromMonster = 0;\n', '        // collect gen 0 return price \n', '        uint256 gen0current = 0;\n', '        uint256 gen0total = 0;\n', '        uint64 objId = 0;\n', '        uint dexSize = data.getMonsterDexSize(_trainer);\n', '        for (uint i = 0; i < dexSize; i++) {\n', '            objId = data.getMonsterObjId(_trainer, i);\n', '            if (objId > 0) {\n', '                (gen0current, gen0total) = getReturnFromMonster(objId);\n', '                returnFromMonster += gen0current;\n', '            }\n', '        }\n', '        return returnFromMonster;\n', '    }\n', '    \n', '    function getTrainerBalance(address _trainer) constant external returns(uint256) {\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        \n', '        uint256 userExtraBalance = data.getExtraBalance(_trainer);\n', '        uint256 returnFromMonster = getTrainerEarn(_trainer);\n', '\n', '        return (userExtraBalance + returnFromMonster);\n', '    }\n', '    \n', '    function getMonsterClassBasic(uint32 _classId) constant external returns(uint256, uint256, uint256, bool) {\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        MonsterClassAcc memory class;\n', '        (class.classId, class.price, class.returnPrice, class.total, class.catchable) = data.getMonsterClass(_classId);\n', '        return (class.price, class.returnPrice, class.total, class.catchable);\n', '    }\n', '\n', '}']