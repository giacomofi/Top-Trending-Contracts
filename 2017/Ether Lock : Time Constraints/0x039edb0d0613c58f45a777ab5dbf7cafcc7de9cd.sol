['pragma solidity ^0.4.15;\n', 'contract ERC20Basic {\n', ' uint256 public totalSupply;\n', ' function balanceOf(address who) constant returns (uint256);\n', ' function transfer(address to, uint256 value) returns (bool);\n', ' event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', 'contract ERC20 is ERC20Basic {\n', ' function allowance(address owner, address spender) constant returns (uint256);\n', ' function transferFrom(address from, address to, uint256 value) returns (bool);\n', ' function approve(address spender, uint256 value) returns (bool);\n', ' event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'library SafeMath {\n', ' function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '   uint256 c = a * b;\n', '   assert(a == 0 || c / a == b);\n', '   return c;\n', ' }\n', ' function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '   uint256 c = a / b;\n', '   return c;\n', ' }\n', ' function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '   assert(b <= a);\n', '   return a - b;\n', ' }\n', ' function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '   uint256 c = a + b;\n', '   assert(c >= a);\n', '   return c;\n', ' }\n', '}\n', 'contract BasicToken is ERC20Basic {\n', ' using SafeMath for uint256;\n', ' mapping(address => uint256) balances;\n', ' function transfer(address _to, uint256 _value) returns (bool) {\n', '   balances[msg.sender] = balances[msg.sender].sub(_value);\n', '   balances[_to] = balances[_to].add(_value);\n', '   Transfer(msg.sender, _to, _value);\n', '   return true;\n', ' }\n', ' function balanceOf(address _owner) constant returns (uint256 balance) {\n', '   return balances[_owner];\n', ' }\n', '}\n', 'contract StandardToken is ERC20, BasicToken {\n', ' mapping (address => mapping (address => uint256)) allowed;\n', ' function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '   var _allowance = allowed[_from][msg.sender];\n', '   balances[_to] = balances[_to].add(_value);\n', '   balances[_from] = balances[_from].sub(_value);\n', '   allowed[_from][msg.sender] = _allowance.sub(_value);\n', '   Transfer(_from, _to, _value);\n', '   return true;\n', ' }\n', ' function approve(address _spender, uint256 _value) returns (bool) {\n', '   require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '   allowed[msg.sender][_spender] = _value;\n', '   Approval(msg.sender, _spender, _value);\n', '   return true;\n', ' }\n', ' function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '   return allowed[_owner][_spender];\n', ' }\n', '}\n', 'contract Ownable {\n', ' address public owner;\n', ' function Ownable() {\n', '   owner = msg.sender;\n', ' }\n', ' modifier onlyOwner() {\n', '   require(msg.sender == owner);\n', '   _;\n', ' }\n', ' function transferOwnership(address newOwner) onlyOwner {\n', '   require(newOwner != address(0));\n', '   owner = newOwner;\n', ' }\n', '}\n', 'contract MintableToken is StandardToken, Ownable {\n', ' event Mint(address indexed to, uint256 amount);\n', ' event MintFinished();\n', ' bool public mintingFinished = false;\n', ' modifier canMint() {\n', '   require(!mintingFinished);\n', '   _;\n', ' }\n', ' function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n', '   totalSupply = totalSupply.add(_amount);\n', '   balances[_to] = balances[_to].add(_amount);\n', '   Mint(_to, _amount);\n', '   return true;\n', ' }\n', ' function finishMinting() onlyOwner returns (bool) {\n', '   mintingFinished = true;\n', '   MintFinished();\n', '   return true;\n', ' }\n', '}\n', 'contract GlobalCryptoBank is MintableToken {\n', '   string public constant name = "Global Crypto Bank";\n', '   string public constant symbol = "BANK";\n', '   uint32 public constant decimals = 18;\n', '   uint public INITIAL_SUPPLY = 50000000 * 1 ether;\n', '   function GlobalCryptoBank() {\n', '       mint(owner, INITIAL_SUPPLY);\n', '       transfer(0x0e2Bec7F14F244c5D1b4Ce14f48dcDb88fB61690, 2000000 * 1 ether);\n', '       finishMinting();\n', '   }\n', '}\n', 'contract Crowdsale is Ownable {\n', '   using SafeMath for uint;\n', '   address founderAddress;\n', '   address bountyAddress;\n', '   uint preIsoTokenLimit;\n', '   uint isoTokenLimit;\n', '   uint preIsoStartDate;\n', '   uint preIsoEndDate;\n', '   uint isoStartDate;\n', '   uint isoEndDate;\n', '   uint rate;\n', '   uint founderPercent;\n', '   uint bountyPercent;\n', '   uint public soldTokens = 0;\n', '   GlobalCryptoBank public token = new GlobalCryptoBank();\n', '   function Crowdsale () payable {\n', '       founderAddress = 0xF12B75857E56727c90fc473Fe18C790B364468eD;\n', '       bountyAddress = 0x0e2Bec7F14F244c5D1b4Ce14f48dcDb88fB61690;\n', '       founderPercent = 90;\n', '       bountyPercent = 10;\n', '       rate = 300 * 1 ether;\n', '       preIsoStartDate = 1509321600;\n', '       preIsoEndDate = 1511049600;\n', '       isoStartDate = 1511568000;\n', '       isoEndDate = 1514678399;\n', '       preIsoTokenLimit = 775000 * 1 ether;\n', '       isoTokenLimit = 47225000 * 1 ether;\n', '   }\n', '   modifier isUnderPreIsoLimit(uint value) {\n', '       require((soldTokens+rate.mul(value).div(1 ether)+rate.mul(value).div(1 ether).mul(getPreIsoBonusPercent(value).div(100))) <= preIsoTokenLimit);\n', '       _;\n', '   }\n', '   modifier isUnderIsoLimit(uint value) {\n', '       require((soldTokens+rate.mul(value).div(1 ether)+rate.mul(value).div(1 ether).mul(getIsoBonusPercent(value).div(100))) <= isoTokenLimit);\n', '       _;\n', '   }\n', '   function getPreIsoBonusPercent(uint value) private returns (uint) {\n', '       uint eth = value.div(1 ether);\n', '       uint bonusPercent = 0;\n', '       if (now >= preIsoStartDate && now <= preIsoStartDate + 2 days) {\n', '           bonusPercent += 35;\n', '       } else if (now >= preIsoStartDate + 2 days && now <= preIsoStartDate + 7 days) {\n', '           bonusPercent += 33;\n', '       } else if (now >= preIsoStartDate + 7 days && now <= preIsoStartDate + 14 days) {\n', '           bonusPercent += 31;\n', '       } else if (now >= preIsoStartDate + 14 days && now <= preIsoStartDate + 21 days) {\n', '           bonusPercent += 30;\n', '       }\n', '       \n', '       \n', '       if (eth >= 1 && eth < 10) {\n', '           bonusPercent += 2;\n', '       } else if (eth >= 10 && eth < 50) {\n', '           bonusPercent += 4;\n', '       } else if (eth >= 50 && eth < 100) {\n', '           bonusPercent += 8;\n', '       } else if (eth >= 100) {\n', '           bonusPercent += 10;\n', '       }\n', '       return bonusPercent;\n', '   }\n', '   function getIsoBonusPercent(uint value) private returns (uint) {\n', '       uint eth = value.div(1 ether);\n', '       uint bonusPercent = 0;\n', '       if (now >= isoStartDate && now <= isoStartDate + 2 days) {\n', '           bonusPercent += 20;\n', '       } else if (now >= isoStartDate + 2 days && now <= isoStartDate + 7 days) {\n', '           bonusPercent += 18;\n', '       } else if (now >= isoStartDate + 7 days && now <= isoStartDate + 14 days) {\n', '           bonusPercent += 15;\n', '       } else if (now >= isoStartDate + 14 days && now <= isoStartDate + 21 days) {\n', '           bonusPercent += 10;\n', '       }\n', '       if (eth >= 1 && eth < 10) {\n', '           bonusPercent += 2;\n', '       } else if (eth >= 10 && eth < 50) {\n', '           bonusPercent += 4;\n', '       } else if (eth >= 50 && eth < 100) {\n', '           bonusPercent += 8;\n', '       } else if (eth >= 100) {\n', '           bonusPercent += 10;\n', '       }\n', '       return bonusPercent;\n', '   }\n', '   function buyPreICOTokens(uint value, address sender) private isUnderPreIsoLimit(value) {\n', '       founderAddress.transfer(value.div(100).mul(founderPercent));\n', '       bountyAddress.transfer(value.div(100).mul(bountyPercent));\n', '       uint tokens = rate.mul(value).div(1 ether);\n', '       uint bonusTokens = 0;\n', '       uint bonusPercent = getPreIsoBonusPercent(value);\n', '       bonusTokens = tokens.mul(bonusPercent).div(100);\n', '       tokens += bonusTokens;\n', '       soldTokens += tokens;\n', '       token.transfer(sender, tokens);\n', '   }\n', '   function buyICOTokens(uint value, address sender) private isUnderIsoLimit(value) {\n', '       founderAddress.transfer(value.div(100).mul(founderPercent));\n', '       bountyAddress.transfer(value.div(100).mul(bountyPercent));\n', '       uint tokens = rate.mul(value).div(1 ether);\n', '       uint bonusTokens = 0;\n', '       uint bonusPercent = getIsoBonusPercent(value);\n', '       bonusTokens = tokens.mul(bonusPercent).div(100);\n', '       tokens += bonusTokens;\n', '       soldTokens += tokens;\n', '       token.transfer(sender, tokens);\n', '   }\n', '   function() external payable {\n', '       if (now >= preIsoStartDate && now < preIsoEndDate) {\n', '           buyPreICOTokens(msg.value, msg.sender);\n', '       } else if (now >= isoStartDate && now < isoEndDate) {\n', '           buyICOTokens(msg.value, msg.sender);\n', '       }\n', '   }\n', '}']