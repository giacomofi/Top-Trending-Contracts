['//\n', '// compiler: solcjs -o ./build/contracts --optimize --abi --bin <this file>\n', '//  version: 0.4.19+commit.c4cbbb05.Emscripten.clang\n', '//\n', 'pragma solidity ^0.4.19;\n', '\n', 'contract owned {\n', '  address public owner;\n', '  function owned() public { owner = msg.sender; }\n', '  function changeOwner( address newowner ) public onlyOwner {owner = newowner;}\n', '  function closedown() public onlyOwner {selfdestruct(owner);}\n', '  modifier onlyOwner {\n', '    if (msg.sender != owner) { revert(); }\n', '    _;\n', '  }\n', '}\n', '\n', '// token should be ERC20-compliant and implement these functions\n', 'interface ERC20 {\n', '  function transfer(address to, uint256 value) public;\n', '  function balanceOf( address owner ) public constant returns (uint);\n', '}\n', '\n', 'contract RTKICO is owned {\n', '\n', '  ERC20   public tokenSC;   // token this ICO is selling\n', '  address        treasury;  // [optional] where to direct incoming Ether\n', '  uint    public start;     // seconds since Jan 1 1970 GMT\n', '  uint    public duration;  // seconds\n', '  uint    public tokpereth; // price NOTE: attention to decimals on setup\n', '\n', '  function RTKICO( address _erc20,\n', '                   address _treasury,\n', '                   uint    _startSec,\n', '                   uint    _durationSec,\n', '                   uint    _tokpereth ) public {\n', '\n', '    require( isContract(_erc20) );\n', '    require( _tokpereth > 0 );\n', '\n', '    if (_treasury != address(0))\n', '      require( isContract(_treasury) );\n', '\n', '    tokenSC = ERC20( _erc20 );\n', '    treasury = _treasury;\n', '    start = _startSec;\n', '    duration = _durationSec;\n', '    tokpereth = _tokpereth;\n', '  }\n', '\n', '  function setTreasury( address treas ) public onlyOwner { treasury = treas; }\n', '  function setStart( uint newstart ) public onlyOwner { start = newstart; }\n', '  function setRate( uint rate ) public onlyOwner { tokpereth = rate; }\n', '  function setDuration( uint dur ) public onlyOwner { duration = dur; }\n', '\n', '  function() public payable {\n', '    if (now < start || now > (start + duration))\n', '      revert();\n', '\n', '    // Calculation:\n', '    //   amountinwei * tokpereth/weipereth * (bonus+100)/100\n', '    // = amountinwei * tokpereth/1e18 * (bonus+100)/100\n', '    // = msg.value * tokpereth/1e20 * (bonus+100)\n', '    uint qty =\n', '      multiply( divide( multiply( msg.value, tokpereth ),\n', '                        1e20 ),\n', '                (bonus()+100) );\n', '\n', '    if (qty > tokenSC.balanceOf(address(this)) || qty < 1)\n', '      revert();\n', '\n', '    tokenSC.transfer( msg.sender, qty );\n', '\n', '    if (treasury != address(0)) treasury.transfer( msg.value );\n', '  }\n', '\n', '  // unsold tokens can be claimed by owner after sale ends\n', '  function claimUnsold() public onlyOwner {\n', '    if ( now < (start + duration) )\n', '      revert();\n', '\n', '    tokenSC.transfer( owner, tokenSC.balanceOf(address(this)) );\n', '  }\n', '\n', '  function withdraw( uint amount ) public onlyOwner returns (bool) {\n', '    require (amount <= this.balance);\n', '    return owner.send( amount );\n', '  }\n', '\n', '  function bonus() internal constant returns(uint) {\n', '    uint elapsed = now - start;\n', '\n', '    if (elapsed < 1 weeks) return 20;\n', '    if (elapsed < 2 weeks) return 15;\n', '    if (elapsed < 4 weeks) return 10;\n', '    return 0;\n', '  }\n', '\n', '  function isContract( address _a ) constant private returns (bool) {\n', '    uint ecs;\n', '    assembly { ecs := extcodesize(_a) }\n', '    return ecs > 0;\n', '  }\n', '\n', '  // ref: github.com/OpenZeppelin/zeppelin-solidity/\n', '  //      blob/master/contracts/math/SafeMath.sol\n', '  function multiply(uint256 a, uint256 b) pure private returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function divide(uint256 a, uint256 b) pure private returns (uint256) {\n', '    return a / b;\n', '  }\n', '}']