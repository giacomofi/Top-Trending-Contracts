['pragma solidity ^0.4.15;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '  \n', '  function getOwner() view public returns (address){\n', '    return owner;\n', '  }\n', '  \n', '\n', '}\n', '\n', '\n', '\n', 'contract BitLoanex is Ownable {\n', '\n', '  using SafeMath for uint256;\n', '  \n', '  string public constant name = "Bitloanex";\n', '  string public constant symbol = "BTLX";\n', '  uint8 public constant decimals = 8;\n', '\n', '  uint256 public rate;\n', '  uint256 public constant CAP = 126000;\n', '  uint256 public constant START = 1514160000;\n', '  uint256 public DAYS = 30;\n', '  uint256 public days_interval = 4;\n', '  uint[9] public deadlines = [START, START.add(1* days_interval * 1 days), START.add(2* days_interval * 1 days), START.add(3* days_interval * 1 days), START.add(4* days_interval * 1 days), START.add(5* days_interval * 1 days), START.add(6* days_interval * 1 days), START.add(7* days_interval * 1 days), START.add(8* days_interval * 1 days)  ];\n', '  uint[9] public rates = [2000 ,1900, 1800, 1700, 1600, 1500, 1400, 1300, 1200];\n', '  bool public initialized = true;\n', '  uint256 public raisedAmount = 0;\n', '  uint256 public constant INITIAL_SUPPLY = 10000000000000000;\n', '  uint256 public totalSupply;\n', '  address[] public investors;\n', '\n', '  mapping(address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event BoughtTokens(address indexed to, uint256 value);\n', '  \n', '  function BitLoanex() public {\n', '    totalSupply = INITIAL_SUPPLY;\n', '    balances[msg.sender] = INITIAL_SUPPLY;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  modifier whenSaleActive() {\n', '  assert(isActive());\n', '  _;\n', '  }\n', '\n', '\n', '\n', '  function initialize(bool _val) public onlyOwner {\n', '      \n', '    initialized = _val;\n', '\n', '  }\n', '\n', '\n', '  function isActive() public constant returns (bool) {\n', '    return(\n', '      initialized == true &&\n', '      now >= START &&\n', '      now <= START.add(DAYS * 1 days) &&\n', '      goalReached() == false\n', '    );\n', '  }\n', '\n', '  function goalReached() private constant returns (bool) {\n', '    return (raisedAmount >= CAP * 1 ether);\n', '  }\n', '\n', '  function () public payable {\n', '\n', '    buyTokens();\n', '\n', '  }\n', '\n', '  function buyTokens() public payable {\n', '      \n', '    require(initialized && now <= START.add(DAYS * 1 days));\n', '    \n', '    uint256 weiAmount = msg.value;\n', '    uint256 tokens = weiAmount.mul(getRate());\n', '    \n', '    tokens = tokens.div(1 ether);\n', '    \n', '    BoughtTokens(msg.sender, tokens);\n', '\n', '    balances[msg.sender] = balances[msg.sender].add(tokens);\n', '    balances[owner] = balances[owner].sub(tokens);\n', '    totalSupply.sub(tokens);\n', '\n', '    raisedAmount = raisedAmount.add(msg.value);\n', '    \n', '    investors.push(msg.sender) -1;\n', '    //owner.transfer(msg.value);\n', '  }\n', '  \n', '  function getInvestors() view public returns (address[])\n', '  {\n', '      return investors;\n', '  }\n', '\n', '  function tokenAvailable() public constant returns (uint256){\n', '     return totalSupply;\n', '  }\n', '  \n', '  function setRate(uint256 _rate) public onlyOwner\n', '  {\n', '      rate = _rate;\n', '  }\n', '  \n', '  function setDays(uint256 _day) public onlyOwner\n', '  {\n', '      DAYS = _day;\n', '  }\n', '\n', '  function getRate() public constant returns (uint256){\n', '      \n', '      if(rate > 0) return rate;\n', '      \n', '      for(var i = 0; i < deadlines.length; i++)\n', '          if(now<deadlines[i])\n', '              return rates[i];\n', '      return rates[rates.length-1];//should never be returned, but to be sure to not divide by 0\n', '  }\n', '  \n', '  function destroy() public onlyOwner {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '\n', '}']