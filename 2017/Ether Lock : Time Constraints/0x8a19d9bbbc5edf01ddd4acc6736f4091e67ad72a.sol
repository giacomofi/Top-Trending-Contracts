['pragma solidity ^0.4.11;\n', '\n', 'contract SafeMath {\n', '\n', '    function safeMul(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a * b;\n', '        require(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeDiv(uint a, uint b) internal pure returns (uint) {\n', '        require(b > 0);\n', '        uint c = a / b;\n', '        require(a == b * c + a % b);\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint a, uint b) internal pure returns (uint) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a && c >= b);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract AlsToken {\n', '    function balanceOf(address _owner) public constant returns (uint256);\n', '    function transfer(address receiver, uint amount) public;\n', '}\n', '\n', 'contract Owned {\n', '\n', '    address internal owner;\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require (msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) external onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '\n', '    function getOwner() public constant returns (address currentOwner) {\n', '        return owner;\n', '    }\n', '}\n', '\n', 'contract AlsIco is Owned, SafeMath {\n', '\n', '    // Crowdsale start time in seconds since epoch.\n', '    // Equivalent to Wednesday, December 20th 2017, 3 pm London time.\n', '    uint256 public constant crowdsaleStartTime = 1513782000;\n', '\n', '    // Crowdsale end time in seconds since epoch.\n', '    // Equivalent to Tuesday, February 20th 2018, 3 pm London time.\n', '    uint256 public constant crowdsaleEndTime = 1519138800;\n', '\n', '    // One thousand ALS with 18 decimals [10 to the power of 21 (3 + 18) tokens].\n', '    uint256 private constant oneThousandAls = uint256(10) ** 21;\n', '\n', '    uint public amountRaised;\n', '    uint public tokensSold;\n', '    AlsToken public alsToken;\n', '\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '\n', '    function AlsIco() public {\n', '        alsToken = AlsToken(0xbCeC57361649E5dA917efa9F992FBCA0a2529350);\n', '    }\n', '\n', '    modifier onlyAfterStart() {\n', '        require(now >= crowdsaleStartTime);\n', '        _;\n', '    }\n', '\n', '    modifier onlyBeforeEnd() {\n', '        require(now <= crowdsaleEndTime);\n', '        _;\n', '    }\n', '\n', '    // Returns how many ALS are given in exchange for 1 ETH.\n', '    function getPrice() public constant onlyAfterStart onlyBeforeEnd returns (uint256) {\n', '        if (tokensSold < 1600 * oneThousandAls) {\n', '            // Firs 2% (equivalent to first 1.600.000 ALS) get 70% bonus (equivalent to 17000 ALS per 1 ETH).\n', '            return 17000;\n', '        } else if (tokensSold < 8000 * oneThousandAls) {\n', '            // Firs 10% (equivalent to first 8.000.000 ALS) get 30% bonus (equivalent to 13000 ALS per 1 ETH).\n', '            return 13000;\n', '        } else if (tokensSold < 16000 * oneThousandAls) {\n', '            // Firs 20% (equivalent to first 16.000.000 ALS) get 10% bonus (equivalent to 11000 ALS per 1 ETH).\n', '            return 11000;\n', '        } else if (tokensSold < 40000 * oneThousandAls) {\n', '            // Firs 50% (equivalent to first 40.000.000 ALS) get 5% bonus (equivalent to 10500 ALS per 1 ETH).\n', '            return 10500;\n', '        } else {\n', '            // The rest of the tokens (after 50%) will be sold without a bonus.\n', '            return 10000;\n', '        }\n', '    }\n', '\n', '    function () payable public onlyAfterStart onlyBeforeEnd {\n', '        uint256 availableTokens = alsToken.balanceOf(this);\n', '        require (availableTokens > 0);\n', '\n', '        uint256 etherAmount = msg.value;\n', '        require(etherAmount > 0);\n', '\n', '        uint256 price = getPrice();\n', '        uint256 tokenAmount = safeMul(etherAmount, price);\n', '\n', '        if (tokenAmount <= availableTokens) {\n', '            amountRaised = safeAdd(amountRaised, etherAmount);\n', '            tokensSold = safeAdd(tokensSold, tokenAmount);\n', '\n', '            alsToken.transfer(msg.sender, tokenAmount);\n', '            FundTransfer(msg.sender, etherAmount, true);\n', '        } else {\n', '            uint256 etherToSpend = safeDiv(availableTokens, price);\n', '            amountRaised = safeAdd(amountRaised, etherToSpend);\n', '            tokensSold = safeAdd(tokensSold, availableTokens);\n', '\n', '            alsToken.transfer(msg.sender, availableTokens);\n', '            FundTransfer(msg.sender, etherToSpend, true);\n', '\n', '            // Return the rest of the funds back to the caller.\n', '            uint256 amountToRefund = safeSub(etherAmount, etherToSpend);\n', '            msg.sender.transfer(amountToRefund);\n', '        }\n', '    }\n', '\n', '    function withdrawEther(uint _amount) external onlyOwner {\n', '        require(this.balance >= _amount);\n', '        owner.transfer(_amount);\n', '        FundTransfer(owner, _amount, false);\n', '    }\n', '}']