['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Mainsale {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  address public owner;\n', '  address public multisig;\n', '  uint256 public endTimestamp;\n', '  uint256 public totalRaised;\n', '  uint256 public constant hardCap = 16318 ether;\n', '  uint256 public constant MIN_CONTRIBUTION = 0.1 ether;\n', '  uint256 public constant MAX_CONTRIBUTION = 1000 ether;\n', '  uint256 public constant TWO_DAYS = 60 * 60 * 24 * 2;\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  modifier belowCap() {\n', '    require(totalRaised < hardCap);\n', '    _;\n', '  }\n', '\n', '  modifier withinTimeLimit() {\n', '    require(block.timestamp <= endTimestamp);\n', '    _;\n', '  }\n', '\n', '  function Mainsale(address _multisig, uint256 _endTimestamp) {\n', '    require (_multisig != 0 && _endTimestamp >= (block.timestamp + TWO_DAYS));\n', '    owner = msg.sender;\n', '    multisig = _multisig;\n', '    endTimestamp = _endTimestamp;\n', '  }\n', '  \n', '  function() payable belowCap withinTimeLimit {\n', '    require(msg.value >= MIN_CONTRIBUTION && msg.value <= MAX_CONTRIBUTION);\n', '    totalRaised = totalRaised.add(msg.value);\n', '    uint contribution = msg.value;\n', '    if (totalRaised > hardCap) {\n', '      uint refundAmount = totalRaised.sub(hardCap);\n', '      msg.sender.transfer(refundAmount);\n', '      contribution = contribution.sub(refundAmount);\n', '      refundAmount = 0;\n', '      totalRaised = hardCap;\n', '    }\n', '    multisig.transfer(contribution);\n', '  }\n', '\n', '  function withdrawStuck() onlyOwner {\n', '    multisig.transfer(this.balance);\n', '  }\n', '\n', '}']