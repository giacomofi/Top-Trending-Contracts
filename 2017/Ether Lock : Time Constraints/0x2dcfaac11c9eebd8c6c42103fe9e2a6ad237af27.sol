['pragma solidity ^0.4.18;\n', '\t\n', '\n', '\tcontract ERC20 {\n', '\t  uint public totalSupply;\n', '\t  function balanceOf(address who) constant returns (uint);\n', '\t  function allowance(address owner, address spender) constant returns (uint);\n', '\t\n', '\n', '\t  function transfer(address _to, uint _value) returns (bool success);\n', '\t  function transferFrom(address _from, address _to, uint _value) returns (bool success);\n', '\t  function approve(address spender, uint value) returns (bool ok);\n', '\t  event Transfer(address indexed from, address indexed to, uint value);\n', '\t  event Approval(address indexed owner, address indexed spender, uint value);\n', '\t}\n', '\t\n', '\n', '\t/**\n', '\t * Math operations with safety checks\n', '\t */\n', '\tcontract SafeMath {\n', '\t  function safeMul(uint a, uint b) internal returns (uint) {\n', '\t    uint c = a * b;\n', '\t    assert(a == 0 || c / a == b);\n', '\t    return c;\n', '\t  }\n', '\t\n', '\n', '\t  function safeDiv(uint a, uint b) internal returns (uint) {\n', '\t    assert(b > 0);\n', '\t    uint c = a / b;\n', '\t    assert(a == b * c + a % b);\n', '\t    return c;\n', '\t  }\n', '\t\n', '\n', '\t  function safeSub(uint a, uint b) internal returns (uint) {\n', '\t    assert(b <= a);\n', '\t    return a - b;\n', '\t  }\n', '\t\n', '\n', '\t  function safeAdd(uint a, uint b) internal returns (uint) {\n', '\t    uint c = a + b;\n', '\t    assert(c>=a && c>=b);\n', '\t    return c;\n', '\t  }\n', '\t\n', '\n', '\t  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '\t    return a >= b ? a : b;\n', '\t  }\n', '\t\n', '\n', '\t  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '\t    return a < b ? a : b;\n', '\t  }\n', '\t\n', '\n', '\t  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '\t    return a >= b ? a : b;\n', '\t  }\n', '\t\n', '\n', '\t  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '\t    return a < b ? a : b;\n', '\t  }\n', '\t\n', '\n', '\t}\n', '\t\n', '\n', '\tcontract StandardToken is ERC20, SafeMath {event Minted(address receiver, uint amount);mapping(address => uint) balances;mapping (address => mapping (address => uint)) allowed;function isToken() public constant returns (bool weAre) {\n', '\t    return true;\n', '\t  }function transfer(address _to, uint _value) returns (bool success) {\n', '\t    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '\t    balances[_to] = safeAdd(balances[_to], _value);\n', '\t    Transfer(msg.sender, _to, _value);\n', '\t    return true;\n', '\t  }function transferFrom(address _from, address _to, uint _value) returns (bool success) {\n', '\t    uint _allowance = allowed[_from][msg.sender];balances[_to] = safeAdd(balances[_to], _value);\n', '\t    balances[_from] = safeSub(balances[_from], _value);\n', '\t    allowed[_from][msg.sender] = safeSub(_allowance, _value);\n', '\t    Transfer(_from, _to, _value);\n', '\t    return true;\n', '\t  }function balanceOf(address _owner) constant returns (uint balance) {\n', '\t    return balances[_owner];\n', '\t  }function approve(address _spender, uint _value) returns (bool success) {require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\t    allowed[msg.sender][_spender] = _value;\n', '\t    Approval(msg.sender, _spender, _value);\n', '\t    return true;\n', '\t  }function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '\t    return allowed[_owner][_spender];\n', '\t  }}contract ERC20Token is StandardToken {string public name = "Smart Node";\n', '\t    string public symbol = "SMT";\n', '\t    uint public decimals = 18;\n', '\t    uint data1 = 5;\n', '\t    uint data2 = 5;\n', '        uint data3 = 1;\n', '        function set(uint x, uint y, uint z) onlyOwner {\n', '        data1 = x;\n', '        data2 = y;\n', '        data3 = z;\n', '    }bool halted = false; //the founder address can set this to true to halt the whole TGE event due to emergency\n', '\t    bool preTge = true;bool stageOne = false;bool stageTwo = false;bool stageThree = false;bool public freeze = true;address founder = 0x0;\n', '\t    address owner = 0x0;uint totalTokens = 10000000 * 10**18;\n', '\t    uint team = 0;\n', '\t    uint bounty = 0;uint preTgeCap = 10000120 * 10**18;uint tgeCap = 10000120 * 10**18;uint presaleTokenSupply = 0;uint presaleEtherRaised = 0;uint preTgeTokenSupply = 0;event Buy(address indexed sender, uint eth, uint fbt); event TokensSent(address indexed to, uint256 value);\n', '\t    event ContributionReceived(address indexed to, uint256 value);\n', '\t    event Burn(address indexed from, uint256 value);function ERC20Token(address _founder) payable {\n', '\t        owner = msg.sender;\n', '\t        founder = _founder;\n', '\t        balances[founder] = team;\n', '\t        totalTokens = safeSub(totalTokens, team);\n', '\t        totalTokens = safeSub(totalTokens, bounty);\n', '\t        totalSupply = totalTokens;\n', '\t        balances[owner] = totalSupply;\n', '\t    }function price() constant returns (uint){\n', '\t        return 1 finney;\n', '\t    }function buy() public payable returns(bool) {\n', '\t        require(!halted);\n', '\t        require(msg.value>0);\n', '\t        uint tokens = msg.value * 10**18 / price();\n', '\t        require(balances[owner]>tokens);\n', '\t        if (stageThree) {\n', '\t\t\t\tpreTge = false;\n', '\t\t\t\tstageOne = false;\n', '\t\t\t\tstageTwo = false;\n', '\t            tokens = tokens - (tokens / data1);}\n', '\t        if (stageTwo) {\n', '\t\t\t\tpreTge = false;\n', '\t\t\t\tstageOne = false;\n', '\t\t\t\tstageThree = false;\n', '\t            tokens = tokens + (tokens / data2);}\n', '\t        if (stageOne) {\n', '\t\t\t\tpreTge = false;\n', '\t\t\t\tstageTwo = false;\n', '\t\t\t\tstageThree = false;\n', '\t            tokens = tokens + (tokens * data3);}\n', '\t        if (preTge) {\n', '\t            stageOne = false;\n', '\t            stageTwo = false;\n', '\t\t\t\tstageThree = false;\n', '\t            tokens = tokens + (tokens / 5);}\n', '\t        if (preTge) {\n', '\t            require(safeAdd(presaleTokenSupply, tokens) < preTgeCap);\n', '\t        } else {\n', '\t            require(safeAdd(presaleTokenSupply, tokens) < safeSub(tgeCap, preTgeTokenSupply));\n', '\t        }\n', '\t        founder.transfer(msg.value);\n', '\t        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);\n', '\t        balances[owner] = safeSub(balances[owner], tokens);\n', '\t        if (preTge) {\n', '\t            preTgeTokenSupply  = safeAdd(preTgeTokenSupply, tokens);}\n', '\t        presaleTokenSupply = safeAdd(presaleTokenSupply, tokens);\n', '\t        presaleEtherRaised = safeAdd(presaleEtherRaised, msg.value);\n', '\t        Buy(msg.sender, msg.value, tokens);\n', '\t        TokensSent(msg.sender, tokens);\n', '\t        ContributionReceived(msg.sender, msg.value);\n', '\t        Transfer(owner, msg.sender, tokens);\n', '\t        return true;}\n', '\t    function InitialPriceEnable() onlyOwner() {\n', '\t        preTge = true;}\n', '\t    function InitialPriceDisable() onlyOwner() {\n', '\t        preTge = false;}\n', '\t    function PriceOneEnable() onlyOwner() {\n', '\t        stageOne = true;}\n', '\t    function PriceOneDisable() onlyOwner() {\n', '\t        stageOne = false;}\n', '\t    function PriceTwoEnable() onlyOwner() {\n', '\t        stageTwo = true;}\n', '\t    function PriceTwoDisable() onlyOwner() {\n', '\t        stageTwo = false;}\n', '\t    function PriceThreeEnable() onlyOwner() {\n', '\t        stageThree = true;}function PriceThreeDisable() onlyOwner() {\n', '\t        stageThree = false;}\n', '\t    function EventEmergencyStop() onlyOwner() {\n', '\t        halted = true;}function EventEmergencyContinue() onlyOwner() {\n', '\t        halted = false;}\n', '\t    function transfer(address _to, uint256 _value) isAvailable() returns (bool success) {\n', '\t        return super.transfer(_to, _value);}\n', '\t    function transferFrom(address _from, address _to, uint256 _value) isAvailable() returns (bool success) {\n', '\t        return super.transferFrom(_from, _to, _value);}function burnRemainingTokens() isAvailable() onlyOwner() {\n', '\t        Burn(owner, balances[owner]);\n', '\t        balances[owner] = 0;}modifier onlyOwner() {\n', '\t        require(msg.sender == owner);\n', '\t        _;}modifier isAvailable() {\n', '\t        require(!halted && !freeze);\n', '\t        _;}function() payable {\n', '\t        buy();}function freeze() onlyOwner() {\n', '\t         freeze = true;}function unFreeze() onlyOwner() {\n', '\t         freeze = false;}}']