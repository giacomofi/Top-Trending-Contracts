['/* Author: Victor Mezrin  victor@mezrin.com */\n', '\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMathInterface\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'contract SafeMathInterface {\n', '  function safeMul(uint256 a, uint256 b) internal pure returns (uint256);\n', '  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256);\n', '  function safeSub(uint256 a, uint256 b) internal pure returns (uint256);\n', '  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'contract SafeMath is SafeMathInterface {\n', '  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title CommonModifiersInterface\n', ' * @dev Base contract which contains common checks.\n', ' */\n', 'contract CommonModifiersInterface {\n', '\n', '  /**\n', '   * @dev Assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '   */\n', '  function isContract(address _targetAddress) internal constant returns (bool);\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the _targetAddress is a contract.\n', '   */\n', '  modifier onlyContractAddress(address _targetAddress) {\n', '    require(isContract(_targetAddress) == true);\n', '    _;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title CommonModifiers\n', ' * @dev Base contract which contains common checks.\n', ' */\n', 'contract CommonModifiers is CommonModifiersInterface {\n', '\n', '  /**\n', '   * @dev Assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '   */\n', '  function isContract(address _targetAddress) internal constant returns (bool) {\n', '    require (_targetAddress != address(0x0));\n', '\n', '    uint256 length;\n', '    assembly {\n', '      //retrieve the size of the code on target address, this needs assembly\n', '      length := extcodesize(_targetAddress)\n', '    }\n', '    return (length > 0);\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title AssetIDInterface\n', ' * @dev Interface of a contract that assigned to an asset (JNT, jUSD etc.)\n', ' * @dev Contracts for the same asset (like JNT, jUSD etc.) will have the same AssetID.\n', ' * @dev This will help to avoid misconfiguration of contracts\n', ' */\n', 'contract AssetIDInterface {\n', '  function getAssetID() public constant returns (string);\n', '  function getAssetIDHash() public constant returns (bytes32);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title AssetID\n', ' * @dev Base contract implementing AssetIDInterface\n', ' */\n', 'contract AssetID is AssetIDInterface {\n', '\n', '  /* Storage */\n', '\n', '  string assetID;\n', '\n', '\n', '  /* Constructor */\n', '\n', '  function AssetID(string _assetID) public {\n', '    require(bytes(_assetID).length > 0);\n', '\n', '    assetID = _assetID;\n', '  }\n', '\n', '\n', '  /* Getters */\n', '\n', '  function getAssetID() public constant returns (string) {\n', '    return assetID;\n', '  }\n', '\n', '  function getAssetIDHash() public constant returns (bytes32) {\n', '    return keccak256(assetID);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title OwnableInterface\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract OwnableInterface {\n', '\n', '  /**\n', '   * @dev The getter for "owner" contract variable\n', '   */\n', '  function getOwner() public constant returns (address);\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the current owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require (msg.sender == getOwner());\n', '    _;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable is OwnableInterface {\n', '\n', '  /* Storage */\n', '\n', '  address owner = address(0x0);\n', '  address proposedOwner = address(0x0);\n', '\n', '\n', '  /* Events */\n', '\n', '  event OwnerAssignedEvent(address indexed newowner);\n', '  event OwnershipOfferCreatedEvent(address indexed currentowner, address indexed proposedowner);\n', '  event OwnershipOfferAcceptedEvent(address indexed currentowner, address indexed proposedowner);\n', '  event OwnershipOfferCancelledEvent(address indexed currentowner, address indexed proposedowner);\n', '\n', '\n', '  /**\n', '   * @dev The constructor sets the initial `owner` to the passed account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '\n', '    OwnerAssignedEvent(owner);\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Old owner requests transfer ownership to the new owner.\n', '   * @param _proposedOwner The address to transfer ownership to.\n', '   */\n', '  function createOwnershipOffer(address _proposedOwner) external onlyOwner {\n', '    require (proposedOwner == address(0x0));\n', '    require (_proposedOwner != address(0x0));\n', '    require (_proposedOwner != address(this));\n', '\n', '    proposedOwner = _proposedOwner;\n', '\n', '    OwnershipOfferCreatedEvent(owner, _proposedOwner);\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the new owner to accept an ownership offer to contract control.\n', '   */\n', '  //noinspection UnprotectedFunction\n', '  function acceptOwnershipOffer() external {\n', '    require (proposedOwner != address(0x0));\n', '    require (msg.sender == proposedOwner);\n', '\n', '    address _oldOwner = owner;\n', '    owner = proposedOwner;\n', '    proposedOwner = address(0x0);\n', '\n', '    OwnerAssignedEvent(owner);\n', '    OwnershipOfferAcceptedEvent(_oldOwner, owner);\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Old owner cancels transfer ownership to the new owner.\n', '   */\n', '  function cancelOwnershipOffer() external {\n', '    require (proposedOwner != address(0x0));\n', '    require (msg.sender == owner || msg.sender == proposedOwner);\n', '\n', '    address _oldProposedOwner = proposedOwner;\n', '    proposedOwner = address(0x0);\n', '\n', '    OwnershipOfferCancelledEvent(owner, _oldProposedOwner);\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev The getter for "owner" contract variable\n', '   */\n', '  function getOwner() public constant returns (address) {\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '   * @dev The getter for "proposedOwner" contract variable\n', '   */\n', '  function getProposedOwner() public constant returns (address) {\n', '    return proposedOwner;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ManageableInterface\n', ' * @dev Contract that allows to grant permissions to any address\n', ' * @dev In real life we are no able to perform all actions with just one Ethereum address\n', ' * @dev because risks are too high.\n', ' * @dev Instead owner delegates rights to manage an contract to the different addresses and\n', ' * @dev stay able to revoke permissions at any time.\n', ' */\n', 'contract ManageableInterface {\n', '\n', '  /**\n', '   * @dev Function to check if the manager can perform the action or not\n', '   * @param _manager        address Manager`s address\n', '   * @param _permissionName string  Permission name\n', '   * @return True if manager is enabled and has been granted needed permission\n', '   */\n', '  function isManagerAllowed(address _manager, string _permissionName) public constant returns (bool);\n', '\n', '  /**\n', '   * @dev Modifier to use in derived contracts\n', '   */\n', '  modifier onlyAllowedManager(string _permissionName) {\n', '    require(isManagerAllowed(msg.sender, _permissionName) == true);\n', '    _;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract Manageable is OwnableInterface,\n', '                       ManageableInterface {\n', '\n', '  /* Storage */\n', '\n', '  mapping (address => bool) managerEnabled;  // hard switch for a manager - on/off\n', '  mapping (address => mapping (string => bool)) managerPermissions;  // detailed info about manager`s permissions\n', '\n', '\n', '  /* Events */\n', '\n', '  event ManagerEnabledEvent(address indexed manager);\n', '  event ManagerDisabledEvent(address indexed manager);\n', '  event ManagerPermissionGrantedEvent(address indexed manager, string permission);\n', '  event ManagerPermissionRevokedEvent(address indexed manager, string permission);\n', '\n', '\n', '  /* Configure contract */\n', '\n', '  /**\n', '   * @dev Function to add new manager\n', '   * @param _manager address New manager\n', '   */\n', '  function enableManager(address _manager) external onlyOwner onlyValidManagerAddress(_manager) {\n', '    require(managerEnabled[_manager] == false);\n', '\n', '    managerEnabled[_manager] = true;\n', '    ManagerEnabledEvent(_manager);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to remove existing manager\n', '   * @param _manager address Existing manager\n', '   */\n', '  function disableManager(address _manager) external onlyOwner onlyValidManagerAddress(_manager) {\n', '    require(managerEnabled[_manager] == true);\n', '\n', '    managerEnabled[_manager] = false;\n', '    ManagerDisabledEvent(_manager);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to grant new permission to the manager\n', '   * @param _manager        address Existing manager\n', '   * @param _permissionName string  Granted permission name\n', '   */\n', '  function grantManagerPermission(\n', '    address _manager, string _permissionName\n', '  )\n', '    external\n', '    onlyOwner\n', '    onlyValidManagerAddress(_manager)\n', '    onlyValidPermissionName(_permissionName)\n', '  {\n', '    require(managerPermissions[_manager][_permissionName] == false);\n', '\n', '    managerPermissions[_manager][_permissionName] = true;\n', '    ManagerPermissionGrantedEvent(_manager, _permissionName);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to revoke permission of the manager\n', '   * @param _manager        address Existing manager\n', '   * @param _permissionName string  Revoked permission name\n', '   */\n', '  function revokeManagerPermission(\n', '    address _manager, string _permissionName\n', '  )\n', '    external\n', '    onlyOwner\n', '    onlyValidManagerAddress(_manager)\n', '    onlyValidPermissionName(_permissionName)\n', '  {\n', '    require(managerPermissions[_manager][_permissionName] == true);\n', '\n', '    managerPermissions[_manager][_permissionName] = false;\n', '    ManagerPermissionRevokedEvent(_manager, _permissionName);\n', '  }\n', '\n', '\n', '  /* Getters */\n', '\n', '  /**\n', '   * @dev Function to check manager status\n', '   * @param _manager address Manager`s address\n', '   * @return True if manager is enabled\n', '   */\n', '  function isManagerEnabled(\n', '    address _manager\n', '  )\n', '    public\n', '    constant\n', '    onlyValidManagerAddress(_manager)\n', '    returns (bool)\n', '  {\n', '    return managerEnabled[_manager];\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check permissions of a manager\n', '   * @param _manager        address Manager`s address\n', '   * @param _permissionName string  Permission name\n', '   * @return True if manager has been granted needed permission\n', '   */\n', '  function isPermissionGranted(\n', '    address _manager, string _permissionName\n', '  )\n', '    public\n', '    constant\n', '    onlyValidManagerAddress(_manager)\n', '    onlyValidPermissionName(_permissionName)\n', '    returns (bool)\n', '  {\n', '    return managerPermissions[_manager][_permissionName];\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check if the manager can perform the action or not\n', '   * @param _manager        address Manager`s address\n', '   * @param _permissionName string  Permission name\n', '   * @return True if manager is enabled and has been granted needed permission\n', '   */\n', '  function isManagerAllowed(\n', '    address _manager, string _permissionName\n', '  )\n', '    public\n', '    constant\n', '    onlyValidManagerAddress(_manager)\n', '    onlyValidPermissionName(_permissionName)\n', '    returns (bool)\n', '  {\n', '    return (managerEnabled[_manager] && managerPermissions[_manager][_permissionName]);\n', '  }\n', '\n', '\n', '  /* Helpers */\n', '\n', '  /**\n', '   * @dev Modifier to check manager address\n', '   */\n', '  modifier onlyValidManagerAddress(address _manager) {\n', '    require(_manager != address(0x0));\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to check name of manager permission\n', '   */\n', '  modifier onlyValidPermissionName(string _permissionName) {\n', '    require(bytes(_permissionName).length != 0);\n', '    _;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title PausableInterface\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', " * @dev Based on zeppelin's Pausable, but integrated with Manageable\n", ' * @dev Contract is in paused state by default and should be explicitly unlocked\n', ' */\n', 'contract PausableInterface {\n', '\n', '  /**\n', '   * Events\n', '   */\n', '\n', '  event PauseEvent();\n', '  event UnpauseEvent();\n', '\n', '\n', '  /**\n', '   * @dev called by the manager to pause, triggers stopped state\n', '   */\n', '  function pauseContract() public;\n', '\n', '  /**\n', '   * @dev called by the manager to unpause, returns to normal state\n', '   */\n', '  function unpauseContract() public;\n', '\n', '  /**\n', '   * @dev The getter for "paused" contract variable\n', '   */\n', '  function getPaused() public constant returns (bool);\n', '\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenContractNotPaused() {\n', '    require(getPaused() == false);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenContractPaused {\n', '    require(getPaused() == true);\n', '    _;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', " * @dev Based on zeppelin's Pausable, but integrated with Manageable\n", ' * @dev Contract is in paused state by default and should be explicitly unlocked\n', ' */\n', 'contract Pausable is ManageableInterface,\n', '                     PausableInterface {\n', '\n', '  /**\n', '   * Storage\n', '   */\n', '\n', '  bool paused = true;\n', '\n', '\n', '  /**\n', '   * @dev called by the manager to pause, triggers stopped state\n', '   */\n', "  function pauseContract() public onlyAllowedManager('pause_contract') whenContractNotPaused {\n", '    paused = true;\n', '    PauseEvent();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the manager to unpause, returns to normal state\n', '   */\n', "  function unpauseContract() public onlyAllowedManager('unpause_contract') whenContractPaused {\n", '    paused = false;\n', '    UnpauseEvent();\n', '  }\n', '\n', '  /**\n', '   * @dev The getter for "paused" contract variable\n', '   */\n', '  function getPaused() public constant returns (bool) {\n', '    return paused;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title BytecodeExecutorInterface interface\n', ' * @dev Implementation of a contract that execute any bytecode on behalf of the contract\n', ' * @dev Last resort for the immutable and not-replaceable contract :)\n', ' */\n', 'contract BytecodeExecutorInterface {\n', '\n', '  /* Events */\n', '\n', '  event CallExecutedEvent(address indexed target,\n', '                          uint256 suppliedGas,\n', '                          uint256 ethValue,\n', '                          bytes32 transactionBytecodeHash);\n', '  event DelegatecallExecutedEvent(address indexed target,\n', '                                  uint256 suppliedGas,\n', '                                  bytes32 transactionBytecodeHash);\n', '\n', '\n', '  /* Functions */\n', '\n', '  function executeCall(address _target, uint256 _suppliedGas, uint256 _ethValue, bytes _transactionBytecode) external;\n', '  function executeDelegatecall(address _target, uint256 _suppliedGas, bytes _transactionBytecode) external;\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title BytecodeExecutor\n', ' * @dev Implementation of a contract that execute any bytecode on behalf of the contract\n', ' * @dev Last resort for the immutable and not-replaceable contract :)\n', ' */\n', 'contract BytecodeExecutor is ManageableInterface,\n', '                             BytecodeExecutorInterface {\n', '\n', '  /* Storage */\n', '\n', '  bool underExecution = false;\n', '\n', '\n', '  /* BytecodeExecutorInterface */\n', '\n', '  function executeCall(\n', '    address _target,\n', '    uint256 _suppliedGas,\n', '    uint256 _ethValue,\n', '    bytes _transactionBytecode\n', '  )\n', '    external\n', "    onlyAllowedManager('execute_call')\n", '  {\n', '    require(underExecution == false);\n', '\n', '    underExecution = true; // Avoid recursive calling\n', '    _target.call.gas(_suppliedGas).value(_ethValue)(_transactionBytecode);\n', '    underExecution = false;\n', '\n', '    CallExecutedEvent(_target, _suppliedGas, _ethValue, keccak256(_transactionBytecode));\n', '  }\n', '\n', '  function executeDelegatecall(\n', '    address _target,\n', '    uint256 _suppliedGas,\n', '    bytes _transactionBytecode\n', '  )\n', '    external\n', "    onlyAllowedManager('execute_delegatecall')\n", '  {\n', '    require(underExecution == false);\n', '\n', '    underExecution = true; // Avoid recursive calling\n', '    _target.delegatecall.gas(_suppliedGas)(_transactionBytecode);\n', '    underExecution = false;\n', '\n', '    DelegatecallExecutedEvent(_target, _suppliedGas, keccak256(_transactionBytecode));\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title CrydrStorageBaseInterface interface\n', ' * @dev Interface of a contract that manages balance of an CryDR\n', ' */\n', 'contract CrydrStorageBaseInterface {\n', '\n', '  /* Events */\n', '\n', '  event CrydrControllerChangedEvent(address indexed crydrcontroller);\n', '\n', '\n', '  /* Configuration */\n', '\n', '  function setCrydrController(address _newController) public;\n', '  function getCrydrController() public constant returns (address);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title CrydrStorageBase\n', ' */\n', 'contract CrydrStorageBase is CommonModifiersInterface,\n', '                             AssetIDInterface,\n', '                             ManageableInterface,\n', '                             PausableInterface,\n', '                             CrydrStorageBaseInterface {\n', '\n', '  /* Storage */\n', '\n', '  address crydrController = address(0x0);\n', '\n', '\n', '  /* CrydrStorageBaseInterface */\n', '\n', '  /* Configuration */\n', '\n', '  function setCrydrController(\n', '    address _crydrController\n', '  )\n', '    public\n', '    whenContractPaused\n', '    onlyContractAddress(_crydrController)\n', "    onlyAllowedManager('set_crydr_controller')\n", '  {\n', '    require(_crydrController != address(crydrController));\n', '    require(_crydrController != address(this));\n', '\n', '    crydrController = _crydrController;\n', '    CrydrControllerChangedEvent(_crydrController);\n', '  }\n', '\n', '  function getCrydrController() public constant returns (address) {\n', '    return address(crydrController);\n', '  }\n', '\n', '\n', '  /* PausableInterface */\n', '\n', '  /**\n', '   * @dev Override method to ensure that contract properly configured before it is unpaused\n', '   */\n', '  function unpauseContract() public {\n', '    require(isContract(crydrController) == true);\n', '    require(getAssetIDHash() == AssetIDInterface(crydrController).getAssetIDHash());\n', '\n', '    super.unpauseContract();\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title CrydrStorageBlocksInterface interface\n', ' * @dev Interface of a contract that manages balance of an CryDR\n', ' */\n', 'contract CrydrStorageBlocksInterface {\n', '\n', '  /* Events */\n', '\n', '  event AccountBlockedEvent(address indexed account);\n', '  event AccountUnblockedEvent(address indexed account);\n', '  event AccountFundsBlockedEvent(address indexed account, uint256 value);\n', '  event AccountFundsUnblockedEvent(address indexed account, uint256 value);\n', '\n', '\n', '  /* Low-level change of blocks and getters */\n', '\n', '  function blockAccount(address _account) public;\n', '  function unblockAccount(address _account) public;\n', '  function getAccountBlocks(address _account) public constant returns (uint256);\n', '\n', '  function blockAccountFunds(address _account, uint256 _value) public;\n', '  function unblockAccountFunds(address _account, uint256 _value) public;\n', '  function getAccountBlockedFunds(address _account) public constant returns (uint256);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title CrydrStorageBlocks\n', ' */\n', 'contract CrydrStorageBlocks is SafeMathInterface,\n', '                               PausableInterface,\n', '                               CrydrStorageBaseInterface,\n', '                               CrydrStorageBlocksInterface {\n', '\n', '  /* Storage */\n', '\n', '  mapping (address => uint256) accountBlocks;\n', '  mapping (address => uint256) accountBlockedFunds;\n', '\n', '\n', '  /* Constructor */\n', '\n', '  function CrydrStorageBlocks() public {\n', '    accountBlocks[0x0] = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n', '  }\n', '\n', '\n', '  /* Low-level change of blocks and getters */\n', '\n', '  function blockAccount(\n', '    address _account\n', '  )\n', '    public\n', '  {\n', '    require(msg.sender == getCrydrController());\n', '\n', '    require(_account != address(0x0));\n', '\n', '    accountBlocks[_account] = safeAdd(accountBlocks[_account], 1);\n', '    AccountBlockedEvent(_account);\n', '  }\n', '\n', '  function unblockAccount(\n', '    address _account\n', '  )\n', '    public\n', '  {\n', '    require(msg.sender == getCrydrController());\n', '\n', '    require(_account != address(0x0));\n', '\n', '    accountBlocks[_account] = safeSub(accountBlocks[_account], 1);\n', '    AccountUnblockedEvent(_account);\n', '  }\n', '\n', '  function getAccountBlocks(\n', '    address _account\n', '  )\n', '    public\n', '    constant\n', '    returns (uint256)\n', '  {\n', '    require(_account != address(0x0));\n', '\n', '    return accountBlocks[_account];\n', '  }\n', '\n', '  function blockAccountFunds(\n', '    address _account,\n', '    uint256 _value\n', '  )\n', '    public\n', '  {\n', '    require(msg.sender == getCrydrController());\n', '\n', '    require(_account != address(0x0));\n', '    require(_value > 0);\n', '\n', '    accountBlockedFunds[_account] = safeAdd(accountBlockedFunds[_account], _value);\n', '    AccountFundsBlockedEvent(_account, _value);\n', '  }\n', '\n', '  function unblockAccountFunds(\n', '    address _account,\n', '    uint256 _value\n', '  )\n', '    public\n', '  {\n', '    require(msg.sender == getCrydrController());\n', '\n', '    require(_account != address(0x0));\n', '    require(_value > 0);\n', '\n', '    accountBlockedFunds[_account] = safeSub(accountBlockedFunds[_account], _value);\n', '    AccountFundsUnblockedEvent(_account, _value);\n', '  }\n', '\n', '  function getAccountBlockedFunds(\n', '    address _account\n', '  )\n', '    public\n', '    constant\n', '    returns (uint256)\n', '  {\n', '    require(_account != address(0x0));\n', '\n', '    return accountBlockedFunds[_account];\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title CrydrStorageBalanceInterface interface\n', ' * @dev Interface of a contract that manages balance of an CryDR\n', ' */\n', 'contract CrydrStorageBalanceInterface {\n', '\n', '  /* Events */\n', '\n', '  event AccountBalanceIncreasedEvent(address indexed account, uint256 value);\n', '  event AccountBalanceDecreasedEvent(address indexed account, uint256 value);\n', '\n', '\n', '  /* Low-level change of balance. Implied that totalSupply kept in sync. */\n', '\n', '  function increaseBalance(address _account, uint256 _value) public;\n', '  function decreaseBalance(address _account, uint256 _value) public;\n', '  function getBalance(address _account) public constant returns (uint256);\n', '  function getTotalSupply() public constant returns (uint256);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title CrydrStorageBalance\n', ' */\n', 'contract CrydrStorageBalance is SafeMathInterface,\n', '                                PausableInterface,\n', '                                CrydrStorageBaseInterface,\n', '                                CrydrStorageBalanceInterface {\n', '\n', '  /* Storage */\n', '\n', '  mapping (address => uint256) balances;\n', '  uint256 totalSupply = 0;\n', '\n', '\n', '  /* Low-level change of balance and getters. Implied that totalSupply kept in sync. */\n', '\n', '  function increaseBalance(\n', '    address _account,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenContractNotPaused\n', '  {\n', '    require(msg.sender == getCrydrController());\n', '\n', '    require(_account != address(0x0));\n', '    require(_value > 0);\n', '\n', '    balances[_account] = safeAdd(balances[_account], _value);\n', '    totalSupply = safeAdd(totalSupply, _value);\n', '    AccountBalanceIncreasedEvent(_account, _value);\n', '  }\n', '\n', '  function decreaseBalance(\n', '    address _account,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenContractNotPaused\n', '  {\n', '    require(msg.sender == getCrydrController());\n', '\n', '    require(_account != address(0x0));\n', '    require(_value > 0);\n', '\n', '    balances[_account] = safeSub(balances[_account], _value);\n', '    totalSupply = safeSub(totalSupply, _value);\n', '    AccountBalanceDecreasedEvent(_account, _value);\n', '  }\n', '\n', '  function getBalance(address _account) public constant returns (uint256) {\n', '    require(_account != address(0x0));\n', '\n', '    return balances[_account];\n', '  }\n', '\n', '  function getTotalSupply() public constant returns (uint256) {\n', '    return totalSupply;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title CrydrStorageAllowanceInterface interface\n', ' * @dev Interface of a contract that manages balance of an CryDR\n', ' */\n', 'contract CrydrStorageAllowanceInterface {\n', '\n', '  /* Events */\n', '\n', '  event AccountAllowanceIncreasedEvent(address indexed owner, address indexed spender, uint256 value);\n', '  event AccountAllowanceDecreasedEvent(address indexed owner, address indexed spender, uint256 value);\n', '\n', '\n', '  /* Low-level change of allowance */\n', '\n', '  function increaseAllowance(address _owner, address _spender, uint256 _value) public;\n', '  function decreaseAllowance(address _owner, address _spender, uint256 _value) public;\n', '  function getAllowance(address _owner, address _spender) public constant returns (uint256);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title CrydrStorageAllowance\n', ' */\n', 'contract CrydrStorageAllowance is SafeMathInterface,\n', '                                  PausableInterface,\n', '                                  CrydrStorageBaseInterface,\n', '                                  CrydrStorageAllowanceInterface {\n', '\n', '  /* Storage */\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /* Low-level change of allowance and getters */\n', '\n', '  function increaseAllowance(\n', '    address _owner,\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenContractNotPaused\n', '  {\n', '    require(msg.sender == getCrydrController());\n', '\n', '    require(_owner != address(0x0));\n', '    require(_spender != address(0x0));\n', '    require(_owner != _spender);\n', '    require(_value > 0);\n', '\n', '    allowed[_owner][_spender] = safeAdd(allowed[_owner][_spender], _value);\n', '    AccountAllowanceIncreasedEvent(_owner, _spender, _value);\n', '  }\n', '\n', '  function decreaseAllowance(\n', '    address _owner,\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenContractNotPaused\n', '  {\n', '    require(msg.sender == getCrydrController());\n', '\n', '    require(_owner != address(0x0));\n', '    require(_spender != address(0x0));\n', '    require(_owner != _spender);\n', '    require(_value > 0);\n', '\n', '    allowed[_owner][_spender] = safeSub(allowed[_owner][_spender], _value);\n', '    AccountAllowanceDecreasedEvent(_owner, _spender, _value);\n', '  }\n', '\n', '  function getAllowance(\n', '    address _owner,\n', '    address _spender\n', '  )\n', '    public\n', '    constant\n', '    returns (uint256)\n', '  {\n', '    require(_owner != address(0x0));\n', '    require(_spender != address(0x0));\n', '    require(_owner != _spender);\n', '\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title CrydrStorageERC20Interface interface\n', ' * @dev Interface of a contract that manages balance of an CryDR and have optimization for ERC20 controllers\n', ' */\n', 'contract CrydrStorageERC20Interface {\n', '\n', '  /* Events */\n', '\n', '  event CrydrTransferredEvent(address indexed from, address indexed to, uint256 value);\n', '  event CrydrTransferredFromEvent(address indexed spender, address indexed from, address indexed to, uint256 value);\n', '  event CrydrSpendingApprovedEvent(address indexed owner, address indexed spender, uint256 value);\n', '\n', '\n', '  /* ERC20 optimization. _msgsender - account that invoked CrydrView */\n', '\n', '  function transfer(address _msgsender, address _to, uint256 _value) public;\n', '  function transferFrom(address _msgsender, address _from, address _to, uint256 _value) public;\n', '  function approve(address _msgsender, address _spender, uint256 _value) public;\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title CrydrStorageERC20\n', ' */\n', 'contract CrydrStorageERC20 is SafeMathInterface,\n', '                              PausableInterface,\n', '                              CrydrStorageBaseInterface,\n', '                              CrydrStorageBalanceInterface,\n', '                              CrydrStorageAllowanceInterface,\n', '                              CrydrStorageBlocksInterface,\n', '                              CrydrStorageERC20Interface {\n', '\n', '  function transfer(\n', '    address _msgsender,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenContractNotPaused\n', '  {\n', '    require(msg.sender == getCrydrController());\n', '\n', '    require(_msgsender != _to);\n', '    require(getAccountBlocks(_msgsender) == 0);\n', '    require(safeSub(getBalance(_msgsender), _value) >= getAccountBlockedFunds(_msgsender));\n', '\n', '    decreaseBalance(_msgsender, _value);\n', '    increaseBalance(_to, _value);\n', '    CrydrTransferredEvent(_msgsender, _to, _value);\n', '  }\n', '\n', '  function transferFrom(\n', '    address _msgsender,\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenContractNotPaused\n', '  {\n', '    require(msg.sender == getCrydrController());\n', '\n', '    require(getAccountBlocks(_msgsender) == 0);\n', '    require(getAccountBlocks(_from) == 0);\n', '    require(safeSub(getBalance(_from), _value) >= getAccountBlockedFunds(_from));\n', '    require(_from != _to);\n', '\n', '    decreaseAllowance(_from, _msgsender, _value);\n', '    decreaseBalance(_from, _value);\n', '    increaseBalance(_to, _value);\n', '    CrydrTransferredFromEvent(_msgsender, _from, _to, _value);\n', '  }\n', '\n', '  function approve(\n', '    address _msgsender,\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenContractNotPaused\n', '  {\n', '    require(msg.sender == getCrydrController());\n', '\n', '    require(getAccountBlocks(_msgsender) == 0);\n', '    require(getAccountBlocks(_spender) == 0);\n', '\n', '    uint256 currentAllowance = getAllowance(_msgsender, _spender);\n', '    require(currentAllowance != _value);\n', '    if (currentAllowance > _value) {\n', '      decreaseAllowance(_msgsender, _spender, safeSub(currentAllowance, _value));\n', '    } else {\n', '      increaseAllowance(_msgsender, _spender, safeSub(_value, currentAllowance));\n', '    }\n', '\n', '    CrydrSpendingApprovedEvent(_msgsender, _spender, _value);\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title JCashCrydrStorage\n', ' * @dev Implementation of a contract that manages data of an CryDR\n', ' */\n', 'contract JCashCrydrStorage is SafeMath,\n', '                              CommonModifiers,\n', '                              AssetID,\n', '                              Ownable,\n', '                              Manageable,\n', '                              Pausable,\n', '                              BytecodeExecutor,\n', '                              CrydrStorageBase,\n', '                              CrydrStorageBalance,\n', '                              CrydrStorageAllowance,\n', '                              CrydrStorageBlocks,\n', '                              CrydrStorageERC20 {\n', '\n', '  /* Constructor */\n', '\n', '  function JCashCrydrStorage(string _assetID) AssetID(_assetID) public { }\n', '}\n', '\n', '\n', '\n', 'contract JNTStorage is JCashCrydrStorage {\n', "  function JNTStorage() JCashCrydrStorage('JNT') public {}\n", '}']