['/**\n', ' * @First Smart Airdrop eGAS\n', ' * @http://ethgas.stream\n', ' * @egas@ethgas.stream\n', ' */\n', '\n', 'pragma solidity ^0.4.16;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', ' library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Owned {\n', '    // The address of the account of the current owner\n', '    address public owner;\n', '\n', '    // The publiser is the inital owner\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * Access is restricted to the current owner\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Transfer ownership to `_newOwner`\n', '     *\n', '     * @param _newOwner The address of the account that will become the new owner\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', 'contract EGAS is Owned {\n', '    using SafeMath for uint256;\n', '    string public symbol = "EGAS";\n', '    string public name = "ETHGAS";\n', '    uint8 public constant decimals = 8;\n', '    uint256 _initialSupply = 100000000000000;\n', '    uint256 _totalSupply = 0;\n', '\tuint256 _maxTotalSupply = 1279200000000000;\n', '\tuint256 _dropReward = 26000000000; //260 eGAS - per entry with 30% bonus to start\n', '\tuint256 _maxDropReward = 1300000000000; //13000 eGAS - per block 10min with 30% bonus to start - 50 entry max\n', '\tuint256 _rewardBonusTimePeriod = 86400; //1 day each bonus stage\n', '\tuint256 _nextRewardBonus = now + _rewardBonusTimePeriod;\n', '\tuint256 _rewardTimePeriod = 600; //10 minutes\n', '\tuint256 _rewardStart = now;\n', '\tuint256 _rewardEnd = now + _rewardTimePeriod;\n', '\tuint256 _currentAirdropped = 0;\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', ' \n', '    mapping(address => uint256) balances;\n', ' \n', '    mapping(address => mapping (address => uint256)) allowed;\n', '    \n', '    function OwnerReward() public {\n', '    balances[owner] = _initialSupply;\n', '    transfer(owner, balances[owner]);\n', '    }\n', ' \n', '    function withdraw() public onlyOwner {\n', '        owner.transfer(this.balance);\n', '    }\n', ' \n', '    function totalSupply() constant returns (uint256) {        \n', '\t\treturn _totalSupply + _initialSupply;\n', '    }\n', '    \n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', ' \n', '    function transfer(address _to, uint256 _amount) returns (bool success) {\n', '        if (balances[msg.sender] >= _amount \n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', ' \n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) returns (bool success) {\n', '        if (balances[_from] >= _amount\n', '            && allowed[_from][msg.sender] >= _amount\n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[_from] -= _amount;\n', '            allowed[_from][msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', ' \n', '    function approve(address _spender, uint256 _amount) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', ' \n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\t\n', '\tfunction SmartAirdrop() payable returns (bool success)\n', '\t{\n', '\t\tif (now < _rewardEnd && _currentAirdropped >= _maxDropReward)\n', '\t\t\trevert();\n', '\t\telse if (now >= _rewardEnd)\n', '\t\t{\n', '\t\t\t_rewardStart = now;\n', '\t\t\t_rewardEnd = now + _rewardTimePeriod;\n', '\t\t\t_currentAirdropped = 0;\n', '\t\t}\n', '\t\n', '\t\tif (now >= _nextRewardBonus)\n', '\t\t{\n', '\t\t\t_nextRewardBonus = now + _rewardBonusTimePeriod;\n', '\t\t\t_dropReward = _dropReward - 1000000000;\n', '\t\t\t_maxDropReward = _maxDropReward - 50000000000;\n', '\t\t\t_currentAirdropped = 0;\n', '\t\t\t_rewardStart = now;\n', '\t\t\t_rewardEnd = now + _rewardTimePeriod;\n', '\t\t}\t\n', '\t\t\n', '\t\tif ((_currentAirdropped < _maxDropReward) && (_totalSupply < _maxTotalSupply))\n', '\t\t{\n', '\t\t\tbalances[msg.sender] += _dropReward;\n', '\t\t\t_currentAirdropped += _dropReward;\n', '\t\t\t_totalSupply += _dropReward;\n', '\t\t\tTransfer(this, msg.sender, _dropReward);\n', '\t\t\treturn true;\n', '\t\t}\t\t\t\t\n', '\t\treturn false;\n', '\t}\n', '\t\n', '\tfunction MaxTotalSupply() constant returns(uint256)\n', '\t{\n', '\t\treturn _maxTotalSupply;\n', '\t}\n', '\t\n', '\tfunction DropReward() constant returns(uint256)\n', '\t{\n', '\t\treturn _dropReward;\n', '\t}\n', '\t\n', '\tfunction MaxDropReward() constant returns(uint256)\n', '\t{\n', '\t\treturn _maxDropReward;\n', '\t}\n', '\t\n', '\tfunction RewardBonusTimePeriod() constant returns(uint256)\n', '\t{\n', '\t\treturn _rewardBonusTimePeriod;\n', '\t}\n', '\t\n', '\tfunction NextRewardBonus() constant returns(uint256)\n', '\t{\n', '\t\treturn _nextRewardBonus;\n', '\t}\n', '\t\n', '\tfunction RewardTimePeriod() constant returns(uint256)\n', '\t{\n', '\t\treturn _rewardTimePeriod;\n', '\t}\n', '\t\n', '\tfunction RewardStart() constant returns(uint256)\n', '\t{\n', '\t\treturn _rewardStart;\n', '\t}\n', '\t\n', '\tfunction RewardEnd() constant returns(uint256)\n', '\t{\n', '\t\treturn _rewardEnd;\n', '\t}\n', '\t\n', '\tfunction CurrentAirdropped() constant returns(uint256)\n', '\t{\n', '\t\treturn _currentAirdropped;\n', '\t}\n', '\t\n', '\tfunction TimeNow() constant returns(uint256)\n', '\t{\n', '\t\treturn now;\n', '\t}\n', '}']