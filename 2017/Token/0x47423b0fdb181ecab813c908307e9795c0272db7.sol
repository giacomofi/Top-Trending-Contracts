['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '    \n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/*\n', ' * Ownable\n', ' * Base contract with an owner.\n', ' * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        if (msg.sender != owner) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) internal onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/*\n', '  Copyright 2017 ZeroEx Intl.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', '/**\n', ' * @title Unlimited Allowance Token\n', ' * @dev Unlimited allowance for exchange transfers. Modfied the base zeroEX code with latest compile features\n', ' * @author Dinesh\n', ' */\n', 'contract UnlimitedAllowanceToken is StandardToken {\n', '    \n', '    //  MAX_UINT represents an unlimited allowance\n', '    uint256 constant MAX_UINT = 2**256 - 1;\n', '    \n', '    /**\n', '     * @dev ERC20 transferFrom, modified such that an allowance of MAX_UINT represents an unlimited allowance.\n', '     * @param _from Address to transfer from\n', '     * @param _to Address to transfer to\n', '     * @param _value Amount to transfer\n', '     * @return Success of transfer\n', '     */ \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        uint allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value);\n', '        require(allowance >= _value);\n', '        require(balances[_to].add(_value) >= balances[_to]);\n', '        \n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        if (allowance < MAX_UINT) {\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        }  \n', '        Transfer(_from, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Tokenized Ether\n', ' * @dev ERC20 tokenization for Ether to allow exchange transfer and smoother handling of ether.\n', ' *      Modified the base zerox contract to use latest language features and made it more secure\n', ' *      and fault tolerant\n', ' * @author Dinesh\n', ' */\n', 'contract EtherToken is UnlimitedAllowanceToken, Ownable{\n', '    using SafeMath for uint256; \n', '    \n', '    string constant public name = "Ether Token";\n', '    string constant public symbol = "WXETH";\n', '    uint256 constant public decimals = 18; \n', '    \n', '    // triggered when the total supply is increased\n', '    event Issuance(uint256 _amount);\n', '    \n', '    // triggered when the total supply is decreased\n', '    event Destruction(uint256 _amount);\n', '    \n', '    // in case of emergency, block all transactions\n', '    bool public enabled;\n', '    \n', '    // In case emergencies, all the funds will be moved to a safety Wallet. Normally Owner of the contract\n', '    address public safetyWallet; \n', '    \n', '    /** \n', '     * @dev constructor\n', '     */\n', '    function EtherToken() public {\n', '        enabled = true;\n', '        safetyWallet = msg.sender;\n', '    }\n', '    \n', '    /**\n', '     * @dev function to enable/disable contract operations\n', '     * @param _disableTx tell whethere the tx needs to be blocked or allowed\n', '     */\n', '    function blockTx(bool _disableTx) public onlyOwner { \n', '        enabled = !_disableTx;\n', '    }\n', '    \n', '    /**\n', '     * @dev fucntion only executes if there is an emergency and only contract owner can do it \n', "     *      CAUTION: This moves all the funds in the contract to owner's Wallet and to be called\n", '     *      most extreme cases only\n', '     */\n', '    function moveToSafetyWallet() public onlyOwner {\n', '        require(!enabled); \n', '        require(totalSupply > 0);\n', '        require(safetyWallet != 0x0);\n', '        \n', '        //Empty Total Supply\n', '        uint256 _amount = totalSupply;\n', '        totalSupply = totalSupply.sub(totalSupply); \n', '        \n', '        //Fire the events\n', '        Transfer(safetyWallet, this, totalSupply);\n', '        Destruction(totalSupply);\n', '        \n', '        // send the amount to the target account\n', '        safetyWallet.transfer(_amount);  \n', '    }\n', '    \n', '    /** \n', '     * @dev fallback function can be used to get ether tokens foe ether\n', '     */\n', '    function () public payable {\n', '        require(enabled);\n', '        deposit(msg.sender);\n', '    }\n', '    \n', '    /**\n', '     * @dev function Buys tokens with Ether, exchanging them 1:1. Simliar to a Deposit function\n', '     * @param beneficiary is the senders account\n', '     */\n', '    function deposit(address beneficiary) public payable {\n', '        require(enabled);\n', '        require(beneficiary != 0x0);  \n', '        require(msg.value != 0);  \n', '        \n', '        balances[beneficiary] = balances[beneficiary].add(msg.value);\n', '        totalSupply = totalSupply.add( msg.value);\n', '        \n', '        //Fire th events\n', '        Issuance(msg.value);\n', '        Transfer(this, beneficiary, msg.value);\n', '    }\n', '    \n', '    /**\n', '     * @dev withdraw ether from the account\n', '     * @param _amount  amount of ether to withdraw\n', '     */\n', '    function withdraw(uint256 _amount) public {\n', '        require(enabled);\n', '        withdrawTo(msg.sender, _amount);\n', '    }\n', '    \n', '    /**\n', '     * @dev withdraw ether from the account to a target account\n', '     * @param _to account to receive the ether\n', '     * @param _amount of ether to withdraw\n', '     */\n', '    function withdrawTo(address _to, uint _amount) public { \n', '        require(enabled);\n', '        require(_to != 0x0);\n', '        require(_amount != 0);  \n', '        require(_amount <= balances[_to]); \n', '        require(this != _to);\n', '        \n', '        balances[_to] = balances[_to].sub(_amount);\n', '        totalSupply = totalSupply.sub(_amount); \n', '        \n', '        //Fire the events\n', '        Transfer(msg.sender, this, _amount);\n', '        Destruction(_amount);\n', '        \n', '         // send the amount to the target account\n', '        _to.transfer(_amount);  \n', '    }\n', '}']