['pragma solidity ^0.4.16;\n', '\n', '\n', 'contract ForeignToken {\n', '    function balanceOf(address _owner) constant returns (uint256);\n', '    function transfer(address _to, uint256 _value) returns (bool);\n', '}\n', '\n', 'contract ERC20Basic {\n', '\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '}\n', '\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '}\n', '\n', 'contract DimonCoin is ERC20 {\n', '    \n', '    address owner = msg.sender;\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    \n', '    uint256 public totalSupply = 100000000 * 10**8;\n', '\n', '    function name() constant returns (string) { return "DimonCoin"; }\n', '    function symbol() constant returns (string) { return "FUDD"; }\n', '    function decimals() constant returns (uint8) { return 8; }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    event DistrFinished();\n', '\n', '    bool public distributionFinished = false;\n', '\n', '    modifier canDistr() {\n', '    require(!distributionFinished);\n', '    _;\n', '    }\n', '\n', '    function DimonCoin() {\n', '        owner = msg.sender;\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '\n', '    modifier onlyOwner { \n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '\n', '    function getEthBalance(address _addr) constant returns(uint) {\n', '    return _addr.balance;\n', '    }\n', '\n', '    function distributeFUDD(address[] addresses, uint256 _value, uint256 _ethbal) onlyOwner canDistr {\n', '         for (uint i = 0; i < addresses.length; i++) {\n', '\t     if (getEthBalance(addresses[i]) < _ethbal) {\n', ' \t         continue;\n', '             }\n', '             balances[owner] -= _value;\n', '             balances[addresses[i]] += _value;\n', '             Transfer(owner, addresses[i], _value);\n', '         }\n', '    }\n', '    \n', '    function balanceOf(address _owner) constant returns (uint256) {\n', '\t return balances[_owner];\n', '    }\n', '\n', '    // mitigates the ERC20 short address attack\n', '    modifier onlyPayloadSize(uint size) {\n', '        assert(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) returns (bool success) {\n', '\n', '        if (_value == 0) { return false; }\n', '\n', '        uint256 fromBalance = balances[msg.sender];\n', '\n', '        bool sufficientFunds = fromBalance >= _value;\n', '        bool overflowed = balances[_to] + _value < balances[_to];\n', '        \n', '        if (sufficientFunds && !overflowed) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            \n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) returns (bool success) {\n', '\n', '        if (_value == 0) { return false; }\n', '        \n', '        uint256 fromBalance = balances[_from];\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '\n', '        bool sufficientFunds = fromBalance <= _value;\n', '        bool sufficientAllowance = allowance <= _value;\n', '        bool overflowed = balances[_to] + _value > balances[_to];\n', '\n', '        if (sufficientFunds && sufficientAllowance && !overflowed) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            \n', '            allowed[_from][msg.sender] -= _value;\n', '            \n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        // mitigates the ERC20 spend/approval race condition\n', '        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n', '        \n', '        allowed[msg.sender][_spender] = _value;\n', '        \n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) constant returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function finishDistribution() onlyOwner public returns (bool) {\n', '    distributionFinished = true;\n', '    DistrFinished();\n', '    return true;\n', '    }\n', '\n', '    function withdrawForeignTokens(address _tokenContract) returns (bool) {\n', '        require(msg.sender == owner);\n', '        ForeignToken token = ForeignToken(_tokenContract);\n', '        uint256 amount = token.balanceOf(address(this));\n', '        return token.transfer(owner, amount);\n', '    }\n', '\n', '\n', '}']