['pragma solidity ^0.4.19;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract Santacoin is StandardToken {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    // Santa Coin meta data\n', '    string constant public name = "SCS";\n', '    string constant public symbol = "SCS";\n', '    uint8 constant public decimals = 0; // 1 SCS = 1 SCS\n', '\n', '    // North Pole Address\n', '    address public NorthPoleAddress;\n', '\n', '    // North Pole\n', '    uint256 public NorthPoleAF = 1000000000000000;\n', '\n', '    // Santa Coin Holder ETH Balances\n', '    mapping(address => uint256) private ETHAmounts;\n', '\n', '    // Rewards per contributing address\n', '    mapping(address => uint256) private SantaCoinRewardsInETH;\n', '\n', '    // Total amount held to date by North Pole\n', '    uint256 public TotalETHGivenToNorthPole = 0;\n', '\n', '    // Total amount of santa coins issued to date\n', '    uint256 public TotalSantaCoinsGivenByNorthPole = 0;\n', '\n', '    // Max Sata Reward (will be set once north pole stops minting)\n', '    uint256 public MaxSantaRewardPerToken = 0;\n', '\n', '    // Santa Coin minimum\n', '    uint256 private minimumSantaCoinContribution = 0.01 ether;\n', '\n', '    // Santa Coin Minting Range\n', '    uint256 private santaCoinMinterLowerBound = 1;\n', '    uint256 private santaCoinMinterUpperBound = 5;\n', '\n', '    // Allows the north pole to issue santa coins\n', '    // to boys and girls around the world\n', '    bool public NorthPoleMintingEnabled = true;\n', '\n', '    // Make sure either Santa or an Elf is\n', '    // performing this task\n', '    modifier onlySantaOrElf()\n', '    {\n', '        require (msg.sender == NorthPoleAddress);\n', '        _;\n', '    }\n', '\n', '    // Determines random number between range\n', '    function determineRandomNumberBetween(uint min, uint max)\n', '        private\n', '        returns (uint256)\n', '    {\n', '        return (uint256(keccak256(block.blockhash(block.number-min), min ))%max);\n', '    }\n', '\n', '    // Determines amount of Santa Coins to issue (alias)\n', '    function askSantaForCoinAmountBetween(uint min, uint max)\n', '        private\n', '        returns (uint256)\n', '    {\n', '        return determineRandomNumberBetween(min, max);\n', '    }\n', '\n', '    // Determines amount of Santa Coins to issue (alias)\n', '    function askSantaForPresent(uint min, uint max)\n', '        private\n', '        returns (uint256)\n', '    {\n', '        return determineRandomNumberBetween(min, max);\n', '    }\n', '\n', '    // Allows North Pole to issue Santa Coins\n', '    function setNorthPoleAddress(address newNorthPoleAddress)\n', '        public\n', '        onlySantaOrElf\n', '    {\n', '        NorthPoleAddress = newNorthPoleAddress;\n', '    }\n', '\n', '    // Allows North Pole to issue Santa Coins\n', '    function allowNorthPoleMinting()\n', '        public\n', '        onlySantaOrElf\n', '    {\n', '        require(NorthPoleMintingEnabled == false);\n', '        NorthPoleMintingEnabled = true;\n', '    }\n', '\n', '    // Prevents North Pole from issuing Santa Coins\n', '    function disallowNorthPoleMinting()\n', '        public\n', '        onlySantaOrElf\n', '    {\n', '        require(NorthPoleMintingEnabled == true);\n', '        NorthPoleMintingEnabled = false;\n', '\n', '        if (this.balance > 0 && totalSupply > 0) {\n', '            MaxSantaRewardPerToken = this.balance.div(totalSupply);\n', '        }\n', '    }\n', '\n', '    function hasSantaCoins(address holderAddress)\n', '      public\n', '      returns (bool)\n', '    {\n', '        return balances[holderAddress] > 0;\n', '    }\n', '\n', '    function openGiftFromSanta(address holderAddress)\n', '      public\n', '      returns (uint256)\n', '    {\n', '        return SantaCoinRewardsInETH[holderAddress];\n', '    }\n', '\n', '    function haveIBeenNaughty(address holderAddress)\n', '      public\n', '      returns (bool)\n', '    {\n', '        return (ETHAmounts[holderAddress] > 0 && SantaCoinRewardsInETH[holderAddress] == 0);\n', '    }\n', '\n', '    // Initializes Santa coin\n', '    function Santacoin()\n', '    {\n', '        totalSupply = uint256(0);\n', '        NorthPoleAddress = msg.sender;\n', '    }\n', '\n', '    // Used to get Santa Coins or\n', '    function () payable {\n', '\n', '        // Open gifts if user has coins\n', '        if (msg.value == 0 && hasSantaCoins(msg.sender) == true && NorthPoleMintingEnabled == false && MaxSantaRewardPerToken > 0) {\n', '            balances[msg.sender] -= 1;\n', '            totalSupply -= 1;\n', '            uint256 santasGift = MaxSantaRewardPerToken-NorthPoleAF;\n', '            uint256 santaSecret = determineRandomNumberBetween(1, 20);\n', '            uint256 senderSantaSecretGuess = determineRandomNumberBetween(1, 20);\n', '            if (santaSecret == senderSantaSecretGuess) {\n', '                msg.sender.transfer(santasGift);\n', '                NorthPoleAddress.transfer(NorthPoleAF);\n', '                SantaCoinRewardsInETH[msg.sender] += santasGift;\n', '            }\n', '        }\n', '\n', '        // Get SantaCoins\n', '        else if (msg.value >= minimumSantaCoinContribution && NorthPoleMintingEnabled == true) {\n', '            uint256 tokensToCredit = askSantaForCoinAmountBetween(santaCoinMinterLowerBound, santaCoinMinterUpperBound);\n', '            tokensToCredit = tokensToCredit == 0 ? 1 : tokensToCredit;\n', '\n', '            totalSupply += tokensToCredit;\n', '            ETHAmounts[msg.sender] += msg.value;\n', '            TotalETHGivenToNorthPole += msg.value;\n', '            balances[msg.sender] += tokensToCredit;\n', '            TotalSantaCoinsGivenByNorthPole += balances[msg.sender];\n', '        }\n', '\n', '        else {\n', '            revert();\n', '        }\n', '    }\n', '}']