['// Abstract contract for the full ERC 20 Token standard\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'pragma solidity ^0.4.15;\n', '\n', 'contract Token {\n', '    /* This is a slight change to the ERC20 base standard.*/\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", "        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n", '        //Replace the if with this one instead.\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract SMART is StandardToken {\n', '\n', '    function () public payable {\n', '        require(msg.value > 0 && receivedWei < targetWei);\n', '        require(now > releaseTime);\n', '        receivedWei += msg.value;\n', '        walletAddress.transfer(msg.value);\n', '        NewSale(msg.sender, msg.value);\n', '        assert(receivedWei >= msg.value);\n', '    }\n', '\n', '    string public name = "SmartMesh Token";                   //fancy name\n', "    uint8 public decimals = 18;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\n", '    string public symbol = "SMART";                 //An identifier\n', "    string public version = 'v0.1';       //SMART 0.1 standard. Just an arbitrary versioning scheme.\n", '\n', '    address public founder; // The address of the founder\n', '    uint256 public targetWei;// The target eth of ico\n', '    uint256 public receivedWei;//The received nummber of eth\n', '    uint256 public releaseTime;//The start time of ico\n', '    uint256 public allocateEndTime;\n', '    address public walletAddress;//Address of wallet\n', '\n', '    event NewSale(address indexed _from, uint256 _amount);\n', '    \n', '    \n', '    // The nonce for avoid transfer replay attacks\n', '    mapping(address => uint256) nonces;\n', '\n', '    function SMART(address _walletAddress) public {\n', '        founder = msg.sender;\n', '        walletAddress = _walletAddress;\n', '        releaseTime = 1511917200;\n', '        allocateEndTime = releaseTime + 37 days;\n', '        targetWei = 3900 ether;\n', '    }\n', '\n', '    /*\n', '     * Proxy transfer SMART token. When some users of the ethereum account has no ether,\n', '     * he or she can authorize the agent for broadcast transactions, and agents may charge agency fees\n', '     * @param _from\n', '     * @param _to\n', '     * @param _value\n', '     * @param feeSmart\n', '     * @param _v\n', '     * @param _r\n', '     * @param _s\n', '     */\n', '    function transferProxy(address _from, address _to, uint256 _value, uint256 _feeSmart,\n', '        uint8 _v,bytes32 _r, bytes32 _s) public returns (bool){\n', '\n', '        if(balances[_from] < _feeSmart + _value) revert();\n', '\n', '        uint256 nonce = nonces[_from];\n', '        bytes32 h = keccak256(_from,_to,_value,_feeSmart,nonce);\n', '        if(_from != ecrecover(h,_v,_r,_s)) revert();\n', '\n', '        if(balances[_to] + _value < balances[_to]\n', '            || balances[msg.sender] + _feeSmart < balances[msg.sender]) revert();\n', '        balances[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '\n', '        balances[msg.sender] += _feeSmart;\n', '        Transfer(_from, msg.sender, _feeSmart);\n', '\n', '        balances[_from] -= _value + _feeSmart;\n', '        nonces[_from] = nonce + 1;\n', '        return true;\n', '    }\n', '\n', '    /*\n', '     * Proxy approve that some one can authorize the agent for broadcast transaction\n', '     * which call approve method, and agents may charge agency fees\n', '     * @param _from The address which should tranfer SMART to others\n', '     * @param _spender The spender who allowed by _from\n', '     * @param _value The value that should be tranfered.\n', '     * @param _v\n', '     * @param _r\n', '     * @param _s\n', '     */\n', '    function approveProxy(address _from, address _spender, uint256 _value,\n', '        uint8 _v,bytes32 _r, bytes32 _s) public returns (bool success) {\n', '\n', '        uint256 nonce = nonces[_from];\n', '        bytes32 hash = keccak256(_from,_spender,_value,nonce);\n', '        if(_from != ecrecover(hash,_v,_r,_s)) revert();\n', '        allowed[_from][_spender] = _value;\n', '        Approval(_from, _spender, _value);\n', '        nonces[_from] = nonce + 1;\n', '        return true;\n', '    }\n', '\n', '\n', '    /*\n', '     * Get the nonce\n', '     * @param _addr\n', '     */\n', '    function getNonce(address _addr) public constant returns (uint256){\n', '        return nonces[_addr];\n', '    }\n', '\n', '    /* Approves and then calls the receiving contract */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', "        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n", '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        if(!_spender.call(bytes4(bytes32(keccak256("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { revert(); }\n', '        return true;\n', '    }\n', '\n', '    /* Approves and then calls the contract code*/\n', '    function approveAndCallcode(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        //Call the contract code\n', '        if(!_spender.call(_extraData)) { revert(); }\n', '        return true;\n', '    }\n', '\n', '    // Allocate tokens to the users\n', '    // @param _owners The owners list of the token\n', '    // @param _values The value list of the token\n', '    function allocateTokens(address[] _owners, uint256[] _values) public {\n', '\n', '        if(msg.sender != founder) revert();\n', '        if(allocateEndTime < now) revert();\n', '        if(_owners.length != _values.length) revert();\n', '\n', '        for(uint256 i = 0; i < _owners.length ; i++){\n', '            address owner = _owners[i];\n', '            uint256 value = _values[i];\n', '            if(totalSupply + value <= totalSupply || balances[owner] + value <= balances[owner]) revert();\n', '            totalSupply += value;\n', '            balances[owner] += value;\n', '        }\n', '    }\n', '}']