['pragma solidity ^0.4.15;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused returns (bool) {\n', '    paused = true;\n', '    Pause();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused returns (bool) {\n', '    paused = false;\n', '    Unpause();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * Pausable token\n', ' *\n', ' * Simple ERC20 Token example, with pausable token creation\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint _value) whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '}\n', '\n', '\n', '// @title The PallyCoin\n', '/// @author Manoj Patidar\n', 'contract PallyCoin is PausableToken {\n', '   using SafeMath for uint256;\n', '\n', "   string public constant name = 'PallyCoin';\n", '\n', "   string public constant symbol = 'PAL';\n", '\n', '   uint8 public constant decimals = 18;\n', '\n', '   uint256 public  totalSupply = 100e24; // 100M tokens with 18 decimals\n', '\n', '   bool public remainingTokenBurnt = false;\n', '\n', '   // The tokens already used for the presale buyers\n', '   uint256 public tokensDistributedPresale = 0;\n', '\n', '   // The tokens already used for the ICO buyers\n', '   uint256 public tokensDistributedCrowdsale = 0;\n', '\n', '   // The address of the crowdsale\n', '   address public crowdsale;\n', '\n', '   // The initial supply used for platform and development as specified in the whitepaper\n', '   uint256 public initialSupply = 40e24;\n', '\n', '   // The maximum amount of tokens for the presale investors\n', '   uint256 public limitPresale = 10e24;\n', '\n', '   // The maximum amount of tokens sold in the crowdsale\n', '   uint256 public limitCrowdsale = 50e24;\n', '\n', "   /// @notice Only allows the execution of the function if it's comming from crowdsale\n", '   modifier onlyCrowdsale() {\n', '      require(msg.sender == crowdsale);\n', '      _;\n', '   }\n', '\n', '   // When someone refunds tokens\n', '   event RefundedTokens(address indexed user, uint256 tokens);\n', '\n', '   /// @notice Constructor used to set the platform & development tokens. This is\n', '   /// The 20% + 20% of the 100 M tokens used for platform and development team.\n', '   /// The owner, msg.sender, is able to do allowance for other contracts. Remember\n', "   /// to use `transferFrom()` if you're allowed\n", '   function PallyCoin() {\n', '      balances[msg.sender] = initialSupply; // 40M tokens wei\n', '   }\n', '\n', "   /// @notice Function to set the crowdsale smart contract's address only by the owner of this token\n", '   /// @param _crowdsale The address that will be used\n', '   function setCrowdsaleAddress(address _crowdsale) external onlyOwner whenNotPaused {\n', '      require(_crowdsale != address(0));\n', '\n', '      crowdsale = _crowdsale;\n', '   }\n', '\n', '   /// @notice Distributes the presale tokens. Only the owner can do this\n', '   /// @param _buyer The address of the buyer\n', '   /// @param tokens The amount of tokens corresponding to that buyer\n', '   function distributePresaleTokens(address _buyer, uint tokens) external onlyOwner whenNotPaused {\n', '      require(_buyer != address(0));\n', '      require(tokens > 0 && tokens <= limitPresale);\n', '\n', "      // Check that the limit of 10M presale tokens hasn't been met yet\n", '      require(tokensDistributedPresale < limitPresale);\n', '      require(tokensDistributedPresale.add(tokens) < limitPresale);\n', '\n', '      tokensDistributedPresale = tokensDistributedPresale.add(tokens);\n', '      balances[_buyer] = balances[_buyer].add(tokens);\n', '   }\n', '\n', '   /// @notice Distributes the ICO tokens. Only the crowdsale address can execute this\n', '   /// @param _buyer The buyer address\n', '   /// @param tokens The amount of tokens to send to that address\n', '   function distributeICOTokens(address _buyer, uint tokens) external onlyCrowdsale whenNotPaused {\n', '      require(_buyer != address(0));\n', '      require(tokens > 0);\n', '\n', "      // Check that the limit of 50M ICO tokens hasn't been met yet\n", '      require(tokensDistributedCrowdsale < limitCrowdsale);\n', '      require(tokensDistributedCrowdsale.add(tokens) <= limitCrowdsale);\n', '\n', '      tokensDistributedCrowdsale = tokensDistributedCrowdsale.add(tokens);\n', '      balances[_buyer] = balances[_buyer].add(tokens);\n', '   }\n', '\n', '   /// @notice Deletes the amount of tokens refunded from that buyer balance\n', '   /// @param _buyer The buyer that wants the refund\n', '   /// @param tokens The tokens to return\n', '   function refundTokens(address _buyer, uint256 tokens) external onlyCrowdsale whenNotPaused {\n', '      require(_buyer != address(0));\n', '      require(tokens > 0);\n', '      require(balances[_buyer] >= tokens);\n', '\n', '      balances[_buyer] = balances[_buyer].sub(tokens);\n', '      RefundedTokens(_buyer, tokens);\n', '   }\n', '\n', '   /// @notice Burn the amount of tokens remaining after ICO ends\n', '   function burnTokens() external onlyCrowdsale whenNotPaused {\n', '      \n', '      uint256 remainingICOToken = limitCrowdsale.sub(tokensDistributedCrowdsale);\n', '      if(remainingICOToken > 0 && !remainingTokenBurnt) {\n', '      remainingTokenBurnt = true;    \n', '      limitCrowdsale = limitCrowdsale.sub(remainingICOToken);  \n', '      totalSupply = totalSupply.sub(remainingICOToken);\n', '      }\n', '   }\n', '}']