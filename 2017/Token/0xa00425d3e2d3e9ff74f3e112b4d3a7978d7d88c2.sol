['pragma solidity ^0.4.18;\n', '\n', '//\n', '// imports from https://github.com/OpenZeppelin/zeppelin-solidity\n', '//\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '//\n', '//   GoPowerToken\n', '//\n', '\n', 'contract GoPowerToken is StandardToken, Ownable {\n', '\n', "  string public name = 'GoPower Token';\n", "  string public symbol = 'GPT';\n", '  uint public decimals = 18;\n', '\n', '\n', '  //\n', '  //   Distribution of tokens\n', '  //\n', '\n', '  uint constant TOKEN_TOTAL_SUPPLY_LIMIT = 700 * 1e6 * 1e18;\n', '  uint constant TOKEN_SALE_LIMIT =         600 * 1e6 * 1e18;\n', '  uint constant RESERVED_FOR_SETTLEMENTS =  50 * 1e6 * 1e18;\n', '  uint constant RESERVED_FOR_TEAM =         30 * 1e6 * 1e18;\n', '  uint constant RESERVED_FOR_BOUNTY =       20 * 1e6 * 1e18;\n', '\n', '  address constant settlementsAddress = 0x9e6290C55faba3FFA269cCbF054f8D93586aaa6D;\n', '  address constant teamAddress = 0xaA2E8DEbEAf429A21c59c3E697d9FC5bB86E126d;\n', '  address constant bountyAddress = 0xdFa360FdF23DC9A7bdF1d968f453831d3351c33D;\n', '\n', '\n', '  //\n', '  //   Token rate calculation parameters\n', '  //\n', '\n', '  uint constant TOKEN_RATE_INITIAL =  0.000571428571428571 ether;           // 1/1750\n', '  uint constant TOKEN_RATE_ICO_DAILY_INCREMENT = TOKEN_RATE_INITIAL / 200;  // 0.5%\n', '  uint constant BONUS_PRESALE = 50;    // 50%\n', '  uint constant BONUS_ICO_WEEK1 = 30;  // 30%\n', '  uint constant BONUS_ICO_WEEK2 = 20;  // 20%\n', '  uint constant BONUS_ICO_WEEK3 = 10;  // 10%\n', '  uint constant BONUS_ICO_WEEK4 = 5;   // 5%\n', '  uint constant MINIMUM_PAYABLE_AMOUNT = 0.0001 ether;\n', '  uint constant TOKEN_BUY_PRECISION = 0.01e18;\n', '\n', '\n', '  //\n', '  //    State transitions\n', '  //\n', '\n', '  uint public presaleStartedAt;\n', '  uint public presaleFinishedAt;\n', '  uint public icoStartedAt;\n', '  uint public icoFinishedAt;\n', '\n', '  function presaleInProgress() private view returns (bool) {\n', '    return ((presaleStartedAt > 0) && (presaleFinishedAt == 0));\n', '  }\n', '\n', '  function icoInProgress() private view returns (bool) {\n', '    return ((icoStartedAt > 0) && (icoFinishedAt == 0));\n', '  }\n', '\n', '  modifier onlyDuringSale { require(presaleInProgress() || icoInProgress()); _; }\n', '  modifier onlyAfterICO { require(icoFinishedAt > 0); _; }\n', '\n', '  function startPresale() onlyOwner external returns(bool) {\n', '    require(presaleStartedAt == 0);\n', '    presaleStartedAt = now;\n', '    return true;\n', '  }\n', '\n', '  function finishPresale() onlyOwner external returns(bool) {\n', '    require(presaleInProgress());\n', '    presaleFinishedAt = now;\n', '    return true;\n', '  }\n', '\n', '  function startICO() onlyOwner external returns(bool) {\n', '    require(presaleFinishedAt > 0);\n', '    require(icoStartedAt == 0);\n', '    icoStartedAt = now;\n', '    return true;\n', '  }\n', '\n', '  function finishICO() onlyOwner external returns(bool) {\n', '    require(icoInProgress());\n', '    _mint_internal(settlementsAddress, RESERVED_FOR_SETTLEMENTS);\n', '    _mint_internal(teamAddress, RESERVED_FOR_TEAM);\n', '    _mint_internal(bountyAddress, RESERVED_FOR_BOUNTY);\n', '    icoFinishedAt = now;\n', '    tradeRobot = address(0);   // disable trade robot\n', '    return true;\n', '  }\n', '\n', '\n', '  //\n', '  //  Trade robot permissions\n', '  //\n', '\n', '  address public tradeRobot;\n', '  modifier onlyTradeRobot { require(msg.sender == tradeRobot); _; }\n', '\n', '  function setTradeRobot(address _robot) onlyOwner external returns(bool) {\n', '    require(icoFinishedAt == 0); // the robot is disabled after the end of ICO\n', '    tradeRobot = _robot;\n', '    return true;\n', '  }\n', '\n', '\n', '  //\n', '  //   Token sale logic\n', '  //\n', '\n', '  function _mint_internal(address _to, uint _amount) private {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Transfer(address(0), _to, _amount);\n', '  }\n', '\n', '  function mint(address _to, uint _amount) onlyDuringSale onlyTradeRobot external returns (bool) {\n', '    _mint_internal(_to, _amount);\n', '    return true;\n', '  }\n', '\n', '  function mintUpto(address _to, uint _newValue) onlyDuringSale onlyTradeRobot external returns (bool) {\n', '    var oldValue = balances[_to];\n', '    require(_newValue > oldValue);\n', '    _mint_internal(_to, _newValue.sub(oldValue));\n', '    return true;\n', '  }\n', '\n', '  function buy() onlyDuringSale public payable {\n', '    assert(msg.value >= MINIMUM_PAYABLE_AMOUNT);\n', '    var tokenRate = TOKEN_RATE_INITIAL;\n', '    uint amount;\n', '\n', '    if (icoInProgress()) { // main ICO\n', '\n', '      var daysFromIcoStart = now.sub(icoStartedAt).div(1 days);\n', '      tokenRate = tokenRate.add( TOKEN_RATE_ICO_DAILY_INCREMENT.mul(daysFromIcoStart) );\n', '      amount = msg.value.mul(1e18).div(tokenRate);\n', '\n', '      var weekNumber = 1 + daysFromIcoStart.div(7);\n', '      if (weekNumber == 1) {\n', '        amount = amount.add( amount.mul(BONUS_ICO_WEEK1).div(100) );\n', '      } else if (weekNumber == 2) {\n', '        amount = amount.add( amount.mul(BONUS_ICO_WEEK2).div(100) );\n', '      } else if (weekNumber == 3) {\n', '        amount = amount.add( amount.mul(BONUS_ICO_WEEK3).div(100) );\n', '      } else if (weekNumber == 4) {\n', '        amount = amount.add( amount.mul(BONUS_ICO_WEEK4).div(100) );\n', '      }\n', '    \n', '    } else {  // presale\n', '\n', '      amount = msg.value.mul(1e18).div(tokenRate);\n', '      amount = amount.add( amount.mul(BONUS_PRESALE).div(100) );\n', '    }\n', '\n', '    amount = amount.add(TOKEN_BUY_PRECISION/2).div(TOKEN_BUY_PRECISION).mul(TOKEN_BUY_PRECISION);\n', '\n', '    require(totalSupply.add(amount) <= TOKEN_SALE_LIMIT);\n', '    _mint_internal(msg.sender, amount);\n', '  }\n', '\n', '  function () external payable {\n', '    buy();\n', '  }\n', '\n', '  function collect() onlyOwner external {\n', '    msg.sender.transfer(this.balance);\n', '  }\n', '\n', '\n', '  //\n', '  //   Token transfer operations are locked until the end of ICO\n', '  //\n', '\n', "  // this one is much more gas-effective because of the 'external' visibility\n", '  function transferExt(address _to, uint256 _value) onlyAfterICO external returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transfer(address _to, uint _value) onlyAfterICO public returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) onlyAfterICO public returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint _value) onlyAfterICO public returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) onlyAfterICO public returns (bool) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) onlyAfterICO public returns (bool) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '\n', '}']