['pragma solidity ^0.4.13;\n', '\n', 'contract ItokenRecipient {\n', '  function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        assert(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != owner);\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnerUpdate(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = 0x0;\n', '    }\n', '\n', '    event OwnerUpdate(address _prevOwner, address _newOwner);\n', '}\n', '\n', 'contract IERC20Token {\n', '  function totalSupply() constant returns (uint256 totalSupply);\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '  function transfer(address _to, uint256 _value) returns (bool success) {}\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '  function approve(address _spender, uint256 _value) returns (bool success) {}\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract Token is IERC20Token, Owned {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  /* Public variables of the token */\n', '  string public standard;\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  address public crowdsaleContractAddress;\n', '\n', '  /* Private variables of the token */\n', '  uint256 supply = 0;\n', '  mapping (address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) allowances;\n', '\n', '  /* Events */\n', '  event Mint(address indexed _to, uint256 _value);\n', '\n', '  // validates address is the crowdsale owner\n', '  modifier onlyCrowdsaleOwner() {\n', '      require(msg.sender == crowdsaleContractAddress);\n', '      _;\n', '  }\n', '\n', '  /* Returns total supply of issued tokens */\n', '  function totalSupply() constant returns (uint256) {\n', '    return supply;\n', '  }\n', '\n', '  /* Returns balance of address */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  /* Transfers tokens from your address to other */\n', '  function transfer(address _to, uint256 _value) returns (bool success) {\n', '    require(_to != 0x0 && _to != address(this));\n', '    balances[msg.sender] = balances[msg.sender].sub(_value); // Deduct senders balance\n', '    balances[_to] = balances[_to].add(_value);               // Add recivers blaance\n', '    Transfer(msg.sender, _to, _value);                       // Raise Transfer event\n', '    return true;\n', '  }\n', '\n', '  /* Approve other address to spend tokens on your account */\n', '  function approve(address _spender, uint256 _value) returns (bool success) {\n', '    allowances[msg.sender][_spender] = _value;        // Set allowance\n', '    Approval(msg.sender, _spender, _value);           // Raise Approval event\n', '    return true;\n', '  }\n', '\n', '  /* Approve and then communicate the approved contract in a single tx */\n', '  function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '    ItokenRecipient spender = ItokenRecipient(_spender);            // Cast spender to tokenRecipient contract\n', '    approve(_spender, _value);                                      // Set approval to contract for _value\n', '    spender.receiveApproval(msg.sender, _value, this, _extraData);  // Raise method on _spender contract\n', '    return true;\n', '  }\n', '\n', '  /* A contract attempts to get the coins */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '    require(_to != 0x0 && _to != address(this));\n', '    balances[_from] = balances[_from].sub(_value);                              // Deduct senders balance\n', '    balances[_to] = balances[_to].add(_value);                                  // Add recipient blaance\n', '    allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_value);  // Deduct allowance for this address\n', '    Transfer(_from, _to, _value);                                               // Raise Transfer event\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowances[_owner][_spender];\n', '  }\n', '\n', '  function mintTokens(address _to, uint256 _amount) onlyCrowdsaleOwner {\n', '    supply = supply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(msg.sender, _to, _amount);\n', '  }\n', '\n', '  function salvageTokensFromContract(address _tokenAddress, address _to, uint _amount) onlyOwner {\n', '    IERC20Token(_tokenAddress).transfer(_to, _amount);\n', '  }\n', '}\n', '\n', 'contract StormToken is Token {\n', '\n', '\tbool public transfersEnabled = false;    // true if transfer/transferFrom are enabled, false if not\n', '\n', '\t// triggered when the total supply is increased\n', '\tevent Issuance(uint256 _amount);\n', '\t// triggered when the total supply is decreased\n', '\tevent Destruction(uint256 _amount);\n', '\n', '\n', '  /* Initializes contract */\n', '  function StormToken(address _crowdsaleAddress) public {\n', '    standard = "Storm Token v1.0";\n', '    name = "Storm Token";\n', '    symbol = "STORM"; // token symbol\n', '    decimals = 18;\n', '    crowdsaleContractAddress = _crowdsaleAddress;\n', '  }\n', '\n', '    // validates an address - currently only checks that it isn&#39;t null\n', '    modifier validAddress(address _address) {\n', '        require(_address != 0x0);\n', '        _;\n', '    }\n', '\n', '    // verifies that the address is different than this contract address\n', '    modifier notThis(address _address) {\n', '        require(_address != address(this));\n', '        _;\n', '    }\n', '\n', '    // allows execution only when transfers aren&#39;t disabled\n', '    modifier transfersAllowed {\n', '        assert(transfersEnabled);\n', '        _;\n', '    }\n', '\n', '   /**\n', '        @dev disables/enables transfers\n', '        can only be called by the contract owner\n', '\n', '        @param _disable    true to disable transfers, false to enable them\n', '    */\n', '    function disableTransfers(bool _disable) public onlyOwner {\n', '        transfersEnabled = !_disable;\n', '    }\n', '\n', '    /**\n', '        @dev increases the token supply and sends the new tokens to an account\n', '        can only be called by the contract owner\n', '\n', '        @param _to         account to receive the new amount\n', '        @param _amount     amount to increase the supply by\n', '    */\n', '    function issue(address _to, uint256 _amount)\n', '        public\n', '        onlyOwner\n', '        validAddress(_to)\n', '        notThis(_to)\n', '    {\n', '        supply = supply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '\n', '        Issuance(_amount);\n', '        Transfer(this, _to, _amount);\n', '    }\n', '\n', '    /**\n', '        @dev removes tokens from an account and decreases the token supply\n', '        can be called by the contract owner to destroy tokens from any account or by any holder to destroy tokens from his/her own account\n', '\n', '        @param _from       account to remove the amount from\n', '        @param _amount     amount to decrease the supply by\n', '    */\n', '    function destroy(address _from, uint256 _amount) public {\n', '        require(msg.sender == _from || msg.sender == owner); // validate input\n', '\n', '        balances[_from] = balances[_from].sub(_amount);\n', '        supply = supply.sub(_amount);\n', '\n', '        Transfer(_from, this, _amount);\n', '        Destruction(_amount);\n', '    }\n', '\n', '    // ERC20 standard method overrides with some extra functionality\n', '\n', '    /**\n', '        @dev send coins\n', '        throws on any error rather then return a false flag to minimize user errors\n', '        in addition to the standard checks, the function throws if transfers are disabled\n', '\n', '        @param _to      target address\n', '        @param _value   transfer amount\n', '\n', '        @return true if the transfer was successful, false if it wasn&#39;t\n', '    */\n', '    function transfer(address _to, uint256 _value) public transfersAllowed returns (bool success) {\n', '        assert(super.transfer(_to, _value));\n', '        return true;\n', '    }\n', '  \n', '    function transfers(address[] _recipients, uint256[] _values) public transfersAllowed onlyOwner returns (bool success) {\n', '        require(_recipients.length == _values.length); // Check if input data is correct\n', '\n', '        for (uint cnt = 0; cnt < _recipients.length; cnt++) {\n', '            assert(super.transfer(_recipients[cnt], _values[cnt]));\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        @dev an account/contract attempts to get the coins\n', '        throws on any error rather then return a false flag to minimize user errors\n', '        in addition to the standard checks, the function throws if transfers are disabled\n', '\n', '        @param _from    source address\n', '        @param _to      target address\n', '        @param _value   transfer amount\n', '\n', '        @return true if the transfer was successful, false if it wasn&#39;t\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool success) {\n', '        assert(super.transferFrom(_from, _to, _value));\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'contract ItokenRecipient {\n', '  function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        assert(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != owner);\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnerUpdate(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = 0x0;\n', '    }\n', '\n', '    event OwnerUpdate(address _prevOwner, address _newOwner);\n', '}\n', '\n', 'contract IERC20Token {\n', '  function totalSupply() constant returns (uint256 totalSupply);\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '  function transfer(address _to, uint256 _value) returns (bool success) {}\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '  function approve(address _spender, uint256 _value) returns (bool success) {}\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract Token is IERC20Token, Owned {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  /* Public variables of the token */\n', '  string public standard;\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  address public crowdsaleContractAddress;\n', '\n', '  /* Private variables of the token */\n', '  uint256 supply = 0;\n', '  mapping (address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) allowances;\n', '\n', '  /* Events */\n', '  event Mint(address indexed _to, uint256 _value);\n', '\n', '  // validates address is the crowdsale owner\n', '  modifier onlyCrowdsaleOwner() {\n', '      require(msg.sender == crowdsaleContractAddress);\n', '      _;\n', '  }\n', '\n', '  /* Returns total supply of issued tokens */\n', '  function totalSupply() constant returns (uint256) {\n', '    return supply;\n', '  }\n', '\n', '  /* Returns balance of address */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  /* Transfers tokens from your address to other */\n', '  function transfer(address _to, uint256 _value) returns (bool success) {\n', '    require(_to != 0x0 && _to != address(this));\n', '    balances[msg.sender] = balances[msg.sender].sub(_value); // Deduct senders balance\n', '    balances[_to] = balances[_to].add(_value);               // Add recivers blaance\n', '    Transfer(msg.sender, _to, _value);                       // Raise Transfer event\n', '    return true;\n', '  }\n', '\n', '  /* Approve other address to spend tokens on your account */\n', '  function approve(address _spender, uint256 _value) returns (bool success) {\n', '    allowances[msg.sender][_spender] = _value;        // Set allowance\n', '    Approval(msg.sender, _spender, _value);           // Raise Approval event\n', '    return true;\n', '  }\n', '\n', '  /* Approve and then communicate the approved contract in a single tx */\n', '  function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '    ItokenRecipient spender = ItokenRecipient(_spender);            // Cast spender to tokenRecipient contract\n', '    approve(_spender, _value);                                      // Set approval to contract for _value\n', '    spender.receiveApproval(msg.sender, _value, this, _extraData);  // Raise method on _spender contract\n', '    return true;\n', '  }\n', '\n', '  /* A contract attempts to get the coins */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '    require(_to != 0x0 && _to != address(this));\n', '    balances[_from] = balances[_from].sub(_value);                              // Deduct senders balance\n', '    balances[_to] = balances[_to].add(_value);                                  // Add recipient blaance\n', '    allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_value);  // Deduct allowance for this address\n', '    Transfer(_from, _to, _value);                                               // Raise Transfer event\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowances[_owner][_spender];\n', '  }\n', '\n', '  function mintTokens(address _to, uint256 _amount) onlyCrowdsaleOwner {\n', '    supply = supply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(msg.sender, _to, _amount);\n', '  }\n', '\n', '  function salvageTokensFromContract(address _tokenAddress, address _to, uint _amount) onlyOwner {\n', '    IERC20Token(_tokenAddress).transfer(_to, _amount);\n', '  }\n', '}\n', '\n', 'contract StormToken is Token {\n', '\n', '\tbool public transfersEnabled = false;    // true if transfer/transferFrom are enabled, false if not\n', '\n', '\t// triggered when the total supply is increased\n', '\tevent Issuance(uint256 _amount);\n', '\t// triggered when the total supply is decreased\n', '\tevent Destruction(uint256 _amount);\n', '\n', '\n', '  /* Initializes contract */\n', '  function StormToken(address _crowdsaleAddress) public {\n', '    standard = "Storm Token v1.0";\n', '    name = "Storm Token";\n', '    symbol = "STORM"; // token symbol\n', '    decimals = 18;\n', '    crowdsaleContractAddress = _crowdsaleAddress;\n', '  }\n', '\n', "    // validates an address - currently only checks that it isn't null\n", '    modifier validAddress(address _address) {\n', '        require(_address != 0x0);\n', '        _;\n', '    }\n', '\n', '    // verifies that the address is different than this contract address\n', '    modifier notThis(address _address) {\n', '        require(_address != address(this));\n', '        _;\n', '    }\n', '\n', "    // allows execution only when transfers aren't disabled\n", '    modifier transfersAllowed {\n', '        assert(transfersEnabled);\n', '        _;\n', '    }\n', '\n', '   /**\n', '        @dev disables/enables transfers\n', '        can only be called by the contract owner\n', '\n', '        @param _disable    true to disable transfers, false to enable them\n', '    */\n', '    function disableTransfers(bool _disable) public onlyOwner {\n', '        transfersEnabled = !_disable;\n', '    }\n', '\n', '    /**\n', '        @dev increases the token supply and sends the new tokens to an account\n', '        can only be called by the contract owner\n', '\n', '        @param _to         account to receive the new amount\n', '        @param _amount     amount to increase the supply by\n', '    */\n', '    function issue(address _to, uint256 _amount)\n', '        public\n', '        onlyOwner\n', '        validAddress(_to)\n', '        notThis(_to)\n', '    {\n', '        supply = supply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '\n', '        Issuance(_amount);\n', '        Transfer(this, _to, _amount);\n', '    }\n', '\n', '    /**\n', '        @dev removes tokens from an account and decreases the token supply\n', '        can be called by the contract owner to destroy tokens from any account or by any holder to destroy tokens from his/her own account\n', '\n', '        @param _from       account to remove the amount from\n', '        @param _amount     amount to decrease the supply by\n', '    */\n', '    function destroy(address _from, uint256 _amount) public {\n', '        require(msg.sender == _from || msg.sender == owner); // validate input\n', '\n', '        balances[_from] = balances[_from].sub(_amount);\n', '        supply = supply.sub(_amount);\n', '\n', '        Transfer(_from, this, _amount);\n', '        Destruction(_amount);\n', '    }\n', '\n', '    // ERC20 standard method overrides with some extra functionality\n', '\n', '    /**\n', '        @dev send coins\n', '        throws on any error rather then return a false flag to minimize user errors\n', '        in addition to the standard checks, the function throws if transfers are disabled\n', '\n', '        @param _to      target address\n', '        @param _value   transfer amount\n', '\n', "        @return true if the transfer was successful, false if it wasn't\n", '    */\n', '    function transfer(address _to, uint256 _value) public transfersAllowed returns (bool success) {\n', '        assert(super.transfer(_to, _value));\n', '        return true;\n', '    }\n', '  \n', '    function transfers(address[] _recipients, uint256[] _values) public transfersAllowed onlyOwner returns (bool success) {\n', '        require(_recipients.length == _values.length); // Check if input data is correct\n', '\n', '        for (uint cnt = 0; cnt < _recipients.length; cnt++) {\n', '            assert(super.transfer(_recipients[cnt], _values[cnt]));\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        @dev an account/contract attempts to get the coins\n', '        throws on any error rather then return a false flag to minimize user errors\n', '        in addition to the standard checks, the function throws if transfers are disabled\n', '\n', '        @param _from    source address\n', '        @param _to      target address\n', '        @param _value   transfer amount\n', '\n', "        @return true if the transfer was successful, false if it wasn't\n", '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool success) {\n', '        assert(super.transferFrom(_from, _to, _value));\n', '        return true;\n', '    }\n', '}']
