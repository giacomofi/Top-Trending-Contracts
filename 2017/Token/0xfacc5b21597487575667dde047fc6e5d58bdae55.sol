['pragma solidity ^0.4.15;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  bool public stopped;\n', '\n', '  modifier stopInEmergency {\n', '    require(!stopped);\n', '    _;\n', '  }\n', '  \n', '  modifier onlyInEmergency {\n', '    require(stopped);\n', '    _;\n', '  }\n', '\n', '  // called by the owner on emergency, triggers stopped state\n', '  function emergencyStop() external onlyOwner {\n', '    stopped = true;\n', '  }\n', '\n', '  // called by the owner on end of emergency, returns to normal state\n', '  function release() external onlyOwner onlyInEmergency {\n', '    stopped = false;\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract PullPayment {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) public payments;\n', '  uint256 public totalPayments;\n', '\n', '  /**\n', '  * @dev Called by the payer to store the sent amount as credit to be pulled.\n', '  * @param dest The destination address of the funds.\n', '  * @param amount The amount to transfer.\n', '  */\n', '  function asyncSend(address dest, uint256 amount) internal {\n', '    payments[dest] = payments[dest].add(amount);\n', '    totalPayments = totalPayments.add(amount);\n', '  }\n', '\n', '  /**\n', '  * @dev withdraw accumulated balance, called by payee.\n', '  */\n', '  function withdrawPayments() {\n', '    address payee = msg.sender;\n', '    uint256 payment = payments[payee];\n', '\n', '    require(payment != 0);\n', '    require(this.balance >= payment);\n', '\n', '    totalPayments = totalPayments.sub(payment);\n', '    payments[payee] = 0;\n', '\n', '    assert(payee.send(payment));\n', '  }\n', '}\n', '\n', 'contract Crowdsale is Pausable, PullPayment {\n', '\n', '    using SafeMath for uint;\n', '\n', '  \tstruct Backer {\n', '\t\tuint weiReceived; // Amount of Ether given\n', '\t\tuint256 coinSent;\n', '\t}\n', '\n', '\n', '\t/*\n', '\t* Constants\n', '\t*/\n', '\t/* Minimum number of DARFtoken to sell */\n', '\tuint public constant MIN_CAP = 100000 ether; // 100,000 DARFtokens\n', '\n', '\t/* Maximum number of DARFtoken to sell */\n', '\tuint public constant MAX_CAP = 8000000 ether; // 8,000,000 DARFtokens\n', '\n', '\t/* Minimum amount to BUY */\n', '\tuint public constant MIN_BUY_ETHER = 100 finney;\n', '\n', '    /*\n', '    If backer buy over 1 000 000 DARF (2000 Ether) he/she can clame to become an investor after signing additional agreement with KYC procedure and get 1% of project profit per every 1 000 000 DARF\n', '    */\n', '    struct Potential_Investor {\n', '\t\tuint weiReceived; // Amount of Ether given\n', '\t\tuint256 coinSent;\n', '        uint  profitshare; // Amount of Ether given\n', '    }\n', '    uint public constant MIN_INVEST_BUY = 2000 ether;\n', '\n', '    /* But only 49%  of profit can be distributed this way for bakers who will be first\n', '    */\n', '\n', "    uint  public  MAX_INVEST_SHARE = 4900; //  4900 from 10000 is 49%, becouse Soliditi stil don't support fixed\n", '\n', '/* Crowdsale period */\n', '\tuint private constant CROWDSALE_PERIOD = 62 days;\n', '\n', '\t/* Number of DARFtokens per Ether */\n', '\tuint public constant COIN_PER_ETHER = 500; // 500 DARF per ether\n', '\n', '\tuint public constant BIGSELL = COIN_PER_ETHER * 100 ether; // when 1 buy is over 50000 DARF (or 100 ether), in means additional bonus 30%\n', '\n', '\n', '\t/*\n', '\t* Variables\n', '\t*/\n', '\t/* DARFtoken contract reference */\n', '\tDARFtoken public coin;\n', '\n', '    /* Multisig contract that will receive the Ether */\n', '\taddress public multisigEther;\n', '\n', '\t/* Number of Ether received */\n', '\tuint public etherReceived;\n', '\n', '\t/* Number of DARFtokens sent to Ether contributors */\n', '\tuint public coinSentToEther;\n', '\n', '\t/* Number of DARFtokens sent to potential investors */\n', '\tuint public invcoinSentToEther;\n', '\n', '\n', '\t/* Crowdsale start time */\n', '\tuint public startTime;\n', '\n', '\t/* Crowdsale end time */\n', '\tuint public endTime;\n', '\n', ' \t/* Is crowdsale still on going */\n', '\tbool public crowdsaleClosed;\n', '\n', '\t/* Backers Ether indexed by their Ethereum address */\n', '\tmapping(address => Backer) public backers;\n', '\n', '    mapping(address => Potential_Investor) public Potential_Investors; // list of potential investors\n', '\n', '\n', '\t/*\n', '\t* Modifiers\n', '\t*/\n', '\tmodifier minCapNotReached() {\n', '\t\trequire(!((now < endTime) || coinSentToEther >= MIN_CAP ));\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier respectTimeFrame() {\n', '\t\trequire(!((now < startTime) || (now > endTime )));\n', '\t\t_;\n', '\t}\n', '\n', '\t/*\n', '\t * Event\n', '\t*/\n', '\tevent LogReceivedETH(address addr, uint value);\n', '\tevent LogCoinsEmited(address indexed from, uint amount);\n', '\tevent LogInvestshare(address indexed from, uint share);\n', '\n', '\t/*\n', '\t * Constructor\n', '\t*/\n', '\tfunction Crowdsale(address _DARFtokenAddress, address _to) {\n', '\t\tcoin = DARFtoken(_DARFtokenAddress);\n', '\t\tmultisigEther = _to;\n', '\t}\n', '\n', '\t/*\n', '\t * The fallback function corresponds to a donation in ETH\n', '\t */\n', '\tfunction() stopInEmergency respectTimeFrame payable {\n', '\t\treceiveETH(msg.sender);\n', '\t}\n', '\n', '\t/*\n', '\t * To call to start the crowdsale\n', '\t */\n', '\tfunction start() onlyOwner {\n', '\t\trequire (startTime == 0);\n', '\n', '\t\tstartTime = now ;\n', '\t\tendTime =  now + CROWDSALE_PERIOD;\n', '\t}\n', '\n', '\t/*\n', '\t *\tReceives a donation in Ether\n', '\t*/\n', '\tfunction receiveETH(address beneficiary) internal {\n', "\t\trequire(!(msg.value < MIN_BUY_ETHER)); // Don't accept funding under a predefined threshold\n", "        if (multisigEther ==  beneficiary) return ; // Don't pay tokens if team refund ethers\n", '    uint coinToSend = bonus(msg.value.mul(COIN_PER_ETHER));// Compute the number of DARFtoken to send\n', '\t\trequire(!(coinToSend.add(coinSentToEther) > MAX_CAP));\n', '\n', '        Backer backer = backers[beneficiary];\n', '\t\tcoin.transfer(beneficiary, coinToSend); // Transfer DARFtokens right now\n', '\n', '\t\tbacker.coinSent = backer.coinSent.add(coinToSend);\n', '\t\tbacker.weiReceived = backer.weiReceived.add(msg.value); // Update the total wei collected during the crowdfunding for this backer\n', '        multisigEther.send(msg.value);\n', '\n', '        if (backer.weiReceived > MIN_INVEST_BUY) {\n', '\n', '            // calculate profit share\n', '            uint share = msg.value.mul(10000).div(MIN_INVEST_BUY); // 100 = 1% from 10000\n', '\t\t\t// compare to all profit share will LT 49%\n', '\t\t\tLogInvestshare(msg.sender,share);\n', '\t\t\tif (MAX_INVEST_SHARE > share) {\n', '\n', '\t\t\t\tPotential_Investor potential_investor = Potential_Investors[beneficiary];\n', '\t\t\t\tpotential_investor.coinSent = backer.coinSent;\n', '\t\t\t\tpotential_investor.weiReceived = backer.weiReceived; // Update the total wei collected during the crowdfunding for this potential investor\n', '                // add share to potential_investor\n', '\t\t\t\tif (potential_investor.profitshare == 0 ) {\n', '\t\t\t\t\tuint startshare = potential_investor.weiReceived.mul(10000).div(MIN_INVEST_BUY);\n', '\t\t\t\t\tMAX_INVEST_SHARE = MAX_INVEST_SHARE.sub(startshare);\n', '\t\t\t\t\tpotential_investor.profitshare = potential_investor.profitshare.add(startshare);\n', '\t\t\t\t} else {\n', '\t\t\t\t\tMAX_INVEST_SHARE = MAX_INVEST_SHARE.sub(share);\n', '\t\t\t\t\tpotential_investor.profitshare = potential_investor.profitshare.add(share);\n', '\t\t\t\t\tLogInvestshare(msg.sender,potential_investor.profitshare);\n', '\n', '\t\t\t\t}\n', '            }\n', '\n', '        }\n', '\n', '\t\tetherReceived = etherReceived.add(msg.value); // Update the total wei collected during the crowdfunding\n', '\t\tcoinSentToEther = coinSentToEther.add(coinToSend);\n', '\n', '\t\t// Send events\n', '\t\tLogCoinsEmited(msg.sender ,coinToSend);\n', '\t\tLogReceivedETH(beneficiary, etherReceived);\n', '\t}\n', '\n', '\n', '\t/*\n', '\t *Compute the DARFtoken bonus according to the BUYment period\n', '\t */\n', '\tfunction bonus(uint256 amount) internal constant returns (uint256) {\n', '\t\t/*\n', '\t\t\t25%in the first 15 days\n', '\t\t\t20% 16 days 18 days\n', '\t\t\t15% 19 days 21 days\n', '\t\t\t10% 22 days 24 days\n', '\t\t\t5% from 25 days to 27 days\n', '\t\t\t0% from 28 days to 42 days\n', '\n', '\t\t\t*/\n', '\n', '\t\tif (amount >=  BIGSELL ) {\n', '\t\t\t\tamount = amount.add(amount.div(10).mul(3));\n', '\t\t}// bonus 30% to buying  over 50000 DARF\n', '\t\tif (now < startTime.add(16 days)) return amount.add(amount.div(4));   // bonus 25%\n', '\t\tif (now < startTime.add(18 days)) return amount.add(amount.div(5));   // bonus 20%\n', '\t\tif (now < startTime.add(22 days)) return amount.add(amount.div(20).mul(3));   // bonus 15%\n', '\t\tif (now < startTime.add(25 days)) return amount.add(amount.div(10));   // bonus 10%\n', '\t\tif (now < startTime.add(28 days)) return amount.add(amount.div(20));   // bonus 5\n', '\n', '\n', '\t\treturn amount;\n', '\t}\n', '\n', '/*\n', ' * Finalize the crowdsale, should be called after the refund period\n', '*/\n', '\tfunction finalize() onlyOwner public {\n', '\n', '\t\tif (now < endTime) { // Cannot finalise before CROWDSALE_PERIOD or before selling all coins\n', '\t\t\trequire (coinSentToEther == MAX_CAP);\n', '\t\t}\n', '\n', '\t\trequire(!(coinSentToEther < MIN_CAP && now < endTime + 15 days)); // If MIN_CAP is not reached donors have 15days to get refund before we can finalise\n', '\n', '\t\trequire(multisigEther.send(this.balance)); // Move the remaining Ether to the multisig address\n', '\n', '\t\tuint remains = coin.balanceOf(this);\n', '\t\t// No burn all of my precisiossss!\n', '\t\t// if (remains > 0) { // Burn the rest of DARFtokens\n', '\t\t//\trequire(coin.burn(remains)) ;\n', '\t\t//}\n', '\t\tcrowdsaleClosed = true;\n', '\t}\n', '\n', '\t/*\n', '\t* Failsafe drain\n', '\t*/\n', '\tfunction drain() onlyOwner {\n', '\t\trequire(owner.send(this.balance)) ;\n', '\t}\n', '\n', '\t/**\n', '\t * Allow to change the team multisig address in the case of emergency.\n', '\t */\n', '\tfunction setMultisig(address addr) onlyOwner public {\n', '\t\trequire(addr != address(0)) ;\n', '\t\tmultisigEther = addr;\n', '\t}\n', '\n', '\t/**\n', '\t * Manually back DARFtoken owner address.\n', '\t */\n', '\tfunction backDARFtokenOwner() onlyOwner public {\n', '\t\tcoin.transferOwnership(owner);\n', '\t}\n', '\n', '\t/**\n', '\t * Transfer remains to owner in case if impossible to do min BUY\n', '\t */\n', '\tfunction getRemainCoins() onlyOwner public {\n', '\t\tvar remains = MAX_CAP - coinSentToEther;\n', '\t\tuint minCoinsToSell = bonus(MIN_BUY_ETHER.mul(COIN_PER_ETHER) / (1 ether));\n', '\n', '\t\trequire(!(remains > minCoinsToSell));\n', '\n', '\t\tBacker backer = backers[owner];\n', '\t\tcoin.transfer(owner, remains); // Transfer DARFtokens right now\n', '\n', '\t\tbacker.coinSent = backer.coinSent.add(remains);\n', '\n', '\n', '        coinSentToEther = coinSentToEther.add(remains);\n', '\n', '\t\t// Send events\n', '\t\tLogCoinsEmited(this ,remains);\n', '\t\tLogReceivedETH(owner, etherReceived);\n', '\t}\n', '\n', '\n', '\t/*\n', '  \t * When MIN_CAP is not reach:\n', '  \t * 1) backer call the "approve" function of the DARFtoken token contract with the amount of all DARFtokens they got in order to be refund\n', '  \t * 2) backer call the "refund" function of the Crowdsale contract with the same amount of DARFtokens\n', '   \t * 3) backer call the "withdrawPayments" function of the Crowdsale contract to get a refund in ETH\n', '   \t */\n', '\tfunction refund(uint _value) minCapNotReached public {\n', '\n', '\t\trequire (_value == backers[msg.sender].coinSent) ; // compare value from backer balance\n', '\n', '\t\tcoin.transferFrom(msg.sender, address(this), _value); // get the token back to the crowdsale contract\n', '\t\t// No burn all of my precisiossss!\n', '\t\t//require (coin.burn(_value)); // token sent for refund are burnt\n', '\n', '\t\tuint ETHToSend = backers[msg.sender].weiReceived;\n', '\t\tbackers[msg.sender].weiReceived=0;\n', '\n', '\t\tif (ETHToSend > 0) {\n', '\t\t\tasyncSend(msg.sender, ETHToSend); // pull payment to get refund in ETH\n', '\t\t}\n', '\t}\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract DARFtoken is StandardToken, Ownable {\n', '  string public constant name = "DARFtoken";\n', '  string public constant symbol = "DAR";\n', '  uint public constant decimals = 18;\n', '\n', '\n', '  // Constructor\n', '  function DARFtoken() {\n', '      totalSupply = 84000000 ether; // to make right number  84 000 000\n', '      balances[msg.sender] = totalSupply; // Send all tokens to owner\n', '  }\n', '\n', '  /**\n', '   *  Burn away the specified amount of DARFtoken tokens\n', '   */\n', '  function burn(uint _value) onlyOwner returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    Transfer(msg.sender, 0x0, _value);\n', '    return true;\n', '  }\n', '\n', '}']