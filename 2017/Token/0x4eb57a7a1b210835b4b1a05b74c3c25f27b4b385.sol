['pragma solidity ^0.4.15;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '}\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  modifier onlyPayloadSize(uint size) {\n', '    assert(msg.data.length == size + 4);\n', '    _;\n', '  }\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '  mapping (address => bool) public crowdsaleContracts;\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier onlyCrowdsaleContract() {\n', '    require(crowdsaleContracts[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  function addCrowdsaleContract(address _crowdsaleContract) onlyOwner {\n', '    crowdsaleContracts[_crowdsaleContract] = true;\n', '  }\n', '\n', '  function deleteCrowdsaleContract(address _crowdsaleContract) onlyOwner {\n', '    require(crowdsaleContracts[_crowdsaleContract]);\n', '    delete crowdsaleContracts[_crowdsaleContract];\n', '  }\n', '\n', '  function mint(address _to, uint256 _amount) onlyCrowdsaleContract canMint returns (bool) {\n', '\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(this, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  function finishMinting() onlyCrowdsaleContract returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract ABHCoin is MintableToken {\n', '\n', '  string public constant name = "ABH Coin";\n', '\n', '  string public constant symbol = "ABH";\n', '\n', '  uint32 public constant decimals = 18;\n', '\n', '}\n', '\n', '\n', '\n', 'contract PrivatePlacement is Ownable {\n', '\n', '  using SafeMath for uint;\n', '\n', '  address public multisig;\n', '\n', '  ABHCoin public token;\n', '\n', '  uint256 public hardcap;\n', '  uint public rate;\n', '  //uint public softcap;\n', '\n', '  bool refundAllowed;\n', '  bool privatePlacementIsOn = true;\n', '  bool PrivatePlacementFinished = false;\n', '  //uint public change;\n', '  //address public lastInvest;\n', '  mapping(address => uint) public balances;\n', '\n', '  function PrivatePlacement(address _ABHCoinAddress, address _multisig, uint _rate) {\n', '    multisig = _multisig;\n', '    rate = _rate * 1 ether;\n', '    hardcap = 120600000 * 1 ether; // token amount\n', '    token = ABHCoin(_ABHCoinAddress);\n', '  }\n', '\n', '  modifier isUnderHardCap() {\n', '    require(token.totalSupply() <= hardcap);\n', '    _;\n', '  }\n', '\n', '  function stopPrivatePlacement() onlyOwner {\n', '    privatePlacementIsOn = false;\n', '  }\n', '\n', '  function restartPrivatePlacement() onlyOwner {\n', '    require(!PrivatePlacementFinished);\n', '    privatePlacementIsOn = true;\n', '  }\n', '\n', '  function finishPrivatePlacement() onlyOwner {\n', '    require(!refundAllowed);\n', '    multisig.transfer(this.balance);\n', '    //lastInvest.transfer(change);\n', '    privatePlacementIsOn = false;\n', '    PrivatePlacementFinished = true;\n', '  }\n', '\n', '  function alloweRefund() onlyOwner {\n', '    refundAllowed = true;\n', '  }\n', '\n', '  function refund() public {\n', '    require(refundAllowed);\n', '    uint valueToReturn = balances[msg.sender];\n', '    balances[msg.sender] = 0;\n', '    msg.sender.transfer(valueToReturn);\n', '  }\n', '\n', '  function createTokens() isUnderHardCap payable {\n', '    require(privatePlacementIsOn);\n', '    uint valueWEI = msg.value;\n', '    uint tokens = rate.mul(msg.value).div(1 ether);\n', '    if (token.totalSupply() + tokens > hardcap){\n', '      tokens = hardcap - token.totalSupply();\n', '      valueWEI = tokens.mul(1 ether).div(rate);\n', '      token.mint(msg.sender, tokens);\n', '      uint change = msg.value - valueWEI;\n', '      bool isSent = msg.sender.call.gas(3000000).value(change)();\n', '    require(isSent);\n', '    } else {\n', '      token.mint(msg.sender, tokens);\n', '    }\n', '    balances[msg.sender] = balances[msg.sender].add(valueWEI);\n', '  }\n', '  \n', '  function changeRate(uint _rate) onlyOwner {\n', '     rate = _rate; \n', '  }\n', '\n', '  function() external payable {\n', '    createTokens();\n', '  }\n', '\n', '}']