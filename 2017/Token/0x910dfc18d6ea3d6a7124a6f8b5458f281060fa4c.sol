['contract SafeMath {\n', '    \n', '    uint256 constant public MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '\n', '    function safeAdd(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        require(x <= MAX_UINT256 - y);\n', '        return x + y;\n', '    }\n', '\n', '    function safeSub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        require(x >= y);\n', '        return x - y;\n', '    }\n', '\n', '    function safeMul(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        if (y == 0) {\n', '            return 0;\n', '        }\n', '        require(x <= (MAX_UINT256 / y));\n', '        return x * y;\n', '    }\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        assert(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != owner);\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnerUpdate(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = 0x0;\n', '    }\n', '\n', '    event OwnerUpdate(address _prevOwner, address _newOwner);\n', '}\n', '\n', 'contract Lockable is Owned {\n', '\n', '    uint256 public lockedUntilBlock;\n', '\n', '    event ContractLocked(uint256 _untilBlock, string _reason);\n', '\n', '    modifier lockAffected {\n', '        require(block.number > lockedUntilBlock);\n', '        _;\n', '    }\n', '\n', '    function lockFromSelf(uint256 _untilBlock, string _reason) internal {\n', '        lockedUntilBlock = _untilBlock;\n', '        ContractLocked(_untilBlock, _reason);\n', '    }\n', '\n', '\n', '    function lockUntil(uint256 _untilBlock, string _reason) onlyOwner public {\n', '        lockedUntilBlock = _untilBlock;\n', '        ContractLocked(_untilBlock, _reason);\n', '    }\n', '}\n', '\n', 'contract tokenRecipientInterface {\n', '  function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);\n', '}\n', '\n', '\n', 'contract OwnedInterface {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    modifier onlyOwner {\n', '        _;\n', '    }\n', '}\n', '\n', 'contract ERC20TokenInterface {\n', '  function totalSupply() public constant returns (uint256 _totalSupply);\n', '  function balanceOf(address _owner) public constant returns (uint256 balance);\n', '  function transfer(address _to, uint256 _value) public returns (bool success);\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '  function approve(address _spender, uint256 _value) public returns (bool success);\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract ERC20PrivateInterface {\n', '    uint256 supply;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowances;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract MintableToken is SafeMath, Owned, ERC20PrivateInterface {\n', '\n', '    uint public totalSupplyLimit;\n', '\n', '    event Mint(address indexed _to, uint256 _value);\n', '\n', '    function mintTokens(address _to, uint256 _amount) onlyOwner {\n', '        require(supply + _amount <= totalSupplyLimit);\n', '        supply = safeAdd(supply, _amount);\n', '        balances[_to] = safeAdd(balances[_to], _amount);\n', '        Mint(_to, _amount);\n', '        Transfer(0x0, _to, _amount);\n', '    }\n', '}\n', '\n', 'contract ERC20Token is ERC20TokenInterface, SafeMath, Owned, Lockable {\n', '\n', '    /* Public variables of the token */\n', '    string public standard;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupplyLimit;\n', '\n', '    /* Private variables of the token */\n', '    uint256 supply = 0;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowances;\n', '\n', '    event Mint(address indexed _to, uint256 _value);\n', '\n', '    /* Returns total supply of issued tokens */\n', '    function totalSupply() constant returns (uint256) {\n', '        return supply;\n', '    }\n', '\n', '    /* Returns balance of address */\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /* Transfers tokens from your address to other */\n', '    function transfer(address _to, uint256 _value) lockAffected returns (bool success) {\n', '        require(_to != 0x0 && _to != address(this));\n', '        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);  // Deduct senders balance\n', '        balances[_to] = safeAdd(balanceOf(_to), _value);                // Add recivers blaance\n', '        Transfer(msg.sender, _to, _value);                              // Raise Transfer event\n', '        return true;\n', '    }\n', '\n', '    /* Approve other address to spend tokens on your account */\n', '    function approve(address _spender, uint256 _value) lockAffected returns (bool success) {\n', '        allowances[msg.sender][_spender] = _value;        // Set allowance\n', '        Approval(msg.sender, _spender, _value);           // Raise Approval event\n', '        return true; \n', '    }\n', '\n', '    /* Approve and then communicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) lockAffected returns (bool success) {\n', '        tokenRecipientInterface spender = tokenRecipientInterface(_spender);    // Cast spender to tokenRecipient contract\n', '        approve(_spender, _value);                                              // Set approval to contract for _value\n', '        spender.receiveApproval(msg.sender, _value, this, _extraData);          // Raise method on _spender contract\n', '        return true;\n', '    }\n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) lockAffected returns (bool success) {\n', '        require(_to != 0x0 && _to != address(this));\n', '        balances[_from] = safeSub(balanceOf(_from), _value);                            // Deduct senders balance\n', '        balances[_to] = safeAdd(balanceOf(_to), _value);                                // Add recipient blaance\n', '        allowances[_from][msg.sender] = safeSub(allowances[_from][msg.sender], _value); // Deduct allowance for this address\n', '        Transfer(_from, _to, _value);                                                   // Raise Transfer event\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowances[_owner][_spender];\n', '    }\n', '\n', '    function mintTokens(address _to, uint256 _amount) onlyOwner {\n', '        require(supply + _amount <= totalSupplyLimit);\n', '        supply = safeAdd(supply, _amount);\n', '        balances[_to] = safeAdd(balances[_to], _amount);\n', '        Mint(_to, _amount);\n', '        Transfer(0x0, _to, _amount);\n', '    }\n', '\n', '    function salvageTokensFromContract(address _tokenAddress, address _to, uint _amount) onlyOwner{\n', '        ERC20TokenInterface(_tokenAddress).transfer(_to, _amount);\n', '    }\n', '}\n', '\n', 'contract X8XToken is ERC20Token {\n', '\n', '    /* Initializes contract */\n', '    function X8XToken() {\n', '        standard = "X8X token v1.0";\n', '        name = "X8XToken";\n', '        symbol = "X8X";\n', '        decimals = 18;\n', '        totalSupplyLimit = 100000000 * 10**18;\n', '        lockFromSelf(4894000, "Lock before crowdsale starts");\n', '    }\n', '}']