['pragma solidity ^0.4.15;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/BurnableToken.sol\n', '\n', '/**\n', '* @title Customized Burnable Token\n', '* @dev Token that can be irreversibly burned (destroyed).\n', '*/\n', 'contract BurnableToken is StandardToken, Ownable {\n', '\n', '    event Burn(address indexed burner, uint256 amount);\n', '\n', '    /**\n', '    * @dev Anybody can burn a specific amount of their tokens.\n', '    * @param _amount The amount of token to be burned.\n', '    */\n', '    function burn(uint256 _amount) public {\n', '        require(_amount > 0);\n', '        require(_amount <= balances[msg.sender]);\n', '        // no need to require _amount <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_amount);\n', '        totalSupply = totalSupply.sub(_amount);\n', '        Transfer(burner, address(0), _amount);\n', '        Burn(burner, _amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Owner can burn a specific amount of tokens of other token holders.\n', '    * @param _from The address of token holder whose tokens to be burned.\n', '    * @param _amount The amount of token to be burned.\n', '    */\n', '    function burnFrom(address _from, uint256 _amount) onlyOwner public {\n', '        require(_from != address(0));\n', '        require(_amount > 0);\n', '        require(_amount <= balances[_from]);\n', '        // no need to require _amount <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        balances[_from] = balances[_from].sub(_amount);\n', '        totalSupply = totalSupply.sub(_amount);\n', '        Transfer(_from, address(0), _amount);\n', '        Burn(_from, _amount);\n', '    }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '// File: contracts/GiftToken.sol\n', '\n', 'contract GiftToken is BurnableToken, Pausable {\n', '    string constant public name = "Giftcoin";\n', '    string constant public symbol = "GIFT";\n', '    uint8 constant public decimals = 18;\n', '\n', '    uint256 constant public INITIAL_TOTAL_SUPPLY = 2e7 * (uint256(10) ** decimals);\n', '\n', '    address private addressIco;\n', '\n', '    modifier onlyIco() {\n', '        require(msg.sender == addressIco);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Create GiftToken contract and set pause\n', '    * @param _ico The address of ICO contract.\n', '    */\n', '    function GiftToken (address _ico) {\n', '        require(_ico != address(0));\n', '\n', '        addressIco = _ico;\n', '\n', '        totalSupply = totalSupply.add(INITIAL_TOTAL_SUPPLY);\n', '        balances[_ico] = balances[_ico].add(INITIAL_TOTAL_SUPPLY);\n', '        Transfer(address(0), _ico, INITIAL_TOTAL_SUPPLY);\n', '\n', '        pause();\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address with pause feature for owner.\n', '    * @dev Only applies when the transfer is allowed by the owner.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) whenNotPaused public returns (bool) {\n', '        super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another with pause feature for owner.\n', '    * @dev Only applies when the transfer is allowed by the owner.\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) whenNotPaused public returns (bool) {\n', '        super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from ICO address to another address.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transferFromIco(address _to, uint256 _value) onlyIco public returns (bool) {\n', '        super.transfer(_to, _value);\n', '    }\n', '}\n', '\n', '// File: contracts/Whitelist.sol\n', '\n', '/**\n', ' * @title Whitelist contract\n', ' * @dev Whitelist for wallets, with additional data for every wallet.\n', '*/\n', 'contract Whitelist is Ownable {\n', '    struct WalletInfo {\n', '        string data;\n', '        bool whitelisted;\n', '    }\n', '\n', '    address private addressApi;\n', '\n', '    mapping(address => WalletInfo) public whitelist;\n', '\n', '    uint256 public whitelistLength = 0;\n', '\n', '    modifier onlyPrivilegeAddresses {\n', '        require(msg.sender == addressApi || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Set backend Api address.\n', '    * @dev Accept request from owner only.\n', '    * @param _api The address of backend API.\n', '    */\n', '    function setApiAddress(address _api) onlyOwner public {\n', '        require(_api != address(0));\n', '\n', '        addressApi = _api;\n', '    }\n', '\n', '    /**\n', '    * @dev Add wallet to whitelist.\n', '    * @dev Accept request from privilege adresses only.\n', '    * @param _wallet The address of wallet to add.\n', '    * @param _data The checksum of additional wallet data.\n', '    */  \n', '    function addWallet(address _wallet, string _data) onlyPrivilegeAddresses public {\n', '        require(_wallet != address(0));\n', '        require(!isWhitelisted(_wallet));\n', '        whitelist[_wallet].data = _data;\n', '        whitelist[_wallet].whitelisted = true;\n', '        whitelistLength++;\n', '    }\n', '\n', '    /**\n', '    * @dev Update additional data for whitelisted wallet.\n', '    * @dev Accept request from privilege adresses only.\n', '    * @param _wallet The address of whitelisted wallet to update.\n', '    * @param _data The checksum of new additional wallet data.\n', '    */      \n', '    function updateWallet(address _wallet, string _data) onlyPrivilegeAddresses public {\n', '        require(_wallet != address(0));\n', '        require(isWhitelisted(_wallet));\n', '        whitelist[_wallet].data = _data;\n', '    }\n', '\n', '    /**\n', '    * @dev Remove wallet from whitelist.\n', '    * @dev Accept request from privilege adresses only.\n', '    * @param _wallet The address of whitelisted wallet to remove.\n', '    */  \n', '    function removeWallet(address _wallet) onlyPrivilegeAddresses public {\n', '        require(_wallet != address(0));\n', '        require(isWhitelisted(_wallet));\n', '        delete whitelist[_wallet];\n', '        whitelistLength--;\n', '    }\n', '\n', '    /**\n', '    * @dev Check the specified wallet whether it is in the whitelist.\n', '    * @param _wallet The address of wallet to check.\n', '    */ \n', '    function isWhitelisted(address _wallet) constant public returns (bool) {\n', '        return whitelist[_wallet].whitelisted;\n', '    }\n', '\n', '    /**\n', '    * @dev Get the checksum of additional data for the specified whitelisted wallet.\n', '    * @param _wallet The address of wallet to get.\n', '    */ \n', '    function walletData(address _wallet) constant public returns (string) {\n', '        return whitelist[_wallet].data;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/Whitelistable.sol\n', '\n', 'contract Whitelistable {\n', '    Whitelist public whitelist;\n', '\n', '    modifier whenWhitelisted(address _wallet) {\n', '        require(whitelist.isWhitelisted(_wallet));\n', '        _;\n', '    }\n', '\n', '    function Whitelistable () public {\n', '        whitelist = new Whitelist();\n', '\n', '        whitelist.transferOwnership(msg.sender);\n', '    }\n', '}\n', '\n', '// File: contracts/GiftCrowdsale.sol\n', '\n', 'contract GiftCrowdsale is Pausable, Whitelistable {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public startTimestamp = 0;\n', '\n', '    uint256 public endTimestamp = 0;\n', '\n', '    uint256 public exchangeRate = 0;\n', '\n', '    uint256 public tokensSold = 0;\n', '\n', '    uint256 constant public minimumInvestment = 25e16; // 0.25 ETH\n', '\n', '    uint256 public minCap = 0;\n', '\n', '    uint256 public endFirstPeriodTimestamp = 0;\n', '\n', '    uint256 public endSecondPeriodTimestamp = 0;\n', '\n', '    uint256 public endThirdPeriodTimestamp = 0;\n', '\n', '    GiftToken public token = new GiftToken(this);\n', '\n', '    mapping(address => uint256) public investments;\n', '\n', '    modifier whenSaleIsOpen () {\n', '        require(now >= startTimestamp && now < endTimestamp);\n', '        _;\n', '    }\n', '\n', '    modifier whenSaleHasEnded () {\n', '        require(now >= endTimestamp);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Constructor for GiftCrowdsale contract.\n', '    * @dev Set first owner who can manage whitelist.\n', '    * @param _startTimestamp uint256 The start time ico.\n', '    * @param _endTimestamp uint256 The end time ico.\n', '    * @param _exchangeRate uint256 The price of the Gift token.\n', '    * @param _minCap The minimum amount of tokens sold required for the ICO to be considered successful.\n', '    */\n', '    function GiftCrowdsale (\n', '        uint256 _startTimestamp,\n', '        uint256 _endTimestamp,\n', '        uint256 _exchangeRate,\n', '        uint256 _minCap\n', '    ) public\n', '    {\n', '        require(_startTimestamp >= now && _endTimestamp > _startTimestamp);\n', '        require(_exchangeRate > 0);\n', '\n', '        startTimestamp = _startTimestamp;\n', '        endTimestamp = _endTimestamp;\n', '\n', '        exchangeRate = _exchangeRate;\n', '\n', '        endFirstPeriodTimestamp = _startTimestamp.add(1 days);\n', '\n', '        endSecondPeriodTimestamp = _startTimestamp.add(1 weeks);\n', '\n', '        endThirdPeriodTimestamp = _startTimestamp.add(2 weeks);\n', '\n', '        minCap = _minCap;\n', '    }\n', '\n', '    function discount() constant public returns (uint256) {\n', '        if (now > endThirdPeriodTimestamp)\n', '            return 0;\n', '        if (now > endSecondPeriodTimestamp)\n', '            return 15;\n', '        if (now > endFirstPeriodTimestamp)\n', '            return 25;\n', '        return 35;\n', '    }\n', '\n', '    function bonus() constant public returns (uint256) {\n', '        if (now > endSecondPeriodTimestamp)\n', '            return 0;\n', '        if (now > endFirstPeriodTimestamp)\n', '            return 3;\n', '        return 5;\n', '    }\n', '\n', '    /**\n', '    * @dev Function for sell tokens.\n', '    * @dev Sells tokens only for wallets from Whitelist while ICO lasts\n', '    */\n', '    function sellTokens () whenSaleIsOpen whenWhitelisted(msg.sender) whenNotPaused public payable {\n', '        require(msg.value > minimumInvestment);\n', '        uint256 _bonus = bonus();\n', '        uint256 _discount = discount();\n', '        uint256 tokensAmount = (msg.value).mul(exchangeRate).mul(_bonus.add(100)).div((100 - _discount));\n', '\n', '        token.transferFromIco(msg.sender, tokensAmount);\n', '\n', '        tokensSold = tokensSold.add(tokensAmount);\n', '\n', '        addInvestment(msg.sender, msg.value);\n', '    }\n', '\n', '    /**\n', '    * @dev Fallback function allowing the contract to receive funds\n', '    */\n', '    function () public payable {\n', '        sellTokens();\n', '    }\n', '\n', '    /**\n', '    * @dev Function for funds withdrawal\n', '    * @dev transfers funds to specified wallet once ICO is ended\n', '    * @param _wallet address wallet address, to  which funds  will be transferred\n', '    */\n', '    function withdrawal (address _wallet) onlyOwner whenSaleHasEnded external {\n', '        require(_wallet != address(0));\n', '        _wallet.transfer(this.balance);\n', '\n', '        token.transferOwnership(msg.sender);\n', '    }\n', '\n', '    /**\n', '    * @dev Function for manual token assignment (token transfer from ICO to requested wallet)\n', '    * @param _to address The address which you want transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function assignTokens (address _to, uint256 _value) onlyOwner external {\n', '        token.transferFromIco(_to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Add new investment to the ICO investments storage.\n', '    * @param _from The address of a ICO investor.\n', '    * @param _value The investment received from a ICO investor.\n', '    */\n', '    function addInvestment(address _from, uint256 _value) internal {\n', '        investments[_from] = investments[_from].add(_value);\n', '    }\n', '\n', '    /**\n', '    * @dev Function to return money to one customer, if mincap has not been reached\n', '    */\n', '    function refundPayment() whenWhitelisted(msg.sender) whenSaleHasEnded external {\n', '        require(tokensSold < minCap);\n', '        require(investments[msg.sender] > 0);\n', '\n', '        token.burnFrom(msg.sender, token.balanceOf(msg.sender));\n', '\n', '        uint256 investment = investments[msg.sender];\n', '        investments[msg.sender] = 0;\n', '        (msg.sender).transfer(investment);\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the token contract from ICO to a newOwner.\n', '    * @param _newOwner The address to transfer ownership to.\n', '    */\n', '    function transferTokenOwnership(address _newOwner) onlyOwner public {\n', '        token.transferOwnership(_newOwner);\n', '    }\n', '\n', '    function updateIcoEnding(uint256 _endTimestamp) onlyOwner public {\n', '        endTimestamp = _endTimestamp;\n', '    }\n', '}']