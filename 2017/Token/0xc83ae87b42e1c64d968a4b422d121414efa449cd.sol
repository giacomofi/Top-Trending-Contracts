['pragma solidity ^0.4.16;\n', '\n', 'library SafeMath {\n', '\tfunction mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '\t\tuint256 c = a * b;\n', '\t\tassert(a == 0 || c / a == b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '\t\tuint256 c = a / b;\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '\t\tassert(b <= a);\n', '\t\treturn a - b;\n', '\t}\n', '\n', '\tfunction add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '\t\tuint256 c = a + b;\n', '\t\tassert(c >= a);\n', '\t\treturn c;\n', '\t}\n', '}\n', '\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '}\n', '\n', 'contract BasicToken is owned {\n', '    using SafeMath for uint256;\n', '\n', '    // Token Variables Initialization\n', '    string public constant name = "Valorem";\n', '    string public constant symbol = "VLR";\n', '    uint8 public constant decimals = 18;\n', '\n', '    uint256 public totalSupply;\n', '    uint256 constant initialSupply = 200000000 * (10 ** uint256(decimals));\n', '\n', '    address public reserveAccount;\n', '    address public bountyAccount;\n', '\n', '    uint256 reserveToken;\n', '    uint256 bountyToken;\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    event Burn(address indexed _from,uint256 _value);\n', '    event FrozenFunds(address _account, bool _frozen);\n', '    event Transfer(address indexed _from,address indexed _to,uint256 _value);\n', '\n', '    function BasicToken () {\n', '        totalSupply = initialSupply;\n', '        balanceOf[msg.sender] = initialSupply;\n', '\n', '        bountyTransfers();\n', '    }\n', '\n', '    function bountyTransfers() internal {\n', '        reserveAccount = 0x000f1505CdAEb27197FB652FB2b1fef51cdc524e;\n', '        bountyAccount = 0x00892214999FdE327D81250407e96Afc76D89CB9;\n', '\n', '        reserveToken = ( totalSupply * 25 ) / 100;\n', '        bountyToken = ( reserveToken * 7 ) / 100;\n', '\n', '        balanceOf[msg.sender] = totalSupply - reserveToken;\n', '        balanceOf[bountyAccount] = bountyToken;\n', '        reserveToken = reserveToken - bountyToken;\n', '        balanceOf[reserveAccount] = reserveToken;\n', '\n', '        Transfer(msg.sender,reserveAccount,reserveToken);\n', '        Transfer(msg.sender,bountyAccount,bountyToken);\n', '    }\n', '\n', '    function _transfer(address _from,address _to,uint256 _value) internal {\n', '        require(balanceOf[_from] > _value);\n', '        require(!frozenAccount[_from]);\n', '        require(!frozenAccount[_to]);\n', '\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function transfer(address _to,uint256 _value) {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function freezeAccount(address _account, bool _frozen) onlyOwner {\n', '        frozenAccount[_account] = _frozen;\n', '        FrozenFunds(_account, _frozen);\n', '    }\n', '\n', '    function burnTokens(uint256 _value) onlyOwner returns (bool success) {\n', '        require(balanceOf[msg.sender] > _value);\n', '\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].add(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(msg.sender,_value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function newTokens(address _owner, uint256 _value) onlyOwner {\n', '        balanceOf[_owner] = balanceOf[_owner].add(_value);\n', '        totalSupply = totalSupply.add(_value);\n', '        Transfer(this, _owner, _value);\n', '    }\n', '\n', '    function escrowAmount(address _account, uint256 _value) onlyOwner {\n', '        _transfer(msg.sender, _account, _value);\n', '        freezeAccount(_account, true);\n', '    }\n', '\n', '    function () {\n', '        revert();\n', '    }\n', '\n', '}']