['pragma solidity ^0.4.13;\n', '\n', 'contract Token {\n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() constant returns (uint256 supply);\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '}\n', '\n', '\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function onePercent(uint256 a) internal constant returns (uint256){\n', '      return div(a,uint256(100));\n', '  }\n', '  \n', '  function power(uint256 a,uint256 b) internal constant returns (uint256){\n', '      return mul(a,10**b);\n', '  }\n', '}\n', '\n', 'contract StandardToken is Token {\n', '    using SafeMath for uint256;\n', "    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\n", '    mapping(address=>bool) internal withoutFee;\n', '    uint256 internal maxFee;\n', '    \n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        uint256 fee=getFee(_value);\n', '        if (balances[msg.sender].add(fee) >= _value && _value > 0) {\n', '            //Do Transfer\n', '            doTransfer(msg.sender,_to,_value,fee);\n', '            return true;\n', '        }  else { return false; }\n', '    }\n', '    \n', '    function getFee(uint256 _value) private returns (uint256){\n', '        uint256 onePercentOfValue=_value.onePercent();\n', '        uint256 fee=uint256(maxFee).power(decimals);\n', '         // Check if 1% burn fee exceeds maxfee\n', '        // If so then hard cap for burn fee is maxfee\n', '        if (_value.add(onePercentOfValue) >= fee) {\n', '            return fee;\n', '        // If 1% burn fee is less than maxfee\n', '        // then use 1% burn fee\n', '        } if (_value.add(onePercentOfValue) < fee) {\n', '            return onePercentOfValue;\n', '        }\n', '    }\n', '    function doTransfer(address _from,address _to,uint256 _value,uint256 fee) internal {\n', '            balances[_from] =balances[_from].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            Transfer(_from, _to, _value);\n', '            if(!withoutFee[_from]){\n', '                doBurn(msg.sender,fee);\n', '            }\n', '    }\n', '    \n', '    function doBurn(address _from,uint256 _value) private returns (bool success){\n', '        require(balanceOf(_from) >= _value);   // Check if the sender has enough\n', '        balances[_from] =balances[_from].sub(_value);            // Subtract from the sender\n', '        _totalSupply =_totalSupply.sub(_value);                      // Updates totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '    \n', '    function burn(address _from,uint256 _value) public returns (bool success) {\n', '        return doBurn(_from,_value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        uint256 fee=getFee(_value);        \n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0 && \n', '            (balances[msg.sender]>fee || withoutFee[msg.sender])) {\n', '            doTransfer(_from,_to,_value,fee);\n', '            uint256 decraseAllowed=_value;\n', '            if(!withoutFee[msg.sender]){\n', '                decraseAllowed.add(fee);\n', '            }\n', '            allowed[_from][msg.sender] =allowed[_from][msg.sender].sub(decraseAllowed);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function totalSupply() constant returns (uint totalSupply){\n', '        return _totalSupply;\n', '    }\n', '    \n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public _totalSupply;\n', '}\n', '\n', '\n', "//name this contract whatever you'd like\n", 'contract TestToken12 is StandardToken {\n', '\n', '    function () {\n', '        //if ether is sent to this address, send it back.\n', '        revert();\n', '    }\n', '\n', '    /* Public variables of the token */\n', '\n', '    /*\n', '    NOTE:\n', '    The following variables are OPTIONAL vanities. One does not have to include them.\n', '    They allow one to customise the token contract & in no way influences the core functionality.\n', '    Some wallets/interfaces might not even bother to look at this information.\n', '    */\n', '    string public name;                   //fancy name: eg Simon Bucks\n', '    string public symbol;                 //An identifier: eg SBX\n', "    string public version = 'H1.0';       //human 0.1 standard. Just an arbitrary versioning scheme.\n", '    address private _owner;\n', '    // Fee info\n', '    string public feeInfo = "Each operation costs 1% of the transaction amount, but not more than 250 tokens.";\n', '\n', '    function TestToken12() {\n', '        _totalSupply = 800000000000000000000000000;// Update total supply (100000 for example)    \n', '        _owner=msg.sender;\n', '        balances[msg.sender] =_totalSupply;\n', '        allocate(0x98592d09bA9B739BF9D563a601CB3F6c3A238475,55); // Airdrop\n', '        allocate(0x52B8fA840468e2dd978936B54d0DC83392f4B4aC,20); // Seed\n', '        allocate(0x7DfE12664C21c00B6A3d1cd09444fC2CC9e7f192,20); // Internal\n', '        allocate(0x353c65713fDf8169f14bE74012a59eF9BAB00e9b,5); // Future Airdrop\n', '        \n', '        maxFee=250; // max fee for transfer\n', '        \n', '        name = "Test Token 12";                                   // Set the name for display purposes\n', '        decimals = 18;                            // Amount of decimals for display purposes\n', '        symbol = "TT12";                               // Set the symbol for display purposes\n', '    }\n', '\n', '    function allocate(address _address,uint256 percent) private{\n', '        uint256 bal=_totalSupply.onePercent().mul(percent);\n', '        //balances[_address]=bal;\n', '        withoutFee[_address]=true;\n', '        doTransfer(msg.sender,_address,bal,0);\n', '    }\n', '\n', '    function addToWithoutFee(address _address) public {\n', '        require(msg.sender==_owner);        \n', '        withoutFee[_address]=true;\n', '    }\n', '\n', '    /* Approves and then calls the receiving contract */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', "        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n", '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { revert(); }\n', '        return true;\n', '    }\n', '}']