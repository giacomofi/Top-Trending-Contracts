['pragma solidity ^0.4.18;\n', '\n', 'contract Ownable {\n', '\n', '  address public owner = msg.sender;\n', '  address private newOwner = address(0);\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    require(_newOwner != address(0));      \n', '    newOwner = _newOwner;\n', '  }\n', '\n', '  function acceptOwnership() public {\n', '    require(msg.sender != address(0));\n', '    require(msg.sender == newOwner);\n', '\n', '    owner = newOwner;\n', '    newOwner = address(0);\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '\n', '  /**\n', '   * the total token supply.\n', '   */\n', '  uint256 public totalSupply;\n', '\n', '  /**\n', '   * @param _owner The address from which the balance will be retrieved\n', '   * @return The balance\n', '   */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance);\n', '\n', '  /**\n', '   * @notice send `_value` token to `_to` from `msg.sender`\n', '   * @param _to The address of the recipient\n', '   * @param _value The amount of token to be transferred\n', '   * @return Whether the transfer was successful or not\n', '   */\n', '  function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '  /**\n', '   * @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '   * @param _from The address of the sender\n', '   * @param _to The address of the recipient\n', '   * @param _value The amount of token to be transferred\n', '   * @return Whether the transfer was successful or not\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '  /**\n', '   * @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '   * @param _spender The address of the account able to transfer the tokens\n', '   * @param _value The amount of tokens to be approved for transfer\n', '   * @return Whether the approval was successful or not\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '  /**\n', '   * @param _owner The address of the account owning tokens\n', '   * @param _spender The address of the account able to transfer the tokens\n', '   * @return Amount of remaining tokens allowed to spent\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '  /**\n', '   * MUST trigger when tokens are transferred, including zero value transfers.\n', '   */\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '  /**\n', '   * MUST trigger on any successful call to approve(address _spender, uint256 _value)\n', '   */\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', ' * @dev Based on code by OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/StandardToken.sol\n', ' */\n', 'contract ERC20Token is ERC20 {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  mapping (address => uint256) balances;\n', '  \n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '   * @dev Gets the balance of the specified address.\n', '   * @param _owner The address to query the the balance of.\n', '   * @return An uint256 representing the amount owned by the passed address.\n', '   */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '  \n', '  /**\n', '   * @dev transfer token for a specified address\n', '   * @param _to The address to transfer to.\n', '   * @param _value The amount to be transferred.\n', '   */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] +=_value;\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value > 0);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    \n', '    balances[_to] += _value;\n', '    \n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract NitroToken is ERC20Token, Ownable {\n', '    \n', '  string public constant name = "Nitro";\n', '  string public constant symbol = "NOX";\n', '  uint8 public constant decimals = 18;\n', '\n', '  function NitroToken(uint256 _totalSupply) public {\n', '    totalSupply = _totalSupply;\n', '    balances[owner] = _totalSupply;\n', '    Transfer(address(0), owner, _totalSupply);\n', '  }\n', '  \n', '  function acceptOwnership() public {\n', '    address oldOwner = owner;\n', '    super.acceptOwnership();\n', '    balances[owner] = balances[oldOwner];\n', '    balances[oldOwner] = 0;\n', '    Transfer(oldOwner, owner, balances[owner]);\n', '  }\n', '\n', '}\n', '\n', 'contract Declaration {\n', '  \n', '  enum TokenTypes { crowdsale, interactive, icandy, consultant, team, reserve }\n', '  mapping(uint => uint256) public balances;\n', '  \n', '  uint256 public preSaleStart = 1511020800;\n', '  uint256 public preSaleEnd = 1511452800;\n', '    \n', '  uint256 public saleStart = 1512057600;\n', '  uint256 public saleStartFirstDayEnd = saleStart + 1 days;\n', '  uint256 public saleStartSecondDayEnd = saleStart + 3 days;\n', '  uint256 public saleEnd = 1514304000;\n', '  \n', '  uint256 public teamFrozenTokens = 4800000 * 1 ether;\n', '  uint256 public teamUnfreezeDate = saleEnd + 182 days;\n', '\n', '  uint256 public presaleMinValue = 5 ether;\n', ' \n', '  uint256 public preSaleRate = 1040;\n', '  uint256 public saleRate = 800;\n', '  uint256 public saleRateFirstDay = 1000;\n', '  uint256 public saleRateSecondDay = 920;\n', '\n', '  NitroToken public token;\n', '\n', '  function Declaration() public {\n', '    balances[uint8(TokenTypes.crowdsale)] = 60000000 * 1 ether;\n', '    balances[uint8(TokenTypes.interactive)] = 6000000 * 1 ether;\n', '    balances[uint8(TokenTypes.icandy)] = 3000000 * 1 ether;\n', '    balances[uint8(TokenTypes.consultant)] = 1200000 * 1 ether;\n', '    balances[uint8(TokenTypes.team)] = 7200000 * 1 ether;\n', '    balances[uint8(TokenTypes.reserve)] = 42600000 * 1 ether;\n', '    token = new NitroToken(120000000 * 1 ether);\n', '  }\n', '  \n', '  modifier withinPeriod(){\n', '    require(isPresale() || isSale());\n', '    _;\n', '  }\n', '  \n', '  function isPresale() public constant returns (bool){\n', '    return now>=preSaleStart && now<=preSaleEnd;\n', '  }\n', '\n', '  function isSale()  public constant returns (bool){\n', '    return now >= saleStart && now <= saleEnd;\n', '  }\n', '  \n', '  function rate() public constant returns (uint256) {\n', '    if (isPresale()) {\n', '      return preSaleRate;\n', '    } else if (now>=saleStart && now<=(saleStartFirstDayEnd)){\n', '      return saleRateFirstDay;\n', '    } else if (now>(saleStartFirstDayEnd) && now<=(saleStartSecondDayEnd)){\n', '      return saleRateSecondDay;\n', '    }\n', '    return saleRate;\n', '  }\n', '  \n', '}\n', '\n', 'contract Crowdsale is Declaration, Ownable{\n', '    \n', '    using SafeMath for uint256;\n', '\n', '    address public wallet;\n', '    \n', '    uint256 public weiLimit = 6 ether;\n', '    uint256 public satLimit = 30000000;\n', '\n', '    mapping(address => bool) users;\n', '    mapping(address => uint256) weiOwed;\n', '    mapping(address => uint256) satOwed;\n', '    mapping(address => uint256) weiTokensOwed;\n', '    mapping(address => uint256) satTokensOwed;\n', '    \n', '    uint256 public weiRaised;\n', '    uint256 public satRaised;\n', '\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '    \n', '    function Crowdsale(address _wallet) Declaration public {\n', '        wallet = _wallet;    \n', '    }\n', '    \n', '    function () public payable {\n', '        buy();\n', '    }\n', '\n', '    function weiFreeze(address _addr, uint256 _value) internal {\n', '        uint256 amount = _value * rate();\n', '        balances[0] = balances[0].sub(amount);\n', '        weiOwed[_addr] += _value;\n', '        weiTokensOwed[_addr] += amount;\n', '    }\n', '\n', '    function weiTransfer(address _addr, uint256 _value) internal {\n', '        uint256 amount = _value * rate();\n', '        balances[0] = balances[0].sub(amount);\n', '        token.transfer(_addr, amount);\n', '        weiRaised += _value;\n', '        TokenPurchase(_addr, _addr, _value, amount);\n', '    }\n', '\n', '    function buy() withinPeriod public payable returns (bool){\n', '        if (isPresale()) {\n', '          require(msg.value >= presaleMinValue);\n', '        }else{\n', '          require(msg.value > 0);\n', '        }\n', '        if (weiOwed[msg.sender]>0) {\n', '          weiFreeze(msg.sender, msg.value);\n', '        } else if (msg.value>weiLimit && !users[msg.sender]) {\n', '          weiFreeze(msg.sender, msg.value.sub(weiLimit));\n', '          weiTransfer(msg.sender, weiLimit);\n', '        } else {\n', '          weiTransfer(msg.sender, msg.value);\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    function _verify(address _addr) onlyOwner internal {\n', '        users[_addr] = true;\n', '        \n', '        weiRaised += weiOwed[_addr];\n', '        satRaised += satOwed[_addr];\n', '\n', '        token.transfer(_addr, weiTokensOwed[_addr] + satTokensOwed[_addr]);\n', '        \n', '        TokenPurchase(_addr, _addr, 0, weiTokensOwed[_addr] + satTokensOwed[_addr]);\n', '\n', '        weiOwed[_addr]=0;\n', '        satOwed[_addr]=0;\n', '        weiTokensOwed[_addr]=0;\n', '        satTokensOwed[_addr]=0;\n', '    }\n', '\n', '    function verify(address _addr) public returns(bool){\n', '        _verify(_addr);\n', '        return true;\n', '    }\n', '    \n', '    function isVerified(address _addr) public constant returns(bool){\n', '      return users[_addr];\n', '    }\n', '    \n', '    function getWeiTokensOwed(address _addr) public constant returns (uint256){\n', '        return weiTokensOwed[_addr];\n', '    }\n', '\n', '    function getSatTokensOwed(address _addr) public constant returns (uint256){\n', '        return satTokensOwed[_addr];\n', '    }\n', '\n', '    function owedTokens(address _addr) public constant returns (uint256){\n', '        return weiTokensOwed[_addr] + satTokensOwed[_addr];\n', '    }\n', '    \n', '    function getSatOwed(address _addr) public constant returns (uint256){\n', '        return satOwed[_addr];\n', '    }\n', '    \n', '    function getWeiOwed(address _addr) public constant returns (uint256){\n', '        return weiOwed[_addr];\n', '    }\n', '    \n', '    function satFreeze(address _addr, uint256 _wei, uint _sat) private {\n', '        uint256 amount = _wei * rate();\n', '        balances[0] = balances[0].sub(amount);\n', '        \n', '        satOwed[_addr] += _sat;\n', '        satTokensOwed[_addr] += amount;    \n', '    }\n', '\n', '    function satTransfer(address _addr, uint256 _wei, uint _sat) private {\n', '        uint256 amount = _wei * rate();\n', '        balances[0] = balances[0].sub(amount);\n', '        \n', '        token.transfer(_addr, amount);\n', '        TokenPurchase(_addr, _addr, _wei, amount);\n', '        satRaised += _sat;\n', '    }\n', '\n', '    function buyForBtc(\n', '        address _addr,\n', '        uint256 _sat,\n', '        uint256 _satOwed,\n', '        uint256 _wei,\n', '        uint256 _weiOwed\n', '    ) onlyOwner withinPeriod public {\n', '        require(_addr != address(0));\n', '        \n', '        satFreeze(_addr, _weiOwed, _satOwed);\n', '        satTransfer(_addr, _wei, _sat);\n', '    }\n', '    \n', '    function refundWei(address _addr, uint256 _amount) onlyOwner public returns (bool){\n', '        _addr.transfer(_amount);\n', '        balances[0] += weiTokensOwed[_addr];\n', '        weiTokensOwed[_addr] = 0;\n', '        weiOwed[_addr] = 0;\n', '        return true;\n', '    }\n', '  \n', '    function refundedSat(address _addr) onlyOwner public returns (bool){\n', '        balances[0] += satTokensOwed[_addr];\n', '        satTokensOwed[_addr] = 0;\n', '        satOwed[_addr] = 0;\n', '        return true;\n', '    }\n', '    \n', '    function sendOtherTokens(\n', '        uint8 _index,\n', '        address _addr,\n', '        uint256 _amount\n', '    ) onlyOwner public {\n', '        require(_addr!=address(0));\n', '\n', '        if (_index==uint8(TokenTypes.team) && now<teamUnfreezeDate) {\n', '            uint256 limit = balances[uint8(TokenTypes.team)].sub(teamFrozenTokens);\n', '            require(_amount<=limit);\n', '        }\n', '        \n', '        token.transfer(_addr, _amount);\n', '        balances[_index] = balances[_index].sub(_amount);\n', '        TokenPurchase(owner, _addr, 0, _amount);\n', '    }\n', '    \n', '    function rsrvToSale(uint256 _amount) onlyOwner public {\n', '        balances[uint8(TokenTypes.reserve)] = balances[uint8(TokenTypes.reserve)].sub(_amount);\n', '        balances[0] += _amount;\n', '    }\n', '    \n', '    function forwardFunds(uint256 amount) onlyOwner public {\n', '        wallet.transfer(amount);\n', '    }\n', '    \n', '    function setTokenOwner(address _addr) onlyOwner public {\n', '        token.transferOwnership(_addr);\n', '    }\n', '\n', '}']