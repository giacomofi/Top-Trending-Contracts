['pragma solidity ^0.4.10;\n', '\n', '/* taking ideas from FirstBlood token */\n', 'contract SafeMath {\n', '\n', '    /* function assert(bool assertion) internal { */\n', '    /*   if (!assertion) { */\n', '    /*     throw; */\n', '    /*   } */\n', '    /* }      // assert no longer needed once solidity is on 0.4.10 */\n', '\n', '    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '\n', '}\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/*  ERC 20 token */\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract CryptiblesVendingContract is StandardToken, SafeMath {\n', '\n', '    // metadata\n', '    bool public isOpen;\n', '    uint256 ethDivisor = 1000000000000000000;\n', '    string version = "1.0";\n', '\n', '    // Owner of this contract\n', '    address public owner;\n', '    uint256 public totalSupply;\n', '\n', '    // contracts\n', '    address public ethFundDeposit;      // Address to deposit ETH to. LS Address\n', '\n', '    // crowdsale parameters\n', '    uint256 public tokenExchangeRate = 1000000000000000000;\n', '    StandardToken cryptiToken;\n', '\n', '    address public currentTokenOffered = 0x16b262b66E300C7410f0771eAC29246A75fb8c48;\n', '\n', '    // events\n', '    event TransferCryptibles(address indexed _to, uint256 _value);\n', '    \n', '    // Functions with this modifier can only be executed by the owner\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    // constructor\n', '    function CryptiblesVendingContract()\n', '    {\n', '      isOpen = true;\n', '      totalSupply = 0;\n', '      owner = msg.sender;\n', '      cryptiToken =  StandardToken(currentTokenOffered);\n', '    }\n', '    \n', '    /// @dev Accepts ether and creates new Cryptible tokens.\n', '    function () payable {\n', '      require(isOpen);\n', '      require(msg.value != 0);\n', '      \n', '      require(cryptiToken.balanceOf(this) >= tokens);\n', '      \n', '      uint256 amountSent = msg.value;\n', "      uint256 tokens = safeMult(amountSent, tokenExchangeRate) / ethDivisor; // check that we're not over totals\n", '      totalSupply = safeAdd(totalSupply, tokens);\n', '      cryptiToken.transfer(msg.sender, tokens);\n', '      \n', '      TransferCryptibles(msg.sender, tokens);  // logs token transfer\n', '    }\n', '\n', '    /// @dev sends the ETH home\n', '    function finalize() onlyOwner{\n', '      isOpen = false;\n', '      ethFundDeposit.transfer(this.balance);  // send the eth to LS\n', '    }\n', '\n', '    /// @dev Allow to change the tokenExchangeRate\n', '    function changeTokenExchangeRate(uint256 _tokenExchangeRate) onlyOwner{\n', '        tokenExchangeRate = _tokenExchangeRate;\n', '    }\n', '\n', '    function setETHAddress(address _ethAddr) onlyOwner{\n', '      ethFundDeposit = _ethAddr;\n', '    }\n', '    \n', '    function getRemainingTokens(address _sendTokensTo) onlyOwner{\n', '        require(_sendTokensTo != address(this));\n', '        var tokensLeft = cryptiToken.balanceOf(this);\n', '        cryptiToken.transfer(_sendTokensTo, tokensLeft);\n', '    }\n', '\n', '    function changeIsOpenFlag(bool _value) onlyOwner{\n', '      isOpen = _value;\n', '    }\n', '\n', '    function changeCrytiblesAddress(address _newAddr) onlyOwner{\n', '      currentTokenOffered = _newAddr;\n', '      cryptiToken =  StandardToken(currentTokenOffered);\n', '    }\n', '}']