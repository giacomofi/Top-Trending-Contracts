['pragma solidity ^0.4.15;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will recieve the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// ACE Token is a first token of TokenStars platform\n', '// Copyright (c) 2017 TokenStars\n', '// Made by Aler Denisov\n', '// Permission is hereby granted, free of charge, to any person obtaining a copy\n', '// of this software and associated documentation files (the "Software"), to deal\n', '// in the Software without restriction, including without limitation the rights\n', '// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '// copies of the Software, and to permit persons to whom the Software is\n', '// furnished to do so, subject to the following conditions:\n', '\n', '// The above copyright notice and this permission notice shall be included in all\n', '// copies or substantial portions of the Software.\n', '\n', '// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '// SOFTWARE.\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract StarTokenInterface is MintableToken {\n', '    // Cheatsheet of inherit methods and events\n', '    // function transferOwnership(address newOwner);\n', '    // function allowance(address owner, address spender) constant returns (uint256);\n', '    // function transfer(address _to, uint256 _value) returns (bool);\n', '    // function transferFrom(address from, address to, uint256 value) returns (bool);\n', '    // function approve(address spender, uint256 value) returns (bool);\n', '    // function increaseApproval (address _spender, uint _addedValue) returns (bool success);\n', '    // function decreaseApproval (address _spender, uint _subtractedValue) returns (bool success);\n', '    // function finishMinting() returns (bool);\n', '    // function mint(address _to, uint256 _amount) returns (bool);\n', '    // event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    // event Mint(address indexed to, uint256 amount);\n', '    // event MintFinished();\n', '\n', '    // Custom methods and events\n', '    function openTransfer() public returns (bool);\n', '    function toggleTransferFor(address _for) public returns (bool);\n', '    function extraMint() public returns (bool);\n', '\n', '    event TransferAllowed();\n', '    event TransferAllowanceFor(address indexed who, bool indexed state);\n', '\n', '\n', '}\n', '\n', '// ACE Token is a first token of TokenStars platform\n', '// Copyright (c) 2017 TokenStars\n', '// Made by Aler Denisov\n', '// Permission is hereby granted, free of charge, to any person obtaining a copy\n', '// of this software and associated documentation files (the "Software"), to deal\n', '// in the Software without restriction, including without limitation the rights\n', '// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '// copies of the Software, and to permit persons to whom the Software is\n', '// furnished to do so, subject to the following conditions:\n', '\n', '// The above copyright notice and this permission notice shall be included in all\n', '// copies or substantial portions of the Software.\n', '\n', '// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '// SOFTWARE.\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract AceToken is StarTokenInterface {\n', '    using SafeMath for uint256;\n', '    \n', '    // ERC20 constants\n', '    string public constant name = "ACE Token";\n', '    string public constant symbol = "ACE";\n', '    uint public constant decimals = 0;\n', '\n', '    // Minting constants\n', '    uint256 public constant MAXSOLD_SUPPLY = 99000000;\n', '    uint256 public constant HARDCAPPED_SUPPLY = 165000000;\n', '\n', '    uint256 public investorSupply = 0;\n', '    uint256 public extraSupply = 0;\n', '    uint256 public freeToExtraMinting = 0;\n', '\n', '    uint256 public constant DISTRIBUTION_INVESTORS = 60;\n', '    uint256 public constant DISTRIBUTION_TEAM      = 20;\n', '    uint256 public constant DISTRIBUTION_COMMUNITY = 20;\n', '\n', '    address public teamTokensHolder;\n', '    address public communityTokensHolder;\n', '\n', '    // Transfer rules\n', '    bool public transferAllowed = false;\n', '    mapping (address=>bool) public specialAllowed;\n', '\n', '    // Transfer rules events\n', '    // event TransferAllowed();\n', '    // event TransferAllowanceFor(address indexed who, bool indexed state);\n', '\n', '    // Holders events\n', '    event ChangeCommunityHolder(address indexed from, address indexed to);\n', '    event ChangeTeamHolder(address indexed from, address indexed to);\n', '\n', '    /**\n', '    * @dev check transfer is allowed\n', '    */\n', '    modifier allowTransfer() {\n', '        require(transferAllowed || specialAllowed[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function AceToken() public {\n', '      teamTokensHolder = msg.sender;\n', '      communityTokensHolder = msg.sender;\n', '\n', '      ChangeTeamHolder(0x0, teamTokensHolder);\n', '      ChangeCommunityHolder(0x0, communityTokensHolder);\n', '    }\n', '\n', '    /**\n', '    * @dev change team tokens holder\n', '    * @param _tokenHolder The address of next team tokens holder\n', '    */\n', '    function setTeamTokensHolder(address _tokenHolder) onlyOwner public returns (bool) {\n', '      require(_tokenHolder != 0);\n', '      address temporaryEventAddress = teamTokensHolder;\n', '      teamTokensHolder = _tokenHolder;\n', '      ChangeTeamHolder(temporaryEventAddress, teamTokensHolder);\n', '      return true;\n', '    }\n', '\n', '    /**\n', '    * @dev change community tokens holder\n', '    * @param _tokenHolder The address of next community tokens holder\n', '    */\n', '    function setCommunityTokensHolder(address _tokenHolder) onlyOwner public returns (bool) {\n', '      require(_tokenHolder != 0);\n', '      address temporaryEventAddress = communityTokensHolder;\n', '      communityTokensHolder = _tokenHolder;\n', '      ChangeCommunityHolder(temporaryEventAddress, communityTokensHolder);\n', '      return true;\n', '    }\n', '\n', '    /**\n', "    * @dev Doesn't allow to send funds on contract!\n", '    */\n', '    function () payable public {\n', '        require(false);\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address if transfer is open\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) allowTransfer public returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    \n', '    /**\n', '    * @dev Transfer tokens from one address to another if transfer is open\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) allowTransfer public returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Open transfer for everyone or throws\n', '     */\n', '    function openTransfer() onlyOwner public returns (bool) {\n', '        require(!transferAllowed);\n', '        transferAllowed = true;\n', '        TransferAllowed();\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev allow transfer for the given address against global rules\n', '    * @param _for addres The address of special allowed transfer (required for smart contracts)\n', '     */\n', '    function toggleTransferFor(address _for) onlyOwner public returns (bool) {\n', '        specialAllowed[_for] = !specialAllowed[_for];\n', '        TransferAllowanceFor(_for, specialAllowed[_for]);\n', '        return specialAllowed[_for];\n', '    }\n', '\n', '    /**\n', '    * @dev Function to mint tokens for investor\n', '    * @param _to The address that will receive the minted tokens.\n', '    * @param _amount The amount of tokens to emit.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        require(_amount > 0);\n', '        totalSupply = totalSupply.add(_amount);\n', '        investorSupply = investorSupply.add(_amount);\n', '        freeToExtraMinting = freeToExtraMinting.add(_amount);\n', '\n', '        // Prevent to emit more than sale hardcap!\n', '        assert(investorSupply <= MAXSOLD_SUPPLY);\n', '        assert(totalSupply <= HARDCAPPED_SUPPLY);\n', '\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        Transfer(address(this), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Mint extra token to corresponding token and community holders\n', '    */\n', '    function extraMint() onlyOwner canMint public returns (bool) {\n', '      require(freeToExtraMinting > 0);\n', '\n', '      uint256 onePercent = freeToExtraMinting / DISTRIBUTION_INVESTORS;\n', '      uint256 teamPart = onePercent * DISTRIBUTION_TEAM;\n', '      uint256 communityPart = onePercent * DISTRIBUTION_COMMUNITY;\n', '      uint256 extraTokens = teamPart.add(communityPart);\n', '\n', '      totalSupply = totalSupply.add(extraTokens);\n', '      extraSupply = extraSupply.add(extraTokens);\n', '\n', '      uint256 leftToNextMinting = freeToExtraMinting % DISTRIBUTION_INVESTORS;\n', '      freeToExtraMinting = leftToNextMinting;\n', '\n', '      assert(totalSupply <= HARDCAPPED_SUPPLY);\n', '      assert(extraSupply <= HARDCAPPED_SUPPLY.sub(MAXSOLD_SUPPLY));\n', '\n', '      balances[teamTokensHolder] = balances[teamTokensHolder].add(teamPart);\n', '      balances[communityTokensHolder] = balances[communityTokensHolder].add(communityPart);\n', '\n', '      Mint(teamTokensHolder, teamPart);\n', '      Transfer(address(this), teamTokensHolder, teamPart);\n', '      Mint(communityTokensHolder, communityPart);\n', '      Transfer(address(this), communityTokensHolder, communityPart);\n', '\n', '      return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Increase approved amount to spend \n', '    * @param _spender The address which will spend the funds.\n', '    * @param _addedValue The amount of tokens to increase already approved amount. \n', '     */\n', '    function increaseApproval (address _spender, uint _addedValue)  public returns (bool success) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Decrease approved amount to spend \n', '    * @param _spender The address which will spend the funds.\n', '    * @param _subtractedValue The amount of tokens to decrease already approved amount. \n', '     */\n', '    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '\n', '    function finilize() onlyOwner public returns (bool) {\n', '        require(mintingFinished);\n', '        require(transferAllowed);\n', '\n', '        owner = 0x0;\n', '        return true;\n', '    }\n', '}']