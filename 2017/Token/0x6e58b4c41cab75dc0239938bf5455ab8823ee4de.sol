['pragma solidity ^0.4.4;\n', '\n', 'contract Token {\n', '\n', '    \n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    \n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    \n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    \n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    \n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract StandardToken is Token, Owned {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '       \n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        \n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '    \n', '    function distributeToken(address[] addresses, uint256 _value) {\n', '     for (uint i = 0; i < addresses.length; i++) {\n', '         balances[msg.sender] -= _value;\n', '         balances[addresses[i]] += _value;\n', '         Transfer(msg.sender, addresses[i], _value);\n', '     }\n', '}\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '    \n', '   \n', '    \n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    \n', '    \n', '    uint256 public totalSupply;\n', '}\n', '\n', '\n', '\n', 'contract B2X is StandardToken {\n', '\n', '    function () {\n', '        \n', '        throw;\n', '    }\n', '\n', '    \n', '    string public name;                   \n', '    uint8 public decimals;                \n', '    string public symbol;                 \n', '           \n', '\n', '    function B2X(\n', '        ) {\n', '        totalSupply = 21 * 10 ** 14;\n', '        balances[msg.sender] = totalSupply;              \n', '        name = "BTC2X";                                   \n', '        decimals = 8;                            \n', '        symbol = "B2X";                               \n', '    }\n', '\n', '\n', '    \n', '}']