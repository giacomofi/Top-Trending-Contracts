['pragma solidity ^0.4.15;\n', '\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'contract ERC20Interface\n', '{\n', '    function totalSupply() public constant returns (uint256);\n', '    function balanceOf(address owner) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// Additional desired wallet functionality\n', 'contract ERC20Burnable is ERC20Interface\n', '{\n', '    function burn(uint256 value) returns (bool);\n', '\n', '    event Burn(address indexed owner, uint256 value);\n', '}\n', '\n', '// Wallet implementation\n', 'contract VRTtoken is ERC20Burnable\n', '{\n', '    // Public data\n', '    string public constant name = "VRT token";\n', '    string public constant symbol = "VRT";\n', '    uint256 public constant decimals = 9; \n', '    address public owner;  \n', '\n', '    // Internal data\n', '    uint256 private constant initialSupply = 100000000; // 100,000,000\n', '    uint256 private currentSupply;\n', '    mapping(address => uint256) private balances;\n', '    mapping(address => mapping (address => uint256)) private allowed;\n', '\n', '    function VRTtoken()\n', '    {\n', '        // Increase initial supply by appropriate factor to allow\n', '        // for the desired number of decimals\n', '        currentSupply = initialSupply * (10 ** uint(decimals));\n', '\n', '        owner = msg.sender;\n', '        balances[owner] = currentSupply - 478433206500000;\n', '        balances[0xa878177D38B932D9E5C5DD5D6DF27759b07dC9E0] = 6000000000000;\n', '        balances[0x5af0ddFa8DFb5F29b5D41bFf41A8ef109c3F7072] = 236250000000;\n', '        balances[0x3082F7AFB5eC42a3E3e8a0524e443A561ff479A4] = 6817500000;\n', '        balances[0x41f464D2341E8Aa1EDF74E9aedD9B551E340dEC9] = 307500000000;\n', '        balances[0xc5DE97dE45cf59eaA97d89c68FaC549167B85D28] = 37500000000;\n', '        balances[0x687Eab8387faFca0E894c7890571cb8885d06252] = 75000000000;\n', '        balances[0xDB82638bA86A925BC56f0150Fa426642C3b69574] = 2250000000000;\n', '        balances[0xB24673108d0e63238ad9b7cb16C26B65Ab0901ad] = 150000000000;\n', '        balances[0xC50653E116b10f487b588eBCd5c1E4FfA49DD50e] = 3750000000000;\n', '        balances[0xC0b6eBF6485fF134453e537139cAB5a340125287] = 3750000000000;\n', '        balances[0xb8c180DD09E611ac253AB321650B8b5393D6A00C] = 1500000000000;\n', '        balances[0x5EE6ffb12ba911D7e1299e8F7e31924B3e52564b] = 3000000000000;\n', '        balances[0xFb8d70B3347f8BdAe3b9e7EAf7d623F721A91fCe] = 155921947000000;\n', '        balances[0xd2993BdE19Aa51FbEb8AfBE336D1E21b1b1FA074] = 178257000000000;\n', '        balances[0x4C84ED7adA883539F54c768932e9BBa8a9F1e784] = 117324947000000;\n', '        balances[0xFb8d70B3347f8BdAe3b9e7EAf7d623F721A91fCe] = 5866245000000;\n', '        Transfer(owner, 0xa878177D38B932D9E5C5DD5D6DF27759b07dC9E0, 6000000000000);\n', '        Transfer(owner, 0x5af0ddFa8DFb5F29b5D41bFf41A8ef109c3F7072, 236250000000);\n', '        Transfer(owner, 0x3082F7AFB5eC42a3E3e8a0524e443A561ff479A4, 6817500000);\n', '        Transfer(owner, 0x41f464D2341E8Aa1EDF74E9aedD9B551E340dEC9, 307500000000);\n', '        Transfer(owner, 0xc5DE97dE45cf59eaA97d89c68FaC549167B85D28, 37500000000);\n', '        Transfer(owner, 0x687Eab8387faFca0E894c7890571cb8885d06252, 75000000000);\n', '        Transfer(owner, 0xDB82638bA86A925BC56f0150Fa426642C3b69574, 2250000000000);\n', '        Transfer(owner, 0xB24673108d0e63238ad9b7cb16C26B65Ab0901ad, 150000000000);\n', '        Transfer(owner, 0xC50653E116b10f487b588eBCd5c1E4FfA49DD50e, 3750000000000);\n', '        Transfer(owner, 0xC0b6eBF6485fF134453e537139cAB5a340125287, 3750000000000);\n', '        Transfer(owner, 0xb8c180DD09E611ac253AB321650B8b5393D6A00C, 1500000000000);\n', '        Transfer(owner, 0x5EE6ffb12ba911D7e1299e8F7e31924B3e52564b, 3000000000000);\n', '        Transfer(owner, 0xFb8d70B3347f8BdAe3b9e7EAf7d623F721A91fCe, 155921947000000);\n', '        Transfer(owner, 0xd2993BdE19Aa51FbEb8AfBE336D1E21b1b1FA074, 178257000000000);\n', '        Transfer(owner, 0x4C84ED7adA883539F54c768932e9BBa8a9F1e784, 117324947000000);\n', '        Transfer(owner, 0xFb8d70B3347f8BdAe3b9e7EAf7d623F721A91fCe, 5866245000000);\n', '    }\n', '\n', '    function totalSupply() public constant \n', '        returns (uint256)\n', '    {\n', '        return currentSupply;\n', '    }\n', '\n', '    function balanceOf(address tokenOwner) public constant \n', '        returns (uint256)\n', '    {\n', '        return balances[tokenOwner];\n', '    }\n', '  \n', '    function transfer(address to, uint256 amount) public \n', '        returns (bool)\n', '    {\n', '        if (balances[msg.sender] >= amount && // Sender has enough?\n', "            balances[to] + amount > balances[to]) // Transfer won't cause overflow?\n", '        {\n', '            balances[msg.sender] -= amount;\n', '            balances[to] += amount;\n', '            Transfer(msg.sender, to, amount);\n', '            return true;\n', '        } \n', '        else // Invalid transfer\n', '        {\n', '            return false;\n', '        }\n', '    }\n', '  \n', '    function transferFrom(address from, address to, uint256 amount) public \n', '        returns (bool)\n', '    {\n', '        if (balances[from] >= amount && // Account has enough?\n', '            allowed[from][msg.sender] >= amount && // Sender can act for account for this amount?\n', "            balances[to] + amount > balances[to]) // Transfer won't cause overflow?\n", '        {\n', '            balances[from] -= amount;\n', '            allowed[from][msg.sender] -= amount;\n', '            balances[to] += amount;\n', '            Transfer(from, to, amount);\n', '            return true;\n', '        }\n', '        else // Invalid transfer\n', '        {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public \n', '        returns (bool)\n', '    {\n', '        allowed[msg.sender][spender] = amount;\n', '        Approval(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address tokenOwner, address spender) public constant \n', '        returns (uint256)\n', '    {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    function burn(uint256 amount) public \n', '        returns (bool)\n', '    {\n', '        require(msg.sender == owner); // Only the owner can burn\n', '\n', '        if (balances[msg.sender] >= amount) // Account has enough?\n', '        {\n', '            balances[msg.sender] -= amount;\n', '            currentSupply -= amount;\n', '            Burn(msg.sender, amount);\n', '            return true;\n', '        }\n', '        else // Not enough to burn\n', '        {\n', '            return false;\n', '        }\n', '    }\n', '}']