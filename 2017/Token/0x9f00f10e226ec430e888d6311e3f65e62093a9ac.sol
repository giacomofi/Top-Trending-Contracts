['pragma solidity ^0.4.10;\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/*  ERC 20 token */\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', '\n', '// requires 133,650,000 BAT deposited here\n', 'contract BATSafe {\n', '  mapping (address => uint256) allocations;\n', '  uint256 public unlockDate;\n', '  address public BAT;\n', '  uint256 public constant exponent = 10**18;\n', '\n', '  function BATSafe(address _BAT) {\n', '    BAT = _BAT;\n', '    unlockDate = now + 6 * 30 days;\n', '    allocations[0xc504E7BF907fccc389d08A1C302d03B7baB4E5DC] = 2000000;\n', '    allocations[0x2Cb6882D101d300694918e93F18b52327AA95302] = 2000000;\n', '  }\n', '\n', '  function unlock() external {\n', '    if(now < unlockDate) throw;\n', '    uint256 entitled = allocations[msg.sender];\n', '    allocations[msg.sender] = 0;\n', '    if(!StandardToken(BAT).transfer(msg.sender, entitled * exponent)) throw;\n', '  }\n', '\n', '}']