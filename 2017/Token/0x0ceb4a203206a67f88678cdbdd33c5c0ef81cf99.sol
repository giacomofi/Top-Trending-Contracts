['pragma solidity ^ 0.4 .2;\n', 'contract HEDGECRYPTOFUND {\n', "    string public standard = 'Token 0.1';\n", '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    address public owner;\n', '    address[] public users;\n', '    mapping(address => uint256) public balanceOf;\n', '    string public filehash;\n', '    mapping(address => mapping(address => uint256)) public allowance;\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    modifier onlyOwner() {\n', '        if (owner != msg.sender) {\n', '            throw;\n', '        } else {\n', '            _;\n', '        }\n', '    }\n', '\n', '    function HEDGECRYPTOFUND() {\n', '        owner = 0x877Ab331DA9687c483467d19E82c733956cb67B7;\n', '        address firstOwner = owner;\n', '        balanceOf[firstOwner] = 100000000000000000;\n', '        totalSupply = 100000000000000000;\n', "        name = 'HEDGECRYPTOFUND';\n", "        symbol = 'HCF';\n", "        filehash = '';\n", '        decimals = 8;\n', '        msg.sender.send(msg.value);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) {\n', '        if (balanceOf[msg.sender] < _value) throw;\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw;\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns(bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    function collectExcess() onlyOwner {\n', '        owner.send(this.balance - 2100000);\n', '    }\n', '\n', '    function() {}\n', '}']