['/*************************************************************************\n', ' * This contract has been merged with solidify\n', ' * https://github.com/tiesnetwork/solidify\n', ' *************************************************************************/\n', ' \n', ' pragma solidity ^0.4.11;\n', '\n', '/*************************************************************************\n', ' * import "./StandardToken.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/*************************************************************************\n', ' * import "./SafeMath.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b)  constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b)  constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b)  constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b)  constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/*************************************************************************\n', ' * import "./SafeMath.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken {\n', '\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '  uint256 public totalSupply;\n', '\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  using SafeMath for uint256;\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '  mapping(address => uint256) balances;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function StandardToken() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value)  public whenNotPaused returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value)  public whenNotPaused returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware - changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value)  public whenNotPaused returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '\n', '}\n', '/*************************************************************************\n', ' * import "./StandardToken.sol" : end\n', ' *************************************************************************/\n', '\n', 'contract CoinsOpenToken is StandardToken\n', '{\n', '\n', '\n', '  // Token informations\n', '  string public constant name = "COT";\n', '  string public constant symbol = "COT";\n', '  uint8 public constant decimals = 18;\n', '\n', '  uint public totalSupply = 23000000000000000000000000;\n', '  uint256 public presaleSupply = 2000000000000000000000000;\n', '  uint256 public saleSupply = 13000000000000000000000000;\n', '  uint256 public reserveSupply = 8000000000000000000000000;\n', '\n', '  uint256 public saleStartTime = 1511136000; /* Monday, November 20, 2017 12:00:00 AM */\n', '  uint256 public saleEndTime = 1513728000; /* Wednesday, December 20, 2017 12:00:00 AM */\n', '  uint256 public preSaleStartTime = 1508457600; /* Friday, October 20, 2017 12:00:00 AM */\n', '  uint256 public developerLock = 1500508800;\n', '\n', '  uint256 public totalWeiRaised = 0;\n', '\n', '  uint256 public preSaleTokenPrice = 1400;\n', '  uint256 public saleTokenPrice = 700;\n', '\n', '  mapping (address => uint256) lastDividend;\n', '  mapping (uint256 =>uint256) dividendList;\n', '  uint256 currentDividend = 0;\n', '  uint256 dividendAmount = 0;\n', '\n', '  struct BuyOrder {\n', '      uint256 wether;\n', '      address receiver;\n', '      address payer;\n', '      bool presale;\n', '  }\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount, bool presale);\n', '\n', '  /**\n', '   * event for notifying of a Ether received to distribute as dividend\n', '   * @param amount of dividend received\n', '   */\n', '  event DividendAvailable(uint amount);\n', '\n', '  /**\n', '   * event triggered when sending dividend to owner\n', '   * @param receiver who is receiving the payout\n', '   * @param amountofether paid received\n', '   */\n', '  event SendDividend(address indexed receiver, uint amountofether);\n', '\n', '  function() payable {\n', '    if (msg.sender == owner) {\n', '      giveDividend();\n', '    } else {\n', '      buyTokens(msg.sender);\n', '    }\n', '  }\n', '\n', '  function endSale() whenNotPaused {\n', '    require (!isInSale());\n', '    require (saleSupply != 0);\n', '    reserveSupply = reserveSupply.add(saleSupply);\n', '  }\n', '\n', '  /**\n', '   * Buy tokens during the sale/presale\n', '   * @param _receiver who should receive the tokens\n', '   */\n', '  function buyTokens(address _receiver) payable whenNotPaused {\n', '    require (msg.value != 0);\n', '    require (_receiver != 0x0);\n', '    require (isInSale());\n', '    bool isPresale = isInPresale();\n', '    if (!isPresale) {\n', '      checkPresale();\n', '    }\n', '    uint256 tokenPrice = saleTokenPrice;\n', '    if (isPresale) {\n', '      tokenPrice = preSaleTokenPrice;\n', '    }\n', '    uint256 tokens = (msg.value).mul(tokenPrice);\n', '    if (isPresale) {\n', '      if (presaleSupply < tokens) {\n', '        msg.sender.transfer(msg.value);\n', '        return;\n', '      }\n', '    } else {\n', '      if (saleSupply < tokens) {\n', '        msg.sender.transfer(msg.value);\n', '        return;\n', '      }\n', '    }\n', '    checkDividend(_receiver);\n', '    TokenPurchase(msg.sender, _receiver, msg.value, tokens, isPresale);\n', '    totalWeiRaised = totalWeiRaised.add(msg.value);\n', '    Transfer(0x0, _receiver, tokens);\n', '    balances[_receiver] = balances[_receiver].add(tokens);\n', '    if (isPresale) {\n', '      presaleSupply = presaleSupply.sub(tokens);\n', '    } else {\n', '      saleSupply = saleSupply.sub(tokens);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Pay this function to add the dividends\n', '   */\n', '  function giveDividend() payable whenNotPaused {\n', '    require (msg.value != 0);\n', '    dividendAmount = dividendAmount.add(msg.value);\n', '    dividendList[currentDividend] = (msg.value).mul(10000000000).div(totalSupply);\n', '    currentDividend = currentDividend.add(1);\n', '    DividendAvailable(msg.value);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns true if we are still in pre sale period\n', '   * @param _account The address to check and send dividends\n', '   */\n', '  function checkDividend(address _account) whenNotPaused {\n', '    if (lastDividend[_account] != currentDividend) {\n', '      if (balanceOf(_account) != 0) {\n', '        uint256 toSend = 0;\n', '        for (uint i = lastDividend[_account]; i < currentDividend; i++) {\n', '          toSend += balanceOf(_account).mul(dividendList[i]).div(10000000000);\n', '        }\n', '        if (toSend > 0 && toSend <= dividendAmount) {\n', '          _account.transfer(toSend);\n', '          dividendAmount = dividendAmount.sub(toSend);\n', '          SendDividend(_account, toSend);\n', '        }\n', '      }\n', '      lastDividend[_account] = currentDividend;\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address checking if they are dividends to pay\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    checkDividend(msg.sender);\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another checking if they are dividends to pay\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    checkDividend(_from);\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns true if we are still in pre sale period\n', '   */\n', '  function isInPresale() constant returns (bool) {\n', '    return saleStartTime > now;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns true if we are still in sale period\n', '   */\n', '  function isInSale() constant returns (bool) {\n', '    return saleEndTime >= now && preSaleStartTime <= now;\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function checkPresale() internal {\n', '    if (!isInPresale() && presaleSupply > 0) {\n', '      saleSupply = saleSupply.add(presaleSupply);\n', '      presaleSupply = 0;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Distribute tokens from the reserve\n', '   * @param _amount Amount to transfer\n', '   * @param _receiver Address of the receiver\n', '   */\n', '  function distributeReserveSupply(uint256 _amount, address _receiver) onlyOwner whenNotPaused {\n', '    require (_amount <= reserveSupply);\n', '    require (now >= developerLock);\n', '    checkDividend(_receiver);\n', '    balances[_receiver] = balances[_receiver].add(_amount);\n', '    reserveSupply.sub(_amount);\n', '    Transfer(0x0, _receiver, _amount);\n', '  }\n', '\n', '  /**\n', '   * Withdraw some Ether from contract\n', '   */\n', '  function withdraw(uint _amount) onlyOwner {\n', '    require (_amount != 0);\n', '    require (_amount < this.balance);\n', '    (msg.sender).transfer(_amount);\n', '  }\n', '\n', '  /**\n', '   * Withdraw Ether from contract\n', '   */\n', '  function withdrawEverything() onlyOwner {\n', '    (msg.sender).transfer(this.balance);\n', '  }\n', '\n', '}']