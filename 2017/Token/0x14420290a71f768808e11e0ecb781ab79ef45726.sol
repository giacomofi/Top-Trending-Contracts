['pragma solidity ^0.4.11;\n', '\n', '  contract ERC20Interface {\n', '      function totalSupply() constant returns (uint256 totalSupply);\n', '   \n', '      function balanceOf(address _owner) constant returns (uint256 balance);\n', '   \n', '      function transfer(address _to, uint256 _value) returns (bool success);\n', '   \n', '      function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '   \n', '      function approve(address _spender, uint256 _value) returns (bool success);\n', '   \n', '      function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '   \n', '      event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '   \n', '      event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '  }\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '     // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '   \n', '  contract PostbaseToken is ERC20Interface {\n', '       using SafeMath for uint256;\n', '\n', '      string public constant symbol = "PB2";\n', '      string public constant name = "Postbase PB2";\n', '      uint8 public constant decimals = 8;\n', '      uint256 _totalSupply = 10000000000000000;\n', '      \n', '      address public owner;\n', '      mapping(address => uint256) balances;\n', '      mapping(address => mapping (address => uint256)) allowed;\n', '   \n', '      // Constructor\n', '      function PostbaseToken() {\n', '          owner = msg.sender;\n', '          balances[owner] = _totalSupply;\n', '      }\n', '   \n', '      function totalSupply() constant returns (uint256 totalSupply) {\n', '          totalSupply = _totalSupply;\n', '      }\n', '   \n', '      function balanceOf(address _owner) constant returns (uint256 balance) {\n', '          return balances[_owner];\n', '      }\n', '   \n', '      function transfer(address _to, uint256 _amount) returns (bool success) {\n', '          \n', '              balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '              balances[_to] = balances[_to].add(_amount);\n', '              Transfer(msg.sender, _to, _amount);\n', '              return true;\n', '          \n', '      }\n', '   \n', '      function transferFrom(address _from, address _to, uint256 _amount) returns (bool success) {\n', '         \n', '          var _allowance = allowed[_from][msg.sender];\n', '\t        balances[_to] = balances[_to].add(_amount);\n', '    \t    balances[_from] = balances[_from].sub(_amount);\n', '\t        allowed[_from][msg.sender] = _allowance.sub(_amount);\n', '\t        Transfer(_from, _to, _amount);\n', '          return true;\n', '     }\n', '  \n', '     function approve(address _spender, uint256 _amount) returns (bool success) {\n', '         allowed[msg.sender][_spender] = _amount;\n', '         Approval(msg.sender, _spender, _amount);\n', '         return true;\n', '     }\n', '  \n', '     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '         return allowed[_owner][_spender];\n', '     }\n', ' }']