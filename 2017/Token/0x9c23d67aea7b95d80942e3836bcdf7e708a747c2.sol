['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Contactable token\n', ' * @dev Basic version of a contactable contract, allowing the owner to provide a string with their\n', ' * contact information.\n', ' */\n', 'contract Contactable is Ownable{\n', '\n', '    string public contactInformation;\n', '\n', '    /**\n', '     * @dev Allows the owner to set a string with their contact information.\n', '     * @param info The contact information to attach to the contract.\n', '     */\n', '    function setContactInformation(string info) onlyOwner public {\n', '         contactInformation = info;\n', '     }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract IRefundHandler {\n', '    function handleRefundRequest(address _contributor) external;\n', '}\n', '\n', '\n', 'contract LOCIcoin is StandardToken, Ownable, Contactable {\n', '    string public name = "";\n', '    string public symbol = "";\n', '    uint256 public constant decimals = 18;\n', '\n', '    mapping (address => bool) internal allowedOverrideAddresses;\n', '\n', '    bool public tokenActive = false;\n', '\n', '    modifier onlyIfTokenActiveOrOverride() {\n', '        // owner or any addresses listed in the overrides\n', '        // can perform token transfers while inactive\n', '        require(tokenActive || msg.sender == owner || allowedOverrideAddresses[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    modifier onlyIfTokenInactive() {\n', '        require(!tokenActive);\n', '        _;\n', '    }\n', '\n', '    modifier onlyIfValidAddress(address _to) {\n', "        // prevent 'invalid' addresses for transfer destinations\n", '        require(_to != 0x0);\n', "        // don't allow transferring to this contract's address\n", '        require(_to != address(this));\n', '        _;\n', '    }\n', '\n', '    event TokenActivated();\n', '\n', '    function LOCIcoin(uint256 _totalSupply, string _contactInformation ) public {\n', '        totalSupply = _totalSupply;\n', '        contactInformation = _contactInformation;\n', '\n', '        // msg.sender == owner of the contract\n', '        balances[msg.sender] = _totalSupply;\n', '    }\n', '\n', '    /// @dev Same ERC20 behavior, but reverts if not yet active.\n', '    /// @param _spender address The address which will spend the funds.\n', '    /// @param _value uint256 The amount of tokens to be spent.\n', '    function approve(address _spender, uint256 _value) public onlyIfTokenActiveOrOverride onlyIfValidAddress(_spender) returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    /// @dev Same ERC20 behavior, but reverts if not yet active.\n', '    /// @param _to address The address to transfer to.\n', '    /// @param _value uint256 The amount to be transferred.\n', '    function transfer(address _to, uint256 _value) public onlyIfTokenActiveOrOverride onlyIfValidAddress(_to) returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function ownerSetOverride(address _address, bool enable) external onlyOwner {\n', '        allowedOverrideAddresses[_address] = enable;\n', '    }\n', '\n', '    function ownerSetVisible(string _name, string _symbol) external onlyOwner onlyIfTokenInactive {        \n', '\n', '        // By holding back on setting these, it prevents the token\n', '        // from being a duplicate in ERC token searches if the need to\n', '        // redeploy arises prior to the crowdsale starts.\n', '        // Mainly useful during testnet deployment/testing.\n', '        name = _name;\n', '        symbol = _symbol;\n', '    }\n', '\n', '    function ownerActivateToken() external onlyOwner onlyIfTokenInactive {\n', '        require(bytes(symbol).length > 0);\n', '\n', '        tokenActive = true;\n', '        TokenActivated();\n', '    }\n', '\n', '    function claimRefund(IRefundHandler _refundHandler) external {\n', '        uint256 _balance = balances[msg.sender];\n', '\n', '        // Positive token balance required to perform a refund\n', '        require(_balance > 0);\n', '\n', '        // this mitigates re-entrancy concerns\n', '        balances[msg.sender] = 0;\n', '\n', '        // Attempt to transfer wei back to msg.sender from the\n', '        // crowdsale contract\n', '        // Note: re-entrancy concerns are also addressed within\n', '        // `handleRefundRequest`\n', '        // this will throw an exception if any\n', "        // problems or if refunding isn't enabled\n", '        _refundHandler.handleRefundRequest(msg.sender);\n', '\n', "        // If we've gotten here, then the wei transfer above\n", "        // worked (didn't throw an exception) and it confirmed\n", '        // that `msg.sender` had an ether balance on the contract.\n', '        // Now do token transfer from `msg.sender` back to\n', '        // `owner` completes the refund.\n', '        balances[owner] = balances[owner].add(_balance);\n', '        Transfer(msg.sender, owner, _balance);\n', '    }\n', '}']