['pragma solidity ^0.4.11;\n', '\n', 'contract Ownable {\n', '    \n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address from, address to);\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != 0x0);\n', '        OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    \n', '    function mul(uint256 a, uint256 b) internal  returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '    uint256 public totalSupply;\n', '    uint8 public decimals;\n', '    string public name;\n', '    string public symbol;\n', '    function balanceOf(address who) constant public returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    function allowance(address owner, address spender) constant public returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public  returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract SHNZ is ERC20, Ownable {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    uint256 private tokensSold;\n', '    \n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowances;\n', '  \n', '    event TokensIssued(address from, address to, uint256 amount);\n', '\n', '    function SHNZ() public {\n', '        totalSupply = 1000000000000000000;\n', '        decimals = 8;\n', '        name = "ShizzleNizzle";\n', '        symbol = "SHNZ";\n', '        balances[this] = totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _addr) public constant returns (uint256) {\n', '        return balances[_addr];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _amount) public returns (bool) {\n', '        require(balances[msg.sender] >= _amount);\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _amount) public returns (bool) {\n', '        allowances[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) public constant returns (uint256) {\n', '        return allowances[_owner][_spender];\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool) {\n', '        require(allowances[_from][msg.sender] >= _amount && balances[_from] >= _amount);\n', '        allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_amount);\n', '        balances[_from] = balances[_from].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function issueTokens(address _to, uint256 _amount) public onlyOwner {\n', '        require(_to != 0x0 && _amount > 0);\n', '        if(balances[this] <= _amount) {\n', '            balances[_to] = balances[_to].add(balances[this]);\n', '            Transfer(0x0, _to, balances[this]);\n', '            balances[this] = 0;\n', '        } else {\n', '            balances[this] = balances[this].sub(_amount);\n', '            balances[_to] = balances[_to].add(_amount);\n', '            Transfer(0x0, _to, _amount);\n', '        }\n', '    }\n', '\n', '    function getTotalSupply() public constant returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '}']