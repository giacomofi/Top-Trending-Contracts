['pragma solidity ^0.4.18;\n', '\n', 'interface tokenRecipient { \n', '    function receiveApproval(\n', '        address _from,\n', '        uint256 _value,\n', '        address _token, \n', '        bytes _extraData\n', '        ) \n', '        public; \n', '}\n', '\n', 'contract AgurisToken {\n', '    string public constant name = "Aguris";\n', '    bytes32 public constant symbol = "AGS";\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply;\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    function AgurisToken() \n', '    public \n', '    {\n', '        totalSupply = 1999998 * 10 ** uint256(decimals);  // Making double to distribute 50% and burn\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint _value)\n', '    internal \n', '    {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value)\n', '    public \n', '    {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '    \n', '    function burn(uint256 _value) \n', '    public \n', '    returns (bool success) \n', '    {\n', '        require(balanceOf[msg.sender] >= _value);   \n', '        balanceOf[msg.sender] -= _value;            \n', '        totalSupply -= _value;                      \n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '}']