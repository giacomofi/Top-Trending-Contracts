['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '\n', '    /**\n', '     * @dev modifier to allow actions only when the contract IS paused\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev modifier to allow actions only when the contract IS NOT paused\n', '     */\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() onlyOwner whenNotPaused returns (bool) {\n', '        paused = true;\n', '        Pause();\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() onlyOwner whenPaused returns (bool) {\n', '        paused = false;\n', '        Unpause();\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) constant returns (uint256);\n', '    function transfer(address to, uint256 value) returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) returns (bool) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) returns (bool);\n', '    function approve(address spender, uint256 value) returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amout of tokens to be transfered\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '        var _allowance = allowed[_from][msg.sender];\n', '\n', '        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '        // require (_value <= _allowance);\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title HoQuToken\n', ' * @dev HoQu.io token contract.\n', ' */\n', 'contract HoQuToken is StandardToken, Pausable {\n', '\n', '    string public constant name = "HOQU Token";\n', '    string public constant symbol = "HQX";\n', '    uint32 public constant decimals = 18;\n', '\n', '    /**\n', '     * @dev Give all tokens to msg.sender.\n', '     */\n', '    function HoQuToken(uint _totalSupply) {\n', '        require (_totalSupply > 0);\n', '        totalSupply = balances[msg.sender] = _totalSupply;\n', '    }\n', '\n', '    function transfer(address _to, uint _value) whenNotPaused returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) whenNotPaused returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ClaimableCrowdsale\n', ' * @title HoQu.io claimable crowdsale contract.\n', ' */\n', 'contract ClaimableCrowdsale is Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    // all accepted ethers will be sent to this address\n', '    address beneficiaryAddress;\n', '\n', '    // all remain tokens after ICO should go to that address\n', '    address public bankAddress;\n', '\n', '    // token instance\n', '    HoQuToken public token;\n', '\n', '    uint256 public maxTokensAmount;\n', '    uint256 public issuedTokensAmount = 0;\n', '    uint256 public minBuyableAmount;\n', '    uint256 public tokenRate; // amount of HQX per 1 ETH\n', '    \n', '    uint256 endDate;\n', '\n', '    bool public isFinished = false;\n', '\n', '    // buffer for claimable tokens\n', '    mapping(address => uint256) public tokens;\n', '    mapping(address => bool) public approved;\n', '    mapping(uint32 => address) internal tokenReceivers;\n', '    uint32 internal receiversCount;\n', '\n', '    /**\n', '    * Events for token purchase logging\n', '    */\n', '    event TokenBought(address indexed _buyer, uint256 _tokens, uint256 _amount);\n', '    event TokenAdded(address indexed _receiver, uint256 _tokens, uint256 _equivalentAmount);\n', '    event TokenToppedUp(address indexed _receiver, uint256 _tokens, uint256 _equivalentAmount);\n', '    event TokenSubtracted(address indexed _receiver, uint256 _tokens, uint256 _equivalentAmount);\n', '    event TokenSent(address indexed _receiver, uint256 _tokens);\n', '\n', '    modifier inProgress() {\n', '        require (!isFinished);\n', '        require (issuedTokensAmount < maxTokensAmount);\n', '        require (now <= endDate);\n', '        _;\n', '    }\n', '    \n', '    /**\n', '    * @param _tokenAddress address of a HQX token contract\n', '    * @param _bankAddress address for remain HQX tokens accumulation\n', '    * @param _beneficiaryAddress accepted ETH go to this address\n', '    * @param _tokenRate rate HQX per 1 ETH\n', '    * @param _minBuyableAmount min ETH per each buy action (in ETH wei)\n', '    * @param _maxTokensAmount ICO HQX capacity (in HQX wei)\n', '    * @param _endDate the date when ICO will expire\n', '    */\n', '    function ClaimableCrowdsale(\n', '        address _tokenAddress,\n', '        address _bankAddress,\n', '        address _beneficiaryAddress,\n', '        uint256 _tokenRate,\n', '        uint256 _minBuyableAmount,\n', '        uint256 _maxTokensAmount,\n', '        uint256 _endDate\n', '    ) {\n', '        token = HoQuToken(_tokenAddress);\n', '\n', '        bankAddress = _bankAddress;\n', '        beneficiaryAddress = _beneficiaryAddress;\n', '\n', '        tokenRate = _tokenRate;\n', '        minBuyableAmount = _minBuyableAmount;\n', '        maxTokensAmount = _maxTokensAmount;\n', '\n', '        endDate = _endDate;\n', '    }\n', '\n', '    /*\n', '     * @dev Set new HoQu token exchange rate.\n', '     */\n', '    function setTokenRate(uint256 _tokenRate) onlyOwner {\n', '        require (_tokenRate > 0);\n', '        tokenRate = _tokenRate;\n', '    }\n', '\n', '    /**\n', '     * Buy HQX. Tokens will be stored in contract until claim stage\n', '     */\n', '    function buy() payable inProgress whenNotPaused {\n', '        uint256 payAmount = msg.value;\n', '        uint256 returnAmount = 0;\n', '\n', '        // calculate token amount to be transfered to investor\n', '        uint256 tokensAmount = tokenRate.mul(payAmount);\n', '    \n', '        if (issuedTokensAmount + tokensAmount > maxTokensAmount) {\n', '            tokensAmount = maxTokensAmount.sub(issuedTokensAmount);\n', '            payAmount = tokensAmount.div(tokenRate);\n', '            returnAmount = msg.value.sub(payAmount);\n', '        }\n', '    \n', '        issuedTokensAmount = issuedTokensAmount.add(tokensAmount);\n', '        require (issuedTokensAmount <= maxTokensAmount);\n', '\n', '        storeTokens(msg.sender, tokensAmount);\n', '        TokenBought(msg.sender, tokensAmount, payAmount);\n', '\n', '        beneficiaryAddress.transfer(payAmount);\n', '    \n', '        if (returnAmount > 0) {\n', '            msg.sender.transfer(returnAmount);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Add HQX payed by another crypto (BTC, LTC). Tokens will be stored in contract until claim stage\n', '     */\n', '    function add(address _receiver, uint256 _equivalentEthAmount) onlyOwner inProgress whenNotPaused {\n', '        uint256 tokensAmount = tokenRate.mul(_equivalentEthAmount);\n', '        issuedTokensAmount = issuedTokensAmount.add(tokensAmount);\n', '\n', '        storeTokens(_receiver, tokensAmount);\n', '        TokenAdded(_receiver, tokensAmount, _equivalentEthAmount);\n', '    }\n', '\n', '    /**\n', '     * Add HQX by referral program. Tokens will be stored in contract until claim stage\n', '     */\n', '    function topUp(address _receiver, uint256 _equivalentEthAmount) onlyOwner whenNotPaused {\n', '        uint256 tokensAmount = tokenRate.mul(_equivalentEthAmount);\n', '        issuedTokensAmount = issuedTokensAmount.add(tokensAmount);\n', '\n', '        storeTokens(_receiver, tokensAmount);\n', '        TokenToppedUp(_receiver, tokensAmount, _equivalentEthAmount);\n', '    }\n', '\n', '    /**\n', '     * Reduce bought HQX amount. Emergency use only\n', '     */\n', '    function sub(address _receiver, uint256 _equivalentEthAmount) onlyOwner whenNotPaused {\n', '        uint256 tokensAmount = tokenRate.mul(_equivalentEthAmount);\n', '\n', '        require (tokens[_receiver] >= tokensAmount);\n', '\n', '        tokens[_receiver] = tokens[_receiver].sub(tokensAmount);\n', '        issuedTokensAmount = issuedTokensAmount.sub(tokensAmount);\n', '\n', '        TokenSubtracted(_receiver, tokensAmount, _equivalentEthAmount);\n', '    }\n', '\n', '    /**\n', '     * Internal method for storing tokens in contract until claim stage\n', '     */\n', '    function storeTokens(address _receiver, uint256 _tokensAmount) internal whenNotPaused {\n', '        if (tokens[_receiver] == 0) {\n', '            tokenReceivers[receiversCount] = _receiver;\n', '            receiversCount++;\n', '            approved[_receiver] = false;\n', '        }\n', '        tokens[_receiver] = tokens[_receiver].add(_tokensAmount);\n', '    }\n', '\n', '    /**\n', '     * Claim all bought HQX. Available tokens will be sent to transaction sender address if it is approved\n', '     */\n', '    function claim() whenNotPaused {\n', '        claimFor(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * Claim all bought HQX for specific approved address\n', '     */\n', '    function claimOne(address _receiver) onlyOwner whenNotPaused {\n', '        claimFor(_receiver);\n', '    }\n', '\n', '    /**\n', '     * Claim all bought HQX for all approved addresses\n', '     */\n', '    function claimAll() onlyOwner whenNotPaused {\n', '        for (uint32 i = 0; i < receiversCount; i++) {\n', '            address receiver = tokenReceivers[i];\n', '            if (approved[receiver] && tokens[receiver] > 0) {\n', '                claimFor(receiver);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Internal method for claiming tokens for specific approved address\n', '     */\n', '    function claimFor(address _receiver) internal whenNotPaused {\n', '        require(approved[_receiver]);\n', '        require(tokens[_receiver] > 0);\n', '\n', '        uint256 tokensToSend = tokens[_receiver];\n', '        tokens[_receiver] = 0;\n', '\n', '        token.transferFrom(bankAddress, _receiver, tokensToSend);\n', '        TokenSent(_receiver, tokensToSend);\n', '    }\n', '\n', '    function approve(address _receiver) onlyOwner whenNotPaused {\n', '        approved[_receiver] = true;\n', '    }\n', '    \n', '    /**\n', '     * Finish Sale.\n', '     */\n', '    function finish() onlyOwner {\n', '        require (issuedTokensAmount >= maxTokensAmount || now > endDate);\n', '        require (!isFinished);\n', '        isFinished = true;\n', '        token.transfer(bankAddress, token.balanceOf(this));\n', '    }\n', '\n', '    function getReceiversCount() constant onlyOwner returns (uint32) {\n', '        return receiversCount;\n', '    }\n', '\n', '    function getReceiver(uint32 i) constant onlyOwner returns (address) {\n', '        return tokenReceivers[i];\n', '    }\n', '    \n', '    /**\n', '     * Buy HQX. Tokens will be stored in contract until claim stage\n', '     */\n', '    function() external payable {\n', '        buy();\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ChangeableRateCrowdsale\n', ' * @dev HoQu.io Main Sale stage\n', ' */\n', 'contract ChangeableRateCrowdsale is ClaimableCrowdsale {\n', '\n', '    struct RateBoundary {\n', '        uint256 amount;\n', '        uint256 rate;\n', '    }\n', '\n', '    mapping (uint => RateBoundary) public rateBoundaries;\n', '    uint public currentBoundary = 0;\n', '    uint public numOfBoundaries = 0;\n', '    uint256 public nextBoundaryAmount;\n', '\n', '    /**\n', '    * @param _tokenAddress address of a HQX token contract\n', '    * @param _bankAddress address for remain HQX tokens accumulation\n', '    * @param _beneficiaryAddress accepted ETH go to this address\n', '    * @param _tokenRate rate HQX per 1 ETH\n', '    * @param _minBuyableAmount min ETH per each buy action (in ETH wei)\n', '    * @param _maxTokensAmount ICO HQX capacity (in HQX wei)\n', '    * @param _endDate the date when ICO will expire\n', '    */\n', '    function ChangeableRateCrowdsale(\n', '        address _tokenAddress,\n', '        address _bankAddress,\n', '        address _beneficiaryAddress,\n', '        uint256 _tokenRate,\n', '        uint256 _minBuyableAmount,\n', '        uint256 _maxTokensAmount,\n', '        uint256 _endDate\n', '    ) ClaimableCrowdsale(\n', '        _tokenAddress,\n', '        _bankAddress,\n', '        _beneficiaryAddress,\n', '        _tokenRate,\n', '        _minBuyableAmount,\n', '        _maxTokensAmount,\n', '        _endDate\n', '    ) {\n', '        rateBoundaries[numOfBoundaries++] = RateBoundary({\n', '            amount : 13777764 ether,\n', '            rate : 6000\n', '        });\n', '        rateBoundaries[numOfBoundaries++] = RateBoundary({\n', '            amount : 27555528 ether,\n', '            rate : 5750\n', '        });\n', '        rateBoundaries[numOfBoundaries++] = RateBoundary({\n', '            amount : 41333292 ether,\n', '            rate : 5650\n', '        });\n', '        rateBoundaries[numOfBoundaries++] = RateBoundary({\n', '            amount : 55111056 ether,\n', '            rate : 5550\n', '        });\n', '        rateBoundaries[numOfBoundaries++] = RateBoundary({\n', '            amount : 68888820 ether,\n', '            rate : 5450\n', '        });\n', '        rateBoundaries[numOfBoundaries++] = RateBoundary({\n', '            amount : 82666584 ether,\n', '            rate : 5350\n', '        });\n', '        rateBoundaries[numOfBoundaries++] = RateBoundary({\n', '            amount : 96444348 ether,\n', '            rate : 5250\n', '        });\n', '        rateBoundaries[numOfBoundaries++] = RateBoundary({\n', '            amount : 110222112 ether,\n', '            rate : 5150\n', '        });\n', '        rateBoundaries[numOfBoundaries++] = RateBoundary({\n', '            amount : 137777640 ether,\n', '            rate : 5000\n', '        });\n', '        nextBoundaryAmount = rateBoundaries[currentBoundary].amount;\n', '    }\n', '\n', '    /**\n', '     * Internal method to change rate if boundary is hit\n', '     */\n', '    function touchRate() internal {\n', '        if (issuedTokensAmount >= nextBoundaryAmount) {\n', '            currentBoundary++;\n', '            if (currentBoundary >= numOfBoundaries) {\n', '                nextBoundaryAmount = maxTokensAmount;\n', '            }\n', '            else {\n', '                nextBoundaryAmount = rateBoundaries[currentBoundary].amount;\n', '                tokenRate = rateBoundaries[currentBoundary].rate;\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Inherited internal method for storing tokens in contract until claim stage\n', '     */\n', '    function storeTokens(address _receiver, uint256 _tokensAmount) internal whenNotPaused {\n', '        ClaimableCrowdsale.storeTokens(_receiver, _tokensAmount);\n', '        touchRate();\n', '    }\n', '}']