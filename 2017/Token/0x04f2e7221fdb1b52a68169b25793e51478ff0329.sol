['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '  uint public totalSupply;\n', '\n', '  function balanceOf(address _owner) constant public returns (uint balance);\n', '  function transfer(address _to, uint _value) public returns (bool success);\n', '  function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '  function approve(address _spender, uint _value) public returns (bool success);\n', '  function allowance(address _owner, address _spender) constant public returns (uint remaining);\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint value);\n', '}\n', '\n', 'library SafeMath {\n', '   function mul(uint a, uint b) internal pure returns (uint) {\n', '     if (a == 0) {\n', '        return 0;\n', '      }\n', '\n', '      uint c = a * b;\n', '      assert(c / a == b);\n', '      return c;\n', '   }\n', '\n', '   function sub(uint a, uint b) internal pure returns (uint) {\n', '      assert(b <= a);\n', '      return a - b;\n', '   }\n', '\n', '   function add(uint a, uint b) internal pure returns (uint) {\n', '      uint c = a + b;\n', '      assert(c >= a);\n', '      return c;\n', '   }\n', '\n', '  function div(uint a, uint b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20 {\n', '    using SafeMath for uint;\n', '\n', '    mapping (address => uint) balances;\n', '    mapping (address => mapping (address => uint)) allowed;\n', '\n', '    function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) public returns (bool) {\n', '        if (balances[msg.sender] >= _value\n', '            && _value > 0\n', '            && _to != msg.sender\n', '            && _to != address(0)\n', '          ) {\n', '            balances[msg.sender] = balances[msg.sender].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '        if (balances[_from] >= _value\n', '            && allowed[_from][msg.sender] >= _value\n', '            && _value > 0\n', '            && _from != _to\n', '          ) {\n', '            balances[_to]   = balances[_to].add(_value);\n', '            balances[_from] = balances[_from].sub(_value);\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant public returns (uint) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public returns (bool) {\n', '        require(_spender != address(0));\n', '        // needs to be called twice -> first set to 0, then increase to another amount\n', '        // this is to avoid race conditions\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        // useless operation\n', '        require(_spender != address(0));\n', '\n', '        // perform operation\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        // useless operation\n', '        require(_spender != address(0));\n', '\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    modifier onlyPayloadSize(uint _size) {\n', '        require(msg.data.length >= _size + 4);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract Cappasity is StandardToken {\n', '\n', '    // Constants\n', '    // =========\n', '    string public constant name = "Cappasity";\n', '    string public constant symbol = "CAPP";\n', '    uint8 public constant decimals = 2;\n', '    uint public constant TOKEN_LIMIT = 10 * 1e9 * 1e2; // 10 billion tokens, 2 decimals\n', '\n', '    // State variables\n', '    // ===============\n', '    address public manager;\n', '\n', '    // Block token transfers until ICO is finished.\n', '    bool public tokensAreFrozen = true;\n', '\n', '    // Allow/Disallow minting\n', '    bool public mintingIsAllowed = true;\n', '\n', '    // events for minting\n', '    event MintingAllowed();\n', '    event MintingDisabled();\n', '\n', '    // Freeze/Unfreeze assets\n', '    event TokensFrozen();\n', '    event TokensUnfrozen();\n', '\n', '    // Constructor\n', '    // ===========\n', '    function Cappasity(address _manager) public {\n', '        manager = _manager;\n', '    }\n', '\n', '    // Fallback function\n', '    // Do not allow to send money directly to this contract\n', '    function() payable public {\n', '        revert();\n', '    }\n', '\n', '    // ERC20 functions\n', '    // =========================\n', '    function transfer(address _to, uint _value) public returns (bool) {\n', '        require(!tokensAreFrozen);\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '        require(!tokensAreFrozen);\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public returns (bool) {\n', '        require(!tokensAreFrozen);\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        require(!tokensAreFrozen);\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        require(!tokensAreFrozen);\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '\n', '    // PRIVILEGED FUNCTIONS\n', '    // ====================\n', '    modifier onlyByManager() {\n', '        require(msg.sender == manager);\n', '        _;\n', '    }\n', '\n', '    // Mint some tokens and assign them to an address\n', '    function mint(address _beneficiary, uint _value) external onlyByManager {\n', '        require(_value != 0);\n', '        require(totalSupply.add(_value) <= TOKEN_LIMIT);\n', '        require(mintingIsAllowed == true);\n', '\n', '        balances[_beneficiary] = balances[_beneficiary].add(_value);\n', '        totalSupply = totalSupply.add(_value);\n', '    }\n', '\n', '    // Disable minting. Can be enabled later, but TokenAllocation.sol only does that once.\n', '    function endMinting() external onlyByManager {\n', '        require(mintingIsAllowed == true);\n', '        mintingIsAllowed = false;\n', '        MintingDisabled();\n', '    }\n', '\n', '    // Enable minting. See TokenAllocation.sol\n', '    function startMinting() external onlyByManager {\n', '        require(mintingIsAllowed == false);\n', '        mintingIsAllowed = true;\n', '        MintingAllowed();\n', '    }\n', '\n', '    // Disable token transfer\n', '    function freeze() external onlyByManager {\n', '        require(tokensAreFrozen == false);\n', '        tokensAreFrozen = true;\n', '        TokensFrozen();\n', '    }\n', '\n', '    // Allow token transfer\n', '    function unfreeze() external onlyByManager {\n', '        require(tokensAreFrozen == true);\n', '        tokensAreFrozen = false;\n', '        TokensUnfrozen();\n', '    }\n', '}']