['pragma solidity ^0.4.16;\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract DailyCoinToken {\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 8;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function DailyCoinToken(\n', '    ) public {\n', '        totalSupply = 300000000 * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n', '        name = "Daily Coin";                                   // Set the name for display purposes\n', '        symbol = "DLC";                               // Set the symbol for display purposes\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', "        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '        totalSupply -= _value;                              // Update totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '///////////////////////////CROWDSALE///////////////////////////////\n', 'contract DailycoinCrowdsale {\n', '    uint256 public amountRaised = 0;\n', '\tuint256 public tokensSold = 0;\n', '    uint256 public totalToSale = 150 * (10**6) * (10**8);\n', '\tbool crowdsaleClosed = false;\n', '\t\n', '    uint public deadline;\n', '    address public beneficiary;\n', '    DailyCoinToken public tokenReward;\n', '\n', '    event SaleEnded(address recipient, uint256 totalAmountRaised);\n', '    event FundTransfer(address backer, uint256 amount, uint256 numOfTokens);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Setup the owner\n', '     */\n', '    function DailycoinCrowdsale() public {\n', '        beneficiary = 0x17Cb4341eF4d9132f9c86b335f6Dd6010F6AeA9a;\n', '        tokenReward = DailyCoinToken(0xaA33983Acfc48bE1D76e0f8Fe377FFe956ad84AD);\n', '        deadline = 1512997200 + 45 days; // start on 2017-Dec-11 8.00PM, last 45 days\n', '    }\n', '\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function () payable public {\n', '\t\trequire(!crowdsaleClosed);\n', '        uint256 amount = msg.value;\n', '\t\tuint256 numOfTokens = getNumTokens(amount);\n', '        amountRaised += amount;\n', '\t\ttokensSold += numOfTokens;\n', '        tokenReward.transfer(msg.sender, numOfTokens);\n', '        FundTransfer(msg.sender, amount, numOfTokens);\n', '    }\n', '\t\n', '\tfunction getNumTokens(uint256 _value) internal returns (uint256 numTokens) {\n', '\t\tuint256 multiple = 5000;\n', '        if (_value >= 10 * 10**18) {\n', '            if (now <= deadline - 35 days) { // first 10 days\n', '\t\t\t\tmultiple = multiple * 130 / 100;\n', '\t\t\t} else if (now <= deadline - 20 days) { // next 15 days\n', '\t\t\t\tmultiple = multiple * 120 / 100;\n', '\t\t\t} else { // 20 last days\n', '\t\t\t\tmultiple = multiple * 115 / 100;\n', '\t\t\t}\n', '        } else {\n', '\t\t\tif (now <= deadline - 35 days) { // first 10 days\n', '\t\t\t\tmultiple = multiple * 120 / 100;\n', '\t\t\t} else if (now <= deadline - 20 days) {  // next 15 days\n', '\t\t\t\tmultiple = multiple * 110 / 100;\n', '\t\t\t} else { // 20 last days\n', '\t\t\t\tmultiple = multiple * 105 / 100;\n', '\t\t\t}\n', '\t\t}\n', '\t\treturn multiple * 10**8 * _value / 10**18;\n', '\t}\n', '\n', '    modifier afterDeadline() { if (now >= deadline) _; }\n', '\n', '    /**\n', '     * Withdraw the funds\n', '     *\n', '     * Checks to see if goal or time limit has been reached, and if so, give raised value to beneficiary and burn left tokens in crowdsale.\n', '     */\n', '    function endFunding() afterDeadline public {\n', '\t\trequire(beneficiary == msg.sender);\n', '\t\trequire(!crowdsaleClosed);\n', '\t\tif (beneficiary.send(amountRaised)) {\n', '\t\t\tif (totalToSale > tokensSold) {\n', '\t\t\t\ttokenReward.burn(totalToSale - tokensSold);\n', '\t\t\t}\n', '\t\t\tcrowdsaleClosed = true;\n', '\t\t\tSaleEnded(beneficiary, amountRaised);\n', '\t\t}\n', '    }\n', '\t\n', '\tfunction withdraw(uint256 amount) afterDeadline public {\n', '\t\trequire(beneficiary == msg.sender);\n', '\t\tamount = amount * 1 ether;\n', '\t\tbeneficiary.transfer(amount);\n', '    }\n', '}']