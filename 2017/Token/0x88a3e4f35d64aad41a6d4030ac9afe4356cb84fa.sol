['pragma solidity ^0.4.17;\n', '\n', "//Based on OpenZeppelin's SafeMath\n", 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '//Presearch Token (PRE)\n', 'contract preToken {\n', '  using SafeMath for uint256;\n', '\n', '  //Vanity settings\n', '  string public constant name = "Presearch";\n', '  string public constant symbol = "PRE";\n', '  uint8 public constant decimals = 18;\n', '  uint public totalSupply = 0;\n', '\n', '  //Maximum supply of tokens that can ever be created 1,000,000,000\n', '  uint256 public constant maxSupply = 1000000000e18;\n', '\n', '  //Supply of tokens minted for presale distribution 250,000,000\n', '  uint256 public constant initialSupply = 250000000e18;\n', '\n', '  //Mappings\n', '  mapping (address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  //Contract owner address for additional permission\n', '  address public owner;\n', '\n', '  //CrowdsaleAddress to allow for token distribution to presale purchasers before the unlockDate\n', '  address public crowdsaleAddress;\n', '\n', '  //Allow trades at November 30th 2017 00:00:00 AM EST\n', '  uint public unlockDate = 1512018000;\n', '\n', '  //Events\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  //Prevent short address attack\n', '  modifier onlyPayloadSize(uint size) {\n', '     assert(msg.data.length == size + 4);\n', '     _;\n', '   }\n', '\n', '  //Checks if now is before unlock date and the msg.sender is not the contract owner or the crowdsaleAddress\n', '  //Allows the owner or crowdsaleAddress to transfer before the unlock date to facilitate distribution\n', '  modifier tradable {\n', '      if (now < unlockDate && msg.sender != owner && msg.sender != crowdsaleAddress) revert();\n', '      _;\n', '    }\n', '\n', '  //Checks if msg.sender is the contract owner\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  //Sends the initial supply of 250,000,000 tokens to the creator, sets the totalSupply, sets the owner and crowdsaleAddress to the deployer\n', '  function preToken() public {\n', '    balances[msg.sender] = initialSupply;\n', '    totalSupply = initialSupply;\n', '    owner = msg.sender;\n', '    crowdsaleAddress = msg.sender;\n', '  }\n', '\n', '  //balances\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '   }\n', '\n', '  //ERC-20 transfer with SafeMath\n', '  function transfer(address _to, uint256 _value) public onlyPayloadSize(2 * 32) tradable returns (bool success) {\n', '    require(_to != address(0));\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  //ERC-20 transferFrom with SafeMath\n', '  function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(2 * 32) tradable returns (bool success) {\n', '    require(_from != address(0) && _to != address(0));\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  //ERC-20 approve spender\n', '  function approve(address _spender, uint256 _value) public returns (bool success) {\n', '    require(_spender != address(0));\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  //ERC-20 allowance\n', '  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  //Allows only the contract owner to transfer ownership to someone else\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  //Allows only the owner to create new tokens as long as the number of tokens attempting to be minted\n', '  //plus the current totalSupply is less than or equal to 1,000,000,000\n', '  //increases the totalSupply by the amount of tokens minted\n', '  function mint(uint256 _amount) public onlyOwner {\n', '    if (totalSupply.add(_amount) <= maxSupply){\n', '      balances[msg.sender] = balances[msg.sender].add(_amount);\n', '      totalSupply = totalSupply.add(_amount);\n', '    }else{\n', '      revert();\n', '    }\n', '  }\n', '\n', '  //Allows the contract owner to burn (destroy) their own tokens\n', '  //Decreases the totalSupply so that tokens could be minted again at later date\n', '  function burn(uint256 _amount) public onlyOwner {\n', '    require(balances[msg.sender] >= _amount);\n', '    balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '    totalSupply = totalSupply.sub(_amount);\n', '  }\n', '\n', '  //Allows the owner to set the crowdsaleAddress\n', '  function setCrowdsaleAddress(address newCrowdsaleAddress) public onlyOwner {\n', '    require(newCrowdsaleAddress != address(0));\n', '    crowdsaleAddress = newCrowdsaleAddress;\n', '  }\n', '\n', '  //Allow the owner to update the unlockDate to allow trading sooner, but not later than the original unlockDate\n', '  function updateUnlockDate(uint _newDate) public onlyOwner {\n', '    require (_newDate <= 1512018000);\n', '      unlockDate=_newDate;\n', '  }\n', '\n', '}']