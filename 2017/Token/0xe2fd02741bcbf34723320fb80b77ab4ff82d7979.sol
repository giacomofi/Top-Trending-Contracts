['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }  \n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '  \n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '}\n', '\n', 'contract BCEToken {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    uint public constant _totalSupply = 21000000; // FOR SUPPLY = 0, DELETE "constant"\n', '    \n', '    string public constant symbol = "BCE";\n', '    string public constant name = "Bitcoin Ether";\n', '    uint8 public constant decimals = 18;\n', '\tuint256 public constant totalSupply = _totalSupply * 10 ** uint256(decimals);\n', '    \n', '    // 1 ether = 500 gigs\n', '    uint256 public constant RATE = 500; \n', '    \n', '    //FOR INITIAL SUPPLY = 0:\n', '    //address public owner;\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    \n', '    //FOR INITIAL SUPPLY = 0:\n', '    /*\n', '\t\t function () public payable {\n', '        createTokens();\n', '    \t} \n', '\t*/\n', '    \n', '    function GigsToken() public {\n', '        balances[msg.sender] = totalSupply;\n', '        \n', '        //FOR INITIAL SUPPLY = 0:\n', '        //owner = msg.sender;\n', '    }\n', '    \n', '    //FOR INITIAL SUPPLY = 0:\n', '    /*\n', '\t\t function createTokens() public payable {\n', '        require(msg.value > 0);\n', '        uint256 tokens = msg.value.mul(RATE);\n', '        balances[msg.sender] = balances[msg.sender].add(tokens);\n', '        _totalSupply = _totalSupply.add(tokens);\n', '        owner.transfer(msg.value);\n', '    \t} \n', '\t*/\n', '    \n', '    function balanceOf(address _owner) public constant returns (uint256 balance){\n', '        return balances[_owner];\n', '    }\n', '    function transfer(address _to, uint256 _value) internal returns (bool success) {\n', '\t\t require(_to != 0x0);\n', '        require(balances[msg.sender] >= _value && _value > 0);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\n', '\t\t require(_to != 0x0);\n', '        require(allowed [_from][msg.sender] >= 0 && balances[_from] >= _value && _value > 0);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '        \n', '    }\n', '    function approve(address _spender, uint256 _value) public returns (bool success){\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining){\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '\n', '}']