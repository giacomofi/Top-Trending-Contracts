['pragma solidity ^0.4.11;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Token {\n', '    \n', '    using SafeMath for uint256;\n', '     \n', '    string public symbol = "LPN";\n', '    string public name = "Litepool";\n', '    uint8 public constant decimals = 18;\n', '    uint256 _totalSupply = 35000000;\n', '    uint256 buyPrice = 769230769230769;\n', '    address owner = 0x5367B63897eDE5076cD7A970a0fd85750e27F745;\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Debug(string message, uint number);\n', '    mapping(address => uint256) balances;\n', ' \n', '    mapping(address => mapping (address => uint256)) allowed;\n', ' \n', '    function Token() public {\n', '        balances[owner] = _totalSupply * 10 ** 18;\n', '    }\n', '   \n', '   function changeBuyPrice(uint price)\n', '   {\n', '       if (msg.sender == owner){\n', '        buyPrice = price * 10 ** 18;    \n', '       }\n', '   }\n', '    \n', '    function totalSupply() constant returns (uint256 totalSupply) {        \n', '        return _totalSupply;\n', '    }\n', ' \n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner].div(10 ** uint256(decimals));\n', '    }\n', ' \n', '    function transfer(address _to, uint256 _amount) internal returns (bool success) {\n', '        if (balances[msg.sender] >= _amount\n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', ' \n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) internal returns (bool success) {\n', '        if (balances[_from] >= _amount\n', '            && allowed[_from][msg.sender] >= _amount\n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[_from] -= _amount;\n', '            allowed[_from][msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', ' \n', '    function approve(address _spender, uint256 _amount) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', ' \n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '     // fallback function can be used to buy tokens\n', '      function () public payable {\n', '       // require(msg.sender != owner);   //owner should not be buying any tokens\n', '        buy(msg.sender);\n', '    }\n', '    function buy(address beneficiary) payable public returns (uint amount) {\n', '        amount = msg.value.div(buyPrice);                   // calculates the amount\n', '        amount = amount * 10 ** 18;\n', '        require(balances[owner] >= amount);               // checks if it has enough to sell\n', "        balances[beneficiary] = balances[beneficiary].add(amount);  // adds the amount to buyer's balance\n", "        balances[owner] = balances[owner].sub(amount);     // subtracts amount from seller's balance\n", '        owner.transfer(msg.value);\n', '        Transfer(owner, msg.sender, amount);               // execute an event reflecting the change\n', '        return amount;                                    // ends function and returns\n', '    }\n', '}']