['pragma solidity ^0.4.18;\n', '\n', '// ----------------------------------------------------------------------------\n', '//\n', '// SNTC SaintCoin token public sale contract\n', '//\n', '// For details, please visit: https://saintcoin.io\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '//\n', '// SafeMath3\n', '//\n', '// Adapted from https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n', '// (no need to implement division)\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', 'library SafeMath3 {\n', '\n', '  function mul(uint a, uint b) internal pure returns (uint c) {\n', '    c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '  }\n', '\n', '  function sub(uint a, uint b) internal pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal pure returns (uint c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '  }\n', '\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '//\n', '// Owned contract\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract Owned {\n', '\n', '  address public owner;\n', '  address public newOwner;\n', '\n', '  // Events ---------------------------\n', '\n', '  event OwnershipTransferProposed(address indexed _from, address indexed _to);\n', '  event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '  // Modifier -------------------------\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  // Functions ------------------------\n', '\n', '  function Owned() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function transferOwnership(address _newOwner) onlyOwner public {\n', '    require(_newOwner != owner);\n', '    require(_newOwner != address(0x0));\n', '    OwnershipTransferProposed(owner, _newOwner);\n', '    newOwner = _newOwner;\n', '  }\n', '\n', '  function acceptOwnership() public {\n', '    require(msg.sender == newOwner);\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '    newOwner = address(0x0);\n', '  }\n', '\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '//\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract ERC20Interface {\n', '\n', '  // Events ---------------------------\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '  // Functions ------------------------\n', '\n', '  function totalSupply() constant public returns (uint);\n', '  function balanceOf(address _owner) constant public returns (uint balance);\n', '  function transfer(address _to, uint _value) public returns (bool success);\n', '  function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '  function approve(address _spender, uint _value) public returns (bool success);\n', '  function allowance(address _owner, address _spender) constant public returns (uint remaining);\n', '\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '//\n', '// ERC Token Standard #20\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract ERC20Token is ERC20Interface, Owned {\n', '  \n', '  using SafeMath3 for uint;\n', '\n', '  uint public tokensIssuedTotal = 0;\n', '\n', '  mapping(address => uint) balances;\n', '  mapping(address => mapping (address => uint)) internal allowed;\n', '\n', '  // Functions ------------------------\n', '\n', '  /* Total token supply */\n', '\n', '  function totalSupply() constant public returns (uint) {\n', '    return tokensIssuedTotal;\n', '  }\n', '\n', '  /* Get the account balance for an address */\n', '\n', '  function balanceOf(address _owner) constant public returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', "  /* Transfer the balance from owner's account to another account */\n", '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // update balances\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '\n', '    // log event\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /* Allow _spender to withdraw from your account up to _value */\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    // approval amount cannot exceed the balance\n', '    require(balances[msg.sender] >= _value);\n', '      \n', '    // update allowed amount\n', '    allowed[msg.sender][_spender] = _value;\n', '    \n', '    // log event\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', "  /* Spender of tokens transfers tokens from the owner's balance */\n", '  /* Must be pre-approved by owner */\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    // update balances and allowed amount\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '    // log event\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /* Returns the amount of tokens approved by the owner */\n', '  /* that can be transferred by spender */\n', '\n', '  function allowance(address _owner, address _spender) constant public returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract SaintCoinToken is ERC20Token {\n', '    /* Utility variable */\n', '  \n', '    uint constant E6 = 10**6;\n', '  \n', '    /* Basic token data */\n', '  \n', '    string public constant name = "Saint Coins";\n', '    string public constant symbol = "SAINT";\n', '    uint8 public constant decimals = 0;\n', '    \n', '    /* Saint coinds per ETH */\n', '  \n', '    uint public tokensPerEth = 1000;\n', '\n', '    /* Fundation contract addresses */\n', '    \n', '    mapping(address => bool) public grantedContracts;\n', '\n', '    /* HelpCoin address */\n', '\n', '    address public helpCoinAddress;\n', '\n', '    event GrantedOrganization(bool isGranted);\n', '\n', '    function SaintCoinToken(address _helpCoinAddress) public { \n', '      helpCoinAddress = _helpCoinAddress;          \n', '    }\n', '    \n', '    function setHelpCoinAddress(address newHelpCoinWalletAddress) public onlyOwner {\n', '        helpCoinAddress = newHelpCoinWalletAddress;\n', '    }\n', '\n', '    function sendTo(address _to, uint256 _value) public {\n', '        require(isAuthorized(msg.sender));\n', '        require(balances[_to] + _value >= balances[_to]);\n', '        \n', '        uint tokens = tokensPerEth.mul(_value) / 1 ether;\n', '        \n', '        balances[_to] += tokens;\n', '        tokensIssuedTotal += tokens;\n', '\n', '        Transfer(msg.sender, _to, tokens);\n', '    }\n', '\n', '    function grantAccess(address _address) public onlyOwner {\n', '        grantedContracts[_address] = true;\n', '        GrantedOrganization(grantedContracts[_address]);\n', '    }\n', '    \n', '    function revokeAccess(address _address) public onlyOwner {\n', '        grantedContracts[_address] = false;\n', '        GrantedOrganization(grantedContracts[_address]);\n', '    }\n', '\n', '    function isAuthorized(address _address) public constant returns (bool) {\n', '        return grantedContracts[_address];\n', '    }\n', '}\n', '\n', 'contract AfricaSaveTheChildren_SaintCoinCaller is Owned {\n', '    address saintCoinAddress;\n', '    address fundationWalletAddress;\n', '    uint public percentForHelpCoin = 10;\n', '\n', '    function AfricaSaveTheChildren_SaintCoinCaller(address _saintCoinAddress, address _fundationWalletAddress) public {\n', '        require(_saintCoinAddress != address(0x0));\n', '        require(_fundationWalletAddress != address(0x0));\n', '        \n', '        saintCoinAddress = _saintCoinAddress;\n', '        fundationWalletAddress = _fundationWalletAddress;\n', '    }\n', '    \n', '    function setFoundationAddress(address newFoundationWalletAddress) public onlyOwner {\n', '        fundationWalletAddress = newFoundationWalletAddress;\n', '    }\n', '\n', '    function setPercentForHelpCoin(uint _percentForHelpCoin) public onlyOwner {\n', '    \tpercentForHelpCoin = _percentForHelpCoin;\n', '    }\n', '\n', '    function () public payable {\n', '        SaintCoinToken sct = SaintCoinToken(saintCoinAddress);\n', '        sct.sendTo(msg.sender, msg.value);\n', '        \n', '        fundationWalletAddress.transfer(this.balance * (100 - percentForHelpCoin) / 100);\n', '        sct.helpCoinAddress().transfer(this.balance);\n', '    }\n', '}']