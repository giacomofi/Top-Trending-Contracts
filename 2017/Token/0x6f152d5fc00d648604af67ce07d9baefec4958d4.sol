['pragma solidity ^0.4.18;\n', '\n', 'contract MyOwned {\n', '\n', '    address public owner;\n', '\n', '    function MyOwned () \n', '\n', '        public { \n', '            owner = msg.sender; \n', '    }\n', '\n', '    modifier onlyOwner { \n', '\n', '        require (msg.sender == owner); \n', '        _; \n', '    }\n', '\n', '    function transferOwnership ( \n', '\n', '        address newOwner) \n', '\n', '        public onlyOwner { \n', '            owner = newOwner; \n', '        }\n', '}\n', '\n', 'interface tokenRecipient { \n', '\n', '    function receiveApproval (\n', '\n', '        address _from, \n', '        uint256 _value, \n', '        address _token, \n', '        bytes _extraData) \n', '        public; \n', '}\n', '\n', 'contract MyToken is MyOwned {   \n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    \n', '    uint256 public sellPrice;\n', '    uint256 public buyPrice;    \n', '    \n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => bool) public frozenAccount;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    event Burn (address indexed from, uint256 value);\n', '    event FrozenFunds (address target,bool frozen);\n', '    event Transfer (address indexed from,address indexed to,uint256 value);\n', '    \n', '    function MyToken (\n', '\n', '        string tokenName,\n', '        string tokenSymbol,\n', '        uint8 decimalUnits,\n', '        uint256 initialSupply) \n', '\n', '        public {        \n', '\n', '        name = tokenName;\n', '        symbol = tokenSymbol;\n', '        decimals = decimalUnits;\n', '        totalSupply = initialSupply;\n', '        balanceOf[msg.sender] = initialSupply;\n', '    }\n', '    \n', '    function freezeAccount (\n', '\n', '        address target,\n', '        bool freeze) \n', '\n', '        public onlyOwner {\n', '\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '    function _transfer (\n', '\n', '        address _from, \n', '        address _to, \n', '        uint _value) \n', '\n', '        internal {\n', '\n', '        require (_to != 0x0); \n', '        require (balanceOf[_from] >= _value); \n', '        require (balanceOf[_to] + _value >= balanceOf[_to]); \n', '\n', '        require(!frozenAccount[_from]); \n', '        require(!frozenAccount[_to]); \n', '\n', '        balanceOf[_from] -= _value;  \n', '        balanceOf[_to] += _value; \n', '        Transfer(_from, _to, _value);\n', '\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    function transfer (\n', '\n', '        address _to, \n', '        uint256 _value) \n', '\n', '        public {\n', '\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function transferFrom (\n', '\n', '        address _from, \n', '        address _to, \n', '        uint256 _value) \n', '\n', '        public returns (bool success) {\n', '\n', '        require(_value <= allowance[_from][msg.sender]); \n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve (\n', '\n', '        address _spender, \n', '        uint256 _value) \n', '\n', '        public returns (bool success) {\n', '\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall (\n', '\n', '        address _spender, \n', '        uint256 _value, \n', '        bytes _extraData)\n', '\n', '        public returns (bool success) {\n', '\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '\n', '        if (approve(_spender, _value)) {\n', '\n', '            spender.receiveApproval(\n', '                msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function burnSupply (\n', '\n', '        uint256 _value) \n', '\n', '        public onlyOwner returns (bool success) {\n', '\n', '        totalSupply -= _value;  \n', '\n', '        return true;\n', '    }\n', '\n', '    function burnFrom (\n', '\n', '        address _from, \n', '        uint256 _value) \n', '\n', '        public onlyOwner returns (bool success) {\n', '\n', '        require(balanceOf[_from] >= _value); \n', '\n', '        balanceOf[_from] -= _value; \n', '\n', '        Burn(_from, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function mintToken (\n', '\n', '        address target, \n', '        uint256 mintedAmount) \n', '\n', '        public onlyOwner {\n', '\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        Transfer(0, this, mintedAmount);\n', '        Transfer(this, target, mintedAmount);\n', '    }\n', '\n', '    function mintTo (\n', '\n', '        address target, \n', '        uint256 mintedTo) \n', '\n', '        public onlyOwner {\n', '\n', '        balanceOf[target] += mintedTo;\n', '\n', '        Transfer(0, this, mintedTo);\n', '        Transfer(this, target, mintedTo);\n', '    }\n', '\n', '    function setPrices (\n', '\n', '        uint256 newSellPrice, \n', '        uint256 newBuyPrice) \n', '\n', '        public onlyOwner {\n', '\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '\n', '    function buy () \n', '\n', '        public payable {\n', '\n', '        uint amount = msg.value / buyPrice; \n', '        _transfer(this, msg.sender, amount);\n', '    }\n', '\n', '    function sell (\n', '\n', '        uint256 amount) \n', '\n', '        public {\n', '\n', '        require(this.balance >= amount * sellPrice); \n', '        _transfer(msg.sender, this, amount); \n', '        msg.sender.transfer(amount * sellPrice);  \n', '    }    \n', '    \n', '    function setName (\n', '\n', '        string newName) \n', '\n', '        public onlyOwner {\n', '\n', '        name = newName;\n', '    }\n', '    \n', '    function setSymbol (\n', '\n', '        string newSymbol) \n', '\n', '        public onlyOwner {\n', '\n', '        symbol = newSymbol;\n', '    }\n', '\n', '}']