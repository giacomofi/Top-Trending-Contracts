['pragma solidity 0.4.18;\n', '\n', '/**\n', ' * Contract "Math"\n', ' * Purpose: Math operations with safety checks\n', ' * Status : Complete\n', ' * \n', ' */\n', 'contract Math {\n', '\n', '    /**\n', '    * Multiplication with safety check\n', '    */\n', '    function Mul(uint a, uint b) pure internal returns (uint) {\n', '      uint c = a * b;\n', '      //check result should not be other wise until a=0\n', '      assert(a == 0 || c / a == b);\n', '      return c;\n', '    }\n', '\n', '    /**\n', '    * Division with safety check\n', '    */\n', '    function Div(uint a, uint b) pure internal returns (uint) {\n', '      //overflow check; b must not be 0\n', '      assert(b > 0);\n', '      uint c = a / b;\n', '      assert(a == b * c + a % b);\n', '      return c;\n', '    }\n', '\n', '    /**\n', '    * Subtraction with safety check\n', '    */\n', '    function Sub(uint a, uint b) pure internal returns (uint) {\n', '      //b must be greater that a as we need to store value in unsigned integer\n', '      assert(b <= a);\n', '      return a - b;\n', '    }\n', '\n', '    /**\n', '    * Addition with safety check\n', '    */\n', '    function Add(uint a, uint b) pure internal returns (uint) {\n', '      uint c = a + b;\n', '      //result must be greater as a or b can not be negative\n', '      assert(c>=a && c>=b);\n', '      return c;\n', '    }\n', '}\n', '\n', '  contract ERC20 {\n', '  function totalSupply()public view returns (uint total_Supply);\n', '  function balanceOf(address who)public view returns (uint256);\n', '  function allowance(address owner, address spender)public view returns (uint);\n', '  function transferFrom(address from, address to, uint value)public returns (bool ok);\n', '  function approve(address spender, uint value)public returns (bool ok);\n', '  function transfer(address to, uint value)public returns (bool ok);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '\n', 'contract etherecash is ERC20,Math\n', '{\n', '   string public constant symbol = "ECH";\n', '     string public constant name = "EtherEcash";\n', '     uint public constant decimals = 18;\n', '     uint256 _totalSupply = Mul(360000000,(10 **decimals));\n', '     \n', '     // Owner of this contract\n', '     address public owner;\n', '  \n', '     // Balances for each account\n', '     mapping(address => uint256) balances;\n', '  \n', '     // Owner of account approves the transfer of an amount to another account\n', '     mapping(address => mapping (address => uint256)) allowed;\n', '  \n', '     // Functions with this modifier can only be executed by the owner\n', '     modifier onlyOwner() {\n', '         if (msg.sender != owner) {\n', '             revert();\n', '         }\n', '         _;\n', '     }\n', '  \n', '     // Constructor\n', '     function etherecash() public {\n', '         owner = msg.sender;\n', '         balances[owner] = _totalSupply;\n', '     }\n', '  \n', '    // what is the total supply of the ech tokens\n', '     function totalSupply() public view returns (uint256 total_Supply) {\n', '         total_Supply = _totalSupply;\n', '     }\n', '  \n', '     // What is the balance of a particular account?\n', '     function balanceOf(address _owner)public view returns (uint256 balance) {\n', '         return balances[_owner];\n', '     }\n', '  \n', "     // Transfer the balance from owner's account to another account\n", '     function transfer(address _to, uint256 _amount)public returns (bool success) {\n', '         if (balances[msg.sender] >= _amount \n', '             && _amount > 0\n', '             && balances[_to] + _amount > balances[_to]) {\n', '             balances[msg.sender] = Sub(balances[msg.sender], _amount);\n', '             balances[_to] = Add(balances[_to], _amount);\n', '             Transfer(msg.sender, _to, _amount);\n', '             return true;\n', '         } else {\n', '             return false;\n', '         }\n', '     }\n', '  \n', '     // Send _value amount of tokens from address _from to address _to\n', '     // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n', '     // tokens on your behalf, for example to "deposit" to a contract address and/or to charge\n', '     // fees in sub-currencies; the command should fail unless the _from account has\n', '     // deliberately authorized the sender of the message via some mechanism; we propose\n', '     // these standardized APIs for approval:\n', '     function transferFrom(\n', '         address _from,\n', '         address _to,\n', '         uint256 _amount\n', '     )public returns (bool success) {\n', '         if (balances[_from] >= _amount\n', '             && allowed[_from][msg.sender] >= _amount\n', '             && _amount > 0\n', '             && balances[_to] + _amount > balances[_to]) {\n', '             balances[_from] = Sub(balances[_from], _amount);\n', '             allowed[_from][msg.sender] = Sub(allowed[_from][msg.sender], _amount);\n', '             balances[_to] = Add(balances[_to], _amount);\n', '             Transfer(_from, _to, _amount);\n', '             return true;\n', '         } else {\n', '             return false;\n', '         }\n', '     }\n', ' \n', '     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '     // If this function is called again it overwrites the current allowance with _value.\n', '     function approve(address _spender, uint256 _amount)public returns (bool success) {\n', '         allowed[msg.sender][_spender] = _amount;\n', '         Approval(msg.sender, _spender, _amount);\n', '         return true;\n', '     }\n', '  \n', '     function allowance(address _owner, address _spender)public view returns (uint256 remaining) {\n', '         return allowed[_owner][_spender];\n', '   }\n', '     \n', '\n', '\t//In case the ownership needs to be transferred\n', '\tfunction transferOwnership(address newOwner)public onlyOwner\n', '\t{\n', '\t    balances[newOwner] = Add(balances[newOwner],balances[owner]);\n', '\t    balances[owner] = 0;\n', '\t    owner = newOwner;\n', '\t}\n', '\n', '}']