['pragma solidity ^0.4.11;\n', '\n', 'contract SafeMath {\n', '    function mul(uint256 a, uint256 b) internal  returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal  returns (uint256) {\n', '        assert(b > 0);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal   returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    function add(uint256 a, uint256 b) internal  returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '    function pow( uint256 a , uint8 b ) internal returns ( uint256 ){\n', '        uint256 c;\n', '        c = a ** b;\n', '        return c;\n', '    }\n', '}\n', 'contract owned {\n', '    bool public OwnerDefined = false;\n', '    address public owner;\n', '    event OwnerEvents(address _addr, uint8 action);\n', '    function owned()\n', '        internal\n', '    {\n', '        require(OwnerDefined == false);\n', '        owner = msg.sender;\n', '        OwnerDefined = true;\n', '        OwnerEvents(msg.sender,1);\n', '    }\n', '}\n', 'contract ERC20Token is owned, SafeMath{\n', '    bool public tokenState;\n', '    string public name = "8SM";\n', '    string public symbol = "8SM";\n', '    uint256 public decimals = 8;\n', '    uint256 public totalSupply = mul(25,pow(10,15));\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    function init()\n', '        external\n', '    returns ( bool ){\n', '        require(tokenState == false);\n', '        owned;\n', '        tokenState = true;\n', '        balances[this] = totalSupply;\n', '        allowed[this][owner] = totalSupply;\n', '        return true;\n', '    }\n', '    function transfer(address _to, uint256 _value)\n', '        public\n', '    returns ( bool ) {\n', '        require(tokenState == true);\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        balances[msg.sender] = sub(balances[msg.sender],_value);\n', '        balances[_to] = add(balances[_to],_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        public\n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balances[_from] = sub(balances[_from],_value);\n', '        balances[_to] = add(balances[_to],_value);\n', '        allowed[_from][msg.sender] = sub(allowed[_from][msg.sender],_value);\n', '        Transfer(_from, _to, _value);\n', '    }\n', '    function balanceOf(address _owner)\n', '        external\n', '        constant\n', '    returns (uint256) {\n', '        require(tokenState == true);\n', '        return balances[_owner];\n', '    }\n', '    function approve(address _spender, uint256 _value)\n', '        external\n', '    returns (bool success) {\n', '        require(tokenState == true);\n', '        require(_spender != address(0));\n', '        require(msg.sender == owner);\n', '        allowed[msg.sender][_spender] = mul(_value, 100000000);\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    function allowance(address _owner, address _spender)\n', '        external\n', '        constant\n', '    returns (uint256 remaining) {\n', '        require(tokenState == true);\n', '        return allowed[_owner][_spender];\n', '    }\n', '    function changeOwner()\n', '        external\n', '    returns ( bool ){\n', '        require(owner == msg.sender);\n', '        require(tokenState == true);\n', '        allowed[this][owner] = 0;\n', '        owner = msg.sender;\n', '        allowed[this][msg.sender] = balances[this];\n', '        return true;\n', '    }\n', '}\n', 'contract disburseToken is SafeMath{\n', '    ERC20Token token;\n', '    bool public state;\n', '    address public tokenAddress; \n', '    address public owner;\n', '    address public from;\n', '    uint256 public staticblock = 5760;\n', '    function init(address _addr,address _from) external returns(bool){\n', '        require(state == false);\n', '        state = true;\n', '        tokenAddress = _addr;\n', '        token = ERC20Token(_addr);\n', '        owner = msg.sender;\n', '        from = _from;\n', '        return true;\n', '    }\n', '    function changeOwner(address _addr) external returns (bool){\n', '        require(state == true);\n', '        owner = _addr;\n', '        return true;\n', '    }\n', '    function disburse (address char) returns ( bool ){\n', '        require(state == true);\n', '        require(owner == msg.sender);\n', '        uint256 e = sub(block.number,mul(div(block.number,staticblock),staticblock));\n', '        token.transferFrom(from,char,mul(e,4340277));\n', '        return true;\n', '    }\n', '}']