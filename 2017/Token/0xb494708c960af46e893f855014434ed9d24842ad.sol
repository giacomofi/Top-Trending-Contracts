['pragma solidity ^0.4.13;\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtrCNDT(uint256 x, uint256 y) internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '\n', '}\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/*  ERC 20 token */\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract CNDT is StandardToken, SafeMath {\n', '\n', '    string public constant name = "CNDT";\n', '    string public constant symbol = "CNDT";\n', '    uint256 public constant decimals = 18;\n', '    string public version = "1.0";\n', '\n', '    address public CNDTTokenDeposit;\n', '\n', '    uint256 public constant factorial = 6;\n', '    uint256 public constant CNDTPrivate = 200 * (10**factorial) * 10**decimals; \n', '    \n', '\taddress public owner;\n', '\tuint256 public totalissue = 2000 * (10**factorial) * 10**decimals;\n', '\tuint256 public issueamount = 200 * (10**factorial) * 10**decimals;\n', '    \n', '  \n', '    // constructor\n', '    function CNDT()\n', '    {\n', '      CNDTTokenDeposit = 0x6adABE44107afDa369D73C671A32b9aFEe810121;\n', '\n', '      balances[CNDTTokenDeposit] = CNDTPrivate;\n', '      totalSupply = CNDTPrivate; \n', '\t  owner = msg.sender;\n', '\t  \n', '    }\n', '\t\n', '\tfunction issue(address _to) {\n', '\t if (msg.sender != owner )\n', '\t\trevert();\n', '\t if (totalSupply + issueamount > totalissue)\n', '\t\trevert();\n', '\t balances[_to] += issueamount;\n', '\t totalSupply += issueamount;\n', '\t}\n', '}']