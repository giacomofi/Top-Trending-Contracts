['pragma solidity ^0.4.18;\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  \n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until \n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) \n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) \n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = true;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '/**\n', ' * @title Pausable token\n', ' *\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '/**\n', ' * contract CryptoTradeCoin\n', ' **/\n', 'contract CryptoTradeCoin is PausableToken, MintableToken {\n', '\n', '  string public constant name = "CryptoTradeCoin";\n', '  string public constant symbol = "CTC";\n', '  uint8 public constant decimals = 18;\n', '}\n', '/**\n', ' * contract CryptoTradeCrowdsale\n', ' **/\n', 'contract CryptoTradeCrowdsale is Ownable {\n', '\n', 'using SafeMath for uint;\n', '\n', 'address public multisigWallet;\n', 'address public founderTokenWallet;\n', 'address public bountyTokenWallet;\n', 'uint public founderPercent;\n', 'uint public bountyPercent;\n', 'uint public startRound;\n', 'uint public periodRound;\n', 'uint public capitalization;\n', 'uint public altCapitalization;\n', 'uint public totalCapitalization;\n', 'uint public price;\n', 'uint public discountTime;\n', 'bool public isDiscountValue;\n', 'uint public targetDiscountValue1;\n', 'uint public targetDiscountValue2;\n', 'uint public targetDiscountValue3;\n', 'uint public targetDiscountValue4;\n', 'uint public targetDiscountValue5;\n', 'uint public targetDiscountValue6;\n', 'uint public targetDiscountValue7;\n', 'uint public targetDiscountValue8;\n', 'uint public targetDiscountValue9;\n', 'uint public targetDiscountValue10;\n', '\n', 'CryptoTradeCoin public token = new CryptoTradeCoin ();\n', '\n', 'function CryptoTradeCrowdsale () public {\n', '\tmultisigWallet = 0xdee04DfdC6C93D51468ba5cd90457Ac0B88055FD;\n', '\tfounderTokenWallet = 0x874297a0eDaB173CFdDeD1e890842A5564191D36;\n', '\tbountyTokenWallet = 0x77C99A76B3dF279a73396fE9ae0A072B428b63Fe;\n', '\tfounderPercent = 10;\n', '\tbountyPercent = 5;\n', '\tstartRound = 1509584400;\n', '\tperiodRound = 90;\n', '\tcapitalization = 3300 ether;\n', '\taltCapitalization = 0;\n', '\ttotalCapitalization = 200000 ether;\n', '\tprice = 1000000000000000000000000; \n', '\tdiscountTime = 50;\n', '\tisDiscountValue = false;\n', '\ttargetDiscountValue1 = 2    ether;\n', '\ttargetDiscountValue2 = 4    ether;\n', '\ttargetDiscountValue3 = 8    ether;\n', '\ttargetDiscountValue4 = 16   ether;\n', '\ttargetDiscountValue5 = 32   ether;\n', '\ttargetDiscountValue6 = 64   ether;\n', '\ttargetDiscountValue7 = 128  ether;\n', '\ttargetDiscountValue8 = 256  ether;\n', '\ttargetDiscountValue9 = 512  ether;\n', '\ttargetDiscountValue10= 1024 ether;\n', '\t}\n', '\n', 'modifier CrowdsaleIsOn() {\n', '\trequire(now >= startRound && now <= startRound + periodRound * 1 days);\n', '\t_;\n', '\t}\n', 'modifier TotalCapitalization() {\n', '\trequire(multisigWallet.balance + altCapitalization <= totalCapitalization);\n', '\t_;\n', '\t}\n', 'modifier RoundCapitalization() {\n', '\trequire(multisigWallet.balance + altCapitalization <= capitalization);\n', '\t_;\n', '\t}\n', '\n', 'function setMultisigWallet (address newMultisigWallet) public onlyOwner {\n', '\trequire(newMultisigWallet != 0X0);\n', '\tmultisigWallet = newMultisigWallet;\n', '\t}\n', 'function setFounderTokenWallet (address newFounderTokenWallet) public onlyOwner {\n', '\trequire(newFounderTokenWallet != 0X0);\n', '\tfounderTokenWallet = newFounderTokenWallet;\n', '\t}\n', 'function setBountyTokenWallet (address newBountyTokenWallet) public onlyOwner {\n', '\trequire(newBountyTokenWallet != 0X0);\n', '\tbountyTokenWallet = newBountyTokenWallet;\n', '\t}\n', '\t\n', 'function setFounderPercent (uint newFounderPercent) public onlyOwner {\n', '\tfounderPercent = newFounderPercent;\n', '\t}\n', 'function setBountyPercent (uint newBountyPercent) public onlyOwner {\n', '\tbountyPercent = newBountyPercent;\n', '\t}\n', '\t\n', 'function setStartRound (uint newStartRound) public onlyOwner {\n', '\tstartRound = newStartRound;\n', '\t}\n', 'function setPeriodRound (uint newPeriodRound) public onlyOwner {\n', '\tperiodRound = newPeriodRound;\n', '\t} \n', '\t\n', 'function setCapitalization (uint newCapitalization) public onlyOwner {\n', '\tcapitalization = newCapitalization;\n', '\t}\n', 'function setAltCapitalization (uint newAltCapitalization) public onlyOwner {\n', '\taltCapitalization = newAltCapitalization;\n', '\t}\n', 'function setTotalCapitalization (uint newTotalCapitalization) public onlyOwner {\n', '\ttotalCapitalization = newTotalCapitalization;\n', '\t}\n', '\t\n', 'function setPrice (uint newPrice) public onlyOwner {\n', '\tprice = newPrice;\n', '\t}\n', 'function setDiscountTime (uint newDiscountTime) public onlyOwner {\n', '\tdiscountTime = newDiscountTime;\n', '\t}\n', '\t\n', 'function setDiscountValueOn () public onlyOwner {\n', '\trequire(!isDiscountValue);\n', '\tisDiscountValue = true;\n', '\t}\n', 'function setDiscountValueOff () public onlyOwner {\n', '\trequire(isDiscountValue);\n', '\tisDiscountValue = false;\n', '\t}\n', '\t\n', 'function setTargetDiscountValue1  (uint newTargetDiscountValue1)  public onlyOwner {\n', '\trequire(newTargetDiscountValue1 > 0);\n', '\ttargetDiscountValue1 = newTargetDiscountValue1;\n', '\t}\n', 'function setTargetDiscountValue2  (uint newTargetDiscountValue2)  public onlyOwner {\n', '\trequire(newTargetDiscountValue2 > 0);\n', '\ttargetDiscountValue2 = newTargetDiscountValue2;\n', '\t}\n', 'function setTargetDiscountValue3  (uint newTargetDiscountValue3)  public onlyOwner {\n', '\trequire(newTargetDiscountValue3 > 0);\n', '\ttargetDiscountValue3 = newTargetDiscountValue3;\n', '\t}\n', 'function setTargetDiscountValue4  (uint newTargetDiscountValue4)  public onlyOwner {\n', '\trequire(newTargetDiscountValue4 > 0);\n', '\ttargetDiscountValue4 = newTargetDiscountValue4;\n', '\t}\n', 'function setTargetDiscountValue5  (uint newTargetDiscountValue5)  public onlyOwner {\n', '\trequire(newTargetDiscountValue5 > 0);\n', '\ttargetDiscountValue5 = newTargetDiscountValue5;\n', '\t}\n', 'function setTargetDiscountValue6  (uint newTargetDiscountValue6)  public onlyOwner {\n', '\trequire(newTargetDiscountValue6 > 0);\n', '\ttargetDiscountValue6 = newTargetDiscountValue6;\n', '\t}\n', 'function setTargetDiscountValue7  (uint newTargetDiscountValue7)  public onlyOwner {\n', '\trequire(newTargetDiscountValue7 > 0);\n', '\ttargetDiscountValue7 = newTargetDiscountValue7;\n', '\t}\n', 'function setTargetDiscountValue8  (uint newTargetDiscountValue8)  public onlyOwner {\n', '\trequire(newTargetDiscountValue8 > 0);\n', '\ttargetDiscountValue8 = newTargetDiscountValue8;\n', '\t}\n', 'function setTargetDiscountValue9  (uint newTargetDiscountValue9)  public onlyOwner {\n', '\trequire(newTargetDiscountValue9 > 0);\n', '\ttargetDiscountValue9 = newTargetDiscountValue9;\n', '\t}\n', 'function setTargetDiscountValue10 (uint newTargetDiscountValue10) public onlyOwner {\n', '\trequire(newTargetDiscountValue10 > 0);\n', '\ttargetDiscountValue10 = newTargetDiscountValue10;\n', '\t}\n', '\t\n', 'function () external payable {\n', '\tcreateTokens (msg.sender, msg.value);\n', '\t}\n', '\n', 'function createTokens (address recipient, uint etherDonat) internal CrowdsaleIsOn RoundCapitalization TotalCapitalization {\n', '\trequire(etherDonat > 0); // etherDonat in wei\n', '\trequire(recipient != 0X0);\n', '\trequire(price > 0);\n', '\tmultisigWallet.transfer(etherDonat);\n', '\tuint discountValue = discountValueSolution (etherDonat);\n', '\tuint bonusDiscountValue = (etherDonat.mul(price).div(1 ether)).mul(discountValue).div(100);\n', '\tuint bonusDiscountTime  = (etherDonat.mul(price).div(1 ether)).mul(discountTime).div(100);\n', '    uint tokens = (etherDonat.mul(price).div(1 ether)).add(bonusDiscountTime).add(bonusDiscountValue);\n', '\ttoken.mint(recipient, tokens);\n', '\t}\n', '\n', 'function customCreateTokens(address recipient, uint etherDonat) public CrowdsaleIsOn RoundCapitalization TotalCapitalization onlyOwner {\n', '\trequire(etherDonat > 0); // etherDonat in wei\n', '\trequire(recipient != 0X0);\n', '\trequire(price > 0);\n', '\tuint discountValue = discountValueSolution (etherDonat);\n', '\tuint bonusDiscountValue = (etherDonat.mul(price).div(1 ether)).mul(discountValue).div(100);\n', '\tuint bonusDiscountTime  = (etherDonat.mul(price).div(1 ether)).mul(discountTime).div(100);\n', '    uint tokens = (etherDonat.mul(price).div(1 ether)).add(bonusDiscountTime).add(bonusDiscountValue);\n', '\ttoken.mint(recipient, tokens);\n', '\taltCapitalization += etherDonat;\n', '\t}\n', '\n', 'function retrieveTokens (address addressToken, address wallet) public onlyOwner {\n', '\tERC20 alientToken = ERC20 (addressToken);\n', '\talientToken.transfer(wallet, alientToken.balanceOf(this));\n', '\t}\n', '\n', 'function finishMinting () public onlyOwner {\n', '\tuint issuedTokenSupply = token.totalSupply(); \n', '\tuint tokensFounders = issuedTokenSupply.mul(founderPercent).div(100);\n', '\tuint tokensBounty = issuedTokenSupply.mul(bountyPercent).div(100);\n', '\ttoken.mint(founderTokenWallet, tokensFounders);\n', '\ttoken.mint(bountyTokenWallet, tokensBounty);\n', '\ttoken.finishMinting();\n', '\t}\n', '\n', 'function setOwnerToken (address newOwnerToken) public onlyOwner {\n', '\trequire(newOwnerToken != 0X0);\n', '\ttoken.transferOwnership(newOwnerToken); \n', '\t}\n', '\n', 'function coefficientSolution (uint _donat) internal constant returns (uint) {  \n', '\trequire(isDiscountValue);\n', ' \tuint _discountValue;\n', '\tif (_donat < targetDiscountValue1) { \n', '\t\treturn _discountValue = 0;\n', '\t} else if (_donat >= targetDiscountValue1 && _donat < targetDiscountValue2) { \n', '\t\treturn _discountValue = 2;\n', '\t} else if (_donat >= targetDiscountValue2 && _donat < targetDiscountValue3) { \n', '\t\treturn _discountValue = 4;\n', '\t} else if (_donat >= targetDiscountValue3 && _donat < targetDiscountValue4) { \n', '\t\treturn _discountValue = 6;\n', '\t} else if (_donat >= targetDiscountValue4 && _donat < targetDiscountValue5) { \n', '\t\treturn _discountValue = 8;\n', '\t} else if (_donat >= targetDiscountValue5 && _donat < targetDiscountValue6) { \n', '\t\treturn _discountValue = 10;\n', '\t} else if (_donat >= targetDiscountValue6 && _donat < targetDiscountValue7) { \n', '\t\treturn _discountValue = 12;\n', '\t} else if (_donat >= targetDiscountValue7 && _donat < targetDiscountValue8) { \n', '\t\treturn _discountValue = 14;\n', '\t} else if (_donat >= targetDiscountValue8 && _donat < targetDiscountValue9) { \n', '\t\treturn _discountValue = 16;\n', '\t} else if (_donat >= targetDiscountValue9 && _donat < targetDiscountValue10){ \n', '\t\treturn _discountValue = 18;\n', '\t} else {   \n', '\t\treturn _discountValue = 20;\n', '\t}\n', '   }\n', '\n', 'function discountValueSolution (uint Donat) internal constant returns (uint) {\n', '\tuint DiscountValue;\n', '\tif (!isDiscountValue) {\n', '\t\tDiscountValue = 0;\n', '\t\treturn DiscountValue;\n', '\t} else {\n', '\t\tDiscountValue = coefficientSolution (Donat);\n', '\t\treturn DiscountValue;\n', '\t}\n', '   }\n', '\n', '}']