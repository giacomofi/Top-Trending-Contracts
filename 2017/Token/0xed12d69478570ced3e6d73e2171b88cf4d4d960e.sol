['pragma solidity 0.4.18;\n', '\n', 'contract SafeMath {\n', '    function safeMul(uint a, uint b) pure internal returns(uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint a, uint b) pure  internal returns(uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint a, uint b) pure internal returns(uint) {\n', '        uint c = a + b;\n', '        assert(c >= a && c >= b);\n', '        return c;\n', '    }\n', '    \n', '    \n', '}\n', '\n', '\n', 'contract ERC20 {\n', '\n', '    uint public totalSupply;\n', '\n', '    function balanceOf(address who) public constant returns(uint256);\n', '\n', '    function allowance(address owner, address spender) public constant returns(uint);\n', '\n', '    function transferFrom(address from, address to, uint value) public  returns(bool ok);\n', '\n', '    function approve(address spender, uint value) public returns(bool ok);\n', '\n', '    function transfer(address to, uint value) public returns(bool ok);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '\n', '}\n', 'contract BeefLedger is ERC20, SafeMath\n', '{\n', '      string public constant name = "BeefLedger";\n', '  \n', '    \t// Symbol of token\n', '      string public constant symbol = "BLT"; \n', '      uint8 public constant decimals = 6;  // decimal places\n', '    \n', '      uint public totalSupply = 888888888 * 10**6 ; // total supply includes decimal upto 6 places\n', '      \n', '      mapping(address => uint) balances;\n', '     \n', '      mapping (address => mapping (address => uint)) allowed;\n', '      address owner;\n', '      // ico dates\n', '      uint256 pre_date;\n', '      uint256 ico_first;\n', '      uint256 ico_second;\n', '      uint token_supply_forperiod;\n', '      bool ico_status = false;\n', '       bool stopped = false;\n', '      uint256 price_token;\n', '      event MESSAGE(string m);\n', '       event ADDRESS(address addres, uint balance);\n', '      \n', '       // Functions with this modifier can only be executed by the owner\n', '      modifier onlyOwner() {\n', '         if (msg.sender != owner) {\n', '           revert();\n', '          }\n', '         _;\n', '        }\n', '      \n', '      function BeefLedger() public\n', '      {\n', '          owner = msg.sender;\n', '       }\n', '      \n', '       // Emergency Pause and Release is called by Owner in case of Emergency\n', '    \n', '    function emergencyPause() external onlyOwner{\n', '        stopped = true;\n', '    }\n', '     \n', '     function releasePause() external onlyOwner{\n', '         stopped = false;\n', '     }\n', '     \n', '      function start_ICO() public onlyOwner\n', '      {\n', '          ico_status = true;\n', '          stopped = false;\n', '          pre_date = now + 1 days;\n', '          ico_first = pre_date + 70 days;\n', '          ico_second = ico_first + 105 days;\n', '          token_supply_forperiod = 488888889 *10**6; \n', '          balances[address(this)] = token_supply_forperiod;\n', '      }\n', '      function endICOs() public onlyOwner\n', '      {\n', '           ico_status = false;\n', '          uint256 balowner = 399999999 * 10 **6;\n', '           balances[owner] = balances[address(this)] + balowner;\n', '           balances[address(this)] = 0;\n', '         Transfer(address(this), msg.sender, balances[owner]);\n', '      }\n', '\n', '\n', '    function () public payable{ \n', '      require (!stopped && msg.sender != owner && ico_status);\n', '       if(now <= pre_date)\n', '         {\n', '             \n', '             price_token =  .0001167 ether;\n', '         }\n', '         else if(now > pre_date && now <= ico_first)\n', '         {\n', '             \n', '             price_token =  .0001667 ether;\n', '         }\n', '         else if(now > ico_first && now <= ico_second)\n', '         {\n', '             \n', '             price_token =  .0002167 ether;\n', '         }\n', '       \n', 'else {\n', '    revert();\n', '}\n', '       \n', '         uint no_of_tokens = (msg.value * 10 **6 ) / price_token ;\n', '          require(balances[address(this)] >= no_of_tokens);\n', '              \n', '          balances[address(this)] = safeSub(balances[address(this)], no_of_tokens);\n', '          balances[msg.sender] = safeAdd(balances[msg.sender], no_of_tokens);\n', '        Transfer(address(this), msg.sender, no_of_tokens);\n', '              owner.transfer(this.balance);\n', '\n', '    }\n', '   \n', '   \n', '   \n', '    // erc20 function to return total supply\n', '    function totalSupply() public constant returns(uint) {\n', '       return totalSupply;\n', '    }\n', '    \n', '    // erc20 function to return balance of give address\n', '    function balanceOf(address sender) public constant returns(uint256 balance) {\n', '        return balances[sender];\n', '    }\n', '\n', "    // Transfer the balance from owner's account to another account\n", '    function transfer(address _to, uint256 _amount) public returns(bool success) {\n', '        if (_to == 0x0) revert(); // Prevent transfer to 0x0 address. Use burn() instead\n', '        if (balances[msg.sender] < _amount) revert(); // Check if the sender has enough\n', '\n', '        if (safeAdd(balances[_to], _amount) < balances[_to]) revert(); // Check for overflows\n', '       \n', '        balances[msg.sender] = safeSub(balances[msg.sender], _amount); // Subtract from the sender\n', '        balances[_to] = safeAdd(balances[_to], _amount); // Add the same to the recipient\n', '        Transfer(msg.sender, _to, _amount); // Notify anyone listening that this transfer took place\n', '        \n', '        return true;\n', '    }\n', '\n', '    // Send _value amount of tokens from address _from to address _to\n', '    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n', '    // tokens on your behalf, for example to "deposit" to a contract address and/or to charge\n', '    // fees in sub-currencies; the command should fail unless the _from account has\n', '    // deliberately authorized the sender of the message via some mechanism; we propose\n', '    // these standardized APIs for approval:\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) public returns(bool success) {\n', '        if (balances[_from] >= _amount &&\n', '            allowed[_from][msg.sender] >= _amount &&\n', '            _amount > 0 &&\n', '            safeAdd(balances[_to], _amount) > balances[_to]) {\n', '            balances[_from] = safeSub(balances[_from], _amount);\n', '            allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _amount);\n', '            balances[_to] = safeAdd(balances[_to], _amount);\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    function approve(address _spender, uint256 _amount) public returns(bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns(uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', 'function transferOwnership(address _newowner) external onlyOwner{\n', '    uint new_bal = balances[msg.sender];\n', '    owner = _newowner;\n', '    balances[owner]= new_bal;\n', '    balances[msg.sender] = 0;\n', '}\n', '   function drain() external onlyOwner {\n', '       \n', '        owner.transfer(this.balance);\n', '    }\n', '    \n', '  }']