['pragma solidity 0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', '* @title ERC20Basic\n', '* @dev Simpler version of ERC20 interface\n', '* @dev see https://github.com/ethereum/EIPs/issues/179\n', '*/\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract ApprovalContract is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     */\n', '    function increaseApproval (address _spender, uint _addedValue) public\n', '    returns (bool success) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval (address _spender, uint _subtractedValue) public\n', '    returns (bool success) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is ApprovalContract, Ownable {\n', '\n', '    uint256 public hardCap;\n', '    mapping(address => uint256) public balances;\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '\n', '    modifier canMint() {\n', '        require(totalSupply == 0);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        require(_amount < hardCap);\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        Transfer(0x0, _to, _amount);\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Vesting token\n', ' */\n', 'contract Vesting is MintableToken {\n', '\n', '    event VestingMemberAdded(address indexed _address, uint256 _amount, uint _start, uint _end);\n', '\n', '    struct _Vesting {\n', '        uint256 totalSum;     //total amount\n', '        uint256 start;        //start block\n', '        uint256 end;          //end block\n', '        uint256 usedAmount;   //the amount of paid payments\n', '    }\n', '\n', '    mapping (address => _Vesting ) public vestingMembers;\n', '\n', '    function addVestingMember(\n', '        address _address,\n', '        uint256 _amount,\n', '        uint256 _start,\n', '        uint256 _end\n', '    ) onlyOwner public returns (bool) {\n', '        require(\n', '            _address != address(0) &&\n', '            _amount > 0 &&\n', '            _start < _end &&\n', '            vestingMembers[_address].totalSum == 0 &&\n', '            balances[msg.sender] > _amount\n', '        );\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '\n', '        vestingMembers[_address].totalSum = _amount;    //total amount\n', '        vestingMembers[_address].start = _start;        //start block\n', '        vestingMembers[_address].end = _end;            //end block\n', '        vestingMembers[_address].usedAmount = 0;        //the amount of paid payments\n', '\n', '        VestingMemberAdded(_address, _amount, _start, _end);\n', '\n', '        return true;\n', '    }\n', '\n', '    function currentPart(address _address) private constant returns (uint256) {\n', '        if (vestingMembers[_address].totalSum == 0 || block.number <= vestingMembers[_address].start) {\n', '            return 0;\n', '        }\n', '        if (block.number >= vestingMembers[_address].end) {\n', '            return vestingMembers[_address].totalSum.sub(vestingMembers[_address].usedAmount);\n', '        }\n', '\n', '        return vestingMembers[_address].totalSum\n', '        .mul(block.number - vestingMembers[_address].start)\n', '        .div(vestingMembers[_address].end - vestingMembers[_address].start)\n', '        .sub(vestingMembers[_address].usedAmount);\n', '    }\n', '\n', '    function subFromBalance(address _address, uint256 _amount) private returns (uint256) {\n', '        require(_address != address(0));\n', '\n', '        if (vestingMembers[_address].totalSum == 0) {\n', '            balances[_address] = balances[_address].sub(_amount);\n', '            return balances[_address];\n', '        }\n', '        uint256 summary = balanceOf(_address);\n', '        require(summary >= _amount);\n', '\n', '        if (balances[_address] > _amount) {\n', '            balances[_address] = balances[_address].sub(_amount);\n', '        } else {\n', '            uint256 part = currentPart(_address);\n', '            if (block.number >= vestingMembers[_address].end) {\n', '                vestingMembers[_address].totalSum = 0;          //total amount\n', '                vestingMembers[_address].start = 0;             //start block\n', '                vestingMembers[_address].end = 0;               //end block\n', '                vestingMembers[_address].usedAmount = 0;        //the amount of paid payments\n', '            } else {\n', '                vestingMembers[_address].usedAmount = vestingMembers[_address].usedAmount.add(part);\n', '            }\n', '            balances[_address] = balances[_address].add(part).sub(_amount);\n', '        }\n', '\n', '        return balances[_address];\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        if (vestingMembers[_owner].totalSum == 0) {\n', '            return balances[_owner];\n', '        } else {\n', '            return balances[_owner].add(currentPart(_owner));\n', '        }\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balanceOf(msg.sender));\n', '\n', '        subFromBalance(msg.sender, _value);\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '        subFromBalance(_from, _value);\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract DMToken is Vesting {\n', '\n', '    string public name = "DMarket Token";\n', '    string public symbol = "DMT";\n', '    uint256 public decimals = 8;\n', '\n', '    function DMToken() public {\n', '        hardCap = 15644283100000000;\n', '    }\n', '\n', '    function multiTransfer(address[] recipients, uint256[] amounts) public {\n', '        require(recipients.length == amounts.length);\n', '        for (uint i = 0; i < recipients.length; i++) {\n', '            transfer(recipients[i], amounts[i]);\n', '        }\n', '    }\n', '\n', '    function multiVesting(\n', '        address[] _address,\n', '        uint256[] _amount,\n', '        uint256[] _start,\n', '        uint256[] _end\n', '    ) public onlyOwner {\n', '        require(\n', '            _address.length == _amount.length &&\n', '            _address.length == _start.length &&\n', '            _address.length == _end.length\n', '        );\n', '        for (uint i = 0; i < _address.length; i++) {\n', '            addVestingMember(_address[i], _amount[i], _start[i], _end[i]);\n', '        }\n', '    }\n', '}']