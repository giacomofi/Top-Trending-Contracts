['pragma solidity ^0.4.18;\n', '\n', 'contract OldContract{\n', '  function balanceOf(address _owner) view returns (uint balance) {}\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '  mapping(address => bool) transfered;\n', '  OldContract _oldContract;\n', '  \n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  \n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    \n', '    if(balances[msg.sender] == 0 && transfered[msg.sender] == false){\n', '    \t uint256 oldFromBalance;\n', '  \t\t \n', '  \t\t oldFromBalance = CheckOldBalance(msg.sender);\n', '  \t\t \n', '  \t\t if (oldFromBalance > 0)\n', '       {\n', '       \t  ImportBalance(msg.sender); \n', '       }\n', '    }\n', '    \n', '    if(balances[_to] == 0 && transfered[_to] == false){\n', '    \t uint256 oldBalance;\n', '  \t\t \n', '  \t\t oldBalance = CheckOldBalance(_to);\n', '  \t\t \n', '  \t\t if (oldBalance > 0)\n', '       {\n', '       \t  ImportBalance(_to); \n', '       }\n', '    }\n', '    \n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '  \tif(balances[_owner] == 0 && transfered[_owner] == false){\n', '  \t\t uint256 oldBalance;\n', '  \t\t \n', '  \t\t oldBalance = CheckOldBalance(_owner);\n', '  \t\t \n', '       if (oldBalance > 0)\n', '       {\n', '       \t  return oldBalance;\n', '       }\n', '       else\n', '       {\n', '       \t\treturn balances[_owner];\n', '       }\n', '    }\n', '    else\n', '    {\n', '      return balances[_owner];\n', '    }\n', '  }\n', '\n', '  \n', '  function ImportBalance(address _owner) internal {\n', '  \tuint256 oldBalance;\n', '  \t\n', '  \toldBalance = CheckOldBalance(_owner);\n', '    if(balances[_owner] == 0  && (oldBalance > 0) && transfered[_owner] == false){\n', '    \tbalances[_owner] = oldBalance;\n', '      transfered[_owner] = true;\n', '    }\n', '  }\n', '  \n', '  function CheckOldBalance(address _owner) internal view returns (uint256 balance) {\n', '  \tif(balances[_owner] == 0 && transfered[_owner]==false){\n', '  \t\t\n', '  \t\tuint256 oldBalance;\n', '  \t\t\n', '  \t\t_oldContract = OldContract(0x3719dAc5E8aeEb886A0B49f5cbafe2DfA73A16A3);\n', '  \t\t\n', '  \t\toldBalance = _oldContract.balanceOf(_owner);\n', '  \t\t\n', '  \t\tif (oldBalance > 0)\n', '  \t\t{\n', '        return oldBalance;\n', '      }\n', '      else\n', '      {\n', '      \treturn balances[_owner];\n', '      }\n', '    }\n', '    else\n', '    {\n', '    return balances[_owner];\n', '    }\n', '\n', '  }\n', '\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '  \n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    \n', '    if(balances[_from] == 0 && transfered[_from] == false){\n', '       uint256 oldFromBalance;\n', '\n', '       oldFromBalance = CheckOldBalance(_from);\n', '\n', '  \t\t if (oldFromBalance > 0)\n', '       {\n', '       \t  ImportBalance(_from); \n', '       }\n', '    }\n', '    \n', '    if(balances[_to] == 0 && transfered[_to] == false){\n', '    \t uint256 oldBalance;\n', '  \t\t \n', '  \t\t oldBalance = CheckOldBalance(_to);\n', '  \t\t \n', '  \t\t if (oldBalance > 0)\n', '       {\n', '       \t  ImportBalance(_to); \n', '       }\n', '    }\n', '    \n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is StandardToken, Ownable{\n', '    \n', '    mapping(address => uint256) public exchangequeue;\n', '    \n', '    event PutForExchange(address indexed from, uint256 value);\n', '\n', '    function putForExchange(uint256 _value) public {\n', '    \n', '    require(_value > 0);\n', '    address sender = msg.sender;\n', '      \n', '    if(balances[sender] == 0 && transfered[sender] == false){\n', '    \t uint256 oldFromBalance;\n', '  \t\t \n', '  \t\t oldFromBalance = CheckOldBalance(sender);\n', '  \t\t \n', '  \t\t if (oldFromBalance > 0)\n', '       {\n', '       \t  ImportBalance(sender); \n', '       }\n', '    }\n', '    \n', '\t   require(_value <= balances[sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[sender] = balances[sender].sub(_value);\n', '    exchangequeue[sender] = exchangequeue[sender].add(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    PutForExchange(sender, _value);\n', '  }\n', '  \n', '    function confirmExchange(address _address,uint256 _value) public onlyOwner {\n', '    \n', '    require(_value > 0);\n', '    require(_value <= exchangequeue[_address]); \n', '        \n', '   \n', '    exchangequeue[_address] = exchangequeue[_address].sub(_value);\n', '    \n', '  }\n', '  \n', '\n', '}\n', '\n', 'contract GameCoin is Ownable, BurnableToken {\n', '\n', '  string public constant name = "GameCoin";\n', '  string public constant symbol = "GMC";\n', '  uint8 public constant decimals = 2;\n', '\n', '  uint256 public constant INITIAL_SUPPLY = 25907002099;\n', '  \n', '  /**\n', '   * @dev Constructor that gives msg.sender all of existing tokens.\n', '   */\n', '  function GameCoin() {\n', '    totalSupply = INITIAL_SUPPLY;\n', '    \n', '  }\n', '\n', '}']