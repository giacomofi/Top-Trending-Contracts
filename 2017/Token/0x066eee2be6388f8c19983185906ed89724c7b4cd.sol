['pragma solidity ^0.4.15;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract IRntToken {\n', '    uint256 public decimals = 18;\n', '\n', '    uint256 public totalSupply = 1000000000 * (10 ** 18);\n', '\n', '    string public name = "RNT Token";\n', '\n', '    string public code = "RNT";\n', '\n', '\n', '    function balanceOf() public constant returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '}\n', '\n', 'contract RntToken is IRntToken {\n', '    using SafeMath for uint256;\n', '\n', '    address public owner;\n', '\n', '    /* The finalizer contract that allows unlift the transfer limits on this token */\n', '    address public releaseAgent;\n', '\n', '    /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\n', '    bool public released = false;\n', '\n', '    /** Map of agents that are allowed to transfer tokens regardless of the lock down period.\n', '    These are crowdsale contracts and possible the team multisig itself. */\n', '    mapping (address => bool) public transferAgents;\n', '\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '    mapping (address => uint256) public balances;\n', '\n', '    bool public paused = false;\n', '\n', '    event Pause();\n', '\n', '    event Unpause();\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '\n', '    function RntToken() payable {\n', '        require(msg.value == 0);\n', '        owner = msg.sender;\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Limit token transfer until the crowdsale is over.\n', '     *\n', '     */\n', '    modifier canTransfer(address _sender) {\n', '        require(released || transferAgents[_sender]);\n', '        _;\n', '    }\n', '\n', '    /** The function can be called only before or after the tokens have been releasesd */\n', '    modifier inReleaseState(bool releaseState) {\n', '        require(releaseState == released);\n', '        _;\n', '    }\n', '\n', '    /** The function can be called only by a whitelisted release agent. */\n', '    modifier onlyReleaseAgent() {\n', '        require(msg.sender == releaseAgent);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Set the contract that can call release and make the token transferable.\n', '     *\n', '     * Design choice. Allow reset the release agent to fix fat finger mistakes.\n', '     */\n', '    function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n', '\n', "        // We don't do interface check here as we might want to a normal wallet address to act as a release agent\n", '        releaseAgent = addr;\n', '    }\n', '\n', '    /**\n', '     * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\n', '     */\n', '    function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\n', '        transferAgents[addr] = state;\n', '    }\n', '\n', '    /**\n', '     * One way function to release the tokens to the wild.\n', '     *\n', '     * Can be called only from the release agent that is the final ICO contract. It is only called if the crowdsale has been success (first milestone reached).\n', '     */\n', '    function releaseTokenTransfer() public onlyReleaseAgent {\n', '        released = true;\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public canTransfer(msg.sender) whenNotPaused returns (bool success) {\n', '        require(_to != address(0));\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public canTransfer(_from) whenNotPaused returns (bool success) {\n', '        require(_to != address(0));\n', '\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '        // require (_value <= _allowance);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the sender address.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf() public constant returns (uint256 balance) {\n', '        return balances[msg.sender];\n', '    }\n', '\n', '\n', '    /*PAUSABLE FUNCTIONALITY*/\n', '\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '\n', '    /*HAS NO ETHER FUNCTIONALITY*/\n', '    /**\n', '  * @dev Constructor that rejects incoming Ether\n', '  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n', '  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n', '  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n', '  * we could use assembly to access msg.value.\n', '  */\n', '\n', '    /**\n', '     * @dev Disallows direct send by settings a default function without the `payable` flag.\n', '     */\n', '    function() external {\n', '    }\n', '}']