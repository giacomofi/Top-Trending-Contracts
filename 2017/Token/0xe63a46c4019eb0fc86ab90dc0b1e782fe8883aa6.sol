['pragma solidity ^0.4.18;\n', '\n', 'contract NashvilleBeerToken {\n', '  uint256 public maxSupply;\n', '  uint256 public totalSupply;\n', '  address public owner;\n', '  bytes32[] public redeemedList;\n', '  address constant public RECIPIENT = 0xB1384DfE8ac77a700F460C94352bdD47Dc0327eF; // Ethereum Meetup Donation Address\n', '  mapping (address => uint256) balances;\n', '\n', '  event LogBeerClaimed(address indexed owner, uint256 date);\n', '  event LogBeerRedeemed(address indexed owner, bytes32 name, uint256 date);\n', '  event LogTransfer(address from, address indexed to, uint256 date);\n', '\n', '  modifier onlyOwner {\n', '    require(owner == msg.sender);\n', '    _;\n', '  }\n', '\n', '  function NashvilleBeerToken(uint256 _maxSupply) {\n', '    maxSupply = _maxSupply;\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _amount) public returns(bool) {\n', '    require(balances[msg.sender] - _amount <= balances[msg.sender]);\n', '    balances[msg.sender] -= _amount;\n', '    balances[_to] += _amount;\n', '    LogTransfer(msg.sender, _to, now);\n', '  }\n', '\n', '  function balanceOf(address _owner) public constant returns(uint) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function redeemBeer(bytes32 _name) public returns(bool) {\n', '    require(balances[msg.sender] > 0);\n', '    balances[msg.sender]--;\n', '    redeemedList.push(_name);\n', '    LogBeerRedeemed(msg.sender, _name, now);\n', '  }\n', '\n', '  function claimToken() public payable returns(bool) {\n', '    require(msg.value == 1 ether * 0.015);\n', '    require(totalSupply < maxSupply);\n', '    RECIPIENT.transfer(msg.value);\n', '    balances[msg.sender]++;\n', '    totalSupply++;\n', '    LogBeerClaimed(msg.sender, now);\n', '  }\n', '\n', '  function assignToken(address _owner) public onlyOwner returns(bool) {\n', '    require(balances[_owner] == 0);\n', '    require(totalSupply < maxSupply);\n', '    balances[_owner]++;\n', '    totalSupply++;\n', '    LogBeerClaimed(_owner, now);\n', '  }\n', '\n', '  function getRedeemedList() constant public returns (bytes32[]) {\n', '    bytes32[] memory list = new bytes32[](redeemedList.length);\n', '    for (uint256 i = 0; i < redeemedList.length; i++) {\n', '      list[i] = redeemedList[i];\n', '    }\n', '    return list;\n', '  }\n', '}']