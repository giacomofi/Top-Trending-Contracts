['pragma solidity ^0.4.18;\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Airdrop {\n', '    ERC20 public token;\n', '    \n', '    event LogAccountAmount(address indexed user, uint256 indexed amount);\n', '\n', '    function Airdrop(address _token) public {\n', '        token = ERC20(_token);\n', '    }\n', '\n', '    function setToken(address _token) public {\n', '        token = ERC20(_token);\n', '    }\n', '\n', "    // Uses transferFrom so you'll need to approve some tokens before this one to\n", '    // this contract address\n', '    function startAirdrop(address[] users, uint256[] amounts) public {\n', '        for(uint256 i = 0; i < users.length; i++) {\n', '            address account = users[i];\n', '            uint256 amount = amounts[i];\n', '            \n', '            LogAccountAmount(account, amount);\n', '            \n', '            token.transfer(account, amount);\n', '        }\n', '    }\n', '    \n', '    function recoverTokens(address _user, uint256 _amount) public {\n', '        token.transfer(_user, _amount);\n', '    }\n', '}']