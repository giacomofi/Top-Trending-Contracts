['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract ERC20Interface {\n', '      // Get the total token supply\n', '      function totalSupply() constant returns (uint256 _totalSupply);\n', '   \n', '     // Get the account balance of another account with address _owner\n', '     function balanceOf(address _owner) constant returns (uint256 balance);\n', '  \n', '     // Send _value amount of tokens to address _to\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '  \n', '    // Send _value amount of tokens from address _from to address _to\n', '     function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '  \n', '     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '     // If this function is called again it overwrites the current allowance with _value.\n', '     // this function is required for some DEX functionality\n', '     function approve(address _spender, uint256 _value) returns (bool success);\n', '  \n', '     // Returns the amount which _spender is still allowed to withdraw from _owner\n', '     function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '  \n', '     // Triggered when tokens are transferred.\n', '     event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '     // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract TokenERC20 is Owned,ERC20Interface {\n', '    using SafeMath for uint256;\n', '\n', '    // Public variables of the token\n', '    string public name = "BITFINCOIN";\n', '    string public symbol = "BIC";\n', '    uint8 public decimals = 18;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply = 0;\n', '    uint256 public totalSold;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    event ContractFrozen(bool status);\n', '\n', '    // defaults, 1 ether = 500 tokens\n', '    uint256 public rate = 125;\n', '    \n', '    // true if contract is block for transaction\n', '    bool public isContractFrozen = false;\n', '\n', '    // minimal ether value that this contact accept\n', '    // default 0.0001Ether = 0.0001 * 10^18 wei\n', '    uint256 public minAcceptEther = 100000000000000; // 0.0001 ether = 10^14 wei\n', '    \n', '    function TokenERC20() public {\n', '        //name = "Bitfincoin";\n', '        //symbol = "BIC";\n', '        //decimals = 18;\n', '        //totalSupply = 39000000000000000000000000; // 39M * 10^18\n', '        //totalSold = 0;\n', '        //rate = 125;\n', '        //minAcceptEther = 100000000000000; // 0.0001 ether = 10^14 wei\n', '\n', '        // grant all totalSupply tokens to owner\n', '        //balanceOf[msg.sender] = totalSupply;\n', '    }\n', '\n', '    function createTokens() internal {\n', '        require(msg.value >= minAcceptEther);\n', '        require(totalSupply > 0);\n', '\n', '        // send back tokens to sender balance base on rate\n', '        uint256 tokens = msg.value.mul(rate);\n', '        require(tokens <= totalSupply);\n', '\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].add(tokens);\n', '        balanceOf[owner] = balanceOf[owner].sub(tokens);\n', '\n', '        totalSupply = totalSupply.sub(tokens);\n', '        totalSold = totalSold.add(tokens);\n', '        // send ether to owner address\n', '        owner.transfer(msg.value);\n', '        Transfer(owner, msg.sender, tokens);\n', '    }\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check if contract is frozen\n', '        require(!isContractFrozen);\n', '        // Subtract from the sender\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        // Add the same to the recipient\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        _transfer(_from, _to, _value);\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_value == 0) || (allowance[msg.sender][_spender] == 0));\n', '\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Get allowance\n', '     */\n', '    function allowance(address _from, address _to) public constant returns (uint256) {\n', '        return allowance[_from][_to];\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);            // Subtract from the sender\n', '        totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the targeted balance\n', "        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);             // Subtract from the sender's allowance\n", '        totalSupply = totalSupply.sub(_value);                              // Update totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '    /** Set contract frozen status */\n', '    function setContractFrozen(bool status) onlyOwner public {\n', '        isContractFrozen = status;\n', '        ContractFrozen(status);\n', '    }\n', '\n', '    /** Get account balance (number of tokens the account hold)*/\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balanceOf[_owner];\n', '    }\n', '\n', '    /**  Get the total token supply */\n', '    function totalSupply() public constant returns (uint256 _totalSupply) {\n', '        return totalSupply;\n', '    }\n', '\n', '    /** Set token name */\n', '    function setName(string _name) onlyOwner public {\n', '        name = _name;\n', '    }\n', '\n', '    /** Set token symbol */\n', '    function setSymbol(string _symbol) onlyOwner public {\n', '        symbol = _symbol;\n', '    }\n', '\n', '    /** Set token rate */\n', '    function setRate(uint256 _rate) onlyOwner public {\n', '        rate = _rate;\n', '    }\n', '    \n', '    /** Set minimum accept ether */\n', '    function setMinAcceptEther(uint256 _acceptEther) onlyOwner public {\n', '        minAcceptEther = _acceptEther;\n', '    }\n', '\n', '    /** Set total supply */\n', '    function setTotalSupply(uint256 _totalSupply) onlyOwner public {\n', '        totalSupply = _totalSupply * 10 ** uint256(decimals);\n', '        balanceOf[owner] = totalSupply;\n', '        Transfer(0, this, totalSupply);\n', '        Transfer(this, owner, totalSupply);\n', '    }\n', '\n', '    /** Transfer ownership and transfer account balance */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0));\n', '        require(owner != newOwner);\n', '        balanceOf[newOwner] = balanceOf[newOwner].add(balanceOf[owner]);\n', '        Transfer(owner, newOwner, balanceOf[owner]);\n', '        balanceOf[owner] = 0;\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract BICToken is TokenERC20 {\n', '\n', '\tbool public isOpenForSale = false;\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    /**\n', '     * Fallback funtion will be call when someone send ether to this contract\n', '     */\n', '    function () public payable {\n', '\t\trequire(isOpenForSale);\n', '        require(!isContractFrozen);\n', '        createTokens();\n', '    }\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function BICToken() TokenERC20() public {\n', '    }\n', '\n', '    /* Internal transfer, only can be called by this contract */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(balanceOf[_from] >= _value);               // Check if the sender has enough\n', '        require(!frozenAccount[_from]);                     // Check if sender is frozen\n', '        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n', '        require(!isContractFrozen);                         // Check if contract is frozen\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the sender\n', '        balanceOf[_to] = balanceOf[_to].add(_value);                           // Add the same to the recipient\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /// @notice Create `mintedAmount` tokens and send it to `target`\n', '    /// @param target Address to receive the tokens\n', '    /// @param mintedAmount the amount of tokens it will receive\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '        uint256 amount = mintedAmount * 10 ** uint256(decimals);\n', '        balanceOf[target] = balanceOf[target].add(amount);\n', '        totalSupply = totalSupply.add(amount);\n', '        Transfer(0, this, amount);\n', '        Transfer(this, target, amount);\n', '    }\n', '\n', '    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '    /// @param target Address to be frozen\n', '    /// @param freeze either to freeze it or not\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '\t/// @notice Sets openned for sale status\n', '\tfunction setOpenForSale(bool status) onlyOwner public {\n', '\t\tisOpenForSale = status;\n', '\t}\n', '}']