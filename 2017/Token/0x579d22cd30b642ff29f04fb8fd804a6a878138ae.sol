['pragma solidity ^0.4.13;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract Peony is Ownable {\n', '\n', '  string public version;\n', '  string public unit = "piece";\n', '  uint256 public total;\n', '  struct Bullion {\n', '    string index;\n', '    string unit;\n', '    uint256 amount;\n', '    string ipfs;\n', '  }\n', '  bytes32[] public storehouseIndex;\n', '  mapping (bytes32 => Bullion) public storehouse;\n', '  address public tokenAddress;\n', '  uint256 public rate = 10;\n', '  PeonyToken token;\n', '\n', '\n', '\n', '\n', '\n', '  function Peony(string _version) {\n', '    version = _version;\n', '  }\n', '\n', '\n', '\n', '\n', '  event Stock (\n', '    string index,\n', '    string unit,\n', '    uint256 amount,\n', '    string ipfs,\n', '    uint256 total\n', '  );\n', '\n', '  event Ship (\n', '    string index,\n', '    uint256 total\n', '  );\n', '\n', '  event Mint (\n', '    uint256 amount,\n', '    uint256 total\n', '  );\n', '\n', '  event Reduce (\n', '    uint256 amount,\n', '    uint256 total\n', '  );\n', '\n', '\n', '\n', '\n', '\n', '  function stock(string _index, string _unit, uint256 _amount, string _ipfs) onlyOwner returns (bool);\n', '\n', '  function ship(string _index) onlyOwner returns (bool);\n', '\n', '  function mint(uint256 _ptAmount) onlyOwner returns (bool);\n', '\n', '  function reduce(uint256 _tokenAmount) onlyOwner returns (bool);\n', '\n', '  function setRate(uint256 _rate) onlyOwner returns (bool);\n', '\n', '  function setTokenAddress(address _address) onlyOwner returns (bool);\n', '\n', '\n', '\n', '  function convert2Peony(uint256 _amount) constant returns (uint256);\n', '\n', '  function convert2PeonyToken(uint256 _amount) constant returns (uint256);\n', '\n', '  function info(string _index) constant returns (string, string, uint256, string);\n', '\n', '  function suicide() onlyOwner returns (bool);\n', '}\n', '\n', 'contract PeonyToken is Ownable, ERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  string public version;\n', '  string public name;\n', '  string public symbol;\n', '  uint256 public decimals;\n', '  address public peony;\n', '\n', '  mapping(address => mapping (address => uint256)) allowed;\n', '  mapping(address => uint256) balances;\n', '  uint256 public totalSupply;\n', '  uint256 public totalSupplyLimit;\n', '  mapping(address => uint256) public transferLimits;\n', '\n', '  function PeonyToken(\n', '    string _version,\n', '    uint256 initialSupply,\n', '    uint256 totalSupplyLimit_,\n', '    string tokenName,\n', '    uint8 decimalUnits,\n', '    string tokenSymbol\n', '    ) {\n', '    require(totalSupplyLimit_ == 0 || totalSupplyLimit_ >= initialSupply);\n', '    version = _version;\n', '    balances[msg.sender] = initialSupply;\n', '    totalSupply = initialSupply;\n', '    totalSupplyLimit = totalSupplyLimit_;\n', '    name = tokenName;\n', '    symbol = tokenSymbol;\n', '    decimals = decimalUnits;\n', '  }\n', '\n', '  modifier isPeonyContract() {\n', '    require(peony != 0x0);\n', '    require(msg.sender == peony);\n', '    _;\n', '  }\n', '\n', '  modifier isOwnerOrPeonyContract() {\n', '    require(msg.sender != address(0) && (msg.sender == peony || msg.sender == owner));\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @notice produce `amount` of tokens to `_owner`\n', '   * @param amount The amount of tokens to produce\n', '   * @return Whether or not producing was successful\n', '   */\n', '  function produce(uint256 amount) isPeonyContract returns (bool) {\n', '    require(totalSupplyLimit == 0 || totalSupply.add(amount) <= totalSupplyLimit);\n', '\n', '    balances[owner] = balances[owner].add(amount);\n', '    totalSupply = totalSupply.add(amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @notice Reduce digital artwork tokens for changing physical artwork\n', '   * @param amount Reduce token amount\n', '   */\n', '  function reduce(uint256 amount) isPeonyContract returns (bool) {\n', '    require(balances[owner].sub(amount) >= 0);\n', '    require(totalSupply.sub(amount) >= 0);\n', '\n', '    balances[owner] = balances[owner].sub(amount);\n', '    totalSupply = totalSupply.sub(amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @notice Set address of Peony contract.\n', '   * @param _address the address of Peony contract\n', '   */\n', '  function setPeonyAddress(address _address) onlyOwner returns (bool) {\n', '    require(_address != 0x0);\n', '\n', '    peony = _address;\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\n', '   * @notice send `_value` token to `_to`\n', '   * @param _to The address of the recipient\n', '   * @param _value The amount of token to be transferred\n', '   * @return Whether the transfer was successful or not\n', '   */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    require(_to != address(0));\n', '    require(transferLimits[msg.sender] == 0 || transferLimits[msg.sender] >= _value);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @notice return total amount of tokens uint256 public totalSupply;\n', '   * @param _owner The address from which the balance will be retrieved\n', '   * @return The balance\n', '   */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  /**\n', '   * @notice Set transfer upper limit\n', '   * @param transferLimit Transfer upper limit\n', '   * @return Whether the operation was successful or not\n', '   */\n', '  function setTransferLimit(uint256 transferLimit) returns (bool) {\n', '    transferLimits[msg.sender] = transferLimit;\n', '  }\n', '\n', '  /**\n', '   * @notice Delete the contract\n', '   */\n', '  function suicide() onlyOwner returns (bool) {\n', '    selfdestruct(owner);\n', '    return true;\n', '  }\n', '}\n', '\n', 'library ConvertStringByte {\n', '  function bytes32ToString(bytes32 x) constant returns (string) {\n', '    bytes memory bytesString = new bytes(32);\n', '    uint charCount = 0;\n', '    for (uint j = 0; j < 32; j++) {\n', '      byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\n', '      if (char != 0) {\n', '          bytesString[charCount] = char;\n', '          charCount++;\n', '      }\n', '    }\n', '    bytes memory bytesStringTrimmed = new bytes(charCount);\n', '    for (j = 0; j < charCount; j++) {\n', '      bytesStringTrimmed[j] = bytesString[j];\n', '    }\n', '    return string(bytesStringTrimmed);\n', '  }\n', '\n', '  function stringToBytes32(string memory source) returns (bytes32 result) {\n', '    assembly {\n', '      result := mload(add(source, 32))\n', '    }\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']