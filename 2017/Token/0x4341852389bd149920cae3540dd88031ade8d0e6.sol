['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function () public payable {\n', '    revert();\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract MilkCoinToken is MintableToken {\t\n', ' \n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  uint public constant PERCENT_RATE = 100;\n', '\n', '  uint public constant BUY_BACK_BONUS = 20;\n', '   \n', '  string public constant name = "Milkcoin";\n', '   \n', '  string public constant symbol = "MLCN";\n', '    \n', '  uint8 public constant decimals = 2;\n', '\n', '  uint public invested;\n', '\n', '  uint public tokensAfterCrowdsale;\n', '\n', '  uint public startBuyBackDate;\n', '\n', '  uint public endBuyBackDate;\n', '\n', '  uint public toBuyBack;\n', '\n', '  bool public dividendsCalculated;\n', '\n', '  uint public dividendsIndex;\n', '\n', '  uint public dividendsPayedIndex;\n', '      \n', '  bool public dividendsPayed;\n', '\n', '  uint public ethToDividendsNeeds;\n', '\n', '  uint public buyBackInvestedValue;\n', '\n', '  address[] public addresses;\n', '\n', '  mapping(address => bool) public savedAddresses;\n', '\n', '  mapping(address => uint) public dividends;\n', '\n', '  mapping(address => bool) public lockAddresses;\n', '\n', '  function addAddress(address addr) internal {\n', '    if(!savedAddresses[addr]) {\n', '       savedAddresses[addr] = true;\n', '       addresses.push(addr); \n', '    }\n', '  }\n', '\n', '  function countOfAddresses() public constant returns(uint) {\n', '    return addresses.length;\n', '  }\n', '\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    bool result = super.mint(_to, _amount);\n', '    if(result) {\n', '      addAddress(_to);\n', '    }\n', '    return result;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    return postProcessTransfer(super.transfer(_to, _value), msg.sender, _to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    return postProcessTransfer(super.transferFrom(_from, _to, _value), _from, _to, _value);\n', '  }\n', '\n', '  function postProcessTransfer(bool result, address _from, address _to, uint256 _value) internal returns (bool) {\n', '    if(result) {\n', '      if(_to == address(this)) {\n', '        buyBack(_from, _value);\n', '      } else { \n', '        addAddress(_to);\n', '      }\n', '    }\n', '    return result;\n', '  }\n', '\n', '  function buyBack(address from, uint amount) internal {\n', '    if(now > endBuyBackDate) {\n', '      startBuyBackDate = endBuyBackDate;\n', '      endBuyBackDate = startBuyBackDate + 1 years;      \n', '      toBuyBack = tokensAfterCrowdsale.div(10);\n', '    }\n', '    require(now > startBuyBackDate && now < endBuyBackDate && amount <= toBuyBack); \n', '    balances[this] = balances[this].sub(amount);\n', '    totalSupply = totalSupply.sub(amount);\n', '    Burn(this, amount);\n', '    toBuyBack = toBuyBack.sub(amount);\n', '    uint valueInWei = amount.mul(buyBackInvestedValue).mul(PERCENT_RATE.add(BUY_BACK_BONUS)).div(PERCENT_RATE).div(totalSupply);\n', '    buyBackInvestedValue = buyBackInvestedValue.sub(amount.mul(buyBackInvestedValue).div(totalSupply));\n', '    from.transfer(valueInWei);\n', '  }\n', '\n', '  function retrieveTokens(address anotherToken) public onlyOwner {\n', '    require(anotherToken != address(this));\n', '    ERC20 alienToken = ERC20(anotherToken);\n', '    alienToken.transfer(owner, alienToken.balanceOf(this));\n', '  }\n', '\n', '  function finishMinting(uint newInvested) onlyOwner public returns (bool) {\n', '    invested = newInvested;\n', '    buyBackInvestedValue = newInvested;\n', '    tokensAfterCrowdsale = totalSupply;    \n', '    startBuyBackDate = 1609459200;\n', '    endBuyBackDate = startBuyBackDate + 365 * 1 days;      \n', '    toBuyBack = tokensAfterCrowdsale.div(10);\n', '    return super.finishMinting();\n', '  }\n', '\n', '  function lockAddress(address toLock) public onlyOwner {\n', '    lockAddresses[toLock] = true;\n', '  }\n', '\n', '  function unlockAddress(address toLock) public onlyOwner {\n', '    lockAddresses[toLock] = false;\n', '  }\n', '\n', '  // should use when payDividends is under re-entrance freeze\n', '  function payDividendsManually() public {\n', '    require(dividends[msg.sender] > 0);\n', '    uint dividendsValue = dividends[msg.sender];\n', '    dividends[msg.sender] = 0;\n', '    ethToDividendsNeeds = ethToDividendsNeeds.sub(dividendsValue);\n', '    msg.sender.transfer(dividendsValue);\n', '  }\n', '\n', '  // should use when payDividends is under re-entrance freeze\n', '  function resetDividendsCalculation() public onlyOwner {\n', '    dividendsCalculated = false;\n', '    dividendsPayed = false;\n', '  }\n', '\n', '  // re-entrance attack can freeze all dividends calculation\n', '  function payDividends(uint count) public onlyOwner {\n', '    require(!dividendsPayed && dividendsCalculated);\n', '    for(uint i = 0; dividendsPayedIndex < addresses.length && i < count; i++) {\n', '      address tokenHolder = addresses[dividendsPayedIndex];\n', '      if(!lockAddresses[tokenHolder] && dividends[tokenHolder] != 0) {\n', '        uint value = dividends[tokenHolder];\n', '        dividends[tokenHolder] = 0;\n', '        ethToDividendsNeeds = ethToDividendsNeeds.sub(value);\n', '        tokenHolder.transfer(value);\n', '      }\n', '      dividendsPayedIndex++;\n', '    }\n', '    if(dividendsPayedIndex == addresses.length) {  \n', '      dividendsPayedIndex = 0;\n', '      dividendsPayed = true;\n', '      dividendsCalculated = false;\n', '    }\n', '  }\n', '  \n', '\n', '  // re-entrance attack can freeze all dividends calculation\n', '  function calculateDividends(uint percent, uint count) public onlyOwner {\n', '    require(!dividendsCalculated);\n', '    for(uint i = 0; dividendsIndex < addresses.length && i < count; i++) {\n', '      address tokenHolder = addresses[dividendsIndex];\n', '      if(balances[tokenHolder] != 0) {\n', '        uint valueInWei = balances[tokenHolder].mul(invested).mul(percent).div(PERCENT_RATE).div(totalSupply);\n', '        ethToDividendsNeeds = ethToDividendsNeeds.add(valueInWei);\n', '        dividends[tokenHolder] = dividends[tokenHolder].add(valueInWei);\n', '      }\n', '      dividendsIndex++;\n', '    }\n', '    if(dividendsIndex == addresses.length) {  \n', '      dividendsIndex = 0;\n', '      dividendsCalculated = true;\n', '      dividendsPayed = false;\n', '    }\n', '  }\n', '\n', '  function withdraw() public onlyOwner {\n', '    owner.transfer(this.balance);\n', '  }\n', '\n', '  function deposit() public payable {\n', '  }\n', '\n', '  function () public payable {\n', '    deposit();\n', '  }\n', '\n', '}\n', '\n', 'contract CommonCrowdsale is Ownable {\n', '\n', '  using SafeMath for uint256;\n', ' \n', '  uint public constant DIVIDER = 10000000000000000;\n', '\n', '  uint public constant PERCENT_RATE = 100;\n', '\n', '  uint public price = 1500;\n', '\n', '  uint public minInvestedLimit = 100000000000000000;\n', '\n', '  uint public hardcap = 250000000000000000000000;\n', '\n', '  uint public start = 1510758000;\n', '\n', '  uint public invested;\n', '\n', '  address public wallet;\n', '\n', '  struct Milestone {\n', '    uint periodInDays;\n', '    uint bonus;\n', '  }\n', '\n', '  Milestone[] public milestones;\n', '\n', '  MilkCoinToken public token = new MilkCoinToken();\n', '\n', '  function setHardcap(uint newHardcap) public onlyOwner { \n', '    hardcap = newHardcap;\n', '  }\n', ' \n', '  function setStart(uint newStart) public onlyOwner { \n', '    start = newStart;\n', '  }\n', '\n', '  function setWallet(address newWallet) public onlyOwner { \n', '    wallet = newWallet;\n', '  }\n', '\n', '  function setPrice(uint newPrice) public onlyOwner {\n', '    price = newPrice;\n', '  }\n', '\n', '  function setMinInvestedLimit(uint newMinInvestedLimit) public onlyOwner {\n', '    minInvestedLimit = newMinInvestedLimit;\n', '  }\n', ' \n', '  function milestonesCount() public constant returns(uint) {\n', '    return milestones.length;\n', '  }\n', '\n', '  function addMilestone(uint limit, uint bonus) public onlyOwner {\n', '    milestones.push(Milestone(limit, bonus));\n', '  }\n', '\n', '  function end() public constant returns(uint) {\n', '    uint last = start;\n', '    for (uint i = 0; i < milestones.length; i++) {\n', '      Milestone storage milestone = milestones[i];\n', '      last += milestone.periodInDays * 1 days;\n', '    }\n', '    return last;\n', '  }\n', '\n', '  function getMilestoneBonus() public constant returns(uint) {\n', '    uint prevTimeLimit = start;\n', '    for (uint i = 0; i < milestones.length; i++) {\n', '      Milestone storage milestone = milestones[i];\n', '      prevTimeLimit += milestone.periodInDays * 1 days;\n', '      if (now < prevTimeLimit)\n', '        return milestone.bonus;\n', '    }\n', '    revert();\n', '  }\n', '\n', '  function createTokensManually(address to, uint amount) public onlyOwner {\n', '    require(now >= start && now < end());\n', '    token.mint(to, amount);\n', '  }\n', '\n', '  function createTokens() public payable {\n', '    require(now >= start && now < end() && invested < hardcap);\n', '    wallet.transfer(msg.value);\n', '    invested = invested.add(msg.value);\n', '    uint tokens = price.mul(msg.value).div(DIVIDER);\n', '    uint bonusPercent = getMilestoneBonus();    \n', '    if(bonusPercent > 0) {\n', '      tokens = tokens.add(tokens.mul(bonusPercent).div(PERCENT_RATE));\n', '    }\n', '    token.mint(msg.sender, tokens);\n', '  }\n', '\n', '  function finishMinting() public onlyOwner {\n', '    token.finishMinting(invested);\n', '    token.transferOwnership(owner);\n', '  }\n', '\n', '  function() external payable {\n', '    createTokens();\n', '  }\n', '\n', '  function retrieveTokens(address anotherToken) public onlyOwner {\n', '    ERC20 alienToken = ERC20(anotherToken);\n', '    alienToken.transfer(wallet, alienToken.balanceOf(this));\n', '  }\n', '\n', '}\n', '\n', 'contract MilkCoinTokenCrowdsale is CommonCrowdsale {\n', '\n', '  function MilkCoinTokenCrowdsale() public {\n', '    setHardcap(250000000000000000000000);\n', '    setStart(1510758000);\n', '    setPrice(1500);\n', '    setWallet(0x87127Cb2a73eA9ba842b208455fa076cab03E844);\n', '    addMilestone(3, 100);\n', '    addMilestone(5, 67);\n', '    addMilestone(5, 43);\n', '    addMilestone(5, 25);\n', '    addMilestone(12, 0);\n', '    transferOwnership(0xb794B6c611bFC09ABD206184417082d3CA570FB7);\n', '  }\n', '\n', '}']