['pragma solidity ^0.4.18;\n', '\n', '/// @title LRC Foundation Icebox Program\n', '/// @author Daniel Wang - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="e084818e89858ca08c8f8f9092898e87ce8f9287">[email&#160;protected]</a>>.\n', '/// For more information, please visit https://loopring.org.\n', '\n', '/// Loopring Foundation&#39;s LRC (20% of total supply) will be locked during the first two years，\n', '/// two years later, 1/24 of all locked LRC fund can be unlocked every month.\n', '\n', '/// @title ERC20 ERC20 Interface\n', '/// @dev see https://github.com/ethereum/EIPs/issues/20\n', '/// @author Daniel Wang - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="dfbbbeb1b6bab39fb3b0b0afadb6b1b8f1b0adb8">[email&#160;protected]</a>>\n', 'contract ERC20 {\n', '    uint public totalSupply;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function balanceOf(address who) view public returns (uint256);\n', '    function allowance(address owner, address spender) view public returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '}\n', '\n', 'contract AirDropContract {\n', '\n', '    event AirDropped(address addr, uint amount);\n', '\n', '    function drop(\n', '        address tokenAddress,\n', '        address[] recipients,\n', '        uint256[] amounts) public {\n', '\n', '        require(tokenAddress != 0x0);\n', '        require(amounts.length == recipients.length);\n', '\n', '        ERC20 token = ERC20(tokenAddress);\n', '\n', '        uint balance = token.balanceOf(msg.sender);\n', '        uint allowance = token.allowance(msg.sender, address(this));\n', '        uint available = balance > allowance ? allowance : balance;\n', '\n', '        for (uint i = 0; i < recipients.length; i++) {\n', '            require(available >= amounts[i]);\n', '            if (isQualitifiedAddress(\n', '                recipients[i]\n', '            )) {\n', '                available -= amounts[i];\n', '                require(token.transferFrom(msg.sender, recipients[i], amounts[i]));\n', '\n', '                AirDropped(recipients[i], amounts[i]);\n', '            }\n', '        }\n', '    }\n', '\n', '    function isQualitifiedAddress(address addr)\n', '        public\n', '        view\n', '        returns (bool result)\n', '    {\n', '        result = addr != 0x0 && addr != msg.sender && !isContract(addr);\n', '    }\n', '\n', '    function isContract(address addr) internal view returns (bool) {\n', '        uint size;\n', '        assembly { size := extcodesize(addr) }\n', '        return size > 0;\n', '    }\n', '\n', '    function () payable public {\n', '        revert();\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/// @title LRC Foundation Icebox Program\n', '/// @author Daniel Wang - <daniel@loopring.org>.\n', '/// For more information, please visit https://loopring.org.\n', '\n', "/// Loopring Foundation's LRC (20% of total supply) will be locked during the first two years，\n", '/// two years later, 1/24 of all locked LRC fund can be unlocked every month.\n', '\n', '/// @title ERC20 ERC20 Interface\n', '/// @dev see https://github.com/ethereum/EIPs/issues/20\n', '/// @author Daniel Wang - <daniel@loopring.org>\n', 'contract ERC20 {\n', '    uint public totalSupply;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function balanceOf(address who) view public returns (uint256);\n', '    function allowance(address owner, address spender) view public returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '}\n', '\n', 'contract AirDropContract {\n', '\n', '    event AirDropped(address addr, uint amount);\n', '\n', '    function drop(\n', '        address tokenAddress,\n', '        address[] recipients,\n', '        uint256[] amounts) public {\n', '\n', '        require(tokenAddress != 0x0);\n', '        require(amounts.length == recipients.length);\n', '\n', '        ERC20 token = ERC20(tokenAddress);\n', '\n', '        uint balance = token.balanceOf(msg.sender);\n', '        uint allowance = token.allowance(msg.sender, address(this));\n', '        uint available = balance > allowance ? allowance : balance;\n', '\n', '        for (uint i = 0; i < recipients.length; i++) {\n', '            require(available >= amounts[i]);\n', '            if (isQualitifiedAddress(\n', '                recipients[i]\n', '            )) {\n', '                available -= amounts[i];\n', '                require(token.transferFrom(msg.sender, recipients[i], amounts[i]));\n', '\n', '                AirDropped(recipients[i], amounts[i]);\n', '            }\n', '        }\n', '    }\n', '\n', '    function isQualitifiedAddress(address addr)\n', '        public\n', '        view\n', '        returns (bool result)\n', '    {\n', '        result = addr != 0x0 && addr != msg.sender && !isContract(addr);\n', '    }\n', '\n', '    function isContract(address addr) internal view returns (bool) {\n', '        uint size;\n', '        assembly { size := extcodesize(addr) }\n', '        return size > 0;\n', '    }\n', '\n', '    function () payable public {\n', '        revert();\n', '    }\n', '}']
