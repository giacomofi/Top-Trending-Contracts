['pragma solidity ^0.4.11;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract SmartToken is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public totalSupply;\n', '  mapping(address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '  bool public mintingFinished = false;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Burn(address indexed burner, uint256 value);\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '    require(_allowance > 0);\n', '    require(_allowance >= _value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function increaseApproval (address _spender, uint _addedValue) returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function burn(uint256 _value) public {\n', '      require(_value > 0);\n', '\n', '      address burner = msg.sender;\n', '      balances[burner] = balances[burner].sub(_value);\n', '      totalSupply = totalSupply.sub(_value);\n', '      Burn(burner, _value);\n', '  }\n', '\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract Token is SmartToken {\n', '\n', '  using SafeMath for uint256;\n', '  string public name = "Ponscoin";\n', '  string public symbol = "PONS";\n', '  uint public decimals = 6;\n', '  uint256 public INITIAL_SUPPLY = 10000000;\n', '\n', '  function Token() {\n', '    owner = msg.sender;\n', '    mint(msg.sender, INITIAL_SUPPLY * 1000000);\n', '  }\n', '\n', '  function transfer(address _to, uint _value) returns (bool success) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function () payable {\n', '    revert();\n', '  }\n', '\n', '  function withdraw() onlyOwner {\n', '    msg.sender.transfer(this.balance);\n', '  }\n', '\n', '  function withdrawSome(uint _value) onlyOwner {\n', '    require(_value <= this.balance);\n', '    msg.sender.transfer(_value);\n', '  }\n', '\n', '  function killContract(uint256 _value) onlyOwner {\n', '    require(_value > 0);\n', '    selfdestruct(owner);\n', '  }\n', '}\n', '\n', 'contract Sale is Ownable {\n', '  using SafeMath for uint256;\n', '  uint256 public rate = 162866449511000;\n', '  Token public token;\n', '\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  function Sale() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function startSale(address _token) onlyOwner {\n', '    token = Token(_token);\n', '  }\n', '\n', '  function updateRate(uint256 _rate) onlyOwner {\n', '    rate = _rate;\n', '  }\n', '\n', '  function () payable {\n', '    if(rate == 0){\n', '      revert();\n', '    }\n', '    if(msg.value < rate){\n', '      revert();\n', '    }\n', '    uint256 value = msg.value;\n', '    uint256 tokens = value.mul(1000000).div(rate);\n', '    if(token.transferFrom(owner, msg.sender, tokens)){\n', '        TokenPurchase(msg.sender, msg.sender, value, tokens);\n', '    } else {\n', '      revert();\n', '    }\n', '  }\n', '\n', '  function tokensAvailable() constant returns (uint256) {\n', '    return token.balanceOf(owner);\n', '  }\n', '\n', '  function withdraw() onlyOwner {\n', '    msg.sender.transfer(this.balance);\n', '  }\n', '\n', '  function withdrawSome(uint _value) onlyOwner {\n', '    require(_value <= this.balance);\n', '    msg.sender.transfer(_value);\n', '  }\n', '\n', '  function killContract(uint256 _value) onlyOwner {\n', '    require(_value > 0);\n', '    selfdestruct(owner);\n', '  }\n', '}']