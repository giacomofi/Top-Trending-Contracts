['pragma solidity ^0.4.15;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', '\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() internal {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() external onlyOwner whenNotPaused {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() external onlyOwner whenPaused {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' *\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * Alvalor token\n', ' *\n', ' * The Alvalor Token is a simple ERC20 token with an initial supply equivalent to the maximum value\n', ' * of an unsigned 64-bit integer, credited to the creator which represents the Alvalor foundation.\n', ' *\n', ' * It is pausible so that transfers can be frozen when we create the snapshot of balances, which\n', ' * will be used to transfer balances to the Alvalor genesis block.\n', ' **/\n', '\n', 'contract AlvalorToken is PausableToken {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  // the details of the token for wallets\n', '  string public constant name = "Alvalor";\n', '  string public constant symbol = "TVAL";\n', '  uint8 public constant decimals = 12;\n', '\n', '  // when frozen, the supply of the token cannot change anymore\n', '  bool public frozen = false;\n', '\n', '  // defines the maximum total supply and the maximum number of tokens\n', '  // claimable through the airdrop mechanism\n', '  uint256 public constant maxSupply = 18446744073709551615;\n', '  uint256 public constant dropSupply = 3689348814741910323;\n', '\n', '  // keeps track of the total supply already claimed through the airdrop\n', '  uint256 public claimedSupply = 0;\n', '\n', '  // keeps track of how much each address can claim in the airdrop\n', '  mapping(address => uint256) private claims;\n', '\n', '  // events emmitted by the contract\n', '  event Freeze();\n', '  event Drop(address indexed receiver, uint256 value);\n', '  event Mint(address indexed receiver, uint256 value);\n', '  event Claim(address indexed receiver, uint256 value);\n', '  event Burn(address indexed receiver, uint256 value);\n', '\n', '  // the not frozen modifier guards functions modifying the supply of the token\n', '  // from being called after the token supply has been frozen\n', '  modifier whenNotFrozen() {\n', '    require(!frozen);\n', '    _;\n', '  }\n', '\n', '  modifier whenFrozen() {\n', '    require(frozen);\n', '    _;\n', '  }\n', '\n', '  // AlvalorToken will make sure the owner can claim any unclaimed drop at any\n', '  // point.\n', '  function AlvalorToken() public {\n', '    claims[owner] = dropSupply;\n', '  }\n', '\n', '  // freeze will irrevocably stop all modifications to the supply of the token,\n', '  // effectively freezing the supply of the token (transfers are still possible)\n', '  function freeze() external onlyOwner whenNotFrozen {\n', '    frozen = true;\n', '    Freeze();\n', '  }\n', '\n', '  // mint can be called by the owner to create tokens for a certain receiver\n', '  // it will no longer work once the token supply has been frozen\n', '  function mint(address _receiver, uint256 _value) onlyOwner whenNotFrozen public returns (bool) {\n', '    require(_value > 0);\n', '    require(_value <= maxSupply.sub(totalSupply).sub(dropSupply));\n', '    totalSupply = totalSupply.add(_value);\n', '    balances[_receiver] = balances[_receiver].add(_value);\n', '    Mint(_receiver, _value);\n', '    return true;\n', '  }\n', '\n', '  function claimable(address _receiver) constant public returns (uint256) {\n', '    if (claimedSupply >= dropSupply) {\n', '      return 0;\n', '    }\n', '    return claims[_receiver];\n', '  }\n', '\n', '  // drop will create a new allowance for claimable tokens of the airdrop\n', '  // it will no longer work once the token supply has been frozen\n', '  function drop(address _receiver, uint256 _value) onlyOwner whenNotFrozen public returns (bool) {\n', '    require(claimedSupply < dropSupply);\n', '    require(_receiver != owner);\n', '    claims[_receiver] = _value;\n', '    Drop(_receiver, _value);\n', '    return true;\n', '  }\n', '\n', '  // claim will allow any sender to retrieve the airdrop tokens assigned to him\n', '  // it will only work until the maximum number of airdrop tokens are redeemed\n', '  function claim() whenNotPaused whenFrozen public returns (bool) {\n', '    require(claimedSupply < dropSupply);\n', '    uint value = Math.min256(claims[msg.sender], dropSupply.sub(claimedSupply));\n', '    claims[msg.sender] = claims[msg.sender].sub(value);\n', '    claimedSupply = claimedSupply.add(value);\n', '    totalSupply = totalSupply.add(value);\n', '    balances[msg.sender] = balances[msg.sender].add(value);\n', '    Claim(msg.sender, value);\n', '    return true;\n', '  }\n', '}']