['pragma solidity ^0.4.16;\n', '\n', 'contract ERC20 {\n', '\n', '    uint256 public totalSupply;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    function transfer(address to, uint256 value) returns (bool success);\n', '\n', '    function transferFrom(address from, address to, uint256 value) returns (bool success);\n', '\n', '    function approve(address spender, uint256 value) returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '}\n', '\n', 'contract BondkickBondToken is ERC20 {\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '    address public owner;\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function BondkickBondToken(string _name, string _symbol, uint8 _decimals, uint256 _initialMint) {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '        owner = msg.sender;\n', '        \n', '        if (_initialMint > 0) {\n', '            totalSupply += _initialMint;\n', '            balanceOf[msg.sender] += _initialMint;\n', '                        \n', '            Transfer(address(0), msg.sender, _initialMint);\n', '        }\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        require(_to != address(0));\n', '        require(balanceOf[msg.sender] >= _value);\n', '        \n', '        _transfer(msg.sender, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        require(_to != address(0));\n', '        require(balanceOf[_from] >= _value);\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        \n', '        allowance[_from][msg.sender] -= _value;\n', '        \n', '        _transfer(_from, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        require(_spender != address(0));\n', '\n', '        allowance[msg.sender][_spender] = _value;\n', '\n', '        Approval(msg.sender, _spender, _value);\n', '        \n', '        return true;\n', '    }\n', '\n', '    function mint(uint256 _value) onlyOwner returns (bool success) {\n', '        require(_value > 0 && (totalSupply + _value) >= totalSupply);\n', '        \n', '        totalSupply += _value;\n', '        balanceOf[msg.sender] += _value;\n', '                    \n', '        Transfer(address(0), msg.sender, _value);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function mintTo (uint256 _value, address _to) onlyOwner returns (bool success) {\n', '        require(_value > 0 && (totalSupply + _value) >= totalSupply);\n', '        \n', '        totalSupply += _value;\n', '        balanceOf[_to] += _value;\n', '        \n', '        Transfer(address(0), _to, _value);\n', '        \n', '        return true;\n', '    }\n', '\n', '    function unmint(uint256 _value) onlyOwner returns (bool success) {\n', '        require(_value > 0 && balanceOf[msg.sender] >= _value);\n', '\n', '        totalSupply -= _value;\n', '        balanceOf[msg.sender] -= _value;\n', '\n', '        Transfer(msg.sender, address(0), _value);\n', '\n', '        return true;\n', '    }\n', '    \n', '    function changeOwner(address _newOwner) onlyOwner returns (bool success) {\n', '        require(_newOwner != address(0));\n', '\n', '        owner = _newOwner;\n', '        \n', '        return true;\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '\n', '        Transfer(_from, _to, _value);\n', '    }\n', '}']