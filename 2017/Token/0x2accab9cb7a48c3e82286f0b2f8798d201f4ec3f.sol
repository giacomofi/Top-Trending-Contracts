['pragma solidity ^0.4.15;\n', '\n', 'contract Owned {\n', '\n', '    address owner;\n', '    \n', '    function Owned() { owner = msg.sender; }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract TokenEIP20 {\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '}\n', '\n', 'contract TokenNotifier {\n', '\n', '    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n', '}\n', '\n', 'library SafeMathLib {\n', '\n', '    uint constant WAD = 10 ** 18;\n', '    uint constant RAY = 10 ** 27;\n', '\n', '    function add(uint x, uint y) internal returns (uint z) {\n', '        require((z = x + y) >= x);\n', '    }\n', '\n', '    function sub(uint x, uint y) internal returns (uint z) {\n', '        require((z = x - y) <= x);\n', '    }\n', '\n', '    function mul(uint x, uint y) internal returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x);\n', '    }\n', '\n', '    function per(uint x, uint y) internal constant returns (uint z) {\n', '        return mul((x / 100), y);\n', '    }\n', '\n', '    function min(uint x, uint y) internal returns (uint z) {\n', '        return x <= y ? x : y;\n', '    }\n', '\n', '    function max(uint x, uint y) internal returns (uint z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    function imin(int x, int y) internal returns (int z) {\n', '        return x <= y ? x : y;\n', '    }\n', '\n', '    function imax(int x, int y) internal returns (int z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    function wmul(uint x, uint y) internal returns (uint z) {\n', '        z = add(mul(x, y), WAD / 2) / WAD;\n', '    }\n', '\n', '    function rmul(uint x, uint y) internal returns (uint z) {\n', '        z = add(mul(x, y), RAY / 2) / RAY;\n', '    }\n', '\n', '    function wdiv(uint x, uint y) internal returns (uint z) {\n', '        z = add(mul(x, WAD), y / 2) / y;\n', '    }\n', '\n', '    function rdiv(uint x, uint y) internal returns (uint z) {\n', '        z = add(mul(x, RAY), y / 2) / y;\n', '    }\n', '\n', '    function wper(uint x, uint y) internal constant returns (uint z) {\n', '        return wmul(wdiv(x, 100), y);\n', '    }\n', '\n', '    // This famous algorithm is called "exponentiation by squaring"\n', '    // and calculates x^n with x as fixed-point and n as regular unsigned.\n', '    //\n', "    // It's O(log n), instead of O(n) for naive repeated multiplication.\n", '    //\n', '    // These facts are why it works:\n', '    //\n', '    //  If n is even, then x^n = (x^2)^(n/2).\n', '    //  If n is odd,  then x^n = x * x^(n-1),\n', '    //   and applying the equation for even x gives\n', '    //    x^n = x * (x^2)^((n-1) / 2).\n', '    //\n', '    //  Also, EVM division is flooring and\n', '    //    floor[(n-1) / 2] = floor[n / 2].\n', '    //\n', '    function rpow(uint x, uint n) internal returns (uint z) {\n', '        z = n % 2 != 0 ? x : RAY;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            x = rmul(x, x);\n', '\n', '            if (n % 2 != 0) {\n', '                z = rmul(z, x);\n', '            }\n', '        }\n', '    }\n', '\n', '}\n', '\n', 'contract BattleToken is Owned, TokenEIP20 {\n', '    using SafeMathLib for uint256;\n', '    \n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    \n', '    string  public constant name        = "Battle";\n', '    string  public constant symbol      = "BTL";\n', '    uint256 public constant decimals    = 18;\n', '    uint256 public constant totalSupply = 1000000 * (10 ** decimals);\n', '\n', '    function BattleToken(address _battleAddress) {\n', '        balances[owner] = totalSupply;\n', '        require(approve(_battleAddress, totalSupply));\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] < _value) {\n', '            return false;\n', '        }\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        assert(balances[msg.sender] >= 0);\n', '        balances[_to] = balances[_to].add(_value);\n', '        assert(balances[_to] <= totalSupply);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] < _value || allowed[_from][msg.sender] < _value) {\n', '            return false;\n', '        }\n', '        balances[_from] = balances[_from].sub(_value);\n', '        assert(balances[_from] >= 0);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        assert(balances[_to] <= totalSupply);        \n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        if (!approve(_spender, _value)) {\n', '            return false;\n', '        }\n', '        TokenNotifier(_spender).receiveApproval(msg.sender, _value, this, _extraData);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}']