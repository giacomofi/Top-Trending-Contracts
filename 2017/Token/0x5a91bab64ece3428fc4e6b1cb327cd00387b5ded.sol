['pragma solidity ^0.4.15;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', '   @title SmartToken, an extension of ERC20 token standard\n', '\n', '   Implementation the SmartToken, following the ERC20 standard with extra\n', '   methods to transfer value and data and execute calls in transfers and\n', '   approvals.\n', '   Uses OpenZeppelin StandardToken.\n', ' */\n', 'contract SmartToken is StandardToken {\n', '\n', '  /**\n', '     @dev `approveData` is an addition to ERC20 token methods. It allows to\n', '     approve the transfer of value and execute a call with the sent data.\n', '\n', '     Beware that changing an allowance with this method brings the risk that\n', '     someone may use both the old and the new allowance by unfortunate\n', '     transaction ordering. One possible solution to mitigate this race condition\n', "     is to first reduce the spender's allowance to 0 and set the desired value\n", '     afterwards:\n', '     https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\n', '     @param _spender The address that will spend the funds.\n', '     @param _value The amount of tokens to be spent.\n', '     @param _data ABI-encoded contract call to call `_to` address.\n', '\n', '     @return true if the call function was executed successfully\n', '   */\n', '  function approveData(address _spender, uint256 _value, bytes _data) returns (bool) {\n', '    require(_spender != address(this));\n', '\n', '    super.approve(_spender, _value);\n', '\n', '    require(_spender.call(_data));\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '     @dev Addition to ERC20 token methods. Transfer tokens to a specified\n', '     address and execute a call with the sent data on the same transaction\n', '\n', '     @param _to address The address which you want to transfer to\n', '     @param _value uint256 the amout of tokens to be transfered\n', '     @param _data ABI-encoded contract call to call `_to` address.\n', '\n', '     @return true if the call function was executed successfully\n', '   */\n', '  function transferData(address _to, uint256 _value, bytes _data) public returns (bool) {\n', '    require(_to != address(this));\n', '\n', '    require(_to.call(_data));\n', '\n', '    super.transfer(_to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '     @dev Addition to ERC20 token methods. Transfer tokens from one address to\n', '     another and make a contract call on the same transaction\n', '\n', '     @param _from The address which you want to send tokens from\n', '     @param _to The address which you want to transfer to\n', '     @param _value The amout of tokens to be transferred\n', '     @param _data ABI-encoded contract call to call `_to` address.\n', '\n', '     @return true if the call function was executed successfully\n', '   */\n', '  function transferDataFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool) {\n', '    require(_to != address(this));\n', '\n', '    require(_to.call(_data));\n', '\n', '    super.transferFrom(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', '   @title Líf, the Winding Tree token\n', '\n', '   Implementation of Líf, the ERC20 token for Winding Tree, with extra methods\n', '   to transfer value and data to execute a call on transfer.\n', '   Uses OpenZeppelin MintableToken and Pausable.\n', ' */\n', 'contract LifToken is SmartToken, MintableToken, Pausable {\n', '  // Token Name\n', '  string public constant NAME = "Líf";\n', '\n', '  // Token Symbol\n', '  string public constant SYMBOL = "LIF";\n', '\n', '  // Token decimals\n', '  uint public constant DECIMALS = 18;\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approveData(address spender, uint256 value, bytes data) public whenNotPaused returns (bool) {\n', '    return super.approveData(spender, value, data);\n', '  }\n', '\n', '  function transferData(address to, uint256 value, bytes data) public whenNotPaused returns (bool) {\n', '    return super.transferData(to, value, data);\n', '  }\n', '\n', '  function transferDataFrom(address from, address to, uint256 value, bytes data) public whenNotPaused returns (bool) {\n', '    return super.transferDataFrom(from, to, value, data);\n', '  }\n', '\n', '  /**\n', '     @dev Burns a specific amount of tokens.\n', '\n', '     @param _value The amount of tokens to be burned.\n', '   */\n', '  function burn(uint256 _value) public whenNotPaused {\n', '    require(_value > 0);\n', '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    Burn(burner, _value);\n', '\n', '    // a Transfer event to 0x0 can be useful for observers to keep track of\n', '    // all the Lif by just looking at those events\n', '    Transfer(burner, address(0), _value);\n', '  }\n', '\n', '  event Burn(address indexed burner, uint value);\n', '\n', '}\n', '\n', '\n', '/**\n', '   @title Vested Payment Schedule for LifToken\n', '\n', '   An ownable vesting schedule for the LifToken, the tokens can only be\n', '   claimed by the owner. The contract has a start timestamp, a duration\n', '   of each period in seconds (it can be days, months, years), a total\n', '   amount of periods and a cliff. The available amount of tokens will\n', '   be calculated based on the balance of LifTokens of the contract at\n', '   that time.\n', ' */\n', '\n', 'contract VestedPayment is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  // When the vested schedule starts\n', '  uint256 public startTimestamp;\n', '\n', '  // How many seconds each period will last\n', '  uint256 public secondsPerPeriod;\n', '\n', '  // How many periods will have in total\n', '  uint256 public totalPeriods;\n', '\n', '  // The amount of tokens to be vested in total\n', '  uint256 public tokens;\n', '\n', '  // How many tokens were claimed\n', '  uint256 public claimed;\n', '\n', '  // The token contract\n', '  LifToken public token;\n', '\n', '  // Duration (in periods) of the initial cliff in the vesting schedule\n', '  uint256 public cliffDuration;\n', '\n', '  /**\n', '     @dev Constructor.\n', '\n', '     @param _startTimestamp see `startTimestamp`\n', '     @param _secondsPerPeriod see `secondsPerPeriod`\n', '     @param _totalPeriods see `totalPeriods\n', '     @param _cliffDuration see `cliffDuration`\n', '     @param _tokens see `tokens`\n', '     @param tokenAddress the address of the token contract\n', '   */\n', '  function VestedPayment(\n', '    uint256 _startTimestamp, uint256 _secondsPerPeriod,\n', '    uint256 _totalPeriods, uint256 _cliffDuration,\n', '    uint256 _tokens, address tokenAddress\n', '  ) {\n', '    require(_startTimestamp >= block.timestamp);\n', '    require(_secondsPerPeriod > 0);\n', '    require(_totalPeriods > 0);\n', '    require(tokenAddress != address(0));\n', '    require(_cliffDuration < _totalPeriods);\n', '    require(_tokens > 0);\n', '\n', '    startTimestamp = _startTimestamp;\n', '    secondsPerPeriod = _secondsPerPeriod;\n', '    totalPeriods = _totalPeriods;\n', '    cliffDuration = _cliffDuration;\n', '    tokens = _tokens;\n', '    token = LifToken(tokenAddress);\n', '  }\n', '\n', '  /**\n', '     @dev Get how many tokens are available to be claimed\n', '   */\n', '  function getAvailableTokens() public constant returns (uint256) {\n', '    uint256 period = block.timestamp.sub(startTimestamp)\n', '      .div(secondsPerPeriod);\n', '\n', '    if (period < cliffDuration) {\n', '      return 0;\n', '    } else if (period >= totalPeriods) {\n', '      return tokens.sub(claimed);\n', '    } else {\n', '      return tokens.mul(period.add(1)).div(totalPeriods).sub(claimed);\n', '    }\n', '  }\n', '\n', '  /**\n', '     @dev Claim the tokens, they can be claimed only by the owner\n', '     of the contract\n', '\n', '     @param amount how many tokens to be claimed\n', '   */\n', '  function claimTokens(uint256 amount) public onlyOwner {\n', '    assert(getAvailableTokens() >= amount);\n', '\n', '    claimed = claimed.add(amount);\n', '    token.transfer(owner, amount);\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', '   @title Market Validation Mechanism (MVM)\n', ' */\n', 'contract LifMarketValidationMechanism is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  // The Lif token contract\n', '  LifToken public lifToken;\n', '\n', '  // The address of the foundation wallet. It can claim part of the eth funds\n', '  // following an exponential curve until the end of the MVM lifetime (24 or 48\n', '  // months). After that it can claim 100% of the remaining eth in the MVM.\n', '  address public foundationAddr;\n', '\n', '  // The amount of wei that the MVM received initially\n', '  uint256 public initialWei;\n', '\n', '  // Start timestamp since which the MVM begins to accept tokens via sendTokens\n', '  uint256 public startTimestamp;\n', '\n', '  // Quantity of seconds in every period, usually equivalent to 30 days\n', '  uint256 public secondsPerPeriod;\n', '\n', '  // Number of periods. It should be 24 or 48 (each period is roughly a month)\n', '  uint8 public totalPeriods;\n', '\n', '  // The total amount of wei that was claimed by the foundation so far\n', '  uint256 public totalWeiClaimed = 0;\n', '\n', '  // The price at which the MVM buys tokens at the beginning of its lifetime\n', '  uint256 public initialBuyPrice = 0;\n', '\n', '  // Amount of tokens that were burned by the MVM\n', '  uint256 public totalBurnedTokens = 0;\n', '\n', '  // Amount of wei that was reimbursed via sendTokens calls\n', '  uint256 public totalReimbursedWei = 0;\n', '\n', '  // Total supply of tokens when the MVM was created\n', '  uint256 public originalTotalSupply;\n', '\n', '  uint256 constant PRICE_FACTOR = 100000;\n', '\n', '  // Has the MVM been funded by calling `fund`? It can be funded only once\n', '  bool public funded = false;\n', '\n', '  // true when the market MVM is paused\n', '  bool public paused = false;\n', '\n', '  // total amount of seconds that the MVM was paused\n', '  uint256 public totalPausedSeconds = 0;\n', '\n', '  // the timestamp where the MVM was paused\n', '  uint256 public pausedTimestamp;\n', '\n', '  uint256[] public periods;\n', '\n', '  // Events\n', '  event Pause();\n', '  event Unpause(uint256 pausedSeconds);\n', '\n', '  event ClaimedWei(uint256 claimedWei);\n', '  event SentTokens(address indexed sender, uint256 price, uint256 tokens, uint256 returnedWei);\n', '\n', '  modifier whenNotPaused(){\n', '    assert(!paused);\n', '    _;\n', '  }\n', '\n', '  modifier whenPaused(){\n', '    assert(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '     @dev Constructor\n', '\n', '     @param lifAddr the lif token address\n', '     @param _startTimestamp see `startTimestamp`\n', '     @param _secondsPerPeriod see `secondsPerPeriod`\n', '     @param _totalPeriods see `totalPeriods`\n', '     @param _foundationAddr see `foundationAddr`\n', '    */\n', '  function LifMarketValidationMechanism(\n', '    address lifAddr, uint256 _startTimestamp, uint256 _secondsPerPeriod,\n', '    uint8 _totalPeriods, address _foundationAddr\n', '  ) {\n', '    require(lifAddr != address(0));\n', '    require(_startTimestamp > block.timestamp);\n', '    require(_secondsPerPeriod > 0);\n', '    require(_totalPeriods == 24 || _totalPeriods == 48);\n', '    require(_foundationAddr != address(0));\n', '\n', '    lifToken = LifToken(lifAddr);\n', '    startTimestamp = _startTimestamp;\n', '    secondsPerPeriod = _secondsPerPeriod;\n', '    totalPeriods = _totalPeriods;\n', '    foundationAddr = _foundationAddr;\n', '\n', '  }\n', '\n', '  /**\n', '     @dev Receives the initial funding from the Crowdsale. Calculates the\n', '     initial buy price as initialWei / totalSupply\n', '    */\n', '  function fund() public payable onlyOwner {\n', '    assert(!funded);\n', '\n', '    originalTotalSupply = lifToken.totalSupply();\n', '    initialWei = msg.value;\n', '    initialBuyPrice = initialWei.\n', '      mul(PRICE_FACTOR).\n', '      div(originalTotalSupply);\n', '\n', '    funded = true;\n', '  }\n', '\n', '  /**\n', '     @dev calculates the exponential distribution curve. It determines how much\n', '     wei can be distributed back to the foundation every month. It starts with\n', '     very low amounts ending with higher chunks at the end of the MVM lifetime\n', '    */\n', '  function calculateDistributionPeriods() public {\n', '    assert(totalPeriods == 24 || totalPeriods == 48);\n', '    assert(periods.length == 0);\n', '\n', '    // Table with the max delta % that can be distributed back to the foundation on\n', '    // each period. It follows an exponential curve (starts with lower % and ends\n', '    // with higher %) to keep the funds in the MVM longer. deltas24\n', "    // is used when MVM lifetime is 24 months, deltas48 when it's 48 months.\n", '    // The sum is less than 100% because the last % is missing: after the last period\n', '    // the 100% remaining can be claimed by the foundation. Values multipled by 10^5\n', '\n', '    uint256[24] memory accumDistribution24 = [\n', '      uint256(0), 18, 117, 351, 767, 1407,\n', '      2309, 3511, 5047, 6952, 9257, 11995,\n', '      15196, 18889, 23104, 27870, 33215, 39166,\n', '      45749, 52992, 60921, 69561, 78938, 89076\n', '    ];\n', '\n', '    uint256[48] memory accumDistribution48 = [\n', '      uint256(0), 3, 18, 54, 117, 214, 351, 534,\n', '      767, 1056, 1406, 1822, 2308, 2869, 3510, 4234,\n', '      5046, 5950, 6950, 8051, 9256, 10569, 11994, 13535,\n', '      15195, 16978, 18888, 20929, 23104, 25416, 27870, 30468,\n', '      33214, 36112, 39165, 42376, 45749, 49286, 52992, 56869,\n', '      60921, 65150, 69560, 74155, 78937, 83909, 89075, 94438\n', '    ];\n', '\n', '    for (uint8 i = 0; i < totalPeriods; i++) {\n', '\n', '      if (totalPeriods == 24) {\n', '        periods.push(accumDistribution24[i]);\n', '      } else {\n', '        periods.push(accumDistribution48[i]);\n', '      }\n', '\n', '    }\n', '  }\n', '\n', '  /**\n', '     @dev Returns the current period as a number from 0 to totalPeriods\n', '\n', '     @return the current period as a number from 0 to totalPeriods\n', '    */\n', '  function getCurrentPeriodIndex() public constant returns(uint256) {\n', '    assert(block.timestamp >= startTimestamp);\n', '    return block.timestamp.sub(startTimestamp).\n', '      sub(totalPausedSeconds).\n', '      div(secondsPerPeriod);\n', '  }\n', '\n', '  /**\n', '     @dev calculates the accumulated distribution percentage as of now,\n', '     following the exponential distribution curve\n', '\n', '     @return the accumulated distribution percentage, used to calculate things\n', '     like the maximum amount that can be claimed by the foundation\n', '    */\n', '  function getAccumulatedDistributionPercentage() public constant returns(uint256 percentage) {\n', '    uint256 period = getCurrentPeriodIndex();\n', '\n', '    assert(period < totalPeriods);\n', '\n', '    return periods[period];\n', '  }\n', '\n', '  /**\n', '     @dev returns the current buy price at which the MVM offers to buy tokens to\n', '     burn them\n', '\n', '     @return the current buy price (in eth/lif, multiplied by PRICE_FACTOR)\n', '    */\n', '  function getBuyPrice() public constant returns (uint256 price) {\n', '    uint256 accumulatedDistributionPercentage = getAccumulatedDistributionPercentage();\n', '\n', '    return initialBuyPrice.\n', '      mul(PRICE_FACTOR.sub(accumulatedDistributionPercentage)).\n', '      div(PRICE_FACTOR);\n', '  }\n', '\n', '  /**\n', "     @dev Returns the maximum amount of wei that the foundation can claim. It's\n", '     a portion of the ETH that was not claimed by token holders\n', '\n', '     @return the maximum wei claimable by the foundation as of now\n', '    */\n', '  function getMaxClaimableWeiAmount() public constant returns (uint256) {\n', '    if (isFinished()) {\n', '      return this.balance;\n', '    } else {\n', '      uint256 claimableFromReimbursed = initialBuyPrice.\n', '        mul(totalBurnedTokens).div(PRICE_FACTOR).\n', '        sub(totalReimbursedWei);\n', '      uint256 currentCirculation = lifToken.totalSupply();\n', '      uint256 accumulatedDistributionPercentage = getAccumulatedDistributionPercentage();\n', '      uint256 maxClaimable = initialWei.\n', '        mul(accumulatedDistributionPercentage).div(PRICE_FACTOR).\n', '        mul(currentCirculation).div(originalTotalSupply).\n', '        add(claimableFromReimbursed);\n', '\n', '      if (maxClaimable > totalWeiClaimed) {\n', '        return maxClaimable.sub(totalWeiClaimed);\n', '      } else {\n', '        return 0;\n', '      }\n', '    }\n', '  }\n', '\n', '  /**\n', '     @dev allows to send tokens to the MVM in exchange of Eth at the price\n', '     determined by getBuyPrice. The tokens are burned\n', '    */\n', '  function sendTokens(uint256 tokens) public whenNotPaused {\n', '    require(tokens > 0);\n', '\n', '    uint256 price = getBuyPrice();\n', '    uint256 totalWei = tokens.mul(price).div(PRICE_FACTOR);\n', '\n', '    lifToken.transferFrom(msg.sender, address(this), tokens);\n', '    lifToken.burn(tokens);\n', '    totalBurnedTokens = totalBurnedTokens.add(tokens);\n', '\n', '    SentTokens(msg.sender, price, tokens, totalWei);\n', '\n', '    totalReimbursedWei = totalReimbursedWei.add(totalWei);\n', '    msg.sender.transfer(totalWei);\n', '  }\n', '\n', '  /**\n', '     @dev Returns whether the MVM end-of-life has been reached. When that\n', '     happens no more tokens can be sent to the MVM and the foundation can claim\n', '     100% of the remaining balance in the MVM\n', '\n', '     @return true if the MVM end-of-life has been reached\n', '    */\n', '  function isFinished() public constant returns (bool finished) {\n', '    return getCurrentPeriodIndex() >= totalPeriods;\n', '  }\n', '\n', '  /**\n', '     @dev Called from the foundation wallet to claim eth back from the MVM.\n', '     Maximum amount that can be claimed is determined by\n', '     getMaxClaimableWeiAmount\n', '    */\n', '  function claimWei(uint256 weiAmount) public whenNotPaused {\n', '    require(msg.sender == foundationAddr);\n', '\n', '    uint256 claimable = getMaxClaimableWeiAmount();\n', '\n', '    assert(claimable >= weiAmount);\n', '\n', '    foundationAddr.transfer(weiAmount);\n', '\n', '    totalWeiClaimed = totalWeiClaimed.add(weiAmount);\n', '\n', '    ClaimedWei(weiAmount);\n', '  }\n', '\n', '  /**\n', '     @dev Pauses the MVM. No tokens can be sent to the MVM and no eth can be\n', '     claimed from the MVM while paused. MVM total lifetime is extended by the\n', '     period it stays paused\n', '    */\n', '  function pause() public onlyOwner whenNotPaused {\n', '    paused = true;\n', '    pausedTimestamp = block.timestamp;\n', '\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '     @dev Unpauses the MVM. See `pause` for more details about pausing\n', '    */\n', '  function unpause() public onlyOwner whenPaused {\n', '    uint256 pausedSeconds = block.timestamp.sub(pausedTimestamp);\n', '    totalPausedSeconds = totalPausedSeconds.add(pausedSeconds);\n', '    paused = false;\n', '\n', '    Unpause(pausedSeconds);\n', '  }\n', '\n', '}\n', '\n', '/**\n', '   @title Crowdsale for the Lif Token Generation Event\n', '\n', '   Implementation of the Lif Token Generation Event (TGE) Crowdsale: A 2 week\n', '   fixed price, uncapped token sale, with a discounted ratefor contributions\n', '   ìn the private presale and a Market Validation Mechanism that will receive\n', '   the funds over the USD 10M soft cap.\n', '   The crowdsale has a minimum cap of USD 5M which in case of not being reached\n', '   by purchases made during the 2 week period the token will not start operating\n', '   and all funds sent during that period will be made available to be claimed by\n', '   the originating addresses.\n', '   Funds up to the USD 10M soft cap will be sent to the Winding Tree Foundation\n', '   wallet at the end of the crowdsale.\n', '   Funds over that amount will be put in a MarketValidationMechanism (MVM) smart\n', '   contract that guarantees a price floor for a period of 2 or 4 years, allowing\n', '   any token holder to burn their tokens in exchange of part of the eth amount\n', '   sent during the TGE in exchange of those tokens.\n', ' */\n', 'contract LifCrowdsale is Ownable, Pausable {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold.\n', '  LifToken public token;\n', '\n', '  // Beginning of the period where tokens can be purchased at rate `rate1`.\n', '  uint256 public startTimestamp;\n', '  // Moment after which the rate to buy tokens goes from `rate1` to `rate2`.\n', '  uint256 public end1Timestamp;\n', '  // Marks the end of the Token Generation Event.\n', '  uint256 public end2Timestamp;\n', '\n', '  // Address of the Winding Tree Foundation wallet. Funds up to the soft cap are\n', "  // sent to this address. It's also the address to which the MVM distributes\n", '  // the funds that are made available month after month. An extra 5% of tokens\n', '  // are put in a Vested Payment with this address as beneficiary, acting as a\n', '  // long-term reserve for the foundation.\n', '  address public foundationWallet;\n', '\n', '  // Address of the Winding Tree Founders wallet. An extra 12.8% of tokens\n', '  // are put in a Vested Payment with this address as beneficiary, with 1 year\n', '  // cliff and 4 years duration.\n', '  address public foundersWallet;\n', '\n', '  // TGE min cap, in USD. Converted to wei using `weiPerUSDinTGE`.\n', '  uint256 public minCapUSD = 5000000;\n', '\n', '  // Maximun amount from the TGE that the foundation receives, in USD. Converted\n', '  // to wei using `weiPerUSDinTGE`. Funds over this cap go to the MVM.\n', '  uint256 public maxFoundationCapUSD = 10000000;\n', '\n', '  // Maximum amount from the TGE that makes the MVM to last for 24 months. If\n', '  // funds from the TGE exceed this amount, the MVM will last for 24 months.\n', '  uint256 public MVM24PeriodsCapUSD = 40000000;\n', '\n', '  // Conversion rate from USD to wei to use during the TGE.\n', '  uint256 public weiPerUSDinTGE = 0;\n', '\n', '  // Seconds before the TGE since when the corresponding USD to\n', '  // wei rate cannot be set by the owner anymore.\n', '  uint256 public setWeiLockSeconds = 0;\n', '\n', '  // Quantity of Lif that is received in exchage of 1 Ether during the first\n', '  // week of the 2 weeks TGE\n', '  uint256 public rate1;\n', '\n', '  // Quantity of Lif that is received in exchage of 1 Ether during the second\n', '  // week of the 2 weeks TGE\n', '  uint256 public rate2;\n', '\n', '  // Amount of wei received in exchange of tokens during the 2 weeks TGE\n', '  uint256 public weiRaised;\n', '\n', '  // Amount of lif minted and transferred during the TGE\n', '  uint256 public tokensSold;\n', '\n', '  // Amount of wei received as private presale payments\n', '  uint256 public totalPresaleWei;\n', '\n', '  // Address of the vesting schedule for the foundation created at the\n', '  // end of the crowdsale\n', '  VestedPayment public foundationVestedPayment;\n', '\n', '  // Address of the vesting schedule for founders created at the\n', '  // end of the crowdsale\n', '  VestedPayment public foundersVestedPayment;\n', '\n', '  // Address of the MVM created at the end of the crowdsale\n', '  LifMarketValidationMechanism public MVM;\n', '\n', '  // Tracks the wei sent per address during the 2 week TGE. This is the amount\n', '  // that can be claimed by each address in case the minimum cap is not reached\n', '  mapping(address => uint256) public purchases;\n', '\n', '  // Has the Crowdsale been finalized by a successful call to `finalize`?\n', '  bool public isFinalized = false;\n', '\n', '  /**\n', '     @dev Event triggered (at most once) on a successful call to `finalize`\n', '  **/\n', '  event Finalized();\n', '\n', '  /**\n', '     @dev Event triggered every time a presale purchase is done\n', '  **/\n', '  event TokenPresalePurchase(address indexed beneficiary, uint256 weiAmount, uint256 rate);\n', '\n', '  /**\n', '     @dev Event triggered on every purchase during the TGE\n', '\n', '     @param purchaser who paid for the tokens\n', '     @param beneficiary who got the tokens\n', '     @param value amount of wei paid\n', '     @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(\n', '    address indexed purchaser,\n', '    address indexed beneficiary,\n', '    uint256 value,\n', '    uint256 amount\n', '  );\n', '\n', '  /**\n', '     @dev Constructor. Creates the token in a paused state\n', '\n', '     @param _startTimestamp see `startTimestamp`\n', '     @param _end1Timestamp see `end1Timestamp`\n', '     @param _end2Timestamp see `end2Timestamp\n', '     @param _rate1 see `rate1`\n', '     @param _rate2 see `rate2`\n', '     @param _foundationWallet see `foundationWallet`\n', '   */\n', '  function LifCrowdsale(\n', '    uint256 _startTimestamp,\n', '    uint256 _end1Timestamp,\n', '    uint256 _end2Timestamp,\n', '    uint256 _rate1,\n', '    uint256 _rate2,\n', '    uint256 _setWeiLockSeconds,\n', '    address _foundationWallet,\n', '    address _foundersWallet\n', '  ) {\n', '\n', '    require(_startTimestamp > block.timestamp);\n', '    require(_end1Timestamp > _startTimestamp);\n', '    require(_end2Timestamp > _end1Timestamp);\n', '    require(_rate1 > 0);\n', '    require(_rate2 > 0);\n', '    require(_setWeiLockSeconds > 0);\n', '    require(_foundationWallet != address(0));\n', '    require(_foundersWallet != address(0));\n', '\n', '    token = new LifToken();\n', '    token.pause();\n', '\n', '    startTimestamp = _startTimestamp;\n', '    end1Timestamp = _end1Timestamp;\n', '    end2Timestamp = _end2Timestamp;\n', '    rate1 = _rate1;\n', '    rate2 = _rate2;\n', '    setWeiLockSeconds = _setWeiLockSeconds;\n', '    foundationWallet = _foundationWallet;\n', '    foundersWallet = _foundersWallet;\n', '  }\n', '\n', '  /**\n', '     @dev Set the wei per USD rate for the TGE. Has to be called by\n', '     the owner up to `setWeiLockSeconds` before `startTimestamp`\n', '\n', '     @param _weiPerUSD wei per USD rate valid during the TGE\n', '   */\n', '  function setWeiPerUSDinTGE(uint256 _weiPerUSD) public onlyOwner {\n', '    require(_weiPerUSD > 0);\n', '    assert(block.timestamp < startTimestamp.sub(setWeiLockSeconds));\n', '\n', '    weiPerUSDinTGE = _weiPerUSD;\n', '  }\n', '\n', '  /**\n', '     @dev Returns the current Lif per Eth rate during the TGE\n', '\n', '     @return the current Lif per Eth rate or 0 when not in TGE\n', '   */\n', '  function getRate() public constant returns (uint256) {\n', '    if (block.timestamp < startTimestamp)\n', '      return 0;\n', '    else if (block.timestamp <= end1Timestamp)\n', '      return rate1;\n', '    else if (block.timestamp <= end2Timestamp)\n', '      return rate2;\n', '    else\n', '      return 0;\n', '  }\n', '\n', '  /**\n', '     @dev Fallback function, payable. Calls `buyTokens`\n', '   */\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '     @dev Allows to get tokens during the TGE. Payable. The value is converted to\n', '     Lif using the current rate obtained by calling `getRate()`.\n', '\n', '     @param beneficiary Address to which Lif should be sent\n', '   */\n', '  function buyTokens(address beneficiary) public payable validPurchase {\n', '    require(beneficiary != address(0));\n', '    assert(weiPerUSDinTGE > 0);\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // get current price (it depends on current block number)\n', '    uint256 rate = getRate();\n', '\n', '    assert(rate > 0);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // store wei amount in case of TGE min cap not reached\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    purchases[beneficiary] = weiAmount;\n', '    tokensSold = tokensSold.add(tokens);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '  }\n', '\n', '  /**\n', '     @dev Allows to add the address and the amount of wei sent by a contributor\n', '     in the private presale. Can only be called by the owner before the beginning\n', '     of TGE\n', '\n', '     @param beneficiary Address to which Lif will be sent\n', '     @param weiSent Amount of wei contributed\n', '     @param rate Lif per ether rate at the moment of the contribution\n', '   */\n', '  function addPrivatePresaleTokens(\n', '    address beneficiary, uint256 weiSent, uint256 rate\n', '  ) public onlyOwner {\n', '    require(block.timestamp < startTimestamp);\n', '    require(beneficiary != address(0));\n', '    require(weiSent > 0);\n', '\n', '    // validate that rate is higher than TGE rate\n', '    require(rate > rate1);\n', '\n', '    uint256 tokens = weiSent.mul(rate);\n', '\n', '    totalPresaleWei = totalPresaleWei.add(weiSent);\n', '\n', '    token.mint(beneficiary, tokens);\n', '\n', '    TokenPresalePurchase(beneficiary, weiSent, rate);\n', '  }\n', '\n', '  /**\n', '     @dev Internal. Forwards funds to the foundation wallet and in case the soft\n', '     cap was exceeded it also creates and funds the Market Validation Mechanism.\n', '   */\n', '  function forwardFunds() internal {\n', '\n', '    // calculate the max amount of wei for the foundation\n', '    uint256 foundationBalanceCapWei = maxFoundationCapUSD.mul(weiPerUSDinTGE);\n', '\n', '    // if the minimiun cap for the MVM is not reached transfer all funds to foundation\n', '    // else if the min cap for the MVM is reached, create it and send the remaining funds\n', '    if (weiRaised <= foundationBalanceCapWei) {\n', '\n', '      foundationWallet.transfer(this.balance);\n', '\n', '      mintExtraTokens(uint256(24));\n', '\n', '    } else {\n', '\n', '      uint256 mmFundBalance = this.balance.sub(foundationBalanceCapWei);\n', '\n', '      // check how much preiods we have to use on the MVM\n', '      uint8 MVMPeriods = 24;\n', '      if (mmFundBalance > MVM24PeriodsCapUSD.mul(weiPerUSDinTGE))\n', '        MVMPeriods = 48;\n', '\n', '      foundationWallet.transfer(foundationBalanceCapWei);\n', '\n', '      MVM = new LifMarketValidationMechanism(\n', '        address(token), block.timestamp.add(3600), 3600, MVMPeriods, foundationWallet\n', '      );\n', '      MVM.calculateDistributionPeriods();\n', '\n', '      mintExtraTokens(uint256(MVMPeriods));\n', '\n', '      MVM.fund.value(mmFundBalance)();\n', '      MVM.transferOwnership(foundationWallet);\n', '\n', '    }\n', '  }\n', '\n', '  /**\n', '     @dev Internal. Distribute extra tokens among founders,\n', '     team and the foundation long-term reserve. Founders receive\n', '     12.8% of tokens in a 4y (1y cliff) vesting schedule.\n', '     Foundation long-term reserve receives 5% of tokens in a\n', '     vesting schedule with the same duration as the MVM that\n', '     starts when the MVM ends. An extra 7.2% is transferred to\n', '     the foundation to be distributed among advisors and future hires\n', '   */\n', '  function mintExtraTokens(uint256 foundationMonthsStart) internal {\n', '    // calculate how much tokens will the founders,\n', '    // foundation and advisors will receive\n', '    uint256 foundersTokens = token.totalSupply().mul(128).div(1000);\n', '    uint256 foundationTokens = token.totalSupply().mul(50).div(1000);\n', '    uint256 teamTokens = token.totalSupply().mul(72).div(1000);\n', '\n', '    // create the vested payment schedule for the founders\n', '    foundersVestedPayment = new VestedPayment(\n', '      block.timestamp, 3600, 48, 12, foundersTokens, token\n', '    );\n', '    token.mint(foundersVestedPayment, foundersTokens);\n', '    foundersVestedPayment.transferOwnership(foundersWallet);\n', '\n', '    // create the vested payment schedule for the foundation\n', '    uint256 foundationPaymentStart = foundationMonthsStart.mul(3600);\n', '    foundationVestedPayment = new VestedPayment(\n', '      block.timestamp.add(foundationPaymentStart), 3600,\n', '      foundationMonthsStart, 0, foundationTokens, token\n', '    );\n', '    token.mint(foundationVestedPayment, foundationTokens);\n', '    foundationVestedPayment.transferOwnership(foundationWallet);\n', '\n', '    // transfer the token for advisors and future employees to the foundation\n', '    token.mint(foundationWallet, teamTokens);\n', '\n', '  }\n', '\n', '  /**\n', '     @dev Modifier\n', '     ok if the transaction can buy tokens on TGE\n', '   */\n', '  modifier validPurchase() {\n', '    bool withinPeriod = now >= startTimestamp && now <= end2Timestamp;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    assert(withinPeriod && nonZeroPurchase);\n', '\n', '    _;\n', '  }\n', '\n', '  /**\n', '     @dev Modifier\n', '     ok when block.timestamp is past end2Timestamp\n', '  */\n', '  modifier hasEnded() {\n', '    assert(block.timestamp > end2Timestamp);\n', '    _;\n', '  }\n', '\n', '  /**\n', '     @dev Modifier\n', '     @return true if minCapUSD has been reached by contributions during the TGE\n', '  */\n', '  function funded() public constant returns (bool) {\n', '    assert(weiPerUSDinTGE > 0);\n', '    return weiRaised >= minCapUSD.mul(weiPerUSDinTGE);\n', '  }\n', '\n', '  /**\n', '     @dev Allows a TGE contributor to claim their contributed eth in case the\n', '     TGE has finished without reaching the minCapUSD\n', '   */\n', '  function claimEth() public hasEnded {\n', '    require(isFinalized);\n', '    require(!funded());\n', '\n', '    uint256 toReturn = purchases[msg.sender];\n', '    assert(toReturn > 0);\n', '\n', '    purchases[msg.sender] = 0;\n', '\n', '    msg.sender.transfer(toReturn);\n', '  }\n', '\n', '  /**\n', '     @dev Finalizes the crowdsale, taking care of transfer of funds to the\n', '     Winding Tree Foundation and creation and funding of the Market Validation\n', '     Mechanism in case the soft cap was exceeded. It also unpauses the token to\n', '     enable transfers. It can be called only once, after `end2Timestamp`\n', '   */\n', '  function finalize() public hasEnded {\n', '    require(!isFinalized);\n', '\n', '    // foward founds and unpause token only if minCap is reached\n', '    if (funded()) {\n', '\n', '      forwardFunds();\n', '\n', '      // finish the minting of the token and unpause it\n', '      token.finishMinting();\n', '      token.unpause();\n', '\n', '      // transfer the ownership of the token to the foundation\n', '      token.transferOwnership(owner);\n', '\n', '    }\n', '\n', '    Finalized();\n', '    isFinalized = true;\n', '  }\n', '\n', '}']