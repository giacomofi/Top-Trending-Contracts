['pragma solidity ^0.4.15;\n', '\n', 'contract ElcoinICO {\n', '\n', '  // Constants\n', '  // =========\n', '\n', '  uint256 public constant tokensPerEth = 300; // ELC per ETH\n', '  uint256 public constant tokenLimit = 60 * 1e6 * 1e18;\n', '  uint256 public constant tokensForSale = tokenLimit * 50 / 100;\n', '  uint256 public presaleSold = 0;\n', '  uint256 public startTime = 1511038800; // 19 November 2017 18:00 UTC\n', '  uint256 public endTime = 1517778000; // 05 February 2018 18:00 UTC\n', '\n', '  // Events\n', '  // ======\n', '\n', '  event RunIco();\n', '  event PauseIco();\n', '  event FinishIco(address team, address foundation, address advisors, address bounty);\n', '\n', '\n', '  // State variables\n', '  // ===============\n', '\n', '  ELC public elc;\n', '\n', '  address public team;\n', '  modifier teamOnly { require(msg.sender == team); _; }\n', '\n', '  enum IcoState { Presale, Running, Paused, Finished }\n', '  IcoState public icoState = IcoState.Presale;\n', '\n', '\n', '  // Constructor\n', '  // ===========\n', '\n', '  function ElcoinICO(address _team) public {\n', '    team = _team;\n', '    elc = new ELC(this, tokenLimit);\n', '  }\n', '\n', '\n', '  // Public functions\n', '  // ================\n', '\n', "  // Here you can buy some tokens (just don't forget to provide enough gas).\n", '  function() external payable {\n', '    buyFor(msg.sender);\n', '  }\n', '\n', '\n', '  function buyFor(address _investor) public payable {\n', '    require(icoState == IcoState.Running);\n', '    require(msg.value > 0);\n', '    buy(_investor, msg.value);\n', '  }\n', '\n', '\n', '  function getPresaleTotal(uint256 _value) public constant returns (uint256) {\n', '     if(_value < 10 ether) {\n', '      return _value * tokensPerEth;\n', '    }\n', '\n', '    if(_value >= 10 ether && _value < 100 ether) {\n', '      return calcPresaleDiscount(_value, 3);\n', '    }\n', '\n', '    if(_value >= 100 ether && _value < 1000 ether) {\n', '      return calcPresaleDiscount(_value, 5);\n', '    }\n', '\n', '    if(_value >= 1000 ether) {\n', '      return calcPresaleDiscount(_value, 10);\n', '    }\n', '  }\n', '\n', 'function getTimeBonus(uint time) public constant returns (uint) {\n', '        if (time < startTime + 1 weeks) return 200;\n', '        if (time < startTime + 2 weeks) return 150;\n', '        if (time < startTime + 3 weeks) return 100;\n', '        if (time < startTime + 4 weeks) return 50;\n', '        return 0;\n', '    }\n', '\n', '  function getTotal(uint256 _value) public constant returns (uint256) {\n', '    uint256 _elcValue = _value * tokensPerEth;\n', '    uint256 _bonus = getBonus(_elcValue, elc.totalSupply() - presaleSold);\n', '\n', '    return _elcValue + _bonus;\n', '  }\n', '\n', '\n', '  function getBonus(uint256 _elcValue, uint256 _sold) public constant returns (uint256) {\n', '    uint256[8] memory _bonusPattern = [ uint256(150), 130, 110, 90, 70, 50, 30, 10 ];\n', '    uint256 _step = (tokensForSale - presaleSold) / 10;\n', '    uint256 _bonus = 0;\n', '\n', '    for(uint8 i = 0; i < _bonusPattern.length; ++i) {\n', '      uint256 _min = _step * i;\n', '      uint256 _max = _step * (i + 1);\n', '      if(_sold >= _min && _sold < _max) {\n', '        uint256 _bonusPart = min(_elcValue, _max - _sold);\n', '        _bonus += _bonusPart * _bonusPattern[i] / 1000;\n', '        _elcValue -= _bonusPart;\n', '        _sold  += _bonusPart;\n', '      }\n', '    }\n', '\n', '    return _bonus;\n', '  }\n', '\n', '\n', '  // Priveleged functions\n', '  // ====================\n', '\n', '  function mintForEarlyInvestors(address[] _investors, uint256[] _values) external teamOnly {\n', '    require(_investors.length == _values.length);\n', '    for (uint256 i = 0; i < _investors.length; ++i) {\n', '      mintPresaleTokens(_investors[i], _values[i]);\n', '    }\n', '  }\n', '\n', '\n', '  function mintFor(address _investor, uint256 _elcValue) external teamOnly {\n', '    require(icoState != IcoState.Finished);\n', '    require(elc.totalSupply() + _elcValue <= tokensForSale);\n', '\n', '    elc.mint(_investor, _elcValue);\n', '  }\n', '\n', '\n', '  function withdrawEther(uint256 _value) external teamOnly {\n', '    team.transfer(_value);\n', '  }\n', '\n', '\n', '  // Save tokens from contract\n', '  function withdrawToken(address _tokenContract, uint256 _value) external teamOnly {\n', '    ERC20 _token = ERC20(_tokenContract);\n', '    _token.transfer(team, _value);\n', '  }\n', '\n', '\n', '  function withdrawTokenFromElc(address _tokenContract, uint256 _value) external teamOnly {\n', '    elc.withdrawToken(_tokenContract, team, _value);\n', '  }\n', '\n', '\n', '  // ICO state management: start / pause / finish\n', '  // --------------------------------------------\n', '\n', '  function startIco() external teamOnly {\n', '    require(icoState == IcoState.Presale || icoState == IcoState.Paused);\n', '    icoState = IcoState.Running;\n', '    RunIco();\n', '  }\n', '\n', '\n', '  function pauseIco() external teamOnly {\n', '    require(icoState == IcoState.Running);\n', '    icoState = IcoState.Paused;\n', '    PauseIco();\n', '  }\n', '\n', '\n', '  function finishIco(address _team, address _foundation, address _advisors, address _bounty) external teamOnly {\n', '    require(icoState == IcoState.Running || icoState == IcoState.Paused);\n', '\n', '    icoState = IcoState.Finished;\n', '    uint256 _teamFund = elc.totalSupply() * 2 / 2;\n', '\n', '    uint256 _den = 10000;\n', '    elc.mint(_team, _teamFund * 4000 / _den);\n', '    elc.mint(_foundation, _teamFund * 4000 / _den);\n', '    elc.mint(_advisors, _teamFund * 1000 / _den);\n', '    elc.mint(_bounty, _teamFund  * 1000 / _den);\n', '\n', '    elc.defrost();\n', '\n', '    FinishIco(_team, _foundation, _advisors, _bounty);\n', '  }\n', '\n', '\n', '  // Private functions\n', '  // =================\n', '\n', '  function mintPresaleTokens(address _investor, uint256 _value) internal {\n', '    require(icoState == IcoState.Presale);\n', '    require(_value > 0);\n', '\n', '    uint256 _elcValue = getPresaleTotal(_value);\n', '\n', '    uint256 timeBonusAmount = _elcValue * getTimeBonus(now) / 1000;\n', '\n', '     _elcValue += timeBonusAmount;\n', '\n', '    require(elc.totalSupply() + _elcValue <= tokensForSale);\n', '\n', '    elc.mint(_investor, _elcValue);\n', '    presaleSold += _elcValue;\n', '  }\n', '\n', '\n', '  function calcPresaleDiscount(uint256 _value, uint256 _percent) internal constant returns (uint256) {\n', '    return _value * tokensPerEth * 100 / (100 - _percent);\n', '  }\n', '\n', '  function min(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function buy(address _investor, uint256 _value) internal {\n', '    uint256 _total = getTotal(_value);\n', '\n', '    require(elc.totalSupply() + _total <= tokensForSale);\n', '\n', '    elc.mint(_investor, _total);\n', '  }\n', '}\n', '\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '\n', '// @title SafeMath * @dev Math operations with safety checks that throw on error\n', ' \n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '// @title ERC20Basic  * @dev Simpler version of ERC20 interface  * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' \n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '//  @title ERC20 interface  * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' \n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// @title Basic token  * @dev Basic version of StandardToken, with no allowances.\n', ' \n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  // @dev transfer token for a specified address   * @param _to The address to transfer to.   * @param _value The amount to be transferred.\n', '  \n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  // @dev Gets the balance of the specified address.  * @param _owner The address to query the the balance of.\n', '  // @return An uint256 representing the amount owned by the passed address.\n', '  \n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '//\n', '// @title Standard ERC20 token\n', '//\n', '// @dev Implementation of the basic standard token.\n', '// @dev https://github.com/ethereum/EIPs/issues/20\n', '// @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' \n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '   //\n', '   // @dev Transfer tokens from one address to another\n', '   // @param _from address The address which you want to send tokens from\n', '  // @param _to address The address which you want to transfer to\n', '   //* @param _value uint256 the amount of tokens to be transferred\n', '   \n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  //\n', '   // @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   //\n', '   // Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   // and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   // race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   // https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   // @param _spender The address which will spend the funds.\n', '   // @param _value The amount of tokens to be spent.\n', '   \n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  // @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   // @param _owner address The address which owns the funds.\n', '   // @param _spender address The address which will spend the funds.\n', '   // @return A uint256 specifying the amount of tokens still available for the spender.\n', '   \n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', ' // approve should be called when allowed[_spender] == 0. To increment\n', '   // allowed value is better to use this function to avoid 2 calls (and wait until\n', '   // the first transaction is mined)\n', '   // From MonolithDAO Token.sol\n', '   \n', '   \n', '   \n', '  \n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract ELC is StandardToken {\n', '\n', '  // Constants\n', '  // =========\n', '\n', '  string public constant name = "Elcoin Token";\n', '  string public constant symbol = "ELC";\n', '  uint8 public constant decimals = 18;\n', '  uint256 public tokenLimit;\n', '\n', '\n', '  // State variables\n', '  // ===============\n', '\n', '  address public ico;\n', '  modifier icoOnly { require(msg.sender == ico); _; }\n', '\n', '  // Tokens are frozen until ICO ends.\n', '  bool public tokensAreFrozen = true;\n', '\n', '\n', '  // Constructor\n', '  // ===========\n', '\n', '  function ELC(address _ico, uint256 _tokenLimit) public {\n', '    ico = _ico;\n', '    tokenLimit = _tokenLimit;\n', '  }\n', '\n', '\n', '  // Priveleged functions\n', '  // ====================\n', '\n', '  // Mint few tokens and transfer them to some address.\n', '  function mint(address _holder, uint256 _value) external icoOnly {\n', '    require(_holder != address(0));\n', '    require(_value != 0);\n', '    require(totalSupply + _value <= tokenLimit);\n', '\n', '    balances[_holder] += _value;\n', '    totalSupply += _value;\n', '    Transfer(0x0, _holder, _value);\n', '  }\n', '\n', '\n', '  // Allow token transfer.\n', '  function defrost() external icoOnly {\n', '    tokensAreFrozen = false;\n', '  }\n', '\n', '\n', '  // Save tokens from contract\n', '  function withdrawToken(address _tokenContract, address where, uint256 _value) external icoOnly {\n', '    ERC20 _token = ERC20(_tokenContract);\n', '    _token.transfer(where, _value);\n', '  }\n', '\n', '\n', '  // ERC20 functions\n', '  // =========================\n', '\n', '  function transfer(address _to, uint256 _value)  public returns (bool) {\n', '    require(!tokensAreFrozen);\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(!tokensAreFrozen);\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    require(!tokensAreFrozen);\n', '    return super.approve(_spender, _value);\n', '  }\n', '}']