['pragma solidity 0.4.18;\n', '\n', 'contract Token {\n', '\n', '    function totalSupply() constant returns (uint supply) {}\n', '    function balanceOf(address _owner) constant returns (uint balance) {}\n', '    function transfer(address _to, uint _value) returns (bool success) {}\n', '    function transferFrom(address _from, address _to, uint _value) returns (bool success) {}\n', '    function approve(address _spender, uint _value) returns (bool success) {}\n', '    function allowance(address _owner, address _spender) constant returns (uint remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint _value) public returns (bool) {\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant public returns (uint) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint) balances;\n', '    mapping (address => mapping (address => uint)) allowed;\n', '    uint public totalSupply;\n', '}\n', '\n', 'contract PGToken is StandardToken {\n', '\n', '    uint8 constant public decimals = 0;\n', '    uint public totalSupply = 0;\n', '    string constant public name = "P&G Token 20171231";\n', '    string constant public symbol = "PGT20171231";\n', '    StandardToken public usdt = StandardToken(0x3aeAe69C196D8db9A35B39C51d7cac00643eC7f1);\n', '    address public owner;// = msg.sender;\n', '    address[] internal members;\n', '    mapping (address => bool) isMember;\n', '\n', '    function PGToken() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function issue(address _to, uint64 _amount) public {\n', '        require (owner == msg.sender);\n', '        if (!isMember[_to]) {\n', '            members.push(_to);\n', '            isMember[_to] = true;\n', '        }\n', '        balances[_to] += _amount;\n', '        totalSupply += _amount;\n', '    }\n', '\n', '    function pay() public {\n', '        require (owner == msg.sender);\n', '        require (usdt.balanceOf(this) >= totalSupply);\n', '        for (uint i = 0; i < members.length; i++) {\n', '            address addr = members[i];\n', '            if (addr != owner) {\n', '                uint256 balance = balances[addr];\n', '                if (balance > 0) {\n', '                    usdt.transfer(addr, balance);\n', '                    balances[addr] = 0;\n', '                }\n', '            }\n', '        }\n', '        usdt.transfer(owner, usdt.balanceOf(this));\n', '        selfdestruct(owner);\n', '    }\n', '}']