['pragma solidity ^0.4.18;\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  \n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'library SaferMath {\n', '  function mulX(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function divX(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SaferMath for uint256;\n', '  mapping(address => uint256) balances;\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function increaseApproval (address _spender, uint _addedValue) returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract eElectroneum is StandardToken, Ownable {\n', '\n', '  string public constant name = "eElectroneum";\n', '  string public constant symbol = "eETN";\n', '  uint8 public constant decimals = 8;\n', '\n', '  uint256 public constant SUPPLY_CAP = 21000000 * (10 ** uint256(decimals));\n', '\n', '  address NULL_ADDRESS = address(0);\n', '\n', '  uint public nonce = 0;\n', '\n', 'event NonceTick(uint nonce);\n', '  function incNonce() {\n', '    nonce += 1;\n', '    if(nonce > 100) {\n', '        nonce = 0;\n', '    }\n', '    NonceTick(nonce);\n', '  }\n', '\n', '  // Note intended to act as a source of authorized messaging from development team\n', '  event NoteChanged(string newNote);\n', '  string public note = "The future of cryotocurrency is us!.";\n', '  function setNote(string note_) public onlyOwner {\n', '      note = note_;\n', '      NoteChanged(note);\n', '  }\n', '  \n', '  event PerformingDrop(uint count);\n', '  function drop(address[] addresses, uint256 amount) public onlyOwner {\n', '    uint256 amt = amount * 10**8;\n', '    require(amt > 0);\n', '    require(amt <= SUPPLY_CAP);\n', '    PerformingDrop(addresses.length);\n', '    \n', '    // Maximum drop is 1000 addresses\n', '    assert(addresses.length <= 1000);\n', '    assert(balances[owner] >= amt * addresses.length);\n', '    for (uint i = 0; i < addresses.length; i++) {\n', '      address recipient = addresses[i];\n', '      if(recipient != NULL_ADDRESS) {\n', '        balances[owner] -= amt;\n', '        balances[recipient] += amt;\n', '        Transfer(owner, recipient, amt);\n', '      }\n', '    }\n', '  }\n', '  \n', '  function eElectroneum() {\n', '    totalSupply = SUPPLY_CAP;\n', '    balances[msg.sender] = SUPPLY_CAP;\n', '  }\n', '}']