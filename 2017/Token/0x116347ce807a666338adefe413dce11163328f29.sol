['pragma solidity ^0.4.11;\n', '/*\n', 'PAXCHANGE TOKEN\n', '\n', 'ERC-20 Token Standar Compliant - ConsenSys\n', '\n', 'Contract developer: Fares A. Akel C.\n', 'f.antonio.akel@gmail.com\n', 'MIT PGP KEY ID: 078E41CB\n', '*/\n', '\n', '/**\n', ' * @title SafeMath by OpenZeppelin\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '}\n', '\n', 'contract ERC20Token { //Standar definition of a ERC20Token\n', '    using SafeMath for uint256;\n', '    mapping (address => uint256) balances; //A mapping of all balances per address\n', '    mapping (address => mapping (address => uint256)) allowed; //A mapping of all allowances\n', '\n', '    /**\n', '    * @dev Get the balance of an specified address.\n', '    * @param _owner The address to be query.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '      return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token to a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0)); //If you dont want that people destroy token\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    /**\n', '    * @dev transfer token from an address to another specified address using allowance\n', '    * @param _from The address where token comes.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0)); //If you dont want that people destroy token\n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    /**\n', '    * @dev Assign allowance to an specified address to use the owner balance\n', '    * @param _spender The address to be allowed to spend.\n', '    * @param _value The amount to be allowed.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '      allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    /**\n', '    * @dev Get the allowance of an specified address to use another address balance.\n', '    * @param _owner The address of the owner of the tokens.\n', '    * @param _spender The address of the allowed spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '    }\n', '    /**\n', '    *Log Events\n', '    */\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract AssetPAXCHANGE is ERC20Token {\n', "    string public name = 'PAXCHANGE TOKEN';\n", '    uint8 public decimals = 18;\n', "    string public symbol = 'PAXCHANGE';\n", "    string public version = '0.1';\n", '    uint256 public totalSupply = 50000000 * (10**uint256(decimals));\n', '\n', '    function AssetPAXCHANGE() public {\n', '        balances[0xFAB6368b0F7be60c573a6562d82469B5ED9e7eE6] = 50000 * (10**uint256(decimals)); //Fixed 0.1% for contract writer\n', '        balances[this] = 49950000 * (10**uint256(decimals)); //Remaining keep on contract\n', '        allowed[this][msg.sender] = 49950000 * (10**uint256(decimals)); //Creator has allowance of the rest on the contract\n', '        /**\n', '        *Log Events\n', '        */\n', '        Transfer(0, this, totalSupply);\n', '        Transfer(this, 0xFAB6368b0F7be60c573a6562d82469B5ED9e7eE6, 50000 * (10**uint256(decimals)));\n', '        Approval(this, msg.sender, 49950000 * (10**uint256(decimals)));\n', '\n', '    }\n', '    /**\n', '    *@dev Function to handle callback calls\n', '    */\n', '    function() public {\n', '        revert();\n', '    }\n', '\n', '}']