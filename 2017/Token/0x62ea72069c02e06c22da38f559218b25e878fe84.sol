['pragma solidity ^0.4.11;\n', '\t/**\n', '\t\t* @title SafeMath\n', '\t\t* @dev Math operations with safety checks that throw on error\n', '\t*/\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }}\n', '\t/**\n', '\t\t* @title Ownable\n', '\t\t* @dev The Ownable contract has an owner address, and provides basic authorization control \n', '\t\t* functions, this simplifies the implementation of "user permissions". \n', '\t*/\n', 'contract Ownable {\n', '  address public owner;\n', '\t/** \n', '\t\t* @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '\t\t* account.\n', '\t*/\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\t/**\n', '\t\t* @dev Throws if called by any account other than the owner. \n', '\t*/\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\t/**\n', '\t\t* @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '        * @param newOwner The address to transfer ownership to. \n', '\t*/\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }  }\n', '}\n', '\t/**\n', '\t\t* @title ERC20Basic\n', '\t\t* @dev Simpler version of ERC20 interface\n', '\t\t* @dev see https://github.com/ethereum/EIPs/issues/179\n', '\t*/\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\t/**\n', '\t\t* @title Basic token\n', '\t\t* @dev Basic version of StandardToken, with no allowances. \n', '\t*/\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '  mapping(address => uint256) balances;\n', '\t/**\n', '\t\t* @dev transfer token for a specified address\n', '\t\t* @param _to The address to transfer to.\n', '\t\t* @param _value The amount to be transferred.\n', '\t*/\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\t/**\n', '\t\t* @dev Gets the balance of the specified address.\n', '\t\t* @param _owner The address to query the the balance of. \n', '\t\t* @return An uint256 representing the amount owned by the passed address.\n', '\t*/\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\t/**\n', '\t\t* @title ERC20 interface\n', '\t\t* @dev see https://github.com/ethereum/EIPs/issues/20\n', '\t*/\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\t/**\n', '\t\t* @title Standard ERC20 token\n', '\t\t*\n', '\t\t* @dev Implementation of the basic standard token.\n', '\t\t* @dev https://github.com/ethereum/EIPs/issues/20\n', '\t\t* @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', '\t*/\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\t/**\n', '\t\t* @dev Transfer tokens from one address to another\n', '        * @param _from address The address which you want to send tokens from\n', '\t\t* @param _to address The address which you want to transfer to\n', '\t\t* @param _value uint256 the amout of tokens to be transfered\n', '\t*/\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\t/**\n', '\t\t* @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '\t\t* @param _spender The address which will spend the funds.\n', '\t\t* @param _value The amount of tokens to be spent.\n', '\t*/\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\t/**\n', '\t\t* To change the approve amount you first have to reduce the addresses`\n', '\t\t* allowance to zero by calling `approve(_spender, 0)` if it is not\n', '\t\t* already 0 to mitigate the race condition described here:\n', '\t\t* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\t*/\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\t/**\n', '\t\t* @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '\t\t* @param _owner address The address which owns the funds.\n', '\t\t* @param _spender address The address which will spend the funds.\n', '\t\t* @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '\t*/\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', 'contract BIONEUM is StandardToken, Ownable {\n', '    using SafeMath for uint256;\n', '    // Token Info.\n', '    string  public constant name = "BIONEUM";\n', '    string  public constant symbol = "BIO";\n', '    uint256 public constant decimals = 8;\n', '    uint256 public constant totalSupply = decVal(50000000);\n', '\t\n', '    // Address where funds are collected.\n', '    address public multisig = 0xFC8b6add05Dd6b5fd91F6559EFF84A20201fD86c;\n', '    // Developer tokens.\n', '\taddress public developers = 0x8D9acc27005419E0a260B44d060F7427Cd9739B2;\n', '    // Founder tokens.\n', '\taddress public founders = 0xB679919c63799c39d074EEad650889B24C06fdC6;\n', '    // Bounty tokens.\n', '\taddress public bounty = 0xCF2F450FB7d265fF82D0c2f1737d9f0258ae40A3;\n', '\t// Address of this contract/token\n', '    address public constant tokenAddress = this;\n', '    // Sale period.\n', '    uint256 public startDate;\n', '    uint256 public endDate;\n', '    // Amount of raised money in wei.\n', '    uint256 public weiRaised;\n', '    // Amount of raised money in ether.\n', '    uint256 public etherRaised;\n', '    // Number of tokens sold.\n', '\tuint256 public tokensSold;\n', '    // Modifiers.\n', '    modifier uninitialized() {\n', '        require(multisig == 0x0);\n', '        _;\n', '    }    \n', '\tfunction BIONEUM() {\n', '        startDate = now.add(5 hours);\n', '        endDate = startDate.add(30 days);\n', '\t\t\n', '        balances[founders] \t= decVal(5000000);\n', '        Transfer(0x0, founders\t, balances[founders]);\n', '\t\t\n', '        balances[bounty] \t= decVal(1000000);\n', '        Transfer(0x0, bounty\t, balances[bounty]);\n', '\t\t\n', '        balances[developers] = decVal(4000000);\n', '        Transfer(0x0, developers\t, balances[developers]);\n', '\t\t\n', '\t\tbalances[this] = totalSupply.sub(balances[developers].add(balances[founders]).add(balances[bounty]));\n', '        Transfer(0x0, this\t\t, balances[this]);\n', '    }\n', '    function supply() internal returns (uint256) {\n', '        return balances[this];\n', '    }\n', '    function getRateAt(uint256 at) constant returns (uint256) {\n', '        if (at < startDate) {\n', '            return 0;\n', '        } else if (at < startDate.add(7 days)) {\n', '            return decVal(130);\n', '        } else if (at < startDate.add(14 days)) {\n', '            return decVal(115);\n', '        } else if (at < startDate.add(21 days)) {\n', '            return decVal(105);\n', '        } else if (at < startDate.add(28 days) || at <= endDate) {\n', '            return decVal(100);\n', '        } else {\n', '            return 0;\n', '        }    \n', '\t}\n', '\tfunction decVal(uint256 amount) internal returns(uint256){\n', '\t\treturn amount * 10 ** uint256(decimals);\n', '\t}\n', '    // Fallback function can be used to buy tokens\n', '    function () payable {\n', '        buyTokens(msg.sender, msg.value);\n', '    }\n', '    function buyTokens(address sender, uint256 value) internal {\n', '        require(saleActive());\n', '        require(value >= 0.01 ether);\n', '\n', '        uint256 weiAmount = value;\n', '        uint256 updatedWeiRaised = weiRaised.add(weiAmount);\n', '\n', '        // Calculate token amount to be purchased\n', '        uint256 actualRate = getRateAt(now);\n', '        uint256 amount = weiAmount.mul(actualRate).div(1 ether);\n', '\n', '        // We have enough token to sell\n', '        require(supply() >= amount);\n', '\n', '        // Transfer tokens\n', '        balances[this] = balances[this].sub(amount);\n', '        balances[sender] = balances[sender].add(amount);\n', '\t\tTransfer(0x0, sender, amount);\n', '        // Update state.\n', '        weiRaised = updatedWeiRaised;\n', '\t\tetherRaised = weiRaised.div(1 ether);\n', '\t\ttokensSold = tokensSold.add(amount);\n', '\t\t\n', '        // Forward the fund to fund collection wallet.\n', '        multisig.transfer(msg.value);\n', '    }\n', '    function finalize() onlyOwner {\n', '        require(!saleActive());\n', '        // Transfer the rest of token to Bioneum\n', '        balances[owner] = balances[owner].add(balances[this]);\n', '\t\tTransfer(0x0, owner, balances[this]);\n', '        balances[this] = 0;\n', '    }\n', '    function saleActive() public constant returns (bool) {\n', '        return (now >= startDate && now < endDate && supply() > 0);\n', '    }\n', '}']