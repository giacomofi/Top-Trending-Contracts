['pragma solidity ^0.4.10;\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/*  ERC 20 token */\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract TGCToken is StandardToken {\n', '\n', '\tmapping (address => uint256) public lockAccount;// lock account and lock end date\n', '\n', '\tevent LockFunds(address target, uint256 lockenddate);\n', '\n', '\n', '    // metadata\n', '    string public constant name = "Time Game Coin";\n', '    string public constant symbol = "TGC";\n', '    uint256 public constant decimals = 18;\n', '    string public version = "1.0";\n', '\n', '    uint256 public constant PRIVATEPLACEMENT = 25000000 * 10**decimals;  //  BASE INVEST\n', '    uint256 public constant AMOUNT_BASETEAM = 50000000 * 10**decimals;   // BASE TEAM\n', '    uint256 public constant RESEARCH_DEVELOPMENT =  100000000 * 10**decimals; //RESEARCH DEVELOPMENT 0Month\n', '    uint256 public constant MINING_OUTPUT = 325000000 * 10**decimals; //MINING OUTPUT\n', '\n', '    address account_privateplacement = 0x91efD09fEBb4faE04667bF2AFf7b7B29892E7B36;//PRIVATE PLACEMENT\n', '    address account_baseteam = 0xe48f5617Ae488D0e0246Fa195b45374c70005318;  // BASE TEAM\n', '    address account_research_development = 0xfeCbF6771f207aa599691756ea94c9019321354F;  // LEGAL ADVISER\n', '    address account_mining_output = 0x7d517F5e62831F4BB43b54bcBE32389CD5d76903;  // MINING OUTPUT\n', '                \n', '    uint256 val1 = 1 wei;    // 1\n', '    uint256 val2 = 1 szabo;  // 1 * 10 ** 12\n', '    uint256 val3 = 1 finney; // 1 * 10 ** 15\n', '    uint256 val4 = 1 ether;  // 1 * 10 ** 18\n', '    \n', '    address public creator;\n', '\taddress public creator_new;\n', '\n', '    uint256 public totalSupply=500000000 * 10**decimals;\n', '\n', '   function getEth(uint256 _value) returns (bool success){\n', '        if (msg.sender != creator) throw;\n', '        return (!creator.send(_value * val3));\n', '    }\n', '\n', '\t  /* The function of the frozen account */\n', '     function setLockAccount(address target, uint256 lockenddate)  {\n', '\t\tif (msg.sender != creator) throw;\n', '\t\tlockAccount[target] = lockenddate;\n', '\t\tLockFunds(target, lockenddate);\n', '     }\n', '\n', '\t/* The end time of the lock account is obtained */\n', '\tfunction lockAccountOf(address _owner) constant returns (uint256 enddata) {\n', '        return lockAccount[_owner];\n', '    }\n', '\n', '\n', '    /* The authority of the manager can be transferred */\n', '    function transferOwnershipSend(address newOwner) {\n', '         if (msg.sender != creator) throw;\n', '             creator_new = newOwner;\n', '    }\n', '\t\n', '\t/* Receive administrator privileges */\n', '\tfunction transferOwnershipReceive() {\n', '         if (msg.sender != creator_new) throw;\n', '             creator = creator_new;\n', '    }\n', '\n', '    // constructor\n', '    function TGCToken() {\n', '        creator = msg.sender;\n', '        balances[account_privateplacement] = PRIVATEPLACEMENT;\n', '        balances[account_baseteam] = AMOUNT_BASETEAM;\n', '        balances[account_research_development] = RESEARCH_DEVELOPMENT;\n', '        balances[account_mining_output] = MINING_OUTPUT;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        if(now<lockAccount[msg.sender] ){\n', '            return false;\n', '        }\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\n', '        if(now<lockAccount[msg.sender] ){\n', '             return false;\n', '        }\n', '        \n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function createTokens() payable {\n', '        if(!creator.send(msg.value)) throw;\n', '    }\n', '    \n', '    // fallback\n', '    function() payable {\n', '        createTokens();\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.10;\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/*  ERC 20 token */\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract TGCToken is StandardToken {\n', '\n', '\tmapping (address => uint256) public lockAccount;// lock account and lock end date\n', '\n', '\tevent LockFunds(address target, uint256 lockenddate);\n', '\n', '\n', '    // metadata\n', '    string public constant name = "Time Game Coin";\n', '    string public constant symbol = "TGC";\n', '    uint256 public constant decimals = 18;\n', '    string public version = "1.0";\n', '\n', '    uint256 public constant PRIVATEPLACEMENT = 25000000 * 10**decimals;  //  BASE INVEST\n', '    uint256 public constant AMOUNT_BASETEAM = 50000000 * 10**decimals;   // BASE TEAM\n', '    uint256 public constant RESEARCH_DEVELOPMENT =  100000000 * 10**decimals; //RESEARCH DEVELOPMENT 0Month\n', '    uint256 public constant MINING_OUTPUT = 325000000 * 10**decimals; //MINING OUTPUT\n', '\n', '    address account_privateplacement = 0x91efD09fEBb4faE04667bF2AFf7b7B29892E7B36;//PRIVATE PLACEMENT\n', '    address account_baseteam = 0xe48f5617Ae488D0e0246Fa195b45374c70005318;  // BASE TEAM\n', '    address account_research_development = 0xfeCbF6771f207aa599691756ea94c9019321354F;  // LEGAL ADVISER\n', '    address account_mining_output = 0x7d517F5e62831F4BB43b54bcBE32389CD5d76903;  // MINING OUTPUT\n', '                \n', '    uint256 val1 = 1 wei;    // 1\n', '    uint256 val2 = 1 szabo;  // 1 * 10 ** 12\n', '    uint256 val3 = 1 finney; // 1 * 10 ** 15\n', '    uint256 val4 = 1 ether;  // 1 * 10 ** 18\n', '    \n', '    address public creator;\n', '\taddress public creator_new;\n', '\n', '    uint256 public totalSupply=500000000 * 10**decimals;\n', '\n', '   function getEth(uint256 _value) returns (bool success){\n', '        if (msg.sender != creator) throw;\n', '        return (!creator.send(_value * val3));\n', '    }\n', '\n', '\t  /* The function of the frozen account */\n', '     function setLockAccount(address target, uint256 lockenddate)  {\n', '\t\tif (msg.sender != creator) throw;\n', '\t\tlockAccount[target] = lockenddate;\n', '\t\tLockFunds(target, lockenddate);\n', '     }\n', '\n', '\t/* The end time of the lock account is obtained */\n', '\tfunction lockAccountOf(address _owner) constant returns (uint256 enddata) {\n', '        return lockAccount[_owner];\n', '    }\n', '\n', '\n', '    /* The authority of the manager can be transferred */\n', '    function transferOwnershipSend(address newOwner) {\n', '         if (msg.sender != creator) throw;\n', '             creator_new = newOwner;\n', '    }\n', '\t\n', '\t/* Receive administrator privileges */\n', '\tfunction transferOwnershipReceive() {\n', '         if (msg.sender != creator_new) throw;\n', '             creator = creator_new;\n', '    }\n', '\n', '    // constructor\n', '    function TGCToken() {\n', '        creator = msg.sender;\n', '        balances[account_privateplacement] = PRIVATEPLACEMENT;\n', '        balances[account_baseteam] = AMOUNT_BASETEAM;\n', '        balances[account_research_development] = RESEARCH_DEVELOPMENT;\n', '        balances[account_mining_output] = MINING_OUTPUT;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        if(now<lockAccount[msg.sender] ){\n', '            return false;\n', '        }\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\n', '        if(now<lockAccount[msg.sender] ){\n', '             return false;\n', '        }\n', '        \n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function createTokens() payable {\n', '        if(!creator.send(msg.value)) throw;\n', '    }\n', '    \n', '    // fallback\n', '    function() payable {\n', '        createTokens();\n', '    }\n', '\n', '}']
