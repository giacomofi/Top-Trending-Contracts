['pragma solidity ^0.4.19;\n', '\n', 'contract ERC20\n', '{\n', '    function totalSupply() public constant returns (uint totalsupply);\n', '    \n', '    function balanceOf(address _owner) public constant returns (uint balance);\n', '    \n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '    \n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '    \n', '    function approve(address _spender, uint _value) public returns (bool success);\n', '    \n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining);\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    \n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', 'contract AVL is ERC20\n', '{\n', '    uint public incirculation;\n', '\n', '    mapping (address => uint) balances;\n', '    mapping (address => mapping (address => uint)) allowed;\n', '    \n', '    mapping (address => uint) goo;\n', '\n', '    function transfer(address _to, uint _value) public returns (bool success)\n', '    {\n', '        uint gas = msg.gas;\n', '        \n', '        if (balances[msg.sender] >= _value && _value > 0)\n', '        {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            \n', '            Transfer(msg.sender, _to, _value);\n', '          \n', '            refund(gas+1158);\n', '            \n', '            return true;\n', '        } \n', '        else\n', '        {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success)\n', '    {\n', '        uint gas = msg.gas;\n', '\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0)\n', '        {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            \n', '            Transfer(_from, _to, _value);\n', '          \n', '            refund(gas);\n', '            \n', '            return true;\n', '        }\n', '        else\n', '        {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public returns (bool success)\n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '   \n', '    function balanceOf(address _owner) public constant returns (uint balance)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function totalSupply() public constant returns (uint totalsupply)\n', '    {\n', '        return incirculation;\n', '    }\n', '    \n', '    function refund(uint gas) internal\n', '    {\n', '        uint amount = (gas-msg.gas+36120) * tx.gasprice;\n', '        \n', '        if (goo[msg.sender] < amount && goo[msg.sender] > 0)\n', '        {\n', '            amount = goo[msg.sender];\n', '        }\n', '        \n', '        if (goo[msg.sender] >= amount)\n', '        {\n', '            goo[msg.sender] -= amount;\n', '            \n', '            msg.sender.transfer(amount);\n', '        }\n', '    }\n', '}\n', '\n', 'contract Avalanche is AVL \n', '{\n', '    string public constant name = "Avalanche";\n', '    uint8 public constant decimals = 4;\n', '    string public constant symbol = "AVL";\n', '    string public constant version = "1.0";\n', '\n', '    event tokensCreated(uint total, uint price);\n', '    event etherSent(uint total);\n', '    event etherLeaked(uint total);\n', '    \n', '    uint public constant pieceprice = 1 ether / 256;\n', '    uint public constant oneavl = 10000;\n', '    uint public constant totalavl = 1000000 * oneavl;\n', '    \n', '    mapping (address => bytes1) addresslevels;\n', '\n', '    mapping (address => uint) lastleak;\n', '    \n', '    function Avalanche() public\n', '    {\n', '        incirculation = 10000 * oneavl;\n', '        balances[0xe277694b762249f62e2458054fd3bfbb0a52ebc9] = 10000 * oneavl;\n', '    }\n', '\n', '    function () public payable\n', '    {\n', '        uint gas = msg.gas;\n', '\n', '        uint generateprice = getPrice(getAddressLevel());\n', '        uint generateamount = msg.value * oneavl / generateprice;\n', '        \n', '        if (incirculation + generateamount > totalavl)\n', '        {\n', '            revert();\n', '        }\n', '        \n', '        incirculation += generateamount;\n', '        balances[msg.sender] += generateamount;\n', '        goo[msg.sender] += msg.value;\n', '       \n', '        refund(gas); \n', '        \n', '        tokensCreated(generateamount, msg.value);\n', '    }\n', '   \n', '    function sendEther(address x) public payable \n', '    {\n', '        uint gas = msg.gas;\n', '        \n', '        x.transfer(msg.value);\n', '        \n', '        refund(gas+1715);\n', '        \n', '        etherSent(msg.value);\n', '    }\n', '   \n', '    function leakEther() public \n', '    {\n', '        uint gas = msg.gas;\n', '        \n', '        if (now-lastleak[msg.sender] < 1 days)\n', '        { \n', '            refund(gas);\n', '            \n', '            etherLeaked(0);\n', '            \n', '            return;\n', '        }\n', '        \n', '        uint amount = goo[msg.sender] / uint(getAddressLevel());\n', '        \n', '        if (goo[msg.sender] < amount && goo[msg.sender] > 0)\n', '        {\n', '            amount = goo[msg.sender];\n', '        }\n', '        \n', '        if (goo[msg.sender] >= amount)\n', '        {\n', '            lastleak[msg.sender] = now;\n', '            \n', '            goo[msg.sender] -= amount;\n', '            \n', '            msg.sender.transfer(amount);\n', '            \n', '            refund(gas+359);\n', '            \n', '            etherLeaked(amount);\n', '        }\n', '    }\n', '    \n', '    function gooBalanceOf(address x) public constant returns (uint) \n', '    { \n', '        return goo[x]; \n', '    }\n', '    \n', '    function getPrice(bytes1 addrLevel) public pure returns (uint)\n', '    {\n', '        return pieceprice * (uint(addrLevel) + 1);\n', '    }\n', '   \n', '    function getAddressLevel() internal returns (bytes1 res)\n', '    {\n', '        if (addresslevels[msg.sender] > 0) \n', '        {\n', '            return addresslevels[msg.sender];\n', '        }\n', '      \n', '        bytes1 highest = 0;\n', '        \n', '        for (uint i = 0; i < 20; i++)\n', '        {\n', '            bytes1 c = bytes1(uint8(uint(msg.sender) / (2 ** (8 * (19 - i)))));\n', '            \n', '            if (bytes1(c) > highest) highest = c;\n', '        }\n', '      \n', '        addresslevels[msg.sender] = highest;\n', '        \n', '        return highest;\n', '    }\n', '}']