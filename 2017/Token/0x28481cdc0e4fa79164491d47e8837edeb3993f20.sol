['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is StandardToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value > 0);\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract TssToken is MintableToken, BurnableToken {\n', '    string public constant name = "TssToken";\n', '    string public constant symbol = "TSS";\n', '    uint256 public constant decimals = 18;\n', '\n', '    function TssToken(address initialAccount, uint256 initialBalance) public {\n', '        balances[initialAccount] = initialBalance;\n', '        totalSupply = initialBalance;\n', '  }\n', '}\n', '\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  event Debug(bytes32 text, uint256);\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != 0x0);\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract TssCrowdsale is Crowdsale, Pausable {\n', '    enum LifecycleStage {\n', '    DEPLOYMENT,\n', '    MINTING,\n', '    PRESALE,\n', '    CROWDSALE_PHASE_1,\n', '    CROWDSALE_PHASE_2,\n', '    CROWDSALE_PHASE_3,\n', '    POSTSALE\n', '    }\n', '\n', '    uint256 public CROWDSALE_PHASE_1_START;\n', '\n', '    uint256 public CROWDSALE_PHASE_2_START;\n', '\n', '    uint256 public CROWDSALE_PHASE_3_START;\n', '\n', '    uint256 public POSTSALE_START;\n', '\n', '    address public FOUNDER_WALLET;\n', '\n', '    address public BOUNTY_WALLET;\n', '\n', '    address public FUTURE_WALLET;\n', '\n', '    address public CROWDSALE_WALLET;\n', '\n', '    address public PRESALE_WALLET;\n', '\n', '    address PROCEEDS_WALLET;\n', '\n', '\n', '    LifecycleStage public currentStage;\n', '\n', '    function assertValidParameters() internal {\n', '        require(CROWDSALE_PHASE_1_START > 0);\n', '        require(CROWDSALE_PHASE_2_START > 0);\n', '        require(CROWDSALE_PHASE_3_START > 0);\n', '        require(POSTSALE_START > 0);\n', '\n', '        require(address(FOUNDER_WALLET) != 0);\n', '        require(address(BOUNTY_WALLET) != 0);\n', '        require(address(FUTURE_WALLET) != 0);\n', '    }\n', '\n', '    /**\n', '     * Used for forcing ensureStage modifier\n', '     */\n', '    function setCurrentStage() onlyOwner ensureStage returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    modifier ensureStage() {\n', '        if (token.mintingFinished()) {\n', '            if (now < CROWDSALE_PHASE_1_START) {currentStage = LifecycleStage.PRESALE;}\n', '            else if (now < CROWDSALE_PHASE_2_START) {currentStage = LifecycleStage.CROWDSALE_PHASE_1;}\n', '            else if (now < CROWDSALE_PHASE_3_START) {currentStage = LifecycleStage.CROWDSALE_PHASE_2;}\n', '            else if (now < POSTSALE_START) {currentStage = LifecycleStage.CROWDSALE_PHASE_3;}\n', '            else {currentStage = LifecycleStage.POSTSALE;}\n', '        }\n', '        _;\n', '    }\n', '\n', '    function getCurrentRate() constant returns (uint _rate) {\n', '\n', '        if (currentStage == LifecycleStage.CROWDSALE_PHASE_1) {_rate = 1150;}\n', '        else if (currentStage == LifecycleStage.CROWDSALE_PHASE_2) {_rate = 1100;}\n', '        else if (currentStage == LifecycleStage.CROWDSALE_PHASE_3) {_rate = 1050;}\n', '        else {_rate == 0;}\n', '\n', '        return _rate;\n', '    }\n', '\n', '    function TssCrowdsale(\n', '    uint256 _rate,\n', '    address _wallet,\n', '\n', '    uint256 _phase_1_start,\n', '    uint256 _phase_2_start,\n', '    uint256 _phase_3_start,\n', '    uint256 _postsale_start,\n', '\n', '    address _founder_wallet,\n', '    address _bounty_wallet,\n', '    address _future_wallet,\n', '    address _presale_wallet)\n', '\n', '    public\n', '    Crowdsale(_phase_1_start, _postsale_start, _rate, _wallet)\n', '    {\n', '        // Initialise date milestones\n', '        CROWDSALE_PHASE_1_START = _phase_1_start;\n', '        CROWDSALE_PHASE_2_START = _phase_2_start;\n', '        CROWDSALE_PHASE_3_START = _phase_3_start;\n', '        POSTSALE_START = _postsale_start;\n', '\n', '        // Initialise Wallet Addresses\n', '\n', '        FOUNDER_WALLET = _founder_wallet;\n', '        BOUNTY_WALLET = _bounty_wallet;\n', '        FUTURE_WALLET = _future_wallet;\n', '        PRESALE_WALLET = _presale_wallet;\n', '\n', '        CROWDSALE_WALLET = address(this);\n', '\n', '        assertValidParameters();\n', '\n', '        // Mint Tokens\n', '        currentStage = LifecycleStage.MINTING;\n', '        mintTokens();\n', '        token.finishMinting();\n', '\n', '        currentStage = LifecycleStage.PRESALE;\n', '    }\n', '\n', '    function mintTokens() internal {\n', '\n', '        /**  Token Initial Distribution\n', '         *   100 000 000 to founder wallet\n', '         *   25 000 000 to bounty wallet\n', '         *   275 000 000 to future wallet\n', '         *   97 000 000 to crowdsale wallet\n', '         *   3 000 000 to presale wallet\n', '         */\n', '\n', '        TssToken _token = TssToken(token);\n', '        token.mint(FOUNDER_WALLET, 100000000 * 10 ** _token.decimals());\n', '        token.mint(BOUNTY_WALLET, 25000000 * 10 ** _token.decimals());\n', '        token.mint(FUTURE_WALLET, 275000000 * 10 ** _token.decimals());\n', '        token.mint(CROWDSALE_WALLET, 97000000 * 10 ** _token.decimals());\n', '        token.mint(PRESALE_WALLET, 3000000 * 10 ** _token.decimals());\n', '    }\n', '\n', '    /**\n', '     * Overrides Crowdsale.buyTokens()\n', '     */\n', '    function buyTokens(address beneficiary) public\n', '    payable\n', '    whenNotPaused()\n', '    ensureStage()\n', '    {\n', '        require(beneficiary != 0x0);\n', '        require(validPurchase());\n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = weiAmount.mul(getCurrentRate());\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        token.transfer(beneficiary, tokens);\n', '        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '        forwardFunds();\n', '    }\n', '\n', '    /**\n', '      * Overrides Crowdsale.validPurchase()\n', '     */\n', '    function validPurchase() internal constant returns (bool) {\n', '        bool withinPeriod = currentStage >= LifecycleStage.CROWDSALE_PHASE_1 && currentStage <= LifecycleStage.CROWDSALE_PHASE_3;\n', '        bool minimumPurchase = msg.value > 0.01 ether;\n', '        return withinPeriod && minimumPurchase;\n', '    }\n', '\n', '    /**\n', '    * Overrides Crowdsale.createTokenContract()\n', '    */\n', '    function createTokenContract() internal returns (MintableToken) {\n', '        return new TssToken(0x0, 0);\n', '    }\n', '\n', '    event CoinsRetrieved(address indexed recipient, uint amount);    \n', '\n', '    function retrieveRemainingCoinsPostSale() \n', '        public\n', '        onlyOwner \n', '        ensureStage() \n', '    {\n', '        require(currentStage == LifecycleStage.POSTSALE);\n', '\n', '        uint coinBalance = token.balanceOf(CROWDSALE_WALLET);\n', '        token.transfer(FUTURE_WALLET, coinBalance);\n', '        CoinsRetrieved(FUTURE_WALLET, coinBalance);\n', '    }\n', '\n', '    /** \n', "        There shouldn't be any funds trapped in this contract \n", '        but as a failsafe if there are any funds whatsoever, this function exists\n', '     */\n', '    function retrieveFunds() \n', '        public\n', '        onlyOwner\n', '    {\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '}']