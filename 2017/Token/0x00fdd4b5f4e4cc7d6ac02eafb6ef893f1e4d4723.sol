['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal constant returns(uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal constant returns(uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal constant returns(uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal constant returns(uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', 'contract eBurst{\n', '     string public constant symbol = "EBRST";\n', '     string public constant name = "EBRST";\n', '     uint8 public constant decimals = 8;\n', '     uint256 _totalSupply = 99900000000000000;\n', '     event Transfer(address indexed from, address indexed to, uint256 value);\n', '     event Approval(address indexed _owner, address indexed spender, uint256 value);\n', '   \n', '       address public owner; \n', '  \n', '     mapping(address => uint256) balances;\n', '  \n', '     mapping(address => mapping (address => uint256)) allowed;\n', '     \n', '  \n', '     function eBurst() {\n', '         owner = msg.sender;\n', '         balances[owner] = 99900000000000000;\n', '     }\n', '     \n', '     modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '     \n', '     function totalSupply() constant returns (uint256 totalSupply) {\n', '         totalSupply = _totalSupply;\n', '     }\n', '  \n', '\n', '     function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '     }\n', ' \n', '     function transfer(address _to, uint256 _amount) returns (bool success) {\n', '         if (balances[msg.sender] >= _amount \n', '            && _amount > 0\n', '             && balances[_to] + _amount > balances[_to]) {\n', '             balances[msg.sender] -= _amount;\n', '             balances[_to] += _amount;\n', '             Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '         } else {\n', '             return false;\n', '         }\n', '     }\n', '     \n', '     \n', '     function transferFrom(\n', '         address _from,\n', '         address _to,\n', '         uint256 _amount\n', '     ) returns (bool success) {\n', '         if (balances[_from] >= _amount\n', '             && allowed[_from][msg.sender] >= _amount\n', '             && _amount > 0\n', '             && balances[_to] + _amount > balances[_to]) {\n', '             balances[_from] -= _amount;\n', '             allowed[_from][msg.sender] -= _amount;\n', '             balances[_to] += _amount;\n', '             Transfer(_from, _to, _amount);\n', '             return true;\n', '         } else {\n', '            return false;\n', '         }\n', '     }\n', ' \n', '     function approve(address _spender, uint256 _amount) returns (bool success) {\n', '         allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '         return true;\n', '     }\n', '  \n', '     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '         return allowed[_owner][_spender];\n', '    }\n', '}']