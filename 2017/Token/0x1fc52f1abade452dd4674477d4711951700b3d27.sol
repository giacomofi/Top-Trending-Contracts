['pragma solidity 0.4.13;\n', 'contract Burnable {\n', '\n', '    event LogBurned(address indexed burner, uint256 indexed amount);\n', '\n', '    function burn(uint256 amount) returns (bool burned);\n', '}\n', 'contract Mintable {\n', '\n', '    function mint(address to, uint256 amount) returns (bool minted);\n', '\n', '    function mintLocked(address to, uint256 amount) returns (bool minted);\n', '}\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TokenTimelock {\n', '    using SafeERC20 for ERC20Basic;\n', '\n', '    // ERC20 basic token contract being held\n', '    ERC20Basic public token;\n', '\n', '    // beneficiary of tokens after they are released\n', '    address public beneficiary;\n', '\n', '    // timestamp when token release is enabled\n', '    uint256 public releaseTime;\n', '\n', '    function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) {\n', '        //require(_token != address(0));\n', '        //require(_beneficiary != address(0));\n', '        require(_releaseTime > now);\n', '\n', '        token = _token;\n', '        beneficiary = _beneficiary;\n', '        releaseTime = _releaseTime;\n', '    }\n', '\n', '    /**\n', '    * @notice Transfers tokens held by timelock to beneficiary.\n', '    */\n', '    function release() public {\n', '        require(now >= releaseTime);\n', '\n', '        uint256 amount = token.balanceOf(this);\n', '        require(amount > 0);\n', '\n', '        token.safeTransfer(beneficiary, amount);\n', '    }\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '/**\n', '* @title TokenVesting\n', '* @dev A token holder contract that can release its token balance gradually like a typical vesting\n', '* scheme, with a cliff and vesting period. Optionally revocable by the owner.\n', '*/\n', 'contract TokenVesting is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for ERC20Basic;\n', '\n', '    event LogVestingCreated(address indexed beneficiary, uint256 startTime, uint256 indexed cliff,\n', '        uint256 indexed duration, bool revocable);\n', '    event LogVestedTokensReleased(address indexed token, uint256 indexed released);\n', '    event LogVestingRevoked(address indexed token, uint256 indexed refunded);\n', '\n', '    // Beneficiary of tokens after they are released\n', '    address public beneficiary;\n', '\n', '    // The duration in seconds of the cliff in which tokens will begin to vest\n', '    uint256 public cliff;\n', '    \n', '    // When the vesting starts as timestamp in seconds from Unix epoch\n', '    uint256 public startTime;\n', '    \n', '    // The duration in seconds of the period in which the tokens will vest\n', '    uint256 public duration;\n', '\n', '    // Flag indicating whether the vesting is revocable or not\n', '    bool public revocable;\n', '\n', '    mapping (address => uint256) public released;\n', '    mapping (address => bool) public revoked;\n', '\n', '    /**\n', '    * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '    * _beneficiary, gradually in a linear fashion until _startTime + _duration. By then all\n', '    * of the balance will have vested.\n', '    * @param _beneficiary The address of the beneficiary to whom vested tokens are transferred\n', '    * @param _startTime When the vesting starts as timestamp in seconds from Unix epoch\n', '    * @param _cliff The duration in seconds of the cliff in which tokens will begin to vest\n', '    * @param _duration The duration in seconds of the period in which the tokens will vest\n', '    * @param _revocable Flag indicating whether the vesting is revocable or not\n', '    */\n', '    function TokenVesting(address _beneficiary, uint256 _startTime, uint256 _cliff, uint256 _duration, bool _revocable) public {\n', '        require(_beneficiary != address(0));\n', '        require(_startTime >= now);\n', '        require(_duration > 0);\n', '        require(_cliff <= _duration);\n', '\n', '        beneficiary = _beneficiary;\n', '        startTime = _startTime;\n', '        cliff = _startTime.add(_cliff);\n', '        duration = _duration;\n', '        revocable = _revocable;\n', '\n', '        LogVestingCreated(beneficiary, startTime, cliff, duration, revocable);\n', '    }\n', '\n', '    /**\n', '    * @notice Transfers vested tokens to beneficiary.\n', '    * @param token ERC20 token which is being vested\n', '    */\n', '    function release(ERC20Basic token) public {\n', '        uint256 unreleased = releasableAmount(token);\n', '        require(unreleased > 0);\n', '\n', '        released[token] = released[token].add(unreleased);\n', '\n', '        token.safeTransfer(beneficiary, unreleased);\n', '\n', '        LogVestedTokensReleased(address(token), unreleased);\n', '    }\n', '\n', '    /**\n', '    * @notice Allows the owner to revoke the vesting. Tokens already vested\n', '    * remain in the contract, the rest are returned to the owner.\n', '    * @param token ERC20 token which is being vested\n', '    */\n', '    function revoke(ERC20Basic token) public onlyOwner {\n', '        require(revocable);\n', '        require(!revoked[token]);\n', '\n', '        uint256 balance = token.balanceOf(this);\n', '\n', '        uint256 unreleased = releasableAmount(token);\n', '        uint256 refundable = balance.sub(unreleased);\n', '\n', '        revoked[token] = true;\n', '\n', '        token.safeTransfer(owner, refundable);\n', '\n', '        LogVestingRevoked(address(token), refundable);\n', '    }\n', '\n', '    /**\n', '    * @dev Calculates the amount that has already vested but hasn&#39;t been released yet.\n', '    * @param token ERC20 token which is being vested\n', '    */\n', '    function releasableAmount(ERC20Basic token) public constant returns (uint256) {\n', '        return vestedAmount(token).sub(released[token]);\n', '    }\n', '\n', '    /**\n', '    * @dev Calculates the amount that has already vested.\n', '    * @param token ERC20 token which is being vested\n', '    */\n', '    function vestedAmount(ERC20Basic token) public constant returns (uint256) {\n', '        uint256 currentBalance = token.balanceOf(this);\n', '        uint256 totalBalance = currentBalance.add(released[token]);\n', '\n', '        if (now < cliff) {\n', '            return 0;\n', '        } else if (now >= startTime.add(duration) || revoked[token]) {\n', '            return totalBalance;\n', '        } else {\n', '            return totalBalance.mul(now.sub(startTime)).div(duration);\n', '        }\n', '    }\n', '}\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '/**\n', ' * @title Pausable token\n', ' *\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', 'contract AdaptableToken is Burnable, Mintable, PausableToken {\n', '\n', '    uint256 public transferableFromBlock;\n', '\n', '    uint256 public lockEndBlock;\n', '    \n', '    mapping (address => uint256) public initiallyLockedAmount;\n', '    \n', '    function AdaptableToken(uint256 _transferableFromBlock, uint256 _lockEndBlock) internal {\n', '        require(_lockEndBlock > _transferableFromBlock);\n', '        transferableFromBlock = _transferableFromBlock;\n', '        lockEndBlock = _lockEndBlock;\n', '    }\n', '\n', '    modifier canTransfer(address _from, uint _value) {\n', '        require(block.number >= transferableFromBlock);\n', '\n', '        if (block.number < lockEndBlock) {\n', '            uint256 locked = lockedBalanceOf(_from);\n', '            if (locked > 0) {\n', '                uint256 newBalance = balanceOf(_from).sub(_value);\n', '                require(newBalance >= locked);\n', '            }\n', '        }\n', '        _;\n', '    }\n', '\n', '    function lockedBalanceOf(address _to) public constant returns(uint256) {\n', '        uint256 locked = initiallyLockedAmount[_to];\n', '        if (block.number >= lockEndBlock) return 0;\n', '        else if (block.number <= transferableFromBlock) return locked;\n', '\n', '        uint256 releaseForBlock = locked.div(lockEndBlock.sub(transferableFromBlock));\n', '        uint256 released = block.number.sub(transferableFromBlock).mul(releaseForBlock);\n', '        return locked.sub(released);\n', '    }\n', '\n', '    function transfer(address _to, uint _value) canTransfer(msg.sender, _value) public returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) canTransfer(_from, _value) public returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished());\n', '        _;\n', '    }\n', '\n', '    function mintingFinished() public constant returns(bool finished) {\n', '        return block.number >= transferableFromBlock;\n', '    }\n', '\n', '    /**\n', '    * @dev Mint new tokens.\n', '    * @param _to The address that will receieve the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool minted) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Mint new locked tokens, which will unlock progressively.\n', '    * @param _to The address that will receieve the minted locked tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mintLocked(address _to, uint256 _amount) public onlyOwner canMint returns (bool minted) {\n', '        initiallyLockedAmount[_to] = initiallyLockedAmount[_to].add(_amount);\n', '        return mint(_to, _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Mint timelocked tokens.\n', '     * @param _to The address that will receieve the minted locked tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @param _releaseTime The token release time as timestamp from Unix epoch.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mintTimelocked(address _to, uint256 _amount, uint256 _releaseTime) public\n', '        onlyOwner canMint returns (TokenTimelock tokenTimelock) {\n', '\n', '        TokenTimelock timelock = new TokenTimelock(this, _to, _releaseTime);\n', '        mint(timelock, _amount);\n', '\n', '        return timelock;\n', '    }\n', '\n', '    /**\n', '    * @dev Mint vested tokens.\n', '    * @param _to The address that will receieve the minted vested tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @param _startTime When the vesting starts as timestamp in seconds from Unix epoch.\n', '    * @param _duration The duration in seconds of the period in which the tokens will vest.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mintVested(address _to, uint256 _amount, uint256 _startTime, uint256 _duration) public\n', '        onlyOwner canMint returns (TokenVesting tokenVesting) {\n', '\n', '        TokenVesting vesting = new TokenVesting(_to, _startTime, 0, _duration, true);\n', '        mint(vesting, _amount);\n', '\n', '        return vesting;\n', '    }\n', '\n', '    /**\n', '    * @dev Burn tokens.\n', '    * @param _amount The amount of tokens to burn.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function burn(uint256 _amount) public returns (bool burned) {\n', '        //require(0 < _amount && _amount <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        totalSupply = totalSupply.sub(_amount);\n', '\n', '        Transfer(msg.sender, address(0), _amount);\n', '        \n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Release vested tokens to beneficiary.\n', '     * @param _vesting The token vesting to release.\n', '     */\n', '    function releaseVested(TokenVesting _vesting) public {\n', '        require(_vesting != address(0));\n', '\n', '        _vesting.release(this);\n', '    }\n', '\n', '    /**\n', '     * @dev Revoke vested tokens. Just the token can revoke because it is the vesting owner.\n', '     * @param _vesting The token vesting to revoke.\n', '     */\n', '    function revokeVested(TokenVesting _vesting) public onlyOwner {\n', '        require(_vesting != address(0));\n', '\n', '        _vesting.revoke(this);\n', '    }\n', '}\n', 'contract NokuMasterToken is AdaptableToken {\n', '    string public constant name = "NOKU";\n', '    string public constant symbol = "NOKU";\n', '    uint8 public constant decimals = 18;\n', '\n', '    function NokuMasterToken(uint256 _transferableFromBlock, uint256 _lockEndBlock)\n', '        AdaptableToken(_transferableFromBlock, _lockEndBlock) public {\n', '    }\n', '}']
['pragma solidity 0.4.13;\n', 'contract Burnable {\n', '\n', '    event LogBurned(address indexed burner, uint256 indexed amount);\n', '\n', '    function burn(uint256 amount) returns (bool burned);\n', '}\n', 'contract Mintable {\n', '\n', '    function mint(address to, uint256 amount) returns (bool minted);\n', '\n', '    function mintLocked(address to, uint256 amount) returns (bool minted);\n', '}\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TokenTimelock {\n', '    using SafeERC20 for ERC20Basic;\n', '\n', '    // ERC20 basic token contract being held\n', '    ERC20Basic public token;\n', '\n', '    // beneficiary of tokens after they are released\n', '    address public beneficiary;\n', '\n', '    // timestamp when token release is enabled\n', '    uint256 public releaseTime;\n', '\n', '    function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) {\n', '        //require(_token != address(0));\n', '        //require(_beneficiary != address(0));\n', '        require(_releaseTime > now);\n', '\n', '        token = _token;\n', '        beneficiary = _beneficiary;\n', '        releaseTime = _releaseTime;\n', '    }\n', '\n', '    /**\n', '    * @notice Transfers tokens held by timelock to beneficiary.\n', '    */\n', '    function release() public {\n', '        require(now >= releaseTime);\n', '\n', '        uint256 amount = token.balanceOf(this);\n', '        require(amount > 0);\n', '\n', '        token.safeTransfer(beneficiary, amount);\n', '    }\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '/**\n', '* @title TokenVesting\n', '* @dev A token holder contract that can release its token balance gradually like a typical vesting\n', '* scheme, with a cliff and vesting period. Optionally revocable by the owner.\n', '*/\n', 'contract TokenVesting is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for ERC20Basic;\n', '\n', '    event LogVestingCreated(address indexed beneficiary, uint256 startTime, uint256 indexed cliff,\n', '        uint256 indexed duration, bool revocable);\n', '    event LogVestedTokensReleased(address indexed token, uint256 indexed released);\n', '    event LogVestingRevoked(address indexed token, uint256 indexed refunded);\n', '\n', '    // Beneficiary of tokens after they are released\n', '    address public beneficiary;\n', '\n', '    // The duration in seconds of the cliff in which tokens will begin to vest\n', '    uint256 public cliff;\n', '    \n', '    // When the vesting starts as timestamp in seconds from Unix epoch\n', '    uint256 public startTime;\n', '    \n', '    // The duration in seconds of the period in which the tokens will vest\n', '    uint256 public duration;\n', '\n', '    // Flag indicating whether the vesting is revocable or not\n', '    bool public revocable;\n', '\n', '    mapping (address => uint256) public released;\n', '    mapping (address => bool) public revoked;\n', '\n', '    /**\n', '    * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '    * _beneficiary, gradually in a linear fashion until _startTime + _duration. By then all\n', '    * of the balance will have vested.\n', '    * @param _beneficiary The address of the beneficiary to whom vested tokens are transferred\n', '    * @param _startTime When the vesting starts as timestamp in seconds from Unix epoch\n', '    * @param _cliff The duration in seconds of the cliff in which tokens will begin to vest\n', '    * @param _duration The duration in seconds of the period in which the tokens will vest\n', '    * @param _revocable Flag indicating whether the vesting is revocable or not\n', '    */\n', '    function TokenVesting(address _beneficiary, uint256 _startTime, uint256 _cliff, uint256 _duration, bool _revocable) public {\n', '        require(_beneficiary != address(0));\n', '        require(_startTime >= now);\n', '        require(_duration > 0);\n', '        require(_cliff <= _duration);\n', '\n', '        beneficiary = _beneficiary;\n', '        startTime = _startTime;\n', '        cliff = _startTime.add(_cliff);\n', '        duration = _duration;\n', '        revocable = _revocable;\n', '\n', '        LogVestingCreated(beneficiary, startTime, cliff, duration, revocable);\n', '    }\n', '\n', '    /**\n', '    * @notice Transfers vested tokens to beneficiary.\n', '    * @param token ERC20 token which is being vested\n', '    */\n', '    function release(ERC20Basic token) public {\n', '        uint256 unreleased = releasableAmount(token);\n', '        require(unreleased > 0);\n', '\n', '        released[token] = released[token].add(unreleased);\n', '\n', '        token.safeTransfer(beneficiary, unreleased);\n', '\n', '        LogVestedTokensReleased(address(token), unreleased);\n', '    }\n', '\n', '    /**\n', '    * @notice Allows the owner to revoke the vesting. Tokens already vested\n', '    * remain in the contract, the rest are returned to the owner.\n', '    * @param token ERC20 token which is being vested\n', '    */\n', '    function revoke(ERC20Basic token) public onlyOwner {\n', '        require(revocable);\n', '        require(!revoked[token]);\n', '\n', '        uint256 balance = token.balanceOf(this);\n', '\n', '        uint256 unreleased = releasableAmount(token);\n', '        uint256 refundable = balance.sub(unreleased);\n', '\n', '        revoked[token] = true;\n', '\n', '        token.safeTransfer(owner, refundable);\n', '\n', '        LogVestingRevoked(address(token), refundable);\n', '    }\n', '\n', '    /**\n', "    * @dev Calculates the amount that has already vested but hasn't been released yet.\n", '    * @param token ERC20 token which is being vested\n', '    */\n', '    function releasableAmount(ERC20Basic token) public constant returns (uint256) {\n', '        return vestedAmount(token).sub(released[token]);\n', '    }\n', '\n', '    /**\n', '    * @dev Calculates the amount that has already vested.\n', '    * @param token ERC20 token which is being vested\n', '    */\n', '    function vestedAmount(ERC20Basic token) public constant returns (uint256) {\n', '        uint256 currentBalance = token.balanceOf(this);\n', '        uint256 totalBalance = currentBalance.add(released[token]);\n', '\n', '        if (now < cliff) {\n', '            return 0;\n', '        } else if (now >= startTime.add(duration) || revoked[token]) {\n', '            return totalBalance;\n', '        } else {\n', '            return totalBalance.mul(now.sub(startTime)).div(duration);\n', '        }\n', '    }\n', '}\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '/**\n', ' * @title Pausable token\n', ' *\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', 'contract AdaptableToken is Burnable, Mintable, PausableToken {\n', '\n', '    uint256 public transferableFromBlock;\n', '\n', '    uint256 public lockEndBlock;\n', '    \n', '    mapping (address => uint256) public initiallyLockedAmount;\n', '    \n', '    function AdaptableToken(uint256 _transferableFromBlock, uint256 _lockEndBlock) internal {\n', '        require(_lockEndBlock > _transferableFromBlock);\n', '        transferableFromBlock = _transferableFromBlock;\n', '        lockEndBlock = _lockEndBlock;\n', '    }\n', '\n', '    modifier canTransfer(address _from, uint _value) {\n', '        require(block.number >= transferableFromBlock);\n', '\n', '        if (block.number < lockEndBlock) {\n', '            uint256 locked = lockedBalanceOf(_from);\n', '            if (locked > 0) {\n', '                uint256 newBalance = balanceOf(_from).sub(_value);\n', '                require(newBalance >= locked);\n', '            }\n', '        }\n', '        _;\n', '    }\n', '\n', '    function lockedBalanceOf(address _to) public constant returns(uint256) {\n', '        uint256 locked = initiallyLockedAmount[_to];\n', '        if (block.number >= lockEndBlock) return 0;\n', '        else if (block.number <= transferableFromBlock) return locked;\n', '\n', '        uint256 releaseForBlock = locked.div(lockEndBlock.sub(transferableFromBlock));\n', '        uint256 released = block.number.sub(transferableFromBlock).mul(releaseForBlock);\n', '        return locked.sub(released);\n', '    }\n', '\n', '    function transfer(address _to, uint _value) canTransfer(msg.sender, _value) public returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) canTransfer(_from, _value) public returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished());\n', '        _;\n', '    }\n', '\n', '    function mintingFinished() public constant returns(bool finished) {\n', '        return block.number >= transferableFromBlock;\n', '    }\n', '\n', '    /**\n', '    * @dev Mint new tokens.\n', '    * @param _to The address that will receieve the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool minted) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Mint new locked tokens, which will unlock progressively.\n', '    * @param _to The address that will receieve the minted locked tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mintLocked(address _to, uint256 _amount) public onlyOwner canMint returns (bool minted) {\n', '        initiallyLockedAmount[_to] = initiallyLockedAmount[_to].add(_amount);\n', '        return mint(_to, _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Mint timelocked tokens.\n', '     * @param _to The address that will receieve the minted locked tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @param _releaseTime The token release time as timestamp from Unix epoch.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mintTimelocked(address _to, uint256 _amount, uint256 _releaseTime) public\n', '        onlyOwner canMint returns (TokenTimelock tokenTimelock) {\n', '\n', '        TokenTimelock timelock = new TokenTimelock(this, _to, _releaseTime);\n', '        mint(timelock, _amount);\n', '\n', '        return timelock;\n', '    }\n', '\n', '    /**\n', '    * @dev Mint vested tokens.\n', '    * @param _to The address that will receieve the minted vested tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @param _startTime When the vesting starts as timestamp in seconds from Unix epoch.\n', '    * @param _duration The duration in seconds of the period in which the tokens will vest.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mintVested(address _to, uint256 _amount, uint256 _startTime, uint256 _duration) public\n', '        onlyOwner canMint returns (TokenVesting tokenVesting) {\n', '\n', '        TokenVesting vesting = new TokenVesting(_to, _startTime, 0, _duration, true);\n', '        mint(vesting, _amount);\n', '\n', '        return vesting;\n', '    }\n', '\n', '    /**\n', '    * @dev Burn tokens.\n', '    * @param _amount The amount of tokens to burn.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function burn(uint256 _amount) public returns (bool burned) {\n', '        //require(0 < _amount && _amount <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        totalSupply = totalSupply.sub(_amount);\n', '\n', '        Transfer(msg.sender, address(0), _amount);\n', '        \n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Release vested tokens to beneficiary.\n', '     * @param _vesting The token vesting to release.\n', '     */\n', '    function releaseVested(TokenVesting _vesting) public {\n', '        require(_vesting != address(0));\n', '\n', '        _vesting.release(this);\n', '    }\n', '\n', '    /**\n', '     * @dev Revoke vested tokens. Just the token can revoke because it is the vesting owner.\n', '     * @param _vesting The token vesting to revoke.\n', '     */\n', '    function revokeVested(TokenVesting _vesting) public onlyOwner {\n', '        require(_vesting != address(0));\n', '\n', '        _vesting.revoke(this);\n', '    }\n', '}\n', 'contract NokuMasterToken is AdaptableToken {\n', '    string public constant name = "NOKU";\n', '    string public constant symbol = "NOKU";\n', '    uint8 public constant decimals = 18;\n', '\n', '    function NokuMasterToken(uint256 _transferableFromBlock, uint256 _lockEndBlock)\n', '        AdaptableToken(_transferableFromBlock, _lockEndBlock) public {\n', '    }\n', '}']
