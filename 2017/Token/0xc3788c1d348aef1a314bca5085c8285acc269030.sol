['/**\n', ' * Overflow aware uint math functions.\n', ' *\n', ' * Inspired by https://github.com/MakerDAO/maker-otc/blob/master/contracts/simple_market.sol\n', ' */\n', 'contract SafeMath {\n', '  //internals\n', '  function safeMul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) throw;\n', '  }\n', '}\n', '\n', '/**\n', ' * ERC 20 token\n', ' *\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract Token {\n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', '/**\n', ' * ERC 20 token\n', ' *\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract StandardToken is Token {\n', '\n', '    /**\n', '     * Reviewed:\n', '     * - Interger overflow = OK, checked\n', '     */\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", "        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n", '        //Replace the if with this one instead.\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        //if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    uint256 public totalSupply;\n', '}\n', '\n', 'contract NapoleonXToken is StandardToken, SafeMath {\n', '    // Constant token specific fields\n', '    string public constant name = "NapoleonX Token";\n', '    string public constant symbol = "NPX";\n', '    // no decimals allowed\n', '    uint8 public decimals = 2;\n', '    uint public INITIAL_SUPPLY = 95000000;\n', '    \n', '    /* this napoleonXAdministrator address is where token.napoleonx.eth resolves to */\n', '    address napoleonXAdministrator;\n', '    \n', '    /* ICO end time in seconds 14 mars 2018 */\n', '    uint public endTime;\n', '    \n', '    event TokenAllocated(address investor, uint tokenAmount);\n', '    // MODIFIERS\n', '    modifier only_napoleonXAdministrator {\n', '        require(msg.sender == napoleonXAdministrator);\n', '        _;\n', '    }\n', '\n', '    modifier is_not_earlier_than(uint x) {\n', '        require(now >= x);\n', '        _;\n', '    }\n', '    modifier is_earlier_than(uint x) {\n', '        require(now < x);\n', '        _;\n', '    }\n', '    function isEqualLength(address[] x, uint[] y) internal returns (bool) { return x.length == y.length; }\n', '    modifier onlySameLengthArray(address[] x, uint[] y) {\n', '        require(isEqualLength(x,y));\n', '        _;\n', '    }\n', '\t\n', '    function NapoleonXToken(uint setEndTime) {\n', '        napoleonXAdministrator = msg.sender;\n', '        endTime = setEndTime;\n', '    }\n', '\t\n', '    // we here repopulate the greenlist using the historic commitments from www.napoleonx.ai website\n', '    function populateWhitelisted(address[] whitelisted, uint[] tokenAmount) only_napoleonXAdministrator onlySameLengthArray(whitelisted, tokenAmount) is_earlier_than(endTime) {\n', '        for (uint i = 0; i < whitelisted.length; i++) {\n', '\t\t\tuint previousAmount = balances[whitelisted[i]];\n', '\t\t\tbalances[whitelisted[i]] = tokenAmount[i];\n', '\t\t\ttotalSupply = totalSupply-previousAmount+tokenAmount[i];\n', '            TokenAllocated(whitelisted[i], tokenAmount[i]);\n', '        }\n', '    }\n', '    \n', '    function changeFounder(address newAdministrator) only_napoleonXAdministrator {\n', '        napoleonXAdministrator = newAdministrator;\n', '    }\n', ' \n', '    function getICOStage() public constant returns(string) {\n', '         if (now < endTime){\n', '            return "Presale ended, standard ICO running";\n', '         }\n', '         if (now >= endTime){\n', '            return "ICO finished";\n', '         }\n', '    }\n', '}']