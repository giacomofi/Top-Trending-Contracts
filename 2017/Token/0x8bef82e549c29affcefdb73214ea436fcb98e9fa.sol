['pragma solidity ^0.4.17;\n', '\n', '//Developed by Zenos Pavlakou\n', '\n', 'library SafeMath {\n', '    \n', '    function mul(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    \n', '    address public owner;\n', '\n', '    /**\n', '     * The address whcih deploys this contrcat is automatically assgined ownership.\n', '     * */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * Functions with this modifier can only be executed by the owner of the contract. \n', '     * */\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) constant public returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) constant public returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public  returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract BasicToken is ERC20Basic, Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) balances;\n', '\n', '    modifier onlyPayloadSize(uint size) {\n', '        if (msg.data.length < size + 4) {\n', '        revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '    /**\n', "     * Transfers ACO tokens from the sender's account to another given account.\n", '     * \n', '     * @param _to The address of the recipient.\n', '     * @param _amount The amount of tokens to send.\n', '     * */\n', '    function transfer(address _to, uint256 _amount) public onlyPayloadSize(2 * 32) returns (bool) {\n', '        require(balances[msg.sender] >= _amount);\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Returns the balance of a given address.\n', '     * \n', '     * @param _addr The address of the balance to query.\n', '     **/\n', '    function balanceOf(address _addr) public constant returns (uint256) {\n', '        return balances[_addr];\n', '    }\n', '}\n', '\n', '\n', 'contract AdvancedToken is BasicToken, ERC20 {\n', '\n', '    mapping (address => mapping (address => uint256)) allowances;\n', '\n', '    /**\n', '     * Transfers tokens from the account of the owner by an approved spender. \n', '     * The spender cannot spend more than the approved amount. \n', '     * \n', '     * @param _from The address of the owners account.\n', '     * @param _amount The amount of tokens to transfer.\n', '     * */\n', '    function transferFrom(address _from, address _to, uint256 _amount) public onlyPayloadSize(3 * 32) returns (bool) {\n', '        require(allowances[_from][msg.sender] >= _amount && balances[_from] >= _amount);\n', '        allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_amount);\n', '        balances[_from] = balances[_from].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Allows another account to spend a given amount of tokens on behalf of the \n', "     * owner's account. If the owner has previously allowed a spender to spend\n", '     * tokens on his or her behalf and would like to change the approval amount,\n', '     * he or she will first have to set the allowance back to 0 and then update\n', '     * the allowance.\n', '     * \n', '     * @param _spender The address of the spenders account.\n', '     * @param _amount The amount of tokens the spender is allowed to spend.\n', '     * */\n', '    function approve(address _spender, uint256 _amount) public returns (bool) {\n', '        require((_amount == 0) || (allowances[msg.sender][_spender] == 0));\n', '        allowances[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * Returns the approved allowance from an owners account to a spenders account.\n', '     * \n', '     * @param _owner The address of the owners account.\n', '     * @param _spender The address of the spenders account.\n', '     **/\n', '    function allowance(address _owner, address _spender) public constant returns (uint256) {\n', '        return allowances[_owner][_spender];\n', '    }\n', '}\n', '\n', '\n', 'contract MintableToken is AdvancedToken {\n', '\n', '    bool public mintingFinished;\n', '\n', '    event TokensMinted(address indexed to, uint256 amount);\n', '    event MintingFinished();\n', '\n', '    /**\n', '     * Generates new ACO tokens during the ICO, after which the minting period \n', '     * will terminate permenantly. This function can only be called by the ICO \n', '     * contract.\n', '     * \n', '     * @param _to The address of the account to mint new tokens to.\n', '     * @param _amount The amount of tokens to mint. \n', '     * */\n', '    function mint(address _to, uint256 _amount) external onlyOwner onlyPayloadSize(2 * 32) returns (bool) {\n', '        require(_to != 0x0 && _amount > 0 && !mintingFinished);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        totalSupply = totalSupply.add(_amount);\n', '        Transfer(0x0, _to, _amount);\n', '        TokensMinted(_to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Terminates the minting period permenantly. This function can only be called\n', '     * by the ICO contract only when the duration of the ICO has ended. \n', '     * */\n', '    function finishMinting() external onlyOwner {\n', '        require(!mintingFinished);\n', '        mintingFinished = true;\n', '        MintingFinished();\n', '    }\n', '    \n', '    /**\n', '     * Returns true if the minting period has ended, false otherwhise.\n', '     * */\n', '    function mintingFinished() public constant returns (bool) {\n', '        return mintingFinished;\n', '    }\n', '}\n', '\n', 'contract ACO is MintableToken {\n', '\n', '    uint8 public decimals;\n', '    string public name;\n', '    string public symbol;\n', '\n', '    function ACO() public {\n', '        totalSupply = 0;\n', '        decimals = 18;\n', '        name = "ACO";\n', '        symbol = "ACO";\n', '    }\n', '}']