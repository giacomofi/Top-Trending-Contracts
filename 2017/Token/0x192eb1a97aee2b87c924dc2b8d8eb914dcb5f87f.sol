['pragma solidity ^0.4.15;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is StandardToken {\n', '\n', '    address public constant BURN_ADDRESS = 0;\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '\t\n', '\tfunction burnTokensInternal(address _address, uint256 _value) internal {\n', '        require(_value > 0);\n', '        require(_value <= balances[_address]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        address burner = _address;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '\t\tTransfer(burner, BURN_ADDRESS, _value);\n', '\t\t\n', '\t}\n', '\t\t\n', '}\n', '\n', '/**\n', ' * @title Handelion Token\n', ' * @dev Main token used for Handelion crowdsale\n', ' */\n', ' contract HIONToken is BurnableToken, Ownable\n', ' {\n', '\t\n', '\t/** Handelion token name official name. */\n', '\tstring public constant name = "HION Token by Handelion"; \n', '\t \n', '\t /** Handelion token official symbol.*/\n', '\tstring public constant symbol = "HION"; \n', '\n', '\t/** Number of decimal units for Handelion token */\n', '\tuint256 public constant decimals = 18;\n', '\n', '\t/* Preissued token amount */\n', '\tuint256 public constant PREISSUED_AMOUNT = 29750000 * 1 ether;\n', '\t\t\t\n', '\t/** \n', '\t * Indicates wheather token transfer is allowed. Token transfer is allowed after crowdsale is over. \n', '\t * Before crowdsale is over only token owner is allowed to transfer tokens to investors.\n', '\t */\n', '\tbool public transferAllowed = false;\n', '\t\t\t\n', '\t/** Raises when initial amount of tokens is preissued */\n', '\tevent LogTokenPreissued(address ownereAddress, uint256 amount);\n', '\t\n', '\t\n', '\tmodifier canTransfer(address sender)\n', '\t{\n', '\t\trequire(transferAllowed || sender == owner);\n', '\t\t\n', '\t\t_;\n', '\t}\n', '\t\n', '\t/**\n', '\t * Creates and initializes Handelion token\n', '\t */\n', '\tfunction HIONToken()\n', '\t{\n', '\t\t// Address of token creator. The creator of this token is major holder of all preissued tokens before crowdsale starts\n', '\t\towner = msg.sender;\n', '\t \n', '\t\t// Send all pre-created tokens to token creator address\n', '\t\ttotalSupply = totalSupply.add(PREISSUED_AMOUNT);\n', '\t\tbalances[owner] = balances[owner].add(PREISSUED_AMOUNT);\n', '\t\t\n', '\t\tLogTokenPreissued(owner, PREISSUED_AMOUNT);\n', '\t}\n', '\t\n', '\t/**\n', '\t * Returns Token creator address\n', '\t */\n', '\tfunction getCreatorAddress() public constant returns(address creatorAddress)\n', '\t{\n', '\t\treturn owner;\n', '\t}\n', '\t\n', '\t/**\n', '\t * Gets total supply of Handelion token\n', '\t */\n', '\tfunction getTotalSupply() public constant returns(uint256)\n', '\t{\n', '\t\treturn totalSupply;\n', '\t}\n', '\t\n', '\t/**\n', '\t * Gets number of remaining tokens\n', '\t */\n', '\tfunction getRemainingTokens() public constant returns(uint256)\n', '\t{\n', '\t\treturn balanceOf(owner);\n', '\t}\t\n', '\t\n', '\t/**\n', '\t * Allows token transfer. Should be called after crowdsale is over\n', '\t */\n', '\tfunction allowTransfer() onlyOwner public\n', '\t{\n', '\t\ttransferAllowed = true;\n', '\t}\n', '\t\n', '\t\n', '\t/**\n', '\t * Overrides transfer function by adding check whether transfer is allwed\n', '\t */\n', '\tfunction transfer(address _to, uint256 _value) canTransfer(msg.sender) public returns (bool)\t\n', '\t{\n', '\t\tsuper.transfer(_to, _value);\n', '\t}\n', '\n', '\t/**\n', '\t * Override transferFrom function and adds a check whether transfer is allwed\n', '\t */\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) canTransfer(_from) public returns (bool) {\t\n', '\t\tsuper.transferFrom(_from, _to, _value);\n', '\t}\n', '\t\n', '\t/**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '\t\tburnTokensInternal(msg.sender, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens for specific address. Can be called only by token owner.\n', '\t * @param _address \n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(address _address, uint256 _value) public onlyOwner {\n', '\t\tburnTokensInternal(_address, _value);\n', '    }\n', '}\n', '\n', '/*\n', ' * Stoppable\n', ' *\n', ' * Abstract contract that allows children to implement an\n', ' * emergency stop mechanism.\n', ' *\n', ' *\n', ' */\n', 'contract Stoppable is Ownable {\n', '  bool public stopped;\n', '\n', '  modifier stopInEmergency {\n', '    require(!stopped);\n', '    _;\n', '  }\n', '\n', '  modifier stopNonOwnersInEmergency {\n', '    require(!stopped || msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  modifier onlyInEmergency {\n', '    require(stopped);\n', '    _;\n', '  }\n', '\n', '  // called by the owner on emergency, triggers stopped state\n', '  function stop() external onlyOwner {\n', '    stopped = true;\n', '  }\n', '\n', '  // called by the owner on end of emergency, returns to normal state\n', '  function unstop() external onlyOwner onlyInEmergency {\n', '    stopped = false;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * Handelion ICO crowdsale.\n', ' * \n', ' */\n', 'contract HANDELIONdiscountSALE is Ownable, Stoppable\n', '{\n', '\tusing SafeMath for uint256;\n', '\n', '\tstruct FundingTier {\n', '\t\tuint256 cap;\n', '\t\tuint256 rate;\n', '\t}\n', '\t\t\n', '\t/** Handelion token we are selling in this crowdsale */\n', '\tHIONToken public token; \n', '\t\n', '\t/** Token price tiers and caps */\n', '\tFundingTier public tier1;\n', '\t\n', '\tFundingTier public tier2;\n', '\t\n', '\tFundingTier public tier3;\n', '\t\n', '\tFundingTier public tier4;\n', '\t\n', '\tFundingTier public tier5;\t\n', '\n', '\t/** inclusive start timestamps of crowdsale */\n', '\tuint256 public startTime;\n', '\n', '\t/** inclusive end timestamp of crowedsale */\n', '\tuint256 public endTime;\n', '\n', '\t/** address where funds are collected */\n', '\taddress public multisigWallet;\n', '\t\n', '\t/** minimal amount of sold tokens for crowdsale to be considered as successful */\n', '\tuint256 public minimumTokenAmount;\n', '\n', '\t/** maximal number of tokens we can sell */\n', '\tuint256 public maximumTokenAmount;\n', '\n', '\t// amount of raised money in wei\n', '\tuint256 public weiRaised;\n', '\n', '\t/** amount of sold tokens */\n', '\tuint256 public tokensSold;\n', '\n', '\t/** number of unique investors */\n', '\tuint public investorCount;\n', '\n', '\t/** Identifies whether crowdsale has been finalized */\n', '\tbool public finalized;\n', '\n', '\t/** Identifies wheather refund is opened */\n', '\tbool public isRefunding;\n', '\n', '\t/** Amount of received ETH by investor */\n', '\tmapping (address => uint256) public investedAmountOf;\n', '\n', '\t/** Amount of selled tokens by investor */\n', '\tmapping (address => uint256) public tokenAmountOf;\n', '\t\n', '\t/**\n', '\t* event for token purchase logging\n', '\t* @param purchaser who paid for the tokens\n', '\t* @param beneficiary who got the tokens\n', '\t* @param value weis paid for purchase\n', '\t* @param amount amount of tokens purchased\n', '\t*/\n', '\tevent LogTokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\tevent LogCrowdsaleStarted();\n', '\n', '\tevent LogCrowdsaleFinalized(bool isGoalReached);\n', '\n', '\tevent LogRefundingOpened(uint256 refundAmount);\n', '\n', '\tevent LogInvestorRefunded(address investorAddress, uint256 refundedAmount);\n', '\t\n', '\t/**\n', '\t * Start date: 08-12-2017 12:00 GMT\n', '\t * End date: 31-03-2018 12:00 GMT\n', '\t */\n', '\tfunction HANDELIONdiscountSALE() \n', '\t{\n', '\t\tcreateTokenContract();\n', '\t\t\n', '\t\tstartTime = 1512734400;\n', '\t\tendTime = 1522497600;\n', '\n', '\t\tmultisigWallet = 0x7E23cFa050d23B9706a071dEd0A62d30AE6BB6c8;\n', '\t\t\n', '\t\tminimumTokenAmount = 4830988 * 1 ether;\n', '\t\tmaximumTokenAmount = 29750000 * 1 ether;\n', '\n', '\t\ttokensSold = 0;\n', '\t\tweiRaised = 0;\n', '\n', '\t\ttier1 = FundingTier({cap: 2081338 * 1 ether, rate: 480});\n', '\t\ttier2 = FundingTier({cap: 4830988 * 1 ether, rate: 460});\n', '\t\ttier3 = FundingTier({cap: 9830988 * 1 ether, rate: 440});\n', '\t\ttier4 = FundingTier({cap: 14830988 * 1 ether, rate: 420});\n', '\t\ttier5 = FundingTier({cap: 23184738 * 1 ether, rate: 400});\n', '\n', '\t\tfinalized = false;\n', '\t}\n', '\t\n', '\t \n', '\t/**\n', '\t * Overriding function to create HandelionToken\n', '\t */\n', '\tfunction createTokenContract() internal\n', '\t{\n', '\t\ttoken = HIONToken(0xa089273724e07644da9739a708e544800d925115);\n', '\t}\n', '\t\n', '\tfunction calculateTierTokens(FundingTier _tier, uint256 _amount, uint256 _currentTokenAmount) constant internal returns (uint256)\n', '\t{\n', '\t\tuint256 maxTierTokens = _tier.cap.sub(_currentTokenAmount);\n', '\n', '\t\tif (maxTierTokens <= 0)\n', '\t\t{\n', '\t\t\treturn 0;\n', '\t\t}\n', '\t\t\t\t\n', '\t\tuint256 tokenCount = _amount.mul(_tier.rate);\n', '\t\t\t\n', '\t\tif (tokenCount > maxTierTokens)\n', '\t\t{\n', '\t\t\ttokenCount = maxTierTokens;\n', '\t\t}\n', '\t\t\t\n', '\t\treturn tokenCount;\n', '\t}\n', '\t\n', '\tfunction calculateTokenAmount(uint256 _weiAmount) constant internal returns (uint256)\n', '\t{\t\t\n', '\t\tuint256 nTokens = tokensSold;\n', '\t\tuint256 remainingWei = _weiAmount;\n', '\t\tuint256 tierTokens = 0;\n', '\t\t\n', '\t\tif (nTokens < tier1.cap)\n', '\t\t{\t\t\t\n', '\t\t\ttierTokens = calculateTierTokens(tier1, remainingWei, nTokens);\n', '\t\t\tnTokens = nTokens.add(tierTokens);\t\t\n', '\t\t\tremainingWei = remainingWei.sub(tierTokens.div(tier1.rate));\n', '\t\t}\n', '\t\t\n', '\t\tif (remainingWei > 0 && nTokens < tier2.cap)\n', '\t\t{\n', '\t\t\ttierTokens = calculateTierTokens(tier2, remainingWei, nTokens);\n', '\t\t\tnTokens = nTokens.add(tierTokens);\t\t\t\n', '\t\t\tremainingWei = remainingWei.sub(tierTokens.div(tier2.rate));\n', '\t\t}\n', '\n', '\t\tif (remainingWei > 0 && nTokens < tier3.cap)\n', '\t\t{\n', '\t\t\ttierTokens = calculateTierTokens(tier3, remainingWei, nTokens);\n', '\t\t\tnTokens = nTokens.add(tierTokens);\t\t\t\n', '\t\t\tremainingWei = remainingWei.sub(tierTokens.div(tier3.rate));\n', '\t\t}\n', '\n', '\t\tif (remainingWei > 0 && nTokens < tier4.cap)\n', '\t\t{\n', '\t\t\ttierTokens = calculateTierTokens(tier4, remainingWei, nTokens);\n', '\t\t\tnTokens = nTokens.add(tierTokens);\t\t\t\n', '\t\t\tremainingWei = remainingWei.sub(tierTokens.div(tier4.rate));\n', '\t\t}\n', '\n', '\t\tif (remainingWei > 0 && nTokens < tier5.cap)\n', '\t\t{\n', '\t\t\ttierTokens = calculateTierTokens(tier5, remainingWei, nTokens);\n', '\t\t\tnTokens = nTokens.add(tierTokens);\t\t\t\n', '\t\t\tremainingWei = remainingWei.sub(tierTokens.div(tier5.rate));\n', '\t\t}\t\t\n', '\t\t\n', '\t\trequire(remainingWei == 0);\n', '\t\t\n', '\t\treturn nTokens.sub(tokensSold);\n', '\t}\t\n', '\n', '\t// fallback function can be used to buy tokens\n', '\tfunction () public payable {\n', '\t\tbuyTokens(msg.sender);\n', '\t}\n', '\n', '\t// low level token purchase function\n', '\tfunction buyTokens(address beneficiary) public payable stopInEmergency \n', '\t{\n', '\t\trequire(beneficiary != address(0));\n', '\t\trequire(validPurchase());\n', '\n', '\t\tuint256 weiAmount = msg.value;\n', '\n', '\t\t// calculate token amount to be created\n', '\t\t//uint256 tokens = weiAmount.mul(rate);\n', '\t\tuint256 tokens = calculateTokenAmount(weiAmount);\n', '\n', '\t\t// Check whether within this ttransaction we will not overflow maximum token amount\n', '\t\trequire(tokensSold.add(tokens) <= maximumTokenAmount);\n', '\n', '\t\t// update state\n', '\t\tweiRaised = weiRaised.add(weiAmount);\n', '\t\ttokensSold = tokensSold.add(tokens);\n', '\t\tinvestedAmountOf[beneficiary] = investedAmountOf[beneficiary].add(weiAmount);\n', '\t\ttokenAmountOf[beneficiary] = tokenAmountOf[beneficiary].add(tokens);\n', '\n', '\t\t// forward tokens to purchaser\n', '\t\tforwardTokens(beneficiary, tokens);\n', '\n', '\t\tLogTokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '\t\t// forward ETH to multisig wallet\n', '\t\tforwardFunds();\n', '\t}\n', '\n', '\t/**\n', '\t * This function just transfers tokens to beneficiary address. \n', '\t * It should be used for cases when investor buys tokens using other currencies\n', '\t */\n', '\tfunction transferTokens(address beneficiary, uint256 amount) public onlyOwner\n', '\t{\n', '\t\trequire(beneficiary != address(0));\n', '\t\trequire(amount > 0);\n', '\n', '\t\tuint256 weiAmount = amount * 1 ether;\n', '\t\t\n', '\t\ttokensSold = tokensSold.add(weiAmount);\n', '\t\ttokenAmountOf[beneficiary] = tokenAmountOf[beneficiary].add(weiAmount);\n', '\t\t\n', '\t\tforwardTokens(beneficiary, weiAmount);\n', '\t}\n', '\t\n', '\t\t/**\n', '\t * This function just transfers tokens with decimals to beneficiary address. \n', '\t * It should be used for cases when investor buys tokens using other currencies\n', '\t */\n', '\tfunction transferTokensWei(address beneficiary, uint256 amount) public onlyOwner\n', '\t{\n', '\t\trequire(beneficiary != address(0));\n', '\t\trequire(amount > 0);\n', '\n', '\t\tuint256 weiAmount = amount;\n', '\t\t\n', '\t\ttokensSold = tokensSold.add(weiAmount);\n', '\t\ttokenAmountOf[beneficiary] = tokenAmountOf[beneficiary].add(weiAmount);\n', '\t\t\n', '\t\tforwardTokens(beneficiary, weiAmount);\n', '\t}\n', '\t\n', '\t// send ether to the fund collection wallet\n', '\t// override to create custom fund forwarding mechanisms\n', '\tfunction forwardFunds() internal {\n', '\t\tmultisigWallet.transfer(msg.value);\n', '\t}\n', '\t\n', '\t/**\n', '\t * Forward handelion tokens to purchaset\n', '\t */\n', '\tfunction forwardTokens(address _purchaser, uint256 _amount) internal\n', '\t{\n', '\t\ttoken.transfer(_purchaser, _amount);\n', '\t}\n', '\n', '\t/**\n', '\t* Closes crowdsale and changes its state to Finalized. \n', '\t* Warning - this action is undoable!\n', '\t*/\n', '\tfunction finalize() public onlyOwner\n', '\t{\n', '\t\tfinalized = true;\n', '\t\t\n', '\t\tLogCrowdsaleFinalized(goalReached());\n', '\t}\n', '\t\n', '\t/**\n', '\t * Burns all caller tokens\n', '\t *\n', '\t */\n', '\tfunction burnTokensInternal(address _address, uint256 tokenAmount) internal\n', '\t{\n', '\t\trequire(_address != address(0));\n', '\t\t\n', '\t\tuint256 tokensToBurn = tokenAmount;\n', '\t\tuint256 maxTokens = token.balanceOf(_address);\n', '\t\t\n', '\t\tif (tokensToBurn > maxTokens)\n', '\t\t{\n', '\t\t\ttokensToBurn = maxTokens;\n', '\t\t}\n', '\t\t\n', '\t\ttoken.burn(_address, tokensToBurn);\n', '\t}\n', '\t\t\n', '\t/**\n', '\t * Burns remaining tokens which are not sold during crowdsale\n', '\t */\n', '\tfunction burnRemainingTokens() public onlyOwner\n', '\t{\n', '\t\tburnTokensInternal(this, getRemainingTokens());\n', '\t}\n', '\t\t\n', '\t\t\n', '\t/**\n', '\t * Gets remaining tokens on a contract\n', '\t */\n', '\tfunction getRemainingTokens() public constant returns(uint256)\n', '\t{\n', '\t\treturn token.getRemainingTokens();\n', '\t}\n', '\t\n', '\t/**\n', '\t * Gets total supply of tokens\n', '\t */\n', '\tfunction getTotalSupply() constant returns (uint256 res)\n', '\t{\n', '\t\treturn token.getTotalSupply();\n', '\t}\n', '\t\n', '\t/**\n', '\t * Gets amount of token of specific investor\n', '\t */\n', '\tfunction getTokenAmountOf(address investor) constant returns (uint256 res)\n', '\t{\n', '\t\treturn token.balanceOf(investor);\n', '\t}\n', '\n', '\t// @return true if the transaction can buy tokens\n', '\tfunction validPurchase() internal constant returns (bool) {\n', '\t\tbool withinPeriod = now >= startTime && now <= endTime;\n', '\t\tbool nonZeroPurchase = msg.value != 0;\n', '\t\tbool notFinalized = !finalized;\n', '\t\tbool maxCapNotReached = tokensSold < maximumTokenAmount;\n', '\n', '\t\treturn withinPeriod && nonZeroPurchase && notFinalized && maxCapNotReached;\n', '\t}\n', '\n', '\tfunction goalReached() public constant returns (bool)\n', '\t{\n', '\t\treturn tokensSold >= minimumTokenAmount;\n', '\t}\n', '\n', '\t// @return true if crowdsale event has ended\n', '\tfunction hasEnded() public constant returns (bool) {\n', '\t\treturn now > endTime;\n', '\t}\t\n', '}']