['pragma solidity ^0.4.11;\n', '\n', 'contract SafeMath {\n', '    function safeMul(uint a, uint b) internal returns (uint) {\n', '        uint c = a * b;\n', '        require(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint a, uint b) internal returns (uint) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint a, uint b) internal returns (uint) {\n', '        uint c = a + b;\n', '        require(c>=a && c>=b);\n', '        return c;\n', '    }\n', '\n', '    function safeDiv(uint a, uint b) internal returns (uint) {\n', '        require(b > 0);\n', '        uint c = a / b;\n', '        require(a == b * c + a % b);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Token {\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/* ERC 20 token */\n', 'contract ERC20Token is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    uint256 public totalSupply;\n', '}\n', '\n', '\n', '/**\n', ' * CAR ICO contract.\n', ' *\n', ' */\n', 'contract CARToken is ERC20Token, SafeMath {\n', '\n', '    string public name = "CAR SHARING";\n', '    string public symbol = "CAR";\n', '\tuint public decimals = 9;\n', '\n', '    address public tokenIssuer = 0x0;\n', '\t\n', '    // Unlock time\n', '\tuint public month12Unlock = 1546387199;\n', '\tuint public month24Unlock = 1577923199;\n', '\tuint public month30Unlock = 1593647999;\n', '    uint public month48Unlock = 1641081599;\n', '\tuint public month60Unlock = 1672617599;\n', '\t\n', '\t// End token sale\n', '\tuint public endTokenSale = 1577836799;\n', '\t\n', '\t// Allocated\n', '    bool public month12Allocated = false;\n', '\tbool public month24Allocated = false;\n', '\tbool public month30Allocated = false;\n', '    bool public month48Allocated = false;\n', '\tbool public month60Allocated = false;\n', '\t\n', '\n', '    // Token count\n', '\tuint totalTokenSaled = 0;\n', '    uint public totalTokensCrowdSale = 95000000 * 10**decimals;\n', '    uint public totalTokensReserve = 95000000 * 10**decimals;\n', '\n', '\tevent TokenMint(address newTokenHolder, uint amountOfTokens);\n', '    event AllocateTokens(address indexed sender);\n', '\n', '    function CARToken() {\n', '        tokenIssuer = msg.sender;\n', '    }\n', '\t\n', '\t/* Change issuer address */\n', '    function changeIssuer(address newIssuer) {\n', '        require(msg.sender==tokenIssuer);\n', '        tokenIssuer = newIssuer;\n', '    }\n', '\n', '    /* Allocate Tokens */\n', '    function allocateTokens()\n', '    {\n', '        require(msg.sender==tokenIssuer);\n', '        uint tokens = 0;\n', '     \n', '\t\tif(block.timestamp > month12Unlock && !month12Allocated)\n', '        {\n', '\t\t\tmonth12Allocated = true;\n', '\t\t\ttokens = safeDiv(totalTokensReserve, 5);\n', '\t\t\tbalances[tokenIssuer] = safeAdd(balances[tokenIssuer], tokens);\n', '\t\t\ttotalSupply = safeAdd(totalSupply, tokens);\n', '            \n', '        }\n', '        else if(block.timestamp > month24Unlock && !month24Allocated)\n', '        {\n', '\t\t\tmonth24Allocated = true;\n', '\t\t\ttokens = safeDiv(totalTokensReserve, 5);\n', '\t\t\tbalances[tokenIssuer] = safeAdd(balances[tokenIssuer], tokens);\n', '\t\t\ttotalSupply = safeAdd(totalSupply, tokens);\n', '\t\t\t\n', '        }\n', '\t\tif(block.timestamp > month30Unlock && !month30Allocated)\n', '        {\n', '\t\t\tmonth30Allocated = true;\n', '\t\t\ttokens = safeDiv(totalTokensReserve, 5);\n', '\t\t\tbalances[tokenIssuer] = safeAdd(balances[tokenIssuer], tokens);\n', '\t\t\ttotalSupply = safeAdd(totalSupply, tokens);\n', '            \n', '        }\n', '        else if(block.timestamp > month48Unlock && !month48Allocated)\n', '        {\n', '\t\t\tmonth48Allocated = true;\n', '\t\t\ttokens = safeDiv(totalTokensReserve, 5);\n', '\t\t\tbalances[tokenIssuer] = safeAdd(balances[tokenIssuer], tokens);\n', '\t\t\ttotalSupply = safeAdd(totalSupply, tokens);\n', '        }\n', '\t\telse if(block.timestamp > month60Unlock && !month60Allocated)\n', '        {\n', '            month60Allocated = true;\n', '            tokens = safeDiv(totalTokensReserve, 5);\n', '            balances[tokenIssuer] = safeAdd(balances[tokenIssuer], tokens);\n', '            totalSupply = safeAdd(totalSupply, tokens);\n', '        }\n', '        else revert();\n', '\n', '        AllocateTokens(msg.sender);\n', '    }\n', '    \n', '\t/* Mint Token */\n', '    function mintTokens(address tokenHolder, uint256 amountToken) \n', '    returns (bool success) \n', '    {\n', '\t\trequire(msg.sender==tokenIssuer);\n', '\t\t\n', '\t\tif(totalTokenSaled + amountToken <= totalTokensCrowdSale && block.timestamp <= endTokenSale)\n', '\t\t{\n', '\t\t\tbalances[tokenHolder] = safeAdd(balances[tokenHolder], amountToken);\n', '\t\t\ttotalTokenSaled = safeAdd(totalTokenSaled, amountToken);\n', '\t\t\ttotalSupply = safeAdd(totalSupply, amountToken);\n', '\t\t\tTokenMint(tokenHolder, amountToken);\n', '\t\t\treturn true;\n', '\t\t}\n', '\t\telse\n', '\t\t{\n', '\t\t    return false;\n', '\t\t}\n', '    }\n', '}']