['pragma solidity ^0.4.17;\n', '\n', ' /*\n', ' * Contract that is working with ERC223 tokens\n', ' * https://github.com/ethereum/EIPs/issues/223\n', ' */\n', '\n', '/// @title ERC223ReceivingContract - Standard contract implementation for compatibility with ERC223 tokens.\n', 'contract ERC223ReceivingContract {\n', '\n', '    /// @dev Function that is called when a user or another contract wants to transfer funds.\n', '    /// @param _from Transaction initiator, analogue of msg.sender\n', '    /// @param _value Number of tokens to transfer.\n', '    /// @param _data Data containig a function signature and/or parameters\n', '    function tokenFallback(address _from, uint256 _value, bytes _data) public;\n', '}\n', '\n', '/// @title Base Token contract - Functions to be implemented by token contracts.\n', 'contract Token {\n', '    /*\n', '     * Implements ERC 20 standard.\n', '     * https://github.com/ethereum/EIPs/blob/f90864a3d2b2b45c4decf95efd26b3f0c276051a/EIPS/eip-20-token-standard.md\n', '     * https://github.com/ethereum/EIPs/issues/20\n', '     *\n', '     *  Added support for the ERC 223 "tokenFallback" method in a "transfer" function with a payload.\n', '     *  https://github.com/ethereum/EIPs/issues/223\n', '     */\n', '\n', '    /*\n', '     * This is a slight change to the ERC20 base standard.\n', '     * function totalSupply() constant returns (uint256 supply);\n', '     * is replaced with:\n', '     * uint256 public totalSupply;\n', '     * This automatically creates a getter function for the totalSupply.\n', '     * This is moved to the base contract since public getter functions are not\n', '     * currently recognised as an implementation of the matching abstract\n', '     * function by the compiler.\n', '     */\n', '    uint256 public totalSupply;\n', '\n', '    /*\n', '     * ERC 20\n', '     */\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '    /*\n', '     * ERC 223\n', '     */\n', '    function transfer(address _to, uint256 _value, bytes _data) public returns (bool success);\n', '\n', '    /*\n', '     * Events\n', '     */\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    // There is no ERC223 compatible Transfer event, with `_data` included.\n', '}\n', '\n', '/// @title Standard token contract - Standard token implementation.\n', 'contract StandardToken is Token {\n', '\n', '    /*\n', '     * Data structures\n', '     */\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    /*\n', '     * Public functions\n', '     */\n', '    /// @notice Send `_value` tokens to `_to` from `msg.sender`.\n', "    /// @dev Transfers sender's tokens to a given address. Returns success.\n", '    /// @param _to Address of token receiver.\n', '    /// @param _value Number of tokens to transfer.\n', '    /// @return Returns success of function call.\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != 0x0);\n', '        require(_to != address(this));\n', '        require(balances[msg.sender] >= _value);\n', '        require(balances[_to] + _value >= balances[_to]);\n', '\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '\n', '        Transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @notice Send `_value` tokens to `_to` from `msg.sender` and trigger\n', '    /// tokenFallback if sender is a contract.\n', '    /// @dev Function that is called when a user or another contract wants to transfer funds.\n', '    /// @param _to Address of token receiver.\n', '    /// @param _value Number of tokens to transfer.\n', '    /// @param _data Data to be sent to tokenFallback\n', '    /// @return Returns success of function call.\n', '    function transfer(\n', '        address _to,\n', '        uint256 _value,\n', '        bytes _data)\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(transfer(_to, _value));\n', '\n', '        uint codeLength;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly.\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        if (codeLength > 0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, _data);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @notice Transfer `_value` tokens from `_from` to `_to` if `msg.sender` is allowed.\n', '    /// @dev Allows for an approved third party to transfer tokens from one\n', '    /// address to another. Returns success.\n', '    /// @param _from Address from where tokens are withdrawn.\n', '    /// @param _to Address to where tokens are sent.\n', '    /// @param _value Number of tokens to transfer.\n', '    /// @return Returns success of function call.\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_from != 0x0);\n', '        require(_to != 0x0);\n', '        require(_to != address(this));\n', '        require(balances[_from] >= _value);\n', '        require(allowed[_from][msg.sender] >= _value);\n', '        require(balances[_to] + _value >= balances[_to]);\n', '\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '\n', '        Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @notice Allows `_spender` to transfer `_value` tokens from `msg.sender` to any address.\n', '    /// @dev Sets approved amount of tokens for spender. Returns success.\n', '    /// @param _spender Address of allowed account.\n', '    /// @param _value Number of approved tokens.\n', '    /// @return Returns success of function call.\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        require(_spender != 0x0);\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        // allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        // already 0 to mitigate the race condition described here:\n', '        // https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require(_value == 0 || allowed[msg.sender][_spender] == 0);\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /*\n', '     * Read functions\n', '     */\n', '    /// @dev Returns number of allowed tokens that a spender can transfer on\n', '    /// behalf of a token owner.\n', '    /// @param _owner Address of token owner.\n', '    /// @param _spender Address of token spender.\n', '    /// @return Returns remaining allowance for spender.\n', '    function allowance(address _owner, address _spender)\n', '        constant\n', '        public\n', '        returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /// @dev Returns number of tokens owned by the given address.\n', '    /// @param _owner Address of token owner.\n', '    /// @return Returns balance of owner.\n', '    function balanceOf(address _owner) constant public returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '\n', 'contract RealFundToken is StandardToken {\n', '\n', '  string constant public name = "REAL FUND Token";\n', '  string constant public symbol = "REF";\n', '  uint8 constant public decimals = 8;\n', '  uint constant multiplier = 10 ** uint(decimals);\n', '\n', '  event Deployed(uint indexed _totalSupply);\n', '  event Burnt(address indexed _receiver, uint indexed _num, uint indexed _totalSupply);\n', '\n', '  function RealFundToken(address walletAddress) public {\n', '    require(walletAddress != 0x0);\n', '\n', '    totalSupply = 5000000000000000;\n', '    balances[walletAddress] = totalSupply;\n', '    Transfer(0x0, walletAddress, totalSupply);\n', '  }\n', '\n', '  function burn(uint num) public {\n', '        require(num > 0);\n', '        require(balances[msg.sender] >= num);\n', '        require(totalSupply >= num);\n', '\n', '        uint preBalance = balances[msg.sender];\n', '\n', '        balances[msg.sender] -= num;\n', '        totalSupply -= num;\n', '        Burnt(msg.sender, num, totalSupply);\n', '        Transfer(msg.sender, 0x0, num);\n', '\n', '        assert(balances[msg.sender] == preBalance - num);\n', '    }\n', '}\n', '\n', 'contract PreSale {\n', '    RealFundToken public token;\n', '    address public walletAddress;\n', '    \n', '    uint public amountRaised;\n', '    \n', '    uint public bonus;\n', '    uint public price;    \n', '    uint public minSaleAmount;\n', '\n', '    function PreSale(RealFundToken _token, address _walletAddress) public {\n', '        token = RealFundToken(_token);\n', '        walletAddress = _walletAddress;\n', '        bonus = 25;\n', '        price = 200000000;\n', '        minSaleAmount = 100000000;\n', '    }\n', '\n', '    function () public payable {\n', '        uint amount = msg.value;\n', '        uint tokenAmount = amount / price;\n', '        require(tokenAmount >= minSaleAmount);\n', '        amountRaised += amount;\n', '        token.transfer(msg.sender, tokenAmount * (100 + bonus) / 100);\n', '    }\n', '    \n', '    function ChangeWallet(address _walletAddress) public {\n', '        require(msg.sender == walletAddress);\n', '        walletAddress = _walletAddress;\n', '    }\n', '\n', '    function TransferETH(address _to, uint _amount) public {\n', '        require(msg.sender == walletAddress);\n', '        _to.transfer(_amount);\n', '    }\n', '\n', '    function TransferTokens(address _to, uint _amount) public {\n', '        require(msg.sender == walletAddress);\n', '        token.transfer(_to, _amount);\n', '    }\n', '\n', '    function ChangeBonus(uint _bonus) public {\n', '        require(msg.sender == walletAddress);\n', '        bonus = _bonus;\n', '    }\n', '    \n', '    function ChangePrice(uint _price) public {\n', '        require(msg.sender == walletAddress);\n', '        price = _price;\n', '    }\n', '    \n', '    function ChangeMinSaleAmount(uint _minSaleAmount) public {\n', '        require(msg.sender == walletAddress);\n', '        minSaleAmount = _minSaleAmount;\n', '    }\n', '}']