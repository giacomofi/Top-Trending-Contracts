['pragma solidity ^ 0.4.15;\n', '\n', '/**\n', '*library name : SafeMath\n', '*purpose : be the library for the smart contract for the swap between the godz and ether\n', '*goal : to achieve the secure basic math operations\n', '*/\n', 'library SafeMath {\n', '\n', '  /*function name : mul*/\n', '  /*purpose : be the funcion for safe multiplicate*/\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    /*assert(a == 0 || c / a == b);*/\n', '    return c;\n', '  }\n', '\n', '  /*function name : div*/\n', '  /*purpose : be the funcion for safe division*/\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  /*function name : sub*/\n', '  /*purpose : be the funcion for safe substract*/\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /*function name : add*/\n', '  /*purpose : be the funcion for safe sum*/\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/**\n', '*contract name : tokenRecipient\n', '*/\n', 'contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n', '\n', '\n', '/**\n', '*contract name : Token\n', '*/\n', 'contract Token {\n', '    /*using the secure math library for basic math operations*/\n', '    using SafeMath for uint256;\n', '\n', '    /* Public variables of the token */\n', "    string public standard = 'DSCS.GODZ.TOKEN';\n", '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function Token(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        uint8 decimalUnits,\n', '        string tokenSymbol\n', '        ) {\n', '        balanceOf[msg.sender] = initialSupply;                  /* Give the creator all initial tokens*/\n', '        totalSupply = initialSupply;                            /* Update total supply*/\n', '        name = tokenName;                                       /* Set the name for display purposes*/\n', '        symbol = tokenSymbol;                                   /* Set the symbol for display purposes*/\n', '        decimals = decimalUnits;                                /* Amount of decimals for display purposes*/\n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) {\n', '        if (_to == 0x0) revert();                               /* Prevent transfer to 0x0 address. Use burn() instead*/\n', '        if (balanceOf[msg.sender] < _value) revert();           /* Check if the sender has enough*/\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); /* Check for overflows*/\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);                        /* Subtract from the sender*/\n', '        balanceOf[_to] = balanceOf[_to].add(_value);                               /* Add the same to the recipient*/\n', '        Transfer(msg.sender, _to, _value);                      /* Notify anyone listening that this transfer took place*/\n', '    }\n', '\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value)\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /* Approve and then communicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /* A contract attempts to get the coins but transfer from the origin*/\n', '    function transferFromOrigin(address _to, uint256 _value)  returns (bool success) {\n', '        address origin = tx.origin;\n', '        if (origin == 0x0) revert();\n', '        if (_to == 0x0) revert();                                /* Prevent transfer to 0x0 address.*/\n', '        if (balanceOf[origin] < _value) revert();                /* Check if the sender has enough*/\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert();  /* Check for overflows*/\n', '        balanceOf[origin] = balanceOf[origin].sub(_value);       /* Subtract from the sender*/\n', '        balanceOf[_to] = balanceOf[_to].add(_value);             /* Add the same to the recipient*/\n', '        return true;\n', '    }\n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (_to == 0x0) revert();                                /* Prevent transfer to 0x0 address.*/\n', '        if (balanceOf[_from] < _value) revert();                 /* Check if the sender has enough*/\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert();  /* Check for overflows*/\n', '        if (_value > allowance[_from][msg.sender]) revert();     /* Check allowance*/\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);                              /* Subtract from the sender*/\n', '        balanceOf[_to] = balanceOf[_to].add(_value);                                /* Add the same to the recipient*/\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '}']