['pragma solidity ^0.4.13;\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract owned {\n', '    address public owner;\n', '    \n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '\n', 'contract allowMonthly is owned {\n', '  uint public unlockTime;\n', '\n', '  function allowMonthly() {\n', '    unlockTime = now;\n', '  }\n', '\n', '  function isUnlocked() internal returns (bool) {\n', '    return now >= unlockTime;\n', '  }\n', '  \n', '  modifier onlyWhenUnlocked() { require(isUnlocked()); _; }\n', '\n', '  function useMonthlyAccess() onlyOwner onlyWhenUnlocked {\n', '    unlockTime = now + 4 weeks;\n', '  }\n', '}\n', '\n', 'library SaferMath {\n', '  function mulX(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function divX(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SaferMath for uint256;\n', '  mapping(address => uint256) balances;\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  \n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract Ether2x is StandardToken, owned, allowMonthly {\n', '\n', '  string public constant name = "Ethereum 2x";\n', '  string public constant symbol = "E2X";\n', '  uint8 public constant decimals = 8;\n', '\n', '  bool public initialDrop;\n', '  uint256 public inititalSupply = 10000000 * (10 ** uint256(decimals));\n', '  uint256 public totalSupply;\n', '\n', '  address NULL_ADDRESS = address(0);\n', '\n', '  uint public nonce = 0;\n', '\n', '  event NonceTick(uint _nonce);\n', '  \n', '  function incNonce() public {\n', '    nonce += 1;\n', '    if(nonce > 100) {\n', '        nonce = 0;\n', '    }\n', '    NonceTick(nonce);\n', '  }\n', '\n', '  // Note intended to act as a source of authorized messaging from development team\n', '  event NoteChanged(string newNote);\n', '  string public note = "Earn from your Ether with Ease.";\n', '  function setNote(string note_) public onlyOwner {\n', '    note = note_;\n', '    NoteChanged(note);\n', '  }\n', '\n', '  \n', '  event PerformingMonthlyMinting(uint amount);\n', '  /// @notice Buy tokens from contract by sending ether\n', '  function monthlyMinting() public onlyOwner {\n', '    uint256 totalAmt;\n', '    if (initialDrop) {\n', '        totalAmt = totalSupply / 4;\n', '        initialDrop = false;\n', '    } else {\n', '        // generate 1% Base amount + 0.5% Holding Bonus\n', '        totalAmt = (totalSupply / 100) + (totalSupply / 500);\n', '    }\n', '    PerformingMonthlyMinting(totalAmt);\n', '    assert(totalAmt > 0);\n', '\n', '    balances[owner] += totalAmt;\n', '    totalSupply += totalAmt;\n', '    Transfer(0, owner, totalAmt);\n', '    \n', '    useMonthlyAccess(); // restrict use of minting function for 4 weeks\n', '  }  \n', '  \n', '  \n', '  // Send recipient their monthly monthly reward\n', '  event rewardSent(uint amount);\n', '  function distributeReward(address recipient, uint baseAmt) public onlyOwner {\n', '    \n', '    uint256 holdingBonus = balances[recipient] / 500;\n', '    uint256 reward = baseAmt + holdingBonus;\n', '    \n', '    rewardSent(reward);\n', '    \n', '    assert(reward > 0);\n', '    assert(balances[owner] >= reward);\n', '    \n', '    require(recipient != NULL_ADDRESS);\n', '\n', '    balances[owner] -= reward;\n', '    balances[recipient] += reward;\n', '    Transfer(owner, recipient, reward);\n', '    \n', '  }\n', '\n', '  /**\n', '   * @dev Constructor that gives msg.sender all of existing tokens..\n', '   */\n', '  function Ether2x() public {\n', '    totalSupply = inititalSupply;\n', '    balances[msg.sender] = totalSupply;\n', '    initialDrop = true;\n', '  }\n', '}']