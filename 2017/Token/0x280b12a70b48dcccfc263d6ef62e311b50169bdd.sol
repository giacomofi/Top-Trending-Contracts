['contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  \n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = true;\n', '\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  function pause() onlyOwner whenNotPaused {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  function unpause() onlyOwner whenPaused {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  MintableToken public token;\n', '\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  address wallet;\n', '\n', '  uint256 public rate;\n', '\n', '  uint256 public weiRaised;\n', '\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) {\n', '    require(_startTime >= 0);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != 0x0);\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  function hasEnded() public constant returns (bool) {\n', '    return now > endTime;\n', '  }\n', '}\n', '\n', 'contract XulToken is MintableToken, Pausable {\n', '  string public constant name = "XULToken";\n', '  string public constant symbol = "XUL";\n', '  uint8 public constant decimals = 18;\n', '\n', '  uint256 public preIcoEndDate = 1510704000;  \n', '\n', '  function XulToken() {\n', '  }\n', '  \n', '  function mint(address _to, uint256 _amount) onlyOwner canMint whenNotPaused public returns (bool) {\n', '    uint256 goal = 300000000 * (10**18);\n', '\n', '    if (isPreIcoDate()) {\n', '      uint256 sum = totalSupply.add(_amount);\n', '      require(sum <= goal);\n', '    }\n', '\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(0x0, _to, _amount);\n', '    if (totalSupply == goal && isPreIcoDate()) {\n', '      paused = true;\n', '    }\n', '    return true;    \n', '  }\n', '     \n', '  function superMint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }     \n', '  \n', '  function changePreIcoEndDate(uint256 _preIcoEndDate) onlyOwner public {\n', '    require(_preIcoEndDate > 0);\n', '    preIcoEndDate = _preIcoEndDate;\n', '  }  \n', ' \n', '  function isPreIcoDate() public returns(bool) {\n', '    return now <= preIcoEndDate;\n', '  }     \n', '}\n', '\n', 'contract XulCrowdsale is Crowdsale, Ownable {\n', '  XulToken public xultoken;\n', '    \n', '  function XulCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet)\n', '    Crowdsale(_startTime, _endTime, _rate, _wallet)\n', '  {\n', '    \n', '  }\n', '  \n', '  function createTokenContract() internal returns (MintableToken) {\n', '     xultoken = new XulToken();\n', '     return xultoken;\n', '  }\n', '  \n', '  function changeRate(uint256 _rate) public onlyOwner returns (bool){\n', '      require(_rate > 0);\n', '      rate = _rate;\n', '  }\n', '    \n', '  function pauseToken() public onlyOwner returns(bool){\n', '      xultoken.pause();\n', '  }\n', '   \n', '  function unpauseToken() public onlyOwner returns(bool){\n', '      xultoken.unpause();\n', '  }\n', '\n', '  function mintToken(address _to, uint256 _amount) public onlyOwner returns(bool){\n', '      xultoken.mint(_to, _amount * (10 ** 18));\n', '  }\n', '\n', '  function mintBulk(address[] _receivers, uint256[] _amounts) onlyOwner public {\n', '    require(_receivers.length == _amounts.length);\n', '    for (uint i = 0; i < _receivers.length; i++) {\n', '        mintToken(_receivers[i], _amounts[i]);\n', '    }\n', '  } \n', '  \n', '  function superMint(address _to, uint256 _amount) public onlyOwner returns(bool) {\n', '      xultoken.superMint(_to, _amount * (10 ** 18));\n', '  }\n', '  \n', '  function setStartTime(uint256 _startTime) public onlyOwner {\n', '      require(_startTime > 0);\n', '      startTime = _startTime;\n', '  }  \n', '\n', '  function setEndTime(uint256 _endTime) public onlyOwner {\n', '      require(_endTime > 0);\n', '      endTime = _endTime;\n', '  }    \n', '\n', '  function setPreIcoEndDate(uint256 _preIcoEndDate) public onlyOwner {\n', '    xultoken.changePreIcoEndDate(_preIcoEndDate);\n', '  }  \n', '}']
['contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  \n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = true;\n', '\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  function pause() onlyOwner whenNotPaused {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  function unpause() onlyOwner whenPaused {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  MintableToken public token;\n', '\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  address wallet;\n', '\n', '  uint256 public rate;\n', '\n', '  uint256 public weiRaised;\n', '\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) {\n', '    require(_startTime >= 0);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != 0x0);\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  function hasEnded() public constant returns (bool) {\n', '    return now > endTime;\n', '  }\n', '}\n', '\n', 'contract XulToken is MintableToken, Pausable {\n', '  string public constant name = "XULToken";\n', '  string public constant symbol = "XUL";\n', '  uint8 public constant decimals = 18;\n', '\n', '  uint256 public preIcoEndDate = 1510704000;  \n', '\n', '  function XulToken() {\n', '  }\n', '  \n', '  function mint(address _to, uint256 _amount) onlyOwner canMint whenNotPaused public returns (bool) {\n', '    uint256 goal = 300000000 * (10**18);\n', '\n', '    if (isPreIcoDate()) {\n', '      uint256 sum = totalSupply.add(_amount);\n', '      require(sum <= goal);\n', '    }\n', '\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(0x0, _to, _amount);\n', '    if (totalSupply == goal && isPreIcoDate()) {\n', '      paused = true;\n', '    }\n', '    return true;    \n', '  }\n', '     \n', '  function superMint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }     \n', '  \n', '  function changePreIcoEndDate(uint256 _preIcoEndDate) onlyOwner public {\n', '    require(_preIcoEndDate > 0);\n', '    preIcoEndDate = _preIcoEndDate;\n', '  }  \n', ' \n', '  function isPreIcoDate() public returns(bool) {\n', '    return now <= preIcoEndDate;\n', '  }     \n', '}\n', '\n', 'contract XulCrowdsale is Crowdsale, Ownable {\n', '  XulToken public xultoken;\n', '    \n', '  function XulCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet)\n', '    Crowdsale(_startTime, _endTime, _rate, _wallet)\n', '  {\n', '    \n', '  }\n', '  \n', '  function createTokenContract() internal returns (MintableToken) {\n', '     xultoken = new XulToken();\n', '     return xultoken;\n', '  }\n', '  \n', '  function changeRate(uint256 _rate) public onlyOwner returns (bool){\n', '      require(_rate > 0);\n', '      rate = _rate;\n', '  }\n', '    \n', '  function pauseToken() public onlyOwner returns(bool){\n', '      xultoken.pause();\n', '  }\n', '   \n', '  function unpauseToken() public onlyOwner returns(bool){\n', '      xultoken.unpause();\n', '  }\n', '\n', '  function mintToken(address _to, uint256 _amount) public onlyOwner returns(bool){\n', '      xultoken.mint(_to, _amount * (10 ** 18));\n', '  }\n', '\n', '  function mintBulk(address[] _receivers, uint256[] _amounts) onlyOwner public {\n', '    require(_receivers.length == _amounts.length);\n', '    for (uint i = 0; i < _receivers.length; i++) {\n', '        mintToken(_receivers[i], _amounts[i]);\n', '    }\n', '  } \n', '  \n', '  function superMint(address _to, uint256 _amount) public onlyOwner returns(bool) {\n', '      xultoken.superMint(_to, _amount * (10 ** 18));\n', '  }\n', '  \n', '  function setStartTime(uint256 _startTime) public onlyOwner {\n', '      require(_startTime > 0);\n', '      startTime = _startTime;\n', '  }  \n', '\n', '  function setEndTime(uint256 _endTime) public onlyOwner {\n', '      require(_endTime > 0);\n', '      endTime = _endTime;\n', '  }    \n', '\n', '  function setPreIcoEndDate(uint256 _preIcoEndDate) public onlyOwner {\n', '    xultoken.changePreIcoEndDate(_preIcoEndDate);\n', '  }  \n', '}']
