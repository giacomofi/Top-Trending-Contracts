['pragma solidity 0.4.18;\n', '\n', '\n', 'contract Owned {\n', '\n', '   /** GitHub Repository https://github.com/VoiceOfCoins/VOCTOP25\n', '    */\n', '    \n', '    address internal _owner;\n', '    \n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with owner\n', '     */\n', '    function Owned() public {\n', '        \n', '        _owner = msg.sender;\n', '        \n', '    }\n', '    \n', '    function owner() public view returns (address) {\n', '        \n', '        return _owner;\n', '        \n', '    }\n', '    \n', '    modifier onlyOwner {\n', '        \n', '        require(msg.sender == _owner);\n', '        _;\n', '        \n', '    }\n', '    \n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        \n', '        require(_newOwner != address(0));\n', '        _owner = _newOwner;\n', '        \n', '    }\n', '}\n', '\n', '\n', 'contract VOCTOP25 is Owned {\n', '    \n', '    // Internal variables of the token\n', '    string  internal _name;\n', '    string  internal _symbol;\n', '    uint8   internal _decimals;\n', '    uint256 internal _totalSupply;\n', '    \n', '    // This creates an array with all balances\n', '    mapping (address => uint256)  internal _balanceOf;\n', '    mapping (address => mapping (address => uint256)) internal _allowance;\n', '    mapping (address => bool) internal _frozenAccount;\n', '    \n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    // This notifies clients about the amount minted\n', '    event Mint(address indexed _to, uint256 _value);\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed _from, uint256 _value);\n', '    // This notifies clients about approval for other address\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '    // This notifies clients frozen accounts\n', '    event AccountFrozen(address indexed _account, bool _value);\n', '       \n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function VOCTOP25() public {\n', '        \n', '        //Set decimals\n', '        _decimals = 18;\n', '        \n', '        // Update total supply with the decimal amount\n', '        _totalSupply = 0 * 10 ** uint256(_decimals);\n', '        \n', '        // Give the creator all initial tokens\n', '        _balanceOf[msg.sender] = _totalSupply;\n', '        \n', '        // Set the name for display purposes\n', '        _name = "Voice Of Coins TOP 25 Index Fund";   \n', '        \n', '        // Set the symbol for display purposes\n', '        _symbol = "VOC25";   \n', '        \n', '    }\n', '      \n', '    /**\n', "     * Returns token's name\n", '     *\n', '     */\n', '    function name() public view returns (string) {\n', '        \n', '        return _name;\n', '        \n', '    }\n', '    \n', '    /**\n', "     * Returns token's symbol\n", '     *\n', '     */\n', '    function symbol() public view returns (string) {\n', '        \n', '        return _symbol;\n', '        \n', '    }\n', '    \n', '    /**\n', "     * Returns token's decimals\n", '     *\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        \n', '        return _decimals;\n', '        \n', '    }\n', '    \n', '    /**\n', "     * Returns token's total supply\n", '     *\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        \n', '        return _totalSupply;\n', '        \n', '    }\n', '    \n', '    /**\n', '     * Returns balance of the give address\n', '     * @param _tokenHolder Tokens holder address\n', '     */\n', '    function balanceOf(address _tokenHolder) public view returns (uint256) {\n', '        \n', '        return _balanceOf[_tokenHolder];\n', '        \n', '    }\n', '    \n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        \n', '        //Do actual transfer\n', '        bool transferResult = _transfer(msg.sender, _to, _value);  \n', '\n', '        return transferResult;\n', '        \n', '    }\n', '    \n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        \n', '        // Check allowance if transfer not from own\n', '        if (msg.sender != _from) {\n', '            require(_allowance[_from][msg.sender] >= _value);     \n', '            _allowance[_from][msg.sender] -= _value;\n', '        }\n', '        \n', '        // Do actual transfer\n', '        bool transferResult = _transfer(_from, _to, _value); \n', '\n', '        return transferResult;\n', '    }\n', '    \n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *  \n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        \n', '        //set value \n', '        _allowance[msg.sender][_spender] = _value;\n', '\n', '        //Notify Listeners\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        return true;\n', '        \n', '    }\n', '    \n', '    /**\n', '     * Returns allowance for the given owner and spender\n', '     * @param _tokenOwner Tokens owner address\n', '     * @param _spender Spender address\n', '     */\n', '    function allowance(address _tokenOwner, address _spender) public view returns (uint256) {\n', '        \n', '        return _allowance[_tokenOwner][_spender];\n', '        \n', '    }\n', '    \n', '    /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\n', '      \n', '        //check overflow\n', '        require(_allowance[msg.sender][_spender] + _addedValue >= _allowance[msg.sender][_spender]);\n', '\n', '        //upate value\n', '        _allowance[msg.sender][_spender] += _addedValue;\n', '\n', '        //Notify Listeners\n', '        Approval(msg.sender, _spender, _allowance[msg.sender][_spender]);\n', '\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\n', '    \n', '        //check if subtractedValue greater than available, if so set to zero\n', '        //otherwise decrease by subtractedValue\n', '        if (_subtractedValue > _allowance[msg.sender][_spender]) {\n', '\n', '            _allowance[msg.sender][_spender] = 0;\n', '\n', '        } else {\n', '\n', '            _allowance[msg.sender][_spender] -= _subtractedValue;\n', '\n', '        }\n', '\n', '        //Notify Listeners\n', '        Approval(msg.sender, _spender, _allowance[msg.sender][_spender]);\n', '\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @notice Destroy tokens from owener account, can be run only by owner\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public onlyOwner returns (bool success) {\n', '        \n', '        //Check if FrozenFunds\n', '        require(!_frozenAccount[_owner]);\n', '        \n', '        // Check if the targeted balance is enough\n', '        require(_balanceOf[_owner] >= _value);\n', '        \n', '        // Subtract from the targeted balance and total supply\n', '        _balanceOf[_owner] -= _value;\n', '        _totalSupply -= _value;\n', '        \n', '        //Notify Listeners\n', '        Burn(_owner, _value);\n', '        \n', '        return true;\n', '        \n', '    }\n', '    \n', '    /**\n', '     * @notice Destroy tokens from other account, can be run only by owner\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public onlyOwner returns (bool success) {\n', '        \n', '        // Save frozen state\n', '        bool bAccountFrozen = frozenAccount(_from);\n', '        \n', '        //Unfreeze account if was frozen\n', '        if (bAccountFrozen) {\n', '            //Allow transfers\n', '            freezeAccount(_from, false);\n', '        }\n', '        \n', '        // Transfer to owners account\n', '        _transfer(_from, _owner, _value);\n', '        \n', '        //Freeze again if was frozen before\n', '        if (bAccountFrozen) {\n', '            freezeAccount(_from, bAccountFrozen);\n', '        }\n', '        \n', '        // Burn from owners account\n', '        burn(_value);\n', '        \n', '        return true;\n', '        \n', '    }\n', '    \n', '    /**\n', '    * @notice Create `mintedAmount` tokens and send it to `owner`, can be run only by owner\n', '    * @param _mintedAmount the amount of tokens it will receive\n', '    */\n', '    function mintToken(uint256 _mintedAmount) public onlyOwner {\n', '        \n', '        //Check if FrozenFunds\n', '        require(!_frozenAccount[_owner]);\n', '        \n', '        // Check for overflows\n', '        require(_balanceOf[_owner] + _mintedAmount >= _balanceOf[_owner]);\n', '        \n', '        // Check for overflows\n', '        require(_totalSupply + _mintedAmount >= _totalSupply);\n', '        \n', '        _balanceOf[_owner] += _mintedAmount;\n', '        _totalSupply += _mintedAmount;\n', '        \n', '        // Notify Listeners\n', '        Mint(_owner, _mintedAmount);\n', '        // Notify Listeners\n', '        Transfer(0, _owner, _mintedAmount);\n', '        \n', '    }\n', '    \n', '    /**\n', '    * @notice Freeze or unfreeze account, can be run only by owner\n', '    * @param _target Account\n', '    * @param _freeze True to freeze, False to unfreeze\n', '    */\n', '    function freezeAccount(address _target, bool _freeze) public onlyOwner returns (bool) {\n', '        \n', '        //set freeze value \n', '        _frozenAccount[_target] = _freeze;\n', '        \n', '        \n', '        //Notify Listeners\n', '        AccountFrozen(_target, _freeze);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * Check if the address is frozen\n', '     * @param _account Address to be checked\n', '     */\n', '    function frozenAccount(address _account) public view returns (bool) {\n', '        \n', '        return _frozenAccount[_account];\n', '        \n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint256 _value) internal returns (bool success) {\n', '        \n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        \n', '        //Check if FrozenFunds\n', '        require(!_frozenAccount[_from]);\n', '        require(!_frozenAccount[_to]);\n', '        \n', '        // Check if the sender has enough\n', '        require(_balanceOf[_from] >= _value);\n', '        \n', '        // Check for overflows\n', '        require(_balanceOf[_to] + _value >= _balanceOf[_to]);\n', '        \n', '        // Subtract from the sender\n', '        _balanceOf[_from] -= _value;\n', '        \n', '        // Add the same to the recipient\n', '        _balanceOf[_to] += _value;\n', '            \n', '        //Notify Listeners\n', '        Transfer(_from, _to, _value);    \n', '\n', '        return true;\n', '        \n', '    }\n', '    \n', '}']