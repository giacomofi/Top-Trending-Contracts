['pragma solidity 0.4.18;\n', '/**\n', '    Used for administrration of the VZT Token Contract\n', '*/\n', '\n', 'contract Administration {\n', '\n', '    // keeps track of the contract owner\n', '    address     public  owner;\n', '    // keeps track of the contract administrator\n', '    address     public  administrator;\n', '    // keeps track of hte song token exchange\n', '    address     public  songTokenExchange;\n', '    // keeps track of the royalty information contract\n', '    address     public  royaltyInformationContract;\n', '    // keeps track of whether or not the admin contract is frozen\n', '    bool        public  administrationContractFrozen;\n', '\n', '    // keeps track of the contract moderators\n', '    mapping (address => bool) public moderators;\n', '\n', '    event ModeratorAdded(address indexed _invoker, address indexed _newMod, bool indexed _newModAdded);\n', '    event ModeratorRemoved(address indexed _invoker, address indexed _removeMod, bool indexed _modRemoved);\n', '    event AdministratorAdded(address indexed _invoker, address indexed _newAdmin, bool indexed _newAdminAdded);\n', '    event RoyaltyInformationContractSet(address indexed _invoker, address indexed _newRoyaltyContract, bool indexed _newRoyaltyContractSet);\n', '    event SongTokenExchangeContractSet(address indexed _invoker, address indexed _newSongTokenExchangeContract, bool indexed _newSongTokenExchangeSet);\n', '\n', '    function Administration() {\n', '        owner = 0x79926C875f2636808de28CD73a45592587A537De;\n', '        administrator = 0x79926C875f2636808de28CD73a45592587A537De;\n', '        administrationContractFrozen = false;\n', '    }\n', '\n', '    /// @dev checks to see if the contract is frozen\n', '    modifier isFrozen() {\n', '        require(administrationContractFrozen);\n', '        _;\n', '    }\n', '\n', '    /// @dev checks to see if the contract is not frozen\n', '    modifier notFrozen() {\n', '        require(!administrationContractFrozen);\n', '        _;\n', '    }\n', '\n', '    /// @dev checks to see if the msg.sender is owner\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /// @dev checks to see if msg.sender is owner, or admin\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == owner || msg.sender == administrator);\n', '        _;\n', '    }\n', '\n', '    /// @dev checks to see if msg.sender is owner, admin, or song token exchange\n', '    modifier onlyAdminOrExchange() {\n', '        require(msg.sender == owner || msg.sender == songTokenExchange || msg.sender == administrator);\n', '        _;\n', '    }\n', '\n', '    /// @dev checks to see if msg.sender is privileged\n', '    modifier onlyModerator() {\n', '        if (msg.sender == owner) {_;}\n', '        if (msg.sender == administrator) {_;}\n', '        if (moderators[msg.sender]) {_;}\n', '    }\n', '\n', '    /// @notice used to freeze the administration contract\n', '    function freezeAdministrationContract() public onlyAdmin notFrozen returns (bool frozen) {\n', '        administrationContractFrozen = true;\n', '        return true;\n', '    }\n', '\n', '    /// @notice used to unfreeze the administration contract\n', '    function unfreezeAdministrationContract() public onlyAdmin isFrozen returns (bool unfrozen) {\n', '        administrationContractFrozen = false;\n', '        return true;\n', '    }\n', '\n', '    /// @notice used to set the royalty information contract\n', '    function setRoyaltyInformationContract(address _royaltyInformationContract) public onlyAdmin notFrozen returns (bool set) {\n', '        royaltyInformationContract = _royaltyInformationContract;\n', '        RoyaltyInformationContractSet(msg.sender, _royaltyInformationContract, true);\n', '        return true;\n', '    }\n', '\n', '    /// @notice used to set the song token exchange\n', '    function setTokenExchange(address _songTokenExchange) public onlyAdmin notFrozen returns (bool set) {\n', '        songTokenExchange = _songTokenExchange;\n', '        SongTokenExchangeContractSet(msg.sender, _songTokenExchange, true);\n', '        return true;\n', '    }\n', '\n', '    /// @notice used to add a moderator\n', '    function addModerator(address _newMod) public onlyAdmin notFrozen returns (bool success) {\n', '        moderators[_newMod] = true;\n', '        ModeratorAdded(msg.sender, _newMod, true);\n', '        return true;\n', '    }\n', '\n', '    /// @notice used to remove a moderator\n', '    function removeModerator(address _removeMod) public onlyAdmin notFrozen returns (bool success) {\n', '        moderators[_removeMod] = false;\n', '        ModeratorRemoved(msg.sender, _removeMod, true);\n', '        return true;\n', '    }\n', '\n', '    /// @notice used to set an administrator\n', '    function setAdministrator(address _administrator) public onlyOwner notFrozen returns (bool success) {\n', '        administrator = _administrator;\n', '        AdministratorAdded(msg.sender, _administrator, true);\n', '        return true;\n', '    }\n', '\n', '    /// @notice used to transfer contract ownership\n', '    function transferOwnership(address _newOwner) public onlyOwner notFrozen returns (bool success) {\n', '        owner = _newOwner;\n', '        return true;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    require(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', '    Version: 1.0.1\n', '*/\n', '\n', 'contract Vezt is Administration {\n', '    using SafeMath for uint256;\n', '\n', '    uint256                 public  totalSupply;\n', '    uint8                   public  decimals;\n', '    string                  public  name;\n', '    string                  public  symbol;\n', '    bool                    public  tokenTransfersFrozen;\n', '    bool                    public  tokenMintingEnabled;\n', '    bool                    public  contractLaunched;\n', '\n', '    mapping (address => uint256)                        public balances;\n', '    mapping (address => mapping (address => uint256))   public allowed;\n', '\n', '\n', '    event Transfer(address indexed _sender, address indexed _recipient, uint256 _amount);\n', '    event Approve(address indexed _owner, address indexed _spender, uint256 _amount);\n', '    event LaunchContract(address indexed _launcher, bool _launched);\n', '    event FreezeTokenTransfers(address indexed _invoker, bool _frozen);\n', '    event ThawTokenTransfers(address indexed _invoker, bool _thawed);\n', '    event MintTokens(address indexed _minter, uint256 _amount, bool indexed _minted);\n', '    event TokenMintingDisabled(address indexed _invoker, bool indexed _disabled);\n', '    event TokenMintingEnabled(address indexed _invoker, bool indexed _enabled);\n', '    event SongTokenAdded(address indexed _songTokenAddress, bool indexed _songTokenAdded);\n', '    event SongTokenRemoved(address indexed _songTokenAddress, bool indexed _songTokenRemoved);\n', '\n', '    function Vezt() {\n', '        name = "Vezt";\n', '        symbol = "VZT";\n', '        decimals = 18;\n', '        totalSupply = 125000000000000000000000000;\n', '        balances[0x79926C875f2636808de28CD73a45592587A537De] = balances[0x79926C875f2636808de28CD73a45592587A537De].add(totalSupply);\n', '        tokenTransfersFrozen = true;\n', '        tokenMintingEnabled = false;\n', '        contractLaunched = false;\n', '    }\n', '\n', '    /**\n', '        @dev Used by admin to send bulk amount of transfers, primary purpose to replay tx from the crowdfund to make it easier to do bulk sending\n', '        @notice Can also be used for general bulk transfers  via the associated python script\n', '     */\n', '    function transactionReplay(address _receiver, uint256 _amount)\n', '        public\n', '        onlyOwner\n', '        returns (bool replayed)\n', '    {\n', '        require(transferCheck(msg.sender, _receiver, _amount));\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_receiver] = balances[_receiver].add(_amount);\n', '        Transfer(msg.sender, _receiver, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        @notice Used to launch the contract\n', '     */\n', '    function launchContract() \n', '        public\n', '        onlyOwner\n', '        returns (bool launched)\n', '    {\n', '        require(!contractLaunched);\n', '        tokenTransfersFrozen = false;\n', '        tokenMintingEnabled = true;\n', '        contractLaunched = true;\n', '        LaunchContract(msg.sender, true);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        @notice Used to disable token minting\n', '     */\n', '    function disableTokenMinting() \n', '        public\n', '        onlyOwner\n', '        returns (bool disabled) \n', '    {\n', '        tokenMintingEnabled = false;\n', '        TokenMintingDisabled(msg.sender, true);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        @notice Used to enable token minting\n', '     */\n', '    function enableTokenMinting() \n', '        public\n', '        onlyOwner\n', '        returns (bool enabled)\n', '    {\n', '        tokenMintingEnabled = true;\n', '        TokenMintingEnabled(msg.sender, true);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        @notice Used to freeze token transfers\n', '     */\n', '    function freezeTokenTransfers()\n', '        public\n', '        onlyOwner\n', '        returns (bool frozen)\n', '    {\n', '        tokenTransfersFrozen = true;\n', '        FreezeTokenTransfers(msg.sender, true);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        @notice Used to thaw token tra4nsfers\n', '     */\n', '    function thawTokenTransfers()\n', '        public\n', '        onlyOwner\n', '        returns (bool thawed)\n', '    {\n', '        tokenTransfersFrozen = false;\n', '        ThawTokenTransfers(msg.sender, true);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        @notice Used to transfer funds\n', '     */\n', '    function transfer(address _receiver, uint256 _amount)\n', '        public\n', '        returns (bool transferred)\n', '    {\n', '        require(transferCheck(msg.sender, _receiver, _amount));\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_receiver] = balances[_receiver].add(_amount);\n', '        Transfer(msg.sender, _receiver, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        @notice Used to transfer funds on behalf of someone\n', '     */\n', '    function transferFrom(address _owner, address _receiver, uint256 _amount) \n', '        public \n', '        returns (bool transferred)\n', '    {\n', '        require(allowed[_owner][msg.sender] >= _amount);\n', '        require(transferCheck(_owner, _receiver, _amount));\n', '        allowed[_owner][msg.sender] = allowed[_owner][msg.sender].sub(_amount);\n', '        balances[_owner] = balances[_owner].sub(_amount);\n', '        balances[_receiver] = balances[_receiver].add(_amount);\n', '        Transfer(_owner, _receiver, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        @notice Used to approve someone to spend funds on your behalf\n', '     */\n', '    function approve(address _spender, uint256 _amount)\n', '        public\n', '        returns (bool approved)\n', '    {\n', '        require(_amount > 0);\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_amount);\n', '        Approve(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '        @notice Used to burn tokens\n', '     */\n', '    function tokenBurner(uint256 _amount)\n', '        public\n', '        onlyOwner\n', '        returns (bool burned)\n', '    {\n', '        require(_amount > 0);\n', '        require(totalSupply.sub(_amount) >= 0);\n', '        require(balances[msg.sender] >= _amount);\n', '        require(balances[msg.sender].sub(_amount) >= 0);\n', '        totalSupply = totalSupply.sub(_amount);\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        Transfer(msg.sender, 0, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        @notice Used to mint new tokens\n', '    */\n', '    function tokenFactory(uint256 _amount)\n', '        public \n', '        onlyOwner\n', '        returns (bool minted)\n', '    {\n', '        // this calls the token minter function which is used to do a sanity check of the parameters being passed in\n', '        require(tokenMinter(_amount, msg.sender));\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[msg.sender] = balances[msg.sender].add(_amount);\n', '        Transfer(0, msg.sender, _amount);\n', '        return true;\n', '    }\n', '\n', '    // Internals\n', '\n', '    /**\n', '        @dev Low level function used to do a sanity check of minting params\n', '     */\n', '    function tokenMinter(uint256 _amount, address _sender)\n', '        internal\n', '        view\n', '        returns (bool valid)\n', '    {\n', '        require(tokenMintingEnabled);\n', '        require(_amount > 0);\n', '        require(_sender != address(0x0));\n', '        require(totalSupply.add(_amount) > 0);\n', '        require(totalSupply.add(_amount) > totalSupply);\n', '        require(balances[_sender].add(_amount) > 0);\n', '        require(balances[_sender].add(_amount) > balances[_sender]);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '        @dev Prevents people from sending to a  a null address        \n', '        @notice Low level function used to do a sanity check of transfer parameters\n', '     */\n', '    function transferCheck(address _sender, address _receiver, uint256 _amount)\n', '        internal\n', '        view\n', '        returns (bool valid)\n', '    {\n', '        require(!tokenTransfersFrozen);\n', '        require(_amount > 0);\n', '        require(_receiver != address(0));\n', '        require(balances[_sender] >= _amount); // added check\n', '        require(balances[_sender].sub(_amount) >= 0);\n', '        require(balances[_receiver].add(_amount) > 0);\n', '        require(balances[_receiver].add(_amount) > balances[_receiver]);\n', '        return true;\n', '    }\n', '\n', '    // Getters\n', '\n', '    /**\n', '        @notice Used to retrieve total supply\n', '     */\n', '    function totalSupply() \n', '        public\n', '        view\n', '        returns (uint256 _totalSupply)\n', '    {\n', '        return totalSupply;\n', '    }\n', '\n', '\n', '    /**\n', '        @notice Used to retrieve balance of a user\n', '     */\n', '    function balanceOf(address _person)\n', '        public\n', '        view\n', '        returns (uint256 _balanceOf)\n', '    {\n', '        return balances[_person];\n', '    }\n', '\n', '    /**\n', '        @notice Used to retrieve the allowed balance of someone\n', '     */\n', '    function allowance(address _owner, address _spender)\n', '        public \n', '        view\n', '        returns (uint256 _allowance)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '}']