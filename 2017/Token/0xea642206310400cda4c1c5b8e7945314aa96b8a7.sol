['pragma solidity ^0.4.11;\n', '\n', 'contract Mineable {\n', "    string public name = 'MINT';\n", "    string public symbol = 'MINT';\n", '    uint8 public decimals = 18;\n', '    uint256 public totalSupply = 1000000000000000000000000000;\n', '    uint public miningReward = 1000000000000000000;\n', '    uint private divider;\n', '    \n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => uint256) public successesOf;\n', '    mapping (address => uint256) public failsOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    \n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function Mineable() {\n', '        balanceOf[msg.sender] = totalSupply;\n', '        divider -= 1;\n', '        divider /= 1000000000;\n', '    }\n', '    \n', '    /* Internal transfer, only can be called by this contract */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '    \n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '    \n', '    /* Transfer tokens from other address */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    /* Set allowance for other address */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '    \n', '    function () payable {\n', '        if (msg.value == 0) {\n', '            uint minedAtBlock = uint(block.blockhash(block.number - 1));\n', '            uint minedHashRel = uint(sha256(minedAtBlock + uint(msg.sender))) / divider;\n', '            uint balanceRel = balanceOf[msg.sender] * 1000000000 / totalSupply;\n', '            if (balanceRel >= 100000) {\n', '                uint k = balanceRel / 100000;\n', '                if (k > 255) {\n', '                    k = 255;\n', '                }\n', '                k = 2 ** k;\n', '                balanceRel = 500000000 / k;\n', '                balanceRel = 500000000 - balanceRel;\n', '                if (minedHashRel < balanceRel) {\n', '                    uint reward = miningReward + minedHashRel * 100000000000000;\n', '                    balanceOf[msg.sender] += reward;\n', '                    totalSupply += reward;\n', '                    Transfer(0, this, reward);\n', '                    Transfer(this, msg.sender, reward);\n', '                    successesOf[msg.sender]++;\n', '                } else {\n', '                    failsOf[msg.sender]++;\n', '                }\n', '            } else {\n', '                revert();\n', '            }\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '}']