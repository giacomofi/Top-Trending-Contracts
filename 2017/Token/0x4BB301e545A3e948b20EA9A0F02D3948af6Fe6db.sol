['pragma solidity ^0.4.15;\n', '\n', 'contract AccessControlled {\n', '  address public owner = msg.sender;\n', '  \n', '  /**\n', '   * @dev Throws if called by any account other than the argument. \n', '   */\n', '  modifier onlyBy(address _account)\n', '  {\n', '    require(msg.sender == _account);\n', '    _;\n', '  }\n', '  \n', '  /**\n', '   * @dev Throws if called by any account other than either of the two arguments. \n', '   */\n', '  modifier onlyByOr(address _account1, address _account2)\n', '  {\n', '    require(msg.sender == _account1 || msg.sender == _account2);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner. \n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '}\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract TarynToken is AccessControlled {\n', '  using SafeMath for uint256;\n', '\n', '  string public constant name     = "TarynToken";\n', '  string public constant symbol   = "TA";\n', '  uint8  public constant decimals = 18;\n', '  \n', '  uint256 public constant INITIAL_SUPPLY = 0;\n', '  uint256 public totalSupply;\n', '\n', '  mapping(address => uint256) balances;\n', '  mapping(uint256 => address) public addresses;\n', '  mapping(address => uint256) public indexes;\n', '  //index starts at 1 so that first item has index of 1, which differentiates\n', '  //it from non-existing items with values of 0. \n', '  uint public index = 1;\n', '  \n', '  /**\n', '   * @dev Contructor that gives msg.sender all of existing tokens. FIXME: this is simply for initial testing.\n', '   */\n', '  function TarynToken() public {\n', '    totalSupply = INITIAL_SUPPLY;\n', '  }\n', '  \n', '  event Mint(address indexed to, uint256 amount);\n', '\n', '  function mint(address _to, uint256 _amount) onlyOwner public returns (bool){\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    addToAddresses(_to);\n', '    Mint(_to, _amount);\n', '    return true;\n', '  }\n', '  \n', '  function addToAddresses(address _address) private {\n', '      if (indexes[_address] == 0) {\n', '        addresses[index] = _address;\n', '        indexes[_address] = index;\n', '        index++;\n', '     }\n', '  }\n', '  \n', '  event Distribute(address owner, uint256 balance, uint256 value, uint ind);\n', '\n', '  function distribute() payable public returns(bool){\n', '   for (uint i = 1; i < index; i++) {\n', '     uint256 balance = balances[addresses[i]];\n', '     uint256 giveAmount = balance.mul(msg.value).div(totalSupply);\n', '     Distribute(addresses[i], balance, giveAmount, i);\n', '     addresses[i].transfer(giveAmount);\n', '   }\n', '   return true;\n', '  }\n', '  \n', '  function isRegistered(address _address) private constant returns (bool) {\n', '      return (indexes[_address] != 0);\n', '  }\n', '  // Basics\n', '\n', '  /**\n', '   * @dev transfer token for a specified address\n', '   * @param _to The address to transfer to.\n', '   * @param _value The amount to be transferred.\n', '   */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    addToAddresses(_to);\n', '    return true;\n', '  }\n', '  \n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  \n', '  /**\n', '   * @dev Gets the balance of the specified address.\n', '   * @param _owner The address to query the the balance of. \n', '   * @return An uint256 representing the amount owned by the passed address.\n', '   */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  \n', '  // Allowances\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '  \n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '  \n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  \n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '  \n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '  \n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '  \n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  \n', '    /*\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until \n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     */\n', '  function increaseApproval (address _spender, uint _addedValue) \n', '    public\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '  \n', '  function decreaseApproval (address _spender, uint _subtractedValue) \n', '    public\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '  \n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}']