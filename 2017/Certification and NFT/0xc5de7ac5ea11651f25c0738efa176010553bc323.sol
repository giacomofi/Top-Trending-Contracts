['pragma solidity ^0.4.16;\n', '\n', '// SafeMath\n', 'contract SafeMath {\n', '     function safeMul(uint a, uint b) internal returns (uint) {\n', '          uint c = a * b;\n', '          assert(a == 0 || c / a == b);\n', '          return c;\n', '     }\n', '\n', '     function safeSub(uint a, uint b) internal returns (uint) {\n', '          assert(b <= a);\n', '          return a - b;\n', '     }\n', '\n', '     function safeAdd(uint a, uint b) internal returns (uint) {\n', '          uint c = a + b;\n', '          assert(c>=a && c>=b);\n', '          return c;\n', '     }\n', '}\n', '\n', '// Standard token interface (ERC 20)\n', '// https://github.com/ethereum/EIPs/issues/20\n', '// Token\n', 'contract Token is SafeMath {\n', '     // Functions:\n', '     /// @return total amount of tokens\n', '     function totalSupply() constant returns (uint256 supply);\n', '\n', '     /// @param _owner The address from which the balance will be retrieved\n', '     /// @return The balance\n', '     function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '     /// @notice send `_value` token to `_to` from `msg.sender`\n', '     /// @param _to The address of the recipient\n', '     /// @param _value The amount of token to be transferred\n', '     function transfer(address _to, uint256 _value) returns(bool);\n', '     \n', '     /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '     /// @param _from The address of the sender\n', '     /// @param _to The address of the recipient\n', '     /// @param _value The amount of token to be transferred\n', '     /// @return Whether the transfer was successful or not\n', '     function transferFrom(address _from, address _to, uint256 _value) returns(bool);\n', '\n', '     /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '     /// @param _spender The address of the account able to transfer the tokens\n', '     /// @param _value The amount of wei to be approved for transfer\n', '     /// @return Whether the approval was successful or not\n', '     function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '     /// @param _owner The address of the account owning tokens\n', '     /// @param _spender The address of the account able to transfer the tokens\n', '     /// @return Amount of remaining tokens allowed to spent\n', '     function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '     // Events:\n', '     event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '//StdToken\n', 'contract StdToken is Token {\n', '     // Fields:\n', '     mapping(address => uint256) balances;\n', '     mapping (address => mapping (address => uint256)) allowed;\n', '     uint public supply = 0;\n', '\n', '     // Functions:\n', '     function transfer(address _to, uint256 _value) returns(bool) {\n', '          require(balances[msg.sender] >= _value);\n', '          require(balances[_to] + _value > balances[_to]);\n', '\n', '          balances[msg.sender] = safeSub(balances[msg.sender],_value);\n', '          balances[_to] = safeAdd(balances[_to],_value);\n', '\n', '          Transfer(msg.sender, _to, _value);\n', '          return true;\n', '     }\n', '\n', '     function transferFrom(address _from, address _to, uint256 _value) returns(bool){\n', '          require(balances[_from] >= _value);\n', '          require(allowed[_from][msg.sender] >= _value);\n', '          require(balances[_to] + _value > balances[_to]);\n', '\n', '          balances[_to] = safeAdd(balances[_to],_value);\n', '          balances[_from] = safeSub(balances[_from],_value);\n', '          allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender],_value);\n', '\n', '          Transfer(_from, _to, _value);\n', '          return true;\n', '     }\n', '\n', '     function totalSupply() constant returns (uint256) {\n', '          return supply;\n', '     }\n', '\n', '     function balanceOf(address _owner) constant returns (uint256) {\n', '          return balances[_owner];\n', '     }\n', '\n', '     function approve(address _spender, uint256 _value) returns (bool) {\n', '          // To change the approve amount you first have to reduce the addresses`\n', '          //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '          //  already 0 to mitigate the race condition described here:\n', '          //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '          require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '          allowed[msg.sender][_spender] = _value;\n', '          Approval(msg.sender, _spender, _value);\n', '\n', '          return true;\n', '     }\n', '\n', '     function allowance(address _owner, address _spender) constant returns (uint256) {\n', '          return allowed[_owner][_spender];\n', '     }\n', '}\n', '\n', 'contract NEOCASHToken is StdToken\n', '{\n', '/// Fields:\n', '    string public constant name = "NEO CASH";\n', '    string public constant symbol = "NEOC";\n', '    uint public constant decimals = 18;\n', '\n', '    uint public constant TOTAL_SUPPLY = 100000000 * (1 ether / 1 wei);\n', '    // this includes DEVELOPERS_BONUS\n', '    uint public constant DEVELOPERS_BONUS = 65000000 * (1 ether / 1 wei);\n', '\t\n', '    uint public constant PRESALE_PRICE = 50;  // per 1 Ether\n', '    uint public constant PRESALE_MAX_ETH = 100000;\n', '    uint public constant PRESALE_TOKEN_SUPPLY_LIMIT = PRESALE_PRICE * PRESALE_MAX_ETH * (1 ether / 1 wei);\n', '\n', '\n', '    uint public constant ICO_PRICE1 = 40;     // per 1 Ether\n', '    uint public constant ICO_PRICE2 = 30;     // per 1 Ether\n', '    uint public constant ICO_PRICE3 = 10;     // per 1 Ether\n', '\n', '    // 680M2k2 - this includes presale tokens\n', '    uint public constant TOTAL_SOLD_TOKEN_SUPPLY_LIMIT = 35000000* (1 ether / 1 wei);\n', '\n', '    enum State{\n', '       Init,\n', '       Paused,\n', '\n', '       PresaleRunning,\n', '       PresaleFinished,\n', '\n', '       ICORunning,\n', '       ICOFinished\n', '    }\n', '\n', '    State public currentState = State.Init;\n', '    bool public enableTransfers = true;\n', '\n', '    address public teamTokenBonus = 0;\n', '\n', "    // Gathered funds can be withdrawn only to escrow's address.\n", '    address public escrow = 0;\n', '\n', '    // Token manager has exclusive priveleges to call administrative\n', '    // functions on this contract.\n', '    address public tokenManager = 0;\n', '\n', '    uint public presaleSoldTokens = 0;\n', '    uint public icoSoldTokens = 0;\n', '    uint public totalSoldTokens = 0;\n', '\n', '/// Modifiers:\n', '    modifier onlyTokenManager()\n', '    {\n', '        require(msg.sender==tokenManager); \n', '        _; \n', '    }\n', '    \n', '    modifier onlyTokenCrowner()\n', '    {\n', '        require(msg.sender==escrow); \n', '        _; \n', '    }\n', '\n', '    modifier onlyInState(State state)\n', '    {\n', '        require(state==currentState); \n', '        _; \n', '    }\n', '\n', '/// Events:\n', '    event LogBuy(address indexed owner, uint value);\n', '    event LogBurn(address indexed owner, uint value);\n', '\n', '/// Functions:\n', '    /// @dev Constructor\n', '    /// @param _tokenManager Token manager address.\n', '    function NEOCASHToken(address _tokenManager, address _escrow, address _teamTokenBonus) \n', '    {\n', '        tokenManager = _tokenManager;\n', '        teamTokenBonus = _teamTokenBonus;\n', '        escrow = _escrow;\n', '\n', '        // send team bonus immediately\n', '        uint teamBonus = DEVELOPERS_BONUS;\n', '        balances[_teamTokenBonus] += teamBonus;\n', '        supply+= teamBonus;\n', '        \n', '        assert(PRESALE_TOKEN_SUPPLY_LIMIT==5000000 * (1 ether / 1 wei));\n', '        assert(TOTAL_SOLD_TOKEN_SUPPLY_LIMIT==35000000 * (1 ether / 1 wei));\n', '    }\n', '\n', '    function buyTokens() public payable\n', '    {\n', '        require(currentState==State.PresaleRunning || currentState==State.ICORunning);\n', '\n', '        if(currentState==State.PresaleRunning){\n', '            return buyTokensPresale();\n', '        }else{\n', '            return buyTokensICO();\n', '        }\n', '    }\n', '\n', '    function buyTokensPresale() public payable onlyInState(State.PresaleRunning)\n', '    {\n', '        // min - 1 ETH\n', '        //require(msg.value >= (1 ether / 1 wei));\n', '        // min - 0.01 ETH\n', '        require(msg.value >= ((1 ether / 1 wei) / 100));\n', '        uint newTokens = msg.value * PRESALE_PRICE;\n', '\n', '        require(presaleSoldTokens + newTokens <= PRESALE_TOKEN_SUPPLY_LIMIT);\n', '\n', '        balances[msg.sender] += newTokens;\n', '        supply+= newTokens;\n', '        presaleSoldTokens+= newTokens;\n', '        totalSoldTokens+= newTokens;\n', '\n', '        LogBuy(msg.sender, newTokens);\n', '    }\n', '\n', '    function buyTokensICO() public payable onlyInState(State.ICORunning)\n', '    {\n', '        // min - 0.01 ETH\n', '        require(msg.value >= ((1 ether / 1 wei) / 100));\n', '        uint newTokens = msg.value * getPrice();\n', '\n', '        require(totalSoldTokens + newTokens <= TOTAL_SOLD_TOKEN_SUPPLY_LIMIT);\n', '\n', '        balances[msg.sender] += newTokens;\n', '        supply+= newTokens;\n', '        icoSoldTokens+= newTokens;\n', '        totalSoldTokens+= newTokens;\n', '\n', '        LogBuy(msg.sender, newTokens);\n', '    }\n', '\n', '    function getPrice()constant returns(uint)\n', '    {\n', '        if(currentState==State.ICORunning){\n', '             if(icoSoldTokens<(10000000 * (1 ether / 1 wei))){\n', '                  return ICO_PRICE1;\n', '             }\n', '             \n', '             if(icoSoldTokens<(15000000 * (1 ether / 1 wei))){\n', '                  return ICO_PRICE2;\n', '             }\n', '\n', '             return ICO_PRICE3;\n', '        }else{\n', '             return PRESALE_PRICE;\n', '        }\n', '    }\n', '\n', '    function setState(State _nextState) public onlyTokenManager\n', '    {\n', "        //setState() method call shouldn't be entertained after ICOFinished\n", '        require(currentState != State.ICOFinished);\n', '        \n', '        currentState = _nextState;\n', '        // enable/disable transfers\n', '        //enable transfers only after ICOFinished, disable otherwise\n', '        //enableTransfers = (currentState==State.ICOFinished);\n', '    }\n', '    \n', '    function DisableTransfer() public onlyTokenManager\n', '    {\n', '        enableTransfers = false;\n', '    }\n', '    \n', '    \n', '    function EnableTransfer() public onlyTokenManager\n', '    {\n', '        enableTransfers = true;\n', '    }\n', '\n', '    function withdrawEther() public onlyTokenManager\n', '    {\n', '        if(this.balance > 0) \n', '        {\n', '            require(escrow.send(this.balance));\n', '        }\n', '    }\n', '\n', '/// Overrides:\n', '    function transfer(address _to, uint256 _value) returns(bool){\n', '        require(enableTransfers);\n', '        return super.transfer(_to,_value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns(bool){\n', '        require(enableTransfers);\n', '        return super.transferFrom(_from,_to,_value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool) {\n', '        require(enableTransfers);\n', '        return super.approve(_spender,_value);\n', '    }\n', '\n', '/// Setters/getters\n', '    function ChangeTokenManager(address _mgr) public onlyTokenManager\n', '    {\n', '        tokenManager = _mgr;\n', '    }\n', '    \n', '    function ChangeCrowner(address _mgr) public onlyTokenCrowner\n', '    {\n', '        escrow = _mgr;\n', '    }\n', '\n', '    // Default fallback function\n', '    function() payable \n', '    {\n', '        buyTokens();\n', '    }\n', '}']