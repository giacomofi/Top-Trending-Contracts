['/*\n', '\n', '    ,----..      \n', '   /   /   \\            *********************************\n', '  /   .     :           *Qwoyn Digital Investments, LLC *\n', ' .   /   ;.  \\          *Cornerstone version 0.1        *\n', '.   ;   /  ` ;          *Daniel Pittman, CEO            *\n', ';   |  ; \\ ; |          *December 2017                  *\n', "|   :  | ; | '          *********************************\n", ".   |  ' ' ' :   \n", "'   ;  \\; /  |   \n", " \\   \\  ',  . \\  \n", '  ;   :      ; | \n', '   \\   \\ .\'`--" \n', '\n', '\n', 'Tokenized Company Equity Right Transfer Agreement\n', '\n', '\n', '\n', 'Subject to an existing Right of Ownership Token Transfer Agreement or otherwise proclaimed possession of ownership of the underlying \n', '\n', 'asset ("the Company Equity"), referenced hereafter as "P003_25793", Qwoyn Digital Investments, LLC, (hereafter the “Token Issuer”) \n', '\n', '(the “Purchaser” or the “lien holder”) hereby agrees to tokenize his ownership of  the Company Equity Right granted under the \n', '\n', 'Agreement P003_25793, (the “Tokenized Right to Company Equity Revenue”). \n', '\n', 'Uploading this Agreement on the blockchain will be hashed and referred in code of a Smart Contract generated by the Token Issuer. \n', '\n', '1. SALE OF THE TOKENIZED RIGHT. \n', '\n', '1.1. The Token Issuer hereby agrees to issue 1000000 Token(s) at the price of as .1 ether 2017-12-06 on the blockchain of the Token \n', '\n', 'Issuer’s choice (Ethereum). \n', '\n', '1.2  The Token Issuer hereby reserves the right to issue more tokens dependent on market demand.\n', '\n', '2. TOKEN BUYER’S PAYMENT AS CONDITION PRECEDENT. \n', '\n', '2.1. Token Buyer’s (defined in Section 14) payment for the Token(s) issued by Token Issuer under Section 1 is a condition precedent to \n', '\n', 'the formation of this Agreement. There will no binding Agreement until the payment from the Token Buyer is appeared in the Token \n', '\n', 'Issuer’s ethereum-wallet account. \n', '\n', '2.2. Likewise, there will be no binding agreement with any subsequent token buyer unless the payment for the Token created hereunder \n', '\n', 'made to the Token Holder at the moment of selling the Token. \n', '\n', '3. SMART CONTRACT. For the purpose of recording the ownership of the Company Equity Right created under the Agreement P003_25793, \n', '\n', 'Token Issuer generates a Smart Contract. This Smart Contract facilitates the direct transfer of the Company Equity Right created to an \n', '\n', 'individual or an entity that makes the payment for the Token representing the ownership of the Company Equity Right created under the \n', '\n', 'Agreement K003-2017 (the “Token Holder”). \n', '\n', '4. TOKEN HOLDER’S RIGHT. \n', '\n', '4.1. Subject to the Agreement P003_25793, all Token Holder(s) will be granted the right to set a new price for the purchased token \n', '\n', 'hereunder, provided that he/she cannot interfere or enforce in the Company Equity Owner’s decision regarding the Company Equity \n', '\n', 'subject to the Agreement P003_25793. \n', '\n', '4.2. Subject to the Agreement P003_25793, Token Holder(s)’s Company Equity Right does not create any type of a lien on the Company \n', '\n', 'Equity subject to the Agreement P003_25793. Token Holder’s Company Equity Right will be limited to the Right to claim the amount of \n', '\n', 'the Company Equity Income promised by the Company Equity Owner to Token Issuer under the Agreement P003_25793. \n', '\n', '5. RIGHT OWNER’S WARRANTIES AND DUTIES. Token Issuer and subsequent Token Holder hereby represent and warrant that, to the best of \n', '\n', 'his/her knowledge, he/she is the sole lawful owner of the tokenized Company Equity Right created under the Agreement P003_25793 and \n', '\n', 'free and clear of any liens and encumbrances except the ones disclosed to Token Issuer from the Company Equity Owner under the \n', '\n', 'Agreement P003_25793. Token Issuer and each subsequent Token Holder(s) have full right, power and authority to sell and transfer \n', '\n', 'his/her Right created under the Agreement P003_25793. Token Issuer and each subsequent Token Holder also warrant that he/she does not \n', '\n', 'currently know of and has no reason to know of any third party claim to any right, title, or use of the Right created under the \n', '\n', 'Agreement P003_25793 except the ones disclosed to Token Issuer from the Company Equity Owner under the Agreement P003_25793. Token \n', '\n', 'Issuer and each subsequent Token Holder did not and will not execute any agreement in conflict with this Agreement. Once a token \n', '\n', 'purchaser makes the full payment pursuant to Section 1, Token Issuer will take any actions that may be necessary or desirable to \n', '\n', 'protect and perfect the Purchaser’s Company Equity Right created under the Agreement P003_25793. \n', '\n', '6. ASSUMPTION OF RISK. \n', '\n', 'Each Token Holder bears the risk of loss when purchasing a Token representing the ownership of the Company Equity Right created under \n', '\n', 'the Agreement P003_25793. Token Issuer will not be responsible for and will not be liable for any loss arising from: (a) failure or \n', '\n', 'malfunction of hardware, software, server, and internet connections; (b) malicious software introduction; (c) the third party may \n', '\n', 'obtain unauthorized access to information stored within buyer’s account, including, but not limited to Buyer’s storage address and \n', '\n', 'private key; (d) forgotten passwords; and (e) incorrectly constructed transactions or mistyped account address. \n', '\n', '7. DISCLAIMER.\n', '\n', 'This Tokenized Company Equity Right subject to the Agreement P003_25793 is not a consumer good and sold on an “as is” and \n', '\n', '“as-available” basis. Token Holder(s) bears the entire risk, Token Issuer sells the tokenized Company Equity Right to Token Holder(s) \n', '\n', 'without any warranty of fitness for a particular purpose, and Token Holder(s) acknowledges that no warrant of fitness could be offered\n', '\n', 'because of the many future technical and legal uncertainties regarding the Tokenized Company Equity Right. \n', '\n', '8. TAX.\n', '\n', 'Token Issuer is not responsible for any taxes or any other costs related to purchasing the Tokenized Company Equity Right created \n', '\n', 'under the Agreement P003_25793. \n', '\n', '9. NO DAMAGES.\n', '\n', 'Token Issuer will never be liable to Token Holder(s) for consequential and any kind of damages, including but not limited to lost \n', '\n', 'profits. \n', '\n', '10. MARKET RISK.\n', '\n', 'All Token Holder(s) understands that this Tokenized Company Equity Right is a new and relatively untested exchange medium. Token \n', '\n', 'Holder(s) therefore understands that Token Issuer cannot predict how the value of the Tokenized Right will change, the consumer \n', '\n', 'demand for the Tokenized Right, technical difficulties in or modification to the peer-to-peer blockchain network, change of \n', '\n', 'regulations, and all other obstacles that a peer-to-peer blockchain network might face. All Token Holder(s) affirmatively represents \n', '\n', 'that he/she is a sophisticated blockchain users and therefore knowingly assumes all known and unknown risk of loss. All Token Holder(s)\n', '\n', 'has not recourse whatsoever against Token Issuer for damages or liability suffered by Token Holder(s) due to the market condition or \n', '\n', 'whatsoever causes. \n', '\n', '11. RISK OF FINANCIAL REGULATION.\n', '\n', 'All Token Holder(s) understands that the Tokenized Company Equity Right is a relatively new technology and no one can predict how the \n', '\n', 'government for each country may apply and enforce the existing laws or regulate the Tokenized Right or other peer-to-peer blockchain \n', '\n', 'based exchange technologies in the future. All Token Holder(s) understands that there is a high level of uncertainty, and all Token \n', '\n', 'Holder(s) assumes that all financial regulatory risk inherent in operating and transferring the Tokenized Right. \n', '\n', 'All Token Holder(s) has no recourse whatsoever against Token Issuer for damages, civil and criminal, suffered by each Token Holder(s) \n', '\n', 'due to regulatory enforcement. Token Issuer does not and cannot warrant that the exercise or transfer of the Tokenized Company Equity \n', '\n', 'Right is legal in all specific jurisdiction of each country. Token Issuer has not duty to advise or warn to each Token Holder(s) and \n', '\n', 'each Token Holder(s) will not advise or warn Token Issuer about any particular legal or regulatory requirement(s). Each Token Holder(s)\n', '\n', 'is solely obligated to understand the laws and regulations of its local jurisdiction before exercising, selling, or purchasing the \n', '\n', 'Tokenized Right, and Token Holder(s) is solely responsible for any of its actions that may be unlawful. \n', '\n', '12. DEFINITIONS. \n', '\n', '“Tokenized Right to Company Equity Revenue” means a digitized portion or unit of the syndicated ownership of the Company Equity Right \n', '\n', 'created under the Agreement P003_25793. “Token Holder(s)” means a buyer(s) of the tokenized Right representing an ownership of the \n', '\n', 'Company Equity Right through the Smart Contract created by the Token Issuer hereunder. “Smart Contract” means terms and conditions \n', '\n', 'for a legally effective Instrument written in programming language or asset protocol into the blockchain of Token Issuer’s choice. \n', '\n', '“Token Buyer” means that a party (an individual, legal entity, or authorized person representing an organization) that intends to buy \n', '\n', 'the Tokenized Company Equity Right initially issued by Token Issuer hereunder. \n', '\n', '13. DISPUTE RESOLTUION.\n', '\n', 'Informal Resolution. If either Token Issuer or Token Holder has any concerns regarding a breach under this Agreement, the complaining \n', '\n', 'party must first notify the other and allow the other party at least 30 days to remedy the claimed breach. Binding Arbitration. Any \n', '\n', 'dispute arising out of or relating to this Agreement, or the breach thereof, shall finally settled under the Rules of Arbitration of \n', '\n', 'the International Chamber of Commerce by one or three arbitrator, and judgement upon the award rendered the arbitrators may be \n', '\n', 'entered in a court in United States jurisdiction. The arbitration will be conducted in the English language, in accordance with the \n', '\n', 'international Arbitration Rules of the United States Commercial Arbitration Board. \n', '\n', '14. MISCELLANEOUS.\n', '\n', '14.1. No Conditions to Effectiveness; Entire Agreement. There are no conditions to the effectiveness of this Agreement. This Agreement \n', '\n', 'contains the entire agreement and understanding of the Parties hereto, and supersedes any prior agreements or understandings between \n', '\n', 'or among the Parties hereto, which respect to the subject matter hereof. \n', '\n', '14.2. Governing Law. This Agreement, and the right of the Parties hereto, shall be governed by, construed and enforced in accordance \n', '\n', 'with the laws of United States regardless of the conflict of laws principle. Any action in respect of, or concerning, this Agreement \n', '\n', 'shall be litigated solely in United States and both Parties consent to jurisdiction of the person and venue solely in United States . \n', '\n', '14.3. Amendment and Waivers. This Agreement may be amended only by an instrument in writing signed by the Parties hereto. No waivers \n', '\n', 'of or exceptions to any term, condition or provision of this Agreement, in any one or more instances, shall be deemed to be, or \n', '\n', 'construed as, a further or continuing waiver of any such term, condition or provision. \n', '\n', '14.4. Severability. If any provision of this Agreement is held to be invalid or unenforceable, the validity and enforceability of the \n', '\n', 'remaining provisions of this Agreement shall not be affected thereby. \n', '\n', '14.5. Each party, in entering into this Agreement, acts as an independent party and nothing herein shall be construed to create a \n', '\n', 'partnership or joint venture between the Parties or to constitute agency of an sort. Neither party shall have the authority to bind the other. \n', '\n', '14.6. Force Majeure. A party is not liable for failure to perform the party’s obligations if such failure is as a result of Acts of \n', '\n', 'God including: fire, flood, earthquake, storm, hurricane or other natural disaster), war, invasion, act of foreign enemies, \n', '\n', 'hostilities (regardless of whether war is declared), civil war, rebellion, revolution, insurrection, military or usurped power or \n', '\n', 'confiscation, terrorist activities, nationalization, government sanction, or government prohibition or regulation preventing the \n', '\n', 'trade of blockchain-backed token(s). \n', '\n', 'IN WITNESS WHEREOF, the Token Issuer, Qwoyn Digital Investments, LLC hereto have executed this Agreement as of the date first written \n', '\n', 'above. \n', '\n', 'Token Issuer/Token Holder\n', '\n', 'Daniel Pittman, CEO\n', '_____________________________ \n', 'Qwoyn Digital Investments, LLC \n', '2017-12-06                                                                                                                          */\n', '\n', '\n', '/********************\n', ' * SMART CONTRACT   *\n', ' * CODE BEGINS HERE *\n', ' *******************/ \n', '\n', '/*ERC20*/         \n', 'pragma solidity ^0.4.18;\n', ' \n', '//TOKEN SECURITY//\n', ' \n', ' /**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', '\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', ' \n', ' /**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', ' \n', ' /*\n', ' * @title MerkleProof\n', ' * @dev Merkle proof verification\n', ' * @note Based on https://github.com/ameensol/merkle-tree-solidity/blob/master/src/MerkleProof.sol\n', ' */\n', 'library MerkleProof {\n', '  /*\n', '   * @dev Verifies a Merkle proof proving the existence of a leaf in a Merkle tree. Assumes that each pair of leaves\n', '   * and each pair of pre-images is sorted.\n', '   * @param _proof Merkle proof containing sibling hashes on the branch from the leaf to the root of the Merkle tree\n', '   * @param _root Merkle root\n', '   * @param _leaf Leaf of Merkle tree\n', '   */\n', '  function verifyProof(bytes _proof, bytes32 _root, bytes32 _leaf) public pure returns (bool) {\n', '    // Check if proof length is a multiple of 32\n', '    if (_proof.length % 32 != 0) return false;\n', '\n', '    bytes32 proofElement;\n', '    bytes32 computedHash = _leaf;\n', '\n', '    for (uint256 i = 32; i <= _proof.length; i += 32) {\n', '      assembly {\n', '        // Load the current element of the proof\n', '        proofElement := mload(add(_proof, i))\n', '      }\n', '\n', '      if (computedHash < proofElement) {\n', '        // Hash(current computed hash + current element of the proof)\n', '        computedHash = keccak256(computedHash, proofElement);\n', '      } else {\n', '        // Hash(current element of the proof + current computed hash)\n', '        computedHash = keccak256(proofElement, computedHash);\n', '      }\n', '    }\n', '\n', '    // Check if the computed hash (root) is equal to the provided root\n', '    return computedHash == _root;\n', '  }\n', '}\n', '\n', ' /**\n', ' * @title Helps contracts guard agains rentrancy attacks.\n', ' * @author Remco Bloemen <remco@2p.com>\n', ' * @notice If you mark a function `nonReentrant`, you should also\n', ' * mark it `external`.\n', ' */\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private rentrancy_lock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!rentrancy_lock);\n', '    rentrancy_lock = true;\n', '    _;\n', '    rentrancy_lock = false;\n', '  }\n', '\n', '}\n', '\n', '//Cornerstone TOKEN//\n', '\n', '/*Contract to Declare Owner*/\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/* Interfaces */\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', '//Cornerstone Contract//\n', '\n', '/* Cornerstone Token Contract */\n', 'contract Cornerstone is owned{\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    \n', '    // This creates an arroy for accounts to freeze\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '    // This notifies clients of frozen account\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function Cornerstone(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '    }\n', '    \n', '    function freezeAccount(address target, bool freeze) onlyOwner public{\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '    \n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        // Check if sender is frozen\n', '        require(!frozenAccount[_from]);        \n', '        // Check if recipient is frozen\n', '        require(!frozenAccount[_to]);                      \n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', "        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '        totalSupply -= _value;                              // Update totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '/* ADVANCED TOKEN  */\n', '\n', 'contract MyAdvancedToken is owned, Cornerstone {\n', '\n', '    uint256 public sellPrice;\n', '    uint256 public buyPrice;\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function MyAdvancedToken(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) Cornerstone(initialSupply, tokenName, tokenSymbol) public {}\n', '\n', '    /* Internal transfer, only can be called by this contract */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n', '        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n', '        require(!frozenAccount[_from]);                     // Check if sender is frozen\n', '        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n', '        balanceOf[_from] -= _value;                         // Subtract from the sender\n', '        balanceOf[_to] += _value;                           // Add the same to the recipient\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /// @notice Create `mintedAmount` tokens and send it to `target`\n', '    /// @param target Address to receive the tokens\n', '    /// @param mintedAmount the amount of tokens it will receive\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        Transfer(0, this, mintedAmount);\n', '        Transfer(this, target, mintedAmount);\n', '    }\n', '\n', '    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '    /// @param target Address to be frozen\n', '    /// @param freeze either to freeze it or not\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\n', '    /// @param newSellPrice Price the users can sell to the contract\n', '    /// @param newBuyPrice Price users can buy from the contract\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '\n', '    /// @notice Buy tokens from contract by sending ether\n', '    function buy() payable public {\n', '        uint amount = msg.value / buyPrice;               // calculates the amount\n', '        _transfer(this, msg.sender, amount);              // makes the transfers\n', '    }\n', '\n', '    /// @notice Sell `amount` tokens to contract\n', '    /// @param amount amount of tokens to be sold\n', '    function sell(uint256 amount) public {\n', '        require(this.balance >= amount * sellPrice);      // checks if the contract has enough ether to buy\n', '        _transfer(msg.sender, this, amount);              // makes the transfers\n', "        msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It's important to do this last to avoid recursion attacks\n", '    }\n', '}']