['pragma solidity ^0.4.15;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20 {\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    \n', '}\n', '\n', '\n', 'contract BasicToken is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool) {\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] = balances[msg.sender].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '\n', '    /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '}\n', '\n', '\n', '    /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '\n', '}\n', '\n', 'contract HRAToken is BasicToken {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    string public name = "HERA";                                //name of the token\n', '    string public symbol = "HRA";                               //symbol of the token\n', '    uint8 public decimals = 10;                                 //decimals\n', '    uint256 public initialSupply = 30000000 * 10**10;           //total supply of Tokens\n', '\n', '    //variables\n', '    uint256 public totalAllocatedTokens;                         //variable to keep track of funds allocated\n', '    uint256 public tokensAllocatedToCrowdFund;                   //funds allocated to crowdfund\n', '\n', '    //addresses\n', '    address public founderMultiSigAddress;                      //Multi sign address of founder\n', '    address public crowdFundAddress;                            //Address of crowdfund contract\n', '\n', '    //events\n', '    event ChangeFoundersWalletAddress(uint256 _blockTimeStamp, address indexed _foundersWalletAddress);\n', '    \n', '    //modifierss\n', '\n', '    modifier nonZeroAddress(address _to){\n', '        require(_to != 0x0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyFounders(){\n', '        require(msg.sender == founderMultiSigAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlyCrowdfund(){\n', '        require(msg.sender == crowdFundAddress);\n', '        _;\n', '    }\n', '\n', '    //creation of token contract\n', '    function HRAToken(address _crowdFundAddress, address _founderMultiSigAddress) {\n', '        crowdFundAddress = _crowdFundAddress;\n', '        founderMultiSigAddress = _founderMultiSigAddress;\n', '\n', '        // Assigned balances to crowdfund\n', '        balances[crowdFundAddress] = initialSupply;\n', '    }\n', '\n', '    //function to keep track of the total token allocation\n', '    function changeTotalSupply(uint256 _amount) onlyCrowdfund {\n', '        totalAllocatedTokens += _amount;\n', '    }\n', '\n', '    //function to change founder Multisig wallet address\n', '    function changeFounderMultiSigAddress(address _newFounderMultiSigAddress) onlyFounders nonZeroAddress(_newFounderMultiSigAddress) {\n', '        founderMultiSigAddress = _newFounderMultiSigAddress;\n', '        ChangeFoundersWalletAddress(now, founderMultiSigAddress);\n', '    }\n', '\n', '}\n', '\n', 'contract HRACrowdfund {\n', '    \n', '    using SafeMath for uint256;\n', '\n', '    HRAToken public token;                                    // Token contract reference\n', '    \n', '    address public founderMulSigAddress;                      // Founders multisig address\n', '    uint256 public exchangeRate;                              // Use to find token value against one ether\n', '    uint256 public ethRaised;                                 // Counter to track the amount raised\n', '    bool private tokenDeployed = false;                       // Flag to track the token deployment -- only can be set once\n', '    uint256 public tokenSold;                                 // Counter to track the amount of token sold\n', '    uint256 public manualTransferToken;                       // Counter to track the amount of manually tranfer token\n', '    uint256 public tokenDistributeInDividend;                 // Counter to track the amount of token shared to investors\n', '    uint8 internal EXISTS = 1;                                // Flag to track the existing investors\n', '    uint8 internal NEW = 0;                                   // Flag to track the non existing investors\n', '\n', '    address[] public investors;                               // Investors address \n', '\n', '    mapping (address => uint8) internal previousInvestor;\n', '    //events\n', '    event ChangeFounderMulSigAddress(address indexed _newFounderMulSigAddress , uint256 _timestamp);\n', '    event ChangeRateOfToken(uint256 _timestamp, uint256 _newRate);\n', '    event TokenPurchase(address indexed _beneficiary, uint256 _value, uint256 _amount);\n', '    event AdminTokenSent(address indexed _to, uint256 _value);\n', '    event SendDividend(address indexed _to , uint256 _value, uint256 _timestamp);\n', '    \n', '    //Modifiers\n', '    modifier onlyfounder() {\n', '        require(msg.sender == founderMulSigAddress);\n', '        _;\n', '    }\n', '\n', '    modifier nonZeroAddress(address _to) {\n', '        require(_to != 0x0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyPublic() {\n', '        require(msg.sender != founderMulSigAddress);\n', '        _;\n', '    }\n', '\n', '    modifier nonZeroEth() {\n', '        require(msg.value != 0);\n', '        _;\n', '    }\n', '\n', '    modifier isTokenDeployed() {\n', '        require(tokenDeployed == true);\n', '        _;\n', '    }\n', '    \n', '    // Constructor to initialize the local variables \n', '    function HRACrowdfund(address _founderMulSigAddress) {\n', '        founderMulSigAddress = _founderMulSigAddress;\n', '        exchangeRate = 320;\n', '    }\n', '   \n', '   // Attach the token contract, can only be done once   \n', '    function setToken(address _tokenAddress) nonZeroAddress(_tokenAddress) onlyfounder {\n', '         require(tokenDeployed == false);\n', '         token = HRAToken(_tokenAddress);\n', '         tokenDeployed = true;\n', '    }\n', '    \n', '    // Function to change the exchange rate\n', '    function changeExchangeRate(uint256 _rate) onlyfounder returns (bool) {\n', '        if(_rate != 0){\n', '            exchangeRate = _rate;\n', '            ChangeRateOfToken(now,_rate);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    \n', '    // Function to change the founders multisig address\n', '    function ChangeFounderWalletAddress(address _newAddress) onlyfounder nonZeroAddress(_newAddress) {\n', '         founderMulSigAddress = _newAddress;\n', '         ChangeFounderMulSigAddress(founderMulSigAddress,now);\n', '    }\n', '\n', '    // Buy token function \n', '    function buyTokens (address _beneficiary)\n', '    onlyPublic\n', '    nonZeroAddress(_beneficiary)\n', '    nonZeroEth\n', '    isTokenDeployed\n', '    payable\n', '    public\n', '    returns (bool)\n', '    {\n', '        uint256 amount = (msg.value.mul(exchangeRate)).div(10 ** 8);\n', '       \n', '        require(checkExistence(_beneficiary));\n', '\n', '        if (token.transfer(_beneficiary, amount)) {\n', '            fundTransfer(msg.value);\n', '            previousInvestor[_beneficiary] = EXISTS;\n', '            ethRaised = ethRaised.add(msg.value);\n', '            tokenSold = tokenSold.add(amount);\n', '            token.changeTotalSupply(amount); \n', '            TokenPurchase(_beneficiary, msg.value, amount);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    // Function to send token to user address\n', '    function sendToken (address _to, uint256 _value)\n', '    onlyfounder \n', '    nonZeroAddress(_to) \n', '    isTokenDeployed\n', '    returns (bool)\n', '    {\n', '        if (_value == 0)\n', '            return false;\n', '\n', '        require(checkExistence(_to));\n', '        \n', '        uint256 _tokenAmount= _value * 10 ** uint256(token.decimals());\n', '\n', '        if (token.transfer(_to, _tokenAmount)) {\n', '            previousInvestor[_to] = EXISTS;\n', '            manualTransferToken = manualTransferToken.add(_tokenAmount);\n', '            token.changeTotalSupply(_tokenAmount); \n', '            AdminTokenSent(_to, _tokenAmount);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    \n', '    // Function to check the existence of investor\n', '    function checkExistence(address _beneficiary) internal returns (bool) {\n', '         if (token.balanceOf(_beneficiary) == 0 && previousInvestor[_beneficiary] == NEW) {\n', '            investors.push(_beneficiary);\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    // Function to calculate the percentage of token share to the existing investors\n', '    function provideDividend(uint256 _dividend) \n', '    onlyfounder \n', '    isTokenDeployed\n', '    {\n', '        uint256 _supply = token.totalAllocatedTokens();\n', '        uint256 _dividendValue = _dividend.mul(10 ** uint256(token.decimals()));\n', '        for (uint8 i = 0 ; i < investors.length ; i++) {\n', '            \n', '            uint256 _value = ((token.balanceOf(investors[i])).mul(_dividendValue)).div(_supply);\n', '            dividendTransfer(investors[i], _value);\n', '        }\n', '    }\n', '    \n', '    // Function to send the calculated tokens amount to the investor\n', '    function dividendTransfer(address _to, uint256 _value) private {\n', '        if (token.transfer(_to,_value)) {\n', '            token.changeTotalSupply(_value);\n', '            tokenDistributeInDividend = tokenDistributeInDividend.add(_value);\n', '            SendDividend(_to,_value,now);\n', '        }\n', '    }\n', '    \n', '    // Function to transfer the funds to founders account\n', '    function fundTransfer(uint256 _funds) private {\n', '        founderMulSigAddress.transfer(_funds);\n', '    }\n', '    \n', '    // Crowdfund entry\n', '    // send ether to the contract address\n', '    function () payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '}']