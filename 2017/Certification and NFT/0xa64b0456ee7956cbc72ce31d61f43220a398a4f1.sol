['contract Private_Fund{\n', '    \n', '    address public beneficiary;\n', '    uint public amountRaised;\n', '    uint256 public start;\n', '    uint256 public deadline;\n', '    address public creator;\n', '    bool public deadline_status = false;\n', '    uint256 public minAmount = 1 ether;\n', '    \n', '    Funder[] public funders;\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '    \n', '    /* data structure to hold information about campaign contributors */\n', '    struct Funder {\n', '        address addr;\n', '        uint amount;\n', '    }\n', '    \n', '    modifier onlyCreator() {\n', '        if (creator != msg.sender) {\n', '            throw;\n', '        }\n', '        _;\n', '     }\n', '     \n', '    modifier afterDeadline() { if (now >= deadline) _;}\n', '    \n', '    function check_deadline() {\n', '      if (now >= deadline) deadline_status = true;\n', '      else                 deadline_status = false;\n', '    }\n', '    \n', '    function deadline_modify(uint256 _start ,uint256 _duration) onlyCreator {\n', '       start = _start;\n', '       deadline = _start + _duration * 1 days; \n', '    }\n', '    \n', '    function beneficiary_modify  (address _beneficiary) onlyCreator{\n', '        beneficiary = _beneficiary;\n', '    }\n', '    \n', '    /*  at initialization, setup the owner */\n', '    function Private_Fund(address _creator, uint256 _duration) {\n', '        creator = _creator;\n', '        beneficiary = 0xfaC1D48E61353D49D8E234C27943A7b58cd94FD6;\n', '        start = now;\n', '        deadline = start + _duration * 1 days;\n', '        //deadline = start + _duration * 1 minutes;\n', '    }   \n', '    \n', '    /* The function without name is the default function that is called whenever anyone sends funds to a contract */\n', '    function () payable {\n', '        if(now < start) throw;\n', '        if(now >= deadline) throw;\n', '        if(msg.value < minAmount) throw;\n', '        \n', '        uint amount = msg.value;\n', '        funders[funders.length++] = Funder({addr: msg.sender, amount: amount});\n', '        amountRaised += amount;\n', '        FundTransfer(msg.sender, amount, true);\n', '    }\n', '        \n', '\n', '    /* checks if the goal or time limit has been reached and ends the campaign */\n', '    function withdraw_privatefund(bool _withdraw_en) afterDeadline onlyCreator{\n', '        if (_withdraw_en){\n', '            beneficiary.send(amountRaised);\n', '            FundTransfer(beneficiary, amountRaised, false);\n', '        } else {\n', '            FundTransfer(0, 11, false);\n', '            for (uint i = 0; i < funders.length; ++i) {\n', '              funders[i].addr.send(funders[i].amount);  \n', '              FundTransfer(funders[i].addr, funders[i].amount, false);\n', '            }               \n', '        }\n', '    }\n', '    \n', '    function kill() onlyCreator{\n', '      suicide(beneficiary);\n', '    }\n', '}']