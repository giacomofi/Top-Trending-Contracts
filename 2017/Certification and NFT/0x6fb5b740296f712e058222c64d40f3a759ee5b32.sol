['pragma solidity ^0.4.18;\n', '\n', '// File: src/Token/FallbackToken.sol\n', '\n', '/**\n', ' * @title FallbackToken token\n', ' *\n', ' * @dev add ERC223 standard ability\n', ' **/\n', 'contract FallbackToken {\n', '\n', '  function isContract(address _addr) internal constant returns (bool) {\n', '    uint length;\n', '    _addr = _addr;\n', '    assembly {length := extcodesize(_addr)}\n', '    return (length > 0);\n', '  }\n', '}\n', '\n', '\n', 'contract Receiver {\n', '  function tokenFallback(address from, uint value) public;\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: src/Token/TrustaBitToken.sol\n', '\n', '/**\n', ' * @title SimpleToken\n', ' * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\n', ' * Note they can later distribute these tokens as they wish using `transfer` and other\n', ' * `StandardToken` functions.\n', ' */\n', 'contract TrustaBitToken is MintableToken, FallbackToken {\n', '\n', '  string public constant name = "TrustaBits";\n', '\n', '  string public constant symbol = "TAB";\n', '\n', '  uint256 public constant decimals = 18;\n', '\n', '  bool public released = false;\n', '\n', '  event Release();\n', '\n', '  modifier isReleased () {\n', '    require(mintingFinished);\n', '    require(released);\n', '    _;\n', '  }\n', '\n', '  /**\n', '    * Fix for the ERC20 short address attack\n', '    * http://vessenes.com/the-erc20-short-address-attack-explained/\n', '    */\n', '  modifier onlyPayloadSize(uint size) {\n', '    if (msg.data.length != size + 4) {\n', '      revert();\n', '    }\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor that gives msg.sender all of existing tokens.K\n', '   */\n', '  /// function TrustaBitsToken() public {}\n', '\n', '  /**\n', '   * @dev Fallback method will buyout tokens\n', '   */\n', '  function() public payable {\n', '    revert();\n', '  }\n', '\n', '  function release() onlyOwner public returns (bool) {\n', '    require(mintingFinished);\n', '    require(!released);\n', '    released = true;\n', '    Release();\n', '\n', '    return true;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public isReleased onlyPayloadSize(2 * 32) returns (bool) {\n', '    require(super.transfer(_to, _value));\n', '\n', '    if (isContract(_to)) {\n', '      Receiver(_to).tokenFallback(msg.sender, _value);\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public isReleased returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public isReleased returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public isReleased onlyPayloadSize(2 * 32) returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public isReleased returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '\n', '}\n', '\n', '// File: src/Crowdsale/MilestoneCrowdsale.sol\n', '\n', 'contract MilestoneCrowdsale {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  /* Number of available tokens */\n', '  uint256 public constant AVAILABLE_TOKENS = 1e9; //1 billion\n', '\n', '  /* Total Tokens available in PreSale */\n', '  uint256 public constant AVAILABLE_IN_PRE_SALE = 40e6; // 40,000,000\n', '\n', '  /* Total Tokens available in Main ICO */\n', '  uint256 public constant AVAILABLE_IN_MAIN = 610e6; // 610,000,000;\n', '\n', '  /* Early Investors token available */\n', '  uint256 public constant AVAILABLE_FOR_EARLY_INVESTORS = 100e6; // 100,000,000;\n', '\n', '  /* Pre-Sale Start Date */\n', '  uint public preSaleStartDate;\n', '\n', '  /* Pre-Sale End Date */\n', '  uint public preSaleEndDate;\n', '\n', '  /* Main Token Sale Date */\n', '  uint public mainSaleStartDate;\n', '\n', '  /* Main Token Sale End */\n', '  uint public mainSaleEndDate;\n', '\n', '  struct Milestone {\n', '    uint start; // UNIX timestamp\n', '    uint end; // UNIX timestamp\n', '    uint256 bonus;\n', '    uint256 price;\n', '  }\n', '\n', '  Milestone[] public milestones;\n', '\n', '  uint256 public rateUSD; // (cents)\n', '\n', '  uint256 public earlyInvestorTokenRaised;\n', '  uint256 public preSaleTokenRaised;\n', '  uint256 public mainSaleTokenRaised;\n', '\n', '\n', '  function initMilestones(uint _rate, uint _preSaleStartDate, uint _preSaleEndDate, uint _mainSaleStartDate, uint _mainSaleEndDate) internal {\n', '    rateUSD = _rate;\n', '    preSaleStartDate = _preSaleStartDate;\n', '    preSaleEndDate = _preSaleEndDate;\n', '    mainSaleStartDate = _mainSaleStartDate;\n', '    mainSaleEndDate = _mainSaleEndDate;\n', '\n', '    /**\n', '     * Early investor Milestone\n', '     * Prise: $0.025 USD (2.5 cent)\n', '     * No bonuses\n', '     */\n', '    uint256 earlyInvestorPrice = ((25 * 1 ether) / (rateUSD * 10));\n', '    milestones.push(Milestone(now, preSaleStartDate, 0, earlyInvestorPrice));\n', '\n', '    /**\n', '     * Pre-Sale Milestone\n', '     * Prise: $0.05 USD (5 cent)\n', '     * Bonus: 20%\n', '     */\n', '    uint256 preSalePrice = usdToEther(5);\n', '    milestones.push(Milestone(preSaleStartDate, preSaleEndDate, 20, preSalePrice));\n', '\n', '    /**\n', '     * Main Milestones\n', '     * Prise: $0.10 USD (10 cent)\n', '     * Week 1 Bonus: 15%\n', '     * Week 2 Main Token Sale Bonus: 10%\n', '     * Week 3 Main Token Sale Bonus: 5%\n', '     */\n', '    uint256 mainSalePrice = usdToEther(10);\n', '    uint mainSaleStartDateWeek1 = mainSaleStartDate + 1 weeks;\n', '    uint mainSaleStartDateWeek3 = mainSaleStartDate + 3 * 1 weeks;\n', '    uint mainSaleStartDateWeek2 = mainSaleStartDate + 2 * 1 weeks;\n', '\n', '    milestones.push(Milestone(mainSaleStartDate, mainSaleStartDateWeek1, 15, mainSalePrice));\n', '    milestones.push(Milestone(mainSaleStartDateWeek1, mainSaleStartDateWeek2, 10, mainSalePrice));\n', '    milestones.push(Milestone(mainSaleStartDateWeek2, mainSaleStartDateWeek3, 5, mainSalePrice));\n', '    milestones.push(Milestone(mainSaleStartDateWeek3, _mainSaleEndDate, 0, mainSalePrice));\n', '  }\n', '\n', '  function usdToEther(uint256 usdValue) public view returns (uint256) {\n', '    // (usdValue * 1 ether / rateUSD)\n', '    return usdValue.mul(1 ether).div(rateUSD);\n', '  }\n', '\n', '  function getCurrentMilestone() internal view returns (uint256, uint256) {\n', '    for (uint i = 0; i < milestones.length; i++) {\n', '      if (now >= milestones[i].start && now < milestones[i].end) {\n', '        var milestone = milestones[i];\n', '        return (milestone.bonus, milestone.price);\n', '      }\n', '    }\n', '\n', '    return (0, 0);\n', '  }\n', '\n', '  function getCurrentPrice() public view returns (uint256) {\n', '    var (, price) = getCurrentMilestone();\n', '\n', '    return price;\n', '  }\n', '\n', '  function getTokenRaised() public view returns (uint256) {\n', '    return mainSaleTokenRaised.add(preSaleTokenRaised.add(earlyInvestorTokenRaised));\n', '  }\n', '\n', '  function isEarlyInvestors() public view returns (bool) {\n', '    return now < preSaleStartDate;\n', '  }\n', '\n', '  function isPreSale() public view returns (bool) {\n', '    return now >= preSaleStartDate && now < preSaleEndDate;\n', '  }\n', '\n', '  function isMainSale() public view returns (bool) {\n', '    return now >= mainSaleStartDate && now < mainSaleEndDate;\n', '  }\n', '\n', '  function isEnded() public view returns (bool) {\n', '    return now >= mainSaleEndDate;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/RefundVault.sol\n', '\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  function RefundVault(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    Closed();\n', '    wallet.transfer(this.balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    RefundsEnabled();\n', '  }\n', '\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', '// File: src/Crowdsale/TrustaBitCrowdsale.sol\n', '\n', 'contract TrustaBitCrowdsale is MilestoneCrowdsale, Ownable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  /* Minimum contribution */\n', '  uint public constant MINIMUM_CONTRIBUTION = 3 ether;\n', '\n', '  /* Soft cap */\n', '  uint public constant softCapUSD = 3e6; //$3 Million USD\n', '  uint public softCap; //$3 Million USD in ETH\n', '\n', '  /* Hard Cap */\n', '  uint public constant hardCapUSD = 49e6; //$49 Million USD\n', '  uint public hardCap; //$49 Million USD in ETH\n', '\n', '  /* Advisory Bounty Team */\n', '  address public addressAdvisoryBountyTeam;\n', '  uint256 public constant tokenAdvisoryBountyTeam = 250e6;\n', '\n', '  address[] public investors;\n', '\n', '  TrustaBitToken public token;\n', '\n', '  address public wallet;\n', '\n', '  uint256 public weiRaised;\n', '\n', '  RefundVault public vault;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param investor who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed investor, uint256 value, uint256 amount);\n', '\n', '  modifier hasMinimumContribution() {\n', '    require(msg.value >= MINIMUM_CONTRIBUTION);\n', '    _;\n', '  }\n', '\n', '  function TrustaBitCrowdsale(address _wallet, address _token, uint _rate, uint _preSaleStartDate, uint _preSaleEndDate, uint _mainSaleStartDate, uint _mainSaleEndDate, address _AdvisoryBountyTeam) public {\n', '    require(_token != address(0));\n', '    require(_AdvisoryBountyTeam != address(0));\n', '    require(_rate > 0);\n', '    require(_preSaleStartDate > 0);\n', '    require(_preSaleEndDate > 0);\n', '    require(_preSaleEndDate > _preSaleStartDate);\n', '    require(_mainSaleStartDate > 0);\n', '    require(_mainSaleStartDate >= _preSaleEndDate);\n', '    require(_mainSaleEndDate > 0);\n', '    require(_mainSaleEndDate > _mainSaleStartDate);\n', '\n', '    wallet = _wallet;\n', '    token = TrustaBitToken(_token);\n', '    addressAdvisoryBountyTeam = _AdvisoryBountyTeam;\n', '\n', '    initMilestones(_rate, _preSaleStartDate, _preSaleEndDate, _mainSaleStartDate, _mainSaleEndDate);\n', '\n', '    softCap = usdToEther(softCapUSD.mul(100));\n', '    hardCap = usdToEther(hardCapUSD.mul(100));\n', '\n', '    vault = new RefundVault(wallet);\n', '  }\n', '\n', '  function investorsCount() public constant returns (uint) {\n', '    return investors.length;\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function() external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address investor) public hasMinimumContribution payable {\n', '    require(investor != address(0));\n', '    require(!isEnded());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    require(getCurrentPrice() > 0);\n', '\n', '    uint256 tokensAmount = calculateTokens(weiAmount);\n', '    require(tokensAmount > 0);\n', '\n', '    mintTokens(investor, weiAmount, tokensAmount);\n', '    increaseRaised(weiAmount, tokensAmount);\n', '\n', '    if (vault.deposited(investor) == 0) {\n', '      investors.push(investor);\n', '    }\n', '    // send ether to the fund collection wallet\n', '    vault.deposit.value(weiAmount)(investor);\n', '  }\n', '\n', '  function calculateTokens(uint256 weiAmount) internal view returns (uint256) {\n', '    if ((weiRaised.add(weiAmount)) > hardCap) return 0;\n', '\n', '    var (bonus, price) = getCurrentMilestone();\n', '\n', '    uint256 tokensAmount = weiAmount.div(price).mul(10 ** token.decimals());\n', '    tokensAmount = tokensAmount.add(tokensAmount.mul(bonus).div(100));\n', '\n', '    if (isEarlyInvestorsTokenRaised(tokensAmount)) return 0;\n', '    if (isPreSaleTokenRaised(tokensAmount)) return 0;\n', '    if (isMainSaleTokenRaised(tokensAmount)) return 0;\n', '    if (isTokenAvailable(tokensAmount)) return 0;\n', '\n', '    return tokensAmount;\n', '  }\n', '\n', '  function isEarlyInvestorsTokenRaised(uint256 tokensAmount) public view returns (bool) {\n', '    return isEarlyInvestors() && (earlyInvestorTokenRaised.add(tokensAmount) > AVAILABLE_FOR_EARLY_INVESTORS.mul(10 ** token.decimals()));\n', '  }\n', '\n', '  function isPreSaleTokenRaised(uint256 tokensAmount) public view returns (bool) {\n', '    return isPreSale() && (preSaleTokenRaised.add(tokensAmount) > AVAILABLE_IN_PRE_SALE.mul(10 ** token.decimals()));\n', '  }\n', '\n', '  function isMainSaleTokenRaised(uint256 tokensAmount) public view returns (bool) {\n', '    return isMainSale() && (mainSaleTokenRaised.add(tokensAmount) > AVAILABLE_IN_MAIN.mul(10 ** token.decimals()));\n', '  }\n', '\n', '  function isTokenAvailable(uint256 tokensAmount) public view returns (bool) {\n', '    return getTokenRaised().add(tokensAmount) > AVAILABLE_TOKENS.mul(10 ** token.decimals());\n', '  }\n', '\n', '  function increaseRaised(uint256 weiAmount, uint256 tokensAmount) internal {\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    if (isEarlyInvestors()) {\n', '      earlyInvestorTokenRaised = earlyInvestorTokenRaised.add(tokensAmount);\n', '    }\n', '\n', '    if (isPreSale()) {\n', '      preSaleTokenRaised = preSaleTokenRaised.add(tokensAmount);\n', '    }\n', '\n', '    if (isMainSale()) {\n', '      mainSaleTokenRaised = mainSaleTokenRaised.add(tokensAmount);\n', '    }\n', '  }\n', '\n', '  function mintTokens(address investor, uint256 weiAmount, uint256 tokens) internal {\n', '    token.mint(investor, tokens);\n', '    TokenPurchase(investor, weiAmount, tokens);\n', '  }\n', '\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(isEnded());\n', '\n', '    if (softCapReached()) {\n', '      vault.close();\n', '      mintAdvisoryBountyTeam();\n', '      token.finishMinting();\n', '    }\n', '    else {\n', '      vault.enableRefunds();\n', '      token.finishMinting();\n', '    }\n', '\n', '    token.transferOwnership(owner);\n', '\n', '    isFinalized = true;\n', '    Finalized();\n', '  }\n', '\n', '  function mintAdvisoryBountyTeam() internal {\n', '    mintTokens(addressAdvisoryBountyTeam, 0, tokenAdvisoryBountyTeam.mul(10 ** token.decimals()));\n', '  }\n', '\n', '  // if crowdsale is unsuccessful, investors can claim refunds here\n', '  function claimRefund() public {\n', '    require(isFinalized);\n', '    require(!softCapReached());\n', '\n', '    vault.refund(msg.sender);\n', '  }\n', '\n', '  function refund() onlyOwner public {\n', '    require(isFinalized);\n', '    require(!softCapReached());\n', '\n', '    for (uint i = 0; i < investors.length; i++) {\n', '      address investor = investors[i];\n', '      if (vault.deposited(investor) != 0) {\n', '        vault.refund(investor);\n', '      }\n', '    }\n', '  }\n', '\n', '  function softCapReached() public view returns (bool) {\n', '    return weiRaised >= softCap;\n', '  }\n', '\n', '  function hardCapReached() public view returns (bool) {\n', '    return weiRaised >= hardCap;\n', '  }\n', '\n', '  function destroy() onlyOwner public {\n', '    selfdestruct(owner);\n', '  }\n', '}']