['pragma solidity ^0.4.18;\n', '\n', '/*\n', '    DonationForwarder v1.0\n', '    \n', "    When you're feeling generous, you can send ether to this contract to have\n", '     it forwarded to someone else.\n', '     \n', '    You can buy or override a previous redirect by paying a higher price (note:\n', '     there are NO refunds if your redirect is overriden!).\n', '     \n', '    You can purchase a redirect to your address by using the buyRedirect\n', '     function (see the code).\n', '     \n', '    If you want the contract to forward ether to another address, use\n', '     buyRedirectFor instead.\n', '     \n', '    Warning: the recommended gas limit for sending ether to this contract is\n', '     at least 40000.\n', '    \n', '    The starting price is defined below.\n', '    \n', '    Public Domain, made by SopaXorzTaker.\n', '*/\n', '\n', 'contract DonationForwarder {\n', '    address owner;\n', '    address redirect;\n', '    uint lastPrice;\n', '    \n', '    uint startingPrice = 0.01 ether;\n', '\n', '\n', '    modifier onlyOwner {\n', '        require (msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    event RedirectChanged (\n', '        address _newRedirect,\n', '        uint _lastPrice\n', '    );\n', '    \n', '    function DonationForwarder() public {\n', "        // The default redirect address will be the contract creator's.\n", '        owner = msg.sender;\n', '        redirect = owner;\n', '        \n', '        // The starting price.\n', '        lastPrice = startingPrice;\n', '    }\n', '    \n', '    function () payable public {\n', '        // Redirect the funds to the current redirect address.\n', '        redirect.transfer(msg.value);\n', '    }\n', '    \n', '    function buyRedirect() payable public {\n', '        // Buy a redirect for the current sender.\n', '        buyRedirectFor(msg.sender);\n', '    }\n', '    \n', '    function buyRedirectFor(address newRedirect) payable public {\n', '        // Any new redirect is going to cost more than the previous.\n', '        // One can pay a higher price to ensure it would be harder to change.\n', '        require(msg.value > lastPrice);\n', '        \n', '        // The new redirect address must be different from the previous one.\n', '        require(newRedirect != redirect);\n', '        \n', '        // Send the funds collected to the contract owner.\n', '        owner.transfer(msg.value);\n', '            \n', '        // Set the new redirect address to the one specified.\n', '        redirect = newRedirect;\n', '        \n', '        // Update the last price.\n', '        lastPrice = msg.value;\n', '        \n', '        // Create an event to indicate that.\n', '        RedirectChanged(newRedirect, lastPrice);\n', '    }\n', '    \n', '    function kill() public onlyOwner {\n', '        // An ability for the owner to kill the contract if necessary.\n', '        selfdestruct(owner);\n', '    }\n', '}']