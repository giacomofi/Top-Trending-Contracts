['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Claimable is Ownable {\n', '    address public pendingOwner;\n', '\n', '    /**\n', '     * @dev Modifier throws if called by any account other than the pendingOwner.\n', '     */\n', '    modifier onlyPendingOwner() {\n', '        require(msg.sender == pendingOwner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to set the pendingOwner address.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        pendingOwner = newOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the pendingOwner address to finalize the transfer.\n', '     */\n', '    function claimOwnership() onlyPendingOwner public {\n', '        OwnershipTransferred(owner, pendingOwner);\n', '        owner = pendingOwner;\n', '        pendingOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title LimitedTransferToken\n', ' * @dev LimitedTransferToken defines the generic interface and the implementation to limit token\n', ' * transferability for different events. It is intended to be used as a base class for other token\n', ' * contracts.\n', ' * LimitedTransferToken has been designed to allow for different limiting factors,\n', ' * this can be achieved by recursively calling super.transferableTokens() until the base class is\n', ' * hit. For example:\n', ' *     function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\n', ' *       return min256(unlockedTokens, super.transferableTokens(holder, time));\n', ' *     }\n', ' * A working example is VestedToken.sol:\n', ' * https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/VestedToken.sol\n', ' */\n', '\n', 'contract LimitedTransferToken is ERC20 {\n', '\n', '  /**\n', '   * @dev Checks whether it can transfer or otherwise throws.\n', '   */\n', '  modifier canTransfer(address _sender, uint256 _value) {\n', '   require(_value <= transferableTokens(_sender, uint64(now)));\n', '   _;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks modifier and allows transfer if tokens are not locked.\n', '   * @param _to The address that will receive the tokens.\n', '   * @param _value The amount of tokens to be transferred.\n', '   */\n', '  function transfer(address _to, uint256 _value) canTransfer(msg.sender, _value) public returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Checks modifier and allows transfer if tokens are not locked.\n', '  * @param _from The address that will send the tokens.\n', '  * @param _to The address that will receive the tokens.\n', '  * @param _value The amount of tokens to be transferred.\n', '  */\n', '  function transferFrom(address _from, address _to, uint256 _value) canTransfer(_from, _value) public returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Default transferable tokens function returns all tokens for a holder (no limit).\n', '   * @dev Overwriting transferableTokens(address holder, uint64 time) is the way to provide the\n', '   * specific logic for limiting token transferability for a holder over time.\n', '   */\n', '  function transferableTokens(address holder, uint64 time) public view returns (uint256) {\n', '    return balanceOf(holder);\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Claimable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '/*\n', '    Smart Token interface\n', '*/\n', 'contract ISmartToken {\n', '\n', '    // =================================================================================================================\n', '    //                                      Members\n', '    // =================================================================================================================\n', '\n', '    bool public transfersEnabled = false;\n', '\n', '    // =================================================================================================================\n', '    //                                      Event\n', '    // =================================================================================================================\n', '\n', '    // triggered when a smart token is deployed - the _token address is defined for forward compatibility, in case we want to trigger the event from a factory\n', '    event NewSmartToken(address _token);\n', '    // triggered when the total supply is increased\n', '    event Issuance(uint256 _amount);\n', '    // triggered when the total supply is decreased\n', '    event Destruction(uint256 _amount);\n', '\n', '    // =================================================================================================================\n', '    //                                      Functions\n', '    // =================================================================================================================\n', '\n', '    function disableTransfers(bool _disable) public;\n', '    function issue(address _to, uint256 _amount) public;\n', '    function destroy(address _from, uint256 _amount) public;\n', '}\n', '\n', '\n', '/**\n', '    BancorSmartToken\n', '*/\n', 'contract LimitedTransferBancorSmartToken is MintableToken, ISmartToken, LimitedTransferToken {\n', '\n', '    // =================================================================================================================\n', '    //                                      Modifiers\n', '    // =================================================================================================================\n', '\n', '    /**\n', '     * @dev Throws if destroy flag is not enabled.\n', '     */\n', '    modifier canDestroy() {\n', '        require(destroyEnabled);\n', '        _;\n', '    }\n', '\n', '    // =================================================================================================================\n', '    //                                      Members\n', '    // =================================================================================================================\n', '\n', '    // We add this flag to avoid users and owner from destroy tokens during crowdsale,\n', '    // This flag is set to false by default and blocks destroy function,\n', '    // We enable destroy option on finalize, so destroy will be possible after the crowdsale.\n', '    bool public destroyEnabled = false;\n', '\n', '    // =================================================================================================================\n', '    //                                      Public Functions\n', '    // =================================================================================================================\n', '\n', '    function setDestroyEnabled(bool _enable) onlyOwner public {\n', '        destroyEnabled = _enable;\n', '    }\n', '\n', '    // =================================================================================================================\n', '    //                                      Impl ISmartToken\n', '    // =================================================================================================================\n', '\n', '    //@Override\n', '    function disableTransfers(bool _disable) onlyOwner public {\n', '        transfersEnabled = !_disable;\n', '    }\n', '\n', '    //@Override\n', '    function issue(address _to, uint256 _amount) onlyOwner public {\n', '        require(super.mint(_to, _amount));\n', '        Issuance(_amount);\n', '    }\n', '\n', '    //@Override\n', '    function destroy(address _from, uint256 _amount) canDestroy public {\n', '\n', '        require(msg.sender == _from || msg.sender == owner); // validate input\n', '\n', '        balances[_from] = balances[_from].sub(_amount);\n', '        totalSupply = totalSupply.sub(_amount);\n', '\n', '        Destruction(_amount);\n', '        Transfer(_from, 0x0, _amount);\n', '    }\n', '\n', '    // =================================================================================================================\n', '    //                                      Impl LimitedTransferToken\n', '    // =================================================================================================================\n', '\n', '\n', '    // Enable/Disable token transfer\n', '    // Tokens will be locked in their wallets until the end of the Crowdsale.\n', '    // @holder - token`s owner\n', '    // @time - not used (framework unneeded functionality)\n', '    //\n', '    // @Override\n', '    function transferableTokens(address holder, uint64 time) public constant returns (uint256) {\n', '        require(transfersEnabled);\n', '        return super.transferableTokens(holder, time);\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', "  A Token which is 'Bancor' compatible and can mint new tokens and pause token-transfer functionality\n", '*/\n', 'contract SirinSmartToken is LimitedTransferBancorSmartToken {\n', '\n', '    // =================================================================================================================\n', '    //                                         Members\n', '    // =================================================================================================================\n', '\n', '    string public name = "SIRIN";\n', '\n', '    string public symbol = "SRN";\n', '\n', '    uint8 public decimals = 18;\n', '\n', '    // =================================================================================================================\n', '    //                                         Constructor\n', '    // =================================================================================================================\n', '\n', '    function SirinSmartToken() public {\n', "        //Apart of 'Bancor' computability - triggered when a smart token is deployed\n", '        NewSmartToken(address(this));\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing TOKENS AND ETHER while a crowdsale is in progress for a period of 60 DAYS.\n', ' * Investor can ask for a full/part refund for his ether against token. Once tokens are Claimed by the investor, they cannot be refunded.\n', ' * After 60 days, all ether will be withdrawn from the vault`s wallet, leaving all tokens to be claimed by the their owners.\n', ' **/\n', 'contract RefundVault is Claimable {\n', '    using SafeMath for uint256;\n', '\n', '    // =================================================================================================================\n', '    //                                      Enums\n', '    // =================================================================================================================\n', '\n', '    enum State { Active, Refunding, Closed }\n', '\n', '    // =================================================================================================================\n', '    //                                      Members\n', '    // =================================================================================================================\n', '\n', '    // Refund time frame\n', '    uint256 public constant REFUND_TIME_FRAME = 60 days;\n', '\n', '    mapping (address => uint256) public depositedETH;\n', '    mapping (address => uint256) public depositedToken;\n', '\n', '    address public etherWallet;\n', '    SirinSmartToken public token;\n', '    State public state;\n', '    uint256 public refundStartTime;\n', '\n', '    // =================================================================================================================\n', '    //                                      Events\n', '    // =================================================================================================================\n', '\n', '    event Active();\n', '    event Closed();\n', '    event Deposit(address indexed beneficiary, uint256 etherWeiAmount, uint256 tokenWeiAmount);\n', '    event RefundsEnabled();\n', '    event RefundedETH(address beneficiary, uint256 weiAmount);\n', '    event TokensClaimed(address indexed beneficiary, uint256 weiAmount);\n', '\n', '    // =================================================================================================================\n', '    //                                      Modifiers\n', '    // =================================================================================================================\n', '\n', '    modifier isActiveState() {\n', '        require(state == State.Active);\n', '        _;\n', '    }\n', '\n', '    modifier isRefundingState() {\n', '        require(state == State.Refunding);\n', '        _;\n', '    }\n', '    \n', '    modifier isCloseState() {\n', '        require(state == State.Closed);\n', '        _;\n', '    }\n', '\n', '    modifier isRefundingOrCloseState() {\n', '        require(state == State.Refunding || state == State.Closed);\n', '        _;\n', '    }\n', '\n', '    modifier  isInRefundTimeFrame() {\n', '        require(refundStartTime <= now && refundStartTime + REFUND_TIME_FRAME > now);\n', '        _;\n', '    }\n', '\n', '    modifier isRefundTimeFrameExceeded() {\n', '        require(refundStartTime + REFUND_TIME_FRAME < now);\n', '        _;\n', '    }\n', '    \n', '\n', '    // =================================================================================================================\n', '    //                                      Ctors\n', '    // =================================================================================================================\n', '\n', '    function RefundVault(address _etherWallet, SirinSmartToken _token) public {\n', '        require(_etherWallet != address(0));\n', '        require(_token != address(0));\n', '\n', '        etherWallet = _etherWallet;\n', '        token = _token;\n', '        state = State.Active;\n', '        Active();\n', '    }\n', '\n', '    // =================================================================================================================\n', '    //                                      Public Functions\n', '    // =================================================================================================================\n', '\n', '    function deposit(address investor, uint256 tokensAmount) isActiveState onlyOwner public payable {\n', '\n', '        depositedETH[investor] = depositedETH[investor].add(msg.value);\n', '        depositedToken[investor] = depositedToken[investor].add(tokensAmount);\n', '\n', '        Deposit(investor, msg.value, tokensAmount);\n', '    }\n', '\n', '    function close() isRefundingState onlyOwner isRefundTimeFrameExceeded public {\n', '        state = State.Closed;\n', '        Closed();\n', '        etherWallet.transfer(this.balance);\n', '    }\n', '\n', '    function enableRefunds() isActiveState onlyOwner public {\n', '        state = State.Refunding;\n', '        refundStartTime = now;\n', '\n', '        RefundsEnabled();\n', '    }\n', '\n', '    //@dev Refund ether back to the investor in returns of proportional amount of SRN\n', '    //back to the Sirin`s wallet\n', '    function refundETH(uint256 ETHToRefundAmountWei) isInRefundTimeFrame isRefundingState public {\n', '        require(ETHToRefundAmountWei != 0);\n', '\n', '        uint256 depositedTokenValue = depositedToken[msg.sender];\n', '        uint256 depositedETHValue = depositedETH[msg.sender];\n', '\n', '        require(ETHToRefundAmountWei <= depositedETHValue);\n', '\n', '        uint256 refundTokens = ETHToRefundAmountWei.mul(depositedTokenValue).div(depositedETHValue);\n', '\n', '        assert(refundTokens > 0);\n', '\n', '        depositedETH[msg.sender] = depositedETHValue.sub(ETHToRefundAmountWei);\n', '        depositedToken[msg.sender] = depositedTokenValue.sub(refundTokens);\n', '\n', '        token.destroy(address(this),refundTokens);\n', '        msg.sender.transfer(ETHToRefundAmountWei);\n', '\n', '        RefundedETH(msg.sender, ETHToRefundAmountWei);\n', '    }\n', '\n', '    //@dev Transfer tokens from the vault to the investor while releasing proportional amount of ether\n', '    //to Sirin`s wallet.\n', '    //Can be triggerd by the investor only\n', '    function claimTokens(uint256 tokensToClaim) isRefundingOrCloseState public {\n', '        require(tokensToClaim != 0);\n', '        \n', '        address investor = msg.sender;\n', '        require(depositedToken[investor] > 0);\n', '        \n', '        uint256 depositedTokenValue = depositedToken[investor];\n', '        uint256 depositedETHValue = depositedETH[investor];\n', '\n', '        require(tokensToClaim <= depositedTokenValue);\n', '\n', '        uint256 claimedETH = tokensToClaim.mul(depositedETHValue).div(depositedTokenValue);\n', '\n', '        assert(claimedETH > 0);\n', '\n', '        depositedETH[investor] = depositedETHValue.sub(claimedETH);\n', '        depositedToken[investor] = depositedTokenValue.sub(tokensToClaim);\n', '\n', '        token.transfer(investor, tokensToClaim);\n', '        if(state != State.Closed) {\n', '            etherWallet.transfer(claimedETH);\n', '        }\n', '\n', '        TokensClaimed(investor, tokensToClaim);\n', '    }\n', '    \n', '    //@dev Transfer tokens from the vault to the investor while releasing proportional amount of ether\n', '    //to Sirin`s wallet.\n', '    //Can be triggerd by the owner of the vault (in our case - Sirin`s owner after 60 days)\n', '    function claimAllInvestorTokensByOwner(address investor) isCloseState onlyOwner public {\n', '        uint256 depositedTokenValue = depositedToken[investor];\n', '        require(depositedTokenValue > 0);\n', '        \n', '\n', '        token.transfer(investor, depositedTokenValue);\n', '        \n', '        TokensClaimed(investor, depositedTokenValue);\n', '    }\n', '\n', '    // @dev investors can claim tokens by calling the function\n', '    // @param tokenToClaimAmount - amount of the token to claim\n', '    function claimAllTokens() isRefundingOrCloseState public  {\n', '        uint256 depositedTokenValue = depositedToken[msg.sender];\n', '        claimTokens(depositedTokenValue);\n', '    }\n', '\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    SirinSmartToken public token;\n', '\n', '    // start and end timestamps where investments are allowed (both inclusive)\n', '    uint256 public startTime;\n', '\n', '    uint256 public endTime;\n', '\n', '    // address where funds are collected\n', '    address public wallet;\n', '\n', '    // how many token units a buyer gets per wei\n', '    uint256 public rate;\n', '\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '\n', '    /**\n', '     * event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, SirinSmartToken _token) public {\n', '        require(_startTime >= now);\n', '        require(_endTime >= _startTime);\n', '        require(_rate > 0);\n', '        require(_wallet != address(0));\n', '        require(_token != address(0));\n', '\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '        rate = _rate;\n', '        wallet = _wallet;\n', '        token = _token;\n', '    }\n', '\n', '    // fallback function can be used to buy tokens\n', '    function() external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    // low level token purchase function\n', '    function buyTokens(address beneficiary) public payable {\n', '        require(beneficiary != address(0));\n', '        require(validPurchase());\n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = weiAmount.mul(getRate());\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        token.issue(beneficiary, tokens);\n', '        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '        forwardFunds();\n', '    }\n', '\n', '    // send ether to the fund collection wallet\n', '    // override to create custom fund forwarding mechanisms\n', '    function forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '    // @return true if the transaction can buy tokens\n', '    function validPurchase() internal view returns (bool) {\n', '        bool withinPeriod = now >= startTime && now <= endTime;\n', '        bool nonZeroPurchase = msg.value != 0;\n', '        return withinPeriod && nonZeroPurchase;\n', '    }\n', '\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public view returns (bool) {\n', '        return now > endTime;\n', '    }\n', '\n', '    // @return the crowdsale rate\n', '    function getRate() public view returns (uint256) {\n', '        return rate;\n', '    }\n', '\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Crowdsale, Claimable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', 'contract SirinCrowdsale is FinalizableCrowdsale {\n', '\n', '    // =================================================================================================================\n', '    //                                      Constants\n', '    // =================================================================================================================\n', "    // Max amount of known addresses of which will get SRN by 'Grant' method.\n", '    //\n', '    // grantees addresses will be SirinLabs wallets addresses.\n', '    // these wallets will contain SRN tokens that will be used for 2 purposes only -\n', '    // 1. SRN tokens against raised fiat money\n', '    // 2. SRN tokens for presale bonus.\n', '    // we set the value to 10 (and not to 2) because we want to allow some flexibility for cases like fiat money that is raised close to the crowdsale.\n', '    // we limit the value to 10 (and not larger) to limit the run time of the function that process the grantees array.\n', '    uint8 public constant MAX_TOKEN_GRANTEES = 10;\n', '\n', '    // SRN to ETH base rate\n', '    uint256 public constant EXCHANGE_RATE = 500;\n', '\n', '    // Refund division rate\n', '    uint256 public constant REFUND_DIVISION_RATE = 2;\n', '\n', '    // =================================================================================================================\n', '    //                                      Modifiers\n', '    // =================================================================================================================\n', '\n', '    /**\n', '     * @dev Throws if called not during the crowdsale time frame\n', '     */\n', '    modifier onlyWhileSale() {\n', '        require(isActive());\n', '        _;\n', '    }\n', '\n', '    // =================================================================================================================\n', '    //                                      Members\n', '    // =================================================================================================================\n', '\n', '    // wallets address for 60% of SRN allocation\n', '    address public walletTeam;   //10% of the total number of SRN tokens will be allocated to the team\n', '    address public walletOEM;       //10% of the total number of SRN tokens will be allocated to OEM’s, Operating System implementation, SDK developers and rebate to device and Shield OS™ users\n', '    address public walletBounties;  //5% of the total number of SRN tokens will be allocated to professional fees and Bounties\n', '    address public walletReserve;   //35% of the total number of SRN tokens will be allocated to SIRIN LABS and as a reserve for the company to be used for future strategic plans for the created ecosystem\n', '\n', '    // Funds collected outside the crowdsale in wei\n', '    uint256 public fiatRaisedConvertedToWei;\n', '\n', '    //Grantees - used for non-ether and presale bonus token generation\n', '    address[] public presaleGranteesMapKeys;\n', '    mapping (address => uint256) public presaleGranteesMap;  //address=>wei token amount\n', '\n', '    // The refund vault\n', '    RefundVault public refundVault;\n', '\n', '    // =================================================================================================================\n', '    //                                      Events\n', '    // =================================================================================================================\n', '    event GrantAdded(address indexed _grantee, uint256 _amount);\n', '\n', '    event GrantUpdated(address indexed _grantee, uint256 _oldAmount, uint256 _newAmount);\n', '\n', '    event GrantDeleted(address indexed _grantee, uint256 _hadAmount);\n', '\n', '    event FiatRaisedUpdated(address indexed _address, uint256 _fiatRaised);\n', '\n', '    event TokenPurchaseWithGuarantee(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    // =================================================================================================================\n', '    //                                      Constructors\n', '    // =================================================================================================================\n', '\n', '    function SirinCrowdsale(uint256 _startTime,\n', '    uint256 _endTime,\n', '    address _wallet,\n', '    address _walletTeam,\n', '    address _walletOEM,\n', '    address _walletBounties,\n', '    address _walletReserve,\n', '    SirinSmartToken _sirinSmartToken,\n', '    RefundVault _refundVault)\n', '    public\n', '    Crowdsale(_startTime, _endTime, EXCHANGE_RATE, _wallet, _sirinSmartToken) {\n', '        require(_walletTeam != address(0));\n', '        require(_walletOEM != address(0));\n', '        require(_walletBounties != address(0));\n', '        require(_walletReserve != address(0));\n', '        require(_sirinSmartToken != address(0));\n', '        require(_refundVault != address(0));\n', '\n', '        walletTeam = _walletTeam;\n', '        walletOEM = _walletOEM;\n', '        walletBounties = _walletBounties;\n', '        walletReserve = _walletReserve;\n', '\n', '        token = _sirinSmartToken;\n', '        refundVault  = _refundVault;\n', '    }\n', '\n', '    // =================================================================================================================\n', '    //                                      Impl Crowdsale\n', '    // =================================================================================================================\n', '\n', '    // @return the rate in SRN per 1 ETH according to the time of the tx and the SRN pricing program.\n', '    // @Override\n', '    function getRate() public view returns (uint256) {\n', '        if (now < (startTime.add(24 hours))) {return 1000;}\n', '        if (now < (startTime.add(2 days))) {return 950;}\n', '        if (now < (startTime.add(3 days))) {return 900;}\n', '        if (now < (startTime.add(4 days))) {return 855;}\n', '        if (now < (startTime.add(5 days))) {return 810;}\n', '        if (now < (startTime.add(6 days))) {return 770;}\n', '        if (now < (startTime.add(7 days))) {return 730;}\n', '        if (now < (startTime.add(8 days))) {return 690;}\n', '        if (now < (startTime.add(9 days))) {return 650;}\n', '        if (now < (startTime.add(10 days))) {return 615;}\n', '        if (now < (startTime.add(11 days))) {return 580;}\n', '        if (now < (startTime.add(12 days))) {return 550;}\n', '        if (now < (startTime.add(13 days))) {return 525;}\n', '\n', '        return rate;\n', '    }\n', '\n', '    // =================================================================================================================\n', '    //                                      Impl FinalizableCrowdsale\n', '    // =================================================================================================================\n', '\n', '    //@Override\n', '    function finalization() internal onlyOwner {\n', '        super.finalization();\n', '\n', '        // granting bonuses for the pre crowdsale grantees:\n', '        for (uint256 i = 0; i < presaleGranteesMapKeys.length; i++) {\n', '            token.issue(presaleGranteesMapKeys[i], presaleGranteesMap[presaleGranteesMapKeys[i]]);\n', '        }\n', '\n', '        // Adding 60% of the total token supply (40% were generated during the crowdsale)\n', '        // 40 * 2.5 = 100\n', '        uint256 newTotalSupply = token.totalSupply().mul(250).div(100);\n', '\n', '        // 10% of the total number of SRN tokens will be allocated to the team\n', '        token.issue(walletTeam, newTotalSupply.mul(10).div(100));\n', '\n', '        // 10% of the total number of SRN tokens will be allocated to OEM’s, Operating System implementation,\n', '        // SDK developers and rebate to device and Sirin OS™ users\n', '        token.issue(walletOEM, newTotalSupply.mul(10).div(100));\n', '\n', '        // 5% of the total number of SRN tokens will be allocated to professional fees and Bounties\n', '        token.issue(walletBounties, newTotalSupply.mul(5).div(100));\n', '\n', '        // 35% of the total number of SRN tokens will be allocated to SIRIN LABS,\n', '        // and as a reserve for the company to be used for future strategic plans for the created ecosystem\n', '        token.issue(walletReserve, newTotalSupply.mul(35).div(100));\n', '\n', '        // Re-enable transfers after the token sale.\n', '        token.disableTransfers(false);\n', '\n', '        // Re-enable destroy function after the token sale.\n', '        token.setDestroyEnabled(true);\n', '\n', '        // Enable ETH refunds and token claim.\n', '        refundVault.enableRefunds();\n', '\n', '        // transfer token ownership to crowdsale owner\n', '        token.transferOwnership(owner);\n', '\n', '        // transfer refundVault ownership to crowdsale owner\n', '        refundVault.transferOwnership(owner);\n', '    }\n', '\n', '    // =================================================================================================================\n', '    //                                      Public Methods\n', '    // =================================================================================================================\n', '    // @return the total funds collected in wei(ETH and none ETH).\n', '    function getTotalFundsRaised() public view returns (uint256) {\n', '        return fiatRaisedConvertedToWei.add(weiRaised);\n', '    }\n', '\n', '    // @return true if the crowdsale is active, hence users can buy tokens\n', '    function isActive() public view returns (bool) {\n', '        return now >= startTime && now < endTime;\n', '    }\n', '\n', '    // =================================================================================================================\n', '    //                                      External Methods\n', '    // =================================================================================================================\n', '    // @dev Adds/Updates address and token allocation for token grants.\n', '    // Granted tokens are allocated to non-ether, presale, buyers.\n', '    // @param _grantee address The address of the token grantee.\n', '    // @param _value uint256 The value of the grant in wei token.\n', '    function addUpdateGrantee(address _grantee, uint256 _value) external onlyOwner onlyWhileSale{\n', '        require(_grantee != address(0));\n', '        require(_value > 0);\n', '\n', '        // Adding new key if not present:\n', '        if (presaleGranteesMap[_grantee] == 0) {\n', '            require(presaleGranteesMapKeys.length < MAX_TOKEN_GRANTEES);\n', '            presaleGranteesMapKeys.push(_grantee);\n', '            GrantAdded(_grantee, _value);\n', '        }\n', '        else {\n', '            GrantUpdated(_grantee, presaleGranteesMap[_grantee], _value);\n', '        }\n', '\n', '        presaleGranteesMap[_grantee] = _value;\n', '    }\n', '\n', '    // @dev deletes entries from the grants list.\n', '    // @param _grantee address The address of the token grantee.\n', '    function deleteGrantee(address _grantee) external onlyOwner onlyWhileSale {\n', '        require(_grantee != address(0));\n', '        require(presaleGranteesMap[_grantee] != 0);\n', '\n', '        //delete from the map:\n', '        delete presaleGranteesMap[_grantee];\n', '\n', '        //delete from the array (keys):\n', '        uint256 index;\n', '        for (uint256 i = 0; i < presaleGranteesMapKeys.length; i++) {\n', '            if (presaleGranteesMapKeys[i] == _grantee) {\n', '                index = i;\n', '                break;\n', '            }\n', '        }\n', '        presaleGranteesMapKeys[index] = presaleGranteesMapKeys[presaleGranteesMapKeys.length - 1];\n', '        delete presaleGranteesMapKeys[presaleGranteesMapKeys.length - 1];\n', '        presaleGranteesMapKeys.length--;\n', '\n', '        GrantDeleted(_grantee, presaleGranteesMap[_grantee]);\n', '    }\n', '\n', '    // @dev Set funds collected outside the crowdsale in wei.\n', '    //  note: we not to use accumulator to allow flexibility in case of humane mistakes.\n', '    // funds are converted to wei using the market conversion rate of USD\\ETH on the day on the purchase.\n', '    // @param _fiatRaisedConvertedToWei number of none eth raised.\n', '    function setFiatRaisedConvertedToWei(uint256 _fiatRaisedConvertedToWei) external onlyOwner onlyWhileSale {\n', '        fiatRaisedConvertedToWei = _fiatRaisedConvertedToWei;\n', '        FiatRaisedUpdated(msg.sender, fiatRaisedConvertedToWei);\n', '    }\n', '\n', '    /// @dev Accepts new ownership on behalf of the SirinCrowdsale contract. This can be used, by the token sale\n', '    /// contract itself to claim back ownership of the SirinSmartToken contract.\n', '    function claimTokenOwnership() external onlyOwner {\n', '        token.claimOwnership();\n', '    }\n', '\n', '    /// @dev Accepts new ownership on behalf of the SirinCrowdsale contract. This can be used, by the token sale\n', '    /// contract itself to claim back ownership of the refundVault contract.\n', '    function claimRefundVaultOwnership() external onlyOwner {\n', '        refundVault.claimOwnership();\n', '    }\n', '\n', '    // @dev Buy tokes with guarantee\n', '    function buyTokensWithGuarantee() public payable {\n', '        require(validPurchase());\n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = weiAmount.mul(getRate());\n', '        tokens = tokens.div(REFUND_DIVISION_RATE);\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        token.issue(address(refundVault), tokens);\n', '\n', '        refundVault.deposit.value(msg.value)(msg.sender, tokens);\n', '\n', '        TokenPurchaseWithGuarantee(msg.sender, address(refundVault), weiAmount, tokens);\n', '    }\n', '}']