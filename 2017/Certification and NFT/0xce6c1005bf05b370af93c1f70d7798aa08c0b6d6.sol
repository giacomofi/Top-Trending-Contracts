['pragma solidity ^0.4.13;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract VeRegistry is Ownable {\n', '\n', '    //--- Definitions\n', '\n', '    struct Asset {\n', '        address addr;\n', '        string meta;\n', '    }\n', '\n', '    //--- Storage\n', '\n', '    mapping (string => Asset) assets;\n', '\n', '    //--- Events\n', '\n', '    event AssetCreated(\n', '        address indexed addr\n', '    );\n', '\n', '    event AssetRegistered(\n', '        address indexed addr,\n', '        string symbol,\n', '        string name,\n', '        string description,\n', '        uint256 decimals\n', '    );\n', '\n', '    event MetaUpdated(string symbol, string meta);\n', '\n', '    //--- Public mutable functions\n', '\n', '    function register(\n', '        address addr,\n', '        string symbol,\n', '        string name,\n', '        string description,\n', '        uint256 decimals,\n', '        string meta\n', '    )\n', '        public\n', '        onlyOwner\n', '    {\n', '        assets[symbol].addr = addr;\n', '\n', '        AssetRegistered(\n', '            addr,\n', '            symbol,\n', '            name,\n', '            description,\n', '            decimals\n', '        );\n', '\n', '        updateMeta(symbol, meta);\n', '    }\n', '\n', '    function updateMeta(string symbol, string meta) public onlyOwner {\n', '        assets[symbol].meta = meta;\n', '\n', '        MetaUpdated(symbol, meta);\n', '    }\n', '\n', '    function getAsset(string symbol) public constant returns (address addr, string meta) {\n', '        Asset storage asset = assets[symbol];\n', '        addr = asset.addr;\n', '        meta = asset.meta;\n', '    }\n', '}\n', '\n', 'contract VeTokenRegistry is VeRegistry {\n', '}']