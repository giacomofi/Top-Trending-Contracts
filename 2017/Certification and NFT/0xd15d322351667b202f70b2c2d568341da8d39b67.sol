['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {  //was constant\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/************************************************************************************************\n', ' * \n', ' *************************************************************************************************/\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 { \n', '    function transfer(address receiver, uint amount) public ;\n', '    function transferFrom(address sender, address receiver, uint amount) public returns(bool success); // do token.approve on the ICO contract\n', '    function balanceOf(address _owner) constant public returns (uint256 balance);\n', '}\n', '\n', '/************************************************************************************************\n', ' * \n', ' *************************************************************************************************/\n', '\n', 'contract ASTRICOSale is Ownable {\n', '  ERC20 public token;  // using the ASTRCoin token - will set an address\n', '\n', '  // start and end of the sale - 4 weeks\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // where funds are collected \n', '\n', '  address public wallet;  // beneficiary\n', '  address public ownerAddress;  // deploy owner\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '  \n', '  uint8 internal decimals             = 4; // 4 decimal places should be enough in general\n', '  uint256 internal decimalsConversion = 10 ** uint256(decimals);\n', '  uint256 internal ALLOC_CROWDSALE    = 90000000 * decimalsConversion; // (10 ** uint256(decimals)); // 90 mill in ICO\n', '\n', '  // 90MIL      90000000\n', '  // 10MIL      10000000\n', '  // 90MIL 4DCP 900000000000\n', '\n', '  uint internal BASIC_RATE        = 631 * decimalsConversion; // based on the price of ether at 755 USD\n', '  uint public   PRICE_VARIABLE    = 0 * decimalsConversion;\n', '\n', '  //TIME LIMITS\n', '\n', '  uint256 public astrSold            = 0;\n', '\n', '  bool public halted;\n', '  bool public crowdsaleClosed;\n', '\n', '  // simple event to track purchases\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  modifier isNotHalted() {     require(!halted);    _;  }\n', '  modifier afterDeadline() { if (now >= endTime) _; }\n', '\n', '\n', '  /**\n', '    * Constructor for ASTRICOSale\n', '    *\n', '    * 1513908673\n', '    *  Friday, December 22, 2017 10:11:13 AM GMT+08:00\n', '    *\n', '    * 1517414400\n', '    * Thursday, February 1, 2018 12:00:00 AM GMT+08:00\n', '    *\n', '    * 90000000000\n', '  */\n', '  // function ASTRCoinCrowdSale(address _token, uint256 _startTime, address _ethWallet) public  {\n', '    function ASTRICOSale() public  {\n', '\n', '    // require(_startTime >= now);\n', '    // require(_ethWallet != 0x0);   \n', '\n', '    crowdsaleClosed = false;\n', '    halted          = false;\n', '    startTime       = 1513908673; // Friday, December 22, 2017 10:11:13 AM GMT+08:00\n', '    endTime         = 1517414400; // Thursday, February 1, 2018 12:00:00 AM GMT+08:00\n', '    wallet          = ERC20(0x3baDA155408AB1C9898FDF28e545b51f2f9a65CC); // This wallet needs to give permission for the ICO to transfer Tokens \n', '    ownerAddress    = ERC20(0x3EFAe2e152F62F5cc12cc0794b816d22d416a721);  // This is bad in theory but does fix the 2300 gas problem \n', '    token           = ERC20(0x80E7a4d750aDe616Da896C49049B7EdE9e04C191); // Ropsten we have pregenerated thiss\n', '  }\n', '\n', '        // fallback function can be used to buy tokens\n', '  function () public payable {\n', '    require(msg.sender                 != 0x0);\n', '    require(validPurchase());\n', '    require(!halted); // useful to test if we have paused it\n', '    uint256 weiAmount                  = msg.value; // money sent in wei\n', '    uint256 tokens                     = SafeMath.div(SafeMath.mul(weiAmount, getCurrentRate()), 1 ether);\n', '    require(ALLOC_CROWDSALE - astrSold >= tokens);\n', '    weiRaised                          += weiAmount;\n', '    astrSold                           += tokens;\n', '    token.transferFrom(ownerAddress, msg.sender, tokens);\n', '    wallet.transfer(msg.value); // transfer straight away wallet\n', '  }\n', '\n', '\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = (msg.value != 0);\n', '    bool astrAvailable = (ALLOC_CROWDSALE - astrSold) > 0; \n', '    return withinPeriod && nonZeroPurchase && astrAvailable && ! crowdsaleClosed;\n', '  }\n', '\n', '  function getCurrentRate() internal constant returns (uint256) {  \n', '    if( PRICE_VARIABLE > 0 ) {\n', '      return PRICE_VARIABLE; // we can manually set prices if we want\n', '    }\n', '\n', '    return BASIC_RATE;\n', '  }\n', '\n', '\n', '  // this closes it when we want to close - rather than waiting \n', '  function setNewRate(uint256 _coinsPerEther) onlyOwner public {\n', '    if( _coinsPerEther > 0 ) {\n', '        PRICE_VARIABLE = _coinsPerEther * decimalsConversion;\n', '    }\n', '  }\n', '    // this closes it when we want to close - rather than waiting \n', '  function setFixedRate() onlyOwner public {\n', '     PRICE_VARIABLE = 0 * decimalsConversion;\n', '  }\n', '\n', '\n', '  // this closes it when we want to close - rather than waiting - this is bad\n', '  function closeSaleAnyway() onlyOwner public {\n', '      // wallet.transfer(weiRaised);\n', '      crowdsaleClosed = true;\n', '    }\n', '\n', '    // this closes it when we want to close - rather than waiting \n', '  function safeCloseSale()  onlyOwner afterDeadline public {\n', '    // wallet.transfer(weiRaised);\n', '    crowdsaleClosed = true;\n', '  }\n', '\n', '  function pause() onlyOwner public {\n', '    halted = true;\n', '  }\n', '\n', '\n', '  function unpause() onlyOwner public {\n', '    halted = false;\n', '  }\n', '}']