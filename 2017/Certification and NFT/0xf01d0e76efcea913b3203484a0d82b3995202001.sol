['pragma solidity ^0.4.18;\n', '// Version 2\n', '\n', 'contract GiftCard2017{\n', '    address owner;\n', '    mapping (address => uint256) public authorizations;\n', '    \n', '    /// Constructor sets owner.\n', '    function GiftCard2017() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    /// Redeems authorized ETH.\n', '    function () public payable {                               // Accept ether only because some clients require it.\n', '        uint256 _redemption = authorizations[msg.sender];      // Amount mEth available to redeem.\n', '        require (_redemption > 0);\n', '        authorizations[msg.sender] = 0;                        // Clear authorization.\n', '        msg.sender.transfer(_redemption * 1e15 + msg.value);   // convert mEth to wei for transfer()\n', '    }\n', '    \n', '    /// Contract owner deposits ETH.\n', '    function deposit() public payable OwnerOnly {\n', '    }\n', '    \n', '    /// Contract owner withdraws ETH.\n', '    function withdraw(uint256 _amount) public OwnerOnly {\n', '        owner.transfer(_amount);\n', '    }\n', '\n', '    /// Contract owner authorizes redemptions in units of 1/1000 ETH.    \n', '    function authorize(address _addr, uint256 _amount_mEth) public OwnerOnly {\n', '        require (this.balance >= _amount_mEth);\n', '        authorizations[_addr] = _amount_mEth;\n', '    }\n', '    \n', '    /// Check that message came from the contract owner.\n', '    modifier OwnerOnly () {\n', '        require (msg.sender == owner);\n', '        _;\n', '    }\n', '}']