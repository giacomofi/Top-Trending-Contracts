['pragma solidity ^0.4.18;\n', '\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'library SafeMath {\n', '    \n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); \n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); \n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  \n', '}\n', '\n', 'contract Ownable {\n', '    \n', '  address public owner;\n', '\n', '  \n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '  \n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '}\n', '\n', 'contract Crowdsale is Ownable {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    address public multisig;\n', '\n', '   \n', '\n', '   \n', '\n', '   \n', ' ERC20 public token;\n', '    uint public startTime;\n', '    \n', '  \n', '    uint public endTime;\n', '\n', '    uint256 public hardcap;\n', '\n', '    uint public rate;\n', '    \n', '    uint public bonusPercent;\n', '    \n', '  \n', '    \n', '  \n', '  uint256 public tokensSold = 0;\n', '\n', ' \n', '  uint256 public weiRaised = 0;\n', '  \n', '  \n', '  uint public investorCount = 0;\n', '    \n', '  mapping (address => uint256) public investedAmountOf;\n', '\n', ' \n', '  mapping (address => uint256) public tokenAmountOf;\n', ' \n', '\n', '  \n', '  struct Promo {\n', '        uint bonus;\n', '        uint EndTime;\n', '    }\n', ' \n', ' mapping (address => Promo) PromoList;\n', ' mapping (uint=>uint) amountBonus;\n', ' uint public level_1_amount=50 ether;\n', ' uint public level_2_amount=100 ether;\n', ' uint public level_3_amount=250 ether;\n', ' uint public level_4_amount=500 ether;\n', ' uint public level_5_amount=1000 ether;\n', ' uint public level_6_amount=100000 ether;\n', ' uint public level_7_amount=1000000 ether;\n', ' uint public level_8_amount=1000000 ether;\n', ' uint public level_9_amount=1000000 ether;\n', ' uint public level_1_percent=20;\n', ' uint public level_2_percent=25;\n', ' uint public level_3_percent=30;\n', ' uint public level_4_percent=35;\n', ' uint public level_5_percent=40;\n', ' uint public level_6_percent=40;\n', ' uint public level_7_percent=40;\n', ' uint public level_8_percent=40;\n', ' uint public level_9_percent=40;\n', ' bool public canExchange=true;\n', '    function Crowdsale() {\n', '        multisig =0x7c27f68b0d5afffb668da3e046adfba6ea1f6bc3;\n', '     \n', '       bonusPercent=130;\n', '        rate =5000;\n', '        startTime =1510704000;\n', '        endTime=1513382399;\n', '     \n', '        hardcap = 1000000000000000;\n', '        token=ERC20(0x292317a267adfb97d1b4e3ffd04f9da399cf973b);\n', '        \n', '    }\n', '\n', '\n', '\n', '  \n', '    function setEndTime(uint _endTime) public onlyOwner{\n', '         require(_endTime>=now&&_endTime>=startTime);\n', '        endTime=_endTime;\n', '    }\n', '    \n', '     function setHardcap(uint256 _hardcap) public onlyOwner{\n', '       \n', '        hardcap=_hardcap;\n', '    }\n', '    \n', '   function setPromo(address _address,uint _amount,uint _endtime) public onlyOwner{\n', '       \n', '       PromoList[_address].bonus=_amount;\n', '        PromoList[_address].EndTime=_endtime;\n', '    }\n', '     function resetAmountBonuses() public onlyOwner\n', '     {\n', ' level_1_amount=0;\n', ' level_2_amount=0;\n', ' level_3_amount=0;\n', ' level_4_amount=0;\n', ' level_5_amount=0;\n', ' level_6_amount=0;\n', ' level_7_amount=0;\n', ' level_8_amount=0;\n', ' level_9_amount=0;\n', ' level_1_percent=0;\n', ' level_2_percent=0;\n', ' level_3_percent=0;\n', ' level_4_percent=0;\n', ' level_5_percent=0;\n', ' level_6_percent=0;\n', ' level_7_percent=0;\n', ' level_8_percent=0;\n', ' level_9_percent=0;\n', '    }\n', '     function setAmountBonuses(uint _level,uint _amount,uint _percent) public onlyOwner\n', '     {\n', '         if (_level==1) \n', '         {\n', '           level_1_amount=(_amount).mul(1 ether);\n', '          level_1_percent=_percent;\n', '         }\n', '        else if (_level==2) \n', '         {\n', '           level_2_amount=_amount.mul(1 ether);\n', '          level_2_percent=_percent;\n', '         }\n', '       else  if (_level==3) \n', '         {\n', '           level_3_amount=_amount.mul(1 ether);\n', '          level_3_percent=_percent;\n', '         }\n', '      else   if (_level==4) \n', '         {\n', '           level_4_amount=_amount.mul(1 ether);\n', '          level_4_percent=_percent;\n', '         }\n', '      else   if (_level==5) \n', '         {\n', '           level_5_amount=_amount.mul(1 ether);\n', '          level_5_percent=_percent;\n', '         }\n', '     else    if (_level==6) \n', '         {\n', '           level_6_amount=_amount.mul(1 ether);\n', '          level_6_percent=_percent;\n', '         }\n', '       else  if (_level==7) \n', '         {\n', '           level_7_amount=_amount.mul(1 ether);\n', '          level_7_percent=_percent;\n', '         }\n', '      else   if (_level==8) \n', '         {\n', '           level_8_amount=_amount.mul(1 ether);\n', '          level_8_percent=_percent;\n', '         }\n', '       else  if (_level==9) \n', '         {\n', '           level_9_amount=_amount.mul(1 ether);\n', '          level_9_percent=_percent;\n', '         }\n', '     }\n', ' \n', '    \n', '\n', '    \n', '    \n', '    \n', '    modifier saleIsOn(){\n', '         require(now > startTime && now <= endTime);\n', '         _;\n', '    }\n', '    \n', '    modifier isUnderHardCap() {\n', '   \n', '       require(tokensSold <= hardcap);\n', '        _;\n', '    }\n', '    \n', '    modifier isCanExchange(){\n', '       require(canExchange);\n', '       _;\n', '       }\n', '   \n', '   function calcToken()\n', '      \n', '        returns (uint256)\n', '    {\n', '         uint bonus;\n', '        uint256  tokens=0;\n', '         bonus=bonusPercent;\n', '       if (PromoList[msg.sender].EndTime >=now)\n', '        {\n', '           bonus += PromoList[msg.sender].bonus; \n', '        }\n', '       \n', '        \n', '           \n', '            if (msg.value>=level_1_amount && msg.value<level_2_amount )\n', '            {\n', '            bonus+=level_1_percent;\n', '            }\n', '            else\n', '             if (msg.value>=level_2_amount && msg.value<level_3_amount )\n', '            {\n', '            bonus+=level_2_percent;\n', '            }\n', '             else\n', '             if (msg.value>=level_3_amount && msg.value<level_4_amount )\n', '            {\n', '            bonus+=level_3_percent;\n', '            }\n', '             else\n', '             if (msg.value>=level_4_amount && msg.value<level_5_amount )\n', '            {\n', '            bonus+=level_4_percent;\n', '            }\n', '             else\n', '             if (msg.value>=level_5_amount && msg.value<level_6_amount )\n', '            {\n', '            bonus+=level_5_percent;\n', '            }\n', '         else\n', '             if (msg.value>=level_6_amount && msg.value<level_7_amount )\n', '            {\n', '            bonus+=level_6_percent;\n', '            }\n', '            else\n', '             if (msg.value>=level_7_amount && msg.value<level_8_amount )\n', '            {\n', '            bonus+=level_7_percent;\n', '            }\n', '             else\n', '             if (msg.value>=level_8_amount && msg.value<level_9_amount )\n', '            {\n', '            bonus+=level_8_percent;\n', '            }\n', '       else\n', '             if (msg.value>=level_9_amount)\n', '            {\n', '            bonus+=level_9_percent;\n', '            }\n', '             uint256 multiplier = 10 **6;\n', '         tokens = multiplier.mul(msg.value).div(1 ether).mul(rate).div(100).mul(bonus);\n', '        \n', '        \n', '       \n', '        return tokens;\n', '    }\n', '       function exchange() public isCanExchange {\n', '     // address myAdrress=this;\n', '     ERC20  oldToken=ERC20(0x12a35383cA24ceb44cdcBBecbEb7baCcB5F3754A);\n', '    ERC20   newToken=ERC20(0x292317a267AdFb97d1b4E3Ffd04f9Da399cf973b);\n', '       \n', '\n', '     uint  oldTokenAmount=oldToken.balanceOf(msg.sender);\n', '     //oldToken.approve(myAdrress,oldTokenAmount);\n', '      oldToken.transferFrom(msg.sender,0x0a6d9df476577C0D4A24EB50220fad007e444db8,oldTokenAmount);\n', ' newToken.transferFrom(0x0a6d9df476577C0D4A24EB50220fad007e444db8,msg.sender,oldTokenAmount*105/40);\n', '    \n', '       \n', '   }\n', '    function createTokens() payable saleIsOn isUnderHardCap {\n', '        \n', '      \n', '      \n', '      uint256 tokens=calcToken();\n', '        \n', '         \n', '        assert (tokens >= 10000);\n', '    \n', '        \n', '       \n', '       token.transferFrom(0x0a6d9df476577C0D4A24EB50220fad007e444db8,msg.sender, tokens);\n', '        if(investedAmountOf[msg.sender] == 0) {\n', '      \n', '       investorCount++;\n', '        }\n', '        investedAmountOf[msg.sender] = investedAmountOf[msg.sender].add(msg.value);\n', '        tokenAmountOf[msg.sender] = tokenAmountOf[msg.sender].add(tokens);\n', '        \n', '        weiRaised = weiRaised.add(msg.value);\n', '    tokensSold = tokensSold.add(tokens);  \n', '    \n', '     multisig.transfer(msg.value);\n', '    }\n', '\n', '    function() external payable {\n', '        createTokens();\n', '    }\n', '    \n', '}']