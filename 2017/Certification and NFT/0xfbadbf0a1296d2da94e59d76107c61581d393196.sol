['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', '\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title GreedVesting\n', ' * @dev A vesting contract for greed tokens that can release its token balance gradually like a\n', ' * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n', ' * owner. In this contract, you add vesting to a particular wallet, release and revoke the vesting.\n', ' */\n', ' \n', 'contract GreedVesting is Ownable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  event Released(address beneficiary, uint256 amount);\n', '  event Revoked(address beneficiary);\n', '\n', '  uint256 public totalVesting;\n', '  mapping (address => uint256) public released;\n', '  mapping (address => bool) public revoked;\n', '  mapping (address => bool) public revocables;\n', '  mapping (address => uint256) public durations;\n', '  mapping (address => uint256) public starts;\n', '  mapping (address => uint256) public cliffs; \n', '  mapping (address => uint256) public amounts; \n', '  mapping (address => uint256) public refunded; \n', '       \n', '  /**\n', '   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n', '   * of the balance will have vested.\n', '   * @param greed address of greed token contract\n', '   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n', '   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n', '   * @param _duration duration in seconds of the period in which the tokens will vest\n', '   * @param _amount amount to be vested\n', '   * @param _revocable whether the vesting is revocable or not\n', '   */\n', '  function addVesting(ERC20Basic greed, address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, uint256 _amount, bool _revocable) public onlyOwner {\n', '    require(_beneficiary != 0x0);\n', '    require(_amount > 0);\n', '    // Make sure that a single address can be granted tokens only once.\n', '    require(starts[_beneficiary] == 0);\n', '    // Check for date inconsistencies that may cause unexpected behavior.\n', '    require(_cliff <= _duration);\n', "    // Check that this grant doesn't exceed the total amount of tokens currently available for vesting.\n", '    require(totalVesting.add(_amount) <= greed.balanceOf(address(this)));\n', '\n', '\trevocables[_beneficiary] = _revocable;\n', '    durations[_beneficiary] = _duration;\n', '    cliffs[_beneficiary] = _start.add(_cliff);\n', '    starts[_beneficiary] = _start;\n', '    amounts[_beneficiary] = _amount;\n', '    totalVesting = totalVesting.add(_amount);\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers vested tokens to beneficiary.\n', '   * @param beneficiary address of the beneficiary to whom vested tokens are transferred\n', '   * @param greed address of greed token contract\n', '   */\n', '  function release(address beneficiary, ERC20Basic greed) public {\n', '      \n', '    require(msg.sender == beneficiary || msg.sender == owner);\n', '\n', '    uint256 unreleased = releasableAmount(beneficiary);\n', '    \n', '    require(unreleased > 0);\n', '\n', '    released[beneficiary] = released[beneficiary].add(unreleased);\n', '\n', '    greed.safeTransfer(beneficiary, unreleased);\n', '\n', '    Released(beneficiary, unreleased);\n', '  }\n', '\n', '  /**\n', '   * @notice Allows the owner to revoke the vesting. Tokens already vested\n', '   * remain in the contract, the rest are returned to the owner.\n', '   * @param beneficiary address of the beneficiary to whom vested tokens are transferred\n', '   * @param greed address of greed token contract\n', '    */\n', '  function revoke(address beneficiary, ERC20Basic greed) public onlyOwner {\n', '    require(revocables[beneficiary]);\n', '    require(!revoked[beneficiary]);\n', '\n', '    uint256 balance = amounts[beneficiary].sub(released[beneficiary]);\n', '\n', '    uint256 unreleased = releasableAmount(beneficiary);\n', '    uint256 refund = balance.sub(unreleased);\n', '\n', '    revoked[beneficiary] = true;\n', '    if (refund != 0) { \n', '\t\tgreed.safeTransfer(owner, refund);\n', '\t\trefunded[beneficiary] = refunded[beneficiary].add(refund);\n', '\t}\n', '    Revoked(beneficiary);\n', '  }\n', '\n', '  /**\n', "   * @dev Calculates the amount that has already vested but hasn't been released yet.\n", '   * @param beneficiary address of the beneficiary to whom vested tokens are transferred\n', '   * \n', '   */\n', '  function releasableAmount(address beneficiary) public constant returns (uint256) {\n', '    return vestedAmount(beneficiary).sub(released[beneficiary]);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested.\n', '   * @param beneficiary address of the beneficiary to whom vested tokens are transferred\n', '   */\n', '  function vestedAmount(address beneficiary) public constant returns (uint256) {\n', '    uint256 totalBalance = amounts[beneficiary].sub(refunded[beneficiary]);\n', '\n', '    if (now < cliffs[beneficiary]) {\n', '      return 0;\n', '    } else if (now >= starts[beneficiary] + durations[beneficiary] || revoked[beneficiary]) {\n', '      return totalBalance;\n', '    } else {\n', '      return totalBalance.mul(now - starts[beneficiary]).div(durations[beneficiary]);\n', '    }\n', '  }\n', '}']