['pragma solidity ^0.4.15;\n', ' \n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'library SafeMath {\n', '    \n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', ' \n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', ' \n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', ' \n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    \n', '  using SafeMath for uint256;\n', ' \n', '  mapping(address => uint256) balances;\n', '\n', '  event ShowTestB(bool _bool);\n', '  event ShowTestU(string _string, uint _uint);\n', '\n', '  //uint256 ico_finish = 1512565200;\n', '  uint256 ico_finish = 1513774800;\n', '\n', '  struct FreezePhases {\n', '    uint256 firstPhaseTime;\n', '    uint256 secondPhaseTime;\n', '    uint256 thirdPhaseTime;\n', '    uint256 fourPhaseTime;\n', '\n', '    uint256 countTokens;\n', '\n', '    uint256 firstPhaseCount;\n', '    uint256 secondPhaseCount;\n', '    uint256 thirdPhaseCount;\n', '    uint256 fourPhaseCount;\n', '  }\n', '\n', '  mapping(address => FreezePhases) founding_tokens;\n', '  mapping(address => FreezePhases) angel_tokens;\n', '  mapping(address => FreezePhases) team_core_tokens;\n', '  mapping(address => FreezePhases) pe_investors_tokens;\n', '\n', '  mapping(address => bool) forceFreeze;\n', '\n', '  address[] founding_addresses;\n', '  address[] angel_addresses;\n', '  address[] team_core_addresses;\n', '  address[] pe_investors_addresses;\n', '\n', '  function isFreeze(address _addr, uint256 _value) public {\n', '    require(!forceFreeze[_addr]);\n', '\n', '    if (now < ico_finish) {\n', '      revert();\n', '    }\n', '\n', '    bool isFounder = false;\n', '    bool isAngel = false;\n', '    bool isTeam = false;\n', '    bool isPE = false;\n', '\n', '    //for founding\n', '    //-----------------------------------------------------//\n', '\n', '    isFounder = findAddress(founding_addresses, _addr);\n', '\n', '    if (isFounder) {\n', '      if (now > founding_tokens[_addr].firstPhaseTime && now < founding_tokens[_addr].secondPhaseTime) {\n', '        if (_value <= founding_tokens[_addr].firstPhaseCount) {\n', '          founding_tokens[_addr].firstPhaseCount = founding_tokens[_addr].firstPhaseCount - _value;\n', '        } else {\n', '          revert();\n', '        }\n', '      } else {\n', '        founding_tokens[_addr].secondPhaseCount = founding_tokens[_addr].secondPhaseCount + founding_tokens[_addr].firstPhaseCount;\n', '        founding_tokens[_addr].firstPhaseCount = 0;\n', '      }\n', '\n', '      if (now > founding_tokens[_addr].secondPhaseTime && now < founding_tokens[_addr].thirdPhaseTime) {\n', '        if (_value <= founding_tokens[_addr].secondPhaseCount) {\n', '          founding_tokens[_addr].secondPhaseCount = founding_tokens[_addr].secondPhaseCount - _value;\n', '        } else {\n', '          revert();\n', '        }\n', '      } else {\n', '        founding_tokens[_addr].thirdPhaseCount = founding_tokens[_addr].thirdPhaseCount + founding_tokens[_addr].secondPhaseCount;\n', '        founding_tokens[_addr].secondPhaseCount = 0;\n', '      }\n', '\n', '      if (now > founding_tokens[_addr].thirdPhaseTime && now < founding_tokens[_addr].fourPhaseTime) {\n', '        if (_value <= founding_tokens[_addr].thirdPhaseCount) {\n', '          founding_tokens[_addr].thirdPhaseCount = founding_tokens[_addr].thirdPhaseCount - _value;\n', '        } else {\n', '          revert();\n', '        }\n', '      } else {\n', '        founding_tokens[_addr].fourPhaseCount = founding_tokens[_addr].fourPhaseCount + founding_tokens[_addr].thirdPhaseCount;\n', '        founding_tokens[_addr].thirdPhaseCount = 0;\n', '      }\n', '\n', '      if (now > founding_tokens[_addr].fourPhaseTime) {\n', '        if (_value <= founding_tokens[_addr].fourPhaseCount) {\n', '          founding_tokens[_addr].fourPhaseCount = founding_tokens[_addr].fourPhaseCount - _value;\n', '        } else {\n', '          revert();\n', '        }\n', '      }\n', '    }\n', '    //-----------------------------------------------------//\n', '\n', '    //for angel\n', '    //-----------------------------------------------------//\n', '\n', '    isAngel = findAddress(angel_addresses, _addr);\n', '\n', '    ShowTestB(isAngel);\n', '    ShowTestU("firstPhaseCount", angel_tokens[_addr].firstPhaseCount);\n', '    ShowTestB(_value <= angel_tokens[_addr].firstPhaseCount);\n', '\n', '    if (isAngel) {\n', '      if (now > angel_tokens[_addr].firstPhaseTime && now < angel_tokens[_addr].secondPhaseTime) {\n', '        if (_value <= angel_tokens[_addr].firstPhaseCount) {\n', '          angel_tokens[_addr].firstPhaseCount = angel_tokens[_addr].firstPhaseCount - _value;\n', '        } else {\n', '          revert();\n', '        }\n', '      } else {\n', '        angel_tokens[_addr].secondPhaseCount = angel_tokens[_addr].secondPhaseCount + angel_tokens[_addr].firstPhaseCount;\n', '        angel_tokens[_addr].firstPhaseCount = 0;\n', '      }\n', '\n', '      if (now > angel_tokens[_addr].secondPhaseTime && now < angel_tokens[_addr].thirdPhaseTime) {\n', '        if (_value <= angel_tokens[_addr].secondPhaseCount) {\n', '          angel_tokens[_addr].secondPhaseCount = angel_tokens[_addr].secondPhaseCount - _value;\n', '        } else {\n', '          revert();\n', '        }\n', '      } else {\n', '        angel_tokens[_addr].thirdPhaseCount = angel_tokens[_addr].thirdPhaseCount + angel_tokens[_addr].secondPhaseCount;\n', '        angel_tokens[_addr].secondPhaseCount = 0;\n', '      }\n', '\n', '      if (now > angel_tokens[_addr].thirdPhaseTime && now < angel_tokens[_addr].fourPhaseTime) {\n', '        if (_value <= angel_tokens[_addr].thirdPhaseCount) {\n', '          angel_tokens[_addr].thirdPhaseCount = angel_tokens[_addr].thirdPhaseCount - _value;\n', '        } else {\n', '          revert();\n', '        }\n', '      } else {\n', '        angel_tokens[_addr].fourPhaseCount = angel_tokens[_addr].fourPhaseCount + angel_tokens[_addr].thirdPhaseCount;\n', '        angel_tokens[_addr].thirdPhaseCount = 0;\n', '      }\n', '\n', '      if (now > angel_tokens[_addr].fourPhaseTime) {\n', '        if (_value <= angel_tokens[_addr].fourPhaseCount) {\n', '          angel_tokens[_addr].fourPhaseCount = angel_tokens[_addr].fourPhaseCount - _value;\n', '        } else {\n', '          revert();\n', '        }\n', '      }\n', '    }\n', '    //-----------------------------------------------------//\n', '\n', '    //for Team Core\n', '    //-----------------------------------------------------//\n', '\n', '    isTeam = findAddress(team_core_addresses, _addr);\n', '\n', '    if (isTeam) {\n', '      if (now > team_core_tokens[_addr].firstPhaseTime && now < team_core_tokens[_addr].secondPhaseTime) {\n', '        if (_value <= team_core_tokens[_addr].firstPhaseCount) {\n', '          team_core_tokens[_addr].firstPhaseCount = team_core_tokens[_addr].firstPhaseCount - _value;\n', '        } else {\n', '          revert();\n', '        }\n', '      } else {\n', '        team_core_tokens[_addr].secondPhaseCount = team_core_tokens[_addr].secondPhaseCount + team_core_tokens[_addr].firstPhaseCount;\n', '        team_core_tokens[_addr].firstPhaseCount = 0;\n', '      }\n', '\n', '      if (now > team_core_tokens[_addr].secondPhaseTime && now < team_core_tokens[_addr].thirdPhaseTime) {\n', '        if (_value <= team_core_tokens[_addr].secondPhaseCount) {\n', '          team_core_tokens[_addr].secondPhaseCount = team_core_tokens[_addr].secondPhaseCount - _value;\n', '        } else {\n', '          revert();\n', '        }\n', '      } else {\n', '        team_core_tokens[_addr].thirdPhaseCount = team_core_tokens[_addr].thirdPhaseCount + team_core_tokens[_addr].secondPhaseCount;\n', '        team_core_tokens[_addr].secondPhaseCount = 0;\n', '      }\n', '\n', '      if (now > team_core_tokens[_addr].thirdPhaseTime && now < team_core_tokens[_addr].fourPhaseTime) {\n', '        if (_value <= team_core_tokens[_addr].thirdPhaseCount) {\n', '          team_core_tokens[_addr].thirdPhaseCount = team_core_tokens[_addr].thirdPhaseCount - _value;\n', '        } else {\n', '          revert();\n', '        }\n', '      } else {\n', '        team_core_tokens[_addr].fourPhaseCount = team_core_tokens[_addr].fourPhaseCount + team_core_tokens[_addr].thirdPhaseCount;\n', '        team_core_tokens[_addr].thirdPhaseCount = 0;\n', '      }\n', '\n', '      if (now > team_core_tokens[_addr].fourPhaseTime) {\n', '        if (_value <= team_core_tokens[_addr].fourPhaseCount) {\n', '          team_core_tokens[_addr].fourPhaseCount = team_core_tokens[_addr].fourPhaseCount - _value;\n', '        } else {\n', '          revert();\n', '        }\n', '      }\n', '    }\n', '    //-----------------------------------------------------//\n', '\n', '    //for PE Investors\n', '    //-----------------------------------------------------//\n', '\n', '    isPE = findAddress(pe_investors_addresses, _addr);\n', '\n', '    if (isPE) {\n', '      if (now > pe_investors_tokens[_addr].firstPhaseTime && now < pe_investors_tokens[_addr].secondPhaseTime) {\n', '        if (_value <= pe_investors_tokens[_addr].firstPhaseCount) {\n', '          pe_investors_tokens[_addr].firstPhaseCount = pe_investors_tokens[_addr].firstPhaseCount - _value;\n', '        } else {\n', '          revert();\n', '        }\n', '      } else {\n', '        pe_investors_tokens[_addr].secondPhaseCount = pe_investors_tokens[_addr].secondPhaseCount + pe_investors_tokens[_addr].firstPhaseCount;\n', '        pe_investors_tokens[_addr].firstPhaseCount = 0;\n', '      }\n', '\n', '      if (now > pe_investors_tokens[_addr].secondPhaseTime && now < pe_investors_tokens[_addr].thirdPhaseTime) {\n', '        if (_value <= pe_investors_tokens[_addr].secondPhaseCount) {\n', '          pe_investors_tokens[_addr].secondPhaseCount = pe_investors_tokens[_addr].secondPhaseCount - _value;\n', '        } else {\n', '          revert();\n', '        }\n', '      } else {\n', '        pe_investors_tokens[_addr].thirdPhaseCount = pe_investors_tokens[_addr].thirdPhaseCount + pe_investors_tokens[_addr].secondPhaseCount;\n', '        pe_investors_tokens[_addr].secondPhaseCount = 0;\n', '      }\n', '\n', '      if (now > pe_investors_tokens[_addr].thirdPhaseTime && now < pe_investors_tokens[_addr].fourPhaseTime) {\n', '        if (_value <= pe_investors_tokens[_addr].thirdPhaseCount) {\n', '          pe_investors_tokens[_addr].thirdPhaseCount = pe_investors_tokens[_addr].thirdPhaseCount - _value;\n', '        } else {\n', '          revert();\n', '        }\n', '      } else {\n', '        pe_investors_tokens[_addr].fourPhaseCount = pe_investors_tokens[_addr].fourPhaseCount + pe_investors_tokens[_addr].thirdPhaseCount;\n', '        pe_investors_tokens[_addr].thirdPhaseCount = 0;\n', '      }\n', '\n', '      if (now > pe_investors_tokens[_addr].fourPhaseTime) {\n', '        if (_value <= pe_investors_tokens[_addr].fourPhaseCount) {\n', '          pe_investors_tokens[_addr].fourPhaseCount = pe_investors_tokens[_addr].fourPhaseCount - _value;\n', '        } else {\n', '          revert();\n', '        }\n', '      }\n', '    }\n', '    //-----------------------------------------------------//\n', '\n', '\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(balances[msg.sender] >= _value);\n', '    isFreeze(msg.sender, _value);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function newTransfer(address _from, address _to, uint256 _value) internal returns (bool) {\n', '    require(balances[_from] >= _value);\n', '    isFreeze(_from, _value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', ' \n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function findAddress(address[] _addresses, address _addr) private returns(bool) {\n', '    for (uint256 i = 0; i < _addresses.length; i++) {\n', '      if (_addresses[i] == _addr) {\n', '        return true;\n', '      }\n', '    }\n', '    return false;\n', '  }\n', ' \n', '}\n', 'contract Ownable {\n', '    \n', '  address public owner;\n', ' \n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', ' \n', '}\n', 'contract StandardToken is ERC20, BasicToken {\n', ' \n', '  mapping (address => mapping (address => uint256)) allowed;\n', ' \n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    isFreeze(_from, _value);\n', '    var _allowance = allowed[_from][msg.sender];\n', ' \n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '}\n', 'contract MintableToken is StandardToken, Ownable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  bool mintingFinished = false;\n', '\n', '  bool private initialize = false;\n', '\n', '  // when ICO Finish\n', '  uint256 firstPhaseTime = 0;\n', '  // when 3 months Finish\n', '  uint256 secondPhaseTime = 0;\n', '  // when 6 months Finish\n', '  uint256 thirdPhaseTime = 0;\n', '  // when 9 months Finish\n', '  uint256 fourPhaseTime = 0;\n', '\n', '  uint256 countTokens = 0;\n', '\n', '  uint256 firstPart = 0;\n', '  uint256 secondPart = 0;\n', '  uint256 thirdPart = 0;\n', '\n', '  // 25%\n', '  uint256 firstPhaseCount = 0;\n', '  // 25%\n', '  uint256 secondPhaseCount = 0;\n', '  // 25%\n', '  uint256 thirdPhaseCount = 0;\n', '  // 25%\n', '  uint256 fourPhaseCount = 0;\n', '\n', '  uint256 totalAmount = 500000000E18;         // 500 000 000;  // with 18 decimals\n', '\n', '  address poolAddress;\n', '\n', '  bool unsoldMove = false;\n', '\n', '  event Mint(address indexed to, uint256 amount);\n', '\n', '    modifier isInitialize() {\n', '    require(!initialize);\n', '    _;\n', '  }\n', '\n', '  function setTotalSupply(address _addr) public onlyOwner isInitialize {\n', '    totalSupply = totalAmount;\n', '    poolAddress = _addr;\n', '    mint(_addr, totalAmount);\n', '    initialize = true;\n', '  }\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  function tokenTransferOwnership(address _address) public onlyOwner {\n', '    transferOwnership(_address);\n', '  }\n', '\n', '  function finishMinting() public onlyOwner {\n', '    mintingFinished = true;\n', '  }\n', '  \n', '  function mint(address _address, uint256 _tokens) canMint onlyOwner public {\n', '\n', '    Mint(_address, _tokens);\n', '\n', '    balances[_address] = balances[_address].add(_tokens);\n', '  }\n', '\n', '  function transferTokens(address _to, uint256 _amount, uint256 freezeTime, uint256 _type) public onlyOwner {\n', '    require(balances[poolAddress] >= _amount);\n', '\n', '    Transfer(poolAddress, _to, _amount);\n', '\n', '    ShowTestU("Before condition",_amount);\n', '\n', '    if (_type == 0) {\n', '      setFreezeForAngel(freezeTime, _to, _amount);\n', '    ShowTestU("Inside", _amount);      \n', '      balances[poolAddress] = balances[poolAddress] - _amount;\n', '      balances[_to] = balances[_to] + _amount;\n', '    }\n', '\n', '    if (_type == 1) {\n', '      setFreezeForFounding(freezeTime, _to, _amount);\n', '      balances[poolAddress] = balances[poolAddress] - _amount;\n', '      balances[_to] = balances[_to] + _amount;\n', '    }\n', '\n', '    if (_type == 2) {\n', '      setFreezeForPEInvestors(freezeTime, _to, _amount);\n', '      balances[poolAddress] = balances[poolAddress] - _amount;\n', '      balances[_to] = balances[_to] + _amount;\n', '    }\n', '  }\n', '\n', '  function transferTokens(address _from, address _to, uint256 _amount, uint256 freezeTime, uint256 _type) public onlyOwner {\n', '    require(balances[_from] >= _amount);\n', '\n', '    Transfer(_from, _to, _amount);\n', '\n', '    if (_type == 3) {\n', '      setFreezeForCoreTeam(freezeTime, _to, _amount);\n', '      balances[_from] = balances[_from] - _amount;\n', '      balances[_to] = balances[_to] + _amount;\n', '    }\n', '  }\n', '\n', '  // 0\n', '  function setFreezeForAngel(uint256 _time, address _address, uint256 _tokens) onlyOwner public {\n', '    ico_finish = _time;\n', '    \n', '    if (angel_tokens[_address].firstPhaseTime != ico_finish) {\n', '      angel_addresses.push(_address);\n', '    }\n', '\n', '    // when ICO Finish\n', '    firstPhaseTime = ico_finish;\n', '    // when 3 months Finish\n', '    secondPhaseTime = ico_finish + 90 days;\n', '    // when 6 months Finish\n', '    thirdPhaseTime = ico_finish + 180 days;\n', '    // when 9 months Finish\n', '    fourPhaseTime = ico_finish + 270 days;\n', '\n', '    countTokens = angel_tokens[_address].countTokens + _tokens;\n', '\n', '    firstPart = _tokens.mul(25).div(100);\n', '\n', '    // 25%\n', '    firstPhaseCount = angel_tokens[_address].firstPhaseCount + firstPart;\n', '    // 25%\n', '    secondPhaseCount = angel_tokens[_address].secondPhaseCount + firstPart;\n', '    // 25%\n', '    thirdPhaseCount = angel_tokens[_address].thirdPhaseCount + firstPart;\n', '    // 25%\n', '    fourPhaseCount = angel_tokens[_address].fourPhaseCount + firstPart;\n', '\n', '    ShowTestU("setFreezeForAngel: firstPhaseCount", firstPhaseCount);\n', '\n', '    FreezePhases memory freezePhase = FreezePhases({firstPhaseTime: firstPhaseTime, secondPhaseTime: secondPhaseTime, thirdPhaseTime: thirdPhaseTime, fourPhaseTime: fourPhaseTime, countTokens: countTokens, firstPhaseCount: firstPhaseCount, secondPhaseCount: secondPhaseCount, thirdPhaseCount: thirdPhaseCount, fourPhaseCount: fourPhaseCount});\n', '    \n', '    angel_tokens[_address] = freezePhase;\n', '\n', '    ShowTestU("setFreezeForAngel: angel_tokens[_address].firstPhaseCount", angel_tokens[_address].firstPhaseCount);\n', '  }\n', '  // 1\n', '  function setFreezeForFounding(uint256 _time, address _address, uint256 _tokens) onlyOwner public {\n', '    ico_finish = _time;\n', '\n', '    if (founding_tokens[_address].firstPhaseTime != ico_finish) {\n', '      founding_addresses.push(_address);\n', '    }\n', '\n', '    // when ICO Finish\n', '    firstPhaseTime = ico_finish;\n', '    // when 3 months Finish\n', '    secondPhaseTime = ico_finish + 180 days;\n', '    // when 6 months Finish\n', '    thirdPhaseTime = ico_finish + 360 days;\n', '    // when 9 months Finish\n', '    fourPhaseTime = ico_finish + 540 days;\n', '\n', '    countTokens = founding_tokens[_address].countTokens + _tokens;\n', '\n', '    firstPart = _tokens.mul(20).div(100);\n', '    secondPart = _tokens.mul(30).div(100);\n', '\n', '    // 20%\n', '    firstPhaseCount = founding_tokens[_address].firstPhaseCount + firstPart;\n', '    // 20%\n', '    secondPhaseCount = founding_tokens[_address].secondPhaseCount + firstPart;\n', '    // 30%\n', '    thirdPhaseCount = founding_tokens[_address].thirdPhaseCount + secondPart;\n', '    // 30%\n', '    fourPhaseCount = founding_tokens[_address].fourPhaseCount + secondPart;\n', '\n', '    FreezePhases memory freezePhase = FreezePhases(firstPhaseTime, secondPhaseTime, thirdPhaseTime, fourPhaseTime, countTokens, firstPhaseCount, secondPhaseCount, thirdPhaseCount, fourPhaseCount);\n', '    \n', '    angel_tokens[_address] = freezePhase;\n', '\n', '  }\n', '  // 2\n', '  function setFreezeForPEInvestors(uint256 _time, address _address, uint256 _tokens) onlyOwner public {\n', '    ico_finish = _time;\n', '\n', '    if (pe_investors_tokens[_address].firstPhaseTime != ico_finish) {\n', '      pe_investors_addresses.push(_address);\n', '    }\n', '\n', '    // when ICO Finish\n', '    firstPhaseTime = ico_finish;\n', '    // when 3 months Finish\n', '    secondPhaseTime = ico_finish + 180 days;\n', '    // when 6 months Finish\n', '    thirdPhaseTime = ico_finish + 360 days;\n', '    // when 9 months Finish\n', '    fourPhaseTime = ico_finish + 540 days;\n', '\n', '    countTokens = pe_investors_tokens[_address].countTokens + _tokens;\n', '\n', '    firstPart = _tokens.mul(20).div(100);\n', '    secondPart = _tokens.mul(30).div(100);\n', '\n', '    // 20%\n', '    firstPhaseCount = pe_investors_tokens[_address].firstPhaseCount + firstPart;\n', '    // 20%\n', '    secondPhaseCount = pe_investors_tokens[_address].secondPhaseCount + firstPart;\n', '    // 30%\n', '    thirdPhaseCount = pe_investors_tokens[_address].thirdPhaseCount + secondPart;\n', '    // 30%\n', '    fourPhaseCount = pe_investors_tokens[_address].fourPhaseCount + secondPart;\n', '  }\n', '  // 3\n', '  function setFreezeForCoreTeam(uint256 _time, address _address, uint256 _tokens) onlyOwner public {\n', '    ico_finish = _time;\n', '\n', '    if (team_core_tokens[_address].firstPhaseTime != ico_finish) {\n', '      team_core_addresses.push(_address);\n', '    }\n', '\n', '    // when ICO Finish\n', '    firstPhaseTime = ico_finish;\n', '    // when 6 months Finish\n', '    secondPhaseTime = ico_finish + 180 days;\n', '    // when 12 months Finish\n', '    thirdPhaseTime = ico_finish + 360 days;\n', '    // when 18 months Finish\n', '    fourPhaseTime = ico_finish + 540 days;\n', '\n', '    countTokens = team_core_tokens[_address].countTokens + _tokens;\n', '\n', '    firstPart = _tokens.mul(5).div(100);\n', '    secondPart = _tokens.mul(10).div(100);\n', '    thirdPart = _tokens.mul(75).div(100);\n', '\n', '    // 5%\n', '    firstPhaseCount = team_core_tokens[_address].firstPhaseCount + firstPart;\n', '    // 10%\n', '    secondPhaseCount = team_core_tokens[_address].secondPhaseCount + secondPart;\n', '    // 10%\n', '    thirdPhaseCount = team_core_tokens[_address].thirdPhaseCount + secondPart;\n', '    // 75%\n', '    fourPhaseCount = team_core_tokens[_address].fourPhaseCount + thirdPart;\n', '  }\n', '\n', '  function withdrowTokens(address _address, uint256 _tokens) onlyOwner public {\n', '    balances[poolAddress] = balances[poolAddress] - _tokens;\n', '    balances[_address] = balances[_address].add(_tokens);\n', '  }\n', '\n', '  function getOwnerToken() public constant returns(address) {\n', '    return owner;\n', '  }\n', '\n', '  function setFreeze(address _addr) public onlyOwner {\n', '    forceFreeze[_addr] = true;\n', '  }\n', '\n', '  function removeFreeze(address _addr) public onlyOwner {\n', '    forceFreeze[_addr] = false;\n', '  }\n', '\n', '  function moveUnsold(address _addr) public onlyOwner {\n', '    require(!unsoldMove);\n', '    \n', '    balances[_addr] = balances[_addr].add(balances[poolAddress]);\n', '\n', '    unsoldMove = true;\n', '  }\n', '\n', '  function newTransferManualTokensnewTransfer(address _from, address _to, uint256 _value) onlyOwner returns (bool) {\n', '    return newTransfer(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', ' \n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', ' \n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', ' \n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', ' \n', '}\n', 'contract SingleTokenCoin is MintableToken {\n', '    \n', '    string public constant name = "ADD Token";\n', '    \n', '    string public constant symbol = "ADD";\n', '    \n', '    uint32 public constant decimals = 18;\n', '    \n', '}']