['pragma solidity ^0.4.16;\n', '\n', '//SafeMath - Math operations with safety checks that throw on error\n', '    \n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'interface token { \n', '    function transfer(address receiver, uint amount) external; \n', '}\n', '\n', 'contract ECT2Crowdsale2 {\n', '  \n', '  using SafeMath for uint256;\n', '\n', '  address public wallet;\n', '  address addressOfTokenUsedAsReward;\n', '  token tokenReward;\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '  uint public fundingGoal;\n', '  uint public minimumFundingGoal;\n', '  uint256 public price;\n', '  uint256 public weiRaised;\n', '  uint256 public stage1Bounty;\n', '  uint256 public stage2Bounty;\n', '  uint256 public stage3Bounty;\n', '  uint256 public stage4Bounty;\n', ' \n', '  mapping(address => uint256) public balanceOf;\n', '  bool fundingGoalReached = false;\n', '  bool crowdsaleClosed = false;\n', ' \n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  event FundTransfer(address backer, uint amount, bool isContribution);\n', '  event GoalReached(address recipient, uint totalAmountRaised);\n', '  \n', '  modifier isMinimum() {\n', '         if(msg.value < 1000000000000000) return;\n', '        _;\n', '    }\n', '    \n', '  modifier afterDeadline() { \n', '      if (now <= endTime) return;\n', '      _;\n', '  }    \n', '\n', '  function ECT2Crowdsale2(\n', '  ) public {\n', '    wallet = 0x55BeA1A0335A8Ea56572b8E66f17196290Ca6467;\n', '    addressOfTokenUsedAsReward = 0x3a799eD72BceF6fc98AeE750C5ACC352CDBA5f6c;\n', '    price = 100 * 1 finney;\n', '    fundingGoal = 50 * 1 finney;\n', '    minimumFundingGoal = 10 * 1 finney;\n', '    tokenReward = token(addressOfTokenUsedAsReward);\n', '    startTime = 1511547000; //18:10 UTC\n', '    stage1Bounty = 1511547300; //18:15 UTC 50%\n', '    stage2Bounty = 1511547600; //18:20 UTC 40%\n', '    stage3Bounty = 1511547900; //18:25 UTC 25%\n', '    stage4Bounty = 1511548200; //18:30 UTC 10%\n', '    endTime = 1511548500; //18:35 UTC 0%\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable isMinimum{\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be sent\n', '    uint256 tokens = (weiAmount) * price;\n', '    \n', '    if(now < stage1Bounty){\n', '      tokens += (tokens * 50) / 100;\n', '    }else if(now < stage2Bounty){\n', '      tokens += (tokens * 40) / 100;\n', '    }else if(now < stage3Bounty){\n', '      tokens += (tokens * 25) / 100;\n', '    }else if(now < stage4Bounty){\n', '      tokens += (tokens * 10) / 100;  \n', '    }\n', '    // update state\n', '    balanceOf[msg.sender] += weiAmount;\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    tokenReward.transfer(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '  }\n', '  \n', '  \n', '  //withdrawal or refund for investor and beneficiary\n', '  function safeWithdrawal() public afterDeadline {\n', '        if (weiRaised < fundingGoal && weiRaised < minimumFundingGoal) {\n', '            uint amount = balanceOf[msg.sender];\n', '            balanceOf[msg.sender] = 0;\n', '            if (amount > 0) {\n', '                if (msg.sender.send(amount)) {\n', '                    FundTransfer(msg.sender, amount, false);\n', '                    /*tokenReward.burnFrom(msg.sender, price * amount);*/\n', '                } else {\n', '                    balanceOf[msg.sender] = amount;\n', '                }\n', '            }\n', '        }\n', '\n', '        if ((weiRaised >= fundingGoal || weiRaised >= minimumFundingGoal) && wallet == msg.sender) {\n', '            if (wallet.send(weiRaised)) {\n', '                FundTransfer(wallet, weiRaised, false);\n', '                GoalReached(wallet, weiRaised);\n', '            } else {\n', '                //If we fail to send the funds to beneficiary, unlock funders balance\n', '                fundingGoalReached = false;\n', '            }\n', '        }\n', '    }\n', '    \n', '    // withdrawEth when minimum cap is reached\n', '  function withdrawEth() private{\n', '        require(this.balance != 0);\n', '        require(weiRaised >= minimumFundingGoal);\n', '\n', '        pendingEthWithdrawal = this.balance;\n', '  }\n', '    uint pendingEthWithdrawal;\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return now > endTime;\n', '  }\n', ' \n', '}']