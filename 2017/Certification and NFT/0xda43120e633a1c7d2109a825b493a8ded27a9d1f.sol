['pragma solidity ^0.4.16;\n', '/**\n', '* @title UNR ICO CONTRACT\n', '* @dev ERC-20 Token Standard Compliant\n', '* @author Fares A. Akel C. f.antonio.akel@gmail.com\n', '*/\n', '\n', '/**\n', ' * @title SafeMath by OpenZeppelin\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '    }\n', '\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract token {\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    }\n', '\n', '/**\n', ' * @title admined\n', ' * @notice This contract is administered\n', ' */\n', 'contract admined {\n', '    address public admin; //Admin address is public\n', '    \n', '    /**\n', '    * @dev This contructor takes the msg.sender as the first administer\n', '    */\n', '    function admined() internal {\n', '        admin = msg.sender; //Set initial admin to contract creator\n', '        Admined(admin);\n', '    }\n', '\n', '    /**\n', '    * @dev This modifier limits function execution to the admin\n', '    */\n', '    modifier onlyAdmin() { //A modifier to define admin-only functions\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @notice This function transfer the adminship of the contract to _newAdmin\n', '    * @param _newAdmin The new admin of the contract\n', '    */\n', '    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered\n', '        admin = _newAdmin;\n', '        TransferAdminship(admin);\n', '    }\n', '\n', '    /**\n', '    * @dev Log Events\n', '    */\n', '    event TransferAdminship(address newAdminister);\n', '    event Admined(address administer);\n', '\n', '}\n', '\n', '\n', 'contract UNRICO is admined {\n', '    using SafeMath for uint256;\n', '    //This ico have 3 stages\n', '    enum State {\n', '        Ongoin,\n', '        Successful\n', '    }\n', '    //public variables\n', '    uint256 public priceOfEthOnUSD;\n', '    State public state = State.Ongoin; //Set initial stage\n', '    uint256 public startTime = now; //block-time when it was deployed\n', '    uint256[5] public price;\n', '    uint256 public HardCap;\n', '    uint256 public totalRaised; //eth in wei\n', '    uint256 public totalDistributed; //tokens\n', '    uint256 public ICOdeadline = startTime.add(27 days);//27 days deadline\n', '    uint256 public completedAt;\n', '    token public tokenReward;\n', '    address public creator;\n', '    address public beneficiary;\n', '    string public campaignUrl;\n', '    uint8 constant version = 1;\n', '\n', '    //events for log\n', '    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\n', '    event LogBeneficiaryPaid(address _beneficiaryAddress);\n', '    event LogFundingSuccessful(uint _totalRaised);\n', '    event LogFunderInitialized(\n', '        address _creator,\n', '        address _beneficiary,\n', '        string _url,\n', '        uint256 _ICOdeadline);\n', '    event LogContributorsPayout(address _addr, uint _amount);\n', '    event PriceUpdate(uint256 _newPrice);\n', '\n', '    modifier notFinished() {\n', '        require(state != State.Successful);\n', '        _;\n', '    }\n', '    /**\n', '    * @notice ICO constructor\n', '    * @param _campaignUrl is the ICO _url\n', '    * @param _addressOfTokenUsedAsReward is the token totalDistributed\n', '    * @param _initialUsdPriceOfEth is the current price in USD for a single ether\n', '    */\n', '    function UNRICO (string _campaignUrl, token _addressOfTokenUsedAsReward, uint256 _initialUsdPriceOfEth) public {\n', '        creator = msg.sender;\n', '        beneficiary = msg.sender;\n', '        campaignUrl = _campaignUrl;\n', '        tokenReward = token(_addressOfTokenUsedAsReward);\n', '        priceOfEthOnUSD = _initialUsdPriceOfEth;\n', '        HardCap = SafeMath.div(7260000*10**18,priceOfEthOnUSD); //7,260,000$\n', '        price[0] = SafeMath.div(1 * 10 ** 15, priceOfEthOnUSD.mul(1666666));\n', '        price[1] = SafeMath.div(1 * 10 ** 11, priceOfEthOnUSD.mul(125));\n', '        price[2] = SafeMath.div(1 * 10 ** 15, priceOfEthOnUSD.mul(1111111));\n', '        price[3] = SafeMath.div(1 * 10 ** 15, priceOfEthOnUSD.mul(1052631));\n', '        price[4] = SafeMath.div(1 * 10 ** 10, priceOfEthOnUSD.mul(10));\n', '\n', '        LogFunderInitialized(\n', '            creator,\n', '            beneficiary,\n', '            campaignUrl,\n', '            ICOdeadline);\n', '        PriceUpdate(priceOfEthOnUSD);\n', '    }\n', '\n', '    function updatePriceOfEth(uint256 _newPrice) onlyAdmin public {\n', '        priceOfEthOnUSD = _newPrice;\n', '        price[0] = SafeMath.div(1 * 10 ** 15, priceOfEthOnUSD.mul(1666666));\n', '        price[1] = SafeMath.div(1 * 10 ** 11, priceOfEthOnUSD.mul(125));\n', '        price[2] = SafeMath.div(1 * 10 ** 15, priceOfEthOnUSD.mul(1111111));\n', '        price[3] = SafeMath.div(1 * 10 ** 15, priceOfEthOnUSD.mul(1052631));\n', '        price[4] = SafeMath.div(1 * 10 ** 10, priceOfEthOnUSD.mul(10));\n', '        HardCap = SafeMath.div(7260000*10**18,priceOfEthOnUSD); //7,260,000$\n', '        PriceUpdate(_newPrice);\n', '    }\n', '\n', '    /**\n', '    * @notice contribution handler\n', '    */\n', '    function contribute() public notFinished payable {\n', '\n', '        uint256 tokenBought;\n', '        uint256 required;\n', '        totalRaised = totalRaised.add(msg.value);\n', '\n', '        if(totalDistributed < 2000000 * (10 ** 8)){\n', '            tokenBought = msg.value.div(price[0]);\n', '            required = SafeMath.div(10000,6);\n', '            require(tokenBought >= required);\n', '        }\n', '        else if (totalDistributed < 20000000 * (10 ** 8)){\n', '            tokenBought = msg.value.div(price[1]);\n', '            required = SafeMath.div(10000,8);\n', '            require(tokenBought >= required);\n', '        }\n', '        else if (totalDistributed < 40000000 * (10 ** 8)){\n', '            tokenBought = msg.value.div(price[2]);\n', '            required = SafeMath.div(10000,9);\n', '            require(tokenBought >= required);\n', '        }\n', '        else if (totalDistributed < 60000000 * (10 ** 8)){\n', '            tokenBought = msg.value.div(price[3]);\n', '            required = SafeMath.div(100000,95);\n', '            require(tokenBought >= required);\n', '        }\n', '        else if (totalDistributed < 80000000 * (10 ** 8)){\n', '            tokenBought = msg.value.div(price[4]);\n', '            required = 1000;\n', '            require(tokenBought >= required);\n', '\n', '        }\n', '\n', '\n', '        totalDistributed = totalDistributed.add(tokenBought);\n', '        tokenReward.transfer(msg.sender, tokenBought);\n', '        \n', '        LogFundingReceived(msg.sender, msg.value, totalRaised);\n', '        LogContributorsPayout(msg.sender, tokenBought);\n', '        \n', '        checkIfFundingCompleteOrExpired();\n', '    }\n', '\n', '    /**\n', '    * @notice check status\n', '    */\n', '    function checkIfFundingCompleteOrExpired() public {\n', '        \n', '        if(now < ICOdeadline && state!=State.Successful){ //if we are on ICO period and its not Successful\n', '            if(state == State.Ongoin && totalRaised >= HardCap){ //if we are Ongoin and we pass the HardCap\n', '                state = State.Successful; //We are on Successful state\n', '                completedAt = now; //ICO is complete\n', '            }\n', '        }\n', '        else if(now > ICOdeadline && state!=State.Successful ) { //if we reach ico deadline and its not Successful yet\n', '            state = State.Successful; //ico becomes Successful\n', '            completedAt = now; //ICO is complete\n', '            LogFundingSuccessful(totalRaised); //we log the finish\n', '            finished(); //and execute closure\n', '        }\n', '    }\n', '\n', '    function payOut() public {\n', '        require(msg.sender == beneficiary);\n', '        require(beneficiary.send(this.balance));\n', '        LogBeneficiaryPaid(beneficiary);\n', '    }\n', '\n', '   /**\n', '    * @notice closure handler\n', '    */\n', '    function finished() public { //When finished eth are transfered to beneficiary\n', '        require(state == State.Successful);\n', '        uint256 remanent = tokenReward.balanceOf(this);\n', '\n', '        require(beneficiary.send(this.balance));\n', '        tokenReward.transfer(beneficiary,remanent);\n', '\n', '        LogBeneficiaryPaid(beneficiary);\n', '        LogContributorsPayout(beneficiary, remanent);\n', '    }\n', '\n', '    function () public payable {\n', '        contribute();\n', '    }\n', '}']