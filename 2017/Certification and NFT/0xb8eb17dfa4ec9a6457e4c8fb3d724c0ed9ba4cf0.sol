['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != 0x0);\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () public payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '\n', '}\n', '\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedCrowdsale(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  // overriding Crowdsale#validPurchase to add extra cap logic\n', '  // @return true if investors can buy at the moment\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinCap = weiRaised.add(msg.value) <= cap;\n', '    return super.validPurchase() && withinCap;\n', '  }\n', '\n', '  // overriding Crowdsale#hasEnded to add cap logic\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    return super.hasEnded() || capReached;\n', '  }\n', '\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract WhiteListCrowdsale is\n', '  CappedCrowdsale,\n', '  Ownable\n', '{\n', '\n', '  /**\n', '   * @dev Rate of bonus tokens received by investors during the whitelist period of the crowdsale.\n', '   */\n', '  uint8 public constant WHITELIST_BONUS_RATE = 10;\n', '\n', '  /**\n', '   * @dev Rate of bonus tokens received by a referring investor,\n', '   * expressed as % of total bonus tokens issued for the purchase.\n', '   */\n', '  uint8 public constant REFERRAL_SHARE_RATE = 50;\n', '\n', '  /**\n', '   * @dev Timestamp until which it is possible to add an investor to the whitelist.\n', '   */\n', '  uint256 public whiteListRegistrationEndTime;\n', '\n', '  /**\n', '   * @dev Timestamp after which anyone can participate in the crowdsale.\n', '   */\n', '  uint256 public whiteListEndTime;\n', '\n', '  /**\n', '   * @dev Whitelisted addresses.\n', '   */\n', '  mapping(address => bool) public isWhiteListed;\n', '\n', '  /**\n', '   * @dev Referral codes associated to their referring addresses.\n', '   */\n', '  mapping(bytes32 => address) internal referralCodes;\n', '\n', '  /**\n', '   * @dev Maps referred investors to their referrers (referred => referring).\n', '   */\n', '  mapping(address => address) internal referrals;\n', '\n', '  /**\n', '   * @dev Event fired when an address is added to the whitelist.\n', '   * @param investor whitelisted investor\n', '   * @param referralCode referral code of the whitelisted investor\n', '   */\n', '  event WhiteListedInvestorAdded(\n', '    address indexed investor,\n', '    string referralCode\n', '  );\n', '\n', '  /**\n', '   * event for bonus token emmited\n', '   * @param referralCode referral code of the whitelisted investor\n', '   * @param referredInvestor address of the referred investor\n', '   */\n', '  event ReferredInvestorAdded(\n', '    string referralCode,\n', '    address referredInvestor\n', '  );\n', '\n', '  /**\n', '   * @dev Event fired when bonus tokens are emitted for referred purchases.\n', '   * @param beneficiary who got the tokens\n', '   * @param amount bonus tokens issued\n', '   */\n', '  event ReferredBonusTokensEmitted(\n', '    address indexed beneficiary,\n', '    uint256 amount\n', '  );\n', '\n', '  /**\n', '   * @dev Event fired when bonus tokens are emitted for whitelist or referred purchases.\n', '   * @param beneficiary who got the tokens\n', '   * @param amount bonus tokens issued\n', '   */\n', '  event WhiteListBonusTokensEmitted(\n', '    address indexed beneficiary,\n', '    uint256 amount\n', '  );\n', '\n', '  /**\n', '   * @dev WhiteListCrowdsale construction.\n', '   * @param _whiteListRegistrationEndTime time until which white list registration is still possible\n', '   * @param _whiteListEndTime time until which only white list purchases are accepted\n', '   */\n', '  function WhiteListCrowdsale(uint256 _whiteListRegistrationEndTime, uint256 _whiteListEndTime) public {\n', '    require(_whiteListEndTime > startTime);\n', '\n', '    whiteListEndTime = _whiteListEndTime;\n', '    whiteListRegistrationEndTime = _whiteListRegistrationEndTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Overriding Crowdsale#buyTokens to add extra whitelist and referral logic.\n', '   * @param _beneficiary address that is buying tokens.\n', '   */\n', '  function buyTokens(address _beneficiary) public payable\n', '  {\n', '    require(validWhiteListedPurchase(_beneficiary));\n', '\n', '    // Buys tokens and transfers them to _beneficiary.\n', '    super.buyTokens(_beneficiary);\n', '    \n', '    uint256 bonusTokens = computeBonusTokens(_beneficiary, msg.value);\n', '    if (isReferred(_beneficiary))\n', '    {\n', '      uint256 bonusTokensForReferral = bonusTokens.mul(REFERRAL_SHARE_RATE).div(100);\n', '      uint256 bonusTokensForReferred = bonusTokens.sub(bonusTokensForReferral);\n', '      token.mint(_beneficiary, bonusTokensForReferred);\n', '      token.mint(referrals[_beneficiary], bonusTokensForReferral);\n', '      ReferredBonusTokensEmitted(_beneficiary, bonusTokensForReferred);\n', '      WhiteListBonusTokensEmitted(referrals[_beneficiary], bonusTokensForReferral);\n', '    }\n', '    else if (isWhiteListed[_beneficiary])\n', '    {\n', '      token.mint(_beneficiary, bonusTokens);\n', '      WhiteListBonusTokensEmitted(_beneficiary, bonusTokens);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Adds an investor to the whitelist if registration is open. Fails otherwise.\n', '   * @param _investor whitelisted investor\n', "   * @param _referralCode investor's referral code\n", '   */\n', '  function addWhiteListedInvestor(address _investor, string _referralCode) public\n', '  {\n', '    require(block.timestamp <= whiteListRegistrationEndTime);\n', '    require(_investor != 0);\n', '    require(!isWhiteListed[_investor]);\n', '    bytes32 referralCodeHash = keccak256(_referralCode);\n', '    require(referralCodes[referralCodeHash] == 0x0);\n', '    \n', '    isWhiteListed[_investor] = true;\n', '    referralCodes[referralCodeHash] = _investor;\n', '    WhiteListedInvestorAdded(_investor, _referralCode);\n', '  }\n', '\n', '  /**\n', '   * @dev Adds up to 30 whitelisted investors. To be called one or more times\n', '   * for initial whitelist loading.\n', '   * @param _investors whitelisted investors.\n', '   * @param _referralCodes keccak-256 hashes of corresponding investor referral codes.\n', '   */\n', '  function loadWhiteList(address[] _investors, bytes32[] _referralCodes) public onlyOwner\n', '  {\n', '    require(_investors.length <= 30);\n', '    require(_investors.length == _referralCodes.length);\n', '\n', '    for (uint i = 0; i < _investors.length; i++)\n', '    {\n', '      isWhiteListed[_investors[i]] = true;\n', '      referralCodes[_referralCodes[i]] = _investors[i];\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Adds a referred investor to the second-level whitelist.\n', '   * @param _referredInvestor whitelisted investor.\n', "   * @param _referralCode investor's referral code.\n", '   */\n', '  function addReferredInvestor(string _referralCode, address _referredInvestor) public\n', '  {\n', '    require(!hasEnded());\n', '    require(!isWhiteListed[_referredInvestor]);\n', '    require(_referredInvestor != 0);\n', '    require(referrals[_referredInvestor] == 0x0);\n', '    bytes32 referralCodeHash = keccak256(_referralCode);\n', '    require(referralCodes[referralCodeHash] != 0);\n', '\n', '    referrals[_referredInvestor] = referralCodes[referralCodeHash];\n', '    ReferredInvestorAdded(_referralCode, _referredInvestor);\n', '  }\n', '\n', '  /**\n', '   * @dev Adds up to 30 referred investors. To be called one or more times\n', '   * for initial referred list loading.\n', '   * @param _referralCodes keccak-256 hashes of referral codes.\n', '   * @param _investors corresponding referred investors.\n', '   */\n', '  function loadReferredInvestors(bytes32[] _referralCodes, address[] _investors) public onlyOwner\n', '  {\n', '    require(_investors.length <= 30);\n', '    require(_investors.length == _referralCodes.length);\n', '\n', '    for (uint i = 0; i < _investors.length; i++)\n', '    {\n', '      referrals[_investors[i]] = referralCodes[_referralCodes[i]];\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Returns true if _investor is a referred investor.\n', '   * @param _investor address to check against the list of referred investors.\n', '   */\n', '  function isReferred(address _investor) public constant returns (bool)\n', '  {\n', '    return referrals[_investor] != 0x0;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns true if _investor is a whitelisted or referred investor,\n', "   * or the whitelist period has ended (and the crowdsale hasn't) and everyone can buy.\n", '   * @param _investor investor who is making the purchase.\n', '   */\n', '  function validWhiteListedPurchase(address _investor) internal constant returns (bool)\n', '  {\n', '    return isWhiteListed[_investor] || isReferred(_investor) || block.timestamp > whiteListEndTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the number of bonus tokens for a whitelisted or referred purchase.\n', '   * Returns zero if the purchase is not from a whitelisted or referred investor.\n', '   * @param _weiAmount purchase amount.\n', '   */\n', '  function computeBonusTokens(address _beneficiary, uint256 _weiAmount) internal constant returns (uint256)\n', '  {\n', '    if (isReferred(_beneficiary) || isWhiteListed[_beneficiary]) {\n', '      uint256 bonusTokens = _weiAmount.mul(rate).mul(WHITELIST_BONUS_RATE).div(100);\n', '      if (block.timestamp > whiteListEndTime) {\n', '        bonusTokens = bonusTokens.div(2);\n', '      }\n', '      return bonusTokens;\n', '    }\n', '    else\n', '    {\n', '      return 0;\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '}\n', '\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  function RefundVault(address _wallet) public {\n', '    require(_wallet != 0x0);\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    Closed();\n', '    wallet.transfer(this.balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    RefundsEnabled();\n', '  }\n', '\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', 'contract RefundableCrowdsale is FinalizableCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // minimum amount of funds to be raised in weis\n', '  uint256 public goal;\n', '\n', '  // refund vault used to hold funds while crowdsale is running\n', '  RefundVault public vault;\n', '\n', '  function RefundableCrowdsale(uint256 _goal) public {\n', '    require(_goal > 0);\n', '    vault = new RefundVault(wallet);\n', '    goal = _goal;\n', '  }\n', '\n', "  // We're overriding the fund forwarding from Crowdsale.\n", '  // In addition to sending the funds, we want to call\n', '  // the RefundVault deposit function\n', '  function forwardFunds() internal {\n', '    vault.deposit.value(msg.value)(msg.sender);\n', '  }\n', '\n', '  // if crowdsale is unsuccessful, investors can claim refunds here\n', '  function claimRefund() public {\n', '    require(isFinalized);\n', '    require(!goalReached());\n', '\n', '    vault.refund(msg.sender);\n', '  }\n', '\n', '  // vault finalization task, called when owner calls finalize()\n', '  function finalization() internal {\n', '    if (goalReached()) {\n', '      vault.close();\n', '    } else {\n', '      vault.enableRefunds();\n', '    }\n', '\n', '    super.finalization();\n', '  }\n', '\n', '  function goalReached() public constant returns (bool) {\n', '    return weiRaised >= goal;\n', '  }\n', '\n', '}\n', '\n', 'contract Destructible is Ownable {\n', '\n', '  function Destructible() public payable { }\n', '\n', '  /**\n', '   * @dev Transfers the current balance to the owner and terminates the contract.\n', '   */\n', '  function destroy() onlyOwner public {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  function destroyAndSend(address _recipient) onlyOwner public {\n', '    selfdestruct(_recipient);\n', '  }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract DemeterCrowdsale is\n', '  RefundableCrowdsale,\n', '  WhiteListCrowdsale,\n', '  Pausable,\n', '  Destructible\n', '{\n', '\n', '  /**\n', '   * @dev Each time an investor purchases, he gets this % of the minted tokens\n', '   * (plus bonus if applicable), while the company gets 70% (minus bonus).\n', '   */\n', '  uint8 constant public PERC_TOKENS_TO_INVESTOR = 30;\n', '\n', '  /**\n', '   * @dev Portion of total tokens reserved for future token releases.\n', '   * Documentation-only. Unused in code, as the release part is calculated by subtraction.\n', '   */\n', '  uint8 constant public PERC_TOKENS_TO_RELEASE = 25;\n', '\n', '  /**\n', '   * @dev Address to which the release tokens are credited.\n', '   */\n', '  address constant public RELEASE_WALLET = 0x867D85437d27cA97e1EB574250efbba487aca637;\n', '\n', '  /**\n', '   * Portion of total tokens reserved for dev. team.\n', '   */\n', '  uint8 constant public PERC_TOKENS_TO_DEV = 20;\n', '\n', '  /**\n', '   * @dev Address to which the dev. tokens are credited.\n', '   */\n', '  address constant public DEV_WALLET = 0x70323222694584c68BD5a29194bb72c248e715F7;\n', '\n', '  /**\n', '   * Portion of total tokens reserved for business dev.\n', '   */\n', '  uint8 constant public PERC_TOKENS_TO_BIZDEV = 25;\n', '\n', '  /**\n', '   * @dev Address to which the business dev. tokens are credited.\n', '   */\n', '  address constant public BIZDEV_WALLET = 0xE43053e265F04f690021735E02BBA559Cea681D6;\n', '\n', '  /**\n', '   * @dev Event fired whenever company tokens are issued for a purchase.\n', '   * @param investor who made the purchase\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens minted for the company\n', '   */\n', '  event CompanyTokensIssued(\n', '    address indexed investor,\n', '    uint256 value,\n', '    uint256 amount\n', '  );\n', '\n', '  /**\n', '   * @dev DemeterCrowdsale construction.\n', '   * @param _startTime beginning of crowdsale.\n', '   * @param _endTime end of crowdsale.\n', '   * @param _whiteListRegistrationEndTime time until which whitelist registration is still possible.\n', '   * @param _whiteListEndTime time until which only whitelist purchases are accepted.\n', '   * @param _rate how many tokens per ether in case of no whitelist or referral bonuses.\n', '   * @param _cap crowdsale hard cap in wei.\n', '   * @param _goal minimum crowdsale goal in wei; if not reached, causes refunds to be available.\n', '   * @param _wallet where the raised ethers are transferred in case of successful crowdsale.\n', '   */\n', '  function DemeterCrowdsale(\n', '    uint256 _startTime,\n', '    uint256 _endTime,\n', '    uint256 _whiteListRegistrationEndTime,\n', '    uint256 _whiteListEndTime,\n', '    uint256 _rate,\n', '    uint256 _cap,\n', '    uint256 _goal,\n', '    address _wallet\n', '  ) public\n', '    Crowdsale(_startTime, _endTime, _rate, _wallet)\n', '    CappedCrowdsale(_cap)\n', '    RefundableCrowdsale(_goal)\n', '    WhiteListCrowdsale(_whiteListRegistrationEndTime, _whiteListEndTime)\n', '  {\n', '    DemeterToken(token).setUnlockTime(_endTime);\n', '  }\n', '\n', '  /**\n', '   * @dev Called when a purchase is made. Override to issue company tokens\n', '   * in addition to bought and bonus tokens.\n', '   * @param _beneficiary the investor that buys the tokens.\n', '   */\n', '  function buyTokens(address _beneficiary) public payable whenNotPaused {\n', '    require(msg.value >= 0.1 ether);\n', '    // buys tokens (including referral or whitelist tokens) and\n', '    // transfers them to _beneficiary.\n', '    super.buyTokens(_beneficiary);\n', '    \n', '    // mints additional tokens for the company and distributes them to the company wallets.\n', '    issueCompanyTokens(_beneficiary, msg.value);\n', '  }\n', '\n', '  /**\n', '   * @dev Closes the vault, terminates the contract and the token contract as well.\n', '   * Only allowed while the vault is open (not when refunds are enabled or the vault\n', '   * is already closed). Balance would be transferred to the owner, but it is\n', '   * always zero anyway.\n', '   */\n', '  function destroy() public onlyOwner {\n', '    vault.close();\n', '    super.destroy();\n', '    DemeterToken(token).destroyAndSend(this);\n', '  }\n', '\n', '  /**\n', '   * @dev Closes the vault, terminates the contract and the token contract as well.\n', '   * Only allowed while the vault is open (not when refunds are enabled or the vault\n', '   * is already closed). Balance would be transferred to _recipient, but it is\n', '   * always zero anyway.\n', '   */\n', '  function destroyAndSend(address _recipient) public onlyOwner {\n', '    vault.close();\n', '    super.destroyAndSend(_recipient);\n', '    DemeterToken(token).destroyAndSend(_recipient);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the owner to change the minimum goal during the sale.\n', '   * @param _goal new goal in wei.\n', '   */\n', '  function updateGoal(uint256 _goal) public onlyOwner {\n', '    require(_goal >= 0 && _goal <= cap);\n', '    require(!hasEnded());\n', '\n', '    goal = _goal;\n', '  }\n', '\n', '  /**\n', '   * @dev Mints additional tokens for the company and distributes them to the company wallets.\n', '   * @param _investor the investor that bought tokens.\n', '   * @param _weiAmount the amount paid in weis.\n', '   */\n', '  function issueCompanyTokens(address _investor, uint256 _weiAmount) internal {\n', '    uint256 investorTokens = _weiAmount.mul(rate);\n', '    uint256 bonusTokens = computeBonusTokens(_investor, _weiAmount);\n', '    uint256 companyTokens = investorTokens.mul(100 - PERC_TOKENS_TO_INVESTOR).div(PERC_TOKENS_TO_INVESTOR);\n', '    uint256 totalTokens = investorTokens.add(companyTokens);\n', '    // distribute total tokens among the three wallets.\n', '    uint256 devTokens = totalTokens.mul(PERC_TOKENS_TO_DEV).div(100);\n', '    token.mint(DEV_WALLET, devTokens);\n', '    // We take out bonus tokens from bizDev amount.\n', '    uint256 bizDevTokens = (totalTokens.mul(PERC_TOKENS_TO_BIZDEV).div(100)).sub(bonusTokens);\n', '    token.mint(BIZDEV_WALLET, bizDevTokens);\n', '    uint256 actualCompanyTokens = companyTokens.sub(bonusTokens);\n', '    uint256 releaseTokens = actualCompanyTokens.sub(bizDevTokens).sub(devTokens);\n', '    token.mint(RELEASE_WALLET, releaseTokens);\n', '\n', '    CompanyTokensIssued(_investor, _weiAmount, actualCompanyTokens);\n', '  }\n', '\n', '  /**\n', '   * @dev Override to create our specific token contract.\n', '   */\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new DemeterToken();\n', '  }\n', '\n', '  /**\n', '   * Immediately unlocks tokens. To be used in case of early close of the sale.\n', '   */\n', '  function unlockTokens() internal {\n', '    if (DemeterToken(token).unlockTime() > block.timestamp) {\n', '      DemeterToken(token).setUnlockTime(block.timestamp);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Unlock the tokens immediately if the sale closes prematurely.\n', '   */\n', '  function finalization() internal {\n', '    super.finalization();\n', '    unlockTokens();\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract TimeLockedToken is MintableToken\n', '{\n', '\n', '  /**\n', '   * @dev Timestamp after which tokens can be transferred.\n', '   */\n', '  uint256 public unlockTime = 0;\n', '\n', '  /**\n', '   * @dev Checks whether it can transfer or otherwise throws.\n', '   */\n', '  modifier canTransfer() {\n', '    require(unlockTime == 0 || block.timestamp > unlockTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Sets the date and time since which tokens can be transfered.\n', '   * It can only be moved back, and not in the past.\n', '   * @param _unlockTime New unlock timestamp.\n', '   */\n', '  function setUnlockTime(uint256 _unlockTime) public onlyOwner {\n', '    require(unlockTime == 0 || _unlockTime < unlockTime);\n', '    require(_unlockTime >= block.timestamp);\n', '\n', '    unlockTime = _unlockTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks modifier and allows transfer if tokens are not locked.\n', '   * @param _to The address that will recieve the tokens.\n', '   * @param _value The amount of tokens to be transferred.\n', '   */\n', '  function transfer(address _to, uint256 _value) public canTransfer returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Checks modifier and allows transfer if tokens are not locked.\n', '  * @param _from The address that will send the tokens.\n', '  * @param _to The address that will recieve the tokens.\n', '  * @param _value The amount of tokens to be transferred.\n', '  */\n', '  function transferFrom(address _from, address _to, uint256 _value) public canTransfer returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '}\n', '\n', 'contract DemeterToken is TimeLockedToken, Destructible\n', '{\n', '  string public name = "Demeter";\n', '  string public symbol = "DMT";\n', '  uint256 public decimals = 18;\n', '}']