['pragma solidity ^0.4.13;\n', '\n', 'contract ArgumentsChecker {\n', '\n', '    /// @dev check which prevents short address attack\n', '    modifier payloadSizeIs(uint size) {\n', '       require(msg.data.length == size + 4 /* function selector */);\n', '       _;\n', '    }\n', '\n', '    /// @dev check that address is valid\n', '    modifier validAddress(address addr) {\n', '        require(addr != address(0));\n', '        _;\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private rentrancy_lock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!rentrancy_lock);\n', '    rentrancy_lock = true;\n', '    _;\n', '    rentrancy_lock = false;\n', '  }\n', '\n', '}\n', '\n', 'contract CrowdsaleBase is ArgumentsChecker, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '\n', '    function CrowdsaleBase(address owner80, address owner20, string token_name, string token_symbol)\n', '        public\n', '    {\n', '        m_funds = new LightFundsRegistry(owner80, owner20);\n', '        m_token = new TokenBase(token_name, token_symbol);\n', '\n', '        assert(! hasHardCap() || getMaximumFunds() >= getMinimumFunds());\n', '    }\n', '\n', '\n', '    // PUBLIC interface\n', '\n', '    // fallback function as a shortcut\n', '    function()\n', '        public\n', '        payable\n', '    {\n', '        require(0 == msg.data.length);\n', '        buy();  // only internal call here!\n', '    }\n', '\n', '    /// @notice crowdsale participation\n', '    function buy()\n', '        public  // dont mark as external!\n', '        payable\n', '    {\n', '        buyInternal(msg.sender, msg.value);\n', '    }\n', '\n', '\n', '    /// @notice refund\n', '    function withdrawPayments()\n', '        external\n', '    {\n', '        m_funds.withdrawPayments(msg.sender);\n', '    }\n', '\n', '\n', '    // INTERNAL\n', '\n', '    /// @dev payment processing\n', '    function buyInternal(address investor, uint payment)\n', '        internal\n', '        nonReentrant\n', '    {\n', '        require(payment >= getMinInvestment());\n', '        if (getCurrentTime() >= getEndTime())\n', '            finish();\n', '\n', '        if (m_finished) {\n', '            // saving provided gas\n', '            investor.transfer(payment);\n', '            return;\n', '        }\n', '\n', '        uint startingWeiCollected = getWeiCollected();\n', '        uint startingInvariant = this.balance.add(startingWeiCollected);\n', '\n', '        uint change;\n', '        if (hasHardCap()) {\n', '            // return or update payment if needed\n', '            uint paymentAllowed = getMaximumFunds().sub(getWeiCollected());\n', '            assert(0 != paymentAllowed);\n', '\n', '            if (paymentAllowed < payment) {\n', '                change = payment.sub(paymentAllowed);\n', '                payment = paymentAllowed;\n', '            }\n', '        }\n', '\n', '        // issue tokens\n', '        require(m_token.mint(investor, calculateTokens(payment)));\n', '\n', '        // record payment\n', '        m_funds.invested.value(payment)(investor);\n', '\n', '        assert((!hasHardCap() || getWeiCollected() <= getMaximumFunds()) && getWeiCollected() > startingWeiCollected);\n', '        FundTransfer(investor, payment, true);\n', '\n', '        if (hasHardCap() && getWeiCollected() == getMaximumFunds())\n', '            finish();\n', '\n', '        if (change > 0)\n', '            investor.transfer(change);\n', '\n', '        assert(startingInvariant == this.balance.add(getWeiCollected()).add(change));\n', '    }\n', '\n', '    function finish() internal {\n', '        if (m_finished)\n', '            return;\n', '\n', '        if (getWeiCollected() >= getMinimumFunds()) {\n', '            // Success\n', '            m_funds.changeState(LightFundsRegistry.State.SUCCEEDED);\n', '            m_token.ICOSuccess();\n', '        }\n', '        else {\n', '            // Failure\n', '            m_funds.changeState(LightFundsRegistry.State.REFUNDING);\n', '        }\n', '\n', '        m_finished = true;\n', '    }\n', '\n', '\n', '    /// @notice whether to apply hard cap check logic via getMaximumFunds() method\n', '    function hasHardCap() internal constant returns (bool) {\n', '        return getMaximumFunds() != 0;\n', '    }\n', '\n', '    /// @dev to be overridden in tests\n', '    function getCurrentTime() internal constant returns (uint) {\n', '        return now;\n', '    }\n', '\n', '    /// @notice maximum investments to be accepted during the sale (in wei)\n', '    function getMaximumFunds() internal constant returns (uint) {\n', '        return euroCents2wei(getMaximumFundsInEuroCents());\n', '    }\n', '\n', '    /// @notice minimum amount of funding to consider the sale as successful (in wei)\n', '    function getMinimumFunds() internal constant returns (uint) {\n', '        return euroCents2wei(getMinimumFundsInEuroCents());\n', '    }\n', '\n', '    /// @notice end time of the sale\n', '    function getEndTime() public pure returns (uint) {\n', '        return 1521331200;\n', '    }\n', '\n', '    /// @notice minimal amount of one investment (in wei)\n', '    function getMinInvestment() public pure returns (uint) {\n', '        return 10 finney;\n', '    }\n', '\n', '    /// @dev smallest divisible token units (token wei) in one token\n', '    function tokenWeiInToken() internal constant returns (uint) {\n', '        return uint(10) ** uint(m_token.decimals());\n', '    }\n', '\n', '    /// @dev calculates token amount for given investment\n', '    function calculateTokens(uint payment) internal constant returns (uint) {\n', '        return wei2euroCents(payment).mul(tokenWeiInToken()).div(tokenPriceInEuroCents());\n', '    }\n', '\n', '\n', '    // conversions\n', '\n', '    function wei2euroCents(uint wei_) public view returns (uint) {\n', '        return wei_.mul(euroCentsInOneEther()).div(1 ether);\n', '    }\n', '\n', '\n', '    function euroCents2wei(uint euroCents) public view returns (uint) {\n', '        return euroCents.mul(1 ether).div(euroCentsInOneEther());\n', '    }\n', '\n', '\n', '    // stat\n', '\n', '    /// @notice amount of euro collected\n', '    function getEuroCollected() public constant returns (uint) {\n', '        return wei2euroCents(getWeiCollected()).div(100);\n', '    }\n', '\n', '    /// @notice amount of wei collected\n', '    function getWeiCollected() public constant returns (uint) {\n', '        return m_funds.totalInvested();\n', '    }\n', '\n', '    /// @notice amount of wei-tokens minted\n', '    function getTokenMinted() public constant returns (uint) {\n', '        return m_token.totalSupply();\n', '    }\n', '\n', '\n', '    // SETTINGS\n', '\n', '    /// @notice maximum investments to be accepted during the sale (in euro-cents)\n', '    function getMaximumFundsInEuroCents() public constant returns (uint);\n', '\n', '    /// @notice minimum amount of funding to consider the sale as successful (in euro-cents)\n', '    function getMinimumFundsInEuroCents() public constant returns (uint);\n', '\n', '    /// @notice euro-cents per 1 ether\n', '    function euroCentsInOneEther() public constant returns (uint);\n', '\n', '    /// @notice price of one token (1e18 wei-tokens) in euro cents\n', '    function tokenPriceInEuroCents() public constant returns (uint);\n', '\n', '\n', '    // FIELDS\n', '\n', '    /// @dev contract responsible for funds accounting\n', '    LightFundsRegistry public m_funds;\n', '\n', '    /// @dev contract responsible for token accounting\n', '    TokenBase public m_token;\n', '\n', '    bool m_finished = false;\n', '}\n', '\n', 'contract LightFundsRegistry is ArgumentsChecker, Ownable, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '\n', '    enum State {\n', '        // gathering funds\n', '        GATHERING,\n', '        // returning funds to investors\n', '        REFUNDING,\n', '        // funds sent to owners\n', '        SUCCEEDED\n', '    }\n', '\n', '    event StateChanged(State _state);\n', '    event Invested(address indexed investor, uint256 amount);\n', '    event EtherSent(address indexed to, uint value);\n', '    event RefundSent(address indexed to, uint value);\n', '\n', '\n', '    modifier requiresState(State _state) {\n', '        require(m_state == _state);\n', '        _;\n', '    }\n', '\n', '\n', '    // PUBLIC interface\n', '\n', '    function LightFundsRegistry(address owner80, address owner20)\n', '        public\n', '        validAddress(owner80)\n', '        validAddress(owner20)\n', '    {\n', '        m_owner80 = owner80;\n', '        m_owner20 = owner20;\n', '    }\n', '\n', '    /// @dev performs only allowed state transitions\n', '    function changeState(State _newState)\n', '        external\n', '        onlyOwner\n', '    {\n', '        assert(m_state != _newState);\n', '\n', '        if (State.GATHERING == m_state) {   assert(State.REFUNDING == _newState || State.SUCCEEDED == _newState); }\n', '        else assert(false);\n', '\n', '        m_state = _newState;\n', '        StateChanged(m_state);\n', '\n', '        if (State.SUCCEEDED == _newState) {\n', '            uint _80percent = this.balance.mul(80).div(100);\n', '            m_owner80.transfer(_80percent);\n', '            EtherSent(m_owner80, _80percent);\n', '\n', '            uint _20percent = this.balance;\n', '            m_owner20.transfer(_20percent);\n', '            EtherSent(m_owner20, _20percent);\n', '        }\n', '    }\n', '\n', '    /// @dev records an investment\n', '    function invested(address _investor)\n', '        external\n', '        payable\n', '        onlyOwner\n', '        requiresState(State.GATHERING)\n', '    {\n', '        uint256 amount = msg.value;\n', '        require(0 != amount);\n', '\n', '        // register investor\n', '        if (0 == m_weiBalances[_investor])\n', '            m_investors.push(_investor);\n', '\n', '        // register payment\n', '        totalInvested = totalInvested.add(amount);\n', '        m_weiBalances[_investor] = m_weiBalances[_investor].add(amount);\n', '\n', '        Invested(_investor, amount);\n', '    }\n', '\n', '    /// @notice withdraw accumulated balance, called by payee in case crowdsale has failed\n', '    function withdrawPayments(address payee)\n', '        external\n', '        nonReentrant\n', '        onlyOwner\n', '        requiresState(State.REFUNDING)\n', '    {\n', '        uint256 payment = m_weiBalances[payee];\n', '\n', '        require(payment != 0);\n', '        require(this.balance >= payment);\n', '\n', '        totalInvested = totalInvested.sub(payment);\n', '        m_weiBalances[payee] = 0;\n', '\n', '        payee.transfer(payment);\n', '        RefundSent(payee, payment);\n', '    }\n', '\n', '    function getInvestorsCount() external view returns (uint) { return m_investors.length; }\n', '\n', '\n', '    // FIELDS\n', '\n', '    /// @notice total amount of investments in wei\n', '    uint256 public totalInvested;\n', '\n', '    /// @notice state of the registry\n', '    State public m_state = State.GATHERING;\n', '\n', '    /// @dev balances of investors in wei\n', '    mapping(address => uint256) public m_weiBalances;\n', '\n', '    /// @dev list of unique investors\n', '    address[] public m_investors;\n', '\n', '    address public m_owner80;\n', '    address public m_owner20;\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract CirculatingToken is StandardToken {\n', '\n', '    event CirculationEnabled();\n', '\n', '    modifier requiresCirculation {\n', '        require(m_isCirculating);\n', '        _;\n', '    }\n', '\n', '\n', '    // PUBLIC interface\n', '\n', '    function transfer(address _to, uint256 _value) requiresCirculation returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) requiresCirculation returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) requiresCirculation returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '\n', '    // INTERNAL functions\n', '\n', '    function enableCirculation() internal returns (bool) {\n', '        if (m_isCirculating)\n', '            return false;\n', '\n', '        m_isCirculating = true;\n', '        CirculationEnabled();\n', '        return true;\n', '    }\n', '\n', '\n', '    // FIELDS\n', '\n', '    /// @notice are the circulation started?\n', '    bool public m_isCirculating;\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract TokenBase is MintableToken, CirculatingToken {\n', '\n', '    event Burn(address indexed from, uint256 amount);\n', '\n', '\n', '    string m_name;\n', '    string m_symbol;\n', '    uint8 public constant decimals = 18;\n', '\n', '\n', '    function TokenBase(string _name, string _symbol) public {\n', '        require(bytes(_name).length > 0 && bytes(_name).length <= 32);\n', '        require(bytes(_symbol).length > 0 && bytes(_symbol).length <= 32);\n', '\n', '        m_name = _name;\n', '        m_symbol = _symbol;\n', '    }\n', '\n', '\n', '    function burn(uint256 _amount) external returns (bool) {\n', '        address _from = msg.sender;\n', '        require(_amount>0);\n', '        require(_amount<=balances[_from]);\n', '\n', '        totalSupply = totalSupply.sub(_amount);\n', '        balances[_from] = balances[_from].sub(_amount);\n', '        Burn(_from, _amount);\n', '        Transfer(_from, address(0), _amount);\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    function name() public view returns (string) {\n', '        return m_name;\n', '    }\n', '\n', '    function symbol() public view returns (string) {\n', '        return m_symbol;\n', '    }\n', '\n', '\n', '    function ICOSuccess()\n', '        external\n', '        onlyOwner\n', '    {\n', '        assert(finishMinting());\n', '        assert(enableCirculation());\n', '    }\n', '}\n', '\n', '\n', 'contract EESTSale6 is CrowdsaleBase {\n', '\n', '    function EESTSale6() public\n', '        CrowdsaleBase(\n', '            /*owner80*/ address(0xade21bda21be237f8b13a494a46b122c5f1f26fb),\n', '            /*owner20*/ address(0xa6809a7e050ca9ea9e4d2ccedc88f07d6ada09aa),\n', '            "Electronic exchange sign-token 6", "EEST6")\n', '    {\n', '    }\n', '\n', '\n', '    /// @notice maximum investments to be accepted during the sale (in euro-cents)\n', '    function getMaximumFundsInEuroCents() public constant returns (uint) {\n', '        return 6000000000;\n', '    }\n', '\n', '    /// @notice minimum amount of funding to consider the sale as successful (in euro-cents)\n', '    function getMinimumFundsInEuroCents() public constant returns (uint) {\n', '        return 6000000000;\n', '    }\n', '\n', '    /// @notice euro-cents per 1 ether\n', '    function euroCentsInOneEther() public constant returns (uint) {\n', '        return 58000;\n', '    }\n', '\n', '    /// @notice price of one token (1e18 wei-tokens) in euro cents\n', '    function tokenPriceInEuroCents() public constant returns (uint) {\n', '        return 1000;\n', '    }\n', '}']