['pragma solidity 0.4.19;\n', '\n', '\n', 'contract InterfaceDeusETH {\n', '    bool public gameOver;\n', '    bool public gameOverByUser;\n', '    function totalSupply() public view returns (uint256);\n', '    function livingSupply() public view returns (uint256);\n', '    function getState(uint256 _id) public returns (uint256);\n', '    function getHolder(uint256 _id) public returns (address);\n', '}\n', '\n', '\n', 'contract FundsKeeper {\n', '    using SafeMath for uint256;\n', '    InterfaceDeusETH private lottery = InterfaceDeusETH(0x0);\n', '    bool public started = false;\n', '\n', '    // address of tokens\n', '    address public deuseth;\n', '\n', '    uint256 public weiReceived;\n', '\n', '    // address of team\n', '    address public owner;\n', '    bool public salarySent = false;\n', '\n', '    uint256 public totalPayments = 0;\n', '\n', '    mapping(uint256 => bool) public payments;\n', '\n', '    event Bank(uint256 indexed _sum, uint256 indexed _add);\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function FundsKeeper(address _owner) public {\n', '        require(_owner != address(0));\n', '        owner = _owner;\n', '    }\n', '\n', '    function () external payable {\n', '        weiReceive();\n', '    }\n', '\n', '    function getGain(uint256 _id) public {\n', '        require((lottery.gameOver() && salarySent) || lottery.gameOverByUser());\n', '        require(lottery.getHolder(_id) == msg.sender);\n', '        require(lottery.getState(_id) == 1); //living token only\n', '        require(payments[_id] == false);\n', '\n', '        address winner = msg.sender;\n', '\n', '        uint256 gain = calcGain();\n', '        require(gain != 0);\n', '        require(this.balance >= gain);\n', '\n', '        totalPayments = totalPayments.add(gain);\n', '        payments[_id] = true;\n', '\n', '        winner.transfer(gain);\n', '    }\n', '\n', '    function setLottery(address _lottery) public onlyOwner {\n', '        require(!started);\n', '        lottery = InterfaceDeusETH(_lottery);\n', '        deuseth = _lottery;\n', '        started = true;\n', '    }\n', '\n', '    function getTeamSalary() public onlyOwner {\n', '        require(!salarySent);\n', '        require(msg.sender == owner);\n', '        require(lottery.gameOver());\n', '        salarySent = true;\n', '        weiReceived = this.balance;\n', '        uint256 salary = weiReceived/10;\n', '        weiReceived = weiReceived.sub(salary);\n', '        owner.transfer(salary);\n', '    }\n', '\n', '    function weiReceive() internal {\n', '        Bank(this.balance, msg.value);\n', '    }\n', '\n', '    function calcGain() internal returns (uint256) {\n', '        if (lottery.gameOverByUser() && (weiReceived == 0)) {\n', '            weiReceived = this.balance;\n', '        }\n', '        return weiReceived/lottery.livingSupply();\n', '    }\n', '}\n', '\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']