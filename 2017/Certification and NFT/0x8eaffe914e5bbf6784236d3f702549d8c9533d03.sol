['pragma solidity ^ 0.4.18;\n', '\n', '/**\n', '    Data format\n', '\n', '    32 bytes = 128bits\n', '    \n', '    ---\n', '     0 10 eth (enough for 1M Ether)\n', '    10 4  votes\n', '    14 4  first timestamp\n', '    18 10 name \n', '    28 1  approved 0=no 1=yes\n', '    29 1  selected 0=no 1=yes\n', '    30 2  list position \n', '\n', '    ---\n', '\n', ' */\n', 'contract CryptoBabyName {\n', '    uint8 constant S_NAME_POS = 18;\n', '    uint8 constant S_NAME_SIZE = 10;\n', '    uint8 constant S_SCORE_POS = 0;\n', '    uint8 constant S_SCORE_SIZE = 10;\n', '    uint8 constant S_VOTES_POS = 10;\n', '    uint8 constant S_VOTES_SIZE = 4;\n', '    uint8 constant S_TIMESTAMP_POS = 14;\n', '    uint8 constant S_TIMESTAMP_SIZE = 4;\n', '    uint8 constant S_APPROVED_POS = 28;\n', '    uint8 constant S_APPROVED_SIZE = 1;\n', '    uint8 constant S_SELECTED_POS = 29;\n', '    uint8 constant S_SELECTED_SIZE = 1;\n', '\n', '\n', '    address public owner;\n', '    address public beneficiary;\n', '\n', '    mapping(bytes10 => uint) leaderboard;\n', '    mapping(address => mapping(bytes10 => uint)) voters;\n', '\n', '    uint[100] allNames;\n', '\n', '    mapping(string => string) metadata;\n', '\n', '\n', '    uint babyName;\n', '    uint babyBirthday;\n', '\n', '    uint counter = 0;\n', '    modifier restricted() {\n', '        if (msg.sender == owner) _;\n', '    }\n', '\n', '    function CryptoBabyName() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    event Vote(address voter, string name, uint value);\n', '    event NewSuggestion(address voter, string name, uint number);\n', '    event BabyBorn(string name, uint birthday);\n', '\n', '    // VOTING\n', '    /// @notice Voting. Send any amount of Ether to vote. \n', '    /// @param name Name to vote for. 2-10 characters of English Alphabet\n', '    function vote(string name) external payable{\n', '        _vote(name, msg.value, msg.sender);\n', '    }\n', '\n', '    function () public payable{\n', '        if (msg.data.length >= 2 && msg.data.length <= 10) {\n', '            _vote(string(msg.data), msg.value, msg.sender);\n', '        }\n', '    }\n', '\n', '    function _vote(string name, uint value, address voter) private {\n', '        require(babyName == 0);\n', '\n', '        bytes10 name10 = normalizeAndCheckName(bytes(name));\n', '        if (leaderboard[name10] != 0) { //existing name\n', '            uint newVal = leaderboard[name10];\n', '            newVal = addToPart(newVal, S_SCORE_POS, S_SCORE_SIZE, value);//value\n', '            newVal = addToPart(newVal, S_VOTES_POS, S_VOTES_SIZE, 1);//vote count\n', '\n', '            _update(name10, newVal);\n', '        } else { //new name\n', '            uint uni = 0xFFFF;//0xFFFF = unsaved mark\n', '            uni = setPart(uni, S_SCORE_POS, S_SCORE_SIZE, value);\n', '            uint uname = uint(name10);\n', '            uni = setPart(uni, S_NAME_POS, S_NAME_SIZE, uname);\n', '            uni = setPart(uni, S_VOTES_POS, S_VOTES_SIZE, 1);\n', '            uni = setPart(uni, S_TIMESTAMP_POS, S_TIMESTAMP_SIZE, block.timestamp);\n', '\n', '            uni |= 0xFFFF;//mark unsaved\n', '            _update(name10, uni);\n', '            counter += 1;\n', '            NewSuggestion(voter, name, counter);\n', '        }\n', '\n', '        voters[voter][name10] += value; //save voter info\n', '\n', '        Vote(voter, name, value);\n', '    }\n', '\n', '    function didVoteForName(address voter, string name) public view returns(uint value){\n', '        value = voters[voter][normalizeAndCheckName(bytes(name))];\n', '    }\n', '\n', '    function _update(bytes10 name10, uint updated) private {\n', '        uint16 idx = uint16(updated);\n', '        if (idx == 0xFFFF) {\n', '            uint currentBottom;\n', '            uint bottomIndex;\n', '            (currentBottom, bottomIndex) = bottomName();\n', '\n', '            if (updated > currentBottom) {\n', '                //remove old score\n', '                if (getPart(currentBottom, S_SCORE_POS, S_SCORE_SIZE) > 0) {\n', '                    currentBottom = currentBottom | uint(0xFFFF);//remove index\n', '                    bytes10 bottomName10 = bytes10(getPart(currentBottom, S_NAME_POS, S_NAME_SIZE));\n', '                    leaderboard[bottomName10] = currentBottom;\n', '                }\n', '                //update the new one\n', '                updated = (updated & ~uint(0xFFFF)) | bottomIndex;\n', '                allNames[bottomIndex] = updated;\n', '            }\n', '        } else {\n', '            allNames[idx] = updated;\n', '        }\n', '        leaderboard[name10] = updated;\n', '    }\n', '\n', '    function getPart(uint val, uint8 pos, uint8 sizeBytes) private pure returns(uint result){\n', '        uint mask = makeMask(sizeBytes);\n', '        result = (val >> ((32 - (pos + sizeBytes)) * 8)) & mask;\n', '    }\n', '\n', '    function makeMask(uint8 size) pure private returns(uint mask){\n', '        mask = (uint(1) << (size * 8)) - 1;\n', '    }\n', '\n', '    function setPart(uint val, uint8 pos, uint8 sizeBytes, uint newValue) private pure returns(uint result){\n', '        uint mask = makeMask(sizeBytes);\n', '        result = (val & ~(mask << (((32 - (pos + sizeBytes)) * 8)))) | ((newValue & mask) << (((32 - (pos + sizeBytes)) * 8)));\n', '    }\n', '\n', '    function addToPart(uint val, uint8 pos, uint8 sizeBytes, uint value) private pure returns(uint result){\n', '        result = setPart(val, pos, sizeBytes, getPart(val, pos, sizeBytes) + value);\n', '    }\n', '\n', '\n', '    //GETING RESULTS\n', '\n', '    function bottomName() public view returns(uint name, uint index){\n', '        uint16 n = uint16(allNames.length);\n', '        uint j = 0;\n', '        name = allNames[0];\n', '        index = 0;\n', '        for (j = 1; j < n; j++) {\n', '            uint t = allNames[j];\n', '            if (t < name) {\n', '                name = t;\n', '                index = j;\n', '            }\n', '        }\n', '    }\n', '\n', '    function getTopN(uint nn) public view returns(uint[] top){\n', '        uint n = nn;\n', '        if (n > allNames.length) {\n', '            n = allNames.length;\n', '        }\n', '        top = new uint[](n);\n', '        uint cnt = allNames.length;\n', '        uint usedNames;\n', '\n', '        for (uint j = 0; j < n; j++ ) {\n', '            uint maxI = 0;\n', '            uint maxScore = 0;\n', '            bool found = false;\n', '            for (uint i = 0; i < cnt; i++ ) {\n', '                if (allNames[i] > maxScore) {\n', '                    if ((usedNames & (uint(1) << i)) == 0) {\n', '                        maxScore = allNames[i];\n', '                        maxI = i;\n', '                        found = true;\n', '                    }\n', '                }\n', '            }\n', '            if (found) {\n', '                usedNames |= uint(1) << maxI;\n', '                top[j] = maxScore;\n', '            } else {\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    function getTopNames() external view returns(uint[100]){\n', '        return allNames;\n', '    }\n', '\n', '    function getCount() external view returns(uint count){\n', '        count = counter;\n', '    }\n', '\n', '    function getScoreForName(string name) external view returns(uint){\n', '        return leaderboard[normalizeAndCheckName(bytes(name))];\n', '    }\n', '\n', '    //approval\n', '\n', '    function approve(string name, uint8 approval) external {\n', '        require(msg.sender == owner);\n', '\n', '        bytes10 name10 = normalizeAndCheckName(bytes(name));\n', '        uint uname = leaderboard[name10];\n', '        if (uname != 0) {\n', '            uname = setPart(uname, S_APPROVED_POS, S_APPROVED_SIZE, approval);\n', '            _update(name10, uname);\n', '        }\n', '    }\n', '\n', '\n', '\n', '    function redeem(uint _value) external{\n', '        require(msg.sender == owner);\n', '        uint value = _value;\n', '\n', '        if (value == 0) {\n', '            value = this.balance;\n', '        }\n', '        owner.transfer(value);\n', '    }\n', '\n', '    //\n', '    function babyBornEndVoting(string name, uint birthday) external returns(uint finalName){\n', '        require(msg.sender == owner);\n', '\n', '        bytes10 name10 = normalizeAndCheckName(bytes(name));\n', '        finalName = leaderboard[name10];\n', '        if (finalName != 0) {\n', '            babyName = finalName;\n', '            babyBirthday = birthday;\n', '            BabyBorn(name, birthday);\n', '        }\n', '    }\n', '\n', '    function getSelectedName() external view returns(uint name, uint birthday){\n', '        name = babyName;\n', '        birthday = babyBirthday;\n', '    }\n', '\n', '\n', '    function normalizeAndCheckName(bytes name) private pure returns(bytes10 name10){\n', '        require(name.length <= 10);\n', '        require(name.length >= 2);\n', '        for (uint8 i = 0; i < name.length; i++ ) {\n', '            bytes1 chr = name[i] & ~0x20;//UPERCASE\n', '            require(chr >= 0x41 && chr <= 0x5A);//only A-Z\n', '            name[i] = chr;\n', '            name10 |= bytes10(chr) >> (8 * i);\n', '        }\n', '    }\n', '\n', '}']