['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract Garlicoin is ERC20Interface, Owned {\n', '    using SafeMath for uint;\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    uint etherCost1;\n', '    uint etherCost2;\n', '    uint etherCost3;\n', '    uint deadline1;\n', '    uint deadline2;\n', '    uint deadline3;\n', '    uint etherCostOfEachToken;\n', '    bool burnt = false;\n', '\n', '    function Garlicoin() public {\n', '        symbol = "GLC";\n', '        name = "Garlicoin";\n', '        decimals = 18;\n', '        etherCost1 = 0.1 finney;\n', '        etherCost2 = 0.15 finney;\n', '        etherCost3 = 0.25 finney;\n', '        _totalSupply = 1000000 * 10**uint(decimals);\n', '        balances[owner] = _totalSupply;\n', '        Transfer(address(0), owner, _totalSupply);\n', '        deadline1 = now + 1 * 1 days;\n', '        deadline2 = now + 4 * 1 days;\n', '        deadline3 = now + 14 * 1 days;\n', '        \n', '    }\n', '\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    function withdraw() public {\n', '        if (msg.sender != owner) {\n', '            return;\n', '        }\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // If you've made it this far in the code, I probably don't have to tell you\n", "    // how dogshit this crypto is. You might tell yourself that it's obviously \n", "    // a bad investment because of this. But what if it wasn't? What if its\n", '    // useless, pathetic nature makes it not only special, but legendary? What\n', '    // if years, even decades from now, when economists discuss the network of \n', '    // manic crazed millenials fueling the great cryptocurrency bubble, they \n', "    // all use the same example, the epitome of hype, the hobo's puddle of urine\n", "    // that was Garlicoin? They'd give lectures on how within days it had \n", '    // reached fifteen times its original value, and in a year it was the world\n', '    // cryptocurrency standard to replace Bitcoin.\n', '    \n', "    // I'm not going to tell you that any of this is going to happen, but what \n", '    // I will tell you is this is a chance for you to be part of history, \n', '    // forever engraved into the immutable, pseudo-eternal Ethereum blockchain.\n', '    \n', '    // Now please buy my shitcoin so I can afford dinner tonight.\n', '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        require(now <= deadline3);\n', '        if (now > deadline3) {\n', '            revert();\n', '        } else if (now <= deadline1) {\n', '            etherCostOfEachToken = etherCost1;\n', '        } else if (now <= deadline2) {\n', '            etherCostOfEachToken = etherCost2;\n', '        } else if (now <= deadline3) {\n', '            etherCostOfEachToken = etherCost3;\n', '        }\n', '        uint weiAmount = msg.value;\n', '        uint glcAmount = weiAmount / etherCostOfEachToken * 1000000000000000000;\n', '        balances[owner] = balances[owner].sub(glcAmount);\n', '        balances[msg.sender] = balances[msg.sender].add(glcAmount);\n', '        Transfer(owner, msg.sender, glcAmount);\n', '    }\n', '    \n', '    function burn () public {\n', '        if (burnt == true) {\n', '            return;\n', '        } else {\n', '            if (now <= deadline3) {\n', '                return;\n', '            }\n', '            burnt = true;\n', '            balances[owner] = 0;\n', '        }\n', '    }\n', '\n', '\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']