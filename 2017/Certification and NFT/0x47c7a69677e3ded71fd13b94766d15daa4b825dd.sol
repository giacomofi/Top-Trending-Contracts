['pragma solidity ^0.4.18;\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'contract SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable, SafeMath{\n', '  enum State { Active, Refunding, Closed }\n', '  mapping (address => uint256) public deposited;\n', '  mapping (address => uint256) public refunded;\n', '  State public state;\n', '  address[] public reserveWallet;\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '  /**\n', '   * @dev This constructor sets the addresses of\n', '   * 10 reserve wallets.\n', '   * and forwarding it if crowdsale is successful.\n', '   * @param _reserveWallet address[5] The addresses of reserve wallet.\n', '   */\n', '  function RefundVault(address[] _reserveWallet) {\n', '    state = State.Active;\n', '    reserveWallet = _reserveWallet;\n', '  }\n', '  /**\n', '   * @dev This function is called when user buy tokens. Only RefundVault\n', '   * contract stores the Ether user sent which forwarded from crowdsale\n', '   * contract.\n', '   * @param investor address The address who buy the token from crowdsale.\n', '   */\n', '  function deposit(address investor) onlyOwner payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = add(deposited[investor], msg.value);\n', '  }\n', '  event Transferred(address _to, uint _value);\n', '  /**\n', '   * @dev This function is called when crowdsale is successfully finalized.\n', '   */\n', '  function close() onlyOwner {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    uint256 balance = this.balance;\n', '    uint256 reserveAmountForEach = div(balance, reserveWallet.length);\n', '    for(uint8 i = 0; i < reserveWallet.length; i++){\n', '      reserveWallet[i].transfer(reserveAmountForEach);\n', '      Transferred(reserveWallet[i], reserveAmountForEach);\n', '    }\n', '    Closed();\n', '  }\n', '  /**\n', '   * @dev This function is called when crowdsale is unsuccessfully finalized\n', '   * and refund is required.\n', '   */\n', '  function enableRefunds() onlyOwner {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    RefundsEnabled();\n', '  }\n', '  /**\n', '   * @dev This function allows for user to refund Ether.\n', '   */\n', '  function refund(address investor) returns (bool) {\n', '    require(state == State.Refunding);\n', '    if (refunded[investor] > 0) {\n', '      return false;\n', '    }\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    refunded[investor] = depositedValue;\n', '    investor.transfer(depositedValue);\n', '    Refunded(investor, depositedValue);\n', '    return true;\n', '  }\n', '}']