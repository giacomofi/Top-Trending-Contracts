['/**\n', ' * Copyright 2017 Icofunding S.L. (https://icofunding.com)\n', ' * \n', ' */\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' * Reference: https://github.com/OpenZeppelin/zeppelin-solidity/commit/353285e5d96477b4abb86f7cde9187e84ed251ac\n', ' */\n', 'contract SafeMath {\n', '  function safeMul(uint a, uint b) internal constant returns (uint) {\n', '    uint c = a * b;\n', '\n', '    assert(a == 0 || c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint a, uint b) internal constant returns (uint) {    \n', '    uint c = a / b;\n', '\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint a, uint b) internal constant returns (uint) {\n', '    require(b <= a);\n', '\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint a, uint b) internal constant returns (uint) {\n', '    uint c = a + b;\n', '\n', '    assert(c>=a && c>=b);\n', '\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract EtherReceiverInterface {\n', '  function receiveEther() public payable;\n', '}\n', '\n', '/**\n', ' * Escrow contract to manage the funds collected\n', ' */\n', 'contract Escrow is SafeMath, EtherReceiverInterface {\n', '  // Sample thresholds.\n', '  uint[3] threshold = [0 ether, 21008 ether, 1000000 ether];\n', '  // Different rates for each phase.\n', '  uint[2] rate = [4, 1];\n', '\n', '  // Adresses that will receive funds\n', '  address public project;\n', '  address public icofunding;\n', '\n', '  // Block from when the funds will be released\n', '  uint public lockUntil;\n', '\n', '  // Wei\n', '  uint public totalCollected; // total amount of wei collected\n', '\n', '  modifier locked() {\n', '    require(block.number >= lockUntil);\n', '\n', '    _;\n', '  }\n', '\n', '  event e_Withdraw(uint block, uint fee, uint amount);\n', '\n', '  function Escrow(uint _lockUntil, address _icofunding, address _project) {\n', '    lockUntil = _lockUntil;\n', '    icofunding = _icofunding;\n', '    project = _project;\n', '  }\n', '\n', '  // Sends the funds collected to the addresses "icofunding" and "project"\n', '  // The ether is distributed following the formula below\n', '  // Only exeuted after "lockUntil"\n', '  function withdraw() public locked {\n', '    // Calculates the amount to send to each address\n', '    uint fee = getFee(this.balance);\n', '    uint amount = safeSub(this.balance, fee);\n', '\n', '    // Sends the ether\n', '    icofunding.transfer(fee);\n', '    project.transfer(amount);\n', '\n', '    e_Withdraw(block.number, fee, amount);\n', '  }\n', '\n', '  // Calculates the variable fees depending on the amount, thresholds and rates set.\n', '  function getFee(uint value) public constant returns (uint) {\n', '    uint fee;\n', '    uint slice;\n', '    uint aux;\n', '\n', '    for(uint i = 0; i < 2; i++) {\n', '      aux = value;\n', '      if(value > threshold[i+1])\n', '        aux = threshold[i+1];\n', '\n', '      if(threshold[i] < aux) {\n', '        slice = safeSub(aux, threshold[i]);\n', '\n', '        fee = safeAdd(fee, safeDiv(safeMul(slice, rate[i]), 100));\n', '      }\n', '    }\n', '\n', '    return fee;\n', '  }\n', '\n', '  function receiveEther() public payable {\n', '    totalCollected += msg.value;\n', '  }\n', '\n', '  function() payable {\n', '    totalCollected += msg.value;\n', '  }\n', '}']