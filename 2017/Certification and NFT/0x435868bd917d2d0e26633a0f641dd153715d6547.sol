['/*    Devery Funds\n', '======================== */\n', '\n', '// ERC20 Interface: https://github.com/ethereum/EIPs/issues/20\n', 'contract ERC20 {\n', '  function transfer(address _to, uint256 _value) returns (bool success);\n', '  function balanceOf(address _owner) constant returns (uint256 balance);\n', '}\n', '\n', 'contract BuyerFund {\n', '  // Store the amount of ETH deposited by each account.\n', '  mapping (address => uint256) public balances; \n', '  \n', '  // Store amount of eth deposited for picops verification.\n', '  mapping (address => uint256) public picops_balances; \n', '  \n', '  // Track whether the contract has bought the tokens yet.\n', '  bool public bought_tokens; \n', '\n', '  // Whether contract is enabled.\n', '  bool public contract_enabled = true;\n', '  \n', '  // Record ETH value of tokens currently held by contract.\n', '  uint256 public contract_eth_value; \n', '  \n', '  // The minimum amount of ETH that must be deposited before the buy-in can be performed.\n', '  uint256 constant public min_required_amount = 20 ether; \n', '\n', '  // Creator address\n', '  address constant public creator = 0x2E2E356b67d82D6f4F5D54FFCBcfFf4351D2e56c;\n', '  \n', '  // Default crowdsale address.\n', '  address public sale = 0xf58546F5CDE2a7ff5C91AFc63B43380F0C198BE8;\n', '\n', '  // Picops current user\n', '  address public picops_user;\n', '\n', '  // Picops enabled bool\n', '  bool public is_verified = false;\n', '\n', '  // Password\n', '  bytes32 public h_pwd = 0x30f5931696381f3826a0a496cf17fecdf9c83e15089c9a3bbd804a3319a1384e; \n', '\n', '  // Password for sale change\n', '  bytes32 public s_pwd = 0x8d9b2b8f1327f8bad773f0f3af0cb4f3fbd8abfad8797a28d1d01e354982c7de; \n', '\n', '  // Creator fee\n', '  uint256 public creator_fee; \n', '\n', '  // Claim block for abandoned tokens. \n', '  uint256 public claim_block = 5350521;\n', '\n', '  // Change address block.\n', '  uint256 public change_block = 4722681;\n', '\n', '  // Allows any user to withdraw his tokens.\n', "  // Takes the token's ERC20 address as argument as it is unknown at the time of contract deployment.\n", '  function perform_withdraw(address tokenAddress) {\n', "    // Disallow withdraw if tokens haven't been bought yet.\n", '    require(bought_tokens);\n', '    \n', '    // Retrieve current token balance of contract.\n', '    ERC20 token = ERC20(tokenAddress);\n', '\n', '    // Token balance\n', '    uint256 contract_token_balance = token.balanceOf(address(this));\n', '      \n', '    // Disallow token withdrawals if there are no tokens to withdraw.\n', '    require(contract_token_balance != 0);\n', '      \n', "    // Store the user's token balance in a temporary variable.\n", '    uint256 tokens_to_withdraw = (balances[msg.sender] * contract_token_balance) / contract_eth_value;\n', '      \n', '    // Update the value of tokens currently held by the contract.\n', '    contract_eth_value -= balances[msg.sender];\n', '      \n', "    // Update the user's balance prior to sending to prevent recursive call.\n", '    balances[msg.sender] = 0;\n', '\n', '    // Picops verifier reward. 1% of tokens.\n', '    uint256 fee = tokens_to_withdraw / 100;\n', '\n', '    // Send the funds.  Throws on failure to prevent loss of funds.\n', '    require(token.transfer(msg.sender, tokens_to_withdraw - fee));\n', '\n', '    // Send the fee to the verifier. 1% fee.\n', '    require(token.transfer(picops_user, fee));\n', '  }\n', '  \n', '  // Allows any user to get his eth refunded\n', '  function refund_me() {\n', '    require(this.balance > 0);\n', '\n', "    // Store the user's balance prior to withdrawal in a temporary variable.\n", '    uint256 eth_to_withdraw = balances[msg.sender];\n', '\n', "    // Update the user's balance prior to sending ETH to prevent recursive call.\n", '    balances[msg.sender] = 0;\n', '\n', "    // Return the user's funds. \n", '    msg.sender.transfer(eth_to_withdraw);\n', '  }\n', '  \n', '  // Buy the tokens. Sends ETH to the presale wallet and records the ETH amount held in the contract.\n', '  function buy_the_tokens(bytes32 _pwd) {\n', '    // Balance greater than minimum.\n', '    require(this.balance > min_required_amount); \n', '\n', '    // Not bought tokens\n', '    require(!bought_tokens);\n', '    \n', '    // Require password or creator\n', '    require(msg.sender == creator || h_pwd == keccak256(_pwd));\n', '\n', '    // Record that the contract has bought the tokens.\n', '    bought_tokens = true;\n', '\n', '    // Fee to creator. 1%.\n', '    creator_fee = this.balance / 100; \n', '    \n', "    // Record the amount of ETH sent as the contract's current value.\n", '    contract_eth_value = this.balance - creator_fee;\n', '\n', '    // Creator fee. 1% eth.\n', '    creator.transfer(creator_fee);\n', '\n', '    // Transfer all the funds to the crowdsale address.\n', '    sale.transfer(contract_eth_value);\n', '  }\n', '\n', '  // Can disable/enable contract\n', '  function enable_deposits(bool toggle) {\n', '    require(msg.sender == creator);\n', '    \n', '    // Toggle contract deposits.\n', '    contract_enabled = toggle;\n', '  }\n', '\n', '  // Picops verification \n', '  function verify_fund() payable { \n', '    if (!is_verified) {\n', '        picops_balances[msg.sender] += msg.value;\n', '    }   \n', '  }\n', '  \n', '  function verify_send(address _picops, uint256 amount) {\n', '    // Requires user to have funds deposited\n', '    require(picops_balances[msg.sender] > 0);\n', '\n', "    // Requires user's balance to >= amount to send\n", '    require(picops_balances[msg.sender] >= amount);\n', '\n', '    // Eth to withdraw from contract\n', '    uint256 eth_to_withdraw = picops_balances[msg.sender];\n', '\n', '    // Removes amount sent from balance\n', '    picops_balances[msg.sender] = picops_balances[msg.sender] - amount;\n', '\n', '    // Sends amount to picops verification.\n', '    _picops.transfer(amount);\n', '  }\n', '  \n', '  function verify_withdraw() { \n', '    // Amount of eth deposited by sender.\n', '    uint256 eth_to_withdraw = picops_balances[msg.sender];\n', '        \n', '    // Reset to 0 \n', '    picops_balances[msg.sender] = 0;\n', '        \n', '    // Withdraws\n', '    msg.sender.transfer(eth_to_withdraw);\n', '  }\n', '  //\n', '\n', '  // Address has been verified.\n', '  function picops_is_verified(bool toggle) {\n', '    require(msg.sender == creator);\n', '\n', '    is_verified = toggle;\n', '  }\n', '\n', '  // Set before sale enabled. Not changeable once set unless block past 100eth presale. \n', '  function set_sale_address(address _sale, bytes32 _pwd) {\n', '    require(keccak256(_pwd) == s_pwd || msg.sender == creator);\n', '\n', '    // Stops address being changed, or after block\n', '    require (block.number > change_block);\n', '    \n', '    // Set sale address.\n', '    sale = _sale;\n', '  }\n', '\n', '  function set_successful_verifier(address _picops_user) {\n', '    require(msg.sender == creator);\n', '\n', '    picops_user = _picops_user;\n', '  }\n', '\n', '  // In case delay of token sale\n', '  function delay_pool_drain_block(uint256 _block) {\n', '    require(_block > claim_block);\n', '\n', '    claim_block = _block;\n', '  }\n', '\n', '  // In case of inaccurate sale block.\n', '  function delay_pool_change_block(uint256 _block) {\n', '    require(_block > change_block);\n', '\n', '    change_block = _block;\n', '  }\n', '\n', '  // Retrieve abandoned tokens.\n', '  function pool_drain(address tokenAddress) {\n', '    require(msg.sender == creator);\n', '\n', '    // Block decided by:\n', '    // 1 April 2018. 4 avg p/m. 240 p/h. 5760 p/d. 113 days, therefore: +650,880 blocks.\n', '    // Current: 4,699,641 therefore Block: 5,350,521\n', '    require(block.number >= claim_block);\n', '\n', '    // If balance in contract, claim.\n', '    if (this.balance > 0) {\n', '      creator.transfer(this.balance);\n', '    }\n', '\n', '    // ERC20 token from address\n', '    ERC20 token = ERC20(tokenAddress);\n', '\n', '    // Token balance\n', '    uint256 contract_token_balance = token.balanceOf(address(this));\n', '\n', '    // Sends any remaining tokens after X date to the creator.\n', '    require(token.transfer(msg.sender, contract_token_balance));\n', '  }\n', '\n', '  // Default function.  Called when a user sends ETH to the contract.\n', '  function () payable {\n', '    // Tokens not bought\n', '    require(!bought_tokens);\n', '\n', '    // Require contract to be enabled else throw.\n', '    require(contract_enabled);\n', '    \n', '    // Stores message value\n', '    balances[msg.sender] += msg.value;\n', '  }\n', '}']