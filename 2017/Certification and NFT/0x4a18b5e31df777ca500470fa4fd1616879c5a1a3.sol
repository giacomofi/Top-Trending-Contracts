['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Crowdsale {\n', '\n', '\tusing SafeMath for uint256;\n', '\n', '\taddress public owner;\n', '\taddress public multisig;\n', '\tuint256 public totalRaised;\n', '\tuint256 public constant hardCap = 12800 ether;\n', '\tmapping(address => bool) public whitelist;\n', '\n', '\tmodifier isWhitelisted() {\n', '\t\trequire(whitelist[msg.sender]);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier onlyOwner() {\n', '\t\trequire(msg.sender == owner);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier belowCap() {\n', '\t\trequire(totalRaised < hardCap);\n', '\t\t_;\n', '\t}\n', '\n', '\tfunction Crowdsale(address _multisig) {\n', '\t\trequire (_multisig != 0);\n', '\t\towner = msg.sender;\n', '\t\tmultisig = _multisig;\n', '\t}\n', '\n', '\tfunction whitelistAddress(address _user) onlyOwner {\n', '\t\twhitelist[_user] = true;\n', '\t}\n', '\n', '\tfunction whitelistAddresses(address[] _users) onlyOwner {\n', '\t\tfor (uint i = 0; i < _users.length; i++) {\n', '\t\t\twhitelist[_users[i]] = true;\n', '\t\t}\n', '\t}\n', '\t\n', '\tfunction() payable isWhitelisted belowCap {\n', '\t\ttotalRaised = totalRaised.add(msg.value);\n', '\t\tuint contribution = msg.value;\n', '\t\tif (totalRaised > hardCap) {\n', '\t\t\tuint refundAmount = totalRaised.sub(hardCap);\n', '\t\t\tmsg.sender.transfer(refundAmount);\n', '\t\t\tcontribution = contribution.sub(refundAmount);\n', '\t\t\trefundAmount = 0;\n', '\t\t\ttotalRaised = hardCap;\n', '\t\t}\n', '\t\tmultisig.transfer(contribution);\n', '\t}\n', '\n', '\tfunction withdrawStuck() onlyOwner {\n', '\t\tmultisig.transfer(this.balance);\n', '\t}\n', '\n', '}']