['/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20 {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    \n', '}\n', '\n', '\n', 'contract BasicToken is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool) {\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] = balances[msg.sender].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '\n', '    /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '}\n', '\n', '\n', '    /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '\n', '}\n', '\n', '\n', 'contract SPCToken is BasicToken {\n', '\n', 'using SafeMath for uint256;\n', '\n', 'string public name = "SecurityPlusCloud Token";              //name of the token\n', 'string public symbol = "SPC";                                // symbol of the token\n', 'uint8 public decimals = 18;                                  // decimals\n', 'uint256 public totalSupply = 500000000 * 10**18;             // total supply of SPC Tokens  \n', '\n', '// variables\n', 'uint256 public keyEmployeesAllocation;              // fund allocated to key employees \n', 'uint256 public bountiesAllocation;                  // fund allocated to advisors \n', 'uint256 public longTermBudgetAllocation;            // fund allocated to Market \n', 'uint256 public bonusAllocation;                     // funds allocated to founders that in under vesting period\n', 'uint256 public totalAllocatedTokens;                // variable to keep track of funds allocated\n', 'uint256 public tokensAllocatedToCrowdFund;          // funds allocated to crowdfund\n', '\n', '// addresses\n', '// multi sign address of founders which hold \n', 'address public founderMultiSigAddress = 0x70b0ea058aee845342B09f1769a2bE8deB46aA86;     \n', 'address public crowdFundAddress;                    // address of crowdfund contract\n', 'address public owner;                               // owner of the contract\n', '// bonus funds get allocated to below address\n', 'address public bonusAllocAddress = 0x95817119B58D195C10a935De6fA4141c2647Aa56;\n', '// Address to allocate the bounties\n', 'address public bountiesAllocAddress = 0x6272A7521c60dE62aBc048f7B40F61f775B32d78;\n', '// Address to allocate the LTB\n', 'address public longTermbudgetAllocAddress = 0x00a6858fe26c326c664a6B6499e47D72e98402Bb;\n', '\n', '//events\n', '\n', 'event ChangeFoundersWalletAddress(uint256  _blockTimeStamp, address indexed _foundersWalletAddress);\n', '\n', '//modifiers\n', '\n', '  modifier onlyCrowdFundAddress() {\n', '    require(msg.sender == crowdFundAddress);\n', '    _;\n', '  }\n', '\n', '  modifier nonZeroAddress(address _to) {\n', '    require(_to != 0x0);\n', '    _;\n', '  }\n', '\n', '  modifier onlyFounders() {\n', '    require(msg.sender == founderMultiSigAddress);\n', '    _;\n', '  }\n', '\n', '\n', '  \n', '   // creation of the token contract \n', '   function SPCToken (address _crowdFundAddress) {\n', '    owner = msg.sender;\n', '    crowdFundAddress = _crowdFundAddress;\n', '\n', '    // Token Distribution \n', '    keyEmployeesAllocation = 50 * 10 ** 24;           // 10 % allocation of totalSupply \n', '    bountiesAllocation = 35 * 10 ** 24;               // 7 % allocation of totalSupply \n', '    tokensAllocatedToCrowdFund = 25 * 10 ** 25;       // 50 % allocation of totalSupply\n', '    longTermBudgetAllocation = 10 * 10 ** 25;         // 20 % allocation of totalSupply\n', '    bonusAllocation = 65 * 10 ** 24;                  // 13 % allocation of totalSupply\n', '\n', '    // Assigned balances to respective stakeholders\n', '    balances[founderMultiSigAddress] = keyEmployeesAllocation;\n', '    balances[crowdFundAddress] = tokensAllocatedToCrowdFund;\n', '    balances[bonusAllocAddress] = bonusAllocation;\n', '    balances[bountiesAllocAddress] = bountiesAllocation;\n', '    balances[longTermbudgetAllocAddress] = longTermBudgetAllocation;\n', '\n', '    totalAllocatedTokens = balances[founderMultiSigAddress] + balances[bonusAllocAddress] + balances[bountiesAllocAddress] + balances[longTermbudgetAllocAddress];\n', '  }\n', '\n', '// function to keep track of the total token allocation\n', '  function changeTotalSupply(uint256 _amount) onlyCrowdFundAddress {\n', '    totalAllocatedTokens += _amount;\n', '  }\n', '\n', '// function to change founder multisig wallet address            \n', '  function changeFounderMultiSigAddress(address _newFounderMultiSigAddress) onlyFounders nonZeroAddress(_newFounderMultiSigAddress) {\n', '    founderMultiSigAddress = _newFounderMultiSigAddress;\n', '    ChangeFoundersWalletAddress(now, founderMultiSigAddress);\n', '  }\n', '\n', '\n', '// fallback function to restrict direct sending of ether\n', '  function () {\n', '    revert();\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'contract SPCCrowdFund {\n', '\n', '    using SafeMath for uint256;\n', '    \n', '    SPCToken public token;                                    // Token contract reference\n', '\n', '    //variables\n', '    uint256 public preSaleStartTime = 1509494401;             // Wednesday, 01-Nov-17 00:00:01 UTC     \n', '    uint256 public preSaleEndTime = 1510531199;               // Sunday, 12-Nov-17 23:59:59 UTC           \n', '    uint256 public crowdfundStartDate = 1511308801;           // Wednesday, 22-Nov-17 00:00:01 UTC\n', '    uint256 public crowdfundEndDate = 1515283199;             // Saturday, 06-Jan-18 23:59:59 UTC\n', '    uint256 public totalWeiRaised;                            // Counter to track the amount raised\n', '    uint256 public exchangeRateForETH = 300;                  // No. of SOC Tokens in 1 ETH\n', '    uint256 public exchangeRateForBTC = 4500;                 // No. of SPC Tokens in 1 BTC  \n', '    uint256 internal tokenSoldInPresale = 0;\n', '    uint256 internal tokenSoldInCrowdsale = 0;\n', '    uint256 internal minAmount = 1 * 10 ** 17;                // Equivalent to 0.1 ETH\n', '\n', '    bool internal isTokenDeployed = false;                    // Flag to track the token deployment -- only can be set once\n', ' \n', '\n', '     // addresses\n', '    // Founders multisig address\n', '    address public founderMultiSigAddress = 0xF50aCE12e0537111be782899Fd5c4f5f638340d5;                            \n', '    // Owner of the contract\n', '    address public owner;                                              \n', '    \n', '    enum State { PreSale, Crowdfund, Finish }\n', '\n', '    //events\n', '    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount); \n', '    event CrowdFundClosed(uint256 _blockTimeStamp);\n', '    event ChangeFoundersWalletAddress(uint256 _blockTimeStamp, address indexed _foundersWalletAddress);\n', '   \n', '    //Modifiers\n', '    modifier tokenIsDeployed() {\n', '        require(isTokenDeployed == true);\n', '        _;\n', '    }\n', '    modifier nonZeroEth() {\n', '        require(msg.value > 0);\n', '        _;\n', '    }\n', '\n', '    modifier nonZeroAddress(address _to) {\n', '        require(_to != 0x0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyFounders() {\n', '        require(msg.sender == founderMultiSigAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyPublic() {\n', '        require(msg.sender != founderMultiSigAddress);\n', '        _;\n', '    }\n', '\n', '    modifier inState(State state) {\n', '        require(getState() == state); \n', '        _;\n', '    }\n', '\n', '     // Constructor to initialize the local variables \n', '    function SPCCrowdFund () {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    // Function to change the founders multisig address \n', '     function setFounderMultiSigAddress(address _newFounderAddress) onlyFounders  nonZeroAddress(_newFounderAddress) {\n', '        founderMultiSigAddress = _newFounderAddress;\n', '        ChangeFoundersWalletAddress(now, founderMultiSigAddress);\n', '    }\n', '\n', '    // Attach the token contract, can only be done once     \n', '    function setTokenAddress(address _tokenAddress) external onlyOwner nonZeroAddress(_tokenAddress) {\n', '        require(isTokenDeployed == false);\n', '        token = SPCToken(_tokenAddress);\n', '        isTokenDeployed = true;\n', '    }\n', '\n', '    // function call after crowdFundEndTime.\n', '    // It transfers the remaining tokens to remainingTokenHolder address\n', '    function endCrowdfund() onlyFounders inState(State.Finish) returns (bool) {\n', '        require(now > crowdfundEndDate);\n', '        uint256 remainingToken = token.balanceOf(this);  // remaining tokens\n', '\n', '        if (remainingToken != 0) \n', '          token.transfer(founderMultiSigAddress, remainingToken); \n', '        CrowdFundClosed(now);\n', '        return true; \n', '    }\n', '\n', '    // Buy token function call only in duration of crowdfund active \n', '    function buyTokens(address beneficiary) \n', '    nonZeroEth \n', '    tokenIsDeployed \n', '    onlyPublic \n', '    nonZeroAddress(beneficiary) \n', '    payable \n', '    returns(bool) \n', '    {\n', '        require(msg.value >= minAmount);\n', '\n', '        if (getState() == State.PreSale) {\n', '            if (buyPreSaleTokens(beneficiary)) {\n', '                return true;\n', '            }\n', '            return false;\n', '        } else {\n', '            require(now >= crowdfundStartDate && now <= crowdfundEndDate);\n', '            fundTransfer(msg.value);\n', '\n', '            uint256 amount = getNoOfTokens(exchangeRateForETH, msg.value);\n', '            \n', '            if (token.transfer(beneficiary, amount)) {\n', '                tokenSoldInCrowdsale = tokenSoldInCrowdsale.add(amount);\n', '                token.changeTotalSupply(amount); \n', '                totalWeiRaised = totalWeiRaised.add(msg.value);\n', '                TokenPurchase(beneficiary, msg.value, amount);\n', '                return true;\n', '            } \n', '            return false;\n', '        }\n', '       \n', '    }\n', '        \n', '    // function to buy the tokens at presale \n', '    function buyPreSaleTokens(address beneficiary) internal returns(bool) {\n', '            \n', '            uint256 amount = getTokensForPreSale(exchangeRateForETH, msg.value);\n', '            fundTransfer(msg.value);\n', '\n', '            if (token.transfer(beneficiary, amount)) {\n', '                tokenSoldInPresale = tokenSoldInPresale.add(amount);\n', '                token.changeTotalSupply(amount); \n', '                totalWeiRaised = totalWeiRaised.add(msg.value);\n', '                TokenPurchase(beneficiary, msg.value, amount);\n', '                return true;\n', '            }\n', '            return false;\n', '    }    \n', '\n', '// function to calculate the total no of tokens with bonus multiplication\n', '    function getNoOfTokens(uint256 _exchangeRate, uint256 _amount) internal constant returns (uint256) {\n', '         uint256 noOfToken = _amount.mul(_exchangeRate);\n', '         uint256 noOfTokenWithBonus = ((100 + getCurrentBonusRate()) * noOfToken ).div(100);\n', '         return noOfTokenWithBonus;\n', '    }\n', '\n', '    function getTokensForPreSale(uint256 _exchangeRate, uint256 _amount) internal constant returns (uint256) {\n', '        uint256 noOfToken = _amount.mul(_exchangeRate);\n', '        uint256 noOfTokenWithBonus = ((100 + getCurrentBonusRate()) * noOfToken ).div(100);\n', '        if (noOfTokenWithBonus + tokenSoldInPresale > (50000000 * 10 ** 18) ) {\n', '            revert();\n', '        }\n', '        return noOfTokenWithBonus;\n', '    }\n', '\n', '    // function to transfer the funds to founders account\n', '    function fundTransfer(uint256 weiAmount) internal {\n', '        founderMultiSigAddress.transfer(weiAmount);\n', '    }\n', '\n', '\n', '// Get functions \n', '\n', '    // function to get the current state of the crowdsale\n', '    function getState() public constant returns(State) {\n', '        if (now >= preSaleStartTime && now <= preSaleEndTime) {\n', '            return State.PreSale;\n', '        }\n', '        if (now >= crowdfundStartDate && now <= crowdfundEndDate) {\n', '            return State.Crowdfund;\n', '        } \n', '        return State.Finish;\n', '    }\n', '\n', '\n', '    // function provide the current bonus rate\n', '    function getCurrentBonusRate() internal returns (uint8) {\n', '        \n', '        if (getState() == State.PreSale) {\n', '           return 50;\n', '        } \n', '        if (getState() == State.Crowdfund) {\n', '           if (tokenSoldInCrowdsale <= (100000000 * 10 ** 18) ) {\n', '               return 30;\n', '           }\n', '           if (tokenSoldInCrowdsale > (100000000 * 10 ** 18) && tokenSoldInCrowdsale <= (175000000 * 10 ** 18)) {\n', '               return 10;\n', '           } else {\n', '               return 0;\n', '           }\n', '        }\n', '    }\n', '\n', '\n', '    // provides the bonus % \n', '    function currentBonus() public constant returns (uint8) {\n', '        return getCurrentBonusRate();\n', '    }\n', '\n', '    // GET functions\n', '\n', '    function getContractTimestamp() public constant returns ( \n', '        uint256 _presaleStartDate, \n', '        uint256 _presaleEndDate, \n', '        uint256 _crowdsaleStartDate, \n', '        uint256 _crowdsaleEndDate) \n', '    {\n', '        return (preSaleStartTime, preSaleEndTime, crowdfundStartDate, crowdfundEndDate);\n', '    }\n', '\n', '    function getExchangeRate() public constant returns (uint256 _exchangeRateForETH, uint256 _exchangeRateForBTC) {\n', '        return (exchangeRateForETH, exchangeRateForBTC);\n', '    }\n', '\n', '    function getNoOfSoldToken() public constant returns (uint256 _tokenSoldInPresale , uint256 _tokenSoldInCrowdsale) {\n', '        return (tokenSoldInPresale, tokenSoldInCrowdsale);\n', '    }\n', '\n', '    function getWeiRaised() public constant returns (uint256 _totalWeiRaised) {\n', '        return totalWeiRaised;\n', '    }\n', '\n', '    // Crowdfund entry\n', '    // send ether to the contract address\n', '    // With at least 200 000 gas\n', '    function() public payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '}']