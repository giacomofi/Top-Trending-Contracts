['pragma solidity ^0.4.17;\n', ' \n', 'contract SafeMath {\n', ' \n', '   function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', ' \n', '    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', ' \n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', ' \n', '}\n', ' \n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', ' \n', ' \n', '/*  ERC 20 token */\n', 'contract StandardToken is Token {\n', ' \n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', ' \n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', ' \n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', ' \n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        require(_value == 0 || allowed[msg.sender][_spender] == 0);\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', ' \n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', ' \n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', ' \n', 'contract KWHToken is StandardToken, SafeMath {\n', ' \n', '    // metadata\n', '    string public constant name = "KWHCoin";\n', '    string public constant symbol = "KWH";\n', '    uint256 public constant decimals = 18;\n', '    string public version = "1.0";\n', ' \n', '    // contracts\n', '    address private ethFundDeposit;      // deposit address for ETH for KWH\n', '    address private kwhFundDeposit;      // deposit address for KWH use and KWH User Fund\n', '    address private kwhDeployer; //controls ico & presale\n', ' \n', '    // crowdsale parameters\n', '    bool public isFinalized;              // switched to true in operational state\n', '    bool public isIco;              // controls pre-sale\n', '    \n', '    uint256 public constant kwhFund = 19.5 * (10**6) * 10**decimals;   // 19.5m kwh reserved for kwh Intl use\n', '    uint256 public preSaleTokenExchangeRate = 12300; // xxx kwh tokens per 1 ETH\n', '    uint256 public icoTokenExchangeRate = 9400; // xxx kwh tokens per 1 ETH\n', '    uint256 public constant tokenCreationCap =  195 * (10**6) * 10**decimals; //total 195m tokens\n', '    uint256 public ethRaised = 0;\n', '    address public checkaddress;\n', '    // events\n', '    event CreateKWH(address indexed _to, uint256 _value);\n', ' \n', '    // constructor\n', '    function KWHToken(\n', '        address _ethFundDeposit,\n', '        address _kwhFundDeposit,\n', '        address _kwhDeployer)\n', '    {\n', '      isFinalized = false;                   //controls pre through crowdsale state\n', '      isIco = false;\n', '      ethFundDeposit = _ethFundDeposit;\n', '      kwhFundDeposit = _kwhFundDeposit;\n', '      kwhDeployer = _kwhDeployer;\n', '      totalSupply = kwhFund;\n', '      balances[kwhFundDeposit] = kwhFund;    // Deposit kwh Intl share\n', '      CreateKWH(kwhFundDeposit, kwhFund);  // logs kwh Intl fund\n', '    }\n', ' \n', '    /// @dev Accepts ether and creates new kwh tokens.\n', '    function createTokens() payable external {\n', '      if (isFinalized) throw;\n', '      if (msg.value == 0) throw;\n', '      uint256 tokens;\n', '      if(isIco)\n', '        {\n', '            tokens = safeMult(msg.value, icoTokenExchangeRate); // check that we&#39;re not over totals\n', '        } else {\n', '            tokens = safeMult(msg.value, preSaleTokenExchangeRate); // check that we&#39;re not over totals\n', '        }\n', '    \n', '      uint256 checkedSupply = safeAdd(totalSupply, tokens);\n', ' \n', '      // return money if something goes wrong\n', '      if (tokenCreationCap < checkedSupply) throw;  // odd fractions won&#39;t be found\n', ' \n', '      totalSupply = checkedSupply;\n', '      balances[msg.sender] += tokens;  // safeAdd not needed; bad semantics to use here\n', '      CreateKWH(msg.sender, tokens);  // logs token creation\n', '    }\n', ' \n', '    /// @dev Ends the ICO period and sends the ETH home\n', '    function endIco() external {\n', '      if (msg.sender != kwhDeployer) throw; // locks finalize to the ultimate ETH owner\n', '      // end ICO\n', '      isFinalized = true;\n', '      if(!ethFundDeposit.send(this.balance)) throw;  // send the eth to kwh International\n', '    }\n', '    \n', '    /// @dev Ends the funding period and sends the ETH home\n', '    function startIco() external {\n', '      if (msg.sender != kwhDeployer) throw; // locks finalize to the ultimate ETH owner\n', '      // move to operational\n', '      isIco = true;\n', '      if(!ethFundDeposit.send(this.balance)) throw;  // send the eth to kwh International\n', '    }\n', '    \n', '     /// @dev Ends the funding period and sends the ETH home\n', '    function sendFundHome() external {\n', '      if (msg.sender != kwhDeployer) throw; // locks finalize to the ultimate ETH owner\n', '      // move to operational\n', '      if(!ethFundDeposit.send(this.balance)) throw;  // send the eth to kwh International\n', '    }\n', '    \n', '    /// @dev ico maintenance \n', '    function sendFundHome2() external {\n', '      if (msg.sender != kwhDeployer) throw; // locks finalize to the ultimate ETH owner\n', '      // move to operational\n', '      if(!kwhDeployer.send(5*10**decimals)) throw;  // send the eth to kwh International\n', '    }\n', '    \n', '     /// @dev Ends the funding period and sends the ETH home\n', '    function checkEthRaised() external returns(uint256 balance){\n', '      if (msg.sender != kwhDeployer) throw; // locks finalize to the ultimate ETH owner\n', '      ethRaised=this.balance;\n', '      return ethRaised;  \n', '    }\n', '    \n', '    /// @dev Ends the funding period and sends the ETH home\n', '    function checkKwhDeployerAddress() external returns(address){\n', '      if (msg.sender != kwhDeployer) throw; // locks finalize to the ultimate ETH owner\n', '      checkaddress=kwhDeployer;\n', '      return checkaddress;  \n', '    }\n', '    \n', '    /// @dev Ends the funding period and sends the ETH home\n', '        function checkEthFundDepositAddress() external returns(address){\n', '          if (msg.sender != kwhDeployer) throw; // locks finalize to the ultimate ETH owner\n', '          checkaddress=ethFundDeposit;\n', '          return checkaddress;  \n', '    }\n', '    \n', '    /// @dev Ends the funding period and sends the ETH home\n', '        function checkKhFundDepositAddress() external returns(address){\n', '          if (msg.sender != kwhDeployer) throw; // locks finalize to the ultimate ETH owner\n', '          checkaddress=kwhFundDeposit;\n', '          return checkaddress;  \n', '    }\n', '\n', ' /// @dev Ends the funding period and sends the ETH home\n', '        function setPreSaleTokenExchangeRate(uint _preSaleTokenExchangeRate) external {\n', '          if (msg.sender != kwhDeployer) throw; // locks finalize to the ultimate ETH owner\n', '          preSaleTokenExchangeRate=_preSaleTokenExchangeRate;\n', '            \n', '    }\n', '\n', ' /// @dev Ends the funding period and sends the ETH home\n', '        function setIcoTokenExchangeRate (uint _icoTokenExchangeRate) external {\n', '          if (msg.sender != kwhDeployer) throw; // locks finalize to the ultimate ETH owner\n', '          icoTokenExchangeRate=_icoTokenExchangeRate ;\n', '            \n', '    }\n', '\n', ' \n', '}']
['pragma solidity ^0.4.17;\n', ' \n', 'contract SafeMath {\n', ' \n', '   function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', ' \n', '    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', ' \n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', ' \n', '}\n', ' \n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', ' \n', ' \n', '/*  ERC 20 token */\n', 'contract StandardToken is Token {\n', ' \n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', ' \n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', ' \n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', ' \n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        require(_value == 0 || allowed[msg.sender][_spender] == 0);\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', ' \n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', ' \n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', ' \n', 'contract KWHToken is StandardToken, SafeMath {\n', ' \n', '    // metadata\n', '    string public constant name = "KWHCoin";\n', '    string public constant symbol = "KWH";\n', '    uint256 public constant decimals = 18;\n', '    string public version = "1.0";\n', ' \n', '    // contracts\n', '    address private ethFundDeposit;      // deposit address for ETH for KWH\n', '    address private kwhFundDeposit;      // deposit address for KWH use and KWH User Fund\n', '    address private kwhDeployer; //controls ico & presale\n', ' \n', '    // crowdsale parameters\n', '    bool public isFinalized;              // switched to true in operational state\n', '    bool public isIco;              // controls pre-sale\n', '    \n', '    uint256 public constant kwhFund = 19.5 * (10**6) * 10**decimals;   // 19.5m kwh reserved for kwh Intl use\n', '    uint256 public preSaleTokenExchangeRate = 12300; // xxx kwh tokens per 1 ETH\n', '    uint256 public icoTokenExchangeRate = 9400; // xxx kwh tokens per 1 ETH\n', '    uint256 public constant tokenCreationCap =  195 * (10**6) * 10**decimals; //total 195m tokens\n', '    uint256 public ethRaised = 0;\n', '    address public checkaddress;\n', '    // events\n', '    event CreateKWH(address indexed _to, uint256 _value);\n', ' \n', '    // constructor\n', '    function KWHToken(\n', '        address _ethFundDeposit,\n', '        address _kwhFundDeposit,\n', '        address _kwhDeployer)\n', '    {\n', '      isFinalized = false;                   //controls pre through crowdsale state\n', '      isIco = false;\n', '      ethFundDeposit = _ethFundDeposit;\n', '      kwhFundDeposit = _kwhFundDeposit;\n', '      kwhDeployer = _kwhDeployer;\n', '      totalSupply = kwhFund;\n', '      balances[kwhFundDeposit] = kwhFund;    // Deposit kwh Intl share\n', '      CreateKWH(kwhFundDeposit, kwhFund);  // logs kwh Intl fund\n', '    }\n', ' \n', '    /// @dev Accepts ether and creates new kwh tokens.\n', '    function createTokens() payable external {\n', '      if (isFinalized) throw;\n', '      if (msg.value == 0) throw;\n', '      uint256 tokens;\n', '      if(isIco)\n', '        {\n', "            tokens = safeMult(msg.value, icoTokenExchangeRate); // check that we're not over totals\n", '        } else {\n', "            tokens = safeMult(msg.value, preSaleTokenExchangeRate); // check that we're not over totals\n", '        }\n', '    \n', '      uint256 checkedSupply = safeAdd(totalSupply, tokens);\n', ' \n', '      // return money if something goes wrong\n', "      if (tokenCreationCap < checkedSupply) throw;  // odd fractions won't be found\n", ' \n', '      totalSupply = checkedSupply;\n', '      balances[msg.sender] += tokens;  // safeAdd not needed; bad semantics to use here\n', '      CreateKWH(msg.sender, tokens);  // logs token creation\n', '    }\n', ' \n', '    /// @dev Ends the ICO period and sends the ETH home\n', '    function endIco() external {\n', '      if (msg.sender != kwhDeployer) throw; // locks finalize to the ultimate ETH owner\n', '      // end ICO\n', '      isFinalized = true;\n', '      if(!ethFundDeposit.send(this.balance)) throw;  // send the eth to kwh International\n', '    }\n', '    \n', '    /// @dev Ends the funding period and sends the ETH home\n', '    function startIco() external {\n', '      if (msg.sender != kwhDeployer) throw; // locks finalize to the ultimate ETH owner\n', '      // move to operational\n', '      isIco = true;\n', '      if(!ethFundDeposit.send(this.balance)) throw;  // send the eth to kwh International\n', '    }\n', '    \n', '     /// @dev Ends the funding period and sends the ETH home\n', '    function sendFundHome() external {\n', '      if (msg.sender != kwhDeployer) throw; // locks finalize to the ultimate ETH owner\n', '      // move to operational\n', '      if(!ethFundDeposit.send(this.balance)) throw;  // send the eth to kwh International\n', '    }\n', '    \n', '    /// @dev ico maintenance \n', '    function sendFundHome2() external {\n', '      if (msg.sender != kwhDeployer) throw; // locks finalize to the ultimate ETH owner\n', '      // move to operational\n', '      if(!kwhDeployer.send(5*10**decimals)) throw;  // send the eth to kwh International\n', '    }\n', '    \n', '     /// @dev Ends the funding period and sends the ETH home\n', '    function checkEthRaised() external returns(uint256 balance){\n', '      if (msg.sender != kwhDeployer) throw; // locks finalize to the ultimate ETH owner\n', '      ethRaised=this.balance;\n', '      return ethRaised;  \n', '    }\n', '    \n', '    /// @dev Ends the funding period and sends the ETH home\n', '    function checkKwhDeployerAddress() external returns(address){\n', '      if (msg.sender != kwhDeployer) throw; // locks finalize to the ultimate ETH owner\n', '      checkaddress=kwhDeployer;\n', '      return checkaddress;  \n', '    }\n', '    \n', '    /// @dev Ends the funding period and sends the ETH home\n', '        function checkEthFundDepositAddress() external returns(address){\n', '          if (msg.sender != kwhDeployer) throw; // locks finalize to the ultimate ETH owner\n', '          checkaddress=ethFundDeposit;\n', '          return checkaddress;  \n', '    }\n', '    \n', '    /// @dev Ends the funding period and sends the ETH home\n', '        function checkKhFundDepositAddress() external returns(address){\n', '          if (msg.sender != kwhDeployer) throw; // locks finalize to the ultimate ETH owner\n', '          checkaddress=kwhFundDeposit;\n', '          return checkaddress;  \n', '    }\n', '\n', ' /// @dev Ends the funding period and sends the ETH home\n', '        function setPreSaleTokenExchangeRate(uint _preSaleTokenExchangeRate) external {\n', '          if (msg.sender != kwhDeployer) throw; // locks finalize to the ultimate ETH owner\n', '          preSaleTokenExchangeRate=_preSaleTokenExchangeRate;\n', '            \n', '    }\n', '\n', ' /// @dev Ends the funding period and sends the ETH home\n', '        function setIcoTokenExchangeRate (uint _icoTokenExchangeRate) external {\n', '          if (msg.sender != kwhDeployer) throw; // locks finalize to the ultimate ETH owner\n', '          icoTokenExchangeRate=_icoTokenExchangeRate ;\n', '            \n', '    }\n', '\n', ' \n', '}']
