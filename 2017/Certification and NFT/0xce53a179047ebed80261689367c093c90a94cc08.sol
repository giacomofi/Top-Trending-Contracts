['pragma solidity ^0.4.16;\n', '\n', 'contract SafeMath {\n', '    function safeMul(uint a, uint b) pure internal returns (uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint a, uint b) pure internal returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint a, uint b) pure internal returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a && c >= b);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract EDT is SafeMath {\n', '\n', '    string public name = "EDT";        //  token name\n', '    string public symbol = "EDT";      //  token symbol\n', '    uint public decimals = 8;           //  token digit\n', '\n', '    mapping (address => uint) public balanceOf;\n', '    mapping (address => mapping (address => uint)) public allowance;\n', '\n', '    uint public totalSupply = 0;\n', '\n', '    // 管理账号地址\n', '    address public owner = 0x0;\n', '\n', '    // 团队地址\n', '    address private addressTeam = 0xE5fB6dce07BCa4ffc4B79A529a8Ce43A31383BA9;\n', '\n', '    // 锁定信息\n', '    mapping (address => uint) public lockInfo;\n', '\n', '    // 是否停止销售\n', '    bool public saleStopped = false;\n', '\n', '    uint constant valueTotal = 15 * 10000 * 10000 * 10 ** 8;  //总量 15亿\n', '    uint constant valueSale = valueTotal / 100 * 50;  // ICO 50%\n', '    uint constant valueVip = valueTotal / 100 * 40;   // 私募 40%\n', '    uint constant valueTeam = valueTotal / 100 * 10;   // 团队 10%\n', '\n', '    uint private totalVip = 0;\n', '\n', '    // 阶段\n', '    uint private constant BEFORE_SALE = 0;\n', '    uint private constant IN_SALE = 1;\n', '    uint private constant FINISHED = 2;\n', '\n', '    // ICO最小以太值\n', '    uint public minEth = 0.1 ether;\n', '\n', '    // ICO最大以太值\n', '    uint public maxEth = 1000 ether;\n', '\n', '    // 开始时间 2018-01-01 00:00:00\n', '    uint public openTime = 1514736000;\n', '    // 结束时间 2018-01-15 00:00:00\n', '    uint public closeTime = 1515945600;\n', '    // 价格\n', '    uint public price = 8500;\n', '\n', '    // 私募和ICO解锁时间 2018-01-15 00:00:00\n', '    uint public unlockTime = 1515945600;\n', '\n', '    // 团队解锁时间 2019-01-10 00:00:00\n', '    uint public unlockTeamTime = 1547049600;\n', '\n', '    // 已卖出代币数量\n', '    uint public saleQuantity = 0;\n', '\n', '    // 收入的ETH数量\n', '    uint public ethQuantity = 0;\n', '\n', '    // 提现的代币数量\n', '    uint public withdrawQuantity = 0;\n', '\n', '\n', '    modifier isOwner {\n', '        assert(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier validAddress(address _address) {\n', '        assert(0x0 != _address);\n', '        _;\n', '    }\n', '\n', '    modifier validEth {\n', '        assert(msg.value >= minEth && msg.value <= maxEth);\n', '        _;\n', '    }\n', '\n', '    modifier validPeriod {\n', '        assert(now >= openTime && now < closeTime);\n', '        _;\n', '    }\n', '\n', '    modifier validQuantity {\n', '        assert(valueSale >= saleQuantity);\n', '        _;\n', '    }\n', '\n', '\n', '    function EDT()\n', '        public\n', '    {\n', '        owner = msg.sender;\n', '        totalSupply = valueTotal;\n', '\n', '        // ICO\n', '        balanceOf[this] = valueSale;\n', '        Transfer(0x0, this, valueSale);\n', '\n', '        // 团队\n', '        balanceOf[addressTeam] = valueTeam;\n', '        Transfer(0x0, addressTeam, valueTeam);\n', '    }\n', '\n', '    function transfer(address _to, uint _value)\n', '        public\n', '        validAddress(_to)\n', '        returns (bool success)\n', '    {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        require(validTransfer(msg.sender, _value));\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferInner(address _to, uint _value)\n', '        private\n', '        returns (bool success)\n', '    {\n', '        balanceOf[this] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(this, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint _value)\n', '        public\n', '        validAddress(_from)\n', '        validAddress(_to)\n', '        returns (bool success)\n', '    {\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        require(validTransfer(_from, _value));\n', '        balanceOf[_to] += _value;\n', '        balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint _value)\n', '        public\n', '        validAddress(_spender)\n', '        returns (bool success)\n', '    {\n', '        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function lock(address _to, uint _value)\n', '        private\n', '        validAddress(_to)\n', '    {\n', '        require(_value > 0);\n', '        require(lockInfo[_to] + _value <= balanceOf[_to]);\n', '        lockInfo[_to] += _value;\n', '    }\n', '\n', '    function validTransfer(address _from, uint _value)\n', '        private\n', '        constant\n', '        returns (bool)\n', '    {\n', '        if (_value == 0)\n', '            return false;\n', '\n', '        if (_from == addressTeam) {\n', '            return now >= unlockTeamTime;\n', '        }\n', '\n', '        if (now >= unlockTime)\n', '            return true;\n', '\n', '        return lockInfo[_from] + _value <= balanceOf[_from];\n', '    }\n', '\n', '\n', '    function ()\n', '        public\n', '        payable\n', '    {\n', '        buy();\n', '    }\n', '\n', '    function buy()\n', '        public\n', '        payable\n', '        validEth        // 以太是否在允许范围\n', '        validPeriod     // 是否在ICO期间\n', '        validQuantity   // 代币是否已卖完\n', '    {\n', '        uint eth = msg.value;\n', '\n', '        // 计算代币数量\n', '        uint quantity = eth * price / 10 ** 10;\n', '\n', '        // 是否超出剩余代币\n', '        uint leftQuantity = safeSub(valueSale, saleQuantity);\n', '        if (quantity > leftQuantity) {\n', '            quantity = leftQuantity;\n', '        }\n', '\n', '        saleQuantity = safeAdd(saleQuantity, quantity);\n', '        ethQuantity = safeAdd(ethQuantity, eth);\n', '\n', '        // 发送代币\n', '        require(transferInner(msg.sender, quantity));\n', '\n', '        // 锁定\n', '        lock(msg.sender, quantity);\n', '\n', '        // 生成日志\n', '        Buy(msg.sender, eth, quantity);\n', '\n', '    }\n', '\n', '    function stopSale()\n', '        public\n', '        isOwner\n', '        returns (bool)\n', '    {\n', '        assert(!saleStopped);\n', '        saleStopped = true;\n', '        StopSale();\n', '        return true;\n', '    }\n', '\n', '    function getPeriod()\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        if (saleStopped) {\n', '            return FINISHED;\n', '        }\n', '\n', '        if (now < openTime) {\n', '            return BEFORE_SALE;\n', '        }\n', '\n', '        if (valueSale == saleQuantity) {\n', '            return FINISHED;\n', '        }\n', '\n', '        if (now >= openTime && now < closeTime) {\n', '            return IN_SALE;\n', '        }\n', '\n', '        return FINISHED;\n', '    }\n', '\n', '\n', '    function withdraw(uint amount)\n', '        public\n', '        isOwner\n', '    {\n', '        uint period = getPeriod();\n', '        require(period == FINISHED);\n', '\n', '        require(this.balance >= amount);\n', '        msg.sender.transfer(amount);\n', '    }\n', '\n', '    function withdrawToken(uint amount)\n', '        public\n', '        isOwner\n', '    {\n', '        uint period = getPeriod();\n', '        require(period == FINISHED);\n', '\n', '        withdrawQuantity += safeAdd(withdrawQuantity, amount);\n', '        require(transferInner(msg.sender, amount));\n', '    }\n', '\n', '    function setVipInfo(address _vip, uint _value)\n', '        public\n', '        isOwner\n', '        validAddress(_vip)\n', '    {\n', '        require(_value > 0);\n', '        require(_value + totalVip <= valueVip);\n', '\n', '        balanceOf[_vip] += _value;\n', '        Transfer(0x0, _vip, _value);\n', '        lock(_vip, _value);\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '    event Buy(address indexed sender, uint eth, uint token);\n', '    event StopSale();\n', '}']