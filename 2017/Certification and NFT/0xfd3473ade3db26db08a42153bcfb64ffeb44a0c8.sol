['// Author : shift\n', '\n', 'pragma solidity ^0.4.13;\n', '\n', '// ERC20 Interface: https://github.com/ethereum/EIPs/issues/20\n', 'contract ERC20 {\n', '  function transfer(address _to, uint256 _value) returns (bool success);\n', '  function balanceOf(address _owner) constant returns (uint256 balance);\n', '}\n', '\n', 'contract DeveryFUND {\n', '  // Store the amount of ETH deposited by each account.\n', '  mapping (address => uint256) public balances;\n', '  // Track whether the contract has bought the tokens yet.\n', '  bool public bought_tokens = false;\n', '  // Record ETH value of tokens currently held by contract.\n', '  uint256 public contract_eth_value;\n', '  // The minimum amount of ETH that can be deposited into the contract.\n', '  uint256 constant public min_amount = 20 ether;\n', '  uint256 constant public max_amount = 1100 ether;\n', '  bytes32 hash_pwd = 0xe1ccf0005757f598f4ff97410bc0d3ff7248f92b17ed522a0f649dbde89dfc02;\n', '  // The crowdsale address.\n', '  address public sale;\n', '  // Token address\n', '  ERC20 public token;\n', '  address constant public creator = 0xEE06BdDafFA56a303718DE53A5bc347EfbE4C68f;\n', '  uint256 public buy_block;\n', '  \n', '  // Allows any user to withdraw his tokens.\n', '  function withdraw() {\n', "    // Disallow withdraw if tokens haven't been bought yet.\n", '    require(bought_tokens);\n', '    uint256 contract_token_balance = token.balanceOf(address(this));\n', '    // Disallow token withdrawals if there are no tokens to withdraw.\n', '    require(contract_token_balance != 0);\n', "    // Store the user's token balance in a temporary variable.\n", '    uint256 tokens_to_withdraw = (balances[msg.sender] * contract_token_balance) / contract_eth_value;\n', '    // Update the value of tokens currently held by the contract.\n', '    contract_eth_value -= balances[msg.sender];\n', "    // Update the user's balance prior to sending to prevent recursive call.\n", '    balances[msg.sender] = 0;\n', '    uint256 fee = tokens_to_withdraw / 100;\n', '    // Send the fee to the developer.\n', '    require(token.transfer(creator, fee));\n', '    // Send the funds.  Throws on failure to prevent loss of funds.\n', '    require(token.transfer(msg.sender, tokens_to_withdraw - fee));\n', '  }\n', '  \n', '  // Allows any user to get his eth refunded before the purchase is made or after approx. 20 days in case the devs refund the eth.\n', '  function refund_me() {\n', '    require(!bought_tokens);\n', "    // Store the user's balance prior to withdrawal in a temporary variable.\n", '    uint256 eth_to_withdraw = balances[msg.sender];\n', "    // Update the user's balance prior to sending ETH to prevent recursive call.\n", '    balances[msg.sender] = 0;\n', "    // Return the user's funds.  Throws on failure to prevent loss of funds.\n", '    msg.sender.transfer(eth_to_withdraw);\n', '  }\n', '  \n', '  // Buy the tokens. Sends ETH to the presale wallet and records the ETH amount held in the contract.\n', '  function buy_the_tokens(string _password) {\n', '    require(this.balance >= min_amount);\n', '    require(!bought_tokens);\n', '    require(sale != 0x0);\n', '    require(msg.sender == creator || hash_pwd == keccak256(_password));\n', '    //Registers the buy block number\n', '    buy_block = block.number;\n', '    // Record that the contract has bought the tokens.\n', '    bought_tokens = true;\n', "    // Record the amount of ETH sent as the contract's current value.\n", '    contract_eth_value = this.balance;\n', '    // Transfer all the funds to the crowdsale address.\n', '    sale.transfer(contract_eth_value);\n', '  }\n', '  \n', '  function set_sale_address(address _sale, string _password) {\n', '    //has to be the creator or someone with the password\n', '    require(msg.sender == creator || hash_pwd == keccak256(_password));\n', '    require(sale == 0x0);\n', '    require(!bought_tokens);\n', '    sale = _sale;\n', '  }\n', '\n', '  function set_token_address(address _token, string _password) {\n', '    require(msg.sender == creator || hash_pwd == keccak256(_password));\n', '    token = ERC20(_token);\n', '  }\n', '\n', '  function emergy_withdraw(address _token) {\n', '    //Allows to withdraw all the tokens after a certain amount of time, in the case\n', '    //of an unplanned situation\n', '    //Allowed after 1 week after the buy : 7*24*60*60 / 13.76 (mean time for mining a block)\n', '    require(block.number >= (buy_block + 43953));\n', '    ERC20 token = ERC20(_token);\n', '    uint256 contract_token_balance = token.balanceOf(address(this));\n', '    require (contract_token_balance != 0);\n', '    balances[msg.sender] = 0;\n', '    // Send the funds.  Throws on failure to prevent loss of funds.\n', '    require(token.transfer(msg.sender, contract_token_balance));\n', '  }\n', '\n', '  // Default function.  Called when a user sends ETH to the contract.\n', '  function () payable {\n', '    require(!bought_tokens);\n', '    require(this.balance <= max_amount);\n', '    balances[msg.sender] += msg.value;\n', '  }\n', '}']