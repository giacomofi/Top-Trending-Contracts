['pragma solidity ^0.4.15;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract MultiOwners {\n', '\n', '    event AccessGrant(address indexed owner);\n', '    event AccessRevoke(address indexed owner);\n', '    \n', '    mapping(address => bool) owners;\n', '\n', '    function MultiOwners() {\n', '        owners[msg.sender] = true;\n', '    }\n', '\n', '    modifier onlyOwner() { \n', '        require(owners[msg.sender] == true);\n', '        _; \n', '    }\n', '\n', '    function isOwner() constant returns (bool) {\n', '        return owners[msg.sender] ? true : false;\n', '    }\n', '\n', '    function checkOwner(address maybe_owner) constant returns (bool) {\n', '        return owners[maybe_owner] ? true : false;\n', '    }\n', '\n', '\n', '    function grant(address _owner) onlyOwner {\n', '        owners[_owner] = true;\n', '        AccessGrant(_owner);\n', '    }\n', '\n', '    function revoke(address _owner) onlyOwner {\n', '        require(msg.sender != _owner);\n', '        owners[_owner] = false;\n', '        AccessRevoke(_owner);\n', '    }\n', '}\n', '\n', 'contract Sale is MultiOwners {\n', '    // Minimal possible cap in ethers\n', '    uint256 public softCap;\n', '\n', '    // Maximum possible cap in ethers\n', '    uint256 public hardCap;\n', '\n', '    // totalEthers received\n', '    uint256 public totalEthers;\n', '\n', '    // Ssale token\n', '    Token public token;\n', '\n', '    // Withdraw wallet\n', '    address public wallet;\n', '\n', '    // Maximum available to sell tokens\n', '    uint256 public maximumTokens;\n', '\n', '    // Minimal ether\n', '    uint256 public minimalEther;\n', '\n', '    // Token per ether\n', '    uint256 public weiPerToken;\n', '\n', '    // start and end timestamp where investments are allowed (both inclusive)\n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '\n', '    // refund if softCap is not reached\n', '    bool public refundAllowed;\n', '\n', '    // \n', '    mapping(address => uint256) public etherBalances;\n', '\n', '    // \n', '    mapping(address => uint256) public whitelist;\n', '\n', '    // bounty tokens\n', '    uint256 public bountyReward;\n', '\n', '    // team tokens\n', '    uint256 public teamReward;\n', '\n', '    // founder tokens\n', '    uint256 public founderReward;\n', '\n', '\n', '    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\n', '    event Whitelist(address indexed beneficiary, uint256 value);\n', '\n', '    modifier validPurchase(address contributor) {\n', '        bool withinPeriod = ((now >= startTime || checkWhitelist(contributor, msg.value)) && now <= endTime);\n', '        bool nonZeroPurchase = msg.value != 0;\n', '        require(withinPeriod && nonZeroPurchase);\n', '\n', '        _;        \n', '    }\n', '\n', '    modifier isStarted() {\n', '        require(now >= startTime);\n', '\n', '        _;        \n', '    }\n', '\n', '    modifier isExpired() {\n', '        require(now > endTime);\n', '\n', '        _;        \n', '    }\n', '\n', '    function Sale(uint256 _startTime, address _wallet) {\n', '        require(_startTime >=  now);\n', '        require(_wallet != 0x0);\n', '\n', '        token = new Token();\n', '\n', '        wallet = _wallet;\n', '        startTime = _startTime;\n', '\n', '        minimalEther = 1e16; // 0.01 ether\n', '        endTime = _startTime + 28 days;\n', '        weiPerToken = 1e18 / 100e8; // token price\n', '        hardCap = 57142e18;\n', '        softCap = 3350e18;\n', '\n', '    \n', '        // We love our Pre-ITO backers\n', '        token.mint(0x992066a964C241eD4996E750284d039B14A19fA5, 11199999999860);\n', '        token.mint(0x1F4df63B8d32e54d94141EF8475c55dF4db2a02D, 9333333333170);\n', '        token.mint(0xce192Be11DdE37630Ef842E3aF5fBD7bEA15C6f9, 2799999999930);\n', '        token.mint(0x18D2AD9DFC0BA35E124E105E268ebC224323694a, 1120000000000);\n', '        token.mint(0x4eD1db98a562594CbD42161354746eAafD1F9C44, 933333333310);\n', '        token.mint(0x00FEbfc7be373f8088182850FeCA034DDA8b7a67, 896000000000);\n', '        token.mint(0x86850f5f7D035dD96B07A75c484D520cff13eb58, 634666666620);\n', '        token.mint(0x08750DA30e952B6ef3D034172904ca7Ec1ab133A, 616000000000);\n', '        token.mint(0x4B61eDe41e7C8034d6bdF1741cA94910993798aa, 578666666620);\n', '        token.mint(0xdcb018EAD6a94843ef2391b3358294020791450b, 560000000000);\n', '        token.mint(0xb62E27446079c2F2575C79274cd905Bf1E1e4eDb, 560000000000);\n', '        token.mint(0xFF37732a268a2ED27627c14c45f100b87E17fFDa, 560000000000);\n', '        token.mint(0x7bDeD0D5B6e2F9a44f59752Af633e4D1ed200392, 80000000000);\n', '        token.mint(0x995516bb1458fa7b192Bb4Bab0635Fc9Ab447FD1, 48000000000);\n', '        token.mint(0x95a7BEf91A5512d954c721ccbd6fC5402667FaDe, 32000000000);\n', '        token.mint(0x3E10553fff3a5Ac28B9A7e7f4afaFB4C1D6Efc0b, 24000000000);\n', '        token.mint(0x7C8E7d9BE868673a1bfE0686742aCcb6EaFFEF6F, 17600000000);\n', '\n', '        maximumTokens = token.totalSupply() + 8000000e8;\n', '\n', '        // Also we like KYC\n', '        whitelist[0xBd7dC4B22BfAD791Cd5d39327F676E0dC3c0C2D0] = 2000 ether;\n', '        whitelist[0xebAd12E50aDBeb3C7b72f4a877bC43E7Ec03CD60] = 200 ether;\n', '        whitelist[0xcFC9315cee88e5C650b5a97318c2B9F632af6547] = 200 ether;\n', '        whitelist[0xC6318573a1Eb70B7B3d53F007d46fcEB3CFcEEaC] = 200 ether;\n', '        whitelist[0x9d4096117d7FFCaD8311A1522029581D7BF6f008] = 150 ether;\n', '        whitelist[0xfa99b733fc996174CE1ef91feA26b15D2adC3E31] = 100 ether;\n', '        whitelist[0xdbb70fbedd2661ef3b6bdf0c105e62fd1c61da7c] = 100 ether;\n', '        whitelist[0xa16fd60B82b81b4374ac2f2734FF0da78D1CEf3f] = 100 ether;\n', '        whitelist[0x8c950B58dD54A54E90D9c8AD8bE87B10ad30B59B] = 100 ether;\n', '        whitelist[0x5c32Bd73Afe16b3De78c8Ce90B64e569792E9411] = 100 ether;\n', '        whitelist[0x4Daf690A5F8a466Cb49b424A776aD505d2CD7B7d] = 100 ether;\n', '        whitelist[0x3da7486DF0F343A0E6AF8D26259187417ed08EC9] = 100 ether;\n', '        whitelist[0x3ac05aa1f06e930640c485a86a831750a6c2275e] = 100 ether;\n', '        whitelist[0x009e02b21aBEFc7ECC1F2B11700b49106D7D552b] = 100 ether;\n', '        whitelist[0xCD540A0cC5260378fc818CA815EC8B22F966C0af] = 85 ether;\n', '        whitelist[0x6e8b688CB562a028E5D9Cb55ac1eE43c22c96995] = 60 ether;\n', '        whitelist[0xe6D62ec63852b246d3D348D4b3754e0E72F67df4] = 50 ether;\n', '        whitelist[0xE127C0c9A2783cBa017a835c34D7AF6Ca602c7C2] = 50 ether;\n', '        whitelist[0xD933d531D354Bb49e283930743E0a473FC8099Df] = 50 ether;\n', '        whitelist[0x8c3C524A2be451A670183Ee4A2415f0d64a8f1ae] = 50 ether;\n', '        whitelist[0x7e0fb316Ac92b67569Ed5bE500D9A6917732112f] = 50 ether;\n', '        whitelist[0x738C090D87f6539350f81c0229376e4838e6c363] = 50 ether;\n', '        // anothers KYC will be added using addWhitelists\n', '    }\n', '\n', '    function hardCapReached() constant public returns (bool) {\n', '        return ((hardCap * 999) / 1000) <= totalEthers;\n', '    }\n', '\n', '    function softCapReached() constant public returns(bool) {\n', '        return totalEthers >= softCap;\n', '    }\n', '\n', '    /*\n', '     * @dev fallback for processing ether\n', '     */\n', '    function() payable {\n', '        return buyTokens(msg.sender);\n', '    }\n', '\n', '    /*\n', '     * @dev calculate amount\n', '     * @param  _value - ether to be converted to tokens\n', '     * @param  at - current time\n', '     * @return token amount that we should send to our dear investor\n', '     */\n', '    function calcAmountAt(uint256 _value, uint256 at) public constant returns (uint256) {\n', '        uint rate;\n', '\n', '        if(startTime + 2 days >= at) {\n', '            rate = 140;\n', '        } else if(startTime + 7 days >= at) {\n', '            rate = 130;\n', '        } else if(startTime + 14 days >= at) {\n', '            rate = 120;\n', '        } else if(startTime + 21 days >= at) {\n', '            rate = 110;\n', '        } else {\n', '            rate = 105;\n', '        }\n', '        return ((_value * rate) / weiPerToken) / 100;\n', '    }\n', '\n', '    /*\n', '     * @dev check contributor is whitelisted or not for buy token \n', '     * @param contributor\n', '     * @param amount â\x80\x94 how much ethers contributor wants to spend\n', '     * @return true if access allowed\n', '     */\n', '    function checkWhitelist(address contributor, uint256 amount) internal returns (bool) {\n', '        return etherBalances[contributor] + amount <= whitelist[contributor];\n', '    }\n', '\n', '    /*\n', '     * @dev grant backer until first 24 hours\n', '     * @param contributor address\n', '     */\n', '    function addWhitelist(address contributor, uint256 amount) onlyOwner public returns (bool) {\n', '        Whitelist(contributor, amount);\n', '        whitelist[contributor] = amount;\n', '        return true;\n', '    }\n', '\n', '\n', '    /*\n', '     * @dev grant backers until first 24 hours\n', '     * @param contributor address\n', '     */\n', '    function addWhitelists(address[] contributors, uint256[] amounts) onlyOwner public returns (bool) {\n', '        address contributor;\n', '        uint256 amount;\n', '\n', '        require(contributors.length == amounts.length);\n', '\n', '        for (uint i = 0; i < contributors.length; i++) {\n', '            contributor = contributors[i];\n', '            amount = amounts[i];\n', '            require(addWhitelist(contributor, amount));\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /*\n', '     * @dev sell token and send to contributor address\n', '     * @param contributor address\n', '     */\n', '    function buyTokens(address contributor) payable validPurchase(contributor) public {\n', '        uint256 amount = calcAmountAt(msg.value, block.timestamp);\n', '  \n', '        require(contributor != 0x0) ;\n', '        require(minimalEther <= msg.value);\n', '        require(token.totalSupply() + amount <= maximumTokens);\n', '\n', '        token.mint(contributor, amount);\n', '        TokenPurchase(contributor, msg.value, amount);\n', '\n', '        if(softCapReached()) {\n', '            totalEthers = totalEthers + msg.value;\n', '        } else if (this.balance >= softCap) {\n', '            totalEthers = this.balance;\n', '        } else {\n', '            etherBalances[contributor] = etherBalances[contributor] + msg.value;\n', '        }\n', '\n', '        require(totalEthers <= hardCap);\n', '    }\n', '\n', '    // @withdraw to wallet\n', '    function withdraw() onlyOwner public {\n', '        require(softCapReached());\n', '        require(this.balance > 0);\n', '\n', '        wallet.transfer(this.balance);\n', '    }\n', '\n', '    // @withdraw token to wallet\n', '    function withdrawTokenToFounder() onlyOwner public {\n', '        require(token.balanceOf(this) > 0);\n', '        require(softCapReached());\n', '        require(startTime + 1 years < now);\n', '\n', '        token.transfer(wallet, token.balanceOf(this));\n', '    }\n', '\n', '    // @refund to backers, if softCap is not reached\n', '    function refund() isExpired public {\n', '        require(refundAllowed);\n', '        require(!softCapReached());\n', '        require(etherBalances[msg.sender] > 0);\n', '        require(token.balanceOf(msg.sender) > 0);\n', '\n', '        uint256 current_balance = etherBalances[msg.sender];\n', '        etherBalances[msg.sender] = 0;\n', ' \n', '        token.burn(msg.sender);\n', '        msg.sender.transfer(current_balance);\n', '    }\n', '\n', '    function finishCrowdsale() onlyOwner public {\n', '        require(now > endTime || hardCapReached());\n', '        require(!token.mintingFinished());\n', '\n', '        bountyReward = token.totalSupply() * 3 / 83; \n', '        teamReward = token.totalSupply() * 7 / 83; \n', '        founderReward = token.totalSupply() * 7 / 83; \n', '\n', '        if(softCapReached()) {\n', '            token.mint(wallet, bountyReward);\n', '            token.mint(wallet, teamReward);\n', '            token.mint(this, founderReward);\n', '\n', '            token.finishMinting(true);\n', '        } else {\n', '            refundAllowed = true;\n', '            token.finishMinting(false);\n', '        }\n', '   }\n', '\n', '    // @return true if crowdsale event has ended\n', '    function running() public constant returns (bool) {\n', '        return now >= startTime && !(now > endTime || hardCapReached());\n', '    }\n', '}\n', '\n', 'contract Token is MintableToken {\n', '\n', "    string public constant name = 'Privatix';\n", "    string public constant symbol = 'PRIX';\n", '    uint8 public constant decimals = 8;\n', '    bool public transferAllowed;\n', '\n', '    event Burn(address indexed from, uint256 value);\n', '    event TransferAllowed(bool);\n', '\n', '    modifier canTransfer() {\n', '        require(mintingFinished && transferAllowed);\n', '        _;        \n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint256 value) canTransfer returns (bool) {\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    function transfer(address to, uint256 value) canTransfer returns (bool) {\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function finishMinting(bool _transferAllowed) onlyOwner returns (bool) {\n', '        transferAllowed = _transferAllowed;\n', '        TransferAllowed(_transferAllowed);\n', '        return super.finishMinting();\n', '    }\n', '\n', '    function burn(address from) onlyOwner returns (bool) {\n', '        Transfer(from, 0x0, balances[from]);\n', '        Burn(from, balances[from]);\n', '\n', '        balances[0x0] += balances[from];\n', '        balances[from] = 0;\n', '    }\n', '}']