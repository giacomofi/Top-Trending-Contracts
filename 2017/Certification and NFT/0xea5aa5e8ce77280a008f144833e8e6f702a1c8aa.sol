['pragma solidity ^0.4.16;\n', '/**\n', ' * @title SafeMath by OpenZeppelin\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract token {\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    }\n', '\n', 'contract ICO {\n', '    using SafeMath for uint256;\n', '    //This ico have 3 stages\n', '    enum State {\n', '        Ongoin,\n', '        SoftCap,\n', '        Successful\n', '    }\n', '    //public variables\n', '    State public state = State.Ongoin; //Set initial stage\n', '    uint256 public startTime = now; //block-time when it was deployed\n', '    uint256 public delay;\n', '    //List of prices, as both, eth and token have 18 decimal, its a direct factor\n', '    uint[2] public tablePrices = [\n', '    2500, //for first 10million tokens\n', '    2000\n', '    ];\n', '    uint256 public SoftCap = 40000000 * (10 ** 18); //40 million tokens\n', '    uint256 public HardCap = 80000000 * (10 ** 18); //80 million tokens\n', '    uint256 public totalRaised; //eth in wei\n', '    uint256 public totalDistributed; //tokens\n', '    uint256 public ICOdeadline = startTime.add(21 days);//21 days deadline\n', '    uint256 public completedAt;\n', '    uint256 public closedAt;\n', '    token public tokenReward;\n', '    address public creator;\n', '    address public beneficiary;\n', '    string public campaignUrl;\n', '    uint8 constant version = 1;\n', '\n', '    //events for log\n', '    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\n', '    event LogBeneficiaryPaid(address _beneficiaryAddress);\n', '    event LogFundingSuccessful(uint _totalRaised);\n', '    event LogFunderInitialized(\n', '        address _creator,\n', '        address _beneficiary,\n', '        string _url,\n', '        uint256 _ICOdeadline);\n', '    event LogContributorsPayout(address _addr, uint _amount);\n', '\n', '    modifier notFinished() {\n', '        require(state != State.Successful);\n', '        _;\n', '    }\n', '    /**\n', '    * @notice ICO constructor\n', '    * @param _campaignUrl is the ICO _url\n', '    * @param _addressOfTokenUsedAsReward is the token totalDistributed\n', '    */\n', '    function ICO (string _campaignUrl, token _addressOfTokenUsedAsReward, uint256 _delay) public {\n', '        creator = msg.sender;\n', '        beneficiary = msg.sender;\n', '        campaignUrl = _campaignUrl;\n', '        tokenReward = token(_addressOfTokenUsedAsReward);\n', '        delay = startTime.add(_delay * 1 hours);\n', '        LogFunderInitialized(\n', '            creator,\n', '            beneficiary,\n', '            campaignUrl,\n', '            ICOdeadline);\n', '    }\n', '\n', '    /**\n', '    * @notice contribution handler\n', '    */\n', '    function contribute() public notFinished payable {\n', '        require(now > delay);\n', '        uint tokenBought;\n', '        totalRaised = totalRaised.add(msg.value);\n', '\n', '        if(totalDistributed < 10000000 * (10 ** 18)){ //if on the first 10M\n', '            tokenBought = msg.value.mul(tablePrices[0]);\n', '        }\n', '        else {\n', '            tokenBought = msg.value.mul(tablePrices[1]);\n', '        }\n', '\n', '        totalDistributed = totalDistributed.add(tokenBought);\n', '        tokenReward.transfer(msg.sender, tokenBought);\n', '        \n', '        LogFundingReceived(msg.sender, msg.value, totalRaised);\n', '        LogContributorsPayout(msg.sender, tokenBought);\n', '        \n', '        checkIfFundingCompleteOrExpired();\n', '    }\n', '\n', '    /**\n', '    * @notice check status\n', '    */\n', '    function checkIfFundingCompleteOrExpired() public {\n', '        \n', '        if(now < ICOdeadline && state!=State.Successful){ //if we are on ICO period and its not Successful\n', '            if(state == State.Ongoin && totalRaised >= SoftCap){ //if we are Ongoin and we pass the SoftCap\n', '                state = State.SoftCap; //We are on SoftCap state\n', '                completedAt = now; //ICO is complete and will finish in 24h\n', '            }\n', '            else if (state == State.SoftCap && now > completedAt.add(24 hours)){ //if we are on SoftCap state and 24hrs have passed\n', '                state == State.Successful; //the ico becomes Successful\n', '                closedAt = now; //we finish now\n', '                LogFundingSuccessful(totalRaised); //we log the finish\n', '                finished(); //and execute closure\n', '            }\n', '        }\n', '        else if(now > ICOdeadline && state!=State.Successful ) { //if we reach ico deadline and its not Successful yet\n', '            state = State.Successful; //ico becomes Successful\n', '\n', '            if(completedAt == 0){  //if not completed previously\n', '                completedAt = now; //we complete now\n', '            }\n', '\n', '            closedAt = now; //we finish now\n', '            LogFundingSuccessful(totalRaised); //we log the finish\n', '            finished(); //and execute closure\n', '        }\n', '    }\n', '\n', '    function payOut() public {\n', '        require(msg.sender == beneficiary);\n', '        require(beneficiary.send(this.balance));\n', '        LogBeneficiaryPaid(beneficiary);\n', '    }\n', '\n', '   /**\n', '    * @notice closure handler\n', '    */\n', '    function finished() public { //When finished eth are transfered to beneficiary\n', '        require(state == State.Successful);\n', '        uint256 remanent = tokenReward.balanceOf(this);\n', '\n', '        require(beneficiary.send(this.balance));\n', '        tokenReward.transfer(beneficiary,remanent);\n', '\n', '        LogBeneficiaryPaid(beneficiary);\n', '        LogContributorsPayout(beneficiary, remanent);\n', '    }\n', '\n', '    function () public payable {\n', '        contribute();\n', '    }\n', '}']