['pragma solidity ^0.4.11;\n', '/*\n', 'Moira ICO Contract\n', '\n', 'MOI is an ERC-20 Token Standar Compliant\n', '\n', 'Contract developer: Fares A. Akel C.\n', 'f.antonio.akel@gmail.com\n', 'MIT PGP KEY ID: 078E41CB\n', '*/\n', '\n', '/**\n', ' * @title SafeMath by OpenZeppelin\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract token { //Token functions definition\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '    }\n', 'contract MOIRAICO {\n', '    //This ico have 4 stages for 4 weeks and the Successful stage when finished\n', '    enum State {\n', '        Preico,\n', '        Ico,\n', '        Successful\n', '    }\n', '    \n', '    State public state = State.Preico; //Set initial stage\n', '    uint startTime = now; //block-time when it was deployed\n', '\n', '    //List of prices for each stage, as both, eth and moi have 18 decimal, its a direct factor\n', '    uint[4] tablePrices = [\n', '    58000,\n', '    63800,\n', '    32200\n', '    ];\n', '\n', '    mapping (address => uint) balances; //balances mapping\n', '    //public variables\n', '    uint public totalRaised;\n', '    uint public currentBalance;\n', '    uint public preICODeadline;\n', '    uint public ICOdeadline;\n', '    uint public completedAt;\n', '    token public tokenReward;\n', '    address public creator;\n', '    address public beneficiary; \n', '    string public campaignUrl;\n', '    uint constant version = 1;\n', '\n', '    //events for log\n', '\n', '    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\n', '    event LogBeneficiaryPaid(address _beneficiaryAddress);\n', '    event LogFundingSuccessful(uint _totalRaised);\n', '    event LogFunderInitialized(\n', '        address _creator,\n', '        address _beneficiary,\n', '        string _url,\n', '        uint256 _preICODeadline,\n', '        uint256 _ICOdeadline);\n', '    event LogContributorsPayout(address _addr, uint _amount);\n', '\n', '    modifier notFinished() {\n', '        require(state != State.Successful);\n', '        _;\n', '    }\n', '\n', '    function MOIRAICO (\n', '        string _campaignUrl,\n', '        token _addressOfTokenUsedAsReward )\n', '        public\n', '    {\n', '        creator = msg.sender;\n', '        beneficiary = msg.sender;\n', '        campaignUrl = _campaignUrl;\n', '        preICODeadline = SafeMath.add(startTime,34 days);\n', '        ICOdeadline = SafeMath.add(preICODeadline,30 days);\n', '        currentBalance = 0;\n', '        tokenReward = token(_addressOfTokenUsedAsReward);\n', '        LogFunderInitialized(\n', '            creator,\n', '            beneficiary,\n', '            campaignUrl,\n', '            preICODeadline,\n', '            ICOdeadline);\n', '    }\n', '\n', '    function contribute() public notFinished payable {\n', '\n', '        require(msg.value > 1 finney); //minimun contribution\n', '\n', '        uint tokenBought;\n', '        totalRaised =SafeMath.add(totalRaised, msg.value);\n', '        currentBalance = totalRaised;\n', '\n', '        if(state == State.Preico){\n', '            tokenBought = SafeMath.mul(msg.value,tablePrices[0]);\n', '        }\n', '        else if(state == State.Preico && now < (startTime + 1 days)) {\n', '            tokenBought = SafeMath.mul(msg.value,tablePrices[1]);\n', '        }\n', '        else{\n', '            tokenBought = SafeMath.mul(msg.value,tablePrices[2]);\n', '        }\n', '\n', '        tokenReward.transfer(msg.sender, tokenBought);\n', '        \n', '        LogFundingReceived(msg.sender, msg.value, totalRaised);\n', '        LogContributorsPayout(msg.sender, tokenBought);\n', '        \n', '        checkIfFundingCompleteOrExpired();\n', '    }\n', '\n', '    function checkIfFundingCompleteOrExpired() public {\n', '        \n', '        if(now < ICOdeadline && state!=State.Successful){\n', '            if(now > preICODeadline && state==State.Preico){\n', '                state = State.Ico;    \n', '            }\n', '        }\n', '        else if(now > ICOdeadline && state!=State.Successful) {\n', '            state = State.Successful;\n', '            completedAt = now;\n', '            LogFundingSuccessful(totalRaised);\n', '            finished();  \n', '        }\n', '    }\n', '\n', '    function finished() public { //When finished eth and remaining tokens are transfered to beneficiary\n', '        uint remanent;\n', '\n', '        require(state == State.Successful);\n', '        require(beneficiary.send(this.balance));\n', '        remanent =  tokenReward.balanceOf(this);\n', '        tokenReward.transfer(beneficiary,remanent);\n', '\n', '        currentBalance = 0;\n', '\n', '        LogBeneficiaryPaid(beneficiary);\n', '        LogContributorsPayout(beneficiary, remanent);\n', '    }\n', '\n', '    function () public payable {\n', '        require(msg.value > 1 finney);\n', '        contribute();\n', '    }\n', '}']