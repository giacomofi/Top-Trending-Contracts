['pragma solidity ^0.4.15;\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        assert(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != owner);\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnerUpdate(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = 0x0;\n', '    }\n', '\n', '    event OwnerUpdate(address _prevOwner, address _newOwner);\n', '}\n', '\n', 'contract IERC20Token {\n', '  function totalSupply() constant returns (uint256 totalSupply);\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '  function transfer(address _to, uint256 _value) returns (bool success) {}\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '  function approve(address _spender, uint256 _value) returns (bool success) {}\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', 'contract VestingContract is Owned {\n', '    \n', '    address public withdrawalAddress;\n', '    address public tokenAddress;\n', '    \n', '    uint public lastBlockClaimed;\n', '    uint public blockDelay;\n', '    uint public reward;\n', '    \n', '    event ClaimExecuted(uint _amount, uint _blockNumber, address _destination);\n', '    \n', '    function VestingContract() {\n', '        \n', '        lastBlockClaimed = 4216530;\n', '        blockDelay = 152470;\n', '        reward = 1333333000000000000000000;\n', '        \n', '        tokenAddress = 0x2C974B2d0BA1716E644c1FC59982a89DDD2fF724;\n', '    }\n', '    \n', '    function claimReward() public onlyOwner {\n', '        require(block.number >= lastBlockClaimed + blockDelay);\n', '        uint withdrawalAmount;\n', '        if (IERC20Token(tokenAddress).balanceOf(address(this)) > reward) {\n', '            withdrawalAmount = reward;\n', '        }else {\n', '            withdrawalAmount = IERC20Token(tokenAddress).balanceOf(address(this));\n', '        }\n', '        IERC20Token(tokenAddress).transfer(withdrawalAddress, withdrawalAmount);\n', '        lastBlockClaimed += blockDelay;\n', '        ClaimExecuted(withdrawalAmount, block.number, withdrawalAddress);\n', '    }\n', '    \n', '    function salvageTokensFromContract(address _tokenAddress, address _to, uint _amount) public onlyOwner {\n', '        require(_tokenAddress != tokenAddress);\n', '        \n', '        IERC20Token(_tokenAddress).transfer(_to, _amount);\n', '    }\n', '    \n', '    //\n', '    // Setters\n', '    //\n', '\n', '    function setWithdrawalAddress(address _newAddress) public onlyOwner {\n', '        withdrawalAddress = _newAddress;\n', '    }\n', '    \n', '    function setBlockDelay(uint _newBlockDelay) public onlyOwner {\n', '        blockDelay = _newBlockDelay;\n', '    }\n', '    \n', '    //\n', '    // Getters\n', '    //\n', '    \n', '    function getTokenBalance() public constant returns(uint) {\n', '        return IERC20Token(tokenAddress).balanceOf(address(this));\n', '    }\n', '}']