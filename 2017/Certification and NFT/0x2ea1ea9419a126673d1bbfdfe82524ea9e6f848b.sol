['pragma solidity ^0.4.18;\n', '// **-----------------------------------------------\n', '// MOYToken Storage.\n', '// Contract in address PowerLineUpStorage.eth\n', '// Storage for 30,000,000 in-platform MOYTokens. \n', '// Tokens only available through mining, stacking and tournaments in-platform through smart contracts.\n', '// Proyect must have enough funds provided by PowerLineUp and partners to realease tokens. \n', '// This Contract stores the token and keeps record of own funding by PowerLineUp and partners. \n', '// For Open Distribution refer to contract at powcrowdsale.eth (will be launched only if own funding of proyect succeeds first.)\n', '// All operations can be monitored at etherscan.io\n', '\n', '// **-----------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/issues/20\n', '// -------------------------------------------------\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract safeMath {\n', '  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    safeAssert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    safeAssert(b > 0);\n', '    uint256 c = a / b;\n', '    safeAssert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    safeAssert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    safeAssert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function safeAssert(bool assertion) internal pure {\n', '    if (!assertion) revert();\n', '  }\n', '}\n', '\n', 'contract StandardToken is owned, safeMath {\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract MoyTokenStorage is owned, safeMath {\n', '  // owner/admin & token reward\n', '  address        public admin = owner;   //admin address\n', '  StandardToken  public tokenReward;     // address of MoibeTV MOY ERC20 Standard Token.\n', '\n', '  // loop control and limiters for funding proyect and mineable tokens through presale.\n', '\n', '  string  public CurrentStatus = "";                          // current preSale status\n', '  uint256 public fundingStartBlock;                           // preSale start block#\n', '  uint256 public fundingEndBlock;                             // preSale end block#\n', '  uint256 public successAtBlock;                              // the private funding succeed at this block. All in-platform tokens backed.\n', '  uint256 public amountRaisedInUsd;                           //amount raised in USD for tokens backing. \n', '  uint256 public tokensPerEthAtRegularPrice;       \n', '  \n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value); \n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Buy(address indexed _sender, uint256 _eth, uint256 _MOY);\n', '  mapping(address => uint256) balancesArray;\n', '  mapping(address => uint256) fundValue;\n', '\n', '  // default function, map admin\n', '  function MoyTokenStorage() public onlyOwner {\n', '    admin = msg.sender;\n', '    CurrentStatus = "In-Platform POW Tokens Storage Released";\n', '  }\n', '\n', '  \n', '  // setup the PreSale parameters\n', '  function setupStorage(uint256 _fundingStartBlock, uint256 _fundingEndBlock) public onlyOwner returns (bytes32 response) {\n', '      \n', '      if (msg.sender == admin)\n', '      {\n', '          tokenReward = StandardToken(0x2a47E3c69DeAAe8dbDc5ee272d1a3C0f9853DcBD);  //MOYtoken Smart Contract.\n', '          tokensPerEthAtRegularPrice = 1000;                                        //Regular Price 1 ETH = 1000 MOY in-platform.Value to calculate proyect funding.\n', '          amountRaisedInUsd = 0;\n', '\n', '          fundingStartBlock = _fundingStartBlock;\n', '          fundingEndBlock = _fundingEndBlock;\n', '                \n', '          CurrentStatus = "Fundind of Proyect in Process";\n', '          //PowerLineUp is funding the proyect to be able to launch the tokens. \n', '          \n', '          return "Storage is setup.";\n', '\n', '      } else if (msg.sender != admin) {\n', '          return "Not Authorized";\n', '      } else  {\n', '          return "Setup cannot be changed.";\n', '      }\n', '    }\n', '\n', '  // setup success parameters if proyect funding succeed. \n', '  function FundingCompleted(uint256 _amountRaisedInUsd, uint256 _successAtBlock) public onlyOwner returns (bytes32 response) {\n', '      if (msg.sender == admin)\n', '      {\n', '          // Funding is the capital invested by PowerLineUp and partners to back the whole proyect and the tokens released.\n', '          amountRaisedInUsd = _amountRaisedInUsd; //amount raised includes development, human resources, infraestructure, design and marketing achieved by the proyect founders and partners.\n', '          successAtBlock = _successAtBlock;       //Block when goal reached.\n', '                 \n', '          CurrentStatus = "Funding Successful, in-platform tokens ready to use.";\n', '          \n', '          return "All in-platform tokens backed.";\n', '      } else if (msg.sender != admin) {\n', '          return "Not Authorized";\n', '      } else  {\n', '          return "Setup cannot be changed.";\n', '      }\n', '    }\n', '\n', '    // default payable function when sending ether to this contract\n', '    // only owner (PowerLineUp) can send ether to this address.\n', '    function () public payable {\n', '      require(msg.sender == admin);\n', '      Transfer(this, msg.sender, msg.value); \n', '    }\n', '}']