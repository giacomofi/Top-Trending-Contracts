['pragma solidity ^0.4.17;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '\n', '  modifier onlyOwner(){\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '      */\n', '  function transfer(address _to, uint256 _value) public returns (bool){\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  /**\n', '  * @dev Transfer tokens from one address to another\n', '  * @param _from address The address which you want to send tokens from\n', '  * @param _to address The address which you want to transfer to\n', '  * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '  * @param _spender The address which will spend the funds.\n', '  * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '  * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev Function to mint tokens\n', '  * @param _to The address that will recieve the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Transfer(0X0, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Function to stop minting new tokens.\n', '  * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract DeBuNeToken is MintableToken {\n', '  // Coin Properties\n', '  string public name = "DeBuNe";\n', '  string public symbol = "DBN";\n', '  uint256 public decimals = 18;\n', '\n', '  // Special propeties\n', '  bool public tradingStarted = false;\n', '\n', '  /**\n', '  * @dev modifier that throws if trading has not started yet\n', '   */\n', '  modifier hasStartedTrading() {\n', '    require(tradingStarted);\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev Allows the owner to enable the trading. This can not be undone\n', '  */\n', '  function startTrading() public onlyOwner {\n', '    tradingStarted = true;\n', '  }\n', '\n', '  /**\n', '  * @dev Allows anyone to transfer the Change tokens once trading has started\n', '  * @param _to the recipient address of the tokens.\n', '  * @param _value number of tokens to be transfered.\n', '   */\n', '  function transfer(address _to, uint _value) hasStartedTrading public returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Allows anyone to transfer the Change tokens once trading has started\n', '  * @param _from address The address which you want to send tokens from\n', '  * @param _to address The address which you want to transfer to\n', '  * @param _value uint the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint _value) hasStartedTrading public returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function emergencyERC20Drain( ERC20 oddToken, uint amount ) public {\n', '    oddToken.transfer(owner, amount);\n', '  }\n', '}\n', '\n', 'contract DeBuNETokenSale is Ownable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  DeBuNeToken public token;\n', '\n', '  uint256 public decimals;  \n', '\n', '  uint256 public oneCoin;\n', '\n', '  // start and end block where investments are allowed (both inclusive)\n', '  uint256 public startTimestamp;\n', '  uint256 public endTimestamp;\n', '\n', '  // timestamps for tiers\n', '  uint256 public tier1Timestamp;\n', '  uint256 public tier2Timestamp;\n', '  uint256 public tier3Timestamp;\n', '\n', '  // address where funds are collected\n', '\n', '  address public HardwareWallet;\n', '\n', '  function setWallet(address _newWallet) public onlyOwner {\n', '    HardwareWallet = _newWallet;\n', '  }\n', '\n', '  // These will be set by setTier()\n', '\n', '  uint256 public rate; // how many token units a buyer gets per wei\n', '\n', '  uint256 public minContribution;  // minimum contributio to participate in tokensale\n', '\n', '  uint256 public maxContribution;  // default limit to tokens that the users can buy\n', '\n', '  // ***************************\n', '  // amount of raised money in wei\n', '\n', '  uint256 public weiRaised;\n', '\n', '  // amount of raised tokens \n', '\n', '  uint256 public tokenRaised;\n', '\n', '  // maximum amount of tokens being created\n', '\n', '  uint256 public maxTokens;\n', '\n', '  // maximum amount of tokens for sale\n', '\n', '  uint256 public tokensForSale;  // 40 Million Tokens for SALE\n', '\n', '  // number of participants in presale\n', '\n', '  uint256 public numberOfPurchasers = 0;\n', '\n', '  //  for whitelist\n', '  address public cs;\n', '  //  for whitelist AND placement\n', '  address public Admin;\n', '\n', '  // switch on/off the authorisation , default: true - on\n', '\n', '  bool    public freeForAll = false;\n', '\n', '  mapping (address => bool) public authorised; // just to annoy the heck out of americans\n', '\n', '  event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  event SaleClosed();\n', '\n', ' function DeBuNETokenSale() public {\n', '    startTimestamp = 1521126000; //   2018/03/15 15:00 GMT\n', '    endTimestamp =  1525046400;   //  2018/04/30 00:00 GMT\n', '    tier1Timestamp = 1522454400; //  2018/03/31 00:00 GMT\n', '    tier2Timestamp = 1523750400; //  2018/04/15 00:00 GMT\n', '    tier3Timestamp = 1525046400; //  2018/04/30 00:00 GMT\n', '\n', '\n', '\n', '// *************************************\n', '\n', '    HardwareWallet = 0xf651e2409120f1FbB0e47812d759e883b5B68A60;\n', '\n', '//**************************************    \n', '\n', '    token = new DeBuNeToken();\n', '    decimals = token.decimals();\n', '    oneCoin = 10 ** decimals;\n', '    maxTokens = 100 * (10**6) * oneCoin;  // max number of tokens what we will create\n', '    tokensForSale = 40 * (10**6) * oneCoin; // max number of tokens what we want to sell now\n', '\n', '}\n', '    /**\n', '  * @dev Calculates the amount of bonus coins the buyer gets\n', '   */\n', '  function getRateAt(uint256 at) internal returns (uint256) {\n', '    if (at < (tier1Timestamp))\n', '      return 100;\n', '      minContribution = 50 ether;  \n', '      maxContribution = 5000 ether;\n', '    if (at < (tier2Timestamp))\n', '      return 67;\n', '      minContribution = 25 ether;\n', '      maxContribution = 2500 ether;\n', '     if (at < (tier3Timestamp))\n', '      return 50;\n', '      minContribution = 1 ether;\n', '      maxContribution = 100 ether;\n', '    return 40;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    if (now > endTimestamp)\n', '      return true;\n', '    if (tokenRaised >= tokensForSale)\n', '      return true; // if we reach the tokensForSale\n', '    return false;\n', ' }\n', '\n', '  /**\n', '  * @dev throws if person sending is not contract owner or cs role\n', '   */\n', '  modifier onlyCSorAdmin() {\n', '    require((msg.sender == Admin) || (msg.sender==cs));\n', '    _;\n', '  }\n', '  modifier onlyAdmin() {\n', '    require(msg.sender == Admin);\n', '    _;\n', '  }\n', '  /**\n', '  * @dev throws if person sending is not authorised or sends nothing\n', '  */\n', '  modifier onlyAuthorised() {\n', '    require (authorised[msg.sender] || freeForAll);\n', '    require (now >= startTimestamp);\n', '    require (!(hasEnded()));\n', '    require (HardwareWallet != 0x0);\n', '    require (msg.value > 1 finney);\n', '    require(tokensForSale > tokenRaised); // check we are not over the number of tokensForSale\n', '    _;\n', '  }\n', '  /**\n', '  * @dev authorise an account to participate\n', '  */\n', '  function authoriseAccount(address whom) onlyCSorAdmin public {\n', '    authorised[whom] = true;\n', '  }\n', '\n', '  /**\n', '  * @dev authorise a lot of accounts in one go\n', '  */\n', '  function authoriseManyAccounts(address[] many) onlyCSorAdmin public {\n', '    for (uint256 i = 0; i < many.length; i++) {\n', '      authorised[many[i]] = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev ban an account from participation (default)\n', '  */\n', '  function blockAccount(address whom) onlyCSorAdmin public {\n', '    authorised[whom] = false;\n', '  }\n', '\n', '  /**\n', '  * @dev set a new CS representative\n', '  */\n', '  function setCS(address newCS) onlyOwner public {\n', '    cs = newCS;\n', '  }\n', '\n', '  /**\n', '  * @dev set a new Admin representative\n', '  */\n', '  function setAdmin(address newAdmin) onlyOwner public {\n', '    Admin = newAdmin;\n', '  }\n', '\n', '  function placeTokens(address beneficiary, uint256 _tokens) onlyAdmin public {\n', '    //check minimum and maximum amount\n', '    require(_tokens != 0);\n', '    require(!hasEnded());\n', '    uint256 amount = 0;\n', '    if (token.balanceOf(beneficiary) == 0) {\n', '      numberOfPurchasers++;\n', '    }\n', '    tokenRaised = tokenRaised.add(_tokens); // so we can go slightly over\n', '    token.mint(beneficiary, _tokens);\n', '    TokenPurchase(beneficiary, amount, _tokens);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary, uint256 amount) onlyAuthorised internal {\n', '    //check minimum and maximum amount , we check it now in the tiers\n', '    \n', '    // Calculate token amount to be purchased\n', '    uint256 actualRate = getRateAt(now);\n', '    uint256 tokens = amount.mul(actualRate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(amount);\n', '    if (token.balanceOf(beneficiary) == 0) {\n', '      numberOfPurchasers++;\n', '    }\n', '    tokenRaised = tokenRaised.add(tokens); // so we can go slightly over\n', ' \n', '    // mint the tokens to the buyer\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(beneficiary, amount, tokens);\n', '\n', '    // send the ether to the hardwarewallet\n', '    HardwareWallet.transfer(this.balance); // better in case any other ether ends up here\n', '  }\n', '\n', '  // transfer ownership of the token to the owner of the presale contract\n', '  function finishSale() public onlyOwner {\n', '    require(hasEnded());\n', '    // assign the rest of the 100M tokens to the reserve\n', '    uint unassigned;\n', '    if(maxTokens > tokenRaised) {\n', '      unassigned  = maxTokens.sub(tokenRaised);\n', '      token.mint(HardwareWallet,unassigned);\n', '    }\n', '    token.finishMinting();\n', '    token.transferOwnership(owner);\n', '    SaleClosed();\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () public payable {\n', '    buyTokens(msg.sender, msg.value);\n', '  }\n', '\n', '  function emergencyERC20Drain( ERC20 oddToken, uint amount ) public {\n', '    oddToken.transfer(owner, amount);\n', '  }\n', '}']