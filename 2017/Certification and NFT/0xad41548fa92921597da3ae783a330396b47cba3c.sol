['pragma solidity ^0.4.15;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is StandardToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value > 0);\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '}\n', '\n', '// Quantstamp Technologies Inc. (info@quantstamp.com)\n', '\n', '\n', '\n', '/**\n', ' * The Quantstamp token (QSP) has a fixed supply and restricts the ability\n', ' * to transfer tokens until the owner has called the enableTransfer()\n', ' * function.\n', ' *\n', ' * The owner can associate the token with a token sale contract. In that\n', ' * case, the token balance is moved to the token sale contract, which\n', ' * in turn can transfer its tokens to contributors to the sale.\n', ' */\n', 'contract QuantstampToken is StandardToken, BurnableToken, Ownable {\n', '\n', '    // Constants\n', '    string  public constant name = "Quantstamp Token";\n', '    string  public constant symbol = "QSP";\n', '    uint8   public constant decimals = 18;\n', '    uint256 public constant INITIAL_SUPPLY      = 1000000000 * (10 ** uint256(decimals));\n', '    uint256 public constant CROWDSALE_ALLOWANCE =  650000000 * (10 ** uint256(decimals));\n', '    uint256 public constant ADMIN_ALLOWANCE     =  350000000 * (10 ** uint256(decimals));\n', '\n', '    // Properties\n', '    uint256 public crowdSaleAllowance;      // the number of tokens available for crowdsales\n', '    uint256 public adminAllowance;          // the number of tokens available for the administrator\n', '    address public crowdSaleAddr;           // the address of a crowdsale currently selling this token\n', '    address public adminAddr;               // the address of the token admin account\n', '    bool    public transferEnabled = false; // indicates if transferring tokens is enabled or not\n', '\n', '    // Modifiers\n', '    modifier onlyWhenTransferEnabled() {\n', '        if (!transferEnabled) {\n', '            require(msg.sender == adminAddr || msg.sender == crowdSaleAddr);\n', '        }\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * The listed addresses are not valid recipients of tokens.\n', '     *\n', '     * 0x0           - the zero address is not valid\n', '     * this          - the contract itself should not receive tokens\n', '     * owner         - the owner has all the initial tokens, but cannot receive any back\n', '     * adminAddr     - the admin has an allowance of tokens to transfer, but does not receive any\n', '     * crowdSaleAddr - the crowdsale has an allowance of tokens to transfer, but does not receive any\n', '     */\n', '    modifier validDestination(address _to) {\n', '        require(_to != address(0x0));\n', '        require(_to != address(this));\n', '        require(_to != owner);\n', '        require(_to != address(adminAddr));\n', '        require(_to != address(crowdSaleAddr));\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Constructor - instantiates token supply and allocates balanace of\n', '     * to the owner (msg.sender).\n', '     */\n', '    function QuantstampToken(address _admin) {\n', '        // the owner is a custodian of tokens that can\n', '        // give an allowance of tokens for crowdsales\n', '        // or to the admin, but cannot itself transfer\n', '        // tokens; hence, this requirement\n', '        require(msg.sender != _admin);\n', '\n', '        totalSupply = INITIAL_SUPPLY;\n', '        crowdSaleAllowance = CROWDSALE_ALLOWANCE;\n', '        adminAllowance = ADMIN_ALLOWANCE;\n', '\n', '        // mint all tokens\n', '        balances[msg.sender] = totalSupply;\n', '        Transfer(address(0x0), msg.sender, totalSupply);\n', '\n', '        adminAddr = _admin;\n', '        approve(adminAddr, adminAllowance);\n', '    }\n', '\n', '    /**\n', '     * Associates this token with a current crowdsale, giving the crowdsale\n', '     * an allowance of tokens from the crowdsale supply. This gives the\n', '     * crowdsale the ability to call transferFrom to transfer tokens to\n', '     * whomever has purchased them.\n', '     *\n', '     * Note that if _amountForSale is 0, then it is assumed that the full\n', '     * remaining crowdsale supply is made available to the crowdsale.\n', '     *\n', '     * @param _crowdSaleAddr The address of a crowdsale contract that will sell this token\n', '     * @param _amountForSale The supply of tokens provided to the crowdsale\n', '     */\n', '    function setCrowdsale(address _crowdSaleAddr, uint256 _amountForSale) external onlyOwner {\n', '        require(!transferEnabled);\n', '        require(_amountForSale <= crowdSaleAllowance);\n', '\n', '        // if 0, then full available crowdsale supply is assumed\n', '        uint amount = (_amountForSale == 0) ? crowdSaleAllowance : _amountForSale;\n', '\n', '        // Clear allowance of old, and set allowance of new\n', '        approve(crowdSaleAddr, 0);\n', '        approve(_crowdSaleAddr, amount);\n', '\n', '        crowdSaleAddr = _crowdSaleAddr;\n', '    }\n', '\n', '    /**\n', '     * Enables the ability of anyone to transfer their tokens. This can\n', '     * only be called by the token owner. Once enabled, it is not\n', '     * possible to disable transfers.\n', '     */\n', '    function enableTransfer() external onlyOwner {\n', '        transferEnabled = true;\n', '        approve(crowdSaleAddr, 0);\n', '        approve(adminAddr, 0);\n', '        crowdSaleAllowance = 0;\n', '        adminAllowance = 0;\n', '    }\n', '\n', '    /**\n', '     * Overrides ERC20 transfer function with modifier that prevents the\n', '     * ability to transfer tokens until after transfers have been enabled.\n', '     */\n', '    function transfer(address _to, uint256 _value) public onlyWhenTransferEnabled validDestination(_to) returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * Overrides ERC20 transferFrom function with modifier that prevents the\n', '     * ability to transfer tokens until after transfers have been enabled.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public onlyWhenTransferEnabled validDestination(_to) returns (bool) {\n', '        bool result = super.transferFrom(_from, _to, _value);\n', '        if (result) {\n', '            if (msg.sender == crowdSaleAddr)\n', '                crowdSaleAllowance = crowdSaleAllowance.sub(_value);\n', '            if (msg.sender == adminAddr)\n', '                adminAllowance = adminAllowance.sub(_value);\n', '        }\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * Overrides the burn function so that it cannot be called until after\n', '     * transfers have been enabled.\n', '     *\n', '     * @param _value    The amount of tokens to burn in mini-QSP\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(transferEnabled || msg.sender == owner);\n', '        require(balances[msg.sender] >= _value);\n', '        super.burn(_value);\n', '        Transfer(msg.sender, address(0x0), _value);\n', '    }\n', '}\n', '\n', '// Quantstamp Technologies Inc. (info@quantstamp.com)\n', '\n', '\n', '\n', '/**\n', ' * The QuantstampSale smart contract is used for selling QuantstampToken\n', ' * tokens (QSP). It does so by converting ETH received into a quantity of\n', ' * tokens that are transferred to the contributor via the ERC20-compatible\n', ' * transferFrom() function.\n', ' */\n', 'contract QuantstampMainSale is Pausable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    uint public constant RATE = 5000;       // constant for converting ETH to QSP\n', '    uint public constant GAS_LIMIT_IN_WEI = 50000000000 wei;\n', '\n', '    bool public fundingCapReached = false;  // funding cap has been reached\n', '    bool public saleClosed = false;         // crowdsale is closed or not\n', '    bool private rentrancy_lock = false;    // prevent certain functions from recursize calls\n', '\n', '    uint public fundingCap;                 // upper bound on amount that can be raised (in wei)\n', '    uint256 public cap;                     // individual cap during initial period of sale\n', '\n', '    uint public minContribution;            // lower bound on amount a contributor can send (in wei)\n', '    uint public amountRaised;               // amount raised so far (in wei)\n', '    uint public refundAmount;               // amount that has been refunded so far\n', '\n', '    uint public startTime;                  // UNIX timestamp for start of sale\n', '    uint public deadline;                   // UNIX timestamp for end (deadline) of sale\n', '    uint public capTime;                    // Initial time period when the cap restriction is on\n', '\n', '    address public beneficiary;             // The beneficiary is the future recipient of the funds\n', '\n', '    QuantstampToken public tokenReward;     // The token being sold\n', '\n', '    mapping(address => uint256) public balanceOf;   // tracks the amount of wei contributed by address during all sales\n', '    mapping(address => uint256) public mainsaleBalanceOf; // tracks the amount of wei contributed by address during mainsale\n', '\n', '    mapping(address => bool) public registry;       // Registry of wallet addresses from whitelist\n', '\n', '    // Events\n', '    event CapReached(address _beneficiary, uint _amountRaised);\n', '    event FundTransfer(address _backer, uint _amount, bool _isContribution);\n', '    event RegistrationStatusChanged(address target, bool isRegistered);\n', '\n', '    // Modifiers\n', '    modifier beforeDeadline()   { require (currentTime() < deadline); _; }\n', '    modifier afterDeadline()    { require (currentTime() >= deadline); _; }\n', '    modifier afterStartTime()   { require (currentTime() >= startTime); _; }\n', '    modifier saleNotClosed()    { require (!saleClosed); _; }\n', '\n', '    modifier nonReentrant() {\n', '        require(!rentrancy_lock);\n', '        rentrancy_lock = true;\n', '        _;\n', '        rentrancy_lock = false;\n', '    }\n', '\n', '    /**\n', '     * Constructor for a crowdsale of QuantstampToken tokens.\n', '     *\n', '     * @param ifSuccessfulSendTo            the beneficiary of the fund\n', '     * @param fundingCapInEthers            the cap (maximum) size of the fund\n', '     * @param minimumContributionInWei      minimum contribution (in wei)\n', '     * @param start                         the start time (UNIX timestamp)\n', '     * @param durationInMinutes             the duration of the crowdsale in minutes\n', '     * @param initialCap                    initial individual cap\n', '     * @param capDurationInMinutes          duration of initial individual cap\n', '     * @param addressOfTokenUsedAsReward    address of the token being sold\n', '     */\n', '    function QuantstampMainSale(\n', '        address ifSuccessfulSendTo,\n', '        uint fundingCapInEthers,\n', '        uint minimumContributionInWei,\n', '        uint start,\n', '        uint durationInMinutes,\n', '        uint initialCap,\n', '        uint capDurationInMinutes,\n', '        address addressOfTokenUsedAsReward\n', '    ) {\n', '        require(ifSuccessfulSendTo != address(0) && ifSuccessfulSendTo != address(this));\n', '        require(addressOfTokenUsedAsReward != address(0) && addressOfTokenUsedAsReward != address(this));\n', '        require(durationInMinutes > 0);\n', '        beneficiary = ifSuccessfulSendTo;\n', '        fundingCap = fundingCapInEthers * 1 ether;\n', '        minContribution = minimumContributionInWei;\n', '        startTime = start;\n', '        deadline = start + (durationInMinutes * 1 minutes);\n', '        capTime = start + (capDurationInMinutes * 1 minutes);\n', '        cap = initialCap * 1 ether;\n', '        tokenReward = QuantstampToken(addressOfTokenUsedAsReward);\n', '    }\n', '\n', '\n', '    function () payable {\n', '        buy();\n', '    }\n', '\n', '\n', '    function buy()\n', '        payable\n', '        public\n', '        whenNotPaused\n', '        beforeDeadline\n', '        afterStartTime\n', '        saleNotClosed\n', '        nonReentrant\n', '    {\n', '        uint amount = msg.value;\n', '        require(amount >= minContribution);\n', '\n', '        // ensure that the user adheres to whitelist restrictions\n', '        require(registry[msg.sender]);\n', '\n', '        amountRaised = amountRaised.add(amount);\n', '\n', '        //require(amountRaised <= fundingCap);\n', '        // if we overflow the fundingCap, transfer the overflow amount\n', '        if(amountRaised > fundingCap){\n', '            uint overflow = amountRaised.sub(fundingCap);\n', '            amount = amount.sub(overflow);\n', '            amountRaised = fundingCap;\n', '            // transfer overflow back to the user\n', '            msg.sender.transfer(overflow);\n', '        }\n', '\n', '\n', "        // Update the sender's balance of wei contributed and the total amount raised\n", '        balanceOf[msg.sender] = balanceOf[msg.sender].add(amount);\n', '\n', "        // Update the sender's cap balance\n", '        mainsaleBalanceOf[msg.sender] = mainsaleBalanceOf[msg.sender].add(amount);\n', '\n', '\n', '        if (currentTime() <= capTime) {\n', '            require(tx.gasprice <= GAS_LIMIT_IN_WEI);\n', '            require(mainsaleBalanceOf[msg.sender] <= cap);\n', '\n', '        }\n', '\n', '        // Transfer the tokens from the crowdsale supply to the sender\n', '        if (!tokenReward.transferFrom(tokenReward.owner(), msg.sender, amount.mul(RATE))) {\n', '            revert();\n', '        }\n', '\n', '        FundTransfer(msg.sender, amount, true);\n', '        updateFundingCap();\n', '    }\n', '\n', '    function setCap(uint _cap) public onlyOwner {\n', '        cap = _cap;\n', '    }\n', '\n', '    /**\n', '     * @dev Sets registration status of an address for participation.\n', '     *\n', '     * @param contributor Address that will be registered/deregistered.\n', '     */\n', '    function registerUser(address contributor)\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(contributor != address(0));\n', '        registry[contributor] = true;\n', '        RegistrationStatusChanged(contributor, true);\n', '    }\n', '\n', '     /**\n', '     * @dev Remove registration status of an address for participation.\n', '     *\n', '     * NOTE: if the user made initial contributions to the crowdsale,\n', '     *       this will not return the previously allotted tokens.\n', '     *\n', '     * @param contributor Address to be unregistered.\n', '     */\n', '    function deactivate(address contributor)\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(registry[contributor]);\n', '        registry[contributor] = false;\n', '        RegistrationStatusChanged(contributor, false);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets registration statuses of addresses for participation.\n', '     * @param contributors Addresses that will be registered/deregistered.\n', '     */\n', '    function registerUsers(address[] contributors)\n', '        external\n', '        onlyOwner\n', '    {\n', '        for (uint i = 0; i < contributors.length; i++) {\n', '            registerUser(contributors[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * The owner can terminate the crowdsale at any time.\n', '     */\n', '    function terminate() external onlyOwner {\n', '        saleClosed = true;\n', '    }\n', '\n', '    /**\n', '     * The owner can allocate the specified amount of tokens from the\n', '     * crowdsale allowance to the recipient (_to).\n', '     *\n', '     * NOTE: be extremely careful to get the amounts correct, which\n', '     * are in units of wei and mini-QSP. Every digit counts.\n', '     *\n', '     * @param _to            the recipient of the tokens\n', '     * @param amountWei     the amount contributed in wei\n', '     * @param amountMiniQsp the amount of tokens transferred in mini-QSP\n', '     */\n', '    function allocateTokens(address _to, uint amountWei, uint amountMiniQsp) public\n', '            onlyOwner nonReentrant\n', '    {\n', '        amountRaised = amountRaised.add(amountWei);\n', '        require(amountRaised <= fundingCap);\n', '\n', '        balanceOf[_to] = balanceOf[_to].add(amountWei);\n', '\n', '        if (!tokenReward.transferFrom(tokenReward.owner(), _to, amountMiniQsp)) {\n', '            revert();\n', '        }\n', '\n', '        FundTransfer(_to, amountWei, true);\n', '        updateFundingCap();\n', '    }\n', '\n', '\n', '    /**\n', '     * The owner can call this function to withdraw the funds that\n', '     * have been sent to this contract. The funds will be sent to\n', '     * the beneficiary specified when the crowdsale was created.\n', '     */\n', '    function ownerSafeWithdrawal() external onlyOwner nonReentrant {\n', '        uint balanceToSend = this.balance;\n', '        beneficiary.transfer(balanceToSend);\n', '        FundTransfer(beneficiary, balanceToSend, false);\n', '    }\n', '\n', '    /**\n', '     * Checks if the funding cap has been reached. If it has, then\n', '     * the CapReached event is triggered.\n', '     */\n', '    function updateFundingCap() internal {\n', '        assert (amountRaised <= fundingCap);\n', '        if (amountRaised == fundingCap) {\n', '            // Check if the funding cap has been reached\n', '            fundingCapReached = true;\n', '            saleClosed = true;\n', '            CapReached(beneficiary, amountRaised);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Returns the current time.\n', '     * Useful to abstract calls to "now" for tests.\n', '    */\n', '    function currentTime() constant returns (uint _currentTime) {\n', '        return now;\n', '    }\n', '\n', '    function setDeadline(uint timestamp) public onlyOwner {\n', '        deadline = timestamp;\n', '    }\n', '}']