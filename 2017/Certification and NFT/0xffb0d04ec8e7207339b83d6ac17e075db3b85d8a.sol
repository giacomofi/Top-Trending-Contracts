['// Author : shift\n', '\n', 'pragma solidity ^0.4.13;\n', '\n', '// ERC20 Interface: https://github.com/ethereum/EIPs/issues/20\n', 'contract ERC20 {\n', '  function transfer(address _to, uint256 _value) returns (bool success);\n', '  function balanceOf(address _owner) constant returns (uint256 balance);\n', '}\n', '\n', '/*\n', '  This contract stores twice every key value in order to be able to redistribute funds\n', '  when the bonus tokens are received (which is typically X months after the initial buy).\n', '*/\n', '\n', 'contract SuperbContract {\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  //Constants of the contract\n', '  uint256 FEE = 100;    //1% fee\n', '  uint256 FEE_DEV = 10; //10% on the 1% fee\n', '  address public owner;\n', '  address constant public developer = 0xEE06BdDafFA56a303718DE53A5bc347EfbE4C68f;\n', '\n', '  //Variables subject to changes\n', '  uint256 public max_amount = 0 ether;  //0 means there is no limit\n', '  uint256 public min_amount = 0 ether;\n', '\n', '  //Store the amount of ETH deposited by each account.\n', '  mapping (address => uint256) public balances;\n', '  mapping (address => uint256) public balances_bonus;\n', '  // Track whether the contract has bought the tokens yet.\n', '  bool public bought_tokens = false;\n', '  // Record ETH value of tokens currently held by contract.\n', '  uint256 public contract_eth_value;\n', '  uint256 public contract_eth_value_bonus;\n', '  //Set by the owner in order to allow the withdrawal of bonus tokens.\n', '  bool bonus_received;\n', '  //The address of the contact.\n', '  address public sale = 0x98Ba698Fc04e79DCE066873106424252e6aabc31;\n', '  //Token address\n', '  ERC20 public token;\n', '  //Records the fees that have to be sent\n', '  uint256 fees;\n', '  //Set by the owner if the ETH got refunded by the project\n', '  bool got_refunded;\n', '  \n', '  function SuperbContract() {\n', '    /*\n', '    Constructor\n', '    */\n', '    owner = msg.sender;\n', '  }\n', '\n', '  //Functions for the owner\n', '\n', '  // Buy the tokens. Sends ETH to the presale wallet and records the ETH amount held in the contract.\n', '  function buy_the_tokens() onlyOwner {\n', '    require(!bought_tokens);\n', '    //Avoids burning the funds\n', '    require(sale != 0x0);\n', '    //Minimum has to be reached\n', '    require(this.balance >= min_amount);\n', '    //Record that the contract has bought the tokens.\n', '    bought_tokens = true;\n', '    //Sends before so the contract_eth_value contains the correct balance\n', '    uint256 dev_fee = fees/FEE_DEV;\n', '    owner.transfer(fees-dev_fee);\n', '    developer.transfer(dev_fee);\n', "    //Record the amount of ETH sent as the contract's current value.\n", '    contract_eth_value = this.balance;\n', '    contract_eth_value_bonus = this.balance;\n', '    // Transfer all the funds to the crowdsale address.\n', '    sale.transfer(contract_eth_value);\n', '  }\n', '\n', '  function set_token_address(address _token) onlyOwner {\n', '    require(_token != 0x0);\n', '    token = ERC20(_token);\n', '  }\n', '\n', '  function set_bonus_received() onlyOwner {\n', '    bonus_received = true;\n', '  }\n', '\n', '  function set_got_refunded() onlyOwner {\n', '    /*\n', '    In case, for some reasons, the project refunds the money\n', '    */\n', '    got_refunded = true;\n', '  }\n', '\n', '  function changeOwner(address new_owner) onlyOwner {\n', '    require(new_owner != 0x0);\n', '    owner = new_owner;\n', '  }\n', '\n', '  //Public functions\n', '\n', '  // Allows any user to withdraw his tokens.\n', '  function withdraw() {\n', "    // Disallow withdraw if tokens haven't been bought yet.\n", '    require(bought_tokens);\n', '    uint256 contract_token_balance = token.balanceOf(address(this));\n', '    // Disallow token withdrawals if there are no tokens to withdraw.\n', '    require(contract_token_balance != 0);\n', '    uint256 tokens_to_withdraw = (balances[msg.sender] * contract_token_balance) / contract_eth_value;\n', '    // Update the value of tokens currently held by the contract.\n', '    contract_eth_value -= balances[msg.sender];\n', "    // Update the user's balance prior to sending to prevent recursive call.\n", '    balances[msg.sender] = 0;\n', '    // Send the funds.  Throws on failure to prevent loss of funds.\n', '    require(token.transfer(msg.sender, tokens_to_withdraw));\n', '  }\n', '\n', '  function withdraw_bonus() {\n', '  /*\n', '    Special function to withdraw the bonus tokens after the 6 months lockup.\n', '    bonus_received has to be set to true.\n', '  */\n', '    require(bought_tokens);\n', '    require(bonus_received);\n', '    uint256 contract_token_balance = token.balanceOf(address(this));\n', '    require(contract_token_balance != 0);\n', '    uint256 tokens_to_withdraw = (balances_bonus[msg.sender] * contract_token_balance) / contract_eth_value_bonus;\n', '    contract_eth_value_bonus -= balances_bonus[msg.sender];\n', '    balances_bonus[msg.sender] = 0;\n', '    require(token.transfer(msg.sender, tokens_to_withdraw));\n', '  }\n', '  \n', '  // Allows any user to get his eth refunded before the purchase is made.\n', '  function refund_me() {\n', '    require(!bought_tokens || got_refunded);\n', "    // Store the user's balance prior to withdrawal in a temporary variable.\n", '    uint256 eth_to_withdraw = balances[msg.sender];\n', "    // Update the user's balance prior to sending ETH to prevent recursive call.\n", '    balances[msg.sender] = 0;\n', '    //Updates the balances_bonus too\n', '    balances_bonus[msg.sender] = 0;\n', "    // Return the user's funds.  Throws on failure to prevent loss of funds.\n", '    msg.sender.transfer(eth_to_withdraw);\n', '  }\n', '\n', '  // Default function.  Called when a user sends ETH to the contract.\n', '  function () payable {\n', '    require(!bought_tokens);\n', '    //Check if the max amount has been reached, if there is one\n', '    require(max_amount == 0 || this.balance <= max_amount);\n', '    //1% fee is taken on the ETH\n', '    uint256 fee = msg.value / FEE;\n', '    fees += fee;\n', '    //Updates both of the balances\n', '    balances[msg.sender] += (msg.value-fee);\n', '    balances_bonus[msg.sender] += (msg.value-fee);\n', '  }\n', '}']