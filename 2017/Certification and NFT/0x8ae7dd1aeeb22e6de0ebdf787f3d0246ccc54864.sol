['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' *  MXL PRE SALE CONTRACTS\n', ' * \n', ' *  Adapted from SIKOBA PRE SALE CONTRACTS\n', ' *\n', '**/\n', '\n', '/**\n', ' * SIKOBA PRE SALE CONTRACTS\n', ' *\n', ' * Version 0.1\n', ' *\n', " * Author Roland Kofler, Alex Kampa, Bok 'BokkyPooBah' Khoo\n", ' *\n', ' * MIT LICENSE Copyright 2017 Sikoba Ltd\n', ' *\n', ' * Permission is hereby granted, free of charge, to any person obtaining a copy\n', ' * of this software and associated documentation files (the "Software"), to deal\n', ' * in the Software without restriction, including without limitation the rights\n', ' * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', ' * copies of the Software, and to permit persons to whom the Software is\n', ' * furnished to do so, subject to the following conditions:\n', ' * The above copyright notice and this permission notice shall be included in\n', ' * all copies or substantial portions of the Software.\n', ' * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', ' * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', ' * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', ' * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', ' * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', ' * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', ' * SOFTWARE.\n', ' **/\n', '\n', '/**\n', ' *\n', ' * Important information about the MXL Token pre sale\n', ' *\n', ' * For details about the MXL token pre sale, and in particular to find out\n', ' * about risks and limitations, please visit:\n', ' *\n', ' * https://marketxl.io/en/pre-sale/\n', ' *\n', ' **/\n', '\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        if (msg.sender != owner) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '}\n', '\n', '/// ----------------------------------------------------------------------------------------\n', '/// @title MXL PRE SALE CONTRACT\n', '/// @author Carlos Afonso\n', '/// @dev Changes to this contract will invalidate any security audits done before.\n', '/// It is MANDATORY to protocol audits in the "Security reviews done" section\n', '///  # Security checklists to use in each review:\n', '///  - Consensys checklist https://github.com/ConsenSys/smart-contract-best-practices\n', "///  - Roland Kofler's checklist https://github.com/rolandkofler/ether-security\n", '///  - Read all of the code and use creative and lateral thinking to discover bugs\n', '///  # Security reviews done:\n', '///  Date         Auditors       Short summary of the review executed\n', '///  Mar 03 2017 - Roland Kofler  - NO SECURITY REVIEW DONE\n', '///  Mar 07 2017 - Roland Kofler, - Informal Security Review; added overflow protections;\n', '///                Alex Kampa       fixed wrong inequality operators; added maximum amount\n', '///                                 per transactions\n', '///  Mar 07 2017 - Alex Kampa     - Some code clean up; removed restriction of\n', '///                                 MINIMUM_PARTICIPATION_AMOUNT for preallocations\n', '///  Mar 08 2017 - Bok Khoo       - Complete security review and modifications\n', '///  Mar 09 2017 - Roland Kofler  - Check the diffs between MAR 8 and MAR 7 versions\n', '///  Mar 12 2017 - Bok Khoo       - Renamed TOTAL_PREALLOCATION_IN_WEI\n', '///                                 to TOTAL_PREALLOCATION.\n', '///                                 Removed isPreAllocation from addBalance(...)\n', '///  Mar 13 2017 - Bok Khoo       - Made dates in comments consistent\n', '///  Apr 05 2017 - Roland Kofler  - removed the necessity of pre sale end before withdrawing\n', '///                                 thus price drops during pre sale can be mitigated\n', '///  Apr 24 2017 - Alex Kampa     - edited constants and added pre allocation amounts\n', '///\n', '///  Dec 22 2017 - Carlos Afonso  - edited constants removed pre allocation amounts\n', '///                                 \n', '/// ----------------------------------------------------------------------------------------\n', 'contract MXLPresale is Owned {\n', '    // -------------------------------------------------------------------------------------\n', '    // TODO Before deployment of contract to Mainnet\n', '    // 1. Confirm MINIMUM_PARTICIPATION_AMOUNT and MAXIMUM_PARTICIPATION_AMOUNT below\n', '    // 2. Adjust PRESALE_MINIMUM_FUNDING and PRESALE_MAXIMUM_FUNDING to desired EUR\n', '    //    equivalents\n', '    // 3. Adjust PRESALE_START_DATE and confirm the presale period\n', '    // 4. Test the deployment to a dev blockchain or Testnet to confirm the constructor\n', '    //    will not run out of gas as this will vary with the number of preallocation\n', '    //    account entries\n', '    // 5. A stable version of Solidity has been used. Check for any major bugs in the\n', '    //    Solidity release announcements after this version.    \n', '    // -------------------------------------------------------------------------------------\n', '\n', '    // Keep track of the total funding amount\n', '    uint256 public totalFunding;\n', '\n', '    // Minimum and maximum amounts per transaction for public participants\n', '    uint256 public constant MINIMUM_PARTICIPATION_AMOUNT = 0.009 ether; \n', '    uint256 public constant MAXIMUM_PARTICIPATION_AMOUNT = 90 ether;\n', '\n', '    // Minimum and maximum goals of the pre sale\n', '\t// Based on Budget of 300k€ to 450k€ at 614€ per ETH on 2018-12-28\n', '    uint256 public constant PRESALE_MINIMUM_FUNDING = 486 ether;\n', '    uint256 public constant PRESALE_MAXIMUM_FUNDING = 720 ether;\n', '\t\n', '\n', '    // Total preallocation in wei\n', '    //uint256 public constant TOTAL_PREALLOCATION = 999.999 ether; // no preallocation\n', '\n', '    // Public pre sale periods  \n', '\t// Starts 2018-01-03T00:00:00+00:00 in ISO 8601\n', '    uint256 public constant PRESALE_START_DATE = 1514937600;\n', '\t\n', '\t// Ends 2018-03-27T18:00:00+00:00 in ISO 8601\n', '    uint256 public constant PRESALE_END_DATE = 1522173600;\n', '\t\n', '\t// Limit 30% Bonus 2018-02-18T00:00:00+00:00 in ISO 8601\n', '\t//uint256 public constant PRESALE_30BONUS_END = 1518912000;  // for reference only\n', '\t// Limit 15% Bonus 2018-03-09T00:00:00+00:00 in ISO 8601\n', '\t//uint256 public constant PRESALE_15BONUS_END = 1520553000;  // for reference only\n', '\t\n', '\n', '    // Owner can clawback after a date in the future, so no ethers remain\n', '    // trapped in the contract. This will only be relevant if the\n', '    // minimum funding level is not reached\n', '    // 2018-04-27T00:00:00+00:00 in ISO 8601\n', '    uint256 public constant OWNER_CLAWBACK_DATE = 1524787200; \n', '\n', '    /// @notice Keep track of all participants contributions, including both the\n', '    ///         preallocation and public phases\n', '    /// @dev Name complies with ERC20 token standard, etherscan for example will recognize\n', '    ///      this and show the balances of the address\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    /// @notice Log an event for each funding contributed during the public phase\n', '    /// @notice Events are not logged when the constructor is being executed during\n', '    ///         deployment, so the preallocations will not be logged\n', '    event LogParticipation(address indexed sender, uint256 value, uint256 timestamp);\n', '\n', '    function MXLPresale () public payable {\n', '\t\t// no preallocated \n', '        //assertEquals(TOTAL_PREALLOCATION, msg.value);\n', '        // Pre-allocations\n', '        //addBalance(0xe902741cD4666E4023b7E3AB46D3DE2985c996f1, 0.647 ether);\n', '        //addBalance(0x98aB52E249646cA2b013aF8F2E411bB90C1c9b4d, 66.98333494 ether);\n', '        //addBalance(0x96050f871811344Dd44C2F5b7bc9741Dff296f5e, 10 ether);\n', '        //assertEquals(TOTAL_PREALLOCATION, totalFunding);\n', '    }\n', '\n', "    /// @notice A participant sends a contribution to the contract's address\n", '    ///         between the PRESALE_STATE_DATE and the PRESALE_END_DATE\n', '    /// @notice Only contributions between the MINIMUM_PARTICIPATION_AMOUNT and\n', '    ///         MAXIMUM_PARTICIPATION_AMOUNT are accepted. Otherwise the transaction\n', "    ///         is rejected and contributed amount is returned to the participant's\n", '    ///         account\n', "    /// @notice A participant's contribution will be rejected if the pre sale\n", '    ///         has been funded to the maximum amount\n', '    function () public payable {\n', '        // A participant cannot send funds before the pre sale start date\n', '        if (now < PRESALE_START_DATE) revert();\n', '        // A participant cannot send funds after the pre sale end date\n', '        if (now > PRESALE_END_DATE) revert();\n', '        // A participant cannot send less than the minimum amount\n', '        if (msg.value < MINIMUM_PARTICIPATION_AMOUNT) revert();\n', '        // A participant cannot send more than the maximum amount\n', '        if (msg.value > MAXIMUM_PARTICIPATION_AMOUNT) revert();\n', '        // A participant cannot send funds if the pres ale has been reached the maximum\n', '        // funding amount\n', '        if (safeIncrement(totalFunding, msg.value) > PRESALE_MAXIMUM_FUNDING) revert();\n', "        // Register the participant's contribution\n", '        addBalance(msg.sender, msg.value);\n', '    }\n', '\n', '    /// @notice The owner can withdraw ethers already during pre sale,\n', '    ///         only if the minimum funding level has been reached\n', '    function ownerWithdraw(uint256 _value) external onlyOwner {\n', '        // The owner cannot withdraw if the pre sale did not reach the minimum funding amount\n', '        if (totalFunding < PRESALE_MINIMUM_FUNDING) revert();\n', '        // Withdraw the amount requested\n', '        if (!owner.send(_value)) revert();\n', '    }\n', '\n', '    /// @notice The participant will need to withdraw their funds from this contract if\n', '    ///         the pre sale has not achieved the minimum funding level\n', '    function participantWithdrawIfMinimumFundingNotReached(uint256 _value) external {\n', '        // Participant cannot withdraw before the pre sale ends\n', '        if (now <= PRESALE_END_DATE) revert();\n', '        // Participant cannot withdraw if the minimum funding amount has been reached\n', '        if (totalFunding >= PRESALE_MINIMUM_FUNDING) revert();\n', '        // Participant can only withdraw an amount up to their contributed balance\n', '        if (balanceOf[msg.sender] < _value) revert();\n', "        // Participant's balance is reduced by the claimed amount.\n", '        balanceOf[msg.sender] = safeDecrement(balanceOf[msg.sender], _value);\n', "        // Send ethers back to the participant's account\n", '        if (!msg.sender.send(_value)) revert();\n', '    }\n', '\n', '    /// @notice The owner can clawback any ethers after a date in the future, so no\n', '    ///         ethers remain trapped in this contract. This will only be relevant\n', '    ///         if the minimum funding level is not reached\n', '    function ownerClawback() external onlyOwner {\n', '        // The owner cannot withdraw before the clawback date\n', '        if (now < OWNER_CLAWBACK_DATE) revert();\n', '        // Send remaining funds back to the owner\n', '        if (!owner.send(this.balance)) revert();\n', '    }\n', '\n', '    /// @dev Keep track of participants contributions and the total funding amount\n', '    function addBalance(address participant, uint256 value) private {\n', "        // Participant's balance is increased by the sent amount\n", '        balanceOf[participant] = safeIncrement(balanceOf[participant], value);\n', '        // Keep track of the total funding amount\n', '        totalFunding = safeIncrement(totalFunding, value);\n', "        // Log an event of the participant's contribution\n", '        LogParticipation(participant, value, now);\n', '    }\n', '\n', '    /// @dev Throw an exception if the amounts are not equal\n', '    function assertEquals(uint256 expectedValue, uint256 actualValue) private pure {\n', '        if (expectedValue != actualValue) revert();\n', '    }\n', '\n', '    /// @dev Add a number to a base value. Detect overflows by checking the result is larger\n', '    ///      than the original base value.\n', '    function safeIncrement(uint256 base, uint256 increment) private pure returns (uint256) {\n', '        uint256 result = base + increment;\n', '        if (result < base) revert();\n', '        return result;\n', '    }\n', '\n', '    /// @dev Subtract a number from a base value. Detect underflows by checking that the result\n', '    ///      is smaller than the original base value\n', '    function safeDecrement(uint256 base, uint256 increment) private pure returns (uint256) {\n', '        uint256 result = base - increment;\n', '        if (result > base) revert();\n', '        return result;\n', '    }\n', '}']