['pragma solidity ^0.4.18;\n', '\n', '// File: contracts/zeppelin-solidity-1.4/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/BRDCrowdsaleAuthorizer.sol\n', '\n', '/**\n', ' * Contract BRDCrowdsaleAuthorizer is used by the crowdsale website\n', ' * to autorize wallets to participate in the crowdsale. Because all\n', ' * participants must go through the KYC/AML phase, only accounts\n', ' * listed in this contract may contribute to the crowdsale\n', ' */\n', 'contract BRDCrowdsaleAuthorizer is Ownable {\n', '  // these accounts are authorized to participate in the crowdsale\n', '  mapping (address => bool) internal authorizedAccounts;\n', '  // these accounts are authorized to authorize accounts\n', '  mapping (address => bool) internal authorizers;\n', '\n', '  // emitted when a new account is authorized\n', '  event Authorized(address indexed _to);\n', '\n', '  // add an authorizer to the authorizers mapping. the _newAuthorizer will\n', '  // be able to add other authorizers and authorize crowdsale participants\n', '  function addAuthorizer(address _newAuthorizer) onlyOwnerOrAuthorizer public {\n', '    // allow the provided address to authorize accounts\n', '    authorizers[_newAuthorizer] = true;\n', '  }\n', '\n', '  // remove an authorizer from the authorizers mapping. the _bannedAuthorizer will\n', '  // no longer have permission to do anything on this contract\n', '  function removeAuthorizer(address _bannedAuthorizer) onlyOwnerOrAuthorizer public {\n', '    // only attempt to remove the authorizer if they are currently authorized\n', '    require(authorizers[_bannedAuthorizer]);\n', '    // remove the authorizer\n', '    delete authorizers[_bannedAuthorizer];\n', '  }\n', '\n', '  // allow an account to participate in the crowdsale\n', '  function authorizeAccount(address _newAccount) onlyOwnerOrAuthorizer public {\n', '    if (!authorizedAccounts[_newAccount]) {\n', '      // allow the provided account to participate in the crowdsale\n', '      authorizedAccounts[_newAccount] = true;\n', '      // emit the Authorized event\n', '      Authorized(_newAccount);\n', '    }\n', '  }\n', '\n', '  // returns whether or not the provided _account is an authorizer\n', '  function isAuthorizer(address _account) constant public returns (bool _isAuthorizer) {\n', '    return msg.sender == owner || authorizers[_account] == true;\n', '  }\n', '\n', '  // returns whether or not the provided _account is authorized to participate in the crowdsale\n', '  function isAuthorized(address _account) constant public returns (bool _authorized) {\n', '    return authorizedAccounts[_account] == true;\n', '  }\n', '\n', '  // allow only the contract creator or one of the authorizers to do this\n', '  modifier onlyOwnerOrAuthorizer() {\n', '    require(msg.sender == owner || authorizers[msg.sender]);\n', '    _;\n', '  }\n', '}']