['pragma solidity ^0.4.11;\n', '\n', 'contract SafeMath {\n', '\n', '    function safeMul(uint256 a, uint256 b) internal constant returns (uint256 ) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeDiv(uint256 a, uint256 b) internal constant returns (uint256 ) {\n', '        assert(b > 0);\n', '        uint256 c = a / b;\n', '        assert(a == b * c + a % b);\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint256 a, uint256 b) internal constant returns (uint256 ) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint256 a, uint256 b) internal constant returns (uint256 ) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is ERC20, SafeMath {\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '\n', '    /// @dev Returns number of tokens owned by given address.\n', '    /// @param _owner Address of token owner.\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', "    /// @dev Transfers sender's tokens to a given address. Returns success.\n", '    /// @param _to Address of token receiver.\n', '    /// @param _value Number of tokens to transfer.\n', '    function transfer(address _to, uint256 _value) returns (bool) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '            balances[_to] = safeAdd(balances[_to], _value);\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else return false;\n', '    }\n', '\n', '    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\n', '    /// @param _from Address from where tokens are withdrawn.\n', '    /// @param _to Address to where tokens are sent.\n', '    /// @param _value Number of tokens to transfer.\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] = safeAdd(balances[_to], _value);\n', '            balances[_from] = safeSub(balances[_from], _value);\n', '            allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else return false;\n', '    }\n', '\n', '    /// @dev Sets approved amount of tokens for spender. Returns success.\n', '    /// @param _spender Address of allowed account.\n', '    /// @param _value Number of approved tokens.\n', '    function approve(address _spender, uint256 _value) returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Returns number of allowed tokens for given address.\n', '    /// @param _owner Address of token owner.\n', '    /// @param _spender Address of token spender.\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '\n', '    address public owner;\n', '    address public pendingOwner;\n', '\n', '    function Ownable() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    // Safe transfer of ownership in 2 steps. Once called, a newOwner needs to call claimOwnership() to prove ownership.\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        pendingOwner = newOwner;\n', '    }\n', '\n', '    function claimOwnership() {\n', '        if (msg.sender == pendingOwner) {\n', '            owner = pendingOwner;\n', '            pendingOwner = 0;\n', '        }\n', '    }\n', '}\n', '\n', 'contract MultiOwnable {\n', '\n', '    mapping (address => bool) ownerMap;\n', '    address[] public owners;\n', '\n', '    event OwnerAdded(address indexed _newOwner);\n', '    event OwnerRemoved(address indexed _oldOwner);\n', '\n', '    modifier onlyOwner() {\n', '        require(isOwner(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function MultiOwnable() {\n', '        // Add default owner\n', '        address owner = msg.sender;\n', '        ownerMap[owner] = true;\n', '        owners.push(owner);\n', '    }\n', '\n', '    function ownerCount() public constant returns (uint256) {\n', '        return owners.length;\n', '    }\n', '\n', '    function isOwner(address owner) public constant returns (bool) {\n', '        return ownerMap[owner];\n', '    }\n', '\n', '    function addOwner(address owner) onlyOwner returns (bool) {\n', '        if (!isOwner(owner) && owner != 0) {\n', '            ownerMap[owner] = true;\n', '            owners.push(owner);\n', '\n', '            OwnerAdded(owner);\n', '            return true;\n', '        } else return false;\n', '    }\n', '\n', '    function removeOwner(address owner) onlyOwner returns (bool) {\n', '        if (isOwner(owner)) {\n', '            ownerMap[owner] = false;\n', '            for (uint i = 0; i < owners.length - 1; i++) {\n', '                if (owners[i] == owner) {\n', '                    owners[i] = owners[owners.length - 1];\n', '                    break;\n', '                }\n', '            }\n', '            owners.length -= 1;\n', '\n', '            OwnerRemoved(owner);\n', '            return true;\n', '        } else return false;\n', '    }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '\n', '    bool public paused;\n', '\n', '    modifier ifNotPaused {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    modifier ifPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    // Called by the owner on emergency, triggers paused state\n', '    function pause() external onlyOwner {\n', '        paused = true;\n', '    }\n', '\n', '    // Called by the owner on end of emergency, returns to normal state\n', '    function resume() external onlyOwner ifPaused {\n', '        paused = false;\n', '    }\n', '}\n', '\n', 'contract TokenSpender {\n', '    function receiveApproval(address _from, uint256 _value);\n', '}\n', '\n', 'contract BsToken is StandardToken, MultiOwnable {\n', '\n', '    bool public locked;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint256 public totalSupply;\n', '    uint8 public decimals = 18;\n', "    string public version = 'v0.1';\n", '\n', '    address public creator;\n', '    address public seller;\n', '    uint256 public tokensSold;\n', '    uint256 public totalSales;\n', '\n', '    event Sell(address indexed _seller, address indexed _buyer, uint256 _value);\n', '    event SellerChanged(address indexed _oldSeller, address indexed _newSeller);\n', '\n', '    modifier onlyUnlocked() {\n', '        if (!isOwner(msg.sender) && locked) throw;\n', '        _;\n', '    }\n', '\n', '    function BsToken(string _name, string _symbol, uint256 _totalSupplyNoDecimals, address _seller) MultiOwnable() {\n', '\n', '        // Lock the transfer function during the presale/crowdsale to prevent speculations.\n', '        locked = true;\n', '\n', '        creator = msg.sender;\n', '        seller = _seller;\n', '\n', '        name = _name;\n', '        symbol = _symbol;\n', '        totalSupply = _totalSupplyNoDecimals * 1e18;\n', '\n', '        balances[seller] = totalSupply;\n', '        Transfer(0x0, seller, totalSupply);\n', '    }\n', '\n', '    function changeSeller(address newSeller) onlyOwner returns (bool) {\n', '        require(newSeller != 0x0 && seller != newSeller);\n', '\n', '        address oldSeller = seller;\n', '\n', '        uint256 unsoldTokens = balances[oldSeller];\n', '        balances[oldSeller] = 0;\n', '        balances[newSeller] = safeAdd(balances[newSeller], unsoldTokens);\n', '        Transfer(oldSeller, newSeller, unsoldTokens);\n', '\n', '        seller = newSeller;\n', '        SellerChanged(oldSeller, newSeller);\n', '        return true;\n', '    }\n', '\n', '    function sellNoDecimals(address _to, uint256 _value) returns (bool) {\n', '        return sell(_to, _value * 1e18);\n', '    }\n', '\n', '    function sell(address _to, uint256 _value) onlyOwner returns (bool) {\n', '        if (balances[seller] >= _value && _value > 0) {\n', '            balances[seller] = safeSub(balances[seller], _value);\n', '            balances[_to] = safeAdd(balances[_to], _value);\n', '            Transfer(seller, _to, _value);\n', '\n', '            tokensSold = safeAdd(tokensSold, _value);\n', '            totalSales = safeAdd(totalSales, 1);\n', '            Sell(seller, _to, _value);\n', '            return true;\n', '        } else return false;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) onlyUnlocked returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) onlyUnlocked returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function lock() onlyOwner {\n', '        locked = true;\n', '    }\n', '\n', '    function unlock() onlyOwner {\n', '        locked = false;\n', '    }\n', '\n', '    function burn(uint256 _value) returns (bool) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] = safeSub(balances[msg.sender], _value) ;\n', '            totalSupply = safeSub(totalSupply, _value);\n', '            Transfer(msg.sender, 0x0, _value);\n', '            return true;\n', '        } else return false;\n', '    }\n', '\n', '    /* Approve and then communicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value) {\n', '        TokenSpender spender = TokenSpender(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value);\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * In this crowdsale We assume that ETH rate is 320 USD/ETH\n', ' */\n', 'contract BsCrowdsale is SafeMath, Ownable, Pausable {\n', '\n', '    enum Currency { BTC, LTC, DASH, ZEC, WAVES, USD, EUR }\n', '\n', '    struct Backer {\n', '        uint256 weiReceived; // Amount of wei given by backer\n', '        uint256 tokensSent;  // Amount of tokens received in return to the given amount of ETH.\n', '    }\n', '\n', '    // TODO rename to buyers?\n', '    // (buyer_eth_address -> struct)\n', '    mapping(address => Backer) public backers;\n', '\n', '    // currency_code => (tx_hash => tokens)\n', '    mapping(uint => mapping(bytes32 => uint256)) public externalTxs;\n', '\n', '    BsToken public token;           // Token contract reference.\n', '    address public beneficiary;     // Address that will receive ETH raised during this crowdsale.\n', '    address public notifier;        // Address that can this crowdsale about changed external conditions.\n', '\n', '    uint256 public usdPerEth;\n', '    uint256 public usdPerEthMin = 200; // Lowest boundary of USD/ETH rate\n', '    uint256 public usdPerEthMax = 500; // Highest boundary of USD/ETH rate\n', '\n', '    struct UsdPerEthLog {\n', '        uint256 rate;\n', '        uint256 time;\n', '        address changedBy;\n', '    }\n', '\n', '    UsdPerEthLog[] public usdPerEthLog; // History of used rates of USD/ETH\n', '\n', '    uint256 public minInvestCents = 1;              // Because 1 token = 1 cent.\n', '    uint256 public maxCapInCents  = 10 * 1e6 * 100; // 10m USD in cents.\n', '\n', '    uint256 public tokensPerCents = 1 * 1e18;       // Ordinary price is 1 token = 1 USD cent.\n', '    uint256 public tokensPerCentsDayOne = 1.1 * 1e18;\n', '    uint256 public tokensPerCentsWeekOne = 1.05 * 1e18;\n', '\n', '    // TODO set to last value from SnovWhitelist contract.\n', '    uint256 public totalInCents = 71481400; // Total amount of USD raised during this crowdsale including (wei -> USD) + (external txs in USD).\n', '\n', '    // Stats for current crowdsale\n', '    uint256 public totalWeiReceived = 0;   // Total amount of wei received during this crowdsale smart contract.\n', '    uint256 public totalTokensSold = 0;    // Total amount of tokens sold during this crowdsale.\n', '    uint256 public totalEthSales = 0;      // Total amount of ETH contributions during this crowdsale.\n', '    uint256 public totalExternalSales = 0; // Total amount of external contributions (USD, BTC, etc.) during this crowdsale.\n', '\n', '    uint256 public startTime = 1509364800; // 2017-10-31 12:00:00Z\n', '    uint256 public endTime   = 1512043200; // 2017-11-30 12:00:00Z\n', '\n', '    // Use in bonuses:\n', '    uint256 oneDayTime       = 1509537600; // 2017-11-01 12:00:00Z\n', '    uint256 oneWeekTime      = 1510056000; // 2017-11-07 12:00:00Z\n', '\n', '    uint256 public finalizedTime = 0;      // Unix timestamp when finalize() was called.\n', '\n', '    bool public saleEnabled = true;       // if true, then contract will not sell tokens on payment received\n', '\n', '    event BeneficiaryChanged(address indexed _oldAddress, address indexed _newAddress);\n', '    event NotifierChanged(address indexed _oldAddress, address indexed _newAddress);\n', '    event UsdPerEthChanged(uint256 _oldRate, uint256 _newRate);\n', '\n', '    event EthReceived(address indexed _buyer, uint256 _amountInWei);\n', '    event ExternalSale(Currency _currency, string _txHash, address indexed _buyer, uint256 _amountInCents, uint256 _tokensE18);\n', '\n', '    modifier respectTimeFrame() {\n', '        require(isSaleOn());\n', '        _;\n', '    }\n', '\n', '    modifier canNotify() {\n', '        require(msg.sender == owner || msg.sender == notifier);\n', '        _;\n', '    }\n', '\n', '    function BsCrowdsale(address _token, address _beneficiary, uint256 _usdPerEth) {\n', '        token = BsToken(_token);\n', '\n', '        owner = msg.sender;\n', '        notifier = 0x73E5B12017A141d41c1a14FdaB43a54A4f9BD490;\n', '        beneficiary = _beneficiary;\n', '\n', '        setUsdPerEth(_usdPerEth);\n', '    }\n', '\n', '    // Override this method to mock current time.\n', '    function getNow() public constant returns (uint256) {\n', '        return now;\n', '    }\n', '\n', '    function setSaleEnabled(bool _enabled) public onlyOwner {\n', '        saleEnabled = _enabled;\n', '    }\n', '\n', '    function setBeneficiary(address _beneficiary) public onlyOwner {\n', '        BeneficiaryChanged(beneficiary, _beneficiary);\n', '        beneficiary = _beneficiary;\n', '    }\n', '\n', '    function setNotifier(address _notifier) public onlyOwner {\n', '        NotifierChanged(notifier, _notifier);\n', '        notifier = _notifier;\n', '    }\n', '\n', '    function setUsdPerEth(uint256 _usdPerEth) public canNotify {\n', '        if (_usdPerEth < usdPerEthMin || _usdPerEth > usdPerEthMax) throw;\n', '\n', '        UsdPerEthChanged(usdPerEth, _usdPerEth);\n', '        usdPerEth = _usdPerEth;\n', '        usdPerEthLog.push(UsdPerEthLog({ rate: usdPerEth, time: getNow(), changedBy: msg.sender }));\n', '    }\n', '\n', '    function usdPerEthLogSize() public constant returns (uint256) {\n', '        return usdPerEthLog.length;\n', '    }\n', '\n', '    /*\n', '     * The fallback function corresponds to a donation in ETH\n', '     */\n', '    function() public payable {\n', '        if (saleEnabled) sellTokensForEth(msg.sender, msg.value);\n', '    }\n', '\n', '    function sellTokensForEth(address _buyer, uint256 _amountInWei) internal ifNotPaused respectTimeFrame {\n', '\n', '        uint256 amountInCents = weiToCents(_amountInWei);\n', '        require(amountInCents >= minInvestCents);\n', '\n', '        totalInCents = safeAdd(totalInCents, amountInCents);\n', '        require(totalInCents <= maxCapInCents); // If max cap reached.\n', '\n', '        uint256 tokensSold = centsToTokens(amountInCents);\n', '        require(token.sell(_buyer, tokensSold)); // Transfer tokens to buyer.\n', '\n', '        totalWeiReceived = safeAdd(totalWeiReceived, _amountInWei);\n', '        totalTokensSold = safeAdd(totalTokensSold, tokensSold);\n', '        totalEthSales++;\n', '\n', '        Backer backer = backers[_buyer];\n', '        backer.tokensSent = safeAdd(backer.tokensSent, tokensSold);\n', '        backer.weiReceived = safeAdd(backer.weiReceived, _amountInWei);  // Update the total wei collected during the crowdfunding for this backer\n', '\n', '        EthReceived(_buyer, _amountInWei);\n', '    }\n', '\n', '    function weiToCents(uint256 _amountInWei) public constant returns (uint256) {\n', '        return safeDiv(safeMul(_amountInWei, usdPerEth * 100), 1 ether);\n', '    }\n', '\n', '    function centsToTokens(uint256 _amountInCents) public constant returns (uint256) {\n', '        uint256 rate = tokensPerCents;\n', '        uint _now = getNow();\n', '\n', '        if (startTime <= _now && _now < oneDayTime) rate = tokensPerCentsDayOne;\n', '        else if (oneDayTime <= _now && _now < oneWeekTime) rate = tokensPerCentsWeekOne;\n', '\n', '        return safeMul(_amountInCents, rate);\n', '    }\n', '\n', '    function externalSale(\n', '        Currency _currency,\n', '        string _txHash,\n', '        address _buyer,\n', '        uint256 _amountInCents,\n', '        uint256 _tokensE18\n', '    ) internal ifNotPaused canNotify {\n', '\n', '        require(_buyer > 0 && _amountInCents > 0 && _tokensE18 > 0);\n', '\n', '        var txsByCur = externalTxs[uint(_currency)];\n', '        bytes32 txKey = keccak256(_txHash);\n', '\n', '        // If this foreign transaction has been already processed in this contract.\n', '        require(txsByCur[txKey] == 0);\n', '\n', '        totalInCents = safeAdd(totalInCents, _amountInCents);\n', '        require(totalInCents < maxCapInCents); // Max cap should not be reached yet.\n', '\n', '        require(token.sell(_buyer, _tokensE18)); // Transfer tokens to buyer.\n', '\n', '        totalTokensSold = safeAdd(totalTokensSold, _tokensE18);\n', '        totalExternalSales++;\n', '\n', '        txsByCur[txKey] = _tokensE18;\n', '        ExternalSale(_currency, _txHash, _buyer, _amountInCents, _tokensE18);\n', '    }\n', '\n', '    function sellTokensForBtc(string _txHash, address _buyer, uint256 _amountInCents, uint256 _tokensE18) public {\n', '        externalSale(Currency.BTC, _txHash, _buyer, _amountInCents, _tokensE18);\n', '    }\n', '\n', '    function sellTokensForLtc(string _txHash, address _buyer, uint256 _amountInCents, uint256 _tokensE18) public {\n', '        externalSale(Currency.LTC, _txHash, _buyer, _amountInCents, _tokensE18);\n', '    }\n', '\n', '    function sellTokensForDash(string _txHash, address _buyer, uint256 _amountInCents, uint256 _tokensE18) public {\n', '        externalSale(Currency.DASH, _txHash, _buyer, _amountInCents, _tokensE18);\n', '    }\n', '\n', '    function sellTokensForZec(string _txHash, address _buyer, uint256 _amountInCents, uint256 _tokensE18) public {\n', '        externalSale(Currency.ZEC, _txHash, _buyer, _amountInCents, _tokensE18);\n', '    }\n', '\n', '    function sellTokensForWaves(string _txHash, address _buyer, uint256 _amountInCents, uint256 _tokensE18) public {\n', '        externalSale(Currency.WAVES, _txHash, _buyer, _amountInCents, _tokensE18);\n', '    }\n', '\n', '    function sellTokensForUsd(string _txHash, address _buyer, uint256 _amountInCents, uint256 _tokensE18) public {\n', '        externalSale(Currency.USD, _txHash, _buyer, _amountInCents, _tokensE18);\n', '    }\n', '\n', '    function sellTokensForEur(string _txHash, address _buyer, uint256 _amountInCents, uint256 _tokensE18) public {\n', '        externalSale(Currency.EUR, _txHash, _buyer, _amountInCents, _tokensE18);\n', '    }\n', '\n', '    function tokensByExternalTx(Currency _currency, string _txHash) internal constant returns (uint256) {\n', '        return externalTxs[uint(_currency)][keccak256(_txHash)];\n', '    }\n', '\n', '    function tokensByBtcTx(string _txHash) public constant returns (uint256) {\n', '        return tokensByExternalTx(Currency.BTC, _txHash);\n', '    }\n', '\n', '    function tokensByLtcTx(string _txHash) public constant returns (uint256) {\n', '        return tokensByExternalTx(Currency.LTC, _txHash);\n', '    }\n', '\n', '    function tokensByDashTx(string _txHash) public constant returns (uint256) {\n', '        return tokensByExternalTx(Currency.DASH, _txHash);\n', '    }\n', '\n', '    function tokensByZecTx(string _txHash) public constant returns (uint256) {\n', '        return tokensByExternalTx(Currency.ZEC, _txHash);\n', '    }\n', '\n', '    function tokensByWavesTx(string _txHash) public constant returns (uint256) {\n', '        return tokensByExternalTx(Currency.WAVES, _txHash);\n', '    }\n', '\n', '    function tokensByUsdTx(string _txHash) public constant returns (uint256) {\n', '        return tokensByExternalTx(Currency.USD, _txHash);\n', '    }\n', '\n', '    function tokensByEurTx(string _txHash) public constant returns (uint256) {\n', '        return tokensByExternalTx(Currency.EUR, _txHash);\n', '    }\n', '\n', '    function totalSales() public constant returns (uint256) {\n', '        return safeAdd(totalEthSales, totalExternalSales);\n', '    }\n', '\n', '    function isMaxCapReached() public constant returns (bool) {\n', '        return totalInCents >= maxCapInCents;\n', '    }\n', '\n', '    function isSaleOn() public constant returns (bool) {\n', '        uint256 _now = getNow();\n', '        return startTime <= _now && _now <= endTime;\n', '    }\n', '\n', '    function isSaleOver() public constant returns (bool) {\n', '        return getNow() > endTime;\n', '    }\n', '\n', '    function isFinalized() public constant returns (bool) {\n', '        return finalizedTime > 0;\n', '    }\n', '\n', '    /*\n', '     * Finalize the crowdsale. Raised money can be sent to beneficiary only if crowdsale hit end time or max cap (15m USD).\n', '     */\n', '    function finalize() public onlyOwner {\n', '\n', '        // Cannot finalise before end day of crowdsale until max cap is reached.\n', '        require(isMaxCapReached() || isSaleOver());\n', '\n', '        beneficiary.transfer(this.balance);\n', '\n', '        finalizedTime = getNow();\n', '    }\n', '}\n', '\n', 'contract SnovCrowdsale is BsCrowdsale {\n', '\n', '    function SnovCrowdsale() BsCrowdsale(\n', '        0xBDC5bAC39Dbe132B1E030e898aE3830017D7d969,\n', '        0x983F64a550CD9D733f2829275f94B1A3728Fe888,\n', '        310\n', '    ) {}\n', '}']