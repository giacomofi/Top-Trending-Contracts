['pragma solidity ^0.4.17;\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    /**\n', '     * Events\n', '     */\n', '    event ChangedOwner(address indexed new_owner);\n', '\n', '    /**\n', '     * Functionality\n', '     */\n', '\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function changeOwner(address _newOwner) onlyOwner external {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() external {\n', '        if (msg.sender == newOwner) {\n', '            owner = newOwner;\n', '            newOwner = 0x0;\n', '            ChangedOwner(owner);\n', '        }\n', '    }\n', '}\n', '\n', 'contract IOwned {\n', '    function owner() returns (address);\n', '    function changeOwner(address);\n', '    function acceptOwnership();\n', '}\n', '\n', '// interface with what we need to withdraw\n', 'contract Withdrawable {\n', '\tfunction withdrawTo(address) returns (bool);\n', '}\n', '\n', '// responsible for \n', 'contract Distributor is Owned {\n', '\n', '\tuint256 public nonce;\n', '\tWithdrawable public w;\n', '\n', '\tevent BatchComplete(uint256 nonce);\n', '\n', '\tevent Complete();\n', '\n', '\tfunction setWithdrawable(address w_addr) onlyOwner {\n', '\t\tw = Withdrawable(w_addr);\n', '\t}\n', '\t\n', '\tfunction distribute(address[] addrs) {\n', '\t\tfor (uint256 i = 0; i <  addrs.length; i++) {\n', '\t\t\tw.withdrawTo(addrs[i]);\n', '\t\t}\n', '\t\tBatchComplete(nonce);\n', '\t\tnonce = nonce + 1;\n', '\t}\n', '\n', '\tfunction complete() {\n', '\t\tnonce = 0;\n', '\t\tComplete();\n', '\t}\n', '}']