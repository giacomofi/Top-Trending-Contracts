['pragma solidity ^0.4.15;\n', '\n', 'contract Owned {\n', '\n', '    /// @dev `owner` is the only address that can call a function with this\n', '    /// modifier\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    address public owner;\n', '\n', '    /// @notice The Constructor assigns the message sender to be `owner`\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    address public newOwner;\n', '\n', '    /// @notice `owner` can step down and assign some other address to this role\n', '    /// @param _newOwner The address of the new owner. 0x0 can be used to create\n', '    ///  an unowned neutral vault, however that cannot be undone\n', '    function changeOwner(address _newOwner) onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() {\n', '        if (msg.sender == newOwner) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract Distribute is Owned {\n', '\n', '    mapping (address => uint) public tokensOwed;\n', '    ERC20Basic token;\n', '\n', '    event AmountSet(address contributor, uint amount);\n', '    event AmountSent(address contributor, uint amount);\n', '\n', '    function Distribute(address _token) public {\n', '        token = ERC20Basic(_token);\n', '    }\n', '\n', '    function setAmount(address contributor, uint amount) public onlyOwner {\n', '        tokensOwed[contributor] = amount;\n', '    }\n', '\n', '    function withdrawAllTokens() public onlyOwner {\n', '        token.transfer(owner, token.balanceOf(address(this)));\n', '    }\n', '\n', '    function() public payable {\n', '        collect();\n', '    }\n', '\n', '    function collect() public {\n', '        uint amount = tokensOwed[msg.sender];\n', '        require(amount > 0);\n', '        tokensOwed[msg.sender] = 0;\n', '        token.transfer(msg.sender, amount);\n', '        AmountSent(msg.sender, amount);\n', '    }\n', '}']