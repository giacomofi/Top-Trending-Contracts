['pragma solidity ^0.4.11;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Haltable is Ownable {\n', '  bool public halted = false;\n', '\n', '  modifier stopInEmergency {\n', '    require(!halted);\n', '    _;\n', '  }\n', '\n', '  modifier stopNonOwnersInEmergency {\n', '    require((msg.sender==owner) || !halted);\n', '    _;\n', '  }\n', '\n', '  modifier onlyInEmergency {\n', '    require(halted);\n', '    _;\n', '  }\n', '\n', '  // called by the owner on emergency, triggers stopped state\n', '  function halt() external onlyOwner {\n', '    halted = true;\n', '  }\n', '\n', '  // called by the owner on end of emergency, returns to normal state\n', '  function unhalt() external onlyOwner onlyInEmergency {\n', '    halted = false;\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract TakeProfitToken is Token, Haltable {\n', '    using SafeMath for uint256;\n', '\n', '\n', '    string constant public name = "TakeProfit";\n', '    uint8 constant public decimals = 8;\n', '    string constant public symbol = "XTP";       \n', '    string constant public version = "1.1";\n', '\n', '\n', '    uint256 constant public UNIT = uint256(10)**decimals;\n', '    uint256 public totalSupply = 10**8 * UNIT;\n', '\n', '    uint256 constant MAX_UINT256 = 2**256 - 1; // Used for allowance: this value mean infinite allowance\n', '\n', '    function TakeProfitToken() public {\n', '        balances[owner] = totalSupply;\n', '    }\n', '\n', '\n', '    function transfer(address _to, uint256 _value) public stopInEmergency returns (bool success) {\n', '        require(_to != address(0));\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public stopInEmergency returns (bool success) {\n', '        require(_to != address(0));\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] = allowance.sub(_value);\n', '        }\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public stopInEmergency returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', '\n', '/**\n', ' * @title Presale\n', ' * @dev Presale is a base contract for managing a token Presale.\n', ' * Presales have a start and end timestamps, where investors can make\n', ' * token purchases and the Presale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Presale is Haltable {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  Token public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 constant public startTime = 1511892000; // 28 Nov 2017 @ 18:00   (UTC)\n', '  uint256 constant public endTime =   1513641600; // 19 Dec 2017 @ 12:00am (UTC)\n', '\n', '  uint256 constant public tokenCap = uint256(8*1e6*1e8);\n', '\n', '  // address where funds will be transfered\n', '  address public withdrawAddress;\n', '\n', '  // how many weis buyer need to pay for one token unit\n', '  uint256 public default_rate = 2500000;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  // amount of already sold tokens\n', '  uint256 public tokenSold;\n', '\n', '  bool public initiated = false;\n', '  bool public finalized = false;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  // we always refund to address from which we get money, while tokens can be bought for another address\n', '  mapping (address => uint256) purchasedTokens;\n', '  mapping (address => uint256) receivedFunds;\n', '\n', '  enum State{Unknown, Prepairing, PreFunding, Funding, Success, Failure, Finalized, Refunding}\n', '\n', '  function Presale(address token_address, address _withdrawAddress) public {\n', '    require(startTime >= now);\n', '    require(endTime >= startTime);\n', '    require(default_rate > 0);\n', '    require(withdrawAddress == address(0));\n', '    require(_withdrawAddress != address(0));\n', '    require(tokenCap>0);\n', '    token = Token(token_address);\n', '    require(token.totalSupply()==100*uint256(10)**(6+8));\n', '    withdrawAddress = _withdrawAddress;\n', '  }\n', '\n', '  function initiate() public onlyOwner {\n', '    require(token.balanceOf(this) >= tokenCap);\n', '    initiated = true;\n', '    if(token.balanceOf(this)>tokenCap)\n', '      require(token.transfer(withdrawAddress, token.balanceOf(this).sub(tokenCap)));\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () public stopInEmergency payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public stopInEmergency inState(State.Funding) payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '    uint256 weiAmountConsumed = 0;\n', '    uint256 weiExcess = 0;\n', '\n', '    // calculate token amount to be bought\n', '    uint256 tokens = weiAmount.div(rate());\n', '    if(tokenSold.add(tokens)>tokenCap) {\n', '      tokens = tokenCap.sub(tokenSold);\n', '    }\n', '\n', '    weiAmountConsumed = tokens.mul(rate());\n', '    weiExcess = weiAmount.sub(weiAmountConsumed);\n', '\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmountConsumed);\n', '    tokenSold = tokenSold.add(tokens);\n', '\n', '    purchasedTokens[beneficiary] += tokens;\n', '    receivedFunds[msg.sender] += weiAmountConsumed;\n', '    if(weiExcess>0) {\n', '      msg.sender.transfer(weiExcess);\n', '    }\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool valuablePurchase = (msg.value >= 0.1 ether);\n', '    return valuablePurchase;\n', '  }\n', '\n', '  function getPurchasedTokens(address beneficiary) public constant returns (uint256) {\n', '    return purchasedTokens[beneficiary];\n', '  }\n', '\n', '  function getReceivedFunds(address buyer) public constant returns (uint256) {\n', '    return receivedFunds[buyer];\n', '  }\n', '\n', '  function claim() public stopInEmergency inState(State.Finalized) {\n', '    claimTokens(msg.sender);\n', '  }\n', '\n', '\n', '  function claimTokens(address beneficiary) public stopInEmergency inState(State.Finalized) {\n', '    require(purchasedTokens[beneficiary]>0);\n', '    uint256 value = purchasedTokens[beneficiary];\n', '    purchasedTokens[beneficiary] -= value;\n', '    require(token.transfer(beneficiary, value));\n', '  }\n', '\n', '  function refund() public stopInEmergency inState(State.Refunding) {\n', '    delegatedRefund(msg.sender);\n', '  }\n', '\n', '  function delegatedRefund(address beneficiary) public stopInEmergency inState(State.Refunding) {\n', '    require(receivedFunds[beneficiary]>0);\n', '    uint256 value = receivedFunds[beneficiary];\n', '    receivedFunds[beneficiary] = 0;\n', '    beneficiary.transfer(value);\n', '  }\n', '\n', '  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\n', '    require(!finalized);\n', '    require(this.balance==0);\n', '    finalized = true;\n', '  }\n', '\n', '  function withdraw() public  inState(State.Success) onlyOwner stopInEmergency {\n', '    withdrawAddress.transfer(weiRaised);\n', '  }\n', '\n', '  function manualWithdrawal(uint256 _amount) public  inState(State.Success) onlyOwner stopInEmergency {\n', '    withdrawAddress.transfer(_amount);\n', '  }\n', '\n', '  function emergencyWithdrawal(uint256 _amount) public onlyOwner onlyInEmergency {\n', '    withdrawAddress.transfer(_amount);\n', '  }\n', '\n', '  function emergencyTokenWithdrawal(uint256 _amount) public onlyOwner onlyInEmergency {\n', '    require(token.transfer(withdrawAddress, _amount));\n', '  }\n', '\n', '  function rate() public constant returns (uint256) {\n', '    if (block.timestamp < startTime) return 0;\n', '    else if (block.timestamp >= startTime && block.timestamp < (startTime + 1 weeks)) return uint256(default_rate/2);\n', '    else if (block.timestamp >= (startTime+1 weeks) && block.timestamp < (startTime + 2 weeks)) return uint256(10*default_rate/19);\n', '    else if (block.timestamp >= (startTime+2 weeks) && block.timestamp < (startTime + 3 weeks)) return uint256(10*default_rate/18);\n', '    return 0;\n', '  }\n', '\n', "  //It is function and not variable, thus it can't be stale\n", '  function getState() public constant returns (State) {\n', '    if(finalized) return State.Finalized;\n', '    if(!initiated) return State.Prepairing;\n', '    else if (block.timestamp < startTime) return State.PreFunding;\n', '    else if (block.timestamp <= endTime && tokenSold<tokenCap) return State.Funding;\n', '    else if (tokenSold>=tokenCap) return State.Success;\n', '    else if (weiRaised > 0 && block.timestamp >= endTime && tokenSold<tokenCap) return State.Refunding;\n', '    else return State.Failure;\n', '  }\n', '\n', '  modifier inState(State state) {\n', '    require(getState() == state);\n', '    _;\n', '  }\n', '}']