['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Contactable token\n', ' * @dev Basic version of a contactable contract, allowing the owner to provide a string with their\n', ' * contact information.\n', ' */\n', 'contract Contactable is Ownable{\n', '\n', '    string public contactInformation;\n', '\n', '    /**\n', '     * @dev Allows the owner to set a string with their contact information.\n', '     * @param info The contact information to attach to the contract.\n', '     */\n', '    function setContactInformation(string info) onlyOwner public {\n', '         contactInformation = info;\n', '     }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract IRefundHandler {\n', '    function handleRefundRequest(address _contributor) external;\n', '}\n', '\n', '\n', 'contract LOCIcoin is StandardToken, Ownable, Contactable {\n', '    string public name = "";\n', '    string public symbol = "";\n', '    uint256 public constant decimals = 18;\n', '\n', '    mapping (address => bool) internal allowedOverrideAddresses;\n', '\n', '    bool public tokenActive = false;\n', '\n', '    modifier onlyIfTokenActiveOrOverride() {\n', '        // owner or any addresses listed in the overrides\n', '        // can perform token transfers while inactive\n', '        require(tokenActive || msg.sender == owner || allowedOverrideAddresses[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    modifier onlyIfTokenInactive() {\n', '        require(!tokenActive);\n', '        _;\n', '    }\n', '\n', '    modifier onlyIfValidAddress(address _to) {\n', "        // prevent 'invalid' addresses for transfer destinations\n", '        require(_to != 0x0);\n', "        // don't allow transferring to this contract's address\n", '        require(_to != address(this));\n', '        _;\n', '    }\n', '\n', '    event TokenActivated();\n', '\n', '    function LOCIcoin(uint256 _totalSupply, string _contactInformation ) public {\n', '        totalSupply = _totalSupply;\n', '        contactInformation = _contactInformation;\n', '\n', '        // msg.sender == owner of the contract\n', '        balances[msg.sender] = _totalSupply;\n', '    }\n', '\n', '    /// @dev Same ERC20 behavior, but reverts if not yet active.\n', '    /// @param _spender address The address which will spend the funds.\n', '    /// @param _value uint256 The amount of tokens to be spent.\n', '    function approve(address _spender, uint256 _value) public onlyIfTokenActiveOrOverride onlyIfValidAddress(_spender) returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    /// @dev Same ERC20 behavior, but reverts if not yet active.\n', '    /// @param _to address The address to transfer to.\n', '    /// @param _value uint256 The amount to be transferred.\n', '    function transfer(address _to, uint256 _value) public onlyIfTokenActiveOrOverride onlyIfValidAddress(_to) returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function ownerSetOverride(address _address, bool enable) external onlyOwner {\n', '        allowedOverrideAddresses[_address] = enable;\n', '    }\n', '\n', '    function ownerSetVisible(string _name, string _symbol) external onlyOwner onlyIfTokenInactive {        \n', '\n', '        // By holding back on setting these, it prevents the token\n', '        // from being a duplicate in ERC token searches if the need to\n', '        // redeploy arises prior to the crowdsale starts.\n', '        // Mainly useful during testnet deployment/testing.\n', '        name = _name;\n', '        symbol = _symbol;\n', '    }\n', '\n', '    function ownerActivateToken() external onlyOwner onlyIfTokenInactive {\n', '        require(bytes(symbol).length > 0);\n', '\n', '        tokenActive = true;\n', '        TokenActivated();\n', '    }\n', '\n', '    function claimRefund(IRefundHandler _refundHandler) external {\n', '        uint256 _balance = balances[msg.sender];\n', '\n', '        // Positive token balance required to perform a refund\n', '        require(_balance > 0);\n', '\n', '        // this mitigates re-entrancy concerns\n', '        balances[msg.sender] = 0;\n', '\n', '        // Attempt to transfer wei back to msg.sender from the\n', '        // crowdsale contract\n', '        // Note: re-entrancy concerns are also addressed within\n', '        // `handleRefundRequest`\n', '        // this will throw an exception if any\n', "        // problems or if refunding isn't enabled\n", '        _refundHandler.handleRefundRequest(msg.sender);\n', '\n', "        // If we've gotten here, then the wei transfer above\n", "        // worked (didn't throw an exception) and it confirmed\n", '        // that `msg.sender` had an ether balance on the contract.\n', '        // Now do token transfer from `msg.sender` back to\n', '        // `owner` completes the refund.\n', '        balances[owner] = balances[owner].add(_balance);\n', '        Transfer(msg.sender, owner, _balance);\n', '    }\n', '}\n', '\n', '\n', 'contract LOCIsale is Ownable, Pausable, IRefundHandler {\n', '    using SafeMath for uint256;\n', '\n', '    // this sale contract is creating the LOCIcoin\n', '    // contract, and so will own it\n', '    LOCIcoin internal token;\n', '\n', '    // UNIX timestamp (UTC) based start and end, inclusive\n', '    uint256 public start;               /* UTC of timestamp that the sale will start based on the value passed in at the time of construction */\n', '    uint256 public end;                 /* UTC of computed time that the sale will end based on the hours passed in at time of construction */\n', '\n', '    bool public isPresale;              /* For LOCI this will be false. We raised pre-ICO offline. */\n', '    bool public isRefunding = false;    /* No plans to refund. */\n', '\n', '    uint256 public minFundingGoalWei;   /* we can set this to zero, but we might want to raise at least 20000 Ether */\n', '    uint256 public minContributionWei;  /* individual contribution min. we require at least a 0.1 Ether investment, for example. */\n', "    uint256 public maxContributionWei;  /* individual contribution max. probably don't want someone to buy more than 60000 Ether */\n", '\n', '    uint256 public weiRaised;       /* total of all weiContributions */\n', '    uint256 public weiRaisedAfterDiscounts; /* wei raised after the discount periods end */\n', "    uint256 internal weiForRefund;  /* only applicable if we enable refunding, if we don't meet our expected raise */\n", '\n', '    uint256 public peggedETHUSD;    /* In whole dollars. $300 means use 300 */\n', '    uint256 public hardCap;         /* In wei. Example: 64,000 cap = 64,000,000,000,000,000,000,000 */\n', '    uint256 public reservedTokens;  /* In wei. Example: 54 million tokens, use 54000000 with 18 more zeros. then it would be 54000000 * Math.pow(10,18) */\n', '    uint256 public baseRateInCents; /* $2.50 means use 250 */\n', '    uint256 internal startingTokensAmount; // this will be set once, internally\n', '\n', '    mapping (address => uint256) public contributions;\n', '\n', '    struct DiscountTranche {\n', '        // this will be a timestamp that is calculated based on\n', '        // the # of hours a tranche rate is to be active for\n', '        uint256 end;\n', '        // should be a % number between 0 and 100\n', '        uint8 discount;\n', '        // should be 1, 2, 3, 4, etc...\n', '        uint8 round;\n', '        // amount raised during tranche in wei\n', '        uint256 roundWeiRaised;\n', '        // amount sold during tranche in wei\n', '        uint256 roundTokensSold;\n', '    }\n', '    DiscountTranche[] internal discountTranches;\n', '    uint8 internal currentDiscountTrancheIndex = 0;\n', '    uint8 internal discountTrancheLength = 0;\n', '\n', '    event ContributionReceived(address indexed buyer, bool presale, uint8 rate, uint256 value, uint256 tokens);\n', '    event RefundsEnabled();\n', '    event Refunded(address indexed buyer, uint256 weiAmount);\n', '    event ToppedUp();\n', '    event PegETHUSD(uint256 pegETHUSD);\n', '\n', '    function LOCIsale(\n', '        address _token,                /* LOCIcoin contract address */\n', '        uint256 _peggedETHUSD,          /* 300 = 300 USD */\n', '        uint256 _hardCapETHinWei,       /* In wei. Example: 64,000 cap = 64,000,000,000,000,000,000,000 */\n', '        uint256 _reservedTokens,        /* In wei. Example: 54 million tokens, use 54000000 with 18 more zeros. then it would be 54000000 * Math.pow(10,18) */\n', '        bool _isPresale,                /* For LOCI this will be false. Presale offline, and accounted for in reservedTokens */\n', '        uint256 _minFundingGoalWei,     /* If we are looking to raise a minimum amount of wei, put it here */\n', '        uint256 _minContributionWei,    /* For LOCI this will be 0.1 ETH */\n', '        uint256 _maxContributionWei,    /* Advisable to not let a single contributor go over the max alloted, say 63333 * Math.pow(10,18) wei. */\n', '        uint256 _start,                 /* For LOCI this will be Dec 6th 0:00 UTC in seconds */\n', '        uint256 _durationHours,         /* Total length of the sale, in hours */\n', '        uint256 _baseRateInCents,       /* Base rate in cents. $2.50 would be 250 */\n', '        uint256[] _hourBasedDiscounts   /* Single dimensional array of pairs [hours, rateInCents, hours, rateInCents, hours, rateInCents, ... ] */\n', '    ) public {\n', '        require(_token != 0x0);\n', '        // either have NO max contribution or the max must be more than the min\n', '        require(_maxContributionWei == 0 || _maxContributionWei > _minContributionWei);\n', '        // sale must have a duration!\n', '        require(_durationHours > 0);\n', '\n', '        token = LOCIcoin(_token);\n', '\n', '        peggedETHUSD = _peggedETHUSD;\n', '        hardCap = _hardCapETHinWei;\n', '        reservedTokens = _reservedTokens;\n', '\n', '        isPresale = _isPresale;\n', '\n', '        start = _start;\n', '        end = start.add(_durationHours.mul(1 hours));\n', '\n', '        minFundingGoalWei = _minFundingGoalWei;\n', '        minContributionWei = _minContributionWei;\n', '        maxContributionWei = _maxContributionWei;\n', '\n', '        baseRateInCents = _baseRateInCents;\n', '\n', '        // this will throw if the # of hours and\n', "        // discount % don't come in pairs\n", '        uint256 _end = start;\n', '\n', '        uint _tranche_round = 0;\n', '\n', '        for (uint i = 0; i < _hourBasedDiscounts.length; i += 2) {\n', '            // calculate the timestamp where the discount rate will end\n', '            _end = _end.add(_hourBasedDiscounts[i].mul(1 hours));\n', '\n', '            // the calculated tranche end cannot go past the crowdsale end\n', '            require(_end <= end);\n', '\n', '            _tranche_round += 1;\n', '\n', '            discountTranches.push(DiscountTranche({ end:_end,\n', '                                                    discount:uint8(_hourBasedDiscounts[i + 1]),\n', '                                                    round:uint8(_tranche_round),\n', '                                                    roundWeiRaised:0,\n', '                                                    roundTokensSold:0}));\n', '\n', '            discountTrancheLength = uint8(i+1);\n', '        }\n', '    }\n', '\n', '    function determineDiscountTranche() internal returns (uint256, uint8, uint8) {\n', '        if (currentDiscountTrancheIndex >= discountTranches.length) {\n', '            return(0, 0, 0);\n', '        }\n', '\n', '        DiscountTranche storage _dt = discountTranches[currentDiscountTrancheIndex];\n', '        if (_dt.end < now) {\n', '            // find the next applicable tranche\n', '            while (++currentDiscountTrancheIndex < discountTranches.length) {\n', '                _dt = discountTranches[currentDiscountTrancheIndex];\n', '                if (_dt.end > now) {\n', '                    break;\n', '                }\n', '            }\n', '        }\n', '\n', '        // Example: there are 4 rounds, and we want to divide rounds 2-4 equally based on (starting-round1)/(discountTranches.length-1), move to next tranche\n', "        // But don't move past the last round. Note, the last round should not be capped. That's why we check for round < # tranches\n", '        if (_dt.round > 1 && _dt.roundTokensSold > 0 && _dt.round < discountTranches.length) {\n', '            uint256 _trancheCountExceptForOne = discountTranches.length-1;\n', '            uint256 _tokensSoldFirstRound = discountTranches[0].roundTokensSold;\n', '            uint256 _allowedTokensThisRound = (startingTokensAmount.sub(_tokensSoldFirstRound)).div(_trancheCountExceptForOne);\n', '\n', '            if (_dt.roundTokensSold > _allowedTokensThisRound) {\n', '                currentDiscountTrancheIndex = currentDiscountTrancheIndex + 1;\n', '                _dt = discountTranches[currentDiscountTrancheIndex];\n', '            }\n', '        }\n', '\n', '        uint256 _end = 0;\n', '        uint8 _rate = 0;\n', '        uint8 _round = 0;\n', '\n', '        // if the index is still valid, then we must have\n', '        // a valid tranche, so return discount rate\n', '        if (currentDiscountTrancheIndex < discountTranches.length) {\n', '            _end = _dt.end;\n', '            _rate = _dt.discount;\n', '            _round = _dt.round;\n', '        } else {\n', '            _end = end;\n', '            _rate = 0;\n', '            _round = discountTrancheLength + 1;\n', '        }\n', '\n', '        return (_end, _rate, _round);\n', '    }\n', '\n', '    function() public payable whenNotPaused {\n', '        require(!isRefunding);\n', '        require(msg.sender != 0x0);\n', '        require(msg.value >= minContributionWei);\n', '        require(start <= now && end >= now);\n', '\n', '        // prevent anything more than maxContributionWei per contributor address\n', '        uint256 _weiContributionAllowed = maxContributionWei > 0 ? maxContributionWei.sub(contributions[msg.sender]) : msg.value;\n', '        if (maxContributionWei > 0) {\n', '            require(_weiContributionAllowed > 0);\n', '        }\n', '\n', '        // are limited by the number of tokens remaining\n', '        uint256 _tokensRemaining = token.balanceOf(address(this)).sub( reservedTokens );\n', '        require(_tokensRemaining > 0);\n', '\n', '        if (startingTokensAmount == 0) {\n', '            startingTokensAmount = _tokensRemaining; // set this once.\n', '        }\n', '\n', "        // limit contribution's value based on max/previous contributions\n", '        uint256 _weiContribution = msg.value;\n', '        if (_weiContribution > _weiContributionAllowed) {\n', '            _weiContribution = _weiContributionAllowed;\n', '        }\n', '\n', "        // limit contribution's value based on hard cap of hardCap\n", '        if (hardCap > 0 && weiRaised.add(_weiContribution) > hardCap) {\n', '            _weiContribution = hardCap.sub( weiRaised );\n', '        }\n', '\n', '        // calculate token amount to be created\n', '        uint256 _tokens = _weiContribution.mul(peggedETHUSD).mul(100).div(baseRateInCents);\n', '        var (, _rate, _round) = determineDiscountTranche();\n', '        if (_rate > 0) {\n', '            _tokens = _weiContribution.mul(peggedETHUSD).mul(100).div(_rate);\n', '        }\n', '\n', '        if (_tokens > _tokensRemaining) {\n', "            // there aren't enough tokens to fill the contribution amount, so recalculate the contribution amount\n", '            _tokens = _tokensRemaining;\n', '            if (_rate > 0) {\n', '                _weiContribution = _tokens.mul(_rate).div(100).div(peggedETHUSD);\n', '            } else {\n', '                _weiContribution = _tokens.mul(baseRateInCents).div(100).div(peggedETHUSD);\n', '            }\n', '        }\n', '\n', '        // add the contributed wei to any existing value for the sender\n', '        contributions[msg.sender] = contributions[msg.sender].add(_weiContribution);\n', '        ContributionReceived(msg.sender, isPresale, _rate, _weiContribution, _tokens);\n', '\n', '        require(token.transfer(msg.sender, _tokens));\n', '\n', '        weiRaised = weiRaised.add(_weiContribution); //total of all weiContributions\n', '\n', '        if (discountTrancheLength > 0 && _round > 0 && _round <= discountTrancheLength) {\n', '            discountTranches[_round-1].roundWeiRaised = discountTranches[_round-1].roundWeiRaised.add(_weiContribution);\n', '            discountTranches[_round-1].roundTokensSold = discountTranches[_round-1].roundTokensSold.add(_tokens);\n', '        }\n', '        if (discountTrancheLength > 0 && _round > discountTrancheLength) {\n', '            weiRaisedAfterDiscounts = weiRaisedAfterDiscounts.add(_weiContribution);\n', '        }\n', '\n', '        uint256 _weiRefund = msg.value.sub(_weiContribution);\n', '        if (_weiRefund > 0) {\n', '            msg.sender.transfer(_weiRefund);\n', '        }\n', '    }\n', '\n', '    // in case we need to return funds to this contract\n', '    function ownerTopUp() external payable {}\n', '\n', '    function setReservedTokens( uint256 _reservedTokens ) onlyOwner public {\n', '        reservedTokens = _reservedTokens;        \n', '    }\n', '\n', '    function pegETHUSD(uint256 _peggedETHUSD) onlyOwner public {\n', '        peggedETHUSD = _peggedETHUSD;\n', '        PegETHUSD(peggedETHUSD);\n', '    }\n', '\n', '    function setHardCap( uint256 _hardCap ) onlyOwner public {\n', '        hardCap = _hardCap;\n', '    }\n', '\n', '    function peggedETHUSD() constant onlyOwner public returns(uint256) {\n', '        return peggedETHUSD;\n', '    }\n', '\n', '    function hardCapETHInWeiValue() constant onlyOwner public returns(uint256) {\n', '        return hardCap;\n', '    }\n', '\n', '    function weiRaisedDuringRound(uint8 round) constant onlyOwner public returns(uint256) {\n', '        require( round > 0 && round <= discountTrancheLength );\n', '        return discountTranches[round-1].roundWeiRaised;\n', '    }\n', '\n', '    function tokensRaisedDuringRound(uint8 round) constant onlyOwner public returns(uint256) {\n', '        require( round > 0 && round <= discountTrancheLength );\n', '        return discountTranches[round-1].roundTokensSold;\n', '    }\n', '\n', '    function weiRaisedAfterDiscountRounds() constant onlyOwner public returns(uint256) {\n', '        return weiRaisedAfterDiscounts;\n', '    }\n', '\n', '    function totalWeiRaised() constant onlyOwner public returns(uint256) {\n', '        return weiRaised;\n', '    }\n', '\n', '    function setStartingTokensAmount(uint256 _startingTokensAmount) onlyOwner public {\n', '        startingTokensAmount = _startingTokensAmount;\n', '    }\n', '\n', '    function ownerEnableRefunds() external onlyOwner {\n', '        // a little protection against human error;\n', '        // sale must be ended OR it must be paused\n', '        require(paused || now > end);\n', '        require(!isRefunding);\n', '\n', '        weiForRefund = this.balance;\n', '        isRefunding = true;\n', '        RefundsEnabled();\n', '    }\n', '\n', '    function ownerTransferWei(address _beneficiary, uint256 _value) external onlyOwner {\n', '        require(_beneficiary != 0x0);\n', '        require(_beneficiary != address(token));\n', "        // we cannot withdraw if we didn't reach the minimum funding goal\n", '        require(minFundingGoalWei == 0 || weiRaised >= minFundingGoalWei);\n', '\n', '        // if zero requested, send the entire amount, otherwise the amount requested\n', '        uint256 _amount = _value > 0 ? _value : this.balance;\n', '\n', '        _beneficiary.transfer(_amount);\n', '    }\n', '\n', '    function ownerRecoverTokens(address _beneficiary) external onlyOwner {\n', '        require(_beneficiary != 0x0);\n', '        require(_beneficiary != address(token));\n', '        require(paused || now > end);\n', '\n', '        uint256 _tokensRemaining = token.balanceOf(address(this));\n', '        if (_tokensRemaining > 0) {\n', '            token.transfer(_beneficiary, _tokensRemaining);\n', '        }\n', '    }\n', '\n', '    function handleRefundRequest(address _contributor) external {\n', '        // Note that this method can only ever called by\n', "        // the token contract's `claimRefund()` method;\n", '        // everything that happens in here will only\n', '        // succeed if `claimRefund()` works as well.\n', '\n', '        require(isRefunding);\n', '        // this can only be called by the token contract;\n', '        // it is the entry point for the refund flow\n', '        require(msg.sender == address(token));\n', '\n', '        uint256 _wei = contributions[_contributor];\n', '\n', "        // if this is zero, then `_contributor` didn't\n", "        // contribute or they've already been refunded\n", '        require(_wei > 0);\n', '\n', '        // prorata the amount if necessary\n', '        if (weiRaised > weiForRefund) {\n', '            uint256 _n  = weiForRefund.mul(_wei).div(weiRaised);\n', '            require(_n < _wei);\n', '            _wei = _n;\n', '        }\n', '\n', '        // zero out their contribution, so they cannot\n', "        // claim another refund; it's important (for\n", '        // avoiding re-entrancy attacks) that this zeroing\n', '        // happens before the transfer below\n', '        contributions[_contributor] = 0;\n', '\n', '        // give them their ether back; throws on failure\n', '        _contributor.transfer(_wei);\n', '\n', '        Refunded(_contributor, _wei);\n', '    }\n', '}']