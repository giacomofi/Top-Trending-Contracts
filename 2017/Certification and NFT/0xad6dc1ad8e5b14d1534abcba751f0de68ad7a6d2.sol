['pragma solidity ^0.4.18;\n', '\n', '\n', '/// @title Abstract ERC20 token interface\n', 'contract AbstractToken {\n', '\n', '    function totalSupply() constant returns (uint256) {}\n', '    function balanceOf(address owner) constant returns (uint256 balance);\n', '    function transfer(address to, uint256 value) returns (bool success);\n', '    function transferFrom(address from, address to, uint256 value) returns (bool success);\n', '    function approve(address spender, uint256 value) returns (bool success);\n', '    function allowance(address owner, address spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Issuance(address indexed to, uint256 value);\n', '}\n', '\n', '\n', 'contract Owned {\n', '\n', '    address public owner = msg.sender;\n', '    address public potentialOwner;\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyPotentialOwner {\n', '        require(msg.sender == potentialOwner);\n', '        _;\n', '    }\n', '\n', '    event NewOwner(address old, address current);\n', '    event NewPotentialOwner(address old, address potential);\n', '\n', '    function setOwner(address _new)\n', '        public\n', '        onlyOwner\n', '    {\n', '        NewPotentialOwner(owner, _new);\n', '        potentialOwner = _new;\n', '    }\n', '\n', '    function confirmOwnership()\n', '        public\n', '        onlyPotentialOwner\n', '    {\n', '        NewOwner(owner, potentialOwner);\n', '        owner = potentialOwner;\n', '        potentialOwner = 0;\n', '    }\n', '}\n', '\n', '\n', '/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\n', 'contract StandardToken is AbstractToken, Owned {\n', '\n', '    /*\n', '     *  Data structures\n', '     */\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '\n', '    /*\n', '     *  Read and write storage functions\n', '     */\n', "    /// @dev Transfers sender's tokens to a given address. Returns success.\n", '    /// @param _to Address of token receiver.\n', '    /// @param _value Number of tokens to transfer.\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\n', '    /// @param _from Address from where tokens are withdrawn.\n', '    /// @param _to Address to where tokens are sent.\n', '    /// @param _value Number of tokens to transfer.\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns number of tokens owned by given address.\n', '    /// @param _owner Address of token owner.\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /// @dev Sets approved amount of tokens for spender. Returns success.\n', '    /// @param _spender Address of allowed account.\n', '    /// @param _value Number of approved tokens.\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /*\n', '     * Read storage functions\n', '     */\n', '    /// @dev Returns number of allowed tokens for given address.\n', '    /// @param _owner Address of token owner.\n', '    /// @param _spender Address of token spender.\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', '\n', '/// @title SafeMath contract - Math operations with safety checks.\n', '/// @author OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n', 'contract SafeMath {\n', '    function mul(uint a, uint b) internal returns (uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal returns (uint) {\n', '        assert(b > 0);\n', '        uint c = a / b;\n', '        assert(a == b * c + a % b);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function pow(uint a, uint b) internal returns (uint) {\n', '        uint c = a ** b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/// @title Token contract - Implements Standard ERC20 with additional features.\n', '/// @author Zerion - <inbox@zerion.io>\n', 'contract Token is StandardToken, SafeMath {\n', '\n', '    // Time of the contract creation\n', '    uint public creationTime;\n', '\n', '    function Token() {\n', '        creationTime = now;\n', '    }\n', '\n', '\n', '    /// @dev Owner can transfer out any accidentally sent ERC20 tokens\n', '    function transferERC20Token(address tokenAddress)\n', '        public\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        uint balance = AbstractToken(tokenAddress).balanceOf(this);\n', '        return AbstractToken(tokenAddress).transfer(owner, balance);\n', '    }\n', '\n', '    /// @dev Multiplies the given number by 10^(decimals)\n', '    function withDecimals(uint number, uint decimals)\n', '        internal\n', '        returns (uint)\n', '    {\n', '        return mul(number, pow(10, decimals));\n', '    }\n', '}\n', '\n', '\n', '/// @title Token contract - Implements Standard ERC20 Token for Qchain project.\n', '/// @author Zerion - <inbox@zerion.io>\n', 'contract QchainToken is Token {\n', '\n', '    /*\n', '     * Token meta data\n', '     */\n', '    string constant public name = "Ethereum Qchain Token";\n', '    string constant public symbol = "EQC";\n', '    uint8 constant public decimals = 8;\n', '\n', '    // Address where Foundation tokens are allocated\n', '    address constant public foundationReserve = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '\n', '    // Address where all tokens for the ICO stage are initially allocated\n', '    address constant public icoAllocation = 0x1111111111111111111111111111111111111111;\n', '\n', '    // Address where all tokens for the PreICO are initially allocated\n', '    address constant public preIcoAllocation = 0x2222222222222222222222222222222222222222;\n', '\n', '    // ICO start date. 10/24/2017 @ 9:00pm (UTC)\n', '    uint256 constant public startDate = 1508878800;\n', '    uint256 constant public duration = 42 days;\n', '\n', '    // Public key of the signer\n', '    address public signer;\n', '\n', '    // Foundation multisignature wallet, all Ether is collected there\n', '    address public multisig;\n', '\n', '    /// @dev Contract constructor, sets totalSupply\n', '    function QchainToken(address _signer, address _multisig)\n', '    {\n', '        // Overall, 375,000,000 EQC tokens are distributed\n', '        totalSupply = withDecimals(375000000, decimals);\n', '\n', '        // 11,500,000 tokens were sold during the PreICO\n', '        uint preIcoTokens = withDecimals(11500000, decimals);\n', '\n', '        // 40% of total supply is allocated for the Foundation\n', '        balances[foundationReserve] = div(mul(totalSupply, 40), 100);\n', '\n', '        // PreICO tokens are allocated to the special address and will be distributed manually\n', '        balances[preIcoAllocation] = preIcoTokens;\n', '\n', '        // The rest of the tokens is available for sale\n', '        balances[icoAllocation] = totalSupply - preIcoTokens - balanceOf(foundationReserve);\n', '\n', '        // Allow the owner to distribute tokens from the PreICO allocation address\n', '        allowed[preIcoAllocation][msg.sender] = balanceOf(preIcoAllocation);\n', '\n', '        // Allow the owner to withdraw tokens from the Foundation reserve\n', '        allowed[foundationReserve][msg.sender] = balanceOf(foundationReserve);\n', '\n', '        signer = _signer;\n', '        multisig = _multisig;\n', '    }\n', '\n', '    modifier icoIsActive {\n', '        require(now >= startDate && now < startDate + duration);\n', '        _;\n', '    }\n', '\n', '    modifier icoIsCompleted {\n', '        require(now >= startDate + duration);\n', '        _;\n', '    }\n', '\n', '    /// @dev Settle an investment and distribute tokens\n', '    function invest(address investor, uint256 tokenPrice, uint256 value, bytes32 hash, uint8 v, bytes32 r, bytes32 s)\n', '        public\n', '        icoIsActive\n', '        payable\n', '    {\n', '        // Check the hash\n', '        require(sha256(uint(investor) << 96 | tokenPrice) == hash);\n', '\n', '        // Check the signature\n', '        require(ecrecover(hash, v, r, s) == signer);\n', '\n', '        // Difference between the value argument and actual value should not be\n', '        // more than 0.005 ETH (gas commission)\n', '        require(sub(value, msg.value) <= withDecimals(5, 15));\n', '\n', '        // Number of tokens to distribute\n', '        uint256 tokensNumber = div(withDecimals(value, decimals), tokenPrice);\n', '\n', '        // Check if there is enough tokens left\n', '        require(balances[icoAllocation] >= tokensNumber);\n', '\n', '        // Send Ether to the multisig\n', '        require(multisig.send(msg.value));\n', '\n', '        // Allocate tokens to an investor\n', '        balances[icoAllocation] = sub(balances[icoAllocation], tokensNumber);\n', '        balances[investor] = add(balances[icoAllocation], tokensNumber);\n', '        Transfer(icoAllocation, investor, tokensNumber);\n', '    }\n', '\n', '    /// @dev Overrides Owned.sol function\n', '    function confirmOwnership()\n', '        public\n', '        onlyPotentialOwner\n', '    {\n', '        // Allow new owner to withdraw tokens from Foundation reserve and\n', '        // preICO allocation address\n', '        allowed[foundationReserve][potentialOwner] = balanceOf(foundationReserve);\n', '        allowed[preIcoAllocation][potentialOwner] = balanceOf(preIcoAllocation);\n', '\n', '        // Forbid old owner to withdraw tokens from Foundation reserve and\n', '        // preICO allocation address\n', '        allowed[foundationReserve][owner] = 0;\n', '        allowed[preIcoAllocation][owner] = 0;\n', '\n', '        // Change owner\n', '        super.confirmOwnership();\n', '    }\n', '\n', '    /// @dev Withdraws tokens from Foundation reserve\n', '    function withdrawFromReserve(uint amount)\n', '        public\n', '        onlyOwner\n', '    {\n', '        // Withdraw tokens from Foundation reserve to multisig address\n', '        require(transferFrom(foundationReserve, multisig, amount));\n', '    }\n', '\n', '    /// @dev Changes multisig address\n', '    function changeMultisig(address _multisig)\n', '        public\n', '        onlyOwner\n', '    {\n', '        multisig = _multisig;\n', '    }\n', '\n', '    /// @dev Burns the rest of the tokens after the crowdsale end\n', '    function burn()\n', '        public\n', '        onlyOwner\n', '        icoIsCompleted\n', '    {\n', '        totalSupply = sub(totalSupply, balanceOf(icoAllocation));\n', '        balances[icoAllocation] = 0;\n', '    }\n', '}']