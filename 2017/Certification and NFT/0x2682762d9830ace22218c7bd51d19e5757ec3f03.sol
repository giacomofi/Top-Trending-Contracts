['pragma solidity 0.4.15;\n', '\n', '/// @title provides subject to role checking logic\n', 'contract IAccessPolicy {\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', "    /// @notice We don't make this function constant to allow for state-updating access controls such as rate limiting.\n", '    /// @dev checks if subject belongs to requested role for particular object\n', '    /// @param subject address to be checked against role, typically msg.sender\n', '    /// @param role identifier of required role\n', '    /// @param object contract instance context for role checking, typically contract requesting the check\n', '    /// @param verb additional data, in current AccessControll implementation msg.sig\n', '    /// @return if subject belongs to a role\n', '    function allowed(\n', '        address subject,\n', '        bytes32 role,\n', '        address object,\n', '        bytes4 verb\n', '    )\n', '        public\n', '        returns (bool);\n', '}\n', '\n', '/// @title enables access control in implementing contract\n', '/// @dev see AccessControlled for implementation\n', 'contract IAccessControlled {\n', '\n', '    ////////////////////////\n', '    // Events\n', '    ////////////////////////\n', '\n', '    /// @dev must log on access policy change\n', '    event LogAccessPolicyChanged(\n', '        address controller,\n', '        IAccessPolicy oldPolicy,\n', '        IAccessPolicy newPolicy\n', '    );\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    /// @dev allows to change access control mechanism for this contract\n', '    ///     this method must be itself access controlled, see AccessControlled implementation and notice below\n', '    /// @notice it is a huge issue for Solidity that modifiers are not part of function signature\n', '    ///     then interfaces could be used for example to control access semantics\n', '    /// @param newPolicy new access policy to controll this contract\n', '    /// @param newAccessController address of ROLE_ACCESS_CONTROLLER of new policy that can set access to this contract\n', '    function setAccessPolicy(IAccessPolicy newPolicy, address newAccessController)\n', '        public;\n', '\n', '    function accessPolicy()\n', '        public\n', '        constant\n', '        returns (IAccessPolicy);\n', '\n', '}\n', '\n', 'contract StandardRoles {\n', '\n', '    ////////////////////////\n', '    // Constants\n', '    ////////////////////////\n', '\n', "    // @notice Soldity somehow doesn't evaluate this compile time\n", '    // @dev role which has rights to change permissions and set new policy in contract, keccak256("AccessController")\n', '    bytes32 internal constant ROLE_ACCESS_CONTROLLER = 0xac42f8beb17975ed062dcb80c63e6d203ef1c2c335ced149dc5664cc671cb7da;\n', '}\n', '\n', '/// @title Granular code execution permissions\n', '/// @notice Intended to replace existing Ownable pattern with more granular permissions set to execute smart contract functions\n', "///     for each function where 'only' modifier is applied, IAccessPolicy implementation is called to evaluate if msg.sender belongs to required role for contract being called.\n", '///     Access evaluation specific belong to IAccessPolicy implementation, see RoleBasedAccessPolicy for details.\n', '/// @dev Should be inherited by a contract requiring such permissions controll. IAccessPolicy must be provided in constructor. Access policy may be replaced to a different one\n', '///     by msg.sender with ROLE_ACCESS_CONTROLLER role\n', 'contract AccessControlled is IAccessControlled, StandardRoles {\n', '\n', '    ////////////////////////\n', '    // Mutable state\n', '    ////////////////////////\n', '\n', '    IAccessPolicy private _accessPolicy;\n', '\n', '    ////////////////////////\n', '    // Modifiers\n', '    ////////////////////////\n', '\n', "    /// @dev limits function execution only to senders assigned to required 'role'\n", '    modifier only(bytes32 role) {\n', '        require(_accessPolicy.allowed(msg.sender, role, this, msg.sig));\n', '        _;\n', '    }\n', '\n', '    ////////////////////////\n', '    // Constructor\n', '    ////////////////////////\n', '\n', '    function AccessControlled(IAccessPolicy policy) internal {\n', '        require(address(policy) != 0x0);\n', '        _accessPolicy = policy;\n', '    }\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    //\n', '    // Implements IAccessControlled\n', '    //\n', '\n', '    function setAccessPolicy(IAccessPolicy newPolicy, address newAccessController)\n', '        public\n', '        only(ROLE_ACCESS_CONTROLLER)\n', '    {\n', '        // ROLE_ACCESS_CONTROLLER must be present\n', '        // under the new policy. This provides some\n', '        // protection against locking yourself out.\n', '        require(newPolicy.allowed(newAccessController, ROLE_ACCESS_CONTROLLER, this, msg.sig));\n', '\n', '        // We can now safely set the new policy without foot shooting.\n', '        IAccessPolicy oldPolicy = _accessPolicy;\n', '        _accessPolicy = newPolicy;\n', '\n', '        // Log event\n', '        LogAccessPolicyChanged(msg.sender, oldPolicy, newPolicy);\n', '    }\n', '\n', '    function accessPolicy()\n', '        public\n', '        constant\n', '        returns (IAccessPolicy)\n', '    {\n', '        return _accessPolicy;\n', '    }\n', '}\n', '\n', '/// @notice implemented in the contract that is the target of state migration\n', '/// @dev implementation must provide actual function that will be called by source to migrate state\n', 'contract IMigrationTarget {\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    // should return migration source address\n', '    function currentMigrationSource()\n', '        public\n', '        constant\n', '        returns (address);\n', '}\n', '\n', '/// @notice mixin that enables contract to receive migration\n', '/// @dev when derived from\n', 'contract MigrationTarget is\n', '    IMigrationTarget\n', '{\n', '    ////////////////////////\n', '    // Modifiers\n', '    ////////////////////////\n', '\n', '    // intended to be applied on migration receiving function\n', '    modifier onlyMigrationSource() {\n', '        require(msg.sender == currentMigrationSource());\n', '        _;\n', '    }\n', '}\n', '\n', 'contract EuroTokenMigrationTarget is\n', '    MigrationTarget\n', '{\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    /// @notice accepts migration of single eur-t token holder\n', '    /// @dev allowed to be called only from migration source, do not forget to add accessor modifier in implementation\n', '    function migrateEuroTokenOwner(address owner, uint256 amount)\n', '        public\n', '        onlyMigrationSource();\n', '}\n', '\n', '/// @notice implemented in the contract that stores state to be migrated\n', '/// @notice contract is called migration source\n', "/// @dev migration target implements IMigrationTarget interface, when it is passed in 'enableMigration' function\n", "/// @dev 'migrate' function may be called to migrate part of state owned by msg.sender\n", '/// @dev in legal terms this corresponds to amending/changing agreement terms by co-signature of parties\n', 'contract IMigrationSource {\n', '\n', '    ////////////////////////\n', '    // Events\n', '    ////////////////////////\n', '\n', '    event LogMigrationEnabled(\n', '        address target\n', '    );\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    /// @notice should migrate state owned by msg.sender\n', '    /// @dev intended flow is to: read source state, clear source state, call migrate function on target, log success event\n', '    function migrate()\n', '        public;\n', '\n', '    /// @notice should enable migration to migration target\n', '    /// @dev should limit access to specific role in implementation\n', '    function enableMigration(IMigrationTarget migration)\n', '        public;\n', '\n', '    /// @notice returns current migration target\n', '    function currentMigrationTarget()\n', '        public\n', '        constant\n', '        returns (IMigrationTarget);\n', '}\n', '\n', '/// @notice mixin that enables migration pattern for a contract\n', '/// @dev when derived from\n', 'contract MigrationSource is\n', '    IMigrationSource,\n', '    AccessControlled\n', '{\n', '    ////////////////////////\n', '    // Immutable state\n', '    ////////////////////////\n', '\n', '    /// stores role hash that can enable migration\n', '    bytes32 private MIGRATION_ADMIN;\n', '\n', '    ////////////////////////\n', '    // Mutable state\n', '    ////////////////////////\n', '\n', '    // migration target contract\n', '    IMigrationTarget internal _migration;\n', '\n', '    ////////////////////////\n', '    // Modifiers\n', '    ////////////////////////\n', '\n', '    /// @notice add to enableMigration function to prevent changing of migration\n', '    ///     target once set\n', '    modifier onlyMigrationEnabledOnce() {\n', '        require(address(_migration) == 0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyMigrationEnabled() {\n', '        require(address(_migration) != 0);\n', '        _;\n', '    }\n', '\n', '    ////////////////////////\n', '    // Constructor\n', '    ////////////////////////\n', '\n', '    function MigrationSource(\n', '        IAccessPolicy policy,\n', '        bytes32 migrationAdminRole\n', '    )\n', '        AccessControlled(policy)\n', '        internal\n', '    {\n', '        MIGRATION_ADMIN = migrationAdminRole;\n', '    }\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    /// @notice should migrate state that belongs to msg.sender\n', '    /// @dev do not forget to add accessor modifier in implementation\n', '    function migrate()\n', '        onlyMigrationEnabled()\n', '        public;\n', '\n', '    /// @notice should enable migration to migration target\n', '    /// @dev do not forget to add accessor modifier in override\n', '    function enableMigration(IMigrationTarget migration)\n', '        public\n', '        onlyMigrationEnabledOnce()\n', '        only(MIGRATION_ADMIN)\n', '    {\n', '        // this must be the source\n', '        require(migration.currentMigrationSource() == address(this));\n', '        _migration = migration;\n', '        LogMigrationEnabled(_migration);\n', '    }\n', '\n', '    /// @notice returns current migration target\n', '    function currentMigrationTarget()\n', '        public\n', '        constant\n', '        returns (IMigrationTarget)\n', '    {\n', '        return _migration;\n', '    }\n', '}\n', '\n', 'contract AccessRoles {\n', '\n', '    ////////////////////////\n', '    // Constants\n', '    ////////////////////////\n', '\n', '    // NOTE: All roles are set to the keccak256 hash of the\n', '    // CamelCased role name, i.e.\n', '    // ROLE_LOCKED_ACCOUNT_ADMIN = keccak256("LockedAccountAdmin")\n', '\n', '    // may setup LockedAccount, change disbursal mechanism and set migration\n', '    bytes32 internal constant ROLE_LOCKED_ACCOUNT_ADMIN = 0x4675da546d2d92c5b86c4f726a9e61010dce91cccc2491ce6019e78b09d2572e;\n', '\n', '    // may setup whitelists and abort whitelisting contract with curve rollback\n', '    bytes32 internal constant ROLE_WHITELIST_ADMIN = 0xaef456e7c864418e1d2a40d996ca4febf3a7e317fe3af5a7ea4dda59033bbe5c;\n', '\n', '    // May issue (generate) Neumarks\n', '    bytes32 internal constant ROLE_NEUMARK_ISSUER = 0x921c3afa1f1fff707a785f953a1e197bd28c9c50e300424e015953cbf120c06c;\n', '\n', '    // May burn Neumarks it owns\n', '    bytes32 internal constant ROLE_NEUMARK_BURNER = 0x19ce331285f41739cd3362a3ec176edffe014311c0f8075834fdd19d6718e69f;\n', '\n', '    // May create new snapshots on Neumark\n', '    bytes32 internal constant ROLE_SNAPSHOT_CREATOR = 0x08c1785afc57f933523bc52583a72ce9e19b2241354e04dd86f41f887e3d8174;\n', '\n', '    // May enable/disable transfers on Neumark\n', '    bytes32 internal constant ROLE_TRANSFER_ADMIN = 0xb6527e944caca3d151b1f94e49ac5e223142694860743e66164720e034ec9b19;\n', '\n', '    // may reclaim tokens/ether from contracts supporting IReclaimable interface\n', '    bytes32 internal constant ROLE_RECLAIMER = 0x0542bbd0c672578966dcc525b30aa16723bb042675554ac5b0362f86b6e97dc5;\n', '\n', '    // represents legally platform operator in case of forks and contracts with legal agreement attached. keccak256("PlatformOperatorRepresentative")\n', '    bytes32 internal constant ROLE_PLATFORM_OPERATOR_REPRESENTATIVE = 0xb2b321377653f655206f71514ff9f150d0822d062a5abcf220d549e1da7999f0;\n', '\n', '    // allows to deposit EUR-T and allow addresses to send and receive EUR-T. keccak256("EurtDepositManager")\n', '    bytes32 internal constant ROLE_EURT_DEPOSIT_MANAGER = 0x7c8ecdcba80ce87848d16ad77ef57cc196c208fc95c5638e4a48c681a34d4fe7;\n', '}\n', '\n', 'contract IBasicToken {\n', '\n', '    ////////////////////////\n', '    // Events\n', '    ////////////////////////\n', '\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 amount);\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    /// @dev This function makes it easy to get the total number of tokens\n', '    /// @return The total number of tokens\n', '    function totalSupply()\n', '        public\n', '        constant\n', '        returns (uint256);\n', '\n', "    /// @param owner The address that's balance is being requested\n", '    /// @return The balance of `owner` at the current block\n', '    function balanceOf(address owner)\n', '        public\n', '        constant\n', '        returns (uint256 balance);\n', '\n', '    /// @notice Send `amount` tokens to `to` from `msg.sender`\n', '    /// @param to The address of the recipient\n', '    /// @param amount The amount of tokens to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address to, uint256 amount)\n', '        public\n', '        returns (bool success);\n', '\n', '}\n', '\n', '/// @title allows deriving contract to recover any token or ether that it has balance of\n', '/// @notice note that this opens your contracts to claims from various people saying they lost tokens and they want them back\n', '///     be ready to handle such claims\n', '/// @dev use with care!\n', "///     1. ROLE_RECLAIMER is allowed to claim tokens, it's not returning tokens to original owner\n", '///     2. in derived contract that holds any token by design you must override `reclaim` and block such possibility.\n', '///         see LockedAccount as an example\n', 'contract Reclaimable is AccessControlled, AccessRoles {\n', '\n', '    ////////////////////////\n', '    // Constants\n', '    ////////////////////////\n', '\n', '    IBasicToken constant internal RECLAIM_ETHER = IBasicToken(0x0);\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    function reclaim(IBasicToken token)\n', '        public\n', '        only(ROLE_RECLAIMER)\n', '    {\n', '        address reclaimer = msg.sender;\n', '        if(token == RECLAIM_ETHER) {\n', '            reclaimer.transfer(this.balance);\n', '        } else {\n', '            uint256 balance = token.balanceOf(this);\n', '            require(token.transfer(reclaimer, balance));\n', '        }\n', '    }\n', '}\n', '\n', 'contract ITokenMetadata {\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    function symbol()\n', '        public\n', '        constant\n', '        returns (string);\n', '\n', '    function name()\n', '        public\n', '        constant\n', '        returns (string);\n', '\n', '    function decimals()\n', '        public\n', '        constant\n', '        returns (uint8);\n', '}\n', '\n', '/// @title adds token metadata to token contract\n', '/// @dev see Neumark for example implementation\n', 'contract TokenMetadata is ITokenMetadata {\n', '\n', '    ////////////////////////\n', '    // Immutable state\n', '    ////////////////////////\n', '\n', "    // The Token's name: e.g. DigixDAO Tokens\n", '    string private NAME;\n', '\n', '    // An identifier: e.g. REP\n', '    string private SYMBOL;\n', '\n', '    // Number of decimals of the smallest unit\n', '    uint8 private DECIMALS;\n', '\n', '    // An arbitrary versioning scheme\n', '    string private VERSION;\n', '\n', '    ////////////////////////\n', '    // Constructor\n', '    ////////////////////////\n', '\n', '    /// @notice Constructor to set metadata\n', '    /// @param tokenName Name of the new token\n', '    /// @param decimalUnits Number of decimals of the new token\n', '    /// @param tokenSymbol Token Symbol for the new token\n', '    /// @param version Token version ie. when cloning is used\n', '    function TokenMetadata(\n', '        string tokenName,\n', '        uint8 decimalUnits,\n', '        string tokenSymbol,\n', '        string version\n', '    )\n', '        public\n', '    {\n', '        NAME = tokenName;                                 // Set the name\n', '        SYMBOL = tokenSymbol;                             // Set the symbol\n', '        DECIMALS = decimalUnits;                          // Set the decimals\n', '        VERSION = version;\n', '    }\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    function name()\n', '        public\n', '        constant\n', '        returns (string)\n', '    {\n', '        return NAME;\n', '    }\n', '\n', '    function symbol()\n', '        public\n', '        constant\n', '        returns (string)\n', '    {\n', '        return SYMBOL;\n', '    }\n', '\n', '    function decimals()\n', '        public\n', '        constant\n', '        returns (uint8)\n', '    {\n', '        return DECIMALS;\n', '    }\n', '\n', '    function version()\n', '        public\n', '        constant\n', '        returns (string)\n', '    {\n', '        return VERSION;\n', '    }\n', '}\n', '\n', 'contract IERC20Allowance {\n', '\n', '    ////////////////////////\n', '    // Events\n', '    ////////////////////////\n', '\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 amount);\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    /// @dev This function makes it easy to read the `allowed[]` map\n', '    /// @param owner The address of the account that owns the token\n', '    /// @param spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens of owner that spender is allowed\n', '    ///  to spend\n', '    function allowance(address owner, address spender)\n', '        public\n', '        constant\n', '        returns (uint256 remaining);\n', '\n', '    /// @notice `msg.sender` approves `spender` to spend `amount` tokens on\n', '    ///  its behalf. This is a modified version of the ERC20 approve function\n', '    ///  to be a little bit safer\n', '    /// @param spender The address of the account able to transfer the tokens\n', '    /// @param amount The amount of tokens to be approved for transfer\n', '    /// @return True if the approval was successful\n', '    function approve(address spender, uint256 amount)\n', '        public\n', '        returns (bool success);\n', '\n', '    /// @notice Send `amount` tokens to `to` from `from` on the condition it\n', '    ///  is approved by `from`\n', '    /// @param from The address holding the tokens being transferred\n', '    /// @param to The address of the recipient\n', '    /// @param amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function transferFrom(address from, address to, uint256 amount)\n', '        public\n', '        returns (bool success);\n', '\n', '}\n', '\n', 'contract IERC20Token is IBasicToken, IERC20Allowance {\n', '\n', '}\n', '\n', 'contract IERC677Callback {\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    // NOTE: This call can be initiated by anyone. You need to make sure that\n', '    // it is send by the token (`require(msg.sender == token)`) or make sure\n', '    // amount is valid (`require(token.allowance(this) >= amount)`).\n', '    function receiveApproval(\n', '        address from,\n', '        uint256 amount,\n', '        address token, // IERC667Token\n', '        bytes data\n', '    )\n', '        public\n', '        returns (bool success);\n', '\n', '}\n', '\n', 'contract IERC677Allowance is IERC20Allowance {\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    /// @notice `msg.sender` approves `spender` to send `amount` tokens on\n', '    ///  its behalf, and then a function is triggered in the contract that is\n', '    ///  being approved, `spender`. This allows users to use their tokens to\n', '    ///  interact with contracts in one function call instead of two\n', '    /// @param spender The address of the contract able to transfer the tokens\n', '    /// @param amount The amount of tokens to be approved for transfer\n', '    /// @return True if the function call was successful\n', '    function approveAndCall(address spender, uint256 amount, bytes extraData)\n', '        public\n', '        returns (bool success);\n', '\n', '}\n', '\n', 'contract IERC677Token is IERC20Token, IERC677Allowance {\n', '}\n', '\n', 'contract Math {\n', '\n', '    ////////////////////////\n', '    // Internal functions\n', '    ////////////////////////\n', '\n', '    // absolute difference: |v1 - v2|\n', '    function absDiff(uint256 v1, uint256 v2)\n', '        internal\n', '        constant\n', '        returns(uint256)\n', '    {\n', '        return v1 > v2 ? v1 - v2 : v2 - v1;\n', '    }\n', '\n', '    // divide v by d, round up if remainder is 0.5 or more\n', '    function divRound(uint256 v, uint256 d)\n', '        internal\n', '        constant\n', '        returns(uint256)\n', '    {\n', '        return add(v, d/2) / d;\n', '    }\n', '\n', "    // computes decimal decimalFraction 'frac' of 'amount' with maximum precision (multiplication first)\n", '    // both amount and decimalFraction must have 18 decimals precision, frac 10**18 represents a whole (100% of) amount\n', '    // mind loss of precision as decimal fractions do not have finite binary expansion\n', '    // do not use instead of division\n', '    function decimalFraction(uint256 amount, uint256 frac)\n', '        internal\n', '        constant\n', '        returns(uint256)\n', '    {\n', "        // it's like 1 ether is 100% proportion\n", '        return proportion(amount, frac, 10**18);\n', '    }\n', '\n', '    // computes part/total of amount with maximum precision (multiplication first)\n', '    // part and total must have the same units\n', '    function proportion(uint256 amount, uint256 part, uint256 total)\n', '        internal\n', '        constant\n', '        returns(uint256)\n', '    {\n', '        return divRound(mul(amount, part), total);\n', '    }\n', '\n', '    //\n', '    // Open Zeppelin Math library below\n', '    //\n', '\n', '    function mul(uint256 a, uint256 b)\n', '        internal\n', '        constant\n', '        returns (uint256)\n', '    {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b)\n', '        internal\n', '        constant\n', '        returns (uint256)\n', '    {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b)\n', '        internal\n', '        constant\n', '        returns (uint256)\n', '    {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function min(uint256 a, uint256 b)\n', '        internal\n', '        constant\n', '        returns (uint256)\n', '    {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max(uint256 a, uint256 b)\n', '        internal\n', '        constant\n', '        returns (uint256)\n', '    {\n', '        return a > b ? a : b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is IBasicToken, Math {\n', '\n', '    ////////////////////////\n', '    // Mutable state\n', '    ////////////////////////\n', '\n', '    mapping(address => uint256) internal _balances;\n', '\n', '    uint256 internal _totalSupply;\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param to The address to transfer to.\n', '    * @param amount The amount to be transferred.\n', '    */\n', '    function transfer(address to, uint256 amount)\n', '        public\n', '        returns (bool)\n', '    {\n', '        transferInternal(msg.sender, to, amount);\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to get the total number of tokens\n', '    /// @return The total number of tokens\n', '    function totalSupply()\n', '        public\n', '        constant\n', '        returns (uint256)\n', '    {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address owner)\n', '        public\n', '        constant\n', '        returns (uint256 balance)\n', '    {\n', '        return _balances[owner];\n', '    }\n', '\n', '    ////////////////////////\n', '    // Internal functions\n', '    ////////////////////////\n', '\n', '    // actual transfer function called by all public variants\n', '    function transferInternal(address from, address to, uint256 amount)\n', '        internal\n', '    {\n', '        require(to != address(0));\n', '\n', '        _balances[from] = sub(_balances[from], amount);\n', '        _balances[to] = add(_balances[to], amount);\n', '        Transfer(from, to, amount);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is\n', '    IERC20Token,\n', '    BasicToken,\n', '    IERC677Token\n', '{\n', '\n', '    ////////////////////////\n', '    // Mutable state\n', '    ////////////////////////\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    //\n', '    // Implements ERC20\n', '    //\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param from address The address which you want to send tokens from\n', '    * @param to address The address which you want to transfer to\n', '    * @param amount uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address from, address to, uint256 amount)\n', '        public\n', '        returns (bool)\n', '    {\n', '        // check and reset allowance\n', '        var allowance = _allowed[from][msg.sender];\n', '        _allowed[from][msg.sender] = sub(allowance, amount);\n', '        // do the transfer\n', '        transferInternal(from, to, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * @param spender The address which will spend the funds.\n', '    * @param amount The amount of tokens to be spent.\n', '    */\n', '    function approve(address spender, uint256 amount)\n', '        public\n', '        returns (bool)\n', '    {\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((amount == 0) || (_allowed[msg.sender][spender] == 0));\n', '\n', '        _allowed[msg.sender][spender] = amount;\n', '        Approval(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param owner address The address which owns the funds.\n', '    * @param spender address The address which will spend the funds.\n', '    * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '    */\n', '    function allowance(address owner, address spender)\n', '        public\n', '        constant\n', '        returns (uint256 remaining)\n', '    {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    //\n', '    // Implements IERC677Token\n', '    //\n', '\n', '    function approveAndCall(\n', '        address spender,\n', '        uint256 amount,\n', '        bytes extraData\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(approve(spender, amount));\n', '\n', '        // in case of re-entry 1. approval is done 2. msg.sender is different\n', '        bool success = IERC677Callback(spender).receiveApproval(\n', '            msg.sender,\n', '            amount,\n', '            this,\n', '            extraData\n', '        );\n', '        require(success);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', '/// Simple implementation of EuroToken which is pegged 1:1 to certain off-chain\n', '/// pool of Euro. Balances of this token are intended to be migrated to final\n', '/// implementation that will be available later\n', 'contract EuroToken is\n', '    IERC677Token,\n', '    AccessControlled,\n', '    StandardToken,\n', '    TokenMetadata,\n', '    MigrationSource,\n', '    Reclaimable\n', '{\n', '    ////////////////////////\n', '    // Constants\n', '    ////////////////////////\n', '\n', '    string private constant NAME = "Euro Token";\n', '\n', '    string private constant SYMBOL = "EUR-T";\n', '\n', '    uint8 private constant DECIMALS = 18;\n', '\n', '    ////////////////////////\n', '    // Mutable state\n', '    ////////////////////////\n', '\n', '    // a list of addresses that are allowed to receive EUR-T\n', '    mapping(address => bool) private _allowedTransferTo;\n', '\n', '    // a list of of addresses that are allowed to send EUR-T\n', '    mapping(address => bool) private _allowedTransferFrom;\n', '\n', '    ////////////////////////\n', '    // Events\n', '    ////////////////////////\n', '\n', '    event LogDeposit(\n', '        address indexed to,\n', '        uint256 amount\n', '    );\n', '\n', '    event LogWithdrawal(\n', '        address indexed from,\n', '        uint256 amount\n', '    );\n', '\n', '    event LogAllowedFromAddress(\n', '        address indexed from,\n', '        bool allowed\n', '    );\n', '\n', '    event LogAllowedToAddress(\n', '        address indexed to,\n', '        bool allowed\n', '    );\n', '\n', '    /// @notice migration was successful\n', '    event LogEuroTokenOwnerMigrated(\n', '        address indexed owner,\n', '        uint256 amount\n', '    );\n', '\n', '    ////////////////////////\n', '    // Modifiers\n', '    ////////////////////////\n', '\n', '    modifier onlyAllowedTransferFrom(address from) {\n', '        require(_allowedTransferFrom[from]);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAllowedTransferTo(address to) {\n', '        require(_allowedTransferTo[to]);\n', '        _;\n', '    }\n', '\n', '    ////////////////////////\n', '    // Constructor\n', '    ////////////////////////\n', '\n', '    function EuroToken(IAccessPolicy accessPolicy)\n', '        AccessControlled(accessPolicy)\n', '        StandardToken()\n', '        TokenMetadata(NAME, DECIMALS, SYMBOL, "")\n', '        MigrationSource(accessPolicy, ROLE_EURT_DEPOSIT_MANAGER)\n', '        Reclaimable()\n', '        public\n', '    {\n', '    }\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', "    /// @notice deposit 'amount' of EUR-T to address 'to'\n", "    /// @dev address 'to' is whitelisted as recipient of future transfers\n", '    /// @dev deposit may happen only in case of succesful KYC of recipient and validation of banking data\n', '    /// @dev which in this implementation is an off-chain responsibility of EURT_DEPOSIT_MANAGER\n', '    function deposit(address to, uint256 amount)\n', '        public\n', '        only(ROLE_EURT_DEPOSIT_MANAGER)\n', '        returns (bool)\n', '    {\n', '        require(to != address(0));\n', '        _balances[to] = add(_balances[to], amount);\n', '        _totalSupply = add(_totalSupply, amount);\n', '        setAllowedTransferTo(to, true);\n', '        LogDeposit(to, amount);\n', '        Transfer(address(0), to, amount);\n', '        return true;\n', '    }\n', '\n', "    /// @notice withdraws 'amount' of EUR-T by burning required amount and providing a proof of whithdrawal\n", '    /// @dev proof is provided in form of log entry on which EURT_DEPOSIT_MANAGER\n', '    /// @dev will act off-chain to return required Euro amount to EUR-T holder\n', '    function withdraw(uint256 amount)\n', '        public\n', '    {\n', '        require(_balances[msg.sender] >= amount);\n', '        _balances[msg.sender] = sub(_balances[msg.sender], amount);\n', '        _totalSupply = sub(_totalSupply, amount);\n', '        LogWithdrawal(msg.sender, amount);\n', '        Transfer(msg.sender, address(0), amount);\n', '    }\n', '\n', '    /// @notice enables or disables address to be receipient of EUR-T\n', '    function setAllowedTransferTo(address to, bool allowed)\n', '        public\n', '        only(ROLE_EURT_DEPOSIT_MANAGER)\n', '    {\n', '        _allowedTransferTo[to] = allowed;\n', '        LogAllowedToAddress(to, allowed);\n', '    }\n', '\n', '    /// @notice enables or disables address to be sender of EUR-T\n', '    function setAllowedTransferFrom(address from, bool allowed)\n', '        public\n', '        only(ROLE_EURT_DEPOSIT_MANAGER)\n', '    {\n', '        _allowedTransferFrom[from] = allowed;\n', '        LogAllowedFromAddress(from, allowed);\n', '    }\n', '\n', '    function allowedTransferTo(address to)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return _allowedTransferTo[to];\n', '    }\n', '\n', '    function allowedTransferFrom(address from)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return _allowedTransferFrom[from];\n', '    }\n', '\n', '    //\n', '    // Overrides ERC20 Interface to allow transfer from/to allowed addresses\n', '    //\n', '\n', '    function transfer(address to, uint256 amount)\n', '        public\n', '        onlyAllowedTransferFrom(msg.sender)\n', '        onlyAllowedTransferTo(to)\n', '        returns (bool success)\n', '    {\n', '        return BasicToken.transfer(to, amount);\n', '    }\n', '\n', "    /// @dev broker acts in the name of 'from' address so broker needs to have permission to transfer from\n", '    ///  this way we may give permissions to brokering smart contracts while investors do not have permissions\n', "    ///  to transfer. 'to' address requires standard transfer to permission\n", '    function transferFrom(address from, address to, uint256 amount)\n', '        public\n', '        onlyAllowedTransferFrom(msg.sender)\n', '        onlyAllowedTransferTo(to)\n', '        returns (bool success)\n', '    {\n', '        return StandardToken.transferFrom(from, to, amount);\n', '    }\n', '\n', '    //\n', '    // Overrides migration source\n', '    //\n', '\n', '    function migrate()\n', '        public\n', '        onlyMigrationEnabled()\n', '        onlyAllowedTransferTo(msg.sender)\n', '    {\n', '        // burn deposit\n', '        uint256 amount = _balances[msg.sender];\n', '        if (amount > 0) {\n', '            _balances[msg.sender] = 0;\n', '            _totalSupply = sub(_totalSupply, amount);\n', '        }\n', '        // remove all transfer permissions\n', '        _allowedTransferTo[msg.sender] = false;\n', '        _allowedTransferFrom[msg.sender] = false;\n', '        // migrate to\n', '        EuroTokenMigrationTarget(_migration).migrateEuroTokenOwner(msg.sender, amount);\n', '        // set event\n', '        LogEuroTokenOwnerMigrated(msg.sender, amount);\n', '    }\n', '}']