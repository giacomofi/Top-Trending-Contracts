['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'library SafeBonus {\n', '    using SafeMath for uint256;\n', '\n', '    function addBonus(uint256 value, uint256 percentages) internal pure returns (uint256) {\n', '        return value.add(value.mul(percentages).div(100));\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface token {\n', '    function transfer(address receiver, uint amount) public;\n', '}\n', '\n', 'contract VesaPreICO is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeBonus for uint256;\n', '\n', '    address public beneficiary;\n', '    uint8 public constant durationInDays = 31;\n', '    uint public constant fundingGoal = 140 ether;\n', '    uint public constant fundingGoalHardCap = 1400 ether;\n', '    uint public amountRaised;\n', '    uint public start;\n', '    uint public deadline;\n', '    uint public constant bonusPrice = 1857142857000000;\n', '    uint public constant bonusPriceDeltaPerHour = 28571428570000;\n', '    uint public constant bonusPeriodDurationInHours = 10;\n', '    uint public constant price = 2142857142857140;\n', '    uint public constant minSum = 142857142900000000;\n', '    token public tokenReward;\n', '    mapping(address => uint256) public balanceOf;\n', '    bool public fundingGoalReached = false;\n', '    bool public crowdsaleClosed = false;\n', '\n', '    event GoalReached(address recipient, uint totalAmountRaised);\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Setup the owner\n', '     */\n', '    function VesaPreICO() public {\n', '        beneficiary = 0x94e1F1Fa284061184B583a61633CaC75e03cFdBC;\n', '        start = now;\n', '        deadline = start + durationInDays * 1 days;\n', '        tokenReward = token(0xb1c74c1D82824428e484072069041deD079eD921);\n', '    }\n', '\n', '    function isAfterDeadline() internal view returns (bool) { return now >= deadline; } \n', '\n', '    function isSoftCapAchieved() internal view returns (bool) { return amountRaised >= fundingGoal; } \n', '\n', '    function isHardCapAchieved() internal view returns (bool) { return amountRaised >= fundingGoalHardCap; }\n', '\n', '    function isCompanyCanBeFinished() internal view returns (bool) { return isAfterDeadline() || isHardCapAchieved(); }\n', '\n', '    modifier afterDeadline() { if (isAfterDeadline()) _; }\n', '\n', '    modifier companyCanBeFinished() { if (isCompanyCanBeFinished()) _; }\n', '\n', '    function getPrice() public view returns (uint) {\n', '        require(!crowdsaleClosed);\n', '\n', '        if ( now >= (start + bonusPeriodDurationInHours.mul(1 hours))) {\n', '            return price;\n', '        } else {\n', '            uint hoursLeft = now.sub(start).div(1 hours);\n', '            return bonusPrice.add(bonusPriceDeltaPerHour.mul(hoursLeft));\n', '        }\n', '    }\n', '\n', '    function getBonus(uint amount) public view returns (uint) {\n', '        require(!crowdsaleClosed);\n', '\n', '        if (amount < 2857142857000000000) { return 0; }                                       // < 2.857142857\n', '        if (amount >= 2857142857000000000 && amount < 7142857143000000000) { return 6; }      // 2.857142857-7,142857143 ETH\n', '        if (amount >= 7142857143000000000 && amount < 14285714290000000000) { return 8; }     // 7,142857143-14,28571429 ETH\n', '        if (amount >= 14285714290000000000 && amount < 25000000000000000000) { return 10; }   // 14,28571429-25 ETH\n', '        if (amount >= 25000000000000000000 && amount < 85000000000000000000) { return 15; }   // 25-85 ETH\n', '        if (amount >= 85000000000000000000 && amount < 285000000000000000000) { return 17; }  // 85-285 ETH\n', '        if (amount >= 285000000000000000000) { return 20; }                                   // >285 ETH\n', '    }\n', '\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function () public payable {\n', '        require(!crowdsaleClosed);\n', '        require(msg.value > minSum);\n', '        uint amount = msg.value;\n', '        balanceOf[msg.sender].add(amount);\n', '        amountRaised = amountRaised.add(amount);\n', '\n', '        uint currentPrice = getPrice();\n', '        uint currentBonus = getBonus(amount);\n', '\n', '        uint tokensToTransfer = amount.mul(10 ** 18).div(currentPrice);\n', '        uint tokensToTransferWithBonuses = tokensToTransfer.addBonus(currentBonus);\n', '\n', '        tokenReward.transfer(msg.sender, tokensToTransferWithBonuses);\n', '        FundTransfer(msg.sender, amount, true);\n', '    }\n', '\n', '    /**\n', '     * Check if goal was reached\n', '     *\n', '     * Checks if the goal or time limit has been reached and ends the campaign\n', '     */\n', '    function checkGoalReached() public companyCanBeFinished {\n', '        if (amountRaised >= fundingGoal){\n', '            fundingGoalReached = true;\n', '            GoalReached(beneficiary, amountRaised);\n', '        }\n', '        crowdsaleClosed = true;\n', '    }\n', '\n', '    /**\n', '     * Withdraw the funds\n', '     *\n', '     * Checks to see if goal or time limit has been reached, and if so, and the funding goal was reached,\n', '     * sends the entire amount to the beneficiary. If goal was not reached, each contributor can withdraw\n', '     * the amount they contributed.\n', '     */\n', '    function safeWithdrawal() public companyCanBeFinished {\n', '        if (!fundingGoalReached) {\n', '            uint amount = balanceOf[msg.sender];\n', '            balanceOf[msg.sender] = 0;\n', '            if (amount > 0) {\n', '                if (msg.sender.send(amount)) {\n', '                    FundTransfer(msg.sender, amount, false);\n', '                } else {\n', '                    balanceOf[msg.sender] = amount;\n', '                }\n', '            }\n', '        }\n', '\n', '        if (fundingGoalReached && beneficiary == msg.sender) {\n', '            if (beneficiary.send(amountRaised)) {\n', '                FundTransfer(beneficiary, amountRaised, false);\n', '            } else {\n', '                //If we fail to send the funds to beneficiary, unlock funders balance\n', '                fundingGoalReached = false;\n', '            }\n', '        }\n', '    }\n', '\n', '    function tokensWithdrawal(address receiver, uint amount) public onlyOwner {\n', '        tokenReward.transfer(receiver, amount);\n', '    }\n', '\n', '}']