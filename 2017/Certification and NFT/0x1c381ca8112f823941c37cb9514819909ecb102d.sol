['pragma solidity ^0.4.17;\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '}\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  modifier onlyPayloadSize(uint size) {\n', '    assert(msg.data.length == size + 4);\n', '    _;\n', '  }\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '  mapping (address => bool) public crowdsaleContracts;\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n', '\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(this, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  function finishMinting() onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract BSEToken is MintableToken {\n', '\n', '  string public constant name = " BLACK SNAIL ENERGY ";\n', '\n', '  string public constant symbol = "BSE";\n', '\n', '  uint32 public constant decimals = 18;\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value > 0);\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    Burn(burner, _value);\n', '  }\n', '\n', '}\n', '\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private rentrancy_lock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!rentrancy_lock);\n', '    rentrancy_lock = true;\n', '    _;\n', '    rentrancy_lock = false;\n', '  }\n', '}\n', '\n', 'contract Stateful {\n', '  enum State {\n', '  Init,\n', '  PreIco,\n', '  PreIcoPaused,\n', '  preIcoFinished,\n', '  ICO,\n', '  salePaused,\n', '  CrowdsaleFinished,\n', '  companySold\n', '  }\n', '  State public state = State.Init;\n', '\n', '  event StateChanged(State oldState, State newState);\n', '\n', '  function setState(State newState) internal {\n', '    State oldState = state;\n', '    state = newState;\n', '    StateChanged(oldState, newState);\n', '  }\n', '}\n', '\n', '\n', 'contract FiatContract {\n', '  function ETH(uint _id) constant returns (uint256);\n', '  function USD(uint _id) constant returns (uint256);\n', '  function EUR(uint _id) constant returns (uint256);\n', '  function GBP(uint _id) constant returns (uint256);\n', '  function updatedAt(uint _id) constant returns (uint);\n', '}\n', '\n', 'contract Crowdsale is Ownable, ReentrancyGuard, Stateful {\n', '\n', '  using SafeMath for uint;\n', '\n', '  mapping (address => uint) preICOinvestors;\n', '  mapping (address => uint) ICOinvestors;\n', '\n', '  BSEToken public token ;\n', '  uint256 public startICO;\n', '  uint256 public startPreICO;\n', '  uint256 public period;\n', '  uint256 public constant rateCent = 2000000000000000;\n', '  \n', '  uint256 public constant preICOTokenHardCap = 440000 * 1 ether;\n', '  uint256 public constant ICOTokenHardCap = 1540000 * 1 ether;\n', '  uint256 public collectedCent;\n', '  uint256 day = 86400; // sec in day\n', '  uint256 public soldTokens;\n', '  uint256 public priceUSD; // format 1 cent = priceUSD * wei\n', '\n', '\n', '  address multisig;\n', '  address public oracle;\n', '\n', '\n', '  modifier onlyOwnerOrOracle() {\n', '    require(msg.sender == oracle || msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function changeOracle(address _oracle) onlyOwner external {\n', '    require(_oracle != 0);\n', '    oracle = _oracle;\n', '  }\n', '\n', '  modifier saleIsOn() {\n', '    require((state == State.PreIco || state == State.ICO) &&(now < startICO + period || now < startPreICO + period));\n', '    _;\n', '  }\n', '\n', '  modifier isUnderHardCap() {\n', '    require(soldTokens < getHardcap());\n', '    _;\n', '  }\n', '\n', '  function getHardcap() internal returns(uint256) {\n', '    if (state == State.PreIco) {\n', '      return preICOTokenHardCap;\n', '    }\n', '    else {\n', '      if (state == State.ICO) {\n', '        return ICOTokenHardCap;\n', '      }\n', '    }\n', '  }\n', '\n', '\n', '  function Crowdsale(address _multisig, uint256 _priceUSD) {\n', '    priceUSD = _priceUSD;\n', '    multisig = _multisig;\n', '    token = new BSEToken();\n', '\n', '  }\n', '  function startCompanySell() onlyOwner {\n', '    require(state== State.CrowdsaleFinished);\n', '    setState(State.companySold);\n', '  }\n', '\n', '  // for mint tokens to USD investor\n', '  function usdSale(address _to, uint _valueUSD) onlyOwner  {\n', '    uint256 valueCent = _valueUSD * 100;\n', '    uint256 tokensAmount = rateCent.mul(valueCent);\n', '    collectedCent += valueCent;\n', '    token.mint(_to, tokensAmount);\n', '    if (state == State.ICO || state == State.preIcoFinished) {\n', '      ICOinvestors[_to] += tokensAmount;\n', '    } else {\n', '      preICOinvestors[_to] += tokensAmount;\n', '    }\n', '    soldTokens += tokensAmount;\n', '  }\n', '\n', '  function pauseSale() onlyOwner {\n', '    require(state == State.ICO);\n', '    setState(State.salePaused);\n', '  }\n', '\n', '  function pausePreSale() onlyOwner {\n', '    require(state == State.PreIco);\n', '    setState(State.PreIcoPaused);\n', '  }\n', '\n', '  function startPreIco(uint256 _period, uint256 _priceUSD) onlyOwner {\n', '    require(_period > 0);\n', '    require(state == State.Init || state == State.PreIcoPaused);\n', '    priceUSD = _priceUSD;\n', '    startPreICO = now;\n', '    period = _period * day;\n', '    setState(State.PreIco);\n', '  }\n', '\n', '  function finishPreIco() onlyOwner {\n', '    require(state == State.PreIco);\n', '    setState(State.preIcoFinished);\n', '    bool isSent = multisig.call.gas(3000000).value(this.balance)();\n', '    require(isSent);\n', '  }\n', '\n', '  function startIco(uint256 _period, uint256 _priceUSD) onlyOwner {\n', '    require(_period > 0);\n', '    require(state == State.PreIco || state == State.salePaused || state == State.preIcoFinished);\n', '    priceUSD = _priceUSD;\n', '    startICO = now;\n', '    period = _period * day;\n', '    setState(State.ICO);\n', '  }\n', '\n', '  function setPriceUSD(uint256 _priceUSD) onlyOwnerOrOracle {\n', '    priceUSD = _priceUSD;\n', '  }\n', '\n', '  function finishICO() onlyOwner {\n', '    require(state == State.ICO);\n', '    setState(State.CrowdsaleFinished);\n', '    bool isSent = multisig.call.gas(3000000).value(this.balance)();\n', '    require(isSent);\n', '\n', '  }\n', '  function finishMinting() onlyOwner {\n', '\n', '    token.finishMinting();\n', '\n', '  }\n', '\n', '  function getDouble() nonReentrant {\n', '    require (state == State.ICO || state == State.companySold);\n', '    uint256 extraTokensAmount;\n', '    if (state == State.ICO) {\n', '      extraTokensAmount = preICOinvestors[msg.sender];\n', '      preICOinvestors[msg.sender] = 0;\n', '      token.mint(msg.sender, extraTokensAmount);\n', '      ICOinvestors[msg.sender] += extraTokensAmount;\n', '    }\n', '    else {\n', '      if (state == State.companySold) {\n', '        extraTokensAmount = preICOinvestors[msg.sender] + ICOinvestors[msg.sender];\n', '        preICOinvestors[msg.sender] = 0;\n', '        ICOinvestors[msg.sender] = 0;\n', '        token.mint(msg.sender, extraTokensAmount);\n', '      }\n', '    }\n', '  }\n', '\n', '\n', '  function mintTokens() payable saleIsOn isUnderHardCap nonReentrant {\n', '    uint256 valueWEI = msg.value;\n', '    uint256 valueCent = valueWEI.div(priceUSD);\n', '    uint256 tokens = rateCent.mul(valueCent);\n', '    uint256 hardcap = getHardcap();\n', '    if (soldTokens + tokens > hardcap) {\n', '      tokens = hardcap.sub(soldTokens);\n', '      valueCent = tokens.div(rateCent);\n', '      valueWEI = valueCent.mul(priceUSD);\n', '      uint256 change = msg.value - valueWEI;\n', '      bool isSent = msg.sender.call.gas(3000000).value(change)();\n', '      require(isSent);\n', '    }\n', '    token.mint(msg.sender, tokens);\n', '    collectedCent += valueCent;\n', '    soldTokens += tokens;\n', '    if (state == State.PreIco) {\n', '      preICOinvestors[msg.sender] += tokens;\n', '    }\n', '    else {\n', '      ICOinvestors[msg.sender] += tokens;\n', '    }\n', '  }\n', '\n', '  function () payable {\n', '    mintTokens();\n', '  }\n', '}']