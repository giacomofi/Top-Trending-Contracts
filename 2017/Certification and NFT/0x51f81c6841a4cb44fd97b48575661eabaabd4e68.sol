['/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' */\n', '\n', 'pragma solidity ^0.4.11;\n', '\n', '\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'contract SafeMath {\n', '    function safeMul(uint a, uint b) internal returns (uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeDiv(uint a, uint b) internal returns (uint) {\n', '        assert(b > 0);\n', '        uint c = a / b;\n', '        assert(a == b * c + a % b);\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint a, uint b) internal returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint a, uint b) internal returns (uint) {\n', '        uint c = a + b;\n', '        assert(c>=a && c>=b);\n', '        return c;\n', '    }\n', '\n', '    function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '}\n', '/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' */\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', '// Created using ICO Wizard https://github.com/oraclesorg/ico-wizard by Oracles Network\n', '\n', '/*\n', ' * Haltable\n', ' *\n', ' * Abstract contract that allows children to implement an\n', ' * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\n', ' *\n', ' *\n', ' * Originally envisioned in FirstBlood ICO contract.\n', ' */\n', 'contract Haltable is Ownable {\n', '    bool public halted;\n', '\n', '    modifier stopInEmergency {\n', '        if (halted) throw;\n', '        _;\n', '    }\n', '\n', '    modifier stopNonOwnersInEmergency {\n', '        if (halted && msg.sender != owner) throw;\n', '        _;\n', '    }\n', '\n', '    modifier onlyInEmergency {\n', '        if (!halted) throw;\n', '        _;\n', '    }\n', '\n', '    // called by the owner on emergency, triggers stopped state\n', '    function halt() external onlyOwner {\n', '        halted = true;\n', '    }\n', '\n', '    // called by the owner on end of emergency, returns to normal state\n', '    function unhalt() external onlyOwner onlyInEmergency {\n', '        halted = false;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' */\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' */\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * Standard ERC20 token with Short Hand Attack and approve() race condition mitigation.\n', ' *\n', ' * Based on code by FirstBlood:\n', ' * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, SafeMath {\n', '\n', '    /* Token supply got increased and a new owner received these tokens */\n', '    event Minted(address receiver, uint amount);\n', '\n', '    /* Actual balances of token holders */\n', '    mapping(address => uint) balances;\n', '\n', '    /* approve() allowances */\n', '    mapping (address => mapping (address => uint)) allowed;\n', '\n', '    /* Interface declaration */\n', '    function isToken() public constant returns (bool weAre) {\n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint _value) returns (bool success) {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) returns (bool success) {\n', '        uint _allowance = allowed[_from][msg.sender];\n', '\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        balances[_from] = safeSub(balances[_from], _value);\n', '        allowed[_from][msg.sender] = safeSub(_allowance, _value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint _value) returns (bool success) {\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require ((_value != 0) && (allowed[msg.sender][_spender] != 0));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' */\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' */\n', '\n', '\n', '\n', '/**\n', ' * Upgrade agent interface inspired by Lunyr.\n', ' *\n', ' * Upgrade agent transfers tokens to a new contract.\n', ' * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\n', ' */\n', 'contract UpgradeAgent {\n', '\n', '    uint public originalSupply;\n', '\n', '    /** Interface marker */\n', '    function isUpgradeAgent() public constant returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    function upgradeFrom(address _from, uint256 _value) public;\n', '\n', '}\n', '\n', '\n', '/**\n', ' * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\n', ' *\n', ' * First envisioned by Golem and Lunyr projects.\n', ' */\n', 'contract UpgradeableToken is StandardToken {\n', '\n', '    /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\n', '    address public upgradeMaster;\n', '\n', '    /** The next contract where the tokens will be migrated. */\n', '    UpgradeAgent public upgradeAgent;\n', '\n', '    /** How many tokens we have upgraded by now. */\n', '    uint256 public totalUpgraded;\n', '\n', '    /**\n', '     * Upgrade states.\n', '     *\n', '     * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\n', "     * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\n", '     * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet\n', '     * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\n', '     *\n', '     */\n', '    enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\n', '\n', '    /**\n', '     * Somebody has upgraded some of his tokens.\n', '     */\n', '    event Upgrade(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    /**\n', '     * New upgrade agent available.\n', '     */\n', '    event UpgradeAgentSet(address agent);\n', '\n', '    /**\n', '     * Do not allow construction without upgrade master set.\n', '     */\n', '    function UpgradeableToken(address _upgradeMaster) {\n', '        upgradeMaster = _upgradeMaster;\n', '    }\n', '\n', '    /**\n', '     * Allow the token holder to upgrade some of their tokens to a new contract.\n', '     */\n', '    function upgrade(uint256 value) public {\n', '\n', '        UpgradeState state = getUpgradeState();\n', '        require(!(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading));\n', '\n', '        // Validate input value.\n', '        require (value == 0);\n', '\n', '        balances[msg.sender] = safeSub(balances[msg.sender], value);\n', '\n', '        // Take tokens out from circulation\n', '        totalSupply = safeSub(totalSupply, value);\n', '        totalUpgraded = safeAdd(totalUpgraded, value);\n', '\n', '        // Upgrade agent reissues the tokens\n', '        upgradeAgent.upgradeFrom(msg.sender, value);\n', '        Upgrade(msg.sender, upgradeAgent, value);\n', '    }\n', '\n', '    /**\n', '     * Set an upgrade agent that handles\n', '     */\n', '    function setUpgradeAgent(address agent) external {\n', '\n', '        require(!canUpgrade()); // The token is not yet in a state that we could think upgrading;\n', '\n', '        require(agent == 0x0);\n', '        // Only a master can designate the next agent\n', '        require(msg.sender != upgradeMaster);\n', '        // Upgrade has already begun for an agent\n', '        require(getUpgradeState() == UpgradeState.Upgrading);\n', '\n', '        upgradeAgent = UpgradeAgent(agent);\n', '\n', '        // Bad interface\n', '        require(!upgradeAgent.isUpgradeAgent());\n', '        // Make sure that token supplies match in source and target\n', '        require(upgradeAgent.originalSupply() != totalSupply);\n', '\n', '        UpgradeAgentSet(upgradeAgent);\n', '    }\n', '\n', '    /**\n', '     * Get the state of the token upgrade.\n', '     */\n', '    function getUpgradeState() public constant returns(UpgradeState) {\n', '        if(!canUpgrade()) return UpgradeState.NotAllowed;\n', '        else if(address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\n', '        else if(totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\n', '        else return UpgradeState.Upgrading;\n', '    }\n', '\n', '    /**\n', '     * Change the upgrade master.\n', '     *\n', '     * This allows us to set a new owner for the upgrade mechanism.\n', '     */\n', '    function setUpgradeMaster(address master) public {\n', '        require(master == 0x0);\n', '        require(msg.sender != upgradeMaster);\n', '        upgradeMaster = master;\n', '    }\n', '\n', '    /**\n', '     * Child contract can enable to provide the condition when the upgrade can begun.\n', '     */\n', '    function canUpgrade() public constant returns(bool) {\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' */\n', '\n', '\n', '\n', '\n', '/**\n', ' * A token that can increase its supply by another contract.\n', ' *\n', ' * This allows uncapped crowdsale by dynamically increasing the supply when money pours in.\n', ' * Only mint agents, contracts whitelisted by owner, can mint new tokens.\n', ' *\n', ' */\n', 'contract MintableTokenExt is StandardToken, Ownable {\n', '\n', '    using SMathLib for uint;\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    /** List of agents that are allowed to create new tokens */\n', '    mapping (address => bool) public mintAgents;\n', '\n', '    event MintingAgentChanged(address addr, bool state  );\n', '\n', '    /** inPercentageUnit is percents of tokens multiplied to 10 up to percents decimals.\n', '    * For example, for reserved tokens in percents 2.54%\n', '    * inPercentageUnit = 254\n', '    * inPercentageDecimals = 2\n', '    */\n', '    struct ReservedTokensData {\n', '        uint inTokens;\n', '        uint inPercentageUnit;\n', '        uint inPercentageDecimals;\n', '    }\n', '\n', '    mapping (address => ReservedTokensData) public reservedTokensList;\n', '    address[] public reservedTokensDestinations;\n', '    uint public reservedTokensDestinationsLen = 0;\n', '\n', '    function setReservedTokensList(address addr, uint inTokens, uint inPercentageUnit, uint inPercentageDecimals) onlyOwner {\n', '        reservedTokensDestinations.push(addr);\n', '        reservedTokensDestinationsLen++;\n', '        reservedTokensList[addr] = ReservedTokensData({inTokens:inTokens, inPercentageUnit:inPercentageUnit, inPercentageDecimals: inPercentageDecimals});\n', '    }\n', '\n', '    function getReservedTokensListValInTokens(address addr) constant returns (uint inTokens) {\n', '        return reservedTokensList[addr].inTokens;\n', '    }\n', '\n', '    function getReservedTokensListValInPercentageUnit(address addr) constant returns (uint inPercentageUnit) {\n', '        return reservedTokensList[addr].inPercentageUnit;\n', '    }\n', '\n', '    function getReservedTokensListValInPercentageDecimals(address addr) constant returns (uint inPercentageDecimals) {\n', '        return reservedTokensList[addr].inPercentageDecimals;\n', '    }\n', '\n', '    function setReservedTokensListMultiple(address[] addrs, uint[] inTokens, uint[] inPercentageUnit, uint[] inPercentageDecimals) onlyOwner {\n', '        for (uint iterator = 0; iterator < addrs.length; iterator++) {\n', '            setReservedTokensList(addrs[iterator], inTokens[iterator], inPercentageUnit[iterator], inPercentageDecimals[iterator]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Create new tokens and allocate them to an address..\n', '     *\n', '     * Only callably by a crowdsale contract (mint agent).\n', '     */\n', '    function mint(address receiver, uint amount) onlyMintAgent canMint public {\n', '        totalSupply = totalSupply.plus(amount);\n', '        balances[receiver] = balances[receiver].plus(amount);\n', '\n', '        // This will make the mint transaction apper in EtherScan.io\n', '        // We can remove this after there is a standardized minting event\n', '        Transfer(0, receiver, amount);\n', '    }\n', '\n', '    /**\n', '     * Owner can allow a crowdsale contract to mint new tokens.\n', '     */\n', '    function setMintAgent(address addr, bool state) onlyOwner canMint public {\n', '        mintAgents[addr] = state;\n', '        MintingAgentChanged(addr, state);\n', '    }\n', '\n', '    modifier onlyMintAgent() {\n', '        // Only crowdsale contracts are allowed to mint new tokens\n', '        if(!mintAgents[msg.sender]) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '    /** Make sure we are not done yet. */\n', '    modifier canMint() {\n', '        if(mintingFinished) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '}\n', '/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' */\n', '\n', '\n', '\n', '/**\n', ' * Define interface for releasing the token transfer after a successful crowdsale.\n', ' */\n', 'contract ReleasableToken is ERC20, Ownable {\n', '\n', '    /* The finalizer contract that allows unlift the transfer limits on this token */\n', '    address public releaseAgent;\n', '\n', '    /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\n', '    bool public released = false;\n', '\n', '    /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\n', '    mapping (address => bool) public transferAgents;\n', '\n', '    /**\n', '     * Limit token transfer until the crowdsale is over.\n', '     *\n', '     */\n', '    modifier canTransfer(address _sender) {\n', '\n', '        if(!released) {\n', '            if(!transferAgents[_sender]) {\n', '                revert();\n', '            }\n', '        }\n', '\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Set the contract that can call release and make the token transferable.\n', '     *\n', '     * Design choice. Allow reset the release agent to fix fat finger mistakes.\n', '     */\n', '    function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n', '\n', "        // We don't do interface check here as we might want to a normal wallet address to act as a release agent\n", '        releaseAgent = addr;\n', '    }\n', '\n', '    /**\n', '     * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\n', '     */\n', '    function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\n', '        transferAgents[addr] = state;\n', '    }\n', '\n', '    /**\n', '     * One way function to release the tokens to the wild.\n', '     *\n', '     * Can be called only from the release agent that is the final ICO contract. It is only called if the crowdsale has been success (first milestone reached).\n', '     */\n', '    function releaseTokenTransfer() public onlyReleaseAgent {\n', '        released = true;\n', '    }\n', '\n', '    /** The function can be called only before or after the tokens have been releasesd */\n', '    modifier inReleaseState(bool releaseState) {\n', '        if(releaseState != released) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '    /** The function can be called only by a whitelisted release agent. */\n', '    modifier onlyReleaseAgent() {\n', '        if(msg.sender != releaseAgent) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '    function transfer(address _to, uint _value) canTransfer(msg.sender) returns (bool success) {\n', '        // Call StandardToken.transfer()\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) canTransfer(_from) returns (bool success) {\n', '        // Call StandardToken.transferForm()\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' */\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract BurnableToken is StandardToken {\n', '\n', '    using SMathLib for uint;\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].minus(_value);\n', '        totalSupply = totalSupply.minus(_value);\n', '        Burn(burner, _value);\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * A crowdsaled token.\n', ' *\n', ' * An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\n', ' *\n', ' * - The token transfer() is disabled until the crowdsale is over\n', ' * - The token contract gives an opt-in upgrade path to a new contract\n', ' * - The same token can be part of several crowdsales through approve() mechanism\n', ' * - The token can be capped (supply set in the constructor) or uncapped (crowdsale contract can mint new tokens)\n', ' *\n', ' */\n', 'contract CrowdsaleTokenExt is ReleasableToken, MintableTokenExt, BurnableToken, UpgradeableToken {\n', '\n', '    /** Name and symbol were updated. */\n', '    event UpdatedTokenInformation(string newName, string newSymbol);\n', '\n', '    string public name;\n', '\n', '    string public symbol;\n', '\n', '    uint public decimals;\n', '\n', '    /* Minimum ammount of tokens every buyer can buy. */\n', '    uint public minCap;\n', '\n', '\n', '    /**\n', '     * Construct the token.\n', '     *\n', '     * This token must be created through a team multisig wallet, so that it is owned by that wallet.\n', '     *\n', '     * @param _name Token name\n', '     * @param _symbol Token symbol - should be all caps\n', '     * @param _initialSupply How many tokens we start with\n', '     * @param _decimals Number of decimal places\n', '     * @param _mintable Are new tokens created over the crowdsale or do we distribute only the initial supply? Note that when the token becomes transferable the minting always ends.\n', '     */\n', '    function CrowdsaleTokenExt(string _name, string _symbol, uint _initialSupply, uint _decimals, bool _mintable, uint _globalMinCap)\n', '    UpgradeableToken(msg.sender) {\n', '\n', '        // Create any address, can be transferred\n', '        // to team multisig via changeOwner(),\n', '        // also remember to call setUpgradeMaster()\n', '        owner = msg.sender;\n', '\n', '        name = _name;\n', '        symbol = _symbol;\n', '\n', '        totalSupply = _initialSupply;\n', '\n', '        decimals = _decimals;\n', '\n', '        minCap = _globalMinCap;\n', '\n', '        // Create initially all balance on the team multisig\n', '        balances[owner] = totalSupply;\n', '\n', '        if(totalSupply > 0) {\n', '            Minted(owner, totalSupply);\n', '        }\n', '\n', '        // No more new supply allowed after the token creation\n', '        if(!_mintable) {\n', '            mintingFinished = true;\n', '            if(totalSupply == 0) {\n', '                revert(); // Cannot create a token without supply and no minting\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * When token is released to be transferable, enforce no new tokens can be created.\n', '     */\n', '    function releaseTokenTransfer() public onlyReleaseAgent {\n', '        super.releaseTokenTransfer();\n', '    }\n', '\n', '    /**\n', '     * Allow upgrade agent functionality kick in only if the crowdsale was success.\n', '     */\n', '    function canUpgrade() public constant returns(bool) {\n', '        return released && super.canUpgrade();\n', '    }\n', '\n', '    /**\n', '     * Owner can update token information here.\n', '     *\n', '     * It is often useful to conceal the actual token association, until\n', '     * the token operations, like central issuance or reissuance have been completed.\n', '     *\n', '     * This function allows the token owner to rename the token after the operations\n', '     * have been completed and then point the audience to use the token contract.\n', '     */\n', '    function setTokenInformation(string _name, string _symbol) onlyOwner {\n', '        name = _name;\n', '        symbol = _symbol;\n', '\n', '        UpdatedTokenInformation(name, symbol);\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract MjtToken is CrowdsaleTokenExt {\n', '\n', '    uint public ownersProductCommissionInPerc = 5;\n', '\n', '    uint public operatorProductCommissionInPerc = 25;\n', '\n', '    event IndependentSellerJoined(address sellerWallet, uint amountOfTokens, address operatorWallet);\n', '    event OwnersProductAdded(address ownersWallet, uint amountOfTokens, address operatorWallet);\n', '    event OperatorProductCommissionChanged(uint _value);\n', '    event OwnersProductCommissionChanged(uint _value);\n', '\n', '\n', '    function setOperatorCommission(uint _value) public onlyOwner {\n', '        require(_value >= 0);\n', '        operatorProductCommissionInPerc = _value;\n', '        OperatorProductCommissionChanged(_value);\n', '    }\n', '\n', '    function setOwnersCommission(uint _value) public onlyOwner {\n', '        require(_value >= 0);\n', '        ownersProductCommissionInPerc = _value;\n', '        OwnersProductCommissionChanged(_value);\n', '    }\n', '\n', '\n', '    /**\n', '     * Method called when new seller joined the program\n', '     * To avoid value lost after division, amountOfTokens must be multiple of 100\n', '     */\n', '    function independentSellerJoined(address sellerWallet, uint amountOfTokens, address operatorWallet) public onlyOwner canMint {\n', '        require(amountOfTokens > 100);\n', '        require(sellerWallet != address(0));\n', '        require(operatorWallet != address(0));\n', '\n', '        uint operatorCommission = amountOfTokens.divides(100).times(operatorProductCommissionInPerc);\n', '        uint sellerAmount = amountOfTokens.minus(operatorCommission);\n', '\n', '        if (operatorCommission > 0) {\n', '            mint(operatorWallet, operatorCommission);\n', '        }\n', '\n', '        if (sellerAmount > 0) {\n', '            mint(sellerWallet, sellerAmount);\n', '        }\n', '        IndependentSellerJoined(sellerWallet, amountOfTokens, operatorWallet);\n', '    }\n', '\n', '\n', '    /**\n', '    * Method called when owners add their own product\n', '    * To avoid value lost after division, amountOfTokens must be multiple of 100\n', '    */\n', '    function ownersProductAdded(address ownersWallet, uint amountOfTokens, address operatorWallet) public onlyOwner canMint {\n', '        require(amountOfTokens > 100);\n', '        require(ownersWallet != address(0));\n', '        require(operatorWallet != address(0));\n', '\n', '        uint ownersComission = amountOfTokens.divides(100).times(ownersProductCommissionInPerc);\n', '        uint operatorAmount = amountOfTokens.minus(ownersComission);\n', '\n', '\n', '        if (ownersComission > 0) {\n', '            mint(ownersWallet, ownersComission);\n', '        }\n', '\n', '        if (operatorAmount > 0) {\n', '            mint(operatorWallet, operatorAmount);\n', '        }\n', '\n', '        OwnersProductAdded(ownersWallet, amountOfTokens, operatorWallet);\n', '    }\n', '\n', '    function MjtToken(string _name, string _symbol, uint _initialSupply, uint _decimals, bool _mintable, uint _globalMinCap)\n', '    CrowdsaleTokenExt(_name, _symbol, _initialSupply, _decimals, _mintable, _globalMinCap) {}\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * Finalize agent defines what happens at the end of succeseful crowdsale.\n', ' *\n', ' * - Allocate tokens for founders, bounties and community\n', ' * - Make tokens transferable\n', ' * - etc.\n', ' */\n', 'contract FinalizeAgent {\n', '\n', '    function isFinalizeAgent() public constant returns(bool) {\n', '        return true;\n', '    }\n', '\n', '    /** Return true if we can run finalizeCrowdsale() properly.\n', '     *\n', "     * This is a safety check function that doesn't allow crowdsale to begin\n", '     * unless the finalizer has been set up properly.\n', '     */\n', '    function isSane() public constant returns (bool);\n', '\n', '    /** Called once by crowdsale finalize() if the sale was success. */\n', '    function finalizeCrowdsale();\n', '\n', '}\n', '\n', '/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' */\n', '\n', '\n', '/**\n', ' * Interface for defining crowdsale pricing.\n', ' */\n', 'contract PricingStrategy {\n', '\n', '    /** Interface declaration. */\n', '    function isPricingStrategy() public constant returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    /** Self check if all references are correctly set.\n', '     *\n', '     * Checks that pricing strategy matches crowdsale parameters.\n', '     */\n', '    function isSane(address crowdsale) public constant returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Pricing tells if this is a presale purchase or not.\n', '       @param purchaser Address of the purchaser\n', '       @return False by default, true if a presale purchaser\n', '     */\n', '    function isPresalePurchase(address purchaser) public constant returns (bool) {\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * When somebody tries to buy tokens for X eth, calculate how many tokens they get.\n', '     *\n', '     *\n', '     * @param value - What is the value of the transaction send in as wei\n', '     * @param tokensSold - how much tokens have been sold this far\n', '     * @param weiRaised - how much money has been raised this far in the main token sale - this number excludes presale\n', '     * @param msgSender - who is the investor of this transaction\n', '     * @param decimals - how many decimal units the token has\n', '     * @return Amount of tokens the investor receives\n', '     */\n', '    function calculatePrice(uint value, uint weiRaised, uint tokensSold, address msgSender, uint decimals) public constant returns (uint tokenAmount);\n', '}\n', '\n', '\n', '\n', '/// @dev Time milestone based pricing with special support for pre-ico deals.\n', 'contract MilestonePricing is PricingStrategy, Ownable {\n', '\n', '    using SMathLib for uint;\n', '\n', '    uint public constant MAX_MILESTONE = 10;\n', '\n', '    // This contains all pre-ICO addresses, and their prices (weis per token)\n', '    mapping (address => uint) public preicoAddresses;\n', '\n', '    /**\n', '    * Define pricing schedule using milestones.\n', '    */\n', '    struct Milestone {\n', '\n', '        // UNIX timestamp when this milestone kicks in\n', '        uint time;\n', '\n', '        // How many tokens per satoshi you will get after this milestone has been passed\n', '        uint price;\n', '    }\n', '\n', '    // Store milestones in a fixed array, so that it can be seen in a blockchain explorer\n', '    // Milestone 0 is always (0, 0)\n', '    // (TODO: change this when we confirm dynamic arrays are explorable)\n', '    Milestone[10] public milestones;\n', '\n', '    // How many active milestones we have\n', '    uint public milestoneCount;\n', '\n', '    /// @dev Contruction, creating a list of milestones\n', '    /// @param _milestones uint[] milestones Pairs of (time, price)\n', '    function MilestonePricing(uint[] _milestones) {\n', '        // Need to have tuples, length check\n', '        if(_milestones.length % 2 == 1 || _milestones.length >= MAX_MILESTONE*2) {\n', '            throw;\n', '        }\n', '\n', '        milestoneCount = _milestones.length / 2;\n', '\n', '        uint lastTimestamp = 0;\n', '\n', '        for(uint i=0; i<_milestones.length/2; i++) {\n', '            milestones[i].time = _milestones[i*2];\n', '            milestones[i].price = _milestones[i*2+1];\n', '\n', '            // No invalid steps\n', '            if((lastTimestamp != 0) && (milestones[i].time <= lastTimestamp)) {\n', '                throw;\n', '            }\n', '\n', '            lastTimestamp = milestones[i].time;\n', '        }\n', '\n', '        // Last milestone price must be zero, terminating the crowdale\n', '        if(milestones[milestoneCount-1].price != 0) {\n', '            throw;\n', '        }\n', '    }\n', '\n', '    /// @dev This is invoked once for every pre-ICO address, set pricePerToken\n', '    ///      to 0 to disable\n', '    /// @param preicoAddress PresaleFundCollector address\n', '    /// @param pricePerToken How many weis one token cost for pre-ico investors\n', '    function setPreicoAddress(address preicoAddress, uint pricePerToken)\n', '    public\n', '    onlyOwner\n', '    {\n', '        preicoAddresses[preicoAddress] = pricePerToken;\n', '    }\n', '\n', '    /// @dev Iterate through milestones. You reach end of milestones when price = 0\n', '    /// @return tuple (time, price)\n', '    function getMilestone(uint n) public constant returns (uint, uint) {\n', '        return (milestones[n].time, milestones[n].price);\n', '    }\n', '\n', '    function getFirstMilestone() private constant returns (Milestone) {\n', '        return milestones[0];\n', '    }\n', '\n', '    function getLastMilestone() private constant returns (Milestone) {\n', '        return milestones[milestoneCount-1];\n', '    }\n', '\n', '    function getPricingStartsAt() public constant returns (uint) {\n', '        return getFirstMilestone().time;\n', '    }\n', '\n', '    function getPricingEndsAt() public constant returns (uint) {\n', '        return getLastMilestone().time;\n', '    }\n', '\n', '    function isSane(address _crowdsale) public constant returns(bool) {\n', '        CrowdsaleExt crowdsale = CrowdsaleExt(_crowdsale);\n', '        return crowdsale.startsAt() == getPricingStartsAt() && crowdsale.endsAt() == getPricingEndsAt();\n', '    }\n', '\n', '    /// @dev Get the current milestone or bail out if we are not in the milestone periods.\n', '    /// @return {[type]} [description]\n', '    function getCurrentMilestone() private constant returns (Milestone) {\n', '        uint i;\n', '\n', '        for(i=0; i<milestones.length; i++) {\n', '            if(now < milestones[i].time) {\n', '                return milestones[i-1];\n', '            }\n', '        }\n', '    }\n', '\n', '    /// @dev Get the current price.\n', '    /// @return The current price or 0 if we are outside milestone period\n', '    function getCurrentPrice() public constant returns (uint result) {\n', '        return getCurrentMilestone().price;\n', '    }\n', '\n', '    /// @dev Calculate the current price for buy in amount.\n', '    function calculatePrice(uint value, uint weiRaised, uint tokensSold, address msgSender, uint decimals) public constant returns (uint) {\n', '\n', '        uint multiplier = 10 ** decimals;\n', '\n', '        // This investor is coming through pre-ico\n', '        if(preicoAddresses[msgSender] > 0) {\n', '            return value.times(multiplier) / preicoAddresses[msgSender];\n', '        }\n', '\n', '        uint price = getCurrentPrice();\n', '        return value.times(multiplier) / price;\n', '    }\n', '\n', '    function isPresalePurchase(address purchaser) public constant returns (bool) {\n', '        if(preicoAddresses[purchaser] > 0)\n', '            return true;\n', '        else\n', '            return false;\n', '    }\n', '\n', '    function() payable {\n', '        throw; // No money on this contract\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * A token that defines fractional units as decimals.\n', ' */\n', 'contract FractionalERC20Ext is ERC20 {\n', '\n', '    uint public decimals;\n', '    uint public minCap;\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * Abstract base contract for token sales.\n', ' *\n', ' * Handle\n', ' * - start and end dates\n', ' * - accepting investments\n', ' * - minimum funding goal and refund\n', ' * - various statistics during the crowdfund\n', ' * - different pricing strategies\n', ' * - different investment policies (require server side customer id, allow only whitelisted addresses)\n', ' *\n', ' */\n', 'contract CrowdsaleExt is Haltable {\n', '\n', '    /* Max investment count when we are still allowed to change the multisig address */\n', '    uint public MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE = 5;\n', '\n', '    using SMathLib for uint;\n', '\n', '    /* The token we are selling */\n', '    FractionalERC20Ext public token;\n', '\n', '    /* How we are going to price our offering */\n', '    MilestonePricing public pricingStrategy;\n', '\n', '    /* Post-success callback */\n', '    FinalizeAgent public finalizeAgent;\n', '\n', '    /* tokens will be transfered from this address */\n', '    address public multisigWallet;\n', '\n', '    /* if the funding goal is not reached, investors may withdraw their funds */\n', '    uint public minimumFundingGoal;\n', '\n', '    /* the UNIX timestamp start date of the crowdsale */\n', '    uint public startsAt;\n', '\n', '    /* the UNIX timestamp end date of the crowdsale */\n', '    uint public endsAt;\n', '\n', '    /* the number of tokens already sold through this contract*/\n', '    uint public tokensSold = 0;\n', '\n', '    /* How many wei of funding we have raised */\n', '    uint public weiRaised = 0;\n', '\n', '    /* Calculate incoming funds from presale contracts and addresses */\n', '    uint public presaleWeiRaised = 0;\n', '\n', '    /* How many distinct addresses have invested */\n', '    uint public investorCount = 0;\n', '\n', '    /* How much wei we have returned back to the contract after a failed crowdfund. */\n', '    uint public loadedRefund = 0;\n', '\n', '    /* How much wei we have given back to investors.*/\n', '    uint public weiRefunded = 0;\n', '\n', '    /* Has this crowdsale been finalized */\n', '    bool public finalized;\n', '\n', '    /* Do we need to have unique contributor id for each customer */\n', '    bool public requireCustomerId;\n', '\n', '    bool public isWhiteListed;\n', '\n', '    address[] public joinedCrowdsales;\n', '    uint public joinedCrowdsalesLen = 0;\n', '\n', '    address public lastCrowdsale;\n', '\n', '    /**\n', '      * Do we verify that contributor has been cleared on the server side (accredited investors only).\n', '      * This method was first used in FirstBlood crowdsale to ensure all contributors have accepted terms on sale (on the web).\n', '      */\n', '    bool public requiredSignedAddress;\n', '\n', '    /* Server side address that signed allowed contributors (Ethereum addresses) that can participate the crowdsale */\n', '    address public signerAddress;\n', '\n', '    /** How much ETH each address has invested to this crowdsale */\n', '    mapping (address => uint256) public investedAmountOf;\n', '\n', '    /** How much tokens this crowdsale has credited for each investor address */\n', '    mapping (address => uint256) public tokenAmountOf;\n', '\n', '    struct WhiteListData {\n', '        bool status;\n', '        uint minCap;\n', '        uint maxCap;\n', '    }\n', '\n', '    //is crowdsale updatable\n', '    bool public isUpdatable;\n', '\n', '    /** Addresses that are allowed to invest even before ICO offical opens. For testing, for ICO partners, etc. */\n', '    mapping (address => WhiteListData) public earlyParticipantWhitelist;\n', '\n', '    /** This is for manul testing for the interaction from owner wallet. You can set it to any value and inspect this in blockchain explorer to see that crowdsale interaction works. */\n', '    uint public ownerTestValue;\n', '\n', '    /** State machine\n', '     *\n', '     * - Preparing: All contract initialization calls and variables have not been set yet\n', '     * - Prefunding: We have not passed start time yet\n', '     * - Funding: Active crowdsale\n', '     * - Success: Minimum funding goal reached\n', '     * - Failure: Minimum funding goal not reached before ending time\n', '     * - Finalized: The finalized has been called and succesfully executed\n', '     * - Refunding: Refunds are loaded on the contract for reclaim.\n', '     */\n', '    enum State{Unknown, Preparing, PreFunding, Funding, Success, Failure, Finalized, Refunding}\n', '\n', '    // A new investment was made\n', '    event Invested(address investor, uint weiAmount, uint tokenAmount, uint128 customerId);\n', '\n', '    // Refund was processed for a contributor\n', '    event Refund(address investor, uint weiAmount);\n', '\n', '    // The rules were changed what kind of investments we accept\n', '    event InvestmentPolicyChanged(bool newRequireCustomerId, bool newRequiredSignedAddress, address newSignerAddress);\n', '\n', '    // Address early participation whitelist status changed\n', '    event Whitelisted(address addr, bool status);\n', '\n', '    // Crowdsale start time has been changed\n', '    event StartsAtChanged(uint newStartsAt);\n', '\n', '    // Crowdsale end time has been changed\n', '    event EndsAtChanged(uint newEndsAt);\n', '\n', '    function CrowdsaleExt(address _token, MilestonePricing _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal, bool _isUpdatable, bool _isWhiteListed) {\n', '\n', '        owner = msg.sender;\n', '\n', '        token = FractionalERC20Ext(_token);\n', '\n', '        setPricingStrategy(_pricingStrategy);\n', '\n', '        multisigWallet = _multisigWallet;\n', '        if(multisigWallet == 0) {\n', '            throw;\n', '        }\n', '\n', '        if(_start == 0) {\n', '            throw;\n', '        }\n', '\n', '        startsAt = _start;\n', '\n', '        if(_end == 0) {\n', '            throw;\n', '        }\n', '\n', '        endsAt = _end;\n', '\n', "        // Don't mess the dates\n", '        if(startsAt >= endsAt) {\n', '            throw;\n', '        }\n', '\n', '        // Minimum funding goal can be zero\n', '        minimumFundingGoal = _minimumFundingGoal;\n', '\n', '        isUpdatable = _isUpdatable;\n', '\n', '        isWhiteListed = _isWhiteListed;\n', '    }\n', '\n', '    /**\n', "     * Don't expect to just send in money and get tokens.\n", '     */\n', '    function() payable {\n', '        throw;\n', '    }\n', '\n', '    /**\n', '     * Make an investment.\n', '     *\n', '     * Crowdsale must be running for one to invest.\n', '     * We must have not pressed the emergency brake.\n', '     *\n', '     * @param receiver The Ethereum address who receives the tokens\n', '     * @param customerId (optional) UUID v4 to track the successful payments on the server side\n', '     *\n', '     */\n', '    function investInternal(address receiver, uint128 customerId) stopInEmergency private {\n', '\n', "        // Determine if it's a good time to accept investment from this participant\n", '        if(getState() == State.PreFunding) {\n', '            // Are we whitelisted for early deposit\n', '            throw;\n', '        } else if(getState() == State.Funding) {\n', '            // Retail participants can only come in when the crowdsale is running\n', '            // pass\n', '            if(isWhiteListed) {\n', '                if(!earlyParticipantWhitelist[receiver].status) {\n', '                    throw;\n', '                }\n', '            }\n', '        } else {\n', '            // Unwanted state\n', '            throw;\n', '        }\n', '\n', '        uint weiAmount = msg.value;\n', '\n', '        // Account presale sales separately, so that they do not count against pricing tranches\n', '        uint tokenAmount = pricingStrategy.calculatePrice(weiAmount, weiRaised - presaleWeiRaised, tokensSold, msg.sender, token.decimals());\n', '\n', '        if(tokenAmount == 0) {\n', '            // Dust transaction\n', '            throw;\n', '        }\n', '\n', '        if(isWhiteListed) {\n', '            if(tokenAmount < earlyParticipantWhitelist[receiver].minCap && tokenAmountOf[receiver] == 0) {\n', '                // tokenAmount < minCap for investor\n', '                throw;\n', '            }\n', '            if(tokenAmount > earlyParticipantWhitelist[receiver].maxCap) {\n', '                // tokenAmount > maxCap for investor\n', '                throw;\n', '            }\n', '\n', "            // Check that we did not bust the investor's cap\n", '            if (isBreakingInvestorCap(receiver, tokenAmount)) {\n', '                throw;\n', '            }\n', '        } else {\n', '            if(tokenAmount < token.minCap() && tokenAmountOf[receiver] == 0) {\n', '                throw;\n', '            }\n', '        }\n', '\n', '        if(investedAmountOf[receiver] == 0) {\n', '            // A new investor\n', '            investorCount++;\n', '        }\n', '\n', '        // Update investor\n', '        investedAmountOf[receiver] = investedAmountOf[receiver].plus(weiAmount);\n', '        tokenAmountOf[receiver] = tokenAmountOf[receiver].plus(tokenAmount);\n', '\n', '        // Update totals\n', '        weiRaised = weiRaised.plus(weiAmount);\n', '        tokensSold = tokensSold.plus(tokenAmount);\n', '\n', '        if(pricingStrategy.isPresalePurchase(receiver)) {\n', '            presaleWeiRaised = presaleWeiRaised.plus(weiAmount);\n', '        }\n', '\n', '        // Check that we did not bust the cap\n', '        if(isBreakingCap(weiAmount, tokenAmount, weiRaised, tokensSold)) {\n', '            throw;\n', '        }\n', '\n', '        assignTokens(receiver, tokenAmount);\n', '\n', '        // Pocket the money\n', '        if(!multisigWallet.send(weiAmount)) throw;\n', '\n', '        if (isWhiteListed) {\n', '            uint num = 0;\n', '            for (var i = 0; i < joinedCrowdsalesLen; i++) {\n', '                if (this == joinedCrowdsales[i])\n', '                    num = i;\n', '            }\n', '\n', '            if (num + 1 < joinedCrowdsalesLen) {\n', '                for (var j = num + 1; j < joinedCrowdsalesLen; j++) {\n', '                    CrowdsaleExt crowdsale = CrowdsaleExt(joinedCrowdsales[j]);\n', '                    crowdsale.updateEarlyParicipantWhitelist(msg.sender, this, tokenAmount);\n', '                }\n', '            }\n', '        }\n', '\n', '        // Tell us invest was success\n', '        Invested(receiver, weiAmount, tokenAmount, customerId);\n', '    }\n', '\n', '    /**\n', '     * Preallocate tokens for the early investors.\n', '     *\n', '     * Preallocated tokens have been sold before the actual crowdsale opens.\n', '     * This function mints the tokens and moves the crowdsale needle.\n', '     *\n', '     * Investor count is not handled; it is assumed this goes for multiple investors\n', '     * and the token distribution happens outside the smart contract flow.\n', '     *\n', '     * No money is exchanged, as the crowdsale team already have received the payment.\n', '     *\n', '     * @param fullTokens tokens as full tokens - decimal places added internally\n', '     * @param weiPrice Price of a single full token in wei\n', '     *\n', '     */\n', '    function preallocate(address receiver, uint fullTokens, uint weiPrice) public onlyOwner {\n', '\n', '        uint tokenAmount = fullTokens * 10**token.decimals();\n', '        uint weiAmount = weiPrice * fullTokens; // This can be also 0, we give out tokens for free\n', '\n', '        weiRaised = weiRaised.plus(weiAmount);\n', '        tokensSold = tokensSold.plus(tokenAmount);\n', '\n', '        investedAmountOf[receiver] = investedAmountOf[receiver].plus(weiAmount);\n', '        tokenAmountOf[receiver] = tokenAmountOf[receiver].plus(tokenAmount);\n', '\n', '        assignTokens(receiver, tokenAmount);\n', '\n', '        // Tell us invest was success\n', '        Invested(receiver, weiAmount, tokenAmount, 0);\n', '    }\n', '\n', '    /**\n', '     * Allow anonymous contributions to this crowdsale.\n', '     */\n', '    function investWithSignedAddress(address addr, uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable {\n', '        bytes32 hash = sha256(addr);\n', '        if (ecrecover(hash, v, r, s) != signerAddress) throw;\n', '        if(customerId == 0) throw;  // UUIDv4 sanity check\n', '        investInternal(addr, customerId);\n', '    }\n', '\n', '    /**\n', '     * Track who is the customer making the payment so we can send thank you email.\n', '     */\n', '    function investWithCustomerId(address addr, uint128 customerId) public payable {\n', '        if(requiredSignedAddress) throw; // Crowdsale allows only server-side signed participants\n', '        if(customerId == 0) throw;  // UUIDv4 sanity check\n', '        investInternal(addr, customerId);\n', '    }\n', '\n', '    /**\n', '     * Allow anonymous contributions to this crowdsale.\n', '     */\n', '    function invest(address addr) public payable {\n', '        if(requireCustomerId) throw; // Crowdsale needs to track participants for thank you email\n', '        if(requiredSignedAddress) throw; // Crowdsale allows only server-side signed participants\n', '        investInternal(addr, 0);\n', '    }\n', '\n', '    /**\n', '     * Invest to tokens, recognize the payer and clear his address.\n', '     *\n', '     */\n', '    function buyWithSignedAddress(uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable {\n', '        investWithSignedAddress(msg.sender, customerId, v, r, s);\n', '    }\n', '\n', '    /**\n', '     * Invest to tokens, recognize the payer.\n', '     *\n', '     */\n', '    function buyWithCustomerId(uint128 customerId) public payable {\n', '        investWithCustomerId(msg.sender, customerId);\n', '    }\n', '\n', '    /**\n', '     * The basic entry point to participate the crowdsale process.\n', '     *\n', '     * Pay for funding, get invested tokens back in the sender address.\n', '     */\n', '    function buy() public payable {\n', '        invest(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * Finalize a succcesful crowdsale.\n', '     *\n', '     * The owner can triggre a call the contract that provides post-crowdsale actions, like releasing the tokens.\n', '     */\n', '    function finalize() public inState(State.Success) onlyOwner stopInEmergency {\n', '\n', '        // Already finalized\n', '        if(finalized) {\n', '            throw;\n', '        }\n', '\n', '        // Finalizing is optional. We only call it if we are given a finalizing agent.\n', '        if(address(finalizeAgent) != 0) {\n', '            finalizeAgent.finalizeCrowdsale();\n', '        }\n', '\n', '        finalized = true;\n', '    }\n', '\n', '    /**\n', '     * Allow to (re)set finalize agent.\n', '     *\n', '     * Design choice: no state restrictions on setting this, so that we can fix fat finger mistakes.\n', '     */\n', '    function setFinalizeAgent(FinalizeAgent addr) onlyOwner {\n', '        finalizeAgent = addr;\n', '\n', "        // Don't allow setting bad agent\n", '        if(!finalizeAgent.isFinalizeAgent()) {\n', '            throw;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Set policy do we need to have server-side customer ids for the investments.\n', '     *\n', '     */\n', '    function setRequireCustomerId(bool value) onlyOwner {\n', '        requireCustomerId = value;\n', '        InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\n', '    }\n', '\n', '    /**\n', '     * Set policy if all investors must be cleared on the server side first.\n', '     *\n', '     * This is e.g. for the accredited investor clearing.\n', '     *\n', '     */\n', '    function setRequireSignedAddress(bool value, address _signerAddress) onlyOwner {\n', '        requiredSignedAddress = value;\n', '        signerAddress = _signerAddress;\n', '        InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\n', '    }\n', '\n', '    /**\n', '     * Allow addresses to do early participation.\n', '     *\n', '     * TODO: Fix spelling error in the name\n', '     */\n', '    function setEarlyParicipantWhitelist(address addr, bool status, uint minCap, uint maxCap) onlyOwner {\n', '        if (!isWhiteListed) throw;\n', '        earlyParticipantWhitelist[addr] = WhiteListData({status:status, minCap:minCap, maxCap:maxCap});\n', '        Whitelisted(addr, status);\n', '    }\n', '\n', '    function setEarlyParicipantsWhitelist(address[] addrs, bool[] statuses, uint[] minCaps, uint[] maxCaps) onlyOwner {\n', '        if (!isWhiteListed) throw;\n', '        for (uint iterator = 0; iterator < addrs.length; iterator++) {\n', '            setEarlyParicipantWhitelist(addrs[iterator], statuses[iterator], minCaps[iterator], maxCaps[iterator]);\n', '        }\n', '    }\n', '\n', '    function updateEarlyParicipantWhitelist(address addr, address contractAddr, uint tokensBought) {\n', '        if (tokensBought < earlyParticipantWhitelist[addr].minCap) throw;\n', '        if (!isWhiteListed) throw;\n', '        if (addr != msg.sender && contractAddr != msg.sender) throw;\n', '        uint newMaxCap = earlyParticipantWhitelist[addr].maxCap;\n', '        newMaxCap = newMaxCap.minus(tokensBought);\n', '        earlyParticipantWhitelist[addr] = WhiteListData({status:earlyParticipantWhitelist[addr].status, minCap:0, maxCap:newMaxCap});\n', '    }\n', '\n', '    function updateJoinedCrowdsales(address addr) onlyOwner {\n', '        joinedCrowdsales[joinedCrowdsalesLen++] = addr;\n', '    }\n', '\n', '    function setLastCrowdsale(address addr) onlyOwner {\n', '        lastCrowdsale = addr;\n', '    }\n', '\n', '    function clearJoinedCrowdsales() onlyOwner {\n', '        joinedCrowdsalesLen = 0;\n', '    }\n', '\n', '    function updateJoinedCrowdsalesMultiple(address[] addrs) onlyOwner {\n', '        clearJoinedCrowdsales();\n', '        for (uint iter = 0; iter < addrs.length; iter++) {\n', '            if(joinedCrowdsalesLen == joinedCrowdsales.length) {\n', '                joinedCrowdsales.length += 1;\n', '            }\n', '            joinedCrowdsales[joinedCrowdsalesLen++] = addrs[iter];\n', '            if (iter == addrs.length - 1)\n', '                setLastCrowdsale(addrs[iter]);\n', '        }\n', '    }\n', '\n', '    function setStartsAt(uint time) onlyOwner {\n', '        if (finalized) throw;\n', '\n', '        if (!isUpdatable) throw;\n', '\n', '        if(now > time) {\n', "            throw; // Don't change past\n", '        }\n', '\n', '        if(time > endsAt) {\n', '            throw;\n', '        }\n', '\n', '        CrowdsaleExt lastCrowdsaleCntrct = CrowdsaleExt(lastCrowdsale);\n', '        if (lastCrowdsaleCntrct.finalized()) throw;\n', '\n', '        startsAt = time;\n', '        StartsAtChanged(startsAt);\n', '    }\n', '\n', '    /**\n', '     * Allow crowdsale owner to close early or extend the crowdsale.\n', '     *\n', '     * This is useful e.g. for a manual soft cap implementation:\n', '     * - after X amount is reached determine manual closing\n', '     *\n', '     * This may put the crowdsale to an invalid state,\n', '     * but we trust owners know what they are doing.\n', '     *\n', '     */\n', '    function setEndsAt(uint time) onlyOwner {\n', '        if (finalized) throw;\n', '\n', '        if (!isUpdatable) throw;\n', '\n', '        if(now > time) {\n', "            throw; // Don't change past\n", '        }\n', '\n', '        if(startsAt > time) {\n', '            throw;\n', '        }\n', '\n', '        CrowdsaleExt lastCrowdsaleCntrct = CrowdsaleExt(lastCrowdsale);\n', '        if (lastCrowdsaleCntrct.finalized()) throw;\n', '\n', '        uint num = 0;\n', '        for (var i = 0; i < joinedCrowdsalesLen; i++) {\n', '            if (this == joinedCrowdsales[i])\n', '                num = i;\n', '        }\n', '\n', '        if (num + 1 < joinedCrowdsalesLen) {\n', '            for (var j = num + 1; j < joinedCrowdsalesLen; j++) {\n', '                CrowdsaleExt crowdsale = CrowdsaleExt(joinedCrowdsales[j]);\n', '                if (time > crowdsale.startsAt()) throw;\n', '            }\n', '        }\n', '\n', '        endsAt = time;\n', '        EndsAtChanged(endsAt);\n', '    }\n', '\n', '    /**\n', '     * Allow to (re)set pricing strategy.\n', '     *\n', '     * Design choice: no state restrictions on the set, so that we can fix fat finger mistakes.\n', '     */\n', '    function setPricingStrategy(MilestonePricing _pricingStrategy) onlyOwner {\n', '        pricingStrategy = _pricingStrategy;\n', '\n', "        // Don't allow setting bad agent\n", '        if(!pricingStrategy.isPricingStrategy()) {\n', '            throw;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Allow to change the team multisig address in the case of emergency.\n', '     *\n', '     * This allows to save a deployed crowdsale wallet in the case the crowdsale has not yet begun\n', '     * (we have done only few test transactions). After the crowdsale is going\n', '     * then multisig address stays locked for the safety reasons.\n', '     */\n', '    function setMultisig(address addr) public onlyOwner {\n', '\n', '        // Change\n', '        if(investorCount > MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE) {\n', '            throw;\n', '        }\n', '\n', '        multisigWallet = addr;\n', '    }\n', '\n', '    /**\n', '     * Allow load refunds back on the contract for the refunding.\n', '     *\n', '     * The team can transfer the funds back on the smart contract in the case the minimum goal was not reached..\n', '     */\n', '    function loadRefund() public payable inState(State.Failure) {\n', '        if(msg.value == 0) throw;\n', '        loadedRefund = loadedRefund.plus(msg.value);\n', '    }\n', '\n', '    /**\n', '     * Investors can claim refund.\n', '     *\n', '     * Note that any refunds from proxy buyers should be handled separately,\n', '     * and not through this contract.\n', '     */\n', '    function refund() public inState(State.Refunding) {\n', '        uint256 weiValue = investedAmountOf[msg.sender];\n', '        if (weiValue == 0) throw;\n', '        investedAmountOf[msg.sender] = 0;\n', '        weiRefunded = weiRefunded.plus(weiValue);\n', '        Refund(msg.sender, weiValue);\n', '        if (!msg.sender.send(weiValue)) throw;\n', '    }\n', '\n', '    /**\n', '     * @return true if the crowdsale has raised enough money to be a successful.\n', '     */\n', '    function isMinimumGoalReached() public constant returns (bool reached) {\n', '        return weiRaised >= minimumFundingGoal;\n', '    }\n', '\n', '    /**\n', '     * Check if the contract relationship looks good.\n', '     */\n', '    function isFinalizerSane() public constant returns (bool sane) {\n', '        return finalizeAgent.isSane();\n', '    }\n', '\n', '    /**\n', '     * Check if the contract relationship looks good.\n', '     */\n', '    function isPricingSane() public constant returns (bool sane) {\n', '        return pricingStrategy.isSane(address(this));\n', '    }\n', '\n', '    /**\n', '     * Crowdfund state machine management.\n', '     *\n', '     * We make it a function and do not assign the result to a variable, so there is no chance of the variable being stale.\n', '     */\n', '    function getState() public constant returns (State) {\n', '        if(finalized) return State.Finalized;\n', '        else if (address(finalizeAgent) == 0) return State.Preparing;\n', '        else if (!finalizeAgent.isSane()) return State.Preparing;\n', '        else if (!pricingStrategy.isSane(address(this))) return State.Preparing;\n', '        else if (block.timestamp < startsAt) return State.PreFunding;\n', '        else if (block.timestamp <= endsAt && !isCrowdsaleFull()) return State.Funding;\n', '        else if (isMinimumGoalReached()) return State.Success;\n', '        else if (!isMinimumGoalReached() && weiRaised > 0 && loadedRefund >= weiRaised) return State.Refunding;\n', '        else return State.Failure;\n', '    }\n', '\n', '    /** This is for manual testing of multisig wallet interaction */\n', '    function setOwnerTestValue(uint val) onlyOwner {\n', '        ownerTestValue = val;\n', '    }\n', '\n', '    /** Interface marker. */\n', '    function isCrowdsale() public constant returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    //\n', '    // Modifiers\n', '    //\n', '\n', '    /** Modified allowing execution only if the crowdsale is currently running.  */\n', '    modifier inState(State state) {\n', '        if(getState() != state) throw;\n', '        _;\n', '    }\n', '\n', '\n', '    //\n', '    // Abstract functions\n', '    //\n', '\n', '    /**\n', '     * Check if the current invested breaks our cap rules.\n', '     *\n', '     *\n', '     * The child contract must define their own cap setting rules.\n', '     * We allow a lot of flexibility through different capping strategies (ETH, token count)\n', '     * Called from invest().\n', '     *\n', '     * @param weiAmount The amount of wei the investor tries to invest in the current transaction\n', '     * @param tokenAmount The amount of tokens we try to give to the investor in the current transaction\n', '     * @param weiRaisedTotal What would be our total raised balance after this transaction\n', '     * @param tokensSoldTotal What would be our total sold tokens count after this transaction\n', '     *\n', '     * @return true if taking this investment would break our cap rules\n', '     */\n', '    function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) constant returns (bool limitBroken);\n', '\n', '    function isBreakingInvestorCap(address receiver, uint tokenAmount) constant returns (bool limitBroken);\n', '\n', '    /**\n', '     * Check if the current crowdsale is full and we can no longer sell any tokens.\n', '     */\n', '    function isCrowdsaleFull() public constant returns (bool);\n', '\n', '    /**\n', '     * Create new tokens or transfer issued tokens to the investor depending on the cap model.\n', '     */\n', '    function assignTokens(address receiver, uint tokenAmount) private;\n', '}\n', '\n', '\n', '/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' */\n', '\n', '\n', 'contract MintedTokenCappedCrowdsaleExt is CrowdsaleExt {\n', '\n', '    /* Maximum amount of tokens this crowdsale can sell. */\n', '    uint public maximumSellableTokens;\n', '\n', '    function MintedTokenCappedCrowdsaleExt(address _token, MilestonePricing _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal, uint _maximumSellableTokens, bool _isUpdatable, bool _isWhiteListed) CrowdsaleExt(_token, _pricingStrategy, _multisigWallet, _start, _end, _minimumFundingGoal, _isUpdatable, _isWhiteListed) {\n', '        maximumSellableTokens = _maximumSellableTokens;\n', '    }\n', '\n', '    // Crowdsale maximumSellableTokens has been changed\n', '    event MaximumSellableTokensChanged(uint newMaximumSellableTokens);\n', '\n', '    /**\n', '     * Called from invest() to confirm if the curret investment does not break our cap rule.\n', '     */\n', '    function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) constant returns (bool limitBroken) {\n', '        return tokensSoldTotal > maximumSellableTokens;\n', '    }\n', '\n', '    function isBreakingInvestorCap(address addr, uint tokenAmount) constant returns (bool limitBroken) {\n', '        if (!isWhiteListed) throw;\n', '        uint maxCap = earlyParticipantWhitelist[addr].maxCap;\n', '        return (tokenAmountOf[addr].plus(tokenAmount)) > maxCap;\n', '    }\n', '\n', '    function isCrowdsaleFull() public constant returns (bool) {\n', '        return tokensSold >= maximumSellableTokens;\n', '    }\n', '\n', '    /**\n', '     * Dynamically create tokens and assign them to the investor.\n', '     */\n', '    function assignTokens(address receiver, uint tokenAmount) private {\n', '        CrowdsaleTokenExt mintableToken = CrowdsaleTokenExt(token);\n', '        mintableToken.mint(receiver, tokenAmount);\n', '    }\n', '\n', '    function setMaximumSellableTokens(uint tokens) onlyOwner {\n', '        if (finalized) throw;\n', '\n', '        if (!isUpdatable) throw;\n', '\n', '        CrowdsaleExt lastCrowdsaleCntrct = CrowdsaleExt(lastCrowdsale);\n', '        if (lastCrowdsaleCntrct.finalized()) throw;\n', '\n', '        maximumSellableTokens = tokens;\n', '        MaximumSellableTokensChanged(maximumSellableTokens);\n', '    }\n', '}\n', '\n', '/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' */\n', '\n', '\n', '\n', '/**\n', ' * Safe unsigned safe math.\n', ' *\n', ' * https://blog.aragon.one/library-driven-development-in-solidity-2bebcaf88736#.750gwtwli\n', ' *\n', ' * Originally from https://raw.githubusercontent.com/AragonOne/zeppelin-solidity/master/contracts/SafeMathLib.sol\n', ' *\n', ' * Maintained here until merged to mainline zeppelin-solidity.\n', ' *\n', ' */\n', 'library SMathLib {\n', '\n', '    function times(uint a, uint b) returns (uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function divides(uint a, uint b) returns (uint) {\n', '        assert(b > 0);\n', '        uint c = a / b;\n', '        assert(a == b * c + a % b);\n', '        return c;\n', '    }\n', '\n', '    function minus(uint a, uint b) returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function plus(uint a, uint b) returns (uint) {\n', '        uint c = a + b;\n', '        assert(c>=a);\n', '        return c;\n', '    }\n', '\n', '}']