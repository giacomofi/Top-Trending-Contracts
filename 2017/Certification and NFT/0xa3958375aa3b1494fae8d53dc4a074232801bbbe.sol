['pragma solidity 0.4.15;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '/// note: during any ownership changes all pending operations (waiting for more signatures) are cancelled\n', '// TODO acceptOwnership\n', 'contract multiowned {\n', '\n', '\t// TYPES\n', '\n', '    // struct for the status of a pending operation.\n', '    struct MultiOwnedOperationPendingState {\n', '        // count of confirmations needed\n', '        uint yetNeeded;\n', '\n', "        // bitmap of confirmations where owner #ownerIndex's decision corresponds to 2**ownerIndex bit\n", '        uint ownersDone;\n', '\n', '        // position of this operation key in m_multiOwnedPendingIndex\n', '        uint index;\n', '    }\n', '\n', '\t// EVENTS\n', '\n', '    event Confirmation(address owner, bytes32 operation);\n', '    event Revoke(address owner, bytes32 operation);\n', '    event FinalConfirmation(address owner, bytes32 operation);\n', '\n', '    // some others are in the case of an owner changing.\n', '    event OwnerChanged(address oldOwner, address newOwner);\n', '    event OwnerAdded(address newOwner);\n', '    event OwnerRemoved(address oldOwner);\n', '\n', '    // the last one is emitted if the required signatures change\n', '    event RequirementChanged(uint newRequirement);\n', '\n', '\t// MODIFIERS\n', '\n', '    // simple single-sig function modifier.\n', '    modifier onlyowner {\n', '        require(isOwner(msg.sender));\n', '        _;\n', '    }\n', '    // multi-sig function modifier: the operation must have an intrinsic hash in order\n', '    // that later attempts can be realised as the same underlying operation and\n', '    // thus count as confirmations.\n', '    modifier onlymanyowners(bytes32 _operation) {\n', '        if (confirmAndCheck(_operation)) {\n', '            _;\n', '        }\n', "        // Even if required number of confirmations has't been collected yet,\n", "        // we can't throw here - because changes to the state have to be preserved.\n", '        // But, confirmAndCheck itself will throw in case sender is not an owner.\n', '    }\n', '\n', '    modifier validNumOwners(uint _numOwners) {\n', '        require(_numOwners > 0 && _numOwners <= c_maxOwners);\n', '        _;\n', '    }\n', '\n', '    modifier multiOwnedValidRequirement(uint _required, uint _numOwners) {\n', '        require(_required > 0 && _required <= _numOwners);\n', '        _;\n', '    }\n', '\n', '    modifier ownerExists(address _address) {\n', '        require(isOwner(_address));\n', '        _;\n', '    }\n', '\n', '    modifier ownerDoesNotExist(address _address) {\n', '        require(!isOwner(_address));\n', '        _;\n', '    }\n', '\n', '    modifier multiOwnedOperationIsActive(bytes32 _operation) {\n', '        require(isOperationActive(_operation));\n', '        _;\n', '    }\n', '\n', '\t// METHODS\n', '\n', '    // constructor is given number of sigs required to do protected "onlymanyowners" transactions\n', '    // as well as the selection of addresses capable of confirming them (msg.sender is not added to the owners!).\n', '    function multiowned(address[] _owners, uint _required)\n', '        validNumOwners(_owners.length)\n', '        multiOwnedValidRequirement(_required, _owners.length)\n', '    {\n', '        assert(c_maxOwners <= 255);\n', '\n', '        m_numOwners = _owners.length;\n', '        m_multiOwnedRequired = _required;\n', '\n', '        for (uint i = 0; i < _owners.length; ++i)\n', '        {\n', '            address owner = _owners[i];\n', '            // invalid and duplicate addresses are not allowed\n', '            require(0 != owner && !isOwner(owner) /* not isOwner yet! */);\n', '\n', '            uint currentOwnerIndex = checkOwnerIndex(i + 1 /* first slot is unused */);\n', '            m_owners[currentOwnerIndex] = owner;\n', '            m_ownerIndex[owner] = currentOwnerIndex;\n', '        }\n', '\n', '        assertOwnersAreConsistent();\n', '    }\n', '\n', '    /// @notice replaces an owner `_from` with another `_to`.\n', '    /// @param _from address of owner to replace\n', '    /// @param _to address of new owner\n', '    // All pending operations will be canceled!\n', '    function changeOwner(address _from, address _to)\n', '        external\n', '        ownerExists(_from)\n', '        ownerDoesNotExist(_to)\n', '        onlymanyowners(sha3(msg.data))\n', '    {\n', '        assertOwnersAreConsistent();\n', '\n', '        clearPending();\n', '        uint ownerIndex = checkOwnerIndex(m_ownerIndex[_from]);\n', '        m_owners[ownerIndex] = _to;\n', '        m_ownerIndex[_from] = 0;\n', '        m_ownerIndex[_to] = ownerIndex;\n', '\n', '        assertOwnersAreConsistent();\n', '        OwnerChanged(_from, _to);\n', '    }\n', '\n', '    /// @notice adds an owner\n', '    /// @param _owner address of new owner\n', '    // All pending operations will be canceled!\n', '    function addOwner(address _owner)\n', '        external\n', '        ownerDoesNotExist(_owner)\n', '        validNumOwners(m_numOwners + 1)\n', '        onlymanyowners(sha3(msg.data))\n', '    {\n', '        assertOwnersAreConsistent();\n', '\n', '        clearPending();\n', '        m_numOwners++;\n', '        m_owners[m_numOwners] = _owner;\n', '        m_ownerIndex[_owner] = checkOwnerIndex(m_numOwners);\n', '\n', '        assertOwnersAreConsistent();\n', '        OwnerAdded(_owner);\n', '    }\n', '\n', '    /// @notice removes an owner\n', '    /// @param _owner address of owner to remove\n', '    // All pending operations will be canceled!\n', '    function removeOwner(address _owner)\n', '        external\n', '        ownerExists(_owner)\n', '        validNumOwners(m_numOwners - 1)\n', '        multiOwnedValidRequirement(m_multiOwnedRequired, m_numOwners - 1)\n', '        onlymanyowners(sha3(msg.data))\n', '    {\n', '        assertOwnersAreConsistent();\n', '\n', '        clearPending();\n', '        uint ownerIndex = checkOwnerIndex(m_ownerIndex[_owner]);\n', '        m_owners[ownerIndex] = 0;\n', '        m_ownerIndex[_owner] = 0;\n', '        //make sure m_numOwners is equal to the number of owners and always points to the last owner\n', '        reorganizeOwners();\n', '\n', '        assertOwnersAreConsistent();\n', '        OwnerRemoved(_owner);\n', '    }\n', '\n', '    /// @notice changes the required number of owner signatures\n', '    /// @param _newRequired new number of signatures required\n', '    // All pending operations will be canceled!\n', '    function changeRequirement(uint _newRequired)\n', '        external\n', '        multiOwnedValidRequirement(_newRequired, m_numOwners)\n', '        onlymanyowners(sha3(msg.data))\n', '    {\n', '        m_multiOwnedRequired = _newRequired;\n', '        clearPending();\n', '        RequirementChanged(_newRequired);\n', '    }\n', '\n', '    /// @notice Gets an owner by 0-indexed position\n', '    /// @param ownerIndex 0-indexed owner position\n', '    function getOwner(uint ownerIndex) public constant returns (address) {\n', '        return m_owners[ownerIndex + 1];\n', '    }\n', '\n', '    /// @notice Gets owners\n', '    /// @return memory array of owners\n', '    function getOwners() public constant returns (address[]) {\n', '        address[] memory result = new address[](m_numOwners);\n', '        for (uint i = 0; i < m_numOwners; i++)\n', '            result[i] = getOwner(i);\n', '\n', '        return result;\n', '    }\n', '\n', '    /// @notice checks if provided address is an owner address\n', '    /// @param _addr address to check\n', "    /// @return true if it's an owner\n", '    function isOwner(address _addr) public constant returns (bool) {\n', '        return m_ownerIndex[_addr] > 0;\n', '    }\n', '\n', '    /// @notice Tests ownership of the current caller.\n', "    /// @return true if it's an owner\n", "    // It's advisable to call it by new owner to make sure that the same erroneous address is not copy-pasted to\n", '    // addOwner/changeOwner and to isOwner.\n', '    function amIOwner() external constant onlyowner returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    /// @notice Revokes a prior confirmation of the given operation\n', '    /// @param _operation operation value, typically sha3(msg.data)\n', '    function revoke(bytes32 _operation)\n', '        external\n', '        multiOwnedOperationIsActive(_operation)\n', '        onlyowner\n', '    {\n', '        uint ownerIndexBit = makeOwnerBitmapBit(msg.sender);\n', '        var pending = m_multiOwnedPending[_operation];\n', '        require(pending.ownersDone & ownerIndexBit > 0);\n', '\n', '        assertOperationIsConsistent(_operation);\n', '\n', '        pending.yetNeeded++;\n', '        pending.ownersDone -= ownerIndexBit;\n', '\n', '        assertOperationIsConsistent(_operation);\n', '        Revoke(msg.sender, _operation);\n', '    }\n', '\n', '    /// @notice Checks if owner confirmed given operation\n', '    /// @param _operation operation value, typically sha3(msg.data)\n', '    /// @param _owner an owner address\n', '    function hasConfirmed(bytes32 _operation, address _owner)\n', '        external\n', '        constant\n', '        multiOwnedOperationIsActive(_operation)\n', '        ownerExists(_owner)\n', '        returns (bool)\n', '    {\n', '        return !(m_multiOwnedPending[_operation].ownersDone & makeOwnerBitmapBit(_owner) == 0);\n', '    }\n', '\n', '    // INTERNAL METHODS\n', '\n', '    function confirmAndCheck(bytes32 _operation)\n', '        private\n', '        onlyowner\n', '        returns (bool)\n', '    {\n', '        if (512 == m_multiOwnedPendingIndex.length)\n', '            // In case m_multiOwnedPendingIndex grows too much we have to shrink it: otherwise at some point\n', "            // we won't be able to do it because of block gas limit.\n", '            // Yes, pending confirmations will be lost. Dont see any security or stability implications.\n', '            // TODO use more graceful approach like compact or removal of clearPending completely\n', '            clearPending();\n', '\n', '        var pending = m_multiOwnedPending[_operation];\n', '\n', "        // if we're not yet working on this operation, switch over and reset the confirmation status.\n", '        if (! isOperationActive(_operation)) {\n', '            // reset count of confirmations needed.\n', '            pending.yetNeeded = m_multiOwnedRequired;\n', '            // reset which owners have confirmed (none) - set our bitmap to 0.\n', '            pending.ownersDone = 0;\n', '            pending.index = m_multiOwnedPendingIndex.length++;\n', '            m_multiOwnedPendingIndex[pending.index] = _operation;\n', '            assertOperationIsConsistent(_operation);\n', '        }\n', '\n', '        // determine the bit to set for this owner.\n', '        uint ownerIndexBit = makeOwnerBitmapBit(msg.sender);\n', "        // make sure we (the message sender) haven't confirmed this operation previously.\n", '        if (pending.ownersDone & ownerIndexBit == 0) {\n', '            // ok - check if count is enough to go ahead.\n', '            assert(pending.yetNeeded > 0);\n', '            if (pending.yetNeeded == 1) {\n', '                // enough confirmations: reset and run interior.\n', '                delete m_multiOwnedPendingIndex[m_multiOwnedPending[_operation].index];\n', '                delete m_multiOwnedPending[_operation];\n', '                FinalConfirmation(msg.sender, _operation);\n', '                return true;\n', '            }\n', '            else\n', '            {\n', '                // not enough: record that this owner in particular confirmed.\n', '                pending.yetNeeded--;\n', '                pending.ownersDone |= ownerIndexBit;\n', '                assertOperationIsConsistent(_operation);\n', '                Confirmation(msg.sender, _operation);\n', '            }\n', '        }\n', '    }\n', '\n', '    // Reclaims free slots between valid owners in m_owners.\n', '    // TODO given that its called after each removal, it could be simplified.\n', '    function reorganizeOwners() private {\n', '        uint free = 1;\n', '        while (free < m_numOwners)\n', '        {\n', '            // iterating to the first free slot from the beginning\n', '            while (free < m_numOwners && m_owners[free] != 0) free++;\n', '\n', '            // iterating to the first occupied slot from the end\n', '            while (m_numOwners > 1 && m_owners[m_numOwners] == 0) m_numOwners--;\n', '\n', '            // swap, if possible, so free slot is located at the end after the swap\n', '            if (free < m_numOwners && m_owners[m_numOwners] != 0 && m_owners[free] == 0)\n', '            {\n', "                // owners between swapped slots should't be renumbered - that saves a lot of gas\n", '                m_owners[free] = m_owners[m_numOwners];\n', '                m_ownerIndex[m_owners[free]] = free;\n', '                m_owners[m_numOwners] = 0;\n', '            }\n', '        }\n', '    }\n', '\n', '    function clearPending() private onlyowner {\n', '        uint length = m_multiOwnedPendingIndex.length;\n', '        for (uint i = 0; i < length; ++i) {\n', '            if (m_multiOwnedPendingIndex[i] != 0)\n', '                delete m_multiOwnedPending[m_multiOwnedPendingIndex[i]];\n', '        }\n', '        delete m_multiOwnedPendingIndex;\n', '    }\n', '\n', '    function checkOwnerIndex(uint ownerIndex) private constant returns (uint) {\n', '        assert(0 != ownerIndex && ownerIndex <= c_maxOwners);\n', '        return ownerIndex;\n', '    }\n', '\n', '    function makeOwnerBitmapBit(address owner) private constant returns (uint) {\n', '        uint ownerIndex = checkOwnerIndex(m_ownerIndex[owner]);\n', '        return 2 ** ownerIndex;\n', '    }\n', '\n', '    function isOperationActive(bytes32 _operation) private constant returns (bool) {\n', '        return 0 != m_multiOwnedPending[_operation].yetNeeded;\n', '    }\n', '\n', '\n', '    function assertOwnersAreConsistent() private constant {\n', '        assert(m_numOwners > 0);\n', '        assert(m_numOwners <= c_maxOwners);\n', '        assert(m_owners[0] == 0);\n', '        assert(0 != m_multiOwnedRequired && m_multiOwnedRequired <= m_numOwners);\n', '    }\n', '\n', '    function assertOperationIsConsistent(bytes32 _operation) private constant {\n', '        var pending = m_multiOwnedPending[_operation];\n', '        assert(0 != pending.yetNeeded);\n', '        assert(m_multiOwnedPendingIndex[pending.index] == _operation);\n', '        assert(pending.yetNeeded <= m_multiOwnedRequired);\n', '    }\n', '\n', '\n', '   \t// FIELDS\n', '\n', '    uint constant c_maxOwners = 250;\n', '\n', '    // the number of owners that must confirm the same operation before it is run.\n', '    uint public m_multiOwnedRequired;\n', '\n', '\n', '    // pointer used to find a free slot in m_owners\n', '    uint public m_numOwners;\n', '\n', '    // list of owners (addresses),\n', '    // slot 0 is unused so there are no owner which index is 0.\n', '    // TODO could we save space at the end of the array for the common case of <10 owners? and should we?\n', '    address[256] internal m_owners;\n', '\n', '    // index on the list of owners to allow reverse lookup: owner address => index in m_owners\n', '    mapping(address => uint) internal m_ownerIndex;\n', '\n', '\n', '    // the ongoing operations.\n', '    mapping(bytes32 => MultiOwnedOperationPendingState) internal m_multiOwnedPending;\n', '    bytes32[] internal m_multiOwnedPendingIndex;\n', '}\n', '\n', '\n', '/**\n', ' * @title Contract which is owned by owners and operated by controller.\n', ' *\n', ' * @notice Provides a way to set up an entity (typically other contract) entitled to control actions of this contract.\n', ' * Controller is set up by owners or during construction.\n', ' *\n', ' * @dev controller check is performed by onlyController modifier.\n', ' */\n', 'contract MultiownedControlled is multiowned {\n', '\n', '    event ControllerSet(address controller);\n', '    event ControllerRetired(address was);\n', '\n', '\n', '    modifier onlyController {\n', '        require(msg.sender == m_controller);\n', '        _;\n', '    }\n', '\n', '\n', '    // PUBLIC interface\n', '\n', '    function MultiownedControlled(address[] _owners, uint _signaturesRequired, address _controller)\n', '        multiowned(_owners, _signaturesRequired)\n', '    {\n', '        m_controller = _controller;\n', '        ControllerSet(m_controller);\n', '    }\n', '\n', '    /// @dev sets the controller\n', '    function setController(address _controller) external onlymanyowners(sha3(msg.data)) {\n', '        m_controller = _controller;\n', '        ControllerSet(m_controller);\n', '    }\n', '\n', '    /// @dev ability for controller to step down\n', '    function detachController() external onlyController {\n', '        address was = m_controller;\n', '        m_controller = address(0);\n', '        ControllerRetired(was);\n', '    }\n', '\n', '\n', '    // FIELDS\n', '\n', '    /// @notice address of entity entitled to mint new tokens\n', '    address public m_controller;\n', '}\n', '\n', '\n', '/// @title StandardToken which can be minted by another contract.\n', 'contract MintableMultiownedToken is MultiownedControlled, StandardToken {\n', '\n', '    /// @dev parameters of an extra token emission\n', '    struct EmissionInfo {\n', '        // tokens created\n', '        uint256 created;\n', '\n', '        // totalSupply at the moment of emission (excluding created tokens)\n', '        uint256 totalSupplyWas;\n', '    }\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '    event Emission(uint256 tokensCreated, uint256 totalSupplyWas, uint256 time);\n', '    event Dividend(address indexed to, uint256 amount);\n', '\n', '\n', '    // PUBLIC interface\n', '\n', '    function MintableMultiownedToken(address[] _owners, uint _signaturesRequired, address _minter)\n', '        MultiownedControlled(_owners, _signaturesRequired, _minter)\n', '    {\n', '        dividendsPool = this;   // or any other special unforgeable value, actually\n', '\n', '        // emission #0 is a dummy: because of default value 0 in m_lastAccountEmission\n', '        m_emissions.push(EmissionInfo({created: 0, totalSupplyWas: 0}));\n', '    }\n', '\n', '    /// @notice Request dividends for current account.\n', '    function requestDividends() external {\n', '        payDividendsTo(msg.sender);\n', '    }\n', '\n', '    /// @notice hook on standard ERC20#transfer to pay dividends\n', '    function transfer(address _to, uint256 _value) returns (bool) {\n', '        payDividendsTo(msg.sender);\n', '        payDividendsTo(_to);\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /// @notice hook on standard ERC20#transferFrom to pay dividends\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '        payDividendsTo(_from);\n', '        payDividendsTo(_to);\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    // Disabled: this could be undesirable because sum of (balanceOf() for each token owner) != totalSupply\n', '    // (but: sum of (balances[owner] for each token owner) == totalSupply!).\n', '    //\n', '    // @notice hook on standard ERC20#balanceOf to take dividends into consideration\n', '    // function balanceOf(address _owner) constant returns (uint256) {\n', '    //     var (hasNewDividends, dividends) = calculateDividendsFor(_owner);\n', '    //     return hasNewDividends ? super.balanceOf(_owner).add(dividends) : super.balanceOf(_owner);\n', '    // }\n', '\n', '\n', '    /// @dev mints new tokens\n', '    function mint(address _to, uint256 _amount) external onlyController {\n', '        require(m_externalMintingEnabled);\n', '        payDividendsTo(_to);\n', '        mintInternal(_to, _amount);\n', '    }\n', '\n', '    /// @dev disables mint(), irreversible!\n', '    function disableMinting() external onlyController {\n', '        require(m_externalMintingEnabled);\n', '        m_externalMintingEnabled = false;\n', '    }\n', '\n', '\n', '    // INTERNAL functions\n', '\n', '    /**\n', '     * @notice Starts new token emission\n', '     * @param _tokensCreated Amount of tokens to create\n', '     * @dev Dividends are not distributed immediately as it could require billions of gas,\n', '     * instead they are `pulled` by a holder from dividends pool account before any update to the holder account occurs.\n', '     */\n', '    function emissionInternal(uint256 _tokensCreated) internal {\n', '        require(0 != _tokensCreated);\n', '        require(_tokensCreated < totalSupply / 2);  // otherwise it looks like an error\n', '\n', '        uint256 totalSupplyWas = totalSupply;\n', '\n', '        m_emissions.push(EmissionInfo({created: _tokensCreated, totalSupplyWas: totalSupplyWas}));\n', '        mintInternal(dividendsPool, _tokensCreated);\n', '\n', '        Emission(_tokensCreated, totalSupplyWas, now);\n', '    }\n', '\n', '    function mintInternal(address _to, uint256 _amount) internal {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Transfer(this, _to, _amount);\n', '        Mint(_to, _amount);\n', '    }\n', '\n', '    /// @dev adds dividends to the account _to\n', '    function payDividendsTo(address _to) internal {\n', '        var (hasNewDividends, dividends) = calculateDividendsFor(_to);\n', '        if (!hasNewDividends)\n', '            return;\n', '\n', '        if (0 != dividends) {\n', '            balances[dividendsPool] = balances[dividendsPool].sub(dividends);\n', '            balances[_to] = balances[_to].add(dividends);\n', '            Transfer(dividendsPool, _to, dividends);\n', '        }\n', '        m_lastAccountEmission[_to] = getLastEmissionNum();\n', '    }\n', '\n', '    /// @dev calculates dividends for the account _for\n', '    /// @return (true if state has to be updated, dividend amount (could be 0!))\n', '    function calculateDividendsFor(address _for) constant internal returns (bool hasNewDividends, uint dividends) {\n', '        assert(_for != dividendsPool);  // no dividends for the pool!\n', '\n', '        uint256 lastEmissionNum = getLastEmissionNum();\n', '        uint256 lastAccountEmissionNum = m_lastAccountEmission[_for];\n', '        assert(lastAccountEmissionNum <= lastEmissionNum);\n', '        if (lastAccountEmissionNum == lastEmissionNum)\n', '            return (false, 0);\n', '\n', '        uint256 initialBalance = balances[_for];    // beware of recursion!\n', '        if (0 == initialBalance)\n', '            return (true, 0);\n', '\n', '        uint256 balance = initialBalance;\n', '        for (uint256 emissionToProcess = lastAccountEmissionNum + 1; emissionToProcess <= lastEmissionNum; emissionToProcess++) {\n', '            EmissionInfo storage emission = m_emissions[emissionToProcess];\n', '            assert(0 != emission.created && 0 != emission.totalSupplyWas);\n', '\n', '            uint256 dividend = balance.mul(emission.created).div(emission.totalSupplyWas);\n', '            Dividend(_for, dividend);\n', '\n', '            balance = balance.add(dividend);\n', '        }\n', '\n', '        return (true, balance.sub(initialBalance));\n', '    }\n', '\n', '    function getLastEmissionNum() private constant returns (uint256) {\n', '        return m_emissions.length - 1;\n', '    }\n', '\n', '\n', '    // FIELDS\n', '\n', "    /// @notice if this true then token is still externally mintable (but this flag does't affect emissions!)\n", '    bool public m_externalMintingEnabled = true;\n', '\n', '    /// @dev internal address of dividends in balances mapping.\n', '    address dividendsPool;\n', '\n', '    /// @notice record of issued dividend emissions\n', '    EmissionInfo[] public m_emissions;\n', '\n', '    /// @dev for each token holder: last emission (index in m_emissions) which was processed for this holder\n', '    mapping(address => uint256) m_lastAccountEmission;\n', '}\n', '\n', '/// @title utility methods and modifiers of arguments validation\n', 'contract ArgumentsChecker {\n', '\n', '    /// @dev check which prevents short address attack\n', '    modifier payloadSizeIs(uint size) {\n', '       require(msg.data.length == size + 4 /* function selector */);\n', '       _;\n', '    }\n', '\n', '    /// @dev check that address is valid\n', '    modifier validAddress(address addr) {\n', '        require(addr != address(0));\n', '        _;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Interface for code which processes and stores investments.\n', ' * @author Eenae\n', ' */\n', 'contract IInvestmentsWalletConnector {\n', '    /// @dev process and forward investment\n', '    function storeInvestment(address investor, uint payment) internal;\n', '\n', '    /// @dev total investments amount stored using storeInvestment()\n', '    function getTotalInvestmentsStored() internal constant returns (uint);\n', '\n', '    /// @dev called in case crowdsale succeeded\n', '    function wcOnCrowdsaleSuccess() internal;\n', '\n', '    /// @dev called in case crowdsale failed\n', '    function wcOnCrowdsaleFailure() internal;\n', '}\n', '\n', '/**\n', ' * @title Stores investments in specified external account.\n', ' * @author Eenae\n', ' */\n', 'contract ExternalAccountWalletConnector is ArgumentsChecker, IInvestmentsWalletConnector {\n', '\n', '    function ExternalAccountWalletConnector(address accountAddress)\n', '        validAddress(accountAddress)\n', '    {\n', '        m_walletAddress = accountAddress;\n', '    }\n', '\n', '    /// @dev process and forward investment\n', '    function storeInvestment(address /*investor*/, uint payment) internal\n', '    {\n', '        m_wcStored += payment;\n', '        m_walletAddress.transfer(payment);\n', '    }\n', '\n', '    /// @dev total investments amount stored using storeInvestment()\n', '    function getTotalInvestmentsStored() internal constant returns (uint)\n', '    {\n', '        return m_wcStored;\n', '    }\n', '\n', '    /// @dev called in case crowdsale succeeded\n', '    function wcOnCrowdsaleSuccess() internal {\n', '    }\n', '\n', '    /// @dev called in case crowdsale failed\n', '    function wcOnCrowdsaleFailure() internal {\n', '    }\n', '\n', '    /// @notice address of wallet which stores funds\n', '    address public m_walletAddress;\n', '\n', '    /// @notice total investments stored to wallet\n', '    uint public m_wcStored;\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/*\n', ' * @title This is proxy for analytics. Target contract can be found at field m_analytics (see "read contract").\n', ' * @author Eenae\n', '\n', ' * FIXME after fix of truffle issue #560: refactor to a separate contract file which uses InvestmentAnalytics interface\n', ' */\n', 'contract AnalyticProxy {\n', '\n', '    function AnalyticProxy() {\n', '        m_analytics = InvestmentAnalytics(msg.sender);\n', '    }\n', '\n', '    /// @notice forward payment to analytics-capable contract\n', '    function() payable {\n', '        m_analytics.iaInvestedBy.value(msg.value)(msg.sender);\n', '    }\n', '\n', '    InvestmentAnalytics public m_analytics;\n', '}\n', '\n', '\n', '/*\n', ' * @title Mixin contract which supports different payment channels and provides analytical per-channel data.\n', ' * @author Eenae\n', ' */\n', 'contract InvestmentAnalytics {\n', '    using SafeMath for uint256;\n', '\n', '    function InvestmentAnalytics(){\n', '    }\n', '\n', '    /// @dev creates more payment channels, up to the limit but not exceeding gas stipend\n', '    function createMorePaymentChannelsInternal(uint limit) internal returns (uint) {\n', '        uint paymentChannelsCreated;\n', '        for (uint i = 0; i < limit; i++) {\n', '            uint startingGas = msg.gas;\n', '            /*\n', '             * ~170k of gas per paymentChannel,\n', '             * using gas price = 4Gwei 2k paymentChannels will cost ~1.4 ETH.\n', '             */\n', '\n', '            address paymentChannel = new AnalyticProxy();\n', '            m_validPaymentChannels[paymentChannel] = true;\n', '            m_paymentChannels.push(paymentChannel);\n', '            paymentChannelsCreated++;\n', '\n', '            // cost of creating one channel\n', '            uint gasPerChannel = startingGas.sub(msg.gas);\n', '            if (gasPerChannel.add(50000) > msg.gas)\n', '                break;  // enough proxies for this call\n', '        }\n', '        return paymentChannelsCreated;\n', '    }\n', '\n', '\n', '    /// @dev process payments - record analytics and pass control to iaOnInvested callback\n', '    function iaInvestedBy(address investor) external payable {\n', '        address paymentChannel = msg.sender;\n', '        if (m_validPaymentChannels[paymentChannel]) {\n', '            // payment received by one of our channels\n', '            uint value = msg.value;\n', '            m_investmentsByPaymentChannel[paymentChannel] = m_investmentsByPaymentChannel[paymentChannel].add(value);\n', '            // We know for sure that investment came from specified investor (see AnalyticProxy).\n', '            iaOnInvested(investor, value, true);\n', '        } else {\n', '            // Looks like some user has paid to this method, this payment is not included in the analytics,\n', '            // but, of course, processed.\n', '            iaOnInvested(msg.sender, msg.value, false);\n', '        }\n', '    }\n', '\n', '    /// @dev callback\n', '    function iaOnInvested(address /*investor*/, uint /*payment*/, bool /*usingPaymentChannel*/) internal {\n', '    }\n', '\n', '\n', '    function paymentChannelsCount() external constant returns (uint) {\n', '        return m_paymentChannels.length;\n', '    }\n', '\n', '    function readAnalyticsMap() external constant returns (address[], uint[]) {\n', '        address[] memory keys = new address[](m_paymentChannels.length);\n', '        uint[] memory values = new uint[](m_paymentChannels.length);\n', '\n', '        for (uint i = 0; i < m_paymentChannels.length; i++) {\n', '            address key = m_paymentChannels[i];\n', '            keys[i] = key;\n', '            values[i] = m_investmentsByPaymentChannel[key];\n', '        }\n', '\n', '        return (keys, values);\n', '    }\n', '\n', '    function readPaymentChannels() external constant returns (address[]) {\n', '        return m_paymentChannels;\n', '    }\n', '\n', '\n', '    mapping(address => uint256) public m_investmentsByPaymentChannel;\n', '    mapping(address => bool) m_validPaymentChannels;\n', '\n', '    address[] public m_paymentChannels;\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic crowdsale stat\n', ' * @author Eenae\n', ' */\n', 'contract ICrowdsaleStat {\n', '\n', '    /// @notice amount of funds collected in wei\n', '    function getWeiCollected() public constant returns (uint);\n', '\n', '    /// @notice amount of tokens minted (NOT equal to totalSupply() in case token is reused!)\n', '    function getTokenMinted() public constant returns (uint);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Helps contracts guard agains rentrancy attacks.\n', ' * @author Remco Bloemen <remco@2π.com>\n', ' * @notice If you mark a function `nonReentrant`, you should also\n', ' * mark it `external`.\n', ' */\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private rentrancy_lock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!rentrancy_lock);\n', '    rentrancy_lock = true;\n', '    _;\n', '    rentrancy_lock = false;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/// @title Base contract for simple crowdsales\n', 'contract SimpleCrowdsaleBase is ArgumentsChecker, ReentrancyGuard, IInvestmentsWalletConnector, ICrowdsaleStat {\n', '    using SafeMath for uint256;\n', '\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '\n', '    function SimpleCrowdsaleBase(address token)\n', '        validAddress(token)\n', '    {\n', '        m_token = MintableMultiownedToken(token);\n', '    }\n', '\n', '\n', '    // PUBLIC interface: payments\n', '\n', '    // fallback function as a shortcut\n', '    function() payable {\n', '        require(0 == msg.data.length);\n', '        buy();  // only internal call here!\n', '    }\n', '\n', '    /// @notice crowdsale participation\n', '    function buy() public payable {     // dont mark as external!\n', '        buyInternal(msg.sender, msg.value, 0);\n', '    }\n', '\n', '\n', '    // INTERNAL\n', '\n', '    /// @dev payment processing\n', '    function buyInternal(address investor, uint payment, uint extraBonuses)\n', '        internal\n', '        nonReentrant\n', '    {\n', '        require(payment >= getMinInvestment());\n', '        require(getCurrentTime() >= getStartTime() || ! mustApplyTimeCheck(investor, payment) /* for final check */);\n', '        if (getCurrentTime() >= getEndTime())\n', '            finish();\n', '\n', '        if (m_finished) {\n', '            // saving provided gas\n', '            investor.transfer(payment);\n', '            return;\n', '        }\n', '\n', '        uint startingWeiCollected = getWeiCollected();\n', '        uint startingInvariant = this.balance.add(startingWeiCollected);\n', '\n', '        // return or update payment if needed\n', '        uint paymentAllowed = getMaximumFunds().sub(getWeiCollected());\n', '        assert(0 != paymentAllowed);\n', '\n', '        uint change;\n', '        if (paymentAllowed < payment) {\n', '            change = payment.sub(paymentAllowed);\n', '            payment = paymentAllowed;\n', '        }\n', '\n', '        // issue tokens\n', '        uint tokens = calculateTokens(investor, payment, extraBonuses);\n', '        m_token.mint(investor, tokens);\n', '        m_tokensMinted += tokens;\n', '\n', '        // record payment\n', '        storeInvestment(investor, payment);\n', '        assert(getWeiCollected() <= getMaximumFunds() && getWeiCollected() > startingWeiCollected);\n', '        FundTransfer(investor, payment, true);\n', '\n', '        if (getWeiCollected() == getMaximumFunds())\n', '            finish();\n', '\n', '        if (change > 0)\n', '            investor.transfer(change);\n', '\n', '        assert(startingInvariant == this.balance.add(getWeiCollected()).add(change));\n', '    }\n', '\n', '    function finish() internal {\n', '        if (m_finished)\n', '            return;\n', '\n', '        if (getWeiCollected() >= getMinimumFunds())\n', '            wcOnCrowdsaleSuccess();\n', '        else\n', '            wcOnCrowdsaleFailure();\n', '\n', '        m_finished = true;\n', '    }\n', '\n', '\n', '    // Other pluggables\n', '\n', '    /// @dev says if crowdsale time bounds must be checked\n', '    function mustApplyTimeCheck(address /*investor*/, uint /*payment*/) constant internal returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    /// @dev to be overridden in tests\n', '    function getCurrentTime() internal constant returns (uint) {\n', '        return now;\n', '    }\n', '\n', '    /// @notice maximum investments to be accepted during pre-ICO\n', '    function getMaximumFunds() internal constant returns (uint);\n', '\n', '    /// @notice minimum amount of funding to consider crowdsale as successful\n', '    function getMinimumFunds() internal constant returns (uint);\n', '\n', '    /// @notice start time of the pre-ICO\n', '    function getStartTime() internal constant returns (uint);\n', '\n', '    /// @notice end time of the pre-ICO\n', '    function getEndTime() internal constant returns (uint);\n', '\n', '    /// @notice minimal amount of investment\n', '    function getMinInvestment() public constant returns (uint) {\n', '        return 10 finney;\n', '    }\n', '\n', '    /// @dev calculates token amount for given investment\n', '    function calculateTokens(address investor, uint payment, uint extraBonuses) internal constant returns (uint);\n', '\n', '\n', '    // ICrowdsaleStat\n', '\n', '    function getWeiCollected() public constant returns (uint) {\n', '        return getTotalInvestmentsStored();\n', '    }\n', '\n', '    /// @notice amount of tokens minted (NOT equal to totalSupply() in case token is reused!)\n', '    function getTokenMinted() public constant returns (uint) {\n', '        return m_tokensMinted;\n', '    }\n', '\n', '\n', '    // FIELDS\n', '\n', '    /// @dev contract responsible for token accounting\n', '    MintableMultiownedToken public m_token;\n', '\n', '    uint m_tokensMinted;\n', '\n', '    bool m_finished = false;\n', '}\n', '\n', '\n', '\n', '/// @title Base contract for Storiqa pre-ICO\n', 'contract STQPreICOBase is SimpleCrowdsaleBase, Ownable, InvestmentAnalytics {\n', '\n', '    function STQPreICOBase(address token)\n', '        SimpleCrowdsaleBase(token)\n', '    {\n', '    }\n', '\n', '\n', '    // PUBLIC interface: maintenance\n', '\n', '    function createMorePaymentChannels(uint limit) external onlyOwner returns (uint) {\n', '        return createMorePaymentChannelsInternal(limit);\n', '    }\n', '\n', '    /// @notice Tests ownership of the current caller.\n', "    /// @return true if it's an owner\n", "    // It's advisable to call it by new owner to make sure that the same erroneous address is not copy-pasted to\n", '    // addOwner/changeOwner and to isOwner.\n', '    function amIOwner() external constant onlyOwner returns (bool) {\n', '        return true;\n', '    }\n', '\n', '\n', '    // INTERNAL\n', '\n', '    /// @dev payment callback\n', '    function iaOnInvested(address investor, uint payment, bool usingPaymentChannel) internal {\n', '        buyInternal(investor, payment, usingPaymentChannel ? c_paymentChannelBonusPercent : 0);\n', '    }\n', '\n', '    function calculateTokens(address /*investor*/, uint payment, uint extraBonuses) internal constant returns (uint) {\n', '        uint bonusPercent = getPreICOBonus().add(getLargePaymentBonus(payment)).add(extraBonuses);\n', '        uint rate = c_STQperETH.mul(bonusPercent.add(100)).div(100);\n', '\n', '        return payment.mul(rate);\n', '    }\n', '\n', '    function getLargePaymentBonus(uint payment) private constant returns (uint) {\n', '        if (payment >= 5000 ether) return 20;\n', '        if (payment >= 3000 ether) return 15;\n', '        if (payment >= 1000 ether) return 10;\n', '        if (payment >= 800 ether) return 8;\n', '        if (payment >= 500 ether) return 5;\n', '        if (payment >= 200 ether) return 2;\n', '        return 0;\n', '    }\n', '\n', '    function mustApplyTimeCheck(address investor, uint /*payment*/) constant internal returns (bool) {\n', '        return investor != owner;\n', '    }\n', '\n', '    /// @notice pre-ICO bonus\n', '    function getPreICOBonus() internal constant returns (uint);\n', '\n', '\n', '    // FIELDS\n', '\n', '    /// @notice starting exchange rate of STQ\n', '    uint public constant c_STQperETH = 100000;\n', '\n', '    /// @notice authorised payment bonus\n', '    uint public constant c_paymentChannelBonusPercent = 2;\n', '}\n', '\n', '\n', '\n', '\n', '/// @title Storiqa pre-ICO contract\n', 'contract STQPreICO3 is STQPreICOBase, ExternalAccountWalletConnector {\n', '\n', '    function STQPreICO3(address token, address wallet)\n', '        STQPreICOBase(token)\n', '        ExternalAccountWalletConnector(wallet)\n', '    {\n', '\n', '    }\n', '\n', '\n', '    // INTERNAL\n', '\n', '    function getWeiCollected() public constant returns (uint) {\n', '        return getTotalInvestmentsStored();\n', '    }\n', '\n', '    /// @notice minimum amount of funding to consider crowdsale as successful\n', '    function getMinimumFunds() internal constant returns (uint) {\n', '        return 0;\n', '    }\n', '\n', '    /// @notice maximum investments to be accepted during pre-ICO\n', '    function getMaximumFunds() internal constant returns (uint) {\n', '        return 100000000 ether;\n', '    }\n', '\n', '    /// @notice start time of the pre-ICO\n', '    function getStartTime() internal constant returns (uint) {\n', '        return 1508958000; // 2017-10-25 19:00:00\n', '    }\n', '\n', '    /// @notice end time of the pre-ICO\n', '    function getEndTime() internal constant returns (uint) {\n', '        return 1511568000; //2017-11-25 00:00:00\n', '    }\n', '\n', '    /// @notice pre-ICO bonus\n', '    function getPreICOBonus() internal constant returns (uint) {\n', '        return 33;\n', '    }\n', '}']