['pragma solidity ^0.4.15;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a * b;\n', '        if (a != 0 && c / a != b) revert();\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        if (b > a) revert();\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) revert();\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address who) public constant returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) balances;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '        // require (_value <= _allowance);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        }\n', '        else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '}\n', '\n', '/**\n', ' * @title IRBTokens\n', ' * @dev IRB Token contract based on Zeppelin StandardToken contract\n', ' */\n', 'contract IRBToken is StandardToken, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * @dev ERC20 descriptor variables\n', '     */\n', '    string public constant name = "IRB Tokens";\n', '\n', '    string public constant symbol = "IRB";\n', '\n', '    uint8 public decimals = 18;\n', '\n', '    /**\n', '     * @dev 489.58 millions s the initial Token sale\n', '     */\n', '    uint256 public constant crowdsaleTokens = 489580 * 10 ** 21;\n', '\n', '    /**\n', '     * @dev 10.42 millions is the initial Token presale\n', '     */\n', '    uint256 public constant preCrowdsaleTokens = 10420 * 10 ** 21;\n', '\n', '    // TODO: TestRPC addresses, replace to real\n', '    // PRE Crowdsale Tokens Wallet\n', '    address public constant preCrowdsaleTokensWallet = 0x0CD95a59fAd089c4EBCCEB54f335eC8f61Caa80e;\n', '    // Crowdsale Tokens Wallet\n', '    address public constant crowdsaleTokensWallet = 0x48545E41696Dc51020C35cA8C36b678101a98437;\n', '\n', '    /**\n', '     * @dev Address of PRE Crowdsale contract which will be compared\n', '     *       against in the appropriate modifier check\n', '     */\n', '    address public preCrowdsaleContractAddress;\n', '\n', '    /**\n', '     * @dev Address of Crowdsale contract which will be compared\n', '     *       against in the appropriate modifier check\n', '     */\n', '    address public crowdsaleContractAddress;\n', '\n', '    /**\n', '     * @dev variable that holds flag of ended pre tokensake\n', '     */\n', '    bool isPreFinished = false;\n', '\n', '    /**\n', '     * @dev variable that holds flag of ended tokensake\n', '     */\n', '    bool isFinished = false;\n', '\n', '    /**\n', '     * @dev Modifier that allow only the Crowdsale contract to be sender\n', '     */\n', '    modifier onlyPreCrowdsaleContract() {\n', '        require(msg.sender == preCrowdsaleContractAddress);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier that allow only the Crowdsale contract to be sender\n', '     */\n', '    modifier onlyCrowdsaleContract() {\n', '        require(msg.sender == crowdsaleContractAddress);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev event for the burnt tokens after crowdsale logging\n', '     * @param tokens amount of tokens available for crowdsale\n', '     */\n', '    event TokensBurnt(uint256 tokens);\n', '\n', '    /**\n', '     * @dev event for the tokens contract move to the active state logging\n', '     * @param supply amount of tokens left after all the unsold was burned\n', '     */\n', '    event Live(uint256 supply);\n', '\n', '    /**\n', '     * @dev Contract constructor\n', '     */\n', '    function IRBToken() {\n', '        // Issue pre crowdsale tokens\n', '        balances[preCrowdsaleTokensWallet] = balanceOf(preCrowdsaleTokensWallet).add(preCrowdsaleTokens);\n', '        Transfer(address(0), preCrowdsaleTokensWallet, preCrowdsaleTokens);\n', '\n', '        // Issue crowdsale tokens\n', '        balances[crowdsaleTokensWallet] = balanceOf(crowdsaleTokensWallet).add(crowdsaleTokens);\n', '        Transfer(address(0), crowdsaleTokensWallet, crowdsaleTokens);\n', '\n', '        // 500 millions tokens overall\n', '        totalSupply = crowdsaleTokens.add(preCrowdsaleTokens);\n', '    }\n', '\n', '    /**\n', '     * @dev back link IRBToken contract with IRBPreCrowdsale one\n', '     * @param _preCrowdsaleAddress non zero address of IRBPreCrowdsale contract\n', '     */\n', '    function setPreCrowdsaleAddress(address _preCrowdsaleAddress) onlyOwner external {\n', '        require(_preCrowdsaleAddress != address(0));\n', '        preCrowdsaleContractAddress = _preCrowdsaleAddress;\n', '\n', '        // Allow pre crowdsale contract\n', '        uint256 balance = balanceOf(preCrowdsaleTokensWallet);\n', '        allowed[preCrowdsaleTokensWallet][preCrowdsaleContractAddress] = balance;\n', '        Approval(preCrowdsaleTokensWallet, preCrowdsaleContractAddress, balance);\n', '    }\n', '\n', '    /**\n', '     * @dev back link IRBToken contract with IRBCrowdsale one\n', '     * @param _crowdsaleAddress non zero address of IRBCrowdsale contract\n', '     */\n', '    function setCrowdsaleAddress(address _crowdsaleAddress) onlyOwner external {\n', '        require(isPreFinished);\n', '        require(_crowdsaleAddress != address(0));\n', '        crowdsaleContractAddress = _crowdsaleAddress;\n', '\n', '        // Allow crowdsale contract\n', '        uint256 balance = balanceOf(crowdsaleTokensWallet);\n', '        allowed[crowdsaleTokensWallet][crowdsaleContractAddress] = balance;\n', '        Approval(crowdsaleTokensWallet, crowdsaleContractAddress, balance);\n', '    }\n', '\n', '    /**\n', '     * @dev called only by linked IRBPreCrowdsale contract to end precrowdsale.\n', '     */\n', '    function endPreTokensale() onlyPreCrowdsaleContract external {\n', '        require(!isPreFinished);\n', '        uint256 preCrowdsaleLeftovers = balanceOf(preCrowdsaleTokensWallet);\n', '\n', '        if (preCrowdsaleLeftovers > 0) {\n', '            balances[preCrowdsaleTokensWallet] = 0;\n', '            balances[crowdsaleTokensWallet] = balances[crowdsaleTokensWallet].add(preCrowdsaleLeftovers);\n', '            Transfer(preCrowdsaleTokensWallet, crowdsaleTokensWallet, preCrowdsaleLeftovers);\n', '        }\n', '\n', '        isPreFinished = true;\n', '    }\n', '\n', '    /**\n', '     * @dev called only by linked IRBCrowdsale contract to end crowdsale.\n', '     */\n', '    function endTokensale() onlyCrowdsaleContract external {\n', '        require(!isFinished);\n', '        uint256 crowdsaleLeftovers = balanceOf(crowdsaleTokensWallet);\n', '\n', '        if (crowdsaleLeftovers > 0) {\n', '            totalSupply = totalSupply.sub(crowdsaleLeftovers);\n', '\n', '            balances[crowdsaleTokensWallet] = 0;\n', '            Transfer(crowdsaleTokensWallet, address(0), crowdsaleLeftovers);\n', '            TokensBurnt(crowdsaleLeftovers);\n', '        }\n', '\n', '        isFinished = true;\n', '        Live(totalSupply);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title RefundVault.\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract IRBPreRefundVault is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    enum State {Active, Refunding, Closed}\n', '    State public state;\n', '\n', '    mapping (address => uint256) public deposited;\n', '\n', '    uint256 public totalDeposited;\n', '\n', '    address public constant wallet = 0x26dB9eF39Bbfe437f5b384c3913E807e5633E7cE;\n', '\n', '    address preCrowdsaleContractAddress;\n', '\n', '    event Closed();\n', '\n', '    event RefundsEnabled();\n', '\n', '    event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '    event Withdrawal(address indexed receiver, uint256 weiAmount);\n', '\n', '    function IRBPreRefundVault() {\n', '        state = State.Active;\n', '    }\n', '\n', '    modifier onlyCrowdsaleContract() {\n', '        require(msg.sender == preCrowdsaleContractAddress);\n', '        _;\n', '    }\n', '\n', '    function setPreCrowdsaleAddress(address _preCrowdsaleAddress) external onlyOwner {\n', '        require(_preCrowdsaleAddress != address(0));\n', '        preCrowdsaleContractAddress = _preCrowdsaleAddress;\n', '    }\n', '\n', '    function deposit(address investor) onlyCrowdsaleContract external payable {\n', '        require(state == State.Active);\n', '        uint256 amount = msg.value;\n', '        deposited[investor] = deposited[investor].add(amount);\n', '        totalDeposited = totalDeposited.add(amount);\n', '    }\n', '\n', '    function close() onlyCrowdsaleContract external {\n', '        require(state == State.Active);\n', '        state = State.Closed;\n', '        totalDeposited = 0;\n', '        Closed();\n', '        wallet.transfer(this.balance);\n', '    }\n', '\n', '    function enableRefunds() onlyCrowdsaleContract external {\n', '        require(state == State.Active);\n', '        state = State.Refunding;\n', '        RefundsEnabled();\n', '    }\n', '\n', '    function refund(address investor) public {\n', '        require(state == State.Refunding);\n', '        uint256 depositedValue = deposited[investor];\n', '        deposited[investor] = 0;\n', '        investor.transfer(depositedValue);\n', '        Refunded(investor, depositedValue);\n', '    }\n', '\n', '    /**\n', "     * @dev withdraw method that can be used by crowdsale contract's owner\n", '     *      for the withdrawal funds to the owner\n', '     */\n', '    function withdraw(uint value) onlyCrowdsaleContract external returns (bool success) {\n', '        require(state == State.Active);\n', '        require(totalDeposited >= value);\n', '        totalDeposited = totalDeposited.sub(value);\n', '        wallet.transfer(value);\n', '        Withdrawal(wallet, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev killer method that can be used by owner to\n', '     *      kill the contract and send funds to owner\n', '     */\n', '    function kill() onlyOwner {\n', '        require(state == State.Closed);\n', '        selfdestruct(owner);\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title IRBPreCrowdsale\n', ' * @dev IRB pre crowdsale contract borrows Zeppelin Finalized, Capped and Refundable crowdsales implementations\n', ' */\n', 'contract IRBPreCrowdsale is Ownable, Pausable {\n', '    using SafeMath for uint;\n', '\n', '    /**\n', '     * @dev token contract\n', '     */\n', '    IRBToken public token;\n', '\n', '    /**\n', '     * @dev refund vault used to hold funds while crowdsale is running\n', '     */\n', '    IRBPreRefundVault public vault;\n', '\n', '    /**\n', '     * @dev tokensale(presale) start time: Dec 12, 2017, 11:00:00 + 3\n', '     */\n', '    uint startTime = 1513065600;\n', '\n', '    /**\n', '     * @dev tokensale end time: Jan 14, 2018 23:59:59 +3\n', '     */\n', '    uint endTime = 1515963599;\n', '\n', '    /**\n', '     * @dev minimum purchase amount for presale\n', '     */\n', '    uint256 public constant minPresaleAmount = 108 * 10 ** 15; // 400 IRB\n', '\n', '    /**\n', '     * @dev minimum and maximum amount of funds to be raised in weis\n', '     */\n', '    uint256 public constant goal = 1125 * 10 ** 18;  // 1.125 Kether\n', '    uint256 public constant cap = 2250 * 10 ** 18; // 2.25 Kether\n', '\n', '    /**\n', '     * @dev amount of raised money in wei\n', '     */\n', '    uint256 public weiRaised;\n', '\n', '    /**\n', '     * @dev tokensale finalization flag\n', '     */\n', '    bool public isFinalized = false;\n', '\n', '    /**\n', '     * @dev event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    /**\n', '     * @dev event for tokensale final logging\n', '     */\n', '    event Finalized();\n', '\n', '    /**\n', '     * @dev Pre Crowdsale in the constructor takes addresses of\n', '     *      the just deployed IRBToken and IRBPreRefundVault contracts\n', '     * @param _tokenAddress address of the IRBToken deployed contract\n', '     * @param _vaultAddress address of the IRBPreRefundVault deployed contract\n', '     */\n', '    function IRBPreCrowdsale(address _tokenAddress, address _vaultAddress) {\n', '        require(_tokenAddress != address(0));\n', '        require(_vaultAddress != address(0));\n', '\n', '        // IRBToken and IRBPreRefundVault was deployed separately\n', '        token = IRBToken(_tokenAddress);\n', '        vault = IRBPreRefundVault(_vaultAddress);\n', '    }\n', '\n', '    /**\n', '     * @dev fallback function can be used to buy tokens\n', '     */\n', '    function() payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev main function to buy tokens\n', '     * @param beneficiary target wallet for tokens can vary from the sender one\n', '     */\n', '    function buyTokens(address beneficiary) whenNotPaused public payable {\n', '        require(beneficiary != address(0));\n', '        require(validPurchase(msg.value));\n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        // buyer and beneficiary could be two different wallets\n', '        address buyer = msg.sender;\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = convertAmountToTokens(weiAmount);\n', '\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        if (!token.transferFrom(token.preCrowdsaleTokensWallet(), beneficiary, tokens)) {\n', '            revert();\n', '        }\n', '\n', '        TokenPurchase(buyer, beneficiary, weiAmount, tokens);\n', '\n', '        vault.deposit.value(weiAmount)(buyer);\n', '    }\n', '\n', '    /**\n', '     * @dev check if the current purchase valid based on time and amount of passed ether\n', '     * @param _value amount of passed ether\n', '     * @return true if investors can buy at the moment\n', '     */\n', '    function validPurchase(uint256 _value) internal constant returns (bool) {\n', '        bool nonZeroPurchase = _value != 0;\n', '        bool withinPeriod = now >= startTime && now <= endTime;\n', '        bool withinCap = weiRaised.add(_value) <= cap;\n', '        // For presale we want to decline all payments less then minPresaleAmount\n', '        bool withinAmount = msg.value >= minPresaleAmount;\n', '\n', '        return nonZeroPurchase && withinPeriod && withinCap && withinAmount;\n', '    }\n', '\n', '    /**\n', '     * @dev check if crowdsale still active based on current time and cap\n', '     * consider minPresaleAmount\n', '     * @return true if crowdsale event has ended\n', '     */\n', '    function hasEnded() public constant returns (bool) {\n', '        bool capReached = weiRaised.add(minPresaleAmount) >= cap;\n', '        bool timeIsUp = now > endTime;\n', '        return timeIsUp || capReached;\n', '    }\n', '\n', '    /**\n', '     * @dev if crowdsale is unsuccessful, investors can claim refunds here\n', '     */\n', '    function claimRefund() public {\n', '        require(isFinalized);\n', '        require(!goalReached());\n', '\n', '        vault.refund(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev finalize crowdsale. this method triggers vault and token finalization\n', '     */\n', '    function finalize() onlyOwner public {\n', '        require(!isFinalized);\n', '        require(hasEnded());\n', '\n', '        // trigger vault and token finalization\n', '        if (goalReached()) {\n', '            vault.close();\n', '        }\n', '        else {\n', '            vault.enableRefunds();\n', '        }\n', '\n', '        token.endPreTokensale();\n', '\n', '        isFinalized = true;\n', '\n', '        Finalized();\n', '    }\n', '\n', '    /**\n', '     * @dev check if hard cap goal is reached\n', '     */\n', '    function goalReached() public constant returns (bool) {\n', '        return weiRaised >= goal;\n', '    }\n', '\n', '    /**\n', '    * @dev withdraw method that can be used by owner for\n', '    *      withdraw funds from vault to owner\n', '    */\n', '    function withdraw(uint256 amount) onlyOwner public {\n', '        require(!isFinalized);\n', '        require(goalReached());\n', '        require(amount > 0);\n', '\n', '        vault.withdraw(amount);\n', '    }\n', '\n', '    /**\n', '     * @dev returns current token price\n', '     */\n', '    function convertAmountToTokens(uint256 amount) public constant returns (uint256) {\n', '        // 1 token = 0.00027 ETH\n', '        uint256 tokens = amount.div(27).mul(100000);\n', '        // bonus +25%\n', '        uint256 bonus = tokens.div(4);\n', '\n', '        return tokens.add(bonus);\n', '    }\n', '\n', '    /**\n', '     * @dev killer method that can bu used by owner to\n', '     *      kill the contract and send funds to owner\n', '     */\n', '    function kill() onlyOwner whenPaused {\n', '        selfdestruct(owner);\n', '    }\n', '}']