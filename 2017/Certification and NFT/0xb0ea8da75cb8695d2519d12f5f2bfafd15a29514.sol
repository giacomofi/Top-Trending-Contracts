['pragma solidity ^0.4.16;\n', '\n', '/* \n', ' * Giga Giving Coin and ICO Contract.\n', ' * 15,000,000 Coins Total.\n', ' * 12,000,000 Coins available for purchase.\n', ' */\n', 'contract Token {   \n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is Token {\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {       \n', '        address sender = msg.sender;\n', '        require(balances[sender] >= _value);\n', '        balances[sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {      \n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }    \n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal returns (uint256) {    \n', '    uint256 c = a / b;    \n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract GigaGivingToken is StandardToken {\n', '    using SafeMath for uint256;\n', '         \n', '    uint256 private fundingGoal = 0 ether;\n', '    uint256 private amountRaised;\n', '\n', '    uint256 private constant PHASE_1_PRICE = 1600000000000000;\n', '    uint256 private constant PHASE_2_PRICE = 2000000000000000; \n', '    uint256 private constant PHASE_3_PRICE = 2500000000000000; \n', '    uint256 private constant PHASE_4_PRICE = 4000000000000000;\n', '    uint256 private constant PHASE_5_PRICE = 5000000000000000; \n', '    uint256 private constant DURATION = 5 weeks;  \n', '\n', '    uint256 public constant TOTAL_TOKENS = 15000000;\n', '    uint256 public constant  CROWDSALE_TOKENS = 12000000;  \n', '    \n', '\n', '    uint256 public startTime;\n', '    uint256 public tokenSupply;\n', ' \n', '    address public creator;\n', '    address public beneficiary;\n', '\n', '    string public name = "Giga Coin";\n', '    string public symbol = "GC";\n', '    string public version = "GC.7";\n', '    uint256 public decimals = 0;  \n', '    \n', '    // GigaGivingToken public tokenReward;\n', '    mapping(address => uint256) public ethBalanceOf;\n', '    bool public fundingGoalReached = false;\n', '    bool public crowdsaleClosed = false;   \n', '    bool public refundsOpen = false;   \n', '\n', '    function GigaGivingToken (address icoBeneficiary) public {\n', '        creator = msg.sender;\n', '        beneficiary = icoBeneficiary;\n', '        totalSupply = TOTAL_TOKENS;         \n', '        \n', '        balances[beneficiary] = TOTAL_TOKENS.sub(CROWDSALE_TOKENS);\n', '        Transfer(0x0, icoBeneficiary, TOTAL_TOKENS.sub(CROWDSALE_TOKENS));\n', '\n', '        balances[this] = CROWDSALE_TOKENS;\n', '        Transfer(0x0, this, CROWDSALE_TOKENS);              \n', '        tokenSupply = CROWDSALE_TOKENS;\n', '        \n', '        startTime = 1510765200;\n', '    }   \n', '  \n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        require(_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData));\n', '        return true;\n', '    } \n', '  \n', '    function () public payable {\n', '        require(now >= startTime);\n', '        require(now <= startTime + DURATION);\n', '        require(!crowdsaleClosed);\n', '        require(msg.value > 0);\n', '        uint256 amount = msg.value;\n', '        uint256 coinTotal = 0;      \n', '        \n', '        if (now > startTime + 4 weeks) {\n', '            coinTotal = amount.div(PHASE_5_PRICE);\n', '        } else if (now > startTime + 3 weeks) {\n', '            coinTotal = amount.div(PHASE_4_PRICE);\n', '        } else if (now > startTime + 2 weeks) {\n', '            coinTotal = amount.div(PHASE_3_PRICE);\n', '        } else if (now > startTime + 1 weeks) {\n', '            coinTotal = amount.div(PHASE_2_PRICE);\n', '        } else {\n', '            coinTotal = amount.div(PHASE_1_PRICE);\n', '        }\n', '\n', '        ethBalanceOf[msg.sender] = ethBalanceOf[msg.sender].add(amount);              \n', '        balances[msg.sender] = balances[msg.sender].add(coinTotal);\n', '        balances[this] = balances[this].sub(coinTotal);\n', '        amountRaised = amountRaised.add(amount);\n', '        tokenSupply = tokenSupply.sub(coinTotal);\n', '        transfer(msg.sender, coinTotal);\n', '    }  \n', '\n', '    modifier afterDeadline() { \n', '        if (now >= (startTime + DURATION)) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    function checkGoalReached() public afterDeadline {\n', '        if (amountRaised >= fundingGoal) {\n', '            fundingGoalReached = true;\n', '        }\n', '        crowdsaleClosed = true;\n', '    }\n', '\n', '    function safeWithdrawal() public afterDeadline {\n', '        if (refundsOpen) {\n', '            uint amount = ethBalanceOf[msg.sender];\n', '            ethBalanceOf[msg.sender] = 0;\n', '            if (amount > 0) {\n', '                if (!msg.sender.send(amount)) {\n', '                    ethBalanceOf[msg.sender] = amount;\n', '                }\n', '            }\n', '        }\n', '\n', '        if (fundingGoalReached && beneficiary == msg.sender) {\n', '            if (beneficiary.send(amountRaised)) {\n', '                this.transfer(msg.sender, tokenSupply);\n', '            } else {               \n', '                fundingGoalReached = false;\n', '            }\n', '        }\n', '    }\n', '\n', '    function enableRefunds() public afterDeadline {\n', '        require(msg.sender == beneficiary);\n', '        refundsOpen = true;\n', '    }\n', '}']