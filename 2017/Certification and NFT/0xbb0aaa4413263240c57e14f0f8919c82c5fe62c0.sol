['pragma solidity ^0.4.15;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract ArbiPreIco is Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    //the token being sold\n', '    ERC20 arbiToken;\n', '    address public tokenAddress;\n', '\n', '    /* owner of tokens to spend */ \n', '    address public tokenOwner;\n', '    \n', '    uint public startTime;\n', '    uint public endTime;\n', '    uint public price;\n', '\n', '    uint public hardCapAmount = 33333200;\n', '\n', '    uint public tokensRemaining = hardCapAmount;\n', '\n', '    /**\n', '    * event for token purchase logging\n', '    * @param beneficiary who got the tokens\n', '    * @param amount amount of tokens purchased\n', '    */ \n', '    event TokenPurchase(address indexed beneficiary, uint256 amount);\n', '\n', '    function ArbiPreIco(address token, address owner, uint start, uint end) public {\n', '        tokenAddress = token;\n', '        tokenOwner = owner;\n', '        arbiToken = ERC20(token);\n', '        startTime = start;\n', '        endTime = end;\n', '        price = 0.005 / 100 * 1 ether; //1.00 token = 0.005 ether\n', '    }\n', '\n', '    /**\n', '    * fallback function to receive ether \n', '    */\n', '    function () payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    function buyTokens(address beneficiary) public payable {\n', '        require(beneficiary != 0x0);\n', '        require(isActive());\n', '        require(msg.value >= 0.01 ether);\n', '        uint amount = msg.value;\n', '        uint tokenAmount = amount.div(price);\n', '        makePurchase(beneficiary, tokenAmount);\n', '    }\n', '\n', '    function sendEther(address _to, uint amount) onlyOwner {\n', '        _to.transfer(amount);\n', '    }\n', '    \n', '    function isActive() constant returns (bool active) {\n', '        return now >= startTime && now <= endTime && tokensRemaining > 0;\n', '    }\n', '    \n', '    /** \n', '    * function for external token purchase \n', '    * @param _to receiver of tokens\n', '    * @param amount of tokens to send\n', '    */\n', '    function sendToken(address _to, uint256 amount) onlyOwner {\n', '        makePurchase(_to, amount);\n', '    }\n', '\n', '    function makePurchase(address beneficiary, uint256 amount) private {\n', '        require(amount <= tokensRemaining);\n', '        arbiToken.transferFrom(tokenOwner, beneficiary, amount);\n', '        tokensRemaining = tokensRemaining.sub(amount);\n', '        TokenPurchase(beneficiary, amount);\n', '    }\n', '    \n', '}']