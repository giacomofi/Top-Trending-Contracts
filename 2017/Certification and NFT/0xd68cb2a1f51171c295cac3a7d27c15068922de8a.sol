['pragma solidity ^0.4.11;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Distributable\n', ' * @dev The Distribution contract has multi dealer address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Distributable is Ownable {\n', '  mapping(address => bool) public dealership;\n', '  event Trust(address dealer);\n', '  event Distrust(address dealer);\n', '\n', '  modifier onlyDealers() {\n', '    require(dealership[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  function trust(address newDealer) onlyOwner {\n', '    require(newDealer != address(0));\n', '    require(!dealership[newDealer]);\n', '    dealership[newDealer] = true;\n', '    Trust(newDealer);\n', '  }\n', '\n', '  function distrust(address dealer) onlyOwner {\n', '    require(dealership[dealer]);\n', '    dealership[dealer] = false;\n', '    Distrust(dealer);\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused returns (bool) {\n', '    paused = true;\n', '    Pause();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused returns (bool) {\n', '    paused = false;\n', '    Unpause();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract DistributionToken is StandardToken, Distributable {\n', '  event Mint(address indexed dealer, address indexed to, uint256 value);\n', '  event Burn(address indexed dealer, address indexed from, uint256 value);\n', '\n', '   /**\n', '   * @dev to mint tokens\n', '   * @param _to The address that will recieve the minted tokens.\n', '   * @param _value The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _value) onlyDealers returns (bool) {\n', '    totalSupply = totalSupply.add(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Mint(msg.sender, _to, _value);\n', '    Transfer(address(0), _to, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  function burn(address _from, uint256 _value) onlyDealers returns (bool) {\n', '    totalSupply = totalSupply.sub(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    Burn(msg.sender, _from, _value);\n', '    Transfer(_from, address(0), _value);\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', 'contract EverFountainBeanSale is Ownable, Pausable, Distributable {\n', '  using SafeMath for uint256;\n', '  event Sale(address indexed customer, uint256 value, uint256 amount, uint256 consume, string order, uint256 reward);\n', '  struct FlexibleReward {\n', '    uint256 percentage;\n', '    uint256 limit;\n', '  }\n', '\n', '  uint256 public totalSales;\n', '  uint256 public totalReward;\n', '  uint256 public totalConsume;\n', '  FlexibleReward[] public flexibleRewardLevel;\n', '  uint256 flexibleRewardIndex = 0;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  uint256 public weiRaised;\n', '\n', '  DistributionToken public token;\n', '\n', '  function EverFountainBeanSale(DistributionToken _token, uint256 _rate, address _wallet){\n', '    require(_token != address(0));\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    token = _token;\n', '    wallet = _wallet;\n', '    rate = _rate;\n', '\n', '    flexibleRewardLevel.push(FlexibleReward({ limit:1000000, percentage:15}));\n', '    flexibleRewardLevel.push(FlexibleReward({ limit:3000000, percentage:13}));\n', '    flexibleRewardLevel.push(FlexibleReward({ limit:6000000, percentage:11}));\n', '    flexibleRewardLevel.push(FlexibleReward({ limit:10000000, percentage:9}));\n', '    flexibleRewardLevel.push(FlexibleReward({ limit:15000000, percentage:7}));\n', '    flexibleRewardLevel.push(FlexibleReward({ limit:21000000, percentage:5}));\n', '    flexibleRewardLevel.push(FlexibleReward({ limit:0, percentage:0}));\n', '    trust(msg.sender);\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return token.balanceOf(_owner);\n', '  }\n', '\n', '  function calcFlexibleReward(uint256 amount) constant returns (uint256 reward){\n', '    FlexibleReward memory level = flexibleRewardLevel[flexibleRewardIndex];\n', '    if (level.limit == 0) {\n', '      return 0;\n', '    }\n', '    FlexibleReward memory nextLevel = flexibleRewardLevel[flexibleRewardIndex + 1];\n', '    uint256 futureTotalSales = totalSales.add(amount);\n', '    uint256 benefit;\n', '    if (nextLevel.limit == 0) {\n', '      if (level.limit >= futureTotalSales) {\n', '        return amount.mul(level.percentage).div(100);\n', '      }\n', '      benefit = level.limit.sub(totalSales);\n', '      return benefit.mul(level.percentage).div(100);\n', '    }\n', '\n', '    require(nextLevel.limit > futureTotalSales);\n', '\n', '    if (level.limit >= futureTotalSales) {\n', '      return amount.mul(level.percentage).div(100);\n', '    }\n', '\n', '    benefit = level.limit.sub(totalSales);\n', '    uint256 nextBenefit = amount.sub(benefit);\n', '    return benefit.mul(level.percentage).div(100).add(nextBenefit.mul(nextLevel.percentage).div(100));\n', '\n', '  }\n', '\n', '  function calcFixedReward(uint256 amount) constant returns (uint256 reward){\n', '    uint256 less6000Reward = 0;\n', '    uint256 less24000Percentage = 5;\n', '    uint256 mostPercentage = 15;\n', '\n', '    if (amount < 6000) {\n', '      return less6000Reward;\n', '    }\n', '\n', '    if (amount < 24000) {\n', '      return amount.mul(less24000Percentage).div(100);\n', '    }\n', '\n', '    return amount.mul(mostPercentage).div(100);\n', '  }\n', '\n', '  function calcReward(uint256 amount) constant returns (uint256 reward){\n', '    return calcFixedReward(amount).add(calcFlexibleReward(amount));\n', '  }\n', '\n', '  function flexibleReward() constant returns (uint256 percentage, uint limit){\n', '    FlexibleReward memory level = flexibleRewardLevel[flexibleRewardIndex];\n', '    return (level.percentage, level.limit);\n', '  }\n', '\n', '  function nextFlexibleReward() constant returns (uint256 percentage, uint limit){\n', '    FlexibleReward memory nextLevel = flexibleRewardLevel[flexibleRewardIndex+1];\n', '    return (nextLevel.percentage, nextLevel.limit);\n', '  }\n', '\n', '  function setRate(uint256 _rate) onlyDealers returns(bool) {\n', '    require(_rate > 0);\n', '    rate = _rate;\n', '    return true;\n', '  }\n', '\n', '  function destroy() onlyOwner {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  function changeWallet(address _wallet) onlyOwner returns(bool) {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '    return true;\n', '  }\n', '\n', '  function trade(uint256 amount, uint256 consume, string order) payable whenNotPaused returns(bool){\n', '    require(bytes(order).length > 0);\n', '    uint256 balance;\n', '    if (msg.value == 0) {\n', '      //only consume\n', '      require(consume > 0);\n', '      require(amount == 0);\n', '      balance = token.balanceOf(msg.sender);\n', '      require(balance >= consume);\n', '      totalConsume = totalConsume.add(consume);\n', '      token.burn(msg.sender, consume);\n', '      Sale(msg.sender, msg.value, amount, consume, order, 0);\n', '      return true;\n', '    }\n', '\n', '    require(amount > 0);\n', '    uint256 sales = msg.value.div(rate);\n', '    require(sales == amount);\n', '    totalSales = totalSales.add(sales);\n', '    uint256 reward = calcReward(sales);\n', '    totalReward = totalReward.add(reward);\n', '    FlexibleReward memory level = flexibleRewardLevel[flexibleRewardIndex];\n', '    if (level.limit>0 && totalSales >= level.limit) {\n', '      flexibleRewardIndex = flexibleRewardIndex + 1;\n', '    }\n', '    uint256 gain = sales.add(reward);\n', '\n', '    if (consume == 0) {\n', '      //only sale token\n', '      token.mint(msg.sender, gain);\n', '\n', '      weiRaised = weiRaised.add(msg.value);\n', '      wallet.transfer(msg.value);\n', '\n', '      Sale(msg.sender, msg.value, amount, consume, order, reward);\n', '      return true;\n', '    }\n', '\n', '    balance = token.balanceOf(msg.sender);\n', '    uint256 futureBalance = balance.add(gain);\n', '    require(futureBalance >= consume);\n', '\n', '    totalConsume = totalConsume.add(consume);\n', '    token.mint(msg.sender, gain);\n', '    token.burn(msg.sender, consume);\n', '\n', '    weiRaised = weiRaised.add(msg.value);\n', '    wallet.transfer(msg.value);\n', '\n', '    Sale(msg.sender, msg.value, amount, consume, order, reward);\n', '    return true;\n', '  }\n', '\n', '}']