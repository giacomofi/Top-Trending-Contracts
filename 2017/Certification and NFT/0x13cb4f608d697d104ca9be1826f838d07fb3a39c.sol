['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant public returns (uint256);\n', '  function transfer(address to, uint256 value) internal returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) tokenBalances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) internal returns (bool) {\n', '    //TRANSFER Functionality has been disabled as we wanted to make the token non-tradable\n', "    //and we are nice people so we don't want anyone to not get their payout :)\n", '    return false;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant public returns (uint256 balance) {\n', '    return tokenBalances[_owner];\n', '  }\n', '\n', '}\n', 'contract HareemMinePoolToken is BasicToken, Ownable {\n', '\n', '   using SafeMath for uint256;\n', '   string public constant name = "HareemMinePool";\n', '   string public constant symbol = "HMP";\n', '   uint256 public constant decimals = 18;\n', '\n', '   uint256 constant INITIAL_SUPPLY = 1000 * (10 ** uint256(decimals));\n', '   uint256 public sellPrice = 2;  \n', '   uint256 public buyPrice = 1; \n', '  \n', '   string public constant COLLATERAL_HELD = "1000 ETH";\n', '   uint payout_worth = 0;\n', '   \n', '   event Debug(string message, uint256 num);\n', '   \n', '   mapping(address => uint256) amountLeftToBePaid;\n', '   mapping(address => uint256) partialAmtToBePaid;\n', '   \n', '   address[] listAddr;\n', '   \n', '   //Client addresses\n', '   address ethStore = 0x66Ef84EE378B07012FE44Df83b64Ea2Ae35fD09b;   \n', '   address exchange = 0x093af86909F7E2135aD764e9cB384Ed7311799d3;\n', '   \n', '   uint perTokenPayout = 0;\n', '   uint tokenToTakeBack = 0;\n', '   \n', '   event addr(string message, address sender);\n', '   event logString(string message);\n', '   \n', '   // fallback function can be used to buy tokens\n', '    function () public payable {\n', '    buy(msg.sender);\n', '    }\n', '  \n', '    /**\n', '    * @dev Contructor that gives msg.sender all of existing tokens.\n', '    */\n', '    function HareemMinePoolToken() public {\n', '    owner = ethStore;\n', '    totalSupply = INITIAL_SUPPLY;\n', '    tokenBalances[owner] = INITIAL_SUPPLY;\n', '    }\n', '    \n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        transferOwnership(newOwner);\n', '    }\n', '\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) public onlyOwner {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '  \n', '    function payoutWorth(address beneficiary) constant public returns (uint amount) {\n', '        amount = tokenBalances[beneficiary].mul(sellPrice);\n', '    }\n', '    \n', '    function tokensLeft() public view returns (uint amount) {\n', '        amount = tokenBalances[owner];\n', '    }\n', '    \n', '    function payoutLeft() internal constant returns (uint amount) {\n', '        for (uint i=0;i<listAddr.length;i++)\n', '        {\n', '            amount = amount + amountLeftToBePaid[listAddr[i]];\n', '        }\n', '        return amount;\n', '    }\n', '    function doPayout() payable public onlyOwner{\n', '      uint payLeft = payoutLeft();\n', '      uint cashBack = msg.value;\n', '      require (payLeft>0 && cashBack <=payLeft);\n', '      uint soldTokens = totalSupply.sub(tokenBalances[owner]);\n', '      cashBack = cashBack.mul(10**18);\n', '      perTokenPayout =cashBack.div(soldTokens);\n', '      tokenToTakeBack = perTokenPayout.div(sellPrice);\n', '      makePayments();\n', '    }\n', '    \n', '    function makePayments() internal {\n', '        uint exchangeAmount;\n', '        uint customerAmt;\n', '        for (uint i=0;i<listAddr.length;i++)\n', '        {\n', '            uint payAmt = amountLeftToBePaid[listAddr[i]];\n', '            if (payAmt >0)\n', '            {\n', '                uint tokensHeld = payAmt.div(sellPrice);\n', '                if (tokensHeld >0)\n', '                {\n', '                    uint sendMoney = tokensHeld.mul(perTokenPayout);\n', '                    sendMoney = sendMoney.div(10**decimals);\n', '                    uint takeBackTokens = tokenToTakeBack.mul(tokensHeld);\n', '                    takeBackTokens = takeBackTokens.div(10**decimals);\n', '                    (exchangeAmount,customerAmt) = getExchangeAndEthStoreAmount(sendMoney); \n', '                    exchange.transfer(exchangeAmount);\n', '                    listAddr[i].transfer(customerAmt);\n', '                    amountLeftToBePaid[listAddr[i]] = amountLeftToBePaid[listAddr[i]].sub(sendMoney);\n', '                    tokenBalances[listAddr[i]] = tokenBalances[listAddr[i]].sub(takeBackTokens);\n', '                    tokenBalances[owner] = tokenBalances[owner].add(takeBackTokens);\n', '                    Transfer(listAddr[i],owner, takeBackTokens); \n', '                    takeBackTokens = takeBackTokens.div(10**decimals);\n', '                }\n', '            }\n', '        }\n', '    }\n', '    \n', '    function buy(address beneficiary) payable public returns (uint amount) {\n', '        require (msg.value >= 10 ** decimals);   //  see this\n', '        uint exchangeAmount;\n', '        uint ethStoreAmt;\n', '        (exchangeAmount,ethStoreAmt) = getExchangeAndEthStoreAmount(msg.value); \n', '        ethStore.transfer(ethStoreAmt);    \n', '        exchange.transfer(exchangeAmount);\n', '        uint tempBuyPrice = buyPrice.mul(10**decimals);\n', '        amount = msg.value.div(tempBuyPrice);                    // calculates the amount\n', '        amount = amount.mul(10**decimals);\n', '        require(tokenBalances[owner] >= amount);               // checks if it has enough to sell\n', "        tokenBalances[beneficiary] = tokenBalances[beneficiary].add(amount);                  // adds the amount to buyer's balance\n", "        tokenBalances[owner] = tokenBalances[owner].sub(amount);                        // subtracts amount from seller's balance\n", '        amountLeftToBePaid[beneficiary] = amount.mul(sellPrice);   //input how much has to be paid out to the customer later on\n', '        Transfer(owner, beneficiary, amount);\n', '        listAddr.push(beneficiary);\n', '        return amount;                                    // ends function and returns\n', '    }\n', '   \n', '   function getExchangeAndEthStoreAmount(uint value) internal pure returns (uint exchangeAmt, uint ethStoreAmt) {\n', '       exchangeAmt = value.div(100);    //since 1% means divide by 100\n', '       ethStoreAmt = value - exchangeAmt;   //the rest would be eth store amount\n', '   }\n', '}']