['pragma solidity ^0.4.17;\n', '/**\n', ' * @title ERC20\n', ' * @dev ERC20 interface\n', ' */\n', 'contract ERC20 {\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract Controlled {\n', '    /// @notice The address of the controller is the only address that can call\n', '    ///  a function with this modifier\n', '    modifier onlyController { require(msg.sender == controller); _; }\n', '    address public controller;\n', '    function Controlled() public { controller = msg.sender;}\n', '    /// @notice Changes the controller of the contract\n', '    /// @param _newController The new controller of the contract\n', '    function changeController(address _newController) public onlyController {\n', '        controller = _newController;\n', '    }\n', '}\n', '/**\n', ' * @title MiniMe interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20MiniMe is ERC20, Controlled {\n', '    function approveAndCall(address _spender, uint256 _amount, bytes _extraData) public returns (bool);\n', '    function totalSupply() public view returns (uint);\n', '    function balanceOfAt(address _owner, uint _blockNumber) public view returns (uint);\n', '    function totalSupplyAt(uint _blockNumber) public view returns(uint);\n', '    function createCloneToken(string _cloneTokenName, uint8 _cloneDecimalUnits, string _cloneTokenSymbol, uint _snapshotBlock, bool _transfersEnabled) public returns(address);\n', '    function generateTokens(address _owner, uint _amount) public returns (bool);\n', '    function destroyTokens(address _owner, uint _amount)  public returns (bool);\n', '    function enableTransfers(bool _transfersEnabled) public;\n', '    function isContract(address _addr) internal view returns(bool);\n', '    function claimTokens(address _token) public;\n', '    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n', '    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n', '}\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '  // The token being sold\n', '  ERC20MiniMe public token;\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '  // address where funds are collected\n', '  address public wallet;\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != 0x0);\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '  // fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    buyTokens(beneficiary, msg.value);\n', '  }\n', '  // implementation of low level token purchase function\n', '  function buyTokens(address beneficiary, uint256 weiAmount) internal {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase(weiAmount));\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    transferToken(beneficiary, weiAmount);\n', '    forwardFunds(weiAmount);\n', '  }\n', '  // low level transfer token\n', '  // override to create custom token transfer mechanism, eg. pull pattern\n', '  function transferToken(address beneficiary, uint256 weiAmount) internal {\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '    token.generateTokens(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '  }\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds(uint256 weiAmount) internal {\n', '    wallet.transfer(weiAmount);\n', '  }\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase(uint256 weiAmount) internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = weiAmount != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '  // @return true if crowdsale has started\n', '  function hasStarted() public view returns (bool) {\n', '    return now >= startTime;\n', '  }\n', '}\n', '/// @dev The token controller contract must implement these functions\n', 'contract TokenController {\n', '    ERC20MiniMe public ethealToken;\n', '    address public SALE; // address where sale tokens are located\n', '    /// @notice needed for hodler handling\n', '    function addHodlerStake(address _beneficiary, uint _stake) public;\n', '    function setHodlerStake(address _beneficiary, uint256 _stake) public;\n', '    function setHodlerTime(uint256 _time) public;\n', '    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n', '    /// @param _owner The address that sent the ether to create tokens\n', '    /// @return True if the ether is accepted, false if it throws\n', '    function proxyPayment(address _owner) public payable returns(bool);\n', '    /// @notice Notifies the controller about a token transfer allowing the\n', '    ///  controller to react if desired\n', '    /// @param _from The origin of the transfer\n', '    /// @param _to The destination of the transfer\n', '    /// @param _amount The amount of the transfer\n', '    /// @return False if the controller does not authorize the transfer\n', '    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\n', '    /// @notice Notifies the controller about an approval allowing the\n', '    ///  controller to react if desired\n', '    /// @param _owner The address that calls `approve()`\n', '    /// @param _spender The spender in the `approve()` call\n', '    /// @param _amount The amount in the `approve()` call\n', '    /// @return False if the controller does not authorize the approval\n', '    function onApprove(address _owner, address _spender, uint _amount) public returns(bool);\n', '}\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '  bool public paused = false;\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '/**\n', ' * @title Hodler\n', ' * @dev Handles hodler reward, TokenController should create and own it.\n', ' */\n', 'contract Hodler is Ownable {\n', '    using SafeMath for uint;\n', '    // HODLER reward tracker\n', '    // stake amount per address\n', '    struct HODL {\n', '        uint256 stake;\n', '        // moving ANY funds invalidates hodling of the address\n', '        bool invalid;\n', '        bool claimed3M;\n', '        bool claimed6M;\n', '        bool claimed9M;\n', '    }\n', '    mapping (address => HODL) public hodlerStakes;\n', '    // total current staking value and hodler addresses\n', '    uint256 public hodlerTotalValue;\n', '    uint256 public hodlerTotalCount;\n', '    // store dates and total stake values for 3 - 6 - 9 months after normal sale\n', '    uint256 public hodlerTotalValue3M;\n', '    uint256 public hodlerTotalValue6M;\n', '    uint256 public hodlerTotalValue9M;\n', '    uint256 public hodlerTimeStart;\n', '    uint256 public hodlerTime3M;\n', '    uint256 public hodlerTime6M;\n', '    uint256 public hodlerTime9M;\n', '    // reward HEAL token amount\n', '    uint256 public TOKEN_HODL_3M;\n', '    uint256 public TOKEN_HODL_6M;\n', '    uint256 public TOKEN_HODL_9M;\n', '    // total amount of tokens claimed so far\n', '    uint256 public claimedTokens;\n', '    \n', '    event LogHodlSetStake(address indexed _setter, address indexed _beneficiary, uint256 _value);\n', '    event LogHodlClaimed(address indexed _setter, address indexed _beneficiary, uint256 _value);\n', '    event LogHodlStartSet(address indexed _setter, uint256 _time);\n', '    /// @dev Only before hodl is started\n', '    modifier beforeHodlStart() {\n', '        if (hodlerTimeStart == 0 || now <= hodlerTimeStart)\n', '            _;\n', '    }\n', '    /// @dev Contructor, it should be created by a TokenController\n', '    function Hodler(uint256 _stake3m, uint256 _stake6m, uint256 _stake9m) {\n', '        TOKEN_HODL_3M = _stake3m;\n', '        TOKEN_HODL_6M = _stake6m;\n', '        TOKEN_HODL_9M = _stake9m;\n', '    }\n', '    /// @notice Adding hodler stake to an account\n', '    /// @dev Only owner contract can call it and before hodling period starts\n', '    /// @param _beneficiary Recepient address of hodler stake\n', '    /// @param _stake Amount of additional hodler stake\n', '    function addHodlerStake(address _beneficiary, uint256 _stake) public onlyOwner beforeHodlStart {\n', '        // real change and valid _beneficiary is needed\n', '        if (_stake == 0 || _beneficiary == address(0))\n', '            return;\n', '        \n', '        // add stake and maintain count\n', '        if (hodlerStakes[_beneficiary].stake == 0)\n', '            hodlerTotalCount = hodlerTotalCount.add(1);\n', '        hodlerStakes[_beneficiary].stake = hodlerStakes[_beneficiary].stake.add(_stake);\n', '        hodlerTotalValue = hodlerTotalValue.add(_stake);\n', '        LogHodlSetStake(msg.sender, _beneficiary, hodlerStakes[_beneficiary].stake);\n', '    }\n', '    /// @notice Setting hodler stake of an account\n', '    /// @dev Only owner contract can call it and before hodling period starts\n', '    /// @param _beneficiary Recepient address of hodler stake\n', '    /// @param _stake Amount to set the hodler stake\n', '    function setHodlerStake(address _beneficiary, uint256 _stake) public onlyOwner beforeHodlStart {\n', '        // real change and valid _beneficiary is needed\n', '        if (hodlerStakes[_beneficiary].stake == _stake || _beneficiary == address(0))\n', '            return;\n', '        \n', '        // add stake and maintain count\n', '        if (hodlerStakes[_beneficiary].stake == 0 && _stake > 0) {\n', '            hodlerTotalCount = hodlerTotalCount.add(1);\n', '        } else if (hodlerStakes[_beneficiary].stake > 0 && _stake == 0) {\n', '            hodlerTotalCount = hodlerTotalCount.sub(1);\n', '        }\n', '        uint256 _diff = _stake > hodlerStakes[_beneficiary].stake ? _stake.sub(hodlerStakes[_beneficiary].stake) : hodlerStakes[_beneficiary].stake.sub(_stake);\n', '        if (_stake > hodlerStakes[_beneficiary].stake) {\n', '            hodlerTotalValue = hodlerTotalValue.add(_diff);\n', '        } else {\n', '            hodlerTotalValue = hodlerTotalValue.sub(_diff);\n', '        }\n', '        hodlerStakes[_beneficiary].stake = _stake;\n', '        LogHodlSetStake(msg.sender, _beneficiary, _stake);\n', '    }\n', '    /// @notice Setting hodler start period.\n', '    /// @param _time The time when hodler reward starts counting\n', '    function setHodlerTime(uint256 _time) public onlyOwner beforeHodlStart {\n', '        require(_time >= now);\n', '        hodlerTimeStart = _time;\n', '        hodlerTime3M = _time.add(90 days);\n', '        hodlerTime6M = _time.add(180 days);\n', '        hodlerTime9M = _time.add(270 days);\n', '        LogHodlStartSet(msg.sender, _time);\n', '    }\n', '    /// @notice Invalidates hodler account \n', '    /// @dev Gets called by EthealController#onTransfer before every transaction\n', '    function invalidate(address _account) public onlyOwner {\n', '        if (hodlerStakes[_account].stake > 0 && !hodlerStakes[_account].invalid) {\n', '            hodlerStakes[_account].invalid = true;\n', '            hodlerTotalValue = hodlerTotalValue.sub(hodlerStakes[_account].stake);\n', '            hodlerTotalCount = hodlerTotalCount.sub(1);\n', '        }\n', '        // update hodl total values "automatically" - whenever someone sends funds thus\n', '        updateAndGetHodlTotalValue();\n', '    }\n', '    /// @notice Claiming HODL reward for msg.sender\n', '    function claimHodlReward() public {\n', '        claimHodlRewardFor(msg.sender);\n', '    }\n', '    /// @notice Claiming HODL reward for an address\n', '    function claimHodlRewardFor(address _beneficiary) public {\n', '        // only when the address has a valid stake\n', '        require(hodlerStakes[_beneficiary].stake > 0 && !hodlerStakes[_beneficiary].invalid);\n', '        uint256 _stake = 0;\n', '        \n', '        // update hodl total values\n', '        updateAndGetHodlTotalValue();\n', '        // claim hodl if not claimed\n', '        if (!hodlerStakes[_beneficiary].claimed3M && now >= hodlerTime3M) {\n', '            _stake = _stake.add(hodlerStakes[_beneficiary].stake.mul(TOKEN_HODL_3M).div(hodlerTotalValue3M));\n', '            hodlerStakes[_beneficiary].claimed3M = true;\n', '        }\n', '        if (!hodlerStakes[_beneficiary].claimed6M && now >= hodlerTime6M) {\n', '            _stake = _stake.add(hodlerStakes[_beneficiary].stake.mul(TOKEN_HODL_6M).div(hodlerTotalValue6M));\n', '            hodlerStakes[_beneficiary].claimed6M = true;\n', '        }\n', '        if (!hodlerStakes[_beneficiary].claimed9M && now >= hodlerTime9M) {\n', '            _stake = _stake.add(hodlerStakes[_beneficiary].stake.mul(TOKEN_HODL_9M).div(hodlerTotalValue9M));\n', '            hodlerStakes[_beneficiary].claimed9M = true;\n', '        }\n', '        if (_stake > 0) {\n', '            // increasing claimed tokens\n', '            claimedTokens = claimedTokens.add(_stake);\n', '            // transferring tokens\n', '            require(TokenController(owner).ethealToken().transfer(_beneficiary, _stake));\n', '            // log\n', '            LogHodlClaimed(msg.sender, _beneficiary, _stake);\n', '        }\n', '    }\n', '    /// @notice claimHodlRewardFor() for multiple addresses\n', '    /// @dev Anyone can call this function and distribute hodl rewards\n', '    /// @param _beneficiaries Array of addresses for which we want to claim hodl rewards\n', '    function claimHodlRewardsFor(address[] _beneficiaries) external {\n', '        for (uint256 i = 0; i < _beneficiaries.length; i++)\n', '            claimHodlRewardFor(_beneficiaries[i]);\n', '    }\n', '    /// @notice Setting 3 - 6 - 9 months total staking hodl value if time is come\n', '    function updateAndGetHodlTotalValue() public returns (uint) {\n', '        if (now >= hodlerTime3M && hodlerTotalValue3M == 0) {\n', '            hodlerTotalValue3M = hodlerTotalValue;\n', '        }\n', '        if (now >= hodlerTime6M && hodlerTotalValue6M == 0) {\n', '            hodlerTotalValue6M = hodlerTotalValue;\n', '        }\n', '        if (now >= hodlerTime9M && hodlerTotalValue9M == 0) {\n', '            hodlerTotalValue9M = hodlerTotalValue;\n', '            // since we can transfer more tokens to this contract, make it possible to retain more than the predefined limit\n', '            TOKEN_HODL_9M = TokenController(owner).ethealToken().balanceOf(this).sub(TOKEN_HODL_3M).sub(TOKEN_HODL_6M).add(claimedTokens);\n', '        }\n', '        return hodlerTotalValue;\n', '    }\n', '}\n', '/**\n', ' * @title TokenVesting\n', ' * @dev A token holder contract that can release its token balance gradually like a\n', ' * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n', ' * owner.\n', ' */\n', 'contract TokenVesting is Ownable {\n', '  using SafeMath for uint256;\n', '  event Released(uint256 amount);\n', '  event Revoked();\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '  uint256 public cliff;\n', '  uint256 public start;\n', '  uint256 public duration;\n', '  bool public revocable;\n', '  mapping (address => uint256) public released;\n', '  mapping (address => bool) public revoked;\n', '  /**\n', '   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n', '   * of the balance will have vested.\n', '   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n', '   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n', '   * @param _duration duration in seconds of the period in which the tokens will vest\n', '   * @param _revocable whether the vesting is revocable or not\n', '   */\n', '  function TokenVesting(address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, bool _revocable) {\n', '    require(_beneficiary != address(0));\n', '    require(_cliff <= _duration);\n', '    beneficiary = _beneficiary;\n', '    revocable = _revocable;\n', '    duration = _duration;\n', '    cliff = _start.add(_cliff);\n', '    start = _start;\n', '  }\n', '  /**\n', '   * @notice Transfers vested tokens to beneficiary.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function release(ERC20MiniMe token) public {\n', '    uint256 unreleased = releasableAmount(token);\n', '    require(unreleased > 0);\n', '    released[token] = released[token].add(unreleased);\n', '    require(token.transfer(beneficiary, unreleased));\n', '    Released(unreleased);\n', '  }\n', '  /**\n', '   * @notice Allows the owner to revoke the vesting. Tokens already vested\n', '   * remain in the contract, the rest are returned to the owner.\n', '   * @param token ERC20MiniMe token which is being vested\n', '   */\n', '  function revoke(ERC20MiniMe token) public onlyOwner {\n', '    require(revocable);\n', '    require(!revoked[token]);\n', '    uint256 balance = token.balanceOf(this);\n', '    uint256 unreleased = releasableAmount(token);\n', '    uint256 refund = balance.sub(unreleased);\n', '    revoked[token] = true;\n', '    require(token.transfer(owner, refund));\n', '    Revoked();\n', '  }\n', '  /**\n', "   * @dev Calculates the amount that has already vested but hasn't been released yet.\n", '   * @param token ERC20MiniMe token which is being vested\n', '   */\n', '  function releasableAmount(ERC20MiniMe token) public view returns (uint256) {\n', '    return vestedAmount(token).sub(released[token]);\n', '  }\n', '  /**\n', '   * @dev Calculates the amount that has already vested.\n', '   * @param token ERC20MiniMe token which is being vested\n', '   */\n', '  function vestedAmount(ERC20MiniMe token) public view returns (uint256) {\n', '    uint256 currentBalance = token.balanceOf(this);\n', '    uint256 totalBalance = currentBalance.add(released[token]);\n', '    if (now < cliff) {\n', '      return 0;\n', '    } else if (now >= start.add(duration) || revoked[token]) {\n', '      return totalBalance;\n', '    } else {\n', '      return totalBalance.mul(now.sub(start)).div(duration);\n', '    }\n', '  }\n', '}\n', '/**\n', ' * @title claim accidentally sent tokens\n', ' */\n', 'contract HasNoTokens is Ownable {\n', '    event ExtractedTokens(address indexed _token, address indexed _claimer, uint _amount);\n', '    /// @notice This method can be used to extract mistakenly\n', '    ///  sent tokens to this contract.\n', '    /// @param _token The address of the token contract that you want to recover\n', '    ///  set to 0 in case you want to extract ether.\n', '    /// @param _claimer Address that tokens will be send to\n', '    function extractTokens(address _token, address _claimer) onlyOwner public {\n', '        if (_token == 0x0) {\n', '            _claimer.transfer(this.balance);\n', '            return;\n', '        }\n', '        ERC20 token = ERC20(_token);\n', '        uint balance = token.balanceOf(this);\n', '        token.transfer(_claimer, balance);\n', '        ExtractedTokens(_token, _claimer, balance);\n', '    }\n', '}\n', '/**\n', ' * @title EthealController\n', ' * @author thesved\n', ' * @notice Controller of the Etheal Token\n', ' * @dev Crowdsale can be only replaced when no active crowdsale is running.\n', ' *  The contract is paused by default. It has to be unpaused to enable token transfer.\n', ' */\n', 'contract EthealController is Pausable, HasNoTokens, TokenController {\n', '    using SafeMath for uint;\n', '    // when migrating this contains the address of the new controller\n', '    TokenController public newController;\n', '    // token contract\n', '    ERC20MiniMe public ethealToken;\n', '    // distribution of tokens\n', '    uint256 public constant ETHEAL_UNIT = 10**18;\n', '    uint256 public constant THOUSAND = 10**3;\n', '    uint256 public constant MILLION = 10**6;\n', '    uint256 public constant TOKEN_SALE1_PRE = 9 * MILLION * ETHEAL_UNIT;\n', '    uint256 public constant TOKEN_SALE1_NORMAL = 20 * MILLION * ETHEAL_UNIT;\n', '    uint256 public constant TOKEN_SALE2 = 9 * MILLION * ETHEAL_UNIT;\n', '    uint256 public constant TOKEN_SALE3 = 5 * MILLION * ETHEAL_UNIT;\n', '    uint256 public constant TOKEN_HODL_3M = 1 * MILLION * ETHEAL_UNIT;\n', '    uint256 public constant TOKEN_HODL_6M = 2 * MILLION * ETHEAL_UNIT;\n', '    uint256 public constant TOKEN_HODL_9M = 7 * MILLION * ETHEAL_UNIT;\n', '    uint256 public constant TOKEN_REFERRAL = 2 * MILLION * ETHEAL_UNIT;\n', '    uint256 public constant TOKEN_BOUNTY = 1500 * THOUSAND * ETHEAL_UNIT;\n', '    uint256 public constant TOKEN_COMMUNITY = 20 * MILLION * ETHEAL_UNIT;\n', '    uint256 public constant TOKEN_TEAM = 14 * MILLION * ETHEAL_UNIT;\n', '    uint256 public constant TOKEN_FOUNDERS = 6500 * THOUSAND * ETHEAL_UNIT;\n', '    uint256 public constant TOKEN_INVESTORS = 3 * MILLION * ETHEAL_UNIT;\n', '    // addresses only SALE will remain, the others will be real eth addresses\n', '    address public SALE = 0X1;\n', '    address public FOUNDER1 = 0x296dD2A2879fEBe2dF65f413999B28C053397fC5;\n', '    address public FOUNDER2 = 0x0E2feF8e4125ed0f49eD43C94b2B001C373F74Bf;\n', '    address public INVESTOR1 = 0xAAd27eD6c93d91aa60Dc827bE647e672d15e761A;\n', '    address public INVESTOR2 = 0xb906665f4ef609189A31CE55e01C267EC6293Aa5;\n', '    // addresses for multisig and crowdsale\n', '    address public ethealMultisigWallet;\n', '    Crowdsale public crowdsale;\n', '    // hodler reward contract\n', '    Hodler public hodlerReward;\n', '    // token grants\n', '    TokenVesting[] public tokenGrants;\n', '    uint256 public constant VESTING_TEAM_CLIFF = 365 days;\n', '    uint256 public constant VESTING_TEAM_DURATION = 4 * 365 days;\n', '    uint256 public constant VESTING_ADVISOR_CLIFF = 3 * 30 days;\n', '    uint256 public constant VESTING_ADVISOR_DURATION = 6 * 30 days;\n', '    /// @dev only the crowdsale can call it\n', '    modifier onlyCrowdsale() {\n', '        require(msg.sender == address(crowdsale));\n', '        _;\n', '    }\n', '    /// @dev only the crowdsale can call it\n', '    modifier onlyEthealMultisig() {\n', '        require(msg.sender == address(ethealMultisigWallet));\n', '        _;\n', '    }\n', '    ////////////////\n', '    // Constructor, overrides\n', '    ////////////////\n', '    /// @notice Constructor for Etheal Controller\n', '    function EthealController(address _wallet) {\n', '        require(_wallet != address(0));\n', '        paused = true;\n', '        ethealMultisigWallet = _wallet;\n', '    }\n', '    /// @dev overrides HasNoTokens#extractTokens to make it possible to extract any tokens after migration or before that any tokens except etheal\n', '    function extractTokens(address _token, address _claimer) onlyOwner public {\n', '        require(newController != address(0) || _token != address(ethealToken));\n', '        super.extractTokens(_token, _claimer);\n', '    }\n', '    ////////////////\n', '    // Manage crowdsale\n', '    ////////////////\n', "    /// @notice Set crowdsale address and transfer HEAL tokens from ethealController's SALE address\n", '    /// @dev Crowdsale can be only set when the current crowdsale is not active and ethealToken is set\n', '    function setCrowdsaleTransfer(address _sale, uint256 _amount) public onlyOwner {\n', '        require (_sale != address(0) && !isCrowdsaleOpen() && address(ethealToken) != address(0));\n', '        crowdsale = Crowdsale(_sale);\n', '        // transfer HEAL tokens to crowdsale account from the account of controller\n', '        require(ethealToken.transferFrom(SALE, _sale, _amount));\n', '    }\n', '    /// @notice Is there a not ended crowdsale?\n', '    /// @return true if there is no crowdsale or the current crowdsale is not yet ended but started\n', '    function isCrowdsaleOpen() public view returns (bool) {\n', '        return address(crowdsale) != address(0) && !crowdsale.hasEnded() && crowdsale.hasStarted();\n', '    }\n', '    ////////////////\n', '    // Manage grants\n', '    ////////////////\n', '    /// @notice Grant vesting token to an address\n', '    function createGrant(address _beneficiary, uint256 _start, uint256 _amount, bool _revocable, bool _advisor) public onlyOwner {\n', '        require(_beneficiary != address(0) && _amount > 0 && _start >= now);\n', '        // create token grant\n', '        if (_advisor) {\n', '            tokenGrants.push(new TokenVesting(_beneficiary, _start, VESTING_ADVISOR_CLIFF, VESTING_ADVISOR_DURATION, _revocable));\n', '        } else {\n', '            tokenGrants.push(new TokenVesting(_beneficiary, _start, VESTING_TEAM_CLIFF, VESTING_TEAM_DURATION, _revocable));\n', '        }\n', '        // transfer funds to the grant\n', '        transferToGrant(tokenGrants.length.sub(1), _amount);\n', '    }\n', '    /// @notice Transfer tokens to a grant until it is starting\n', '    function transferToGrant(uint256 _id, uint256 _amount) public onlyOwner {\n', '        require(_id < tokenGrants.length && _amount > 0 && now <= tokenGrants[_id].start());\n', '        // transfer funds to the grant\n', '        require(ethealToken.transfer(address(tokenGrants[_id]), _amount));\n', '    }\n', '    /// @dev Revoking grant\n', '    function revokeGrant(uint256 _id) public onlyOwner {\n', '        require(_id < tokenGrants.length);\n', '        tokenGrants[_id].revoke(ethealToken);\n', '    }\n', '    /// @notice Returns the token grant count\n', '    function getGrantCount() view public returns (uint) {\n', '        return tokenGrants.length;\n', '    }\n', '    ////////////////\n', '    // BURN, handle ownership - only multsig can call these functions!\n', '    ////////////////\n', '    /// @notice contract can burn its own or its sale tokens\n', '    function burn(address _where, uint256 _amount) public onlyEthealMultisig {\n', '        require(_where == address(this) || _where == SALE);\n', '        require(ethealToken.destroyTokens(_where, _amount));\n', '    }\n', '    /// @notice replaces controller when it was not yet replaced, only multisig can do it\n', '    function setNewController(address _controller) public onlyEthealMultisig {\n', '        require(_controller != address(0) && newController == address(0));\n', '        newController = TokenController(_controller);\n', '        ethealToken.changeController(_controller);\n', '        hodlerReward.transferOwnership(_controller);\n', '        // send eth\n', '        uint256 _stake = this.balance;\n', '        if (_stake > 0) {\n', '            _controller.transfer(_stake);\n', '        }\n', '        // send tokens\n', '        _stake = ethealToken.balanceOf(this);\n', '        if (_stake > 0) {\n', '            ethealToken.transfer(_controller, _stake);\n', '        }\n', '    }\n', '    /// @notice Set new multisig wallet, to make it upgradable.\n', '    function setNewMultisig(address _wallet) public onlyEthealMultisig {\n', '        require(_wallet != address(0));\n', '        ethealMultisigWallet = _wallet;\n', '    }\n', '    ////////////////\n', '    // When PAUSED\n', '    ////////////////\n', '    /// @notice set the token, if no hodler provided then creates a hodler reward contract\n', '    function setEthealToken(address _token, address _hodler) public onlyOwner whenPaused {\n', '        require(_token != address(0));\n', '        ethealToken = ERC20MiniMe(_token);\n', '        \n', '        if (_hodler != address(0)) {\n', '            // set hodler reward contract if provided\n', '            hodlerReward = Hodler(_hodler);\n', '        } else if (hodlerReward == address(0)) {\n', '            // create hodler reward contract if not yet created\n', '            hodlerReward = new Hodler(TOKEN_HODL_3M, TOKEN_HODL_6M, TOKEN_HODL_9M);\n', '        }\n', '        // MINT tokens if not minted yet\n', '        if (ethealToken.totalSupply() == 0) {\n', '            // sale\n', '            ethealToken.generateTokens(SALE, TOKEN_SALE1_PRE.add(TOKEN_SALE1_NORMAL).add(TOKEN_SALE2).add(TOKEN_SALE3));\n', '            // hodler reward\n', '            ethealToken.generateTokens(address(hodlerReward), TOKEN_HODL_3M.add(TOKEN_HODL_6M).add(TOKEN_HODL_9M));\n', '            // bounty + referral\n', '            ethealToken.generateTokens(owner, TOKEN_BOUNTY.add(TOKEN_REFERRAL));\n', '            // community fund\n', '            ethealToken.generateTokens(address(ethealMultisigWallet), TOKEN_COMMUNITY);\n', '            // team -> grantable\n', '            ethealToken.generateTokens(address(this), TOKEN_FOUNDERS.add(TOKEN_TEAM));\n', '            // investors\n', '            ethealToken.generateTokens(INVESTOR1, TOKEN_INVESTORS.div(3).mul(2));\n', '            ethealToken.generateTokens(INVESTOR2, TOKEN_INVESTORS.div(3));\n', '        }\n', '    }\n', '    ////////////////\n', '    // Proxy for Hodler contract\n', '    ////////////////\n', '    \n', '    /// @notice Proxy call for setting hodler start time\n', '    function setHodlerTime(uint256 _time) public onlyCrowdsale {\n', '        hodlerReward.setHodlerTime(_time);\n', '    }\n', '    /// @notice Proxy call for adding hodler stake\n', '    function addHodlerStake(address _beneficiary, uint256 _stake) public onlyCrowdsale {\n', '        hodlerReward.addHodlerStake(_beneficiary, _stake);\n', '    }\n', '    /// @notice Proxy call for setting hodler stake\n', '    function setHodlerStake(address _beneficiary, uint256 _stake) public onlyCrowdsale {\n', '        hodlerReward.setHodlerStake(_beneficiary, _stake);\n', '    }\n', '    ////////////////\n', '    // MiniMe Controller functions\n', '    ////////////////\n', '    /// @notice No eth payment to the token contract\n', '    function proxyPayment(address _owner) payable public returns (bool) {\n', '        revert();\n', '    }\n', '    /// @notice Before transfers are enabled for everyone, only this and the crowdsale contract is allowed to distribute HEAL\n', '    function onTransfer(address _from, address _to, uint256 _amount) public returns (bool) {\n', '        // moving any funds makes hodl participation invalid\n', '        hodlerReward.invalidate(_from);\n', '        return !paused || _from == address(this) || _to == address(this) || _from == address(crowdsale) || _to == address(crowdsale);\n', '    }\n', '    function onApprove(address _owner, address _spender, uint256 _amount) public returns (bool) {\n', '        return !paused;\n', '    }\n', '    /// @notice Retrieve mistakenly sent tokens (other than the etheal token) from the token contract \n', '    function claimTokenTokens(address _token) public onlyOwner {\n', '        require(_token != address(ethealToken));\n', '        ethealToken.claimTokens(_token);\n', '    }\n', '}']