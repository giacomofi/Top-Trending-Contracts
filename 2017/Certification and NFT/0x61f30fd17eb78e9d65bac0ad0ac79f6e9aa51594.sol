['/**\n', ' * @title METTA platform token & preICO crowdsale implementasion\n', ' * @author Maxim Akimov - <devstylesoftware@gmail.com>\n', ' * @author Dmitrii Bykov - <bykoffdn@gmail.com>\n', ' */\n', '\n', 'pragma solidity ^0.4.15;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    \n', '\tfunction mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '\t\tuint256 c = a * b;\n', '\t\tassert(a == 0 || c / a == b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n', '\t\tuint256 c = a / b;\n', "\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\t\treturn c;\n', '\t}\n', '\n', '\tfunction sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '\t\tassert(b <= a);\n', '\t\treturn a - b;\n', '\t}\n', '\n', '\tfunction add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '\t\tuint256 c = a + b;\n', '\t\tassert(c >= a);\n', '\t\treturn c;\n', '\t}\n', '  \n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '\tuint256 public totalSupply;\n', '\tfunction balanceOf(address who) constant returns (uint256);\n', '\tfunction transfer(address to, uint256 value) returns (bool);\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '\tfunction allowance(address owner, address spender) constant returns (uint256);\n', '\tfunction transferFrom(address from, address to, uint256 value) returns (bool);\n', '\tfunction approve(address spender, uint256 value) returns (bool);\n', '\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    \n', '\tusing SafeMath for uint256;\n', '\n', '\tmapping(address => uint256) balances;\n', '\n', '\t/**\n', '\t* @dev transfer token for a specified address\n', '\t* @param _to The address to transfer to.\n', '\t* @param _value The amount to be transferred.\n', '\t*/\n', '\tfunction transfer(address _to, uint256 _value) returns (bool) {\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\tTransfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Gets the balance of the specified address.\n', '\t* @param _owner The address to query the the balance of. \n', '\t* @return An uint256 representing the amount owned by the passed address.\n', '\t*/\n', '\tfunction balanceOf(address _owner) constant returns (uint256 balance) {\n', '\t\treturn balances[_owner];\n', '\t}\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '\tmapping (address => mapping (address => uint256)) allowed;\n', '\n', '\t/**\n', '\t* @dev Transfer tokens from one address to another\n', '\t* @param _from address The address which you want to send tokens from\n', '\t* @param _to address The address which you want to transfer to\n', '\t* @param _value uint256 the amout of tokens to be transfered\n', '\t*/\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '\t  \n', '\t\tvar _allowance = allowed[_from][msg.sender];\n', '\n', '\t\t// Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '\t\t// require (_value <= _allowance);\n', '\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\tbalances[_from] = balances[_from].sub(_value);\n', '\t\tallowed[_from][msg.sender] = _allowance.sub(_value);\n', '\t\tTransfer(_from, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '\t* @param _spender The address which will spend the funds.\n', '\t* @param _value The amount of tokens to be spent.\n', '\t*/\n', '\tfunction approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '\t\t// To change the approve amount you first have to reduce the addresses`\n', '\t\t//  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '\t\t//  already 0 to mitigate the race condition described here:\n', '\t\t//  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\t\trequire((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '\t\tallowed[msg.sender][_spender] = _value;\n', '\t\tApproval(msg.sender, _spender, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '\t* @param _owner address The address which owns the funds.\n', '\t* @param _spender address The address which will spend the funds.\n', '\t* @return A uint256 specifing the amount of tokens still available for the spender.\n', '\t*/\n', '\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '\t\treturn allowed[_owner][_spender];\n', '\t}\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '\taddress public owner;\n', '\taddress public ownerCandidat;\n', '\n', '\t/**\n', '\t* @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '\t* account.\n', '\t*/\n', '\tfunction Ownable() {\n', '\t\towner = msg.sender;\n', '\t\t\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Throws if called by any account other than the owner.\n', '\t*/\n', '\tmodifier onlyOwner() {\n', '\t\trequire(msg.sender == owner);\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '\t* @param newOwner The address to transfer ownership to.\n', '\t*/\n', '\tfunction transferOwnership(address newOwner) onlyOwner {\n', '\t\trequire(newOwner != address(0));      \n', '\t\townerCandidat = newOwner;\n', '\t}\n', '\t/**\n', '\t* @dev Allows safe change current owner to a newOwner.\n', '\t*/\n', '\tfunction confirmOwnership() onlyOwner {\n', '\t\trequire(msg.sender == ownerCandidat);      \n', '\t\towner = msg.sender;\n', '\t}\n', '\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is StandardToken, Ownable {\n', ' \n', '\t/**\n', '\t* @dev Burns a specific amount of tokens.\n', '\t* @param _value The amount of token to be burned.\n', '\t*/\n', '\tfunction burn(uint256 _value) public onlyOwner {\n', '\t\trequire(_value > 0);\n', '\n', '\t\taddress burner = msg.sender;    \n', '\t\t\t\t\t\t\t\t\t\t\n', '\n', '\t\tbalances[burner] = balances[burner].sub(_value);\n', '\t\ttotalSupply = totalSupply.sub(_value);\n', '\t\tBurn(burner, _value);\n', '\t}\n', '\n', '\tevent Burn(address indexed burner, uint indexed value);\n', ' \n', '}\n', ' \n', 'contract MettaCoin is BurnableToken {\n', ' \n', '\tstring public constant name = "TOKEN METTACOIN";   \n', '\tstring public constant symbol = "METTACOIN";   \n', '\tuint32 public constant decimals = 18;    \n', '\tuint256 public constant initialSupply = 300000000 * 1 ether;\n', '\n', '\tfunction MettaCoin() {\n', '\t\ttotalSupply = initialSupply;\n', '\t\tbalances[msg.sender] = initialSupply;\n', '\t}    \n', '  \n', '}\n', '\n', '\n', 'contract Crowdsale is Ownable {\n', '    \n', '    using SafeMath for uint;\n', '\t//\n', '    MettaCoin public token = new MettaCoin();\n', '\t//\n', '    uint public start;    \n', '    //\n', '\tuint public period;\n', '\t//\n', '    uint public rate;\n', '\t//  \n', '    uint public softcap;\n', '    //\n', '    uint public availableTokensforPreICO;\n', '    //\n', '    uint public countOfSaleTokens;\n', '    //    \n', '    uint public currentPreICObalance;\n', '    //\n', '    uint public refererPercent;\n', '    //\n', '\tmapping(address => uint) public balances;\n', '    \n', '    // preICO manager data//////////////\n', '     address public managerETHaddress;\n', '     address public managerETHcandidatAddress;\n', '     uint public managerETHbonus;\n', '    \n', '    /////////////////////////////////\n', '   \n', '    function Crowdsale() {\n', '     \n', '\t\t// 1 METTACOIN = 0.00022 ETH\n', '\t\trate = 220000000000000; \n', '\t\t//Mon, 10 Nov 2017 00:00:00 GMT\n', '\t\tstart = 1510272000;\n', '\t\t// preICO period is 20 of november - 19 of december\n', '\t\tperiod = 1; // 29  \n', '\t\t// minimum attracted ETH during preICO - 409\n', '\t\tsoftcap = 440000000000000;//409 * 1 ether; //0.00044 for test\n', '\t\t// maximum number mettacoins for preICO\n', '\t\tavailableTokensforPreICO = 8895539 * 1 ether;\n', '\t\t// current ETH balance of preICO\n', '\t\tcurrentPreICObalance = 0; \n', '\t\t// how much mettacoins are sold\n', '\t\tcountOfSaleTokens = 0; \n', '\t\t//percent for referer bonus program\n', '\t\trefererPercent = 15;\n', '\t\t\n', '\t\t//data of manager of company\n', '\t\tmanagerETHaddress = 0x0;   \n', '\t\tmanagerETHbonus = 220000000000000; //35 ETH ~ 1,4 BTC // 35 * 1 ether;\n', '\n', '    }\n', '    /**\n', '\t * @dev Initially safe sets preICO manager address\n', '\t */\n', '    function setPreIcoManager(address _addr) public onlyOwner {   \n', '        require(managerETHaddress == 0x0) ;//ony once\n', '\t\t\tmanagerETHcandidatAddress = _addr;\n', '        \n', '    }\n', '\t/**\n', '\t * @dev Allows safe confirm of manager address\n', '\t */\n', '    function confirmManager() public {\n', '        require(msg.sender == managerETHcandidatAddress); \n', '\t\t\tmanagerETHaddress = managerETHcandidatAddress;\n', '    }\n', '    \n', '    \t/**\n', '\t * @dev Allows safe changing of manager address\n', '\t */\n', '    function changeManager(address _addr) public {\n', '        require(msg.sender == managerETHaddress); \n', '\t\t\tmanagerETHcandidatAddress = _addr;\n', '    }\n', '\t/**\n', '\t * @dev Indicates that preICO starts and not finishes\n', '\t */\n', '    modifier saleIsOn() {\n', '\t\trequire(now > start && now < start + period * 1 days);\n', '\t\t_;\n', '    }\n', '\t\n', '\t/**\n', '\t * @dev Indicates that we have available tokens for sale\n', '\t */\n', '    modifier issetTokensForSale() {\n', '\t\trequire(countOfSaleTokens < availableTokensforPreICO); \n', '\t\t_;\n', '    }\n', '    \n', '    //test\n', '    function getEndDate1() returns (uint){\n', '        return start + period * 1 days;\n', '    }\n', '      function getENow() returns (uint){\n', '        return now;\n', '    }\n', '    ///\n', '    \n', '  \n', '\t/**\n', '\t * @dev Tokens ans ownership will be transfered from preICO contract to ICO contract after preICO period.\n', '\t */\n', '    function TransferTokenToIcoContract(address ICOcontract) public onlyOwner {\n', '\t\trequire(now > start + period * 1 days);\n', '\t\ttoken.transfer(ICOcontract, token.balanceOf(this));\n', '\t\ttoken.transferOwnership(ICOcontract);\n', '    }\n', '\t/**\n', '\t * @dev Investments will be refunded if preICO not hits the softcap.\n', '\t */\n', '    function refund() public {\n', '\t\trequire(currentPreICObalance < softcap && now > start + period * 1 days);\n', '\t\tmsg.sender.transfer(balances[msg.sender]);\n', '\t\tbalances[msg.sender] = 0;\n', '    }\n', '\t/**\n', "\t * @dev Manager can get his/shes bonus after preICO reaches it's softcap\n", '\t */\n', '    function withdrawManagerBonus() public {    \n', '        if(currentPreICObalance > softcap && managerETHbonus > 0){\n', '            managerETHaddress.transfer(managerETHbonus);\n', '            managerETHbonus = 0;\n', '        }\n', '    }\n', '\t/**\n', '\t * @dev If ICO reached owner can withdrow ETH for ICO comping managment\n', '\t */\n', '    function withdrawPreIcoFounds() public onlyOwner {  \n', '\t\tif(currentPreICObalance > softcap) {\n', '\t\t\t// send all current ETH from contract to owner\n', '\t\t\tuint availableToTranser = this.balance-managerETHbonus;\n', '\t\t\towner.transfer(availableToTranser);\n', '\t\t}\n', '    }\n', '\t/**\n', '\t * @dev convert bytes to address\n', '\t */\n', '    function bytesToAddress(bytes source) internal returns(address) {\n', '        uint result;\n', '        uint mul = 1;\n', '        for(uint i = 20; i > 0; i--) {\n', '          result += uint8(source[i-1])*mul;\n', '          mul = mul*256;\n', '        }\n', '        return address(result);\n', '    }\n', '   function buyTokens() issetTokensForSale saleIsOn payable {   \n', '        uint tokens = msg.value.mul(1 ether).div(rate);\n', '        if(tokens > 0)   {\n', '             address referer = 0x0;\n', '            //-------------BONUSES-------------//\n', '             uint bonusTokens = 0;\n', '            if(now < start.add(7* 1 days)) {// 1st week\n', '    \t\t\tbonusTokens = tokens.mul(45).div(100); //+45%\n', '            } else if(now >= start.add(7 * 1 days) && now < start.add(14 * 1 days)) { // 2nd week\n', '    \t\t\tbonusTokens = tokens.mul(40).div(100); //+40%\n', '            } else if(now >= start.add(14* 1 days) && now < start.add(21 * 1 days)) { // 3th week\n', '    \t\t\tbonusTokens = tokens.mul(35).div(100); //+35%\n', '            } else if(now >= start.add(21* 1 days) && now < start.add(28 * 1 days)) { // 4th week\n', '    \t\t\tbonusTokens = tokens.mul(30).div(100); //+30% \n', '            } \n', '            tokens = tokens.add(bonusTokens);\n', '            //---------END-BONUSES-------------//\n', '    \t\t\n', '    \t\t//---------referal program--------- //abailable after 3th week onli\n', '    \t//\tif(now >= start.add(14* 1 days) && now < start.add(28 * 1 days)) {\n', '                if(msg.data.length == 20) {\n', '                  referer = bytesToAddress(bytes(msg.data));\n', '                  require(referer != msg.sender);\n', '                  uint refererTokens = tokens.mul(refererPercent).div(100);\n', '                }\n', '    \t//\t}\n', '    \t\t//---------end referal program---------//\n', '    \t\t\n', '    \t\tif(availableTokensforPreICO > countOfSaleTokens.add(tokens)) {  \n', '    \t\t\ttoken.transfer(msg.sender, tokens);\n', '    \t\t\tcurrentPreICObalance = currentPreICObalance.add(msg.value); \n', '    \t\t\tcountOfSaleTokens = countOfSaleTokens.add(tokens); \n', '    \t\t\tbalances[msg.sender] = balances[msg.sender].add(msg.value);\n', '    \t\t\tif(availableTokensforPreICO > countOfSaleTokens.add(tokens).add(refererTokens)){\n', '    \t\t\t     // send token to referrer\n', '    \t\t\t     if(referer !=0x0 && refererTokens >0){\n', '    \t\t\t        token.transfer(referer, refererTokens);\n', '    \t\t\t        \tcountOfSaleTokens = countOfSaleTokens.add(refererTokens); \n', '    \t\t\t     }\n', '    \t\t\t}\n', '    \t\t} else {\n', '    \t\t\t// there are not sufficient number of tokens - return of ETH\n', '    \t\t\tmsg.sender.transfer(msg.value);\n', '    \t\t}\n', '        }else{\n', '            // retun to buyer if tokens == 0\n', '           msg.sender.transfer(msg.value);\n', '        }\n', '    }\n', '\n', '    function() external payable {\n', '\t\tbuyTokens();  \n', '    }\n', '}']