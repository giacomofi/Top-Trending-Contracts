['pragma solidity ^0.4.17;\n', '\n', 'contract Ownable {\n', '    \n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address from, address to);\n', '\n', '    /**\n', '     * The address whcih deploys this contrcat is automatically assgined ownership.\n', '     * */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * Functions with this modifier can only be executed by the owner of the contract. \n', '     * */\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Transfers ownership provided that a valid address is given. This function can \n', '     * only be called by the owner of the contract. \n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != 0x0);\n', '        OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    \n', '    function mul(uint256 a, uint256 b) internal  returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ShizzleNizzle {\n', '    function transfer(address _to, uint256 _amount) public returns(bool);\n', '}\n', '\n', 'contract AirDropSHNZ is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '    \n', '    ShizzleNizzle public constant SHNZ = ShizzleNizzle(0x8b0C9f462C239c963d8760105CBC935C63D85680);\n', '\n', '    uint256 public rate;\n', '\n', '    function AirDropSHNZ() public {\n', '        rate = 50000e8;\n', '    }\n', '\n', '    function() payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    function buyTokens(address _addr) public payable returns(bool) {\n', '        require(_addr != 0x0);\n', '        SHNZ.transfer(msg.sender, msg.value.mul(rate).div(1e18));\n', '        forwardFunds();\n', '        return true;\n', '    }\n', '\n', '    function forwardFunds() internal {\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '    function airDrop(address[] _addrs, uint256 _amount) public onlyOwner {\n', '        require(_addrs.length > 0);\n', '        for (uint i = 0; i < _addrs.length; i++) {\n', '            if (_addrs[i] != 0x0) {\n', '                SHNZ.transfer(_addrs[i], _amount.mul(100000000));\n', '            }\n', '        }\n', '    }\n', '\n', '    function issueTokens(address _beneficiary, uint256 _amount) public onlyOwner {\n', '        require(_beneficiary != 0x0 && _amount > 0);\n', '        SHNZ.transfer(_beneficiary, _amount.mul(100000000));\n', '    }\n', '}']