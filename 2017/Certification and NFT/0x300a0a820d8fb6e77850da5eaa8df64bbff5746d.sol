['pragma solidity ^0.4.18;\n', '\n', '//*****************************************************\n', '// BOOMR Coin contract\n', '// For LibLob, Zach Spoor, by Michael Hanna\n', '// ****************************************************\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable token\n', ' *\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  function RefundVault(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    Closed();\n', '    wallet.transfer(this.balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    RefundsEnabled();\n', '  }\n', '\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', '//*****************************************************\n', '// *   BoomrCoinCrowdsale\n', '// *   Info:\n', '//     - Sale will be for 30% (150M of 500) of total tokens\n', '//     - Funding during presale determines price\n', '//     - Times are in UTC (seconds since Jan 1 1970)\n', '//\n', '//*****************************************************\n', 'contract BoomrCoinCrowdsale is Ownable{\n', '  using SafeMath for uint256;\n', '\n', '  //***************************************************\n', '  //  Settings\n', '  //***************************************************\n', '\n', '  // minimum amount of funds to be raised in weis\n', '  uint256 private minGoal = 0;\n', '\n', '  // maximum amount of funds to be raised in weis\n', '  uint256 private maxGoal = 0;\n', '\n', '  // Tokens for presale\n', '  uint256 private tokenLimitPresale    =  0;\n', '\n', '  // Tokens for crowdsale\n', '  uint256 private tokenLimitCrowdsale  = 0;\n', '\n', '  // Presale discount for each phase\n', '  uint256 private presaleDiscount    = 0;\n', '  uint256 private crowdsaleDiscount1 = 0;\n', '  uint256 private crowdsaleDiscount2 = 0;\n', '  uint256 private crowdsaleDiscount3 = 0;\n', '  uint256 private crowdsaleDiscount4 = 0;\n', '\n', '  // durations for each phase\n', '  uint256 private  presaleDuration    = 0;//604800; // One Week in seconds\n', '  uint256 private  crowdsaleDuration1 = 0;//604800; // One Week in seconds\n', '  uint256 private  crowdsaleDuration2 = 0;//604800; // One Week in seconds\n', '  uint256 private  crowdsaleDuration3 = 0;//604800; // One Week in seconds\n', '  uint256 private  crowdsaleDuration4 = 0;//604800; // One Week in seconds\n', '\n', '  //***************************************************\n', '  //  Info\n', '  //***************************************************\n', '\n', '  // Tokens Sold\n', '  uint256 private tokenPresaleTotalSold  = 0;\n', '  uint256 private tokenCrowdsaleTotalSold  = 0;\n', '\n', '  // Backers\n', '  uint256 private totalBackers  = 0;\n', '\n', '  // amount of raised money in wei\n', '  uint256 private weiRaised = 0;\n', '\n', '  // prices for each phase\n', '  uint256 private presaleTokenPrice    = 0;\n', '  uint256 private baseTokenPrice = 0;\n', '  uint256 private crowdsaleTokenPrice1 = 0;\n', '  uint256 private crowdsaleTokenPrice2 = 0;\n', '  uint256 private crowdsaleTokenPrice3 = 0;\n', '  uint256 private crowdsaleTokenPrice4 = 0;\n', '\n', '  // Count of token distributions by phase\n', '  uint256 private presaleTokenSent     = 0;\n', '  uint256 private crowdsaleTokenSold1  = 0;\n', '  uint256 private crowdsaleTokenSold2  = 0;\n', '  uint256 private crowdsaleTokenSold3  = 0;\n', '  uint256 private crowdsaleTokenSold4  = 0;\n', '\n', '  //***************************************************\n', '  //  Vars\n', '  //***************************************************\n', '\n', '  // Finalization Flag\n', '  bool private finalized = false;\n', '\n', '  // Halted Flag\n', '  bool private halted = false;\n', '\n', '  uint256 public startTime;\n', '\n', '  // The token being sold\n', '  PausableToken public boomrToken;\n', '\n', '  // Address where funds are collected\n', '  address private wallet;\n', '\n', '  // refund vault used to hold funds while crowdsale is running\n', '  RefundVault private vault;\n', '\n', '  // tracking for deposits\n', '  mapping (address => uint256) public deposits;\n', '\n', '  // tracking for purchasers\n', '  mapping (address => uint256) public purchases;\n', '\n', '  //***************************************************\n', '  //  Events\n', '  //***************************************************\n', '\n', '  // Log event for crowdsale purchase\n', '  event TokenPurchase(address indexed Purchaser, address indexed Beneficiary, uint256 ValueInWei, uint256 TokenAmount);\n', '\n', '  // Log event for presale purchase\n', '  event PresalePurchase(address indexed Purchaser, address indexed Beneficiary, uint256 ValueInWei);\n', '\n', '  // Log event for distribution of tokens for presale purchasers\n', '  event PresaleDistribution(address indexed Purchaser, address indexed Beneficiary, uint256 TokenAmount);\n', '\n', '  // Finalization\n', '  event Finalized();\n', '\n', '  //***************************************************\n', '  //  Constructor\n', '  //***************************************************\n', '  function BoomrCoinCrowdsale() public{\n', '\n', '  }\n', '\n', '  function StartCrowdsale(address _token, address _wallet, uint256 _startTime) public onlyOwner{\n', '    require(_startTime >= now);\n', '    require(_token != 0x0);\n', '    require(_wallet != 0x0);\n', '\n', '    // Set the start time\n', '    startTime = _startTime;\n', '\n', '    // Assign the token\n', '    boomrToken = PausableToken(_token);\n', '\n', '    // Wallet for funds\n', '    wallet = _wallet;\n', '\n', '    // Refund vault\n', '    vault = new RefundVault(wallet);\n', '\n', '    // minimum amount of funds to be raised in weis\n', '    minGoal = 5000 * 10**18; // Approx 3.5M Dollars\n', '    //minGoal = 1 * 10**18; // testing\n', '\n', '    // maximum amount of funds to be raised in weis\n', '    maxGoal = 28600 * 10**18; // Approx 20M Dollars\n', '    //maxGoal = 16 * 10**18; // teesting\n', '\n', '    // Tokens for presale\n', '    tokenLimitPresale    =  30000000 * 10**18;\n', '    //uint256 tokenLimitPresale    =  5 * 10**18;  // for testing\n', '\n', '    // Tokens for crowdsale\n', '    tokenLimitCrowdsale  = 120000000 * 10**18;\n', '    //uint256 tokenLimitCrowdsale  = 5 * 10**18;\n', '\n', '    // Presale discount for each phase\n', '    presaleDiscount    = 25 * 10**16;  // 25%\n', '    crowdsaleDiscount1 = 15 * 10**16;  // 15%\n', '    crowdsaleDiscount2 = 10 * 10**16;  // 10%\n', '    crowdsaleDiscount3 =  5 * 10**16;  //  5%\n', '    crowdsaleDiscount4 =           0;  //  0%\n', '\n', '    // durations for each phase\n', '    presaleDuration    = 604800; // One Week in seconds\n', '    crowdsaleDuration1 = 604800; // One Week in seconds\n', '    crowdsaleDuration2 = 604800; // One Week in seconds\n', '    crowdsaleDuration3 = 604800; // One Week in seconds\n', '    crowdsaleDuration4 = 604800; // One Week in seconds\n', '\n', '  }\n', '\n', '  //***************************************************\n', '  //  Runtime state checks\n', '  //***************************************************\n', '\n', '  function currentStateActive() public constant returns ( bool presaleWaitPhase,\n', '                                                          bool presalePhase,\n', '                                                          bool crowdsalePhase1,\n', '                                                          bool crowdsalePhase2,\n', '                                                          bool crowdsalePhase3,\n', '                                                          bool crowdsalePhase4,\n', '                                                          bool buyable,\n', '                                                          bool distributable,\n', '                                                          bool reachedMinimumEtherGoal,\n', '                                                          bool reachedMaximumEtherGoal,\n', '                                                          bool completed,\n', '                                                          bool finalizedAndClosed,\n', '                                                          bool stopped){\n', '\n', '    return (  isPresaleWaitPhase(),\n', '              isPresalePhase(),\n', '              isCrowdsalePhase1(),\n', '              isCrowdsalePhase2(),\n', '              isCrowdsalePhase3(),\n', '              isCrowdsalePhase4(),\n', '              isBuyable(),\n', '              isDistributable(),\n', '              minGoalReached(),\n', '              maxGoalReached(),\n', '              isCompleted(),\n', '              finalized,\n', '              halted);\n', '  }\n', '\n', '  function currentStateSales() public constant returns (uint256 PresaleTokenPrice,\n', '                                                        uint256 BaseTokenPrice,\n', '                                                        uint256 CrowdsaleTokenPrice1,\n', '                                                        uint256 CrowdsaleTokenPrice2,\n', '                                                        uint256 CrowdsaleTokenPrice3,\n', '                                                        uint256 CrowdsaleTokenPrice4,\n', '                                                        uint256 TokenPresaleTotalSold,\n', '                                                        uint256 TokenCrowdsaleTotalSold,\n', '                                                        uint256 TotalBackers,\n', '                                                        uint256 WeiRaised,\n', '                                                        address Wallet,\n', '                                                        uint256 GoalInWei,\n', '                                                        uint256 RemainingTokens){\n', '\n', '    return (  presaleTokenPrice,\n', '              baseTokenPrice,\n', '              crowdsaleTokenPrice1,\n', '              crowdsaleTokenPrice2,\n', '              crowdsaleTokenPrice3,\n', '              crowdsaleTokenPrice4,\n', '              tokenPresaleTotalSold,\n', '              tokenCrowdsaleTotalSold,\n', '              totalBackers,\n', '              weiRaised,\n', '              wallet,\n', '              minGoal,\n', '              getContractTokenBalance());\n', '\n', '  }\n', '\n', '  function currentTokenDistribution() public constant returns (uint256 PresalePhaseTokens,\n', '                                                               uint256 CrowdsalePhase1Tokens,\n', '                                                               uint256 CrowdsalePhase2Tokens,\n', '                                                               uint256 CrowdsalePhase3Tokens,\n', '                                                               uint256 CrowdsalePhase4Tokens){\n', '\n', '    return (  presaleTokenSent,\n', '              crowdsaleTokenSold1,\n', '              crowdsaleTokenSold2,\n', '              crowdsaleTokenSold3,\n', '              crowdsaleTokenSold4);\n', '\n', '  }\n', '\n', '  function isPresaleWaitPhase() internal constant returns (bool){\n', '    return startTime >= now;\n', '  }\n', '\n', '  function isPresalePhase() internal constant returns (bool){\n', '    return startTime < now && (startTime + presaleDuration) >= now && !maxGoalReached();\n', '  }\n', '\n', '  function isCrowdsalePhase1() internal constant returns (bool){\n', '    return (startTime + presaleDuration) < now && (startTime + presaleDuration + crowdsaleDuration1) >= now && !maxGoalReached();\n', '  }\n', '\n', '  function isCrowdsalePhase2() internal constant returns (bool){\n', '    return (startTime + presaleDuration + crowdsaleDuration1) < now && (startTime + presaleDuration + crowdsaleDuration1 + crowdsaleDuration2) >= now && !maxGoalReached();\n', '  }\n', '\n', '  function isCrowdsalePhase3() internal constant returns (bool){\n', '    return (startTime + presaleDuration + crowdsaleDuration1 + crowdsaleDuration2) < now && (startTime + presaleDuration + crowdsaleDuration1 + crowdsaleDuration2 + crowdsaleDuration3) >= now && !maxGoalReached();\n', '  }\n', '\n', '  function isCrowdsalePhase4() internal constant returns (bool){\n', '    return (startTime + presaleDuration + crowdsaleDuration1 + crowdsaleDuration2 + crowdsaleDuration3) < now && (startTime + presaleDuration + crowdsaleDuration1 + crowdsaleDuration2 + crowdsaleDuration3 + crowdsaleDuration4) >= now && !maxGoalReached();\n', '  }\n', '\n', '  function isCompleted() internal constant returns (bool){\n', '    return (startTime + presaleDuration + crowdsaleDuration1 + crowdsaleDuration2 + crowdsaleDuration3 + crowdsaleDuration4) < now || maxGoalReached();\n', '  }\n', '\n', '  function isDistributable() internal constant returns (bool){\n', '    return (startTime + presaleDuration) < now;\n', '  }\n', '\n', '  function isBuyable() internal constant returns (bool){\n', '    return isDistributable() && !isCompleted();\n', '  }\n', '\n', '  // Test if we reached the goals\n', '  function minGoalReached() internal constant returns (bool) {\n', '    return weiRaised >= minGoal;\n', '  }\n', '\n', '  function maxGoalReached() internal constant returns (bool) {\n', '    return weiRaised >= maxGoal;\n', '  }\n', '\n', '  //***************************************************\n', "  //  Contract's token balance\n", '  //***************************************************\n', '  function getContractTokenBalance() internal constant returns (uint256) {\n', '    return boomrToken.balanceOf(this);\n', '  }\n', '\n', '  //***************************************************\n', '  //  Emergency functions\n', '  //***************************************************\n', '  function halt() public onlyOwner{\n', '    halted = true;\n', '  }\n', '\n', '  function unHalt() public onlyOwner{\n', '    halted = false;\n', '  }\n', '\n', '  //***************************************************\n', '  //  Update all the prices\n', '  //***************************************************\n', '  function updatePrices() internal {\n', '\n', '    presaleTokenPrice = weiRaised.mul(1 ether).div(tokenLimitPresale);\n', '    baseTokenPrice = (presaleTokenPrice * (1 ether)) / ((1 ether) - presaleDiscount);\n', '    crowdsaleTokenPrice1 = baseTokenPrice - ((baseTokenPrice * crowdsaleDiscount1)/(1 ether));\n', '    crowdsaleTokenPrice2 = baseTokenPrice - ((baseTokenPrice * crowdsaleDiscount2)/(1 ether));\n', '    crowdsaleTokenPrice3 = baseTokenPrice - ((baseTokenPrice * crowdsaleDiscount3)/(1 ether));\n', '    crowdsaleTokenPrice4 = baseTokenPrice - ((baseTokenPrice * crowdsaleDiscount4)/(1 ether));\n', '  }\n', '\n', '  //***************************************************\n', '  //  Default presale and token purchase\n', '  //***************************************************\n', '  function () public payable{\n', '    if(msg.value == 0 && isDistributable())\n', '    {\n', '      distributePresale(msg.sender);\n', '    }else{\n', '      require(!isPresaleWaitPhase() && !isCompleted());\n', '\n', '      // Select purchase action\n', '      if (isPresalePhase()){\n', '\n', '        // Presale deposit\n', '        depositPresale(msg.sender);\n', '\n', '      }else{\n', '        // Buy the tokens\n', '        buyTokens(msg.sender);\n', '      }\n', '    }\n', '  }\n', '\n', '  //***************************************************\n', '  //  Low level deposit\n', '  //***************************************************\n', '  function depositPresale(address beneficiary) public payable{\n', '    internalDepositPresale(beneficiary, msg.value);\n', '  }\n', '\n', '  function internalDepositPresale(address beneficiary, uint256 deposit) internal{\n', '    require(!halted);\n', '    require(beneficiary != 0x0);\n', '    require(deposit != 0);\n', '    require(isPresalePhase());\n', '    require(!maxGoalReached());\n', '\n', '    // Amount invested\n', '    uint256 weiAmount = deposit;\n', '\n', '    // If real deposit from person then forward funds\n', '    // otherwise it was from the manual routine for external\n', '    // deposits that were made in fiat instead of ether\n', '    if (msg.value > 0)\n', '    {\n', '      // Send funds to main wallet\n', '      forwardFunds();\n', '    }\n', '\n', '    // Total innvested so far\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    // Mark the deposits, add if they deposit more than once\n', '    deposits[beneficiary] += weiAmount;\n', '    totalBackers++;\n', '\n', '    // Determine the current price\n', '    updatePrices();\n', '\n', '    // emit event for logging\n', '    PresalePurchase(msg.sender, beneficiary, weiAmount);\n', '  }\n', '\n', '  //***************************************************\n', '  //  Token distribution for presale purchasers\n', '  //***************************************************\n', '  function distributePresale(address beneficiary) public{\n', '    require(!halted);\n', '    require(isDistributable());\n', '    require(deposits[beneficiary] > 0);\n', '    require(beneficiary != 0x0);\n', '\n', '    // Amount investesd\n', '    uint256 weiDeposit = deposits[beneficiary];\n', '\n', '    // prevent re-entrancy\n', '    deposits[beneficiary] = 0;\n', '\n', '    // tokens out\n', '    uint256 tokensOut = weiDeposit.mul(1 ether).div(presaleTokenPrice);\n', '\n', '    //trackTokens(tokensOut, index);\n', '    tokenPresaleTotalSold += tokensOut;\n', '    //presaleTokenSent += tokensOut;\n', '\n', '    // transfer tokens\n', '    boomrToken.transfer(beneficiary, tokensOut);\n', '\n', '    // emit event for logging\n', '    PresaleDistribution(msg.sender, beneficiary, tokensOut);\n', '  }\n', '\n', '  //***************************************************\n', '  //  Low level purchase\n', '  //***************************************************\n', '  function buyTokens(address beneficiary) public payable{\n', '    internalBuyTokens(beneficiary, msg.value);\n', '  }\n', '\n', '  function internalBuyTokens(address beneficiary, uint256 deposit) internal{\n', '    require(!halted);\n', '    require(beneficiary != 0x0);\n', '    require(deposit != 0);\n', '    require(isCrowdsalePhase1() || isCrowdsalePhase2() || isCrowdsalePhase3() || isCrowdsalePhase4());\n', '    require(!maxGoalReached());\n', '\n', '    uint256 price = 0;\n', '\n', '    if (isCrowdsalePhase1()){\n', '      price = crowdsaleTokenPrice1;\n', '    }else if (isCrowdsalePhase2()){\n', '      price = crowdsaleTokenPrice2;\n', '    }else if (isCrowdsalePhase3()){\n', '      price = crowdsaleTokenPrice3;\n', '    }else if (isCrowdsalePhase4()){\n', '      price = crowdsaleTokenPrice4;\n', '    }else{\n', '      price = baseTokenPrice;\n', '    }\n', '\n', '    // Amount of ether sent\n', '    uint256 weiAmount = deposit;\n', '\n', '    // calculate reward\n', '    uint256 tokensOut = weiAmount.mul(1 ether).div(price);\n', '\n', '    // make sure we are not over sold\n', '    require(tokensOut + tokenCrowdsaleTotalSold < tokenLimitCrowdsale);\n', '\n', '    // If real deposit from person then forward funds\n', '    // otherwise it was from the manual routine for external\n', '    // deposits that were made in fiat instead of ether\n', '    if (msg.value > 0)\n', '    {\n', '      // Send funds to main wallet\n', '      forwardFunds();\n', '    }\n', '\n', '    // Update raised\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    // Track purchases\n', '    purchases[beneficiary] += weiRaised;\n', '\n', '    // track issued\n', '    tokenCrowdsaleTotalSold += tokensOut;\n', '\n', '    if (isCrowdsalePhase1()){\n', '      crowdsaleTokenSold1 += tokensOut;\n', '    }else if (isCrowdsalePhase2()){\n', '      crowdsaleTokenSold2 += tokensOut;\n', '    }else if (isCrowdsalePhase3()){\n', '      crowdsaleTokenSold3 += tokensOut;\n', '    }else if (isCrowdsalePhase4()){\n', '      crowdsaleTokenSold4 += tokensOut;\n', '    }\n', '\n', '    // Send to buyers\n', '    boomrToken.transfer(beneficiary, tokensOut);\n', '\n', '    // Emit event for logging\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokensOut);\n', '\n', '    // Track the backers\n', '    totalBackers++;\n', '  }\n', '\n', '  // For deposits that do not come thru the contract\n', '  function externalDeposit(address beneficiary, uint256 amount) public onlyOwner{\n', '      require(!isPresaleWaitPhase() && !isCompleted());\n', '\n', '      // Select purchase action\n', '      if (isPresalePhase()){\n', '\n', '        // Presale deposit\n', '        internalDepositPresale(beneficiary, amount);\n', '\n', '      }else{\n', '        // Buy the tokens\n', '        internalBuyTokens(beneficiary, amount);\n', '      }\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    //wallet.transfer(msg.value);\n', '    vault.deposit.value(msg.value)(msg.sender);\n', '  }\n', '\n', '    // if crowdsale is unsuccessful, investors can claim refunds here\n', '  function claimRefund() public{\n', '    require(!halted);\n', '    require(finalized);\n', '    require(!minGoalReached());\n', '\n', '    vault.refund(msg.sender);\n', '  }\n', '\n', '  // Should be called after crowdsale ends, to do\n', '  // some extra finalization work\n', '  function finalize() public onlyOwner{\n', '    require(!finalized);\n', '    require(isCompleted());\n', '\n', '    if (minGoalReached()) {\n', '      vault.close();\n', '    } else {\n', '      vault.enableRefunds();\n', '    }\n', '\n', '    finalized = true;\n', '    Finalized();\n', '  }\n', '}']