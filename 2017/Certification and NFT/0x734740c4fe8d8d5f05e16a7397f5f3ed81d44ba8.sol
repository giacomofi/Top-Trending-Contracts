['pragma solidity ^0.4.17;\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    \n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address from, address to);\n', '\n', '    /**\n', '     * The address whcih deploys this contrcat is automatically assgined ownership.\n', '     * */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * Functions with this modifier can only be executed by the owner of the contract. \n', '     * */\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Transfers ownership provided that a valid address is given. This function can \n', '     * only be called by the owner of the contract. \n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != 0x0);\n', '        OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract ERC20Basic {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint);\n', '  function transfer(address to, uint value) public;\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint);\n', '  function transferFrom(address from, address to, uint value) public;\n', '  function approve(address spender, uint value) public;\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '\n', 'contract BasicToken is ERC20Basic, Ownable {\n', '  using SafeMath for uint;\n', '\n', '  mapping(address => uint) balances;\n', '\n', '  modifier onlyPayloadSize(uint size) {\n', '     if (msg.data.length < size + 4) {\n', '       revert();\n', '     }\n', '     _;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract StandardToken is BasicToken, ERC20 {\n', '\n', '    mapping (address => mapping (address => uint256)) allowances;\n', '\n', '    /**\n', '     * Transfers tokens from the account of the owner by an approved spender. \n', '     * The spender cannot spend more than the approved amount. \n', '     * \n', '     * @param _from The address of the owners account.\n', '     * @param _amount The amount of tokens to transfer.\n', '     * */\n', '    function transferFrom(address _from, address _to, uint256 _amount) public onlyPayloadSize(3 * 32) {\n', '        require(allowances[_from][msg.sender] >= _amount && balances[_from] >= _amount);\n', '        allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_amount);\n', '        balances[_from] = balances[_from].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Transfer(_from, _to, _amount);\n', '    }\n', '\n', '    /**\n', '     * Allows another account to spend a given amount of tokens on behalf of the \n', "     * owner's account. If the owner has previously allowed a spender to spend\n", '     * tokens on his or her behalf and would like to change the approval amount,\n', '     * he or she will first have to set the allowance back to 0 and then update\n', '     * the allowance.\n', '     * \n', '     * @param _spender The address of the spenders account.\n', '     * @param _amount The amount of tokens the spender is allowed to spend.\n', '     * */\n', '    function approve(address _spender, uint256 _amount) public {\n', '        require((_amount == 0) || (allowances[msg.sender][_spender] == 0));\n', '        allowances[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '    }\n', '\n', '\n', '    /**\n', '     * Returns the approved allowance from an owners account to a spenders account.\n', '     * \n', '     * @param _owner The address of the owners account.\n', '     * @param _spender The address of the spenders account.\n', '     **/\n', '    function allowance(address _owner, address _spender) public constant returns (uint256) {\n', '        return allowances[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract MintableToken is StandardToken {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', "   * Mints a given amount of tokens to the provided address. This function can only be called by the contract's\n", '   * owner, which in this case is the ICO contract itself. From there, the founders of the ICO contract will be\n', '   * able to invoke this function. \n', '   *\n', '   * @param _to The address which will receive the tokens.\n', '   * @param _amount The total amount of ETCL tokens to be minted.\n', '   */\n', '  function mint(address _to, uint256 _amount) public onlyOwner canMint onlyPayloadSize(2 * 32) returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * Terminates the minting period permanently. This function can only be called by the owner of the contract.\n', '   */\n', '  function finishMinting() public onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract Ethercloud is MintableToken {\n', '    \n', '    uint8 public decimals;\n', '    string public name;\n', '    string public symbol;\n', '\n', '    function Ethercloud() public {\n', '       totalSupply = 0;\n', '       decimals = 18;\n', '       name = "Ethercloud";\n', '       symbol = "ETCL";\n', '    }\n', '}\n', '\n', '\n', 'contract ICO is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    Ethercloud public ETCL;\n', '\n', '    bool       public success;\n', '    uint256    public rate;\n', '    uint256    public rateWithBonus;\n', '    uint256    public bountiesIssued;\n', '    uint256    public tokensSold;\n', '    uint256    public tokensForSale;\n', '    uint256    public tokensForBounty;\n', '    uint256    public maxTokens;\n', '    uint256    public startTime;\n', '    uint256    public endTime;\n', '    uint256    public softCap;\n', '    uint256    public hardCap;\n', '    uint256[3] public bonusStages;\n', '\n', '    mapping (address => uint256) investments;\n', '\n', '    event TokensPurchased(address indexed by, uint256 amount);\n', '    event RefundIssued(address indexed by, uint256 amount);\n', '    event FundsWithdrawn(address indexed by, uint256 amount);\n', '    event BountyIssued(address indexed to, uint256 amount);\n', '    event IcoSuccess();\n', '    event CapReached();\n', '\n', '    function ICO() public {\n', '        ETCL = new Ethercloud();\n', '        success = false;\n', '        rate = 1288; \n', '        rateWithBonus = 1674;\n', '        bountiesIssued = 0;\n', '        tokensSold = 0;\n', '        tokensForSale = 78e24;              //78 million ETCL for sale\n', '        tokensForBounty = 2e24;             //2 million ETCL for bounty\n', '        maxTokens = 100e24;                 //100 million ETCL\n', '        startTime = now.add(15 days);       //ICO starts 15 days after deployment\n', '        endTime = startTime.add(30 days);   //30 days end time\n', '        softCap = 6212530674370205e6;       //6212.530674370205 ETH\n', '        hardCap = 46594980057776535e6;      //46594.980057776535 ETH\n', '\n', '        bonusStages[0] = startTime.add(7 days);\n', '\n', '        for (uint i = 1; i < bonusStages.length; i++) {\n', '            bonusStages[i] = bonusStages[i - 1].add(7 days);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * When ETH is sent to the contract, the fallback function calls the buy tokens function.\n', '     */\n', '    function() public payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * Allows investors to buy ETCL tokens by sending ETH and automatically receiving tokens\n', '     * to the provided address.\n', '     *\n', '     * @param _beneficiary The address which will receive the tokens. \n', '     */\n', '    function buyTokens(address _beneficiary) public payable {\n', '        require(_beneficiary != 0x0 && validPurchase() && this.balance.sub(msg.value) < hardCap);\n', '        if (this.balance >= softCap && !success) {\n', '            success = true;\n', '            IcoSuccess();\n', '        }\n', '        uint256 weiAmount = msg.value;\n', '        if (this.balance > hardCap) {\n', '            CapReached();\n', '            uint256 toRefund = this.balance.sub(hardCap);\n', '            msg.sender.transfer(toRefund);\n', '            weiAmount = weiAmount.sub(toRefund);\n', '        }\n', '        uint256 tokens = weiAmount.mul(getCurrentRateWithBonus());\n', '        if (tokensSold.add(tokens) > tokensForSale) {\n', '            revert();\n', '        }\n', '        ETCL.mint(_beneficiary, tokens);\n', '        tokensSold = tokensSold.add(tokens);\n', '        investments[_beneficiary] = investments[_beneficiary].add(weiAmount);\n', '        TokensPurchased(_beneficiary, tokens);\n', '    }\n', '\n', '    /**\n', '     * Returns the current rate with bonus percentage of the tokens. \n', '     */\n', '    function getCurrentRateWithBonus() internal returns (uint256) {\n', '        rateWithBonus = (rate.mul(getBonusPercentage()).div(100)).add(rate);\n', '        return rateWithBonus;\n', '    }\n', '\n', '    /**\n', '     * Returns the current bonus percentage. \n', '     */\n', '    function getBonusPercentage() internal view returns (uint256 bonusPercentage) {\n', '        uint256 timeStamp = now;\n', '        if (timeStamp > bonusStages[2]) {\n', '            bonusPercentage = 0; \n', '        }\n', '        if (timeStamp <= bonusStages[2]) {\n', '            bonusPercentage = 5;\n', '        }\n', '        if (timeStamp <= bonusStages[1]) {\n', '            bonusPercentage = 15;\n', '        }\n', '        if (timeStamp <= bonusStages[0]) {\n', '            bonusPercentage = 30;\n', '        } \n', '        return bonusPercentage;\n', '    }\n', '\n', '    /**\n', '     * Mints a given amount of new tokens to the provided address. This function can only be\n', '     * called by the owner of the contract.\n', '     *\n', '     * @param _beneficiary The address which will receive the tokens.\n', '     * @param _amount The total amount of tokens to be minted.\n', '     */\n', '    function issueTokens(address _beneficiary, uint256 _amount) public onlyOwner {\n', '        require(_beneficiary != 0x0 && _amount > 0 && tokensSold.add(_amount) <= tokensForSale); \n', '        ETCL.mint(_beneficiary, _amount);\n', '        tokensSold = tokensSold.add(_amount);\n', '        TokensPurchased(_beneficiary, _amount);\n', '    }\n', '\n', '    /**\n', '     * Checks whether or not a purchase is valid. If not, then the buy tokens function will \n', '     * not execute.\n', '     */\n', '    function validPurchase() internal constant returns (bool) {\n', '        bool withinPeriod = now >= startTime && now <= endTime;\n', '        bool nonZeroPurchase = msg.value != 0;\n', '        return withinPeriod && nonZeroPurchase;\n', '    }\n', '\n', '    /**\n', '     * Allows investors to claim refund in the case that the soft cap has not been reached and\n', '     * the duration of the ICO has passed. \n', '     *\n', '     * @param _addr The address to be refunded. If no address is provided, the _addr will default\n', '     * to the message sender. \n', '     */\n', '    function getRefund(address _addr) public {\n', '        if (_addr == 0x0) {\n', '            _addr = msg.sender;\n', '        }\n', '        require(!isSuccess() && hasEnded() && investments[_addr] > 0);\n', '        uint256 toRefund = investments[_addr];\n', '        investments[_addr] = 0;\n', '        _addr.transfer(toRefund);\n', '        RefundIssued(_addr, toRefund);\n', '    }\n', '\n', '    /**\n', '     * Mints new tokens for the bounty campaign. This function can only be called by the owner \n', '     * of the contract. \n', '     *\n', '     * @param _beneficiary The address which will receive the tokens. \n', '     * @param _amount The total amount of tokens that will be minted. \n', '     */\n', '    function issueBounty(address _beneficiary, uint256 _amount) public onlyOwner {\n', '        require(bountiesIssued.add(_amount) <= tokensForBounty && _beneficiary != 0x0);\n', '        ETCL.mint(_beneficiary, _amount);\n', '        bountiesIssued = bountiesIssued.add(_amount);\n', '        BountyIssued(_beneficiary, _amount);\n', '    }\n', '\n', '    /**\n', '     * Withdraws the total amount of ETH raised to the owners address. This function can only be\n', '     * called by the owner of the contract given that the ICO is a success and the duration has \n', '     * passed.\n', '     */\n', '    function withdraw() public onlyOwner {\n', '        uint256 inCirculation = tokensSold.add(bountiesIssued);\n', '        ETCL.mint(owner, inCirculation.mul(25).div(100));\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '    /**\n', '     * Returns true if the ICO is a success, false otherwise.\n', '     */\n', '    function isSuccess() public constant returns (bool) {\n', '        return success;\n', '    }\n', '\n', '    /**\n', '     * Returns true if the duration of the ICO has passed, false otherwise. \n', '     */\n', '    function hasEnded() public constant returns (bool) {\n', '        return now > endTime;\n', '    }\n', '\n', '    /**\n', '     * Returns the end time of the ICO.\n', '     */\n', '    function endTime() public constant returns (uint256) {\n', '        return endTime;\n', '    }\n', '\n', '    /**\n', '     * Returns the total investment of a given ETH address. \n', '     *\n', '     * @param _addr The address being queried.\n', '     */\n', '    function investmentOf(address _addr) public constant returns (uint256) {\n', '        return investments[_addr];\n', '    }\n', '\n', '    /**\n', '     * Finishes the minting period. This function can only be called by the owner of the \n', '     * contract given that the duration of the ICO has ended. \n', '     */\n', '    function finishMinting() public onlyOwner {\n', '        require(hasEnded());\n', '        ETCL.finishMinting();\n', '    }\n', '}']