['/// @dev `Owned` is a base level contract that assigns an `owner` that can be\n', '///  later changed\n', 'contract Owned {\n', '\n', '    /// @dev `owner` is the only address that can call a function with this\n', '    /// modifier\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    address public owner;\n', '\n', '    /// @notice The Constructor assigns the message sender to be `owner`\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    address public newOwner;\n', '\n', '    /// @notice `owner` can step down and assign some other address to this role\n', '    /// @param _newOwner The address of the new owner. 0x0 can be used to create\n', '    function changeOwner(address _newOwner) onlyOwner {\n', '        if(msg.sender == owner) {\n', '            owner = _newOwner;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '\n', 'contract AccountOwnership is Owned {\n', '  using SafeMath for uint256;\n', '  \n', '  mapping (address => uint256) public transfers;\n', '  address public depositAddress;\n', '  \n', '  event RefundTransfer(uint256 date, uint256 paid, uint256 refunded, address user);\n', '  \n', '  function AccountOwnership() payable {\n', '  }\n', '\n', '  function withdrawEther (address _to) onlyOwner {\n', '    _to.transfer(this.balance);\n', '  }\n', '\n', '  function setDepositAddress(address _depositAddress) onlyOwner {\n', '    depositAddress = _depositAddress;\n', '  }\n', '\n', '  function ()  payable {\n', '    require(msg.value > 0);\n', '    if (depositAddress != msg.sender) {\n', '      transfers[msg.sender] = msg.value;\n', '      msg.sender.transfer(msg.value);\n', '      RefundTransfer(now, msg.value, msg.value, msg.sender);\n', '    }\n', '  }\n', '}']