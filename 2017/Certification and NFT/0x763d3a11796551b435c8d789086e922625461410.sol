['pragma solidity ^0.4.16;\n', '\n', '  contract ERC20 {\n', '     function totalSupply() constant returns (uint256 totalsupply);\n', '     function balanceOf(address _owner) constant returns (uint256 balance);\n', '     function transfer(address _to, uint256 _value) returns (bool success);\n', '     function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '     function approve(address _spender, uint256 _value) returns (bool success);\n', '     function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '     event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '  }\n', '  \n', '  contract TCASH is ERC20 {\n', '     string public constant symbol = "TCASH";\n', '     string public constant name = "Tcash";\n', '     uint8 public constant decimals = 8;\n', '     uint256 _totalSupply = 88000000 * 10**8;\n', '     \n', '\n', '     address public owner;\n', '  \n', '     mapping(address => uint256) balances;\n', '  \n', '     mapping(address => mapping (address => uint256)) allowed;\n', '     \n', '  \n', '     function TCASH() {\n', '         owner = msg.sender;\n', '         balances[owner] = 88000000 * 10**8;\n', '     }\n', '     \n', '     modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '     \n', '     \n', '    function distributeTCASH(address[] addresses) onlyOwner {\n', '         for (uint i = 0; i < addresses.length; i++) {\n', '             balances[owner] -= 245719916000;\n', '             balances[addresses[i]] += 245719916000;\n', '             Transfer(owner, addresses[i], 245719916000);\n', '         }\n', '     }\n', '     \n', '  \n', '     function totalSupply() constant returns (uint256 totalsupply) {\n', '         totalsupply = _totalSupply;\n', '     }\n', '  \n', '\n', '     function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '     }\n', ' \n', '     function transfer(address _to, uint256 _amount) returns (bool success) {\n', '         if (balances[msg.sender] >= _amount \n', '            && _amount > 0\n', '             && balances[_to] + _amount > balances[_to]) {\n', '             balances[msg.sender] -= _amount;\n', '             balances[_to] += _amount;\n', '             Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '         } else {\n', '             return false;\n', '         }\n', '     }\n', '     \n', '     \n', '     function transferFrom(\n', '         address _from,\n', '         address _to,\n', '         uint256 _amount\n', '     ) returns (bool success) {\n', '         if (balances[_from] >= _amount\n', '             && allowed[_from][msg.sender] >= _amount\n', '             && _amount > 0\n', '             && balances[_to] + _amount > balances[_to]) {\n', '             balances[_from] -= _amount;\n', '             allowed[_from][msg.sender] -= _amount;\n', '             balances[_to] += _amount;\n', '             Transfer(_from, _to, _amount);\n', '             return true;\n', '         } else {\n', '            return false;\n', '         }\n', '     }\n', ' \n', '     function approve(address _spender, uint256 _amount) returns (bool success) {\n', '         allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '         return true;\n', '     }\n', '  \n', '     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '         return allowed[_owner][_spender];\n', '    }\n', '  }\n', '\n', 'contract TcashCrowdsale {\n', '    address public founder;\n', '    address public target;\n', '    uint256 public weiRaised;\n', '    uint256 public tokenIssued;\n', '    uint256 public contributors;\n', '    TCASH public tokenReward;\n', '    uint256 public phase = 0;\n', '    bool public halted = false;\n', '    bool crowdsaleClosed = false;\n', '\n', '    uint256[10] public priceToken = [\n', '        2600,\n', '        2500,\n', '        2400,\n', '        2300,\n', '        2200,\n', '        2100,\n', '        2000,\n', '        2000,\n', '        2000,\n', '        2000\n', '    ];\n', '\n', '    uint256 public constant HARDCAP = 20000 ether;\n', '    uint256 public constant MULTIPLIER = 10 ** 10;\n', '\n', '     /*\n', '     * MODIFIERS\n', '     */\n', '     modifier onlyFounder() {\n', '        require(msg.sender == founder);\n', '        _;\n', '     }\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Setup the escrow account address, all ethers will be sent to this address.\n', '     *\n', '     *\n', '     * addressOfToken address Of Token Used As Reward\n', '     *\n', '     */\n', '    function TcashCrowdsale (\n', '        address _target,\n', '        address addressOfToken\n', '    ) {\n', '        require(msg.sender != 0x0);\n', '        require(_target != 0x0);\n', '        require(addressOfToken != 0x0);\n', '        target = _target;\n', '        founder = msg.sender;\n', '        tokenReward = TCASH(addressOfToken);\n', '    }\n', '\n', '    function safeAdd(uint256 a, uint256 b) internal constant returns (uint256) {\n', '      uint256 c = a + b;\n', '      require(c >= a);\n', '      return c;\n', '    }\n', '\n', '    function safeMul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '      uint256 c = a * b;\n', '      require(a == 0 || c / a == b);\n', '      return c;\n', '    }\n', '\n', '    function safeDiv(uint256 a, uint256 b) internal constant returns (uint256) {\n', '      // require(b > 0); // Solidity automatically throws when dividing by 0\n', '      uint256 c = a / b;\n', "      // require(a == b * c + a % b); // There is no case in which this doesn't hold\n", '      return c;\n', '    }\n', '\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is\n', '     * called whenever anyone sends funds to a contract\n', '     */\n', '    function () payable {\n', '        buyToken(msg.sender);\n', '    }\n', '\n', '    function buyToken(address receiver) payable {\n', '        require(!halted);\n', '        require(!crowdsaleClosed);\n', '        require(receiver != 0x0);\n', '        require(receiver != target);\n', '        require(msg.value >= 0.01 ether);\n', '        require(weiRaised <= HARDCAP);\n', '        uint256 weiAmount = msg.value;\n', '        uint256 tokens = computeTokenAmount(weiAmount);\n', '        if (tokenReward.transfer(receiver, tokens)) {\n', '           tokenIssued = safeAdd(tokenIssued, tokens);\n', '        } else {\n', '           revert();\n', '        }\n', '        weiRaised = safeAdd(weiRaised, weiAmount);\n', '        contributors = safeAdd(contributors, 1);\n', '        if (!target.send(weiAmount)) {\n', '           revert();\n', '        }\n', '    }\n', '\n', '    function price() constant returns (uint256 tokens) {\n', '        tokens = priceToken[phase];\n', '    }\n', '\n', '    function computeTokenAmount(uint256 weiAmount) internal constant returns (uint256 tokens) {\n', '        tokens = safeMul(safeDiv(weiAmount, MULTIPLIER), priceToken[phase]);\n', '    }\n', '\n', '    /**\n', '     * Emergency Stop crowdsale.\n', '     *\n', '     */\n', '    function halt() onlyFounder {\n', '        halted = true;\n', '    }\n', '\n', '    /**\n', '     * Resume crowdsale.\n', '     *\n', '     */\n', '    function unhalt() onlyFounder {\n', '        halted = false;\n', '    }\n', '\n', '    /**\n', '     * set crowdsale phase\n', '     *\n', '     */\n', '    function setPhase(uint256 nPhase) onlyFounder {\n', '        require((nPhase < priceToken.length) && (nPhase >= 0));\n', '        phase = nPhase;\n', '    }\n', '\n', '    /**\n', '     * Withdraw unsale Token\n', '     *\n', '     */\n', '    function tokenWithdraw(address receiver, uint256 tokens) onlyFounder {\n', '        require(receiver != 0x0);\n', '        require(tokens > 0);\n', '        if (!tokenReward.transfer(receiver, tokens)) {\n', '           revert();\n', '        }\n', '    }\n', '\n', '    /**\n', '     * close Crowdsale\n', '     *\n', '     * Close the crowdsale\n', '     */\n', '    function closeCrowdsale() onlyFounder {\n', '        crowdsaleClosed = true;\n', '    }\n', '\n', '}']