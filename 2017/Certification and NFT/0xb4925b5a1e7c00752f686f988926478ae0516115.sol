['pragma solidity ^0.4.15;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '\n', '    //Variables\n', '    address public owner;\n', '\n', '    address public newOwner;\n', '\n', '    //    Modifiers\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0));\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        if (msg.sender == newOwner) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) {\n', '    //require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    //require(_wallet != 0x0);\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return now > endTime;\n', '  }\n', '}\n', '\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedCrowdsale(uint256 _cap) {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  // overriding Crowdsale#validPurchase to add extra cap logic\n', '  // @return true if investors can buy at the moment\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinCap = weiRaised.add(msg.value) <= cap;\n', '    return super.validPurchase() && withinCap;\n', '  }\n', '\n', '  // overriding Crowdsale#hasEnded to add cap logic\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    return super.hasEnded() || capReached;\n', '  }\n', '\n', '}\n', '\n', 'contract LamdenTau is MintableToken {\n', '    string public constant name = "Lamden Tau";\n', '    string public constant symbol = "TAU";\n', '    uint8 public constant decimals = 18;\n', '}\n', '\n', 'contract Presale is CappedCrowdsale, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => bool) public whitelist;\n', '\n', '    bool public isFinalized = false;\n', '    event Finalized();\n', '    \n', '    address public team = 0xabc;\n', '    uint256 public teamShare = 150000000 * (10 ** 18);\n', '    \n', '    address public seed = 0xdef;\n', '    uint256 public seedShare = 1000000 * (10 ** 18);\n', '\n', '    bool public hasAllocated = false;\n', '\n', '    address public mediator = 0x0;\n', '    \n', '    function Presale(uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _cap, address _wallet, address _tokenAddress) \n', '    Crowdsale(_startTime, _endTime, _rate, _wallet)\n', '    CappedCrowdsale(_cap)\n', '    {\n', '        token = LamdenTau(_tokenAddress);\n', '    }\n', '    \n', '    // Crowdsale overrides\n', '    function createTokenContract() internal returns (MintableToken) {\n', '        return LamdenTau(0x0);\n', '    }\n', '\n', '    function validPurchase() internal constant returns (bool) {\n', '        bool withinCap = weiRaised.add(msg.value) <= cap;\n', '        bool valid = super.validPurchase() && withinCap && whitelist[msg.sender];\n', '        return valid;\n', '    }\n', '    // * * *\n', '    \n', '    // Finalizer functions. Redefined from FinalizableCrowdsale to prevent diamond inheritence complexities\n', '    \n', '    function finalize() onlyOwner public {\n', '      require(mediator != 0x0);\n', '      require(!isFinalized);\n', '      require(hasEnded());\n', '      \n', '      finalization();\n', '      Finalized();\n', '\n', '      isFinalized = true;\n', '    }\n', '    \n', '    function finalization() internal {\n', '        // set the ownership to the mediator so it can pass it onto the sale contract\n', '        // at the time that the sale contract is deployed\n', '        token.transferOwnership(mediator);\n', '        Mediator m = Mediator(mediator);\n', '        m.acceptToken();\n', '    }\n', '    // * * * \n', '\n', '    // Contract Specific functions\n', '    function assignMediator(address _m) public onlyOwner returns(bool) {\n', '        mediator = _m;\n', '        return true;\n', '    }\n', '    \n', '    function whitelistUser(address _a) public onlyOwner returns(bool){\n', '        whitelist[_a] = true;\n', '        return whitelist[_a];\n', '    }\n', '\n', '    function whitelistUsers(address[] users) external onlyOwner {\n', '        for (uint i = 0; i < users.length; i++) {\n', '            whitelist[users[i]] = true;\n', '        }\n', '    }\n', '\n', '    function unWhitelistUser(address _a) public onlyOwner returns(bool){\n', '        whitelist[_a] = false;\n', '        return whitelist[_a];\n', '    }\n', '\n', '    function unWhitelistUsers(address[] users) external onlyOwner {\n', '        for (uint i = 0; i < users.length; i++) {\n', '            whitelist[users[i]] = false;\n', '        }\n', '    }\n', '    \n', '    function allocateTokens() public onlyOwner returns(bool) {\n', '        require(hasAllocated == false);\n', '        token.mint(team, teamShare);\n', '        token.mint(seed, seedShare);\n', '        hasAllocated = true;\n', '        return hasAllocated;\n', '    }\n', '    \n', '    function acceptToken() public onlyOwner returns(bool) {\n', '        token.acceptOwnership();\n', '        return true;\n', '    }\n', '\n', '    function changeEndTime(uint256 _e) public onlyOwner returns(uint256) {\n', '        require(_e > startTime);\n', '        endTime = _e;\n', '        return endTime;\n', '    }\n', '\n', '    function mintTokens(uint256 tokenAmount) public onlyOwner {\n', '       require(!isFinalized);\n', '       token.mint(wallet, tokenAmount);\n', '    }\n', '    \n', '    // * * *\n', '}\n', '\n', 'contract Mediator is Ownable {\n', '    address public presale;\n', '    LamdenTau public tau;\n', '    address public sale;\n', '    \n', '    function setPresale(address p) public onlyOwner { presale = p; }\n', '    function setTau(address t) public onlyOwner { tau = LamdenTau(t); }\n', '    function setSale(address s) public onlyOwner { sale = s; }\n', '    \n', '    modifier onlyPresale {\n', '        require(msg.sender == presale);\n', '        _;\n', '    }\n', '    \n', '    modifier onlySale {\n', '        require(msg.sender == sale);\n', '        _;\n', '    }\n', '    \n', '    function acceptToken() public onlyPresale { tau.acceptOwnership(); }\n', '    function passOff() public onlySale { tau.transferOwnership(sale); }\n', '}\n', '\n', 'contract Sale is CappedCrowdsale, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    // Initialization Variables\n', '    uint256 public amountPerDay; // 30 eth\n', '    //uint256 public constant UNIX_DAY = 86400;\n', '\n', '    bool public isFinalized = false;\n', '    event Finalized();\n', '\n', '    //mapping (address => bool) public whitelist;\n', '    // * * *\n', '\n', '    // Constructor\n', '    function Sale(uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _cap, address _wallet, address _tokenAddress)\n', '    Crowdsale(_startTime, _endTime, _rate, _wallet)\n', '    CappedCrowdsale(_cap)\n', '    {\n', '        //amountPerDay = _amountPerDay;\n', '        token = LamdenTau(_tokenAddress);\n', '    }\n', '    // * * *\n', '    \n', '    // Crowdsale overrides\n', '    function createTokenContract() internal returns (MintableToken) {\n', '        return LamdenTau(0x0);\n', '    }\n', '    \n', '    function validPurchase() internal constant returns (bool) {\n', '        bool withinCap = weiRaised.add(msg.value) <= cap;\n', '        bool valid = super.validPurchase() && withinCap;\n', '        return valid;\n', '    }\n', '\n', '    function buyTokens(address beneficiary) public payable {\n', '        super.buyTokens(beneficiary);\n', '    }\n', '    // * * *\n', '\n', '    // Finalizer functions\n', '    function finalize() onlyOwner public {\n', '      require(!isFinalized);\n', '      require(hasEnded());\n', '\n', '      finalization();\n', '      Finalized();\n', '\n', '      isFinalized = true;\n', '    }\n', '    \n', '    function finalization() internal {\n', '        token.finishMinting();\n', '    }\n', '    \n', '    function claimToken(address _m) public onlyOwner returns(bool) {\n', '        Mediator m = Mediator(_m);\n', '        m.passOff();\n', '        token.acceptOwnership();\n', '        return true;\n', '    }\n', '\n', '    function changeEndTime(uint256 _e) public onlyOwner returns(uint256) {\n', '        require(_e > startTime);\n', '        endTime = _e;\n', '        return endTime;\n', '    }\n', '\n', '    function mintTokens(uint256 tokenAmount) public onlyOwner {\n', '       require(!isFinalized);\n', '       token.mint(wallet, tokenAmount);\n', '    }\n', '    // * * *\n', '}']