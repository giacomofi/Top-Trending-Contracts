['pragma solidity 0.4.15;\n', '\n', '/// @dev `Owned` is a base level contract that assigns an `owner` that can be\n', '///  later changed\n', 'contract Owned {\n', '\n', '    /// @dev `owner` is the only address that can call a function with this\n', '    /// modifier\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    address public owner;\n', '\n', '    /// @notice The Constructor assigns the message sender to be `owner`\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    address public newOwner;\n', '\n', '    /// @notice `owner` can step down and assign some other address to this role\n', '    /// @param _newOwner The address of the new owner. 0x0 can be used to create\n', '    function changeOwner(address _newOwner) onlyOwner {\n', '        if(msg.sender == owner) {\n', '            owner = _newOwner;\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '\n', '/// @title Vesting trustee\n', 'contract Trustee is Owned {\n', '    using SafeMath for uint256;\n', '\n', '    // The address of the SHP ERC20 token.\n', '    SHP public shp;\n', '\n', '    struct Grant {\n', '        uint256 value;\n', '        uint256 start;\n', '        uint256 cliff;\n', '        uint256 end;\n', '        uint256 transferred;\n', '        bool revokable;\n', '    }\n', '\n', '    // Grants holder.\n', '    mapping (address => Grant) public grants;\n', '\n', '    // Total tokens available for vesting.\n', '    uint256 public totalVesting;\n', '\n', '    event NewGrant(address indexed _from, address indexed _to, uint256 _value);\n', '    event UnlockGrant(address indexed _holder, uint256 _value);\n', '    event RevokeGrant(address indexed _holder, uint256 _refund);\n', '\n', '    /// @dev Constructor that initializes the address of the SHP contract.\n', '    /// @param _shp SHP The address of the previously deployed SHP smart contract.\n', '    function Trustee(SHP _shp) {\n', '        require(_shp != address(0));\n', '        shp = _shp;\n', '    }\n', '\n', '    /// @dev Grant tokens to a specified address.\n', '    /// @param _to address The address to grant tokens to.\n', '    /// @param _value uint256 The amount of tokens to be granted.\n', '    /// @param _start uint256 The beginning of the vesting period.\n', '    /// @param _cliff uint256 Duration of the cliff period.\n', '    /// @param _end uint256 The end of the vesting period.\n', '    /// @param _revokable bool Whether the grant is revokable or not.\n', '    function grant(address _to, uint256 _value, uint256 _start, uint256 _cliff, uint256 _end, bool _revokable)\n', '        public onlyOwner {\n', '        require(_to != address(0));\n', '        require(_value > 0);\n', '\n', '        // Make sure that a single address can be granted tokens only once.\n', '        require(grants[_to].value == 0);\n', '\n', '        // Check for date inconsistencies that may cause unexpected behavior.\n', '        require(_start <= _cliff && _cliff <= _end);\n', '\n', "        // Check that this grant doesn't exceed the total amount of tokens currently available for vesting.\n", '        require(totalVesting.add(_value) <= shp.balanceOf(address(this)));\n', '\n', '        // Assign a new grant.\n', '        grants[_to] = Grant({\n', '            value: _value,\n', '            start: _start,\n', '            cliff: _cliff,\n', '            end: _end,\n', '            transferred: 0,\n', '            revokable: _revokable\n', '        });\n', '\n', '        // Tokens granted, reduce the total amount available for vesting.\n', '        totalVesting = totalVesting.add(_value);\n', '\n', '        NewGrant(msg.sender, _to, _value);\n', '    }\n', '\n', '    /// @dev Revoke the grant of tokens of a specifed address.\n', '    /// @param _holder The address which will have its tokens revoked.\n', '    function revoke(address _holder) public onlyOwner {\n', '        Grant grant = grants[_holder];\n', '\n', '        require(grant.revokable);\n', '\n', '        // Send the remaining SHP back to the owner.\n', '        uint256 refund = grant.value.sub(grant.transferred);\n', '\n', '        // Remove the grant.\n', '        delete grants[_holder];\n', '\n', '        totalVesting = totalVesting.sub(refund);\n', '        shp.transfer(msg.sender, refund);\n', '\n', '        RevokeGrant(_holder, refund);\n', '    }\n', '\n', '    /// @dev Calculate the total amount of vested tokens of a holder at a given time.\n', '    /// @param _holder address The address of the holder.\n', '    /// @param _time uint256 The specific time.\n', "    /// @return a uint256 representing a holder's total amount of vested tokens.\n", '    function vestedTokens(address _holder, uint256 _time) public constant returns (uint256) {\n', '        Grant grant = grants[_holder];\n', '        if (grant.value == 0) {\n', '            return 0;\n', '        }\n', '\n', '        return calculateVestedTokens(grant, _time);\n', '    }\n', '\n', '    /// @dev Calculate amount of vested tokens at a specifc time.\n', '    /// @param _grant Grant The vesting grant.\n', '    /// @param _time uint256 The time to be checked\n', '    /// @return An uint256 representing the amount of vested tokens of a specific grant.\n', '    ///   |                         _/--------   vestedTokens rect\n', '    ///   |                       _/\n', '    ///   |                     _/\n', '    ///   |                   _/\n', '    ///   |                 _/\n', '    ///   |                /\n', '    ///   |              .|\n', '    ///   |            .  |\n', '    ///   |          .    |\n', '    ///   |        .      |\n', '    ///   |      .        |\n', '    ///   |    .          |\n', '    ///   +===+===========+---------+----------> time\n', '    ///     Start       Cliff      End\n', '    function calculateVestedTokens(Grant _grant, uint256 _time) private constant returns (uint256) {\n', "        // If we're before the cliff, then nothing is vested.\n", '        if (_time < _grant.cliff) {\n', '            return 0;\n', '        }\n', '\n', "        // If we're after the end of the vesting period - everything is vested;\n", '        if (_time >= _grant.end) {\n', '            return _grant.value;\n', '        }\n', '\n', '        // Interpolate all vested tokens: vestedTokens = tokens/// (time - start) / (end - start)\n', '         return _grant.value.mul(_time.sub(_grant.start)).div(_grant.end.sub(_grant.start));\n', '    }\n', '\n', '    /// @dev Unlock vested tokens and transfer them to their holder.\n', '    /// @return a uint256 representing the amount of vested tokens transferred to their holder.\n', '    function unlockVestedTokens() public {\n', '        Grant grant = grants[msg.sender];\n', '        require(grant.value != 0);\n', '\n', '        // Get the total amount of vested tokens, acccording to grant.\n', '        uint256 vested = calculateVestedTokens(grant, now);\n', '        if (vested == 0) {\n', '            return;\n', '        }\n', '\n', "        // Make sure the holder doesn't transfer more than what he already has.\n", '        uint256 transferable = vested.sub(grant.transferred);\n', '        if (transferable == 0) {\n', '            return;\n', '        }\n', '\n', '        grant.transferred = grant.transferred.add(transferable);\n', '        totalVesting = totalVesting.sub(transferable);\n', '        shp.transfer(msg.sender, transferable);\n', '\n', '        UnlockGrant(msg.sender, transferable);\n', '    }\n', '}\n', '\n', '/// @dev The token controller contract must implement these functions\n', 'contract TokenController {\n', '    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n', '    /// @param _owner The address that sent the ether to create tokens\n', '    /// @return True if the ether is accepted, false if it throws\n', '    function proxyPayment(address _owner) payable returns(bool);\n', '\n', '    /// @notice Notifies the controller about a token transfer allowing the\n', '    ///  controller to react if desired\n', '    /// @param _from The origin of the transfer\n', '    /// @param _to The destination of the transfer\n', '    /// @param _amount The amount of the transfer\n', '    /// @return False if the controller does not authorize the transfer\n', '    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n', '\n', '    /// @notice Notifies the controller about an approval allowing the\n', '    ///  controller to react if desired\n', '    /// @param _owner The address that calls `approve()`\n', '    /// @param _spender The spender in the `approve()` call\n', '    /// @param _amount The amount in the `approve()` call\n', '    /// @return False if the controller does not authorize the approval\n', '    function onApprove(address _owner, address _spender, uint _amount)\n', '        returns(bool);\n', '}\n', '\n', 'contract Controlled {\n', '    /// @notice The address of the controller is the only address that can call\n', '    ///  a function with this modifier\n', '    modifier onlyController { require(msg.sender == controller); _; }\n', '\n', '    address public controller;\n', '\n', '    function Controlled() { controller = msg.sender;}\n', '\n', '    /// @notice Changes the controller of the contract\n', '    /// @param _newController The new controller of the contract\n', '    function changeController(address _newController) onlyController {\n', '        controller = _newController;\n', '    }\n', '}\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n', '}\n', '\n', '/// @dev The actual token contract, the default controller is the msg.sender\n', '///  that deploys the contract, so usually this token will be deployed by a\n', '///  token controller contract, which Giveth will call a "Campaign"\n', 'contract MiniMeToken is Controlled {\n', '\n', "    string public name;                //The Token's name: e.g. DigixDAO Tokens\n", '    uint8 public decimals;             //Number of decimals of the smallest unit\n', '    string public symbol;              //An identifier: e.g. REP\n', "    string public version = 'MMT_0.1'; //An arbitrary versioning scheme\n", '\n', '\n', '    /// @dev `Checkpoint` is the structure that attaches a block number to a\n', '    ///  given value, the block number attached is the one that last changed the\n', '    ///  value\n', '    struct  Checkpoint {\n', '\n', '        // `fromBlock` is the block number that the value was generated from\n', '        uint128 fromBlock;\n', '\n', '        // `value` is the amount of tokens at a specific block number\n', '        uint128 value;\n', '    }\n', '\n', '    // `parentToken` is the Token address that was cloned to produce this token;\n', '    //  it will be 0x0 for a token that was not cloned\n', '    MiniMeToken public parentToken;\n', '\n', '    // `parentSnapShotBlock` is the block number from the Parent Token that was\n', '    //  used to determine the initial distribution of the Clone Token\n', '    uint public parentSnapShotBlock;\n', '\n', '    // `creationBlock` is the block number that the Clone Token was created\n', '    uint public creationBlock;\n', '\n', '    // `balances` is the map that tracks the balance of each address, in this\n', '    //  contract when the balance changes the block number that the change\n', '    //  occurred is also included in the map\n', '    mapping (address => Checkpoint[]) balances;\n', '\n', '    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    // Tracks the history of the `totalSupply` of the token\n', '    Checkpoint[] totalSupplyHistory;\n', '\n', '    // Flag that determines if the token is transferable or not.\n', '    bool public transfersEnabled;\n', '\n', '    // The factory used to create new clone tokens\n', '    MiniMeTokenFactory public tokenFactory;\n', '\n', '////////////////\n', '// Constructor\n', '////////////////\n', '\n', '    /// @notice Constructor to create a MiniMeToken\n', '    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n', '    ///  will create the Clone token contracts, the token factory needs to be\n', '    ///  deployed first\n', '    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n', '    ///  new token\n', '    /// @param _parentSnapShotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token, set to 0 if it\n', '    ///  is a new token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    function MiniMeToken(\n', '        address _tokenFactory,\n', '        address _parentToken,\n', '        uint _parentSnapShotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) {\n', '        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n', '        name = _tokenName;                                 // Set the name\n', '        decimals = _decimalUnits;                          // Set the decimals\n', '        symbol = _tokenSymbol;                             // Set the symbol\n', '        parentToken = MiniMeToken(_parentToken);\n', '        parentSnapShotBlock = _parentSnapShotBlock;\n', '        transfersEnabled = _transfersEnabled;\n', '        creationBlock = block.number;\n', '    }\n', '\n', '\n', '///////////////////\n', '// ERC20 Methods\n', '///////////////////\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _amount) returns (bool success) {\n', '        require(transfersEnabled);\n', '        return doTransfer(msg.sender, _to, _amount);\n', '    }\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n', '    ///  is approved by `_from`\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function transferFrom(address _from, address _to, uint256 _amount\n', '    ) returns (bool success) {\n', '\n', '        // The controller of this contract can move tokens around at will,\n', '        //  this is important to recognize! Confirm that you trust the\n', '        //  controller of this contract, which in most situations should be\n', '        //  another open source smart contract or 0x0\n', '        if (msg.sender != controller) {\n', '            require(transfersEnabled);\n', '\n', '            // The standard ERC 20 transferFrom functionality\n', '            if (allowed[_from][msg.sender] < _amount) return false;\n', '            allowed[_from][msg.sender] -= _amount;\n', '        }\n', '        return doTransfer(_from, _to, _amount);\n', '    }\n', '\n', '    /// @dev This is the actual transfer function in the token contract, it can\n', '    ///  only be called by other functions in this contract.\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function doTransfer(address _from, address _to, uint _amount\n', '    ) internal returns(bool) {\n', '\n', '           if (_amount == 0) {\n', '               return true;\n', '           }\n', '\n', '           require(parentSnapShotBlock < block.number);\n', '\n', '           // Do not allow transfer to 0x0 or the token contract itself\n', '           require((_to != 0) && (_to != address(this)));\n', '\n', '           // If the amount being transfered is more than the balance of the\n', '           //  account the transfer returns false\n', '           var previousBalanceFrom = balanceOfAt(_from, block.number);\n', '           if (previousBalanceFrom < _amount) {\n', '               return false;\n', '           }\n', '\n', '           // Alerts the token controller of the transfer\n', '           if (isContract(controller)) {\n', '               require(TokenController(controller).onTransfer(_from, _to, _amount));\n', '           }\n', '\n', '           // First update the balance array with the new value for the address\n', '           //  sending the tokens\n', '           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n', '\n', '           // Then update the balance array with the new value for the address\n', '           //  receiving the tokens\n', '           var previousBalanceTo = balanceOfAt(_to, block.number);\n', '           require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n', '           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n', '\n', '           // An event to make the transfer easy to find on the blockchain\n', '           Transfer(_from, _to, _amount);\n', '\n', '           return true;\n', '    }\n', '\n', "    /// @param _owner The address that's balance is being requested\n", '    /// @return The balance of `_owner` at the current block\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balanceOfAt(_owner, block.number);\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n', '    ///  its behalf. This is a modified version of the ERC20 approve function\n', '    ///  to be a little bit safer\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the approval was successful\n', '    function approve(address _spender, uint256 _amount) returns (bool success) {\n', '        require(transfersEnabled);\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        // Alerts the token controller of the approve function call\n', '        if (isContract(controller)) {\n', '            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n', '        }\n', '\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to read the `allowed[]` map\n', '    /// @param _owner The address of the account that owns the token\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens of _owner that _spender is allowed\n', '    ///  to spend\n', '    function allowance(address _owner, address _spender\n', '    ) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n', '    ///  its behalf, and then a function is triggered in the contract that is\n', '    ///  being approved, `_spender`. This allows users to use their tokens to\n', '    ///  interact with contracts in one function call instead of two\n', '    /// @param _spender The address of the contract able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the function call was successful\n', '    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n', '    ) returns (bool success) {\n', '        require(approve(_spender, _amount));\n', '\n', '        ApproveAndCallFallBack(_spender).receiveApproval(\n', '            msg.sender,\n', '            _amount,\n', '            this,\n', '            _extraData\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to get the total number of tokens\n', '    /// @return The total number of tokens\n', '    function totalSupply() constant returns (uint) {\n', '        return totalSupplyAt(block.number);\n', '    }\n', '\n', '\n', '////////////////\n', '// Query balance and totalSupply in History\n', '////////////////\n', '\n', '    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @param _blockNumber The block number when the balance is queried\n', '    /// @return The balance at `_blockNumber`\n', '    function balanceOfAt(address _owner, uint _blockNumber) constant\n', '        returns (uint) {\n', '\n', '        // These next few lines are used when the balance of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.balanceOfAt` be queried at the\n', '        //  genesis block for that token as this contains initial balance of\n', '        //  this token\n', '        if ((balances[_owner].length == 0)\n', '            || (balances[_owner][0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != 0) {\n', '                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                // Has no parent\n', '                return 0;\n', '            }\n', '\n', '        // This will return the expected balance during normal situations\n', '        } else {\n', '            return getValueAt(balances[_owner], _blockNumber);\n', '        }\n', '    }\n', '\n', '    /// @notice Total amount of tokens at a specific `_blockNumber`.\n', '    /// @param _blockNumber The block number when the totalSupply is queried\n', '    /// @return The total amount of tokens at `_blockNumber`\n', '    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n', '\n', '        // These next few lines are used when the totalSupply of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.totalSupplyAt` be queried at the\n', '        //  genesis block for this token as that contains totalSupply of this\n', '        //  token at this block number.\n', '        if ((totalSupplyHistory.length == 0)\n', '            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != 0) {\n', '                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                return 0;\n', '            }\n', '\n', '        // This will return the expected totalSupply during normal situations\n', '        } else {\n', '            return getValueAt(totalSupplyHistory, _blockNumber);\n', '        }\n', '    }\n', '\n', '////////////////\n', '// Clone Token Method\n', '////////////////\n', '\n', '    /// @notice Creates a new clone token with the initial distribution being\n', '    ///  this token at `_snapshotBlock`\n', '    /// @param _cloneTokenName Name of the clone token\n', '    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\n', '    /// @param _cloneTokenSymbol Symbol of the clone token\n', '    /// @param _snapshotBlock Block when the distribution of the parent token is\n', '    ///  copied to set the initial distribution of the new clone token;\n', '    ///  if the block is zero than the actual block, the current block is used\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    /// @return The address of the new MiniMeToken Contract\n', '    function createCloneToken(\n', '        string _cloneTokenName,\n', '        uint8 _cloneDecimalUnits,\n', '        string _cloneTokenSymbol,\n', '        uint _snapshotBlock,\n', '        bool _transfersEnabled\n', '        ) returns(address) {\n', '        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n', '        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n', '            this,\n', '            _snapshotBlock,\n', '            _cloneTokenName,\n', '            _cloneDecimalUnits,\n', '            _cloneTokenSymbol,\n', '            _transfersEnabled\n', '            );\n', '\n', '        cloneToken.changeController(msg.sender);\n', '\n', '        // An event to make the token easy to find on the blockchain\n', '        NewCloneToken(address(cloneToken), _snapshotBlock);\n', '        return address(cloneToken);\n', '    }\n', '\n', '////////////////\n', '// Generate and destroy tokens\n', '////////////////\n', '\n', '    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n', '    /// @param _owner The address that will be assigned the new tokens\n', '    /// @param _amount The quantity of tokens generated\n', '    /// @return True if the tokens are generated correctly\n', '    function generateTokens(address _owner, uint _amount\n', '    ) onlyController returns (bool) {\n', '        uint curTotalSupply = totalSupply();\n', '        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n', '        uint previousBalanceTo = balanceOf(_owner);\n', '        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n', '        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n', '        Transfer(0, _owner, _amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    /// @notice Burns `_amount` tokens from `_owner`\n', '    /// @param _owner The address that will lose the tokens\n', '    /// @param _amount The quantity of tokens to burn\n', '    /// @return True if the tokens are burned correctly\n', '    function destroyTokens(address _owner, uint _amount\n', '    ) onlyController returns (bool) {\n', '        uint curTotalSupply = totalSupply();\n', '        require(curTotalSupply >= _amount);\n', '        uint previousBalanceFrom = balanceOf(_owner);\n', '        require(previousBalanceFrom >= _amount);\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n', '        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n', '        Transfer(_owner, 0, _amount);\n', '        return true;\n', '    }\n', '\n', '////////////////\n', '// Enable tokens transfers\n', '////////////////\n', '\n', '\n', '    /// @notice Enables token holders to transfer their tokens freely if true\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    function enableTransfers(bool _transfersEnabled) onlyController {\n', '        transfersEnabled = _transfersEnabled;\n', '    }\n', '\n', '////////////////\n', '// Internal helper functions to query and set a value in a snapshot array\n', '////////////////\n', '\n', '    /// @dev `getValueAt` retrieves the number of tokens at a given block number\n', '    /// @param checkpoints The history of values being queried\n', '    /// @param _block The block number to retrieve the value at\n', '    /// @return The number of tokens being queried\n', '    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n', '    ) constant internal returns (uint) {\n', '        if (checkpoints.length == 0) return 0;\n', '\n', '        // Shortcut for the actual value\n', '        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n', '            return checkpoints[checkpoints.length-1].value;\n', '        if (_block < checkpoints[0].fromBlock) return 0;\n', '\n', '        // Binary search of the value in the array\n', '        uint min = 0;\n', '        uint max = checkpoints.length-1;\n', '        while (max > min) {\n', '            uint mid = (max + min + 1)/ 2;\n', '            if (checkpoints[mid].fromBlock<=_block) {\n', '                min = mid;\n', '            } else {\n', '                max = mid-1;\n', '            }\n', '        }\n', '        return checkpoints[min].value;\n', '    }\n', '\n', '    /// @dev `updateValueAtNow` used to update the `balances` map and the\n', '    ///  `totalSupplyHistory`\n', '    /// @param checkpoints The history of data being updated\n', '    /// @param _value The new number of tokens\n', '    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n', '    ) internal  {\n', '        if ((checkpoints.length == 0)\n', '        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\n', '               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n', '               newCheckPoint.fromBlock =  uint128(block.number);\n', '               newCheckPoint.value = uint128(_value);\n', '           } else {\n', '               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\n', '               oldCheckPoint.value = uint128(_value);\n', '           }\n', '    }\n', '\n', '    /// @dev Internal function to determine if an address is a contract\n', '    /// @param _addr The address being queried\n', '    /// @return True if `_addr` is a contract\n', '    function isContract(address _addr) constant internal returns(bool) {\n', '        uint size;\n', '        if (_addr == 0) return false;\n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '        return size>0;\n', '    }\n', '\n', '    /// @dev Helper function to return a min betwen the two uints\n', '    function min(uint a, uint b) internal returns (uint) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', "    /// @notice The fallback function: If the contract's controller has not been\n", '    ///  set to 0, then the `proxyPayment` method is called which relays the\n', '    ///  ether and creates tokens as described in the token controller contract\n', '    function ()  payable {\n', '        require(isContract(controller));\n', '        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n', '    }\n', '\n', '//////////\n', '// Safety Methods\n', '//////////\n', '\n', '    /// @notice This method can be used by the controller to extract mistakenly\n', '    ///  sent tokens to this contract.\n', '    /// @param _token The address of the token contract that you want to recover\n', '    ///  set to 0 in case you want to extract ether.\n', '    function claimTokens(address _token) onlyController {\n', '        if (_token == 0x0) {\n', '            controller.transfer(this.balance);\n', '            return;\n', '        }\n', '\n', '        MiniMeToken token = MiniMeToken(_token);\n', '        uint balance = token.balanceOf(this);\n', '        token.transfer(controller, balance);\n', '        ClaimedTokens(_token, controller, balance);\n', '    }\n', '\n', '////////////////\n', '// Events\n', '////////////////\n', '    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n', '    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n', '    event Approval(\n', '        address indexed _owner,\n', '        address indexed _spender,\n', '        uint256 _amount\n', '        );\n', '\n', '}\n', '\n', '\n', '////////////////\n', '// MiniMeTokenFactory\n', '////////////////\n', '\n', '/// @dev This contract is used to generate clone contracts from a contract.\n', '///  In solidity this is the way to create a contract from a contract of the\n', '///  same class\n', 'contract MiniMeTokenFactory {\n', '\n', '    /// @notice Update the DApp by creating a new token with new functionalities\n', '    ///  the msg.sender becomes the controller of this clone token\n', '    /// @param _parentToken Address of the token being cloned\n', '    /// @param _snapshotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    /// @return The address of the new token contract\n', '    function createCloneToken(\n', '        address _parentToken,\n', '        uint _snapshotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) returns (MiniMeToken) \n', '    {\n', '        MiniMeToken newToken = new MiniMeToken(\n', '            this,\n', '            _parentToken,\n', '            _snapshotBlock,\n', '            _tokenName,\n', '            _decimalUnits,\n', '            _tokenSymbol,\n', '            _transfersEnabled\n', '            );\n', '\n', '        newToken.changeController(msg.sender);\n', '        return newToken;\n', '    }\n', '}\n', '\n', 'contract SCD is MiniMeToken {\n', '    // @dev SCD constructor\n', '    function SCD(address _tokenFactory)\n', '            MiniMeToken(\n', '                _tokenFactory,\n', '                0x0,                             // no parent token\n', '                0,                               // no snapshot block number from parent\n', '                "Sharpe Crypto-Derivative",      // Token name\n', '                18,                              // Decimals\n', '                "SCD",                           // Symbol\n', '                true                             // Enable transfers\n', '            ) {}\n', '}\n', '\n', 'contract SHP is MiniMeToken {\n', '    // @dev SHP constructor\n', '    function SHP(address _tokenFactory)\n', '            MiniMeToken(\n', '                _tokenFactory,\n', '                0x0,                             // no parent token\n', '                0,                               // no snapshot block number from parent\n', '                "Sharpe Platform Token",         // Token name\n', '                18,                              // Decimals\n', '                "SHP",                           // Symbol\n', '                true                             // Enable transfers\n', '            ) {}\n', '}\n', '\n', 'contract AffiliateUtility is Owned {\n', '    using SafeMath for uint256;\n', '    \n', '    uint256 public tierTwoMin;\n', '    uint256 public tierThreeMin;\n', '\n', '    uint256 public constant TIER1_PERCENT = 3;\n', '    uint256 public constant TIER2_PERCENT = 4;\n', '    uint256 public constant TIER3_PERCENT = 5;\n', '    \n', '    mapping (address => Affiliate) private affiliates;\n', '\n', '    event AffiliateReceived(address affiliateAddress, address investorAddress, bool valid);\n', '\n', '    struct Affiliate {\n', '        address etherAddress;\n', '        bool isPresent;\n', '    }\n', '\n', '    function AffiliateUtility(uint256 _tierTwoMin, uint256 _tierThreeMin) {\n', '        setTiers(_tierTwoMin, _tierThreeMin);\n', '    }\n', '\n', '    /// @notice sets the Ether to Dollar exhchange rate\n', '    /// @param _tierTwoMin the tier 2 min (in WEI)\n', '    /// @param _tierThreeMin the tier 3 min (in WEI)\n', '    function setTiers(uint256 _tierTwoMin, uint256 _tierThreeMin) onlyOwner {\n', '        tierTwoMin = _tierTwoMin;\n', '        tierThreeMin = _tierThreeMin;\n', '    }\n', '\n', '    /// @notice This adds an affiliate Ethereum address to our whitelist\n', "    /// @param _investor The investor's address\n", '    /// @param _affiliate The Ethereum address of the affiliate\n', '    function addAffiliate(address _investor, address _affiliate) onlyOwner {\n', '        affiliates[_investor] = Affiliate(_affiliate, true);\n', '    }\n', '\n', '    /// @notice calculates and returns the amount to token minted for affilliate\n', '    /// @param _investor address of the investor\n', '    /// @param _contributorTokens amount of SHP tokens minted for contributor\n', '    /// @param _contributionValue amount of ETH contributed\n', '    /// @return tuple of two values (affiliateBonus, contributorBouns)\n', '    function applyAffiliate(\n', '        address _investor, \n', '        uint256 _contributorTokens, \n', '        uint256 _contributionValue\n', '    )\n', '        public \n', '        returns(uint256, uint256) \n', '    {\n', '        if (getAffiliate(_investor) == address(0)) {\n', '            return (0, 0);\n', '        }\n', '\n', '        uint256 contributorBonus = _contributorTokens.div(100);\n', '        uint256 affiliateBonus = 0;\n', '\n', '        if (_contributionValue < tierTwoMin) {\n', '            affiliateBonus = _contributorTokens.mul(TIER1_PERCENT).div(100);\n', '        } else if (_contributionValue >= tierTwoMin && _contributionValue < tierThreeMin) {\n', '            affiliateBonus = _contributorTokens.mul(TIER2_PERCENT).div(100);\n', '        } else {\n', '            affiliateBonus = _contributorTokens.mul(TIER3_PERCENT).div(100);\n', '        }\n', '\n', '        return(affiliateBonus, contributorBonus);\n', '    }\n', '\n', '    /// @notice Fetches the Ethereum address of a valid affiliate\n', '    /// @param _investor The Ethereum address of the investor\n', '    /// @return The Ethereum address as an address type\n', '    function getAffiliate(address _investor) constant returns(address) {\n', '        return affiliates[_investor].etherAddress;\n', '    }\n', '\n', '    /// @notice Checks if an affiliate is valid\n', '    /// @param _investor The Ethereum address of the investor\n', '    /// @return True or False\n', '    function isAffiliateValid(address _investor) constant public returns(bool) {\n', '        Affiliate memory affiliate = affiliates[_investor];\n', '        AffiliateReceived(affiliate.etherAddress, _investor, affiliate.isPresent);\n', '        return affiliate.isPresent;\n', '    }\n', '}\n', '\n', 'contract TokenSale is Owned, TokenController {\n', '    using SafeMath for uint256;\n', '    \n', '    SHP public shp;\n', '    AffiliateUtility public affiliateUtility;\n', '    Trustee public trustee;\n', '\n', '    address public etherEscrowAddress;\n', '    address public bountyAddress;\n', '    address public trusteeAddress;\n', '\n', '    uint256 public founderTokenCount = 0;\n', '    uint256 public reserveTokenCount = 0;\n', '\n', '    uint256 constant public CALLER_EXCHANGE_RATE = 2000;\n', '    uint256 constant public RESERVE_EXCHANGE_RATE = 1500;\n', '    uint256 constant public FOUNDER_EXCHANGE_RATE = 1000;\n', '    uint256 constant public BOUNTY_EXCHANGE_RATE = 500;\n', '    uint256 constant public MAX_GAS_PRICE = 50000000000;\n', '\n', '    bool public paused;\n', '    bool public closed;\n', '\n', '    mapping(address => bool) public approvedAddresses;\n', '\n', '    event Contribution(uint256 etherAmount, address _caller);\n', '    event NewSale(address indexed caller, uint256 etherAmount, uint256 tokensGenerated);\n', '    event SaleClosed(uint256 when);\n', '    \n', '    modifier notPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    modifier notClosed() {\n', '        require(!closed);\n', '        _;\n', '    }\n', '\n', '    modifier isValidated() {\n', '        require(msg.sender != 0x0);\n', '        require(msg.value > 0);\n', '        require(!isContract(msg.sender)); \n', '        require(tx.gasprice <= MAX_GAS_PRICE);\n', '        _;\n', '    }\n', '\n', '    modifier isApproved() {\n', '        require(approvedAddresses[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /// @notice Adds an approved address for the sale\n', '    /// @param _addr The address to approve for contribution\n', '    function approveAddress(address _addr) public onlyOwner {\n', '        approvedAddresses[_addr] = true;\n', '    }\n', '\n', '    /// @notice This method sends the Ether received to the Ether escrow address\n', "    /// and generates the calculated number of SHP tokens, sending them to the caller's address.\n", "    /// It also generates the founder's tokens and the reserve tokens at the same time.\n", '    function doBuy(\n', '        address _caller,\n', '        uint256 etherAmount\n', '    )\n', '        internal\n', '    {\n', '\n', '        Contribution(etherAmount, _caller);\n', '\n', '        uint256 callerTokens = etherAmount.mul(CALLER_EXCHANGE_RATE);\n', '        uint256 callerTokensWithDiscount = applyDiscount(etherAmount, callerTokens);\n', '\n', '        uint256 reserveTokens = etherAmount.mul(RESERVE_EXCHANGE_RATE);\n', '        uint256 founderTokens = etherAmount.mul(FOUNDER_EXCHANGE_RATE);\n', '        uint256 bountyTokens = etherAmount.mul(BOUNTY_EXCHANGE_RATE);\n', '        uint256 vestingTokens = founderTokens.add(reserveTokens);\n', '\n', '        founderTokenCount = founderTokenCount.add(founderTokens);\n', '        reserveTokenCount = reserveTokenCount.add(reserveTokens);\n', '\n', '        payAffiliate(callerTokensWithDiscount, msg.value, msg.sender);\n', '\n', '        shp.generateTokens(_caller, callerTokensWithDiscount);\n', '        shp.generateTokens(bountyAddress, bountyTokens);\n', '        shp.generateTokens(trusteeAddress, vestingTokens);\n', '\n', '        NewSale(_caller, etherAmount, callerTokensWithDiscount);\n', '        NewSale(trusteeAddress, etherAmount, vestingTokens);\n', '        NewSale(bountyAddress, etherAmount, bountyTokens);\n', '\n', '        etherEscrowAddress.transfer(etherAmount);\n', '        updateCounters(etherAmount);\n', '    }\n', '\n', '    /// @notice Applies the discount based on the discount tiers\n', '    /// @param _etherAmount The amount of ether used to evaluate the tier the contribution lies within\n', '    /// @param _contributorTokens The tokens allocated based on the contribution\n', '    function applyDiscount(uint256 _etherAmount, uint256 _contributorTokens) internal constant returns (uint256);\n', '\n', '    /// @notice Updates the counters for the amount of Ether paid\n', '    /// @param _etherAmount the amount of Ether paid\n', '    function updateCounters(uint256 _etherAmount) internal;\n', '    \n', '    /// @notice Parent constructor. This needs to be extended from the child contracts\n', '    /// @param _etherEscrowAddress the address that will hold the crowd funded Ether\n', '    /// @param _bountyAddress the address that will hold the bounty scheme SHP\n', '    /// @param _trusteeAddress the address that will hold the vesting SHP\n', '    /// @param _affiliateUtilityAddress address of the deployed AffiliateUtility contract.\n', '    function TokenSale (\n', '        address _etherEscrowAddress,\n', '        address _bountyAddress,\n', '        address _trusteeAddress,\n', '        address _affiliateUtilityAddress\n', '    ) {\n', '        etherEscrowAddress = _etherEscrowAddress;\n', '        bountyAddress = _bountyAddress;\n', '        trusteeAddress = _trusteeAddress;\n', '        affiliateUtility = AffiliateUtility(_affiliateUtilityAddress);\n', '        trustee = Trustee(_trusteeAddress);\n', '        paused = true;\n', '        closed = false;\n', '    }\n', '\n', '    /// @notice Pays an affiliate if they are valid and present in the transaction data\n', '    /// @param _tokens The contribution tokens used to calculate affiliate payment amount\n', '    /// @param _etherValue The Ether value sent\n', '    /// @param _caller The address of the caller\n', '    function payAffiliate(uint256 _tokens, uint256 _etherValue, address _caller) internal {\n', '        if (affiliateUtility.isAffiliateValid(_caller)) {\n', '            address affiliate = affiliateUtility.getAffiliate(_caller);\n', '            var (affiliateBonus, contributorBonus) = affiliateUtility.applyAffiliate(_caller, _tokens, _etherValue);\n', '            shp.generateTokens(affiliate, affiliateBonus);\n', '            shp.generateTokens(_caller, contributorBonus);\n', '        }\n', '    }\n', '\n', '    /// @notice Sets the SHP token smart contract\n', '    /// @param _shp the SHP token contract address\n', '    function setShp(address _shp) public onlyOwner {\n', '        shp = SHP(_shp);\n', '    }\n', '\n', '    /// @notice Transfers ownership of the token smart contract and trustee\n', '    /// @param _tokenController the address of the new token controller\n', '    /// @param _trusteeOwner the address of the new trustee owner\n', '    function transferOwnership(address _tokenController, address _trusteeOwner) public onlyOwner {\n', '        require(closed);\n', '        require(_tokenController != 0x0);\n', '        require(_trusteeOwner != 0x0);\n', '        shp.changeController(_tokenController);\n', '        trustee.changeOwner(_trusteeOwner);\n', '    }\n', '\n', '    /// @notice Internal function to determine if an address is a contract\n', '    /// @param _caller The address being queried\n', '    /// @return True if `caller` is a contract\n', '    function isContract(address _caller) internal constant returns (bool) {\n', '        uint size;\n', '        assembly { size := extcodesize(_caller) }\n', '        return size > 0;\n', '    }\n', '\n', '    /// @notice Pauses the contribution if there is any issue\n', '    function pauseContribution() public onlyOwner {\n', '        paused = true;\n', '    }\n', '\n', '    /// @notice Resumes the contribution\n', '    function resumeContribution() public onlyOwner {\n', '        paused = false;\n', '    }\n', '\n', '    //////////\n', '    // MiniMe Controller Interface functions\n', '    //////////\n', '\n', '    // In between the offering and the network. Default settings for allowing token transfers.\n', '    function proxyPayment(address) public payable returns (bool) {\n', '        return false;\n', '    }\n', '\n', '    function onTransfer(address, address, uint256) public returns (bool) {\n', '        return false;\n', '    }\n', '\n', '    function onApprove(address, address, uint256) public returns (bool) {\n', '        return false;\n', '    }\n', '}\n', '\n', 'contract DynamicCeiling is Owned {\n', '    using SafeMath for uint256;\n', '\n', '    struct Ceiling {\n', '        bytes32 hash;\n', '        uint256 limit;\n', '        uint256 slopeFactor;\n', '        uint256 collectMinimum;\n', '    }\n', '\n', '    address public saleAddress;\n', '\n', '    Ceiling[] public ceilings;\n', '    \n', '    uint256 public currentIndex;\n', '    uint256 public revealedCeilings;\n', '    bool public allRevealed;\n', '\n', '    modifier onlySaleAddress {\n', '        require(msg.sender == saleAddress);\n', '        _;\n', '    }\n', '\n', '    function DynamicCeiling(address _owner, address _saleAddress) {\n', '        owner = _owner;\n', '        saleAddress = _saleAddress;\n', '    }\n', '\n', '    /// @notice This should be called by the creator of the contract to commit\n', '    ///  all the ceilings.\n', '    /// @param _ceilingHashes Array of hashes of each ceiling. Each hash is calculated\n', '    ///  by the `calculateHash` method. More hashes than actual ceilings can be\n', '    ///  committed in order to hide also the number of ceilings.\n', '    ///  The remaining hashes can be just random numbers.\n', '    function setHiddenCeilings(bytes32[] _ceilingHashes) public onlyOwner {\n', '        require(ceilings.length == 0);\n', '\n', '        ceilings.length = _ceilingHashes.length;\n', '        for (uint256 i = 0; i < _ceilingHashes.length; i = i.add(1)) {\n', '            ceilings[i].hash = _ceilingHashes[i];\n', '        }\n', '    }\n', '\n', '    /// @notice Anybody can reveal the next ceiling if he knows it.\n', '    /// @param _limit Ceiling cap.\n', '    ///  (must be greater or equal to the previous one).\n', "    /// @param _last `true` if it's the last ceiling.\n", '    /// @param _salt Random number used to commit the ceiling\n', '    function revealCeiling(\n', '        uint256 _limit, \n', '        uint256 _slopeFactor, \n', '        uint256 _collectMinimum,\n', '        bool _last, \n', '        bytes32 _salt) \n', '        public \n', '        {\n', '        require(!allRevealed);\n', '        require(\n', '            ceilings[revealedCeilings].hash == \n', '            calculateHash(\n', '                _limit, \n', '                _slopeFactor, \n', '                _collectMinimum, \n', '                _last, \n', '                _salt\n', '            )\n', '        );\n', '\n', '        require(_limit != 0 && _slopeFactor != 0 && _collectMinimum != 0);\n', '        if (revealedCeilings > 0) {\n', '            require(_limit >= ceilings[revealedCeilings.sub(1)].limit);\n', '        }\n', '\n', '        ceilings[revealedCeilings].limit = _limit;\n', '        ceilings[revealedCeilings].slopeFactor = _slopeFactor;\n', '        ceilings[revealedCeilings].collectMinimum = _collectMinimum;\n', '        revealedCeilings = revealedCeilings.add(1);\n', '\n', '        if (_last) {\n', '            allRevealed = true;\n', '        }\n', '    }\n', '\n', '    /// @notice Reveal multiple ceilings at once\n', '    function revealMulti(\n', '        uint256[] _limits,\n', '        uint256[] _slopeFactors,\n', '        uint256[] _collectMinimums,\n', '        bool[] _lasts, \n', '        bytes32[] _salts) \n', '        public \n', '        {\n', '        // Do not allow none and needs to be same length for all parameters\n', '        require(\n', '            _limits.length != 0 &&\n', '            _limits.length == _slopeFactors.length &&\n', '            _limits.length == _collectMinimums.length &&\n', '            _limits.length == _lasts.length &&\n', '            _limits.length == _salts.length\n', '        );\n', '\n', '        for (uint256 i = 0; i < _limits.length; i = i.add(1)) {\n', '            \n', '            revealCeiling(\n', '                _limits[i],\n', '                _slopeFactors[i],\n', '                _collectMinimums[i],\n', '                _lasts[i],\n', '                _salts[i]\n', '            );\n', '        }\n', '    }\n', '\n', '    /// @notice Move to ceiling, used as a failsafe\n', '    function moveToNextCeiling() public onlyOwner {\n', '\n', '        currentIndex = currentIndex.add(1);\n', '    }\n', '\n', '    /// @return Return the funds to collect for the current point on the ceiling\n', '    ///  (or 0 if no ceilings revealed yet)\n', '    function availableAmountToCollect(uint256  totallCollected) public onlySaleAddress returns (uint256) {\n', '    \n', '        if (revealedCeilings == 0) {\n', '            return 0;\n', '        }\n', '\n', '        if (totallCollected >= ceilings[currentIndex].limit) {  \n', '            uint256 nextIndex = currentIndex.add(1);\n', '\n', '            if (nextIndex >= revealedCeilings) {\n', '                return 0; \n', '            }\n', '            currentIndex = nextIndex;\n', '            if (totallCollected >= ceilings[currentIndex].limit) {\n', '                return 0;  \n', '            }\n', '        }        \n', '        uint256 remainedFromCurrentCeiling = ceilings[currentIndex].limit.sub(totallCollected);\n', '        uint256 reminderWithSlopeFactor = remainedFromCurrentCeiling.div(ceilings[currentIndex].slopeFactor);\n', '\n', '        if (reminderWithSlopeFactor > ceilings[currentIndex].collectMinimum) {\n', '            return reminderWithSlopeFactor;\n', '        }\n', '        \n', '        if (remainedFromCurrentCeiling > ceilings[currentIndex].collectMinimum) {\n', '            return ceilings[currentIndex].collectMinimum;\n', '        } else {\n', '            return remainedFromCurrentCeiling;\n', '        }\n', '    }\n', '\n', '    /// @notice Calculates the hash of a ceiling.\n', '    /// @param _limit Ceiling cap.\n', "    /// @param _last `true` if it's the last ceiling.\n", '    /// @param _collectMinimum the minimum amount to collect\n', '    /// @param _salt Random number that will be needed to reveal this ceiling.\n', '    /// @return The calculated hash of this ceiling to be used in the `setHiddenCurves` method\n', '    function calculateHash(\n', '        uint256 _limit, \n', '        uint256 _slopeFactor, \n', '        uint256 _collectMinimum,\n', '        bool _last, \n', '        bytes32 _salt) \n', '        public \n', '        constant \n', '        returns (bytes32) \n', '        {\n', '        return keccak256(\n', '            _limit,\n', '            _slopeFactor, \n', '            _collectMinimum,\n', '            _last,\n', '            _salt\n', '        );\n', '    }\n', '\n', '    /// @return Return the total number of ceilings committed\n', '    ///  (can be larger than the number of actual ceilings on the ceiling to hide\n', '    ///  the real number of ceilings)\n', '    function nCeilings() public constant returns (uint256) {\n', '        return ceilings.length;\n', '    }\n', '\n', '}\n', '\n', 'contract SharpeCrowdsale is TokenSale {\n', '\n', '    uint256 public totalEtherPaid = 0;\n', '    uint256 public minContributionInWei;\n', '    address public saleAddress;\n', '    \n', '    DynamicCeiling public dynamicCeiling;\n', '\n', '    modifier amountValidated() {\n', '        require(msg.value >= minContributionInWei);\n', '        _;\n', '    }\n', '\n', '    /// @notice Constructs the contract with the following arguments\n', '    /// @param _etherEscrowAddress the address that will hold the crowd funded Ether\n', '    /// @param _bountyAddress the address that will hold the bounty SHP\n', '    /// @param _trusteeAddress the address that will hold the vesting SHP\n', '    /// @param _affiliateUtilityAddress address of the deployed AffiliateUtility contract.\n', '    /// @param _minContributionInWei minimum amount to contribution possilble\n', '    function SharpeCrowdsale( \n', '        address _etherEscrowAddress,\n', '        address _bountyAddress,\n', '        address _trusteeAddress,\n', '        address _affiliateUtilityAddress,\n', '        uint256 _minContributionInWei) \n', '        TokenSale (\n', '        _etherEscrowAddress,\n', '        _bountyAddress,\n', '        _trusteeAddress,\n', '        _affiliateUtilityAddress) \n', '    {\n', '        minContributionInWei = _minContributionInWei;\n', '        saleAddress = address(this);\n', '    }\n', '\n', '    function setDynamicCeilingAddress(address _dynamicCeilingAddress) public onlyOwner {\n', '        dynamicCeiling = DynamicCeiling(_dynamicCeilingAddress);\n', '    }\n', '\n', '    function () \n', '        public \n', '        payable\n', '        notPaused\n', '        notClosed\n', '        isValidated \n', '        amountValidated\n', '        isApproved\n', '    {\n', '        uint256 contribution = msg.value;\n', '        uint256 remaining = dynamicCeiling.availableAmountToCollect(totalEtherPaid);\n', '        uint256 refund = 0;\n', '\n', '        if (remaining == 0) {\n', '            revert();\n', '        }\n', '\n', '        if (contribution > remaining) {\n', '            contribution = remaining;\n', '            refund = msg.value.sub(contribution);\n', '        }\n', '        doBuy(msg.sender, contribution);\n', '        if (refund > 0) {\n', '            msg.sender.transfer(refund);\n', '        }\n', '    }\n', '\n', '    /// @notice Applies the discount based on the discount tiers\n', '    /// @param _etherAmount The amount of ether used to evaluate the tier the contribution lies within\n', '    /// @param _contributorTokens The tokens allocated based on the contribution\n', '    function applyDiscount(uint256 _etherAmount, uint256 _contributorTokens) internal constant returns (uint256) {\n', '        return _contributorTokens;\n', '    }\n', '\n', '    /// @notice Updates the counters for the amount of Ether paid\n', '    /// @param _etherAmount the amount of Ether paid\n', '    function updateCounters(uint256 _etherAmount) internal {\n', '        totalEtherPaid = totalEtherPaid.add(_etherAmount);\n', '    }\n', '\n', '    /// @notice Public function enables closing of the crowdsale manually if necessary\n', '    function closeSale() public onlyOwner {\n', '        closed = true;\n', '        SaleClosed(now);\n', '    }\n', '}']