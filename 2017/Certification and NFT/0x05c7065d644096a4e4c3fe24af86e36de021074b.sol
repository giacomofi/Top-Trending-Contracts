['pragma solidity ^0.4.17;\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract SafeBasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '  mapping(address => uint256) balances;\n', '  modifier onlyPayloadSize(uint size) {\n', '     assert(msg.data.length >= size + 4);\n', '     _;\n', '  }\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public returns (bool) {\n', '    require(_to != address(0));\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract SafeStandardToken is ERC20, SafeBasicToken {\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', 'contract LendConnect is SafeStandardToken{\n', '  string public constant name = "LendConnect Token";\n', '  string public constant symbol = "LCT";\n', '  uint256 public constant decimals = 18;\n', '  uint256 public constant INITIAL_SUPPLY = 6500000 * (10 ** uint256(decimals));\n', '  function LendConnect(address _ownerAddress) public {\n', '    totalSupply = INITIAL_SUPPLY;\n', '    balances[_ownerAddress] = INITIAL_SUPPLY;\n', '  }\n', '}\n', 'contract Crowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '  // The token being sold\n', '  LendConnect public token;\n', '  // start and end timestamps where investments are allowed (both inclusive\n', '  \n', '  uint256 public start_time = 1511377200;//11/22/2017 @ 7:00pm (UTC) or 8:00pm (CET)\n', '  uint256 public phase_1_Time = 1511809200;//11/27/2017 @ 7:00pm (UTC) or 8:00pm (CET)\n', '  uint256 public phase_2_Time = 1512241200;//12/02/2017 @ 7:00pm (UTC) or 8:00pm (CET)\n', '  uint256 public phase_3_Time = 1512673200;//12/07/2017 @ 7:00pm (UTC) or 8:00pm (CET)\n', '  uint256 public phase_4_Time = 1513105200;//12/12/2017 @ 7:00pm (UTC) or 8:00pm (CET)\n', '  uint256 public end_Time = 1513278000;//12/14/2017 @ 7:00pm (UTC) or 8:00pm (CET)\n', '  uint256 public phase_1_remaining_tokens  = 1000000 * (10 ** uint256(18));\n', '  uint256 public phase_2_remaining_tokens  = 1000000 * (10 ** uint256(18));\n', '  uint256 public phase_3_remaining_tokens  = 1000000 * (10 ** uint256(18));\n', '  uint256 public phase_4_remaining_tokens  = 1000000 * (10 ** uint256(18));\n', '  uint256 public phase_5_remaining_tokens  = 1000000 * (10 ** uint256(18));\n', '  mapping(address => uint256) phase_1_balances;\n', '  mapping(address => uint256) phase_2_balances;\n', '  mapping(address => uint256) phase_3_balances;\n', '  mapping(address => uint256) phase_4_balances;\n', '  mapping(address => uint256) phase_5_balances;\n', '  \n', '  \n', '  // address where funds are collected\n', '  address public wallet;\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate = 730;\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  // rate change event\n', '  event RateChanged(address indexed owner, uint256 old_rate, uint256 new_rate);\n', '  \n', '  // constructor\n', '  function Crowdsale(address tokenContractAddress, address _walletAddress) public{\n', '    wallet = _walletAddress;\n', '    token = LendConnect(tokenContractAddress);\n', '  }\n', '  // fallback function can be used to buy tokens\n', '  function () payable public{\n', '    buyTokens(msg.sender);\n', '  }\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '    uint256 weiAmount = msg.value;\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '    // Check is there are enough token available for current phase and per person  \n', '    require(isTokenAvailable(tokens));\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    token.transfer(beneficiary, tokens);\n', '    //decrease phase supply and add user phase balance\n', '    updatePhaseSupplyAndBalance(tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '    forwardFunds();\n', '  }\n', '  // check token availibility for current phase and max allowed token balance\n', '  function isTokenAvailable(uint256 _tokens) internal constant returns (bool){\n', '    uint256 current_time = now;\n', '    uint256 total_expected_tokens = 0;\n', '    if(current_time > start_time && current_time < phase_1_Time){\n', '      total_expected_tokens = _tokens + phase_1_balances[msg.sender];\n', '      return total_expected_tokens <= 10000 * (10 ** uint256(18)) &&\n', '        _tokens <= phase_1_remaining_tokens;\n', '    }\n', '    else if(current_time > phase_1_Time && current_time < phase_2_Time){\n', '      total_expected_tokens = _tokens + phase_2_balances[msg.sender];\n', '      return total_expected_tokens <= 2000 * (10 ** uint256(18)) &&\n', '        _tokens <= phase_2_remaining_tokens;\n', '    }\n', '    else if(current_time > phase_2_Time && current_time < phase_3_Time){\n', '      total_expected_tokens = _tokens + phase_3_balances[msg.sender];\n', '      return total_expected_tokens <= 2000 * (10 ** uint256(18)) &&\n', '        _tokens <= phase_3_remaining_tokens;\n', '    }\n', '    else if(current_time > phase_3_Time && current_time < phase_4_Time){\n', '      total_expected_tokens = _tokens + phase_4_balances[msg.sender];\n', '      return total_expected_tokens <= 3500 * (10 ** uint256(18)) &&\n', '        _tokens <= phase_4_remaining_tokens;\n', '    }\n', '    else{\n', '      total_expected_tokens = _tokens + phase_5_balances[msg.sender];\n', '      return total_expected_tokens <= 3500 * (10 ** uint256(18)) &&\n', '        _tokens <= phase_5_remaining_tokens;\n', '    }\n', '  }\n', '  // decrease phase supply and add user phase balance\n', '  function updatePhaseSupplyAndBalance(uint256 _tokens) internal {\n', '    uint256 current_time = now;\n', '    if(current_time > start_time && current_time < phase_1_Time){\n', '      phase_1_balances[msg.sender] = phase_1_balances[msg.sender].add(_tokens);\n', '      phase_1_remaining_tokens = phase_1_remaining_tokens - _tokens;\n', '    }\n', '    else if(current_time > phase_1_Time && current_time < phase_2_Time){\n', '      phase_2_balances[msg.sender] = phase_2_balances[msg.sender].add(_tokens);\n', '      phase_2_remaining_tokens = phase_2_remaining_tokens - _tokens;\n', '    }\n', '    else if(current_time > phase_2_Time && current_time < phase_3_Time){\n', '      phase_3_balances[msg.sender] = phase_3_balances[msg.sender].add(_tokens);\n', '      phase_3_remaining_tokens = phase_3_remaining_tokens - _tokens;\n', '    }\n', '    else if(current_time > phase_3_Time && current_time < phase_4_Time){\n', '      phase_4_balances[msg.sender] = phase_4_balances[msg.sender].add(_tokens);\n', '      phase_4_remaining_tokens = phase_4_remaining_tokens - _tokens;\n', '    }\n', '    else{\n', '      phase_5_balances[msg.sender] = phase_5_balances[msg.sender].add(_tokens);\n', '      phase_5_remaining_tokens = phase_5_remaining_tokens - _tokens;\n', '    }\n', '  }\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = now >= start_time && now <= end_Time;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return now > end_Time;\n', '  }\n', '  // function to transfer token back to owner\n', '  function transferBack(uint256 tokens) onlyOwner public returns (bool){\n', '    token.transfer(owner, tokens);\n', '    return true;\n', '  }\n', '  // function to change rate\n', '  function changeRate(uint256 _rate) onlyOwner public returns (bool){\n', '    RateChanged(msg.sender, rate, _rate);\n', '    rate = _rate;\n', '    return true;\n', '  }\n', '  function tokenBalance() constant public returns (uint256){\n', '    return token.balanceOf(this);\n', '  }\n', '}']