['pragma solidity ^0.4.18;\n', '\n', '// File: contracts/zeppelin-solidity-1.4/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/BRDCrowdsaleAuthorizer.sol\n', '\n', '/**\n', ' * Contract BRDCrowdsaleAuthorizer is used by the crowdsale website\n', ' * to autorize wallets to participate in the crowdsale. Because all\n', ' * participants must go through the KYC/AML phase, only accounts\n', ' * listed in this contract may contribute to the crowdsale\n', ' */\n', 'contract BRDCrowdsaleAuthorizer is Ownable {\n', '  // these accounts are authorized to participate in the crowdsale\n', '  mapping (address => bool) internal authorizedAccounts;\n', '  // these accounts are authorized to authorize accounts\n', '  mapping (address => bool) internal authorizers;\n', '\n', '  // emitted when a new account is authorized\n', '  event Authorized(address indexed _to);\n', '\n', '  // add an authorizer to the authorizers mapping. the _newAuthorizer will\n', '  // be able to add other authorizers and authorize crowdsale participants\n', '  function addAuthorizer(address _newAuthorizer) onlyOwnerOrAuthorizer public {\n', '    // allow the provided address to authorize accounts\n', '    authorizers[_newAuthorizer] = true;\n', '  }\n', '\n', '  // remove an authorizer from the authorizers mapping. the _bannedAuthorizer will\n', '  // no longer have permission to do anything on this contract\n', '  function removeAuthorizer(address _bannedAuthorizer) onlyOwnerOrAuthorizer public {\n', '    // only attempt to remove the authorizer if they are currently authorized\n', '    require(authorizers[_bannedAuthorizer]);\n', '    // remove the authorizer\n', '    delete authorizers[_bannedAuthorizer];\n', '  }\n', '\n', '  // allow an account to participate in the crowdsale\n', '  function authorizeAccount(address _newAccount) onlyOwnerOrAuthorizer public {\n', '    if (!authorizedAccounts[_newAccount]) {\n', '      // allow the provided account to participate in the crowdsale\n', '      authorizedAccounts[_newAccount] = true;\n', '      // emit the Authorized event\n', '      Authorized(_newAccount);\n', '    }\n', '  }\n', '\n', '  // returns whether or not the provided _account is an authorizer\n', '  function isAuthorizer(address _account) constant public returns (bool _isAuthorizer) {\n', '    return msg.sender == owner || authorizers[_account] == true;\n', '  }\n', '\n', '  // returns whether or not the provided _account is authorized to participate in the crowdsale\n', '  function isAuthorized(address _account) constant public returns (bool _authorized) {\n', '    return authorizedAccounts[_account] == true;\n', '  }\n', '\n', '  // allow only the contract creator or one of the authorizers to do this\n', '  modifier onlyOwnerOrAuthorizer() {\n', '    require(msg.sender == owner || authorizers[msg.sender]);\n', '    _;\n', '  }\n', '}\n', '\n', '// File: contracts/zeppelin-solidity-1.4/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/BRDLockup.sol\n', '\n', '/**\n', ' * Contract BRDLockup keeps track of a vesting schedule for pre-sold tokens.\n', ' * Pre-sold tokens are rewarded up to `numIntervals` times separated by an\n', ' * `interval` of time. An equal amount of tokens (`allocation` divided by `numIntervals`)\n', ' * is marked for reward each `interval`.\n', ' *\n', ' * The owner of the contract will call processInterval() which will\n', ' * update the allocation state. The owner of the contract should then\n', ' * read the allocation data and reward the beneficiaries.\n', ' */\n', 'contract BRDLockup is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  // Allocation stores info about how many tokens to reward a beneficiary account\n', '  struct Allocation {\n', '    address beneficiary;      // account to receive rewards\n', '    uint256 allocation;       // total allocated tokens\n', '    uint256 remainingBalance; // remaining balance after the current interval\n', '    uint256 currentInterval;  // the current interval for the given reward\n', '    uint256 currentReward;    // amount to be rewarded during the current interval\n', '  }\n', '\n', '  // the allocation state\n', '  Allocation[] public allocations;\n', '\n', '  // the date at which allocations begin unlocking\n', '  uint256 public unlockDate;\n', '\n', '  // the current unlock interval\n', '  uint256 public currentInterval;\n', '\n', '  // the interval at which allocations will be rewarded\n', '  uint256 public intervalDuration;\n', '\n', '  // the number of total reward intervals, zero indexed\n', '  uint256 public numIntervals;\n', '\n', '  event Lock(address indexed _to, uint256 _amount);\n', '\n', '  event Unlock(address indexed _to, uint256 _amount);\n', '\n', '  // constructor\n', '  // @param _crowdsaleEndDate - the date the crowdsale ends\n', '  function BRDLockup(uint256 _crowdsaleEndDate, uint256 _numIntervals, uint256 _intervalDuration)  public {\n', '    unlockDate = _crowdsaleEndDate;\n', '    numIntervals = _numIntervals;\n', '    intervalDuration = _intervalDuration;\n', '    currentInterval = 0;\n', '  }\n', '\n', '  // update the allocation storage remaining balances\n', '  function processInterval() onlyOwner public returns (bool _shouldProcessRewards) {\n', '    // ensure the time interval is correct\n', '    bool _correctInterval = now >= unlockDate && now.sub(unlockDate) > currentInterval.mul(intervalDuration);\n', '    bool _validInterval = currentInterval < numIntervals;\n', '    if (!_correctInterval || !_validInterval)\n', '      return false;\n', '\n', '    // advance the current interval\n', '    currentInterval = currentInterval.add(1);\n', '\n', '    // number of iterations to read all allocations\n', '    uint _allocationsIndex = allocations.length;\n', '\n', '    // loop through every allocation\n', '    for (uint _i = 0; _i < _allocationsIndex; _i++) {\n', '      // the current reward for the allocation at index `i`\n', '      uint256 _amountToReward;\n', '\n', '      // if we are at the last interval, the reward amount is the entire remaining balance\n', '      if (currentInterval == numIntervals) {\n', '        _amountToReward = allocations[_i].remainingBalance;\n', '      } else {\n', '        // otherwise the reward amount is the total allocation divided by the number of intervals\n', '        _amountToReward = allocations[_i].allocation.div(numIntervals);\n', '      }\n', '      // update the allocation storage\n', '      allocations[_i].currentReward = _amountToReward;\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '  // the total number of allocations\n', '  function numAllocations() constant public returns (uint) {\n', '    return allocations.length;\n', '  }\n', '\n', '  // the amount allocated for beneficiary at `_index`\n', '  function allocationAmount(uint _index) constant public returns (uint256) {\n', '    return allocations[_index].allocation;\n', '  }\n', '\n', '  // reward the beneficiary at `_index`\n', '  function unlock(uint _index) onlyOwner public returns (bool _shouldReward, address _beneficiary, uint256 _rewardAmount) {\n', '    // ensure the beneficiary is not rewarded twice during the same interval\n', '    if (allocations[_index].currentInterval < currentInterval) {\n', '      // record the currentInterval so the above check is useful\n', '      allocations[_index].currentInterval = currentInterval;\n', '      // subtract the reward from their remaining balance\n', '      allocations[_index].remainingBalance = allocations[_index].remainingBalance.sub(allocations[_index].currentReward);\n', '      // emit event\n', '      Unlock(allocations[_index].beneficiary, allocations[_index].currentReward);\n', '      // return value\n', '      _shouldReward = true;\n', '    } else {\n', '      // return value\n', '      _shouldReward = false;\n', '    }\n', '\n', '    // return values\n', '    _rewardAmount = allocations[_index].currentReward;\n', '    _beneficiary = allocations[_index].beneficiary;\n', '  }\n', '\n', '  // add a new allocation to the lockup\n', '  function pushAllocation(address _beneficiary, uint256 _numTokens) onlyOwner public {\n', '    require(now < unlockDate);\n', '    allocations.push(\n', '      Allocation(\n', '        _beneficiary,\n', '        _numTokens,\n', '        _numTokens,\n', '        0,\n', '        0\n', '      )\n', '    );\n', '    Lock(_beneficiary, _numTokens);\n', '  }\n', '}\n', '\n', '// File: contracts/zeppelin-solidity-1.4/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts/zeppelin-solidity-1.4/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/zeppelin-solidity-1.4/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/zeppelin-solidity-1.4/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/zeppelin-solidity-1.4/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts/BRDToken.sol\n', '\n', 'contract BRDToken is MintableToken {\n', '  using SafeMath for uint256;\n', '\n', '  string public name = "Bread Token";\n', '  string public symbol = "BRD";\n', '  uint256 public decimals = 18;\n', '\n', '  // override StandardToken#transferFrom\n', '  // ensures that minting has finished or the message sender is the token owner\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(mintingFinished || msg.sender == owner);\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  // override StandardToken#transfer\n', '  // ensures the minting has finished or the message sender is the token owner\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(mintingFinished || msg.sender == owner);\n', '    return super.transfer(_to, _value);\n', '  }\n', '}\n', '\n', '// File: contracts/zeppelin-solidity-1.4/Crowdsale.sol\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '\n', '}\n', '\n', '// File: contracts/zeppelin-solidity-1.4/FinalizableCrowdsale.sol\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '}\n', '\n', '// File: contracts/BRDCrowdsale.sol\n', '\n', 'contract BRDCrowdsale is FinalizableCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // maximum amount of wei raised during this crowdsale\n', '  uint256 public cap;\n', '\n', '  // minimum per-participant wei contribution\n', '  uint256 public minContribution;\n', '\n', '  // maximum per-participant wei contribution\n', '  uint256 public maxContribution;\n', '\n', '  // how many token unites the owner gets per buyer wei\n', '  uint256 public ownerRate;\n', '\n', '  // number of tokens per 100 to lock up in lockupTokens()\n', '  uint256 public bonusRate;\n', '\n', '  // the address to which the owner share of tokens are sent\n', '  address public tokenWallet;\n', '\n', '  // crowdsale authorizer contract determines who can participate\n', '  BRDCrowdsaleAuthorizer public authorizer;\n', '\n', '  // the lockup contract holds presale authorization amounts\n', '  BRDLockup public lockup;\n', '\n', '  // constructor\n', '  function BRDCrowdsale(\n', '    uint256 _cap,         // maximum wei raised\n', '    uint256 _minWei,      // minimum per-contributor wei\n', '    uint256 _maxWei,      // maximum per-contributor wei\n', '    uint256 _startTime,   // crowdsale start time\n', '    uint256 _endTime,     // crowdsale end time\n', '    uint256 _rate,        // tokens per wei\n', '    uint256 _ownerRate,   // owner tokens per buyer wei\n', '    uint256 _bonusRate,   // percentage of tokens to lockup\n', '    address _wallet,      // target eth wallet\n', '    address _tokenWallet) // target token wallet\n', '    Crowdsale(_startTime, _endTime, _rate, _wallet)\n', '   public\n', '  {\n', '    require(_cap > 0);\n', '    require(_tokenWallet != 0x0);\n', '    cap = _cap;\n', '    minContribution = _minWei;\n', '    maxContribution = _maxWei;\n', '    ownerRate = _ownerRate;\n', '    bonusRate = _bonusRate;\n', '    tokenWallet = _tokenWallet;\n', '  }\n', '\n', '  // overriding Crowdsale#hasEnded to add cap logic\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    bool _capReached = weiRaised >= cap;\n', '    return super.hasEnded() || _capReached;\n', '  }\n', '\n', '  // @return true if the crowdsale has started\n', '  function hasStarted() public constant returns (bool) {\n', '    return now > startTime;\n', '  }\n', '\n', '  // overriding Crowdsale#buyTokens\n', '  // mints the ownerRate of tokens in addition to calling the super method\n', '  function buyTokens(address _beneficiary) public payable {\n', '    // call the parent method to mint tokens to the beneficiary\n', '    super.buyTokens(_beneficiary);\n', '    // calculate the owner share of tokens\n', '    uint256 _ownerTokens = msg.value.mul(ownerRate);\n', '    // mint the owner share and send to the owner toke wallet\n', '    token.mint(tokenWallet, _ownerTokens);\n', '  }\n', '\n', '  // immediately mint _amount tokens to the _beneficiary. this is used for OOB token purchases. \n', '  function allocateTokens(address _beneficiary, uint256 _amount) onlyOwner public {\n', '    require(!isFinalized);\n', '\n', '    // update state\n', '    uint256 _weiAmount = _amount.div(rate);\n', '    weiRaised = weiRaised.add(_weiAmount);\n', '\n', '    // mint the tokens to the beneficiary\n', '    token.mint(_beneficiary, _amount);\n', '\n', '    // mint the owner share tokens \n', '    uint256 _ownerTokens = _weiAmount.mul(ownerRate);\n', '    token.mint(tokenWallet, _ownerTokens);\n', '    \n', '    TokenPurchase(msg.sender, _beneficiary, _weiAmount, _amount);\n', '  }\n', '\n', '  // mints _amount tokens to the _beneficiary minus the bonusRate\n', '  // tokens to be locked up via the lockup contract. locked up tokens\n', '  // are sent to the contract and may be unlocked according to\n', '  // the lockup configuration after the sale ends\n', '  function lockupTokens(address _beneficiary, uint256 _amount) onlyOwner public {\n', '    require(!isFinalized);\n', '\n', '    // calculate the owner share of tokens\n', '    uint256 _ownerTokens = ownerRate.mul(_amount).div(rate);\n', '    // mint the owner share and send to the owner wallet\n', '    token.mint(tokenWallet, _ownerTokens);\n', '\n', '    // calculate the amount of tokens to be locked up\n', '    uint256 _lockupTokens = bonusRate.mul(_amount).div(100);\n', '    // create the locked allocation in the lockup contract\n', '    lockup.pushAllocation(_beneficiary, _lockupTokens);\n', '    // mint locked tokens to the crowdsale contract to later be unlocked\n', '    token.mint(this, _lockupTokens);\n', '\n', '    // the non-bonus tokens are immediately rewarded\n', '    uint256 _remainder = _amount.sub(_lockupTokens);\n', '    token.mint(_beneficiary, _remainder);\n', '  }\n', '\n', '  // unlocks tokens from the token lockup contract. no tokens are held by\n', '  // the lockup contract, just the amounts and times that tokens should be rewarded.\n', '  // the tokens are held by the crowdsale contract\n', '  function unlockTokens() onlyOwner public returns (bool _didIssueRewards) {\n', '    // attempt to process the interval. it update the allocation bookkeeping\n', '    // and will only return true when the interval should be processed\n', '    if (!lockup.processInterval())\n', '      return false;\n', '\n', '    // the total number of allocations\n', '    uint _numAllocations = lockup.numAllocations();\n', '\n', '    // for every allocation, attempt to unlock the reward\n', '    for (uint _i = 0; _i < _numAllocations; _i++) {\n', '      // attempt to unlock the reward\n', '      var (_shouldReward, _to, _amount) = lockup.unlock(_i);\n', '      // if the beneficiary should be rewarded, send them tokens\n', '      if (_shouldReward) {\n', '        token.transfer(_to, _amount);\n', '      }\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', "  // sets the authorizer contract if the crowdsale hasn't started\n", '  function setAuthorizer(BRDCrowdsaleAuthorizer _authorizer) onlyOwner public {\n', '    require(!hasStarted());\n', '    authorizer = _authorizer;\n', '  }\n', '\n', "  // sets the lockup contract if the crowdsale hasn't started\n", '  function setLockup(BRDLockup _lockup) onlyOwner public {\n', '    require(!hasStarted());\n', '    lockup = _lockup;\n', '  }\n', '\n', "  // sets the token contract if the crowdsale hasn't started\n", '  function setToken(BRDToken _token) onlyOwner public {\n', '    require(!hasStarted());\n', '    token = _token;\n', '  }\n', '\n', "  // set the cap on the contract if the crowdsale hasn't started\n", '  function setCap(uint256 _newCap) onlyOwner public {\n', '    require(_newCap > 0);\n', '    require(!hasStarted());\n', '    cap = _newCap;\n', '  }\n', '\n', '  // allows maxContribution to be modified\n', '  function setMaxContribution(uint256 _newMaxContribution) onlyOwner public {\n', '    maxContribution = _newMaxContribution;\n', '  }\n', '\n', '  // allows endTime to be modified\n', '  function setEndTime(uint256 _newEndTime) onlyOwner public {\n', '    endTime = _newEndTime;\n', '  }\n', '\n', '  // overriding Crowdsale#createTokenContract\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    // set the token to null initially\n', '    // call setToken() above to set the actual token address\n', '    return BRDToken(address(0));\n', '  }\n', '\n', '  // overriding FinalizableCrowdsale#finalization\n', '  // finalizes minting for the token contract, disabling further minting\n', '  function finalization() internal {\n', '    // end minting\n', '    token.finishMinting();\n', '\n', '    // issue the first lockup reward\n', '    unlockTokens();\n', '\n', '    super.finalization();\n', '  }\n', '\n', '  // overriding Crowdsale#validPurchase to add extra cap logic\n', '  // @return true if crowdsale participants can buy at the moment\n', '  // checks whether the cap has not been reached, the purchaser has\n', '  // been authorized, and their contribution is within the min/max\n', '  // thresholds\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool _withinCap = weiRaised.add(msg.value) <= cap;\n', '    bool _isAuthorized = authorizer.isAuthorized(msg.sender);\n', '    bool _isMin = msg.value >= minContribution;\n', '    uint256 _alreadyContributed = token.balanceOf(msg.sender).div(rate);\n', '    bool _withinMax = msg.value.add(_alreadyContributed) <= maxContribution;\n', '    return super.validPurchase() && _withinCap && _isAuthorized && _isMin && _withinMax;\n', '  }\n', '}']