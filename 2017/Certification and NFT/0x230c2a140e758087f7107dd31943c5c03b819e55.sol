['pragma solidity 0.4.15;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title PausableOnce\n', ' * @dev The PausableOnce contract provides an option for the "pauseMaster"\n', ' * to pause once the transactions for two weeks.\n', ' *\n', ' */\n', '\n', 'contract PausableOnce is Ownable {\n', '\n', '    /** Address that can start the pause */\n', '    address public pauseMaster;\n', '\n', '    uint constant internal PAUSE_DURATION = 14 days;\n', '    uint64 public pauseEnd = 0;\n', '\n', '    event Paused();\n', '\n', '    /**\n', '     * @dev Set the pauseMaster (callable by the owner only).\n', '     * @param _pauseMaster The address of the pauseMaster\n', '     */\n', '    function setPauseMaster(address _pauseMaster) onlyOwner external returns (bool success) {\n', '        require(_pauseMaster != address(0));\n', '        pauseMaster = _pauseMaster;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Start the pause (by the pauseMaster, ONCE only).\n', '     */\n', '    function pause() onlyPauseMaster external returns (bool success) {\n', '        require(pauseEnd == 0);\n', '        pauseEnd = uint64(now + PAUSE_DURATION);\n', '        Paused();\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(now > pauseEnd);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the pauseMaster.\n', '     */\n', '    modifier onlyPauseMaster() {\n', '        require(msg.sender == pauseMaster);\n', '        _;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', '* @title Upgrade agent interface\n', '*/\n', 'contract InterfaceUpgradeAgent {\n', '\n', '    uint32 public revision;\n', '    uint256 public originalSupply;\n', '\n', '    /**\n', '     * @dev Reissue the tokens onto the new contract revision.\n', '     * @param holder Holder (owner) of the tokens\n', '     * @param tokenQty How many tokens to be issued\n', '     */\n', '    function upgradeFrom(address holder, uint256 tokenQty) public;\n', '}\n', '\n', '/**\n', ' * @title UpgradableToken\n', ' * @dev The UpgradableToken contract provides an option of upgrading the tokens to a new revision.\n', ' * The "upgradeMaster" may propose the upgrade. Token holders can opt-in amount of tokens to upgrade.\n', ' */\n', '\n', 'contract UpgradableToken is StandardToken, Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    uint32 public REVISION;\n', '\n', '    /** Address that can set the upgrade agent thus enabling the upgrade. */\n', '    address public upgradeMaster = address(0);\n', '\n', '    /** Address of the contract that issues the new revision tokens. */\n', '    address public upgradeAgent = address(0);\n', '\n', '    /** How many tokens are upgraded. */\n', '    uint256 public totalUpgraded;\n', '\n', '    event Upgrade(address indexed _from, uint256 _value);\n', '    event UpgradeEnabled(address agent);\n', '\n', '    /**\n', '     * @dev Set the upgrade master.\n', '     * parameter _upgradeMaster Upgrade master\n', '     */\n', '    function setUpgradeMaster(address _upgradeMaster) onlyOwner external {\n', '        require(_upgradeMaster != address(0));\n', '        upgradeMaster = _upgradeMaster;\n', '    }\n', '\n', '    /**\n', '     * @dev Set the upgrade agent (once only) thus enabling the upgrade.\n', '     * @param _upgradeAgent Upgrade agent contract address\n', '     * @param _revision Unique ID that agent contract must return on ".revision()"\n', '     */\n', '    function setUpgradeAgent(address _upgradeAgent, uint32 _revision)\n', '        onlyUpgradeMaster whenUpgradeDisabled external\n', '    {\n', '        require((_upgradeAgent != address(0)) && (_revision != 0));\n', '\n', '        InterfaceUpgradeAgent agent = InterfaceUpgradeAgent(_upgradeAgent);\n', '\n', '        require(agent.revision() == _revision);\n', '        require(agent.originalSupply() == totalSupply);\n', '\n', '        upgradeAgent = _upgradeAgent;\n', '        UpgradeEnabled(_upgradeAgent);\n', '    }\n', '\n', '    /**\n', '     * @dev Upgrade tokens to the new revision.\n', '     * @param value How many tokens to be upgraded\n', '     */\n', '    function upgrade(uint256 value) whenUpgradeEnabled external {\n', '        require(value > 0);\n', '\n', '        uint256 balance = balances[msg.sender];\n', '        require(balance > 0);\n', '\n', '        // Take tokens out from the old contract\n', '        balances[msg.sender] = balance.sub(value);\n', '        totalSupply = totalSupply.sub(value);\n', '        totalUpgraded = totalUpgraded.add(value);\n', '        // Issue the new revision tokens\n', '        InterfaceUpgradeAgent agent = InterfaceUpgradeAgent(upgradeAgent);\n', '        agent.upgradeFrom(msg.sender, value);\n', '\n', '        Upgrade(msg.sender, value);\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the upgrade is enabled.\n', '    */\n', '    modifier whenUpgradeEnabled() {\n', '        require(upgradeAgent != address(0));\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the upgrade is impossible.\n', '    */\n', '    modifier whenUpgradeDisabled() {\n', '        require(upgradeAgent == address(0));\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the upgradeMaster.\n', '    */\n', '    modifier onlyUpgradeMaster() {\n', '        require(msg.sender == upgradeMaster);\n', '        _;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Withdrawable\n', ' * @dev The Withdrawable contract provides a mechanism of withdrawal(s).\n', ' * "Withdrawals" are permissions for specified addresses to pull (withdraw) payments from the contract balance.\n', ' */\n', '\n', 'contract Withdrawable {\n', '\n', '    mapping (address => uint) pendingWithdrawals;\n', '\n', '    /*\n', '     * @dev Logged upon a granted allowance to the specified drawer on withdrawal.\n', '     * @param drawer The address of the drawer.\n', '     * @param weiAmount The value in Wei which may be withdrawn.\n', '     */\n', '    event Withdrawal(address indexed drawer, uint256 weiAmount);\n', '\n', '    /*\n', '     * @dev Logged upon a withdrawn value.\n', '     * @param drawer The address of the drawer.\n', '     * @param weiAmount The value in Wei which has been withdrawn.\n', '     */\n', '    event Withdrawn(address indexed drawer, uint256 weiAmount);\n', '\n', '    /*\n', '     * @dev Allow the specified drawer to withdraw the specified value from the contract balance.\n', '     * @param drawer The address of the drawer.\n', '     * @param weiAmount The value in Wei allowed to withdraw.\n', '     * @return success\n', '     */\n', '    function setWithdrawal(address drawer, uint256 weiAmount) internal returns (bool success) {\n', '        if ((drawer != address(0)) && (weiAmount > 0)) {\n', '            uint256 oldBalance = pendingWithdrawals[drawer];\n', '            uint256 newBalance = oldBalance + weiAmount;\n', '            if (newBalance > oldBalance) {\n', '                pendingWithdrawals[drawer] = newBalance;\n', '                Withdrawal(drawer, weiAmount);\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /*\n', '     * @dev Withdraw the allowed value from the contract balance.\n', '     * @return success\n', '     */\n', '    function withdraw() public returns (bool success) {\n', '        uint256 weiAmount = pendingWithdrawals[msg.sender];\n', '        require(weiAmount > 0);\n', '\n', '        pendingWithdrawals[msg.sender] = 0;\n', '        msg.sender.transfer(weiAmount);\n', '        Withdrawn(msg.sender, weiAmount);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Cointed Token\n', ' * @dev Cointed Token (CTD) and Token Sale (ICO).\n', ' */\n', '\n', 'contract CtdToken is UpgradableToken, PausableOnce, Withdrawable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    string public constant name = "Cointed Token";\n', '    string public constant symbol = "CTD";\n', '    /** Number of "Atom" in 1 CTD (1 CTD = 1x10^decimals Atom) */\n', '    uint8  public constant decimals = 18;\n', '\n', '    /** Holder of bounty tokens */\n', '    address public bounty;\n', '\n', "    /** Limit (in Atom) issued, inclusive owner's and bounty shares */\n", '    uint256 constant internal TOTAL_LIMIT   = 650000000 * (10 ** uint256(decimals));\n', "    /** Limit (in Atom) for Pre-ICO Phases A, incl. owner's and bounty shares */\n", '    uint256 constant internal PRE_ICO_LIMIT = 130000000 * (10 ** uint256(decimals));\n', '\n', '    /**\n', '    * ICO Phases.\n', '    *\n', '    * - PreStart: tokens are not yet sold/issued\n', '    * - PreIcoA:  new tokens sold/issued at the premium price\n', '    * - PreIcoB:  new tokens sold/issued at the discounted price\n', '    * - MainIco   new tokens sold/issued at the regular price\n', '    * - AfterIco: new tokens can not be not be sold/issued any longer\n', '    */\n', '    enum Phases {PreStart, PreIcoA, PreIcoB, MainIco, AfterIco}\n', '\n', '    uint64 constant internal PRE_ICO_DURATION = 745 hours;\n', '    uint64 constant internal ICO_DURATION = 2423 hours + 59 minutes;\n', '    uint64 constant internal RETURN_WEI_PAUSE = 30 days;\n', '\n', '    // Main ICO rate in CTD(s) per 1 ETH:\n', '    uint256 constant internal TO_SENDER_RATE   = 1000;\n', '    uint256 constant internal TO_OWNER_RATE    =  263;\n', '    uint256 constant internal TO_BOUNTY_RATE   =   52;\n', '    uint256 constant internal TOTAL_RATE   =   TO_SENDER_RATE + TO_OWNER_RATE + TO_BOUNTY_RATE;\n', '    // Pre-ICO Phase A rate\n', '    uint256 constant internal TO_SENDER_RATE_A = 1150;\n', '    uint256 constant internal TO_OWNER_RATE_A  =  304;\n', '    uint256 constant internal TO_BOUNTY_RATE_A =   61;\n', '    uint256 constant internal TOTAL_RATE_A   =   TO_SENDER_RATE_A + TO_OWNER_RATE_A + TO_BOUNTY_RATE_A;\n', '    // Pre-ICO Phase B rate\n', '    uint256 constant internal TO_SENDER_RATE_B = 1100;\n', '    uint256 constant internal TO_OWNER_RATE_B  =  292;\n', '    uint256 constant internal TO_BOUNTY_RATE_B =   58;\n', '    uint256 constant internal TOTAL_RATE_B   =   TO_SENDER_RATE_B + TO_OWNER_RATE_B + TO_BOUNTY_RATE_B;\n', '\n', '    // Award in Wei(s) to a successful initiator of a Phase shift\n', '    uint256 constant internal PRE_OPENING_AWARD = 100 * (10 ** uint256(15));\n', '    uint256 constant internal ICO_OPENING_AWARD = 200 * (10 ** uint256(15));\n', '    uint256 constant internal ICO_CLOSING_AWARD = 500 * (10 ** uint256(15));\n', '\n', '    struct Rates {\n', '        uint256 toSender;\n', '        uint256 toOwner;\n', '        uint256 toBounty;\n', '        uint256 total;\n', '    }\n', '\n', '    event NewTokens(uint256 amount);\n', '    event NewFunds(address funder, uint256 value);\n', '    event NewPhase(Phases phase);\n', '\n', '    // current Phase\n', '    Phases public phase = Phases.PreStart;\n', '\n', '    // Timestamps limiting duration of Phases, in seconds since Unix epoch.\n', '    uint64 public preIcoOpeningTime;  // when Pre-ICO Phase A starts\n', '    uint64 public icoOpeningTime;     // when Main ICO starts (if not sold out before)\n', '    uint64 public closingTime;        // by when the ICO campaign finishes in any way\n', '    uint64 public returnAllowedTime;  // when owner may withdraw Eth from contract, if any\n', '\n', '    uint256 public totalProceeds;\n', '\n', '    /*\n', '     * @dev constructor\n', '     * @param _preIcoOpeningTime Timestamp when the Pre-ICO (Phase A) shall start.\n', '     * msg.value MUST be at least the sum of awards.\n', '     */\n', '    function CtdToken(uint64 _preIcoOpeningTime) payable {\n', '        require(_preIcoOpeningTime > now);\n', '\n', '        preIcoOpeningTime = _preIcoOpeningTime;\n', '        icoOpeningTime = preIcoOpeningTime + PRE_ICO_DURATION;\n', '        closingTime = icoOpeningTime + ICO_DURATION;\n', '    }\n', '\n', '    /*\n', '     * @dev Fallback function delegates the request to create().\n', '     */\n', '    function () payable external {\n', '        create();\n', '    }\n', '\n', '    /**\n', '     * @dev Set the address of the holder of bounty tokens.\n', '     * @param _bounty The address of the bounty token holder.\n', '     * @return success/failure\n', '     */\n', '    function setBounty(address _bounty) onlyOwner external returns (bool success) {\n', '        require(_bounty != address(0));\n', '        bounty = _bounty;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Mint tokens and add them to the balance of the message.sender.\n', '     * Additional tokens are minted and added to the owner and the bounty balances.\n', '     * @return success/failure\n', '     */\n', '    function create() payable whenNotClosed whenNotPaused public returns (bool success) {\n', '        require(msg.value > 0);\n', '        require(now >= preIcoOpeningTime);\n', '\n', '        Phases oldPhase = phase;\n', '        uint256 weiToParticipate = msg.value;\n', '        uint256 overpaidWei;\n', '\n', '        adjustPhaseBasedOnTime();\n', '\n', '        if (phase != Phases.AfterIco) {\n', '\n', '            Rates memory rates = getRates();\n', '            uint256 newTokens = weiToParticipate.mul(rates.total);\n', '            uint256 requestedSupply = totalSupply.add(newTokens);\n', '\n', '            uint256 oversoldTokens = computeOversoldAndAdjustPhase(requestedSupply);\n', '            overpaidWei = (oversoldTokens > 0) ? oversoldTokens.div(rates.total) : 0;\n', '\n', '            if (overpaidWei > 0) {\n', '                weiToParticipate = msg.value.sub(overpaidWei);\n', '                newTokens = weiToParticipate.mul(rates.total);\n', '                requestedSupply = totalSupply.add(newTokens);\n', '            }\n', '\n', '            // "emission" of new tokens\n', '            totalSupply = requestedSupply;\n', '            balances[msg.sender] = balances[msg.sender].add(weiToParticipate.mul(rates.toSender));\n', '            balances[owner] = balances[owner].add(weiToParticipate.mul(rates.toOwner));\n', '            balances[bounty] = balances[bounty].add(weiToParticipate.mul(rates.toBounty));\n', '\n', '            // ETH transfers\n', '            totalProceeds = totalProceeds.add(weiToParticipate);\n', '            owner.transfer(weiToParticipate);\n', '            if (overpaidWei > 0) {\n', '                setWithdrawal(msg.sender, overpaidWei);\n', '            }\n', '\n', '            // Logging\n', '            NewTokens(newTokens);\n', '            NewFunds(msg.sender, weiToParticipate);\n', '\n', '        } else {\n', '            setWithdrawal(msg.sender, msg.value);\n', '        }\n', '\n', '        if (phase != oldPhase) {\n', '            logShiftAndBookAward();\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Send the value (ethers) that the contract holds to the owner address.\n', '     */\n', '    function returnWei() onlyOwner whenClosed afterWithdrawPause external {\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '    function adjustPhaseBasedOnTime() internal {\n', '\n', '        if (now >= closingTime) {\n', '            if (phase != Phases.AfterIco) {\n', '                phase = Phases.AfterIco;\n', '            }\n', '        } else if (now >= icoOpeningTime) {\n', '            if (phase != Phases.MainIco) {\n', '                phase = Phases.MainIco;\n', '            }\n', '        } else if (phase == Phases.PreStart) {\n', '            setDefaultParamsIfNeeded();\n', '            phase = Phases.PreIcoA;\n', '        }\n', '    }\n', '\n', '    function setDefaultParamsIfNeeded() internal {\n', '        if (bounty == address(0)) {\n', '            bounty = owner;\n', '        }\n', '        if (upgradeMaster == address(0)) {\n', '            upgradeMaster = owner;\n', '        }\n', '        if (pauseMaster == address(0)) {\n', '            pauseMaster = owner;\n', '        }\n', '    }\n', '\n', '    function computeOversoldAndAdjustPhase(uint256 newTotalSupply) internal returns (uint256 oversoldTokens) {\n', '\n', '        if ((phase == Phases.PreIcoA) &&\n', '            (newTotalSupply >= PRE_ICO_LIMIT)) {\n', '            phase = Phases.PreIcoB;\n', '            oversoldTokens = newTotalSupply.sub(PRE_ICO_LIMIT);\n', '\n', '        } else if (newTotalSupply >= TOTAL_LIMIT) {\n', '            phase = Phases.AfterIco;\n', '            oversoldTokens = newTotalSupply.sub(TOTAL_LIMIT);\n', '\n', '        } else {\n', '            oversoldTokens = 0;\n', '        }\n', '\n', '        return oversoldTokens;\n', '    }\n', '\n', '    function getRates() internal returns (Rates rates) {\n', '\n', '        if (phase == Phases.PreIcoA) {\n', '            rates.toSender = TO_SENDER_RATE_A;\n', '            rates.toOwner = TO_OWNER_RATE_A;\n', '            rates.toBounty = TO_BOUNTY_RATE_A;\n', '            rates.total = TOTAL_RATE_A;\n', '        } else if (phase == Phases.PreIcoB) {\n', '            rates.toSender = TO_SENDER_RATE_B;\n', '            rates.toOwner = TO_OWNER_RATE_B;\n', '            rates.toBounty = TO_BOUNTY_RATE_B;\n', '            rates.total = TOTAL_RATE_B;\n', '        } else {\n', '            rates.toSender = TO_SENDER_RATE;\n', '            rates.toOwner = TO_OWNER_RATE;\n', '            rates.toBounty = TO_BOUNTY_RATE;\n', '            rates.total = TOTAL_RATE;\n', '        }\n', '        return rates;\n', '    }\n', '\n', '    function logShiftAndBookAward() internal {\n', '        uint256 shiftAward;\n', '\n', '        if ((phase == Phases.PreIcoA) || (phase == Phases.PreIcoB)) {\n', '            shiftAward = PRE_OPENING_AWARD;\n', '\n', '        } else if (phase == Phases.MainIco) {\n', '            shiftAward = ICO_OPENING_AWARD;\n', '\n', '        } else {\n', '            shiftAward = ICO_CLOSING_AWARD;\n', '            returnAllowedTime = uint64(now + RETURN_WEI_PAUSE);\n', '        }\n', '\n', '        setWithdrawal(msg.sender, shiftAward);\n', '        NewPhase(phase);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens to the specified address.\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount of tokens to be transferred.\n', '     * @return success/failure\n', '     */\n', '    function transfer(address _to, uint256 _value)\n', '        whenNotPaused limitForOwner public returns (bool success)\n', '    {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another.\n', '     * @param _from address The address which you want to send tokens from.\n', '     * @param _to address The address which you want to transfer to.\n', '     * @param _value the amount of tokens to be transferred.\n', '     * @return success/failure\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        whenNotPaused limitForOwner public returns (bool success)\n', '    {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the specified address to spend the specified amount of tokens on behalf of the msg.sender.\n', '     * Use "increaseApproval" or "decreaseApproval" function to change the approval, if needed.\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     * @return success/failure\n', '     */\n', '    function approve(address _spender, uint256 _value)\n', '        whenNotPaused limitForOwner public returns (bool success)\n', '    {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the approval for the passed address to spend tokens on behalf of the msg.sender.\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the approval with.\n', '     * @return success/failure\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue)\n', '        whenNotPaused limitForOwner public returns (bool success)\n', '    {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the approval for the passed address to spend tokens on behalf of the msg.sender.\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the approval with.\n', '     * @return success/failure\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue)\n', '        whenNotPaused limitForOwner public returns (bool success)\n', '    {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '\n', '    /*\n', '     * @dev Withdraw the allowed value (ethers) from the contract balance.\n', '     * @return success/failure\n', '     */\n', '    function withdraw() whenNotPaused public returns (bool success) {\n', '        return super.withdraw();\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called when ICO is active.\n', '     */\n', '    modifier whenClosed() {\n', '        require(phase == Phases.AfterIco);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called when ICO is completed.\n', '     */\n', '    modifier whenNotClosed() {\n', '        require(phase != Phases.AfterIco);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by the owner before ICO is completed.\n', '     */\n', '    modifier limitForOwner() {\n', '        require((msg.sender != owner) || (phase == Phases.AfterIco));\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called before returnAllowedTime.\n', '     */\n', '    modifier afterWithdrawPause() {\n', '        require(now > returnAllowedTime);\n', '        _;\n', '    }\n', '\n', '}']