['pragma solidity 0.4.15;\n', '\n', 'contract ERC20 {\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '}\n', '\n', 'contract TokensaleBlacklist {\n', '    function isRestricted(address _addr) constant returns(bool);\n', '}\n', '\n', 'contract TraderStarsSale {\n', '    uint public constant SALES_START = 1510754400; // 15.11.2017 14:00:00 UTC\n', '    uint public constant SALES_DEADLINE = 1513864800; // 21.12.2017 14:00:00 UTC\n', '    address public constant MASTER_WALLET = 0x909B194c56eB3ecf10F1f9FaF5fc8E35B2de1F2d;\n', '    address public constant TOKEN = 0xfCA1a79D59Bcf870fAA685BE0d0cdA394F52Ceb5;\n', '    address public constant TOKENSALE_BLACKLIST = 0x945B2c9569A8ebd883d05Ab20f09AD6c241cB156;\n', '    uint public constant TOKEN_PRICE = 0.00000003 ether;\n', '    uint public constant PRE_ICO_MAX_CAP = 100000000000;\n', '    uint public constant ICO_MAX_CAP = 2100000000000;\n', '    uint public preIcoTotalSupply;\n', '    uint public icoTotalSupply;\n', '\n', '    event Contributed(address receiver, uint contribution, uint reward);\n', '\n', '    function contribute() payable returns(bool) {\n', '        require(msg.value >= TOKEN_PRICE);\n', '        require(now < SALES_DEADLINE);\n', '        require(now >= SALES_START);\n', '        // Blacklist of exchange pools, and other not private wallets.\n', '        require(!TokensaleBlacklist(TOKENSALE_BLACKLIST).isRestricted(msg.sender));\n', '\n', '        uint tokensAmount = _calculateBonusAndUpdateTotal(msg.value / TOKEN_PRICE);\n', '        require(tokensAmount > 0);\n', '        require(preIcoTotalSupply < PRE_ICO_MAX_CAP);\n', '        require(preIcoTotalSupply + icoTotalSupply < ICO_MAX_CAP);\n', '\n', '        require(ERC20(TOKEN).transferFrom(MASTER_WALLET, msg.sender, tokensAmount));\n', '        // If there is some division reminder from msg.value % TOKEN_PRICE, we just\n', '        // collect it too.\n', '        MASTER_WALLET.transfer(msg.value);\n', '\n', '        Contributed(msg.sender, msg.value, tokensAmount);\n', '        return true;\n', '    }\n', '\n', '    function _calculateBonusAndUpdateTotal(uint _value) internal returns(uint) {\n', '        uint currentTime = now;\n', '        uint amountWithBonus;\n', '\n', '        // between 5.12.2017 14:00:00 UTC and 21.12.2017 14:00:00 UTC no bonus\n', '        if (currentTime > 1512482400 && currentTime <= SALES_DEADLINE) {\n', '            icoTotalSupply += _value;\n', '            return _value;\n', '        // between 28.11.2017 14:00:00 UTC and 5.12.2017 14:00:00 UTC +2.5%\n', '        } else if (currentTime > 1511877600 && currentTime <= 1512482400) {\n', '            amountWithBonus = _value + _value * 25 / 1000;\n', '            icoTotalSupply += amountWithBonus;\n', '            return amountWithBonus;\n', '        // between 24.11.2017 14:00:00 UTC and 28.11.2017 14:00:00 UTC +5%\n', '        } else if (currentTime > 1511532000 && currentTime <= 1511877600) {\n', '            amountWithBonus = _value + _value * 50 / 1000;\n', '            icoTotalSupply += amountWithBonus;\n', '            return amountWithBonus;\n', '        // between 22.11.2017 14:00:00 UTC and 24.11.2017 14:00:00 UTC +10%\n', '        } else if (currentTime > 1511359200 && currentTime <= 1511532000) {\n', '            amountWithBonus = _value + _value * 100 / 1000;\n', '            icoTotalSupply += amountWithBonus;\n', '            return amountWithBonus;\n', '        // between 21.11.2017 14:00:00 UTC and 22.11.2017 14:00:00 UTC +25%\n', '        } else if (currentTime > 1511272800 && currentTime <= 1511359200) {\n', '            amountWithBonus = _value + _value * 250 / 1000;\n', '            icoTotalSupply += amountWithBonus;\n', '            return amountWithBonus;\n', '        // between 15.11.2017 14:00:00 UTC and 17.11.2017 14:00:00 UTC +30%\n', '        } else if (currentTime >= SALES_START && currentTime <= 1510927200) {\n', '            amountWithBonus = _value + _value * 300 / 1000;\n', '            preIcoTotalSupply += amountWithBonus;\n', '            return amountWithBonus;\n', '        }\n', '        \n', '        return 0;\n', '    }\n', '\n', '    function () payable {\n', '        contribute();\n', '    }\n', '}']