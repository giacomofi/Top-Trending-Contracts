['pragma solidity ^0.4.17;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    mapping(address => uint256) balances;\n', '    function balanceOf(address _owner) public constant returns (uint256) { return balances[_owner]; }\n', '    // Transfer is disabled for users, as these are PreSale tokens\n', '    //function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', '* @title Gimmer PreSale Smart Contract\n', '* @author lucas@gimmer.net, jitendra@chittoda.com\n', '*/\n', 'contract GimmerPreSale is ERC20Basic, Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '    * @dev Supporter structure, which allows us to track\n', "    * how much the user has bought so far, and if he's flagged as known\n", '    */\n', '    struct Supporter {\n', '        uint256 weiSpent;   // the total amount of Wei this address has sent to this contract\n', '        bool hasKYC;        // if the user has KYC flagged\n', '    }\n', '\n', '    mapping(address => Supporter) public supportersMap; // Mapping with all the campaign supporters\n', '    address public fundWallet;      // Address to forward all Ether to\n', '    address public kycManager;      // Address that manages approval of KYC\n', '    uint256 public tokensSold;      // How many tokens sold in PreSale\n', '    uint256 public weiRaised;       // amount of raised money in wei\n', '\n', '    uint256 public constant ONE_MILLION = 1000000;\n', '    // Maximum amount that can be sold during the Pre Sale period\n', '    uint256 public constant PRE_SALE_GMRP_TOKEN_CAP = 15 * ONE_MILLION * 1 ether; //15 Million GMRP Tokens\n', '\n', '    /* Allowed Contribution in Ether */\n', '    uint256 public constant PRE_SALE_30_ETH     = 30 ether;  // Minimum 30 Ether to get 25% Bonus Tokens\n', '    uint256 public constant PRE_SALE_300_ETH    = 300 ether; // Minimum 300 Ether to get 30% Bonus Tokens\n', '    uint256 public constant PRE_SALE_3000_ETH   = 3000 ether;// Minimum 3000 Ether to get 40% Bonus Tokens\n', '\n', '    /* Bonus Tokens based on the ETH Contributed in single transaction */\n', '    uint256 public constant TOKEN_RATE_25_PERCENT_BONUS = 1250; // 25% Bonus Tokens, when >= 30 ETH & < 300 ETH\n', '    uint256 public constant TOKEN_RATE_30_PERCENT_BONUS = 1300; // 30% Bonus Tokens, when >= 300 ETH & < 3000 ETH\n', '    uint256 public constant TOKEN_RATE_40_PERCENT_BONUS = 1400; // 40% Bonus Tokens, when >= 3000 ETH\n', '\n', '    /* start and end timestamps where investments are allowed (both inclusive) */\n', '    uint256 public constant START_TIME  = 1511524800;   //GMT: Friday, 24 November 2017 12:00:00\n', '    uint256 public constant END_TIME    = 1514894400;   //GMT: Tuesday, 2 January  2018 12:00:00\n', '\n', '    /* Token metadata */\n', '    string public constant name = "GimmerPreSale Token";\n', '    string public constant symbol = "GMRP";\n', '    uint256 public constant decimals = 18;\n', '\n', '    /**\n', '    * @dev Modifier to only allow KYCManager\n', '    */\n', '    modifier onlyKycManager() {\n', '        require(msg.sender == kycManager);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * Event for token purchase logging\n', '    * @param purchaser  who bought the tokens\n', '    * @param value      weis paid for purchase\n', '    * @param amount     amount of tokens purchased\n', '    */\n', '    event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\n', '\n', '    /**\n', '    * Event for minting new tokens\n', '    * @param to         The person that received tokens\n', '    * @param amount     Amount of tokens received\n', '    */\n', '    event Mint(address indexed to, uint256 amount);\n', '\n', '    /**\n', '     * Event to log a user is approved or disapproved\n', '     * @param user          User who has been approved/disapproved\n', '     * @param isApproved    true : User is approved, false : User is disapproved\n', '     */\n', '    event KYC(address indexed user, bool isApproved);\n', '\n', '    /**\n', '     * Constructor\n', '     * @param _fundWallet           Address to forward all received Ethers to\n', "     * @param _kycManagerWallet     KYC Manager wallet to approve / disapprove user's KYC\n", '     */\n', '    function GimmerPreSale(address _fundWallet, address _kycManagerWallet) public {\n', '        require(_fundWallet != address(0));\n', '        require(_kycManagerWallet != address(0));\n', '\n', '        fundWallet = _fundWallet;\n', '        kycManager = _kycManagerWallet;\n', '    }\n', '\n', '    /* fallback function can be used to buy tokens */\n', '    function () whenNotPaused public payable {\n', '        buyTokens();\n', '    }\n', '\n', '    /* @return true if the transaction can buy tokens, otherwise false */\n', '    function validPurchase() internal constant returns (bool) {\n', '        bool withinPeriod = now >= START_TIME && now <= END_TIME;\n', '        bool higherThanMin30ETH = msg.value >= PRE_SALE_30_ETH;\n', '        return withinPeriod && higherThanMin30ETH;\n', '    }\n', '\n', '    /* low level token purchase function */\n', '    function buyTokens() whenNotPaused public payable {\n', '        address sender = msg.sender;\n', '\n', '        // make sure the user buying tokens has KYC\n', '        require(userHasKYC(sender));\n', '        require(validPurchase());\n', '\n', '        // calculate token amount to be created\n', '        uint256 weiAmountSent = msg.value;\n', '        uint256 rate = getRate(weiAmountSent);\n', '        uint256 newTokens = weiAmountSent.mul(rate);\n', '\n', '        // look if we have not yet reached the cap\n', '        uint256 totalTokensSold = tokensSold.add(newTokens);\n', '        require(totalTokensSold <= PRE_SALE_GMRP_TOKEN_CAP);\n', '\n', '        // update supporter state\n', '        Supporter storage sup = supportersMap[sender];\n', '        uint256 totalWei = sup.weiSpent.add(weiAmountSent);\n', '        sup.weiSpent = totalWei;\n', '\n', '        // update contract state\n', '        weiRaised = weiRaised.add(weiAmountSent);\n', '        tokensSold = totalTokensSold;\n', '\n', '        // finally mint the coins\n', '        mint(sender, newTokens);\n', '        TokenPurchase(sender, weiAmountSent, newTokens);\n', '\n', '        // and forward the funds to the wallet\n', '        forwardFunds();\n', '    }\n', '\n', '    /**\n', '     * returns the rate the user will be paying at,\n', '     * based on the amount of wei sent to the contract\n', '     */\n', '    function getRate(uint256 weiAmount) public pure returns (uint256) {\n', '        if (weiAmount >= PRE_SALE_3000_ETH) {\n', '            return TOKEN_RATE_40_PERCENT_BONUS;\n', '        } else if(weiAmount >= PRE_SALE_300_ETH) {\n', '            return TOKEN_RATE_30_PERCENT_BONUS;\n', '        } else if(weiAmount >= PRE_SALE_30_ETH) {\n', '            return TOKEN_RATE_25_PERCENT_BONUS;\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * send ether to the fund collection wallet\n', '     * override to create custom fund forwarding mechanisms\n', '     */\n', '    function forwardFunds() internal {\n', '        fundWallet.transfer(msg.value);\n', '    }\n', '\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public constant returns (bool) {\n', '        return now > END_TIME;\n', '    }\n', '\n', '    /**\n', "    * @dev Approves an User's KYC\n", '    * @param _user The user to flag as known\n', '    */\n', '    function approveUserKYC(address _user) onlyKycManager public {\n', '        Supporter storage sup = supportersMap[_user];\n', '        sup.hasKYC = true;\n', '        KYC(_user, true);\n', '    }\n', '\n', '    /**\n', "     * @dev Disapproves an User's KYC\n", '     * @param _user The user to flag as unknown / suspecious\n', '     */\n', '    function disapproveUserKYC(address _user) onlyKycManager public {\n', '        Supporter storage sup = supportersMap[_user];\n', '        sup.hasKYC = false;\n', '        KYC(_user, false);\n', '    }\n', '\n', '    /**\n', '    * @dev Changes the KYC manager to a new address\n', '    * @param _newKYCManager The new address that will be managing KYC approval\n', '    */\n', '    function setKYCManager(address _newKYCManager) onlyOwner public {\n', '        require(_newKYCManager != address(0));\n', '        kycManager = _newKYCManager;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns if an users has KYC approval or not\n', "    * @return A boolean representing the user's KYC status\n", '    */\n', '    function userHasKYC(address _user) public constant returns (bool) {\n', '        return supportersMap[_user].hasKYC;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the weiSpent of a user\n', '     */\n', '    function userWeiSpent(address _user) public constant returns (uint256) {\n', '        return supportersMap[_user].weiSpent;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to mint tokens\n', '    * @param _to The address that will receive the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mint(address _to, uint256 _amount) internal returns (bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        Transfer(0x0, _to, _amount);\n', '        return true;\n', '    }\n', '}']