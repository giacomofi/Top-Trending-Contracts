['pragma solidity ^0.4.15;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '\n', 'contract WELToken is MintableToken, PausableToken {\n', '  string public constant name = "Welcome Coin";\n', '  string public constant symbol = "WEL";\n', '  uint8 public constant decimals = 18;\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  function RefundVault(address _wallet) {\n', '    require(_wallet != 0x0);\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    Closed();\n', '    wallet.transfer(this.balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    RefundsEnabled();\n', '  }\n', '\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Modified contract for managing a token crowdsale.\n', ' * WelCoinCrowdsale have pre-sale and main sale periods, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate and the system of bonuses.\n', ' * Funds collected are forwarded to a wallet as they arrive.\n', ' * pre-sale and main sale periods both have caps defined in tokens\n', ' */\n', '\n', 'contract WelCoinCrowdsale is Ownable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  struct Bonus {\n', '    uint bonusEndTime;\n', '    uint timePercent;\n', '    uint bonusMinAmount;\n', '    uint amountPercent;\n', '  }\n', '\n', '  // minimum amount of funds to be raised in weis\n', '  uint256 public goal;\n', '\n', '  // wel token emission\n', '  uint256 public tokenEmission;\n', '\n', '  // refund vault used to hold funds while crowdsale is running\n', '  RefundVault public vault;\n', '\n', '  // true for finalised crowdsale\n', '  bool public isFinalized;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where pre-investments are allowed (both inclusive)\n', '  uint256 public preSaleStartTime;\n', '  uint256 public preSaleEndTime;\n', '\n', '  // start and end timestamps where main-investments are allowed (both inclusive)\n', '  uint256 public mainSaleStartTime;\n', '  uint256 public mainSaleEndTime;\n', '\n', '  // maximum amout of wei for pre-sale and main sale\n', '  uint256 public preSaleWeiCap;\n', '  uint256 public mainSaleWeiCap;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // address where final 10% of funds will be collected\n', '  address public tokenWallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  Bonus[] public preSaleBonuses;\n', '  Bonus[] public mainSaleBonuses;\n', '\n', '  uint256 public preSaleMinimumWei;\n', '  uint256 public mainSaleMinimumWei;\n', '\n', '  uint256 public defaultPercent;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  event FinalisedCrowdsale(uint256 totalSupply, uint256 minterBenefit);\n', '\n', '  function WelCoinCrowdsale(uint256 _preSaleStartTime, uint256 _preSaleEndTime, uint256 _preSaleWeiCap, uint256 _mainSaleStartTime, uint256 _mainSaleEndTime, uint256 _mainSaleWeiCap, uint256 _goal, uint256 _rate, address _wallet, address _tokenWallet) public {\n', '\n', '    //require(_goal > 0);\n', '\n', "    // can't start pre-sale in the past\n", '    require(_preSaleStartTime >= now);\n', '\n', "    // can't start main sale in the past\n", '    require(_mainSaleStartTime >= now);\n', '\n', "    // can't start main sale before the end of pre-sale\n", '    require(_preSaleEndTime < _mainSaleStartTime);\n', '\n', "    // the end of pre-sale can't happen before it's start\n", '    require(_preSaleStartTime < _preSaleEndTime);\n', '\n', "    // the end of main sale can't happen before it's start\n", '    require(_mainSaleStartTime < _mainSaleEndTime);\n', '\n', '    require(_rate > 0);\n', '    require(_preSaleWeiCap > 0);\n', '    require(_mainSaleWeiCap > 0);\n', '    require(_wallet != 0x0);\n', '    require(_tokenWallet != 0x0);\n', '\n', '    preSaleMinimumWei = 300000000000000000;  // 0.3 Ether default minimum\n', '    mainSaleMinimumWei = 300000000000000000; // 0.3 Ether default minimum\n', '    defaultPercent = 0;\n', '\n', '    tokenEmission = 150000000 ether;\n', '\n', '    preSaleBonuses.push(Bonus({bonusEndTime: 3600 * 24 * 2, timePercent: 20, bonusMinAmount: 8500 ether, amountPercent: 25}));\n', '    preSaleBonuses.push(Bonus({bonusEndTime: 3600 * 24 * 4, timePercent: 20, bonusMinAmount: 0, amountPercent: 0}));\n', '    preSaleBonuses.push(Bonus({bonusEndTime: 3600 * 24 * 6, timePercent: 15, bonusMinAmount: 0, amountPercent: 0}));\n', '    preSaleBonuses.push(Bonus({bonusEndTime: 3600 * 24 * 7, timePercent: 10, bonusMinAmount: 20000 ether, amountPercent: 15}));\n', '\n', '    mainSaleBonuses.push(Bonus({bonusEndTime: 3600 * 24 * 7,  timePercent: 9, bonusMinAmount: 0, amountPercent: 0}));\n', '    mainSaleBonuses.push(Bonus({bonusEndTime: 3600 * 24 * 14, timePercent: 6, bonusMinAmount: 0, amountPercent: 0}));\n', '    mainSaleBonuses.push(Bonus({bonusEndTime: 3600 * 24 * 21, timePercent: 4, bonusMinAmount: 0, amountPercent: 0}));\n', '    mainSaleBonuses.push(Bonus({bonusEndTime: 3600 * 24 * 28, timePercent: 0, bonusMinAmount: 0, amountPercent: 0}));\n', '\n', '    preSaleStartTime = _preSaleStartTime;\n', '    preSaleEndTime = _preSaleEndTime;\n', '    preSaleWeiCap = _preSaleWeiCap;\n', '    mainSaleStartTime = _mainSaleStartTime;\n', '    mainSaleEndTime = _mainSaleEndTime;\n', '    mainSaleWeiCap = _mainSaleWeiCap;\n', '    goal = _goal;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    tokenWallet = _tokenWallet;\n', '\n', '    isFinalized = false;\n', '\n', '    token = new WELToken();\n', '    vault = new RefundVault(wallet);\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '\n', '    require(beneficiary != 0x0);\n', '    require(msg.value != 0);\n', '    require(!isFinalized);\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    validateWithinPeriods();\n', '    validateWithinCaps(weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    uint256 percent = getBonusPercent(tokens, now);\n', '\n', '    // add bonus to tokens depends on the period\n', '    uint256 bonusedTokens = applyBonus(tokens, percent);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    token.mint(beneficiary, bonusedTokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, bonusedTokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // owner can mint tokens during crowdsale withing defined caps\n', '  function mintTokens(address beneficiary, uint256 weiAmount, uint256 forcePercent) external onlyOwner returns (bool) {\n', '\n', '    require(forcePercent <= 100);\n', '    require(beneficiary != 0x0);\n', '    require(weiAmount != 0);\n', '    require(!isFinalized);\n', '\n', '    validateWithinCaps(weiAmount);\n', '\n', '    uint256 percent = 0;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    if (forcePercent == 0) {\n', '      percent = getBonusPercent(tokens, now);\n', '    } else {\n', '      percent = forcePercent;\n', '    }\n', '\n', '    // add bonus to tokens depends on the period\n', '    uint256 bonusedTokens = applyBonus(tokens, percent);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    token.mint(beneficiary, bonusedTokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, bonusedTokens);\n', '  }\n', '\n', '  // set new dates for pre-salev (emergency case)\n', '  function setPreSaleParameters(uint256 _preSaleStartTime, uint256 _preSaleEndTime, uint256 _preSaleWeiCap, uint256 _preSaleMinimumWei) public onlyOwner {\n', '    require(!isFinalized);\n', '    require(_preSaleStartTime < _preSaleEndTime);\n', '    require(_preSaleWeiCap > 0);\n', '    preSaleStartTime = _preSaleStartTime;\n', '    preSaleEndTime = _preSaleEndTime;\n', '    preSaleWeiCap = _preSaleWeiCap;\n', '    preSaleMinimumWei = _preSaleMinimumWei;\n', '  }\n', '\n', '  // set new dates for main-sale (emergency case)\n', '  function setMainSaleParameters(uint256 _mainSaleStartTime, uint256 _mainSaleEndTime, uint256 _mainSaleWeiCap, uint256 _mainSaleMinimumWei) public onlyOwner {\n', '    require(!isFinalized);\n', '    require(_mainSaleStartTime < _mainSaleEndTime);\n', '    require(_mainSaleWeiCap > 0);\n', '    mainSaleStartTime = _mainSaleStartTime;\n', '    mainSaleEndTime = _mainSaleEndTime;\n', '    mainSaleWeiCap = _mainSaleWeiCap;\n', '    mainSaleMinimumWei = _mainSaleMinimumWei;\n', '  }\n', '\n', '  // set new wallets (emergency case)\n', '  function setWallets(address _wallet, address _tokenWallet) public onlyOwner {\n', '    require(!isFinalized);\n', '    require(_wallet != 0x0);\n', '    require(_tokenWallet != 0x0);\n', '    wallet = _wallet;\n', '    tokenWallet = _tokenWallet;\n', '  }\n', '\n', '    // set new rate (emergency case)\n', '  function setRate(uint256 _rate) public onlyOwner {\n', '    require(!isFinalized);\n', '    require(_rate > 0);\n', '    rate = _rate;\n', '  }\n', '\n', '      // set new goal (emergency case)\n', '  function setGoal(uint256 _goal) public onlyOwner {\n', '    require(!isFinalized);\n', '    require(_goal > 0);\n', '    goal = _goal;\n', '  }\n', '\n', '\n', '  // set token on pause\n', '  function pauseToken() external onlyOwner {\n', '    require(!isFinalized);\n', '    WELToken(token).pause();\n', '  }\n', '\n', "  // unset token's pause\n", '  function unpauseToken() external onlyOwner {\n', '    WELToken(token).unpause();\n', '  }\n', '\n', '  // set token Ownership\n', '  function transferTokenOwnership(address newOwner) external onlyOwner {\n', '    WELToken(token).transferOwnership(newOwner);\n', '  }\n', '\n', '  // @return true if main sale event has ended\n', '  function mainSaleHasEnded() external constant returns (bool) {\n', '    return now > mainSaleEndTime;\n', '  }\n', '\n', '  // @return true if pre sale event has ended\n', '  function preSaleHasEnded() external constant returns (bool) {\n', '    return now > preSaleEndTime;\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  function forwardFunds() internal {\n', '    //wallet.transfer(msg.value);\n', '    vault.deposit.value(msg.value)(msg.sender);\n', '  }\n', '\n', '  // we want to be able to check all bonuses in already deployed contract\n', '  // that\'s why we pass currentTime as a parameter instead of using "now"\n', '  function getBonusPercent(uint256 tokens, uint256 currentTime) public constant returns (uint256 percent) {\n', '    //require(currentTime >= preSaleStartTime);\n', '    uint i = 0;\n', '    bool isPreSale = currentTime >= preSaleStartTime && currentTime <= preSaleEndTime;\n', '    if (isPreSale) {\n', '      uint256 preSaleDiffInSeconds = currentTime.sub(preSaleStartTime);\n', '      for (i = 0; i < preSaleBonuses.length; i++) {\n', '        if (preSaleDiffInSeconds <= preSaleBonuses[i].bonusEndTime) {\n', '          if (preSaleBonuses[i].bonusMinAmount > 0 && tokens >= preSaleBonuses[i].bonusMinAmount) {\n', '            return preSaleBonuses[i].amountPercent;\n', '          } else {\n', '            return preSaleBonuses[i].timePercent;\n', '          }\n', '        }\n', '      }\n', '    } else {\n', '      uint256 mainSaleDiffInSeconds = currentTime.sub(mainSaleStartTime);\n', '      for (i = 0; i < mainSaleBonuses.length; i++) {\n', '        if (mainSaleDiffInSeconds <= mainSaleBonuses[i].bonusEndTime) {\n', '          if (mainSaleBonuses[i].bonusMinAmount > 0 && tokens >= mainSaleBonuses[i].bonusMinAmount) {\n', '            return mainSaleBonuses[i].amountPercent;\n', '          } else {\n', '            return mainSaleBonuses[i].timePercent;\n', '          }\n', '        }\n', '      }\n', '    }\n', '    return defaultPercent;\n', '  }\n', '\n', '  function applyBonus(uint256 tokens, uint256 percent) internal constant returns (uint256 bonusedTokens) {\n', '    uint256 tokensToAdd = tokens.mul(percent).div(100);\n', '    return tokens.add(tokensToAdd);\n', '  }\n', '\n', '  function validateWithinPeriods() internal constant {\n', '    // within pre-sale or main sale\n', '    require((now >= preSaleStartTime && now <= preSaleEndTime) || (now >= mainSaleStartTime && now <= mainSaleEndTime));\n', '  }\n', '\n', '  function validateWithinCaps(uint256 weiAmount) internal constant {\n', '    uint256 expectedWeiRaised = weiRaised.add(weiAmount);\n', '\n', '    // within pre-sale\n', '    if (now >= preSaleStartTime && now <= preSaleEndTime) {\n', '      require(weiAmount >= preSaleMinimumWei);\n', '      require(expectedWeiRaised <= preSaleWeiCap);\n', '    }\n', '\n', '    // within main sale\n', '    if (now >= mainSaleStartTime && now <= mainSaleEndTime) {\n', '      require(weiAmount >= mainSaleMinimumWei);\n', '      require(expectedWeiRaised <= mainSaleWeiCap);\n', '    }\n', '  }\n', '\n', '  // if crowdsale is unsuccessful, investors can claim refunds here\n', '  function claimRefund() public {\n', '    require(isFinalized);\n', '    require(!goalReached());\n', '    vault.refund(msg.sender);\n', '  }\n', '\n', '  function goalReached() public constant returns (bool) {\n', '    return weiRaised >= goal;\n', '  }\n', '\n', '  // finish crowdsale,\n', "  // take totalSupply as 90% and mint 10% more to specified owner's wallet\n", '  // then stop minting forever\n', '\n', '  function finaliseCrowdsale() external onlyOwner returns (bool) {\n', '    require(!isFinalized);\n', '    uint256 totalSupply = token.totalSupply();\n', '    uint256 minterBenefit = tokenEmission.sub(totalSupply);\n', '    if (goalReached()) {\n', '      token.mint(tokenWallet, minterBenefit);\n', '      vault.close();\n', '      //token.finishMinting();\n', '    } else {\n', '      vault.enableRefunds();\n', '    }\n', '\n', '    FinalisedCrowdsale(totalSupply, minterBenefit);\n', '    isFinalized = true;\n', '    return true;\n', '  }\n', '\n', '}']