['pragma solidity ^0.4.18;\n', '\n', '// ----------------------------------------------------------------------------\n', "// 'PREVE' 'Presale EVE Tokens' token contract\n", '//\n', '// Deployed to : 0x91bbf2167Fef5b0044D8580c9631A3161616da7a\n', '// Symbol      : Zqir6DBAX9VV\n', '// Name        : Zqir6DBAX9VV\n', '// Total supply: Minted\n', '// Decimals    : 18\n', '//\n', '// Enjoy.\n', '//\n', '// (c) BokkyPooBah / Bok Consulting Pty Ltd for Devery 2017. The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Devery Presale Whitelist Interface\n', '// ----------------------------------------------------------------------------\n', 'contract DeveryPresaleWhitelist {\n', '    mapping(address => uint) public whitelist;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Parity PICOPS Whitelist Interface\n', '// ----------------------------------------------------------------------------\n', 'contract PICOPSCertifier {\n', '    function certified(address) public constant returns (bool);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals, minting and\n', '// transferable flag. See:\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Token is ERC20Interface, Owned {\n', '    using SafeMath for uint;\n', '\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '\n', '    bool public transferable;\n', '    bool public mintable = true;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    event MintingDisabled();\n', '    event TransfersEnabled();\n', '\n', '    function ERC20Token(string _symbol, string _name, uint8 _decimals) public {\n', '        symbol = _symbol;\n', '        name = _name;\n', '        decimals = _decimals;\n', '    }\n', '\n', '    // --- ERC20 standard functions ---\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        require(transferable);\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        require(transferable);\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        require(transferable);\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    // --- Additions over ERC20 ---\n', '    function disableMinting() internal {\n', '        require(mintable);\n', '        mintable = false;\n', '        MintingDisabled();\n', '    }\n', '    function enableTransfers() public onlyOwner {\n', '        require(!transferable);\n', '        transferable = true;\n', '        TransfersEnabled();\n', '    }\n', '    function mint(address tokenOwner, uint tokens) internal {\n', '        require(mintable);\n', '        balances[tokenOwner] = balances[tokenOwner].add(tokens);\n', '        _totalSupply = _totalSupply.add(tokens);\n', '        Transfer(address(0), tokenOwner, tokens);\n', '    }\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Devery Presale Token Contract\n', '// ----------------------------------------------------------------------------\n', 'contract DeveryPresale is ERC20Token {\n', '    address public wallet;\n', '    // new Date(1513267028 * 1000).toUTCString() =>  "Thu, 14 Dec 2017 15:57:08 UTC" = "Fri, 15 Dec 2017 02:57:08 AEDT"\n', '    uint public constant START_DATE = 1513267028;\n', '    bool public closed;\n', '    uint public ethMinContribution = 0.01 ether;\n', '    uint public constant TEST_CONTRIBUTION = 0.01 ether;\n', '    uint public usdCap = 2000000;\n', '    // ETH/USD 14 Dec 2017 ~ 16:40 AEST => 730 from CMC\n', '    uint public usdPerKEther = 730000;\n', '    uint public contributedEth;\n', '    uint public contributedUsd;\n', '    DeveryPresaleWhitelist public whitelist = DeveryPresaleWhitelist(0xB74c2851d55CD01A43BDD0878fe6C0FF984A8203);\n', '    PICOPSCertifier public picopsCertifier = PICOPSCertifier(0x1e2F058C43ac8965938F6e9CA286685A3E63F24E);\n', '\n', '    event WalletUpdated(address indexed oldWallet, address indexed newWallet);\n', '    event EthMinContributionUpdated(uint oldEthMinContribution, uint newEthMinContribution);\n', '    event UsdCapUpdated(uint oldUsdCap, uint newUsdCap);\n', '    event UsdPerKEtherUpdated(uint oldUsdPerKEther, uint newUsdPerKEther);\n', '    event WhitelistUpdated(address indexed oldWhitelist, address indexed newWhitelist);\n', '    event PICOPSCertifierUpdated(address indexed oldPICOPSCertifier, address indexed newPICOPSCertifier);\n', '    event Contributed(address indexed addr, uint ethAmount, uint ethRefund, uint usdAmount, uint contributedEth, uint contributedUsd);\n', '\n', '    function DeveryPresale() public ERC20Token("Zqir6DBAX9VV", "Zqir6DBAX9VV", 18) {\n', '        wallet = owner;\n', '    }\n', '    function setWallet(address _wallet) public onlyOwner {\n', '        // require(now <= START_DATE);\n', '        WalletUpdated(wallet, _wallet);\n', '        wallet = _wallet;\n', '    } \n', '    function setEthMinContribution(uint _ethMinContribution) public onlyOwner {\n', '        // require(now <= START_DATE);\n', '        EthMinContributionUpdated(ethMinContribution, _ethMinContribution);\n', '        ethMinContribution = _ethMinContribution;\n', '    } \n', '    function setUsdCap(uint _usdCap) public onlyOwner {\n', '        // require(now <= START_DATE);\n', '        UsdCapUpdated(usdCap, _usdCap);\n', '        usdCap = _usdCap;\n', '    } \n', '    function setUsdPerKEther(uint _usdPerKEther) public onlyOwner {\n', '        // require(now <= START_DATE);\n', '        UsdPerKEtherUpdated(usdPerKEther, _usdPerKEther);\n', '        usdPerKEther = _usdPerKEther;\n', '    }\n', '    function setWhitelist(address _whitelist) public onlyOwner {\n', '        // require(now <= START_DATE);\n', '        WhitelistUpdated(address(whitelist), _whitelist);\n', '        whitelist = DeveryPresaleWhitelist(_whitelist);\n', '    }\n', '    function setPICOPSCertifier(address _picopsCertifier) public onlyOwner {\n', '        // require(now <= START_DATE);\n', '        PICOPSCertifierUpdated(address(picopsCertifier), _picopsCertifier);\n', '        picopsCertifier = PICOPSCertifier(_picopsCertifier);\n', '    }\n', '    function addressCanContribute(address _addr) public view returns (bool) {\n', '        return whitelist.whitelist(_addr) > 0 || picopsCertifier.certified(_addr);\n', '    }\n', '    function ethCap() public view returns (uint) {\n', '        return usdCap * 10**uint(3 + 18) / usdPerKEther;\n', '    }\n', '    function closeSale() public onlyOwner {\n', '        require(!closed);\n', '        closed = true;\n', '        disableMinting();\n', '    }\n', '    function () public payable {\n', '        require(now >= START_DATE || (msg.sender == owner && msg.value == TEST_CONTRIBUTION));\n', '        require(!closed);\n', '        require(addressCanContribute(msg.sender));\n', '        require(msg.value >= ethMinContribution || (msg.sender == owner && msg.value == TEST_CONTRIBUTION));\n', '        uint ethAmount = msg.value;\n', '        uint ethRefund = 0;\n', '        if (contributedEth.add(ethAmount) > ethCap()) {\n', '            ethAmount = ethCap().sub(contributedEth);\n', '            ethRefund = msg.value.sub(ethAmount);\n', '        }\n', '        require(ethAmount > 0);\n', '        uint usdAmount = ethAmount * usdPerKEther / 10**uint(3 + 18);\n', '        contributedEth = contributedEth.add(ethAmount);\n', '        contributedUsd = contributedUsd.add(usdAmount);\n', '        mint(msg.sender, ethAmount);\n', '        wallet.transfer(ethAmount);\n', '        Contributed(msg.sender, ethAmount, ethRefund, usdAmount, contributedEth, contributedUsd);\n', '        if (ethRefund > 0) {\n', '            msg.sender.transfer(ethRefund);\n', '        }\n', '    }\n', '}']