['pragma solidity ^0.4.15;\n', '\n', 'contract Directory {\n', '    struct Entry {\n', '        string name;\n', '        string company;\n', '        string description;\n', '        string category;\n', '        string contact;\n', '        address ethAddress;\n', '        uint256 timestamp;\n', '        bool deprecated;\n', '    }\n', '\n', '    mapping(address => Entry) public directory;\n', '    Entry[] public entries;\n', '\n', '    address public owner;\n', '\n', '    function Directory() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier indexMatches(uint256 index, address ethAddress) {\n', '        require(entries[index].ethAddress == ethAddress);\n', '        _;\n', '    }\n', '\n', '    function transferOwner(address _owner) onlyOwner public returns (bool) {\n', '        owner = _owner;\n', '        return true;\n', '    }\n', '\n', '    function addEntry(string name, string company, string description, string category, string contact, address ethAddress) onlyOwner public returns (bool) {\n', '        require(directory[ethAddress].timestamp == 0);\n', '        var entry = Entry(name, company, description, category, contact, ethAddress, block.timestamp, false);\n', '        directory[ethAddress] = entry;\n', '        entries.push(entry);\n', '        return true;\n', '    }\n', '\n', '    function findCurrentIndex(address ethAddress) public constant returns (uint256) {\n', '        for (uint i = 0; i < entries.length; i++) {\n', '            if (entries[i].ethAddress == ethAddress) {\n', '                return i;\n', '            }\n', '        }\n', '        revert();\n', '    }\n', '\n', '    function removeEntry(address ethAddress) public returns (bool) {\n', '        return removeEntryManual(findCurrentIndex(ethAddress), ethAddress);\n', '    }\n', '\n', '    function removeEntryManual(uint256 index, address ethAddress) onlyOwner indexMatches(index, ethAddress) public returns (bool) {\n', '        uint256 lastIndex = entries.length - 1;\n', '        entries[index] = entries[lastIndex];\n', '        delete entries[lastIndex];\n', '        delete directory[ethAddress];\n', '        return true;\n', '    }\n', '\n', '    function modifyDescription(address ethAddress, string description) public returns (bool) {\n', '        return modifyDescriptionManual(findCurrentIndex(ethAddress), ethAddress, description);\n', '    }\n', '\n', '    function modifyDescriptionManual(uint256 index, address ethAddress, string description) onlyOwner indexMatches(index, ethAddress) public returns (bool) {\n', '        entries[index].description = description;\n', '        directory[ethAddress].description = description;\n', '        return true;\n', '    }\n', '\n', '    function modifyContact(address ethAddress, string contact) public returns (bool) {\n', '        return modifyDescriptionManual(findCurrentIndex(ethAddress), ethAddress, contact);\n', '    }\n', '\n', '    function modifyContactManual(uint256 index, address ethAddress, string contact) onlyOwner indexMatches(index, ethAddress) public returns (bool) {\n', '        entries[index].contact = contact;\n', '        directory[ethAddress].contact = contact;\n', '        return true;\n', '    }\n', '\n', '    function setDeprecated(address ethAddress, bool deprecated) public returns (bool) {\n', '        return setDeprecatedManual(findCurrentIndex(ethAddress), ethAddress, deprecated);\n', '    }\n', '\n', '    function setDeprecatedManual(uint256 index, address ethAddress, bool deprecated) onlyOwner indexMatches(index, ethAddress) public returns (bool) {\n', '        entries[index].deprecated = deprecated;\n', '        directory[ethAddress].deprecated = deprecated;\n', '        return true;\n', '    }\n', '\n', '    function getName(address _address) public constant returns (string) { return directory[_address].name; }\n', '    function getCompany(address _address) public constant returns (string) { return directory[_address].company; }\n', '    function getDescription(address _address) public constant returns (string) { return directory[_address].description; }\n', '    function getCategory(address _address) public constant returns (string) { return directory[_address].category; }\n', '    function getTimestamp(address _address) public constant returns (uint256) { return directory[_address].timestamp; }\n', '    function isDeprecated(address _address) public constant returns (bool) { return directory[_address].deprecated; }\n', '\n', '    function getNameHash(address _address) public constant returns (bytes32) { return keccak256(directory[_address].name); }\n', '    function getCompanyHash(address _address) public constant returns (bytes32) { return keccak256(directory[_address].company); }\n', '    function getDescriptionHash(address _address) public constant returns (bytes32) { return keccak256(directory[_address].description);}\n', '    function getCategoryHash(address _address) public constant returns (bytes32) { return keccak256(directory[_address].category); }\n', '}']