['pragma solidity ^0.4.10;\n', '\n', '\n', '// title Migration Agent interface\n', 'contract MigrationAgent {\n', '   function migrateFrom(address _from, uint256 _value);\n', '}\n', '\n', '// title preICO humansOnly networkToken (HON Token) - crowdfunding code for preICO humansOnly networkToken PreICO\n', 'contract HumansOnlyNetworkETHpreICO {\n', '    string public constant name = "preICO for HumansOnly.Network on ETH";\n', '    string public constant symbol = "HON";\n', '    uint8 public constant decimals = 18;  // 18 decimal places, the same as ETC/ETH.\n', '\n', '    uint256 public constant tokenCreationRate = 1000;\n', '    // The funding cap in weis.\n', '    uint256 public constant tokenCreationCap = 283000 ether * tokenCreationRate;\n', '    uint256 public constant tokenCreationMinConversion = 1 ether * tokenCreationRate;\n', '\tuint256 public constant tokenSEEDcap = 800 * 1 ether * tokenCreationRate;\n', '\tuint256 public constant tokenXstepCAP = tokenSEEDcap + 5000 * 1 ether * tokenCreationRate;\n', '\tuint256 public constant token18KstepCAP = tokenXstepCAP + 18000 * 1 ether * tokenCreationRate;\n', '\n', '  // weeks and hours in block distance on ETH\n', '   uint256 public constant oneweek = 36028;\n', '   uint256 public constant oneday = 5138;\n', '    uint256 public constant onehour = 218;\n', '\t\n', '    uint256 public fundingStartBlock = 4612439 + 2*onehour; \n', '\t//  weeks\n', '    uint256 public blackFridayEndBlock = fundingStartBlock + oneday + 8 * onehour;\n', '    uint256 public fundingEndBlock = fundingStartBlock + 6*oneweek;\n', '\t\n', '    // The flag indicates if the HON Token contract is in Funding state.\n', '    bool public funding = true;\n', '\tbool public refundstate = false;\n', '\tbool public migratestate = false;\n', '\t\n', '    // Receives ETH and its own HON Token endowment.\n', '    address public hon1ninja = 0x175750aE4fBdc906A3b2Fca69f6db6bbf6c92d39;\n', '\taddress public hon2backup =0xda075dd55826dDa29b5bf04efa399B052a1bCdbA;\n', '    // Has control over token migration to next version of token.\n', '    address public migrationMaster = 0x1cf026C3779d03c0AB8Be9E35912Bbe5F678Ff16;\n', '\n', '   \n', '    // The current total token supply.\n', '    uint256 totalTokens;\n', '\tuint256 bonusCreationRate;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => uint256) balancesRAW;\n', '\n', '\n', '   uint256 public totalMigrated;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Migrate(address indexed _from, address indexed _to, uint256 _value);\n', '    event Refund(address indexed _from, uint256 _value);\n', '\n', '    function HumansOnlyNetworkETHpreICO() {\n', '\n', '        if (hon1ninja == 0) throw;\n', '        if (migrationMaster == 0) throw;\n', '        if (fundingEndBlock   <= fundingStartBlock) throw;\n', '\n', '    }\n', '\n', "    // notice Transfer `_value` HON Token tokens from sender's account\n", '    // `msg.sender` to provided account address `_to`.\n', '    // notice This function is disabled during the funding.\n', '    // dev Required state: Operational\n', '    // param _to The address of the tokens recipient\n', '    // param _value The amount of token to be transferred\n', '    // return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool) {\n', '\n', '// freez till end of crowdfunding + 2  weeks\n', 'if ((msg.sender!=migrationMaster)&&(block.number < fundingEndBlock + 2*oneweek)) throw;\n', '\n', '        var senderBalance = balances[msg.sender];\n', '        if (senderBalance >= _value && _value > 0) {\n', '            senderBalance -= _value;\n', '            balances[msg.sender] = senderBalance;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function totalSupply() external constant returns (uint256) {\n', '        return totalTokens;\n', '    }\n', '\n', '    function balanceOf(address _owner) external constant returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '\tfunction() payable {\n', '    if(funding){\n', '   createHONtokens(msg.sender);\n', '   }\n', '}\n', '\n', '     // Crowdfunding:\n', '\n', '        function createHONtokens(address holder) payable {\n', '\n', '        if (!funding) throw;\n', '        if (block.number < fundingStartBlock) throw;\n', '        if (block.number > fundingEndBlock) throw;\n', '\n', '        // Do not allow creating 0 or more than the cap tokens.\n', '        if (msg.value == 0) throw;\n', '\t\t// check the maximum token creation cap\n', '        if (msg.value > (tokenCreationCap - totalTokens) / tokenCreationRate)\n', '          throw;\n', '\t\t\n', '\t\t//bonus structure\n', '\t\tbonusCreationRate = tokenCreationRate;\n', '\t\t// early birds bonuses :\n', '        if (totalTokens < tokenSEEDcap) bonusCreationRate = tokenCreationRate +800;\n', '\t\n', '\n', '\t\tif\t(totalTokens > tokenXstepCAP){bonusCreationRate = tokenCreationRate - 250;}// 750\n', '\t\tif\t(totalTokens > token18KstepCAP){bonusCreationRate = tokenCreationRate - 250;} //500\n', '\t\t\n', '\t//blackFriday bonuses\n', '\t// 1 block = 13.7-16.8 s\n', '\t\tif (block.number < blackFridayEndBlock){\n', '\t\tbonusCreationRate = bonusCreationRate * 3;\n', '\t\t}\n', '\t\t\n', '\n', '\t var numTokensRAW = msg.value * tokenCreationRate;\n', '\n', '        var numTokens = msg.value * bonusCreationRate;\n', '        totalTokens += numTokens;\n', '\n', '        // Assign new tokens to the sender\n', '        balances[holder] += numTokens;\n', '        balancesRAW[holder] += numTokensRAW;\n', '        // Log token creation event\n', '        Transfer(0, holder, numTokens);\n', '\t\t\n', '\t\t// Create additional HON Token for the community around 18%\n', '        uint256 percentOfTotal = 18;\n', '        uint256 additionalTokens = \tnumTokens * percentOfTotal / (100);\n', '\n', '        totalTokens += additionalTokens;\n', '\n', '        balances[migrationMaster] += additionalTokens;\n', '        Transfer(0, migrationMaster, additionalTokens);\n', '\t\n', '\t}\n', '\n', '    function Partial8Transfer() external {\n', '         hon1ninja.transfer(this.balance - 0.1 ether);\n', '    }\n', '\t\n', '    function Partial8Send() external {\n', '\t      if (msg.sender != hon1ninja) throw;\n', '        hon1ninja.send(this.balance - 1 ether);\n', '\t}\n', '\tfunction turnrefund() external {\n', '\t      if (msg.sender != hon1ninja) throw;\n', '\trefundstate=!refundstate;\n', '        }\n', '    function turnmigrate() external {\n', '\t      if (msg.sender != migrationMaster) throw;\n', '\tmigratestate=!migratestate;\n', '}\n', '\n', '    // notice Finalize crowdfunding clossing funding options\n', '\t\n', 'function finalize() external {\n', ' if ((msg.sender != migrationMaster)||(msg.sender != hon1ninja)||(msg.sender != hon2backup)) throw;\n', '      \n', '        // Switch to Operational state. This is the only place this can happen.\n', '        funding = false;\t\t\n', '        // Transfer ETH to the preICO humansOnly network ninja address.\n', '        if (!hon1ninja.send(this.balance)) throw;\n', '\t\t//biz dev tokens\n', '\t\tuint256 additionalTokens=tokenCreationCap-totalTokens;\n', '\t\ttotalTokens += additionalTokens;\n', '        balances[migrationMaster] += additionalTokens;\n', '        Transfer(0, migrationMaster, additionalTokens);\n', ' }\n', '\t\n', '\tfunction finalizebackup() external {\n', '       if (block.number <= fundingEndBlock+2*oneday) throw;\n', '        // Switch to Operational state. This is the only place this can happen.\n', '        funding = false;\t\t\n', '        // Transfer ETH to the preICO humansOnly network ninja address.\n', '        if (!hon2backup.send(this.balance)) throw;\n', '    }\n', '\t\n', '\t\n', '    function migrate(uint256 _value) external {\n', '        // Abort if not in Operational Migration state.\n', '        if (migratestate) throw;\n', '\n', '\n', '        // Validate input value.\n', '        if (_value == 0) throw;\n', '        if (_value > balances[msg.sender]) throw;\n', '\n', '        balances[msg.sender] -= _value;\n', '        totalTokens -= _value;\n', '        totalMigrated += _value;\n', '\n', '    }\n', '\t\n', 'function refundTRA() external {\n', '        // Abort if not in Funding Failure state.\n', '        if (!refundstate) throw;\n', '\n', '        var HONTokenValue = balances[msg.sender];\n', '        var HONTokenValueRAW = balancesRAW[msg.sender];\n', '        if (HONTokenValueRAW == 0) throw;\n', '        balancesRAW[msg.sender] = 0;\n', '        totalTokens -= HONTokenValue;\n', '        var ETHValue = HONTokenValueRAW / tokenCreationRate;\n', '        Refund(msg.sender, ETHValue);\n', '        msg.sender.transfer(ETHValue);\n', '}\n', '\n', 'function preICOregulations() external returns(string wow) {\n', "\treturn 'Regulations of ICO and preICO and usage of this smartcontract are present at website  humansOnly.network and by using this smartcontract you commit that you accept and will follow those rules';\n", '}\n', '}']