['pragma solidity ^0.4.18;\n', '// **-----------------------------------------------\n', '// MoyToken Open Distribution Smart Contract.\n', '// 30,000,000 tokens available via unique Open Distribution. \n', '// POWTokens Contract @ POWToken.eth\n', '// Open Dsitribution Opens at the 1st Block of 2018.\n', '// All operations can be monitored at etherscan.io\n', '\n', '// -----------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/issues/20\n', '// -------------------------------------------------\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract safeMath {\n', '  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    safeAssert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    safeAssert(b > 0);\n', '    uint256 c = a / b;\n', '    safeAssert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    safeAssert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    safeAssert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function safeAssert(bool assertion) internal pure {\n', '    if (!assertion) revert();\n', '  }\n', '}\n', '\n', 'contract StandardToken is owned, safeMath {\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract POWTokenOpenDistribution is owned, safeMath {\n', '  // owner/admin & token reward\n', '  address        public admin = owner;      //admin address\n', '  StandardToken  public tokenContract;     // address of MoibeTV MOY ERC20 Standard Token.\n', '\n', '  // deployment variables for static supply sale\n', '  uint256 public initialSupply;\n', '  uint256 public tokensRemaining;\n', '\n', '  // multi-sig addresses and price variable\n', '  address public budgetWallet;      // budgetMultiSig for PowerLineUp.\n', '  uint256 public tokensPerEthPrice;      // set initial value floating priceVar.\n', '    \n', '  // uint256 values for min,max,caps,tracking\n', '  uint256 public amountRaised;                           \n', '  uint256 public fundingCap;                          \n', '\n', '  // loop control, startup and limiters\n', '  string  public CurrentStatus = "";                          // current OpenDistribution status\n', '  uint256 public fundingStartBlock;                           // OpenDistribution start block#\n', '  uint256 public fundingEndBlock;                             // OpenDistribution end block#\n', '  bool    public isOpenDistributionClosed = false;            // OpenDistribution completion boolean\n', '  bool    public areFundsReleasedToBudget= false;             // boolean for MoibeTV to receive Eth or not, this allows MoibeTV to use Ether only if goal reached.\n', '  bool    public isOpenDistributionSetup = false;             // boolean for OpenDistribution setup\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value); \n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Buy(address indexed _sender, uint256 _eth, uint256 _MOY);\n', '  mapping(address => uint256) balancesArray;\n', '  mapping(address => uint256) fundValue;\n', '\n', '  // default function, map admin\n', '  function POWTokenOpenDistribution() public onlyOwner {\n', '    admin = msg.sender;\n', '    CurrentStatus = "Tokens Released, Open Distribution deployed to chain";\n', '  }\n', '\n', '  // total number of tokens initially\n', '  function initialMoySupply() public constant returns (uint256 tokenTotalSupply) {\n', '      tokenTotalSupply = safeDiv(initialSupply,1000000000000000000);\n', '  }\n', '\n', '  // remaining number of tokens\n', '  function remainingSupply() public constant returns (uint256 tokensLeft) {\n', '      tokensLeft = tokensRemaining;\n', '  }\n', '\n', '  // setup the OpenDistribution parameters\n', '  function setupOpenDistribution(uint256 _fundingStartBlock, uint256 _fundingEndBlock, address _tokenContract, address _budgetWallet) public onlyOwner returns (bytes32 response) {\n', '      if ((msg.sender == admin)\n', '      && (!(isOpenDistributionSetup))\n', '      && (!(budgetWallet > 0))){\n', '          // init addresses\n', '          tokenContract = StandardToken(_tokenContract);                             //MoibeTV MOY tokens Smart Contract.\n', '          budgetWallet = _budgetWallet;                 //Budget multisig.\n', '          tokensPerEthPrice = 1000;                                                  //Regular Price 1 ETH = 1000 MOY.\n', '          \n', '          fundingCap = 3;                                        \n', '\n', '          // update values\n', '          amountRaised = 0;\n', '          initialSupply = 30000000;                                      \n', '          tokensRemaining = safeDiv(initialSupply,1);\n', '\n', '          fundingStartBlock = _fundingStartBlock;\n', '          fundingEndBlock = _fundingEndBlock;\n', '\n', '          // configure OpenDistribution\n', '          isOpenDistributionSetup = true;\n', '          isOpenDistributionClosed = false;\n', '          CurrentStatus = "OpenDistribution is setup";\n', '\n', '          //gas reduction experiment\n', '          setPrice();\n', '          return "OpenDistribution is setup";\n', '      } else if (msg.sender != admin) {\n', '          return "Not Authorized";\n', '      } else  {\n', '          return "Campaign cannot be changed.";\n', '      }\n', '    }\n', '\n', '    function setPrice() public {  //Verificar si es necesario que sea pÃºblica. \n', '\n', '      //Funding Starts at the 1st Block of the Year. The very 1st block of the year is 4830771 UTC+14(Christmas Islands).      \n', '      //After that, all the CrowdSale is measured in UTC-11(Fiji), to give chance until the very last block of each day.    \n', '        if (block.number >= fundingStartBlock && block.number <= fundingStartBlock+11520) { // First Day 300% Bonus, 1 ETH = 3000 MOY.\n', '        tokensPerEthPrice = 3000; \n', '      } else if (block.number >= fundingStartBlock+11521 && block.number <= fundingStartBlock+46080) { // First Week 200% Bonus, 1 ETH = 2000 MOY.\n', '        tokensPerEthPrice = 2000; //Regular Price for All Stages.\n', '      } else if (block.number >= fundingStartBlock+46081 && block.number <= fundingStartBlock+86400) { // Second Week 150% Bonus, 1 ETH = 1500 MOY.\n', '        tokensPerEthPrice = 2000; //Regular Price for All Stages.\n', '      } else if (block.number >= fundingStartBlock+86401 && block.number <= fundingEndBlock) { // Regular Sale, final price for all users 1 ETH = 1000 MOY. \n', '        tokensPerEthPrice = 1000; //Regular Price for All Stages.\n', '      }  \n', '         }\n', '\n', '    // default payable function when sending ether to this contract\n', '    function () public payable {\n', '      require(msg.data.length == 0);\n', '      BuyMOYTokens();\n', '    }\n', '\n', '    function BuyMOYTokens() public payable {\n', '      // 0. conditions (length, OpenDistribution setup, zero check, exceed funding contrib check, contract valid check, within funding block range check, balance overflow check etc.)\n', '      require(!(msg.value == 0)\n', '      && (isOpenDistributionSetup)\n', '      && (block.number >= fundingStartBlock)\n', '      && (block.number <= fundingEndBlock)\n', '      && (tokensRemaining > 0));\n', '\n', '      // 1. vars\n', '      uint256 rewardTransferAmount = 0;\n', '\n', '      // 2. effects\n', '      setPrice();\n', '      amountRaised = safeAdd(amountRaised,msg.value);\n', '      rewardTransferAmount = safeDiv(safeMul(msg.value,tokensPerEthPrice),1);\n', '\n', '      // 3. interaction\n', '      tokensRemaining = safeSub(tokensRemaining, safeDiv(rewardTransferAmount,1));  // will cause throw if attempt to purchase over the token limit in one tx or at all once limit reached.\n', '      tokenContract.transfer(msg.sender, rewardTransferAmount);\n', '\n', '      // 4. events\n', '      fundValue[msg.sender] = safeAdd(fundValue[msg.sender], msg.value);\n', '      Transfer(this, msg.sender, msg.value); \n', '      Buy(msg.sender, msg.value, rewardTransferAmount);\n', '    }\n', '\n', '    function budgetMultiSigWithdraw(uint256 _amount) public onlyOwner {\n', '      require(areFundsReleasedToBudget && (amountRaised >= fundingCap));\n', '      budgetWallet.transfer(_amount);\n', '    }\n', '\n', '    function checkGoalReached() public onlyOwner returns (bytes32 response) { // return OpenDistribution status to owner for each result case, update public constant.\n', '      // update state & status variables\n', '      require (isOpenDistributionSetup);\n', '      if ((amountRaised < fundingCap) && (block.number <= fundingEndBlock && block.number >= fundingStartBlock)) { // OpenDistribution in progress waiting for hardcap.\n', '        areFundsReleasedToBudget = false;\n', '        isOpenDistributionClosed = false;\n', '        CurrentStatus = "OpenDistribution in progress, waiting to reach goal.";\n', '        return "OpenDistribution in progress.";\n', '      } else if ((amountRaised < fundingCap) && (block.number < fundingStartBlock)) { // OpenDistribution has not started.\n', '        areFundsReleasedToBudget = false;\n', '        isOpenDistributionClosed = false;\n', '        CurrentStatus = "OpenDistribution is setup";\n', '        return "OpenDistribution is setup";\n', '      } else if ((amountRaised < fundingCap) && (block.number > fundingEndBlock)) { // OpenDistribution ended, total not achieved.\n', '        areFundsReleasedToBudget = false;\n', '        isOpenDistributionClosed = true;\n', '        CurrentStatus = "OpenDistribution is Over.";\n', '        return "OpenDistribution is Over";\n', '      } else if ((amountRaised >= fundingCap) && (tokensRemaining == 0)) { // Distribution ended, all tokens gone.\n', '          areFundsReleasedToBudget = true;\n', '          isOpenDistributionClosed = true;\n', '          CurrentStatus = "Successful OpenDistribution.";\n', '          return "Successful OpenDistribution.";\n', '      } else if ((amountRaised >= fundingCap) && (block.number > fundingEndBlock) && (tokensRemaining > 0)) { // OpenDistribution ended.\n', '          areFundsReleasedToBudget = true;\n', '          isOpenDistributionClosed = true;\n', '          CurrentStatus = "Successful OpenDistribution.";\n', '          return "Successful OpenDistribution";\n', '      } else if ((amountRaised >= fundingCap) && (tokensRemaining > 0) && (block.number <= fundingEndBlock)) { // OpenDistribution in progress, objetive achieved!\n', '        areFundsReleasedToBudget = true;\n', '        isOpenDistributionClosed = false;\n', '        CurrentStatus = "OpenDistribution in Progress, Goal Achieved.";\n', '        return "Goal Achieved.";\n', '      }\n', '      setPrice();\n', '    }\n', '}']