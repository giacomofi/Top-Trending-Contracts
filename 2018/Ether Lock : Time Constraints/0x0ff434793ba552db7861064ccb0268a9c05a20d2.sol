['pragma solidity ^0.4.25;\n', '/**\n', '*\n', '* ETH CRYPTOCURRENCY DISTRIBUTION PROJECT\n', '* Web              - https://doeth.io/\n', '* Twitter          - https://twitter.com/eth_do\n', '* Telegram_channel - https://t.me/joinchat/JnIiXhAlqjy-7FYaMRso1g\n', '*\n', '*  - GAIN 4% PER 24 HOURS (every 5900 blocks)\n', '*  - Life-long payments\n', '*  - The revolutionary reliability\n', '*  - Minimal contribution 0.01 eth\n', '*  - Currency and payment - ETH\n', '*  - Contribution allocation schemes:\n', '*    -- 85% payments\n', '*    -- 15% Marketing + Operating Expenses\n', '*\n', '*   ---About the Project\n', '*  Blockchain-enabled smart contracts have opened a new era of trustless relationships without\n', '*  intermediaries. This technology opens incredible financial possibilities. Our automated investment\n', '*  distribution model is written into a smart contract, uploaded to the Ethereum blockchain and can be\n', '*  freely accessed online. In order to insure our investors&#39; complete security, full control over the\n', '*  project has been transferred from the organizers to the smart contract: nobody can influence the\n', '*  system&#39;s permanent autonomous functioning.\n', '*\n', '* ---How to use:\n', '*  1. Send from ETH wallet to the smart contract address 0x0ff434793ba552db7861064ccb0268a9c05a20d2\n', '*     any amount from 0.01 ETH.\n', '*  2. Verify your transaction in the history of your application or etherscan.io, specifying the address\n', '*     of your wallet.\n', '*  3a. Claim your profit by sending 0 ether transaction (every day, every week, i don&#39;t care unless you&#39;re\n', '*      spending too much on GAS)\n', '*  OR\n', '*  3b. For reinvest, you need to first remove the accumulated percentage of charges (by sending 0 ether\n', '*      transaction), and only after that, deposit the amount that you want to reinvest.\n', '* \n', '* RECOMMENDED GAS LIMIT: 200000\n', '* RECOMMENDED GAS PRICE: https://ethgasstation.info/\n', '* You can check the payments on the etherscan.io site, in the "Internal Txns" tab of your wallet.\n', '*\n', '* ---It is not allowed to transfer from exchanges, only from your personal ETH wallet, for which you\n', '* have private keys.\n', '*\n', '* Contracts reviewed and approved by pros!\n', '*\n', '* Main contract - DOETH.\n', '*/\n', 'library SafeMath {\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    return _a / _b;\n', '  }\n', '\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract DOETH {\n', '    using SafeMath for uint256;\n', '\n', '    address public constant marketingAddress = 0x2dB7088799a5594A152c8dCf05976508e4EaA3E4;\n', '\n', '    mapping (address => uint256) deposited;\n', '    mapping (address => uint256) withdrew;\n', '    mapping (address => uint256) refearned;\n', '    mapping (address => uint256) blocklock;\n', '\n', '    uint256 public totalDepositedWei = 0;\n', '    uint256 public totalWithdrewWei = 0;\n', '\n', '    function() payable external\n', '    {\n', '        uint256 marketingPerc = msg.value.mul(15).div(100);\n', '\n', '        marketingAddress.transfer(marketingPerc);\n', '        \n', '        if (deposited[msg.sender] != 0)\n', '        {\n', '            address investor = msg.sender;\n', '            uint256 depositsPercents = deposited[msg.sender].mul(4).div(100).mul(block.number-blocklock[msg.sender]).div(5900);\n', '            investor.transfer(depositsPercents);\n', '\n', '            withdrew[msg.sender] += depositsPercents;\n', '            totalWithdrewWei = totalWithdrewWei.add(depositsPercents);\n', '        }\n', '\n', '        address referrer = bytesToAddress(msg.data);\n', '        uint256 refPerc = msg.value.mul(4).div(100);\n', '        \n', '        if (referrer > 0x0 && referrer != msg.sender)\n', '        {\n', '            referrer.transfer(refPerc);\n', '\n', '            refearned[referrer] += refPerc;\n', '        }\n', '\n', '        blocklock[msg.sender] = block.number;\n', '        deposited[msg.sender] += msg.value;\n', '\n', '        totalDepositedWei = totalDepositedWei.add(msg.value);\n', '    }\n', '\n', '    function userDepositedWei(address _address) public view returns (uint256)\n', '    {\n', '        return deposited[_address];\n', '    }\n', '\n', '    function userWithdrewWei(address _address) public view returns (uint256)\n', '    {\n', '        return withdrew[_address];\n', '    }\n', '\n', '    function userDividendsWei(address _address) public view returns (uint256)\n', '    {\n', '        return deposited[_address].mul(4).div(100).mul(block.number-blocklock[_address]).div(5900);\n', '    }\n', '\n', '    function userReferralsWei(address _address) public view returns (uint256)\n', '    {\n', '        return refearned[_address];\n', '    }\n', '\n', '    function bytesToAddress(bytes bys) private pure returns (address addr)\n', '    {\n', '        assembly {\n', '            addr := mload(add(bys, 20))\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.25;\n', '/**\n', '*\n', '* ETH CRYPTOCURRENCY DISTRIBUTION PROJECT\n', '* Web              - https://doeth.io/\n', '* Twitter          - https://twitter.com/eth_do\n', '* Telegram_channel - https://t.me/joinchat/JnIiXhAlqjy-7FYaMRso1g\n', '*\n', '*  - GAIN 4% PER 24 HOURS (every 5900 blocks)\n', '*  - Life-long payments\n', '*  - The revolutionary reliability\n', '*  - Minimal contribution 0.01 eth\n', '*  - Currency and payment - ETH\n', '*  - Contribution allocation schemes:\n', '*    -- 85% payments\n', '*    -- 15% Marketing + Operating Expenses\n', '*\n', '*   ---About the Project\n', '*  Blockchain-enabled smart contracts have opened a new era of trustless relationships without\n', '*  intermediaries. This technology opens incredible financial possibilities. Our automated investment\n', '*  distribution model is written into a smart contract, uploaded to the Ethereum blockchain and can be\n', "*  freely accessed online. In order to insure our investors' complete security, full control over the\n", '*  project has been transferred from the organizers to the smart contract: nobody can influence the\n', "*  system's permanent autonomous functioning.\n", '*\n', '* ---How to use:\n', '*  1. Send from ETH wallet to the smart contract address 0x0ff434793ba552db7861064ccb0268a9c05a20d2\n', '*     any amount from 0.01 ETH.\n', '*  2. Verify your transaction in the history of your application or etherscan.io, specifying the address\n', '*     of your wallet.\n', "*  3a. Claim your profit by sending 0 ether transaction (every day, every week, i don't care unless you're\n", '*      spending too much on GAS)\n', '*  OR\n', '*  3b. For reinvest, you need to first remove the accumulated percentage of charges (by sending 0 ether\n', '*      transaction), and only after that, deposit the amount that you want to reinvest.\n', '* \n', '* RECOMMENDED GAS LIMIT: 200000\n', '* RECOMMENDED GAS PRICE: https://ethgasstation.info/\n', '* You can check the payments on the etherscan.io site, in the "Internal Txns" tab of your wallet.\n', '*\n', '* ---It is not allowed to transfer from exchanges, only from your personal ETH wallet, for which you\n', '* have private keys.\n', '*\n', '* Contracts reviewed and approved by pros!\n', '*\n', '* Main contract - DOETH.\n', '*/\n', 'library SafeMath {\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    return _a / _b;\n', '  }\n', '\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract DOETH {\n', '    using SafeMath for uint256;\n', '\n', '    address public constant marketingAddress = 0x2dB7088799a5594A152c8dCf05976508e4EaA3E4;\n', '\n', '    mapping (address => uint256) deposited;\n', '    mapping (address => uint256) withdrew;\n', '    mapping (address => uint256) refearned;\n', '    mapping (address => uint256) blocklock;\n', '\n', '    uint256 public totalDepositedWei = 0;\n', '    uint256 public totalWithdrewWei = 0;\n', '\n', '    function() payable external\n', '    {\n', '        uint256 marketingPerc = msg.value.mul(15).div(100);\n', '\n', '        marketingAddress.transfer(marketingPerc);\n', '        \n', '        if (deposited[msg.sender] != 0)\n', '        {\n', '            address investor = msg.sender;\n', '            uint256 depositsPercents = deposited[msg.sender].mul(4).div(100).mul(block.number-blocklock[msg.sender]).div(5900);\n', '            investor.transfer(depositsPercents);\n', '\n', '            withdrew[msg.sender] += depositsPercents;\n', '            totalWithdrewWei = totalWithdrewWei.add(depositsPercents);\n', '        }\n', '\n', '        address referrer = bytesToAddress(msg.data);\n', '        uint256 refPerc = msg.value.mul(4).div(100);\n', '        \n', '        if (referrer > 0x0 && referrer != msg.sender)\n', '        {\n', '            referrer.transfer(refPerc);\n', '\n', '            refearned[referrer] += refPerc;\n', '        }\n', '\n', '        blocklock[msg.sender] = block.number;\n', '        deposited[msg.sender] += msg.value;\n', '\n', '        totalDepositedWei = totalDepositedWei.add(msg.value);\n', '    }\n', '\n', '    function userDepositedWei(address _address) public view returns (uint256)\n', '    {\n', '        return deposited[_address];\n', '    }\n', '\n', '    function userWithdrewWei(address _address) public view returns (uint256)\n', '    {\n', '        return withdrew[_address];\n', '    }\n', '\n', '    function userDividendsWei(address _address) public view returns (uint256)\n', '    {\n', '        return deposited[_address].mul(4).div(100).mul(block.number-blocklock[_address]).div(5900);\n', '    }\n', '\n', '    function userReferralsWei(address _address) public view returns (uint256)\n', '    {\n', '        return refearned[_address];\n', '    }\n', '\n', '    function bytesToAddress(bytes bys) private pure returns (address addr)\n', '    {\n', '        assembly {\n', '            addr := mload(add(bys, 20))\n', '        }\n', '    }\n', '}']
