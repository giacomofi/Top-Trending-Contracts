['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // Gas optimization: this is cheaper than requiring &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = _a * _b;\n', '    require(c / _a == _b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = _a / _b;\n', '    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn&#39;t hold\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b <= _a);\n', '    uint256 c = _a - _b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    uint256 c = _a + _b;\n', '    require(c >= _a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title SplitPayment\n', ' * @dev Base contract that supports multiple payees claiming funds sent to this contract\n', ' * according to the proportion they own.\n', ' */\n', 'contract SplitPayment {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public totalShares = 0;\n', '  uint256 public totalReleased = 0;\n', '\n', '  mapping(address => uint256) public shares;\n', '  mapping(address => uint256) public released;\n', '  address[] public payees;\n', '\n', '  /**\n', '   * @dev Constructor\n', '   */\n', '  constructor(address[] _payees, uint256[] _shares) public payable {\n', '    require(_payees.length == _shares.length);\n', '    require(_payees.length > 0);\n', '\n', '    for (uint256 i = 0; i < _payees.length; i++) {\n', '      addPayee(_payees[i], _shares[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev payable fallback\n', '   */\n', '  function () external payable {}\n', '\n', '  /**\n', '   * @dev Claim your share of the balance.\n', '   */\n', '  function claim() public {\n', '    address payee = msg.sender;\n', '\n', '    require(shares[payee] > 0);\n', '\n', '    uint256 totalReceived = address(this).balance.add(totalReleased);\n', '    uint256 payment = totalReceived.mul(\n', '      shares[payee]).div(\n', '        totalShares).sub(\n', '          released[payee]\n', '    );\n', '\n', '    require(payment != 0);\n', '    assert(address(this).balance >= payment);\n', '\n', '    released[payee] = released[payee].add(payment);\n', '    totalReleased = totalReleased.add(payment);\n', '\n', '    payee.transfer(payment);\n', '  }\n', '\n', '  /**\n', '   * @dev Add a new payee to the contract.\n', '   * @param _payee The address of the payee to add.\n', '   * @param _shares The number of shares owned by the payee.\n', '   */\n', '  function addPayee(address _payee, uint256 _shares) internal {\n', '    require(_payee != address(0));\n', '    require(_shares > 0);\n', '    require(shares[_payee] == 0);\n', '\n', '    payees.push(_payee);\n', '    shares[_payee] = _shares;\n', '    totalShares = totalShares.add(_shares);\n', '  }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = _a * _b;\n', '    require(c / _a == _b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b <= _a);\n', '    uint256 c = _a - _b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    uint256 c = _a + _b;\n', '    require(c >= _a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title SplitPayment\n', ' * @dev Base contract that supports multiple payees claiming funds sent to this contract\n', ' * according to the proportion they own.\n', ' */\n', 'contract SplitPayment {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public totalShares = 0;\n', '  uint256 public totalReleased = 0;\n', '\n', '  mapping(address => uint256) public shares;\n', '  mapping(address => uint256) public released;\n', '  address[] public payees;\n', '\n', '  /**\n', '   * @dev Constructor\n', '   */\n', '  constructor(address[] _payees, uint256[] _shares) public payable {\n', '    require(_payees.length == _shares.length);\n', '    require(_payees.length > 0);\n', '\n', '    for (uint256 i = 0; i < _payees.length; i++) {\n', '      addPayee(_payees[i], _shares[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev payable fallback\n', '   */\n', '  function () external payable {}\n', '\n', '  /**\n', '   * @dev Claim your share of the balance.\n', '   */\n', '  function claim() public {\n', '    address payee = msg.sender;\n', '\n', '    require(shares[payee] > 0);\n', '\n', '    uint256 totalReceived = address(this).balance.add(totalReleased);\n', '    uint256 payment = totalReceived.mul(\n', '      shares[payee]).div(\n', '        totalShares).sub(\n', '          released[payee]\n', '    );\n', '\n', '    require(payment != 0);\n', '    assert(address(this).balance >= payment);\n', '\n', '    released[payee] = released[payee].add(payment);\n', '    totalReleased = totalReleased.add(payment);\n', '\n', '    payee.transfer(payment);\n', '  }\n', '\n', '  /**\n', '   * @dev Add a new payee to the contract.\n', '   * @param _payee The address of the payee to add.\n', '   * @param _shares The number of shares owned by the payee.\n', '   */\n', '  function addPayee(address _payee, uint256 _shares) internal {\n', '    require(_payee != address(0));\n', '    require(_shares > 0);\n', '    require(shares[_payee] == 0);\n', '\n', '    payees.push(_payee);\n', '    shares[_payee] = _shares;\n', '    totalShares = totalShares.add(_shares);\n', '  }\n', '}']
