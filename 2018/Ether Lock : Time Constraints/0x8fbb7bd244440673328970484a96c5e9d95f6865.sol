['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', 'Mockup object \n', '*/\n', 'contract ElementhToken {\n', '    \n', '  bool public mintingFinished = false;\n', '    function mint(address _to, uint256 _amount) public returns (bool) {\n', '    if(_to != address(0)) mintingFinished = false;\n', '    if(_amount != 0) mintingFinished = false;\n', '    return true;\n', '    }\n', '\n', '    function burn(address _to, uint256 _amount) public returns (bool) {\n', '    if(_to != address(0)) mintingFinished = false;\n', '    if(_amount != 0) mintingFinished = false;\n', '    return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    mapping(address => bool)  internal owners;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public{\n', '        owners[msg.sender] = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owners[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '    function addOwner(address newAllowed) onlyOwner public {\n', '        owners[newAllowed] = true;\n', '    }\n', '\n', '    function removeOwner(address toRemove) onlyOwner public {\n', '        owners[toRemove] = false;\n', '    }\n', '\n', '    function isOwner() public view returns(bool){\n', '        return owners[msg.sender] == true;\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive. The contract requires a MintableToken that will be\n', ' * minted as contributions arrive, note that the crowdsale contract\n', ' * must be owner of the token in order to be able to mint it.\n', ' */\n', 'contract PreFund is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  mapping (address => uint256) public deposited;\n', '  mapping (address => uint256) public claimed;\n', '\n', '  // The token being sold\n', '  ElementhToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '  event AddDeposit(address indexed beneficiary, uint256 value);\n', '  event LogClaim(address indexed holder, uint256 amount);\n', '\n', '  function setStartTime(uint256 _startTime) public onlyOwner{\n', '    startTime = _startTime;\n', '  }\n', '\n', '  function setEndTime(uint256 _endTime) public onlyOwner{\n', '    endTime = _endTime;\n', '  }\n', '\n', '  function setWallet(address _wallet) public onlyOwner{\n', '    wallet = _wallet;\n', '  }\n', '\n', '  function setRate(uint256 _rate) public onlyOwner{\n', '    rate = _rate;\n', '  }\n', '\n', '\n', '  function PreFund(uint256 _startTime, uint256 _endTime, address _wallet, ElementhToken _token) public {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    token = _token;\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  function () external payable {\n', '    deposit(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function deposit(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    deposited[beneficiary] = deposited[beneficiary].add(msg.value);\n', '\n', '    uint256 weiAmount = msg.value;\n', '    AddDeposit(beneficiary, weiAmount);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '\n', '  // send ether to the fund collection wallet\n', '  function forwardFunds() onlyOwner public {\n', '    require(now >= endTime);\n', '    wallet.transfer(this.balance);\n', '  }\n', '\n', '  function claimToken () public {\n', '    require (msg.sender != address(0));\n', '    require (now >= endTime);\n', '    require (deposited[msg.sender] != 0);\n', '    \n', '    uint tokens = deposited[msg.sender] * rate;\n', '\n', '    token.mint(msg.sender, tokens);\n', '    deposited[msg.sender] = 0;\n', '    claimed[msg.sender] = tokens;\n', '\n', '    LogClaim(msg.sender, tokens);\n', '  }\n', '  \n', '\n', '  function refundWallet(address _wallet) onlyOwner public {\n', '    refundFunds(_wallet);\n', '  }\n', '\n', '  function claimRefund() public {\n', '  \trequire(now <= endTime);\n', '    refundFunds(msg.sender);\n', '  }\n', '\n', '  function refundFunds(address _wallet) internal {\n', '    require(_wallet != address(0));\n', '    require(deposited[_wallet] != 0);\n', '    uint256 depositedValue = deposited[_wallet];\n', '    deposited[_wallet] = 0;\n', '    _wallet.transfer(depositedValue);\n', '    if(claimed[_wallet] != 0){\n', '    \ttoken.burn(_wallet, claimed[_wallet]);\n', '    \tclaimed[_wallet] = 0;\n', '    }\n', '    Refunded(_wallet, depositedValue);\n', '  }\n', '\n', '}']