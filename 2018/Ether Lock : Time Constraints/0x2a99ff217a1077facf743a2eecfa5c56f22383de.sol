['pragma solidity ^0.4.16;\n', '\n', 'interface token {\n', '    function transfer(address receiver, uint amount);\n', '}\n', '\n', 'contract Crowdsale {\n', '    uint public createdTimestamp; uint public start; uint public deadline;\n', '    address public beneficiary;\n', '    uint public amountRaised;\n', '    mapping(address => uint256) public balanceOf;\n', '    bool crowdsaleClosed = false;\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '    /**\n', '     * Constructor function\n', '     *\n', '     * Setup the owner\n', '     */\n', '    function Crowdsale(\n', '    ) {\n', '        createdTimestamp = block.timestamp;\n', '        start = 1526292000;//createdTimestamp + 0 * 1 days + 30 * 1 minutes;\n', '        deadline = 1529143200;//;createdTimestamp + 1 * 1 days + 0 * 1 minutes;\n', '        amountRaised=0;\n', '        beneficiary = 0xDfD0500541c6F14eb9eD2A6e61BB63bc78693925;\n', '    }\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function () payable {\n', '        require(block.timestamp >= start && block.timestamp <= deadline && amountRaised<(6000 ether) );\n', '\n', '        uint amount = msg.value;\n', '        balanceOf[msg.sender] += amount;\n', '        amountRaised += amount;\n', '        FundTransfer(msg.sender, amount, true);\n', '        if (beneficiary.send(amount)) {\n', '            FundTransfer(beneficiary, amount, false);\n', '        }\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.16;\n', '\n', 'interface token {\n', '    function transfer(address receiver, uint amount);\n', '}\n', '\n', 'contract Crowdsale {\n', '    uint public createdTimestamp; uint public start; uint public deadline;\n', '    address public beneficiary;\n', '    uint public amountRaised;\n', '    mapping(address => uint256) public balanceOf;\n', '    bool crowdsaleClosed = false;\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '    /**\n', '     * Constructor function\n', '     *\n', '     * Setup the owner\n', '     */\n', '    function Crowdsale(\n', '    ) {\n', '        createdTimestamp = block.timestamp;\n', '        start = 1526292000;//createdTimestamp + 0 * 1 days + 30 * 1 minutes;\n', '        deadline = 1529143200;//;createdTimestamp + 1 * 1 days + 0 * 1 minutes;\n', '        amountRaised=0;\n', '        beneficiary = 0xDfD0500541c6F14eb9eD2A6e61BB63bc78693925;\n', '    }\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function () payable {\n', '        require(block.timestamp >= start && block.timestamp <= deadline && amountRaised<(6000 ether) );\n', '\n', '        uint amount = msg.value;\n', '        balanceOf[msg.sender] += amount;\n', '        amountRaised += amount;\n', '        FundTransfer(msg.sender, amount, true);\n', '        if (beneficiary.send(amount)) {\n', '            FundTransfer(beneficiary, amount, false);\n', '        }\n', '    }\n', '\n', '}']
