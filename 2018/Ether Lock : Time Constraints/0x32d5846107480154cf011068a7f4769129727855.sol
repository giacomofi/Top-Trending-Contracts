['pragma solidity ^0.4.15;\n', '\n', 'library DateTime {\n', '        /*\n', '         *  Date and Time utilities for ethereum contracts\n', '         *\n', '         */\n', '        struct _DateTime {\n', '                uint16 year;\n', '                uint8 month;\n', '                uint8 day;\n', '                uint8 hour;\n', '                uint8 minute;\n', '                uint8 second;\n', '                uint8 weekday;\n', '        }\n', '\n', '        uint private constant DAY_IN_SECONDS = 86400;\n', '        uint private constant YEAR_IN_SECONDS = 31536000;\n', '        uint private constant LEAP_YEAR_IN_SECONDS = 31622400;\n', '\n', '        uint private constant HOUR_IN_SECONDS = 3600;\n', '        uint private constant MINUTE_IN_SECONDS = 60;\n', '\n', '        uint16 private constant ORIGIN_YEAR = 1970;\n', '\n', '        function isLeapYear(uint16 year) public constant returns (bool) {\n', '                if (year % 4 != 0) {\n', '                        return false;\n', '                }\n', '                if (year % 100 != 0) {\n', '                        return true;\n', '                }\n', '                if (year % 400 != 0) {\n', '                        return false;\n', '                }\n', '                return true;\n', '        }\n', '\n', '        function leapYearsBefore(uint year) public constant  returns (uint) {\n', '                year -= 1;\n', '                return year / 4 - year / 100 + year / 400;\n', '        }\n', '\n', '        function getDaysInMonth(uint8 month, uint16 year) public constant  returns (uint8) {\n', '                if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n', '                        return 31;\n', '                }\n', '                else if (month == 4 || month == 6 || month == 9 || month == 11) {\n', '                        return 30;\n', '                }\n', '                else if (isLeapYear(year)) {\n', '                        return 29;\n', '                }\n', '                else {\n', '                        return 28;\n', '                }\n', '        }\n', '\n', '        function parseTimestamp(uint timestamp) internal constant returns (_DateTime dt) {\n', '                uint secondsAccountedFor = 0;\n', '                uint buf;\n', '                uint8 i;\n', '\n', '                // Year\n', '                dt.year = getYear(timestamp);\n', '                buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\n', '\n', '                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\n', '                secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\n', '\n', '                // Month\n', '                uint secondsInMonth;\n', '                for (i = 1; i <= 12; i++) {\n', '                        secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\n', '                        if (secondsInMonth + secondsAccountedFor > timestamp) {\n', '                                dt.month = i;\n', '                                break;\n', '                        }\n', '                        secondsAccountedFor += secondsInMonth;\n', '                }\n', '\n', '                // Day\n', '                for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\n', '                        if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\n', '                                dt.day = i;\n', '                                break;\n', '                        }\n', '                        secondsAccountedFor += DAY_IN_SECONDS;\n', '                }\n', '\n', '                // Hour\n', '                dt.hour = getHour(timestamp);\n', '\n', '                // Minute\n', '                dt.minute = getMinute(timestamp);\n', '\n', '                // Second\n', '                dt.second = getSecond(timestamp);\n', '\n', '                // Day of week.\n', '                dt.weekday = getWeekday(timestamp);\n', '        }\n', '\n', '        function getYear(uint timestamp) public constant returns (uint16) {\n', '                uint secondsAccountedFor = 0;\n', '                uint16 year;\n', '                uint numLeapYears;\n', '\n', '                // Year\n', '                year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\n', '                numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\n', '\n', '                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\n', '                secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\n', '\n', '                while (secondsAccountedFor > timestamp) {\n', '                        if (isLeapYear(uint16(year - 1))) {\n', '                                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\n', '                        }\n', '                        else {\n', '                                secondsAccountedFor -= YEAR_IN_SECONDS;\n', '                        }\n', '                        year -= 1;\n', '                }\n', '                return year;\n', '        }\n', '\n', '        function getMonth(uint timestamp) public constant returns (uint8) {\n', '                return parseTimestamp(timestamp).month;\n', '        }\n', '\n', '        function getDay(uint timestamp) public constant returns (uint8) {\n', '                return parseTimestamp(timestamp).day;\n', '        }\n', '\n', '        function getHour(uint timestamp) public constant returns (uint8) {\n', '                return uint8((timestamp / 60 / 60) % 24);\n', '        }\n', '\n', '        function getMinute(uint timestamp) public constant returns (uint8) {\n', '                return uint8((timestamp / 60) % 60);\n', '        }\n', '\n', '        function getSecond(uint timestamp) public constant returns (uint8) {\n', '                return uint8(timestamp % 60);\n', '        }\n', '\n', '        function getWeekday(uint timestamp) public constant returns (uint8) {\n', '                return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\n', '        }\n', '\n', '        function toTimestamp(uint16 year, uint8 month, uint8 day) public constant returns (uint timestamp) {\n', '                return toTimestamp(year, month, day, 0, 0, 0);\n', '        }\n', '\n', '        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) public constant returns (uint timestamp) {\n', '                return toTimestamp(year, month, day, hour, 0, 0);\n', '        }\n', '\n', '        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) public constant returns (uint timestamp) {\n', '                return toTimestamp(year, month, day, hour, minute, 0);\n', '        }\n', '\n', '        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) public constant returns (uint timestamp) {\n', '                uint16 i;\n', '\n', '                // Year\n', '                for (i = ORIGIN_YEAR; i < year; i++) {\n', '                        if (isLeapYear(i)) {\n', '                                timestamp += LEAP_YEAR_IN_SECONDS;\n', '                        }\n', '                        else {\n', '                                timestamp += YEAR_IN_SECONDS;\n', '                        }\n', '                }\n', '\n', '                // Month\n', '                uint8[12] memory monthDayCounts;\n', '                monthDayCounts[0] = 31;\n', '                if (isLeapYear(year)) {\n', '                        monthDayCounts[1] = 29;\n', '                }\n', '                else {\n', '                        monthDayCounts[1] = 28;\n', '                }\n', '                monthDayCounts[2] = 31;\n', '                monthDayCounts[3] = 30;\n', '                monthDayCounts[4] = 31;\n', '                monthDayCounts[5] = 30;\n', '                monthDayCounts[6] = 31;\n', '                monthDayCounts[7] = 31;\n', '                monthDayCounts[8] = 30;\n', '                monthDayCounts[9] = 31;\n', '                monthDayCounts[10] = 30;\n', '                monthDayCounts[11] = 31;\n', '\n', '                for (i = 1; i < month; i++) {\n', '                        timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\n', '                }\n', '\n', '                // Day\n', '                timestamp += DAY_IN_SECONDS * (day - 1);\n', '\n', '                // Hour\n', '                timestamp += HOUR_IN_SECONDS * (hour);\n', '\n', '                // Minute\n', '                timestamp += MINUTE_IN_SECONDS * (minute);\n', '\n', '                // Second\n', '                timestamp += second;\n', '\n', '                return timestamp;\n', '        }\n', '\n', '\t\t// -1 t1 < t2\n', '\t\t// 0  t1 == t2\n', '\t\t// 1  t1 > t2\n', '\t\tfunction compareDatesWithoutTime(uint t1, uint t2) public constant returns (int res)\n', '\t\t{\n', '\t\t\t_DateTime memory dt1 = parseTimestamp(t1);\n', '\t\t\t_DateTime memory dt2 = parseTimestamp(t2);\n', '\n', '\t\t\tres = compareInts(dt1.year, dt2.year);\n', '\t\t\tif (res == 0)\n', '\t\t\t{\n', '\t\t\t\tres = compareInts(dt1.month, dt2.month);\n', '\t\t\t\tif (res == 0)\n', '\t\t\t\t{\n', '\t\t\t\t\tres = compareInts(dt1.day, dt2.day);\n', '\t\t\t\t}\n', '\t\t\t}\n', '\t\t}\n', '\n', '\n', '\t\t//  t2 -> MoveIn or MoveOut day in GMT, will be counted as beginning of a day\n', '\t\t//  t1 -> Current System DateTime\n', '\t\t// -1 t1 before t2\n', '\t\t//--------------------------------\n', '\t\t// 0  t1 same day as t2\n', '\t\t// 1  t1 after t2\n', '\t\tfunction compareDateTimesForContract(uint t1, uint t2) public constant returns (int res)\n', '\t\t{\n', '\t\t    uint endOfDay = t2 + (60 * 60 * 24);\n', '\t\t    res = 0;\n', '\t\t    \n', '\t\t    if (t2 <= t1 && t1 <= endOfDay)\n', '\t\t    {\n', '\t\t        res = 0;\n', '\t\t    }\n', '\t\t    else if (t2 > t1)\n', '\t\t    {\n', '\t\t        res = -1;\n', '\t\t    }\n', '\t\t    else if (t1 > endOfDay)\n', '\t\t    {\n', '\t\t        res = 1;\n', '\t\t    }\n', '\t\t}\t\n', '\n', '\n', '\t\t// -1 n1 < n2\n', '\t\t// 0  n1 == n2\n', '\t\t// 1  n1 > n2\n', '\t\tfunction compareInts(int n1, int n2) internal constant returns (int res)\n', '\t\t{\n', '\t\t\tif (n1 == n2)\n', '\t\t\t{\n', '\t\t\t\tres = 0;\n', '\t\t\t}\n', '\t\t\telse if (n1 < n2)\n', '\t\t\t{\n', '\t\t\t\tres = -1;\n', '\t\t\t}\n', '\t\t\telse if (n1 > n2)\n', '\t\t\t{\n', '\t\t\t\tres = 1;\n', '\t\t\t}\n', '\t\t}\n', '}\n', '\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', 'library BaseEscrowLib\n', '{\n', '    struct EscrowContractState { \n', '\t\tuint _CurrentDate;\n', '\t\tuint _CreatedDate;\n', '\t\tint _RentPerDay;\n', '\t\tuint _MoveInDate;\n', '\t\tuint _MoveOutDate;\t\t\t\t\n', '\t\tint _TotalAmount;\t\t\t\t\t\n', '\t\tint _SecDeposit;\n', '\t\tint _State;\t\n', '\t\tuint _ActualMoveInDate;\n', '\t\tuint _ActualMoveOutDate;\n', '\t\taddress _landlord;\n', '\t\taddress _tenant;\n', '\t\tbool _TenantConfirmedMoveIn;\t\t\n', '\t\tbool _MisrepSignaled;\t\t\t\n', '\t\tstring _DoorLockData;\n', '\t\taddress _ContractAddress;\t\t\n', '\t\tERC20Interface _tokenApi;\n', '\t\tint _landlBal;\n', '\t\tint _tenantBal;\n', '\t\tint _Id;\n', '\t\tint _CancelPolicy;\n', '\t\tuint _Balance;\n', '\t\tstring _Guid;\n', '    }\n', '\n', '    //Define public constants\n', '\t//Pre-Move In\n', '\tint internal constant ContractStateActive = 1;\n', '\tint internal constant ContractStateCancelledByTenant = 2;\n', '\tint internal constant ContractStateCancelledByLandlord = 3;\n', '\n', '\t//Move-In\n', '\tint internal constant ContractStateTerminatedMisrep = 4;\n', '\n', '\t//Living\n', '\tint internal constant ContractStateEarlyTerminatedByTenant = 5;\n', '\tint internal constant ContractStateEarlyTerminatedByTenantSecDep = 6;\n', '\tint internal constant ContractStateEarlyTerminatedByLandlord = 7;\t\t\n', '\n', '\t//Move-Out\n', '\tint internal constant ContractStateTerminatedOK = 8;\t\n', '\tint internal constant ContractStateTerminatedSecDep = 9;\n', '\t\n', '\t//Stages\n', '\tint internal constant ContractStagePreMoveIn = 0;\n', '\tint internal constant ContractStageLiving = 1;\n', '\tint internal constant ContractStageTermination = 2;\n', '\n', '\t//Action\n', '\tint internal constant ActionKeyTerminate = 0;\n', '\tint internal constant ActionKeyMoveIn = 1;\t\n', '\tint internal constant ActionKeyTerminateMisrep = 2;\t\n', '\tint internal constant ActionKeyPropOk = 3;\n', '\tint internal constant ActionKeyClaimDeposit = 4;\n', '\n', '\t//Log\n', '\tint internal constant LogMessageInfo = 0;\n', '\tint internal constant LogMessageWarning = 1;\n', '\tint internal constant LogMessageError = 2;\n', '\n', '\tevent logEvent(int stage, int atype, uint timestamp, string guid, string text);\n', '\n', '\n', '\t//DEBUG or TESTNET\n', '\t//bool private constant EnableSimulatedCurrentDate = true;\n', '\n', '\t//RELEASE\n', '\tbool private constant EnableSimulatedCurrentDate = false;\n', '\n', '\n', '\t//LogEvent wrapper\n', '\tfunction ContractLogEvent(int stage, int atype, uint timestamp, string guid, string text) public\n', '\t{\n', '\t\tlogEvent(stage, atype, timestamp, guid, text);\n', '\t}\n', '\n', '\t//Constant function wrappers\n', '\tfunction GetContractStateActive() public constant returns (int)\n', '\t{\n', '\t\treturn ContractStateActive;\n', '\t}\n', '\n', '\tfunction GetContractStateCancelledByTenant() public constant returns (int)\n', '\t{\n', '\t\treturn ContractStateCancelledByTenant;\n', '\t}\n', '\n', '\tfunction GetContractStateCancelledByLandlord() public constant returns (int)\n', '\t{\n', '\t\treturn ContractStateCancelledByLandlord;\n', '\t}\n', '\t\n', '\tfunction GetContractStateTerminatedMisrep() public constant returns (int)\n', '\t{\n', '\t\treturn ContractStateTerminatedMisrep;\n', '\t}\n', '\n', '\tfunction GetContractStateEarlyTerminatedByTenant() public constant returns (int)\n', '\t{\n', '\t\treturn ContractStateEarlyTerminatedByTenant;\n', '\t}\n', '\n', '\tfunction GetContractStateEarlyTerminatedByTenantSecDep() public constant returns (int)\n', '\t{\n', '\t\treturn ContractStateEarlyTerminatedByTenantSecDep;\n', '\t}\n', '\n', '\tfunction GetContractStateEarlyTerminatedByLandlord() public constant returns (int)\n', '\t{\n', '\t\treturn ContractStateEarlyTerminatedByLandlord;\t\t\n', '\t}\n', '\n', '\tfunction GetContractStateTerminatedOK() public constant returns (int)\n', '\t{\n', '\t\treturn ContractStateTerminatedOK;\t\n', '\t}\n', '\n', '\tfunction GetContractStateTerminatedSecDep() public constant returns (int)\n', '\t{\n', '\t\treturn ContractStateTerminatedSecDep;\n', '\t}\n', '\t\n', '\tfunction GetContractStagePreMoveIn() public constant returns (int)\n', '\t{\n', '\t\treturn ContractStagePreMoveIn;\n', '\t}\n', '\n', '\tfunction GetContractStageLiving() public constant returns (int)\n', '\t{\n', '\t\treturn ContractStageLiving;\n', '\t}\n', '\n', '\tfunction GetContractStageTermination() public constant returns (int)\n', '\t{\n', '\t\treturn ContractStageTermination;\n', '\t}\n', '\t\n', '\tfunction GetLogMessageInfo() public constant returns (int)\n', '\t{\n', '\t\treturn LogMessageInfo;\n', '\t}\n', '\n', '\tfunction GetLogMessageWarning() public constant returns (int)\n', '\t{\n', '\t\treturn LogMessageWarning;\n', '\t}\n', '\n', '\tfunction GetLogMessageError() public constant returns (int)\n', '\t{\n', '\t\treturn LogMessageError;\n', '\t}\n', '\n', '\n', '\t//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n', '\tfunction initialize(EscrowContractState storage self) {\n', '\n', '\t\t//Check parameters\n', '\t\t//all dates must be in the future\n', '\n', '\t\trequire(self._CurrentDate < self._MoveInDate);\n', '\t\trequire(self._MoveInDate < self._MoveOutDate);\n', '\t\t\t\t\t\t\t\n', '\t\tint nPotentialBillableDays = (int)(self._MoveOutDate - self._MoveInDate) / (60 * 60 * 24);\n', '\t\tint nPotentialBillableAmount = nPotentialBillableDays * (self._RentPerDay);\n', '\t\t\n', '\t\t//Limit 2 months stay\n', '\t\trequire (nPotentialBillableDays <= 60); \n', '\n', '\t\tself._TotalAmount = nPotentialBillableAmount + self._SecDeposit;\n', '\t\t\t\t\n', '\t\t//Sec Deposit should not be more than 30 perecent\n', '\t\trequire (self._SecDeposit / nPotentialBillableAmount * 100 <= 30);\n', '\t\t\t\t\n', '\n', '\t\tself._TenantConfirmedMoveIn = false;\n', '\t\tself._MisrepSignaled = false;\n', '\t\tself._State = GetContractStateActive();\n', '\t\tself._ActualMoveInDate = 0;\n', '\t\tself._ActualMoveOutDate = 0;\n', '\t\tself._landlBal = 0;\n', '\t\tself._tenantBal = 0;\n', '\t}\n', '\n', '\n', '\tfunction TerminateContract(EscrowContractState storage self, int tenantBal, int landlBal, int state) public\n', '\t{\n', '\t\tint stage = GetCurrentStage(self);\n', '\t\tuint nCurrentDate = GetCurrentDate(self);\n', '\t\tint nActualBalance = int(GetContractBalance(self));\n', '\n', '\t\tif (nActualBalance == 0)\n', '\t\t{\n', '\t\t    //If it was unfunded, just change state\n', '\t\t    self._State = state;   \n', '\t\t}\n', '\t\telse if (self._State == ContractStateActive && state != ContractStateActive)\n', '\t\t{\n', '\t\t\t//Check if some balances are negative\n', '\t\t\tif (landlBal < 0)\n', '\t\t\t{\n', '\t\t\t\ttenantBal += landlBal;\n', '\t\t\t\tlandlBal = 0;\n', '\t\t\t}\n', '\n', '\t\t\tif (tenantBal < 0) {\n', '\t\t\t\tlandlBal += tenantBal;\n', '\t\t\t\ttenantBal = 0;\n', '\t\t\t}\n', '\n', '\t\t\t//Check if balances exceed total amount\n', '\t\t\tif ((landlBal + tenantBal) > nActualBalance)\n', '\t\t\t{\n', '\t\t\t\tvar nOverrun = (landlBal + tenantBal) - self._TotalAmount;\n', '\t\t\t\tlandlBal -= (nOverrun / 2);\n', '\t\t\t\ttenantBal -= (nOverrun / 2);\n', '\t\t\t}\n', '\n', '\t\t\tself._State = state;\n', '\n', '\t\t\tstring memory strState = "";\n', '\n', '\t\t\tif (state == ContractStateTerminatedOK)\n', '\t\t\t{\n', '\t\t\t\tstrState = " State is: OK";\n', '\t\t\t}\n', '\t\t\telse if (state == ContractStateEarlyTerminatedByTenant)\n', '\t\t\t{\n', '\t\t\t\tstrState = " State is: Early terminated by tenant";\n', '\t\t\t}\n', '\t\t\telse if (state == ContractStateEarlyTerminatedByTenantSecDep)\n', '\t\t\t{\n', '\t\t\t\tstrState = " State is: Early terminated by tenant, Security Deposit claimed";\n', '\t\t\t}\n', '\t\t\telse if (state == ContractStateEarlyTerminatedByLandlord)\n', '\t\t\t{\n', '\t\t\t\tstrState = " State is: Early terminated by landlord";\n', '\t\t\t}\n', '\t\t\telse if (state == ContractStateCancelledByTenant)\n', '\t\t\t{\n', '\t\t\t\tstrState = " State is: Cancelled by tenant";\n', '\t\t\t}\n', '\t\t\telse if (state == ContractStateCancelledByLandlord)\n', '\t\t\t{\n', '\t\t\t\tstrState = " State is: Cancelled by landlord";\n', '\t\t\t}\n', '\t\t\telse if (state == ContractStateTerminatedSecDep)\n', '\t\t\t{\n', '\t\t\t\tstrState = " State is: Security Deposit claimed";\n', '\t\t\t}\n', '\t\t\n', '\t\t\t\n', '\t\t\t\n', '\t\t\tbytes32 b1;\n', '\t\t\tbytes32 b2;\n', '\t\t\tb1 = uintToBytes(uint(landlBal));\n', '\t\t\tb2 = uintToBytes(uint(tenantBal));\n', '\n', '                        /*\n', '\t\t    string memory s1;\n', '\t\t    string memory s2;\t\n', '\t\t    s1 = bytes32ToString(b1);\n', '\t\t    s2 = bytes32ToString(b2);\n', '                        */\n', '\t\t\t\n', '\t\t\tstring memory strMessage = strConcat(\n', '\t\t\t    "Contract is termintaing. Landlord balance is _$b_", \n', '\t\t\t    bytes32ToString(b1), \n', '\t\t\t    "_$e_, Tenant balance is _$b_", \n', '\t\t\t    bytes32ToString(b2));\n', '\n', '            \n', '\t\t\tstring memory strMessage2 = strConcat(\n', '\t\t\t\tstrMessage,\n', '\t\t\t\t"_$e_.",\n', '\t\t\t\tstrState\n', '\t\t\t);\n', '\n', '            string memory sGuid;\n', '            sGuid = self._Guid;\n', '\t\t\t\n', '            logEvent(stage, LogMessageInfo, nCurrentDate, sGuid, strMessage2);\n', '            \n', '\t\t\t//Send tokens\n', '\t\t\tself._landlBal = landlBal;\n', '\t\t\tself._tenantBal = tenantBal;\n', '\t\t}\t\n', '\t}\n', '\n', '\tfunction GetCurrentStage(EscrowContractState storage self) public constant returns (int stage)\n', '\t{\n', '\t\tuint nCurrentDate = GetCurrentDate(self);\n', '\t\tuint nActualBalance = GetContractBalance(self);\n', '        \n', '        stage = ContractStagePreMoveIn;\n', '        \n', '\t\tif (self._State == ContractStateActive && uint(self._TotalAmount) > nActualBalance)\n', '\t\t{\n', '\t\t\t//Contract unfunded\n', '\t\t\tstage = ContractStagePreMoveIn;\n', '\t\t}\t\t\n', '\t\telse if (DateTime.compareDateTimesForContract(nCurrentDate, self._MoveInDate) < 0)\n', '\t\t{\n', '\t\t\tstage = ContractStagePreMoveIn;\n', '\t\t}\n', '\t\telse if (DateTime.compareDateTimesForContract(nCurrentDate, self._MoveInDate) >= 0 && \n', '\t\t         DateTime.compareDateTimesForContract(nCurrentDate, self._MoveOutDate) < 0 && \n', '\t\t         self._TenantConfirmedMoveIn)\n', '\t\t{\n', '\t\t\tstage = ContractStageLiving;\n', '\t\t}\n', '\t\telse if (DateTime.compareDateTimesForContract(nCurrentDate, self._MoveOutDate) >= 0)\n', '\t\t{\n', '\t\t\tstage = ContractStageTermination;\n', '\t\t}\t\n', '\t}\n', '\n', '\n', '\n', '\t///Helper functions\n', '\tfunction SimulateCurrentDate(EscrowContractState storage self, uint n) public\n', '\t{\n', '\t\tif (EnableSimulatedCurrentDate)\n', '\t\t{\n', '\t\t\tself._CurrentDate = n;\n', '\t\t\t//int stage = GetCurrentStage(self);\n', '\t\t\t//logEvent(stage, LogMessageInfo, self._CurrentDate, "SimulateCurrentDate was called.");\t\n', '\t\t}\n', '\t}\n', '\t\n', '\t\n', '\t\n', '\tfunction GetCurrentDate(EscrowContractState storage self) public constant returns (uint nCurrentDate)\n', '\t{\n', '\t\tif (EnableSimulatedCurrentDate)\n', '\t\t{\n', '\t\t\tnCurrentDate = self._CurrentDate;\n', '\t\t}\n', '\t\telse\n', '\t\t{\n', '\t\t\tnCurrentDate = now;\n', '\t\t}\t\n', '\t}\n', '\n', '\tfunction GetContractBalance(EscrowContractState storage self) public returns (uint res)\n', '\t{\n', '\t    res = self._Balance;\n', '\t}\n', '\n', '\n', '\tfunction splitBalanceAccordingToRatings(int balance, int tenantScore, int landlScore) public constant returns (int tenantBal, int landlBal)\n', '\t{\n', '\t\tif (tenantScore == landlScore) {\n', '\t\t\t//Just split in two \n', '\t\t\ttenantBal = balance / 2;\n', '\t\t\tlandlBal = balance / 2;\n', '\t\t}\n', '\t\telse if (tenantScore == 0)\n', '\t\t{\n', '\t\t\ttenantBal = 0;\n', '\t\t\tlandlBal = balance;\t\t\t\n', '\t\t}\n', '\t\telse if (landlScore == 0) {\n', '\t\t\ttenantBal = balance;\n', '\t\t\tlandlBal = 0;\n', '\t\t}\n', '\t\telse if (tenantScore > landlScore) {\t\t\t\n', '\t\t\tlandlBal = ((landlScore * balance / 2) / tenantScore);\n', '\t\t\ttenantBal = balance - landlBal;\t\t\t\n', '\t\t}\n', '\t\telse if (tenantScore < landlScore) {\t\t\t\n', '\t\t\ttenantBal = ((tenantScore * balance / 2) / landlScore);\n', '\t\t\tlandlBal = balance - tenantBal;\t\t\t\n', '\t\t}\t\t\n', '\t}\n', '\n', '\tfunction formatDate(uint dt) public constant returns (string strDate)\n', '\t{\n', '\t\tbytes32 b1;\n', '\t\tbytes32 b2;\n', '\t\tbytes32 b3;\n', '\t\tb1 = uintToBytes(uint(DateTime.getMonth(dt)));\n', '\t\tb2 = uintToBytes(uint(DateTime.getDay(dt)));\n', '\t\tb3 = uintToBytes(uint(DateTime.getYear(dt)));\n', '\t\tstring memory s1;\n', '\t\tstring memory s2;\t\n', '\t\tstring memory s3;\n', '\t\ts1 = bytes32ToString(b1);\n', '\t\ts2 = bytes32ToString(b2);\n', '\t\ts3 = bytes32ToString(b3);\n', '\t\t\n', '\t\tstring memory strDate1 = strConcat(s1, "/", s2, "/");\n', '\t\tstrDate = strConcat(strDate1, s3);\t\t\t\n', '\t}\n', '\t\n', '\n', '    function strConcat(string _a, string _b, string _c, string _d, string _e) internal constant returns (string){\n', '        bytes memory _ba = bytes(_a);\n', '        bytes memory _bb = bytes(_b);\n', '        bytes memory _bc = bytes(_c);\n', '        bytes memory _bd = bytes(_d);\n', '        bytes memory _be = bytes(_e);\n', '        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n', '        bytes memory babcde = bytes(abcde);\n', '        uint k = 0;\n', '        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n', '        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n', '        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n', '        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n', '        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n', '        return string(babcde);\n', '    }\n', '    \n', '    function strConcat(string _a, string _b, string _c, string _d) internal constant returns (string) {\n', '        return strConcat(_a, _b, _c, _d, "");\n', '    }\n', '    \n', '    function strConcat(string _a, string _b, string _c) internal constant returns (string) {\n', '        return strConcat(_a, _b, _c, "", "");\n', '    }\n', '    \n', '    function strConcat(string _a, string _b) internal constant returns (string) {\n', '        return strConcat(_a, _b, "", "", "");\n', '    } \n', '    \n', '    function bytes32ToString(bytes32 x) internal constant returns (string) {\n', '        bytes memory bytesString = new bytes(32);\n', '        uint charCount = 0;\n', '        for (uint j = 0; j < 32; j++) {\n', '            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\n', '            if (char != 0) {\n', '                bytesString[charCount] = char;\n', '                charCount++;\n', '            }\n', '        }\n', '        bytes memory bytesStringTrimmed = new bytes(charCount);\n', '        for (j = 0; j < charCount; j++) {\n', '            bytesStringTrimmed[j] = bytesString[j];\n', '        }\n', '        return string(bytesStringTrimmed);\n', '    }\n', '\n', '    function bytes32ArrayToString(bytes32[] data) internal constant returns (string) {\n', '        bytes memory bytesString = new bytes(data.length * 32);\n', '        uint urlLength;\n', '        for (uint i=0; i<data.length; i++) {\n', '            for (uint j=0; j<32; j++) {\n', '                byte char = byte(bytes32(uint(data[i]) * 2 ** (8 * j)));\n', '                if (char != 0) {\n', '                    bytesString[urlLength] = char;\n', '                    urlLength += 1;\n', '                }\n', '            }\n', '        }\n', '        bytes memory bytesStringTrimmed = new bytes(urlLength);\n', '        for (i=0; i<urlLength; i++) {\n', '            bytesStringTrimmed[i] = bytesString[i];\n', '        }\n', '        return string(bytesStringTrimmed);\n', '    }  \n', '    \n', '    \n', '    function uintToBytes(uint v) internal constant returns (bytes32 ret) {\n', '        if (v == 0) {\n', '            ret = &#39;0&#39;;\n', '        }\n', '        else {\n', '            while (v > 0) {\n', '                ret = bytes32(uint(ret) / (2 ** 8));\n', '                ret |= bytes32(((v % 10) + 48) * 2 ** (8 * 31));\n', '                v /= 10;\n', '            }\n', '        }\n', '        return ret;\n', '    }\n', '\n', '    /// @dev Converts a numeric string to it&#39;s unsigned integer representation.\n', '    /// @param v The string to be converted.\n', '    function bytesToUInt(bytes32 v) internal constant returns (uint ret) {\n', '        if (v == 0x0) {\n', '            throw;\n', '        }\n', '\n', '        uint digit;\n', '\n', '        for (uint i = 0; i < 32; i++) {\n', '            digit = uint((uint(v) / (2 ** (8 * (31 - i)))) & 0xff);\n', '            if (digit == 0) {\n', '                break;\n', '            }\n', '            else if (digit < 48 || digit > 57) {\n', '                throw;\n', '            }\n', '            ret *= 10;\n', '            ret += (digit - 48);\n', '        }\n', '        return ret;\n', '    }    \n', '\n', '\n', '}']