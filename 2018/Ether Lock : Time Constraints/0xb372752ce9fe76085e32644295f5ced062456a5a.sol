['pragma solidity ^0.4.19;\n', '\n', 'contract LotteryRecharge\n', '{\n', '    address private contractAddress;\n', '    uint256 public nPlatCurTotalEth;            // calculate all Recharges to contractAddress, unit wei\n', '    uint256 public constant nCanOpenRewardMinEth = 10 ether;\n', '    uint256 private constant leastRecharge = 0.1 ether;          // 100000000000000000 wei\n', '    uint256 private constant OpenRewardClockSeconds = 1*3600;    // no permit greater than 24 * 3600\n', '    uint256 private constant MaxClockSeconds = 24*3600;          // means 24*3600\n', '    uint256 private constant MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '    \n', '    address public constant OfficialWalletAddr = 0x12961096767E28fFEB63180B83e946F45D16c4f8;\n', '    \n', '    // find player recharge at this contract, key=address,value=uint256\n', '    mapping(address => uint256) private mapSenderAddr2Recharge;\n', '    address[]  private ArrayAddress;\n', '    uint256 public LatestRechargeTime;\n', '\n', '    // contract construct function\n', '    function LotteryRecharge() public\n', '    {\n', '        contractAddress = this;\n', '    }\n', '\n', '    function () public payable\n', '    {\n', '        transfer(contractAddress, msg.value);\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) private returns (bool bTranferSuccess)\n', '    {\n', '        require( _to != address(0) && (_to == contractAddress) && (_value >= leastRecharge));\n', '        uint256 nRetFlag = CheckTime(OpenRewardClockSeconds);\n', '        \n', '        require(nRetFlag != 1);     //1 means can not open reward and recharge\n', '        if( (nRetFlag == 2 ) && (IsCanAllotAward() == true)) \n', '        {\n', '            // open reward time\n', '            AllotAward();\n', '        }\n', '        return transferToContractAddr(_to, _value);\n', '    }\n', '\n', '    event TransferToContractAddrEvent(address _from, address _to, uint256 nValue, bytes _dataRet);\n', '    function transferToContractAddr(address _to, uint256 _value) private returns (bool success)\n', '    {\n', '        require(_to != address(0) );\n', '        require(mapSenderAddr2Recharge[msg.sender] <= MAX_UINT256 - _value);\n', '        if(mapSenderAddr2Recharge[msg.sender] == 0)\n', '        {\n', '            ArrayAddress.push(msg.sender);\n', '        }\n', '\n', '        bytes memory empty;\n', '        mapSenderAddr2Recharge[msg.sender] += _value;\n', '        nPlatCurTotalEth += _value;\n', '        LatestRechargeTime = now;\n', '        TransferToContractAddrEvent(msg.sender, _to, _value, empty);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance)\n', '    {\n', '        require(_owner != address(0) );\n', '        return mapSenderAddr2Recharge[_owner];\n', '    }\n', '\n', '    function IsCanAllotAward() private constant returns(bool CanAllotAward)\n', '    {\n', '        if (nPlatCurTotalEth >= nCanOpenRewardMinEth)\n', '        {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    event AllotAwardEvent(bool AllotAwardSuccess);\n', '    function AllotAward() private returns(bool AllotAwardSuccess)\n', '    {\n', '        require(nPlatCurTotalEth >= nCanOpenRewardMinEth);\n', '        bytes32 byteHashValue = block.blockhash(block.number-1);\n', '        uint256 nIntHash = uint256(byteHashValue);\n', '        uint256 nRandomValue= (nIntHash + now) % (nPlatCurTotalEth);\n', '\n', '        uint256 nSum = 0;\n', '        for(uint256 i = 0; i < ArrayAddress.length; i++)\n', '        {\n', '            if( nSum <= nRandomValue && nRandomValue < nSum + mapSenderAddr2Recharge[ArrayAddress[i]] )\n', '            {\n', '                uint256 nOfficalGetEth = nPlatCurTotalEth/10;\n', '                uint256 nParticipantGetEth = nPlatCurTotalEth - nOfficalGetEth;\n', '\n', '                OfficialWalletAddr.transfer(nOfficalGetEth);\n', '                ArrayAddress[i].transfer(nParticipantGetEth);\n', '\n', '                for(uint256 j = 0; j < ArrayAddress.length; j++)\n', '                {   //clear mapping\n', '                    mapSenderAddr2Recharge[ArrayAddress[j] ]= 0;\n', '                }\n', '                LatestRechargeTime = 0;\n', '                nPlatCurTotalEth = 0;\n', '                ArrayAddress.length = 0;\n', '                AllotAwardEvent(true);\n', '                return true;\n', '            }\n', '            nSum += mapSenderAddr2Recharge[ArrayAddress[i]];\n', '        }\n', '    }\n', '\n', '    function CheckTime(uint256 startTimeSeconds) private constant returns(uint256 nFlag)\n', '    {\n', '        if( LatestRechargeTime != 0 && (now % MaxClockSeconds > OpenRewardClockSeconds || (LatestRechargeTime + (MaxClockSeconds-OpenRewardClockSeconds) + 300 <= now)) )\n', '        {\n', '            //open reward time\n', '            return 2;\n', '        }\n', '        else if ( (startTimeSeconds <= (now % MaxClockSeconds + 300) ) && (now % MaxClockSeconds <= startTimeSeconds ) )\n', '        {\n', '            //no permit recharge\n', '            return 1;\n', '        }\n', '        //recharge time\n', '        return 3;\n', '    }\n', '}']