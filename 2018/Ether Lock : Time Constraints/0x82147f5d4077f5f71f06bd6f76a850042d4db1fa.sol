['pragma solidity ^0.4.23;\n', '\n', 'contract owned {\n', '\n', '    address owner;\n', '\n', '    /*this function is executed at initialization and sets the owner of the contract */\n', '    constructor() public { owner = msg.sender; }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract mortal is owned {\n', '\n', '    /* Function to recover the funds on the contract */\n', '    function kill() public onlyOwner() {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '}\n', '\n', 'contract CryptoCows is owned, mortal {\n', '   \n', '    struct Cow {\n', '        uint32 milk;\n', '        uint32 readyTime;\n', '    }\n', '\n', '    event GetCowEvent(uint id);\n', '    event GetMilkEvent(uint32 milk, uint32 timestamp);\n', '    \n', '    Cow[] public cows;\n', '    uint public allMilk;\n', '    \n', '    mapping(uint => address) public owners;\n', '    mapping(address => uint) public count;\n', '    mapping(address => uint) public ownerCow;\n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function getCow(uint _cowId) public view returns (uint32, uint32) {\n', '        Cow storage _cow = cows[_cowId];\n', '        return (_cow.milk, _cow.readyTime);\n', '    }\n', '    \n', '    function countCows() public view returns(uint) {\n', '        return cows.length;\n', '    }\n', '    \n', '    function countMilk() public view returns(uint) {\n', '        return allMilk;\n', '    }\n', '    \n', '    function buyCow() public {\n', '        require(count[msg.sender] == 0);\n', '        uint id = cows.length;\n', '        cows.push(Cow(0, uint32(now)));\n', '        owners[id] = msg.sender;\n', '        count[msg.sender] = 1;\n', '        ownerCow[msg.sender] = id;\n', '        emit GetCowEvent(id);\n', '    }\n', '    \n', '    function removeCooldown() public payable {\n', '        require(msg.value == 0.001 ether);\n', '        require(count[msg.sender] == 1);\n', '        uint _cowId = ownerCow[msg.sender];\n', '        Cow storage currentCow = cows[_cowId];\n', '        require(_isReady(currentCow) == false);\n', '        currentCow.readyTime = uint32(now);\n', '        emit GetCowEvent(_cowId);\n', '    }\n', '    \n', '    function _isReady(Cow storage _cow) internal view returns (bool) {\n', '        return (_cow.readyTime <= now);\n', '    }    \n', '    \n', '    function getMilk() public {\n', '        require(count[msg.sender] == 1);\n', '        uint _cowId = ownerCow[msg.sender];\n', '        Cow storage currentCow = cows[_cowId];\n', '        require(_isReady(currentCow));\n', '        uint32 addMilk = uint32(random());\n', '        allMilk = allMilk + uint(addMilk);\n', '        currentCow.milk += addMilk;\n', '        currentCow.readyTime = uint32(now + 1 hours);\n', '        emit GetMilkEvent(addMilk, currentCow.readyTime);\n', '    }\n', '    \n', '    function random() private view returns (uint8) {\n', '        return uint8(uint256(keccak256(block.timestamp, block.difficulty))%221);\n', '    }    \n', '    \n', '    function withDraw() public onlyOwner {\n', '        uint amount = getBalance();\n', '        owner.transfer(amount);\n', '    }\n', '    \n', '    function getBalance() public view returns (uint){\n', '        return address(this).balance;\n', '    }    \n', '}']
['pragma solidity ^0.4.23;\n', '\n', 'contract owned {\n', '\n', '    address owner;\n', '\n', '    /*this function is executed at initialization and sets the owner of the contract */\n', '    constructor() public { owner = msg.sender; }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract mortal is owned {\n', '\n', '    /* Function to recover the funds on the contract */\n', '    function kill() public onlyOwner() {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '}\n', '\n', 'contract CryptoCows is owned, mortal {\n', '   \n', '    struct Cow {\n', '        uint32 milk;\n', '        uint32 readyTime;\n', '    }\n', '\n', '    event GetCowEvent(uint id);\n', '    event GetMilkEvent(uint32 milk, uint32 timestamp);\n', '    \n', '    Cow[] public cows;\n', '    uint public allMilk;\n', '    \n', '    mapping(uint => address) public owners;\n', '    mapping(address => uint) public count;\n', '    mapping(address => uint) public ownerCow;\n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function getCow(uint _cowId) public view returns (uint32, uint32) {\n', '        Cow storage _cow = cows[_cowId];\n', '        return (_cow.milk, _cow.readyTime);\n', '    }\n', '    \n', '    function countCows() public view returns(uint) {\n', '        return cows.length;\n', '    }\n', '    \n', '    function countMilk() public view returns(uint) {\n', '        return allMilk;\n', '    }\n', '    \n', '    function buyCow() public {\n', '        require(count[msg.sender] == 0);\n', '        uint id = cows.length;\n', '        cows.push(Cow(0, uint32(now)));\n', '        owners[id] = msg.sender;\n', '        count[msg.sender] = 1;\n', '        ownerCow[msg.sender] = id;\n', '        emit GetCowEvent(id);\n', '    }\n', '    \n', '    function removeCooldown() public payable {\n', '        require(msg.value == 0.001 ether);\n', '        require(count[msg.sender] == 1);\n', '        uint _cowId = ownerCow[msg.sender];\n', '        Cow storage currentCow = cows[_cowId];\n', '        require(_isReady(currentCow) == false);\n', '        currentCow.readyTime = uint32(now);\n', '        emit GetCowEvent(_cowId);\n', '    }\n', '    \n', '    function _isReady(Cow storage _cow) internal view returns (bool) {\n', '        return (_cow.readyTime <= now);\n', '    }    \n', '    \n', '    function getMilk() public {\n', '        require(count[msg.sender] == 1);\n', '        uint _cowId = ownerCow[msg.sender];\n', '        Cow storage currentCow = cows[_cowId];\n', '        require(_isReady(currentCow));\n', '        uint32 addMilk = uint32(random());\n', '        allMilk = allMilk + uint(addMilk);\n', '        currentCow.milk += addMilk;\n', '        currentCow.readyTime = uint32(now + 1 hours);\n', '        emit GetMilkEvent(addMilk, currentCow.readyTime);\n', '    }\n', '    \n', '    function random() private view returns (uint8) {\n', '        return uint8(uint256(keccak256(block.timestamp, block.difficulty))%221);\n', '    }    \n', '    \n', '    function withDraw() public onlyOwner {\n', '        uint amount = getBalance();\n', '        owner.transfer(amount);\n', '    }\n', '    \n', '    function getBalance() public view returns (uint){\n', '        return address(this).balance;\n', '    }    \n', '}']
