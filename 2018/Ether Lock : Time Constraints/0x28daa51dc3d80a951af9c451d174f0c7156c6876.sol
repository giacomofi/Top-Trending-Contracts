['pragma solidity ^0.4.13;\n', '\n', 'interface EtherShare {\n', '    function allShare(uint ShareID, uint ReplyID) returns (address,string,uint,bool,string);\n', '}\n', '\n', '// Enable users to reward authors from EtherShare and record the reward\n', 'contract EtherShareReward {\n', '    EtherShare ES = EtherShare(0xc86bdf9661c62646194ef29b1b8f5fe226e8c97e);\n', '    \n', '    struct oneReward {\n', '        address from;\n', '        uint value;\n', '    }\n', '    mapping(uint => mapping(uint => oneReward[])) public allRewards;\n', '    \n', '    function Reward(uint ShareID, uint ReplyID) payable public {\n', '        address to;\n', '        (to,,,,) = ES.allShare(ShareID,ReplyID); // get the author\n', '        to.transfer(msg.value);\n', '        allRewards[ShareID][ReplyID].push(oneReward(msg.sender, msg.value)); // record the reward\n', '    }\n', '\n', '    function getSum(uint ShareID, uint ReplyID) view public returns (uint) {\n', '        uint sum = 0;\n', '        for (uint i=0; i<allRewards[ShareID][ReplyID].length; ++i)\n', '            sum += allRewards[ShareID][ReplyID][i].value;\n', '        return sum;\n', '    }\n', '}']