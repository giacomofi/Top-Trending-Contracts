['pragma solidity ^0.4.25;\n', 'contract Sender {\n', '    address cleaner;\n', '    constructor(address _cleaner) public {\n', '        cleaner = _cleaner;\n', '    }\n', '    function() public payable {\n', '        forward(cleaner);\n', '    }\n', '    function forward(address to) public payable returns(bool) {\n', '        require(msg.value > 0);\n', '        to.transfer(msg.value);\n', '        return true;\n', '    }\n', '    function split(address[] to) public payable returns(bool) {\n', '        require(msg.value >= to.length && to.length <= 254);\n', '        uint left = msg.value;\n', '        uint a = left % to.length;\n', '        uint i = 0;\n', '        if (a > 0) {\n', '            msg.sender.transfer(a);\n', '            left -= a;\n', '        }\n', '        uint part = left / to.length;\n', '        while (i < to.length) {\n', '            if (to[i] != address(0) && address(this) != to[i]) {\n', '                to[i].transfer(part);\n', '                left -= part;\n', '            }\n', '            i++;\n', '        }\n', '        require(left == 0);\n', '        return true;\n', '    }\n', '    function bulk(address[] to, uint[] amount) public payable returns(bool) {\n', '        require(to.length == amount.length && msg.value >= amount[0] && to.length <= 254);\n', '        uint left = msg.value;\n', '        uint i = 0;\n', '        while (i < to.length) {\n', '            if (to[i] != address(0) && address(this) != to[i] && amount[i] > 0) {\n', '                if (amount[i] <= left) {\n', '                    to[i].transfer(amount[i]);\n', '                    left -= amount[i];\n', '                } else {\n', '                    break;\n', '                }\n', '            }\n', '            i++;\n', '        }\n', '        if (left > 0) {\n', '            msg.sender.transfer(left);\n', '            left = 0;\n', '        }\n', '        require(left == 0);\n', '        return true;\n', '    }\n', '}']