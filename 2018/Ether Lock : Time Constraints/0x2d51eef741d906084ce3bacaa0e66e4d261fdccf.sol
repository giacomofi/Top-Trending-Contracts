['pragma solidity ^0.4.18;\n', '/**\n', ' * Overflow aware uint math functions.\n', ' *\n', ' * Inspired by https://github.com/MakerDAO/maker-otc/blob/master/contracts/simple_market.sol\n', ' */\n', 'contract SafeMath {\n', '  //internals\n', '\n', '  function safeMul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) throw;\n', '  }\n', '}\n', '\n', '/**\n', ' * ERC 20 token\n', ' *\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract Token {\n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', '/**\n', ' * ERC 20 token\n', ' *\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract StandardToken is Token {\n', '\n', '    /**\n', '     * Reviewed:\n', '     * - Interger overflow = OK, checked\n', '     */\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        //Default assumes totalSupply can&#39;t be over max (2^256 - 1).\n', '        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn&#39;t wrap.\n', '        //Replace the if with this one instead.\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        //if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    uint256 public totalSupply;\n', '\n', '}\n', '\n', '\n', '/**\n', ' * Automobile Cyberchain Token crowdsale ICO contract.\n', ' *\n', ' */\n', 'contract AutomobileCyberchainToken is StandardToken, SafeMath {\n', '\n', '    string public name = "Automobile Cyberchain Token";\n', '    string public symbol = "AMCC";\n', '    uint public decimals = 18;\n', '    uint preSalePrice  = 32000;\n', '    uint crowSalePrice = 20000;\n', '    uint prePeriod = 256 * 24 * 30;// unit: block count, estimate: 30 days, May 16 0:00, UTC-7\n', '    uint totalPeriod = 256 * 24 * 95; // unit: block count, estimate: 95 days, July 20, 0:00, UTC-7\n', '    uint public startBlock = 5455280; //crowdsale start block (set in constructor), April 16 0:00 UTC-7\n', '    uint public endBlock = startBlock + totalPeriod; //crowdsale end block\n', '\n', '\n', '    // Initial founder address (set in constructor)\n', '    // All deposited ETH will be instantly forwarded to this address.\n', '    // Address is a multisig wallet.\n', '    address public founder = 0xfD16CDC79382F86303E2eE8693C7f50A4d8b937F;\n', '    uint256 public preEtherCap = 15625 * 10**18; // max amount raised during pre-ICO\n', '    uint256 public etherCap =    88125 * 10**18; //max amount raised during crowdsale\n', '    uint256 public bountyAllocation = 1050000000 * 10**18;\n', '    uint256 public maxToken = 3000000000 * 10**18;\n', '    // uint public transferLockup = 256 * 0; //transfers are locked for this many blocks after endBlock (assuming 14 second blocks)\n', '    // uint public founderLockup = 256 * 0; //founder allocation cannot be created until this many blocks after endBlock\n', '\n', '    uint256 public presaleTokenSupply = 0; //this will keep track of the token supply created during the pre-crowdsale\n', '    uint256 public totalEtherRaised = 0;\n', '    bool public halted = false; //the founder address can set this to true to halt the crowdsale due to emergency\n', '\n', '    event Buy(address indexed sender, uint eth, uint fbt);\n', '\n', '\n', '    function AutomobileCyberchainToken() {\n', '        balances[founder] = bountyAllocation;\n', '        totalSupply = bountyAllocation;\n', '        Transfer(address(0), founder, bountyAllocation);\n', '    }\n', '\n', '\n', '    function price() constant returns(uint) {\n', '        if (block.number<startBlock || block.number > endBlock) return 0; //this will not happen according to the buyToken block check, but still set it to 0.\n', '        else if (block.number>=startBlock && block.number<startBlock+prePeriod) return preSalePrice; //pre-ICO\n', '        else  return crowSalePrice; // default-ICO\n', '    }\n', '\n', '   /**\n', '    * @dev fallback function ***DO NOT OVERRIDE***\n', '    */\n', '    function() public payable  {\n', '        buyToken(msg.sender, msg.value);\n', '    }\n', '\n', '\n', '    // Buy entry point\n', '    function buy(address recipient, uint256 value) public payable {\n', '        if (value> msg.value) throw;\n', '\n', '        if (value < msg.value) {\n', '            require(msg.sender.call.value(msg.value - value)()); //refund the extra ether\n', '        }\n', '        buyToken(recipient, value);\n', '    }\n', '\n', '\n', '    function buyToken(address recipient, uint256 value) internal {\n', '        if (block.number<startBlock || block.number>endBlock || safeAdd(totalEtherRaised,value)>etherCap || halted) throw;\n', '        if (block.number>=startBlock && block.number<=startBlock+prePeriod && safeAdd(totalEtherRaised,value) > preEtherCap) throw; //preSale Cap limitation\n', '        uint tokens = safeMul(value, price());\n', '        balances[recipient] = safeAdd(balances[recipient], tokens);\n', '        totalSupply = safeAdd(totalSupply, tokens);\n', '        totalEtherRaised = safeAdd(totalEtherRaised, value);\n', '\n', '        if (block.number<=startBlock+prePeriod) {\n', '            presaleTokenSupply = safeAdd(presaleTokenSupply, tokens);\n', '        }\n', '        Transfer(address(0), recipient, tokens); //Transaction record for token perchaise\n', '        if (!founder.call.value(value)()) throw; //immediately send Ether to founder address\n', '        Buy(recipient, value, tokens); //Buy event\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * Emergency Stop ICO.\n', '     *\n', '     *  Applicable tests:\n', '     *\n', '     * - Test unhalting, buying, and succeeding\n', '     */\n', '    function halt() {\n', '        if (msg.sender!=founder) throw;\n', '        halted = true;\n', '    }\n', '\n', '    function unhalt() {\n', '        if (msg.sender!=founder) throw;\n', '        halted = false;\n', '    }\n', '\n', '    /**\n', '     * Change founder address (where ICO ETH is being forwarded).\n', '     *\n', '     * Applicable tests:\n', '     *\n', '     * - Test founder change by hacker\n', '     * - Test founder change\n', '     * - Test founder token allocation twice\n', '     *\n', '     */\n', '    function changeFounder(address newFounder) {\n', '        if (msg.sender!=founder) throw;\n', '        founder = newFounder;\n', '    }\n', '\n', '    function withdrawExtraToken(address recipient) public {\n', '      require(msg.sender == founder && block.number > endBlock && totalSupply < maxToken);\n', '\n', '      uint256 leftTokens = safeSub(maxToken, totalSupply);\n', '      balances[recipient] = safeAdd(balances[recipient], leftTokens);\n', '      totalSupply = maxToken;\n', '      Transfer(address(0), recipient, leftTokens);\n', '    }\n', '\n', '\n', '    /**\n', '     * ERC 20 Standard Token interface transfer function\n', '     *\n', '     * Prevent transfers until freeze period is over.\n', '     *\n', '     * Applicable tests:\n', '     *\n', '     * - Test restricted early transfer\n', '     * - Test transfer after restricted period\n', '     */\n', '    // function transfer(address _to, uint256 _value) returns (bool success) {\n', '    //     if (block.number <= startBlock + transferLockup && msg.sender!=founder) throw;\n', '    //     return super.transfer(_to, _value);\n', '    // }\n', '\n', '\n', '    /**\n', '     * ERC 20 Standard Token interface transfer function\n', '     *\n', '     * Prevent transfers until freeze period is over.\n', '     */\n', '    // function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '    //     if (block.number <= startBlock + transferLockup && msg.sender!=founder) throw;\n', '    //     return super.transferFrom(_from, _to, _value);\n', '    // }\n', '}']
['pragma solidity ^0.4.18;\n', '/**\n', ' * Overflow aware uint math functions.\n', ' *\n', ' * Inspired by https://github.com/MakerDAO/maker-otc/blob/master/contracts/simple_market.sol\n', ' */\n', 'contract SafeMath {\n', '  //internals\n', '\n', '  function safeMul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) throw;\n', '  }\n', '}\n', '\n', '/**\n', ' * ERC 20 token\n', ' *\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract Token {\n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', '/**\n', ' * ERC 20 token\n', ' *\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract StandardToken is Token {\n', '\n', '    /**\n', '     * Reviewed:\n', '     * - Interger overflow = OK, checked\n', '     */\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", "        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n", '        //Replace the if with this one instead.\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        //if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    uint256 public totalSupply;\n', '\n', '}\n', '\n', '\n', '/**\n', ' * Automobile Cyberchain Token crowdsale ICO contract.\n', ' *\n', ' */\n', 'contract AutomobileCyberchainToken is StandardToken, SafeMath {\n', '\n', '    string public name = "Automobile Cyberchain Token";\n', '    string public symbol = "AMCC";\n', '    uint public decimals = 18;\n', '    uint preSalePrice  = 32000;\n', '    uint crowSalePrice = 20000;\n', '    uint prePeriod = 256 * 24 * 30;// unit: block count, estimate: 30 days, May 16 0:00, UTC-7\n', '    uint totalPeriod = 256 * 24 * 95; // unit: block count, estimate: 95 days, July 20, 0:00, UTC-7\n', '    uint public startBlock = 5455280; //crowdsale start block (set in constructor), April 16 0:00 UTC-7\n', '    uint public endBlock = startBlock + totalPeriod; //crowdsale end block\n', '\n', '\n', '    // Initial founder address (set in constructor)\n', '    // All deposited ETH will be instantly forwarded to this address.\n', '    // Address is a multisig wallet.\n', '    address public founder = 0xfD16CDC79382F86303E2eE8693C7f50A4d8b937F;\n', '    uint256 public preEtherCap = 15625 * 10**18; // max amount raised during pre-ICO\n', '    uint256 public etherCap =    88125 * 10**18; //max amount raised during crowdsale\n', '    uint256 public bountyAllocation = 1050000000 * 10**18;\n', '    uint256 public maxToken = 3000000000 * 10**18;\n', '    // uint public transferLockup = 256 * 0; //transfers are locked for this many blocks after endBlock (assuming 14 second blocks)\n', '    // uint public founderLockup = 256 * 0; //founder allocation cannot be created until this many blocks after endBlock\n', '\n', '    uint256 public presaleTokenSupply = 0; //this will keep track of the token supply created during the pre-crowdsale\n', '    uint256 public totalEtherRaised = 0;\n', '    bool public halted = false; //the founder address can set this to true to halt the crowdsale due to emergency\n', '\n', '    event Buy(address indexed sender, uint eth, uint fbt);\n', '\n', '\n', '    function AutomobileCyberchainToken() {\n', '        balances[founder] = bountyAllocation;\n', '        totalSupply = bountyAllocation;\n', '        Transfer(address(0), founder, bountyAllocation);\n', '    }\n', '\n', '\n', '    function price() constant returns(uint) {\n', '        if (block.number<startBlock || block.number > endBlock) return 0; //this will not happen according to the buyToken block check, but still set it to 0.\n', '        else if (block.number>=startBlock && block.number<startBlock+prePeriod) return preSalePrice; //pre-ICO\n', '        else  return crowSalePrice; // default-ICO\n', '    }\n', '\n', '   /**\n', '    * @dev fallback function ***DO NOT OVERRIDE***\n', '    */\n', '    function() public payable  {\n', '        buyToken(msg.sender, msg.value);\n', '    }\n', '\n', '\n', '    // Buy entry point\n', '    function buy(address recipient, uint256 value) public payable {\n', '        if (value> msg.value) throw;\n', '\n', '        if (value < msg.value) {\n', '            require(msg.sender.call.value(msg.value - value)()); //refund the extra ether\n', '        }\n', '        buyToken(recipient, value);\n', '    }\n', '\n', '\n', '    function buyToken(address recipient, uint256 value) internal {\n', '        if (block.number<startBlock || block.number>endBlock || safeAdd(totalEtherRaised,value)>etherCap || halted) throw;\n', '        if (block.number>=startBlock && block.number<=startBlock+prePeriod && safeAdd(totalEtherRaised,value) > preEtherCap) throw; //preSale Cap limitation\n', '        uint tokens = safeMul(value, price());\n', '        balances[recipient] = safeAdd(balances[recipient], tokens);\n', '        totalSupply = safeAdd(totalSupply, tokens);\n', '        totalEtherRaised = safeAdd(totalEtherRaised, value);\n', '\n', '        if (block.number<=startBlock+prePeriod) {\n', '            presaleTokenSupply = safeAdd(presaleTokenSupply, tokens);\n', '        }\n', '        Transfer(address(0), recipient, tokens); //Transaction record for token perchaise\n', '        if (!founder.call.value(value)()) throw; //immediately send Ether to founder address\n', '        Buy(recipient, value, tokens); //Buy event\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * Emergency Stop ICO.\n', '     *\n', '     *  Applicable tests:\n', '     *\n', '     * - Test unhalting, buying, and succeeding\n', '     */\n', '    function halt() {\n', '        if (msg.sender!=founder) throw;\n', '        halted = true;\n', '    }\n', '\n', '    function unhalt() {\n', '        if (msg.sender!=founder) throw;\n', '        halted = false;\n', '    }\n', '\n', '    /**\n', '     * Change founder address (where ICO ETH is being forwarded).\n', '     *\n', '     * Applicable tests:\n', '     *\n', '     * - Test founder change by hacker\n', '     * - Test founder change\n', '     * - Test founder token allocation twice\n', '     *\n', '     */\n', '    function changeFounder(address newFounder) {\n', '        if (msg.sender!=founder) throw;\n', '        founder = newFounder;\n', '    }\n', '\n', '    function withdrawExtraToken(address recipient) public {\n', '      require(msg.sender == founder && block.number > endBlock && totalSupply < maxToken);\n', '\n', '      uint256 leftTokens = safeSub(maxToken, totalSupply);\n', '      balances[recipient] = safeAdd(balances[recipient], leftTokens);\n', '      totalSupply = maxToken;\n', '      Transfer(address(0), recipient, leftTokens);\n', '    }\n', '\n', '\n', '    /**\n', '     * ERC 20 Standard Token interface transfer function\n', '     *\n', '     * Prevent transfers until freeze period is over.\n', '     *\n', '     * Applicable tests:\n', '     *\n', '     * - Test restricted early transfer\n', '     * - Test transfer after restricted period\n', '     */\n', '    // function transfer(address _to, uint256 _value) returns (bool success) {\n', '    //     if (block.number <= startBlock + transferLockup && msg.sender!=founder) throw;\n', '    //     return super.transfer(_to, _value);\n', '    // }\n', '\n', '\n', '    /**\n', '     * ERC 20 Standard Token interface transfer function\n', '     *\n', '     * Prevent transfers until freeze period is over.\n', '     */\n', '    // function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '    //     if (block.number <= startBlock + transferLockup && msg.sender!=founder) throw;\n', '    //     return super.transferFrom(_from, _to, _value);\n', '    // }\n', '}']
