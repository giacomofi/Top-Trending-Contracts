['pragma solidity ^0.4.18;\n', '\n', '\n', 'contract InterfaceContentCreatorUniverse {\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function priceOf(uint256 _tokenId) public view returns (uint256 price);\n', '  function getNextPrice(uint price, uint _tokenId) public pure returns (uint);\n', '  function lastSubTokenBuyerOf(uint tokenId) public view returns(address);\n', '  function lastSubTokenCreatorOf(uint tokenId) public view returns(address);\n', '\n', '  //\n', '  function createCollectible(uint256 tokenId, uint256 _price, address creator, address owner) external ;\n', '}\n', '\n', 'contract InterfaceYCC {\n', '  function payForUpgrade(address user, uint price) external  returns (bool success);\n', '  function mintCoinsForOldCollectibles(address to, uint256 amount, address universeOwner) external  returns (bool success);\n', '  function tradePreToken(uint price, address buyer, address seller, uint burnPercent, address universeOwner) external;\n', '  function payoutForMining(address user, uint amount) external;\n', '  uint256 public totalSupply;\n', '}\n', '\n', 'contract InterfaceMining {\n', '  function createMineForToken(uint tokenId, uint level, uint xp, uint nextLevelBreak, uint blocknumber) external;\n', '  function payoutMining(uint tokenId, address owner, address newOwner) external;\n', '  function levelUpMining(uint tokenId) external;\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Owned {\n', '  // The addresses of the accounts (or contracts) that can execute actions within each roles.\n', '  address public ceoAddress;\n', '  address public cooAddress;\n', '  address private newCeoAddress;\n', '  address private newCooAddress;\n', '\n', '\n', '  function Owned() public {\n', '      ceoAddress = msg.sender;\n', '      cooAddress = msg.sender;\n', '  }\n', '\n', '  /*** ACCESS MODIFIERS ***/\n', '  /// @dev Access modifier for CEO-only functionality\n', '  modifier onlyCEO() {\n', '    require(msg.sender == ceoAddress);\n', '    _;\n', '  }\n', '\n', '  /// @dev Access modifier for COO-only functionality\n', '  modifier onlyCOO() {\n', '    require(msg.sender == cooAddress);\n', '    _;\n', '  }\n', '\n', '  /// Access modifier for contract owner only functionality\n', '  modifier onlyCLevel() {\n', '    require(\n', '      msg.sender == ceoAddress ||\n', '      msg.sender == cooAddress\n', '    );\n', '    _;\n', '  }\n', '\n', '  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n', '  /// @param _newCEO The address of the new CEO\n', '  function setCEO(address _newCEO) public onlyCEO {\n', '    require(_newCEO != address(0));\n', '    newCeoAddress = _newCEO;\n', '  }\n', '\n', '  /// @dev Assigns a new address to act as the COO. Only available to the current COO.\n', '  /// @param _newCOO The address of the new COO\n', '  function setCOO(address _newCOO) public onlyCEO {\n', '    require(_newCOO != address(0));\n', '    newCooAddress = _newCOO;\n', '  }\n', '\n', '  function acceptCeoOwnership() public {\n', '      require(msg.sender == newCeoAddress);\n', '      require(address(0) != newCeoAddress);\n', '      ceoAddress = newCeoAddress;\n', '      newCeoAddress = address(0);\n', '  }\n', '\n', '  function acceptCooOwnership() public {\n', '      require(msg.sender == newCooAddress);\n', '      require(address(0) != newCooAddress);\n', '      cooAddress = newCooAddress;\n', '      newCooAddress = address(0);\n', '  }\n', '\n', '  mapping (address => bool) public youCollectContracts;\n', '  function addYouCollectContract(address contractAddress, bool active) public onlyCOO {\n', '    youCollectContracts[contractAddress] = active;\n', '  }\n', '  modifier onlyYCC() {\n', '    require(youCollectContracts[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  InterfaceYCC ycc;\n', '  InterfaceContentCreatorUniverse yct;\n', '  InterfaceMining ycm;\n', '  function setMainYouCollectContractAddresses(address yccContract, address yctContract, address ycmContract, address[] otherContracts) public onlyCOO {\n', '    ycc = InterfaceYCC(yccContract);\n', '    yct = InterfaceContentCreatorUniverse(yctContract);\n', '    ycm = InterfaceMining(ycmContract);\n', '    youCollectContracts[yccContract] = true;\n', '    youCollectContracts[yctContract] = true;\n', '    youCollectContracts[ycmContract] = true;\n', '    for (uint16 index = 0; index < otherContracts.length; index++) {\n', '      youCollectContracts[otherContracts[index]] = true;\n', '    }\n', '  }\n', '  function setYccContractAddress(address yccContract) public onlyCOO {\n', '    ycc = InterfaceYCC(yccContract);\n', '    youCollectContracts[yccContract] = true;\n', '  }\n', '  function setYctContractAddress(address yctContract) public onlyCOO {\n', '    yct = InterfaceContentCreatorUniverse(yctContract);\n', '    youCollectContracts[yctContract] = true;\n', '  }\n', '  function setYcmContractAddress(address ycmContract) public onlyCOO {\n', '    ycm = InterfaceMining(ycmContract);\n', '    youCollectContracts[ycmContract] = true;\n', '  }\n', '\n', '}\n', '\n', 'contract TransferInterfaceERC721YC {\n', '  function transferToken(address to, uint256 tokenId) public returns (bool success);\n', '}\n', 'contract TransferInterfaceERC20 {\n', '  function transfer(address to, uint tokens) public returns (bool success);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ConsenSys/Tokens/blob/master/contracts/eip20/EIP20.sol\n', '// ----------------------------------------------------------------------------\n', 'contract YouCollectBase is Owned {\n', '  using SafeMath for uint256;\n', '\n', '  event RedButton(uint value, uint totalSupply);\n', '\n', '  // Payout\n', '  function payout(address _to) public onlyCLevel {\n', '    _payout(_to, this.balance);\n', '  }\n', '  function payout(address _to, uint amount) public onlyCLevel {\n', '    if (amount>this.balance)\n', '      amount = this.balance;\n', '    _payout(_to, amount);\n', '  }\n', '  function _payout(address _to, uint amount) private {\n', '    if (_to == address(0)) {\n', '      ceoAddress.transfer(amount);\n', '    } else {\n', '      _to.transfer(amount);\n', '    }\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Owner can transfer out any accidentally sent ERC20 tokens\n', '  // ------------------------------------------------------------------------\n', '  function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyCEO returns (bool success) {\n', '      return TransferInterfaceERC20(tokenAddress).transfer(ceoAddress, tokens);\n', '  }\n', '}\n', '\n', '\n', 'contract InterfaceSpawn {\n', '    uint public totalVotes;\n', '    function getVotes(uint id) public view returns (uint _votes);\n', '}\n', '\n', 'contract RocketsAndResources is YouCollectBase {\n', '    InterfaceSpawn subcontinentDiscoveryVoting;\n', '\n', '    event RocketLaunch(uint _rocketTokenId);\n', '    event RocketAddFunds(uint _rocketTokenId, uint _res, uint _yccAmount, address _sender);\n', '    event ResourcesDiscovered(uint _cityTokenId);\n', '    event ResourcesTransfered(uint cityTokenId, uint _rocketTokenId, uint _res, uint _count);\n', '\n', '    // ---------------------------\n', '    // Configuration    \n', '    bool public contractActive = false;\n', '\n', '    uint discoveryCooldownMin = 1500;\n', '    uint discoveryCooldownMax = 6000;\n', '    uint discoveryPriceMin =  2000000000000000000000000;\n', '    uint discoveryPriceMax = 25000000000000000000000000;\n', '\n', '    uint rocketTravelTimeA = 10000;         // in resource-traveltime-formula A/x\n', '    uint rocketTravelTimeMinBlocks = 24000; // added to traveltimes of resources\n', '    uint rocketEarliestLaunchTime;\n', '    // ---------------------------\n', '\n', '    mapping (uint => uint) discoveryLastBlock;\n', '    \n', '    mapping (uint => uint[]) cityResourceRichness;  // eg [1, 6, 0, 0] --- gets added to resource-counts on discovery\n', '    mapping (uint => uint[]) cityResourceCount;\n', '    \n', '\n', '    mapping (uint => uint[]) rocketResourceCount;\n', '    mapping (uint => uint[]) rocketResourceYccFunds;\n', '    mapping (uint => uint[]) rocketResourcePrices;\n', '\n', '    mapping (uint => uint) rocketLaunchBlock;           // when owner launched the rocket\n', '    mapping (uint => uint) rocketTravelTimeAtLaunch;    // when launched, we record the travel time (in case we change params in the formula)\n', '    mapping (uint => uint) rocketTravelTimeIncrease;\n', '    \n', '    uint64 constant MAX_SUBCONTINENT_INDEX = 10000000000000;\n', '    \n', '    function RocketsAndResources() public {\n', '        rocketEarliestLaunchTime = block.number + 36000; // earliest launch is 6 days after contract deploy\n', '    }\n', '\n', '    function setSubcontinentDiscoveryVotingContract(address spawnContract) public onlyCOO {\n', '        subcontinentDiscoveryVoting = InterfaceSpawn(spawnContract);\n', '    }\n', '\n', '    function setContractActive(bool contractActive_) public onlyCOO {\n', '        contractActive = contractActive_;\n', '    }\n', '\n', '    function setConfiguration(\n', '        uint discoveryCooldownMin_,\n', '        uint discoveryCooldownMax_,\n', '        uint discoveryPriceMin_,\n', '        uint discoveryPriceMax_,\n', '        uint rocketEarliestLaunchTime_,\n', '        uint rocketTravelTimeA_,\n', '        uint rocketTravelTimeMinBlocks_\n', '    ) public onlyYCC \n', '    {\n', '        discoveryCooldownMin = discoveryCooldownMin_;\n', '        discoveryCooldownMax = discoveryCooldownMax_;\n', '        discoveryPriceMin = discoveryPriceMin_;\n', '        discoveryPriceMax = discoveryPriceMax_;\n', '        rocketEarliestLaunchTime = rocketEarliestLaunchTime_;\n', '        rocketTravelTimeA = rocketTravelTimeA_;\n', '        rocketTravelTimeMinBlocks = rocketTravelTimeMinBlocks_;\n', '    }\n', '\n', '    function setCityValues(uint[] cityTokenIds_, uint resourceLen_, uint[] resourceRichness_, uint[] resourceCounts_) public onlyYCC {\n', '        uint len = cityTokenIds_.length;\n', '        for (uint i = 0; i < len; i++) {\n', '            uint city = cityTokenIds_[i];\n', '            uint resourceBaseIdx = i * resourceLen_;\n', '            cityResourceRichness[city] = new uint[](resourceLen_);\n', '            cityResourceCount[city] = new uint[](resourceLen_);\n', '            for (uint j = 0; j < resourceLen_; j++) {\n', '                cityResourceRichness[city][j] = resourceRichness_[resourceBaseIdx + j];\n', '                cityResourceCount[city][j] = resourceCounts_[resourceBaseIdx + j];\n', '            }\n', '        }\n', '    }\n', '\n', '    function setRocketValues(uint[] rocketTokenIds_, uint resourceLen_, uint[] resourceYccFunds_, uint[] resourcePrices_, uint[] resourceCounts_) public onlyYCC {\n', '        uint len = rocketTokenIds_.length;\n', '        for (uint i = 0; i < len; i++) {\n', '            uint rocket = rocketTokenIds_[i];\n', '            uint resourceBaseIdx = i * resourceLen_;\n', '            rocketResourceCount[rocket] = new uint[](resourceLen_);\n', '            rocketResourcePrices[rocket] = new uint[](resourceLen_);\n', '            rocketResourceYccFunds[rocket] = new uint[](resourceLen_);\n', '            for (uint j = 0; j < resourceLen_; j++) {\n', '                rocketResourceCount[rocket][j] = resourceCounts_[resourceBaseIdx + j];\n', '                rocketResourcePrices[rocket][j] = resourcePrices_[resourceBaseIdx + j];\n', '                rocketResourceYccFunds[rocket][j] = resourceYccFunds_[resourceBaseIdx + j];\n', '            }\n', '        }\n', '    }\n', '\n', '    function getCityResources(uint cityTokenId_) public view returns (uint[] _resourceCounts) {\n', '        _resourceCounts = cityResourceCount[cityTokenId_];\n', '    }\n', '\n', '    function getCityResourceRichness(uint cityTokenId_) public onlyYCC view returns (uint[] _resourceRichness) {\n', '        _resourceRichness = cityResourceRichness[cityTokenId_];\n', '    }\n', '\n', '    function cityTransferResources(uint cityTokenId_, uint rocketTokenId_, uint res_, uint count_) public {\n', '        require(contractActive);\n', '        require(yct.ownerOf(cityTokenId_)==msg.sender);\n', '\n', '        uint yccAmount = rocketResourcePrices[rocketTokenId_][res_] * count_;\n', '        \n', '        require(cityResourceCount[cityTokenId_][res_] >= count_);\n', '        require(rocketResourceYccFunds[rocketTokenId_][res_] >= yccAmount);\n', '\n', '        cityResourceCount[cityTokenId_][res_] -= count_;\n', '        rocketResourceCount[rocketTokenId_][res_] += count_;\n', '        rocketResourceYccFunds[rocketTokenId_][res_] -= yccAmount;\n', '\n', '        ycc.payoutForMining(msg.sender, yccAmount);\n', '\n', '        ResourcesTransfered(cityTokenId_, rocketTokenId_, res_, count_);\n', '    }\n', '    \n', '    /*\n', '        Resource Discovery\n', '    */\n', '    function discoveryCooldown(uint cityTokenId_) public view returns (uint _cooldownBlocks) {\n', '        uint totalVotes = subcontinentDiscoveryVoting.totalVotes();\n', '        if (totalVotes <= 0) \n', '            totalVotes = 1;\n', '        uint range = discoveryCooldownMax-discoveryCooldownMin;\n', '        uint subcontinentId = cityTokenId_ % MAX_SUBCONTINENT_INDEX;\n', '        _cooldownBlocks = range - (subcontinentDiscoveryVoting.getVotes(subcontinentId).mul(range)).div(totalVotes) + discoveryCooldownMin;\n', '    }\n', '    function discoveryPrice(uint cityTokenId_) public view returns (uint _price) {\n', '        uint totalVotes = subcontinentDiscoveryVoting.totalVotes();\n', '        if (totalVotes <= 0) \n', '            totalVotes = 1;\n', '        uint range = discoveryPriceMax-discoveryPriceMin;\n', '        uint subcontinentId = cityTokenId_ % MAX_SUBCONTINENT_INDEX;\n', '        _price = range - (subcontinentDiscoveryVoting.getVotes(subcontinentId).mul(range)).div(totalVotes) + discoveryPriceMin;\n', '    }\n', '\n', '    function discoveryBlocksUntilAllowed(uint cityTokenId_) public view returns (uint _blocks) {\n', '        uint blockNextDiscoveryAllowed = discoveryLastBlock[cityTokenId_] + discoveryCooldown(cityTokenId_);\n', '        if (block.number > blockNextDiscoveryAllowed) {\n', '            _blocks = 0;\n', '        } else {\n', '            _blocks = blockNextDiscoveryAllowed - block.number;\n', '        }\n', '    }\n', '    \n', '    function discoverResources(uint cityTokenId_) public {\n', '        require(contractActive);\n', '        require(discoveryBlocksUntilAllowed(cityTokenId_) == 0);\n', '\n', '        uint yccAmount = this.discoveryPrice(cityTokenId_);\n', '        ycc.payForUpgrade(msg.sender, yccAmount);\n', '        \n', '        discoveryLastBlock[cityTokenId_] = block.number;\n', '        \n', '        uint resourceRichnessLen = cityResourceRichness[cityTokenId_].length;\n', '        for (uint i = 0; i < resourceRichnessLen; i++) {\n', '            cityResourceCount[cityTokenId_][i] += cityResourceRichness[cityTokenId_][i];\n', '        }\n', '        ResourcesDiscovered(cityTokenId_);\n', '    }\n', '    \n', '    /*\n', '        Rockets\n', '    */\n', '    function rocketTravelTimeByResource(uint rocketTokenId_, uint res_) public view returns (uint _blocks) {\n', '        _blocks = rocketTravelTimeA * 6000 / rocketResourceCount[rocketTokenId_][res_];\n', '    }\n', '    function rocketTravelTime(uint rocketTokenId_) public view returns (uint _travelTimeBlocks) {\n', '        _travelTimeBlocks = rocketTravelTimeMinBlocks + rocketTravelTimeIncrease[rocketTokenId_];\n', '        \n', '        uint resourceLen = rocketResourceCount[rocketTokenId_].length;\n', '        for (uint i = 0; i < resourceLen; i++) {\n', '            _travelTimeBlocks += rocketTravelTimeA * 6000 / rocketResourceCount[rocketTokenId_][i];\n', '        }\n', '    }\n', '    function rocketBlocksUntilAllowedToLaunch() public view returns (uint _blocksUntilAllowed) {\n', '        if (block.number > rocketEarliestLaunchTime) {\n', '            _blocksUntilAllowed = 0;\n', '        } else {\n', '            _blocksUntilAllowed = rocketEarliestLaunchTime - block.number;\n', '        }\n', '    }\n', '    function rocketIsLaunched(uint rocketTokenId_) public view returns (bool _isLaunched) { \n', '        _isLaunched = rocketLaunchBlock[rocketTokenId_] > 0;\n', '    }\n', '    function rocketArrivalTime(uint rocketTokenId_) public view returns (uint) {\n', '        require(rocketLaunchBlock[rocketTokenId_] > 0);\n', '        return rocketLaunchBlock[rocketTokenId_] + rocketTravelTimeAtLaunch[rocketTokenId_];\n', '    }\n', '    function increaseArrivalTime(uint rocketTokenId_, uint blocks) public onlyYCC {\n', '        if (rocketLaunchBlock[rocketTokenId_] > 0)\n', '            rocketTravelTimeAtLaunch[rocketTokenId_] = rocketTravelTimeAtLaunch[rocketTokenId_] + blocks;\n', '        else\n', '            rocketTravelTimeIncrease[rocketTokenId_] = rocketTravelTimeIncrease[rocketTokenId_] + blocks;\n', '    }\n', '    function decreaseArrivalTime(uint rocketTokenId_, uint blocks) public onlyYCC {\n', '        if (rocketLaunchBlock[rocketTokenId_] > 0)\n', '            rocketTravelTimeAtLaunch[rocketTokenId_] = rocketTravelTimeAtLaunch[rocketTokenId_] - blocks;\n', '        else\n', '            rocketTravelTimeIncrease[rocketTokenId_] = rocketTravelTimeIncrease[rocketTokenId_] - blocks;\n', '    }\n', '    function rocketTimeUntilMoon(uint rocketTokenId_) public view returns (uint _untilMoonBlocks) {\n', '        uint arrivalTime = rocketArrivalTime(rocketTokenId_);\n', '        if (block.number > arrivalTime) {\n', '            _untilMoonBlocks = 0;\n', '        } else {\n', '            _untilMoonBlocks = arrivalTime - block.number;\n', '        }\n', '    }\n', '    function rocketGetResourceValues(uint rocketTokenId_) public view returns (uint[] _yccAmounts, uint[] _resourcePrices, uint[] _resourceCounts) {\n', '        _yccAmounts = rocketResourceYccFunds[rocketTokenId_];\n', '        _resourcePrices = rocketResourcePrices[rocketTokenId_];\n', '        _resourceCounts = rocketResourceCount[rocketTokenId_];\n', '    }\n', '\n', '\n', '    function rocketSetResourcePrice(uint rocketTokenId_, uint res_, uint yccPrice_) public {\n', '        require(contractActive);\n', '        require(yct.ownerOf(rocketTokenId_)==msg.sender);\n', '        require(yccPrice_ > 0);\n', '        rocketResourcePrices[rocketTokenId_][res_] = yccPrice_;\n', '    }\n', '\n', '    function rocketAddFunds(uint rocketTokenId_, uint res_, uint yccAmount_) public {\n', '        require(contractActive);\n', '        ycc.payForUpgrade(msg.sender, yccAmount_);\n', '        rocketResourceYccFunds[rocketTokenId_][res_] += yccAmount_;\n', '\n', '        RocketAddFunds(rocketTokenId_, res_, yccAmount_, msg.sender);\n', '    }\n', '\n', '    function rocketLaunch(uint rocketTokenId_) public {\n', '        require(contractActive);\n', '        require(block.number > rocketEarliestLaunchTime);\n', '        require(yct.ownerOf(rocketTokenId_)==msg.sender);\n', '\n', '        rocketLaunchBlock[rocketTokenId_] = block.number;\n', '        rocketTravelTimeAtLaunch[rocketTokenId_] = rocketTravelTime(rocketTokenId_);\n', '\n', '        RocketLaunch(rocketTokenId_);\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', 'contract InterfaceContentCreatorUniverse {\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function priceOf(uint256 _tokenId) public view returns (uint256 price);\n', '  function getNextPrice(uint price, uint _tokenId) public pure returns (uint);\n', '  function lastSubTokenBuyerOf(uint tokenId) public view returns(address);\n', '  function lastSubTokenCreatorOf(uint tokenId) public view returns(address);\n', '\n', '  //\n', '  function createCollectible(uint256 tokenId, uint256 _price, address creator, address owner) external ;\n', '}\n', '\n', 'contract InterfaceYCC {\n', '  function payForUpgrade(address user, uint price) external  returns (bool success);\n', '  function mintCoinsForOldCollectibles(address to, uint256 amount, address universeOwner) external  returns (bool success);\n', '  function tradePreToken(uint price, address buyer, address seller, uint burnPercent, address universeOwner) external;\n', '  function payoutForMining(address user, uint amount) external;\n', '  uint256 public totalSupply;\n', '}\n', '\n', 'contract InterfaceMining {\n', '  function createMineForToken(uint tokenId, uint level, uint xp, uint nextLevelBreak, uint blocknumber) external;\n', '  function payoutMining(uint tokenId, address owner, address newOwner) external;\n', '  function levelUpMining(uint tokenId) external;\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Owned {\n', '  // The addresses of the accounts (or contracts) that can execute actions within each roles.\n', '  address public ceoAddress;\n', '  address public cooAddress;\n', '  address private newCeoAddress;\n', '  address private newCooAddress;\n', '\n', '\n', '  function Owned() public {\n', '      ceoAddress = msg.sender;\n', '      cooAddress = msg.sender;\n', '  }\n', '\n', '  /*** ACCESS MODIFIERS ***/\n', '  /// @dev Access modifier for CEO-only functionality\n', '  modifier onlyCEO() {\n', '    require(msg.sender == ceoAddress);\n', '    _;\n', '  }\n', '\n', '  /// @dev Access modifier for COO-only functionality\n', '  modifier onlyCOO() {\n', '    require(msg.sender == cooAddress);\n', '    _;\n', '  }\n', '\n', '  /// Access modifier for contract owner only functionality\n', '  modifier onlyCLevel() {\n', '    require(\n', '      msg.sender == ceoAddress ||\n', '      msg.sender == cooAddress\n', '    );\n', '    _;\n', '  }\n', '\n', '  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n', '  /// @param _newCEO The address of the new CEO\n', '  function setCEO(address _newCEO) public onlyCEO {\n', '    require(_newCEO != address(0));\n', '    newCeoAddress = _newCEO;\n', '  }\n', '\n', '  /// @dev Assigns a new address to act as the COO. Only available to the current COO.\n', '  /// @param _newCOO The address of the new COO\n', '  function setCOO(address _newCOO) public onlyCEO {\n', '    require(_newCOO != address(0));\n', '    newCooAddress = _newCOO;\n', '  }\n', '\n', '  function acceptCeoOwnership() public {\n', '      require(msg.sender == newCeoAddress);\n', '      require(address(0) != newCeoAddress);\n', '      ceoAddress = newCeoAddress;\n', '      newCeoAddress = address(0);\n', '  }\n', '\n', '  function acceptCooOwnership() public {\n', '      require(msg.sender == newCooAddress);\n', '      require(address(0) != newCooAddress);\n', '      cooAddress = newCooAddress;\n', '      newCooAddress = address(0);\n', '  }\n', '\n', '  mapping (address => bool) public youCollectContracts;\n', '  function addYouCollectContract(address contractAddress, bool active) public onlyCOO {\n', '    youCollectContracts[contractAddress] = active;\n', '  }\n', '  modifier onlyYCC() {\n', '    require(youCollectContracts[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  InterfaceYCC ycc;\n', '  InterfaceContentCreatorUniverse yct;\n', '  InterfaceMining ycm;\n', '  function setMainYouCollectContractAddresses(address yccContract, address yctContract, address ycmContract, address[] otherContracts) public onlyCOO {\n', '    ycc = InterfaceYCC(yccContract);\n', '    yct = InterfaceContentCreatorUniverse(yctContract);\n', '    ycm = InterfaceMining(ycmContract);\n', '    youCollectContracts[yccContract] = true;\n', '    youCollectContracts[yctContract] = true;\n', '    youCollectContracts[ycmContract] = true;\n', '    for (uint16 index = 0; index < otherContracts.length; index++) {\n', '      youCollectContracts[otherContracts[index]] = true;\n', '    }\n', '  }\n', '  function setYccContractAddress(address yccContract) public onlyCOO {\n', '    ycc = InterfaceYCC(yccContract);\n', '    youCollectContracts[yccContract] = true;\n', '  }\n', '  function setYctContractAddress(address yctContract) public onlyCOO {\n', '    yct = InterfaceContentCreatorUniverse(yctContract);\n', '    youCollectContracts[yctContract] = true;\n', '  }\n', '  function setYcmContractAddress(address ycmContract) public onlyCOO {\n', '    ycm = InterfaceMining(ycmContract);\n', '    youCollectContracts[ycmContract] = true;\n', '  }\n', '\n', '}\n', '\n', 'contract TransferInterfaceERC721YC {\n', '  function transferToken(address to, uint256 tokenId) public returns (bool success);\n', '}\n', 'contract TransferInterfaceERC20 {\n', '  function transfer(address to, uint tokens) public returns (bool success);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ConsenSys/Tokens/blob/master/contracts/eip20/EIP20.sol\n', '// ----------------------------------------------------------------------------\n', 'contract YouCollectBase is Owned {\n', '  using SafeMath for uint256;\n', '\n', '  event RedButton(uint value, uint totalSupply);\n', '\n', '  // Payout\n', '  function payout(address _to) public onlyCLevel {\n', '    _payout(_to, this.balance);\n', '  }\n', '  function payout(address _to, uint amount) public onlyCLevel {\n', '    if (amount>this.balance)\n', '      amount = this.balance;\n', '    _payout(_to, amount);\n', '  }\n', '  function _payout(address _to, uint amount) private {\n', '    if (_to == address(0)) {\n', '      ceoAddress.transfer(amount);\n', '    } else {\n', '      _to.transfer(amount);\n', '    }\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Owner can transfer out any accidentally sent ERC20 tokens\n', '  // ------------------------------------------------------------------------\n', '  function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyCEO returns (bool success) {\n', '      return TransferInterfaceERC20(tokenAddress).transfer(ceoAddress, tokens);\n', '  }\n', '}\n', '\n', '\n', 'contract InterfaceSpawn {\n', '    uint public totalVotes;\n', '    function getVotes(uint id) public view returns (uint _votes);\n', '}\n', '\n', 'contract RocketsAndResources is YouCollectBase {\n', '    InterfaceSpawn subcontinentDiscoveryVoting;\n', '\n', '    event RocketLaunch(uint _rocketTokenId);\n', '    event RocketAddFunds(uint _rocketTokenId, uint _res, uint _yccAmount, address _sender);\n', '    event ResourcesDiscovered(uint _cityTokenId);\n', '    event ResourcesTransfered(uint cityTokenId, uint _rocketTokenId, uint _res, uint _count);\n', '\n', '    // ---------------------------\n', '    // Configuration    \n', '    bool public contractActive = false;\n', '\n', '    uint discoveryCooldownMin = 1500;\n', '    uint discoveryCooldownMax = 6000;\n', '    uint discoveryPriceMin =  2000000000000000000000000;\n', '    uint discoveryPriceMax = 25000000000000000000000000;\n', '\n', '    uint rocketTravelTimeA = 10000;         // in resource-traveltime-formula A/x\n', '    uint rocketTravelTimeMinBlocks = 24000; // added to traveltimes of resources\n', '    uint rocketEarliestLaunchTime;\n', '    // ---------------------------\n', '\n', '    mapping (uint => uint) discoveryLastBlock;\n', '    \n', '    mapping (uint => uint[]) cityResourceRichness;  // eg [1, 6, 0, 0] --- gets added to resource-counts on discovery\n', '    mapping (uint => uint[]) cityResourceCount;\n', '    \n', '\n', '    mapping (uint => uint[]) rocketResourceCount;\n', '    mapping (uint => uint[]) rocketResourceYccFunds;\n', '    mapping (uint => uint[]) rocketResourcePrices;\n', '\n', '    mapping (uint => uint) rocketLaunchBlock;           // when owner launched the rocket\n', '    mapping (uint => uint) rocketTravelTimeAtLaunch;    // when launched, we record the travel time (in case we change params in the formula)\n', '    mapping (uint => uint) rocketTravelTimeIncrease;\n', '    \n', '    uint64 constant MAX_SUBCONTINENT_INDEX = 10000000000000;\n', '    \n', '    function RocketsAndResources() public {\n', '        rocketEarliestLaunchTime = block.number + 36000; // earliest launch is 6 days after contract deploy\n', '    }\n', '\n', '    function setSubcontinentDiscoveryVotingContract(address spawnContract) public onlyCOO {\n', '        subcontinentDiscoveryVoting = InterfaceSpawn(spawnContract);\n', '    }\n', '\n', '    function setContractActive(bool contractActive_) public onlyCOO {\n', '        contractActive = contractActive_;\n', '    }\n', '\n', '    function setConfiguration(\n', '        uint discoveryCooldownMin_,\n', '        uint discoveryCooldownMax_,\n', '        uint discoveryPriceMin_,\n', '        uint discoveryPriceMax_,\n', '        uint rocketEarliestLaunchTime_,\n', '        uint rocketTravelTimeA_,\n', '        uint rocketTravelTimeMinBlocks_\n', '    ) public onlyYCC \n', '    {\n', '        discoveryCooldownMin = discoveryCooldownMin_;\n', '        discoveryCooldownMax = discoveryCooldownMax_;\n', '        discoveryPriceMin = discoveryPriceMin_;\n', '        discoveryPriceMax = discoveryPriceMax_;\n', '        rocketEarliestLaunchTime = rocketEarliestLaunchTime_;\n', '        rocketTravelTimeA = rocketTravelTimeA_;\n', '        rocketTravelTimeMinBlocks = rocketTravelTimeMinBlocks_;\n', '    }\n', '\n', '    function setCityValues(uint[] cityTokenIds_, uint resourceLen_, uint[] resourceRichness_, uint[] resourceCounts_) public onlyYCC {\n', '        uint len = cityTokenIds_.length;\n', '        for (uint i = 0; i < len; i++) {\n', '            uint city = cityTokenIds_[i];\n', '            uint resourceBaseIdx = i * resourceLen_;\n', '            cityResourceRichness[city] = new uint[](resourceLen_);\n', '            cityResourceCount[city] = new uint[](resourceLen_);\n', '            for (uint j = 0; j < resourceLen_; j++) {\n', '                cityResourceRichness[city][j] = resourceRichness_[resourceBaseIdx + j];\n', '                cityResourceCount[city][j] = resourceCounts_[resourceBaseIdx + j];\n', '            }\n', '        }\n', '    }\n', '\n', '    function setRocketValues(uint[] rocketTokenIds_, uint resourceLen_, uint[] resourceYccFunds_, uint[] resourcePrices_, uint[] resourceCounts_) public onlyYCC {\n', '        uint len = rocketTokenIds_.length;\n', '        for (uint i = 0; i < len; i++) {\n', '            uint rocket = rocketTokenIds_[i];\n', '            uint resourceBaseIdx = i * resourceLen_;\n', '            rocketResourceCount[rocket] = new uint[](resourceLen_);\n', '            rocketResourcePrices[rocket] = new uint[](resourceLen_);\n', '            rocketResourceYccFunds[rocket] = new uint[](resourceLen_);\n', '            for (uint j = 0; j < resourceLen_; j++) {\n', '                rocketResourceCount[rocket][j] = resourceCounts_[resourceBaseIdx + j];\n', '                rocketResourcePrices[rocket][j] = resourcePrices_[resourceBaseIdx + j];\n', '                rocketResourceYccFunds[rocket][j] = resourceYccFunds_[resourceBaseIdx + j];\n', '            }\n', '        }\n', '    }\n', '\n', '    function getCityResources(uint cityTokenId_) public view returns (uint[] _resourceCounts) {\n', '        _resourceCounts = cityResourceCount[cityTokenId_];\n', '    }\n', '\n', '    function getCityResourceRichness(uint cityTokenId_) public onlyYCC view returns (uint[] _resourceRichness) {\n', '        _resourceRichness = cityResourceRichness[cityTokenId_];\n', '    }\n', '\n', '    function cityTransferResources(uint cityTokenId_, uint rocketTokenId_, uint res_, uint count_) public {\n', '        require(contractActive);\n', '        require(yct.ownerOf(cityTokenId_)==msg.sender);\n', '\n', '        uint yccAmount = rocketResourcePrices[rocketTokenId_][res_] * count_;\n', '        \n', '        require(cityResourceCount[cityTokenId_][res_] >= count_);\n', '        require(rocketResourceYccFunds[rocketTokenId_][res_] >= yccAmount);\n', '\n', '        cityResourceCount[cityTokenId_][res_] -= count_;\n', '        rocketResourceCount[rocketTokenId_][res_] += count_;\n', '        rocketResourceYccFunds[rocketTokenId_][res_] -= yccAmount;\n', '\n', '        ycc.payoutForMining(msg.sender, yccAmount);\n', '\n', '        ResourcesTransfered(cityTokenId_, rocketTokenId_, res_, count_);\n', '    }\n', '    \n', '    /*\n', '        Resource Discovery\n', '    */\n', '    function discoveryCooldown(uint cityTokenId_) public view returns (uint _cooldownBlocks) {\n', '        uint totalVotes = subcontinentDiscoveryVoting.totalVotes();\n', '        if (totalVotes <= 0) \n', '            totalVotes = 1;\n', '        uint range = discoveryCooldownMax-discoveryCooldownMin;\n', '        uint subcontinentId = cityTokenId_ % MAX_SUBCONTINENT_INDEX;\n', '        _cooldownBlocks = range - (subcontinentDiscoveryVoting.getVotes(subcontinentId).mul(range)).div(totalVotes) + discoveryCooldownMin;\n', '    }\n', '    function discoveryPrice(uint cityTokenId_) public view returns (uint _price) {\n', '        uint totalVotes = subcontinentDiscoveryVoting.totalVotes();\n', '        if (totalVotes <= 0) \n', '            totalVotes = 1;\n', '        uint range = discoveryPriceMax-discoveryPriceMin;\n', '        uint subcontinentId = cityTokenId_ % MAX_SUBCONTINENT_INDEX;\n', '        _price = range - (subcontinentDiscoveryVoting.getVotes(subcontinentId).mul(range)).div(totalVotes) + discoveryPriceMin;\n', '    }\n', '\n', '    function discoveryBlocksUntilAllowed(uint cityTokenId_) public view returns (uint _blocks) {\n', '        uint blockNextDiscoveryAllowed = discoveryLastBlock[cityTokenId_] + discoveryCooldown(cityTokenId_);\n', '        if (block.number > blockNextDiscoveryAllowed) {\n', '            _blocks = 0;\n', '        } else {\n', '            _blocks = blockNextDiscoveryAllowed - block.number;\n', '        }\n', '    }\n', '    \n', '    function discoverResources(uint cityTokenId_) public {\n', '        require(contractActive);\n', '        require(discoveryBlocksUntilAllowed(cityTokenId_) == 0);\n', '\n', '        uint yccAmount = this.discoveryPrice(cityTokenId_);\n', '        ycc.payForUpgrade(msg.sender, yccAmount);\n', '        \n', '        discoveryLastBlock[cityTokenId_] = block.number;\n', '        \n', '        uint resourceRichnessLen = cityResourceRichness[cityTokenId_].length;\n', '        for (uint i = 0; i < resourceRichnessLen; i++) {\n', '            cityResourceCount[cityTokenId_][i] += cityResourceRichness[cityTokenId_][i];\n', '        }\n', '        ResourcesDiscovered(cityTokenId_);\n', '    }\n', '    \n', '    /*\n', '        Rockets\n', '    */\n', '    function rocketTravelTimeByResource(uint rocketTokenId_, uint res_) public view returns (uint _blocks) {\n', '        _blocks = rocketTravelTimeA * 6000 / rocketResourceCount[rocketTokenId_][res_];\n', '    }\n', '    function rocketTravelTime(uint rocketTokenId_) public view returns (uint _travelTimeBlocks) {\n', '        _travelTimeBlocks = rocketTravelTimeMinBlocks + rocketTravelTimeIncrease[rocketTokenId_];\n', '        \n', '        uint resourceLen = rocketResourceCount[rocketTokenId_].length;\n', '        for (uint i = 0; i < resourceLen; i++) {\n', '            _travelTimeBlocks += rocketTravelTimeA * 6000 / rocketResourceCount[rocketTokenId_][i];\n', '        }\n', '    }\n', '    function rocketBlocksUntilAllowedToLaunch() public view returns (uint _blocksUntilAllowed) {\n', '        if (block.number > rocketEarliestLaunchTime) {\n', '            _blocksUntilAllowed = 0;\n', '        } else {\n', '            _blocksUntilAllowed = rocketEarliestLaunchTime - block.number;\n', '        }\n', '    }\n', '    function rocketIsLaunched(uint rocketTokenId_) public view returns (bool _isLaunched) { \n', '        _isLaunched = rocketLaunchBlock[rocketTokenId_] > 0;\n', '    }\n', '    function rocketArrivalTime(uint rocketTokenId_) public view returns (uint) {\n', '        require(rocketLaunchBlock[rocketTokenId_] > 0);\n', '        return rocketLaunchBlock[rocketTokenId_] + rocketTravelTimeAtLaunch[rocketTokenId_];\n', '    }\n', '    function increaseArrivalTime(uint rocketTokenId_, uint blocks) public onlyYCC {\n', '        if (rocketLaunchBlock[rocketTokenId_] > 0)\n', '            rocketTravelTimeAtLaunch[rocketTokenId_] = rocketTravelTimeAtLaunch[rocketTokenId_] + blocks;\n', '        else\n', '            rocketTravelTimeIncrease[rocketTokenId_] = rocketTravelTimeIncrease[rocketTokenId_] + blocks;\n', '    }\n', '    function decreaseArrivalTime(uint rocketTokenId_, uint blocks) public onlyYCC {\n', '        if (rocketLaunchBlock[rocketTokenId_] > 0)\n', '            rocketTravelTimeAtLaunch[rocketTokenId_] = rocketTravelTimeAtLaunch[rocketTokenId_] - blocks;\n', '        else\n', '            rocketTravelTimeIncrease[rocketTokenId_] = rocketTravelTimeIncrease[rocketTokenId_] - blocks;\n', '    }\n', '    function rocketTimeUntilMoon(uint rocketTokenId_) public view returns (uint _untilMoonBlocks) {\n', '        uint arrivalTime = rocketArrivalTime(rocketTokenId_);\n', '        if (block.number > arrivalTime) {\n', '            _untilMoonBlocks = 0;\n', '        } else {\n', '            _untilMoonBlocks = arrivalTime - block.number;\n', '        }\n', '    }\n', '    function rocketGetResourceValues(uint rocketTokenId_) public view returns (uint[] _yccAmounts, uint[] _resourcePrices, uint[] _resourceCounts) {\n', '        _yccAmounts = rocketResourceYccFunds[rocketTokenId_];\n', '        _resourcePrices = rocketResourcePrices[rocketTokenId_];\n', '        _resourceCounts = rocketResourceCount[rocketTokenId_];\n', '    }\n', '\n', '\n', '    function rocketSetResourcePrice(uint rocketTokenId_, uint res_, uint yccPrice_) public {\n', '        require(contractActive);\n', '        require(yct.ownerOf(rocketTokenId_)==msg.sender);\n', '        require(yccPrice_ > 0);\n', '        rocketResourcePrices[rocketTokenId_][res_] = yccPrice_;\n', '    }\n', '\n', '    function rocketAddFunds(uint rocketTokenId_, uint res_, uint yccAmount_) public {\n', '        require(contractActive);\n', '        ycc.payForUpgrade(msg.sender, yccAmount_);\n', '        rocketResourceYccFunds[rocketTokenId_][res_] += yccAmount_;\n', '\n', '        RocketAddFunds(rocketTokenId_, res_, yccAmount_, msg.sender);\n', '    }\n', '\n', '    function rocketLaunch(uint rocketTokenId_) public {\n', '        require(contractActive);\n', '        require(block.number > rocketEarliestLaunchTime);\n', '        require(yct.ownerOf(rocketTokenId_)==msg.sender);\n', '\n', '        rocketLaunchBlock[rocketTokenId_] = block.number;\n', '        rocketTravelTimeAtLaunch[rocketTokenId_] = rocketTravelTime(rocketTokenId_);\n', '\n', '        RocketLaunch(rocketTokenId_);\n', '    }\n', '}']
