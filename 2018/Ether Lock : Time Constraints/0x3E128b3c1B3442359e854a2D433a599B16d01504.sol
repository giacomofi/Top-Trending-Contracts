['pragma solidity ^0.4.18;\n', '\n', '/*\n', '项目：以太世界信息链项目，中国公司网\n', '时间：2018-03-23\n', ' */\n', '\n', 'contract chinainc{\n', '    struct ProjectData{\n', '       string Descript;          //项目描述\n', '       address dapp_address;     //项目地址（ENS域名，或者42位以太坊项目合约地址）\n', '       string dapp_ens;\n', '       string dapp_jsoninfo;     //项目ABI json信息\n', '       address Owner;            //项目持有者钱包地址\n', '    }\n', '    \n', '    mapping(string => ProjectData) ProjectDatas;\n', '    address creater;                \n', '    string  public PlatformInformation=""; \n', '    string  public Hotlist;                \n', '    string[] public AllProjectList; \n', '\n', '    //event loginfo(string title,string info);\n', '\n', '    modifier OnlyCreater() { // Modifier\n', '        require(msg.sender == creater);\n', '        //if (msg.sender != creater) return;\n', '        _;\n', '    }   \n', '    \n', '    function chinainc() public {\n', '        creater=msg.sender;\n', '    }\n', '    \n', '    //查询一个项目名称是否已经存在,true-存在,false-不存在\n', '    function __FindProjects(string ProjectName) constant private returns(bool r) {\n', '        if(bytes(ProjectName).length==0) return false;\n', '        if(bytes(ProjectDatas[ProjectName].Descript).length==0) return false;\n', '        return true;\n', '    }\n', '    \n', '    /*\n', '    创建一个新项目\n', '    */   \n', '    function InsertProject(string ProjectName,string Descript,address dapp_address,string dapp_ens,string dapp_jsoninfo,address OwnerAddress) OnlyCreater public \n', '    {\n', '        if(__FindProjects(ProjectName)==false){\n', '            if(bytes(Descript).length!=0) {\n', '                ProjectDatas[ProjectName].Descript = Descript;\n', '            }else{\n', '                ProjectDatas[ProjectName].Descript = ProjectName;\n', '            }\n', '            ProjectDatas[ProjectName].dapp_address = dapp_address;\n', '            ProjectDatas[ProjectName].dapp_ens = dapp_ens;\n', '            ProjectDatas[ProjectName].dapp_jsoninfo = dapp_jsoninfo;\n', '            ProjectDatas[ProjectName].Owner = OwnerAddress;\n', '            \n', '            AllProjectList.push(ProjectName);\n', '        }else{\n', '            //loginfo(NewProjectName,"项目已存在");\n', '        }\n', '    }\n', '    \n', '    /*\n', '    删除项目信息\n', '    */\n', '    function DeleteProject(string ProjectName) OnlyCreater public{\n', '        delete ProjectDatas[ProjectName];\n', '        uint len = AllProjectList.length; \n', '        for(uint index=0;index<len;index++){\n', '           if(keccak256(ProjectName)==keccak256(AllProjectList[index])){\n', '               if(index==0){\n', '                    AllProjectList.length = 0;   \n', '               }else{\n', '                    for(uint i=index;i<len-1;i++){\n', '                        AllProjectList[i] = AllProjectList[i+1];\n', '                    }\n', '                    delete AllProjectList[len-1]; \n', '                    AllProjectList.length--;\n', '               }\n', '               break; \n', '           } \n', '        }\n', '    }\n', '\n', '\n', '    function SetDescript(string ProjectName,string Descript) OnlyCreater public \n', '    {\n', '        if(__FindProjects(ProjectName)==true){\n', '            if(bytes(Descript).length!=0) {\n', '                ProjectDatas[ProjectName].Descript = Descript;\n', '            }else{\n', '                ProjectDatas[ProjectName].Descript = ProjectName;\n', '            }\n', '        }\n', '    }\n', '\n', '    function SetDappinfo(string ProjectName,address dapp_address,string dapp_ens,string dapp_jsoninfo) OnlyCreater public \n', '    {\n', '        if(__FindProjects(ProjectName)==true){\n', '            ProjectDatas[ProjectName].dapp_address = dapp_address;\n', '            ProjectDatas[ProjectName].dapp_ens = dapp_ens;\n', '            ProjectDatas[ProjectName].dapp_jsoninfo = dapp_jsoninfo;\n', '        }\n', '    }\n', '\n', '    function SetOwner(string ProjectName,address Owner) OnlyCreater public \n', '    {\n', '        if(__FindProjects(ProjectName)==true){\n', '            ProjectDatas[ProjectName].Owner = Owner;\n', '        }\n', '    }\n', '\n', '    /*\n', '    设置Hotlists推荐项目列表\n', '    */\n', '    function SetHotLists(string Hotlists)  OnlyCreater public {\n', '        Hotlist = Hotlists;\n', '    }\n', '    \n', '    /*\n', '    修改平台介绍\n', '    */\n', '    function SetPlatformInformation(string Info) OnlyCreater public{\n', '        PlatformInformation=Info;\n', '    }\n', '\n', '    //kill this\n', '    function KillContract() OnlyCreater public{\n', '        selfdestruct(creater);\n', '    }\n', '    \n', '\n', '    //查询一个项目名称是否已经存在\n', '    function GetDescript(string ProjectName) constant public returns(string) {\n', '        if(__FindProjects(ProjectName)==true){\n', '            return (ProjectDatas[ProjectName].Descript);\n', '        }else{\n', '           return (""); \n', '        }\n', '    }\n', '    \n', '    function GetDappinfo(string ProjectName) constant public returns(address,string,string) {\n', '        if(__FindProjects(ProjectName)==true){\n', '            return (ProjectDatas[ProjectName].dapp_address,ProjectDatas[ProjectName].dapp_ens,ProjectDatas[ProjectName].dapp_jsoninfo);\n', '        }else{\n', '           return (0,"",""); \n', '        }\n', '    }\n', '\n', '    function GetOwner(string ProjectName) constant public returns(string,address){\n', '        if(__FindProjects(ProjectName)==true){\n', '            return ("项目提供者",ProjectDatas[ProjectName].Owner); \n', '        }else{\n', '            return ("",0);\n', '        }\n', '    }\n', '\n', '}']