['pragma solidity 0.4.21;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/*\n', ' * Price band\n', ' * 5 ETH       @ $550 = 10,000 ZMN \n', ' * 10 ETH      @ $545 = 10,000 ZMN\n', ' * 25 ETH      @ $540 = 10,000 ZMN\n', ' * 50 ETH      @ $530 = 10,000 ZMN\n', ' * 250 ETH     @ $520 = 10,000 ZMN\n', ' * 500 ETH     @ $510 = 10,000 ZMN\n', ' * 1,000 ETH   @ $500 = 10,000 ZMN\n', '*/\n', 'contract PrivateSaleExchangeRate is Ownable {\n', '    using SafeMath for uint256;\n', '    uint256 public rate;\n', '    uint256 public timestamp;\n', '    event UpdateUsdEthRate(uint256 _rate);\n', '    \n', '    function PrivateSaleExchangeRate(uint256 _rate) public {\n', '        require(_rate > 0);\n', '        rate = _rate;\n', '        timestamp = now;\n', '    }\n', '    \n', '    /*\n', '     * @param _rate USD/ETH\n', '     */\n', '    function updateUsdEthRate(uint256 _rate) public onlyOwner {\n', '        require(_rate > 0);\n', '        require(rate != _rate);\n', '        emit UpdateUsdEthRate(_rate);\n', '        rate = _rate;\n', '        timestamp = now;\n', '    }\n', '    \n', '     /*\n', '     * @dev return amount of ZMN token derive from price band and current exchange rate\n', '     * @param _weiAmount purchase amount of ETH\n', '     */\n', '    function getTokenAmount(uint256 _weiAmount) public view returns (uint256){\n', '        \n', '        // US cost for 10,000 tokens\n', '        uint256 cost = 550;\n', '        \n', '        if(_weiAmount < 10 ether){ \n', '            cost = 550; \n', '        }else if(_weiAmount < 25 ether){ \n', '            cost = 545; \n', '        }else if(_weiAmount < 50 ether){ \n', '            cost = 540; \n', '        }else if(_weiAmount < 250 ether){ \n', '            cost = 530; \n', '        }else if(_weiAmount < 500 ether){ \n', '            cost = 520; \n', '        }else if(_weiAmount < 1000 ether){ \n', '            cost = 510;\n', '        }else{\n', '            cost = 500;\n', '        }\n', '        return _weiAmount.mul(rate).mul(10000).div(cost);\n', '    }\n', '}']