['pragma solidity ^0.4.16;\n', '\n', '    contract owned {\n', '        address public owner;\n', '\n', '        function owned() public {\n', '            owner = msg.sender;\n', '        }\n', '\n', '        modifier onlyOwner {\n', '            require(msg.sender == owner);\n', '            _;\n', '        }\n', '\n', '        function transferOwnership(address newOwner) onlyOwner public {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract MyTestToken is owned {\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '    bool private b_enableTransfer = true;\n', '    uint256 public creationDate;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;    \n', '    uint256 public totalSupply;\n', '    uint8 public tipoCongelamento = 0;\n', '        // 0 = unfreeze; 1 = frozen by 10 minutes; 2 = frozen by 30 minutes; 3 = frozen by 1 hour\n', '        // 4 = frozen by 2 hours; 5 = frozen by 1 day; 6 = frozen by 2 days\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function MyTestToken (\n', '                           uint256 initialSupply,\n', '                           string tokenName,\n', '                           string tokenSymbol\n', '        ) owned() public \n', '    {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);\n', '        balanceOf[msg.sender] = totalSupply;              // Give the creator all initial tokens\n', '        creationDate = now;\n', '        name = tokenName;\n', '        symbol = tokenSymbol;\n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer2(address _to, uint256 _value) public\n', '    {\n', '        require(b_enableTransfer); \n', '        \n', '        \n', '        _transfer(_to, _value);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public\n', '    {\n', '        // testa periodos de congelamento\n', '        // 0 = unfreeze; 1 = frozen by 10 minutes; 2 = frozen by 30 minutes; 3 = frozen by 1 hour\n', '        // 4 = frozen by 2 hours; 5 = frozen by 1 day; 6 = frozen by 2 days\n', '        if(tipoCongelamento == 0) // unfrozen\n', '        {\n', '            _transfer(_to, _value);\n', '        }\n', '        if(tipoCongelamento == 1) // 10 minutes\n', '        {\n', '            if(now >= creationDate + 10 * 1 minutes) _transfer(_to, _value);\n', '        }\n', '        if(tipoCongelamento == 2) // 30 minutes\n', '        {\n', '            if(now >= creationDate + 30 * 1 minutes) _transfer(_to, _value);\n', '        }        \n', '        if(tipoCongelamento == 3) // 1 hour\n', '        {\n', '            if(now >= creationDate + 1 * 1 hours) _transfer(_to, _value);\n', '        }        \n', '        if(tipoCongelamento == 4) // 2 hours\n', '        {\n', '            if(now >= creationDate + 2 * 1 hours) _transfer(_to, _value);\n', '        }        \n', '        if(tipoCongelamento == 5) // 1 day\n', '        {\n', '            if(now >= creationDate + 1 * 1 days) _transfer(_to, _value);\n', '        }        \n', '        if(tipoCongelamento == 6) // 2 days\n', '        {\n', '            if(now >= creationDate + 2 * 1 days) _transfer(_to, _value);\n', '        }        \n', '    }\n', '\n', '    function freezingStatus() view public returns (string)\n', '    {\n', '        // 0 = unfreeze; 1 = frozen by 10 minutes; 2 = frozen by 30 minutes; 3 = frozen by 1 hour\n', '        // 4 = frozen by 2 hours; 5 = frozen by 1 day; 6 = frozen by 2 days\n', '        \n', '        if(tipoCongelamento == 0) return ( "Tokens free to transfer!");\n', '        if(tipoCongelamento == 1) return ( "Tokens frozen by 10 minutes.");\n', '        if(tipoCongelamento == 2) return ( "Tokens frozen by 30 minutes.");\n', '        if(tipoCongelamento == 3) return ( "Tokens frozen by 1 hour.");\n', '        if(tipoCongelamento == 4) return ( "Tokens frozen by 2 hours.");        \n', '        if(tipoCongelamento == 5) return ( "Tokens frozen by 1 day.");        \n', '        if(tipoCongelamento == 6) return ( "Tokens frozen by 2 days.");                \n', '\n', '    }\n', '\n', '    function setFreezingStatus(uint8 _mode) onlyOwner public\n', '    {\n', '        require(_mode>=0 && _mode <=6);\n', '        tipoCongelamento = _mode;\n', '    }\n', '\n', '    function _transfer(address _to, uint256 _value) private \n', '    {\n', '        require(balanceOf[msg.sender] >= _value);           // Check if the sender has enough\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflows\n', '        balanceOf[msg.sender] -= _value;                    // Subtract from the sender\n', '        balanceOf[_to] += _value;                           // Add the same to the recipient\n', '    }\n', '    \n', '    function enableTransfer(bool _enableTransfer) onlyOwner public\n', '    {\n', '        b_enableTransfer = _enableTransfer;\n', '    }\n', '}']