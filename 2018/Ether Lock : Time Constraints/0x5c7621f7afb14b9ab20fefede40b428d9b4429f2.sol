['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Pausable is ERC20Basic {\n', '\n', '    uint public constant startPreICO = 1516525200;\n', '    uint public constant endPreICO = startPreICO + 30 days;\n', '    \n', '    uint public constant startICOStage1 = 1520931600;\n', '    uint public constant endICOStage1 = startICOStage1 + 15 days;\n', '    \n', '    uint public constant startICOStage2 = endICOStage1;\n', '    uint public constant endICOStage2 = startICOStage2 + 15 days;\n', '    \n', '    uint public constant startICOStage3 = endICOStage2;\n', '    uint public constant endICOStage3 = startICOStage3 + 15 days;\n', '    \n', '    uint public constant startICOStage4 = endICOStage3;\n', '    uint public constant endICOStage4 = startICOStage4 + 15 days;\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS not paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(now < startPreICO || now > endICOStage4);\n', '    _;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is Pausable {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '  \n', '}\n', '\n', 'contract Gelios is Ownable, StandardToken {\n', '    using SafeMath for uint256;\n', '\n', '    string public constant name = "Gelios Token";\n', '    string public constant symbol = "GLS";\n', '    uint256 public constant decimals = 18;\n', '\n', '    uint256 public constant INITIAL_SUPPLY = 16808824 ether;\n', '    address public tokenWallet;\n', '    address public multiSig;\n', '\n', '    uint256 public tokenRate = 1000; // tokens per 1 ether\n', '\n', '    function Gelios(address _tokenWallet, address _multiSig) {\n', '        tokenWallet = _tokenWallet;\n', '        multiSig = _multiSig;\n', '        totalSupply = INITIAL_SUPPLY;\n', '        balances[_tokenWallet] = INITIAL_SUPPLY;\n', '    }\n', '\n', '    function () payable public {\n', '        require(now >= startPreICO);\n', '        buyTokens(msg.value);\n', '    }\n', '\n', '    function buyTokensBonus(address bonusAddress) public payable {\n', '        require(now >= startPreICO && now < endICOStage4);\n', '        if (bonusAddress != 0x0 && msg.sender != bonusAddress) {\n', '            uint bonus = msg.value.mul(tokenRate).div(100).mul(5);\n', '            if(buyTokens(msg.value)) {\n', '               sendTokensRef(bonusAddress, bonus);\n', '            }\n', '        }\n', '    }\n', '\n', '    uint preIcoCap = 1300000 ether;\n', '    uint icoStage1Cap = 600000 ether;\n', '    uint icoStage2Cap = 862500 ether;\n', '    uint icoStage3Cap = 810000 ether;\n', '    uint icoStage4Cap = 5000000 ether;\n', '    \n', '    struct Stats {\n', '        uint preICO;\n', '        uint preICOETHRaised;\n', '        \n', '        uint ICOStage1;\n', '        uint ICOStage1ETHRaised;\n', '        \n', '        uint ICOStage2;\n', '        uint ICOStage2ETHRaised;\n', '        \n', '        uint ICOStage3;\n', '        uint ICOStage3ETHRaised;\n', '        \n', '        uint ICOStage4;\n', '        uint ICOStage4ETHRaised;\n', '        \n', '        uint RefBonusese;\n', '    }\n', '    \n', '    event Burn(address indexed burner, uint256 value);\n', '    \n', '    Stats public stats;\n', '    uint public burnAmount = preIcoCap;\n', '    bool[] public burnStage = [true, true, true, true];\n', '\n', '    function buyTokens(uint amount) private returns (bool){\n', '        // PreICO - 30% 1516525200 01/21/2018 @ 9:00am (UTC) 30 days 1300000\n', '        // Ico 1 - 20% 1520931600 03/13/2018 @ 9:00am (UTC) cap or 15 days 600000\n', '        // ico 2 - 15% cap or 15 days  862500\n', '        // ico 3 - 8% cap or 15 days 810000\n', '        // ico 4 - 0% cap or 15 days 5000000\n', '        \n', '        uint tokens = amount.mul(tokenRate);\n', '        if(now >= startPreICO && now < endPreICO && stats.preICO < preIcoCap) {\n', '            tokens = tokens.add(tokens.div(100).mul(30));\n', '            tokens = safeSend(tokens, preIcoCap.sub(stats.preICO));\n', '            stats.preICO = stats.preICO.add(tokens);\n', '            stats.preICOETHRaised = stats.preICOETHRaised.add(amount);\n', '            burnAmount = burnAmount.sub(tokens);\n', '            \n', '            return true;\n', '        } else if (now >= startICOStage1 && now < endICOStage1 && stats.ICOStage1 < icoStage1Cap) {\n', '            if (burnAmount > 0 && burnStage[0]) {\n', '                burnTokens();\n', '                burnStage[0] = false;\n', '                burnAmount = icoStage1Cap;\n', '            }\n', '            \n', '            tokens = tokens.add(tokens.div(100).mul(20));\n', '            tokens = safeSend(tokens, icoStage1Cap.sub(stats.ICOStage1));\n', '            stats.ICOStage1 = stats.ICOStage1.add(tokens);\n', '            stats.ICOStage1ETHRaised = stats.ICOStage1ETHRaised.add(amount);\n', '            burnAmount = burnAmount.sub(tokens);\n', '\n', '            return true;\n', '        } else if ( now < endICOStage2 && stats.ICOStage2 < icoStage2Cap ) {\n', '            if (burnAmount > 0 && burnStage[1]) {\n', '                burnTokens();\n', '                burnStage[1] = false;\n', '                burnAmount = icoStage2Cap;\n', '            }\n', '            \n', '            tokens = tokens.add(tokens.div(100).mul(15));\n', '            tokens = safeSend(tokens, icoStage2Cap.sub(stats.ICOStage2));\n', '            stats.ICOStage2 = stats.ICOStage2.add(tokens);\n', '            stats.ICOStage2ETHRaised = stats.ICOStage2ETHRaised.add(amount);\n', '            burnAmount = burnAmount.sub(tokens);\n', '            \n', '            return true;\n', '        } else if ( now < endICOStage3 && stats.ICOStage3 < icoStage3Cap ) {\n', '            if (burnAmount > 0 && burnStage[2]) {\n', '                burnTokens();\n', '                burnStage[2] = false;\n', '                burnAmount = icoStage3Cap;\n', '            }\n', '            \n', '            tokens = tokens.add(tokens.div(100).mul(8));\n', '            tokens = safeSend(tokens, icoStage3Cap.sub(stats.ICOStage3));\n', '            stats.ICOStage3 = stats.ICOStage3.add(tokens);\n', '            stats.ICOStage3ETHRaised = stats.ICOStage3ETHRaised.add(amount);\n', '            burnAmount = burnAmount.sub(tokens);\n', '            \n', '            return true;\n', '        } else if ( now < endICOStage4 && stats.ICOStage4 < icoStage4Cap ) {\n', '            if (burnAmount > 0 && burnStage[3]) {\n', '                burnTokens();\n', '                burnStage[3] = false;\n', '                burnAmount = icoStage4Cap;\n', '            }\n', '            \n', '            tokens = safeSend(tokens, icoStage4Cap.sub(stats.ICOStage4));\n', '            stats.ICOStage4 = stats.ICOStage4.add(tokens);\n', '            stats.ICOStage4ETHRaised = stats.ICOStage4ETHRaised.add(amount);\n', '            burnAmount = burnAmount.sub(tokens);\n', '            \n', '            return true;\n', '        } else if (now > endICOStage4 && burnAmount > 0) {\n', '            burnTokens();\n', '            msg.sender.transfer(msg.value);\n', '            burnAmount = 0;\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * Burn tokens which are not sold on previous stage\n', '     **/\n', '    function burnTokens() private {\n', '        balances[tokenWallet] = balances[tokenWallet].sub(burnAmount);\n', '        totalSupply = totalSupply.sub(burnAmount);\n', '        Burn(tokenWallet, burnAmount);\n', '    }\n', '\n', '    /**\n', '     * Check last token on sale\n', '     **/\n', '    function safeSend(uint tokens, uint stageLimmit) private returns(uint) {\n', '        if (stageLimmit < tokens) {\n', '            uint toReturn = tokenRate.mul(tokens.sub(stageLimmit));\n', '            sendTokens(msg.sender, stageLimmit);\n', '            msg.sender.transfer(toReturn);\n', '            return stageLimmit;\n', '        } else {\n', '            sendTokens(msg.sender, tokens);\n', '            return tokens;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Low-level function for tokens transfer\n', '     **/\n', '    function sendTokens(address _to, uint tokens) private {\n', '        balances[tokenWallet] = balances[tokenWallet].sub(tokens);\n', '        balances[_to] += tokens;\n', '        Transfer(tokenWallet, _to, tokens);\n', '        multiSig.transfer(msg.value);\n', '    }\n', '    \n', '    /**\n', '     * Burn tokens which are not sold on previous stage\n', '     **/    \n', '    function sendTokensRef(address _to, uint tokens) private {\n', '        balances[tokenWallet] = balances[tokenWallet].sub(tokens);\n', '        balances[_to] += tokens;\n', '        Transfer(tokenWallet, _to, tokens);\n', '        stats.RefBonusese += tokens; \n', '    }\n', '    \n', '    /**\n', '     * Update token rate manually\n', '     **/\n', '    function updateTokenRate(uint newRate) onlyOwner public {\n', '        tokenRate = newRate;\n', '    }\n', '    \n', '}']