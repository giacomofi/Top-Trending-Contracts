['pragma solidity 0.4.25;\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    function _validateAddress(address _addr) internal pure {\n', '        require(_addr != address(0), "invalid address");\n', '    }\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "not a contract owner");\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _validateAddress(newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', 'contract Controllable is Ownable {\n', '    mapping(address => bool) controllers;\n', '\n', '    modifier onlyController {\n', '        require(_isController(msg.sender), "no controller rights");\n', '        _;\n', '    }\n', '\n', '    function _isController(address _controller) internal view returns (bool) {\n', '        return controllers[_controller];\n', '    }\n', '\n', '    function _setControllers(address[] _controllers) internal {\n', '        for (uint256 i = 0; i < _controllers.length; i++) {\n', '            _validateAddress(_controllers[i]);\n', '            controllers[_controllers[i]] = true;\n', '        }\n', '    }\n', '}\n', '\n', 'contract Upgradable is Controllable {\n', '    address[] internalDependencies;\n', '    address[] externalDependencies;\n', '\n', '    function getInternalDependencies() public view returns(address[]) {\n', '        return internalDependencies;\n', '    }\n', '\n', '    function getExternalDependencies() public view returns(address[]) {\n', '        return externalDependencies;\n', '    }\n', '\n', '    function setInternalDependencies(address[] _newDependencies) public onlyOwner {\n', '        for (uint256 i = 0; i < _newDependencies.length; i++) {\n', '            _validateAddress(_newDependencies[i]);\n', '        }\n', '        internalDependencies = _newDependencies;\n', '    }\n', '\n', '    function setExternalDependencies(address[] _newDependencies) public onlyOwner {\n', '        externalDependencies = _newDependencies;\n', '        _setControllers(_newDependencies);\n', '    }\n', '}\n', '\n', 'contract ERC721Token {\n', '    function ownerOf(uint256) public view returns (address);\n', '    function exists(uint256) public view returns (bool);\n', '    function getAllTokens() external view returns (uint256[]);\n', '    function totalSupply() public view returns (uint256);\n', '\n', '}\n', '\n', 'contract EggStorage is ERC721Token {\n', '    function push(address, uint256[2], uint8) public returns (uint256);\n', '    function get(uint256) external view returns (uint256[2], uint8);\n', '    function remove(address, uint256) external;\n', '}\n', '\n', '\n', '\n', '\n', '//////////////CONTRACT//////////////\n', '\n', '\n', '\n', '\n', 'contract EggCore is Upgradable {\n', '    EggStorage _storage_;\n', '\n', '    function getAmount() external view returns (uint256) {\n', '        return _storage_.totalSupply();\n', '    }\n', '\n', '    function getAllEggs() external view returns (uint256[]) {\n', '        return _storage_.getAllTokens();\n', '    }\n', '\n', '    function isOwner(address _user, uint256 _tokenId) external view returns (bool) {\n', '        return _user == _storage_.ownerOf(_tokenId);\n', '    }\n', '\n', '    function ownerOf(uint256 _tokenId) external view returns (address) {\n', '        return _storage_.ownerOf(_tokenId);\n', '    }\n', '\n', '    function create(\n', '        address _sender,\n', '        uint256[2] _parents,\n', '        uint8 _dragonType\n', '    ) external onlyController returns (uint256) {\n', '        return _storage_.push(_sender, _parents, _dragonType);\n', '    }\n', '\n', '    function remove(address _owner, uint256 _id) external onlyController {\n', '        _storage_.remove(_owner, _id);\n', '    }\n', '\n', '    function get(uint256 _id) external view returns (uint256[2], uint8) {\n', '        require(_storage_.exists(_id), "egg doesn\'t exist");\n', '        return _storage_.get(_id);\n', '    }\n', '\n', '    function setInternalDependencies(address[] _newDependencies) public onlyOwner {\n', '        super.setInternalDependencies(_newDependencies);\n', '\n', '        _storage_ = EggStorage(_newDependencies[0]);\n', '    }\n', '}']