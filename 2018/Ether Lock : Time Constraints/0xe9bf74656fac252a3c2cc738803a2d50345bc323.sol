['pragma solidity ^0.4.24;\n', '\n', '/*\n', '    CryptoPrize(address _token_address)   // this will unlock the prize and send yum to user\n', '  @author Yumerium Ltd\n', '*/\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'contract YUM {\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    mapping (address => uint256) public balanceOf;\n', '    function transfer(address _to, uint256 _value) public;\n', '}\n', '\n', '\n', 'contract TokenReward {\n', '    using SafeMath for uint256;\n', '    uint256 public maxCount = 2 ** 256 - 1;\n', '    uint256 public budget;\n', '    uint256 public totalUnlocked;\n', '    uint256 public startYum;\n', '    uint256 public nextRewardAmount;\n', '    uint256 public count;\n', '    address public owner;\n', '    YUM public token;\n', '\n', '    event UnlockReward(address to, uint256 amount);\n', '    event CalcNextReward(uint256 count, uint256 amount);\n', '    event Retrieve(address to, uint256 amount);\n', '    event AddBudget(uint256 budget, uint256 startYum);\n', '\n', '    // start with 0 budget and 0 Yum for the prize\n', '    constructor(address _token_address) public {\n', '        budget = 0;\n', '        startYum = 0;\n', '        count = 0;\n', '        owner = msg.sender;\n', '        token = YUM(_token_address);\n', '    }\n', '\n', '    /* \n', '     * Calculate the next prize\n', '     * TODO: Change the equation if needed\n', '    */\n', '    function calcNextReward() public returns (uint256) {\n', '        uint256 oneYUM = 10 ** 8;\n', '        uint256 amount = startYum.mul(oneYUM).div(count.mul(oneYUM).div(500).add(oneYUM)); // 100 YUM / (1 YUM / 500 + 1 YUM)\n', '        emit CalcNextReward(count, amount);\n', '        return amount;\n', '    }\n', '    \n', '    // unlock the prize\n', '    function sendNextRewardTo(address to) external {\n', '        require(msg.sender==owner);\n', '        uint256 amount = nextRewardAmount;\n', '        require(amount > 0);\n', '        uint256 total = totalUnlocked.add(amount);\n', '        require(total<=budget);\n', '        token.transfer(to, amount);\n', '        budget = budget.sub(amount);\n', '        if (count < maxCount)\n', '            count++;\n', '        totalUnlocked = total;\n', '        nextRewardAmount = calcNextReward();\n', '        emit UnlockReward(to, amount);\n', '    }\n', '\n', '    // change creator address\n', '    function changeOwnerTo(address _creator) external {\n', '        require(msg.sender==owner);\n', '        owner = _creator;\n', '    }\n', '\n', '    // change creator address\n', '    function changeYumAddressTo(address _token_address) external {\n', '        require(msg.sender==owner);\n', '        token = YUM(_token_address);\n', '    }\n', '\n', '    // Retrieve all YUM token left from the contract\n', '    function retrieveAll() external {\n', '        require(msg.sender==owner);\n', '        uint256 amount = token.balanceOf(this);\n', '        token.transfer(owner, amount);   \n', '        emit Retrieve(owner, amount);   \n', '    }\n', '\n', '    // add more budget and reset startYum and count\n', '    function addBudget(uint256 _budget, uint256 _startYum, uint256 _count) external {\n', '        require(msg.sender==owner);\n', '        require(token.transferFrom(msg.sender, this, _budget));\n', '        budget = budget.add(_budget);\n', '        startYum = _startYum;\n', '        count = _count;\n', '        nextRewardAmount = calcNextReward();\n', '        emit AddBudget(budget, startYum);\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/*\n', '    CryptoPrize(address _token_address)   // this will unlock the prize and send yum to user\n', '  @author Yumerium Ltd\n', '*/\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'contract YUM {\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    mapping (address => uint256) public balanceOf;\n', '    function transfer(address _to, uint256 _value) public;\n', '}\n', '\n', '\n', 'contract TokenReward {\n', '    using SafeMath for uint256;\n', '    uint256 public maxCount = 2 ** 256 - 1;\n', '    uint256 public budget;\n', '    uint256 public totalUnlocked;\n', '    uint256 public startYum;\n', '    uint256 public nextRewardAmount;\n', '    uint256 public count;\n', '    address public owner;\n', '    YUM public token;\n', '\n', '    event UnlockReward(address to, uint256 amount);\n', '    event CalcNextReward(uint256 count, uint256 amount);\n', '    event Retrieve(address to, uint256 amount);\n', '    event AddBudget(uint256 budget, uint256 startYum);\n', '\n', '    // start with 0 budget and 0 Yum for the prize\n', '    constructor(address _token_address) public {\n', '        budget = 0;\n', '        startYum = 0;\n', '        count = 0;\n', '        owner = msg.sender;\n', '        token = YUM(_token_address);\n', '    }\n', '\n', '    /* \n', '     * Calculate the next prize\n', '     * TODO: Change the equation if needed\n', '    */\n', '    function calcNextReward() public returns (uint256) {\n', '        uint256 oneYUM = 10 ** 8;\n', '        uint256 amount = startYum.mul(oneYUM).div(count.mul(oneYUM).div(500).add(oneYUM)); // 100 YUM / (1 YUM / 500 + 1 YUM)\n', '        emit CalcNextReward(count, amount);\n', '        return amount;\n', '    }\n', '    \n', '    // unlock the prize\n', '    function sendNextRewardTo(address to) external {\n', '        require(msg.sender==owner);\n', '        uint256 amount = nextRewardAmount;\n', '        require(amount > 0);\n', '        uint256 total = totalUnlocked.add(amount);\n', '        require(total<=budget);\n', '        token.transfer(to, amount);\n', '        budget = budget.sub(amount);\n', '        if (count < maxCount)\n', '            count++;\n', '        totalUnlocked = total;\n', '        nextRewardAmount = calcNextReward();\n', '        emit UnlockReward(to, amount);\n', '    }\n', '\n', '    // change creator address\n', '    function changeOwnerTo(address _creator) external {\n', '        require(msg.sender==owner);\n', '        owner = _creator;\n', '    }\n', '\n', '    // change creator address\n', '    function changeYumAddressTo(address _token_address) external {\n', '        require(msg.sender==owner);\n', '        token = YUM(_token_address);\n', '    }\n', '\n', '    // Retrieve all YUM token left from the contract\n', '    function retrieveAll() external {\n', '        require(msg.sender==owner);\n', '        uint256 amount = token.balanceOf(this);\n', '        token.transfer(owner, amount);   \n', '        emit Retrieve(owner, amount);   \n', '    }\n', '\n', '    // add more budget and reset startYum and count\n', '    function addBudget(uint256 _budget, uint256 _startYum, uint256 _count) external {\n', '        require(msg.sender==owner);\n', '        require(token.transferFrom(msg.sender, this, _budget));\n', '        budget = budget.add(_budget);\n', '        startYum = _startYum;\n', '        count = _count;\n', '        nextRewardAmount = calcNextReward();\n', '        emit AddBudget(budget, startYum);\n', '    }\n', '}']
