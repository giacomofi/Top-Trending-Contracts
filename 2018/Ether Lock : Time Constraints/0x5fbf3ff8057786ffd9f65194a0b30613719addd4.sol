['pragma solidity 0.4.24;\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '    }\n', '\n', '}\n', '\n', 'interface token {\n', '    function transfer(address to, uint tokens) external;\n', '    function balanceOf(address tokenOwner) external returns(uint balance);\n', '}\n', '\n', '\n', '\n', '\n', 'contract ETHCDISTRIBUTION is Owned{\n', '    address public ETCHaddress;\n', '    token public  rewardToken;\n', '    //uint public ContractTokenBalance = rewardToken.balanceOf(this);\n', '    \n', '    \n', '    constructor() public{\n', '    ETCHaddress = 0x673F2F89840b93D2b2b0100f9E35e5CE371Faf54;\n', '    rewardToken = token(ETCHaddress);\n', '    \n', '    }\n', '    \n', '    function() public payable{\n', '        uint tokensToBeSent = msg.value * 2000;\n', '        require(rewardToken.balanceOf(this)>= tokensToBeSent);\n', '        rewardToken.transfer(msg.sender, tokensToBeSent);\n', '        uint amount = address(this).balance;\n', '        owner.transfer(amount);\n', '        \n', '    }\n', '    \n', '}']