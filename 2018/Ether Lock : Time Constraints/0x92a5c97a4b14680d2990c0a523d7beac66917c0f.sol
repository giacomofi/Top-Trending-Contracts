['pragma solidity ^0.4.25;\n', '\n', '/**\n', ' *\n', ' *  EasyInvest7 V2 Contract\n', ' *  - GAIN 7% PER 24 HOURS\n', ' *  - Principal withdrawal anytime\n', ' *  - The balance of the contract can not greater than 200eth\n', ' *\n', ' *\n', ' * How to use:\n', ' *  1. Send amount of ether to make an investment, max 50eth\n', " *  2a. Get your profit and your principal by sending 0 ether transaction (every day, every week, i don't care unless you're spending too much on GAS)\n", ' *  OR\n', ' *  2b. Send more ether to reinvest AND get your profit at the same time\n', ' *\n', ' * RECOMMENDED GAS LIMIT: 150000\n', ' * RECOMMENDED GAS PRICE: https://ethgasstation.info/\n', ' *\n', ' * www.easyinvest7.biz\n', ' *\n', ' */\n', 'contract EasyInvestV2 {\n', '    using SafeMath              for *;\n', '\n', '    string constant public name = "EasyInvest7";\n', '    string constant public symbol = "EasyInvest7";\n', '    \n', '    uint256 _maxInvest = 5e19;\n', '    uint256 _maxBalance = 2e20; \n', '\n', '    address public promoAddr_ = address(0x81eCf0979668D3C6a812B404215B53310f14f451);\n', '    \n', '    // records amounts invested\n', '    mapping (address => uint256) public invested;\n', '    // records time at which investments were made\n', '    mapping (address => uint256) public atTime;\n', '    \n', '    uint256 public NowETHINVESTED = 0;\n', '    uint256 public AllINVESTORS = 0;\n', '    uint256 public AllETHINVESTED = 0;\n', '\n', '    // this function called every time anyone sends a transaction to this contract\n', '    function () external payable {\n', '        \n', '        uint256 realBalance = getBalance().sub(msg.value);\n', '        \n', '        require(msg.value <= _maxInvest  , "invest amount error, please set the exact amount");\n', '        require(realBalance < _maxBalance  , "max balance, can\'t invest");\n', '        \n', '        uint256 more_ = 0;\n', '        uint256 amount_ = msg.value;\n', '        if (amount_.add(realBalance) > _maxBalance && amount_ > 0) {\n', '            more_ = amount_.add(realBalance).sub(_maxBalance);\n', '            amount_ = amount_.sub(more_);\n', '            \n', '            msg.sender.transfer(more_);\n', '        }\n', '        \n', '        if (amount_.add(invested[msg.sender]) > _maxInvest && amount_ > 0) {\n', '            more_ = amount_.add(invested[msg.sender]).sub(_maxInvest);\n', '            amount_ = amount_.sub(more_);\n', '            \n', '            msg.sender.transfer(more_);\n', '        }\n', '\n', '        // if sender (aka YOU) is invested more than 0 ether\n', '        if (invested[msg.sender] != 0) {\n', '            // calculate profit amount as such:\n', '            // amount = (amount invested) * 7% * (times since last transaction) / 24 hours\n', '            uint256 amount = invested[msg.sender] * 7 / 100 * (now - atTime[msg.sender]) / 24 hours;\n', '\n', '            // send calculated amount of ether directly to sender (aka YOU)\n', '            msg.sender.transfer(amount);\n', '        } else {\n', '            if (atTime[msg.sender] == 0) {\n', '                AllINVESTORS += 1;\n', '            }\n', '        }\n', '\n', '        // record time and invested amount (msg.value) of this transaction\n', '        if (msg.value == 0 && invested[msg.sender] != 0) {\n', '            msg.sender.transfer(invested[msg.sender]);\n', '            NowETHINVESTED = NowETHINVESTED.sub(invested[msg.sender]);\n', '            \n', '            atTime[msg.sender] = now;\n', '            invested[msg.sender] = 0;\n', '            \n', '        } else {\n', '            atTime[msg.sender] = now;\n', '            invested[msg.sender] += amount_;\n', '            NowETHINVESTED = NowETHINVESTED.add(amount_);\n', '            AllETHINVESTED = AllETHINVESTED.add(amount_);\n', '        }\n', '        \n', '        if (amount_ > 1e14) {\n', '            promoAddr_.transfer(amount_.mul(2).div(100));\n', '        }\n', '    }\n', '    \n', '    function getBalance() public view returns (uint256){\n', '        return address(this).balance;\n', '    }\n', '    \n', '\n', '}\n', '\n', '/***********************************************************\n', ' * @title SafeMath v0.1.9\n', ' * @dev Math operations with safety checks that throw on error\n', ' * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\n', ' * - added sqrt\n', ' * - added sq\n', ' * - added pwr \n', ' * - changed asserts to requires with error log outputs\n', ' * - removed div, its useless\n', ' ***********************************************************/\n', ' library SafeMath {\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) \n', '        internal \n', '        pure \n', '        returns (uint256 c) \n', '    {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        require(c / a == b, "SafeMath mul failed");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '    \n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256) \n', '    {\n', '        require(b <= a, "SafeMath sub failed");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256 c) \n', '    {\n', '        c = a + b;\n', '        require(c >= a, "SafeMath add failed");\n', '        return c;\n', '    }\n', '    \n', '    /**\n', '     * @dev gives square root of given x.\n', '     */\n', '    function sqrt(uint256 x)\n', '        internal\n', '        pure\n', '        returns (uint256 y) \n', '    {\n', '        uint256 z = ((add(x,1)) / 2);\n', '        y = x;\n', '        while (z < y) \n', '        {\n', '            y = z;\n', '            z = ((add((x / z),z)) / 2);\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @dev gives square. multiplies x by x\n', '     */\n', '    function sq(uint256 x)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return (mul(x,x));\n', '    }\n', '    \n', '    /**\n', '     * @dev x to the power of y \n', '     */\n', '    function pwr(uint256 x, uint256 y)\n', '        internal \n', '        pure \n', '        returns (uint256)\n', '    {\n', '        if (x==0)\n', '            return (0);\n', '        else if (y==0)\n', '            return (1);\n', '        else \n', '        {\n', '            uint256 z = x;\n', '            for (uint256 i=1; i < y; i++)\n', '                z = mul(z,x);\n', '            return (z);\n', '        }\n', '    }\n', '}']