['pragma solidity ^0.4.22;\n', '\n', 'contract DmlMarketplace {\n', '    // Public Variables\n', '    mapping(address => bool) public moderators;\n', '    address public token;\n', '    \n', '    // bountyFactory address\n', '    DmlBountyFactory public bountyFactory;\n', '    \n', '    \n', '    mapping(bytes32 => uint) public totals;\n', '    mapping(address => mapping(bytes32 => bool)) public hasPurchased;\n', '    \n', '    constructor() public {\n', '        moderators[msg.sender] = true;\n', '    }\n', '    \n', '    function isReady() view public returns (bool success) {\n', '        if (token == address(0) || bountyFactory == address(0)) {\n', '            return false;\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function isModerator(address modAddress) view public returns (bool success) {\n', '        return moderators[modAddress];\n', '    }\n', '\n', '    function addModerator(address newModerator) public {\n', '        require(isModerator(msg.sender));\n', '        moderators[newModerator] = true;\n', '    }\n', '\n', '    function removeModerator(address mod) public {\n', '        require(isModerator(msg.sender));\n', '        moderators[mod] = false;\n', '    }\n', '\n', '    function init (address newTokenAddress) public returns (bool success) {\n', '        require(isModerator(msg.sender));\n', '        token = newTokenAddress;\n', '        DmlBountyFactory f = new DmlBountyFactory(token);\n', '        bountyFactory = f;\n', '        return true;\n', '    }\n', '\n', '    function setBountyFactory(address factoryAddress) public {\n', '        require(isModerator(msg.sender));\n', '        DmlBountyFactory f = DmlBountyFactory(factoryAddress);\n', '        bountyFactory = f;\n', '    }\n', '    \n', '    function buy(bytes32 algoId, uint value) public returns (bool success) {\n', '        address sender = msg.sender;\n', '        \n', '        require(!hasPurchased[msg.sender][algoId]);\n', '\n', '        ERC20Interface c = ERC20Interface(token);\n', '        \n', '        require(c.transferFrom(sender, address(this), value));\n', '\n', '        hasPurchased[sender][algoId] = true;\n', '        \n', '        if (totals[algoId] < 1) {\n', '            totals[algoId] = 1;\n', '        } else {\n', '            totals[algoId]++;\n', '        }\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function transferToken (address receiver, uint amount) public {\n', '        require(isModerator(msg.sender));\n', '        \n', '        ERC20Interface c = ERC20Interface(token);\n', '        require(c.transfer(receiver, amount));\n', '    }\n', '}\n', '\n', 'contract DmlBountyFactory {\n', '    address public marketplace;\n', '    address public token;\n', '    address[] public allBountyAddresses;\n', '    mapping(address => address[]) public bountyAddressByCreator;\n', '    mapping(address => address[]) public bountyAddressByParticipant;\n', '    \n', '    constructor(address tokenAddress) public {\n', '        marketplace = msg.sender;\n', '        token = tokenAddress;\n', '    }\n', '\n', '    function getAllBounties() view public returns (address[] bounties) {\n', '        return allBountyAddresses;\n', '    }\n', '\n', '    function getBountiesByCreator(address creatorAddress) view public returns (address[] bounties) {\n', '        return bountyAddressByCreator[creatorAddress];\n', '    }\n', '\n', '    function getBountiesByParticipant(address participantAddress) view public returns (address[] bounties) {\n', '        return bountyAddressByParticipant[participantAddress];\n', '    }\n', '    \n', '    function createBounty(string name, uint[] prizes) public {\n', '        address creator = msg.sender;\n', '        address newBounty = new Bounty(token, creator, name, prizes, marketplace);\n', '        allBountyAddresses.push(newBounty);\n', '        bountyAddressByCreator[msg.sender].push(newBounty);\n', '    }\n', '    \n', '    function joinBounty(address bountyAddress) public {\n', '        Bounty b = Bounty(bountyAddress);\n', '        \n', '        require(b.join(msg.sender));\n', '        \n', '        bountyAddressByParticipant[msg.sender].push(bountyAddress);\n', '    }\n', '}\n', '\n', 'contract Bounty {\n', '    // contract addresses\n', '    address public factory;\n', '    \n', '    // public constants\n', '    address public creator;\n', '    address public token;\n', '    address public marketplace;\n', '\n', '    // state variables\n', '    string public name;\n', '    uint[] public prizes;\n', '    uint public createdAt;\n', '    address[] public winners;\n', '    address[] public participants;\n', '    Status public status;\n', '    mapping(address => bool) public participantsMap;\n', '\n', '    enum Status {\n', '        Initialized,\n', '        EnrollmentStart,\n', '        EnrollmentEnd,\n', '        BountyStart,\n', '        BountyEnd,\n', '        EvaluationEnd,\n', '        Completed,\n', '        Paused\n', '    }\n', '    \n', '    constructor(\n', '        address tokenAddress,\n', '        address creatorAddress,\n', '        string initName,\n', '        uint[] initPrizes,\n', '        address mpAddress\n', '    ) public {\n', '        factory = msg.sender;\n', '        marketplace = mpAddress;\n', '        creator = creatorAddress;\n', '        token = tokenAddress;\n', '        prizes = initPrizes;\n', '        status = Status.Initialized;\n', '        name = initName;\n', '        createdAt = now;\n', '    }\n', '    \n', '    function isFunded() public view returns (bool success) {\n', '        ERC20Interface c = ERC20Interface(token);\n', '        require(getTotalPrize() <= c.balanceOf(address(this)));\n', '        return true;\n', '    }\n', '\n', '    function getData() public view returns (string retName, uint[] retPrizes, address[] retWinenrs, address[] retParticipants, Status retStatus, address retCreator, uint createdTime) {\n', '        return (name, prizes, winners, participants, status, creator, createdAt);\n', '    }\n', '    \n', '    function join(address participantAddress) public returns (bool success) {\n', '        require(msg.sender == factory);\n', '\n', '        if (status != Status.EnrollmentStart) {\n', '            return false;\n', '        }\n', '        \n', '        if (participantsMap[participantAddress] == true) {\n', '            return false;\n', '        }\n', '        \n', '        participants.push(participantAddress);\n', '        participantsMap[participantAddress] = true;\n', '        \n', '        return true;\n', '    }\n', '\n', '    function updateBounty(string newName, uint[] newPrizes) public {\n', '        require(updateName(newName));\n', '        require(updatePrizes(newPrizes));\n', '    }\n', '\n', '    function updateName(string newName) public returns (bool success) {\n', '        DmlMarketplace dmp = DmlMarketplace(marketplace);\n', '        require(dmp.isModerator(msg.sender) || msg.sender == creator);\n', '        name = newName;\n', '        return true;\n', '    }\n', '\n', '    function forceUpdateName(string newName) public returns (bool success) {\n', '        DmlMarketplace dmp = DmlMarketplace(marketplace);\n', '        require(dmp.isModerator(msg.sender));\n', '        name = newName;\n', '        return true;\n', '    }\n', '    \n', '    function updatePrizes(uint[] newPrizes) public returns (bool success) {\n', '        DmlMarketplace dmp = DmlMarketplace(marketplace);\n', '        require(dmp.isModerator(msg.sender) || msg.sender == creator);\n', '        require(status == Status.Initialized);\n', '        prizes = newPrizes;\n', '        return true;\n', '    }\n', '\n', '    function forceUpdatePrizes(uint[] newPrizes) public returns (bool success) {\n', '        DmlMarketplace dmp = DmlMarketplace(marketplace);\n', '        require(dmp.isModerator(msg.sender));\n', '        prizes = newPrizes;\n', '        return true;\n', '    }\n', '\n', '    function setStatus(Status newStatus) private returns (bool success) {\n', '        DmlMarketplace dmp = DmlMarketplace(marketplace);\n', '        require(dmp.isModerator(msg.sender) || msg.sender == creator);\n', '        status = newStatus;\n', '        return true;\n', '    }\n', '\n', '    function forceSetStatus(Status newStatus) public returns (bool success) {\n', '        DmlMarketplace dmp = DmlMarketplace(marketplace);\n', '        require(dmp.isModerator(msg.sender));\n', '        status = newStatus;\n', '        return true;\n', '    }\n', '    \n', '    function startEnrollment() public {\n', '        require(prizes.length > 0);\n', '        require(isFunded());\n', '        setStatus(Status.EnrollmentStart);\n', '    }\n', '    \n', '    function stopEnrollment() public {\n', '        require(status == Status.EnrollmentStart);\n', '        setStatus(Status.EnrollmentEnd);\n', '    }\n', '    \n', '    function startBounty() public {\n', '        require(status == Status.EnrollmentEnd);\n', '        setStatus(Status.BountyStart);\n', '    }\n', '    \n', '    function stopBounty() public {\n', '        require(status == Status.BountyStart);\n', '        setStatus(Status.BountyEnd);\n', '    }\n', '\n', '    function updateWinners(address[] newWinners) public {\n', '        DmlMarketplace dmp = DmlMarketplace(marketplace);\n', '        require(dmp.isModerator(msg.sender) || msg.sender == creator);\n', '        require(status == Status.BountyEnd);\n', '        require(newWinners.length == prizes.length);\n', '\n', '        for (uint i = 0; i < newWinners.length; i++) {\n', '            require(participantsMap[newWinners[i]]);\n', '        }\n', '\n', '        winners = newWinners;\n', '        setStatus(Status.EvaluationEnd);\n', '    }\n', '\n', '    function forceUpdateWinners(address[] newWinners) public {\n', '        DmlMarketplace dmp = DmlMarketplace(marketplace);\n', '        require(dmp.isModerator(msg.sender));\n', '\n', '        winners = newWinners;\n', '    }\n', '\n', '    function payoutWinners() public {\n', '        ERC20Interface c = ERC20Interface(token);\n', '        DmlMarketplace dmp = DmlMarketplace(marketplace);\n', '\n', '        require(dmp.isModerator(msg.sender) || msg.sender == creator);\n', '        require(isFunded());\n', '        require(winners.length == prizes.length);\n', '        require(status == Status.EvaluationEnd);\n', '\n', '        for (uint i = 0; i < prizes.length; i++) {\n', '            require(c.transfer(winners[i], prizes[i]));\n', '        }\n', '        \n', '        setStatus(Status.Completed);\n', '    }\n', '    \n', '    function getTotalPrize() public constant returns (uint total) {\n', '        uint t = 0;\n', '        for (uint i = 0; i < prizes.length; i++) {\n', '            t = t + prizes[i];\n', '        }\n', '        return t;\n', '    }\n', '\n', '    function transferToken (address receiver, uint amount) public {\n', '        DmlMarketplace dmp = DmlMarketplace(marketplace);\n', '        require(dmp.isModerator(msg.sender));\n', '        ERC20Interface c = ERC20Interface(token);\n', '        require(c.transfer(receiver, amount));\n', '    }\n', '    \n', '}\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '}']
['pragma solidity ^0.4.22;\n', '\n', 'contract DmlMarketplace {\n', '    // Public Variables\n', '    mapping(address => bool) public moderators;\n', '    address public token;\n', '    \n', '    // bountyFactory address\n', '    DmlBountyFactory public bountyFactory;\n', '    \n', '    \n', '    mapping(bytes32 => uint) public totals;\n', '    mapping(address => mapping(bytes32 => bool)) public hasPurchased;\n', '    \n', '    constructor() public {\n', '        moderators[msg.sender] = true;\n', '    }\n', '    \n', '    function isReady() view public returns (bool success) {\n', '        if (token == address(0) || bountyFactory == address(0)) {\n', '            return false;\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function isModerator(address modAddress) view public returns (bool success) {\n', '        return moderators[modAddress];\n', '    }\n', '\n', '    function addModerator(address newModerator) public {\n', '        require(isModerator(msg.sender));\n', '        moderators[newModerator] = true;\n', '    }\n', '\n', '    function removeModerator(address mod) public {\n', '        require(isModerator(msg.sender));\n', '        moderators[mod] = false;\n', '    }\n', '\n', '    function init (address newTokenAddress) public returns (bool success) {\n', '        require(isModerator(msg.sender));\n', '        token = newTokenAddress;\n', '        DmlBountyFactory f = new DmlBountyFactory(token);\n', '        bountyFactory = f;\n', '        return true;\n', '    }\n', '\n', '    function setBountyFactory(address factoryAddress) public {\n', '        require(isModerator(msg.sender));\n', '        DmlBountyFactory f = DmlBountyFactory(factoryAddress);\n', '        bountyFactory = f;\n', '    }\n', '    \n', '    function buy(bytes32 algoId, uint value) public returns (bool success) {\n', '        address sender = msg.sender;\n', '        \n', '        require(!hasPurchased[msg.sender][algoId]);\n', '\n', '        ERC20Interface c = ERC20Interface(token);\n', '        \n', '        require(c.transferFrom(sender, address(this), value));\n', '\n', '        hasPurchased[sender][algoId] = true;\n', '        \n', '        if (totals[algoId] < 1) {\n', '            totals[algoId] = 1;\n', '        } else {\n', '            totals[algoId]++;\n', '        }\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function transferToken (address receiver, uint amount) public {\n', '        require(isModerator(msg.sender));\n', '        \n', '        ERC20Interface c = ERC20Interface(token);\n', '        require(c.transfer(receiver, amount));\n', '    }\n', '}\n', '\n', 'contract DmlBountyFactory {\n', '    address public marketplace;\n', '    address public token;\n', '    address[] public allBountyAddresses;\n', '    mapping(address => address[]) public bountyAddressByCreator;\n', '    mapping(address => address[]) public bountyAddressByParticipant;\n', '    \n', '    constructor(address tokenAddress) public {\n', '        marketplace = msg.sender;\n', '        token = tokenAddress;\n', '    }\n', '\n', '    function getAllBounties() view public returns (address[] bounties) {\n', '        return allBountyAddresses;\n', '    }\n', '\n', '    function getBountiesByCreator(address creatorAddress) view public returns (address[] bounties) {\n', '        return bountyAddressByCreator[creatorAddress];\n', '    }\n', '\n', '    function getBountiesByParticipant(address participantAddress) view public returns (address[] bounties) {\n', '        return bountyAddressByParticipant[participantAddress];\n', '    }\n', '    \n', '    function createBounty(string name, uint[] prizes) public {\n', '        address creator = msg.sender;\n', '        address newBounty = new Bounty(token, creator, name, prizes, marketplace);\n', '        allBountyAddresses.push(newBounty);\n', '        bountyAddressByCreator[msg.sender].push(newBounty);\n', '    }\n', '    \n', '    function joinBounty(address bountyAddress) public {\n', '        Bounty b = Bounty(bountyAddress);\n', '        \n', '        require(b.join(msg.sender));\n', '        \n', '        bountyAddressByParticipant[msg.sender].push(bountyAddress);\n', '    }\n', '}\n', '\n', 'contract Bounty {\n', '    // contract addresses\n', '    address public factory;\n', '    \n', '    // public constants\n', '    address public creator;\n', '    address public token;\n', '    address public marketplace;\n', '\n', '    // state variables\n', '    string public name;\n', '    uint[] public prizes;\n', '    uint public createdAt;\n', '    address[] public winners;\n', '    address[] public participants;\n', '    Status public status;\n', '    mapping(address => bool) public participantsMap;\n', '\n', '    enum Status {\n', '        Initialized,\n', '        EnrollmentStart,\n', '        EnrollmentEnd,\n', '        BountyStart,\n', '        BountyEnd,\n', '        EvaluationEnd,\n', '        Completed,\n', '        Paused\n', '    }\n', '    \n', '    constructor(\n', '        address tokenAddress,\n', '        address creatorAddress,\n', '        string initName,\n', '        uint[] initPrizes,\n', '        address mpAddress\n', '    ) public {\n', '        factory = msg.sender;\n', '        marketplace = mpAddress;\n', '        creator = creatorAddress;\n', '        token = tokenAddress;\n', '        prizes = initPrizes;\n', '        status = Status.Initialized;\n', '        name = initName;\n', '        createdAt = now;\n', '    }\n', '    \n', '    function isFunded() public view returns (bool success) {\n', '        ERC20Interface c = ERC20Interface(token);\n', '        require(getTotalPrize() <= c.balanceOf(address(this)));\n', '        return true;\n', '    }\n', '\n', '    function getData() public view returns (string retName, uint[] retPrizes, address[] retWinenrs, address[] retParticipants, Status retStatus, address retCreator, uint createdTime) {\n', '        return (name, prizes, winners, participants, status, creator, createdAt);\n', '    }\n', '    \n', '    function join(address participantAddress) public returns (bool success) {\n', '        require(msg.sender == factory);\n', '\n', '        if (status != Status.EnrollmentStart) {\n', '            return false;\n', '        }\n', '        \n', '        if (participantsMap[participantAddress] == true) {\n', '            return false;\n', '        }\n', '        \n', '        participants.push(participantAddress);\n', '        participantsMap[participantAddress] = true;\n', '        \n', '        return true;\n', '    }\n', '\n', '    function updateBounty(string newName, uint[] newPrizes) public {\n', '        require(updateName(newName));\n', '        require(updatePrizes(newPrizes));\n', '    }\n', '\n', '    function updateName(string newName) public returns (bool success) {\n', '        DmlMarketplace dmp = DmlMarketplace(marketplace);\n', '        require(dmp.isModerator(msg.sender) || msg.sender == creator);\n', '        name = newName;\n', '        return true;\n', '    }\n', '\n', '    function forceUpdateName(string newName) public returns (bool success) {\n', '        DmlMarketplace dmp = DmlMarketplace(marketplace);\n', '        require(dmp.isModerator(msg.sender));\n', '        name = newName;\n', '        return true;\n', '    }\n', '    \n', '    function updatePrizes(uint[] newPrizes) public returns (bool success) {\n', '        DmlMarketplace dmp = DmlMarketplace(marketplace);\n', '        require(dmp.isModerator(msg.sender) || msg.sender == creator);\n', '        require(status == Status.Initialized);\n', '        prizes = newPrizes;\n', '        return true;\n', '    }\n', '\n', '    function forceUpdatePrizes(uint[] newPrizes) public returns (bool success) {\n', '        DmlMarketplace dmp = DmlMarketplace(marketplace);\n', '        require(dmp.isModerator(msg.sender));\n', '        prizes = newPrizes;\n', '        return true;\n', '    }\n', '\n', '    function setStatus(Status newStatus) private returns (bool success) {\n', '        DmlMarketplace dmp = DmlMarketplace(marketplace);\n', '        require(dmp.isModerator(msg.sender) || msg.sender == creator);\n', '        status = newStatus;\n', '        return true;\n', '    }\n', '\n', '    function forceSetStatus(Status newStatus) public returns (bool success) {\n', '        DmlMarketplace dmp = DmlMarketplace(marketplace);\n', '        require(dmp.isModerator(msg.sender));\n', '        status = newStatus;\n', '        return true;\n', '    }\n', '    \n', '    function startEnrollment() public {\n', '        require(prizes.length > 0);\n', '        require(isFunded());\n', '        setStatus(Status.EnrollmentStart);\n', '    }\n', '    \n', '    function stopEnrollment() public {\n', '        require(status == Status.EnrollmentStart);\n', '        setStatus(Status.EnrollmentEnd);\n', '    }\n', '    \n', '    function startBounty() public {\n', '        require(status == Status.EnrollmentEnd);\n', '        setStatus(Status.BountyStart);\n', '    }\n', '    \n', '    function stopBounty() public {\n', '        require(status == Status.BountyStart);\n', '        setStatus(Status.BountyEnd);\n', '    }\n', '\n', '    function updateWinners(address[] newWinners) public {\n', '        DmlMarketplace dmp = DmlMarketplace(marketplace);\n', '        require(dmp.isModerator(msg.sender) || msg.sender == creator);\n', '        require(status == Status.BountyEnd);\n', '        require(newWinners.length == prizes.length);\n', '\n', '        for (uint i = 0; i < newWinners.length; i++) {\n', '            require(participantsMap[newWinners[i]]);\n', '        }\n', '\n', '        winners = newWinners;\n', '        setStatus(Status.EvaluationEnd);\n', '    }\n', '\n', '    function forceUpdateWinners(address[] newWinners) public {\n', '        DmlMarketplace dmp = DmlMarketplace(marketplace);\n', '        require(dmp.isModerator(msg.sender));\n', '\n', '        winners = newWinners;\n', '    }\n', '\n', '    function payoutWinners() public {\n', '        ERC20Interface c = ERC20Interface(token);\n', '        DmlMarketplace dmp = DmlMarketplace(marketplace);\n', '\n', '        require(dmp.isModerator(msg.sender) || msg.sender == creator);\n', '        require(isFunded());\n', '        require(winners.length == prizes.length);\n', '        require(status == Status.EvaluationEnd);\n', '\n', '        for (uint i = 0; i < prizes.length; i++) {\n', '            require(c.transfer(winners[i], prizes[i]));\n', '        }\n', '        \n', '        setStatus(Status.Completed);\n', '    }\n', '    \n', '    function getTotalPrize() public constant returns (uint total) {\n', '        uint t = 0;\n', '        for (uint i = 0; i < prizes.length; i++) {\n', '            t = t + prizes[i];\n', '        }\n', '        return t;\n', '    }\n', '\n', '    function transferToken (address receiver, uint amount) public {\n', '        DmlMarketplace dmp = DmlMarketplace(marketplace);\n', '        require(dmp.isModerator(msg.sender));\n', '        ERC20Interface c = ERC20Interface(token);\n', '        require(c.transfer(receiver, amount));\n', '    }\n', '    \n', '}\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '}']
