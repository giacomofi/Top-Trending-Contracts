['pragma solidity ^0.4.13;\n', '\n', 'contract ERC20 {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '\n', '  function transfer(address to, uint value) returns (bool ok);\n', '  function transferFrom(address from, address to, uint value) returns (bool ok);\n', '  function approve(address spender, uint value) returns (bool ok);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract SafeMath {\n', '  function safeMul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint a, uint b) internal returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, SafeMath {\n', '\n', '  event Minted(address receiver, uint amount);\n', '\n', '  mapping(address => uint) balances;\n', '\n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '  function isToken() public constant returns (bool weAre) {\n', '    return true;\n', '  }\n', '\n', '  function transfer(address _to, uint _value) returns (bool success) {\n', '    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\n', '    uint _allowance = allowed[_from][msg.sender];\n', '\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    balances[_from] = safeSub(balances[_from], _value);\n', '    allowed[_from][msg.sender] = safeSub(_allowance, _value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint _value) returns (bool success) {\n', '\n', '   require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract BitBeri is StandardToken {\n', '\n', '    string public name = "BitBeri";\n', '    string public symbol = "BTB";\n', '    uint public decimals = 18;\n', '\n', '    \n', '    bool public halted = false; \n', '    bool public preTge = true; \n', '    bool public stageOne = false; \n', '    bool public stageTwo = false; \n', '    bool public stageThree = false; \n', '    bool public freeze = true; \n', '\n', '   \n', '    address public founder = 0x0;\n', '    address public owner = 0x0;\n', '\n', '    uint public totalTokens = 100000000000000000000000000;\n', '    uint public team = 5000000000000000000000000;\n', '    uint public bounty = 5000000000000000000000000; \n', '\n', '    uint public preTgeCap = 2500000000000000000000000;\n', '    uint public tgeCap = 50000000000000000000000000; \n', '\n', '    uint public presaleTokenSupply = 0; \n', '    uint public presaleEtherRaised = 0; \n', '    uint public preTgeTokenSupply = 0; \n', '\n', '    event Buy(address indexed sender, uint eth, uint fbt);\n', '\n', '    event TokensSent(address indexed to, uint256 value);\n', '    event ContributionReceived(address indexed to, uint256 value);\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    function BitBeri(address _founder) payable {\n', '        owner = msg.sender;\n', '        founder = _founder;\n', '\n', '        balances[founder] = team;\n', '        totalTokens = safeSub(totalTokens, team);\n', '        totalTokens = safeSub(totalTokens, bounty);\n', '        totalSupply = totalTokens;\n', '        balances[owner] = totalSupply;\n', '    }\n', '\n', '   function buy() public payable returns(bool) {\n', '        require(!halted);\n', '        require(msg.value>0);\n', '        \n', '        uint256 weiAmount = msg.value;\n', '        uint256 tokens = safeDiv(safeMul(weiAmount,10**17),13892747985551);\n', '\n', '        require(balances[owner]>tokens);\n', '\n', '        if (stageThree) {\n', '\t\t\tpreTge = false;\n', '\t\t\tstageOne = false;\n', '\t\t\tstageTwo = false;\n', '        }\n', '\t\t\n', '        if (stageTwo) {\n', '\t\t\tpreTge = false;\n', '\t\t\tstageOne = false;\n', '            tokens = tokens + (tokens / 10);\n', '        }\n', '\t\t\n', '        if (stageOne) {\n', '\t\t\tpreTge = false;\n', '            tokens = tokens + (tokens / 5);\n', '        }\n', '\t\t\n', '        if (preTge) {\n', '            tokens = tokens + (tokens / 2);\n', '        }\n', '\n', '        if (preTge) {\n', '            require(safeAdd(presaleTokenSupply, tokens) < preTgeCap);\n', '        } else {\n', '            require(safeAdd(presaleTokenSupply, tokens) < safeSub(tgeCap, preTgeTokenSupply));\n', '        }\n', '\n', '        founder.transfer(msg.value);\n', '\n', '        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);\n', '        balances[owner] = safeSub(balances[owner], tokens);\n', '\n', '        if (preTge) {\n', '            preTgeTokenSupply  = safeAdd(preTgeTokenSupply, tokens);\n', '        }\n', '        presaleTokenSupply = safeAdd(presaleTokenSupply, tokens);\n', '        presaleEtherRaised = safeAdd(presaleEtherRaised, msg.value);\n', '\n', '        Buy(msg.sender, msg.value, tokens);\n', '\n', '        TokensSent(msg.sender, tokens);\n', '        ContributionReceived(msg.sender, msg.value);\n', '        Transfer(owner, msg.sender, tokens);\n', '\n', '        return true;\n', '    }\n', '\n', '    function PreTgeEnable() onlyOwner() {\n', '        preTge = true;\n', '    }\n', '\n', '    function PreTgeDisable() onlyOwner() {\n', '        preTge = false;\n', '    }\n', '\n', '    function StageOneEnable() onlyOwner() {\n', '        stageOne = true;\n', '    }\n', '\n', '    function StageOneDisable() onlyOwner() {\n', '        stageOne = false;\n', '    }\n', '\t\n', '    function StageTwoEnable() onlyOwner() {\n', '        stageTwo = true;\n', '    }\n', '\n', '    function StageTwoDisable() onlyOwner() {\n', '        stageTwo = false;\n', '    }\n', '\n', '    function StageThreeEnable() onlyOwner() {\n', '        stageThree = true;\n', '    }\n', '\n', '    function StageThreeDisable() onlyOwner() {\n', '        stageThree = false;\n', '    }\n', '\n', '    function EventEmergencyStop() onlyOwner() {\n', '        halted = true;\n', '    }\n', '\n', '    function EventEmergencyContinue() onlyOwner() {\n', '        halted = false;\n', '    }\n', '\n', '    function sendTeamTokens(address _to, uint256 _value) onlyOwner() {\n', '        balances[founder] = safeSub(balances[founder], _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        TokensSent(_to, _value);\n', '        Transfer(owner, _to, _value);\n', '    }\n', '\n', '    function sendBounty(address _to, uint256 _value) onlyOwner() {\n', '        bounty = safeSub(bounty, _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        TokensSent(_to, _value);\n', '        Transfer(owner, _to, _value);\n', '    }\n', '\n', '    function sendSupplyTokens(address _to, uint256 _value) onlyOwner() {\n', '        balances[owner] = safeSub(balances[owner], _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        TokensSent(_to, _value);\n', '        Transfer(owner, _to, _value);\n', '    }\n', '\n', '\n', '    function transfer(address _to, uint256 _value) isAvailable() returns (bool success) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) isAvailable() returns (bool success) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function burnRemainingTokens() isAvailable() onlyOwner() {\n', '        Burn(owner, balances[owner]);\n', '        balances[owner] = 0;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier isAvailable() {\n', '        require(!halted && !freeze);\n', '        _;\n', '    }\n', '\n', '    function() payable {\n', '        buy();\n', '    }\n', '\n', '    function freeze() onlyOwner() {\n', '         freeze = true;\n', '    }\n', '\n', '    function unFreeze() onlyOwner() {\n', '         freeze = false;\n', '    }\n', '\n', '    function changeOwner(address _to) onlyOwner() {\n', '        balances[_to] = balances[owner];\n', '        balances[owner] = 0;\n', '        owner = _to;\n', '    }\n', '\n', '    function changeFounder(address _to) onlyOwner() {\n', '        balances[_to] = balances[founder];\n', '        balances[founder] = 0;\n', '        founder = _to;\n', '    }\n', '}']