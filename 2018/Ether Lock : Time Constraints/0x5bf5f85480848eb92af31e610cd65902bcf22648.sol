['pragma solidity ^0.4.24;\n', '\n', '/*\n', '    Copyright 2018, Vicent Nos, Enrique Santos & Mireia Puig\n', '\n', '    License:\n', '    https://creativecommons.org/licenses/by-nc-nd/4.0/legalcode\n', '\n', ' */\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() internal {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '//////////////////////////////////////////////////////////////\n', '//                                                          //\n', '//  Lescovex Equity ERC20                                   //\n', '//                                                          //\n', '//////////////////////////////////////////////////////////////\n', '\n', 'contract LescovexERC20 is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) public balances;\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    mapping (address => timeHold) holded;\n', '\n', '    struct timeHold{\n', '        uint256[] amount;\n', '        uint256[] time;\n', '        uint256 length;\n', '    }\n', '\n', '    /* Public variables for the ERC20 token */\n', '    string public constant standard = "ERC20 Lescovex ISC Income Smart Contract";\n', '    uint8 public constant decimals = 8; // hardcoded to be a constant\n', '    uint256 public holdMax = 100;\n', '    uint256 public totalSupply;\n', '    uint256 public holdTime;\n', '    string public name;\n', '    string public symbol;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function holdedOf(address _owner) public view returns (uint256) {\n', '        // Returns the valid holded amount of _owner (see function hold),\n', '        // where valid means that the amount is holded more than requiredTime\n', '        uint256 requiredTime = block.timestamp - holdTime;\n', '\n', '        // Check of the initial values for the search loop.\n', '        uint256 iValid = 0;                         // low index in test range\n', '        uint256 iNotValid = holded[_owner].length;  // high index in test range\n', '        if (iNotValid == 0                          // empty array of holds\n', '        || holded[_owner].time[iValid] >= requiredTime) { // not any valid holds\n', '            return 0;\n', '        }\n', '\n', '        // Binary search of the highest index with a valid hold time\n', '        uint256 i = iNotValid / 2;  // index of pivot element to test\n', '        while (i > iValid) {  // while there is a higher one valid\n', '            if (holded[_owner].time[i] < requiredTime) {\n', '                iValid = i;   // valid hold\n', '            } else {\n', '                iNotValid = i; // not valid hold\n', '            }\n', '            i = (iNotValid + iValid) / 2;\n', '        }\n', '        return holded[_owner].amount[iValid];\n', '    }\n', '\n', '    function hold(address _to, uint256 _value) internal {\n', '        require(holded[_to].length < holdMax);\n', '        // holded[_owner].amount[] is the accumulated sum of holded amounts,\n', '        // sorted from oldest to newest.\n', '        uint256 len = holded[_to].length;\n', '        uint256 accumulatedValue = (len == 0 ) ?\n', '            _value :\n', '            _value + holded[_to].amount[len - 1];\n', '\n', '        // records the accumulated holded amount\n', '        holded[_to].amount.push(accumulatedValue);\n', '        holded[_to].time.push(block.timestamp);\n', '        holded[_to].length++;\n', '    }\n', '\n', '    function setHoldTime(uint256 _value) external onlyOwner{\n', '      holdTime = _value;\n', '    }\n', '\n', '    function setHoldMax(uint256 _value) external onlyOwner{\n', '      holdMax = _value;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '\n', '        delete holded[msg.sender];\n', '        hold(msg.sender,balances[msg.sender]);\n', '        hold(_to,_value);\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '        delete holded[_from];\n', '        hold(_from,balances[_from]);\n', '        hold(_to,_value);\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /* Approve and then communicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'interface tokenRecipient {\n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external ;\n', '}\n', '\n', '\n', 'contract Lescovex_ISC is LescovexERC20 {\n', '\n', '    uint256 public contractBalance = 0;\n', '\n', '    //Declare logging events\n', '    event LogDeposit(address sender, uint amount);\n', '    event LogWithdrawal(address receiver, uint amount);\n', '\n', '    address contractAddr = this;\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    constructor (\n', '        uint256 initialSupply,\n', '        string contractName,\n', '        string tokenSymbol,\n', '        uint256 contractHoldTime,\n', '        address contractOwner\n', '\n', '        ) public {\n', '        totalSupply = initialSupply;  // Update total supply\n', '        name = contractName;             // Set the name for display purposes\n', '        symbol = tokenSymbol;         // Set the symbol for display purposes\n', '        holdTime = contractHoldTime;\n', '        balances[contractOwner] = totalSupply;\n', '\n', '    }\n', '\n', '    function deposit() external payable onlyOwner returns(bool success) {\n', '        contractBalance = contractAddr.balance;\n', '        //executes event to reflect the changes\n', '        emit LogDeposit(msg.sender, msg.value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function withdrawReward() external {\n', '        uint256 ethAmount = (holdedOf(msg.sender) * contractBalance) / totalSupply;\n', '\n', '        require(ethAmount > 0);\n', '\n', '        //executes event to register the changes\n', '        emit LogWithdrawal(msg.sender, ethAmount);\n', '\n', '        delete holded[msg.sender];\n', '        hold(msg.sender,balances[msg.sender]);\n', '        //send eth to owner address\n', '        msg.sender.transfer(ethAmount);\n', '    }\n', '\n', '    function withdraw(uint256 value) external onlyOwner {\n', '        //send eth to owner address\n', '        msg.sender.transfer(value);\n', '        //executes event to register the changes\n', '        emit LogWithdrawal(msg.sender, value);\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/*\n', '    Copyright 2018, Vicent Nos, Enrique Santos & Mireia Puig\n', '\n', '    License:\n', '    https://creativecommons.org/licenses/by-nc-nd/4.0/legalcode\n', '\n', ' */\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() internal {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '//////////////////////////////////////////////////////////////\n', '//                                                          //\n', '//  Lescovex Equity ERC20                                   //\n', '//                                                          //\n', '//////////////////////////////////////////////////////////////\n', '\n', 'contract LescovexERC20 is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) public balances;\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    mapping (address => timeHold) holded;\n', '\n', '    struct timeHold{\n', '        uint256[] amount;\n', '        uint256[] time;\n', '        uint256 length;\n', '    }\n', '\n', '    /* Public variables for the ERC20 token */\n', '    string public constant standard = "ERC20 Lescovex ISC Income Smart Contract";\n', '    uint8 public constant decimals = 8; // hardcoded to be a constant\n', '    uint256 public holdMax = 100;\n', '    uint256 public totalSupply;\n', '    uint256 public holdTime;\n', '    string public name;\n', '    string public symbol;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function holdedOf(address _owner) public view returns (uint256) {\n', '        // Returns the valid holded amount of _owner (see function hold),\n', '        // where valid means that the amount is holded more than requiredTime\n', '        uint256 requiredTime = block.timestamp - holdTime;\n', '\n', '        // Check of the initial values for the search loop.\n', '        uint256 iValid = 0;                         // low index in test range\n', '        uint256 iNotValid = holded[_owner].length;  // high index in test range\n', '        if (iNotValid == 0                          // empty array of holds\n', '        || holded[_owner].time[iValid] >= requiredTime) { // not any valid holds\n', '            return 0;\n', '        }\n', '\n', '        // Binary search of the highest index with a valid hold time\n', '        uint256 i = iNotValid / 2;  // index of pivot element to test\n', '        while (i > iValid) {  // while there is a higher one valid\n', '            if (holded[_owner].time[i] < requiredTime) {\n', '                iValid = i;   // valid hold\n', '            } else {\n', '                iNotValid = i; // not valid hold\n', '            }\n', '            i = (iNotValid + iValid) / 2;\n', '        }\n', '        return holded[_owner].amount[iValid];\n', '    }\n', '\n', '    function hold(address _to, uint256 _value) internal {\n', '        require(holded[_to].length < holdMax);\n', '        // holded[_owner].amount[] is the accumulated sum of holded amounts,\n', '        // sorted from oldest to newest.\n', '        uint256 len = holded[_to].length;\n', '        uint256 accumulatedValue = (len == 0 ) ?\n', '            _value :\n', '            _value + holded[_to].amount[len - 1];\n', '\n', '        // records the accumulated holded amount\n', '        holded[_to].amount.push(accumulatedValue);\n', '        holded[_to].time.push(block.timestamp);\n', '        holded[_to].length++;\n', '    }\n', '\n', '    function setHoldTime(uint256 _value) external onlyOwner{\n', '      holdTime = _value;\n', '    }\n', '\n', '    function setHoldMax(uint256 _value) external onlyOwner{\n', '      holdMax = _value;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '\n', '        delete holded[msg.sender];\n', '        hold(msg.sender,balances[msg.sender]);\n', '        hold(_to,_value);\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '        delete holded[_from];\n', '        hold(_from,balances[_from]);\n', '        hold(_to,_value);\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /* Approve and then communicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'interface tokenRecipient {\n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external ;\n', '}\n', '\n', '\n', 'contract Lescovex_ISC is LescovexERC20 {\n', '\n', '    uint256 public contractBalance = 0;\n', '\n', '    //Declare logging events\n', '    event LogDeposit(address sender, uint amount);\n', '    event LogWithdrawal(address receiver, uint amount);\n', '\n', '    address contractAddr = this;\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    constructor (\n', '        uint256 initialSupply,\n', '        string contractName,\n', '        string tokenSymbol,\n', '        uint256 contractHoldTime,\n', '        address contractOwner\n', '\n', '        ) public {\n', '        totalSupply = initialSupply;  // Update total supply\n', '        name = contractName;             // Set the name for display purposes\n', '        symbol = tokenSymbol;         // Set the symbol for display purposes\n', '        holdTime = contractHoldTime;\n', '        balances[contractOwner] = totalSupply;\n', '\n', '    }\n', '\n', '    function deposit() external payable onlyOwner returns(bool success) {\n', '        contractBalance = contractAddr.balance;\n', '        //executes event to reflect the changes\n', '        emit LogDeposit(msg.sender, msg.value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function withdrawReward() external {\n', '        uint256 ethAmount = (holdedOf(msg.sender) * contractBalance) / totalSupply;\n', '\n', '        require(ethAmount > 0);\n', '\n', '        //executes event to register the changes\n', '        emit LogWithdrawal(msg.sender, ethAmount);\n', '\n', '        delete holded[msg.sender];\n', '        hold(msg.sender,balances[msg.sender]);\n', '        //send eth to owner address\n', '        msg.sender.transfer(ethAmount);\n', '    }\n', '\n', '    function withdraw(uint256 value) external onlyOwner {\n', '        //send eth to owner address\n', '        msg.sender.transfer(value);\n', '        //executes event to register the changes\n', '        emit LogWithdrawal(msg.sender, value);\n', '    }\n', '}']
