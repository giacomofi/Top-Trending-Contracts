['pragma solidity ^0.4.17;\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint x, uint y) pure internal returns(uint) {\n', '      uint z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtract(uint x, uint y) pure internal returns(uint) {\n', '      assert(x >= y);\n', '      uint z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint x, uint y) pure internal returns(uint) {\n', '      uint z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '\n', '    function getRandomNumber(uint16 maxRandom, uint8 min, address privateAddress) constant public returns(uint8) {\n', '        uint256 genNum = uint256(block.blockhash(block.number-1)) + uint256(privateAddress);\n', '        return uint8(genNum % (maxRandom - min + 1)+min);\n', '    }\n', '}\n', '\n', 'contract Enums {\n', '    enum ResultCode {\n', '        SUCCESS,\n', '        ERROR_CLASS_NOT_FOUND,\n', '        ERROR_LOW_BALANCE,\n', '        ERROR_SEND_FAIL,\n', '        ERROR_NOT_OWNER,\n', '        ERROR_NOT_ENOUGH_MONEY,\n', '        ERROR_INVALID_AMOUNT\n', '    }\n', '\n', '    enum AngelAura { \n', '        Blue, \n', '        Yellow, \n', '        Purple, \n', '        Orange, \n', '        Red, \n', '        Green \n', '    }\n', '}\n', 'contract AccessControl {\n', '    address public creatorAddress;\n', '    uint16 public totalSeraphims = 0;\n', '    mapping (address => bool) public seraphims;\n', '\n', '    bool public isMaintenanceMode = true;\n', ' \n', '    modifier onlyCREATOR() {\n', '        require(msg.sender == creatorAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlySERAPHIM() {\n', '        require(seraphims[msg.sender] == true);\n', '        _;\n', '    }\n', '    \n', '    modifier isContractActive {\n', '        require(!isMaintenanceMode);\n', '        _;\n', '    }\n', '    \n', '    // Constructor\n', '    function AccessControl() public {\n', '        creatorAddress = msg.sender;\n', '    }\n', '    \n', '\n', '    function addSERAPHIM(address _newSeraphim) onlyCREATOR public {\n', '        if (seraphims[_newSeraphim] == false) {\n', '            seraphims[_newSeraphim] = true;\n', '            totalSeraphims += 1;\n', '        }\n', '    }\n', '    \n', '    function removeSERAPHIM(address _oldSeraphim) onlyCREATOR public {\n', '        if (seraphims[_oldSeraphim] == true) {\n', '            seraphims[_oldSeraphim] = false;\n', '            totalSeraphims -= 1;\n', '        }\n', '    }\n', '\n', '    function updateMaintenanceMode(bool _isMaintaining) onlyCREATOR public {\n', '        isMaintenanceMode = _isMaintaining;\n', '    }\n', '\n', '  \n', '} \n', 'contract IAngelCardData is AccessControl, Enums {\n', '    uint8 public totalAngelCardSeries;\n', '    uint64 public totalAngels;\n', '\n', '    \n', '    // write\n', '    // angels\n', '    function createAngelCardSeries(uint8 _angelCardSeriesId, uint _basePrice,  uint64 _maxTotal, uint8 _baseAura, uint16 _baseBattlePower, uint64 _liveTime) onlyCREATOR external returns(uint8);\n', '    function updateAngelCardSeries(uint8 _angelCardSeriesId) onlyCREATOR external;\n', '    function setAngel(uint8 _angelCardSeriesId, address _owner, uint _price, uint16 _battlePower) onlySERAPHIM external returns(uint64);\n', '    function addToAngelExperienceLevel(uint64 _angelId, uint _value) onlySERAPHIM external;\n', '    function setAngelLastBattleTime(uint64 _angelId) onlySERAPHIM external;\n', '    function setAngelLastVsBattleTime(uint64 _angelId) onlySERAPHIM external;\n', '    function setLastBattleResult(uint64 _angelId, uint16 _value) onlySERAPHIM external;\n', '    function addAngelIdMapping(address _owner, uint64 _angelId) private;\n', '    function transferAngel(address _from, address _to, uint64 _angelId) onlySERAPHIM public returns(ResultCode);\n', '    function ownerAngelTransfer (address _to, uint64 _angelId)  public;\n', '\n', '    // read\n', '    function getAngelCardSeries(uint8 _angelCardSeriesId) constant public returns(uint8 angelCardSeriesId, uint64 currentAngelTotal, uint basePrice, uint64 maxAngelTotal, uint8 baseAura, uint baseBattlePower, uint64 lastSellTime, uint64 liveTime);\n', '    function getAngel(uint64 _angelId) constant public returns(uint64 angelId, uint8 angelCardSeriesId, uint16 battlePower, uint8 aura, uint16 experience, uint price, uint64 createdTime, uint64 lastBattleTime, uint64 lastVsBattleTime, uint16 lastBattleResult, address owner);\n', '    function getOwnerAngelCount(address _owner) constant public returns(uint);\n', '    function getAngelByIndex(address _owner, uint _index) constant public returns(uint64);\n', '    function getTotalAngelCardSeries() constant public returns (uint8);\n', '    function getTotalAngels() constant public returns (uint64);\n', '}\n', 'contract IPetCardData is AccessControl, Enums {\n', '    uint8 public totalPetCardSeries;    \n', '    uint64 public totalPets;\n', '    \n', '    // write\n', '    function createPetCardSeries(uint8 _petCardSeriesId, uint32 _maxTotal) onlyCREATOR public returns(uint8);\n', '    function setPet(uint8 _petCardSeriesId, address _owner, string _name, uint8 _luck, uint16 _auraRed, uint16 _auraYellow, uint16 _auraBlue) onlySERAPHIM external returns(uint64);\n', '    function setPetAuras(uint64 _petId, uint8 _auraRed, uint8 _auraBlue, uint8 _auraYellow) onlySERAPHIM external;\n', '    function setPetLastTrainingTime(uint64 _petId) onlySERAPHIM external;\n', '    function setPetLastBreedingTime(uint64 _petId) onlySERAPHIM external;\n', '    function addPetIdMapping(address _owner, uint64 _petId) private;\n', '    function transferPet(address _from, address _to, uint64 _petId) onlySERAPHIM public returns(ResultCode);\n', '    function ownerPetTransfer (address _to, uint64 _petId)  public;\n', '    function setPetName(string _name, uint64 _petId) public;\n', '\n', '    // read\n', '    function getPetCardSeries(uint8 _petCardSeriesId) constant public returns(uint8 petCardSeriesId, uint32 currentPetTotal, uint32 maxPetTotal);\n', '    function getPet(uint _petId) constant public returns(uint petId, uint8 petCardSeriesId, string name, uint8 luck, uint16 auraRed, uint16 auraBlue, uint16 auraYellow, uint64 lastTrainingTime, uint64 lastBreedingTime, address owner);\n', '    function getOwnerPetCount(address _owner) constant public returns(uint);\n', '    function getPetByIndex(address _owner, uint _index) constant public returns(uint);\n', '    function getTotalPetCardSeries() constant public returns (uint8);\n', '    function getTotalPets() constant public returns (uint);\n', '}\n', '\n', 'contract TrainingField is AccessControl{\n', '    // Addresses for other contracts realm interacts with. \n', '    address public angelCardDataContract;\n', '    address public petCardDataContract;\n', '    address public accessoryDataContract;\n', '    \n', '    // events\n', '     event EventSuccessfulTraining(uint64 angelId,uint64 pet1ID,uint64 pet2ID);\n', '    \n', '\n', '    /*** DATA TYPES ***/\n', '\n', '\n', '    struct Angel {\n', '        uint64 angelId;\n', '        uint8 angelCardSeriesId;\n', '        address owner;\n', '        uint16 battlePower;\n', '        uint8 aura;\n', '        uint16 experience;\n', '        uint price;\n', '        uint64 createdTime;\n', '        uint64 lastBattleTime;\n', '        uint64 lastVsBattleTime;\n', '        uint16 lastBattleResult;\n', '    }\n', '\n', '    struct Pet {\n', '        uint64 petId;\n', '        uint8 petCardSeriesId;\n', '        address owner;\n', '        string name;\n', '        uint8 luck;\n', '        uint16 auraRed;\n', '        uint16 auraYellow;\n', '        uint16 auraBlue;\n', '        uint64 lastTrainingTime;\n', '        uint64 lastBreedingTime;\n', '        uint price; \n', '        uint64 liveTime;\n', '    }\n', '    \n', '\n', '    // write functions\n', '    function SetAngelCardDataContact(address _angelCardDataContract) onlyCREATOR external {\n', '        angelCardDataContract = _angelCardDataContract;\n', '    }\n', '    function SetPetCardDataContact(address _petCardDataContract) onlyCREATOR external {\n', '        petCardDataContract = _petCardDataContract;\n', '    }\n', '       \n', '        function checkTraining (uint64 angelID, uint64  pet1ID, uint64 pet2ID) private returns (uint8) {\n', '              IAngelCardData angelCardData = IAngelCardData(angelCardDataContract);\n', '              IPetCardData petCardData = IPetCardData(petCardDataContract);\n', '        \n', '        //check if training function has improper parameters \n', '        if (pet1ID == pet2ID) {return 0;}\n', '        if ((pet1ID <= 0) || (pet1ID > petCardData.getTotalPets())) {return 0;}\n', '        if ((pet2ID <= 0) || (pet2ID > petCardData.getTotalPets())) {return 0;}\n', '        if ((angelID <= 0) || (angelID > angelCardData.getTotalAngels())) {return 0;}\n', '        return 1;\n', '}\n', '\n', '        function Train (uint64 angelID, uint64  pet1ID, uint64 pet2ID) external  {\n', '        uint8 canTrain = checkTraining(angelID, pet1ID, pet2ID);\n', '        if (canTrain == 0 ) {revert();}\n', '        IAngelCardData angelCardData = IAngelCardData(angelCardDataContract);\n', '        IPetCardData petCardData = IPetCardData(petCardDataContract);\n', '        \n', '        Pet memory pet1;\n', '        Pet memory pet2;\n', '        Angel memory angel;\n', '        (,,,angel.aura,,,,,,,angel.owner) = angelCardData.getAngel(angelID);\n', '        (,,,,pet1.auraRed,pet1.auraBlue,pet1.auraYellow,pet1.lastTrainingTime,,pet1.owner) = petCardData.getPet(pet1ID);\n', '        (,,,,pet2.auraRed,pet2.auraBlue,pet2.auraYellow,pet2.lastTrainingTime,,pet2.owner) = petCardData.getPet(pet2ID);\n', '     \n', "     //can't train with someone else's pets. \n", '     if ((angel.owner != msg.sender) || (pet1.owner != msg.sender) || (pet2.owner!= msg.sender)) {revert();}\n', "     //check that you haven't trained for 24 hours 24 *60 * 60 \n", '     if ((now < (pet1.lastTrainingTime+86400)) || (now < (pet1.lastTrainingTime+60))) {revert();}\n', '    \n', '    //AngelRed is a 0 when the angel�s aura isnt� compatible with Red and 1 when it is. \n', ' \n', '    uint32 AngelRed = 0;\n', '    uint32 AngelBlue = 0;\n', '    uint32 AngelYellow = 0;\n', ' \n', '    if ((angel.aura == 4) || (angel.aura == 3) || (angel.aura == 2)) {AngelRed = 1;} \n', '    if ((angel.aura == 0) || (angel.aura == 2) || (angel.aura == 5)) {AngelBlue = 1;}\n', '    if ((angel.aura == 3) || (angel.aura == 1) || (angel.aura == 5)) {AngelYellow = 1;}\n', '\n', '    //You can�t Gain new aura colors, only strengthen the ones you have, so first make sure it HAS a red Aura before increasing it. \n', '    \n', '   \n', '    \n', '    //Set Results\n', '    petCardData.setPetAuras(pet1ID,uint8(findAuras(pet1.auraRed, pet1.auraRed,pet2.auraRed, AngelRed)),uint8(findAuras(pet1.auraBlue, pet1.auraBlue,pet2.auraBlue, AngelBlue)), uint8(findAuras(pet1.auraYellow, pet1.auraYellow,pet2.auraYellow, AngelYellow)) );\n', '     petCardData.setPetAuras(pet2ID,uint8(findAuras(pet2.auraRed, pet1.auraRed,pet2.auraRed, AngelRed)),uint8(findAuras(pet2.auraBlue, pet1.auraBlue,pet2.auraBlue, AngelBlue)), uint8(findAuras(pet2.auraYellow, pet1.auraYellow,pet2.auraYellow, AngelYellow)) );\n', '    petCardData.setPetLastTrainingTime(pet1ID);\n', '    petCardData.setPetLastTrainingTime(pet2ID);\n', '   EventSuccessfulTraining(angelID, pet1ID, pet2ID);\n', '\n', '\n', '        } \n', '        \n', '         function findAuras (uint16 petBaseAura, uint32 pet1Aura, uint32 pet2Aura, uint32 angelAura) private returns (uint32) {\n', '        //Increase by 1 if there is one compatible pet and 2 if there are two. \n', '         if ((petBaseAura >=250) || (petBaseAura == 0)) {return petBaseAura;}\n', '         //max value allowed. \n', '         if ((pet1Aura != 0) && (angelAura == 1)) {\n', '         if (pet2Aura != 0) {return petBaseAura + 2;}\n', '        else {return petBaseAura + 1;}\n', '        }\n', '        return petBaseAura;    \n', '        \n', '    }\n', '        \n', '      function kill() onlyCREATOR external {\n', '        selfdestruct(creatorAddress);\n', '    }\n', '}']