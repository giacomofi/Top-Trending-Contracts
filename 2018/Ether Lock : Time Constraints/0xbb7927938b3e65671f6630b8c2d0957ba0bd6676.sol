['pragma solidity ^0.4.18 ;\n', '\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  \n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  \n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  \n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  \n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  \n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', 'library SafeMath {\n', '\n', '  \n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '   \n', '   \n', '   \n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  \n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '   \n', '   \n', '   \n', '    return a / b;\n', '  }\n', '\n', '  \n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  \n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ContractiumInterface {\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function contractSpend(address _from, uint256 _value) public returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '\n', '    function owner() public view returns (address);\n', '\n', '    function bonusRateOneEth() public view returns (uint256);\n', '    function currentTotalTokenOffering() public view returns (uint256);\n', '    function currentTokenOfferingRaised() public view returns (uint256);\n', '\n', '    function isOfferingStarted() public view returns (bool);\n', '    function offeringEnabled() public view returns (bool);\n', '    function startTime() public view returns (uint256);\n', '    function endTime() public view returns (uint256);\n', '}\n', '\n', '\n', 'contract ContractiumKrypStrong is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    ContractiumInterface ctuContract;\n', '    address public constant KRYPSTRONG = 0x9808bA6d86119ed7a801Cde0bdFE7FF4dC5b5298;\n', '    address public constant CONTRACTIUM = 0x943ACa8ed65FBf188A7D369Cfc2BeE0aE435ee1B;\n', '    address public ownerCtuContract;\n', '    address public owner;\n', '\n', '    uint8 public constant decimals = 18;\n', '    uint256 public unitsOneEthCanBuy = 15000;\n', '\n', '   \n', '    uint256 public currentTokenOfferingRaised;\n', '\n', '    function() public payable {\n', '\n', '        require(msg.sender != owner);\n', '\n', '       \n', '        uint256 bonusRateOneEth = ctuContract.bonusRateOneEth();\n', '\n', '       \n', '        uint256 amount = msg.value.mul(unitsOneEthCanBuy);\n', '\n', '       \n', '        uint256 amountBonus = msg.value.mul(bonusRateOneEth);\n', '        \n', '       \n', '        amount = amount.add(amountBonus);\n', '\n', '       \n', '        uint256 remain = ctuContract.balanceOf(ownerCtuContract);\n', '        require(remain >= amount);\n', '        preValidatePurchase(amount);\n', '\n', '       \n', '        address _from = ownerCtuContract;\n', '        address _to = msg.sender;\n', '        require(ctuContract.transferFrom(_from, _to, amount));\n', '        \n', '       \n', '        currentTokenOfferingRaised = currentTokenOfferingRaised.add(amount);  \n', '\n', '       \n', '        uint256 oneHundredth = msg.value.div(100);\n', '        uint256 sevenHundredths = oneHundredth.mul(7);\n', '        uint256 ninetyThreeHundredths = msg.value.sub(sevenHundredths);\n', '\n', '        KRYPSTRONG.transfer(sevenHundredths);\n', '        ownerCtuContract.transfer(ninetyThreeHundredths);  \n', '    }\n', '\n', '    constructor() public {\n', '        ctuContract = ContractiumInterface(CONTRACTIUM);\n', '        ownerCtuContract = ctuContract.owner();\n', '        owner = msg.sender;\n', '    }\n', '\n', '    \n', '    function preValidatePurchase(uint256 _amount) internal {\n', '        bool isOfferingStarted = ctuContract.isOfferingStarted();\n', '        bool offeringEnabled = ctuContract.offeringEnabled();\n', '        uint256 startTime = ctuContract.startTime();\n', '        uint256 endTime = ctuContract.endTime();\n', '        uint256 currentTotalTokenOffering = ctuContract.currentTotalTokenOffering();\n', '        uint256 currentTokenOfferingRaisedContractium = ctuContract.currentTokenOfferingRaised();\n', '\n', '        require(_amount > 0);\n', '        require(isOfferingStarted);\n', '        require(offeringEnabled);\n', '        require(currentTokenOfferingRaised.add(currentTokenOfferingRaisedContractium.add(_amount)) <= currentTotalTokenOffering);\n', '        require(block.timestamp >= startTime && block.timestamp <= endTime);\n', '    }\n', '    \n', '    \n', '    function setCtuContract(address _ctuAddress) public onlyOwner {\n', '        require(_ctuAddress != address(0x0));\n', '        ctuContract = ContractiumInterface(_ctuAddress);\n', '        ownerCtuContract = ctuContract.owner();\n', '    }\n', '\n', '    \n', '    function resetCurrentTokenOfferingRaised() public onlyOwner {\n', '        currentTokenOfferingRaised = 0;\n', '    }\n', '}']