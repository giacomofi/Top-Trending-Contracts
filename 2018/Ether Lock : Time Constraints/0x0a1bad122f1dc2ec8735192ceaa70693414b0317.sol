['pragma solidity ^0.4.10;\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/*  ERC 20 token */\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', '\n', '// requires 5,050,000 BAT deposited here\n', 'contract BATSafe {\n', '  mapping (address => uint256) allocations;\n', '  uint256 public unlockDate;\n', '  address public BAT;\n', '  uint256 public constant exponent = 10**18;\n', '\n', '  function BATSafe(address _BAT) {\n', '    BAT = _BAT;\n', '    unlockDate = now + 6 * 31 days;\n', '    allocations[0x29940Eec1d3E79e4E20574bB69f4bDF382E60E8A] = 1250000;\n', '    allocations[0x16733a097bC4aE65356083e2919D9aAD32b9106D] = 800000;\n', '    allocations[0xB228d4dEe3fD0667F0161FeF769ad44d8F433Bc9] = 200000;\n', '    allocations[0x245B07814af3d708538D9A1f183450197F0FEBdd] = 200000;\n', '    allocations[0xb29458e5CaaCc3963D286Eb357CEf0734ff22504] = 200000;\n', '    allocations[0x31cC98831574d37966b05f9BE44bc14CA303FcCD] = 200000;\n', '    allocations[0x24f430377A8497cFaD9Ea2839941D6248c3d5275] = 200000;\n', '    allocations[0x7C350e02319eC6703B120160C3B712821A661f62] = 200000;\n', '    allocations[0x0DBaC4B5C00C8aAe3c030878c51524C6ED3d2a51] = 200000;\n', '    allocations[0xdFEb81B6c32c808D53914Ad1A462d6b6439E4230] = 200000;\n', '    allocations[0xE4d59Aa22c99051BC25e51CDC844d851A0C72aAD] = 200000;\n', '    allocations[0x76C12809FA051F5edf2a864de8890C26BFb952c2] = 200000;\n', '    allocations[0xC6204459C59D8e498284337012fc023b7680E7a3] = 200000;\n', '    allocations[0x92b79d1A09Dde9F5b5Ada7aDE3fe8eB1e56a4D79] = 200000;\n', '    allocations[0xEE575340dAbE28f989d9521CEb8ca92c4Cd76047] = 200000;\n', '    allocations[0xb3C7372Bf84D1f13C602b1Fe76A9Ea9B415Be908] = 200000;\n', '    allocations[0x2761B6a570dB5175668Bd622F0248E6c32b158B7] = 200000;\n', '  }\n', '\n', '  function unlock() external {\n', '    if(now < unlockDate) throw;\n', '    uint256 entitled = allocations[msg.sender];\n', '    allocations[msg.sender] = 0;\n', '    if(!StandardToken(BAT).transfer(msg.sender, entitled * exponent)) throw;\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.10;\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/*  ERC 20 token */\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', '\n', '// requires 5,050,000 BAT deposited here\n', 'contract BATSafe {\n', '  mapping (address => uint256) allocations;\n', '  uint256 public unlockDate;\n', '  address public BAT;\n', '  uint256 public constant exponent = 10**18;\n', '\n', '  function BATSafe(address _BAT) {\n', '    BAT = _BAT;\n', '    unlockDate = now + 6 * 31 days;\n', '    allocations[0x29940Eec1d3E79e4E20574bB69f4bDF382E60E8A] = 1250000;\n', '    allocations[0x16733a097bC4aE65356083e2919D9aAD32b9106D] = 800000;\n', '    allocations[0xB228d4dEe3fD0667F0161FeF769ad44d8F433Bc9] = 200000;\n', '    allocations[0x245B07814af3d708538D9A1f183450197F0FEBdd] = 200000;\n', '    allocations[0xb29458e5CaaCc3963D286Eb357CEf0734ff22504] = 200000;\n', '    allocations[0x31cC98831574d37966b05f9BE44bc14CA303FcCD] = 200000;\n', '    allocations[0x24f430377A8497cFaD9Ea2839941D6248c3d5275] = 200000;\n', '    allocations[0x7C350e02319eC6703B120160C3B712821A661f62] = 200000;\n', '    allocations[0x0DBaC4B5C00C8aAe3c030878c51524C6ED3d2a51] = 200000;\n', '    allocations[0xdFEb81B6c32c808D53914Ad1A462d6b6439E4230] = 200000;\n', '    allocations[0xE4d59Aa22c99051BC25e51CDC844d851A0C72aAD] = 200000;\n', '    allocations[0x76C12809FA051F5edf2a864de8890C26BFb952c2] = 200000;\n', '    allocations[0xC6204459C59D8e498284337012fc023b7680E7a3] = 200000;\n', '    allocations[0x92b79d1A09Dde9F5b5Ada7aDE3fe8eB1e56a4D79] = 200000;\n', '    allocations[0xEE575340dAbE28f989d9521CEb8ca92c4Cd76047] = 200000;\n', '    allocations[0xb3C7372Bf84D1f13C602b1Fe76A9Ea9B415Be908] = 200000;\n', '    allocations[0x2761B6a570dB5175668Bd622F0248E6c32b158B7] = 200000;\n', '  }\n', '\n', '  function unlock() external {\n', '    if(now < unlockDate) throw;\n', '    uint256 entitled = allocations[msg.sender];\n', '    allocations[msg.sender] = 0;\n', '    if(!StandardToken(BAT).transfer(msg.sender, entitled * exponent)) throw;\n', '  }\n', '\n', '}']
