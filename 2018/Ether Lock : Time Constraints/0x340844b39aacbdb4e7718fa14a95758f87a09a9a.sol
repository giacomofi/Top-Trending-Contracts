['/*\n', '   Copyright (C) 2018 The Halo Platform\n', '   https://www.haloplatform.tech/\n', '   Scott Morrison\n', '\n', '   This is free software and you are welcome to redistribute it under certain\n', '   conditions. ABSOLUTELY NO WARRANTY; for details visit:\n', '   https://www.gnu.org/licenses/gpl-2.0.html\n', '*/\n', 'pragma solidity ^0.4.20;\n', '\n', 'contract Ownable {\n', '    address Owner = msg.sender;\n', '    modifier onlyOwner() { if (Owner == msg.sender) { _; } }\n', '    function transferOwner(address _owner) public onlyOwner {\n', '        address previousOwner;\n', '        if (address(this).balance == 0) {\n', '            previousOwner = Owner;\n', '            Owner = _owner;\n', '        }\n', '    }\n', '}\n', '\n', 'contract DepositCapsule is Ownable {\n', '    address public Owner;\n', '    mapping (address=>uint) public deposits;\n', '    uint public openDate;\n', '    \n', '    function init(uint openOnDate) public {\n', '        Owner = msg.sender;\n', '        openDate = openOnDate;\n', '    }\n', '    \n', '    function() public payable {  }\n', '    \n', '    function deposit() public payable {\n', '        if (msg.value >= 0.5 ether) {\n', '            deposits[msg.sender] += msg.value;\n', '        }\n', '    }\n', '\n', '    function withdraw(uint amount) public onlyOwner {\n', '        if (now >= openDate) {\n', '            uint max = deposits[msg.sender];\n', '            if (amount <= max && max > 0) {\n', '                if (!msg.sender.send(amount))\n', '                    revert();\n', '            }\n', '        }\n', '    }\n', '}']
['/*\n', '   Copyright (C) 2018 The Halo Platform\n', '   https://www.haloplatform.tech/\n', '   Scott Morrison\n', '\n', '   This is free software and you are welcome to redistribute it under certain\n', '   conditions. ABSOLUTELY NO WARRANTY; for details visit:\n', '   https://www.gnu.org/licenses/gpl-2.0.html\n', '*/\n', 'pragma solidity ^0.4.20;\n', '\n', 'contract Ownable {\n', '    address Owner = msg.sender;\n', '    modifier onlyOwner() { if (Owner == msg.sender) { _; } }\n', '    function transferOwner(address _owner) public onlyOwner {\n', '        address previousOwner;\n', '        if (address(this).balance == 0) {\n', '            previousOwner = Owner;\n', '            Owner = _owner;\n', '        }\n', '    }\n', '}\n', '\n', 'contract DepositCapsule is Ownable {\n', '    address public Owner;\n', '    mapping (address=>uint) public deposits;\n', '    uint public openDate;\n', '    \n', '    function init(uint openOnDate) public {\n', '        Owner = msg.sender;\n', '        openDate = openOnDate;\n', '    }\n', '    \n', '    function() public payable {  }\n', '    \n', '    function deposit() public payable {\n', '        if (msg.value >= 0.5 ether) {\n', '            deposits[msg.sender] += msg.value;\n', '        }\n', '    }\n', '\n', '    function withdraw(uint amount) public onlyOwner {\n', '        if (now >= openDate) {\n', '            uint max = deposits[msg.sender];\n', '            if (amount <= max && max > 0) {\n', '                if (!msg.sender.send(amount))\n', '                    revert();\n', '            }\n', '        }\n', '    }\n', '}']
