['pragma solidity ^0.4.18;\n', '\n', 'contract Math {\n', '    function safeMul(uint a, uint b) internal returns (uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return uint(c);\n', '    }\n', '\n', '    function safeSub(uint a, uint b) internal returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint a, uint b) internal returns (uint) {\n', '        uint c = a + b;\n', '        assert(c>=a && c>=b);\n', '        return uint(c);\n', '    }\n', '\n', '    function assert(bool assertion) internal {\n', '        if (!assertion)\n', '            revert();\n', '    }\n', '}\n', '\n', 'contract Bart is Math {\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Refund(address indexed to, uint256 value);\n', '    event Reward(address indexed to, uint256 value);\n', '    \n', '    //BARC META - non-changable\n', '    string SYMBOL = "BARC";\n', '    string TOKEN_NAME = "BARC coin";\n', '    uint DECIMAL_PLACES = 3;\n', '    \n', '    //BARC INFO\n', '    uint256 TOTAL_SUPPLY = 168000000 * 1e3;\n', '    uint256 MINER_REWARD = 64;\n', '    address LASTEST_MINER;\n', '    uint256 TIME_FOR_CROWDSALE;\n', '    uint256 CREATION_TIME = now;\n', '    address NEUTRAL_ADDRESS = 0xf4fa2a94c38f114bdcfa9d941c03cdd7e5e860a1;\n', '    \n', '    //BARC OWNER INFO\n', '    address OWNER;\n', '    string OWNER_NAME = "OCTAVE YOUSEEME FRANCE";\n', '    \n', '    //BARC VARIABLES\n', '    mapping(address => uint) users;\n', '    uint BLOCK_COUNT = 0;\n', '    uint CYCLES = 1; //update reward cycles, reward will be halved after every 1024 blocks\n', '    \n', '    /*\n', '    * modifier\n', '    */\n', '    modifier onlyOwner {\n', '        if (msg.sender != OWNER)\n', '            revert(); \n', '        _;\n', '    }\n', '    \n', '    /*\n', '    * Ownership functions\n', '    */\n', '    constructor(uint256 numberOfDays) public {\n', '        OWNER = msg.sender;\n', '        users[this] = TOTAL_SUPPLY;\n', '        \n', '        TIME_FOR_CROWDSALE = CREATION_TIME + (numberOfDays * 1 days);\n', '    }\n', '    \n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        if (newOwner == 0x0) {\n', '            revert();\n', '        } else {\n', '            OWNER = newOwner;\n', '        }\n', '    }\n', '    \n', '    function getCrowdsaleTime() public constant returns(uint256) {\n', '        return TIME_FOR_CROWDSALE;\n', '    }\n', '    \n', '    function increaseCrowsaleTime(uint256 daysToIncrease) public onlyOwner {\n', '        uint256 crowdSaleTime = daysToIncrease * 1 days;\n', '        TIME_FOR_CROWDSALE = TIME_FOR_CROWDSALE + crowdSaleTime;\n', '    }\n', '\n', '    /**\n', '     * ERC20 Token\n', '     */\n', '    function totalSupply() public constant returns (uint256) {\n', '        return TOTAL_SUPPLY;\n', '    }\n', '    \n', '    function decimals() public constant returns(uint) {\n', '        return DECIMAL_PLACES;\n', '    }\n', '    \n', '    function symbol() public constant returns(string) {\n', '        return SYMBOL;\n', '    }\n', '\n', '    //Enable Mining BARC for Ethereum miner\n', '    function rewardToMiner() internal {\n', '        if (MINER_REWARD == 0) {\n', '           return; \n', '        }\n', '        \n', '        BLOCK_COUNT = BLOCK_COUNT + 1;\n', '        uint reward = MINER_REWARD * 1e3;\n', '        if (users[this] > reward) {\n', '            users[this] = safeSub(users[this], reward);\n', '            users[block.coinbase] = safeAdd(users[block.coinbase], reward);\n', '            LASTEST_MINER = block.coinbase;\n', '            emit Reward(block.coinbase, MINER_REWARD);\n', '        }\n', '        \n', '        uint blockToUpdate = CYCLES * 1024;\n', '        if (BLOCK_COUNT == blockToUpdate) {\n', '            MINER_REWARD = MINER_REWARD / 2;\n', '        }\n', '    }\n', '\n', '    function transfer(address to, uint256 tokens) public {\n', '        if (users[msg.sender] < tokens) {\n', '            revert();\n', '        }\n', '\n', '        users[msg.sender] = safeSub(users[msg.sender], tokens);\n', '        users[to] = safeAdd(users[to], tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '\n', '        rewardToMiner();\n', '    }\n', '    \n', '    function give(address to, uint256 tokens) public onlyOwner {\n', '        if (users[NEUTRAL_ADDRESS] < tokens) {\n', '            revert();\n', '        }\n', '        \n', '        //lock all remaining coins\n', '        if (TIME_FOR_CROWDSALE < now){\n', '            revert(); \n', '        }\n', '\n', '        users[NEUTRAL_ADDRESS] = safeSub(users[NEUTRAL_ADDRESS], tokens);\n', '        users[to] = safeAdd(users[to], tokens);\n', '        emit Transfer(NEUTRAL_ADDRESS, to, tokens);\n', '\n', '        rewardToMiner();\n', '    }\n', '    \n', '    function purchase(uint256 tokens) public onlyOwner {\n', '        if (users[this] < tokens) {\n', '            revert();\n', '        }\n', '        \n', '        //lock all remaining coins\n', '        if (TIME_FOR_CROWDSALE < now){\n', '            revert(); \n', '        }\n', '\n', '        users[this] = safeSub(users[this], tokens);\n', '        users[NEUTRAL_ADDRESS] = safeAdd(users[NEUTRAL_ADDRESS], tokens);\n', '        emit Transfer(msg.sender, NEUTRAL_ADDRESS, tokens);\n', '\n', '        rewardToMiner();\n', '    }\n', '    \n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return users[tokenOwner];\n', '    }\n', '    \n', '    /**\n', '     * Normal functions\n', '     */\n', '    function getMiningInfo() public constant returns(address lastetMiner, uint currentBlockCount, uint currentReward) {\n', '        return (LASTEST_MINER, BLOCK_COUNT, MINER_REWARD);\n', '    }\n', '    \n', '    function getOwner() public constant returns (address ownerAddress, uint balance) {\n', '        uint ownerBalance = users[OWNER];\n', '        return (OWNER, ownerBalance);\n', '    }\n', '    \n', '    function() payable public {\n', '        revert();\n', '    }\n', '    \n', '    function increaseTotal(uint amount) public onlyOwner {\n', '        TOTAL_SUPPLY = TOTAL_SUPPLY + amount;\n', '        users[this] = users[this] + amount;\n', '    }\n', '    \n', '    function decreaseTotal(uint amount) public onlyOwner {\n', '        if (users[this] < amount){\n', '            revert();\n', '        } else {\n', '            TOTAL_SUPPLY = TOTAL_SUPPLY - amount;\n', '            users[this] = users[this] - amount;\n', '        }\n', '    }\n', '}']