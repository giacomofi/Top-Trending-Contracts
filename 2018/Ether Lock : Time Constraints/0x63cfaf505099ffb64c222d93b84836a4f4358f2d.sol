['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\taddress public owner;\n', '\n', '\t/**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '\tfunction Ownable() public {\n', '\t\towner = tx.origin;\n', '\t}\n', '\n', '\n', '\t/**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '\tmodifier onlyOwner() {\n', '\t\trequire(msg.sender == owner);\n', '\t\t_;\n', '\t}\n', '\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     *\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '\tfunction transferOwnership(address _newOwner) onlyOwner public {\n', '\t\trequire(_newOwner != address(0));\n', '\t\towner = _newOwner;\n', '\t}\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title BasicERC20 token.\n', ' * @dev Basic version of ERC20 token with allowances.\n', ' */\n', 'contract BasicERC20Token is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public totalSupply;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 amount);\n', '    event Approval(address indexed owner, address indexed spender, uint256 amount);\n', '\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens for address.\n', '     *\n', '     * @param _owner Address which owns the tokens.\n', '     * \n', '     * @return A uint256 specifing the amount of tokens still available to the owner.\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Function to check the total supply of tokens.\n', '     *\n', '     * @return The uint256 specifing the amount of tokens which are held by the contract.\n', '     */\n', '    function getTotalSupply() public view returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * @param _owner Address which owns the funds.\n', '     * @param _spender Address which will spend the funds.\n', '     *\n', '     * @return The uint256 specifing the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Internal function to transfer tokens.\n', '     *\n', '     * @param _from Address of the sender.\n', '     * @param _to Address of the recipient.\n', '     * @param _amount Amount to send.\n', '     *\n', '     * @return True if the operation was successful.\n', '     */\n', '    function _transfer(address _from, address _to, uint256 _amount) internal returns (bool) {\n', '        require (_from != 0x0);                               // Prevent transfer to 0x0 address\n', '        require (_to != 0x0);                               // Prevent transfer to 0x0 address\n', '        require (balances[_from] >= _amount);          // Check if the sender has enough tokens\n', '        require (balances[_to] + _amount > balances[_to]);  // Check for overflows\n', '\n', '        uint256 length;\n', '        assembly {\n', '            length := extcodesize(_to)\n', '        }\n', '        require (length == 0);\n', '\n', '        balances[_from] = balances[_from].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '\n', '        emit Transfer(_from, _to, _amount);\n', '        \n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Function to transfer tokens.\n', '     *\n', '     * @param _to Address of the recipient.\n', '     * @param _amount Amount to send.\n', '     *\n', '     * @return True if the operation was successful.\n', '     */\n', '    function transfer(address _to, uint256 _amount) public returns (bool) {\n', '        _transfer(msg.sender, _to, _amount);\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from other address.\n', '     *\n', '     * @param _from Address of the sender.\n', '     * @param _to Address of the recipient.\n', '     * @param _amount Amount to send.\n', '     *\n', '     * @return True if the operation was successful.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool) {\n', '        require (allowed[_from][msg.sender] >= _amount);          // Check if the sender has enough\n', '\n', '        _transfer(_from, _to, _amount);\n', '\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * \n', '     * @param _spender Address which will spend the funds.\n', '     * @param _amount Amount of tokens to be spent.\n', '     *\n', '     * @return True if the operation was successful.\n', '     */\n', '    function approve(address _spender, uint256 _amount) public returns (bool) {\n', '        require (_spender != 0x0);                       // Prevent transfer to 0x0 address\n', '        require (_amount >= 0);\n', '        require (balances[msg.sender] >= _amount);       // Check if the msg.sender has enough to allow \n', '\n', '        if (_amount == 0) allowed[msg.sender][_spender] = _amount;\n', '        else allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_amount);\n', '\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title PULS token\n', ' * @dev Extends ERC20 token.\n', ' */\n', 'contract PULSToken is BasicERC20Token {\n', '\t// Public variables of the token\n', '\tstring public constant name = &#39;PULS Token&#39;;\n', '\tstring public constant symbol = &#39;PULS&#39;;\n', '\tuint256 public constant decimals = 18;\n', '\tuint256 public constant INITIAL_SUPPLY = 88888888000000000000000000;\n', '\n', '\taddress public crowdsaleAddress;\n', '\n', '\t// Public structure to support token reservation.\n', '\tstruct Reserve {\n', '        uint256 pulsAmount;\n', '        uint256 collectedEther;\n', '    }\n', '\n', '\tmapping (address => Reserve) reserved;\n', '\n', '\t// Public structure to record locked tokens for a specific lock.\n', '\tstruct Lock {\n', '\t\tuint256 amount;\n', '\t\tuint256 startTime;\t// in seconds since 01.01.1970\n', '\t\tuint256 timeToLock; // in seconds\n', '\t\tbytes32 pulseLockHash;\n', '\t}\n', '\t\n', '\t// Public list of locked tokens for a specific address.\n', '\tstruct lockList{\n', '\t\tLock[] lockedTokens;\n', '\t}\n', '\t\n', '\t// Public list of lockLists.\n', '\tmapping (address => lockList) addressLocks;\n', '\n', '\t/**\n', '     * @dev Throws if called by any account other than the crowdsale address.\n', '     */\n', '\tmodifier onlyCrowdsaleAddress() {\n', '\t\trequire(msg.sender == crowdsaleAddress);\n', '\t\t_;\n', '\t}\n', '\n', '\tevent TokenReservation(address indexed beneficiary, uint256 sendEther, uint256 indexed pulsAmount, uint256 reserveTypeId);\n', '\tevent RevertingReservation(address indexed addressToRevert);\n', '\tevent TokenLocking(address indexed addressToLock, uint256 indexed amount, uint256 timeToLock);\n', '\tevent TokenUnlocking(address indexed addressToUnlock, uint256 indexed amount);\n', '\n', '\n', '\t/**\n', '     * @dev The PULS token constructor sets the initial supply of tokens to the crowdsale address\n', '     * account.\n', '     */\n', '\tfunction PULSToken() public {\n', '\t\ttotalSupply = INITIAL_SUPPLY;\n', '\t\tbalances[msg.sender] = INITIAL_SUPPLY;\n', '\t\t\n', '\t\tcrowdsaleAddress = msg.sender;\n', '\n', '\t\temit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '\t}\n', '\n', '\n', '\t/**\n', '     * @dev Payable function.\n', '     */\n', '\tfunction () external payable {\n', '\t}\n', '\n', '\n', '\t/**\n', '     * @dev Function to check reserved amount of tokens for address.\n', '     *\n', '     * @param _owner Address of owner of the tokens.\n', '     *\n', '     * @return The uint256 specifing the amount of tokens which are held in reserve for this address.\n', '     */\n', '\tfunction reserveOf(address _owner) public view returns (uint256) {\n', '\t\treturn reserved[_owner].pulsAmount;\n', '\t}\n', '\n', '\n', '\t/**\n', '     * @dev Function to check reserved amount of tokens for address.\n', '     *\n', '     * @param _buyer Address of buyer of the tokens.\n', '     *\n', '     * @return The uint256 specifing the amount of tokens which are held in reserve for this address.\n', '     */\n', '\tfunction collectedEtherFrom(address _buyer) public view returns (uint256) {\n', '\t\treturn reserved[_buyer].collectedEther;\n', '\t}\n', '\n', '\n', '\t/**\n', '     * @dev Function to get number of locks for an address.\n', '     *\n', '     * @param _address Address who owns locked tokens.\n', '     *\n', '     * @return The uint256 length of array.\n', '     */\n', '\tfunction getAddressLockedLength(address _address) public view returns(uint256 length) {\n', '\t    return addressLocks[_address].lockedTokens.length;\n', '\t}\n', '\n', '\n', '\t/**\n', '     * @dev Function to get locked tokens amount for specific address for specific lock.\n', '     *\n', '     * @param _address Address of owner of locked tokens.\n', '     * @param _index Index of specific lock.\n', '     *\n', '     * @return The uint256 specifing the amount of locked tokens.\n', '     */\n', '\tfunction getLockedStructAmount(address _address, uint256 _index) public view returns(uint256 amount) {\n', '\t    return addressLocks[_address].lockedTokens[_index].amount;\n', '\t}\n', '\n', '\n', '\t/**\n', '     * @dev Function to get start time of lock for specific address.\n', '     *\n', '     * @param _address Address of owner of locked tokens.\n', '     * @param _index Index of specific lock.\n', '     *\n', '     * @return The uint256 specifing the start time of lock in seconds.\n', '     */\n', '\tfunction getLockedStructStartTime(address _address, uint256 _index) public view returns(uint256 startTime) {\n', '\t    return addressLocks[_address].lockedTokens[_index].startTime;\n', '\t}\n', '\n', '\n', '\t/**\n', '     * @dev Function to get duration time of lock for specific address.\n', '     *\n', '     * @param _address Address of owner of locked tokens.\n', '     * @param _index Index of specific lock.\n', '     *\n', '     * @return The uint256 specifing the duration time of lock in seconds.\n', '     */\n', '\tfunction getLockedStructTimeToLock(address _address, uint256 _index) public view returns(uint256 timeToLock) {\n', '\t    return addressLocks[_address].lockedTokens[_index].timeToLock;\n', '\t}\n', '\n', '\t\n', '\t/**\n', '     * @dev Function to get pulse hash for specific address for specific lock.\n', '     *\n', '     * @param _address Address of owner of locked tokens.\n', '     * @param _index Index of specific lock.\n', '     *\n', '     * @return The bytes32 specifing the pulse hash.\n', '     */\n', '\tfunction getLockedStructPulseLockHash(address _address, uint256 _index) public view returns(bytes32 pulseLockHash) {\n', '\t    return addressLocks[_address].lockedTokens[_index].pulseLockHash;\n', '\t}\n', '\n', '\n', '\t/**\n', '     * @dev Function to send tokens after verifing KYC form.\n', '     *\n', '     * @param _beneficiary Address of receiver of tokens.\n', '     *\n', '     * @return True if the operation was successful.\n', '     */\n', '\tfunction sendTokens(address _beneficiary) onlyOwner public returns (bool) {\n', '\t\trequire (reserved[_beneficiary].pulsAmount > 0);\t\t // Check if reserved tokens for _beneficiary address is greater then 0\n', '\n', '\t\t_transfer(crowdsaleAddress, _beneficiary, reserved[_beneficiary].pulsAmount);\n', '\n', '\t\treserved[_beneficiary].pulsAmount = 0;\n', '\n', '\t\treturn true;\n', '\t}\n', '\n', '\n', '\t/**\n', '     * @dev Function to reserve tokens for buyer after sending ETH to crowdsale address.\n', '     *\n', '     * @param _beneficiary Address of reserver of tokens.\n', '     * @param _pulsAmount Amount of tokens to reserve.\n', '     * @param _eth Amount of eth sent in transaction.\n', '     *\n', '     * @return True if the operation was successful.\n', '     */\n', '\tfunction reserveTokens(address _beneficiary, uint256 _pulsAmount, uint256 _eth, uint256 _reserveTypeId) onlyCrowdsaleAddress public returns (bool) {\n', '\t\trequire (_beneficiary != 0x0);\t\t\t\t\t// Prevent transfer to 0x0 address\n', '\t\trequire (totalSupply >= _pulsAmount);           // Check if such tokens amount left\n', '\n', '\t\ttotalSupply = totalSupply.sub(_pulsAmount);\n', '\t\treserved[_beneficiary].pulsAmount = reserved[_beneficiary].pulsAmount.add(_pulsAmount);\n', '\t\treserved[_beneficiary].collectedEther = reserved[_beneficiary].collectedEther.add(_eth);\n', '\n', '\t\temit TokenReservation(_beneficiary, _eth, _pulsAmount, _reserveTypeId);\n', '\t\treturn true;\n', '\t}\n', '\n', '\n', '\t/**\n', '     * @dev Function to revert reservation for some address.\n', '     *\n', '     * @param _addressToRevert Address to which collected ETH will be returned.\n', '     *\n', '     * @return True if the operation was successful.\n', '     */\n', '\tfunction revertReservation(address _addressToRevert) onlyOwner public returns (bool) {\n', '\t\trequire (reserved[_addressToRevert].pulsAmount > 0);\t\n', '\n', '\t\ttotalSupply = totalSupply.add(reserved[_addressToRevert].pulsAmount);\n', '\t\treserved[_addressToRevert].pulsAmount = 0;\n', '\n', '\t\t_addressToRevert.transfer(reserved[_addressToRevert].collectedEther - (20000000000 * 21000));\n', '\t\treserved[_addressToRevert].collectedEther = 0;\n', '\n', '\t\temit RevertingReservation(_addressToRevert);\n', '\t\treturn true;\n', '\t}\n', '\n', '\n', '\t/**\n', '     * @dev Function to lock tokens for some period of time.\n', '     *\n', '     * @param _amount Amount of locked tokens.\n', '     * @param _minutesToLock Days tokens will be locked.\n', '     * @param _pulseLockHash Hash of locked pulse.\n', '     *\n', '     * @return True if the operation was successful.\n', '     */\n', '\tfunction lockTokens(uint256 _amount, uint256 _minutesToLock, bytes32 _pulseLockHash) public returns (bool){\n', '\t\trequire(balances[msg.sender] >= _amount);\n', '\n', '\t\tLock memory lockStruct;\n', '        lockStruct.amount = _amount;\n', '        lockStruct.startTime = now;\n', '        lockStruct.timeToLock = _minutesToLock * 1 minutes;\n', '        lockStruct.pulseLockHash = _pulseLockHash;\n', '\n', '        addressLocks[msg.sender].lockedTokens.push(lockStruct);\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '\n', '        emit TokenLocking(msg.sender, _amount, _minutesToLock);\n', '        return true;\n', '\t}\n', '\n', '\n', '\t/**\n', '     * @dev Function to unlock tokens for some period of time.\n', '     *\n', '     * @param _addressToUnlock Addrerss of person with locked tokens.\n', '     *\n', '     * @return True if the operation was successful.\n', '     */\n', '\tfunction unlockTokens(address _addressToUnlock) public returns (bool){\n', '\t\tuint256 i = 0;\n', '\t\twhile(i < addressLocks[_addressToUnlock].lockedTokens.length) {\n', '\t\t\tif (now > addressLocks[_addressToUnlock].lockedTokens[i].startTime + addressLocks[_addressToUnlock].lockedTokens[i].timeToLock) {\n', '\n', '\t\t\t\tbalances[_addressToUnlock] = balances[_addressToUnlock].add(addressLocks[_addressToUnlock].lockedTokens[i].amount);\n', '\t\t\t\temit TokenUnlocking(_addressToUnlock, addressLocks[_addressToUnlock].lockedTokens[i].amount);\n', '\n', '\t\t\t\tif (i < addressLocks[_addressToUnlock].lockedTokens.length) {\n', '\t\t\t\t\tfor (uint256 j = i; j < addressLocks[_addressToUnlock].lockedTokens.length - 1; j++){\n', '\t\t\t            addressLocks[_addressToUnlock].lockedTokens[j] = addressLocks[_addressToUnlock].lockedTokens[j + 1];\n', '\t\t\t        }\n', '\t\t\t\t}\n', '\t\t        delete addressLocks[_addressToUnlock].lockedTokens[addressLocks[_addressToUnlock].lockedTokens.length - 1];\n', '\t\t\t\t\n', '\t\t\t\taddressLocks[_addressToUnlock].lockedTokens.length = addressLocks[_addressToUnlock].lockedTokens.length.sub(1);\n', '\t\t\t}\n', '\t\t\telse {\n', '\t\t\t\ti = i.add(1);\n', '\t\t\t}\n', '\t\t}\n', '\n', '        return true;\n', '\t}\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath.\n', ' * @dev Math operations with safety checks that throw on error.\n', ' */\n', 'library SafeMath {\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a * b;\n', '\t\tassert(a == 0 || c / a == b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n', '\t\tuint256 c = a / b;\n', '\t\t// assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tassert(b <= a);\n', '\t\treturn a - b;\n', '\t}\n', '\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a + b;\n', '\t\tassert(c >= a);\n', '\t\treturn c;\n', '\t}\n', '}\n', '\n', '/**\n', ' * @title Staged crowdsale.\n', ' * @dev Functionality of staged crowdsale.\n', ' */\n', 'contract StagedCrowdsale is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    // Public structure of crowdsale&#39;s stages.\n', '    struct Stage {\n', '        uint256 hardcap;\n', '        uint256 price;\n', '        uint256 minInvestment;\n', '        uint256 invested;\n', '        uint256 closed;\n', '    }\n', '\n', '    Stage[] public stages;\n', '\n', '\n', '    /**\n', '     * @dev Function to get the current stage number.\n', '     * \n', '     * @return A uint256 specifing the current stage number.\n', '     */\n', '    function getCurrentStage() public view returns(uint256) {\n', '        for(uint256 i=0; i < stages.length; i++) {\n', '            if(stages[i].closed == 0) {\n', '                return i;\n', '            }\n', '        }\n', '        revert();\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Function to add the stage to the crowdsale.\n', '     *\n', '     * @param _hardcap The hardcap of the stage.\n', '     * @param _price The amount of tokens you will receive per 1 ETH for this stage.\n', '     */\n', '    function addStage(uint256 _hardcap, uint256 _price, uint256 _minInvestment, uint _invested) onlyOwner public {\n', '        require(_hardcap > 0 && _price > 0);\n', '        Stage memory stage = Stage(_hardcap.mul(1 ether), _price, _minInvestment.mul(1 ether).div(10), _invested.mul(1 ether), 0);\n', '        stages.push(stage);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Function to close the stage manually.\n', '     *\n', '     * @param _stageNumber Stage number to close.\n', '     */\n', '    function closeStage(uint256 _stageNumber) onlyOwner public {\n', '        require(stages[_stageNumber].closed == 0);\n', '        if (_stageNumber != 0) require(stages[_stageNumber - 1].closed != 0);\n', '\n', '        stages[_stageNumber].closed = now;\n', '        stages[_stageNumber].invested = stages[_stageNumber].hardcap;\n', '\n', '        if (_stageNumber + 1 <= stages.length - 1) {\n', '            stages[_stageNumber + 1].invested = stages[_stageNumber].hardcap;\n', '        }\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Function to remove all stages.\n', '     *\n', '     * @return True if the operation was successful.\n', '    */\n', '    function removeStages() onlyOwner public returns (bool) {\n', '        require(stages.length > 0);\n', '\n', '        stages.length = 0;\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title PULS crowdsale\n', ' * @dev PULS crowdsale functionality.\n', ' */\n', 'contract PULSCrowdsale is StagedCrowdsale {\n', '\tusing SafeMath for uint256;\n', '\n', '\tPULSToken public token;\n', '\n', '\t// Public variables of the crowdsale\n', '\taddress public multiSigWallet; \t// address where funds are collected\n', '\tbool public hasEnded;\n', '\tbool public isPaused;\t\n', '\n', '\n', '\tevent TokenReservation(address purchaser, address indexed beneficiary, uint256 indexed sendEther, uint256 indexed pulsAmount);\n', '\tevent ForwardingFunds(uint256 indexed value);\n', '\n', '\n', '\t/**\n', '     * @dev Throws if crowdsale has ended.\n', '     */\n', '\tmodifier notEnded() {\n', '\t\trequire(!hasEnded);\n', '\t\t_;\n', '\t}\n', '\n', '\n', '\t/**\n', '     * @dev Throws if crowdsale has not ended.\n', '     */\n', '\tmodifier notPaused() {\n', '\t\trequire(!isPaused);\n', '\t\t_;\n', '\t}\n', '\n', '\n', '\t/**\n', '     * @dev The Crowdsale constructor sets the multisig wallet for forwanding funds.\n', '     * Adds stages to the crowdsale. Initialize PULS tokens.\n', '     */\n', '\tfunction PULSCrowdsale() public {\n', '\t\ttoken = createTokenContract();\n', '\n', '\t\tmultiSigWallet = 0x00955149d0f425179000e914F0DFC2eBD96d6f43;\n', '\t\thasEnded = false;\n', '\t\tisPaused = false;\n', '\n', '\t\taddStage(3000, 1600, 1, 0);   //3rd value is actually div 10\n', '\t\taddStage(3500, 1550, 1, 0);   //3rd value is actually div 10\n', '\t\taddStage(4000, 1500, 1, 0);   //3rd value is actually div 10\n', '\t\taddStage(4500, 1450, 1, 0);   //3rd value is actually div 10\n', '\t\taddStage(42500, 1400, 1, 0);  //3rd value is actually div 10\n', '\t}\n', '\n', '\n', '\t/**\n', '     * @dev Function to create PULS tokens contract.\n', '     *\n', '     * @return PULSToken The instance of PULS token contract.\n', '     */\n', '\tfunction createTokenContract() internal returns (PULSToken) {\n', '\t\treturn new PULSToken();\n', '\t}\n', '\n', '\n', '\t/**\n', '     * @dev Payable function.\n', '     */\n', '\tfunction () external payable {\n', '\t\tbuyTokens(msg.sender);\n', '\t}\n', '\n', '\n', '\t/**\n', '     * @dev Function to buy tokens - reserve calculated amount of tokens.\n', '     *\n', '     * @param _beneficiary The address of the buyer.\n', '     */\n', '\tfunction buyTokens(address _beneficiary) payable notEnded notPaused public {\n', '\t\trequire(msg.value >= 0);\n', '\t\t\n', '\t\tuint256 stageIndex = getCurrentStage();\n', '\t\tStage storage stageCurrent = stages[stageIndex];\n', '\n', '\t\trequire(msg.value >= stageCurrent.minInvestment);\n', '\n', '\t\tuint256 tokens;\n', '\n', '\t\t// if puts us in new stage - receives with next stage price\n', '\t\tif (stageCurrent.invested.add(msg.value) >= stageCurrent.hardcap){\n', '\t\t\tstageCurrent.closed = now;\n', '\n', '\t\t\tif (stageIndex + 1 <= stages.length - 1) {\n', '\t\t\t\tStage storage stageNext = stages[stageIndex + 1];\n', '\n', '\t\t\t\ttokens = msg.value.mul(stageCurrent.price);\n', '\t\t\t\ttoken.reserveTokens(_beneficiary, tokens, msg.value, 0);\n', '\n', '\t\t\t\tstageNext.invested = stageCurrent.invested.add(msg.value);\n', '\n', '\t\t\t\tstageCurrent.invested = stageCurrent.hardcap;\n', '\t\t\t}\n', '\t\t\telse {\n', '\t\t\t\ttokens = msg.value.mul(stageCurrent.price);\n', '\t\t\t\ttoken.reserveTokens(_beneficiary, tokens, msg.value, 0);\n', '\n', '\t\t\t\tstageCurrent.invested = stageCurrent.invested.add(msg.value);\n', '\n', '\t\t\t\thasEnded = true;\n', '\t\t\t}\n', '\t\t}\n', '\t\telse {\n', '\t\t\ttokens = msg.value.mul(stageCurrent.price);\n', '\t\t\ttoken.reserveTokens(_beneficiary, tokens, msg.value, 0);\n', '\n', '\t\t\tstageCurrent.invested = stageCurrent.invested.add(msg.value);\n', '\t\t}\n', '\n', '\t\temit TokenReservation(msg.sender, _beneficiary, msg.value, tokens);\n', '\t\tforwardFunds();\n', '\t}\n', '\n', '\n', '\t/**\n', '     * @dev Function to buy tokens - reserve calculated amount of tokens.\n', '     *\n', '     * @param _beneficiary The address of the buyer.\n', '     */\n', '\tfunction privatePresaleTokenReservation(address _beneficiary, uint256 _amount, uint256 _reserveTypeId) onlyOwner public {\n', '\t\trequire (_reserveTypeId > 0);\n', '\t\ttoken.reserveTokens(_beneficiary, _amount, 0, _reserveTypeId);\n', '\t\temit TokenReservation(msg.sender, _beneficiary, 0, _amount);\n', '\t}\n', '\n', '\n', '\t/**\n', '     * @dev Internal function to forward funds to multisig wallet.\n', '     */\n', '\tfunction forwardFunds() internal {\n', '\t\tmultiSigWallet.transfer(msg.value);\n', '\t\temit ForwardingFunds(msg.value);\n', '\t}\n', '\n', '\n', '\t/**\n', '     * @dev Function to finish the crowdsale.\n', '     *\n', '     * @return True if the operation was successful.\n', '     */ \n', '\tfunction finishCrowdsale() onlyOwner notEnded public returns (bool) {\n', '\t\thasEnded = true;\n', '\t\treturn true;\n', '\t}\n', '\n', '\n', '\t/**\n', '     * @dev Function to pause the crowdsale.\n', '     *\n', '     * @return True if the operation was successful.\n', '     */ \n', '\tfunction pauseCrowdsale() onlyOwner notEnded notPaused public returns (bool) {\n', '\t\tisPaused = true;\n', '\t\treturn true;\n', '\t}\n', '\n', '\n', '\t/**\n', '     * @dev Function to unpause the crowdsale.\n', '     *\n', '     * @return True if the operation was successful.\n', '     */ \n', '\tfunction unpauseCrowdsale() onlyOwner notEnded public returns (bool) {\n', '\t\tisPaused = false;\n', '\t\treturn true;\n', '\t}\n', '\n', '\n', '\t/**\n', '     * @dev Function to change multisgwallet.\n', '     *\n', '     * @return True if the operation was successful.\n', '     */ \n', '\tfunction changeMultiSigWallet(address _newMultiSigWallet) onlyOwner public returns (bool) {\n', '\t\tmultiSigWallet = _newMultiSigWallet;\n', '\t\treturn true;\n', '\t}\n', '}']