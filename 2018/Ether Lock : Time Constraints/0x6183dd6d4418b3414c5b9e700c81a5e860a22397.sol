['pragma solidity ^0.4.18;\n', '\n', 'contract FullERC20 {\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  \n', '  uint256 public totalSupply;\n', '  uint8 public decimals;\n', '\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '}\n', '\n', 'contract BalanceHistoryToken is FullERC20 {\n', '  function balanceOfAtBlock(address who, uint256 blockNumber) public view returns (uint256);\n', '}\n', '\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Destructible is Ownable {\n', '\n', '  function Destructible() public payable { }\n', '\n', '  /**\n', '   * @dev Transfers the current balance to the owner and terminates the contract.\n', '   */\n', '  function destroy() onlyOwner public {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  function destroyAndSend(address _recipient) onlyOwner public {\n', '    selfdestruct(_recipient);\n', '  }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract ProfitSharingV2 is Ownable, Destructible, Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    struct Period {\n', '        uint128 endTime;\n', '        uint128 block;\n', '        uint128 balance;\n', '    }\n', '\n', '    // public\n', '    BalanceHistoryToken public token;\n', '    uint256 public periodDuration;\n', '    Period public currentPeriod;\n', '    mapping(address => mapping(uint => bool)) public payments;\n', '\n', '    // internal\n', '\n', '    // events\n', '    event PaymentCompleted(address indexed requester, uint indexed paymentPeriodBlock, uint amount);\n', '    event PeriodReset(uint block, uint endTime, uint balance, uint totalSupply);\n', '\n', '    /// @dev Constructor of the contract\n', '    function ProfitSharingV2(address _tokenAddress) public {\n', '        periodDuration = 4 weeks;\n', '        resetPeriod();\n', '        token = BalanceHistoryToken(_tokenAddress);\n', '    }\n', '\n', '    /// @dev Default payable fallback. \n', '    function () public payable {\n', '    }\n', '\n', '    /// @dev Withdraws the full amount shared with the sender.\n', '    function withdraw() public whenNotPaused {\n', '        withdrawFor(msg.sender);\n', '    }\n', '\n', '    /// @dev Allows someone to call withdraw on behalf of someone else. \n', '    /// Useful if we expose via web3 but metamask account is different than owner of tokens.\n', '    function withdrawFor(address tokenOwner) public whenNotPaused {\n', "        // Ensure that this address hasn't been previously paid out for this period.\n", '        require(!payments[tokenOwner][currentPeriod.block]);\n', '        \n', '        // Check if it is time to calculate the next payout period.\n', '        resetPeriod();\n', '\n', '        // Calculate the amount of the current payout period\n', '        uint payment = getPaymentTotal(tokenOwner);\n', '        require(payment > 0);\n', '        assert(this.balance >= payment);\n', '\n', '        payments[tokenOwner][currentPeriod.block] = true;\n', '        PaymentCompleted(tokenOwner, currentPeriod.block, payment);\n', '        tokenOwner.transfer(payment);\n', '    }\n', '\n', '    /// @dev Resets the period given the duration of the current period\n', '    function resetPeriod() public {\n', '        uint nowTime = getNow();\n', '        if (currentPeriod.endTime < nowTime) {\n', '            currentPeriod.endTime = uint128(nowTime.add(periodDuration)); \n', '            currentPeriod.block = uint128(block.number);\n', '            currentPeriod.balance = uint128(this.balance);\n', '            if (token != address(0x0)) {\n', '                PeriodReset(block.number, nowTime.add(periodDuration), this.balance, token.totalSupply());\n', '            }\n', '        }\n', '    }\n', '\n', '    /// @dev Gets the total payment amount for the sender given the current period.\n', '    function getPaymentTotal(address tokenOwner) public constant returns (uint256) {\n', '        if (payments[tokenOwner][currentPeriod.block]) {\n', '            return 0;\n', '        }\n', '\n', '        uint nowTime = getNow();\n', '        uint tokenOwnerBalance = currentPeriod.endTime < nowTime ?  \n', '            // This will never hit while withdrawing, but will be used in the case where the period\n', '            // has ended, but is awaiting the first withrawl. It will avoid the case where the current period\n', '            // reports an amount greater than the next period withdrawl amount.\n', '            token.balanceOfAtBlock(tokenOwner, block.number) :\n', '            // Get the amount of balance at the beginning of the payment period\n', '            token.balanceOfAtBlock(tokenOwner, currentPeriod.block);\n', '            \n', '        // Calculate the amount of the current payout period\n', '        return calculatePayment(tokenOwnerBalance);\n', '    }\n', '\n', '    function isPaymentCompleted(address tokenOwner) public constant returns (bool) {\n', '        return payments[tokenOwner][currentPeriod.block];\n', '    }\n', '\n', '    /// @dev Updates the token address of the payment type.\n', '    function updateToken(address tokenAddress) public onlyOwner {\n', '        token = BalanceHistoryToken(tokenAddress);\n', '    }\n', '\n', '    /// @dev Calculates the payment given the sender balance for the current period.\n', '    function calculatePayment(uint tokenOwnerBalance) public constant returns(uint) {\n', '        return tokenOwnerBalance.mul(currentPeriod.balance).div(token.totalSupply());\n', '    }\n', '\n', '    /// @dev Internal function for mocking purposes\n', '    function getNow() internal view returns (uint256) {\n', '        return now;\n', '    }\n', '\n', '    /// @dev Updates the period duration\n', '    function updatePeriodDuration(uint newPeriodDuration) public onlyOwner {\n', '        require(newPeriodDuration > 0);\n', '        periodDuration = newPeriodDuration;\n', '    }\n', '\n', '    /// @dev Forces a period reset\n', '    function forceResetPeriod() public onlyOwner {\n', '        uint nowTime = getNow();\n', '        currentPeriod.endTime = uint128(nowTime.add(periodDuration)); \n', '        currentPeriod.block = uint128(block.number);\n', '        currentPeriod.balance = uint128(this.balance);\n', '        if (token != address(0x0)) {\n', '            PeriodReset(block.number, nowTime.add(periodDuration), this.balance, token.totalSupply());\n', '        }\n', '    }\n', '}']