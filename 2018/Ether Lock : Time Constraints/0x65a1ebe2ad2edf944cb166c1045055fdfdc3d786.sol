['pragma solidity ^0.4.21;\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/BonusStrategy.sol\n', '\n', 'contract BonusStrategy {\n', '    using SafeMath for uint;\n', '\n', '    uint public defaultAmount = 1*10**18;\n', '    uint public limit = 300*1000*10**18; // 300.000  DCNT\n', '    uint public currentAmount = 0;\n', '    uint[] public startTimes;\n', '    uint[] public endTimes;\n', '    uint[] public amounts;\n', '\n', '    constructor(\n', '        uint[] _startTimes,\n', '        uint[] _endTimes,\n', '        uint[] _amounts\n', '        ) public \n', '    {\n', '        require(_startTimes.length == _endTimes.length && _endTimes.length == _amounts.length);\n', '        startTimes = _startTimes;\n', '        endTimes = _endTimes;\n', '        amounts = _amounts;\n', '    }\n', '\n', '    function isStrategy() external pure returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    function getCurrentBonus() public view returns (uint bonus) {\n', '        if (currentAmount >= limit) {\n', '            currentAmount = currentAmount.add(defaultAmount);\n', '            return defaultAmount;\n', '        }\n', '        for (uint8 i = 0; i < amounts.length; i++) {\n', '            if (now >= startTimes[i] && now <= endTimes[i]) {\n', '                bonus = amounts[i];\n', '                currentAmount = currentAmount.add(bonus);\n', '                return bonus;\n', '            }\n', '        }\n', '        currentAmount = currentAmount.add(defaultAmount);\n', '        return defaultAmount;\n', '    }\n', '\n', '}']