['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '        assert(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '        assert(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '        assert(token.approve(spender, value));\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'library Math {\n', '    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract FreeLimitPool is BasicToken, Ownable {\n', '    // not for sell vars pool\n', '    uint256 public nfsPoolLeft;\n', '    uint256 public nfsPoolCount;\n', '\n', '    function nfsPoolTransfer(address _to, uint256 _value) public onlyOwner returns (bool) {\n', '        require(nfsPoolLeft >= _value, "Value more than tokens left");\n', '        require(_to != address(0), "Not allowed send to trash tokens");\n', '\n', '        nfsPoolLeft -= _value;\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(address(0), _to, _value);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract TwoPhases is FreeLimitPool {\n', '    EthRateOracle public oracle;\n', '    uint256 public soldTokensCount = 0;\n', '\n', '    // first period token price\n', '    uint256 public tokenStartPrice;\n', '\n', '    // second phase token cost in cents\n', '    uint256 public tokenSecondPeriodPrice;\n', '\n', '    uint256 public sPerDate;\n', '    uint256 public sPeriodEndDate;\n', '    uint256 public sPeriodSoldTokensLimit;\n', '\n', '    function() public payable {\n', '        require(0.0001 ether <= msg.value, "min limit eth 0.0001");\n', '        require(sPeriodEndDate >= now, "Sell tokens all periods ended");\n', '        uint256 tokensCount;\n', '        uint256 ethUsdRate = oracle.getEthUsdRate();\n', '        bool isSecondPeriodNow = now >= sPerDate;\n', '        bool isSecondPeriodTokensLimitReached = soldTokensCount >= (totalSupply_ - sPeriodSoldTokensLimit - nfsPoolCount);\n', '\n', '        if (isSecondPeriodNow || isSecondPeriodTokensLimitReached) {\n', '            tokensCount = msg.value * ethUsdRate / tokenSecondPeriodPrice;\n', '        } else {\n', '            tokensCount = msg.value * ethUsdRate / tokenStartPrice;\n', '\n', '            uint256 sPeriodTokensCount = reminderCalc(soldTokensCount + tokensCount, totalSupply_ - sPeriodSoldTokensLimit - nfsPoolCount);\n', '\n', '            if (sPeriodTokensCount > 0) {\n', '                tokensCount -= sPeriodTokensCount;\n', '\n', '                uint256 weiLeft = sPeriodTokensCount * tokenStartPrice / ethUsdRate;\n', '\n', '                tokensCount += weiLeft * ethUsdRate / tokenSecondPeriodPrice;\n', '            }\n', '        }\n', '        require(tokensCount > 0, "tokens count must be positive");\n', '        require((soldTokensCount + tokensCount) <= (totalSupply_ - nfsPoolCount), "tokens limit");\n', '\n', '        balances[msg.sender] += tokensCount;\n', '        soldTokensCount += tokensCount;\n', '\n', '        emit Transfer(address(0), msg.sender, tokensCount);\n', '    }\n', '\n', '    function reminderCalc(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        if (y >= x) {\n', '            return 0;\n', '        }\n', '        return x - y;\n', '    }\n', '\n', '    function setOracleAddress(address _oracleAddress) public onlyOwner {\n', '        oracle = EthRateOracle(_oracleAddress);\n', '    }\n', '}\n', '\n', 'contract Exchangeable is StandardToken, Ownable {\n', '    uint256 public transfersAllowDate;\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(transfersAllowDate <= now, "Function cannot be called at this time.");\n', '\n', '        return BasicToken.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(transfersAllowDate <= now);\n', '\n', '        return StandardToken.transferFrom(_from, _to, _value);\n', '    }\n', '}\n', '\n', 'contract EthRateOracle is Ownable {\n', '    uint256 public ethUsdRate;\n', '\n', '    function update(uint256 _newValue) public onlyOwner {\n', '        ethUsdRate = _newValue;\n', '    }\n', '\n', '    function getEthUsdRate() public view returns (uint256) {\n', '        return ethUsdRate;\n', '    }\n', '}\n', '\n', 'contract JokerToken is Exchangeable, TwoPhases {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '    constructor() public {\n', '        name = "Joker.buzz token";\n', '        symbol = "JOKER";\n', '        decimals = 18;\n', '        totalSupply_ = 20000000 * (uint256(10) ** decimals);\n', '        // in us cents\n', '        tokenStartPrice = 40;\n', '        // not for sell\n', '        nfsPoolCount = 10900000 * (uint256(10) ** decimals);\n', '        nfsPoolLeft = nfsPoolCount;\n', '        // period 2, another price, and after some date\n', '        tokenSecondPeriodPrice = 200;\n', '        sPerDate = now + 149 days;\n', '        sPeriodEndDate = now + 281 days;\n', '        sPeriodSoldTokensLimit = (totalSupply_ - nfsPoolCount) - 1200000 * (uint256(10) ** decimals);\n', '        // transfer ability\n', '        transfersAllowDate = now + 281 days;\n', '    }\n', '\n', '    function getCurrentPhase() public view returns (string) {\n', '        bool isSecondPeriodNow = now >= sPerDate;\n', '        bool isSecondPeriodTokensLimitReached = soldTokensCount >= (totalSupply_ - sPeriodSoldTokensLimit - nfsPoolCount);\n', '        if (transfersAllowDate <= now) {\n', '            return "Last third phase, you can transfer tokens between users, but can&#39;t buy more tokens.";\n', '        }\n', '        if (sPeriodEndDate < now) {\n', '            return "Second phase ended, You can not buy more tokens.";\n', '        }\n', '        if (isSecondPeriodNow && isSecondPeriodTokensLimitReached) {\n', '            return "Second phase by time and solded tokens";\n', '        }\n', '        if (isSecondPeriodNow) {\n', '            return "Second phase by time";\n', '        }\n', '        if (isSecondPeriodTokensLimitReached) {\n', '            return "Second phase by solded tokens";\n', '        }\n', '        return "First phase";\n', '    }\n', '\n', '    function getIsSecondPhaseByTime() public view returns (bool) {\n', '        return now >= sPerDate;\n', '    }\n', '\n', '    function getRemainingDaysToSecondPhase() public view returns (uint) {\n', '        return (sPerDate - now) / 1 days;\n', '    }\n', '\n', '    function getRemainingDaysToThirdPhase() public view returns (uint) {\n', '        return (transfersAllowDate - now) / 1 days;\n', '    }\n', '\n', '    function getIsSecondPhaseEndedByTime() public view returns (bool) {\n', '        return sPeriodEndDate < now;\n', '    }\n', '\n', '    function getIsSecondPhaseBySoldedTokens() public view returns (bool) {\n', '        return soldTokensCount >= (totalSupply_ - sPeriodSoldTokensLimit - nfsPoolCount);\n', '    }\n', '\n', '    function getIsThirdPhase() public view returns (bool) {\n', '        return transfersAllowDate <= now;\n', '    }\n', '\n', '    function getBalance(address addr) public view returns (uint) {\n', '        return balances[addr];\n', '    }\n', '\n', '    function getWeiBalance() public constant returns (uint weiBal) {\n', '        return address(this).balance;\n', '    }\n', '\n', '    function EthToOwner(address _address, uint amount) public onlyOwner {\n', '        require(amount <= address(this).balance);\n', '        _address.transfer(amount);\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '        assert(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '        assert(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '        assert(token.approve(spender, value));\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'library Math {\n', '    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract FreeLimitPool is BasicToken, Ownable {\n', '    // not for sell vars pool\n', '    uint256 public nfsPoolLeft;\n', '    uint256 public nfsPoolCount;\n', '\n', '    function nfsPoolTransfer(address _to, uint256 _value) public onlyOwner returns (bool) {\n', '        require(nfsPoolLeft >= _value, "Value more than tokens left");\n', '        require(_to != address(0), "Not allowed send to trash tokens");\n', '\n', '        nfsPoolLeft -= _value;\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(address(0), _to, _value);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract TwoPhases is FreeLimitPool {\n', '    EthRateOracle public oracle;\n', '    uint256 public soldTokensCount = 0;\n', '\n', '    // first period token price\n', '    uint256 public tokenStartPrice;\n', '\n', '    // second phase token cost in cents\n', '    uint256 public tokenSecondPeriodPrice;\n', '\n', '    uint256 public sPerDate;\n', '    uint256 public sPeriodEndDate;\n', '    uint256 public sPeriodSoldTokensLimit;\n', '\n', '    function() public payable {\n', '        require(0.0001 ether <= msg.value, "min limit eth 0.0001");\n', '        require(sPeriodEndDate >= now, "Sell tokens all periods ended");\n', '        uint256 tokensCount;\n', '        uint256 ethUsdRate = oracle.getEthUsdRate();\n', '        bool isSecondPeriodNow = now >= sPerDate;\n', '        bool isSecondPeriodTokensLimitReached = soldTokensCount >= (totalSupply_ - sPeriodSoldTokensLimit - nfsPoolCount);\n', '\n', '        if (isSecondPeriodNow || isSecondPeriodTokensLimitReached) {\n', '            tokensCount = msg.value * ethUsdRate / tokenSecondPeriodPrice;\n', '        } else {\n', '            tokensCount = msg.value * ethUsdRate / tokenStartPrice;\n', '\n', '            uint256 sPeriodTokensCount = reminderCalc(soldTokensCount + tokensCount, totalSupply_ - sPeriodSoldTokensLimit - nfsPoolCount);\n', '\n', '            if (sPeriodTokensCount > 0) {\n', '                tokensCount -= sPeriodTokensCount;\n', '\n', '                uint256 weiLeft = sPeriodTokensCount * tokenStartPrice / ethUsdRate;\n', '\n', '                tokensCount += weiLeft * ethUsdRate / tokenSecondPeriodPrice;\n', '            }\n', '        }\n', '        require(tokensCount > 0, "tokens count must be positive");\n', '        require((soldTokensCount + tokensCount) <= (totalSupply_ - nfsPoolCount), "tokens limit");\n', '\n', '        balances[msg.sender] += tokensCount;\n', '        soldTokensCount += tokensCount;\n', '\n', '        emit Transfer(address(0), msg.sender, tokensCount);\n', '    }\n', '\n', '    function reminderCalc(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        if (y >= x) {\n', '            return 0;\n', '        }\n', '        return x - y;\n', '    }\n', '\n', '    function setOracleAddress(address _oracleAddress) public onlyOwner {\n', '        oracle = EthRateOracle(_oracleAddress);\n', '    }\n', '}\n', '\n', 'contract Exchangeable is StandardToken, Ownable {\n', '    uint256 public transfersAllowDate;\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(transfersAllowDate <= now, "Function cannot be called at this time.");\n', '\n', '        return BasicToken.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(transfersAllowDate <= now);\n', '\n', '        return StandardToken.transferFrom(_from, _to, _value);\n', '    }\n', '}\n', '\n', 'contract EthRateOracle is Ownable {\n', '    uint256 public ethUsdRate;\n', '\n', '    function update(uint256 _newValue) public onlyOwner {\n', '        ethUsdRate = _newValue;\n', '    }\n', '\n', '    function getEthUsdRate() public view returns (uint256) {\n', '        return ethUsdRate;\n', '    }\n', '}\n', '\n', 'contract JokerToken is Exchangeable, TwoPhases {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '    constructor() public {\n', '        name = "Joker.buzz token";\n', '        symbol = "JOKER";\n', '        decimals = 18;\n', '        totalSupply_ = 20000000 * (uint256(10) ** decimals);\n', '        // in us cents\n', '        tokenStartPrice = 40;\n', '        // not for sell\n', '        nfsPoolCount = 10900000 * (uint256(10) ** decimals);\n', '        nfsPoolLeft = nfsPoolCount;\n', '        // period 2, another price, and after some date\n', '        tokenSecondPeriodPrice = 200;\n', '        sPerDate = now + 149 days;\n', '        sPeriodEndDate = now + 281 days;\n', '        sPeriodSoldTokensLimit = (totalSupply_ - nfsPoolCount) - 1200000 * (uint256(10) ** decimals);\n', '        // transfer ability\n', '        transfersAllowDate = now + 281 days;\n', '    }\n', '\n', '    function getCurrentPhase() public view returns (string) {\n', '        bool isSecondPeriodNow = now >= sPerDate;\n', '        bool isSecondPeriodTokensLimitReached = soldTokensCount >= (totalSupply_ - sPeriodSoldTokensLimit - nfsPoolCount);\n', '        if (transfersAllowDate <= now) {\n', '            return "Last third phase, you can transfer tokens between users, but can\'t buy more tokens.";\n', '        }\n', '        if (sPeriodEndDate < now) {\n', '            return "Second phase ended, You can not buy more tokens.";\n', '        }\n', '        if (isSecondPeriodNow && isSecondPeriodTokensLimitReached) {\n', '            return "Second phase by time and solded tokens";\n', '        }\n', '        if (isSecondPeriodNow) {\n', '            return "Second phase by time";\n', '        }\n', '        if (isSecondPeriodTokensLimitReached) {\n', '            return "Second phase by solded tokens";\n', '        }\n', '        return "First phase";\n', '    }\n', '\n', '    function getIsSecondPhaseByTime() public view returns (bool) {\n', '        return now >= sPerDate;\n', '    }\n', '\n', '    function getRemainingDaysToSecondPhase() public view returns (uint) {\n', '        return (sPerDate - now) / 1 days;\n', '    }\n', '\n', '    function getRemainingDaysToThirdPhase() public view returns (uint) {\n', '        return (transfersAllowDate - now) / 1 days;\n', '    }\n', '\n', '    function getIsSecondPhaseEndedByTime() public view returns (bool) {\n', '        return sPeriodEndDate < now;\n', '    }\n', '\n', '    function getIsSecondPhaseBySoldedTokens() public view returns (bool) {\n', '        return soldTokensCount >= (totalSupply_ - sPeriodSoldTokensLimit - nfsPoolCount);\n', '    }\n', '\n', '    function getIsThirdPhase() public view returns (bool) {\n', '        return transfersAllowDate <= now;\n', '    }\n', '\n', '    function getBalance(address addr) public view returns (uint) {\n', '        return balances[addr];\n', '    }\n', '\n', '    function getWeiBalance() public constant returns (uint weiBal) {\n', '        return address(this).balance;\n', '    }\n', '\n', '    function EthToOwner(address _address, uint amount) public onlyOwner {\n', '        require(amount <= address(this).balance);\n', '        _address.transfer(amount);\n', '    }\n', '}']
