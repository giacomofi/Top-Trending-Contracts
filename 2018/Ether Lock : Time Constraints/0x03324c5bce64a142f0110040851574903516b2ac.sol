['pragma solidity ^0.4.22;\n', '\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract DarkPool is Ownable {\n', '    ERC20Basic hodl;\n', '    uint public end;\n', '    uint public raised;\n', '    uint public cap;\n', '    mapping(address => uint) public balances;\n', '    event Deposit(address indexed beneficiary, uint value);\n', '    event Withdraw(address indexed beneficiary, uint value);\n', '\n', '    function () external payable whenActive {\n', '        require(whitelisted(msg.sender), "for hodl owners only");\n', '        raised += msg.value;\n', '        balances[msg.sender] += msg.value;\n', '        require(raised <= cap, "raised too much ether");\n', '        emit Deposit(msg.sender, msg.value);\n', '    }\n', '    \n', '    function withdraw(address beneficiary) external onlyOwner whenEnded {\n', '        uint balance = address(this).balance;\n', '        beneficiary.transfer(balance);\n', '        emit Withdraw(beneficiary, balance);\n', '    }\n', '    \n', '    function reclaimToken(ERC20Basic token) external onlyOwner {\n', '        uint256 balance = token.balanceOf(this);\n', '        token.transfer(owner, balance);\n', '    }\n', '    \n', '    function whitelisted(address _address) public view returns (bool) {\n', '        return hodl.balanceOf(_address) > 0;\n', '    }\n', '    \n', '    function active() public view returns (bool) {\n', '        return now < end;\n', '    }\n', '    \n', '    modifier whenEnded() {\n', '        require(!active());\n', '        _;\n', '    }\n', '    \n', '    modifier whenActive() {\n', '        require(active());\n', '        _;\n', '    }\n', '}\n', '\n', 'contract DarkPool1 is DarkPool {\n', '    constructor() public {\n', '        hodl = ERC20Basic(0x433e077D4da9FFC4b353C1Bf1eD69DAAc8f78aA5);\n', '        end = 1524344400;\n', '        cap = 600 ether;\n', '    }\n', '}']
['pragma solidity ^0.4.22;\n', '\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract DarkPool is Ownable {\n', '    ERC20Basic hodl;\n', '    uint public end;\n', '    uint public raised;\n', '    uint public cap;\n', '    mapping(address => uint) public balances;\n', '    event Deposit(address indexed beneficiary, uint value);\n', '    event Withdraw(address indexed beneficiary, uint value);\n', '\n', '    function () external payable whenActive {\n', '        require(whitelisted(msg.sender), "for hodl owners only");\n', '        raised += msg.value;\n', '        balances[msg.sender] += msg.value;\n', '        require(raised <= cap, "raised too much ether");\n', '        emit Deposit(msg.sender, msg.value);\n', '    }\n', '    \n', '    function withdraw(address beneficiary) external onlyOwner whenEnded {\n', '        uint balance = address(this).balance;\n', '        beneficiary.transfer(balance);\n', '        emit Withdraw(beneficiary, balance);\n', '    }\n', '    \n', '    function reclaimToken(ERC20Basic token) external onlyOwner {\n', '        uint256 balance = token.balanceOf(this);\n', '        token.transfer(owner, balance);\n', '    }\n', '    \n', '    function whitelisted(address _address) public view returns (bool) {\n', '        return hodl.balanceOf(_address) > 0;\n', '    }\n', '    \n', '    function active() public view returns (bool) {\n', '        return now < end;\n', '    }\n', '    \n', '    modifier whenEnded() {\n', '        require(!active());\n', '        _;\n', '    }\n', '    \n', '    modifier whenActive() {\n', '        require(active());\n', '        _;\n', '    }\n', '}\n', '\n', 'contract DarkPool1 is DarkPool {\n', '    constructor() public {\n', '        hodl = ERC20Basic(0x433e077D4da9FFC4b353C1Bf1eD69DAAc8f78aA5);\n', '        end = 1524344400;\n', '        cap = 600 ether;\n', '    }\n', '}']
