['pragma solidity ^0.4.4;\n', '\n', '// ERC20-compliant wrapper token for SOC\n', '\n', '\n', 'contract TokenInterface {\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _amount) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _amount) returns (bool success);\n', '    function approve(address _spender, uint256 _amount) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _amount);\n', '}\n', '\n', 'contract SocInterface {\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    function transfer(address _to, uint256 _value) public {}\n', '\n', '}\n', '\n', 'contract Token is TokenInterface {\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function _transfer(address _to, uint256 _amount) internal returns (bool success) {\n', '        if (balances[msg.sender] >= _amount && _amount > 0) {\n', '            balances[msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '           return false;\n', '        }\n', '    }\n', '\n', '    function _transferFrom(address _from,\n', '                           address _to,\n', '                           uint256 _amount) internal returns (bool success) {\n', '        if (balances[_from] >= _amount\n', '            && allowed[_from][msg.sender] >= _amount\n', '            && _amount > 0) {\n', '\n', '            balances[_to] += _amount;\n', '            balances[_from] -= _amount;\n', '            allowed[_from][msg.sender] -= _amount;\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function approve(address _spender, uint256 _amount) returns (bool success) {\n', '        require(_amount >= 0);\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', 'contract DepositSlot {\n', '    address public constant SOC = 0x2d0e95bd4795d7ace0da3c0ff7b706a5970eb9d3;\n', '    address public wrapper;\n', '\n', '    modifier onlyWrapper {\n', '        require(msg.sender == wrapper);\n', '        _;\n', '    }\n', '\n', '    function DepositSlot(address _wrapper) {\n', '        wrapper = _wrapper;\n', '    }\n', '\n', '    function collect() onlyWrapper {\n', '        uint amount = TokenInterface(SOC).balanceOf(this);\n', '        //if (amount == 0) throw;\n', '        require(amount > 0);\n', '        SocInterface(SOC).transfer(wrapper, amount);\n', '    }\n', '}\n', '\n', 'contract SocTokenWrapped is Token {\n', '    string public constant standard = "Token 0.1";\n', '    string public constant name = "Soc Token Wrapped";\n', '    string public constant symbol = "WSOC";\n', '    uint8 public constant decimals = 18;     // same as SOC\n', '\n', '    address public constant SOC = 0x2d0e95bd4795d7ace0da3c0ff7b706a5970eb9d3;\n', '\n', '    mapping (address => address) depositSlots;\n', '\n', '    function createPersonalDepositAddress() returns (address depositAddress) {\n', '        if (depositSlots[msg.sender] == 0) {\n', '            depositSlots[msg.sender] = new DepositSlot(this);\n', '        }\n', '\n', '        return depositSlots[msg.sender];\n', '    }\n', '\n', '    function getPersonalDepositAddress(address depositer) constant returns (address depositAddress) {\n', '        return depositSlots[depositer];\n', '    }\n', '\n', '    function processDeposit() {\n', '        require(totalSupply >= 0);\n', '\n', '        address depositSlot = depositSlots[msg.sender];\n', '        require(depositSlot != 0);\n', '\n', '        DepositSlot(depositSlot).collect();\n', '        uint balance = SocInterface(SOC).balanceOf(this);\n', '        require(balance > totalSupply);\n', '\n', '        uint freshWSOC = balance - totalSupply;\n', '        totalSupply += freshWSOC;\n', '        balances[msg.sender] += freshWSOC;\n', '        Transfer(address(this), msg.sender, freshWSOC);\n', '    }\n', '\n', '    function transfer(address _to,\n', '                      uint256 _amount) returns (bool success) {\n', '        if (_to == address(this)) {\n', '            withdrawSOC(_amount);   // convert back to SOC\n', '            return true;\n', '        } else {\n', '            return _transfer(_to, _amount);     // standard transfer\n', '        }\n', '    }\n', '\n', '    function transferFrom(address _from,\n', '                          address _to,\n', '                          uint256 _amount) returns (bool success) {\n', '        require(_to != address(this));\n', '        return _transferFrom(_from, _to, _amount);\n', '    }\n', '\n', '\n', '    function withdrawSOC(uint amount) internal {\n', '        require(amount > 0);\n', '        require(balances[msg.sender] >= amount);\n', '        require(totalSupply >= amount);\n', '\n', '        balances[msg.sender] -= amount;\n', '        totalSupply -= amount;\n', '\n', '        SocInterface(SOC).transfer(msg.sender, amount);\n', '        Transfer(msg.sender, address(this), amount);\n', '\n', '    }\n', '}']
['pragma solidity ^0.4.4;\n', '\n', '// ERC20-compliant wrapper token for SOC\n', '\n', '\n', 'contract TokenInterface {\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _amount) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _amount) returns (bool success);\n', '    function approve(address _spender, uint256 _amount) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _amount);\n', '}\n', '\n', 'contract SocInterface {\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    function transfer(address _to, uint256 _value) public {}\n', '\n', '}\n', '\n', 'contract Token is TokenInterface {\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function _transfer(address _to, uint256 _amount) internal returns (bool success) {\n', '        if (balances[msg.sender] >= _amount && _amount > 0) {\n', '            balances[msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '           return false;\n', '        }\n', '    }\n', '\n', '    function _transferFrom(address _from,\n', '                           address _to,\n', '                           uint256 _amount) internal returns (bool success) {\n', '        if (balances[_from] >= _amount\n', '            && allowed[_from][msg.sender] >= _amount\n', '            && _amount > 0) {\n', '\n', '            balances[_to] += _amount;\n', '            balances[_from] -= _amount;\n', '            allowed[_from][msg.sender] -= _amount;\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function approve(address _spender, uint256 _amount) returns (bool success) {\n', '        require(_amount >= 0);\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', 'contract DepositSlot {\n', '    address public constant SOC = 0x2d0e95bd4795d7ace0da3c0ff7b706a5970eb9d3;\n', '    address public wrapper;\n', '\n', '    modifier onlyWrapper {\n', '        require(msg.sender == wrapper);\n', '        _;\n', '    }\n', '\n', '    function DepositSlot(address _wrapper) {\n', '        wrapper = _wrapper;\n', '    }\n', '\n', '    function collect() onlyWrapper {\n', '        uint amount = TokenInterface(SOC).balanceOf(this);\n', '        //if (amount == 0) throw;\n', '        require(amount > 0);\n', '        SocInterface(SOC).transfer(wrapper, amount);\n', '    }\n', '}\n', '\n', 'contract SocTokenWrapped is Token {\n', '    string public constant standard = "Token 0.1";\n', '    string public constant name = "Soc Token Wrapped";\n', '    string public constant symbol = "WSOC";\n', '    uint8 public constant decimals = 18;     // same as SOC\n', '\n', '    address public constant SOC = 0x2d0e95bd4795d7ace0da3c0ff7b706a5970eb9d3;\n', '\n', '    mapping (address => address) depositSlots;\n', '\n', '    function createPersonalDepositAddress() returns (address depositAddress) {\n', '        if (depositSlots[msg.sender] == 0) {\n', '            depositSlots[msg.sender] = new DepositSlot(this);\n', '        }\n', '\n', '        return depositSlots[msg.sender];\n', '    }\n', '\n', '    function getPersonalDepositAddress(address depositer) constant returns (address depositAddress) {\n', '        return depositSlots[depositer];\n', '    }\n', '\n', '    function processDeposit() {\n', '        require(totalSupply >= 0);\n', '\n', '        address depositSlot = depositSlots[msg.sender];\n', '        require(depositSlot != 0);\n', '\n', '        DepositSlot(depositSlot).collect();\n', '        uint balance = SocInterface(SOC).balanceOf(this);\n', '        require(balance > totalSupply);\n', '\n', '        uint freshWSOC = balance - totalSupply;\n', '        totalSupply += freshWSOC;\n', '        balances[msg.sender] += freshWSOC;\n', '        Transfer(address(this), msg.sender, freshWSOC);\n', '    }\n', '\n', '    function transfer(address _to,\n', '                      uint256 _amount) returns (bool success) {\n', '        if (_to == address(this)) {\n', '            withdrawSOC(_amount);   // convert back to SOC\n', '            return true;\n', '        } else {\n', '            return _transfer(_to, _amount);     // standard transfer\n', '        }\n', '    }\n', '\n', '    function transferFrom(address _from,\n', '                          address _to,\n', '                          uint256 _amount) returns (bool success) {\n', '        require(_to != address(this));\n', '        return _transferFrom(_from, _to, _amount);\n', '    }\n', '\n', '\n', '    function withdrawSOC(uint amount) internal {\n', '        require(amount > 0);\n', '        require(balances[msg.sender] >= amount);\n', '        require(totalSupply >= amount);\n', '\n', '        balances[msg.sender] -= amount;\n', '        totalSupply -= amount;\n', '\n', '        SocInterface(SOC).transfer(msg.sender, amount);\n', '        Transfer(msg.sender, address(this), amount);\n', '\n', '    }\n', '}']
