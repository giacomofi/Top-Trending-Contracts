['pragma solidity ^0.4.24;\n', '\n', '\n', '/** \n', '* MonetaryCoin Distribution \n', '* full source code:\n', '* https://github.com/Monetary-Foundation/MonetaryCoin\n', '*/\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    hasMintPermission\n', '    canMint\n', '    public\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title MineableToken\n', ' * @dev ERC20 Token with Pos mining.\n', ' * The blockReward_ is controlled by a GDP oracle tied to the national identity or currency union identity of the subject MonetaryCoin.\n', ' * This type of mining will be used during both the initial distribution period and when GDP growth is positive.\n', ' * For mining during negative growth period please refer to MineableM5Token.sol. \n', ' * Unlike standard erc20 token, the totalSupply is sum(all user balances) + totalStake instead of sum(all user balances).\n', '*/\n', 'contract MineableToken is MintableToken { \n', '  event Commit(address indexed from, uint value,uint atStake, int onBlockReward);\n', '  event Withdraw(address indexed from, uint reward, uint commitment);\n', '\n', '  uint256 totalStake_ = 0;\n', '  int256 blockReward_;         //could be positive or negative according to GDP\n', '\n', '  struct Commitment {\n', '    uint256 value;             // value commited to mining\n', '    uint256 onBlockNumber;     // commitment done on block\n', '    uint256 atStake;           // stake during commitment\n', '    int256 onBlockReward;\n', '  }\n', '\n', '  mapping( address => Commitment ) miners;\n', '\n', '  /**\n', '  * @dev commit _value for minning\n', '  * @notice the _value will be substructed from user balance and added to the stake.\n', '  * if user previously commited, add to an existing commitment. \n', '  * this is done by calling withdraw() then commit back previous commit + reward + new commit \n', '  * @param _value The amount to be commited.\n', '  * @return the commit value: _value OR prevCommit + reward + _value\n', '  */\n', '  function commit(uint256 _value) public returns (uint256 commitmentValue) {\n', '    require(0 < _value);\n', '    require(_value <= balances[msg.sender]);\n', '    \n', '    commitmentValue = _value;\n', '    uint256 prevCommit = miners[msg.sender].value;\n', '    //In case user already commited, withdraw and recommit \n', '    // new commitment value: prevCommit + reward + _value\n', '    if (0 < prevCommit) {\n', '      // withdraw Will revert if reward is negative\n', '      uint256 prevReward;\n', '      (prevReward, prevCommit) = withdraw();\n', '      commitmentValue = prevReward.add(prevCommit).add(_value);\n', '    }\n', '\n', '    // sub will revert if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(commitmentValue);\n', '    emit Transfer(msg.sender, address(0), commitmentValue);\n', '\n', '    totalStake_ = totalStake_.add(commitmentValue);\n', '\n', '    miners[msg.sender] = Commitment(\n', '      commitmentValue, // Commitment.value\n', '      block.number, // onBlockNumber\n', '      totalStake_, // atStake = current stake + commitments value\n', '      blockReward_ // onBlockReward\n', '      );\n', '    \n', '    emit Commit(msg.sender, commitmentValue, totalStake_, blockReward_); // solium-disable-line\n', '\n', '    return commitmentValue;\n', '  }\n', '\n', '  /**\n', '  * @dev withdraw reward\n', '  * @return {\n', '    "uint256 reward": the new supply\n', '    "uint256 commitmentValue": the commitment to be returned\n', '    }\n', '  */\n', '  function withdraw() public returns (uint256 reward, uint256 commitmentValue) {\n', '    require(miners[msg.sender].value > 0); \n', '\n', '    //will revert if reward is negative:\n', '    reward = getReward(msg.sender);\n', '\n', '    Commitment storage commitment = miners[msg.sender];\n', '    commitmentValue = commitment.value;\n', '\n', '    uint256 withdrawnSum = commitmentValue.add(reward);\n', '    \n', '    totalStake_ = totalStake_.sub(commitmentValue);\n', '    totalSupply_ = totalSupply_.add(reward);\n', '    \n', '    balances[msg.sender] = balances[msg.sender].add(withdrawnSum);\n', '    emit Transfer(address(0), msg.sender, commitmentValue.add(reward));\n', '    \n', '    delete miners[msg.sender];\n', '    \n', '    emit Withdraw(msg.sender, reward, commitmentValue);  // solium-disable-line\n', '    return (reward, commitmentValue);\n', '  }\n', '\n', '  /**\n', '  * @dev Calculate the reward if withdraw() happans on this block\n', '  * @notice The reward is calculated by the formula:\n', '  * (numberOfBlocks) * (effectiveBlockReward) * (commitment.value) / (effectiveStake) \n', '  * effectiveBlockReward is the average between the block reward during commit and the block reward during the call\n', '  * effectiveStake is the average between the stake during the commit and the stake during call (liniar aproximation)\n', '  * @return An uint256 representing the reward amount\n', '  */ \n', '  function getReward(address _miner) public view returns (uint256) {\n', '    if (miners[_miner].value == 0) {\n', '      return 0;\n', '    }\n', '\n', '    Commitment storage commitment = miners[_miner];\n', '\n', '    int256 averageBlockReward = signedAverage(commitment.onBlockReward, blockReward_);\n', '    \n', '    require(0 <= averageBlockReward);\n', '    \n', '    uint256 effectiveBlockReward = uint256(averageBlockReward);\n', '    \n', '    uint256 effectiveStake = average(commitment.atStake, totalStake_);\n', '    \n', '    uint256 numberOfBlocks = block.number.sub(commitment.onBlockNumber);\n', '\n', '    uint256 miningReward = numberOfBlocks.mul(effectiveBlockReward).mul(commitment.value).div(effectiveStake);\n', '       \n', '    return miningReward;\n', '  }\n', '\n', '  /**\n', '  * @dev Calculate the average of two integer numbers \n', '  * @notice 1.5 will be rounded toward zero\n', '  * @return An uint256 representing integer average\n', '  */\n', '  function average(uint256 a, uint256 b) public pure returns (uint256) {\n', '    return a.add(b).div(2);\n', '  }\n', '\n', '  /**\n', '  * @dev Calculate the average of two signed integers numbers \n', '  * @notice 1.5 will be toward zero\n', '  * @return An int256 representing integer average\n', '  */\n', '  function signedAverage(int256 a, int256 b) public pure returns (int256) {\n', '    int256 ans = a + b;\n', '\n', '    if (a > 0 && b > 0 && ans <= 0) {\n', '      require(false);\n', '    }\n', '    if (a < 0 && b < 0 && ans >= 0) {\n', '      require(false);\n', '    }\n', '\n', '    return ans / 2;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the commitment of the specified address.\n', '  * @param _miner The address to query the the commitment Of\n', '  * @return the amount commited.\n', '  */\n', '  function commitmentOf(address _miner) public view returns (uint256) {\n', '    return miners[_miner].value;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the all fields for the commitment of the specified address.\n', '  * @param _miner The address to query the the commitment Of\n', '  * @return {\n', '    "uint256 value": the amount commited.\n', '    "uint256 onBlockNumber": block number of commitment.\n', '    "uint256 atStake": stake when commited.\n', '    "int256 onBlockReward": block reward when commited.\n', '    }\n', '  */\n', '  function getCommitment(address _miner) public view \n', '  returns (\n', '    uint256 value,             // value commited to mining\n', '    uint256 onBlockNumber,     // commited on block\n', '    uint256 atStake,           // stake during commit\n', '    int256 onBlockReward       // block reward during commit\n', '    ) \n', '  {\n', '    value = miners[_miner].value;\n', '    onBlockNumber = miners[_miner].onBlockNumber;\n', '    atStake = miners[_miner].atStake;\n', '    onBlockReward = miners[_miner].onBlockReward;\n', '  }\n', '\n', '  /**\n', '  * @dev the total stake\n', '  * @return the total stake\n', '  */\n', '  function totalStake() public view returns (uint256) {\n', '    return totalStake_;\n', '  }\n', '\n', '  /**\n', '  * @dev the block reward\n', '  * @return the current block reward\n', '  */\n', '  function blockReward() public view returns (int256) {\n', '    return blockReward_;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title MCoinDistribution\n', ' * @dev MCoinDistribution\n', ' * MCoinDistribution is used to distribute a fixed amount of token per window of time.\n', ' * Users may commit Ether to a window of their choice.\n', ' * After a window closes, a user may withdraw their reward using the withdraw(uint256 window) function or use the withdrawAll() \n', ' * function to get tokens from all windows in a single transaction.\n', ' * The amount of tokens allocated to a user for a given window equals (window allocation) * (user eth) / (total eth).\n', ' * A user can get the details of the current window with the detailsOfWindow() function.\n', ' * The first-period allocation is larger than second-period allocation (per window). \n', ' */\n', 'contract MCoinDistribution is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  event Commit(address indexed from, uint256 value, uint256 window);\n', '  event Withdraw(address indexed from, uint256 value, uint256 window);\n', '  event MoveFunds(uint256 value);\n', '\n', '  MineableToken public MCoin;\n', '\n', '  uint256 public firstPeriodWindows;\n', '  uint256 public firstPeriodSupply;\n', ' \n', '  uint256 public secondPeriodWindows;\n', '  uint256 public secondPeriodSupply;\n', '  \n', '  uint256 public totalWindows;  // firstPeriodWindows + secondPeriodSupply\n', '\n', '  address public foundationWallet;\n', '\n', '  uint256 public startTimestamp;\n', '  uint256 public windowLength;         // in seconds\n', '\n', '  mapping (uint256 => uint256) public totals;\n', '  mapping (address => mapping (uint256 => uint256)) public commitment;\n', '  \n', '  constructor(\n', '    uint256 _firstPeriodWindows,\n', '    uint256 _firstPeriodSupply,\n', '    uint256 _secondPeriodWindows,\n', '    uint256 _secondPeriodSupply,\n', '    address _foundationWallet,\n', '    uint256 _startTimestamp,\n', '    uint256 _windowLength\n', '  ) public \n', '  {\n', '    require(0 < _firstPeriodWindows);\n', '    require(0 < _firstPeriodSupply);\n', '    require(0 < _secondPeriodWindows);\n', '    require(0 < _secondPeriodSupply);\n', '    require(0 < _startTimestamp);\n', '    require(0 < _windowLength);\n', '    require(_foundationWallet != address(0));\n', '    \n', '    firstPeriodWindows = _firstPeriodWindows;\n', '    firstPeriodSupply = _firstPeriodSupply;\n', '    secondPeriodWindows = _secondPeriodWindows;\n', '    secondPeriodSupply = _secondPeriodSupply;\n', '    foundationWallet = _foundationWallet;\n', '    startTimestamp = _startTimestamp;\n', '    windowLength = _windowLength;\n', '\n', '    totalWindows = firstPeriodWindows.add(secondPeriodWindows);\n', '    require(currentWindow() == 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Commit used as a fallback\n', '   */\n', '  function () public payable {\n', '    commit();\n', '  }\n', '\n', '  /**\n', '  * @dev initiate the distribution\n', '  * @param _MCoin the token to distribute\n', '  */\n', '  function init(MineableToken _MCoin) public onlyOwner {\n', '    require(address(MCoin) == address(0));\n', '    require(_MCoin.owner() == address(this));\n', '    require(_MCoin.totalSupply() == 0);\n', '\n', '    MCoin = _MCoin;\n', '    MCoin.mint(address(this), firstPeriodSupply.add(secondPeriodSupply));\n', '    MCoin.finishMinting();\n', '  }\n', '\n', '  /**\n', '  * @dev return allocation for given window\n', '  * @param window the desired window\n', '  * @return the number of tokens to distribute in the given window\n', '  */\n', '  function allocationFor(uint256 window) view public returns (uint256) {\n', '    require(window < totalWindows);\n', '    \n', '    return (window < firstPeriodWindows) \n', '      ? firstPeriodSupply.div(firstPeriodWindows) \n', '      : secondPeriodSupply.div(secondPeriodWindows);\n', '  }\n', '\n', '  /**\n', '  * @dev Return the window number for given timestamp\n', '  * @param timestamp \n', '  * @return number of the current window in [0,inf)\n', '  * zero will be returned before distribution start and during the first window.\n', '  */\n', '  function windowOf(uint256 timestamp) view public returns (uint256) {\n', '    return (startTimestamp < timestamp) \n', '      ? timestamp.sub(startTimestamp).div(windowLength) \n', '      : 0;\n', '  }\n', '\n', '  /**\n', '  * @dev Return information about the selected window\n', '  * @param window number: [0-totalWindows)\n', '  * @return {\n', '    "uint256 start": window start timestamp\n', '    "uint256 end": window end timestamp\n', '    "uint256 remainingTime": remaining time (sec), zero if ended\n', '    "uint256 allocation": number of tokens to be distributed\n', '    "uint256 totalEth": total eth commited this window\n', '    "uint256 number": # of requested window\n', '    }\n', '  */\n', '  function detailsOf(uint256 window) view public \n', '    returns (\n', '      uint256 start,  // window start timestamp\n', '      uint256 end,    // window end timestamp\n', '      uint256 remainingTime, // remaining time (sec), zero if ended\n', '      uint256 allocation,    // number of tokens to be distributed\n', '      uint256 totalEth,      // total eth commited this window\n', '      uint256 number         // # of requested window\n', '    ) \n', '    {\n', '    require(window < totalWindows);\n', '    start = startTimestamp.add(windowLength.mul(window));\n', '    end = start.add(windowLength);\n', '    remainingTime = (block.timestamp < end) // solium-disable-line\n', '      ? end.sub(block.timestamp)            // solium-disable-line\n', '      : 0; \n', '\n', '    allocation = allocationFor(window);\n', '    totalEth = totals[window];\n', '    return (start, end, remainingTime, allocation, totalEth, window);\n', '  }\n', '\n', '  /**\n', '  * @dev Return information for the current window\n', '  * @return {\n', '    "uint256 start": window start timestamp\n', '    "uint256 end": window end timestamp\n', '    "uint256 remainingTime": remaining time (sec), zero if ended\n', '    "uint256 allocation": number of tokens to be distributed\n', '    "uint256 totalEth": total eth commited this window\n', '    "uint256 number": # of requested window\n', '    }\n', '  */\n', '  function detailsOfWindow() view public\n', '    returns (\n', '      uint256 start,  // window start timestamp\n', '      uint256 end,    // window end timestamp\n', '      uint256 remainingTime, // remaining time (sec), zero if ended\n', '      uint256 allocation,    // number of tokens to be distributed\n', '      uint256 totalEth,      // total eth commited this window\n', '      uint256 number         // current window\n', '    )\n', '  {\n', '    return (detailsOf(currentWindow()));\n', '  }\n', '\n', '  /**\n', '  * @dev return the number of the current window\n', '  * @return the window, range: [0-totalWindows)\n', '  */\n', '  function currentWindow() view public returns (uint256) {\n', '    return windowOf(block.timestamp); // solium-disable-line\n', '  }\n', '\n', '  /**\n', '  * @dev commit funds for a given window\n', '  * Tokens for commited window need to be withdrawn after\n', '  * window closes using withdraw(uint256 window) function\n', '  * first window: 0\n', '  * last window: totalWindows - 1\n', '  * @param window to commit [0-totalWindows)\n', '  */\n', '  function commitOn(uint256 window) public payable {\n', '    // Distribution didn&#39;t ended\n', '    require(currentWindow() < totalWindows);\n', '    // Commit only for present or future windows\n', '    require(currentWindow() <= window);\n', '    // Don&#39;t commit after distribution is finished\n', '    require(window < totalWindows);\n', '    // Minimum commitment\n', '    require(0.01 ether <= msg.value);\n', '\n', '    // Add commitment for user on given window\n', '    commitment[msg.sender][window] = commitment[msg.sender][window].add(msg.value);\n', '    // Add to window total\n', '    totals[window] = totals[window].add(msg.value);\n', '    // Log\n', '    emit Commit(msg.sender, msg.value, window);\n', '  }\n', '\n', '  /**\n', '  * @dev commit funds for the current window\n', '  */\n', '  function commit() public payable {\n', '    commitOn(currentWindow());\n', '  }\n', '  \n', '  /**\n', '  * @dev Withdraw tokens after the window has closed\n', '  * @param window to withdraw \n', '  * @return the calculated number of tokens\n', '  */\n', '  function withdraw(uint256 window) public returns (uint256 reward) {\n', '    // Requested window already been closed\n', '    require(window < currentWindow());\n', '    // The sender hasn&#39;t made a commitment for requested window\n', '    if (commitment[msg.sender][window] == 0) {\n', '      return 0;\n', '    }\n', '\n', '    // The Price for given window is allocation / total_commitment\n', '    // uint256 price = allocationFor(window).div(totals[window]);\n', '    // The reward is price * commitment\n', '    // uint256 reward = price.mul(commitment[msg.sender][window]);\n', '    \n', '    // Same calculation optimized for accuracy (without the .div rounding for price calculation):\n', '    reward = allocationFor(window).mul(commitment[msg.sender][window]).div(totals[window]);\n', '    \n', '    // Init the commitment\n', '    commitment[msg.sender][window] = 0;\n', '    // Transfer the tokens\n', '    MCoin.transfer(msg.sender, reward);\n', '    // Log\n', '    emit Withdraw(msg.sender, reward, window);\n', '    return reward;\n', '  }\n', '\n', '  /**\n', '  * @dev get the reward from all closed windows\n', '  */\n', '  function withdrawAll() public {\n', '    for (uint256 i = 0; i < currentWindow(); i++) {\n', '      withdraw(i);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev returns a array which contains reward for every closed window\n', '  * a convinience function to be called for updating a GUI. \n', '  * To get the reward tokens use withdrawAll(), which consumes less gas.\n', '  * @return uint256[] rewards - the calculated number of tokens for every closed window\n', '  */\n', '  function getAllRewards() public view returns (uint256[]) {\n', '    uint256[] memory rewards = new uint256[](totalWindows);\n', '    // lastClosedWindow = min(currentWindow(),totalWindows);\n', '    uint256 lastWindow = currentWindow() < totalWindows ? currentWindow() : totalWindows;\n', '    for (uint256 i = 0; i < lastWindow; i++) {\n', '      rewards[i] = withdraw(i);\n', '    }\n', '    return rewards;\n', '  }\n', '\n', '  /**\n', '  * @dev returns a array filled with commitments of address for every window\n', '  * a convinience function to be called for updating a GUI. \n', '  * @return uint256[] commitments - the commited Eth per window of a given address\n', '  */\n', '  function getCommitmentsOf(address from) public view returns (uint256[]) {\n', '    uint256[] memory commitments = new uint256[](totalWindows);\n', '    for (uint256 i = 0; i < totalWindows; i++) {\n', '      commitments[i] = commitment[from][i];\n', '    }\n', '    return commitments;\n', '  }\n', '\n', '  /**\n', '  * @dev returns a array filled with eth totals for every window\n', '  * a convinience function to be called for updating a GUI. \n', '  * @return uint256[] ethTotals - the totals for commited Eth per window\n', '  */\n', '  function getTotals() public view returns (uint256[]) {\n', '    uint256[] memory ethTotals = new uint256[](totalWindows);\n', '    for (uint256 i = 0; i < totalWindows; i++) {\n', '      ethTotals[i] = totals[i];\n', '    }\n', '    return ethTotals;\n', '  }\n', '\n', '  /**\n', '  * @dev moves Eth to the foundation wallet.\n', '  * @return the amount to be moved.\n', '  */\n', '  function moveFunds() public onlyOwner returns (uint256 value) {\n', '    value = address(this).balance;\n', '    require(0 < value);\n', '\n', '    foundationWallet.transfer(value);\n', '    \n', '    emit MoveFunds(value);\n', '    return value;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title MCoinDistributionWrap\n', ' * @dev MCoinDistribution wrapper contract.\n', ' * This contracts wraps MCoinDistribution.sol and is used to create the distribution contract. \n', ' * See MCoinDistribution.sol for full distribution details.\n', ' */\n', 'contract MCoinDistributionWrap is MCoinDistribution {\n', '  using SafeMath for uint256;\n', '  \n', '  uint8 public constant decimals = 18;  // solium-disable-line uppercase\n', '\n', '  constructor(\n', '    uint256 firstPeriodWindows,\n', '    uint256 firstPeriodSupply,\n', '    uint256 secondPeriodWindows,\n', '    uint256 secondPeriodSupply,\n', '    address foundationWallet,\n', '    uint256 startTime,\n', '    uint256 windowLength\n', '    )\n', '    MCoinDistribution (\n', '      firstPeriodWindows,              // uint _firstPeriodWindows\n', '      toDecimals(firstPeriodSupply),   // uint _firstPeriodSupply,\n', '      secondPeriodWindows,             // uint _secondPeriodDays,\n', '      toDecimals(secondPeriodSupply),  // uint _secondPeriodSupply,\n', '      foundationWallet,                // address _foundationMultiSig,\n', '      startTime,                       // uint _startTime\n', '      windowLength                     // uint _windowLength\n', '    ) public \n', '  {}    \n', '\n', '  function toDecimals(uint256 _value) pure internal returns (uint256) {\n', '    return _value.mul(10 ** uint256(decimals));\n', '  }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '\n', '/** \n', '* MonetaryCoin Distribution \n', '* full source code:\n', '* https://github.com/Monetary-Foundation/MonetaryCoin\n', '*/\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    hasMintPermission\n', '    canMint\n', '    public\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title MineableToken\n', ' * @dev ERC20 Token with Pos mining.\n', ' * The blockReward_ is controlled by a GDP oracle tied to the national identity or currency union identity of the subject MonetaryCoin.\n', ' * This type of mining will be used during both the initial distribution period and when GDP growth is positive.\n', ' * For mining during negative growth period please refer to MineableM5Token.sol. \n', ' * Unlike standard erc20 token, the totalSupply is sum(all user balances) + totalStake instead of sum(all user balances).\n', '*/\n', 'contract MineableToken is MintableToken { \n', '  event Commit(address indexed from, uint value,uint atStake, int onBlockReward);\n', '  event Withdraw(address indexed from, uint reward, uint commitment);\n', '\n', '  uint256 totalStake_ = 0;\n', '  int256 blockReward_;         //could be positive or negative according to GDP\n', '\n', '  struct Commitment {\n', '    uint256 value;             // value commited to mining\n', '    uint256 onBlockNumber;     // commitment done on block\n', '    uint256 atStake;           // stake during commitment\n', '    int256 onBlockReward;\n', '  }\n', '\n', '  mapping( address => Commitment ) miners;\n', '\n', '  /**\n', '  * @dev commit _value for minning\n', '  * @notice the _value will be substructed from user balance and added to the stake.\n', '  * if user previously commited, add to an existing commitment. \n', '  * this is done by calling withdraw() then commit back previous commit + reward + new commit \n', '  * @param _value The amount to be commited.\n', '  * @return the commit value: _value OR prevCommit + reward + _value\n', '  */\n', '  function commit(uint256 _value) public returns (uint256 commitmentValue) {\n', '    require(0 < _value);\n', '    require(_value <= balances[msg.sender]);\n', '    \n', '    commitmentValue = _value;\n', '    uint256 prevCommit = miners[msg.sender].value;\n', '    //In case user already commited, withdraw and recommit \n', '    // new commitment value: prevCommit + reward + _value\n', '    if (0 < prevCommit) {\n', '      // withdraw Will revert if reward is negative\n', '      uint256 prevReward;\n', '      (prevReward, prevCommit) = withdraw();\n', '      commitmentValue = prevReward.add(prevCommit).add(_value);\n', '    }\n', '\n', '    // sub will revert if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(commitmentValue);\n', '    emit Transfer(msg.sender, address(0), commitmentValue);\n', '\n', '    totalStake_ = totalStake_.add(commitmentValue);\n', '\n', '    miners[msg.sender] = Commitment(\n', '      commitmentValue, // Commitment.value\n', '      block.number, // onBlockNumber\n', '      totalStake_, // atStake = current stake + commitments value\n', '      blockReward_ // onBlockReward\n', '      );\n', '    \n', '    emit Commit(msg.sender, commitmentValue, totalStake_, blockReward_); // solium-disable-line\n', '\n', '    return commitmentValue;\n', '  }\n', '\n', '  /**\n', '  * @dev withdraw reward\n', '  * @return {\n', '    "uint256 reward": the new supply\n', '    "uint256 commitmentValue": the commitment to be returned\n', '    }\n', '  */\n', '  function withdraw() public returns (uint256 reward, uint256 commitmentValue) {\n', '    require(miners[msg.sender].value > 0); \n', '\n', '    //will revert if reward is negative:\n', '    reward = getReward(msg.sender);\n', '\n', '    Commitment storage commitment = miners[msg.sender];\n', '    commitmentValue = commitment.value;\n', '\n', '    uint256 withdrawnSum = commitmentValue.add(reward);\n', '    \n', '    totalStake_ = totalStake_.sub(commitmentValue);\n', '    totalSupply_ = totalSupply_.add(reward);\n', '    \n', '    balances[msg.sender] = balances[msg.sender].add(withdrawnSum);\n', '    emit Transfer(address(0), msg.sender, commitmentValue.add(reward));\n', '    \n', '    delete miners[msg.sender];\n', '    \n', '    emit Withdraw(msg.sender, reward, commitmentValue);  // solium-disable-line\n', '    return (reward, commitmentValue);\n', '  }\n', '\n', '  /**\n', '  * @dev Calculate the reward if withdraw() happans on this block\n', '  * @notice The reward is calculated by the formula:\n', '  * (numberOfBlocks) * (effectiveBlockReward) * (commitment.value) / (effectiveStake) \n', '  * effectiveBlockReward is the average between the block reward during commit and the block reward during the call\n', '  * effectiveStake is the average between the stake during the commit and the stake during call (liniar aproximation)\n', '  * @return An uint256 representing the reward amount\n', '  */ \n', '  function getReward(address _miner) public view returns (uint256) {\n', '    if (miners[_miner].value == 0) {\n', '      return 0;\n', '    }\n', '\n', '    Commitment storage commitment = miners[_miner];\n', '\n', '    int256 averageBlockReward = signedAverage(commitment.onBlockReward, blockReward_);\n', '    \n', '    require(0 <= averageBlockReward);\n', '    \n', '    uint256 effectiveBlockReward = uint256(averageBlockReward);\n', '    \n', '    uint256 effectiveStake = average(commitment.atStake, totalStake_);\n', '    \n', '    uint256 numberOfBlocks = block.number.sub(commitment.onBlockNumber);\n', '\n', '    uint256 miningReward = numberOfBlocks.mul(effectiveBlockReward).mul(commitment.value).div(effectiveStake);\n', '       \n', '    return miningReward;\n', '  }\n', '\n', '  /**\n', '  * @dev Calculate the average of two integer numbers \n', '  * @notice 1.5 will be rounded toward zero\n', '  * @return An uint256 representing integer average\n', '  */\n', '  function average(uint256 a, uint256 b) public pure returns (uint256) {\n', '    return a.add(b).div(2);\n', '  }\n', '\n', '  /**\n', '  * @dev Calculate the average of two signed integers numbers \n', '  * @notice 1.5 will be toward zero\n', '  * @return An int256 representing integer average\n', '  */\n', '  function signedAverage(int256 a, int256 b) public pure returns (int256) {\n', '    int256 ans = a + b;\n', '\n', '    if (a > 0 && b > 0 && ans <= 0) {\n', '      require(false);\n', '    }\n', '    if (a < 0 && b < 0 && ans >= 0) {\n', '      require(false);\n', '    }\n', '\n', '    return ans / 2;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the commitment of the specified address.\n', '  * @param _miner The address to query the the commitment Of\n', '  * @return the amount commited.\n', '  */\n', '  function commitmentOf(address _miner) public view returns (uint256) {\n', '    return miners[_miner].value;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the all fields for the commitment of the specified address.\n', '  * @param _miner The address to query the the commitment Of\n', '  * @return {\n', '    "uint256 value": the amount commited.\n', '    "uint256 onBlockNumber": block number of commitment.\n', '    "uint256 atStake": stake when commited.\n', '    "int256 onBlockReward": block reward when commited.\n', '    }\n', '  */\n', '  function getCommitment(address _miner) public view \n', '  returns (\n', '    uint256 value,             // value commited to mining\n', '    uint256 onBlockNumber,     // commited on block\n', '    uint256 atStake,           // stake during commit\n', '    int256 onBlockReward       // block reward during commit\n', '    ) \n', '  {\n', '    value = miners[_miner].value;\n', '    onBlockNumber = miners[_miner].onBlockNumber;\n', '    atStake = miners[_miner].atStake;\n', '    onBlockReward = miners[_miner].onBlockReward;\n', '  }\n', '\n', '  /**\n', '  * @dev the total stake\n', '  * @return the total stake\n', '  */\n', '  function totalStake() public view returns (uint256) {\n', '    return totalStake_;\n', '  }\n', '\n', '  /**\n', '  * @dev the block reward\n', '  * @return the current block reward\n', '  */\n', '  function blockReward() public view returns (int256) {\n', '    return blockReward_;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title MCoinDistribution\n', ' * @dev MCoinDistribution\n', ' * MCoinDistribution is used to distribute a fixed amount of token per window of time.\n', ' * Users may commit Ether to a window of their choice.\n', ' * After a window closes, a user may withdraw their reward using the withdraw(uint256 window) function or use the withdrawAll() \n', ' * function to get tokens from all windows in a single transaction.\n', ' * The amount of tokens allocated to a user for a given window equals (window allocation) * (user eth) / (total eth).\n', ' * A user can get the details of the current window with the detailsOfWindow() function.\n', ' * The first-period allocation is larger than second-period allocation (per window). \n', ' */\n', 'contract MCoinDistribution is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  event Commit(address indexed from, uint256 value, uint256 window);\n', '  event Withdraw(address indexed from, uint256 value, uint256 window);\n', '  event MoveFunds(uint256 value);\n', '\n', '  MineableToken public MCoin;\n', '\n', '  uint256 public firstPeriodWindows;\n', '  uint256 public firstPeriodSupply;\n', ' \n', '  uint256 public secondPeriodWindows;\n', '  uint256 public secondPeriodSupply;\n', '  \n', '  uint256 public totalWindows;  // firstPeriodWindows + secondPeriodSupply\n', '\n', '  address public foundationWallet;\n', '\n', '  uint256 public startTimestamp;\n', '  uint256 public windowLength;         // in seconds\n', '\n', '  mapping (uint256 => uint256) public totals;\n', '  mapping (address => mapping (uint256 => uint256)) public commitment;\n', '  \n', '  constructor(\n', '    uint256 _firstPeriodWindows,\n', '    uint256 _firstPeriodSupply,\n', '    uint256 _secondPeriodWindows,\n', '    uint256 _secondPeriodSupply,\n', '    address _foundationWallet,\n', '    uint256 _startTimestamp,\n', '    uint256 _windowLength\n', '  ) public \n', '  {\n', '    require(0 < _firstPeriodWindows);\n', '    require(0 < _firstPeriodSupply);\n', '    require(0 < _secondPeriodWindows);\n', '    require(0 < _secondPeriodSupply);\n', '    require(0 < _startTimestamp);\n', '    require(0 < _windowLength);\n', '    require(_foundationWallet != address(0));\n', '    \n', '    firstPeriodWindows = _firstPeriodWindows;\n', '    firstPeriodSupply = _firstPeriodSupply;\n', '    secondPeriodWindows = _secondPeriodWindows;\n', '    secondPeriodSupply = _secondPeriodSupply;\n', '    foundationWallet = _foundationWallet;\n', '    startTimestamp = _startTimestamp;\n', '    windowLength = _windowLength;\n', '\n', '    totalWindows = firstPeriodWindows.add(secondPeriodWindows);\n', '    require(currentWindow() == 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Commit used as a fallback\n', '   */\n', '  function () public payable {\n', '    commit();\n', '  }\n', '\n', '  /**\n', '  * @dev initiate the distribution\n', '  * @param _MCoin the token to distribute\n', '  */\n', '  function init(MineableToken _MCoin) public onlyOwner {\n', '    require(address(MCoin) == address(0));\n', '    require(_MCoin.owner() == address(this));\n', '    require(_MCoin.totalSupply() == 0);\n', '\n', '    MCoin = _MCoin;\n', '    MCoin.mint(address(this), firstPeriodSupply.add(secondPeriodSupply));\n', '    MCoin.finishMinting();\n', '  }\n', '\n', '  /**\n', '  * @dev return allocation for given window\n', '  * @param window the desired window\n', '  * @return the number of tokens to distribute in the given window\n', '  */\n', '  function allocationFor(uint256 window) view public returns (uint256) {\n', '    require(window < totalWindows);\n', '    \n', '    return (window < firstPeriodWindows) \n', '      ? firstPeriodSupply.div(firstPeriodWindows) \n', '      : secondPeriodSupply.div(secondPeriodWindows);\n', '  }\n', '\n', '  /**\n', '  * @dev Return the window number for given timestamp\n', '  * @param timestamp \n', '  * @return number of the current window in [0,inf)\n', '  * zero will be returned before distribution start and during the first window.\n', '  */\n', '  function windowOf(uint256 timestamp) view public returns (uint256) {\n', '    return (startTimestamp < timestamp) \n', '      ? timestamp.sub(startTimestamp).div(windowLength) \n', '      : 0;\n', '  }\n', '\n', '  /**\n', '  * @dev Return information about the selected window\n', '  * @param window number: [0-totalWindows)\n', '  * @return {\n', '    "uint256 start": window start timestamp\n', '    "uint256 end": window end timestamp\n', '    "uint256 remainingTime": remaining time (sec), zero if ended\n', '    "uint256 allocation": number of tokens to be distributed\n', '    "uint256 totalEth": total eth commited this window\n', '    "uint256 number": # of requested window\n', '    }\n', '  */\n', '  function detailsOf(uint256 window) view public \n', '    returns (\n', '      uint256 start,  // window start timestamp\n', '      uint256 end,    // window end timestamp\n', '      uint256 remainingTime, // remaining time (sec), zero if ended\n', '      uint256 allocation,    // number of tokens to be distributed\n', '      uint256 totalEth,      // total eth commited this window\n', '      uint256 number         // # of requested window\n', '    ) \n', '    {\n', '    require(window < totalWindows);\n', '    start = startTimestamp.add(windowLength.mul(window));\n', '    end = start.add(windowLength);\n', '    remainingTime = (block.timestamp < end) // solium-disable-line\n', '      ? end.sub(block.timestamp)            // solium-disable-line\n', '      : 0; \n', '\n', '    allocation = allocationFor(window);\n', '    totalEth = totals[window];\n', '    return (start, end, remainingTime, allocation, totalEth, window);\n', '  }\n', '\n', '  /**\n', '  * @dev Return information for the current window\n', '  * @return {\n', '    "uint256 start": window start timestamp\n', '    "uint256 end": window end timestamp\n', '    "uint256 remainingTime": remaining time (sec), zero if ended\n', '    "uint256 allocation": number of tokens to be distributed\n', '    "uint256 totalEth": total eth commited this window\n', '    "uint256 number": # of requested window\n', '    }\n', '  */\n', '  function detailsOfWindow() view public\n', '    returns (\n', '      uint256 start,  // window start timestamp\n', '      uint256 end,    // window end timestamp\n', '      uint256 remainingTime, // remaining time (sec), zero if ended\n', '      uint256 allocation,    // number of tokens to be distributed\n', '      uint256 totalEth,      // total eth commited this window\n', '      uint256 number         // current window\n', '    )\n', '  {\n', '    return (detailsOf(currentWindow()));\n', '  }\n', '\n', '  /**\n', '  * @dev return the number of the current window\n', '  * @return the window, range: [0-totalWindows)\n', '  */\n', '  function currentWindow() view public returns (uint256) {\n', '    return windowOf(block.timestamp); // solium-disable-line\n', '  }\n', '\n', '  /**\n', '  * @dev commit funds for a given window\n', '  * Tokens for commited window need to be withdrawn after\n', '  * window closes using withdraw(uint256 window) function\n', '  * first window: 0\n', '  * last window: totalWindows - 1\n', '  * @param window to commit [0-totalWindows)\n', '  */\n', '  function commitOn(uint256 window) public payable {\n', "    // Distribution didn't ended\n", '    require(currentWindow() < totalWindows);\n', '    // Commit only for present or future windows\n', '    require(currentWindow() <= window);\n', "    // Don't commit after distribution is finished\n", '    require(window < totalWindows);\n', '    // Minimum commitment\n', '    require(0.01 ether <= msg.value);\n', '\n', '    // Add commitment for user on given window\n', '    commitment[msg.sender][window] = commitment[msg.sender][window].add(msg.value);\n', '    // Add to window total\n', '    totals[window] = totals[window].add(msg.value);\n', '    // Log\n', '    emit Commit(msg.sender, msg.value, window);\n', '  }\n', '\n', '  /**\n', '  * @dev commit funds for the current window\n', '  */\n', '  function commit() public payable {\n', '    commitOn(currentWindow());\n', '  }\n', '  \n', '  /**\n', '  * @dev Withdraw tokens after the window has closed\n', '  * @param window to withdraw \n', '  * @return the calculated number of tokens\n', '  */\n', '  function withdraw(uint256 window) public returns (uint256 reward) {\n', '    // Requested window already been closed\n', '    require(window < currentWindow());\n', "    // The sender hasn't made a commitment for requested window\n", '    if (commitment[msg.sender][window] == 0) {\n', '      return 0;\n', '    }\n', '\n', '    // The Price for given window is allocation / total_commitment\n', '    // uint256 price = allocationFor(window).div(totals[window]);\n', '    // The reward is price * commitment\n', '    // uint256 reward = price.mul(commitment[msg.sender][window]);\n', '    \n', '    // Same calculation optimized for accuracy (without the .div rounding for price calculation):\n', '    reward = allocationFor(window).mul(commitment[msg.sender][window]).div(totals[window]);\n', '    \n', '    // Init the commitment\n', '    commitment[msg.sender][window] = 0;\n', '    // Transfer the tokens\n', '    MCoin.transfer(msg.sender, reward);\n', '    // Log\n', '    emit Withdraw(msg.sender, reward, window);\n', '    return reward;\n', '  }\n', '\n', '  /**\n', '  * @dev get the reward from all closed windows\n', '  */\n', '  function withdrawAll() public {\n', '    for (uint256 i = 0; i < currentWindow(); i++) {\n', '      withdraw(i);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev returns a array which contains reward for every closed window\n', '  * a convinience function to be called for updating a GUI. \n', '  * To get the reward tokens use withdrawAll(), which consumes less gas.\n', '  * @return uint256[] rewards - the calculated number of tokens for every closed window\n', '  */\n', '  function getAllRewards() public view returns (uint256[]) {\n', '    uint256[] memory rewards = new uint256[](totalWindows);\n', '    // lastClosedWindow = min(currentWindow(),totalWindows);\n', '    uint256 lastWindow = currentWindow() < totalWindows ? currentWindow() : totalWindows;\n', '    for (uint256 i = 0; i < lastWindow; i++) {\n', '      rewards[i] = withdraw(i);\n', '    }\n', '    return rewards;\n', '  }\n', '\n', '  /**\n', '  * @dev returns a array filled with commitments of address for every window\n', '  * a convinience function to be called for updating a GUI. \n', '  * @return uint256[] commitments - the commited Eth per window of a given address\n', '  */\n', '  function getCommitmentsOf(address from) public view returns (uint256[]) {\n', '    uint256[] memory commitments = new uint256[](totalWindows);\n', '    for (uint256 i = 0; i < totalWindows; i++) {\n', '      commitments[i] = commitment[from][i];\n', '    }\n', '    return commitments;\n', '  }\n', '\n', '  /**\n', '  * @dev returns a array filled with eth totals for every window\n', '  * a convinience function to be called for updating a GUI. \n', '  * @return uint256[] ethTotals - the totals for commited Eth per window\n', '  */\n', '  function getTotals() public view returns (uint256[]) {\n', '    uint256[] memory ethTotals = new uint256[](totalWindows);\n', '    for (uint256 i = 0; i < totalWindows; i++) {\n', '      ethTotals[i] = totals[i];\n', '    }\n', '    return ethTotals;\n', '  }\n', '\n', '  /**\n', '  * @dev moves Eth to the foundation wallet.\n', '  * @return the amount to be moved.\n', '  */\n', '  function moveFunds() public onlyOwner returns (uint256 value) {\n', '    value = address(this).balance;\n', '    require(0 < value);\n', '\n', '    foundationWallet.transfer(value);\n', '    \n', '    emit MoveFunds(value);\n', '    return value;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title MCoinDistributionWrap\n', ' * @dev MCoinDistribution wrapper contract.\n', ' * This contracts wraps MCoinDistribution.sol and is used to create the distribution contract. \n', ' * See MCoinDistribution.sol for full distribution details.\n', ' */\n', 'contract MCoinDistributionWrap is MCoinDistribution {\n', '  using SafeMath for uint256;\n', '  \n', '  uint8 public constant decimals = 18;  // solium-disable-line uppercase\n', '\n', '  constructor(\n', '    uint256 firstPeriodWindows,\n', '    uint256 firstPeriodSupply,\n', '    uint256 secondPeriodWindows,\n', '    uint256 secondPeriodSupply,\n', '    address foundationWallet,\n', '    uint256 startTime,\n', '    uint256 windowLength\n', '    )\n', '    MCoinDistribution (\n', '      firstPeriodWindows,              // uint _firstPeriodWindows\n', '      toDecimals(firstPeriodSupply),   // uint _firstPeriodSupply,\n', '      secondPeriodWindows,             // uint _secondPeriodDays,\n', '      toDecimals(secondPeriodSupply),  // uint _secondPeriodSupply,\n', '      foundationWallet,                // address _foundationMultiSig,\n', '      startTime,                       // uint _startTime\n', '      windowLength                     // uint _windowLength\n', '    ) public \n', '  {}    \n', '\n', '  function toDecimals(uint256 _value) pure internal returns (uint256) {\n', '    return _value.mul(10 ** uint256(decimals));\n', '  }\n', '}']
