['pragma solidity 0.4.18;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '  contract ERC20 {\n', '  function totalSupply()public view returns (uint total_Supply);\n', '  function balanceOf(address _owner)public view returns (uint256 balance);\n', '  function allowance(address _owner, address _spender)public view returns (uint remaining);\n', '  function transferFrom(address _from, address _to, uint _amount)public returns (bool ok);\n', '  function approve(address _spender, uint _amount)public returns (bool ok);\n', '  function transfer(address _to, uint _amount)public returns (bool ok);\n', '  event Transfer(address indexed _from, address indexed _to, uint _amount);\n', '  event Approval(address indexed _owner, address indexed _spender, uint _amount);\n', '}\n', '\n', 'contract GOLDBITSCOIN is ERC20\n', '{\n', '    using SafeMath for uint256;\n', '    string public constant symbol = "GBC";\n', '    string public constant name = "Gold Bits Coin";\n', '    uint8 public constant decimals = 10;\n', '    // 100 million total supply // muliplies dues to decimal precision\n', '    uint256 public _totalSupply = 1000000000 * 10 **10;     // 1 billion supply           \n', '    // Balances for each account\n', '    mapping(address => uint256) balances;   \n', '    // Owner of this contract\n', '    address public owner;\n', '    \n', '    uint public perTokenPrice;\n', '    address public central_account;\n', '    bool stopped = true;\n', '    bool ICO_PRE_ICO_STAGE = false;\n', '    uint256 public stage = 0;\n', '    uint256 public one_ether_usd_price = 0;\n', '    \n', '    mapping (address => mapping (address => uint)) allowed;\n', '    \n', '    // ico startdate\n', '    uint256 startdate;\n', '\n', '    // for maintaining prices with days\n', '    uint256 first_ten_days;\n', '    uint256 second_ten_days;\n', '    uint256 third_ten_days;\n', '    \n', '    uint256 public supply_increased;\n', '    bool PreICOended = false;\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '    event LOG(string e,uint256 value);\n', '    //ico enddate;\n', '    uint256 enddate;\n', '    \n', '    modifier onlyOwner() {\n', '      if (msg.sender != owner) {\n', '            revert();\n', '        }\n', '        _;\n', '        }\n', '        \n', '    modifier onlycentralAccount {\n', '        require(msg.sender == central_account);\n', '        _;\n', '    }\n', '    \n', '    function GOLDBITSCOIN() public\n', '    {\n', '        owner = msg.sender;\n', '        balances[owner] = 200000000 * 10 **10; // 200 million token with company/owner , multiplied due to decimal precision\n', '    \n', '        supply_increased += balances[owner];\n', '    }\n', '    \n', '    function setCentralAccount(address central_address) public onlyOwner\n', '    {\n', '        central_account = central_address;\n', '    }\n', '    // to be called by owner on 15th jan to start PreICO till 31st january\n', '    function StatPreICO() external onlyOwner\n', '    {\n', '        stage = 1;\n', '        ICO_PRE_ICO_STAGE = true;\n', '        balances[address(this)] = 100000000 * 10 **10; // 100 million token with contract , multiplied due to decimal precision\n', '        startdate = now;\n', '        enddate = now.add(17 days);\n', '        supply_increased += balances[address(this)];\n', '        perTokenPrice = 24; // 24 cents\n', '   \n', '    }\n', '    // to be called by owner on 1st feb to start ICO till 1st march\n', '    function StartICO() external onlyOwner\n', '    {\n', '        require(PreICOended);    \n', '        balances[address(this)] = 100000000 * 10 **10; // 100 million token with contract , multiplied due to decimal precision\n', '        stage = 2;\n', '        ICO_PRE_ICO_STAGE = true;\n', '        stopped = false;\n', '        startdate = now;\n', '        first_ten_days = now.add(10 days);\n', '        second_ten_days = first_ten_days.add(10 days);\n', '        third_ten_days = second_ten_days.add(10 days);\n', '        enddate = now.add(30 days);\n', '        supply_increased += balances[address(this)];\n', '        perTokenPrice = 30; // 30 cents\n', '    }\n', '    // to be called by owner at end of preICO and ICO\n', '    function end_ICO_PreICO() external onlyOwner\n', '    {\n', '        PreICOended = true;\n', '        stage = 0;\n', '        ICO_PRE_ICO_STAGE = false;\n', '        supply_increased -= balances[address(this)];\n', '        balances[address(this)] =0;\n', '    }\n', '    \n', '    \n', '    function getTokenPriceforDapp() public view returns (uint256)\n', '    {\n', '        return perTokenPrice;\n', '    }\n', '    \n', '    function getEtherPriceforDapp() public view returns (uint256)\n', '    {\n', '        return one_ether_usd_price;\n', '    }\n', '    \n', '    function () public payable \n', '    {\n', '        require(ICO_PRE_ICO_STAGE);\n', '        require(stage > 0);\n', '        require(now <= enddate);\n', '        distributeToken(msg.value,msg.sender);   \n', '    }\n', '    \n', '     \n', '    function distributeToken(uint val, address user_address ) private {\n', '        \n', '        uint tokens = ((one_ether_usd_price * val) )  / (perTokenPrice * 10**14); \n', '\n', '        require(balances[address(this)] >= tokens);\n', '        \n', '        balances[address(this)] = balances[address(this)].sub(tokens);\n', '        balances[user_address] = balances[user_address].add(tokens);\n', '        Transfer(address(this), user_address, tokens);\n', '       \n', '      \n', '        \n', '    }\n', '    \n', '    // need to be called before the ICO to set ether price give to 8 decimal places\n', '    function setconfigurationEtherPrice(uint etherPrice) public onlyOwner\n', '    {\n', '        one_ether_usd_price = etherPrice;\n', '       \n', '        \n', '    }\n', '    // **** need to be called to set  token Price, to be called during ICO to change price every 10 days\n', '    function setconfigurationTokenPrice(uint TokenPrice) public onlyOwner\n', '    {\n', '      \n', '        perTokenPrice = TokenPrice;\n', '        \n', '    }\n', '    \n', '        // **** need to be called to set  token Price, to be called during ICO to change price every 10 days\n', '    function setStage(uint status) public onlyOwner\n', '    {\n', '      \n', '        stage = status;\n', '        \n', '    }\n', '    \n', '    //used by wallet during token buying procedure \n', '    function transferby(address _from,address _to,uint256 _amount) public onlycentralAccount returns(bool success) {\n', '        if (balances[_from] >= _amount &&\n', '            _amount > 0 &&\n', '            balances[_to] + _amount > balances[_to]) {\n', '                 \n', '            balances[_from] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '    // to be called by owner after an year review\n', '    function mineToken(uint256 supply_to_increase) public onlyOwner\n', '    {\n', '        require((supply_increased + supply_to_increase) <= _totalSupply);\n', '        supply_increased += supply_to_increase;\n', '        \n', '        balances[owner] += supply_to_increase;\n', '        Transfer(0, owner, supply_to_increase);\n', '    }\n', '    \n', '    \n', '    // total supply of the tokens\n', '    function totalSupply() public view returns (uint256 total_Supply) {\n', '         total_Supply = _totalSupply;\n', '     }\n', '  \n', '     //  balance of a particular account\n', '     function balanceOf(address _owner)public view returns (uint256 balance) {\n', '         return balances[_owner];\n', '     }\n', '  \n', "     // Transfer the balance from owner's account to another account\n", '     function transfer(address _to, uint256 _amount)public returns (bool success) {\n', '         require( _to != 0x0);\n', '         require(balances[msg.sender] >= _amount \n', '             && _amount >= 0\n', '             && balances[_to] + _amount >= balances[_to]);\n', '             balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '             balances[_to] = balances[_to].add(_amount);\n', '             Transfer(msg.sender, _to, _amount);\n', '             return true;\n', '     }\n', '  \n', '     // Send _value amount of tokens from address _from to address _to\n', '     // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n', '     // tokens on your behalf, for example to "deposit" to a contract address and/or to charge\n', '     // fees in sub-currencies; the command should fail unless the _from account has\n', '     // deliberately authorized the sender of the message via some mechanism; we propose\n', '     // these standardized APIs for approval:\n', '     function transferFrom(\n', '         address _from,\n', '         address _to,\n', '         uint256 _amount\n', '     )public returns (bool success) {\n', '        require(_to != 0x0); \n', '         require(balances[_from] >= _amount\n', '             && allowed[_from][msg.sender] >= _amount\n', '             && _amount >= 0\n', '             && balances[_to] + _amount >= balances[_to]);\n', '             balances[_from] = balances[_from].sub(_amount);\n', '             allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '             balances[_to] = balances[_to].add(_amount);\n', '             Transfer(_from, _to, _amount);\n', '             return true;\n', '             }\n', ' \n', '     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '     // If this function is called again it overwrites the current allowance with _value.\n', '     function approve(address _spender, uint256 _amount)public returns (bool success) {\n', '         allowed[msg.sender][_spender] = _amount;\n', '         Approval(msg.sender, _spender, _amount);\n', '         return true;\n', '     }\n', '  \n', '     function allowance(address _owner, address _spender)public view returns (uint256 remaining) {\n', '         return allowed[_owner][_spender];\n', '   }\n', '   \n', '   \t//In case the ownership needs to be transferred\n', '\tfunction transferOwnership(address newOwner)public onlyOwner\n', '\t{\n', '\t    require( newOwner != 0x0);\n', '\t    balances[newOwner] = balances[newOwner].add(balances[owner]);\n', '\t    balances[owner] = 0;\n', '\t    owner = newOwner;\n', '\t}\n', '\t\n', '\t// drain ether called by only owner\n', '\tfunction drain() external onlyOwner {\n', '        owner.transfer(this.balance);\n', '    }\n', '    \n', '    //Below function will convert string to integer removing decimal\n', '\tfunction stringToUint(string s) private returns (uint) \n', '\t  {\n', '        bytes memory b = bytes(s);\n', '        uint i;\n', '        uint result1 = 0;\n', '        for (i = 0; i < b.length; i++) {\n', '            uint c = uint(b[i]);\n', '            if(c == 46)\n', '            {\n', '                // Do nothing --this will skip the decimal\n', '            }\n', '          else if (c >= 48 && c <= 57) {\n', '                result1 = result1 * 10 + (c - 48);\n', '              // usd_price=result;\n', '                \n', '            }\n', '        }\n', '            return result1;\n', '      }\n', '    \n', '}']