['pragma solidity ^0.4.21;\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address previousOwner, address newOwner);\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract StorageBase is Ownable {\n', '\n', '    function withdrawBalance() external onlyOwner returns (bool) {\n', '        // The owner has a method to withdraw balance from multiple contracts together,\n', '        // use send here to make sure even if one withdrawBalance fails the others will still work\n', '        bool res = msg.sender.send(address(this).balance);\n', '        return res;\n', '    }\n', '}\n', '\n', 'contract CryptoStorage is StorageBase {\n', '\n', '    struct Monster {\n', '        uint32 matronId;\n', '        uint32 sireId;\n', '        uint32 siringWithId;\n', '        uint16 cooldownIndex;\n', '        uint16 generation;\n', '        uint64 cooldownEndBlock;\n', '        uint64 birthTime;\n', '        uint16 monsterId;\n', '        uint32 monsterNum;\n', '        bytes properties;\n', '    }\n', '\n', '    // ERC721 tokens\n', '    Monster[] internal monsters;\n', '\n', '    // total number of monster created from system instead of breeding\n', '    uint256 public promoCreatedCount;\n', '\n', '    // total number of monster created by system sale address\n', '    uint256 public systemCreatedCount;\n', '\n', '    // number of monsters in pregnant\n', '    uint256 public pregnantMonsters;\n', '    \n', '    // monsterId => total number\n', '    mapping (uint256 => uint32) public monsterCurrentNumber;\n', '    \n', '    // tokenId => owner address\n', '    mapping (uint256 => address) public monsterIndexToOwner;\n', '\n', '    // owner address => balance of tokens\n', '    mapping (address => uint256) public ownershipTokenCount;\n', '\n', '    // tokenId => approved address\n', '    mapping (uint256 => address) public monsterIndexToApproved;\n', '\n', '    function CryptoStorage() public {\n', '        // placeholder to make the first available monster to have a tokenId starts from 1\n', '        createMonster(0, 0, 0, 0, 0, "");\n', '    }\n', '\n', '    function createMonster(\n', '        uint256 _matronId,\n', '        uint256 _sireId,\n', '        uint256 _generation,\n', '        uint256 _birthTime,\n', '        uint256 _monsterId,\n', '        bytes _properties\n', '    ) \n', '        public \n', '        onlyOwner\n', '        returns (uint256)\n', '    {\n', '        require(_matronId == uint256(uint32(_matronId)));\n', '        require(_sireId == uint256(uint32(_sireId)));\n', '        require(_generation == uint256(uint16(_generation)));\n', '        require(_birthTime == uint256(uint64(_birthTime)));\n', '        require(_monsterId == uint256(uint16(_monsterId)));\n', '\n', '        monsterCurrentNumber[_monsterId]++;\n', '\n', '        Monster memory monster = Monster({\n', '            matronId: uint32(_matronId),\n', '            sireId: uint32(_sireId),\n', '            siringWithId: 0,\n', '            cooldownIndex: 0,\n', '            generation: uint16(_generation),\n', '            cooldownEndBlock: 0,\n', '            birthTime: uint64(_birthTime),\n', '            monsterId: uint16(_monsterId),\n', '            monsterNum: monsterCurrentNumber[_monsterId],\n', '            properties: _properties\n', '        });\n', '        uint256 tokenId = monsters.push(monster) - 1;\n', '\n', '        // overflow check\n', '        require(tokenId == uint256(uint32(tokenId)));\n', '\n', '        return tokenId;\n', '    }\n', '\n', '    function getMonster(uint256 _tokenId)\n', '        external\n', '        view\n', '        returns (\n', '            bool isGestating,\n', '            bool isReady,\n', '            uint16 cooldownIndex,\n', '            uint64 nextActionAt,\n', '            uint32 siringWithId,\n', '            uint32 matronId,\n', '            uint32 sireId,\n', '            uint64 cooldownEndBlock,\n', '            uint16 generation,\n', '            uint64 birthTime,\n', '            uint32 monsterNum,\n', '            uint16 monsterId,\n', '            bytes properties\n', '        ) \n', '    {\n', '        Monster storage monster = monsters[_tokenId];\n', '\n', '        isGestating = (monster.siringWithId != 0);\n', '        isReady = (monster.cooldownEndBlock <= block.number);\n', '        cooldownIndex = monster.cooldownIndex;\n', '        nextActionAt = monster.cooldownEndBlock;\n', '        siringWithId = monster.siringWithId;\n', '        matronId = monster.matronId;\n', '        sireId = monster.sireId;\n', '        cooldownEndBlock = monster.cooldownEndBlock;\n', '        generation = monster.generation;\n', '        birthTime = monster.birthTime;\n', '        monsterNum = monster.monsterNum;\n', '        monsterId = monster.monsterId;\n', '        properties = monster.properties;\n', '    }\n', '\n', '    function getMonsterCount() external view returns (uint256) {\n', '        return monsters.length - 1;\n', '    }\n', '\n', '    function getMatronId(uint256 _tokenId) external view returns (uint32) {\n', '        return monsters[_tokenId].matronId;\n', '    }\n', '\n', '    function getSireId(uint256 _tokenId) external view returns (uint32) {\n', '        return monsters[_tokenId].sireId;\n', '    }\n', '\n', '    function getSiringWithId(uint256 _tokenId) external view returns (uint32) {\n', '        return monsters[_tokenId].siringWithId;\n', '    }\n', '    \n', '    function setSiringWithId(uint256 _tokenId, uint32 _siringWithId) external onlyOwner {\n', '        monsters[_tokenId].siringWithId = _siringWithId;\n', '    }\n', '\n', '    function deleteSiringWithId(uint256 _tokenId) external onlyOwner {\n', '        delete monsters[_tokenId].siringWithId;\n', '    }\n', '\n', '    function getCooldownIndex(uint256 _tokenId) external view returns (uint16) {\n', '        return monsters[_tokenId].cooldownIndex;\n', '    }\n', '\n', '    function setCooldownIndex(uint256 _tokenId) external onlyOwner {\n', '        monsters[_tokenId].cooldownIndex += 1;\n', '    }\n', '\n', '    function getGeneration(uint256 _tokenId) external view returns (uint16) {\n', '        return monsters[_tokenId].generation;\n', '    }\n', '\n', '    function getCooldownEndBlock(uint256 _tokenId) external view returns (uint64) {\n', '        return monsters[_tokenId].cooldownEndBlock;\n', '    }\n', '\n', '    function setCooldownEndBlock(uint256 _tokenId, uint64 _cooldownEndBlock) external onlyOwner {\n', '        monsters[_tokenId].cooldownEndBlock = _cooldownEndBlock;\n', '    }\n', '\n', '    function getBirthTime(uint256 _tokenId) external view returns (uint64) {\n', '        return monsters[_tokenId].birthTime;\n', '    }\n', '\n', '    function getMonsterId(uint256 _tokenId) external view returns (uint16) {\n', '        return monsters[_tokenId].monsterId;\n', '    }\n', '\n', '    function getMonsterNum(uint256 _tokenId) external view returns (uint32) {\n', '        return monsters[_tokenId].monsterNum;\n', '    }\n', '\n', '    function getProperties(uint256 _tokenId) external view returns (bytes) {\n', '        return monsters[_tokenId].properties;\n', '    }\n', '\n', '    function updateProperties(uint256 _tokenId, bytes _properties) external onlyOwner {\n', '        monsters[_tokenId].properties = _properties;\n', '    }\n', '    \n', '    function setMonsterIndexToOwner(uint256 _tokenId, address _owner) external onlyOwner {\n', '        monsterIndexToOwner[_tokenId] = _owner;\n', '    }\n', '\n', '    function increaseOwnershipTokenCount(address _owner) external onlyOwner {\n', '        ownershipTokenCount[_owner]++;\n', '    }\n', '\n', '    function decreaseOwnershipTokenCount(address _owner) external onlyOwner {\n', '        ownershipTokenCount[_owner]--;\n', '    }\n', '\n', '    function setMonsterIndexToApproved(uint256 _tokenId, address _approved) external onlyOwner {\n', '        monsterIndexToApproved[_tokenId] = _approved;\n', '    }\n', '    \n', '    function deleteMonsterIndexToApproved(uint256 _tokenId) external onlyOwner {\n', '        delete monsterIndexToApproved[_tokenId];\n', '    }\n', '\n', '    function increasePromoCreatedCount() external onlyOwner {\n', '        promoCreatedCount++;\n', '    }\n', '\n', '    function increaseSystemCreatedCount() external onlyOwner {\n', '        systemCreatedCount++;\n', '    }\n', '\n', '    function increasePregnantCounter() external onlyOwner {\n', '        pregnantMonsters++;\n', '    }\n', '\n', '    function decreasePregnantCounter() external onlyOwner {\n', '        pregnantMonsters--;\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address previousOwner, address newOwner);\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract StorageBase is Ownable {\n', '\n', '    function withdrawBalance() external onlyOwner returns (bool) {\n', '        // The owner has a method to withdraw balance from multiple contracts together,\n', '        // use send here to make sure even if one withdrawBalance fails the others will still work\n', '        bool res = msg.sender.send(address(this).balance);\n', '        return res;\n', '    }\n', '}\n', '\n', 'contract CryptoStorage is StorageBase {\n', '\n', '    struct Monster {\n', '        uint32 matronId;\n', '        uint32 sireId;\n', '        uint32 siringWithId;\n', '        uint16 cooldownIndex;\n', '        uint16 generation;\n', '        uint64 cooldownEndBlock;\n', '        uint64 birthTime;\n', '        uint16 monsterId;\n', '        uint32 monsterNum;\n', '        bytes properties;\n', '    }\n', '\n', '    // ERC721 tokens\n', '    Monster[] internal monsters;\n', '\n', '    // total number of monster created from system instead of breeding\n', '    uint256 public promoCreatedCount;\n', '\n', '    // total number of monster created by system sale address\n', '    uint256 public systemCreatedCount;\n', '\n', '    // number of monsters in pregnant\n', '    uint256 public pregnantMonsters;\n', '    \n', '    // monsterId => total number\n', '    mapping (uint256 => uint32) public monsterCurrentNumber;\n', '    \n', '    // tokenId => owner address\n', '    mapping (uint256 => address) public monsterIndexToOwner;\n', '\n', '    // owner address => balance of tokens\n', '    mapping (address => uint256) public ownershipTokenCount;\n', '\n', '    // tokenId => approved address\n', '    mapping (uint256 => address) public monsterIndexToApproved;\n', '\n', '    function CryptoStorage() public {\n', '        // placeholder to make the first available monster to have a tokenId starts from 1\n', '        createMonster(0, 0, 0, 0, 0, "");\n', '    }\n', '\n', '    function createMonster(\n', '        uint256 _matronId,\n', '        uint256 _sireId,\n', '        uint256 _generation,\n', '        uint256 _birthTime,\n', '        uint256 _monsterId,\n', '        bytes _properties\n', '    ) \n', '        public \n', '        onlyOwner\n', '        returns (uint256)\n', '    {\n', '        require(_matronId == uint256(uint32(_matronId)));\n', '        require(_sireId == uint256(uint32(_sireId)));\n', '        require(_generation == uint256(uint16(_generation)));\n', '        require(_birthTime == uint256(uint64(_birthTime)));\n', '        require(_monsterId == uint256(uint16(_monsterId)));\n', '\n', '        monsterCurrentNumber[_monsterId]++;\n', '\n', '        Monster memory monster = Monster({\n', '            matronId: uint32(_matronId),\n', '            sireId: uint32(_sireId),\n', '            siringWithId: 0,\n', '            cooldownIndex: 0,\n', '            generation: uint16(_generation),\n', '            cooldownEndBlock: 0,\n', '            birthTime: uint64(_birthTime),\n', '            monsterId: uint16(_monsterId),\n', '            monsterNum: monsterCurrentNumber[_monsterId],\n', '            properties: _properties\n', '        });\n', '        uint256 tokenId = monsters.push(monster) - 1;\n', '\n', '        // overflow check\n', '        require(tokenId == uint256(uint32(tokenId)));\n', '\n', '        return tokenId;\n', '    }\n', '\n', '    function getMonster(uint256 _tokenId)\n', '        external\n', '        view\n', '        returns (\n', '            bool isGestating,\n', '            bool isReady,\n', '            uint16 cooldownIndex,\n', '            uint64 nextActionAt,\n', '            uint32 siringWithId,\n', '            uint32 matronId,\n', '            uint32 sireId,\n', '            uint64 cooldownEndBlock,\n', '            uint16 generation,\n', '            uint64 birthTime,\n', '            uint32 monsterNum,\n', '            uint16 monsterId,\n', '            bytes properties\n', '        ) \n', '    {\n', '        Monster storage monster = monsters[_tokenId];\n', '\n', '        isGestating = (monster.siringWithId != 0);\n', '        isReady = (monster.cooldownEndBlock <= block.number);\n', '        cooldownIndex = monster.cooldownIndex;\n', '        nextActionAt = monster.cooldownEndBlock;\n', '        siringWithId = monster.siringWithId;\n', '        matronId = monster.matronId;\n', '        sireId = monster.sireId;\n', '        cooldownEndBlock = monster.cooldownEndBlock;\n', '        generation = monster.generation;\n', '        birthTime = monster.birthTime;\n', '        monsterNum = monster.monsterNum;\n', '        monsterId = monster.monsterId;\n', '        properties = monster.properties;\n', '    }\n', '\n', '    function getMonsterCount() external view returns (uint256) {\n', '        return monsters.length - 1;\n', '    }\n', '\n', '    function getMatronId(uint256 _tokenId) external view returns (uint32) {\n', '        return monsters[_tokenId].matronId;\n', '    }\n', '\n', '    function getSireId(uint256 _tokenId) external view returns (uint32) {\n', '        return monsters[_tokenId].sireId;\n', '    }\n', '\n', '    function getSiringWithId(uint256 _tokenId) external view returns (uint32) {\n', '        return monsters[_tokenId].siringWithId;\n', '    }\n', '    \n', '    function setSiringWithId(uint256 _tokenId, uint32 _siringWithId) external onlyOwner {\n', '        monsters[_tokenId].siringWithId = _siringWithId;\n', '    }\n', '\n', '    function deleteSiringWithId(uint256 _tokenId) external onlyOwner {\n', '        delete monsters[_tokenId].siringWithId;\n', '    }\n', '\n', '    function getCooldownIndex(uint256 _tokenId) external view returns (uint16) {\n', '        return monsters[_tokenId].cooldownIndex;\n', '    }\n', '\n', '    function setCooldownIndex(uint256 _tokenId) external onlyOwner {\n', '        monsters[_tokenId].cooldownIndex += 1;\n', '    }\n', '\n', '    function getGeneration(uint256 _tokenId) external view returns (uint16) {\n', '        return monsters[_tokenId].generation;\n', '    }\n', '\n', '    function getCooldownEndBlock(uint256 _tokenId) external view returns (uint64) {\n', '        return monsters[_tokenId].cooldownEndBlock;\n', '    }\n', '\n', '    function setCooldownEndBlock(uint256 _tokenId, uint64 _cooldownEndBlock) external onlyOwner {\n', '        monsters[_tokenId].cooldownEndBlock = _cooldownEndBlock;\n', '    }\n', '\n', '    function getBirthTime(uint256 _tokenId) external view returns (uint64) {\n', '        return monsters[_tokenId].birthTime;\n', '    }\n', '\n', '    function getMonsterId(uint256 _tokenId) external view returns (uint16) {\n', '        return monsters[_tokenId].monsterId;\n', '    }\n', '\n', '    function getMonsterNum(uint256 _tokenId) external view returns (uint32) {\n', '        return monsters[_tokenId].monsterNum;\n', '    }\n', '\n', '    function getProperties(uint256 _tokenId) external view returns (bytes) {\n', '        return monsters[_tokenId].properties;\n', '    }\n', '\n', '    function updateProperties(uint256 _tokenId, bytes _properties) external onlyOwner {\n', '        monsters[_tokenId].properties = _properties;\n', '    }\n', '    \n', '    function setMonsterIndexToOwner(uint256 _tokenId, address _owner) external onlyOwner {\n', '        monsterIndexToOwner[_tokenId] = _owner;\n', '    }\n', '\n', '    function increaseOwnershipTokenCount(address _owner) external onlyOwner {\n', '        ownershipTokenCount[_owner]++;\n', '    }\n', '\n', '    function decreaseOwnershipTokenCount(address _owner) external onlyOwner {\n', '        ownershipTokenCount[_owner]--;\n', '    }\n', '\n', '    function setMonsterIndexToApproved(uint256 _tokenId, address _approved) external onlyOwner {\n', '        monsterIndexToApproved[_tokenId] = _approved;\n', '    }\n', '    \n', '    function deleteMonsterIndexToApproved(uint256 _tokenId) external onlyOwner {\n', '        delete monsterIndexToApproved[_tokenId];\n', '    }\n', '\n', '    function increasePromoCreatedCount() external onlyOwner {\n', '        promoCreatedCount++;\n', '    }\n', '\n', '    function increaseSystemCreatedCount() external onlyOwner {\n', '        systemCreatedCount++;\n', '    }\n', '\n', '    function increasePregnantCounter() external onlyOwner {\n', '        pregnantMonsters++;\n', '    }\n', '\n', '    function decreasePregnantCounter() external onlyOwner {\n', '        pregnantMonsters--;\n', '    }\n', '}']
