['pragma solidity ^0.4.24;\n', '\n', 'interface BadERC20 {\n', '    function transfer(address _to, uint256 _value) external;\n', '}\n', '\n', 'interface GoodERC20 {\n', '    function transfer(address _to, uint256 _value) external returns (bool);\n', '}\n', '\n', 'contract TokenTransferTest {\n', '\n', '    uint public GOOD_ERC20 = 1;\n', '    uint public BAD_ERC20 = 2;\n', '\n', '    function ()\n', '        payable\n', '        external\n', '    {\n', '        revert();\n', '    }\n', '\n', '    function testBadWithGoodInterface(address token,\n', '                                      uint ercType,\n', '                                      address to,\n', '                                      uint value)\n', '        external\n', '    {\n', '        if (ercType == 1) {\n', '            GoodERC20 goodErc20 = GoodERC20(token);\n', '            require(goodErc20.transfer(to, value));\n', '        } else {\n', '            BadERC20 badErc20 = BadERC20(token);\n', '            badErc20.transfer(to, value);\n', '        }\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'interface BadERC20 {\n', '    function transfer(address _to, uint256 _value) external;\n', '}\n', '\n', 'interface GoodERC20 {\n', '    function transfer(address _to, uint256 _value) external returns (bool);\n', '}\n', '\n', 'contract TokenTransferTest {\n', '\n', '    uint public GOOD_ERC20 = 1;\n', '    uint public BAD_ERC20 = 2;\n', '\n', '    function ()\n', '        payable\n', '        external\n', '    {\n', '        revert();\n', '    }\n', '\n', '    function testBadWithGoodInterface(address token,\n', '                                      uint ercType,\n', '                                      address to,\n', '                                      uint value)\n', '        external\n', '    {\n', '        if (ercType == 1) {\n', '            GoodERC20 goodErc20 = GoodERC20(token);\n', '            require(goodErc20.transfer(to, value));\n', '        } else {\n', '            BadERC20 badErc20 = BadERC20(token);\n', '            badErc20.transfer(to, value);\n', '        }\n', '    }\n', '\n', '}']
