['pragma solidity ^0.4.19;\n', '\n', 'contract MINEA {\n', '    string public name = &#39;MINEA&#39;;\n', '    string public symbol = &#39;MINEA&#39;;\n', '    uint8 public decimals = 18;\n', '    uint public totalSupply = 10000000000000000000000000;\n', '    uint public minted = totalSupply / 5;\n', '    uint public minReward = 1000000000000000000;\n', '    uint public fee = 700000000000000;\n', '    uint public reducer = 1000;\n', '    uint private randomNumber;\n', '    address public owner;\n', '    uint private ownerBalance;\n', '    uint public bountyDurationInBlocks = 36000; // 1 week\n', '    uint public finishBountyAt;\n', '    \n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => uint256) public successesOf;\n', '    mapping (address => uint256) public failsOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    \n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) revert();\n', '        _;\n', '    }\n', '    \n', '    function transferOwnership(address newOwner) external onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '    \n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function MINEA() public {\n', '        owner = msg.sender;\n', '        balanceOf[owner] = minted;\n', '        balanceOf[this] = totalSupply - balanceOf[owner];\n', '        finishBountyAt = block.number + bountyDurationInBlocks;\n', '    }\n', '    \n', '    /* Internal transfer, only can be called by this contract */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '    \n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) external {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '    \n', '    /* Transfer tokens from other address */\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    /* Set allowance for other address */\n', '    function approve(address _spender, uint256 _value) external returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '    \n', '    function withdrawEther() external onlyOwner {\n', '        owner.transfer(ownerBalance);\n', '        ownerBalance = 0;\n', '    }\n', '    \n', '    function () external payable {\n', '        if (msg.value == fee) {\n', '            randomNumber += block.timestamp + uint(msg.sender);\n', '            uint minedAtBlock = uint(block.blockhash(block.number - 1));\n', '            uint minedHashRel = uint(sha256(minedAtBlock + randomNumber + uint(msg.sender))) % 10000000;\n', '            uint balanceRel = balanceOf[msg.sender] * 1000 / minted;\n', '            uint reward;\n', '            if (block.number < finishBountyAt) {\n', '                reward = 50000000000000000000;\n', '                _transfer(this, msg.sender, reward);\n', '                minted += reward;\n', '                successesOf[msg.sender]++;\n', '                ownerBalance += fee;\n', '                reducer++;\n', '            } else if (balanceRel >= 1) {\n', '                if (balanceRel > 255) {\n', '                    balanceRel = 255;\n', '                }\n', '                balanceRel = 2 ** balanceRel;\n', '                balanceRel = 5000000 / balanceRel;\n', '                balanceRel = 5000000 - balanceRel;\n', '                if (minedHashRel < balanceRel) {\n', '                    reward = minReward + minedHashRel * 1000 / reducer * 100000000000000;\n', '                    _transfer(this, msg.sender, reward);\n', '                    minted += reward;\n', '                    successesOf[msg.sender]++;\n', '                } else {\n', '                    Transfer(this, msg.sender, 0);\n', '                    failsOf[msg.sender]++;\n', '                }\n', '                ownerBalance += fee;\n', '                reducer++;\n', '            } else {\n', '                revert();\n', '            }\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '}']