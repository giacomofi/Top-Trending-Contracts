['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract BeatTokenCrowdsale is Ownable {\n', '\n', '    enum Stages {\n', '        Deployed,\n', '        PreIco,\n', '        IcoPhase1,\n', '        IcoPhase2,\n', '        IcoPhase3,\n', '        IcoEnded,\n', '        Finalized\n', '    }\n', '    Stages public stage;\n', '\n', '    using SafeMath for uint256;\n', '\n', '    BeatToken public token;\n', '\n', '    uint256 public contractStartTime;\n', '    uint256 public preIcoEndTime;\n', '    uint256 public icoPhase1EndTime;\n', '    uint256 public icoPhase2EndTime;\n', '    uint256 public icoPhase3EndTime;\n', '    uint256 public contractEndTime;\n', '\n', '    address public ethTeamWallet;\n', '    address public beatTeamWallet;\n', '\n', '    uint256 public ethWeiRaised;\n', '    mapping(address => uint256) public balanceOf;\n', '\n', '    uint public constant PRE_ICO_PERIOD = 28 days;\n', '    uint public constant ICO_PHASE1_PERIOD = 28 days;\n', '    uint public constant ICO_PHASE2_PERIOD = 28 days;\n', '    uint public constant ICO_PHASE3_PERIOD = 28 days;\n', '\n', '    uint256 public constant PRE_ICO_BONUS_PERCENTAGE = 100;\n', '    uint256 public constant ICO_PHASE1_BONUS_PERCENTAGE = 75;\n', '    uint256 public constant ICO_PHASE2_BONUS_PERCENTAGE = 50;\n', '    uint256 public constant ICO_PHASE3_BONUS_PERCENTAGE = 25;\n', '\n', '    // 5.0 bn (2.5 bn regular + 2.5 bn bonus)\n', '    uint256 public constant PRE_ICO_AMOUNT = 5000 * (10 ** 6) * (10 ** 18);\n', '    // 7.0 bn (4.0 bn regular + 3.0 bn bonus)\n', '    uint256 public constant ICO_PHASE1_AMOUNT = 7000 * (10 ** 6) * (10 ** 18);\n', '    // 10.5 bn (7.0 bn regular + 3.5 bn bonus)\n', '    uint256 public constant ICO_PHASE2_AMOUNT = 10500 * (10 ** 6) * (10 ** 18);\n', '    // 11.875 bn (9.5 bn regular + 2.375 bn bonus)\n', '    uint256 public constant ICO_PHASE3_AMOUNT = 11875 * (10 ** 6) * (10 ** 18);\n', '\n', '    uint256 public constant PRE_ICO_LIMIT = PRE_ICO_AMOUNT;\n', '    uint256 public constant ICO_PHASE1_LIMIT = PRE_ICO_LIMIT + ICO_PHASE1_AMOUNT;\n', '    uint256 public constant ICO_PHASE2_LIMIT = ICO_PHASE1_LIMIT + ICO_PHASE2_AMOUNT;\n', '    uint256 public constant ICO_PHASE3_LIMIT = ICO_PHASE2_LIMIT + ICO_PHASE3_AMOUNT;\n', '\n', '    // 230 bn\n', '    uint256 public constant HARD_CAP = 230 * (10 ** 9) * (10 ** 18);\n', '\n', '    uint256 public ethPriceInEuroCent;\n', '\n', '    event BeatTokenPurchased(address indexed purchaser, address indexed beneficiary, uint256 ethWeiAmount, uint256 beatWeiAmount);\n', '    event BeatTokenEthPriceChanged(uint256 newPrice);\n', '    event BeatTokenPreIcoStarted();\n', '    event BeatTokenIcoPhase1Started();\n', '    event BeatTokenIcoPhase2Started();\n', '    event BeatTokenIcoPhase3Started();\n', '    event BeatTokenIcoFinalized();\n', '\n', '    function BeatTokenCrowdsale(address _ethTeamWallet, address _beatTeamWallet) public {\n', '        require(_ethTeamWallet != address(0));\n', '        require(_beatTeamWallet != address(0));\n', '\n', '        token = new BeatToken(HARD_CAP);\n', '        stage = Stages.Deployed;\n', '        ethTeamWallet = _ethTeamWallet;\n', '        beatTeamWallet = _beatTeamWallet;\n', '        ethPriceInEuroCent = 0;\n', '\n', '        contractStartTime = 0;\n', '        preIcoEndTime = 0;\n', '        icoPhase1EndTime = 0;\n', '        icoPhase2EndTime = 0;\n', '        icoPhase3EndTime = 0;\n', '        contractEndTime = 0;\n', '    }\n', '\n', '    function setEtherPriceInEuroCent(uint256 _ethPriceInEuroCent) onlyOwner public {\n', '        ethPriceInEuroCent = _ethPriceInEuroCent;\n', '        BeatTokenEthPriceChanged(_ethPriceInEuroCent);\n', '    }\n', '\n', '    function start() onlyOwner public {\n', '        require(stage == Stages.Deployed);\n', '        require(ethPriceInEuroCent > 0);\n', '\n', '        contractStartTime = now;\n', '        BeatTokenPreIcoStarted();\n', '\n', '        stage = Stages.PreIco;\n', '    }\n', '\n', '    function finalize() onlyOwner public {\n', '        require(stage != Stages.Deployed);\n', '        require(stage != Stages.Finalized);\n', '\n', '        if (preIcoEndTime == 0) {\n', '            preIcoEndTime = now;\n', '        }\n', '        if (icoPhase1EndTime == 0) {\n', '            icoPhase1EndTime = now;\n', '        }\n', '        if (icoPhase2EndTime == 0) {\n', '            icoPhase2EndTime = now;\n', '        }\n', '        if (icoPhase3EndTime == 0) {\n', '            icoPhase3EndTime = now;\n', '        }\n', '        if (contractEndTime == 0) {\n', '            contractEndTime = now;\n', '        }\n', '\n', '        uint256 unsoldTokens = HARD_CAP - token.getTotalSupply();\n', '        token.mint(beatTeamWallet, unsoldTokens);\n', '\n', '        BeatTokenIcoFinalized();\n', '\n', '        stage = Stages.Finalized;\n', '    }\n', '\n', '    function() payable public {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    function buyTokens(address beneficiary) payable public {\n', '        require(isWithinValidIcoPhase());\n', '        require(ethPriceInEuroCent > 0);\n', '        require(beneficiary != address(0));\n', '        require(msg.value != 0);\n', '\n', '        uint256 ethWeiAmount = msg.value;\n', '        // calculate BEAT wei amount to be created\n', '        uint256 beatWeiAmount = calculateBeatWeiAmount(ethWeiAmount);\n', '        require(isWithinTokenAllocLimit(beatWeiAmount));\n', '\n', '        determineCurrentStage(beatWeiAmount);\n', '\n', '        balanceOf[beneficiary] += beatWeiAmount;\n', '        ethWeiRaised += ethWeiAmount;\n', '\n', '        token.mint(beneficiary, beatWeiAmount);\n', '        BeatTokenPurchased(msg.sender, beneficiary, ethWeiAmount, beatWeiAmount);\n', '\n', '        ethTeamWallet.transfer(ethWeiAmount);\n', '    }\n', '\n', '    function isWithinValidIcoPhase() internal view returns (bool) {\n', '        return (stage == Stages.PreIco || stage == Stages.IcoPhase1 || stage == Stages.IcoPhase2 || stage == Stages.IcoPhase3);\n', '    }\n', '\n', '    function calculateBeatWeiAmount(uint256 ethWeiAmount) internal view returns (uint256) {\n', '        uint256 beatWeiAmount = ethWeiAmount.mul(ethPriceInEuroCent);\n', '        uint256 bonusPercentage = 0;\n', '\n', '        if (stage == Stages.PreIco) {\n', '            bonusPercentage = PRE_ICO_BONUS_PERCENTAGE;\n', '        } else if (stage == Stages.IcoPhase1) {\n', '            bonusPercentage = ICO_PHASE1_BONUS_PERCENTAGE;\n', '        } else if (stage == Stages.IcoPhase2) {\n', '            bonusPercentage = ICO_PHASE2_BONUS_PERCENTAGE;\n', '        } else if (stage == Stages.IcoPhase3) {\n', '            bonusPercentage = ICO_PHASE3_BONUS_PERCENTAGE;\n', '        }\n', '\n', "        // implement poor man's rounding by adding 50 because all integer divisions rounds DOWN to nearest integer\n", '        return beatWeiAmount.mul(100 + bonusPercentage).add(50).div(100);\n', '    }\n', '\n', '    function isWithinTokenAllocLimit(uint256 beatWeiAmount) internal view returns (bool) {\n', '        return token.getTotalSupply().add(beatWeiAmount) <= ICO_PHASE3_LIMIT;\n', '    }\n', '\n', '    function determineCurrentStage(uint256 beatWeiAmount) internal {\n', '        uint256 newTokenTotalSupply = token.getTotalSupply().add(beatWeiAmount);\n', '\n', '        if (stage == Stages.PreIco && (newTokenTotalSupply > PRE_ICO_LIMIT || now >= contractStartTime + PRE_ICO_PERIOD)) {\n', '            preIcoEndTime = now;\n', '            stage = Stages.IcoPhase1;\n', '            BeatTokenIcoPhase1Started();\n', '        } else if (stage == Stages.IcoPhase1 && (newTokenTotalSupply > ICO_PHASE1_LIMIT || now >= preIcoEndTime + ICO_PHASE1_PERIOD)) {\n', '            icoPhase1EndTime = now;\n', '            stage = Stages.IcoPhase2;\n', '            BeatTokenIcoPhase2Started();\n', '        } else if (stage == Stages.IcoPhase2 && (newTokenTotalSupply > ICO_PHASE2_LIMIT || now >= icoPhase1EndTime + ICO_PHASE2_PERIOD)) {\n', '            icoPhase2EndTime = now;\n', '            stage = Stages.IcoPhase3;\n', '            BeatTokenIcoPhase3Started();\n', '        } else if (stage == Stages.IcoPhase3 && (newTokenTotalSupply == ICO_PHASE3_LIMIT || now >= icoPhase2EndTime + ICO_PHASE3_PERIOD)) {\n', '            icoPhase3EndTime = now;\n', '            stage = Stages.IcoEnded;\n', '        }\n', '    }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract CappedToken is MintableToken {\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedToken(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(totalSupply.add(_amount) <= cap);\n', '\n', '    return super.mint(_to, _amount);\n', '  }\n', '\n', '}\n', '\n', 'contract BeatToken is CappedToken {\n', '\n', '    string public constant name = "BEAT Token";\n', '    string public constant symbol = "BEAT";\n', '    uint8 public constant decimals = 18;\n', '\n', '    function BeatToken(uint256 _cap) CappedToken(_cap) public {\n', '    }\n', '\n', '    function getTotalSupply() public view returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '\n', '}']