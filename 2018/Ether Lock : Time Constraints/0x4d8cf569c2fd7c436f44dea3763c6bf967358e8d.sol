['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private reentrancy_lock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!reentrancy_lock);\n', '    reentrancy_lock = true;\n', '    _;\n', '    reentrancy_lock = false;\n', '  }\n', '\n', '}\n', '\n', 'contract Multiowned {\n', '\n', '    // TYPES\n', '\n', '    // struct for the status of a pending operation.\n', '    struct PendingState {\n', '        uint yetNeeded;\n', '        uint ownersDone;\n', '        uint index;\n', '    }\n', '\n', '    // EVENTS\n', '\n', '    // this contract only has five types of events: it can accept a confirmation, in which case\n', '    // we record owner and operation (hash) alongside it.\n', '    event Confirmation(address owner, bytes32 operation);\n', '    event Revoke(address owner, bytes32 operation);\n', '    // some others are in the case of an owner changing.\n', '    event OwnerChanged(address oldOwner, address newOwner);\n', '    event OwnerAdded(address newOwner);\n', '    event OwnerRemoved(address oldOwner);\n', '    // the last one is emitted if the required signatures change\n', '    event RequirementChanged(uint newRequirement);\n', '\n', '    // MODIFIERS\n', '\n', '    // simple single-sig function modifier.\n', '    modifier onlyowner {\n', '        if (isOwner(msg.sender))\n', '            _;\n', '    }\n', '\n', '    // multi-sig function modifier: the operation must have an intrinsic hash in order\n', '    // that later attempts can be realised as the same underlying operation and\n', '    // thus count as confirmations.\n', '    modifier onlymanyowners(bytes32 _operation) {\n', '        if (confirmAndCheck(_operation))\n', '            _;\n', '    }\n', '\n', '    // METHODS\n', '\n', '    // constructor is given number of sigs required to do protected "onlymanyowners" transactions\n', '    // as well as the selection of addresses capable of confirming them.\n', '    function Multiowned(address[] _owners, uint _required) public {\n', '        m_numOwners = _owners.length;\n', '        m_chiefOwnerIndexBit = 2**1;\n', '        for (uint i = 0; i < m_numOwners; i++) {\n', '            m_owners[1 + i] = _owners[i];\n', '            m_ownerIndex[uint(_owners[i])] = 1 + i;\n', '        }\n', '        m_required = _required;\n', '    }\n', '    \n', '    // Revokes a prior confirmation of the given operation\n', '    function revoke(bytes32 _operation) external {\n', '        uint ownerIndex = m_ownerIndex[uint(msg.sender)];\n', '        // make sure they&#39;re an owner\n', '        if (ownerIndex == 0) {\n', '            return;\n', '        }\n', '        uint ownerIndexBit = 2**ownerIndex;\n', '        var pending = m_pending[_operation];\n', '        if (pending.ownersDone & ownerIndexBit > 0) {\n', '            pending.yetNeeded++;\n', '            pending.ownersDone -= ownerIndexBit;\n', '            Revoke(msg.sender, _operation);\n', '        }\n', '    }\n', '    \n', '    // Replaces an owner `_from` with another `_to`.\n', '    function changeOwner(address _from, address _to) onlymanyowners(sha3(msg.data)) external {\n', '        uint ownerIndex = m_ownerIndex[uint(_from)];\n', '        if (isOwner(_to) || ownerIndex == 0) {\n', '            return;\n', '        }\n', '\n', '        clearPending();\n', '        m_owners[ownerIndex] = _to;\n', '        m_ownerIndex[uint(_from)] = 0;\n', '        m_ownerIndex[uint(_to)] = ownerIndex;\n', '        OwnerChanged(_from, _to);\n', '    }\n', '    \n', '    function addOwner(address _owner) onlymanyowners(sha3(msg.data)) external {\n', '        if (isOwner(_owner)) {\n', '            return;\n', '        }\n', '\n', '        if (m_numOwners >= c_maxOwners) {\n', '            clearPending();\n', '            reorganizeOwners();\n', '        }\n', '        require(m_numOwners < c_maxOwners);\n', '        m_numOwners++;\n', '        m_owners[m_numOwners] = _owner;\n', '        m_ownerIndex[uint(_owner)] = m_numOwners;\n', '        OwnerAdded(_owner);\n', '    }\n', '    \n', '    function removeOwner(address _owner) onlymanyowners(sha3(msg.data)) external {\n', '        uint ownerIndex = m_ownerIndex[uint(_owner)];\n', '        if (ownerIndex == 0 || m_required > m_numOwners - 1) {\n', '            return;\n', '        }\n', '\n', '        m_owners[ownerIndex] = 0;\n', '        m_ownerIndex[uint(_owner)] = 0;\n', '        clearPending();\n', '        reorganizeOwners(); //make sure m_numOwner is equal to the number of owners and always points to the optimal free slot\n', '        OwnerRemoved(_owner);\n', '    }\n', '    \n', '    function changeRequirement(uint _newRequired) onlymanyowners(sha3(msg.data)) external {\n', '        if (_newRequired > m_numOwners) {\n', '            return;\n', '        }\n', '        m_required = _newRequired;\n', '        clearPending();\n', '        RequirementChanged(_newRequired);\n', '    }\n', '    \n', '    function isOwner(address _addr) internal view returns (bool) {\n', '        return m_ownerIndex[uint(_addr)] > 0;\n', '    }\n', '    \n', '    function hasConfirmed(bytes32 _operation, address _owner) public view returns (bool) {\n', '        var pending = m_pending[_operation];\n', '        uint ownerIndex = m_ownerIndex[uint(_owner)];\n', '\n', '        // make sure they&#39;re an owner\n', '        if (ownerIndex == 0) {\n', '            return false;\n', '        }\n', '\n', '        // determine the bit to set for this owner.\n', '        uint ownerIndexBit = 2**ownerIndex;\n', '        if (pending.ownersDone & ownerIndexBit == 0) {\n', '            return false;\n', '        } else {\n', '            return true;\n', '        }\n', '    }\n', '    \n', '    // INTERNAL METHODS\n', '\n', '    function confirmAndCheck(bytes32 _operation) internal returns (bool) {\n', '        // determine what index the present sender is:\n', '        uint ownerIndex = m_ownerIndex[uint(msg.sender)];\n', '        // make sure they&#39;re an owner\n', '        require(ownerIndex != 0);\n', '\n', '        var pending = m_pending[_operation];\n', '        // if we&#39;re not yet working on this operation, switch over and reset the confirmation status.\n', '        if (pending.yetNeeded == 0) {\n', '            // reset count of confirmations needed.\n', '            pending.yetNeeded = c_maxOwners + m_required;\n', '            // reset which owners have confirmed (none) - set our bitmap to 0.\n', '            pending.ownersDone = 0;\n', '            pending.index = m_pendingIndex.length++;\n', '            m_pendingIndex[pending.index] = _operation;\n', '        }\n', '        // determine the bit to set for this owner.\n', '        uint ownerIndexBit = 2**ownerIndex;\n', '        // make sure we (the message sender) haven&#39;t confirmed this operation previously.\n', '        if (pending.ownersDone & ownerIndexBit == 0) {\n', '            Confirmation(msg.sender, _operation);\n', '            // ok - check if count is enough to go ahead and chief owner confirmed operation.\n', '            if ((pending.yetNeeded <= c_maxOwners + 1) && ((pending.ownersDone & m_chiefOwnerIndexBit != 0) || (ownerIndexBit == m_chiefOwnerIndexBit))) {\n', '                // enough confirmations: reset and run interior.\n', '                delete m_pendingIndex[m_pending[_operation].index];\n', '                delete m_pending[_operation];\n', '                return true;\n', '            } else {\n', '                // not enough: record that this owner in particular confirmed.\n', '                pending.yetNeeded--;\n', '                pending.ownersDone |= ownerIndexBit;\n', '            }\n', '        }\n', '    }\n', '\n', '    function reorganizeOwners() private returns (bool) {\n', '        uint free = 1;\n', '        while (free < m_numOwners) {\n', '            while (free < m_numOwners && m_owners[free] != 0) {\n', '                free++;\n', '            }\n', '            while (m_numOwners > 1 && m_owners[m_numOwners] == 0) {\n', '                m_numOwners--;\n', '            }\n', '            if (free < m_numOwners && m_owners[m_numOwners] != 0 && m_owners[free] == 0) {\n', '                m_owners[free] = m_owners[m_numOwners];\n', '                m_ownerIndex[uint(m_owners[free])] = free;\n', '                m_owners[m_numOwners] = 0;\n', '            }\n', '        }\n', '    }\n', '    \n', '    function clearPending() internal {\n', '        uint length = m_pendingIndex.length;\n', '        for (uint i = 0; i < length; ++i) {\n', '            if (m_pendingIndex[i] != 0) {\n', '                delete m_pending[m_pendingIndex[i]];\n', '            }\n', '        }\n', '        delete m_pendingIndex;\n', '    }\n', '        \n', '    // FIELDS\n', '\n', '    // the number of owners that must confirm the same operation before it is run.\n', '    uint public m_required;\n', '    // pointer used to find a free slot in m_owners\n', '    uint public m_numOwners;\n', '    \n', '    // list of owners\n', '    address[8] public m_owners;\n', '    uint public m_chiefOwnerIndexBit;\n', '    uint constant c_maxOwners = 7;\n', '    // index on the list of owners to allow reverse lookup\n', '    mapping(uint => uint) public m_ownerIndex;\n', '    // the ongoing operations.\n', '    mapping(bytes32 => PendingState) public m_pending;\n', '    bytes32[] public m_pendingIndex;\n', '}\n', '\n', 'contract AlphaMarketICO is Multiowned, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '    enum State { DEFINED, IN_PROGRESS_TOKEN_FREEZE, IN_PROGRESS, FAILED, SUCCEEDED }\n', '\n', '    event EtherTransfered(address indexed to, uint value);\n', '    event StateUpdated(State state);\n', '    event InvestmentProcessed(address from, uint value);\n', '\n', '    function AlphaMarketICO(address[] _owners) Multiowned(_owners, _owners.length - 1) public {}\n', '\n', '    function setToken(address _token) external onlyowner {\n', '        require(address(token) == 0x0);\n', '        require(address(_token) != 0x0);\n', '        token = AlphaMarketCoin(_token);\n', '        tokensToSold = token.totalSupply().mul(60).div(100);\n', '    }\n', '\n', '    function setExchanger(address _exchanger) external onlyowner {\n', '        require(_exchanger != 0x0 && exchanger == 0x0);\n', '        exchanger = _exchanger;\n', '    }\n', '\n', '    function sendTokensToBountyWallet(address _bountyWallet) external onlyowner {\n', '        require(!isBountySent && _bountyWallet != 0x0);\n', '\n', '        token.addEarlyAccessAddress(_bountyWallet);\n', '        uint256 tokensForBounty = token.totalSupply().mul(20).div(100);\n', '        token.transfer(_bountyWallet, tokensForBounty);\n', '        isBountySent = true;\n', '    }\n', '    \n', '\n', '    modifier processState {\n', '        updateState();\n', '        _;\n', '    }\n', '\n', '    modifier icoInProgress {\n', '        require((icoState == State.IN_PROGRESS || icoState == State.IN_PROGRESS_TOKEN_FREEZE) && currentTime() < endTime);\n', '        _;\n', '    }\n', '\n', '    function updateState() public {\n', '        uint currTime = currentTime();\n', '        \n', '        if (icoState == State.IN_PROGRESS_TOKEN_FREEZE || icoState == State.IN_PROGRESS) {\n', '            if (icoState == State.IN_PROGRESS_TOKEN_FREEZE) {\n', '                if (currTime >= tokenUnfreezeTime) {\n', '                    token.enableTransfering();\n', '                    icoState = State.IN_PROGRESS;\n', '                    emit StateUpdated(icoState);\n', '                }\n', '            }\n', '            if (currTime >= endTime || totalInvestment >= hardCap || totalSold >= tokensToSold) {\n', '                token.transfer(exchanger, token.balanceOf(this));\n', '                icoState = State.SUCCEEDED;\n', '                emit StateUpdated(icoState);\n', '            }\n', '        } else if (icoState == State.DEFINED) {\n', '            if (currTime >= startTime) {\n', '                icoState = State.IN_PROGRESS_TOKEN_FREEZE;\n', '                emit StateUpdated(icoState);\n', '            }\n', '        }\n', '    }\n', '\n', '    function rewardContributors(address[] _contributors, uint256[] _tokenAmounts) external onlymanyowners(sha3(msg.data)) {\n', '        if(isContributorsRewarded || _contributors.length != _tokenAmounts.length) {\n', '            return;\n', '        }\n', '\n', '        uint256 sum = 0;\n', '        for (uint64 i = 0; i < _contributors.length; i++) {\n', '            require(_contributors[i] != 0x0);\n', '            sum = sum.add(_tokenAmounts[i]);\n', '            token.transfer(_contributors[i], _tokenAmounts[i]);\n', '        }\n', '        require(sum == token.totalSupply().mul(20).div(100));\n', '        isContributorsRewarded = true;\n', '    }\n', '\n', '    function getTokensCountPerEther() internal view returns (uint256) {\n', '        uint currTime = currentTime();\n', '        require(currTime >= startTime);\n', '\n', '        if (currTime < startTime + 1 weeks) {return  27778;}\n', '        if (currTime < startTime + 2 weeks) {return  25000;}\n', '        if (currTime < startTime + 3 weeks) {return  22727;}\n', '        if (currTime < startTime + 4 weeks) {return  20833;}\n', '        if (currTime < startTime + 5 weeks) {return  19230;}\n', '        if (currTime < startTime + 6 weeks) {return  17857;}\n', '        if (currTime < startTime + 7 weeks) {return  16667;}\n', '        if (currTime < startTime + 8 weeks) {return  15625;}\n', '        if (currTime < startTime + 9 weeks) {return  14706;}\n', '        if (currTime < startTime + 10 weeks) {return 13889;}\n', '        if (currTime < startTime + 11 weeks) {return 13158;}\n', '        if (currTime < startTime + 12 weeks) {return 12500;}\n', '        if (currTime < endTime) {return              12500;}\n', '    }\n', '\n', '    function getBonus() internal view returns (uint) {\n', '        uint currTime = currentTime();\n', '        require(currTime >= startTime);\n', '\n', '        if (currTime < startTime + 1 weeks) {return  20;}\n', '        if (currTime < startTime + 2 weeks) {return  18;}\n', '        if (currTime < startTime + 3 weeks) {return  16;}\n', '        if (currTime < startTime + 4 weeks) {return  14;}\n', '        if (currTime < startTime + 5 weeks) {return  12;}\n', '        if (currTime < startTime + 6 weeks) {return  10;}\n', '        if (currTime < startTime + 7 weeks) {return  8;}\n', '        if (currTime < startTime + 8 weeks) {return  6;}\n', '        if (currTime < startTime + 9 weeks) {return  4;}\n', '        if (currTime < startTime + 10 weeks) {return 3;}\n', '        if (currTime < startTime + 11 weeks) {return 2;}\n', '        if (currTime < startTime + 12 weeks) {return 1;}\n', '        if (currTime < endTime) {return              0;}\n', '    }\n', '\n', '    function processInvestment(address investor, uint256 value, address referrer) internal processState icoInProgress {\n', '        require(value >= minInvestment && value <= maxInvestment);\n', '        uint256 tokensCount = uint256(value).mul(getTokensCountPerEther());\n', '\n', '        // Add bonus tokens\n', '        uint256 tokensSold = tokensCount.add(tokensCount.mul(getBonus()).div(100));\n', '        token.transfer(investor, tokensSold);\n', '\n', '        if (referrer != 0x0) {\n', '            require(referrer != investor);\n', '            uint256 tokensForReferrer = tokensCount.mul(5).div(100);\n', '            token.transfer(referrer, tokensForReferrer);\n', '            tokensSold = tokensSold.add(tokensForReferrer);\n', '        }\n', '\n', '        investments[investor] = investments[investor].add(value);\n', '        totalInvestment = totalInvestment.add(value);\n', '        totalSold = totalSold.add(tokensSold);\n', '        emit InvestmentProcessed(investor, value);\n', '    }\n', '\n', '    function buyTokensWithRef(address referrer) public payable {\n', '        processInvestment(msg.sender, msg.value, referrer);\n', '    }\n', '\n', '    function buyTokens() public payable {\n', '        processInvestment(msg.sender, msg.value, 0x0);\n', '    }\n', '    \n', '    function() external payable {\n', '        require(0 == msg.data.length);\n', '        buyTokens();\n', '    }\n', '\n', '    function transferEther(address to, uint value) external nonReentrant onlymanyowners(sha3(msg.data)) {\n', '        if(value == 0 || this.balance < value || to == 0x0){\n', '            return;\n', '        }\n', '        to.transfer(value);\n', '        EtherTransfered(to, value);\n', '    }\n', '\n', '    function failICO() external onlymanyowners(sha3(msg.data)) {\n', '        icoState = State.FAILED;\n', '        emit StateUpdated(icoState);\n', '    }\n', '\n', '    function withdrawRefund() external nonReentrant {\n', '        require(icoState == State.FAILED);\n', '\n', '        uint256 investment = investments[msg.sender];\n', '        require(investment > 0 && this.balance >= investment);\n', '\n', '        totalInvestment = totalInvestment.sub(investment);\n', '        investments[msg.sender] = 0;\n', '        msg.sender.transfer(investment);\n', '    }\n', '\n', '    function currentTime() internal view returns (uint) {\n', '        return now;\n', '    }\n', '\n', '    uint public startTime = 1523880000; // Unix epoch timestamp. Wednesday, April 16, 2018 12:00:00 PM\n', '    uint public tokenUnfreezeTime = startTime + 12 weeks;\n', '    uint public endTime = startTime + 24 weeks; \n', '    uint public hardCap = 48000 ether;\n', '    uint public minInvestment = 10 finney;\n', '    uint public maxInvestment = hardCap;\n', '    uint public tokensToSold;\n', '    State public icoState = State.DEFINED;\n', '\n', '    mapping(address => uint256) public investments;\n', '    uint256 public totalInvestment = 0;\n', '    uint256 public totalSold = 0;\n', '\n', '    bool public isContributorsRewarded = false;\n', '    bool public isBountySent = false;\n', '    AlphaMarketCoin public token;\n', '    address public exchanger;\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract AlphaMarketCoin is StandardToken {\n', '\n', '    function AlphaMarketCoin(address _controller) public {\n', '        controller = _controller;\n', '        earlyAccess[_controller] = true;\n', '        totalSupply_ = 999999999 * 10 ** uint256(decimals);\n', '        balances[_controller] = totalSupply_;\n', '    }\n', '\n', '    modifier onlyController {\n', '        require(msg.sender == controller);\n', '        _;\n', '    }\n', '\n', '    // Transfering should be enabled by ICO contract only when half of ICO is passed\n', '    event TransferEnabled();\n', '\n', '    function addEarlyAccessAddress(address _address) external onlyController {\n', '        require(_address != 0x0);\n', '        earlyAccess[_address] = true;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(isTransferEnabled || earlyAccess[msg.sender]);\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(isTransferEnabled);\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        require(isTransferEnabled);\n', '        return super.approve(_spender, _value);\n', '    }\n', '    \n', '    function enableTransfering() public onlyController {\n', '        require(!isTransferEnabled);\n', '\n', '        isTransferEnabled = true;\n', '        emit TransferEnabled();\n', '    }\n', '\n', '    // Prevent sending ether to this address\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '    bool public isTransferEnabled = false;\n', '    address public controller;\n', '    mapping(address => bool) public earlyAccess;\n', '\n', '    uint8 public constant decimals = 18;\n', '    string public constant name = &#39;AlphaMarket Coin&#39;;\n', '    string public constant symbol = &#39;AMC&#39;;\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private reentrancy_lock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!reentrancy_lock);\n', '    reentrancy_lock = true;\n', '    _;\n', '    reentrancy_lock = false;\n', '  }\n', '\n', '}\n', '\n', 'contract Multiowned {\n', '\n', '    // TYPES\n', '\n', '    // struct for the status of a pending operation.\n', '    struct PendingState {\n', '        uint yetNeeded;\n', '        uint ownersDone;\n', '        uint index;\n', '    }\n', '\n', '    // EVENTS\n', '\n', '    // this contract only has five types of events: it can accept a confirmation, in which case\n', '    // we record owner and operation (hash) alongside it.\n', '    event Confirmation(address owner, bytes32 operation);\n', '    event Revoke(address owner, bytes32 operation);\n', '    // some others are in the case of an owner changing.\n', '    event OwnerChanged(address oldOwner, address newOwner);\n', '    event OwnerAdded(address newOwner);\n', '    event OwnerRemoved(address oldOwner);\n', '    // the last one is emitted if the required signatures change\n', '    event RequirementChanged(uint newRequirement);\n', '\n', '    // MODIFIERS\n', '\n', '    // simple single-sig function modifier.\n', '    modifier onlyowner {\n', '        if (isOwner(msg.sender))\n', '            _;\n', '    }\n', '\n', '    // multi-sig function modifier: the operation must have an intrinsic hash in order\n', '    // that later attempts can be realised as the same underlying operation and\n', '    // thus count as confirmations.\n', '    modifier onlymanyowners(bytes32 _operation) {\n', '        if (confirmAndCheck(_operation))\n', '            _;\n', '    }\n', '\n', '    // METHODS\n', '\n', '    // constructor is given number of sigs required to do protected "onlymanyowners" transactions\n', '    // as well as the selection of addresses capable of confirming them.\n', '    function Multiowned(address[] _owners, uint _required) public {\n', '        m_numOwners = _owners.length;\n', '        m_chiefOwnerIndexBit = 2**1;\n', '        for (uint i = 0; i < m_numOwners; i++) {\n', '            m_owners[1 + i] = _owners[i];\n', '            m_ownerIndex[uint(_owners[i])] = 1 + i;\n', '        }\n', '        m_required = _required;\n', '    }\n', '    \n', '    // Revokes a prior confirmation of the given operation\n', '    function revoke(bytes32 _operation) external {\n', '        uint ownerIndex = m_ownerIndex[uint(msg.sender)];\n', "        // make sure they're an owner\n", '        if (ownerIndex == 0) {\n', '            return;\n', '        }\n', '        uint ownerIndexBit = 2**ownerIndex;\n', '        var pending = m_pending[_operation];\n', '        if (pending.ownersDone & ownerIndexBit > 0) {\n', '            pending.yetNeeded++;\n', '            pending.ownersDone -= ownerIndexBit;\n', '            Revoke(msg.sender, _operation);\n', '        }\n', '    }\n', '    \n', '    // Replaces an owner `_from` with another `_to`.\n', '    function changeOwner(address _from, address _to) onlymanyowners(sha3(msg.data)) external {\n', '        uint ownerIndex = m_ownerIndex[uint(_from)];\n', '        if (isOwner(_to) || ownerIndex == 0) {\n', '            return;\n', '        }\n', '\n', '        clearPending();\n', '        m_owners[ownerIndex] = _to;\n', '        m_ownerIndex[uint(_from)] = 0;\n', '        m_ownerIndex[uint(_to)] = ownerIndex;\n', '        OwnerChanged(_from, _to);\n', '    }\n', '    \n', '    function addOwner(address _owner) onlymanyowners(sha3(msg.data)) external {\n', '        if (isOwner(_owner)) {\n', '            return;\n', '        }\n', '\n', '        if (m_numOwners >= c_maxOwners) {\n', '            clearPending();\n', '            reorganizeOwners();\n', '        }\n', '        require(m_numOwners < c_maxOwners);\n', '        m_numOwners++;\n', '        m_owners[m_numOwners] = _owner;\n', '        m_ownerIndex[uint(_owner)] = m_numOwners;\n', '        OwnerAdded(_owner);\n', '    }\n', '    \n', '    function removeOwner(address _owner) onlymanyowners(sha3(msg.data)) external {\n', '        uint ownerIndex = m_ownerIndex[uint(_owner)];\n', '        if (ownerIndex == 0 || m_required > m_numOwners - 1) {\n', '            return;\n', '        }\n', '\n', '        m_owners[ownerIndex] = 0;\n', '        m_ownerIndex[uint(_owner)] = 0;\n', '        clearPending();\n', '        reorganizeOwners(); //make sure m_numOwner is equal to the number of owners and always points to the optimal free slot\n', '        OwnerRemoved(_owner);\n', '    }\n', '    \n', '    function changeRequirement(uint _newRequired) onlymanyowners(sha3(msg.data)) external {\n', '        if (_newRequired > m_numOwners) {\n', '            return;\n', '        }\n', '        m_required = _newRequired;\n', '        clearPending();\n', '        RequirementChanged(_newRequired);\n', '    }\n', '    \n', '    function isOwner(address _addr) internal view returns (bool) {\n', '        return m_ownerIndex[uint(_addr)] > 0;\n', '    }\n', '    \n', '    function hasConfirmed(bytes32 _operation, address _owner) public view returns (bool) {\n', '        var pending = m_pending[_operation];\n', '        uint ownerIndex = m_ownerIndex[uint(_owner)];\n', '\n', "        // make sure they're an owner\n", '        if (ownerIndex == 0) {\n', '            return false;\n', '        }\n', '\n', '        // determine the bit to set for this owner.\n', '        uint ownerIndexBit = 2**ownerIndex;\n', '        if (pending.ownersDone & ownerIndexBit == 0) {\n', '            return false;\n', '        } else {\n', '            return true;\n', '        }\n', '    }\n', '    \n', '    // INTERNAL METHODS\n', '\n', '    function confirmAndCheck(bytes32 _operation) internal returns (bool) {\n', '        // determine what index the present sender is:\n', '        uint ownerIndex = m_ownerIndex[uint(msg.sender)];\n', "        // make sure they're an owner\n", '        require(ownerIndex != 0);\n', '\n', '        var pending = m_pending[_operation];\n', "        // if we're not yet working on this operation, switch over and reset the confirmation status.\n", '        if (pending.yetNeeded == 0) {\n', '            // reset count of confirmations needed.\n', '            pending.yetNeeded = c_maxOwners + m_required;\n', '            // reset which owners have confirmed (none) - set our bitmap to 0.\n', '            pending.ownersDone = 0;\n', '            pending.index = m_pendingIndex.length++;\n', '            m_pendingIndex[pending.index] = _operation;\n', '        }\n', '        // determine the bit to set for this owner.\n', '        uint ownerIndexBit = 2**ownerIndex;\n', "        // make sure we (the message sender) haven't confirmed this operation previously.\n", '        if (pending.ownersDone & ownerIndexBit == 0) {\n', '            Confirmation(msg.sender, _operation);\n', '            // ok - check if count is enough to go ahead and chief owner confirmed operation.\n', '            if ((pending.yetNeeded <= c_maxOwners + 1) && ((pending.ownersDone & m_chiefOwnerIndexBit != 0) || (ownerIndexBit == m_chiefOwnerIndexBit))) {\n', '                // enough confirmations: reset and run interior.\n', '                delete m_pendingIndex[m_pending[_operation].index];\n', '                delete m_pending[_operation];\n', '                return true;\n', '            } else {\n', '                // not enough: record that this owner in particular confirmed.\n', '                pending.yetNeeded--;\n', '                pending.ownersDone |= ownerIndexBit;\n', '            }\n', '        }\n', '    }\n', '\n', '    function reorganizeOwners() private returns (bool) {\n', '        uint free = 1;\n', '        while (free < m_numOwners) {\n', '            while (free < m_numOwners && m_owners[free] != 0) {\n', '                free++;\n', '            }\n', '            while (m_numOwners > 1 && m_owners[m_numOwners] == 0) {\n', '                m_numOwners--;\n', '            }\n', '            if (free < m_numOwners && m_owners[m_numOwners] != 0 && m_owners[free] == 0) {\n', '                m_owners[free] = m_owners[m_numOwners];\n', '                m_ownerIndex[uint(m_owners[free])] = free;\n', '                m_owners[m_numOwners] = 0;\n', '            }\n', '        }\n', '    }\n', '    \n', '    function clearPending() internal {\n', '        uint length = m_pendingIndex.length;\n', '        for (uint i = 0; i < length; ++i) {\n', '            if (m_pendingIndex[i] != 0) {\n', '                delete m_pending[m_pendingIndex[i]];\n', '            }\n', '        }\n', '        delete m_pendingIndex;\n', '    }\n', '        \n', '    // FIELDS\n', '\n', '    // the number of owners that must confirm the same operation before it is run.\n', '    uint public m_required;\n', '    // pointer used to find a free slot in m_owners\n', '    uint public m_numOwners;\n', '    \n', '    // list of owners\n', '    address[8] public m_owners;\n', '    uint public m_chiefOwnerIndexBit;\n', '    uint constant c_maxOwners = 7;\n', '    // index on the list of owners to allow reverse lookup\n', '    mapping(uint => uint) public m_ownerIndex;\n', '    // the ongoing operations.\n', '    mapping(bytes32 => PendingState) public m_pending;\n', '    bytes32[] public m_pendingIndex;\n', '}\n', '\n', 'contract AlphaMarketICO is Multiowned, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '    enum State { DEFINED, IN_PROGRESS_TOKEN_FREEZE, IN_PROGRESS, FAILED, SUCCEEDED }\n', '\n', '    event EtherTransfered(address indexed to, uint value);\n', '    event StateUpdated(State state);\n', '    event InvestmentProcessed(address from, uint value);\n', '\n', '    function AlphaMarketICO(address[] _owners) Multiowned(_owners, _owners.length - 1) public {}\n', '\n', '    function setToken(address _token) external onlyowner {\n', '        require(address(token) == 0x0);\n', '        require(address(_token) != 0x0);\n', '        token = AlphaMarketCoin(_token);\n', '        tokensToSold = token.totalSupply().mul(60).div(100);\n', '    }\n', '\n', '    function setExchanger(address _exchanger) external onlyowner {\n', '        require(_exchanger != 0x0 && exchanger == 0x0);\n', '        exchanger = _exchanger;\n', '    }\n', '\n', '    function sendTokensToBountyWallet(address _bountyWallet) external onlyowner {\n', '        require(!isBountySent && _bountyWallet != 0x0);\n', '\n', '        token.addEarlyAccessAddress(_bountyWallet);\n', '        uint256 tokensForBounty = token.totalSupply().mul(20).div(100);\n', '        token.transfer(_bountyWallet, tokensForBounty);\n', '        isBountySent = true;\n', '    }\n', '    \n', '\n', '    modifier processState {\n', '        updateState();\n', '        _;\n', '    }\n', '\n', '    modifier icoInProgress {\n', '        require((icoState == State.IN_PROGRESS || icoState == State.IN_PROGRESS_TOKEN_FREEZE) && currentTime() < endTime);\n', '        _;\n', '    }\n', '\n', '    function updateState() public {\n', '        uint currTime = currentTime();\n', '        \n', '        if (icoState == State.IN_PROGRESS_TOKEN_FREEZE || icoState == State.IN_PROGRESS) {\n', '            if (icoState == State.IN_PROGRESS_TOKEN_FREEZE) {\n', '                if (currTime >= tokenUnfreezeTime) {\n', '                    token.enableTransfering();\n', '                    icoState = State.IN_PROGRESS;\n', '                    emit StateUpdated(icoState);\n', '                }\n', '            }\n', '            if (currTime >= endTime || totalInvestment >= hardCap || totalSold >= tokensToSold) {\n', '                token.transfer(exchanger, token.balanceOf(this));\n', '                icoState = State.SUCCEEDED;\n', '                emit StateUpdated(icoState);\n', '            }\n', '        } else if (icoState == State.DEFINED) {\n', '            if (currTime >= startTime) {\n', '                icoState = State.IN_PROGRESS_TOKEN_FREEZE;\n', '                emit StateUpdated(icoState);\n', '            }\n', '        }\n', '    }\n', '\n', '    function rewardContributors(address[] _contributors, uint256[] _tokenAmounts) external onlymanyowners(sha3(msg.data)) {\n', '        if(isContributorsRewarded || _contributors.length != _tokenAmounts.length) {\n', '            return;\n', '        }\n', '\n', '        uint256 sum = 0;\n', '        for (uint64 i = 0; i < _contributors.length; i++) {\n', '            require(_contributors[i] != 0x0);\n', '            sum = sum.add(_tokenAmounts[i]);\n', '            token.transfer(_contributors[i], _tokenAmounts[i]);\n', '        }\n', '        require(sum == token.totalSupply().mul(20).div(100));\n', '        isContributorsRewarded = true;\n', '    }\n', '\n', '    function getTokensCountPerEther() internal view returns (uint256) {\n', '        uint currTime = currentTime();\n', '        require(currTime >= startTime);\n', '\n', '        if (currTime < startTime + 1 weeks) {return  27778;}\n', '        if (currTime < startTime + 2 weeks) {return  25000;}\n', '        if (currTime < startTime + 3 weeks) {return  22727;}\n', '        if (currTime < startTime + 4 weeks) {return  20833;}\n', '        if (currTime < startTime + 5 weeks) {return  19230;}\n', '        if (currTime < startTime + 6 weeks) {return  17857;}\n', '        if (currTime < startTime + 7 weeks) {return  16667;}\n', '        if (currTime < startTime + 8 weeks) {return  15625;}\n', '        if (currTime < startTime + 9 weeks) {return  14706;}\n', '        if (currTime < startTime + 10 weeks) {return 13889;}\n', '        if (currTime < startTime + 11 weeks) {return 13158;}\n', '        if (currTime < startTime + 12 weeks) {return 12500;}\n', '        if (currTime < endTime) {return              12500;}\n', '    }\n', '\n', '    function getBonus() internal view returns (uint) {\n', '        uint currTime = currentTime();\n', '        require(currTime >= startTime);\n', '\n', '        if (currTime < startTime + 1 weeks) {return  20;}\n', '        if (currTime < startTime + 2 weeks) {return  18;}\n', '        if (currTime < startTime + 3 weeks) {return  16;}\n', '        if (currTime < startTime + 4 weeks) {return  14;}\n', '        if (currTime < startTime + 5 weeks) {return  12;}\n', '        if (currTime < startTime + 6 weeks) {return  10;}\n', '        if (currTime < startTime + 7 weeks) {return  8;}\n', '        if (currTime < startTime + 8 weeks) {return  6;}\n', '        if (currTime < startTime + 9 weeks) {return  4;}\n', '        if (currTime < startTime + 10 weeks) {return 3;}\n', '        if (currTime < startTime + 11 weeks) {return 2;}\n', '        if (currTime < startTime + 12 weeks) {return 1;}\n', '        if (currTime < endTime) {return              0;}\n', '    }\n', '\n', '    function processInvestment(address investor, uint256 value, address referrer) internal processState icoInProgress {\n', '        require(value >= minInvestment && value <= maxInvestment);\n', '        uint256 tokensCount = uint256(value).mul(getTokensCountPerEther());\n', '\n', '        // Add bonus tokens\n', '        uint256 tokensSold = tokensCount.add(tokensCount.mul(getBonus()).div(100));\n', '        token.transfer(investor, tokensSold);\n', '\n', '        if (referrer != 0x0) {\n', '            require(referrer != investor);\n', '            uint256 tokensForReferrer = tokensCount.mul(5).div(100);\n', '            token.transfer(referrer, tokensForReferrer);\n', '            tokensSold = tokensSold.add(tokensForReferrer);\n', '        }\n', '\n', '        investments[investor] = investments[investor].add(value);\n', '        totalInvestment = totalInvestment.add(value);\n', '        totalSold = totalSold.add(tokensSold);\n', '        emit InvestmentProcessed(investor, value);\n', '    }\n', '\n', '    function buyTokensWithRef(address referrer) public payable {\n', '        processInvestment(msg.sender, msg.value, referrer);\n', '    }\n', '\n', '    function buyTokens() public payable {\n', '        processInvestment(msg.sender, msg.value, 0x0);\n', '    }\n', '    \n', '    function() external payable {\n', '        require(0 == msg.data.length);\n', '        buyTokens();\n', '    }\n', '\n', '    function transferEther(address to, uint value) external nonReentrant onlymanyowners(sha3(msg.data)) {\n', '        if(value == 0 || this.balance < value || to == 0x0){\n', '            return;\n', '        }\n', '        to.transfer(value);\n', '        EtherTransfered(to, value);\n', '    }\n', '\n', '    function failICO() external onlymanyowners(sha3(msg.data)) {\n', '        icoState = State.FAILED;\n', '        emit StateUpdated(icoState);\n', '    }\n', '\n', '    function withdrawRefund() external nonReentrant {\n', '        require(icoState == State.FAILED);\n', '\n', '        uint256 investment = investments[msg.sender];\n', '        require(investment > 0 && this.balance >= investment);\n', '\n', '        totalInvestment = totalInvestment.sub(investment);\n', '        investments[msg.sender] = 0;\n', '        msg.sender.transfer(investment);\n', '    }\n', '\n', '    function currentTime() internal view returns (uint) {\n', '        return now;\n', '    }\n', '\n', '    uint public startTime = 1523880000; // Unix epoch timestamp. Wednesday, April 16, 2018 12:00:00 PM\n', '    uint public tokenUnfreezeTime = startTime + 12 weeks;\n', '    uint public endTime = startTime + 24 weeks; \n', '    uint public hardCap = 48000 ether;\n', '    uint public minInvestment = 10 finney;\n', '    uint public maxInvestment = hardCap;\n', '    uint public tokensToSold;\n', '    State public icoState = State.DEFINED;\n', '\n', '    mapping(address => uint256) public investments;\n', '    uint256 public totalInvestment = 0;\n', '    uint256 public totalSold = 0;\n', '\n', '    bool public isContributorsRewarded = false;\n', '    bool public isBountySent = false;\n', '    AlphaMarketCoin public token;\n', '    address public exchanger;\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract AlphaMarketCoin is StandardToken {\n', '\n', '    function AlphaMarketCoin(address _controller) public {\n', '        controller = _controller;\n', '        earlyAccess[_controller] = true;\n', '        totalSupply_ = 999999999 * 10 ** uint256(decimals);\n', '        balances[_controller] = totalSupply_;\n', '    }\n', '\n', '    modifier onlyController {\n', '        require(msg.sender == controller);\n', '        _;\n', '    }\n', '\n', '    // Transfering should be enabled by ICO contract only when half of ICO is passed\n', '    event TransferEnabled();\n', '\n', '    function addEarlyAccessAddress(address _address) external onlyController {\n', '        require(_address != 0x0);\n', '        earlyAccess[_address] = true;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(isTransferEnabled || earlyAccess[msg.sender]);\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(isTransferEnabled);\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        require(isTransferEnabled);\n', '        return super.approve(_spender, _value);\n', '    }\n', '    \n', '    function enableTransfering() public onlyController {\n', '        require(!isTransferEnabled);\n', '\n', '        isTransferEnabled = true;\n', '        emit TransferEnabled();\n', '    }\n', '\n', '    // Prevent sending ether to this address\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '    bool public isTransferEnabled = false;\n', '    address public controller;\n', '    mapping(address => bool) public earlyAccess;\n', '\n', '    uint8 public constant decimals = 18;\n', "    string public constant name = 'AlphaMarket Coin';\n", "    string public constant symbol = 'AMC';\n", '}']
