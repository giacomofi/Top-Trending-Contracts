['pragma solidity ^0.4.18;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '  mapping(address => uint256) balances;\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', 'contract StandardToken is ERC20, BasicToken {\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract BurnableToken is StandardToken {\n', '  event Burn(address indexed burner, uint256 value);\n', '  function burn(uint256 _value) public {\n', '    require(_value > 0);\n', '    require(_value <= balances[msg.sender]);\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    Burn(burner, _value);\n', '  }\n', '}\n', 'contract KimJCoin is BurnableToken {\n', '  string public constant name = "KimJ Coin";\n', '  string public constant symbol = "KJC";\n', '  uint32 public constant decimals = 18;\n', '  uint256 public constant INITIAL_SUPPLY = 20000000 *(10 ** 18);  \n', '  address public giveAddress = 0xacc31A27A5Ce81cB7b6269003226024963016F37;\n', '  function KimJCoin() public {\n', '    uint256 _keep = 90;\n', '    uint256 _giveTokens = 10;\n', '\n', '    totalSupply = INITIAL_SUPPLY;\n', '    balances[msg.sender] = INITIAL_SUPPLY.mul(_keep).div(100);\n', '    balances[giveAddress] = INITIAL_SUPPLY.mul(_giveTokens).div(100);\n', '  }\n', '  \n', '  function AddressDefault() public view returns (address){\n', '    return giveAddress;\n', '  }\n', '  \n', '}\n', '\n', 'contract ICO is Ownable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  KimJCoin public token;\n', '\n', '  address multisig;\n', '  address restricted;\n', '\n', '  uint256 rate;\n', '  uint256 minAmount;\n', '\n', '  uint256 preIcoStartDate;\n', '  uint256 preIcoEndDate;\n', '  \n', '  uint256 tier1StartDate;\n', '  uint256 tier1EndDate;\n', '  uint256 tier2StartDate;\n', '  uint256 tier2EndDate;\n', '\n', '  uint256 percentsTeamTokens;\n', '  uint256 percentsBountySecondTokens;\n', '  uint256 percentsBountyFirstTokens;\n', '  uint256 percentsNuclearTokens;\n', '  uint256 percentsBounty;\n', '  uint256 percentsPreSaleTokens;\n', '  uint256 percentsIco1;\n', '  uint256 percentsIco2;\n', '  uint256 totaldivineTokensIssued;\n', '  uint256 totalEthereumRaised;\n', '  modifier saleIsOn() {\n', '    uint256 curState = getStatus();\n', '    require(curState != 0);\n', '    _;\n', '  }\n', '\n', '  modifier isUnderHardCap() {\n', '    uint256 _availableTokens = token.balanceOf(this);\n', '    uint256 _tokens = calculateTokens(msg.value);\n', '    uint256 _minTokens = holdTokensOnStage();\n', '    require(_availableTokens.sub(_tokens) >= _minTokens);\n', '    _;\n', '  }\n', '\n', '  modifier checkMinAmount() {\n', '    require(msg.value >= minAmount);\n', '    _;\n', '  }\n', '  function ICO() public {\n', '    \n', '   token   =  new KimJCoin();\n', '    multisig = msg.sender;\n', '    restricted = msg.sender;\n', '    minAmount = 0.01 * 1 ether;\n', '    rate = 1000;\n', '\n', '  preIcoStartDate = 1519257600  ;\n', '    preIcoEndDate = 1521072000;  \n', '  \n', '  tier1StartDate = 1521072000;\n', '  tier1EndDate = 1522540800;\n', '  \n', '  tier2StartDate = 1522540800;\n', '  tier2EndDate = 1525132800;\n', '  \n', '    percentsTeamTokens = 15;\n', '    percentsBountySecondTokens = 5;\n', '  percentsBountyFirstTokens = 5;\n', '  percentsNuclearTokens = 5;\n', '  percentsBounty = 10;\n', '  \n', '    percentsPreSaleTokens = 30;\n', '    percentsIco1 = 25;\n', '  percentsIco2 = 15;\n', '  totaldivineTokensIssued = 0;\n', '  totalEthereumRaised = 0;\n', '  }\n', '\n', '  function calculateTokens(uint256 value) internal constant returns (uint256) {\n', '    uint256 tokensOrig = rate.mul(value).div(1 ether).mul(10 ** 18);\n', '    uint256 tokens = rate.mul(value).div(1 ether).mul(10 ** 18);\n', '    uint256 curState = getStatus();\n', '    if(curState== 1){\n', '      tokens += tokens.div(2);\n', '    }\n', '  \n', '    bytes20 divineHash = ripemd160(block.coinbase, block.number, block.timestamp);\n', '    if (divineHash[0] == 0) \n', '    {\n', '      uint256 divineMultiplier;\n', '      if (curState==1){\n', '        divineMultiplier = 4;\n', '      }\n', '      else if (curState==2){\n', '        divineMultiplier = 3;\n', '      }\n', '      else if (curState==3){\n', '        divineMultiplier = 2;\n', '      }\n', '      else{\n', '        divineMultiplier = 1;\n', '      }\n', '      \n', '      uint256 divineTokensIssued = tokensOrig.mul(divineMultiplier);\n', '      tokens += divineTokensIssued;\n', '      totaldivineTokensIssued.add(divineTokensIssued);\n', '    }\n', '\n', '  \n', '  \n', '    return tokens;\n', '  }\n', '\n', '  // 0 - stop\n', '  // 1 - preSale\n', '  // 2 - sale 1\n', '  // 3 - sale 2\n', '  function getStatus() internal constant returns (uint256) {\n', '    if(now > tier2EndDate) {\n', '      return 0;\n', '    } else if(now > tier2StartDate && now < tier2EndDate) {\n', '      return 3;\n', '    } else if(now > tier1StartDate && now < tier1EndDate) {\n', '      return 2;\n', '    } else if(now > preIcoStartDate && now < preIcoEndDate){\n', '      return 1;\n', '    } else {\n', '      return 0;\n', '    }\n', '  }\n', '\n', '  function holdTokensOnStage() public view returns (uint256) {\n', '    uint256 _totalSupply = token.totalSupply();\n', '    uint256 _percents = 100;\n', '    uint256 curState = getStatus();\n', '    if(curState == 3) {\n', '      _percents = percentsTeamTokens+percentsNuclearTokens;  //100 - (30+10+25+15) = 20\n', '    } else if(curState == 2) {\n', '      _percents = _percents.sub(percentsPreSaleTokens.add(percentsBounty).add(percentsIco1));  //100 - (30+10+25) = 35\n', '    } else if(curState == 1) {\n', '      _percents = _percents.sub(percentsPreSaleTokens.add(percentsBounty)); //100 - (30+10) = 60\n', '    }\n', '\n', '    return _totalSupply.mul(_percents).div(100);\n', '  }\n', '\n', '  function onBalance() public view returns (uint256) {\n', '    return token.balanceOf(this);\n', '  }\n', '\n', '  function availableTokensOnCurrentStage() public view returns (uint256) {\n', '    uint256 _currentHolder = token.balanceOf(this);\n', '    uint256 _minTokens = holdTokensOnStage();\n', '    return _currentHolder.sub(_minTokens);\n', '  }\n', '\n', '  function getStatusInfo() public view returns (string) {\n', '    uint256 curState = getStatus();\n', '    if(now > tier2EndDate) {\n', '      return "ICO is over";\n', '    } else if(curState == 3) {\n', '      return "Now ICO #2 is active";\n', '    } else if(curState == 2) {\n', '      return "Now ICO #1 is active";\n', '    } else if(curState == 1) {\n', '      return "Now Pre-ICO is active";\n', '    } else {\n', '      return "The sale of tokens is stopped";\n', '    }\n', '  }\n', '\n', '  // burn the rest\n', '  // keep nuc and team tokens\n', '  function burnTokens() public onlyOwner {\n', '    require(now > tier2EndDate);\n', '    uint256 circulating = token.totalSupply().sub(token.balanceOf(this));\n', '\n', '    uint256 _teamTokens = circulating.mul(percentsTeamTokens).div(100 - percentsTeamTokens-percentsNuclearTokens);\n', '    uint256 _nucTokens = circulating.mul(percentsNuclearTokens).div(100 - percentsTeamTokens-percentsNuclearTokens);\n', '\n', '    // safety check. The math should work out, but this is here just in case\n', '    if (_teamTokens.add(_nucTokens)>token.balanceOf(this)){\n', '      _nucTokens = token.balanceOf(this).sub(_teamTokens);\n', '    }\n', '\n', '    token.transfer(restricted, _teamTokens);\n', '    token.transfer(token.AddressDefault(), _nucTokens);\n', '    uint256 _burnTokens = token.balanceOf(this);\n', '    if (_burnTokens>0){\n', '      token.burn(_burnTokens);\n', '    }\n', '  }\n', '\n', '  function createTokens() public saleIsOn isUnderHardCap checkMinAmount payable {\n', '    uint256 tokens = calculateTokens(msg.value);\n', '    totalEthereumRaised.add(msg.value);\n', '    multisig.transfer(msg.value);\n', '    token.transfer(msg.sender, tokens);\n', '  }\n', '\n', '\n', '  function() external payable {\n', '    createTokens();\n', '  }\n', '  \n', '  function getStats() public constant returns (uint256, uint256, uint256) {\n', '        return (totalEthereumRaised, token.totalSupply(), totaldivineTokensIssued);\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '  mapping(address => uint256) balances;\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', 'contract StandardToken is ERC20, BasicToken {\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract BurnableToken is StandardToken {\n', '  event Burn(address indexed burner, uint256 value);\n', '  function burn(uint256 _value) public {\n', '    require(_value > 0);\n', '    require(_value <= balances[msg.sender]);\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    Burn(burner, _value);\n', '  }\n', '}\n', 'contract KimJCoin is BurnableToken {\n', '  string public constant name = "KimJ Coin";\n', '  string public constant symbol = "KJC";\n', '  uint32 public constant decimals = 18;\n', '  uint256 public constant INITIAL_SUPPLY = 20000000 *(10 ** 18);  \n', '  address public giveAddress = 0xacc31A27A5Ce81cB7b6269003226024963016F37;\n', '  function KimJCoin() public {\n', '    uint256 _keep = 90;\n', '    uint256 _giveTokens = 10;\n', '\n', '    totalSupply = INITIAL_SUPPLY;\n', '    balances[msg.sender] = INITIAL_SUPPLY.mul(_keep).div(100);\n', '    balances[giveAddress] = INITIAL_SUPPLY.mul(_giveTokens).div(100);\n', '  }\n', '  \n', '  function AddressDefault() public view returns (address){\n', '    return giveAddress;\n', '  }\n', '  \n', '}\n', '\n', 'contract ICO is Ownable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  KimJCoin public token;\n', '\n', '  address multisig;\n', '  address restricted;\n', '\n', '  uint256 rate;\n', '  uint256 minAmount;\n', '\n', '  uint256 preIcoStartDate;\n', '  uint256 preIcoEndDate;\n', '  \n', '  uint256 tier1StartDate;\n', '  uint256 tier1EndDate;\n', '  uint256 tier2StartDate;\n', '  uint256 tier2EndDate;\n', '\n', '  uint256 percentsTeamTokens;\n', '  uint256 percentsBountySecondTokens;\n', '  uint256 percentsBountyFirstTokens;\n', '  uint256 percentsNuclearTokens;\n', '  uint256 percentsBounty;\n', '  uint256 percentsPreSaleTokens;\n', '  uint256 percentsIco1;\n', '  uint256 percentsIco2;\n', '  uint256 totaldivineTokensIssued;\n', '  uint256 totalEthereumRaised;\n', '  modifier saleIsOn() {\n', '    uint256 curState = getStatus();\n', '    require(curState != 0);\n', '    _;\n', '  }\n', '\n', '  modifier isUnderHardCap() {\n', '    uint256 _availableTokens = token.balanceOf(this);\n', '    uint256 _tokens = calculateTokens(msg.value);\n', '    uint256 _minTokens = holdTokensOnStage();\n', '    require(_availableTokens.sub(_tokens) >= _minTokens);\n', '    _;\n', '  }\n', '\n', '  modifier checkMinAmount() {\n', '    require(msg.value >= minAmount);\n', '    _;\n', '  }\n', '  function ICO() public {\n', '    \n', '   token   =  new KimJCoin();\n', '    multisig = msg.sender;\n', '    restricted = msg.sender;\n', '    minAmount = 0.01 * 1 ether;\n', '    rate = 1000;\n', '\n', '  preIcoStartDate = 1519257600  ;\n', '    preIcoEndDate = 1521072000;  \n', '  \n', '  tier1StartDate = 1521072000;\n', '  tier1EndDate = 1522540800;\n', '  \n', '  tier2StartDate = 1522540800;\n', '  tier2EndDate = 1525132800;\n', '  \n', '    percentsTeamTokens = 15;\n', '    percentsBountySecondTokens = 5;\n', '  percentsBountyFirstTokens = 5;\n', '  percentsNuclearTokens = 5;\n', '  percentsBounty = 10;\n', '  \n', '    percentsPreSaleTokens = 30;\n', '    percentsIco1 = 25;\n', '  percentsIco2 = 15;\n', '  totaldivineTokensIssued = 0;\n', '  totalEthereumRaised = 0;\n', '  }\n', '\n', '  function calculateTokens(uint256 value) internal constant returns (uint256) {\n', '    uint256 tokensOrig = rate.mul(value).div(1 ether).mul(10 ** 18);\n', '    uint256 tokens = rate.mul(value).div(1 ether).mul(10 ** 18);\n', '    uint256 curState = getStatus();\n', '    if(curState== 1){\n', '      tokens += tokens.div(2);\n', '    }\n', '  \n', '    bytes20 divineHash = ripemd160(block.coinbase, block.number, block.timestamp);\n', '    if (divineHash[0] == 0) \n', '    {\n', '      uint256 divineMultiplier;\n', '      if (curState==1){\n', '        divineMultiplier = 4;\n', '      }\n', '      else if (curState==2){\n', '        divineMultiplier = 3;\n', '      }\n', '      else if (curState==3){\n', '        divineMultiplier = 2;\n', '      }\n', '      else{\n', '        divineMultiplier = 1;\n', '      }\n', '      \n', '      uint256 divineTokensIssued = tokensOrig.mul(divineMultiplier);\n', '      tokens += divineTokensIssued;\n', '      totaldivineTokensIssued.add(divineTokensIssued);\n', '    }\n', '\n', '  \n', '  \n', '    return tokens;\n', '  }\n', '\n', '  // 0 - stop\n', '  // 1 - preSale\n', '  // 2 - sale 1\n', '  // 3 - sale 2\n', '  function getStatus() internal constant returns (uint256) {\n', '    if(now > tier2EndDate) {\n', '      return 0;\n', '    } else if(now > tier2StartDate && now < tier2EndDate) {\n', '      return 3;\n', '    } else if(now > tier1StartDate && now < tier1EndDate) {\n', '      return 2;\n', '    } else if(now > preIcoStartDate && now < preIcoEndDate){\n', '      return 1;\n', '    } else {\n', '      return 0;\n', '    }\n', '  }\n', '\n', '  function holdTokensOnStage() public view returns (uint256) {\n', '    uint256 _totalSupply = token.totalSupply();\n', '    uint256 _percents = 100;\n', '    uint256 curState = getStatus();\n', '    if(curState == 3) {\n', '      _percents = percentsTeamTokens+percentsNuclearTokens;  //100 - (30+10+25+15) = 20\n', '    } else if(curState == 2) {\n', '      _percents = _percents.sub(percentsPreSaleTokens.add(percentsBounty).add(percentsIco1));  //100 - (30+10+25) = 35\n', '    } else if(curState == 1) {\n', '      _percents = _percents.sub(percentsPreSaleTokens.add(percentsBounty)); //100 - (30+10) = 60\n', '    }\n', '\n', '    return _totalSupply.mul(_percents).div(100);\n', '  }\n', '\n', '  function onBalance() public view returns (uint256) {\n', '    return token.balanceOf(this);\n', '  }\n', '\n', '  function availableTokensOnCurrentStage() public view returns (uint256) {\n', '    uint256 _currentHolder = token.balanceOf(this);\n', '    uint256 _minTokens = holdTokensOnStage();\n', '    return _currentHolder.sub(_minTokens);\n', '  }\n', '\n', '  function getStatusInfo() public view returns (string) {\n', '    uint256 curState = getStatus();\n', '    if(now > tier2EndDate) {\n', '      return "ICO is over";\n', '    } else if(curState == 3) {\n', '      return "Now ICO #2 is active";\n', '    } else if(curState == 2) {\n', '      return "Now ICO #1 is active";\n', '    } else if(curState == 1) {\n', '      return "Now Pre-ICO is active";\n', '    } else {\n', '      return "The sale of tokens is stopped";\n', '    }\n', '  }\n', '\n', '  // burn the rest\n', '  // keep nuc and team tokens\n', '  function burnTokens() public onlyOwner {\n', '    require(now > tier2EndDate);\n', '    uint256 circulating = token.totalSupply().sub(token.balanceOf(this));\n', '\n', '    uint256 _teamTokens = circulating.mul(percentsTeamTokens).div(100 - percentsTeamTokens-percentsNuclearTokens);\n', '    uint256 _nucTokens = circulating.mul(percentsNuclearTokens).div(100 - percentsTeamTokens-percentsNuclearTokens);\n', '\n', '    // safety check. The math should work out, but this is here just in case\n', '    if (_teamTokens.add(_nucTokens)>token.balanceOf(this)){\n', '      _nucTokens = token.balanceOf(this).sub(_teamTokens);\n', '    }\n', '\n', '    token.transfer(restricted, _teamTokens);\n', '    token.transfer(token.AddressDefault(), _nucTokens);\n', '    uint256 _burnTokens = token.balanceOf(this);\n', '    if (_burnTokens>0){\n', '      token.burn(_burnTokens);\n', '    }\n', '  }\n', '\n', '  function createTokens() public saleIsOn isUnderHardCap checkMinAmount payable {\n', '    uint256 tokens = calculateTokens(msg.value);\n', '    totalEthereumRaised.add(msg.value);\n', '    multisig.transfer(msg.value);\n', '    token.transfer(msg.sender, tokens);\n', '  }\n', '\n', '\n', '  function() external payable {\n', '    createTokens();\n', '  }\n', '  \n', '  function getStats() public constant returns (uint256, uint256, uint256) {\n', '        return (totalEthereumRaised, token.totalSupply(), totaldivineTokensIssued);\n', '    }\n', '}']
