['pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0 || b == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "Invalid owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0), "Zero address");\n', '        emit OwnershipTransferred(owner, newOwner);  \n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address _owner) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract EyeToken is ERC20, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    struct Frozen {\n', '        bool frozen;\n', '        uint until;\n', '    }\n', '\n', '    string public name = "EyeCoin";\n', '    string public symbol = "EYE";\n', '    uint8 public decimals = 18;\n', '\n', '    mapping(address => uint256) internal balances;\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '    mapping(address => Frozen) public frozenAccounts;\n', '    uint256 internal totalSupplyTokens;\n', '    bool internal isICO;\n', '    address public wallet;\n', '\n', '    function EyeToken() public Ownable() {\n', '        wallet = msg.sender;\n', '        isICO = true;\n', '        totalSupplyTokens = 10000000000 * 10 ** uint256(decimals);\n', '        balances[wallet] = totalSupplyTokens;\n', '    }\n', '\n', '    /**\n', '     * @dev Finalize ICO\n', '     */\n', '    function finalizeICO() public onlyOwner {\n', '        isICO = false;\n', '    }\n', '\n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupplyTokens;\n', '    }\n', '\n', '    /**\n', '     * @dev Freeze account, make transfers from this account unavailable\n', '     * @param _account Given account\n', '     */\n', '    function freeze(address _account) public onlyOwner {\n', '        freeze(_account, 0);\n', '    }\n', '\n', '    /**\n', '     * @dev  Temporary freeze account, make transfers from this account unavailable for a time\n', '     * @param _account Given account\n', '     * @param _until Time until\n', '     */\n', '    function freeze(address _account, uint _until) public onlyOwner {\n', '        if (_until == 0 || (_until != 0 && _until > now)) {\n', '            frozenAccounts[_account] = Frozen(true, _until);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Unfreeze account, make transfers from this account available\n', '     * @param _account Given account\n', '     */\n', '    function unfreeze(address _account) public onlyOwner {\n', '        if (frozenAccounts[_account].frozen) {\n', '            delete frozenAccounts[_account];\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev allow transfer tokens or not\n', '     * @param _from The address to transfer from.\n', '     */\n', '    modifier allowTransfer(address _from) {\n', '        assert(!isICO);\n', '        if (frozenAccounts[_from].frozen) {\n', '            require(frozenAccounts[_from].until != 0 && frozenAccounts[_from].until < now, "Frozen account");\n', '            delete frozenAccounts[_from];\n', '        }\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer tokens for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        bool result = _transfer(msg.sender, _to, _value);\n', '        emit Transfer(msg.sender, _to, _value); \n', '        return result;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer tokens for a specified address in ICO mode\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transferICO(address _to, uint256 _value) public onlyOwner returns (bool) {\n', '        assert(isICO);\n', '        require(_to != address(0), "Zero address &#39;To&#39;");\n', '        require(_value <= balances[wallet], "Not enought balance");\n', '        balances[wallet] = balances[wallet].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(wallet, _to, _value);  \n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public allowTransfer(_from) returns (bool) {\n', '        require(_value <= allowed[_from][msg.sender], "Not enought allowance");\n', '        bool result = _transfer(_from, _to, _value);\n', '        if (result) {\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '            emit Transfer(_from, _to, _value);  \n', '        }\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);  \n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);  \n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);  \n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _from The address to transfer from.\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function _transfer(address _from, address _to, uint256 _value) internal allowTransfer(_from) returns (bool) {\n', '        require(_to != address(0), "Zero address &#39;To&#39;");\n', '        require(_from != address(0), "Zero address &#39;From&#39;");\n', '        require(_value <= balances[_from], "Not enought balance");\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Crowd-sale\n', ' *\n', ' * @dev Crowd-sale contract for tokens\n', ' */\n', 'contract CrowdSale is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    event Payment(\n', '        address wallet,\n', '        uint date,\n', '        uint256 amountEth,\n', '        uint256 amountCoin,\n', '        uint8 bonusPercent\n', '    );\n', '\n', '    uint constant internal MIN_TOKEN_AMOUNT = 5000;\n', '    uint constant internal SECONDS_IN_DAY = 86400; // 24 * 60 * 60\n', '    uint constant internal SECONDS_IN_YEAR = 31557600; // ( 365 * 24 + 6 ) * 60 * 60\n', '    int8 constant internal PHASE_NOT_STARTED = -5;\n', '    int8 constant internal PHASE_BEFORE_PRESALE = -4;\n', '    int8 constant internal PHASE_BETWEEN_PRESALE_ICO = -3;\n', '    int8 constant internal PHASE_ICO_FINISHED = -2;\n', '    int8 constant internal PHASE_FINISHED = -1;\n', '    int8 constant internal PHASE_PRESALE = 0;\n', '    int8 constant internal PHASE_ICO_1 = 1;\n', '    int8 constant internal PHASE_ICO_2 = 2;\n', '    int8 constant internal PHASE_ICO_3 = 3;\n', '    int8 constant internal PHASE_ICO_4 = 4;\n', '    int8 constant internal PHASE_ICO_5 = 5;\n', '\n', '    address internal manager;\n', '\n', '    EyeToken internal token;\n', '    address internal base_wallet;\n', '    uint256 internal dec_mul;\n', '    address internal vest_1;\n', '    address internal vest_2;\n', '    address internal vest_3;\n', '    address internal vest_4;\n', '\n', '    int8 internal phase_i; // see PHASE_XXX\n', '\n', '    uint internal presale_start = 1533020400; // 2018-07-31 07:00 UTC\n', '    uint internal presale_end = 1534316400; // 2018-08-15 07:00 UTC\n', '    uint internal ico_start = 1537254000; // 2018-09-18 07:00 UTC\n', '    uint internal ico_phase_1_days = 7;\n', '    uint internal ico_phase_2_days = 7;\n', '    uint internal ico_phase_3_days = 7;\n', '    uint internal ico_phase_4_days = 7;\n', '    uint internal ico_phase_5_days = 7;\n', '    uint internal ico_phase_1_end;\n', '    uint internal ico_phase_2_end;\n', '    uint internal ico_phase_3_end;\n', '    uint internal ico_phase_4_end;\n', '    uint internal ico_phase_5_end;\n', '    uint8[6] public bonus_percents = [50, 40, 30, 20, 10, 0];\n', '    uint internal finish_date;\n', '    uint public exchange_rate;  //  tokens in one ethereum * 1000\n', '    uint256 public lastPayerOverflow = 0;\n', '\n', '    /**\n', '     * @dev Crowd-sale constructor\n', '     */\n', '    function CrowdSale() Ownable() public {\n', '        phase_i = PHASE_NOT_STARTED;\n', '        manager = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allow only for owner or manager\n', '     */\n', '    modifier onlyOwnerOrManager(){\n', '        require(msg.sender == owner || (msg.sender == manager && manager != address(0)), "Invalid owner or manager");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns current manager\n', '     */\n', '    function getManager() public view onlyOwnerOrManager returns (address) {\n', '        return manager;\n', '    }\n', '\n', '    /**\n', '     * @dev Sets new manager\n', '     * @param _manager New manager\n', '     */\n', '    function setManager(address _manager) public onlyOwner {\n', '        manager = _manager;\n', '    }\n', '\n', '    /**\n', '     * @dev Set exchange rate\n', '     * @param _rate New exchange rate\n', '     *\n', '     * executed by CRM\n', '     */\n', '    function setRate(uint _rate) public onlyOwnerOrManager {\n', '        require(_rate > 0, "Invalid exchange rate");\n', '        exchange_rate = _rate;\n', '    }\n', '\n', '    function _addPayment(address wallet, uint256 amountEth, uint256 amountCoin, uint8 bonusPercent) internal {\n', '        emit Payment(wallet, now, amountEth, amountCoin, bonusPercent);\n', '    }\n', '\n', '    /**\n', '     * @dev Start crowd-sale\n', '     * @param _token Coin&#39;s contract\n', '     * @param _rate current exchange rate\n', '     */\n', '    function start(address _token, uint256 _rate) public onlyOwnerOrManager {\n', '        require(_rate > 0, "Invalid exchange rate");\n', '        assert(phase_i == PHASE_NOT_STARTED);\n', '\n', '        token = EyeToken(_token);\n', '        base_wallet = token.wallet();\n', '        dec_mul = 10 ** uint256(token.decimals());\n', '\n', '        // Organizasional expenses\n', '        address org_exp = 0x45709fcBeb5D133bFA336d8c70FFFF98eE815359;\n', '        // Early birds\n', '        address ear_brd = 0xE640b346E1d9A1eb3F809608a8a92f041D02F3BE;\n', '        // Community development\n', '        address com_dev = 0xdC2c6398F7a9cF2CbdCfEcB37CF732f486642316;\n', '        // Special coins\n', '        address special = 0x1dBcDb11c6C05a4EA541227fBdEeB02d6492BD07;\n', '        // Team lock\n', '        vest_1 = 0xC49d11a05aF6D5BDeBfd18E0010516D9840f3610;\n', '        vest_2 = 0x7Fd486029C8D81f4894e4ef0D460c2bD97187aeF;\n', '        vest_3 = 0xcCcC86e1086015AEE865165f6f93a82dE591Cb3C;\n', '        vest_4 = 0xd7569317e6af13D4d3832613F930cc5b7cecaE6e;\n', '\n', '        token.transferICO(org_exp, 600000000 * dec_mul);\n', '        token.transferICO(ear_brd, 1000000000 * dec_mul);\n', '        token.transferICO(com_dev, 1000000000 * dec_mul);\n', '        token.transferICO(special, 800000000 * dec_mul);\n', '        token.transferICO(vest_1, 500000000 * dec_mul);\n', '        token.transferICO(vest_2, 500000000 * dec_mul);\n', '        token.transferICO(vest_3, 500000000 * dec_mul);\n', '        token.transferICO(vest_4, 500000000 * dec_mul);\n', '\n', '        exchange_rate = _rate;\n', '\n', '        phase_i = PHASE_BEFORE_PRESALE;\n', '        _updatePhaseTimes();\n', '    }\n', '\n', '    /**\n', '     * @dev Finalize ICO\n', '     */\n', '    function _finalizeICO() internal {\n', '        assert(phase_i != PHASE_NOT_STARTED && phase_i != PHASE_FINISHED);\n', '        phase_i = PHASE_ICO_FINISHED;\n', '        uint curr_date = now;\n', '        finish_date = (curr_date < ico_phase_5_end ? ico_phase_5_end : curr_date).add(SECONDS_IN_DAY * 10);\n', '    }\n', '\n', '    /**\n', '     * @dev Finalize crowd-sale\n', '     */\n', '    function _finalize() internal {\n', '        assert(phase_i != PHASE_NOT_STARTED && phase_i != PHASE_FINISHED);\n', '\n', '        uint date = now.add(SECONDS_IN_YEAR);\n', '        token.freeze(vest_1, date);\n', '        date = date.add(SECONDS_IN_YEAR);\n', '        token.freeze(vest_2, date);\n', '        date = date.add(SECONDS_IN_YEAR);\n', '        token.freeze(vest_3, date);\n', '        date = date.add(SECONDS_IN_YEAR);\n', '        token.freeze(vest_4, date);\n', '\n', '        token.finalizeICO();\n', '        token.transferOwnership(base_wallet);\n', '\n', '        phase_i = PHASE_FINISHED;\n', '    }\n', '\n', '    /**\n', '     * @dev Finalize crowd-sale\n', '     */\n', '    function finalize() public onlyOwner {\n', '        _finalize();\n', '    }\n', '\n', '    function _calcPhase() internal view returns (int8) {\n', '        if (phase_i == PHASE_FINISHED || phase_i == PHASE_NOT_STARTED)\n', '            return phase_i;\n', '        uint curr_date = now;\n', '        if (curr_date >= ico_phase_5_end || token.balanceOf(base_wallet) == 0)\n', '            return PHASE_ICO_FINISHED;\n', '        if (curr_date < presale_start)\n', '            return PHASE_BEFORE_PRESALE;\n', '        if (curr_date <= presale_end)\n', '            return PHASE_PRESALE;\n', '        if (curr_date < ico_start)\n', '            return PHASE_BETWEEN_PRESALE_ICO;\n', '        if (curr_date < ico_phase_1_end)\n', '            return PHASE_ICO_1;\n', '        if (curr_date < ico_phase_2_end)\n', '            return PHASE_ICO_2;\n', '        if (curr_date < ico_phase_3_end)\n', '            return PHASE_ICO_3;\n', '        if (curr_date < ico_phase_4_end)\n', '            return PHASE_ICO_4;\n', '        return PHASE_ICO_5;\n', '    }\n', '\n', '    function phase() public view returns (int8) {\n', '        return _calcPhase();\n', '    }\n', '\n', '    /**\n', '     * @dev Recalculate phase\n', '     */\n', '    function _updatePhase(bool check_can_sale) internal {\n', '        uint curr_date = now;\n', '        if (phase_i == PHASE_ICO_FINISHED) {\n', '            if (curr_date >= finish_date)\n', '                _finalize();\n', '        }\n', '        else\n', '            if (phase_i != PHASE_NOT_STARTED && phase_i != PHASE_FINISHED) {\n', '                int8 new_phase = _calcPhase();\n', '                if (new_phase == PHASE_ICO_FINISHED && phase_i != PHASE_ICO_FINISHED)\n', '                    _finalizeICO();\n', '                else\n', '                    phase_i = new_phase;\n', '            }\n', '        if (check_can_sale)\n', '            assert(phase_i >= 0);\n', '    }\n', '\n', '    /**\n', '     * @dev Update phase end times\n', '     */\n', '    function _updatePhaseTimes() internal {\n', '        assert(phase_i != PHASE_NOT_STARTED && phase_i != PHASE_FINISHED);\n', '        if (phase_i < PHASE_ICO_1)\n', '            ico_phase_1_end = ico_start.add(SECONDS_IN_DAY.mul(ico_phase_1_days));\n', '        if (phase_i < PHASE_ICO_2)\n', '            ico_phase_2_end = ico_phase_1_end.add(SECONDS_IN_DAY.mul(ico_phase_2_days));\n', '        if (phase_i < PHASE_ICO_3)\n', '            ico_phase_3_end = ico_phase_2_end.add(SECONDS_IN_DAY.mul(ico_phase_3_days));\n', '        if (phase_i < PHASE_ICO_4)\n', '            ico_phase_4_end = ico_phase_3_end.add(SECONDS_IN_DAY.mul(ico_phase_4_days));\n', '        if (phase_i < PHASE_ICO_5)\n', '            ico_phase_5_end = ico_phase_4_end.add(SECONDS_IN_DAY.mul(ico_phase_5_days));\n', '        if (phase_i != PHASE_ICO_FINISHED)\n', '            finish_date = ico_phase_5_end.add(SECONDS_IN_DAY.mul(10));\n', '        _updatePhase(false);\n', '    }\n', '\n', '    /**\n', '     * @dev Send tokens to the specified address\n', '     *\n', '     * @param _to Address sent to\n', '     * @param _amount_coin Amount of tockens\n', '     * @return excess coins\n', '     *\n', '     * executed by CRM\n', '     */\n', '    function transferICO(address _to, uint256 _amount_coin) public onlyOwnerOrManager {\n', '        _updatePhase(true);\n', '        uint256 remainedCoin = token.balanceOf(base_wallet);\n', '        require(remainedCoin >= _amount_coin, "Not enough coins");\n', '        token.transferICO(_to, _amount_coin);\n', '        if (remainedCoin == _amount_coin)\n', '            _finalizeICO();\n', '    }\n', '\n', '    /**\n', '     * @dev Default contract function. Buy tokens by sending ethereums\n', '     */\n', '    function() public payable {\n', '        _updatePhase(true);\n', '        address sender = msg.sender;\n', '        uint256 amountEth = msg.value;\n', '        uint256 remainedCoin = token.balanceOf(base_wallet);\n', '        if (remainedCoin == 0) {\n', '            sender.transfer(amountEth);\n', '            _finalizeICO();\n', '        } else {\n', '            uint8 percent = bonus_percents[uint256(phase_i)];\n', '            uint256 amountCoin = calcTokensFromEth(amountEth);\n', '            assert(amountCoin >= MIN_TOKEN_AMOUNT);\n', '            if (amountCoin > remainedCoin) {\n', '                lastPayerOverflow = amountCoin.sub(remainedCoin);\n', '                amountCoin = remainedCoin;\n', '            }\n', '            base_wallet.transfer(amountEth);\n', '            token.transferICO(sender, amountCoin);\n', '            _addPayment(sender, amountEth, amountCoin, percent);\n', '            if (amountCoin == remainedCoin)\n', '                _finalizeICO();\n', '        }\n', '    }\n', '\n', '    function calcTokensFromEth(uint256 ethAmount) internal view returns (uint256) {\n', '        uint8 percent = bonus_percents[uint256(phase_i)];\n', '        uint256 bonusRate = uint256(percent).add(100);\n', '        uint256 totalCoins = ethAmount.mul(exchange_rate).div(1000);\n', '        uint256 totalFullCoins = (totalCoins.add(dec_mul.div(2))).div(dec_mul);\n', '        uint256 tokensWithBonusX100 = bonusRate.mul(totalFullCoins);\n', '        uint256 fullCoins = (tokensWithBonusX100.add(50)).div(100);\n', '        return fullCoins.mul(dec_mul);\n', '    }\n', '\n', '    /**\n', '     * @dev Freeze the account\n', '     * @param _accounts Given accounts\n', '     *\n', '     * executed by CRM\n', '     */\n', '    function freeze(address[] _accounts) public onlyOwnerOrManager {\n', '        assert(phase_i != PHASE_NOT_STARTED && phase_i != PHASE_FINISHED);\n', '        uint i;\n', '        for (i = 0; i < _accounts.length; i++) {\n', '            require(_accounts[i] != address(0), "Zero address");\n', '            require(_accounts[i] != base_wallet, "Freeze self");\n', '        }\n', '        for (i = 0; i < _accounts.length; i++) {\n', '            token.freeze(_accounts[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Unfreeze the account\n', '     * @param _accounts Given accounts\n', '     */\n', '    function unfreeze(address[] _accounts) public onlyOwnerOrManager {\n', '        assert(phase_i != PHASE_NOT_STARTED && phase_i != PHASE_FINISHED);\n', '        uint i;\n', '        for (i = 0; i < _accounts.length; i++) {\n', '            require(_accounts[i] != address(0), "Zero address");\n', '            require(_accounts[i] != base_wallet, "Freeze self");\n', '        }\n', '        for (i = 0; i < _accounts.length; i++) {\n', '            token.unfreeze(_accounts[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev get ICO times\n', '     * @return presale_start, presale_end, ico_start, ico_phase_1_end, ico_phase_2_end, ico_phase_3_end, ico_phase_4_end, ico_phase_5_end\n', '     */\n', '    function getTimes() public view returns (uint, uint, uint, uint, uint, uint, uint, uint) {\n', '        return (presale_start, presale_end, ico_start, ico_phase_1_end, ico_phase_2_end, ico_phase_3_end, ico_phase_4_end, ico_phase_5_end);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets start and end dates for pre-sale phase_i\n', '     * @param _presale_start Pre-sale sart date\n', '     * @param _presale_end Pre-sale end date\n', '     */\n', '    function setPresaleDates(uint _presale_start, uint _presale_end) public onlyOwnerOrManager {\n', '        _updatePhase(false);\n', '        assert(phase_i == PHASE_BEFORE_PRESALE);\n', '        // require(_presale_start >= now);\n', '        require(_presale_start < _presale_end);\n', '        require(_presale_end < ico_start);\n', '        presale_start = _presale_start;\n', '        presale_end = _presale_end;\n', '    }\n', '\n', '    /**\n', '     * @dev Sets start date for ICO phases\n', '     * @param _ico_start ICO start date\n', '     * @param _ico_1_days Days of ICO phase 1\n', '     * @param _ico_2_days Days of ICO phase 2\n', '     * @param _ico_3_days Days of ICO phase 3\n', '     * @param _ico_4_days Days of ICO phase 4\n', '     * @param _ico_5_days Days of ICO phase 5\n', '     */\n', '    function setICODates(uint _ico_start, uint _ico_1_days, uint _ico_2_days, uint _ico_3_days, uint _ico_4_days, uint _ico_5_days) public onlyOwnerOrManager {\n', '        _updatePhase(false);\n', '        assert(phase_i != PHASE_FINISHED && phase_i != PHASE_ICO_FINISHED && phase_i < PHASE_ICO_1);\n', '        require(presale_end < _ico_start);\n', '        ico_start = _ico_start;\n', '        ico_phase_1_days = _ico_1_days;\n', '        ico_phase_2_days = _ico_2_days;\n', '        ico_phase_3_days = _ico_3_days;\n', '        ico_phase_4_days = _ico_4_days;\n', '        ico_phase_5_days = _ico_5_days;\n', '        _updatePhaseTimes();\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0 || b == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "Invalid owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0), "Zero address");\n', '        emit OwnershipTransferred(owner, newOwner);  \n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address _owner) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract EyeToken is ERC20, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    struct Frozen {\n', '        bool frozen;\n', '        uint until;\n', '    }\n', '\n', '    string public name = "EyeCoin";\n', '    string public symbol = "EYE";\n', '    uint8 public decimals = 18;\n', '\n', '    mapping(address => uint256) internal balances;\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '    mapping(address => Frozen) public frozenAccounts;\n', '    uint256 internal totalSupplyTokens;\n', '    bool internal isICO;\n', '    address public wallet;\n', '\n', '    function EyeToken() public Ownable() {\n', '        wallet = msg.sender;\n', '        isICO = true;\n', '        totalSupplyTokens = 10000000000 * 10 ** uint256(decimals);\n', '        balances[wallet] = totalSupplyTokens;\n', '    }\n', '\n', '    /**\n', '     * @dev Finalize ICO\n', '     */\n', '    function finalizeICO() public onlyOwner {\n', '        isICO = false;\n', '    }\n', '\n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupplyTokens;\n', '    }\n', '\n', '    /**\n', '     * @dev Freeze account, make transfers from this account unavailable\n', '     * @param _account Given account\n', '     */\n', '    function freeze(address _account) public onlyOwner {\n', '        freeze(_account, 0);\n', '    }\n', '\n', '    /**\n', '     * @dev  Temporary freeze account, make transfers from this account unavailable for a time\n', '     * @param _account Given account\n', '     * @param _until Time until\n', '     */\n', '    function freeze(address _account, uint _until) public onlyOwner {\n', '        if (_until == 0 || (_until != 0 && _until > now)) {\n', '            frozenAccounts[_account] = Frozen(true, _until);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Unfreeze account, make transfers from this account available\n', '     * @param _account Given account\n', '     */\n', '    function unfreeze(address _account) public onlyOwner {\n', '        if (frozenAccounts[_account].frozen) {\n', '            delete frozenAccounts[_account];\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev allow transfer tokens or not\n', '     * @param _from The address to transfer from.\n', '     */\n', '    modifier allowTransfer(address _from) {\n', '        assert(!isICO);\n', '        if (frozenAccounts[_from].frozen) {\n', '            require(frozenAccounts[_from].until != 0 && frozenAccounts[_from].until < now, "Frozen account");\n', '            delete frozenAccounts[_from];\n', '        }\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer tokens for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        bool result = _transfer(msg.sender, _to, _value);\n', '        emit Transfer(msg.sender, _to, _value); \n', '        return result;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer tokens for a specified address in ICO mode\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transferICO(address _to, uint256 _value) public onlyOwner returns (bool) {\n', '        assert(isICO);\n', '        require(_to != address(0), "Zero address \'To\'");\n', '        require(_value <= balances[wallet], "Not enought balance");\n', '        balances[wallet] = balances[wallet].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(wallet, _to, _value);  \n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public allowTransfer(_from) returns (bool) {\n', '        require(_value <= allowed[_from][msg.sender], "Not enought allowance");\n', '        bool result = _transfer(_from, _to, _value);\n', '        if (result) {\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '            emit Transfer(_from, _to, _value);  \n', '        }\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);  \n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);  \n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);  \n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _from The address to transfer from.\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function _transfer(address _from, address _to, uint256 _value) internal allowTransfer(_from) returns (bool) {\n', '        require(_to != address(0), "Zero address \'To\'");\n', '        require(_from != address(0), "Zero address \'From\'");\n', '        require(_value <= balances[_from], "Not enought balance");\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Crowd-sale\n', ' *\n', ' * @dev Crowd-sale contract for tokens\n', ' */\n', 'contract CrowdSale is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    event Payment(\n', '        address wallet,\n', '        uint date,\n', '        uint256 amountEth,\n', '        uint256 amountCoin,\n', '        uint8 bonusPercent\n', '    );\n', '\n', '    uint constant internal MIN_TOKEN_AMOUNT = 5000;\n', '    uint constant internal SECONDS_IN_DAY = 86400; // 24 * 60 * 60\n', '    uint constant internal SECONDS_IN_YEAR = 31557600; // ( 365 * 24 + 6 ) * 60 * 60\n', '    int8 constant internal PHASE_NOT_STARTED = -5;\n', '    int8 constant internal PHASE_BEFORE_PRESALE = -4;\n', '    int8 constant internal PHASE_BETWEEN_PRESALE_ICO = -3;\n', '    int8 constant internal PHASE_ICO_FINISHED = -2;\n', '    int8 constant internal PHASE_FINISHED = -1;\n', '    int8 constant internal PHASE_PRESALE = 0;\n', '    int8 constant internal PHASE_ICO_1 = 1;\n', '    int8 constant internal PHASE_ICO_2 = 2;\n', '    int8 constant internal PHASE_ICO_3 = 3;\n', '    int8 constant internal PHASE_ICO_4 = 4;\n', '    int8 constant internal PHASE_ICO_5 = 5;\n', '\n', '    address internal manager;\n', '\n', '    EyeToken internal token;\n', '    address internal base_wallet;\n', '    uint256 internal dec_mul;\n', '    address internal vest_1;\n', '    address internal vest_2;\n', '    address internal vest_3;\n', '    address internal vest_4;\n', '\n', '    int8 internal phase_i; // see PHASE_XXX\n', '\n', '    uint internal presale_start = 1533020400; // 2018-07-31 07:00 UTC\n', '    uint internal presale_end = 1534316400; // 2018-08-15 07:00 UTC\n', '    uint internal ico_start = 1537254000; // 2018-09-18 07:00 UTC\n', '    uint internal ico_phase_1_days = 7;\n', '    uint internal ico_phase_2_days = 7;\n', '    uint internal ico_phase_3_days = 7;\n', '    uint internal ico_phase_4_days = 7;\n', '    uint internal ico_phase_5_days = 7;\n', '    uint internal ico_phase_1_end;\n', '    uint internal ico_phase_2_end;\n', '    uint internal ico_phase_3_end;\n', '    uint internal ico_phase_4_end;\n', '    uint internal ico_phase_5_end;\n', '    uint8[6] public bonus_percents = [50, 40, 30, 20, 10, 0];\n', '    uint internal finish_date;\n', '    uint public exchange_rate;  //  tokens in one ethereum * 1000\n', '    uint256 public lastPayerOverflow = 0;\n', '\n', '    /**\n', '     * @dev Crowd-sale constructor\n', '     */\n', '    function CrowdSale() Ownable() public {\n', '        phase_i = PHASE_NOT_STARTED;\n', '        manager = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allow only for owner or manager\n', '     */\n', '    modifier onlyOwnerOrManager(){\n', '        require(msg.sender == owner || (msg.sender == manager && manager != address(0)), "Invalid owner or manager");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns current manager\n', '     */\n', '    function getManager() public view onlyOwnerOrManager returns (address) {\n', '        return manager;\n', '    }\n', '\n', '    /**\n', '     * @dev Sets new manager\n', '     * @param _manager New manager\n', '     */\n', '    function setManager(address _manager) public onlyOwner {\n', '        manager = _manager;\n', '    }\n', '\n', '    /**\n', '     * @dev Set exchange rate\n', '     * @param _rate New exchange rate\n', '     *\n', '     * executed by CRM\n', '     */\n', '    function setRate(uint _rate) public onlyOwnerOrManager {\n', '        require(_rate > 0, "Invalid exchange rate");\n', '        exchange_rate = _rate;\n', '    }\n', '\n', '    function _addPayment(address wallet, uint256 amountEth, uint256 amountCoin, uint8 bonusPercent) internal {\n', '        emit Payment(wallet, now, amountEth, amountCoin, bonusPercent);\n', '    }\n', '\n', '    /**\n', '     * @dev Start crowd-sale\n', "     * @param _token Coin's contract\n", '     * @param _rate current exchange rate\n', '     */\n', '    function start(address _token, uint256 _rate) public onlyOwnerOrManager {\n', '        require(_rate > 0, "Invalid exchange rate");\n', '        assert(phase_i == PHASE_NOT_STARTED);\n', '\n', '        token = EyeToken(_token);\n', '        base_wallet = token.wallet();\n', '        dec_mul = 10 ** uint256(token.decimals());\n', '\n', '        // Organizasional expenses\n', '        address org_exp = 0x45709fcBeb5D133bFA336d8c70FFFF98eE815359;\n', '        // Early birds\n', '        address ear_brd = 0xE640b346E1d9A1eb3F809608a8a92f041D02F3BE;\n', '        // Community development\n', '        address com_dev = 0xdC2c6398F7a9cF2CbdCfEcB37CF732f486642316;\n', '        // Special coins\n', '        address special = 0x1dBcDb11c6C05a4EA541227fBdEeB02d6492BD07;\n', '        // Team lock\n', '        vest_1 = 0xC49d11a05aF6D5BDeBfd18E0010516D9840f3610;\n', '        vest_2 = 0x7Fd486029C8D81f4894e4ef0D460c2bD97187aeF;\n', '        vest_3 = 0xcCcC86e1086015AEE865165f6f93a82dE591Cb3C;\n', '        vest_4 = 0xd7569317e6af13D4d3832613F930cc5b7cecaE6e;\n', '\n', '        token.transferICO(org_exp, 600000000 * dec_mul);\n', '        token.transferICO(ear_brd, 1000000000 * dec_mul);\n', '        token.transferICO(com_dev, 1000000000 * dec_mul);\n', '        token.transferICO(special, 800000000 * dec_mul);\n', '        token.transferICO(vest_1, 500000000 * dec_mul);\n', '        token.transferICO(vest_2, 500000000 * dec_mul);\n', '        token.transferICO(vest_3, 500000000 * dec_mul);\n', '        token.transferICO(vest_4, 500000000 * dec_mul);\n', '\n', '        exchange_rate = _rate;\n', '\n', '        phase_i = PHASE_BEFORE_PRESALE;\n', '        _updatePhaseTimes();\n', '    }\n', '\n', '    /**\n', '     * @dev Finalize ICO\n', '     */\n', '    function _finalizeICO() internal {\n', '        assert(phase_i != PHASE_NOT_STARTED && phase_i != PHASE_FINISHED);\n', '        phase_i = PHASE_ICO_FINISHED;\n', '        uint curr_date = now;\n', '        finish_date = (curr_date < ico_phase_5_end ? ico_phase_5_end : curr_date).add(SECONDS_IN_DAY * 10);\n', '    }\n', '\n', '    /**\n', '     * @dev Finalize crowd-sale\n', '     */\n', '    function _finalize() internal {\n', '        assert(phase_i != PHASE_NOT_STARTED && phase_i != PHASE_FINISHED);\n', '\n', '        uint date = now.add(SECONDS_IN_YEAR);\n', '        token.freeze(vest_1, date);\n', '        date = date.add(SECONDS_IN_YEAR);\n', '        token.freeze(vest_2, date);\n', '        date = date.add(SECONDS_IN_YEAR);\n', '        token.freeze(vest_3, date);\n', '        date = date.add(SECONDS_IN_YEAR);\n', '        token.freeze(vest_4, date);\n', '\n', '        token.finalizeICO();\n', '        token.transferOwnership(base_wallet);\n', '\n', '        phase_i = PHASE_FINISHED;\n', '    }\n', '\n', '    /**\n', '     * @dev Finalize crowd-sale\n', '     */\n', '    function finalize() public onlyOwner {\n', '        _finalize();\n', '    }\n', '\n', '    function _calcPhase() internal view returns (int8) {\n', '        if (phase_i == PHASE_FINISHED || phase_i == PHASE_NOT_STARTED)\n', '            return phase_i;\n', '        uint curr_date = now;\n', '        if (curr_date >= ico_phase_5_end || token.balanceOf(base_wallet) == 0)\n', '            return PHASE_ICO_FINISHED;\n', '        if (curr_date < presale_start)\n', '            return PHASE_BEFORE_PRESALE;\n', '        if (curr_date <= presale_end)\n', '            return PHASE_PRESALE;\n', '        if (curr_date < ico_start)\n', '            return PHASE_BETWEEN_PRESALE_ICO;\n', '        if (curr_date < ico_phase_1_end)\n', '            return PHASE_ICO_1;\n', '        if (curr_date < ico_phase_2_end)\n', '            return PHASE_ICO_2;\n', '        if (curr_date < ico_phase_3_end)\n', '            return PHASE_ICO_3;\n', '        if (curr_date < ico_phase_4_end)\n', '            return PHASE_ICO_4;\n', '        return PHASE_ICO_5;\n', '    }\n', '\n', '    function phase() public view returns (int8) {\n', '        return _calcPhase();\n', '    }\n', '\n', '    /**\n', '     * @dev Recalculate phase\n', '     */\n', '    function _updatePhase(bool check_can_sale) internal {\n', '        uint curr_date = now;\n', '        if (phase_i == PHASE_ICO_FINISHED) {\n', '            if (curr_date >= finish_date)\n', '                _finalize();\n', '        }\n', '        else\n', '            if (phase_i != PHASE_NOT_STARTED && phase_i != PHASE_FINISHED) {\n', '                int8 new_phase = _calcPhase();\n', '                if (new_phase == PHASE_ICO_FINISHED && phase_i != PHASE_ICO_FINISHED)\n', '                    _finalizeICO();\n', '                else\n', '                    phase_i = new_phase;\n', '            }\n', '        if (check_can_sale)\n', '            assert(phase_i >= 0);\n', '    }\n', '\n', '    /**\n', '     * @dev Update phase end times\n', '     */\n', '    function _updatePhaseTimes() internal {\n', '        assert(phase_i != PHASE_NOT_STARTED && phase_i != PHASE_FINISHED);\n', '        if (phase_i < PHASE_ICO_1)\n', '            ico_phase_1_end = ico_start.add(SECONDS_IN_DAY.mul(ico_phase_1_days));\n', '        if (phase_i < PHASE_ICO_2)\n', '            ico_phase_2_end = ico_phase_1_end.add(SECONDS_IN_DAY.mul(ico_phase_2_days));\n', '        if (phase_i < PHASE_ICO_3)\n', '            ico_phase_3_end = ico_phase_2_end.add(SECONDS_IN_DAY.mul(ico_phase_3_days));\n', '        if (phase_i < PHASE_ICO_4)\n', '            ico_phase_4_end = ico_phase_3_end.add(SECONDS_IN_DAY.mul(ico_phase_4_days));\n', '        if (phase_i < PHASE_ICO_5)\n', '            ico_phase_5_end = ico_phase_4_end.add(SECONDS_IN_DAY.mul(ico_phase_5_days));\n', '        if (phase_i != PHASE_ICO_FINISHED)\n', '            finish_date = ico_phase_5_end.add(SECONDS_IN_DAY.mul(10));\n', '        _updatePhase(false);\n', '    }\n', '\n', '    /**\n', '     * @dev Send tokens to the specified address\n', '     *\n', '     * @param _to Address sent to\n', '     * @param _amount_coin Amount of tockens\n', '     * @return excess coins\n', '     *\n', '     * executed by CRM\n', '     */\n', '    function transferICO(address _to, uint256 _amount_coin) public onlyOwnerOrManager {\n', '        _updatePhase(true);\n', '        uint256 remainedCoin = token.balanceOf(base_wallet);\n', '        require(remainedCoin >= _amount_coin, "Not enough coins");\n', '        token.transferICO(_to, _amount_coin);\n', '        if (remainedCoin == _amount_coin)\n', '            _finalizeICO();\n', '    }\n', '\n', '    /**\n', '     * @dev Default contract function. Buy tokens by sending ethereums\n', '     */\n', '    function() public payable {\n', '        _updatePhase(true);\n', '        address sender = msg.sender;\n', '        uint256 amountEth = msg.value;\n', '        uint256 remainedCoin = token.balanceOf(base_wallet);\n', '        if (remainedCoin == 0) {\n', '            sender.transfer(amountEth);\n', '            _finalizeICO();\n', '        } else {\n', '            uint8 percent = bonus_percents[uint256(phase_i)];\n', '            uint256 amountCoin = calcTokensFromEth(amountEth);\n', '            assert(amountCoin >= MIN_TOKEN_AMOUNT);\n', '            if (amountCoin > remainedCoin) {\n', '                lastPayerOverflow = amountCoin.sub(remainedCoin);\n', '                amountCoin = remainedCoin;\n', '            }\n', '            base_wallet.transfer(amountEth);\n', '            token.transferICO(sender, amountCoin);\n', '            _addPayment(sender, amountEth, amountCoin, percent);\n', '            if (amountCoin == remainedCoin)\n', '                _finalizeICO();\n', '        }\n', '    }\n', '\n', '    function calcTokensFromEth(uint256 ethAmount) internal view returns (uint256) {\n', '        uint8 percent = bonus_percents[uint256(phase_i)];\n', '        uint256 bonusRate = uint256(percent).add(100);\n', '        uint256 totalCoins = ethAmount.mul(exchange_rate).div(1000);\n', '        uint256 totalFullCoins = (totalCoins.add(dec_mul.div(2))).div(dec_mul);\n', '        uint256 tokensWithBonusX100 = bonusRate.mul(totalFullCoins);\n', '        uint256 fullCoins = (tokensWithBonusX100.add(50)).div(100);\n', '        return fullCoins.mul(dec_mul);\n', '    }\n', '\n', '    /**\n', '     * @dev Freeze the account\n', '     * @param _accounts Given accounts\n', '     *\n', '     * executed by CRM\n', '     */\n', '    function freeze(address[] _accounts) public onlyOwnerOrManager {\n', '        assert(phase_i != PHASE_NOT_STARTED && phase_i != PHASE_FINISHED);\n', '        uint i;\n', '        for (i = 0; i < _accounts.length; i++) {\n', '            require(_accounts[i] != address(0), "Zero address");\n', '            require(_accounts[i] != base_wallet, "Freeze self");\n', '        }\n', '        for (i = 0; i < _accounts.length; i++) {\n', '            token.freeze(_accounts[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Unfreeze the account\n', '     * @param _accounts Given accounts\n', '     */\n', '    function unfreeze(address[] _accounts) public onlyOwnerOrManager {\n', '        assert(phase_i != PHASE_NOT_STARTED && phase_i != PHASE_FINISHED);\n', '        uint i;\n', '        for (i = 0; i < _accounts.length; i++) {\n', '            require(_accounts[i] != address(0), "Zero address");\n', '            require(_accounts[i] != base_wallet, "Freeze self");\n', '        }\n', '        for (i = 0; i < _accounts.length; i++) {\n', '            token.unfreeze(_accounts[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev get ICO times\n', '     * @return presale_start, presale_end, ico_start, ico_phase_1_end, ico_phase_2_end, ico_phase_3_end, ico_phase_4_end, ico_phase_5_end\n', '     */\n', '    function getTimes() public view returns (uint, uint, uint, uint, uint, uint, uint, uint) {\n', '        return (presale_start, presale_end, ico_start, ico_phase_1_end, ico_phase_2_end, ico_phase_3_end, ico_phase_4_end, ico_phase_5_end);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets start and end dates for pre-sale phase_i\n', '     * @param _presale_start Pre-sale sart date\n', '     * @param _presale_end Pre-sale end date\n', '     */\n', '    function setPresaleDates(uint _presale_start, uint _presale_end) public onlyOwnerOrManager {\n', '        _updatePhase(false);\n', '        assert(phase_i == PHASE_BEFORE_PRESALE);\n', '        // require(_presale_start >= now);\n', '        require(_presale_start < _presale_end);\n', '        require(_presale_end < ico_start);\n', '        presale_start = _presale_start;\n', '        presale_end = _presale_end;\n', '    }\n', '\n', '    /**\n', '     * @dev Sets start date for ICO phases\n', '     * @param _ico_start ICO start date\n', '     * @param _ico_1_days Days of ICO phase 1\n', '     * @param _ico_2_days Days of ICO phase 2\n', '     * @param _ico_3_days Days of ICO phase 3\n', '     * @param _ico_4_days Days of ICO phase 4\n', '     * @param _ico_5_days Days of ICO phase 5\n', '     */\n', '    function setICODates(uint _ico_start, uint _ico_1_days, uint _ico_2_days, uint _ico_3_days, uint _ico_4_days, uint _ico_5_days) public onlyOwnerOrManager {\n', '        _updatePhase(false);\n', '        assert(phase_i != PHASE_FINISHED && phase_i != PHASE_ICO_FINISHED && phase_i < PHASE_ICO_1);\n', '        require(presale_end < _ico_start);\n', '        ico_start = _ico_start;\n', '        ico_phase_1_days = _ico_1_days;\n', '        ico_phase_2_days = _ico_2_days;\n', '        ico_phase_3_days = _ico_3_days;\n', '        ico_phase_4_days = _ico_4_days;\n', '        ico_phase_5_days = _ico_5_days;\n', '        _updatePhaseTimes();\n', '    }\n', '}']
