['pragma solidity ^0.4.18;\n', '\n', '// Etheremon ERC721\n', '\n', '// copyright <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="a8cbc7c6dcc9cbdce8eddcc0cddacdc5c7c686cbc7c5">[email&#160;protected]</a>\n', '\n', 'contract SafeMath {\n', '\n', '    /* function assert(bool assertion) internal { */\n', '    /*   if (!assertion) { */\n', '    /*     throw; */\n', '    /*   } */\n', '    /* }      // assert no longer needed once solidity is on 0.4.10 */\n', '\n', '    function safeAdd(uint256 x, uint256 y) pure internal returns(uint256) {\n', '      uint256 z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtract(uint256 x, uint256 y) pure internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) pure internal returns(uint256) {\n', '      uint256 z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '\n', '}\n', '\n', 'contract BasicAccessControl {\n', '    address public owner;\n', '    // address[] public moderators;\n', '    uint16 public totalModerators = 0;\n', '    mapping (address => bool) public moderators;\n', '    bool public isMaintaining = true;\n', '\n', '    function BasicAccessControl() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyModerators() {\n', '        require(moderators[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '    modifier isActive {\n', '        require(!isMaintaining);\n', '        _;\n', '    }\n', '\n', '    function ChangeOwner(address _newOwner) onlyOwner public {\n', '        if (_newOwner != address(0)) {\n', '            owner = _newOwner;\n', '        }\n', '    }\n', '\n', '    function AddModerator(address _newModerator) onlyOwner public {\n', '        if (moderators[_newModerator] == false) {\n', '            moderators[_newModerator] = true;\n', '            totalModerators += 1;\n', '        }\n', '    }\n', '    \n', '    function RemoveModerator(address _oldModerator) onlyOwner public {\n', '        if (moderators[_oldModerator] == true) {\n', '            moderators[_oldModerator] = false;\n', '            totalModerators -= 1;\n', '        }\n', '    }\n', '    \n', '    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\n', '        isMaintaining = _isMaintaining;\n', '    }\n', '}\n', '\n', '\n', 'contract EtheremonEnum {\n', '\n', '    enum ResultCode {\n', '        SUCCESS,\n', '        ERROR_CLASS_NOT_FOUND,\n', '        ERROR_LOW_BALANCE,\n', '        ERROR_SEND_FAIL,\n', '        ERROR_NOT_TRAINER,\n', '        ERROR_NOT_ENOUGH_MONEY,\n', '        ERROR_INVALID_AMOUNT\n', '    }\n', '    \n', '    enum ArrayType {\n', '        CLASS_TYPE,\n', '        STAT_STEP,\n', '        STAT_START,\n', '        STAT_BASE,\n', '        OBJ_SKILL\n', '    }\n', '    \n', '    enum PropertyType {\n', '        ANCESTOR,\n', '        XFACTOR\n', '    }\n', '}\n', '\n', 'contract EtheremonDataBase is EtheremonEnum, BasicAccessControl, SafeMath {\n', '    \n', '    uint64 public totalMonster;\n', '    uint32 public totalClass;\n', '    \n', '    // write\n', '    function withdrawEther(address _sendTo, uint _amount) onlyOwner public returns(ResultCode);\n', '    function addElementToArrayType(ArrayType _type, uint64 _id, uint8 _value) onlyModerators public returns(uint);\n', '    function updateIndexOfArrayType(ArrayType _type, uint64 _id, uint _index, uint8 _value) onlyModerators public returns(uint);\n', '    function setMonsterClass(uint32 _classId, uint256 _price, uint256 _returnPrice, bool _catchable) onlyModerators public returns(uint32);\n', '    function addMonsterObj(uint32 _classId, address _trainer, string _name) onlyModerators public returns(uint64);\n', '    function setMonsterObj(uint64 _objId, string _name, uint32 _exp, uint32 _createIndex, uint32 _lastClaimIndex) onlyModerators public;\n', '    function increaseMonsterExp(uint64 _objId, uint32 amount) onlyModerators public;\n', '    function decreaseMonsterExp(uint64 _objId, uint32 amount) onlyModerators public;\n', '    function removeMonsterIdMapping(address _trainer, uint64 _monsterId) onlyModerators public;\n', '    function addMonsterIdMapping(address _trainer, uint64 _monsterId) onlyModerators public;\n', '    function clearMonsterReturnBalance(uint64 _monsterId) onlyModerators public returns(uint256 amount);\n', '    function collectAllReturnBalance(address _trainer) onlyModerators public returns(uint256 amount);\n', '    function transferMonster(address _from, address _to, uint64 _monsterId) onlyModerators public returns(ResultCode);\n', '    function addExtraBalance(address _trainer, uint256 _amount) onlyModerators public returns(uint256);\n', '    function deductExtraBalance(address _trainer, uint256 _amount) onlyModerators public returns(uint256);\n', '    function setExtraBalance(address _trainer, uint256 _amount) onlyModerators public;\n', '    \n', '    // read\n', '    function getSizeArrayType(ArrayType _type, uint64 _id) constant public returns(uint);\n', '    function getElementInArrayType(ArrayType _type, uint64 _id, uint _index) constant public returns(uint8);\n', '    function getMonsterClass(uint32 _classId) constant public returns(uint32 classId, uint256 price, uint256 returnPrice, uint32 total, bool catchable);\n', '    function getMonsterObj(uint64 _objId) constant public returns(uint64 objId, uint32 classId, address trainer, uint32 exp, uint32 createIndex, uint32 lastClaimIndex, uint createTime);\n', '    function getMonsterName(uint64 _objId) constant public returns(string name);\n', '    function getExtraBalance(address _trainer) constant public returns(uint256);\n', '    function getMonsterDexSize(address _trainer) constant public returns(uint);\n', '    function getMonsterObjId(address _trainer, uint index) constant public returns(uint64);\n', '    function getExpectedBalance(address _trainer) constant public returns(uint256);\n', '    function getMonsterReturn(uint64 _objId) constant public returns(uint256 current, uint256 total);\n', '}\n', '\n', '\n', 'interface EtheremonBattle {\n', '    function isOnBattle(uint64 _objId) constant external returns(bool);\n', '}\n', '\n', 'interface EtheremonTradeInterface {\n', '    function isOnTrading(uint64 _objId) constant external returns(bool);\n', '}\n', '\n', 'contract ERC721 {\n', '    // ERC20 compatible functions\n', '    // function name() constant returns (string name);\n', '    // function symbol() constant returns (string symbol);\n', '    function totalSupply() public constant returns (uint256 supply);\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    // Functions that define ownership\n', '    function ownerOf(uint256 _tokenId) public constant returns (address owner);\n', '    function approve(address _to, uint256 _tokenId) external;\n', '    function takeOwnership(uint256 _tokenId) external;\n', '    function transfer(address _to, uint256 _tokenId) external;\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n', '    function tokenOfOwnerByIndex(address _owner, uint256 _index) public constant returns (uint tokenId);\n', '    // Token metadata\n', '    //function tokenMetadata(uint256 _tokenId) constant returns (string infoUrl);\n', '\n', '    // Events\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '}\n', '\n', 'contract EtheremonAsset is BasicAccessControl, ERC721 {\n', '    string public constant name = "EtheremonAsset";\n', '    string public constant symbol = "EMONA";\n', '    \n', '    mapping (address => mapping (uint256 => address)) public allowed;\n', '    \n', '    // data contract\n', '    address public dataContract;\n', '    address public battleContract;\n', '    address public tradeContract;\n', '    \n', '    // helper struct\n', '    struct MonsterClassAcc {\n', '        uint32 classId;\n', '        uint256 price;\n', '        uint256 returnPrice;\n', '        uint32 total;\n', '        bool catchable;\n', '    }\n', '\n', '    struct MonsterObjAcc {\n', '        uint64 monsterId;\n', '        uint32 classId;\n', '        address trainer;\n', '        string name;\n', '        uint32 exp;\n', '        uint32 createIndex;\n', '        uint32 lastClaimIndex;\n', '        uint createTime;\n', '    }\n', '\n', '    // modifier\n', '    \n', '    modifier requireDataContract {\n', '        require(dataContract != address(0));\n', '        _;\n', '    }\n', '    \n', '    modifier requireBattleContract {\n', '        require(battleContract != address(0));\n', '        _;\n', '    }\n', '    \n', '    modifier requireTradeContract {\n', '        require(tradeContract != address(0));\n', '        _;        \n', '    }\n', '    \n', '    function EtheremonAsset(address _dataContract, address _battleContract, address _tradeContract) public {\n', '        dataContract = _dataContract;\n', '        battleContract = _battleContract;\n', '        tradeContract = _tradeContract;\n', '    }\n', '\n', '    function setContract(address _dataContract, address _battleContract, address _tradeContract) onlyModerators external {\n', '        dataContract = _dataContract;\n', '        battleContract = _battleContract;\n', '        tradeContract = _tradeContract;\n', '    }\n', '    \n', '    \n', '    // public\n', '    \n', '    function totalSupply() public constant requireDataContract returns (uint256 supply){\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        return data.totalMonster();\n', '    }\n', '    \n', '    function balanceOf(address _owner) public constant requireDataContract returns (uint balance) {\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        return data.getMonsterDexSize(_owner);\n', '    }\n', '    \n', '    function ownerOf(uint256 _tokenId) public constant requireDataContract returns (address owner) {\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        MonsterObjAcc memory obj;\n', '        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(uint64(_tokenId));\n', '        require(obj.monsterId == uint64(_tokenId));\n', '        return obj.trainer;\n', '    }\n', '    \n', '    function approve(address _to, uint256 _tokenId) isActive external {\n', '        require(msg.sender == ownerOf(_tokenId));\n', '        require(msg.sender != _to);\n', '        allowed[msg.sender][_tokenId] = _to;\n', '        Approval(msg.sender, _to, _tokenId);\n', '    }\n', '    \n', '    function takeOwnership(uint256 _tokenId) requireDataContract requireBattleContract requireTradeContract isActive external {\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        MonsterObjAcc memory obj;\n', '        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(uint64(_tokenId));\n', '        \n', '        require(obj.monsterId == uint64(_tokenId));\n', '        require(msg.sender != obj.trainer);\n', '        \n', '        require(allowed[obj.trainer][_tokenId] == msg.sender);\n', '        \n', '        // check battle & trade contract \n', '        EtheremonBattle battle = EtheremonBattle(battleContract);\n', '        EtheremonTradeInterface trade = EtheremonTradeInterface(tradeContract);\n', '        if (battle.isOnBattle(obj.monsterId) || trade.isOnTrading(obj.monsterId))\n', '            revert();\n', '        \n', '        // remove allowed\n', '        allowed[obj.trainer][_tokenId] = address(0);\n', '\n', '        // transfer owner\n', '        data.removeMonsterIdMapping(obj.trainer, obj.monsterId);\n', '        data.addMonsterIdMapping(msg.sender, obj.monsterId);\n', '        \n', '        Transfer(obj.trainer, msg.sender, _tokenId);\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _tokenId) requireDataContract isActive external {\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        MonsterObjAcc memory obj;\n', '        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(uint64(_tokenId));\n', '        \n', '        require(obj.monsterId == uint64(_tokenId));\n', '        require(obj.trainer == msg.sender);\n', '        require(msg.sender != _to);\n', '        require(_to != address(0));\n', '        \n', '        // check battle & trade contract \n', '        EtheremonBattle battle = EtheremonBattle(battleContract);\n', '        EtheremonTradeInterface trade = EtheremonTradeInterface(tradeContract);\n', '        if (battle.isOnBattle(obj.monsterId) || trade.isOnTrading(obj.monsterId))\n', '            revert();\n', '        \n', '        // remove allowed\n', '        allowed[obj.trainer][_tokenId] = address(0);\n', '        \n', '        // transfer owner\n', '        data.removeMonsterIdMapping(obj.trainer, obj.monsterId);\n', '        data.addMonsterIdMapping(msg.sender, obj.monsterId);\n', '        \n', '        Transfer(obj.trainer, _to, _tokenId);\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _tokenId) requireDataContract requireBattleContract requireTradeContract external {\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        MonsterObjAcc memory obj;\n', '        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(uint64(_tokenId));\n', '        \n', '        require(obj.monsterId == uint64(_tokenId));\n', '        require(obj.trainer == _from);\n', '        require(_to != address(0));\n', '        require(_to != _from);\n', '        require(allowed[_from][_tokenId] == msg.sender);\n', '    \n', '        // check battle & trade contract \n', '        EtheremonBattle battle = EtheremonBattle(battleContract);\n', '        EtheremonTradeInterface trade = EtheremonTradeInterface(tradeContract);\n', '        if (battle.isOnBattle(obj.monsterId) || trade.isOnTrading(obj.monsterId))\n', '            revert();\n', '        \n', '        // remove allowed\n', '        allowed[_from][_tokenId] = address(0);\n', '\n', '        // transfer owner\n', '        data.removeMonsterIdMapping(obj.trainer, obj.monsterId);\n', '        data.addMonsterIdMapping(_to, obj.monsterId);\n', '        \n', '        Transfer(obj.trainer, _to, _tokenId);\n', '    }\n', '    \n', '    function tokenOfOwnerByIndex(address _owner, uint256 _index) public constant requireDataContract returns (uint tokenId) {\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        return data.getMonsterObjId(_owner, _index);\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// Etheremon ERC721\n', '\n', '// copyright contact@Etheremon.com\n', '\n', 'contract SafeMath {\n', '\n', '    /* function assert(bool assertion) internal { */\n', '    /*   if (!assertion) { */\n', '    /*     throw; */\n', '    /*   } */\n', '    /* }      // assert no longer needed once solidity is on 0.4.10 */\n', '\n', '    function safeAdd(uint256 x, uint256 y) pure internal returns(uint256) {\n', '      uint256 z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtract(uint256 x, uint256 y) pure internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) pure internal returns(uint256) {\n', '      uint256 z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '\n', '}\n', '\n', 'contract BasicAccessControl {\n', '    address public owner;\n', '    // address[] public moderators;\n', '    uint16 public totalModerators = 0;\n', '    mapping (address => bool) public moderators;\n', '    bool public isMaintaining = true;\n', '\n', '    function BasicAccessControl() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyModerators() {\n', '        require(moderators[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '    modifier isActive {\n', '        require(!isMaintaining);\n', '        _;\n', '    }\n', '\n', '    function ChangeOwner(address _newOwner) onlyOwner public {\n', '        if (_newOwner != address(0)) {\n', '            owner = _newOwner;\n', '        }\n', '    }\n', '\n', '    function AddModerator(address _newModerator) onlyOwner public {\n', '        if (moderators[_newModerator] == false) {\n', '            moderators[_newModerator] = true;\n', '            totalModerators += 1;\n', '        }\n', '    }\n', '    \n', '    function RemoveModerator(address _oldModerator) onlyOwner public {\n', '        if (moderators[_oldModerator] == true) {\n', '            moderators[_oldModerator] = false;\n', '            totalModerators -= 1;\n', '        }\n', '    }\n', '    \n', '    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\n', '        isMaintaining = _isMaintaining;\n', '    }\n', '}\n', '\n', '\n', 'contract EtheremonEnum {\n', '\n', '    enum ResultCode {\n', '        SUCCESS,\n', '        ERROR_CLASS_NOT_FOUND,\n', '        ERROR_LOW_BALANCE,\n', '        ERROR_SEND_FAIL,\n', '        ERROR_NOT_TRAINER,\n', '        ERROR_NOT_ENOUGH_MONEY,\n', '        ERROR_INVALID_AMOUNT\n', '    }\n', '    \n', '    enum ArrayType {\n', '        CLASS_TYPE,\n', '        STAT_STEP,\n', '        STAT_START,\n', '        STAT_BASE,\n', '        OBJ_SKILL\n', '    }\n', '    \n', '    enum PropertyType {\n', '        ANCESTOR,\n', '        XFACTOR\n', '    }\n', '}\n', '\n', 'contract EtheremonDataBase is EtheremonEnum, BasicAccessControl, SafeMath {\n', '    \n', '    uint64 public totalMonster;\n', '    uint32 public totalClass;\n', '    \n', '    // write\n', '    function withdrawEther(address _sendTo, uint _amount) onlyOwner public returns(ResultCode);\n', '    function addElementToArrayType(ArrayType _type, uint64 _id, uint8 _value) onlyModerators public returns(uint);\n', '    function updateIndexOfArrayType(ArrayType _type, uint64 _id, uint _index, uint8 _value) onlyModerators public returns(uint);\n', '    function setMonsterClass(uint32 _classId, uint256 _price, uint256 _returnPrice, bool _catchable) onlyModerators public returns(uint32);\n', '    function addMonsterObj(uint32 _classId, address _trainer, string _name) onlyModerators public returns(uint64);\n', '    function setMonsterObj(uint64 _objId, string _name, uint32 _exp, uint32 _createIndex, uint32 _lastClaimIndex) onlyModerators public;\n', '    function increaseMonsterExp(uint64 _objId, uint32 amount) onlyModerators public;\n', '    function decreaseMonsterExp(uint64 _objId, uint32 amount) onlyModerators public;\n', '    function removeMonsterIdMapping(address _trainer, uint64 _monsterId) onlyModerators public;\n', '    function addMonsterIdMapping(address _trainer, uint64 _monsterId) onlyModerators public;\n', '    function clearMonsterReturnBalance(uint64 _monsterId) onlyModerators public returns(uint256 amount);\n', '    function collectAllReturnBalance(address _trainer) onlyModerators public returns(uint256 amount);\n', '    function transferMonster(address _from, address _to, uint64 _monsterId) onlyModerators public returns(ResultCode);\n', '    function addExtraBalance(address _trainer, uint256 _amount) onlyModerators public returns(uint256);\n', '    function deductExtraBalance(address _trainer, uint256 _amount) onlyModerators public returns(uint256);\n', '    function setExtraBalance(address _trainer, uint256 _amount) onlyModerators public;\n', '    \n', '    // read\n', '    function getSizeArrayType(ArrayType _type, uint64 _id) constant public returns(uint);\n', '    function getElementInArrayType(ArrayType _type, uint64 _id, uint _index) constant public returns(uint8);\n', '    function getMonsterClass(uint32 _classId) constant public returns(uint32 classId, uint256 price, uint256 returnPrice, uint32 total, bool catchable);\n', '    function getMonsterObj(uint64 _objId) constant public returns(uint64 objId, uint32 classId, address trainer, uint32 exp, uint32 createIndex, uint32 lastClaimIndex, uint createTime);\n', '    function getMonsterName(uint64 _objId) constant public returns(string name);\n', '    function getExtraBalance(address _trainer) constant public returns(uint256);\n', '    function getMonsterDexSize(address _trainer) constant public returns(uint);\n', '    function getMonsterObjId(address _trainer, uint index) constant public returns(uint64);\n', '    function getExpectedBalance(address _trainer) constant public returns(uint256);\n', '    function getMonsterReturn(uint64 _objId) constant public returns(uint256 current, uint256 total);\n', '}\n', '\n', '\n', 'interface EtheremonBattle {\n', '    function isOnBattle(uint64 _objId) constant external returns(bool);\n', '}\n', '\n', 'interface EtheremonTradeInterface {\n', '    function isOnTrading(uint64 _objId) constant external returns(bool);\n', '}\n', '\n', 'contract ERC721 {\n', '    // ERC20 compatible functions\n', '    // function name() constant returns (string name);\n', '    // function symbol() constant returns (string symbol);\n', '    function totalSupply() public constant returns (uint256 supply);\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    // Functions that define ownership\n', '    function ownerOf(uint256 _tokenId) public constant returns (address owner);\n', '    function approve(address _to, uint256 _tokenId) external;\n', '    function takeOwnership(uint256 _tokenId) external;\n', '    function transfer(address _to, uint256 _tokenId) external;\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n', '    function tokenOfOwnerByIndex(address _owner, uint256 _index) public constant returns (uint tokenId);\n', '    // Token metadata\n', '    //function tokenMetadata(uint256 _tokenId) constant returns (string infoUrl);\n', '\n', '    // Events\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '}\n', '\n', 'contract EtheremonAsset is BasicAccessControl, ERC721 {\n', '    string public constant name = "EtheremonAsset";\n', '    string public constant symbol = "EMONA";\n', '    \n', '    mapping (address => mapping (uint256 => address)) public allowed;\n', '    \n', '    // data contract\n', '    address public dataContract;\n', '    address public battleContract;\n', '    address public tradeContract;\n', '    \n', '    // helper struct\n', '    struct MonsterClassAcc {\n', '        uint32 classId;\n', '        uint256 price;\n', '        uint256 returnPrice;\n', '        uint32 total;\n', '        bool catchable;\n', '    }\n', '\n', '    struct MonsterObjAcc {\n', '        uint64 monsterId;\n', '        uint32 classId;\n', '        address trainer;\n', '        string name;\n', '        uint32 exp;\n', '        uint32 createIndex;\n', '        uint32 lastClaimIndex;\n', '        uint createTime;\n', '    }\n', '\n', '    // modifier\n', '    \n', '    modifier requireDataContract {\n', '        require(dataContract != address(0));\n', '        _;\n', '    }\n', '    \n', '    modifier requireBattleContract {\n', '        require(battleContract != address(0));\n', '        _;\n', '    }\n', '    \n', '    modifier requireTradeContract {\n', '        require(tradeContract != address(0));\n', '        _;        \n', '    }\n', '    \n', '    function EtheremonAsset(address _dataContract, address _battleContract, address _tradeContract) public {\n', '        dataContract = _dataContract;\n', '        battleContract = _battleContract;\n', '        tradeContract = _tradeContract;\n', '    }\n', '\n', '    function setContract(address _dataContract, address _battleContract, address _tradeContract) onlyModerators external {\n', '        dataContract = _dataContract;\n', '        battleContract = _battleContract;\n', '        tradeContract = _tradeContract;\n', '    }\n', '    \n', '    \n', '    // public\n', '    \n', '    function totalSupply() public constant requireDataContract returns (uint256 supply){\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        return data.totalMonster();\n', '    }\n', '    \n', '    function balanceOf(address _owner) public constant requireDataContract returns (uint balance) {\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        return data.getMonsterDexSize(_owner);\n', '    }\n', '    \n', '    function ownerOf(uint256 _tokenId) public constant requireDataContract returns (address owner) {\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        MonsterObjAcc memory obj;\n', '        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(uint64(_tokenId));\n', '        require(obj.monsterId == uint64(_tokenId));\n', '        return obj.trainer;\n', '    }\n', '    \n', '    function approve(address _to, uint256 _tokenId) isActive external {\n', '        require(msg.sender == ownerOf(_tokenId));\n', '        require(msg.sender != _to);\n', '        allowed[msg.sender][_tokenId] = _to;\n', '        Approval(msg.sender, _to, _tokenId);\n', '    }\n', '    \n', '    function takeOwnership(uint256 _tokenId) requireDataContract requireBattleContract requireTradeContract isActive external {\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        MonsterObjAcc memory obj;\n', '        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(uint64(_tokenId));\n', '        \n', '        require(obj.monsterId == uint64(_tokenId));\n', '        require(msg.sender != obj.trainer);\n', '        \n', '        require(allowed[obj.trainer][_tokenId] == msg.sender);\n', '        \n', '        // check battle & trade contract \n', '        EtheremonBattle battle = EtheremonBattle(battleContract);\n', '        EtheremonTradeInterface trade = EtheremonTradeInterface(tradeContract);\n', '        if (battle.isOnBattle(obj.monsterId) || trade.isOnTrading(obj.monsterId))\n', '            revert();\n', '        \n', '        // remove allowed\n', '        allowed[obj.trainer][_tokenId] = address(0);\n', '\n', '        // transfer owner\n', '        data.removeMonsterIdMapping(obj.trainer, obj.monsterId);\n', '        data.addMonsterIdMapping(msg.sender, obj.monsterId);\n', '        \n', '        Transfer(obj.trainer, msg.sender, _tokenId);\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _tokenId) requireDataContract isActive external {\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        MonsterObjAcc memory obj;\n', '        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(uint64(_tokenId));\n', '        \n', '        require(obj.monsterId == uint64(_tokenId));\n', '        require(obj.trainer == msg.sender);\n', '        require(msg.sender != _to);\n', '        require(_to != address(0));\n', '        \n', '        // check battle & trade contract \n', '        EtheremonBattle battle = EtheremonBattle(battleContract);\n', '        EtheremonTradeInterface trade = EtheremonTradeInterface(tradeContract);\n', '        if (battle.isOnBattle(obj.monsterId) || trade.isOnTrading(obj.monsterId))\n', '            revert();\n', '        \n', '        // remove allowed\n', '        allowed[obj.trainer][_tokenId] = address(0);\n', '        \n', '        // transfer owner\n', '        data.removeMonsterIdMapping(obj.trainer, obj.monsterId);\n', '        data.addMonsterIdMapping(msg.sender, obj.monsterId);\n', '        \n', '        Transfer(obj.trainer, _to, _tokenId);\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _tokenId) requireDataContract requireBattleContract requireTradeContract external {\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        MonsterObjAcc memory obj;\n', '        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(uint64(_tokenId));\n', '        \n', '        require(obj.monsterId == uint64(_tokenId));\n', '        require(obj.trainer == _from);\n', '        require(_to != address(0));\n', '        require(_to != _from);\n', '        require(allowed[_from][_tokenId] == msg.sender);\n', '    \n', '        // check battle & trade contract \n', '        EtheremonBattle battle = EtheremonBattle(battleContract);\n', '        EtheremonTradeInterface trade = EtheremonTradeInterface(tradeContract);\n', '        if (battle.isOnBattle(obj.monsterId) || trade.isOnTrading(obj.monsterId))\n', '            revert();\n', '        \n', '        // remove allowed\n', '        allowed[_from][_tokenId] = address(0);\n', '\n', '        // transfer owner\n', '        data.removeMonsterIdMapping(obj.trainer, obj.monsterId);\n', '        data.addMonsterIdMapping(_to, obj.monsterId);\n', '        \n', '        Transfer(obj.trainer, _to, _tokenId);\n', '    }\n', '    \n', '    function tokenOfOwnerByIndex(address _owner, uint256 _index) public constant requireDataContract returns (uint tokenId) {\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        return data.getMonsterObjId(_owner, _index);\n', '    }\n', '}']
