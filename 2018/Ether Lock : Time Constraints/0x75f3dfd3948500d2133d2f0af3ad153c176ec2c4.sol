['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', 'interface itoken {\n', '    // mapping (address => bool) public frozenAccount;\n', '    function freezeAccount(address _target, bool _freeze) external;\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n', '    function balanceOf(address _owner) external view returns (uint256 balance);\n', '    function transferOwnership(address newOwner) external;\n', '    function allowance(address _owner, address _spender) external view returns (uint256);\n', '}\n', '\n', 'contract OwnerContract is Ownable {\n', '    itoken public owned;\n', '    \n', '    /**\n', '     * @dev bind a contract as its owner\n', '     *\n', '     * @param _contract the contract address that will be binded by this Owner Contract\n', '     */\n', '    function setContract(address _contract) public onlyOwner {\n', '        require(_contract != address(0));\n', '        owned = itoken(_contract);\n', '    }\n', '\n', '    /**\n', '     * @dev change the owner of the contract from this contract to another \n', '     *\n', '     * @param _newOwner the new contract/account address that will be the new owner\n', '     */\n', '    function changeContractOwner(address _newOwner) public onlyOwner returns(bool) {\n', '        require(_newOwner != address(0));\n', '        owned.transferOwnership(_newOwner);\n', '        owned = itoken(address(0));\n', '        \n', '        return true;\n', '    }\n', '}\n', '\n', 'contract ReleaseToken is OwnerContract {\n', '    using SafeMath for uint256;\n', '\n', '    // record lock time period and related token amount\n', '    struct TimeRec {\n', '        uint256 amount;\n', '        uint256 remain;\n', '        uint256 endTime;\n', '        uint256 duration;\n', '    }\n', '\n', '    address[] public frozenAccounts;\n', '    mapping (address => TimeRec[]) frozenTimes;\n', '    // mapping (address => uint256) releasedAmounts;\n', '    mapping (address => uint256) preReleaseAmounts;\n', '\n', '    event ReleaseFunds(address _target, uint256 _amount);\n', '\n', '    function removeAccount(uint _ind) internal returns (bool) {\n', '        require(_ind >= 0);\n', '        require(_ind < frozenAccounts.length);\n', '\n', '        //if (_ind >= frozenAccounts.length) {\n', '        //    return false;\n', '        //}\n', '\n', '        uint256 i = _ind;\n', '        while (i < frozenAccounts.length.sub(1)) {\n', '            frozenAccounts[i] = frozenAccounts[i.add(1)];\n', '            i = i.add(1);\n', '        }\n', '\n', '        frozenAccounts.length = frozenAccounts.length.sub(1);\n', '        return true;\n', '    }\n', '\n', '    function removeLockedTime(address _target, uint _ind) internal returns (bool) {\n', '        require(_ind >= 0);\n', '        require(_target != address(0));\n', '\n', '        TimeRec[] storage lockedTimes = frozenTimes[_target];\n', '        require(_ind < lockedTimes.length);\n', '        //if (_ind >= lockedTimes.length) {\n', '        //    return false;\n', '        //}\n', '\n', '        uint256 i = _ind;\n', '        while (i < lockedTimes.length.sub(1)) {\n', '            lockedTimes[i] = lockedTimes[i.add(1)];\n', '            i = i.add(1);\n', '        }\n', '\n', '        lockedTimes.length = lockedTimes.length.sub(1);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev get total remain locked tokens of an account\n', '     *\n', '     * @param _account the owner of some amount of tokens\n', '     */\n', '    function getRemainLockedOf(address _account) public view returns (uint256) {\n', '        require(_account != address(0));\n', '\n', '        uint256 totalRemain = 0;\n', '        uint256 len = frozenAccounts.length;\n', '        uint256 i = 0;\n', '        while (i < len) {\n', '            address frozenAddr = frozenAccounts[i];\n', '            if (frozenAddr == _account) {\n', '                uint256 timeRecLen = frozenTimes[frozenAddr].length;\n', '                uint256 j = 0;\n', '                while (j < timeRecLen) {\n', '                    TimeRec storage timePair = frozenTimes[frozenAddr][j];\n', '                    totalRemain = totalRemain.add(timePair.remain);\n', '\n', '                    j = j.add(1);\n', '                }\n', '            }\n', '\n', '            i = i.add(1);\n', '        }\n', '\n', '        return totalRemain;\n', '    }\n', '\n', '    /**\n', '     * judge whether we need to release some of the locked token\n', '     *\n', '     */\n', '    function needRelease() public view returns (bool) {\n', '        uint256 len = frozenAccounts.length;\n', '        uint256 i = 0;\n', '        while (i < len) {\n', '            address frozenAddr = frozenAccounts[i];\n', '            uint256 timeRecLen = frozenTimes[frozenAddr].length;\n', '            uint256 j = 0;\n', '            while (j < timeRecLen) {\n', '                TimeRec storage timePair = frozenTimes[frozenAddr][j];\n', '                if (now >= timePair.endTime) {\n', '                    return true;\n', '                }\n', '\n', '                j = j.add(1);\n', '            }\n', '\n', '            i = i.add(1);\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev freeze the amount of tokens of an account\n', '     *\n', '     * @param _target the owner of some amount of tokens\n', '     * @param _value the amount of the tokens\n', '     * @param _frozenEndTime the end time of the lock period, unit is second\n', '     * @param _releasePeriod the locking period, unit is second\n', '     */\n', '    function freeze(address _target, uint256 _value, uint256 _frozenEndTime, uint256 _releasePeriod) onlyOwner public returns (bool) {\n', '        //require(_tokenAddr != address(0));\n', '        require(_target != address(0));\n', '        require(_value > 0);\n', '        require(_frozenEndTime > 0 && _releasePeriod >= 0);\n', '\n', '        uint256 len = frozenAccounts.length;\n', '        \n', '        for (uint256 i = 0; i < len; i = i.add(1)) {\n', '            if (frozenAccounts[i] == _target) {\n', '                break;\n', '            }            \n', '        }\n', '\n', '        if (i >= len) {\n', '            frozenAccounts.push(_target); // add new account\n', '\n', '            //frozenTimes[_target].push(TimeRec(_value, _value, _frozenEndTime, _releasePeriod))\n', '        } /* else {\n', '            uint256 timeArrayLen = frozenTimes[_target].length;\n', '            uint256 j = 0;\n', '            while (j < timeArrayLen) {\n', '                TimeRec storage lastTime = frozenTimes[_target][j];\n', '                if (lastTime.amount == 0 && lastTime.remain == 0 && lastTime.endTime == 0 && lastTime.duration == 0) {\n', '                    lastTime.amount = _value;\n', '                    lastTime.remain = _value;\n', '                    lastTime.endTime = _frozenEndTime;\n', '                    lastTime.duration = _releasePeriod; \n', '                    \n', '                    break;\n', '                }\n', '\n', '                j = j.add(1);\n', '            }\n', '            \n', '            if (j >= timeArrayLen) {\n', '                frozenTimes[_target].push(TimeRec(_value, _value, _frozenEndTime, _releasePeriod));\n', '            }\n', '        } */\n', '\n', '        // frozenTimes[_target] = _frozenEndTime;\n', '        \n', '        // each time the new locked time will be added to the backend\n', '        frozenTimes[_target].push(TimeRec(_value, _value, _frozenEndTime, _releasePeriod));\n', '        owned.freezeAccount(_target, true);\n', '        \n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev transfer an amount of tokens to an account, and then freeze the tokens\n', '     *\n', '     * @param _target the account address that will hold an amount of the tokens\n', '     * @param _value the amount of the tokens which has been transferred\n', '     * @param _frozenEndTime the end time of the lock period, unit is second\n', '     * @param _releasePeriod the locking period, unit is second\n', '     */\n', '    function transferAndFreeze(/*address _tokenOwner, */address _target, uint256 _value, uint256 _frozenEndTime, uint256 _releasePeriod) onlyOwner public returns (bool) {\n', '        //require(_tokenOwner != address(0));\n', '        require(_target != address(0));\n', '        require(_value > 0);\n', '        require(_frozenEndTime > 0 && _releasePeriod >= 0);\n', '\n', '        // check firstly that the allowance of this contract has been set\n', '        assert(owned.allowance(msg.sender, this) > 0);\n', '\n', '        // freeze the account at first\n', '        if (!freeze(_target, _value, _frozenEndTime, _releasePeriod)) {\n', '            return false;\n', '        }\n', '\n', '        return (owned.transferFrom(msg.sender, _target, _value));\n', '    }\n', '\n', '    /**\n', '     * release the token which are locked for once and will be total released at once \n', '     * after the end point of the lock period\n', '     */\n', '    function releaseAllOnceLock() onlyOwner public returns (bool) {\n', '        //require(_tokenAddr != address(0));\n', '\n', '        uint256 len = frozenAccounts.length;\n', '        uint256 i = 0;\n', '        while (i < len) {\n', '            address target = frozenAccounts[i];\n', '            if (frozenTimes[target].length == 1 && 0 == frozenTimes[target][0].duration && frozenTimes[target][0].endTime > 0 && now >= frozenTimes[target][0].endTime) {\n', '                bool res = removeAccount(i);\n', '                if (!res) {\n', '                    return false;\n', '                }\n', '                \n', '                owned.freezeAccount(target, false);\n', '                //frozenTimes[destAddr][0].endTime = 0;\n', '                //frozenTimes[destAddr][0].duration = 0;\n', '                ReleaseFunds(target, frozenTimes[target][0].amount);\n', '                len = len.sub(1);\n', '                //frozenTimes[destAddr][0].amount = 0;\n', '                //frozenTimes[destAddr][0].remain = 0;\n', '            } else { \n', '                // no account has been removed\n', '                i = i.add(1);\n', '            }\n', '        }\n', '        \n', '        return true;\n', '        //return (releaseMultiAccounts(frozenAccounts));\n', '    }\n', '\n', '    /**\n', '     * @dev release the locked tokens owned by an account, which only have only one locked time\n', '     * and don&#39;t have release stage.\n', '     *\n', '     * @param _target the account address that hold an amount of locked tokens\n', '     */\n', '    function releaseAccount(address _target) onlyOwner public returns (bool) {\n', '        //require(_tokenAddr != address(0));\n', '        require(_target != address(0));\n', '\n', '        uint256 len = frozenAccounts.length;\n', '        uint256 i = 0;\n', '        while (i < len) {\n', '            address destAddr = frozenAccounts[i];\n', '            if (destAddr == _target) {\n', '                if (frozenTimes[destAddr].length == 1 && 0 == frozenTimes[destAddr][0].duration && frozenTimes[destAddr][0].endTime > 0 && now >= frozenTimes[destAddr][0].endTime) { \n', '                    bool res = removeAccount(i);\n', '                    if (!res) {\n', '                        return false;\n', '                    }\n', '\n', '                    owned.freezeAccount(destAddr, false);\n', '                    // frozenTimes[destAddr][0].endTime = 0;\n', '                    // frozenTimes[destAddr][0].duration = 0;\n', '                    ReleaseFunds(destAddr, frozenTimes[destAddr][0].amount);\n', '                    // frozenTimes[destAddr][0].amount = 0;\n', '                    // frozenTimes[destAddr][0].remain = 0;\n', '\n', '                }\n', '\n', '                // if the account are not locked for once, we will do nothing here\n', '                return true; \n', '            }\n', '\n', '            i = i.add(1);\n', '        }\n', '        \n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev release the locked tokens owned by a number of accounts\n', '     *\n', '     * @param _targets the accounts list that hold an amount of locked tokens \n', '     */\n', '    function releaseMultiAccounts(address[] _targets) onlyOwner public returns (bool) {\n', '        //require(_tokenAddr != address(0));\n', '        require(_targets.length != 0);\n', '\n', '        uint256 i = 0;\n', '        while (i < _targets.length) {\n', '            if (!releaseAccount(_targets[i])) {\n', '                return false;\n', '            }\n', '\n', '            i = i.add(1);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev release the locked tokens owned by an account with several stages\n', '     * this need the contract get approval from the account by call approve() in the token contract\n', '     *\n', '     * @param _target the account address that hold an amount of locked tokens\n', '     * @param _dest the secondary address that will hold the released tokens\n', '     */\n', '    function releaseWithStage(address _target, address _dest) onlyOwner public returns (bool) {\n', '        //require(_tokenAddr != address(0));\n', '        require(_target != address(0));\n', '        require(_dest != address(0));\n', '        // require(_value > 0);\n', '        \n', '        // check firstly that the allowance of this contract from _target account has been set\n', '        assert(owned.allowance(_target, this) > 0);\n', '\n', '        uint256 len = frozenAccounts.length;\n', '        uint256 i = 0;\n', '        while (i < len) {\n', '            // firstly find the target address\n', '            address frozenAddr = frozenAccounts[i];\n', '            if (frozenAddr == _target) {\n', '                uint256 timeRecLen = frozenTimes[frozenAddr].length;\n', '\n', '                bool released = false;\n', '                for (uint256 j = 0; j < timeRecLen; released = false) {\n', '                    // iterate every time records to caculate how many tokens need to be released.\n', '                    TimeRec storage timePair = frozenTimes[frozenAddr][j];\n', '                    uint256 nowTime = now;\n', '                    if (nowTime > timePair.endTime && timePair.endTime > 0 && timePair.duration > 0) {                        \n', '                        uint256 value = timePair.amount * (nowTime - timePair.endTime) / timePair.duration;\n', '                        if (value > timePair.remain) {\n', '                            value = timePair.remain;\n', '                        } \n', '                        \n', '                        // owned.freezeAccount(frozenAddr, false);\n', '                        \n', '                        timePair.endTime = nowTime;        \n', '                        timePair.remain = timePair.remain.sub(value);\n', '                        if (timePair.remain < 1e8) {\n', '                            if (!removeLockedTime(frozenAddr, j)) {\n', '                                return false;\n', '                            }\n', '                            released = true;\n', '                            timeRecLen = timeRecLen.sub(1);\n', '                        }\n', '                        // if (!owned.transferFrom(_target, _dest, value)) {\n', '                        //     return false;\n', '                        // }\n', '                        ReleaseFunds(frozenAddr, value);\n', '                        preReleaseAmounts[frozenAddr] = preReleaseAmounts[frozenAddr].add(value);\n', '                        //owned.freezeAccount(frozenAddr, true);\n', '                    } else if (nowTime >= timePair.endTime && timePair.endTime > 0 && timePair.duration == 0) {\n', '                        // owned.freezeAccount(frozenAddr, false);\n', '                        \n', '                        if (!removeLockedTime(frozenAddr, j)) {\n', '                            return false;\n', '                        }\n', '                        released = true;\n', '                        timeRecLen = timeRecLen.sub(1);\n', '\n', '                        // if (!owned.transferFrom(_target, _dest, timePair.amount)) {\n', '                        //     return false;\n', '                        // }\n', '                        ReleaseFunds(frozenAddr, timePair.amount);\n', '                        preReleaseAmounts[frozenAddr] = preReleaseAmounts[frozenAddr].add(timePair.amount);\n', '                        //owned.freezeAccount(frozenAddr, true);\n', '                    } //else if (timePair.amount == 0 && timePair.remain == 0 && timePair.endTime == 0 && timePair.duration == 0) {\n', '                      //  removeLockedTime(frozenAddr, j);\n', '                    //}\n', '\n', '                    if (!released) {\n', '                        j = j.add(1);\n', '                    }\n', '                }\n', '\n', '                // we got some amount need to be released\n', '                if (preReleaseAmounts[frozenAddr] > 0) {\n', '                    owned.freezeAccount(frozenAddr, false);\n', '                    if (!owned.transferFrom(_target, _dest, preReleaseAmounts[frozenAddr])) {\n', '                        return false;\n', '                    }\n', '                }\n', '\n', '                // if all the frozen amounts had been released, then unlock the account finally\n', '                if (frozenTimes[frozenAddr].length == 0) {\n', '                    if (!removeAccount(i)) {\n', '                        return false;\n', '                    }                    \n', '                } else {\n', '                    // still has some tokens need to be released in future\n', '                    owned.freezeAccount(frozenAddr, true);\n', '                }\n', '\n', '                return true;\n', '            }          \n', '\n', '            i = i.add(1);\n', '        }\n', '        \n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev release the locked tokens owned by an account\n', '     *\n', '     * @param _targets the account addresses list that hold amounts of locked tokens\n', '     * @param _dests the secondary addresses list that will hold the released tokens for each target account\n', '     */\n', '    function releaseMultiWithStage(address[] _targets, address[] _dests) onlyOwner public returns (bool) {\n', '        //require(_tokenAddr != address(0));\n', '        require(_targets.length != 0);\n', '        require(_dests.length != 0);\n', '        assert(_targets.length == _dests.length);\n', '\n', '        uint256 i = 0;\n', '        while (i < _targets.length) {\n', '            if (!releaseWithStage(_targets[i], _dests[i])) {\n', '                return false;\n', '            }\n', '\n', '            i = i.add(1);\n', '        }\n', '\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', 'interface itoken {\n', '    // mapping (address => bool) public frozenAccount;\n', '    function freezeAccount(address _target, bool _freeze) external;\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n', '    function balanceOf(address _owner) external view returns (uint256 balance);\n', '    function transferOwnership(address newOwner) external;\n', '    function allowance(address _owner, address _spender) external view returns (uint256);\n', '}\n', '\n', 'contract OwnerContract is Ownable {\n', '    itoken public owned;\n', '    \n', '    /**\n', '     * @dev bind a contract as its owner\n', '     *\n', '     * @param _contract the contract address that will be binded by this Owner Contract\n', '     */\n', '    function setContract(address _contract) public onlyOwner {\n', '        require(_contract != address(0));\n', '        owned = itoken(_contract);\n', '    }\n', '\n', '    /**\n', '     * @dev change the owner of the contract from this contract to another \n', '     *\n', '     * @param _newOwner the new contract/account address that will be the new owner\n', '     */\n', '    function changeContractOwner(address _newOwner) public onlyOwner returns(bool) {\n', '        require(_newOwner != address(0));\n', '        owned.transferOwnership(_newOwner);\n', '        owned = itoken(address(0));\n', '        \n', '        return true;\n', '    }\n', '}\n', '\n', 'contract ReleaseToken is OwnerContract {\n', '    using SafeMath for uint256;\n', '\n', '    // record lock time period and related token amount\n', '    struct TimeRec {\n', '        uint256 amount;\n', '        uint256 remain;\n', '        uint256 endTime;\n', '        uint256 duration;\n', '    }\n', '\n', '    address[] public frozenAccounts;\n', '    mapping (address => TimeRec[]) frozenTimes;\n', '    // mapping (address => uint256) releasedAmounts;\n', '    mapping (address => uint256) preReleaseAmounts;\n', '\n', '    event ReleaseFunds(address _target, uint256 _amount);\n', '\n', '    function removeAccount(uint _ind) internal returns (bool) {\n', '        require(_ind >= 0);\n', '        require(_ind < frozenAccounts.length);\n', '\n', '        //if (_ind >= frozenAccounts.length) {\n', '        //    return false;\n', '        //}\n', '\n', '        uint256 i = _ind;\n', '        while (i < frozenAccounts.length.sub(1)) {\n', '            frozenAccounts[i] = frozenAccounts[i.add(1)];\n', '            i = i.add(1);\n', '        }\n', '\n', '        frozenAccounts.length = frozenAccounts.length.sub(1);\n', '        return true;\n', '    }\n', '\n', '    function removeLockedTime(address _target, uint _ind) internal returns (bool) {\n', '        require(_ind >= 0);\n', '        require(_target != address(0));\n', '\n', '        TimeRec[] storage lockedTimes = frozenTimes[_target];\n', '        require(_ind < lockedTimes.length);\n', '        //if (_ind >= lockedTimes.length) {\n', '        //    return false;\n', '        //}\n', '\n', '        uint256 i = _ind;\n', '        while (i < lockedTimes.length.sub(1)) {\n', '            lockedTimes[i] = lockedTimes[i.add(1)];\n', '            i = i.add(1);\n', '        }\n', '\n', '        lockedTimes.length = lockedTimes.length.sub(1);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev get total remain locked tokens of an account\n', '     *\n', '     * @param _account the owner of some amount of tokens\n', '     */\n', '    function getRemainLockedOf(address _account) public view returns (uint256) {\n', '        require(_account != address(0));\n', '\n', '        uint256 totalRemain = 0;\n', '        uint256 len = frozenAccounts.length;\n', '        uint256 i = 0;\n', '        while (i < len) {\n', '            address frozenAddr = frozenAccounts[i];\n', '            if (frozenAddr == _account) {\n', '                uint256 timeRecLen = frozenTimes[frozenAddr].length;\n', '                uint256 j = 0;\n', '                while (j < timeRecLen) {\n', '                    TimeRec storage timePair = frozenTimes[frozenAddr][j];\n', '                    totalRemain = totalRemain.add(timePair.remain);\n', '\n', '                    j = j.add(1);\n', '                }\n', '            }\n', '\n', '            i = i.add(1);\n', '        }\n', '\n', '        return totalRemain;\n', '    }\n', '\n', '    /**\n', '     * judge whether we need to release some of the locked token\n', '     *\n', '     */\n', '    function needRelease() public view returns (bool) {\n', '        uint256 len = frozenAccounts.length;\n', '        uint256 i = 0;\n', '        while (i < len) {\n', '            address frozenAddr = frozenAccounts[i];\n', '            uint256 timeRecLen = frozenTimes[frozenAddr].length;\n', '            uint256 j = 0;\n', '            while (j < timeRecLen) {\n', '                TimeRec storage timePair = frozenTimes[frozenAddr][j];\n', '                if (now >= timePair.endTime) {\n', '                    return true;\n', '                }\n', '\n', '                j = j.add(1);\n', '            }\n', '\n', '            i = i.add(1);\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev freeze the amount of tokens of an account\n', '     *\n', '     * @param _target the owner of some amount of tokens\n', '     * @param _value the amount of the tokens\n', '     * @param _frozenEndTime the end time of the lock period, unit is second\n', '     * @param _releasePeriod the locking period, unit is second\n', '     */\n', '    function freeze(address _target, uint256 _value, uint256 _frozenEndTime, uint256 _releasePeriod) onlyOwner public returns (bool) {\n', '        //require(_tokenAddr != address(0));\n', '        require(_target != address(0));\n', '        require(_value > 0);\n', '        require(_frozenEndTime > 0 && _releasePeriod >= 0);\n', '\n', '        uint256 len = frozenAccounts.length;\n', '        \n', '        for (uint256 i = 0; i < len; i = i.add(1)) {\n', '            if (frozenAccounts[i] == _target) {\n', '                break;\n', '            }            \n', '        }\n', '\n', '        if (i >= len) {\n', '            frozenAccounts.push(_target); // add new account\n', '\n', '            //frozenTimes[_target].push(TimeRec(_value, _value, _frozenEndTime, _releasePeriod))\n', '        } /* else {\n', '            uint256 timeArrayLen = frozenTimes[_target].length;\n', '            uint256 j = 0;\n', '            while (j < timeArrayLen) {\n', '                TimeRec storage lastTime = frozenTimes[_target][j];\n', '                if (lastTime.amount == 0 && lastTime.remain == 0 && lastTime.endTime == 0 && lastTime.duration == 0) {\n', '                    lastTime.amount = _value;\n', '                    lastTime.remain = _value;\n', '                    lastTime.endTime = _frozenEndTime;\n', '                    lastTime.duration = _releasePeriod; \n', '                    \n', '                    break;\n', '                }\n', '\n', '                j = j.add(1);\n', '            }\n', '            \n', '            if (j >= timeArrayLen) {\n', '                frozenTimes[_target].push(TimeRec(_value, _value, _frozenEndTime, _releasePeriod));\n', '            }\n', '        } */\n', '\n', '        // frozenTimes[_target] = _frozenEndTime;\n', '        \n', '        // each time the new locked time will be added to the backend\n', '        frozenTimes[_target].push(TimeRec(_value, _value, _frozenEndTime, _releasePeriod));\n', '        owned.freezeAccount(_target, true);\n', '        \n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev transfer an amount of tokens to an account, and then freeze the tokens\n', '     *\n', '     * @param _target the account address that will hold an amount of the tokens\n', '     * @param _value the amount of the tokens which has been transferred\n', '     * @param _frozenEndTime the end time of the lock period, unit is second\n', '     * @param _releasePeriod the locking period, unit is second\n', '     */\n', '    function transferAndFreeze(/*address _tokenOwner, */address _target, uint256 _value, uint256 _frozenEndTime, uint256 _releasePeriod) onlyOwner public returns (bool) {\n', '        //require(_tokenOwner != address(0));\n', '        require(_target != address(0));\n', '        require(_value > 0);\n', '        require(_frozenEndTime > 0 && _releasePeriod >= 0);\n', '\n', '        // check firstly that the allowance of this contract has been set\n', '        assert(owned.allowance(msg.sender, this) > 0);\n', '\n', '        // freeze the account at first\n', '        if (!freeze(_target, _value, _frozenEndTime, _releasePeriod)) {\n', '            return false;\n', '        }\n', '\n', '        return (owned.transferFrom(msg.sender, _target, _value));\n', '    }\n', '\n', '    /**\n', '     * release the token which are locked for once and will be total released at once \n', '     * after the end point of the lock period\n', '     */\n', '    function releaseAllOnceLock() onlyOwner public returns (bool) {\n', '        //require(_tokenAddr != address(0));\n', '\n', '        uint256 len = frozenAccounts.length;\n', '        uint256 i = 0;\n', '        while (i < len) {\n', '            address target = frozenAccounts[i];\n', '            if (frozenTimes[target].length == 1 && 0 == frozenTimes[target][0].duration && frozenTimes[target][0].endTime > 0 && now >= frozenTimes[target][0].endTime) {\n', '                bool res = removeAccount(i);\n', '                if (!res) {\n', '                    return false;\n', '                }\n', '                \n', '                owned.freezeAccount(target, false);\n', '                //frozenTimes[destAddr][0].endTime = 0;\n', '                //frozenTimes[destAddr][0].duration = 0;\n', '                ReleaseFunds(target, frozenTimes[target][0].amount);\n', '                len = len.sub(1);\n', '                //frozenTimes[destAddr][0].amount = 0;\n', '                //frozenTimes[destAddr][0].remain = 0;\n', '            } else { \n', '                // no account has been removed\n', '                i = i.add(1);\n', '            }\n', '        }\n', '        \n', '        return true;\n', '        //return (releaseMultiAccounts(frozenAccounts));\n', '    }\n', '\n', '    /**\n', '     * @dev release the locked tokens owned by an account, which only have only one locked time\n', "     * and don't have release stage.\n", '     *\n', '     * @param _target the account address that hold an amount of locked tokens\n', '     */\n', '    function releaseAccount(address _target) onlyOwner public returns (bool) {\n', '        //require(_tokenAddr != address(0));\n', '        require(_target != address(0));\n', '\n', '        uint256 len = frozenAccounts.length;\n', '        uint256 i = 0;\n', '        while (i < len) {\n', '            address destAddr = frozenAccounts[i];\n', '            if (destAddr == _target) {\n', '                if (frozenTimes[destAddr].length == 1 && 0 == frozenTimes[destAddr][0].duration && frozenTimes[destAddr][0].endTime > 0 && now >= frozenTimes[destAddr][0].endTime) { \n', '                    bool res = removeAccount(i);\n', '                    if (!res) {\n', '                        return false;\n', '                    }\n', '\n', '                    owned.freezeAccount(destAddr, false);\n', '                    // frozenTimes[destAddr][0].endTime = 0;\n', '                    // frozenTimes[destAddr][0].duration = 0;\n', '                    ReleaseFunds(destAddr, frozenTimes[destAddr][0].amount);\n', '                    // frozenTimes[destAddr][0].amount = 0;\n', '                    // frozenTimes[destAddr][0].remain = 0;\n', '\n', '                }\n', '\n', '                // if the account are not locked for once, we will do nothing here\n', '                return true; \n', '            }\n', '\n', '            i = i.add(1);\n', '        }\n', '        \n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev release the locked tokens owned by a number of accounts\n', '     *\n', '     * @param _targets the accounts list that hold an amount of locked tokens \n', '     */\n', '    function releaseMultiAccounts(address[] _targets) onlyOwner public returns (bool) {\n', '        //require(_tokenAddr != address(0));\n', '        require(_targets.length != 0);\n', '\n', '        uint256 i = 0;\n', '        while (i < _targets.length) {\n', '            if (!releaseAccount(_targets[i])) {\n', '                return false;\n', '            }\n', '\n', '            i = i.add(1);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev release the locked tokens owned by an account with several stages\n', '     * this need the contract get approval from the account by call approve() in the token contract\n', '     *\n', '     * @param _target the account address that hold an amount of locked tokens\n', '     * @param _dest the secondary address that will hold the released tokens\n', '     */\n', '    function releaseWithStage(address _target, address _dest) onlyOwner public returns (bool) {\n', '        //require(_tokenAddr != address(0));\n', '        require(_target != address(0));\n', '        require(_dest != address(0));\n', '        // require(_value > 0);\n', '        \n', '        // check firstly that the allowance of this contract from _target account has been set\n', '        assert(owned.allowance(_target, this) > 0);\n', '\n', '        uint256 len = frozenAccounts.length;\n', '        uint256 i = 0;\n', '        while (i < len) {\n', '            // firstly find the target address\n', '            address frozenAddr = frozenAccounts[i];\n', '            if (frozenAddr == _target) {\n', '                uint256 timeRecLen = frozenTimes[frozenAddr].length;\n', '\n', '                bool released = false;\n', '                for (uint256 j = 0; j < timeRecLen; released = false) {\n', '                    // iterate every time records to caculate how many tokens need to be released.\n', '                    TimeRec storage timePair = frozenTimes[frozenAddr][j];\n', '                    uint256 nowTime = now;\n', '                    if (nowTime > timePair.endTime && timePair.endTime > 0 && timePair.duration > 0) {                        \n', '                        uint256 value = timePair.amount * (nowTime - timePair.endTime) / timePair.duration;\n', '                        if (value > timePair.remain) {\n', '                            value = timePair.remain;\n', '                        } \n', '                        \n', '                        // owned.freezeAccount(frozenAddr, false);\n', '                        \n', '                        timePair.endTime = nowTime;        \n', '                        timePair.remain = timePair.remain.sub(value);\n', '                        if (timePair.remain < 1e8) {\n', '                            if (!removeLockedTime(frozenAddr, j)) {\n', '                                return false;\n', '                            }\n', '                            released = true;\n', '                            timeRecLen = timeRecLen.sub(1);\n', '                        }\n', '                        // if (!owned.transferFrom(_target, _dest, value)) {\n', '                        //     return false;\n', '                        // }\n', '                        ReleaseFunds(frozenAddr, value);\n', '                        preReleaseAmounts[frozenAddr] = preReleaseAmounts[frozenAddr].add(value);\n', '                        //owned.freezeAccount(frozenAddr, true);\n', '                    } else if (nowTime >= timePair.endTime && timePair.endTime > 0 && timePair.duration == 0) {\n', '                        // owned.freezeAccount(frozenAddr, false);\n', '                        \n', '                        if (!removeLockedTime(frozenAddr, j)) {\n', '                            return false;\n', '                        }\n', '                        released = true;\n', '                        timeRecLen = timeRecLen.sub(1);\n', '\n', '                        // if (!owned.transferFrom(_target, _dest, timePair.amount)) {\n', '                        //     return false;\n', '                        // }\n', '                        ReleaseFunds(frozenAddr, timePair.amount);\n', '                        preReleaseAmounts[frozenAddr] = preReleaseAmounts[frozenAddr].add(timePair.amount);\n', '                        //owned.freezeAccount(frozenAddr, true);\n', '                    } //else if (timePair.amount == 0 && timePair.remain == 0 && timePair.endTime == 0 && timePair.duration == 0) {\n', '                      //  removeLockedTime(frozenAddr, j);\n', '                    //}\n', '\n', '                    if (!released) {\n', '                        j = j.add(1);\n', '                    }\n', '                }\n', '\n', '                // we got some amount need to be released\n', '                if (preReleaseAmounts[frozenAddr] > 0) {\n', '                    owned.freezeAccount(frozenAddr, false);\n', '                    if (!owned.transferFrom(_target, _dest, preReleaseAmounts[frozenAddr])) {\n', '                        return false;\n', '                    }\n', '                }\n', '\n', '                // if all the frozen amounts had been released, then unlock the account finally\n', '                if (frozenTimes[frozenAddr].length == 0) {\n', '                    if (!removeAccount(i)) {\n', '                        return false;\n', '                    }                    \n', '                } else {\n', '                    // still has some tokens need to be released in future\n', '                    owned.freezeAccount(frozenAddr, true);\n', '                }\n', '\n', '                return true;\n', '            }          \n', '\n', '            i = i.add(1);\n', '        }\n', '        \n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev release the locked tokens owned by an account\n', '     *\n', '     * @param _targets the account addresses list that hold amounts of locked tokens\n', '     * @param _dests the secondary addresses list that will hold the released tokens for each target account\n', '     */\n', '    function releaseMultiWithStage(address[] _targets, address[] _dests) onlyOwner public returns (bool) {\n', '        //require(_tokenAddr != address(0));\n', '        require(_targets.length != 0);\n', '        require(_dests.length != 0);\n', '        assert(_targets.length == _dests.length);\n', '\n', '        uint256 i = 0;\n', '        while (i < _targets.length) {\n', '            if (!releaseWithStage(_targets[i], _dests[i])) {\n', '                return false;\n', '            }\n', '\n', '            i = i.add(1);\n', '        }\n', '\n', '        return true;\n', '    }\n', '}']
