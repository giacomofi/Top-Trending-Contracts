['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  \n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b); \n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '  event SetOwner(address indexed oldOwner, address indexed newOwner);\n', '  \n', '  constructor() internal {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function setOwner(address _newOwner) external onlyOwner {\n', '    emit SetOwner(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract Saleable is Ownable {\n', '\n', '  address public saler;\n', '  event SetSaler(address indexed oldSaler, address indexed newSaler);\n', '\n', '  modifier onlySaler() {\n', '    require(msg.sender == saler);\n', '    _;\n', '  }\n', '\n', '  function setSaler(address _newSaler) external onlyOwner {\n', '    emit SetSaler(saler, _newSaler);\n', '    saler = _newSaler;\n', '  }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '\n', '  bool public paused = false;\n', '\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  modifier notPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  modifier isPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  function pause() onlyOwner notPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  function unpause() onlyOwner isPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', 'contract ERC20Interface {\n', '    \n', '  function totalSupply() public view returns (uint256);\n', '  function decimals() public view returns (uint8);\n', '  function balanceOf(address _owner) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', ' \n', '  function allowance(address _owner, address _spender) public view returns (uint256);\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandToken is ERC20Interface {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '  uint256 public totalSupply;\n', '\n', '  mapping(address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply;\n', '  }\n', '  \n', '  function decimals() public view returns (uint8) {\n', '    return decimals;\n', '  }\n', '  \n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract BurnableToken is StandToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    emit Burn(burner, _value);\n', '  }\n', '}\n', '\n', 'contract IDCToken is BurnableToken, Pausable, Saleable {\n', '\n', '  address public addrTeam;\n', '  address public addrSale;\n', '  address public addrMine;\n', '\n', '  mapping(address => uint256) public tokenAngel;\n', '  mapping(address => uint256) public tokenPrivate;\n', '  mapping(address => uint256) public tokenCrowd;\n', '\n', '  uint256 public release = 0;\n', '  uint256 private teamLocked = 0;\n', '  \n', '  uint256 constant private DAY_10 = 10 days;\n', '  uint256 constant private DAY_90 = 90 days;\n', '  uint256 constant private DAY_120 = 120 days;\n', '  uint256 constant private DAY_150 = 150 days;\n', '  uint256 constant private DAY_180 = 180 days;\n', '  uint256 constant private DAY_360 = 360 days;\n', '  uint256 constant private DAY_720 = 720 days;\n', '  \n', '  event TransferToken(uint8 stage, address indexed to, uint256 value);\n', '  event TokenRelease(address caller, uint256 time);\n', '\n', '  constructor(address _team, address _sale, address _mine) public {\n', '    name = "IDC Token";\n', '    symbol = "IT";\n', '    decimals = 18;\n', '    totalSupply = 3*10**9*10**uint256(decimals); //3 billion        \n', '    \n', '    addrTeam = _team;\n', '    addrSale = _sale;\n', '    addrMine = _mine;\n', '    \n', '    balances[_team] = totalSupply.mul(2).div(5); //40% for team\n', '    balances[_sale] = totalSupply.mul(1).div(5); //20% for sale\n', '    balances[_mine] = totalSupply.mul(2).div(5); //40% for mining\n', '    teamLocked = balances[_team];    \n', '    \n', '    emit Transfer(0,_team,balances[_team]);\n', '    emit Transfer(0,_sale,balances[_sale]);\n', '    emit Transfer(0,_mine,balances[_mine]);\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) notPaused public returns (bool) {\n', '    if(msg.sender == addrTeam || tokenAngel[msg.sender] > 0 || tokenPrivate[msg.sender] > 0) {\n', '      require(balanceOfUnlocked(msg.sender) >= _value);\n', '    }\n', '    StandToken.transfer(_to, _value);\n', '    return true;\n', '  }\n', '  \n', '  function transferFrom(address _from, address _to, uint256 _value) notPaused public returns (bool) {\n', '    if(_from == addrTeam || tokenAngel[_from] > 0 || tokenPrivate[_from] > 0) {\n', '      require(balanceOfUnlocked(_from) >= _value);\n', '    }\n', '    StandToken.transferFrom(_from, _to, _value);\n', '    return true;\n', '  }  \n', '  \n', '  function balanceOfUnlocked(address _sender) public view returns (uint256) {\n', '    require(release > 0 && now > release);\n', '    uint256 tmPast = now.sub(release);\n', '    uint256 balance = balanceOf(_sender);\n', '    \n', '    if(_sender == addrTeam) {\n', '      if(tmPast < DAY_180) {\n', '        balance = balance.sub(teamLocked);\n', '      }\n', '      else if(tmPast >= DAY_180 && tmPast < DAY_360) {\n', '        balance = balance.sub(teamLocked.mul(7).div(10));\n', '      }\n', '      else if(tmPast >= DAY_360 && tmPast < DAY_720) {\n', '        balance = balance.sub(teamLocked.mul(4).div(10));\n', '      }\n', '    }\n', '    if(tokenAngel[_sender] > 0) {\n', '      if(tmPast < DAY_120) {\n', '        balance = balance.sub(tokenAngel[_sender]);\n', '      }\n', '      else if(tmPast >= DAY_120 && tmPast < DAY_150) {\n', '        balance = balance.sub(tokenAngel[_sender].mul(7).div(10));\n', '      }\n', '      else if(tmPast >= DAY_150 && tmPast < DAY_180) {\n', '        balance = balance.sub(tokenAngel[_sender].mul(4).div(10));\n', '      }\n', '    }\n', '    if(tokenPrivate[_sender] > 0) {\n', '      if(tmPast < DAY_90) {\n', '        balance = balance.sub(tokenPrivate[_sender].div(2));\n', '      }\n', '    }\n', '    return balance;\n', '  }\n', '  \n', '  function transferToken(uint8 _stage, address _to, uint256 _tokens) onlySaler external payable {\n', '    require(_stage >= 0 && _stage <= 2);\n', '    if(_stage == 0) { \n', '      tokenAngel[_to] = tokenAngel[_to].add(_tokens);\n', '    }\n', '    else if(_stage == 1) {\n', '      tokenPrivate[_to] = tokenPrivate[_to].add(_tokens);\n', '    }\n', '    else if(_stage == 2) { \n', '      tokenCrowd[_to] = tokenCrowd[_to].add(_tokens);\n', '    }\n', '    balances[addrSale] = balances[addrSale].sub(_tokens);\n', '    balances[_to] = balances[_to].add(_tokens);\n', '    emit Transfer(addrSale, _to, _tokens);\n', '    emit TransferToken(_stage, _to, _tokens);\n', '  }\n', '\n', '  function burnToken(uint256 _tokens) onlySaler external returns (bool) {\n', '    require(_tokens > 0);\n', '    balances[addrSale] = balances[addrSale].sub(_tokens);\n', '    totalSupply = totalSupply.sub(_tokens);\n', '    emit Burn(addrSale, _tokens);\n', '  }\n', '  \n', '  function tokenRelease() onlySaler external returns (bool) {\n', '    require(release == 0);\n', '    release = now + DAY_10;\n', '    emit TokenRelease(msg.sender, release);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract IDCSale is Pausable {\n', '  \n', '  using SafeMath for uint256;\n', '\n', '  IDCToken private token;\n', '  address public beneficiary;\n', '\n', '  enum Stage { Angel, Private, Crowd, Finalized, Failed }\n', '  Stage private stage = Stage.Angel;\n', '  uint256 public stageBegin = 0;\n', '  uint256 public stageLength = DAY_30;\n', '  \n', '  uint256 public angelGoal = 0;\n', '  uint256 public angelSaled = 0;\n', '  uint256 public privGoal = 0; \n', '  uint256 public privSaled = 0;\n', '  uint256 private angelSoftCap = 0; \n', '\n', '  uint256 constant private DAY_10 = 10 days;\n', '  uint256 constant private DAY_20 = 20 days;\n', '  uint256 constant private DAY_30 = 30 days;\n', '\n', '  uint256 constant private MIN_ANGLE = 500 ether;\n', '  uint256 constant private MIN_PRIV = 50 ether;\n', '  \n', '  mapping(address => uint256) public recvEthers;\n', '\n', '  event RecvEther(address sender, uint256 ethers);\n', '  event WithdrawEther(address sender, uint256 ethers);\n', '  event RefundEther(address sender, uint256 ethers);\n', '  \n', '  constructor(address _token, address _beneficiary) public {\n', '    require(_token != 0 && _beneficiary != 0);\n', '\n', '    token = IDCToken(_token); \n', '    beneficiary = _beneficiary;\n', '\n', '    uint256 stageGoal = 3*10**8*10**uint256(token.decimals());\n', '    angelGoal = stageGoal; \n', '    privGoal = stageGoal;\n', '    angelSoftCap = stageGoal.div(3);\n', '  }\n', '  \n', '  function() external notPaused payable {\n', '    require(stage < Stage.Finalized);\n', '    updateStageByTime();\n', '    uint256 tokens = msg.value.mul(getPrice());\n', '\n', '    if(stage == Stage.Angel) {\n', '      require(msg.value >= MIN_ANGLE && angelSaled.add(tokens) <= angelGoal);\n', '      token.transferToken(0, msg.sender, tokens);\n', '      angelSaled = angelSaled.add(tokens);\n', '      recvEthers[msg.sender] = recvEthers[msg.sender].add(msg.value);\n', '      emit RecvEther(msg.sender, msg.value);\n', '    } \n', '    else if(stage == Stage.Private) {\n', '      require(msg.value >= MIN_PRIV && privSaled.add(tokens) <= privGoal);\n', '      token.transferToken(1, msg.sender, tokens);\n', '      privSaled = privSaled.add(tokens);\n', '      recvEthers[msg.sender] = recvEthers[msg.sender].add(msg.value);\n', '      emit RecvEther(msg.sender, msg.value);\n', '    }\n', '    else if(stage == Stage.Crowd) {\n', '      require(privSaled.add(tokens) <= privGoal);\n', '      token.transferToken(2, msg.sender, tokens);\n', '      privSaled = privSaled.add(tokens);\n', '      recvEthers[msg.sender] = recvEthers[msg.sender].add(msg.value);\n', '      emit RecvEther(msg.sender, msg.value);\n', '    }\n', '\n', '    updateStageBySaled();\n', '    if(stage == Stage.Finalized) {\n', '      token.tokenRelease();\n', '      if(angelSaled < angelGoal) {\n', '        token.burnToken(angelGoal.sub(angelSaled));\n', '      }\n', '      if(privSaled < privGoal) {\n', '        token.burnToken(privGoal.sub(privSaled));\n', '      }\n', '    }\n', '  }\n', '\n', '  function updateStageByTime() private {\n', '    if(stageBegin == 0)  {\n', '        stageBegin = now;\n', '    }\n', '    uint256 stagePast = now.sub(stageBegin);\n', '    if(stage == Stage.Angel) {\n', '      if(stagePast > stageLength) {\n', '        if(angelSaled >= angelSoftCap) {\n', '          stage = Stage.Private;\n', '        }\n', '        else {\n', '          stage = Stage.Failed;\n', '        }\n', '        stageBegin = now;\n', '        stageLength = DAY_30;\n', '      }\n', '    }\n', '    else if(stage == Stage.Private) {\n', '      if(stagePast > stageLength) {\n', '        stage = Stage.Crowd;\n', '        stageBegin = now;\n', '        stageLength = DAY_30;\n', '      } \n', '    }\n', '    else if(stage == Stage.Crowd) { \n', '      if(stagePast > stageLength) {\n', '        stage = Stage.Finalized;\n', '        stageBegin = now;\n', '      } \n', '    }\n', '  }\n', '  \n', '  function updateStageBySaled() private {\n', '    if(stage == Stage.Angel) {\n', '      if(angelSaled > angelGoal.sub(MIN_ANGLE.mul(getPrice()))) {\n', '        stage = Stage.Private;\n', '        stageBegin = now;\n', '        stageLength = DAY_30;\n', '      }\n', '    }\n', '    else if(stage == Stage.Private) {\n', '      if(privSaled > privGoal.sub(MIN_PRIV.mul(getPrice()))) {\n', '        stage = Stage.Finalized;\n', '        stageBegin = now;\n', '      }\n', '    }\n', '    else if(stage == Stage.Crowd) { \n', '      if(privSaled >= privGoal) {\n', '        stage = Stage.Finalized;\n', '        stageBegin = now;\n', '      } \n', '    }\n', '  }\n', '  \n', '  function getPrice() public view returns (uint32) {\n', '    if(stage == Stage.Angel) {\n', '      return 8000;  \n', '    }\n', '    else if(stage == Stage.Private) {\n', '      return 5000;  \n', '    }\n', '    else if(stage == Stage.Crowd) {\n', '      uint256 stagePast = now.sub(stageBegin);\n', '      if(stagePast <= DAY_10) {\n', '        return 4000;  \n', '      }\n', '      else if(stagePast > DAY_10 && stagePast <= DAY_20) {\n', '        return 3000;  \n', '      }\n', '      else if(stagePast > DAY_20 && stagePast <= DAY_30) {\n', '        return 2000;  \n', '      }\n', '    }\n', '    return 2000;\n', '  }\n', '  \n', '  function getStageInfo() public view returns (uint8, uint256, uint256) {\n', '    require(stageBegin != 0);\n', '\n', '    uint256 stageUnsold = 0;\n', '    if(stage == Stage.Angel) {\n', '      stageUnsold = angelGoal - angelSaled;  \n', '    }\n', '    else if(stage == Stage.Private || stage == Stage.Crowd) {\n', '      stageUnsold = privGoal - privSaled;  \n', '    }\n', '    uint256 stageRemain = 0;\n', '    if(stageBegin.add(stageLength) > now) {\n', '        stageRemain = stageBegin.add(stageLength).sub(now);\n', '    }\n', '    return (uint8(stage), stageUnsold, stageRemain);\n', '  }\n', '  \n', '  function setStageLength(uint256 _seconds) onlyOwner external {\n', '    require(stageBegin + _seconds > now);\n', '    stageLength = _seconds;\n', '  }\n', '\n', '  function withdrawEther(uint256 _ethers) onlyOwner external returns (bool) {\n', '    require(_ethers > 0 && _ethers <= address(this).balance);\n', '    \n', '    beneficiary.transfer(_ethers);\n', '    emit WithdrawEther(beneficiary, _ethers);\n', '    return true;\n', '  }\n', '  \n', '  function refundEther() external returns (bool) {\n', '    require(stage == Stage.Failed); \n', '    uint256 ethers = recvEthers[msg.sender];\n', '    assert(ethers > 0);\n', '    recvEthers[msg.sender] = 0;\n', '    \n', '    msg.sender.transfer(ethers);\n', '    emit RefundEther(msg.sender, ethers);\n', '    return true;\n', '  }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  \n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b); \n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '  event SetOwner(address indexed oldOwner, address indexed newOwner);\n', '  \n', '  constructor() internal {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function setOwner(address _newOwner) external onlyOwner {\n', '    emit SetOwner(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract Saleable is Ownable {\n', '\n', '  address public saler;\n', '  event SetSaler(address indexed oldSaler, address indexed newSaler);\n', '\n', '  modifier onlySaler() {\n', '    require(msg.sender == saler);\n', '    _;\n', '  }\n', '\n', '  function setSaler(address _newSaler) external onlyOwner {\n', '    emit SetSaler(saler, _newSaler);\n', '    saler = _newSaler;\n', '  }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '\n', '  bool public paused = false;\n', '\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  modifier notPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  modifier isPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  function pause() onlyOwner notPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  function unpause() onlyOwner isPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', 'contract ERC20Interface {\n', '    \n', '  function totalSupply() public view returns (uint256);\n', '  function decimals() public view returns (uint8);\n', '  function balanceOf(address _owner) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', ' \n', '  function allowance(address _owner, address _spender) public view returns (uint256);\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandToken is ERC20Interface {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '  uint256 public totalSupply;\n', '\n', '  mapping(address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply;\n', '  }\n', '  \n', '  function decimals() public view returns (uint8) {\n', '    return decimals;\n', '  }\n', '  \n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract BurnableToken is StandToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    emit Burn(burner, _value);\n', '  }\n', '}\n', '\n', 'contract IDCToken is BurnableToken, Pausable, Saleable {\n', '\n', '  address public addrTeam;\n', '  address public addrSale;\n', '  address public addrMine;\n', '\n', '  mapping(address => uint256) public tokenAngel;\n', '  mapping(address => uint256) public tokenPrivate;\n', '  mapping(address => uint256) public tokenCrowd;\n', '\n', '  uint256 public release = 0;\n', '  uint256 private teamLocked = 0;\n', '  \n', '  uint256 constant private DAY_10 = 10 days;\n', '  uint256 constant private DAY_90 = 90 days;\n', '  uint256 constant private DAY_120 = 120 days;\n', '  uint256 constant private DAY_150 = 150 days;\n', '  uint256 constant private DAY_180 = 180 days;\n', '  uint256 constant private DAY_360 = 360 days;\n', '  uint256 constant private DAY_720 = 720 days;\n', '  \n', '  event TransferToken(uint8 stage, address indexed to, uint256 value);\n', '  event TokenRelease(address caller, uint256 time);\n', '\n', '  constructor(address _team, address _sale, address _mine) public {\n', '    name = "IDC Token";\n', '    symbol = "IT";\n', '    decimals = 18;\n', '    totalSupply = 3*10**9*10**uint256(decimals); //3 billion        \n', '    \n', '    addrTeam = _team;\n', '    addrSale = _sale;\n', '    addrMine = _mine;\n', '    \n', '    balances[_team] = totalSupply.mul(2).div(5); //40% for team\n', '    balances[_sale] = totalSupply.mul(1).div(5); //20% for sale\n', '    balances[_mine] = totalSupply.mul(2).div(5); //40% for mining\n', '    teamLocked = balances[_team];    \n', '    \n', '    emit Transfer(0,_team,balances[_team]);\n', '    emit Transfer(0,_sale,balances[_sale]);\n', '    emit Transfer(0,_mine,balances[_mine]);\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) notPaused public returns (bool) {\n', '    if(msg.sender == addrTeam || tokenAngel[msg.sender] > 0 || tokenPrivate[msg.sender] > 0) {\n', '      require(balanceOfUnlocked(msg.sender) >= _value);\n', '    }\n', '    StandToken.transfer(_to, _value);\n', '    return true;\n', '  }\n', '  \n', '  function transferFrom(address _from, address _to, uint256 _value) notPaused public returns (bool) {\n', '    if(_from == addrTeam || tokenAngel[_from] > 0 || tokenPrivate[_from] > 0) {\n', '      require(balanceOfUnlocked(_from) >= _value);\n', '    }\n', '    StandToken.transferFrom(_from, _to, _value);\n', '    return true;\n', '  }  \n', '  \n', '  function balanceOfUnlocked(address _sender) public view returns (uint256) {\n', '    require(release > 0 && now > release);\n', '    uint256 tmPast = now.sub(release);\n', '    uint256 balance = balanceOf(_sender);\n', '    \n', '    if(_sender == addrTeam) {\n', '      if(tmPast < DAY_180) {\n', '        balance = balance.sub(teamLocked);\n', '      }\n', '      else if(tmPast >= DAY_180 && tmPast < DAY_360) {\n', '        balance = balance.sub(teamLocked.mul(7).div(10));\n', '      }\n', '      else if(tmPast >= DAY_360 && tmPast < DAY_720) {\n', '        balance = balance.sub(teamLocked.mul(4).div(10));\n', '      }\n', '    }\n', '    if(tokenAngel[_sender] > 0) {\n', '      if(tmPast < DAY_120) {\n', '        balance = balance.sub(tokenAngel[_sender]);\n', '      }\n', '      else if(tmPast >= DAY_120 && tmPast < DAY_150) {\n', '        balance = balance.sub(tokenAngel[_sender].mul(7).div(10));\n', '      }\n', '      else if(tmPast >= DAY_150 && tmPast < DAY_180) {\n', '        balance = balance.sub(tokenAngel[_sender].mul(4).div(10));\n', '      }\n', '    }\n', '    if(tokenPrivate[_sender] > 0) {\n', '      if(tmPast < DAY_90) {\n', '        balance = balance.sub(tokenPrivate[_sender].div(2));\n', '      }\n', '    }\n', '    return balance;\n', '  }\n', '  \n', '  function transferToken(uint8 _stage, address _to, uint256 _tokens) onlySaler external payable {\n', '    require(_stage >= 0 && _stage <= 2);\n', '    if(_stage == 0) { \n', '      tokenAngel[_to] = tokenAngel[_to].add(_tokens);\n', '    }\n', '    else if(_stage == 1) {\n', '      tokenPrivate[_to] = tokenPrivate[_to].add(_tokens);\n', '    }\n', '    else if(_stage == 2) { \n', '      tokenCrowd[_to] = tokenCrowd[_to].add(_tokens);\n', '    }\n', '    balances[addrSale] = balances[addrSale].sub(_tokens);\n', '    balances[_to] = balances[_to].add(_tokens);\n', '    emit Transfer(addrSale, _to, _tokens);\n', '    emit TransferToken(_stage, _to, _tokens);\n', '  }\n', '\n', '  function burnToken(uint256 _tokens) onlySaler external returns (bool) {\n', '    require(_tokens > 0);\n', '    balances[addrSale] = balances[addrSale].sub(_tokens);\n', '    totalSupply = totalSupply.sub(_tokens);\n', '    emit Burn(addrSale, _tokens);\n', '  }\n', '  \n', '  function tokenRelease() onlySaler external returns (bool) {\n', '    require(release == 0);\n', '    release = now + DAY_10;\n', '    emit TokenRelease(msg.sender, release);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract IDCSale is Pausable {\n', '  \n', '  using SafeMath for uint256;\n', '\n', '  IDCToken private token;\n', '  address public beneficiary;\n', '\n', '  enum Stage { Angel, Private, Crowd, Finalized, Failed }\n', '  Stage private stage = Stage.Angel;\n', '  uint256 public stageBegin = 0;\n', '  uint256 public stageLength = DAY_30;\n', '  \n', '  uint256 public angelGoal = 0;\n', '  uint256 public angelSaled = 0;\n', '  uint256 public privGoal = 0; \n', '  uint256 public privSaled = 0;\n', '  uint256 private angelSoftCap = 0; \n', '\n', '  uint256 constant private DAY_10 = 10 days;\n', '  uint256 constant private DAY_20 = 20 days;\n', '  uint256 constant private DAY_30 = 30 days;\n', '\n', '  uint256 constant private MIN_ANGLE = 500 ether;\n', '  uint256 constant private MIN_PRIV = 50 ether;\n', '  \n', '  mapping(address => uint256) public recvEthers;\n', '\n', '  event RecvEther(address sender, uint256 ethers);\n', '  event WithdrawEther(address sender, uint256 ethers);\n', '  event RefundEther(address sender, uint256 ethers);\n', '  \n', '  constructor(address _token, address _beneficiary) public {\n', '    require(_token != 0 && _beneficiary != 0);\n', '\n', '    token = IDCToken(_token); \n', '    beneficiary = _beneficiary;\n', '\n', '    uint256 stageGoal = 3*10**8*10**uint256(token.decimals());\n', '    angelGoal = stageGoal; \n', '    privGoal = stageGoal;\n', '    angelSoftCap = stageGoal.div(3);\n', '  }\n', '  \n', '  function() external notPaused payable {\n', '    require(stage < Stage.Finalized);\n', '    updateStageByTime();\n', '    uint256 tokens = msg.value.mul(getPrice());\n', '\n', '    if(stage == Stage.Angel) {\n', '      require(msg.value >= MIN_ANGLE && angelSaled.add(tokens) <= angelGoal);\n', '      token.transferToken(0, msg.sender, tokens);\n', '      angelSaled = angelSaled.add(tokens);\n', '      recvEthers[msg.sender] = recvEthers[msg.sender].add(msg.value);\n', '      emit RecvEther(msg.sender, msg.value);\n', '    } \n', '    else if(stage == Stage.Private) {\n', '      require(msg.value >= MIN_PRIV && privSaled.add(tokens) <= privGoal);\n', '      token.transferToken(1, msg.sender, tokens);\n', '      privSaled = privSaled.add(tokens);\n', '      recvEthers[msg.sender] = recvEthers[msg.sender].add(msg.value);\n', '      emit RecvEther(msg.sender, msg.value);\n', '    }\n', '    else if(stage == Stage.Crowd) {\n', '      require(privSaled.add(tokens) <= privGoal);\n', '      token.transferToken(2, msg.sender, tokens);\n', '      privSaled = privSaled.add(tokens);\n', '      recvEthers[msg.sender] = recvEthers[msg.sender].add(msg.value);\n', '      emit RecvEther(msg.sender, msg.value);\n', '    }\n', '\n', '    updateStageBySaled();\n', '    if(stage == Stage.Finalized) {\n', '      token.tokenRelease();\n', '      if(angelSaled < angelGoal) {\n', '        token.burnToken(angelGoal.sub(angelSaled));\n', '      }\n', '      if(privSaled < privGoal) {\n', '        token.burnToken(privGoal.sub(privSaled));\n', '      }\n', '    }\n', '  }\n', '\n', '  function updateStageByTime() private {\n', '    if(stageBegin == 0)  {\n', '        stageBegin = now;\n', '    }\n', '    uint256 stagePast = now.sub(stageBegin);\n', '    if(stage == Stage.Angel) {\n', '      if(stagePast > stageLength) {\n', '        if(angelSaled >= angelSoftCap) {\n', '          stage = Stage.Private;\n', '        }\n', '        else {\n', '          stage = Stage.Failed;\n', '        }\n', '        stageBegin = now;\n', '        stageLength = DAY_30;\n', '      }\n', '    }\n', '    else if(stage == Stage.Private) {\n', '      if(stagePast > stageLength) {\n', '        stage = Stage.Crowd;\n', '        stageBegin = now;\n', '        stageLength = DAY_30;\n', '      } \n', '    }\n', '    else if(stage == Stage.Crowd) { \n', '      if(stagePast > stageLength) {\n', '        stage = Stage.Finalized;\n', '        stageBegin = now;\n', '      } \n', '    }\n', '  }\n', '  \n', '  function updateStageBySaled() private {\n', '    if(stage == Stage.Angel) {\n', '      if(angelSaled > angelGoal.sub(MIN_ANGLE.mul(getPrice()))) {\n', '        stage = Stage.Private;\n', '        stageBegin = now;\n', '        stageLength = DAY_30;\n', '      }\n', '    }\n', '    else if(stage == Stage.Private) {\n', '      if(privSaled > privGoal.sub(MIN_PRIV.mul(getPrice()))) {\n', '        stage = Stage.Finalized;\n', '        stageBegin = now;\n', '      }\n', '    }\n', '    else if(stage == Stage.Crowd) { \n', '      if(privSaled >= privGoal) {\n', '        stage = Stage.Finalized;\n', '        stageBegin = now;\n', '      } \n', '    }\n', '  }\n', '  \n', '  function getPrice() public view returns (uint32) {\n', '    if(stage == Stage.Angel) {\n', '      return 8000;  \n', '    }\n', '    else if(stage == Stage.Private) {\n', '      return 5000;  \n', '    }\n', '    else if(stage == Stage.Crowd) {\n', '      uint256 stagePast = now.sub(stageBegin);\n', '      if(stagePast <= DAY_10) {\n', '        return 4000;  \n', '      }\n', '      else if(stagePast > DAY_10 && stagePast <= DAY_20) {\n', '        return 3000;  \n', '      }\n', '      else if(stagePast > DAY_20 && stagePast <= DAY_30) {\n', '        return 2000;  \n', '      }\n', '    }\n', '    return 2000;\n', '  }\n', '  \n', '  function getStageInfo() public view returns (uint8, uint256, uint256) {\n', '    require(stageBegin != 0);\n', '\n', '    uint256 stageUnsold = 0;\n', '    if(stage == Stage.Angel) {\n', '      stageUnsold = angelGoal - angelSaled;  \n', '    }\n', '    else if(stage == Stage.Private || stage == Stage.Crowd) {\n', '      stageUnsold = privGoal - privSaled;  \n', '    }\n', '    uint256 stageRemain = 0;\n', '    if(stageBegin.add(stageLength) > now) {\n', '        stageRemain = stageBegin.add(stageLength).sub(now);\n', '    }\n', '    return (uint8(stage), stageUnsold, stageRemain);\n', '  }\n', '  \n', '  function setStageLength(uint256 _seconds) onlyOwner external {\n', '    require(stageBegin + _seconds > now);\n', '    stageLength = _seconds;\n', '  }\n', '\n', '  function withdrawEther(uint256 _ethers) onlyOwner external returns (bool) {\n', '    require(_ethers > 0 && _ethers <= address(this).balance);\n', '    \n', '    beneficiary.transfer(_ethers);\n', '    emit WithdrawEther(beneficiary, _ethers);\n', '    return true;\n', '  }\n', '  \n', '  function refundEther() external returns (bool) {\n', '    require(stage == Stage.Failed); \n', '    uint256 ethers = recvEthers[msg.sender];\n', '    assert(ethers > 0);\n', '    recvEthers[msg.sender] = 0;\n', '    \n', '    msg.sender.transfer(ethers);\n', '    emit RefundEther(msg.sender, ethers);\n', '    return true;\n', '  }\n', '}']
