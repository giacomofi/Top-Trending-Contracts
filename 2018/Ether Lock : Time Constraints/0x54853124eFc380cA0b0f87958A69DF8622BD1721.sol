['pragma solidity ^0.4.18;\n', '\n', 'contract SafeMath {\n', '  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '\n', '}\n', 'contract ERC20 {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner)public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value)public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value)public returns (bool success);\n', '    function approve(address _spender, uint256 _value)public returns (bool success);\n', '    function allowance(address _owner, address _spender)public constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', '\n', 'contract StdToken is ERC20,SafeMath {\n', '\n', "    // validates an address - currently only checks that it isn't null\n", '   modifier validAddress(address _address) {\n', '        require(_address != 0x0);\n', '        _;\n', '    }\n', '\n', '  mapping(address => uint) balances;\n', '  mapping (address => mapping (address => uint)) allowed;\n', '  \n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    \n', '  function transfer(address _to, uint _value) public validAddress(_to)  returns (bool success){\n', '    if(msg.sender != _to){\n', '    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '    }\n', '  }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)public validAddress(_to)  returns (bool success) {\n', '        if (_value <= 0) revert();\n', '        if (balances[_from] < _value) revert();\n', '        if (balances[_to] + _value < balances[_to]) revert();\n', '        if (_value > allowed[_from][msg.sender]) revert();\n', '        balances[_from] = safeSub(balances[_from], _value);                           \n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '  function balanceOf(address _owner)public constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint _value)public returns (bool success) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender)public constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  function Ownable()public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner)public onlyOwner {\n', '    if (newOwner != owner) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '}\n', '\n', '\n', 'contract RAM_Token is StdToken,Ownable{\n', '    string public name="RAM Token";\n', '    string public symbol="RAM";\n', '    uint public decimals = 18;\n', '    uint256 TokenValue;\n', '    uint256 public minToken=1000;\n', '    uint256 public rate;\n', '    address stockWallet=0x7F5C9d6C36AB4BCC7Abd0054809bA88CF9Fed513;\n', '    address EthWallet=0x82FF0759301dd646C2bE5e27FDEcDF53a43568fd;\n', '    uint256 public limit;\n', '    uint public startTime;\n', '    uint public endTime;\n', '    bool public active;\n', '\n', '    \n', '    modifier isActive{\n', '        if(now>=startTime && now<=endTime && limit>0){\n', '        _;\n', '        }else{ if(now>endTime  || limit==0){\n', '                active=false;\n', '            }\n', '        revert();\n', '        }\n', '    }\n', '    function changeRate(uint _rate)external onlyOwner{\n', '        rate= _rate;\n', '    }\n', '    function changeMinToken(uint _minToken)external onlyOwner{\n', '        minToken=_minToken;\n', '    }\n', '    function activeEnd()external onlyOwner{\n', '        active=false;\n', '        startTime=0;\n', '        endTime=0;\n', '        limit=0;\n', '    }\n', '    \n', '    function RAM_Token()public onlyOwner{\n', '        rate=15000;\n', '        totalSupply= 700 * (10**6) * (10**decimals);\n', '        balances[stockWallet]= 200 * (10**6) * (10**decimals);\n', '        balances[owner] = 500 * (10**6) * (10**decimals);\n', '    }    \n', '    \n', '    function Mint(uint _value)public onlyOwner returns(uint256){\n', '        if(_value>0){\n', '        balances[owner] = safeAdd(balances[owner],_value);\n', '        totalSupply =safeAdd(totalSupply, _value);\n', '        return totalSupply;\n', '        }\n', '    }\n', '        \n', '    function burn(uint _value)public onlyOwner returns(uint256){\n', '        if(_value>0 && balances[msg.sender] >= _value){\n', '            balances[owner] = safeSub(balances[owner],_value);\n', '            totalSupply = safeSub(totalSupply,_value);\n', '            return totalSupply;\n', '        }\n', '    }\n', '   \n', '    function wihtdraw()public onlyOwner returns(bool success){\n', '        if(this.balance > 0){\n', '            msg.sender.transfer(this.balance);\n', '            return true;\n', '        }\n', '    }\n', '    \n', '    function crowdsale(uint256 _limit,uint _startTime,uint _endTime)external onlyOwner{\n', '    if(active){ revert();}\n', '        endTime = _endTime;\n', '    if(now>=endTime){ revert();}\n', '    if(_limit==0 || _limit > balances[owner]){revert();}\n', '        startTime= _startTime;\n', '        limit = _limit * (10**decimals);\n', '        active=true;\n', '    }\n', '\n', '    function ()public isActive payable{\n', '        if(!active)revert();\n', '        if(msg.value<=0)revert();\n', '        TokenValue=msg.value*rate;\n', '        if(TokenValue<minToken*(10**decimals))revert();\n', '        if(limit -TokenValue<0)revert();\n', '        balances[msg.sender]=safeAdd(balances[msg.sender],TokenValue);\n', '        balances[owner]=safeSub(balances[owner],TokenValue);\n', '        limit = safeSub(limit,TokenValue);\n', '        Transfer(owner,msg.sender,TokenValue);\n', '        EthWallet.transfer(msg.value);\n', '    }\n', '}']