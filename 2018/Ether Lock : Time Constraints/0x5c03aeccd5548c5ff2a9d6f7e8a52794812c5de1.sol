['pragma solidity 0.4.19;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    require(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal returns (uint256) {\n', '    //   require(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    //   require(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal returns (uint256) {\n', '    require(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ControllerInterface {\n', '\n', '  function totalSupply() constant returns (uint256);\n', '  function balanceOf(address _owner) constant returns (uint256);\n', '  function allowance(address _owner, address _spender) constant returns (uint256);\n', '\n', '  function approve(address owner, address spender, uint256 value) public returns (bool);\n', '  function transfer(address owner, address to, uint value, bytes data) public returns (bool);\n', '  function transferFrom(address owner, address from, address to, uint256 amount, bytes data) public returns (bool);\n', '  function mint(address _to, uint256 _amount)  public returns (bool);\n', '}\n', '\n', '/**\n', ' * @title CrowdsaleBase\n', ' * @dev CrowdsaleBase is a base contract for managing a token crowdsale.\n', ' * All crowdsale contracts must inherit this contract.\n', ' */\n', '\n', 'contract CrowdsaleBase {\n', '  using SafeMath for uint256;\n', '\n', '  address public controller;\n', '  uint256 public startTime;\n', '  address public wallet;\n', '  uint256 public weiRaised;\n', '  uint256 public endTime;\n', '\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  modifier onlyController() {\n', '    require(msg.sender == controller);\n', '    _;\n', '  }\n', '\n', '  function CrowdsaleBase(uint256 _startTime, address _wallet, address _controller) public {\n', '    require(_wallet != address(0));\n', '\n', '    controller = _controller;\n', '    startTime = _startTime;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  function forwardFunds() internal {\n', '    require(wallet.call.gas(2000).value(msg.value)());\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // internal token purchase function\n', '  function _buyTokens(address beneficiary, uint256 rate) internal returns (uint256 tokens) {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    ControllerInterface(controller).mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a  contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale is CrowdsaleBase {\n', '\n', '  uint256 public rate;\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, address _controller) public\n', '    CrowdsaleBase(_startTime, _wallet, _controller)\n', '  {\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title TokenCappedCrowdsale\n', ' * @dev Extension of Crowdsale with a max amount of tokens to be bought\n', ' */\n', 'contract TokenCappedCrowdsale is Crowdsale {\n', '\n', '  uint256 public tokenCap;\n', '  uint256 public totalSupply;\n', '\n', '  function TokenCappedCrowdsale(uint256 _tokenCap) public {\n', '      require(_tokenCap > 0);\n', '      tokenCap = _tokenCap;\n', '  }\n', '\n', '  function setSupply(uint256 newSupply) internal constant returns (bool) {\n', '    totalSupply = newSupply;\n', '    return tokenCap >= totalSupply;\n', '  }\n', '\n', '}\n', '\n', 'contract SGPayPresale is TokenCappedCrowdsale {\n', '\n', '\n', '  function SGPayPresale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, address controller, uint256 _cap)\n', '    Crowdsale(_startTime, _endTime, _rate, _wallet, controller)\n', '    TokenCappedCrowdsale(_cap)\n', '  {\n', '\n', '  }\n', '\n', '  function buyTokens(address beneficiary) public payable {\n', '    uint256 tokens = _buyTokens(beneficiary, rate);\n', '    if(!setSupply(totalSupply.add(tokens))) revert();\n', '  }\n', '\n', '  function changeRate(uint256 _newValue) public onlyController {\n', '    rate = _newValue;\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '}']