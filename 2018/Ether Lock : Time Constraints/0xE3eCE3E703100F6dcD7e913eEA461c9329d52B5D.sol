['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  \n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '  \n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  \n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'interface token {\n', '    function transfer(address receiver, uint amount) external;\n', '    function burn(uint256 _value) external returns (bool success);\n', '}\n', '\n', 'contract Ownable {\n', '\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '}\n', '\n', 'contract HACHIKOCrowdsale is Ownable {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    uint256 public constant EXCHANGE_RATE = 200;\n', '    uint256 public constant START = 1537538400; // Friday, 21-Sep-18 14:00:00 UTC in RFC 2822 \n', '\n', '\n', '\n', '    uint256 availableTokens;\n', '    address addressToSendEthereum;\n', '    \n', '    uint public amountRaised;\n', '    uint public deadline;\n', '    uint public price;\n', '    token public tokenReward;\n', '    mapping(address => uint256) public balanceOf;\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Setup the owner\n', '     */\n', '    constructor(\n', '        address addressOfTokenUsedAsReward,\n', '        address _addressToSendEthereum\n', '    ) public {\n', '        availableTokens = 5000000 * 10 ** 18;\n', '        addressToSendEthereum = _addressToSendEthereum;\n', '        deadline = START + 42 days;\n', '        tokenReward = token(addressOfTokenUsedAsReward);\n', '    }\n', '\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function () public payable {\n', '        require(now < deadline && now >= START);\n', '        uint256 amount = msg.value;\n', '        uint256 tokens = amount * EXCHANGE_RATE;\n', '        uint256 bonus = getBonus(tokens);\n', '        tokens = tokens.add(bonus);\n', '        balanceOf[msg.sender] += tokens;\n', '        amountRaised += tokens;\n', '        availableTokens -= tokens;\n', '        tokenReward.transfer(msg.sender, tokens);\n', '        addressToSendEthereum.transfer(amount);\n', '    }\n', '    \n', '    \n', '    function getBonus(uint256 _tokens) public constant returns (uint256) {\n', '\n', '        require(_tokens > 0);\n', '        \n', '        if (START <= now && now < START + 1 days) {\n', '\n', '            return _tokens.mul(30).div(100); // 30% first day\n', '\n', '        } else if (START <= now && now < START + 1 weeks) {\n', '\n', '            return _tokens.div(4); // 25% first week\n', '\n', '        } else if (START + 1 weeks <= now && now < START + 2 weeks) {\n', '\n', '            return _tokens.div(5); // 20% second week\n', '\n', '        } else if (START + 2 weeks <= now && now < START + 3 weeks) {\n', '\n', '            return _tokens.mul(15).div(100); // 15% third week\n', '\n', '        } else if (START + 3 weeks <= now && now < START + 4 weeks) {\n', '\n', '            return _tokens.div(10); // 10% fourth week\n', '\n', '        } else if (START + 4 weeks <= now && now < START + 5 weeks) {\n', '\n', '            return _tokens.div(20); // 5% fifth week\n', '\n', '        } else {\n', '\n', '            return 0;\n', '\n', '        }\n', '    }\n', '\n', '    modifier afterDeadline() { \n', '        require(now >= deadline);\n', '        _; \n', '    }\n', '    \n', '    function sellForOtherCoins(address _address,uint amount)  public payable onlyOwner\n', '    {\n', '        uint256 tokens = amount;\n', '        uint256 bonus = getBonus(tokens);\n', '        tokens = tokens.add(bonus);\n', '        availableTokens -= tokens;\n', '        tokenReward.transfer(_address, tokens);\n', '    }\n', '    \n', '    function burnAfterIco() public onlyOwner returns (bool success){\n', '        uint256 balance = availableTokens;\n', '        tokenReward.burn(balance);\n', '        availableTokens = 0;\n', '        return true;\n', '    }\n', '\n', '    function tokensAvailable() public constant returns (uint256) {\n', '        return availableTokens;\n', '    }\n', '\n', '}']