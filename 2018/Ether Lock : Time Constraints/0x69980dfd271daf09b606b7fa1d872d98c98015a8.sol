['pragma solidity 0.4.25;\n', '\n', 'library SafeMath256 {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function pow(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        if (b == 0) return 1;\n', '\n', '        uint256 c = a ** b;\n', '        assert(c / (a ** (b - 1)) == a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    function _validateAddress(address _addr) internal pure {\n', '        require(_addr != address(0), "invalid address");\n', '    }\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "not a contract owner");\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _validateAddress(newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', 'contract Controllable is Ownable {\n', '    mapping(address => bool) controllers;\n', '\n', '    modifier onlyController {\n', '        require(_isController(msg.sender), "no controller rights");\n', '        _;\n', '    }\n', '\n', '    function _isController(address _controller) internal view returns (bool) {\n', '        return controllers[_controller];\n', '    }\n', '\n', '    function _setControllers(address[] _controllers) internal {\n', '        for (uint256 i = 0; i < _controllers.length; i++) {\n', '            _validateAddress(_controllers[i]);\n', '            controllers[_controllers[i]] = true;\n', '        }\n', '    }\n', '}\n', '\n', 'contract Upgradable is Controllable {\n', '    address[] internalDependencies;\n', '    address[] externalDependencies;\n', '\n', '    function getInternalDependencies() public view returns(address[]) {\n', '        return internalDependencies;\n', '    }\n', '\n', '    function getExternalDependencies() public view returns(address[]) {\n', '        return externalDependencies;\n', '    }\n', '\n', '    function setInternalDependencies(address[] _newDependencies) public onlyOwner {\n', '        for (uint256 i = 0; i < _newDependencies.length; i++) {\n', '            _validateAddress(_newDependencies[i]);\n', '        }\n', '        internalDependencies = _newDependencies;\n', '    }\n', '\n', '    function setExternalDependencies(address[] _newDependencies) public onlyOwner {\n', '        externalDependencies = _newDependencies;\n', '        _setControllers(_newDependencies);\n', '    }\n', '}\n', '\n', 'contract Core {\n', '    function isEggOwner(address, uint256) external view returns (bool);\n', '    function createEgg(address, uint8) external returns (uint256);\n', '    function sendToNest(uint256) external returns (bool, uint256, uint256, address);\n', '    function openEgg(address, uint256, uint256) internal returns (uint256);\n', '    function breed(address, uint256, uint256) external returns (uint256);\n', '    function setDragonRemainingHealthAndMana(uint256, uint32, uint32) external;\n', '    function increaseDragonExperience(uint256, uint256) external;\n', '    function upgradeDragonGenes(uint256, uint16[10]) external;\n', '    function increaseDragonWins(uint256) external;\n', '    function increaseDragonDefeats(uint256) external;\n', '    function setDragonTactics(uint256, uint8, uint8) external;\n', '    function setDragonName(uint256, string) external returns (bytes32);\n', '    function setDragonSpecialPeacefulSkill(uint256, uint8) external;\n', '    function useDragonSpecialPeacefulSkill(address, uint256, uint256) external;\n', '    function updateLeaderboardRewardTime() external;\n', '    function getDragonsFromLeaderboard() external view returns (uint256[10]);\n', '    function getLeaderboardRewards(uint256) external view returns (uint256[10]);\n', '}\n', '\n', 'contract Treasury {\n', '    uint256 public hatchingPrice;\n', '    function giveGold(address, uint256) external;\n', '    function takeGold(uint256) external;\n', '    function burnGold(uint256) external;\n', '    function remainingGold() external view returns (uint256);\n', '}\n', '\n', 'contract Getter {\n', '    function getDragonsAmount() external view returns (uint256);\n', '    function isDragonBreedingAllowed(uint256) external view returns (bool);\n', '    function getDragonNamePriceByLength(uint256) external view returns (uint256);\n', '    function isEggOnSale(uint256) external view returns (bool);\n', '    function isDragonOnSale(uint256) public view returns (bool);\n', '    function isBreedingOnSale(uint256) public view returns (bool);\n', '    function isDragonOwner(address, uint256) external view returns (bool);\n', '    function ownerOfDragon(uint256) public view returns (address);\n', '    function isDragonInGladiatorBattle(uint256) public view returns (bool);\n', '}\n', '\n', 'contract Distribution {\n', '    function claim(uint8) external returns (uint256, uint256, uint256);\n', '}\n', '\n', '\n', '\n', '\n', '//////////////CONTRACT//////////////\n', '\n', '\n', '\n', '\n', 'contract CoreController is Upgradable {\n', '    using SafeMath256 for uint256;\n', '\n', '    Core core;\n', '    Treasury treasury;\n', '    Getter getter;\n', '    Distribution distribution;\n', '\n', '    function _isDragonOwner(address _user, uint256 _id) internal view returns (bool) {\n', '        return getter.isDragonOwner(_user, _id);\n', '    }\n', '\n', '    function _checkTheDragonIsNotInGladiatorBattle(uint256 _id) internal view {\n', '        require(!getter.isDragonInGladiatorBattle(_id), "dragon participates in gladiator battle");\n', '    }\n', '\n', '    function _checkTheDragonIsNotOnSale(uint256 _id) internal view {\n', '        require(!getter.isDragonOnSale(_id), "dragon is on sale");\n', '    }\n', '\n', '    function _checkTheDragonIsNotOnBreeding(uint256 _id) internal view {\n', '        require(!getter.isBreedingOnSale(_id), "dragon is on breeding sale");\n', '    }\n', '\n', '    function _checkThatEnoughDNAPoints(uint256 _id) internal view {\n', '        require(getter.isDragonBreedingAllowed(_id), "dragon has no enough DNA points for breeding");\n', '    }\n', '\n', '    function _checkDragonOwner(address _user, uint256 _id) internal view {\n', '        require(_isDragonOwner(_user, _id), "not an owner");\n', '    }\n', '\n', '    function claimEgg(\n', '        address _sender,\n', '        uint8 _dragonType\n', '    ) external onlyController returns (\n', '        uint256 eggId,\n', '        uint256 restAmount,\n', '        uint256 lastBlock,\n', '        uint256 interval\n', '    ) {\n', '        (restAmount, lastBlock, interval) = distribution.claim(_dragonType);\n', '        eggId = core.createEgg(_sender, _dragonType);\n', '\n', '        uint256 _goldReward = treasury.hatchingPrice();\n', '        uint256 _goldAmount = treasury.remainingGold();\n', '        if (_goldReward > _goldAmount) _goldReward = _goldAmount;\n', '        treasury.giveGold(_sender, _goldReward);\n', '    }\n', '\n', '    // ACTIONS WITH OWN TOKEN\n', '\n', '    function sendToNest(\n', '        address _sender,\n', '        uint256 _eggId\n', '    ) external onlyController returns (bool, uint256, uint256, address) {\n', '        require(!getter.isEggOnSale(_eggId), "egg is on sale");\n', '        require(core.isEggOwner(_sender, _eggId), "not an egg owner");\n', '\n', '        uint256 _hatchingPrice = treasury.hatchingPrice();\n', '        treasury.takeGold(_hatchingPrice);\n', '        if (getter.getDragonsAmount() > 9997) { // 9997 + 2 (in the nest) + 1 (just sent) = 10000 dragons without gold burning\n', '            treasury.burnGold(_hatchingPrice.div(2));\n', '        }\n', '\n', '        return core.sendToNest(_eggId);\n', '    }\n', '\n', '    function breed(\n', '        address _sender,\n', '        uint256 _momId,\n', '        uint256 _dadId\n', '    ) external onlyController returns (uint256 eggId) {\n', '        _checkThatEnoughDNAPoints(_momId);\n', '        _checkThatEnoughDNAPoints(_dadId);\n', '        _checkTheDragonIsNotOnBreeding(_momId);\n', '        _checkTheDragonIsNotOnBreeding(_dadId);\n', '        _checkTheDragonIsNotOnSale(_momId);\n', '        _checkTheDragonIsNotOnSale(_dadId);\n', '        _checkTheDragonIsNotInGladiatorBattle(_momId);\n', '        _checkTheDragonIsNotInGladiatorBattle(_dadId);\n', '        _checkDragonOwner(_sender, _momId);\n', '        _checkDragonOwner(_sender, _dadId);\n', '        require(_momId != _dadId, "the same dragon");\n', '\n', '        return core.breed(_sender, _momId, _dadId);\n', '    }\n', '\n', '    function upgradeDragonGenes(\n', '        address _sender,\n', '        uint256 _id,\n', '        uint16[10] _dnaPoints\n', '    ) external onlyController {\n', '        _checkTheDragonIsNotOnBreeding(_id);\n', '        _checkTheDragonIsNotOnSale(_id);\n', '        _checkTheDragonIsNotInGladiatorBattle(_id);\n', '        _checkDragonOwner(_sender, _id);\n', '        core.upgradeDragonGenes(_id, _dnaPoints);\n', '    }\n', '\n', '    function setDragonTactics(\n', '        address _sender,\n', '        uint256 _id,\n', '        uint8 _melee,\n', '        uint8 _attack\n', '    ) external onlyController {\n', '        _checkDragonOwner(_sender, _id);\n', '        core.setDragonTactics(_id, _melee, _attack);\n', '    }\n', '\n', '    function setDragonName(\n', '        address _sender,\n', '        uint256 _id,\n', '        string _name\n', '    ) external onlyController returns (bytes32) {\n', '        _checkDragonOwner(_sender, _id);\n', '\n', '        uint256 _length = bytes(_name).length;\n', '        uint256 _price = getter.getDragonNamePriceByLength(_length);\n', '\n', '        if (_price > 0) {\n', '            treasury.takeGold(_price);\n', '        }\n', '\n', '        return core.setDragonName(_id, _name);\n', '    }\n', '\n', '    function setDragonSpecialPeacefulSkill(address _sender, uint256 _id, uint8 _class) external onlyController {\n', '        _checkDragonOwner(_sender, _id);\n', '        core.setDragonSpecialPeacefulSkill(_id, _class);\n', '    }\n', '\n', '    function useDragonSpecialPeacefulSkill(address _sender, uint256 _id, uint256 _target) external onlyController {\n', '        _checkDragonOwner(_sender, _id);\n', '        _checkTheDragonIsNotInGladiatorBattle(_id);\n', '        _checkTheDragonIsNotInGladiatorBattle(_target);\n', '        core.useDragonSpecialPeacefulSkill(_sender, _id, _target);\n', '    }\n', '\n', '    function distributeLeaderboardRewards() external onlyController returns (\n', '        uint256[10] dragons,\n', '        address[10] users\n', '    ) {\n', '        core.updateLeaderboardRewardTime();\n', '        uint256 _hatchingPrice = treasury.hatchingPrice();\n', '        uint256[10] memory _rewards = core.getLeaderboardRewards(_hatchingPrice);\n', '\n', '        dragons = core.getDragonsFromLeaderboard();\n', '        uint8 i;\n', '        for (i = 0; i < dragons.length; i++) {\n', '            if (dragons[i] == 0) continue;\n', '            users[i] = getter.ownerOfDragon(dragons[i]);\n', '        }\n', '\n', '        uint256 _remainingGold = treasury.remainingGold();\n', '        uint256 _reward;\n', '        for (i = 0; i < users.length; i++) {\n', '            if (_remainingGold == 0) break;\n', '            if (users[i] == address(0)) continue;\n', '\n', '            _reward = _rewards[i];\n', '            if (_reward > _remainingGold) {\n', '                _reward = _remainingGold;\n', '            }\n', '            treasury.giveGold(users[i], _reward);\n', '            _remainingGold = _remainingGold.sub(_reward);\n', '        }\n', '    }\n', '\n', '    // UPDATE CONTRACT\n', '\n', '    function setInternalDependencies(address[] _newDependencies) public onlyOwner {\n', '        super.setInternalDependencies(_newDependencies);\n', '\n', '        core = Core(_newDependencies[0]);\n', '        treasury = Treasury(_newDependencies[1]);\n', '        getter = Getter(_newDependencies[2]);\n', '        distribution = Distribution(_newDependencies[3]);\n', '    }\n', '}']