['pragma solidity ^0.4.18;\n', '\n', '// ----------------------------------------------------------------------------\n', '// &#39;Ethernational&#39; CROWDSALE token contract\n', '//\n', '// Deployed to : 0xD0FDf2ECd4CadE671a7EE1063393eC0eB90816FD\n', '// Symbol      : EIT\n', '// Name        : Ethernational\n', '// Decimals    : 18\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '    address public dividendsAccount;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '    \n', '    dividendsContract divC;\n', '    \n', '    function dividendsAcc(address _dividendsAccount) onlyOwner{\n', '        divC = dividendsContract(_dividendsAccount);\n', '        dividendsAccount = _dividendsAccount;\n', '    }\n', '    \n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '// token transfers\n', '// ----------------------------------------------------------------------------\n', 'contract Ethernational is ERC20Interface, Owned, SafeMath {\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '    uint public startDate;\n', '    uint public bonus1Ends;\n', '    uint public bonus2Ends;\n', '    uint public bonus3Ends;\n', '    uint public endDate;\n', '    uint public ETHinvested;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    function Ethernational() public {\n', '        symbol = "EIT";\n', '        name = "Ethernational";\n', '        decimals = 18;\n', '        bonus1Ends = now + 1 weeks;\n', '        bonus2Ends = now + 2 weeks;\n', '        bonus3Ends = now + 4 weeks;\n', '        endDate = now + 8 weeks;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '    \n', '    function invested() constant returns (uint){\n', '        return ETHinvested;\n', '    }\n', '\n', '\n', '    \n', '    \n', '\n', '\n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from token owner&#39;s account to `to` account\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        uint perc = ((balances[msg.sender] * 1000)/tokens);\n', '        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        Transfer(msg.sender, to, tokens);\n', '        divC.updatePaid(msg.sender,to,perc);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account\n', '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces\n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    //\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        uint perc = ((balances[from] * 1000)/tokens);\n', '        balances[from] = safeSub(balances[from], tokens);\n', '        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        Transfer(from, to, tokens);\n', '        divC.updatePaid(from,to,perc);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account. The `spender` contract function\n', '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // 500 ELG Tokens per 1 ETH\n', '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        require(now >= startDate && now <= endDate && msg.value > 1000000000000000);\n', '        uint tokens;\n', '        if (now <= bonus1Ends) {\n', '            tokens = msg.value * 1000;\n', '        } else if (now <= bonus2Ends) {\n', '            tokens = msg.value * 750;\n', '        } else if (now <= bonus3Ends) {\n', '            tokens = msg.value * 625;\n', '        } else {\n', '            tokens = msg.value * 500;\n', '        }\n', '        \n', '        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);\n', '        _totalSupply = safeAdd(_totalSupply, tokens);\n', '        Transfer(address(0), msg.sender, tokens);\n', '        owner.transfer(msg.value);\n', '        ETHinvested = ETHinvested + msg.value;\n', '    }\n', '    \n', '    function buyEIT() public payable {\n', '        require(now >= startDate && now <= endDate && msg.value > 1000000000000000);\n', '        uint tokens;\n', '        if (now <= bonus1Ends) {\n', '            tokens = msg.value * 1000;\n', '        } else if (now <= bonus2Ends) {\n', '            tokens = msg.value * 750;\n', '        } else if (now <= bonus3Ends) {\n', '            tokens = msg.value * 625;\n', '        } else {\n', '            tokens = msg.value * 500;\n', '        }\n', '        \n', '        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);\n', '        _totalSupply = safeAdd(_totalSupply, tokens);\n', '        Transfer(address(0), msg.sender, tokens);\n', '        owner.transfer(msg.value);\n', '        ETHinvested = ETHinvested + msg.value;\n', '    }\n', '    \n', '    \n', '    function bonusInfo() constant returns (uint,uint){\n', '        if (now <= bonus1Ends) {\n', '            return (100, (bonus1Ends - now));\n', '        } else if (now <= bonus2Ends) {\n', '            return (50, (bonus2Ends - now));\n', '        } else if (now <= bonus3Ends) {\n', '            return (25, (bonus3Ends - now));\n', '        } else {\n', '            return (0, 0);\n', '        }\n', '    }\n', '    \n', '    function ICOTimer() constant returns (uint){\n', '        if (now < endDate){\n', '            return (endDate - now);\n', '        }\n', '    }\n', '    \n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract dividendsContract is Owned{\n', '    \n', '    Ethernational dc;\n', '    mapping(address => uint) paid;\n', '    uint public totalSupply;\n', '    uint public totalPaid;\n', '    address public ICOaddress;\n', '    \n', '    function ICOaddress(address _t) onlyOwner{\n', '        dc = Ethernational(_t);\n', '        ICOaddress = _t;\n', '        totalSupply = dc.totalSupply() / 1000000000000;\n', '    }\n', '    \n', '    function() payable{\n', '    }\n', '    \n', '    function collectDividends(address member) public returns (uint result) {\n', '        require (msg.sender == member && dc.endDate() < now);\n', '        uint Ownes = dc.balanceOf(member) / 1000000000000;\n', '        uint payout = (((address(this).balance + totalPaid)/totalSupply)*Ownes) - paid[member];\n', '        member.transfer(payout);\n', '        paid[member] = paid[member] + payout;\n', '        totalPaid = totalPaid + payout;\n', '        return payout;\n', '    }\n', '    \n', '    function thisBalance() constant returns (uint){\n', '        return this.balance;\n', '    }\n', '    \n', '    function updatePaid(address from, address to, uint perc) {\n', '        require (msg.sender == ICOaddress);\n', '        uint val = ((paid[from] * 1000000) / perc) / 1000;\n', '        paid[from] = paid[from] - val;\n', '        paid[to] = paid[to] + val;\n', '    }\n', '    \n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '    \n', 'contract DailyDraw is Owned{\n', '    \n', '\n', '    \n', '    bytes32 public number;\n', '    uint public timeLimit;\n', '    uint public ticketsSold;\n', '    \n', '    struct Ticket {\n', '        address addr;\n', '        uint time;\n', '    }\n', '    \n', '    mapping (uint => Ticket) Tickets;\n', '\n', '    function start(bytes32 _var1) public {\n', '        if (timeLimit<1){\n', '            timeLimit = now;\n', '            number = _var1 ;\n', '        }\n', '    }\n', '\n', '    function () payable{\n', '        uint value = (msg.value)/10000000000000000;\n', '        require (now<(timeLimit+86400));\n', '            uint i = 0;\n', '            while (i++ < value) {\n', '                uint TicketNumber = ticketsSold + i;\n', '                Tickets[TicketNumber].addr = msg.sender;\n', '                Tickets[TicketNumber].time = now;\n', '            } \n', '            ticketsSold = ticketsSold + value;\n', '   }\n', '\n', '    function Play() payable{\n', '        uint value = msg.value/10000000000000000;\n', '        require (now<(timeLimit+86400));\n', '            uint i = 1;\n', '            while (i++ < value) {\n', '                uint TicketNumber = ticketsSold + i;\n', '                Tickets[TicketNumber].addr = msg.sender;\n', '                Tickets[TicketNumber].time = now;\n', '            } \n', '            ticketsSold = ticketsSold + value;\n', '   }\n', '\n', '\n', '    function balances() constant returns(uint, uint time){\n', '       return (ticketsSold, (timeLimit+86400)-now);\n', '   }\n', '\n', '\n', '    function winner(uint _theNumber, bytes32 newNumber) onlyOwner payable {\n', '        require ((timeLimit+86400)<now && number == keccak256(_theNumber));\n', '                \n', '                uint8 add1 = uint8 (Tickets[ticketsSold/4].addr);\n', '                uint8 add2 = uint8 (Tickets[ticketsSold/3].addr);\n', '       \n', '                uint8 time1 = uint8 (Tickets[ticketsSold/2].time);\n', '                uint8 time2 = uint8 (Tickets[ticketsSold/8].time);\n', '       \n', '                uint winningNumber = uint8 (((add1+add2)-(time1+time2))*_theNumber)%ticketsSold;\n', '                \n', '                address winningTicket = address (Tickets[winningNumber].addr);\n', '                \n', '                uint winnings = uint (address(this).balance / 20) * 19;\n', '                uint fees = uint (address(this).balance-winnings)/2;\n', '                uint dividends = uint (address(this).balance-winnings)-fees;\n', '                \n', '                winningTicket.transfer(winnings);\n', '                \n', '                owner.transfer(fees);\n', '                \n', '                dividendsAccount.transfer(dividends);\n', '                \n', '                delete ticketsSold;\n', '                timeLimit = now;\n', '                number = newNumber;\n', '\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract WeeklyDraw is Owned{\n', '    \n', '\n', '    \n', '    bytes32 public number;\n', '    uint public timeLimit;\n', '    uint public ticketsSold;\n', '    \n', '    struct Ticket {\n', '        address addr;\n', '        uint time;\n', '    }\n', '    \n', '    mapping (uint => Ticket) Tickets;\n', '\n', '    function start(bytes32 _var1) public {\n', '        if (timeLimit<1){\n', '            timeLimit = now;\n', '            number = _var1 ;\n', '        }\n', '    }\n', '\n', '    function () payable{\n', '        uint value = (msg.value)/100000000000000000;\n', '        require (now<(timeLimit+604800));\n', '            uint i = 0;\n', '            while (i++ < value) {\n', '                uint TicketNumber = ticketsSold + i;\n', '                Tickets[TicketNumber].addr = msg.sender;\n', '                Tickets[TicketNumber].time = now;\n', '            } \n', '            ticketsSold = ticketsSold + value;\n', '   }\n', '\n', '    function Play() payable{\n', '        uint value = msg.value/100000000000000000;\n', '        require (now<(timeLimit+604800));\n', '            uint i = 1;\n', '            while (i++ < value) {\n', '                uint TicketNumber = ticketsSold + i;\n', '                Tickets[TicketNumber].addr = msg.sender;\n', '                Tickets[TicketNumber].time = now;\n', '            } \n', '            ticketsSold = ticketsSold + value;\n', '   }\n', '\n', '\n', '    function balances() constant returns(uint, uint time){\n', '       return (ticketsSold, (timeLimit+604800)-now);\n', '   }\n', '\n', '\n', '    function winner(uint _theNumber, bytes32 newNumber) onlyOwner payable {\n', '        require ((timeLimit+604800)<now && number == keccak256(_theNumber));\n', '                \n', '                uint8 add1 = uint8 (Tickets[ticketsSold/4].addr);\n', '                uint8 add2 = uint8 (Tickets[ticketsSold/3].addr);\n', '       \n', '                uint8 time1 = uint8 (Tickets[ticketsSold/2].time);\n', '                uint8 time2 = uint8 (Tickets[ticketsSold/8].time);\n', '       \n', '                uint winningNumber = uint8 (((add1+add2)-(time1+time2))*_theNumber)%ticketsSold;\n', '                \n', '                address winningTicket = address (Tickets[winningNumber].addr);\n', '                \n', '                uint winnings = uint (address(this).balance / 20) * 19;\n', '                uint fees = uint (address(this).balance-winnings)/2;\n', '                uint dividends = uint (address(this).balance-winnings)-fees;\n', '                \n', '                winningTicket.transfer(winnings);\n', '                \n', '                owner.transfer(fees);\n', '                \n', '                dividendsAccount.transfer(dividends);\n', '                \n', '                delete ticketsSold;\n', '                timeLimit = now;\n', '                number = newNumber;\n', '\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract number {\n', '    \n', '    bytes32 public number;\n', '    \n', '    function winner(uint _theNumber) {\n', '        number = keccak256(_theNumber);\n', '    }\n', '    \n', '    \n', '    \n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// ----------------------------------------------------------------------------\n', "// 'Ethernational' CROWDSALE token contract\n", '//\n', '// Deployed to : 0xD0FDf2ECd4CadE671a7EE1063393eC0eB90816FD\n', '// Symbol      : EIT\n', '// Name        : Ethernational\n', '// Decimals    : 18\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '    address public dividendsAccount;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '    \n', '    dividendsContract divC;\n', '    \n', '    function dividendsAcc(address _dividendsAccount) onlyOwner{\n', '        divC = dividendsContract(_dividendsAccount);\n', '        dividendsAccount = _dividendsAccount;\n', '    }\n', '    \n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '// token transfers\n', '// ----------------------------------------------------------------------------\n', 'contract Ethernational is ERC20Interface, Owned, SafeMath {\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '    uint public startDate;\n', '    uint public bonus1Ends;\n', '    uint public bonus2Ends;\n', '    uint public bonus3Ends;\n', '    uint public endDate;\n', '    uint public ETHinvested;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    function Ethernational() public {\n', '        symbol = "EIT";\n', '        name = "Ethernational";\n', '        decimals = 18;\n', '        bonus1Ends = now + 1 weeks;\n', '        bonus2Ends = now + 2 weeks;\n', '        bonus3Ends = now + 4 weeks;\n', '        endDate = now + 8 weeks;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '    \n', '    function invested() constant returns (uint){\n', '        return ETHinvested;\n', '    }\n', '\n', '\n', '    \n', '    \n', '\n', '\n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to `to` account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        uint perc = ((balances[msg.sender] * 1000)/tokens);\n', '        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        Transfer(msg.sender, to, tokens);\n', '        divC.updatePaid(msg.sender,to,perc);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account\n", '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces\n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    //\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        uint perc = ((balances[from] * 1000)/tokens);\n', '        balances[from] = safeSub(balances[from], tokens);\n', '        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        Transfer(from, to, tokens);\n', '        divC.updatePaid(from,to,perc);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account. The `spender` contract function\n", '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // 500 ELG Tokens per 1 ETH\n', '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        require(now >= startDate && now <= endDate && msg.value > 1000000000000000);\n', '        uint tokens;\n', '        if (now <= bonus1Ends) {\n', '            tokens = msg.value * 1000;\n', '        } else if (now <= bonus2Ends) {\n', '            tokens = msg.value * 750;\n', '        } else if (now <= bonus3Ends) {\n', '            tokens = msg.value * 625;\n', '        } else {\n', '            tokens = msg.value * 500;\n', '        }\n', '        \n', '        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);\n', '        _totalSupply = safeAdd(_totalSupply, tokens);\n', '        Transfer(address(0), msg.sender, tokens);\n', '        owner.transfer(msg.value);\n', '        ETHinvested = ETHinvested + msg.value;\n', '    }\n', '    \n', '    function buyEIT() public payable {\n', '        require(now >= startDate && now <= endDate && msg.value > 1000000000000000);\n', '        uint tokens;\n', '        if (now <= bonus1Ends) {\n', '            tokens = msg.value * 1000;\n', '        } else if (now <= bonus2Ends) {\n', '            tokens = msg.value * 750;\n', '        } else if (now <= bonus3Ends) {\n', '            tokens = msg.value * 625;\n', '        } else {\n', '            tokens = msg.value * 500;\n', '        }\n', '        \n', '        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);\n', '        _totalSupply = safeAdd(_totalSupply, tokens);\n', '        Transfer(address(0), msg.sender, tokens);\n', '        owner.transfer(msg.value);\n', '        ETHinvested = ETHinvested + msg.value;\n', '    }\n', '    \n', '    \n', '    function bonusInfo() constant returns (uint,uint){\n', '        if (now <= bonus1Ends) {\n', '            return (100, (bonus1Ends - now));\n', '        } else if (now <= bonus2Ends) {\n', '            return (50, (bonus2Ends - now));\n', '        } else if (now <= bonus3Ends) {\n', '            return (25, (bonus3Ends - now));\n', '        } else {\n', '            return (0, 0);\n', '        }\n', '    }\n', '    \n', '    function ICOTimer() constant returns (uint){\n', '        if (now < endDate){\n', '            return (endDate - now);\n', '        }\n', '    }\n', '    \n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract dividendsContract is Owned{\n', '    \n', '    Ethernational dc;\n', '    mapping(address => uint) paid;\n', '    uint public totalSupply;\n', '    uint public totalPaid;\n', '    address public ICOaddress;\n', '    \n', '    function ICOaddress(address _t) onlyOwner{\n', '        dc = Ethernational(_t);\n', '        ICOaddress = _t;\n', '        totalSupply = dc.totalSupply() / 1000000000000;\n', '    }\n', '    \n', '    function() payable{\n', '    }\n', '    \n', '    function collectDividends(address member) public returns (uint result) {\n', '        require (msg.sender == member && dc.endDate() < now);\n', '        uint Ownes = dc.balanceOf(member) / 1000000000000;\n', '        uint payout = (((address(this).balance + totalPaid)/totalSupply)*Ownes) - paid[member];\n', '        member.transfer(payout);\n', '        paid[member] = paid[member] + payout;\n', '        totalPaid = totalPaid + payout;\n', '        return payout;\n', '    }\n', '    \n', '    function thisBalance() constant returns (uint){\n', '        return this.balance;\n', '    }\n', '    \n', '    function updatePaid(address from, address to, uint perc) {\n', '        require (msg.sender == ICOaddress);\n', '        uint val = ((paid[from] * 1000000) / perc) / 1000;\n', '        paid[from] = paid[from] - val;\n', '        paid[to] = paid[to] + val;\n', '    }\n', '    \n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '    \n', 'contract DailyDraw is Owned{\n', '    \n', '\n', '    \n', '    bytes32 public number;\n', '    uint public timeLimit;\n', '    uint public ticketsSold;\n', '    \n', '    struct Ticket {\n', '        address addr;\n', '        uint time;\n', '    }\n', '    \n', '    mapping (uint => Ticket) Tickets;\n', '\n', '    function start(bytes32 _var1) public {\n', '        if (timeLimit<1){\n', '            timeLimit = now;\n', '            number = _var1 ;\n', '        }\n', '    }\n', '\n', '    function () payable{\n', '        uint value = (msg.value)/10000000000000000;\n', '        require (now<(timeLimit+86400));\n', '            uint i = 0;\n', '            while (i++ < value) {\n', '                uint TicketNumber = ticketsSold + i;\n', '                Tickets[TicketNumber].addr = msg.sender;\n', '                Tickets[TicketNumber].time = now;\n', '            } \n', '            ticketsSold = ticketsSold + value;\n', '   }\n', '\n', '    function Play() payable{\n', '        uint value = msg.value/10000000000000000;\n', '        require (now<(timeLimit+86400));\n', '            uint i = 1;\n', '            while (i++ < value) {\n', '                uint TicketNumber = ticketsSold + i;\n', '                Tickets[TicketNumber].addr = msg.sender;\n', '                Tickets[TicketNumber].time = now;\n', '            } \n', '            ticketsSold = ticketsSold + value;\n', '   }\n', '\n', '\n', '    function balances() constant returns(uint, uint time){\n', '       return (ticketsSold, (timeLimit+86400)-now);\n', '   }\n', '\n', '\n', '    function winner(uint _theNumber, bytes32 newNumber) onlyOwner payable {\n', '        require ((timeLimit+86400)<now && number == keccak256(_theNumber));\n', '                \n', '                uint8 add1 = uint8 (Tickets[ticketsSold/4].addr);\n', '                uint8 add2 = uint8 (Tickets[ticketsSold/3].addr);\n', '       \n', '                uint8 time1 = uint8 (Tickets[ticketsSold/2].time);\n', '                uint8 time2 = uint8 (Tickets[ticketsSold/8].time);\n', '       \n', '                uint winningNumber = uint8 (((add1+add2)-(time1+time2))*_theNumber)%ticketsSold;\n', '                \n', '                address winningTicket = address (Tickets[winningNumber].addr);\n', '                \n', '                uint winnings = uint (address(this).balance / 20) * 19;\n', '                uint fees = uint (address(this).balance-winnings)/2;\n', '                uint dividends = uint (address(this).balance-winnings)-fees;\n', '                \n', '                winningTicket.transfer(winnings);\n', '                \n', '                owner.transfer(fees);\n', '                \n', '                dividendsAccount.transfer(dividends);\n', '                \n', '                delete ticketsSold;\n', '                timeLimit = now;\n', '                number = newNumber;\n', '\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract WeeklyDraw is Owned{\n', '    \n', '\n', '    \n', '    bytes32 public number;\n', '    uint public timeLimit;\n', '    uint public ticketsSold;\n', '    \n', '    struct Ticket {\n', '        address addr;\n', '        uint time;\n', '    }\n', '    \n', '    mapping (uint => Ticket) Tickets;\n', '\n', '    function start(bytes32 _var1) public {\n', '        if (timeLimit<1){\n', '            timeLimit = now;\n', '            number = _var1 ;\n', '        }\n', '    }\n', '\n', '    function () payable{\n', '        uint value = (msg.value)/100000000000000000;\n', '        require (now<(timeLimit+604800));\n', '            uint i = 0;\n', '            while (i++ < value) {\n', '                uint TicketNumber = ticketsSold + i;\n', '                Tickets[TicketNumber].addr = msg.sender;\n', '                Tickets[TicketNumber].time = now;\n', '            } \n', '            ticketsSold = ticketsSold + value;\n', '   }\n', '\n', '    function Play() payable{\n', '        uint value = msg.value/100000000000000000;\n', '        require (now<(timeLimit+604800));\n', '            uint i = 1;\n', '            while (i++ < value) {\n', '                uint TicketNumber = ticketsSold + i;\n', '                Tickets[TicketNumber].addr = msg.sender;\n', '                Tickets[TicketNumber].time = now;\n', '            } \n', '            ticketsSold = ticketsSold + value;\n', '   }\n', '\n', '\n', '    function balances() constant returns(uint, uint time){\n', '       return (ticketsSold, (timeLimit+604800)-now);\n', '   }\n', '\n', '\n', '    function winner(uint _theNumber, bytes32 newNumber) onlyOwner payable {\n', '        require ((timeLimit+604800)<now && number == keccak256(_theNumber));\n', '                \n', '                uint8 add1 = uint8 (Tickets[ticketsSold/4].addr);\n', '                uint8 add2 = uint8 (Tickets[ticketsSold/3].addr);\n', '       \n', '                uint8 time1 = uint8 (Tickets[ticketsSold/2].time);\n', '                uint8 time2 = uint8 (Tickets[ticketsSold/8].time);\n', '       \n', '                uint winningNumber = uint8 (((add1+add2)-(time1+time2))*_theNumber)%ticketsSold;\n', '                \n', '                address winningTicket = address (Tickets[winningNumber].addr);\n', '                \n', '                uint winnings = uint (address(this).balance / 20) * 19;\n', '                uint fees = uint (address(this).balance-winnings)/2;\n', '                uint dividends = uint (address(this).balance-winnings)-fees;\n', '                \n', '                winningTicket.transfer(winnings);\n', '                \n', '                owner.transfer(fees);\n', '                \n', '                dividendsAccount.transfer(dividends);\n', '                \n', '                delete ticketsSold;\n', '                timeLimit = now;\n', '                number = newNumber;\n', '\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract number {\n', '    \n', '    bytes32 public number;\n', '    \n', '    function winner(uint _theNumber) {\n', '        number = keccak256(_theNumber);\n', '    }\n', '    \n', '    \n', '    \n', '}']
