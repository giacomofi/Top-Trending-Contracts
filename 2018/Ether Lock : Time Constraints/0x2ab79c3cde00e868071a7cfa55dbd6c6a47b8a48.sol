['contract Token {\n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract StandardToken is Token {\n', '    uint256 perventValue = 1;\n', '    using SafeMath for uint256;\n', '    address burnaddr =0x0000000000000000000000000000000000000000;\n', '    address tokenStore1=0xeb62d677cDFCCe9607744A1B7F63F54310b7AE4d;\n', '    \n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '    \n', '    \n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '\n', ' \n', '            if (balances[msg.sender] >= _value && _value > 0) {\n', '                uint256 tax =0;\n', '                tax=_value.div(100).mul(perventValue);\n', '                balances[msg.sender] -= _value;\n', '                _value=_value.sub(tax);\n', '                tax=tax.div(2);\n', '                totalSupply=totalSupply.sub(tax);\n', '                balances[burnaddr]+=tax;\n', '                balances[tokenStore1]+=tax;\n', '                balances[_to] += _value;\n', '                emit Transfer(msg.sender, _to, _value);\n', '                emit Transfer(msg.sender, burnaddr, tax);\n', '                emit Transfer(msg.sender, tokenStore1, tax);\n', '            return true;\n', '        } \n', '        else\n', '         { return false; }\n', '\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '\n', '\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            uint256 tax =0;\n', '            tax=_value.div(100).mul(perventValue);\n', '            \n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            _value=_value.sub(tax);\n', '            balances[_to] += _value;\n', '            tax=tax.div(2);\n', '            totalSupply=totalSupply.sub(tax);\n', '            balances[burnaddr]+=tax;\n', '            balances[tokenStore1]+=tax;\n', '            emit Transfer(_from, _to, _value);\n', '            emit Transfer(msg.sender, burnaddr, tax);\n', '            emit Transfer(msg.sender, tokenStore1, tax);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    \n', '}\n', '\n', '\n', '\n', 'contract erc20KGS is StandardToken {\n', '    using SafeMath for uint256;\n', '    \n', '      string public name;                   //\n', '    uint8 public decimals;                //\n', '    string public symbol;                 //\n', '    string public version = &#39;x0.01&#39;;       //\n', '    address confAddr1=0xF5bEC430576fF1b82e44DDB5a1C93F6F9d0884f3;\n', '    address confAddr2=0x876EabF441B2EE5B5b0554Fd502a8E0600950cFa;\n', '    address confAddr3;\n', '    address confAddr4=0x5Dcd3d3FA68E01FcD4B4962E1f214630D9a3755C;\n', '    address admin1=0x51587A275254aE80980CB282EeD1e4fb668bF054;\n', '    address admin2=0x534Bd9594A2f038eDe268f7554722d1daec0615F;\n', '    address admin3=0xeb62d677cDFCCe9607744A1B7F63F54310b7AE4d;\n', '    address tokenStore1=0xb97510A71C5Dc248f1B81861C23ea3F8771EDC10;\n', '    address tokenStore2=0x745b29Bd95Bb84F5CaCD4960775B02bC02E62e76;\n', '    address tokenStore3=0x1Cf597cc7004680E457A9B8D3c789a28632c1997;\n', '    address tokenStore4=0x29333C31d8cbe63Dc5567609d8D81Ccc328735Ae;\n', '    address tokenStore5=0x4d9a53B549C0c59B72C358E6C02183a2610Cf6D6;\n', '    address tokenStore6=0xD46915F3f2E54FAeA6A7fe91f052Bc16189B0862;\n', '    address storeETH =0x3Dd8DB94bBC30bb2CB3eA5622A65D5eE6d7ecC10;\n', '    address burnaddr =0x0000000000000000000000000000000000000000;  \n', '    address payAddr;\n', '    uint public Round1Time = 1539129600;\n', '    uint public Round2Time = 1540944000;\n', '    uint public Round3Time = 1541894400;\n', '    uint public Round4Time = 1542758400;\n', '    uint public SaleStartTime = 1543622400;\n', '    uint public SaleFinishTime = 1546300800;\n', '    uint public BonusRound1 = 75;\n', '    uint public BonusRound2 = 65;\n', '    uint public BonusRound3 = 55;\n', '    uint public BonusRound4 = 45;\n', '    uint public BonusSale = 0; \n', '    uint public MinAmount1Round =49988;\n', '    uint public MinAmount2Round =39988;\n', '    uint public MinAmount3Round =29988;\n', '    uint public MinAmount4Round =19988;\n', '    uint public MinAmountSale =99;\n', '    uint256 public ExchangeRate = 48543689320388;\n', '    uint256 public PriceOfToken = 10;\n', '    \n', '    function () external payable {\n', '        uint256 amoutD =0;\n', '        uint256 amoutT = 0;\n', '        amoutD=amoutD.add(msg.value.div(ExchangeRate));\n', '        if(now < Round2Time  && now > Round1Time){\n', '            payAddr=tokenStore1;\n', '            amoutT=amoutT.add(amoutD.mul(PriceOfToken));\n', '            if (amoutD>MinAmount1Round){\n', '                amoutT=amoutT.add(amoutT.mul(BonusRound1).div(100));\n', '                amoutT=amoutT.mul(10000000000000000);\n', '            }\n', '            else{\n', '                amoutT=amoutT.mul(10000000000000000);\n', '            }\n', '        }else\n', '        if(now < Round3Time  && now > Round2Time){\n', '            payAddr=tokenStore2;\n', '            amoutT=amoutT.add(amoutD.mul(PriceOfToken));\n', '            if(amoutD>MinAmount2Round){\n', '                amoutT=amoutT.add(amoutT.mul(BonusRound2).div(100));\n', '                amoutT=amoutT.mul(10000000000000000);\n', '            } else{\n', '                amoutT=amoutT.mul(10000000000000000);\n', '            }\n', '        }else\n', '        if(now < Round4Time  && now > Round3Time){\n', '            payAddr=tokenStore3;\n', '            amoutT=amoutT.add(amoutD.mul(PriceOfToken));\n', '            if(amoutD>MinAmount3Round){\n', '                amoutT=amoutT.add(amoutT.mul(BonusRound3).div(100));\n', '                amoutT=amoutT.mul(10000000000000000);\n', '            } else{\n', '                amoutT=amoutT.mul(10000000000000000);\n', '            }\n', '        }else\n', '        if(now < SaleStartTime  && now > Round4Time){\n', '            payAddr=tokenStore4;\n', '            amoutT=amoutT.add(amoutD.mul(PriceOfToken));\n', '            if(amoutD>MinAmount4Round){\n', '                amoutT=amoutT.add(amoutT.mul(BonusRound4).div(100));\n', '                amoutT=amoutT.mul(10000000000000000);\n', '            }  else{\n', '                amoutT=amoutT.mul(10000000000000000);\n', '            }\n', '        }else\n', '        if(now < SaleFinishTime  && now > SaleStartTime){\n', '            payAddr=tokenStore4;\n', '            amoutT=amoutT.add(amoutD.mul(PriceOfToken));\n', '            if(amoutD>MinAmountSale){\n', '                amoutT=amoutT.add(amoutT.mul(BonusSale).div(100));\n', '                amoutT=amoutT.mul(10000000000000000);\n', '            }\n', '            else{\n', '                revert();\n', '            }\n', '        }else{\n', '            revert();\n', '        }\n', '        if(balances[payAddr] >= amoutT && amoutT > 0) {\n', '                storeETH.transfer(msg.value);\n', '                if(balances[payAddr] >= amoutT && amoutT > 0) {\n', '                    if(msg.sender==confAddr1 || msg.sender == confAddr2 ){\n', '                        balances[payAddr] -= amoutT;\n', '                        balances[confAddr4] += amoutT;\n', '                        emit Transfer(payAddr, confAddr4,  amoutT);\n', '                    }else{\n', '                    balances[payAddr] -= amoutT;\n', '                    balances[msg.sender] += amoutT;\n', '                    emit Transfer(payAddr, msg.sender,  amoutT);\n', '                    }\n', '                }\n', '           }\n', '            else {\n', '               revert();\n', '            }\n', '    }\n', '\n', '\n', '  \n', '    \n', '    \n', '    \n', '    \n', '\n', '    function erc20KGS(\n', '        uint8 _decimalUnits \n', '        ) {\n', '        totalSupply = 500000000000000000000000000;                        // Update total supply\n', '        name = "KING SLAYER TOKEN";                                   // Set the name for display purposes\n', '        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n', '        symbol = "KGS";                               // Set the symbol for display purposes\n', '        balances[tokenStore1]= 21000000000000000000000000;\n', '        balances[tokenStore2]= 13200000000000000000000000;\n', '        balances[tokenStore3]= 9300000000000000000000000;\n', '        balances[tokenStore4]= 5800000000000000000000000;\n', '        balances[tokenStore5]= 220000000000000000000000000;\n', '        balances[tokenStore6]= 230700000000000000000000000;\n', '    }\n', '    function set1RoundTime(uint _timeValue){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_timeValue >0){\n', '                 Round1Time = _timeValue;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    function set2RoundTime(uint _timeValue){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_timeValue >0){\n', '                 Round2Time = _timeValue;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    function set3RoundTime(uint _timeValue){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_timeValue >0){\n', '                 Round3Time = _timeValue;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    function set4RoundTime(uint _timeValue){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_timeValue >0){\n', '                 Round4Time = _timeValue;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    function setSaleStartTime(uint _timeValue){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_timeValue >0){\n', '                 SaleStartTime = _timeValue;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    function setSaleFinishTime(uint _timeValue){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_timeValue >0){\n', '                 SaleFinishTime = _timeValue;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    \n', '    function setBonusRound1(uint _Value){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_Value >=0){\n', '                 BonusRound1 = _Value;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    function setBonusRound2(uint _Value){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_Value >=0){\n', '                 BonusRound2 = _Value;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    function setBonusRound3(uint _Value){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_Value >=0){\n', '                 BonusRound3 = _Value;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    function setBonusRound4(uint _timeValue){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_timeValue >=0){\n', '                 BonusRound4 = _timeValue;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    function setBonusSale(uint256 _Value){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_Value >=0){\n', '                 BonusSale = _Value;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    function setExchangeRate(uint _Value){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_Value >0){\n', '                 ExchangeRate = _Value;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    function setPriceOfToken(uint _Value){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_Value >0){\n', '                 PriceOfToken = _Value;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    function burn(uint256 _value, address _addrValue){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '                if(balances[_addrValue] >= _value && _value > 0) {\n', '                    balances[_addrValue] -= _value;\n', '                    balances[burnaddr] += _value;\n', '                    totalSupply-=_value;\n', '                   emit Transfer(_addrValue, burnaddr,  _value);\n', '                }\n', '\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    function setMinAmount1Round(uint _Value){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_Value >0){\n', '                 MinAmount1Round = _Value;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    function setMinAmount2Round(uint _Value){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_Value >0){\n', '                 MinAmount2Round = _Value;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    function setMinAmount3Round(uint _Value){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_Value >0){\n', '                 MinAmount3Round = _Value;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    function setMinAmount4Round(uint _Value){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_Value >0){\n', '                 MinAmount4Round = _Value;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    function setMinAmountSale(uint _Value){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_Value >0){\n', '                 MinAmountSale = _Value;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '     function setPerventValue(uint _Value){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_Value >=0){\n', '                 perventValue = _Value;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '\n', '\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '}']
['contract Token {\n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract StandardToken is Token {\n', '    uint256 perventValue = 1;\n', '    using SafeMath for uint256;\n', '    address burnaddr =0x0000000000000000000000000000000000000000;\n', '    address tokenStore1=0xeb62d677cDFCCe9607744A1B7F63F54310b7AE4d;\n', '    \n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '    \n', '    \n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '\n', ' \n', '            if (balances[msg.sender] >= _value && _value > 0) {\n', '                uint256 tax =0;\n', '                tax=_value.div(100).mul(perventValue);\n', '                balances[msg.sender] -= _value;\n', '                _value=_value.sub(tax);\n', '                tax=tax.div(2);\n', '                totalSupply=totalSupply.sub(tax);\n', '                balances[burnaddr]+=tax;\n', '                balances[tokenStore1]+=tax;\n', '                balances[_to] += _value;\n', '                emit Transfer(msg.sender, _to, _value);\n', '                emit Transfer(msg.sender, burnaddr, tax);\n', '                emit Transfer(msg.sender, tokenStore1, tax);\n', '            return true;\n', '        } \n', '        else\n', '         { return false; }\n', '\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '\n', '\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            uint256 tax =0;\n', '            tax=_value.div(100).mul(perventValue);\n', '            \n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            _value=_value.sub(tax);\n', '            balances[_to] += _value;\n', '            tax=tax.div(2);\n', '            totalSupply=totalSupply.sub(tax);\n', '            balances[burnaddr]+=tax;\n', '            balances[tokenStore1]+=tax;\n', '            emit Transfer(_from, _to, _value);\n', '            emit Transfer(msg.sender, burnaddr, tax);\n', '            emit Transfer(msg.sender, tokenStore1, tax);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    \n', '}\n', '\n', '\n', '\n', 'contract erc20KGS is StandardToken {\n', '    using SafeMath for uint256;\n', '    \n', '      string public name;                   //\n', '    uint8 public decimals;                //\n', '    string public symbol;                 //\n', "    string public version = 'x0.01';       //\n", '    address confAddr1=0xF5bEC430576fF1b82e44DDB5a1C93F6F9d0884f3;\n', '    address confAddr2=0x876EabF441B2EE5B5b0554Fd502a8E0600950cFa;\n', '    address confAddr3;\n', '    address confAddr4=0x5Dcd3d3FA68E01FcD4B4962E1f214630D9a3755C;\n', '    address admin1=0x51587A275254aE80980CB282EeD1e4fb668bF054;\n', '    address admin2=0x534Bd9594A2f038eDe268f7554722d1daec0615F;\n', '    address admin3=0xeb62d677cDFCCe9607744A1B7F63F54310b7AE4d;\n', '    address tokenStore1=0xb97510A71C5Dc248f1B81861C23ea3F8771EDC10;\n', '    address tokenStore2=0x745b29Bd95Bb84F5CaCD4960775B02bC02E62e76;\n', '    address tokenStore3=0x1Cf597cc7004680E457A9B8D3c789a28632c1997;\n', '    address tokenStore4=0x29333C31d8cbe63Dc5567609d8D81Ccc328735Ae;\n', '    address tokenStore5=0x4d9a53B549C0c59B72C358E6C02183a2610Cf6D6;\n', '    address tokenStore6=0xD46915F3f2E54FAeA6A7fe91f052Bc16189B0862;\n', '    address storeETH =0x3Dd8DB94bBC30bb2CB3eA5622A65D5eE6d7ecC10;\n', '    address burnaddr =0x0000000000000000000000000000000000000000;  \n', '    address payAddr;\n', '    uint public Round1Time = 1539129600;\n', '    uint public Round2Time = 1540944000;\n', '    uint public Round3Time = 1541894400;\n', '    uint public Round4Time = 1542758400;\n', '    uint public SaleStartTime = 1543622400;\n', '    uint public SaleFinishTime = 1546300800;\n', '    uint public BonusRound1 = 75;\n', '    uint public BonusRound2 = 65;\n', '    uint public BonusRound3 = 55;\n', '    uint public BonusRound4 = 45;\n', '    uint public BonusSale = 0; \n', '    uint public MinAmount1Round =49988;\n', '    uint public MinAmount2Round =39988;\n', '    uint public MinAmount3Round =29988;\n', '    uint public MinAmount4Round =19988;\n', '    uint public MinAmountSale =99;\n', '    uint256 public ExchangeRate = 48543689320388;\n', '    uint256 public PriceOfToken = 10;\n', '    \n', '    function () external payable {\n', '        uint256 amoutD =0;\n', '        uint256 amoutT = 0;\n', '        amoutD=amoutD.add(msg.value.div(ExchangeRate));\n', '        if(now < Round2Time  && now > Round1Time){\n', '            payAddr=tokenStore1;\n', '            amoutT=amoutT.add(amoutD.mul(PriceOfToken));\n', '            if (amoutD>MinAmount1Round){\n', '                amoutT=amoutT.add(amoutT.mul(BonusRound1).div(100));\n', '                amoutT=amoutT.mul(10000000000000000);\n', '            }\n', '            else{\n', '                amoutT=amoutT.mul(10000000000000000);\n', '            }\n', '        }else\n', '        if(now < Round3Time  && now > Round2Time){\n', '            payAddr=tokenStore2;\n', '            amoutT=amoutT.add(amoutD.mul(PriceOfToken));\n', '            if(amoutD>MinAmount2Round){\n', '                amoutT=amoutT.add(amoutT.mul(BonusRound2).div(100));\n', '                amoutT=amoutT.mul(10000000000000000);\n', '            } else{\n', '                amoutT=amoutT.mul(10000000000000000);\n', '            }\n', '        }else\n', '        if(now < Round4Time  && now > Round3Time){\n', '            payAddr=tokenStore3;\n', '            amoutT=amoutT.add(amoutD.mul(PriceOfToken));\n', '            if(amoutD>MinAmount3Round){\n', '                amoutT=amoutT.add(amoutT.mul(BonusRound3).div(100));\n', '                amoutT=amoutT.mul(10000000000000000);\n', '            } else{\n', '                amoutT=amoutT.mul(10000000000000000);\n', '            }\n', '        }else\n', '        if(now < SaleStartTime  && now > Round4Time){\n', '            payAddr=tokenStore4;\n', '            amoutT=amoutT.add(amoutD.mul(PriceOfToken));\n', '            if(amoutD>MinAmount4Round){\n', '                amoutT=amoutT.add(amoutT.mul(BonusRound4).div(100));\n', '                amoutT=amoutT.mul(10000000000000000);\n', '            }  else{\n', '                amoutT=amoutT.mul(10000000000000000);\n', '            }\n', '        }else\n', '        if(now < SaleFinishTime  && now > SaleStartTime){\n', '            payAddr=tokenStore4;\n', '            amoutT=amoutT.add(amoutD.mul(PriceOfToken));\n', '            if(amoutD>MinAmountSale){\n', '                amoutT=amoutT.add(amoutT.mul(BonusSale).div(100));\n', '                amoutT=amoutT.mul(10000000000000000);\n', '            }\n', '            else{\n', '                revert();\n', '            }\n', '        }else{\n', '            revert();\n', '        }\n', '        if(balances[payAddr] >= amoutT && amoutT > 0) {\n', '                storeETH.transfer(msg.value);\n', '                if(balances[payAddr] >= amoutT && amoutT > 0) {\n', '                    if(msg.sender==confAddr1 || msg.sender == confAddr2 ){\n', '                        balances[payAddr] -= amoutT;\n', '                        balances[confAddr4] += amoutT;\n', '                        emit Transfer(payAddr, confAddr4,  amoutT);\n', '                    }else{\n', '                    balances[payAddr] -= amoutT;\n', '                    balances[msg.sender] += amoutT;\n', '                    emit Transfer(payAddr, msg.sender,  amoutT);\n', '                    }\n', '                }\n', '           }\n', '            else {\n', '               revert();\n', '            }\n', '    }\n', '\n', '\n', '  \n', '    \n', '    \n', '    \n', '    \n', '\n', '    function erc20KGS(\n', '        uint8 _decimalUnits \n', '        ) {\n', '        totalSupply = 500000000000000000000000000;                        // Update total supply\n', '        name = "KING SLAYER TOKEN";                                   // Set the name for display purposes\n', '        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n', '        symbol = "KGS";                               // Set the symbol for display purposes\n', '        balances[tokenStore1]= 21000000000000000000000000;\n', '        balances[tokenStore2]= 13200000000000000000000000;\n', '        balances[tokenStore3]= 9300000000000000000000000;\n', '        balances[tokenStore4]= 5800000000000000000000000;\n', '        balances[tokenStore5]= 220000000000000000000000000;\n', '        balances[tokenStore6]= 230700000000000000000000000;\n', '    }\n', '    function set1RoundTime(uint _timeValue){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_timeValue >0){\n', '                 Round1Time = _timeValue;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    function set2RoundTime(uint _timeValue){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_timeValue >0){\n', '                 Round2Time = _timeValue;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    function set3RoundTime(uint _timeValue){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_timeValue >0){\n', '                 Round3Time = _timeValue;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    function set4RoundTime(uint _timeValue){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_timeValue >0){\n', '                 Round4Time = _timeValue;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    function setSaleStartTime(uint _timeValue){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_timeValue >0){\n', '                 SaleStartTime = _timeValue;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    function setSaleFinishTime(uint _timeValue){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_timeValue >0){\n', '                 SaleFinishTime = _timeValue;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    \n', '    function setBonusRound1(uint _Value){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_Value >=0){\n', '                 BonusRound1 = _Value;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    function setBonusRound2(uint _Value){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_Value >=0){\n', '                 BonusRound2 = _Value;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    function setBonusRound3(uint _Value){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_Value >=0){\n', '                 BonusRound3 = _Value;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    function setBonusRound4(uint _timeValue){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_timeValue >=0){\n', '                 BonusRound4 = _timeValue;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    function setBonusSale(uint256 _Value){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_Value >=0){\n', '                 BonusSale = _Value;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    function setExchangeRate(uint _Value){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_Value >0){\n', '                 ExchangeRate = _Value;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    function setPriceOfToken(uint _Value){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_Value >0){\n', '                 PriceOfToken = _Value;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    function burn(uint256 _value, address _addrValue){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '                if(balances[_addrValue] >= _value && _value > 0) {\n', '                    balances[_addrValue] -= _value;\n', '                    balances[burnaddr] += _value;\n', '                    totalSupply-=_value;\n', '                   emit Transfer(_addrValue, burnaddr,  _value);\n', '                }\n', '\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    function setMinAmount1Round(uint _Value){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_Value >0){\n', '                 MinAmount1Round = _Value;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    function setMinAmount2Round(uint _Value){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_Value >0){\n', '                 MinAmount2Round = _Value;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    function setMinAmount3Round(uint _Value){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_Value >0){\n', '                 MinAmount3Round = _Value;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    function setMinAmount4Round(uint _Value){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_Value >0){\n', '                 MinAmount4Round = _Value;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '    function setMinAmountSale(uint _Value){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_Value >0){\n', '                 MinAmountSale = _Value;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '     function setPerventValue(uint _Value){\n', '        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\n', '            if(_Value >=0){\n', '                 perventValue = _Value;\n', '             }\n', '        }else{\n', '            revert();\n', '        }     \n', '    }\n', '\n', '\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '}']
