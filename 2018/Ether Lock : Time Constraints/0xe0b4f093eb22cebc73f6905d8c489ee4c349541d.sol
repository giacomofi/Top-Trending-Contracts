['pragma solidity ^0.4.24;\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    constructor() public{\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) external onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'contract Jackpot is Ownable {\n', '    \n', '    mapping (uint8 => address) public players;\n', '    uint8 public playersCount;\n', '    address public magazineAddress;\n', '    bool public finished = false;\n', '    \n', '    constructor(address _magazineAddr) public {\n', '        magazineAddress = _magazineAddr;\n', '    }\n', '    \n', '    modifier whenNotFinished() {\n', '        require(!finished);\n', '        _;\n', '    }\n', '\n', '    function addPlayer(address player) external whenNotFinished {\n', '        require(msg.sender == magazineAddress);\n', '        playersCount++;\n', '\n', '        players[playersCount] = player;\n', '    }\n', '\n', '    function () public whenNotFinished payable {}\n', '    \n', '    function finish(uint8 _firstWinner, uint8 _secondWinner, uint8 _thirdWinner) external onlyOwner whenNotFinished {\n', '        \n', '        uint256 firstPlaceAmount;\n', '        uint256 secondPlaceAmount;\n', '        uint256 thirdPlaceAmount;\n', '        \n', '        (firstPlaceAmount, secondPlaceAmount, thirdPlaceAmount) = calculatePrizes();\n', '        \n', '        players[_firstWinner].transfer(firstPlaceAmount);\n', '        players[_secondWinner].transfer(secondPlaceAmount);\n', '        players[_thirdWinner].transfer(thirdPlaceAmount);\n', '        \n', '        finished = true;\n', '    }\n', '    \n', '    function calculatePrizes() view public whenNotFinished returns (uint256 firstPlace, uint256 secondPlace, uint256 thirdPlace) {\n', '        firstPlace = (address(this).balance * 75) / 100;\n', '        secondPlace = (address(this).balance * 15) / 100;\n', '        thirdPlace = (address(this).balance * 10) / 100;\n', '    }\n', '}']