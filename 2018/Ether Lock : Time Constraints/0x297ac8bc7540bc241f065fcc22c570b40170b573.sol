['/*************************************************************************\n', ' * This contract has been merged with solidify\n', ' * https://github.com/tiesnetwork/solidify\n', ' *************************************************************************/\n', ' \n', ' pragma solidity ^0.4.18;\n', '\n', '/*************************************************************************\n', ' * import "./math/SafeMath.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/*************************************************************************\n', ' * import "./math/SafeMath.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "./ownership/Ownable.sol" : start\n', ' *************************************************************************/\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public { owner = msg.sender; }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() { require(msg.sender == owner); _; }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}/*************************************************************************\n', ' * import "./ownership/Ownable.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "./TraceToken.sol" : start\n', ' *************************************************************************/\n', '\n', '/*************************************************************************\n', ' * import "./token/MintableToken.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/*************************************************************************\n', ' * import "./StandardToken.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/*************************************************************************\n', ' * import "./BasicToken.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/*************************************************************************\n', ' * import "./ERC20Basic.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/*************************************************************************\n', ' * import "./ERC20Basic.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '/*************************************************************************\n', ' * import "./BasicToken.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "./ERC20.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '/*************************************************************************\n', ' * import "./ERC20.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    // mitigating the race condition\n', '    assert(allowed[msg.sender][_spender] == 0 || _value == 0);\n', '    \n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '/*************************************************************************\n', ' * import "./StandardToken.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '/*************************************************************************\n', ' * import "./token/MintableToken.sol" : end\n', ' *************************************************************************/\n', '\n', 'contract TraceToken is MintableToken {\n', '\n', "    string public constant name = 'Trace Token';\n", "    string public constant symbol = 'TRACE';\n", '    uint8 public constant decimals = 18;\n', '    bool public transferAllowed = false;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event TransferAllowed(bool transferIsAllowed);\n', '\n', '    modifier canTransfer() {\n', '        require(mintingFinished && transferAllowed);\n', '        _;        \n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) canTransfer public returns (bool) {\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    function transfer(address to, uint256 value) canTransfer public returns (bool) {\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function mint(address contributor, uint256 amount) public returns (bool) {\n', '        return super.mint(contributor, amount);\n', '    }\n', '\n', '    function endMinting(bool _transferAllowed) public returns (bool) {\n', '        transferAllowed = _transferAllowed;\n', '        TransferAllowed(_transferAllowed);\n', '        return super.finishMinting();\n', '    }\n', '}\n', '/*************************************************************************\n', ' * import "./TraceToken.sol" : end\n', ' *************************************************************************/\n', '\n', 'contract TraceTokenSale is Ownable{\n', '\tusing SafeMath for uint256;\n', '\n', '\t// Presale token\n', '\tTraceToken public token;\n', '\n', '  // amount of tokens in existance - 500mil TRACE = 5e26 Tracks\n', '  uint256 public constant TOTAL_NUM_TOKENS = 5e26; // 1 TRACE = 1e18 Tracks, all units in contract in Tracks\n', '  uint256 public constant tokensForSale = 25e25; // 50% of all tokens\n', '\n', '  // totalEthers received\n', '  uint256 public totalEthers = 0;\n', '\n', '  // Minimal possible cap in ethers\n', '  uint256 public constant softCap = 3984.064 ether; \n', '  // Maximum possible cap in ethers\n', '  uint256 public constant hardCap = 17928.287 ether; \n', '  \n', '  uint256 public constant presaleLimit = 7968.127 ether; \n', '  bool public presaleLimitReached = false;\n', '\n', '  // Minimum and maximum investments in Ether\n', '  uint256 public constant min_investment_eth = 0.5 ether; // fixed value, not changing\n', '  uint256 public constant max_investment_eth = 398.4064 ether; \n', '\n', '  uint256 public constant min_investment_presale_eth = 5 ether; // fixed value, not changing\n', '\n', '  // refund if softCap is not reached\n', '  bool public refundAllowed = false;\n', '\n', '  // pause flag\n', '  bool public paused = false;\n', '\n', '  uint256 public constant bountyReward = 1e25;\n', '  uint256 public constant preicoAndAdvisors = 4e25;\n', '  uint256 public constant liquidityPool = 25e24;\n', '  uint256 public constant futureDevelopment = 1e26; \n', '  uint256 public constant teamAndFounders = 75e24;  \n', '\n', '  uint256 public leftOverTokens = 0;\n', '\n', '  uint256[8] public founderAmounts = [uint256(teamAndFounders.div(8)),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8)];\n', '  uint256[2]  public preicoAndAdvisorsAmounts = [ uint256(preicoAndAdvisors.mul(2).div(5)),preicoAndAdvisors.mul(2).div(5)];\n', '\n', '\n', '  // Withdraw multisig wallet\n', '  address public wallet;\n', '\n', '  // Withdraw multisig wallet\n', '  address public teamAndFoundersWallet;\n', '\n', '  // Withdraw multisig wallet\n', '  address public advisorsAndPreICO;\n', '\n', '  // Token per ether\n', '  uint256 public constant token_per_wei = 12550;\n', '\n', '  // start and end timestamp where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  uint256 private constant weekInSeconds = 86400 * 7;\n', '\n', '  // whitelist addresses and planned investment amounts\n', '  mapping(address => uint256) public whitelist;\n', '\n', '  // amount of ether received from token buyers\n', '  mapping(address => uint256) public etherBalances;\n', '\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  event Whitelist(address indexed beneficiary, uint256 value);\n', '  event SoftCapReached();\n', '  event Finalized();\n', '\n', '  function TraceTokenSale(uint256 _startTime, address traceTokenAddress, address _wallet, address _teamAndFoundersWallet, address _advisorsAndPreICO) public {\n', '    require(_startTime >=  now);\n', '    require(_wallet != 0x0);\n', '    require(_teamAndFoundersWallet != 0x0);\n', '    require(_advisorsAndPreICO != 0x0);\n', '\n', '    token = TraceToken(traceTokenAddress);\n', '    wallet = _wallet;\n', '    teamAndFoundersWallet = _teamAndFoundersWallet;\n', '    advisorsAndPreICO = _advisorsAndPreICO;\n', '    startTime = _startTime;\n', '    endTime = _startTime + 4 * weekInSeconds; // the sale lasts a maximum of 5 weeks\n', '    \n', '  }\n', '    /*\n', '     * @dev fallback for processing ether\n', '     */\n', '     function() public payable {\n', '       return buyTokens(msg.sender);\n', '     }\n', '\n', '     function calcAmount() internal view returns (uint256) {\n', '\n', '      if (totalEthers >= presaleLimit || startTime + 2 * weekInSeconds  < now ){\n', '        // presale has ended\n', '        return msg.value.mul(token_per_wei);\n', '        }else{\n', '          // presale ongoing\n', '          require(msg.value >= min_investment_presale_eth);\n', '\n', '          /* discount 20 % in the first week - presale week 1 */\n', '          if (now <= startTime + weekInSeconds) {\n', '            return msg.value.mul(token_per_wei.mul(100)).div(80);\n', '\n', '          }\n', '\n', '          /* discount 15 % in the second week - presale week 2 */\n', '          if ( startTime +  weekInSeconds  < now ) {\n', '           return msg.value.mul(token_per_wei.mul(100)).div(85);\n', '         }\n', '       }\n', '\n', '     }\n', '\n', '    /*\n', '     * @dev sell token and send to contributor address\n', '     * @param contributor address\n', '     */\n', '     function buyTokens(address contributor) public payable {\n', '       require(!hasEnded());\n', '       require(!isPaused());\n', '       require(validPurchase());\n', '       require(checkWhitelist(contributor,msg.value));\n', '       uint256 amount = calcAmount();\n', '       require((token.totalSupply() + amount) <= TOTAL_NUM_TOKENS);\n', '       \n', '       whitelist[contributor] = whitelist[contributor].sub(msg.value);\n', '       etherBalances[contributor] = etherBalances[contributor].add(msg.value);\n', '\n', '       totalEthers = totalEthers.add(msg.value);\n', '\n', '       token.mint(contributor, amount);\n', '       require(totalEthers <= hardCap); \n', '       TokenPurchase(0x0, contributor, msg.value, amount);\n', '     }\n', '\n', '\n', '     // @return user balance\n', '     function balanceOf(address _owner) public view returns (uint256 balance) {\n', '      return token.balanceOf(_owner);\n', '    }\n', '\n', '    function checkWhitelist(address contributor, uint256 eth_amount) public view returns (bool) {\n', '     require(contributor!=0x0);\n', '     require(eth_amount>0);\n', '     return (whitelist[contributor] >= eth_amount);\n', '   }\n', '\n', '   function addWhitelist(address contributor, uint256 eth_amount) onlyOwner public returns (bool) {\n', '     require(!hasEnded());\n', '     require(contributor!=0x0);\n', '     require(eth_amount>0);\n', '     Whitelist(contributor, eth_amount);\n', '     whitelist[contributor] = eth_amount;\n', '     return true;\n', '   }\n', '\n', '   function addWhitelists(address[] contributors, uint256[] amounts) onlyOwner public returns (bool) {\n', '     require(!hasEnded());\n', '     address contributor;\n', '     uint256 amount;\n', '     require(contributors.length == amounts.length);\n', '\n', '     for (uint i = 0; i < contributors.length; i++) {\n', '      contributor = contributors[i];\n', '      amount = amounts[i];\n', '      require(addWhitelist(contributor, amount));\n', '    }\n', '    return true;\n', '  }\n', '\n', '\n', '  function validPurchase() internal view returns (bool) {\n', '\n', '   bool withinPeriod = now >= startTime && now <= endTime;\n', '   bool withinPurchaseLimits = msg.value >= min_investment_eth && msg.value <= max_investment_eth;\n', '   return withinPeriod && withinPurchaseLimits;\n', ' }\n', '\n', ' function hasStarted() public view returns (bool) {\n', '  return now >= startTime;\n', '}\n', '\n', 'function hasEnded() public view returns (bool) {\n', '  return now > endTime || token.totalSupply() == TOTAL_NUM_TOKENS;\n', '}\n', '\n', '\n', 'function hardCapReached() public view returns (bool) {\n', '  return hardCap.mul(999).div(1000) <= totalEthers; \n', '}\n', '\n', 'function softCapReached() public view returns(bool) {\n', '  return totalEthers >= softCap;\n', '}\n', '\n', '\n', 'function withdraw() onlyOwner public {\n', '  require(softCapReached());\n', '  require(this.balance > 0);\n', '\n', '  wallet.transfer(this.balance);\n', '}\n', '\n', 'function withdrawTokenToFounders() onlyOwner public {\n', '  require(softCapReached());\n', '  require(hasEnded());\n', '\n', '  if (now > startTime + 720 days && founderAmounts[7]!=0){\n', '    token.transfer(teamAndFoundersWallet, founderAmounts[7]);\n', '    founderAmounts[7] = 0;\n', '  }\n', '\n', '  if (now > startTime + 630 days && founderAmounts[6]!=0){\n', '    token.transfer(teamAndFoundersWallet, founderAmounts[6]);\n', '    founderAmounts[6] = 0;\n', '  }\n', '  if (now > startTime + 540 days && founderAmounts[5]!=0){\n', '    token.transfer(teamAndFoundersWallet, founderAmounts[5]);\n', '    founderAmounts[5] = 0;\n', '  }\n', '  if (now > startTime + 450 days && founderAmounts[4]!=0){\n', '    token.transfer(teamAndFoundersWallet, founderAmounts[4]);\n', '    founderAmounts[4] = 0;\n', '  }\n', '  if (now > startTime + 360 days&& founderAmounts[3]!=0){\n', '    token.transfer(teamAndFoundersWallet, founderAmounts[3]);\n', '    founderAmounts[3] = 0;\n', '  }\n', '  if (now > startTime + 270 days && founderAmounts[2]!=0){\n', '    token.transfer(teamAndFoundersWallet, founderAmounts[2]);\n', '    founderAmounts[2] = 0;\n', '  }\n', '  if (now > startTime + 180 days && founderAmounts[1]!=0){\n', '    token.transfer(teamAndFoundersWallet, founderAmounts[1]);\n', '    founderAmounts[1] = 0;\n', '  }\n', '  if (now > startTime + 90 days && founderAmounts[0]!=0){\n', '    token.transfer(teamAndFoundersWallet, founderAmounts[0]);\n', '    founderAmounts[0] = 0;\n', '  }\n', '}\n', '\n', 'function withdrawTokensToAdvisors() onlyOwner public {\n', '  require(softCapReached());\n', '  require(hasEnded());\n', '\n', '  if (now > startTime + 180 days && preicoAndAdvisorsAmounts[1]!=0){\n', '    token.transfer(advisorsAndPreICO, preicoAndAdvisorsAmounts[1]);\n', '    preicoAndAdvisorsAmounts[1] = 0;\n', '  }\n', '\n', '  if (now > startTime + 90 days && preicoAndAdvisorsAmounts[0]!=0){\n', '    token.transfer(advisorsAndPreICO, preicoAndAdvisorsAmounts[0]);\n', '    preicoAndAdvisorsAmounts[0] = 0;\n', '  }\n', '}\n', '\n', 'function refund() public {\n', '  require(refundAllowed);\n', '  require(hasEnded());\n', '  require(!softCapReached());\n', '  require(etherBalances[msg.sender] > 0);\n', '  require(token.balanceOf(msg.sender) > 0);\n', '\n', '  uint256 current_balance = etherBalances[msg.sender];\n', '  etherBalances[msg.sender] = 0;\n', '  token.transfer(this,token.balanceOf(msg.sender)); // burning tokens by sending back to contract\n', '  msg.sender.transfer(current_balance);\n', '}\n', '\n', '\n', 'function finishCrowdsale() onlyOwner public returns (bool){\n', '  require(!token.mintingFinished());\n', '  require(hasEnded() || hardCapReached());\n', '\n', '  if(softCapReached()) {\n', '    token.mint(wallet, bountyReward);\n', '    token.mint(advisorsAndPreICO,  preicoAndAdvisors.div(5)); //20% available immediately\n', '    token.mint(wallet, liquidityPool);\n', '    token.mint(wallet, futureDevelopment);\n', '    token.mint(this, teamAndFounders);\n', '    token.mint(this, preicoAndAdvisors.mul(4).div(5)); \n', '    leftOverTokens = TOTAL_NUM_TOKENS.sub(token.totalSupply());\n', '    token.mint(wallet,leftOverTokens); // will be equaly distributed among all presale and sale contributors after the sale\n', '\n', '    token.endMinting(true);\n', '    return true;\n', '    } else {\n', '      refundAllowed = true;\n', '      token.endMinting(false);\n', '      return false;\n', '    }\n', '\n', '    Finalized();\n', '  }\n', '\n', '\n', '  // additional functionality, used to pause crowdsale for 24h\n', '  function pauseSale() onlyOwner public returns (bool){\n', '    paused = true;\n', '    return true;\n', '  }\n', '\n', '  function unpauseSale() onlyOwner public returns (bool){\n', '    paused = false;\n', '    return true;\n', '  }\n', '\n', '  function isPaused() public view returns (bool){\n', '    return paused;\n', '  }\n', '}']