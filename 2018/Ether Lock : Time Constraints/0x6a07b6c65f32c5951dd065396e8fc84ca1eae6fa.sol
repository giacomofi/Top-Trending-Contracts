['pragma solidity ^0.4.15;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'library DateTime {\n', '        /*\n', '         *  Date and Time utilities for ethereum contracts\n', '         *\n', '         */\n', '        struct _DateTime {\n', '                uint16 year;\n', '                uint8 month;\n', '                uint8 day;\n', '                uint8 hour;\n', '                uint8 minute;\n', '                uint8 second;\n', '                uint8 weekday;\n', '        }\n', '\n', '        uint private constant DAY_IN_SECONDS = 86400;\n', '        uint private constant YEAR_IN_SECONDS = 31536000;\n', '        uint private constant LEAP_YEAR_IN_SECONDS = 31622400;\n', '\n', '        uint private constant HOUR_IN_SECONDS = 3600;\n', '        uint private constant MINUTE_IN_SECONDS = 60;\n', '\n', '        uint16 private constant ORIGIN_YEAR = 1970;\n', '\n', '        function isLeapYear(uint16 year) public constant returns (bool) {\n', '                if (year % 4 != 0) {\n', '                        return false;\n', '                }\n', '                if (year % 100 != 0) {\n', '                        return true;\n', '                }\n', '                if (year % 400 != 0) {\n', '                        return false;\n', '                }\n', '                return true;\n', '        }\n', '\n', '        function leapYearsBefore(uint year) public constant  returns (uint) {\n', '                year -= 1;\n', '                return year / 4 - year / 100 + year / 400;\n', '        }\n', '\n', '        function getDaysInMonth(uint8 month, uint16 year) public constant  returns (uint8) {\n', '                if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n', '                        return 31;\n', '                }\n', '                else if (month == 4 || month == 6 || month == 9 || month == 11) {\n', '                        return 30;\n', '                }\n', '                else if (isLeapYear(year)) {\n', '                        return 29;\n', '                }\n', '                else {\n', '                        return 28;\n', '                }\n', '        }\n', '\n', '        function parseTimestamp(uint timestamp) internal constant returns (_DateTime dt) {\n', '                uint secondsAccountedFor = 0;\n', '                uint buf;\n', '                uint8 i;\n', '\n', '                // Year\n', '                dt.year = getYear(timestamp);\n', '                buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\n', '\n', '                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\n', '                secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\n', '\n', '                // Month\n', '                uint secondsInMonth;\n', '                for (i = 1; i <= 12; i++) {\n', '                        secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\n', '                        if (secondsInMonth + secondsAccountedFor > timestamp) {\n', '                                dt.month = i;\n', '                                break;\n', '                        }\n', '                        secondsAccountedFor += secondsInMonth;\n', '                }\n', '\n', '                // Day\n', '                for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\n', '                        if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\n', '                                dt.day = i;\n', '                                break;\n', '                        }\n', '                        secondsAccountedFor += DAY_IN_SECONDS;\n', '                }\n', '\n', '                // Hour\n', '                dt.hour = getHour(timestamp);\n', '\n', '                // Minute\n', '                dt.minute = getMinute(timestamp);\n', '\n', '                // Second\n', '                dt.second = getSecond(timestamp);\n', '\n', '                // Day of week.\n', '                dt.weekday = getWeekday(timestamp);\n', '        }\n', '\n', '        function getYear(uint timestamp) public constant returns (uint16) {\n', '                uint secondsAccountedFor = 0;\n', '                uint16 year;\n', '                uint numLeapYears;\n', '\n', '                // Year\n', '                year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\n', '                numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\n', '\n', '                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\n', '                secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\n', '\n', '                while (secondsAccountedFor > timestamp) {\n', '                        if (isLeapYear(uint16(year - 1))) {\n', '                                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\n', '                        }\n', '                        else {\n', '                                secondsAccountedFor -= YEAR_IN_SECONDS;\n', '                        }\n', '                        year -= 1;\n', '                }\n', '                return year;\n', '        }\n', '\n', '        function getMonth(uint timestamp) public constant returns (uint8) {\n', '                return parseTimestamp(timestamp).month;\n', '        }\n', '\n', '        function getDay(uint timestamp) public constant returns (uint8) {\n', '                return parseTimestamp(timestamp).day;\n', '        }\n', '\n', '        function getHour(uint timestamp) public constant returns (uint8) {\n', '                return uint8((timestamp / 60 / 60) % 24);\n', '        }\n', '\n', '        function getMinute(uint timestamp) public constant returns (uint8) {\n', '                return uint8((timestamp / 60) % 60);\n', '        }\n', '\n', '        function getSecond(uint timestamp) public constant returns (uint8) {\n', '                return uint8(timestamp % 60);\n', '        }\n', '\n', '        function getWeekday(uint timestamp) public constant returns (uint8) {\n', '                return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\n', '        }\n', '\n', '        function toTimestamp(uint16 year, uint8 month, uint8 day) public constant returns (uint timestamp) {\n', '                return toTimestamp(year, month, day, 0, 0, 0);\n', '        }\n', '\n', '        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) public constant returns (uint timestamp) {\n', '                return toTimestamp(year, month, day, hour, 0, 0);\n', '        }\n', '\n', '        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) public constant returns (uint timestamp) {\n', '                return toTimestamp(year, month, day, hour, minute, 0);\n', '        }\n', '\n', '        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) public constant returns (uint timestamp) {\n', '                uint16 i;\n', '\n', '                // Year\n', '                for (i = ORIGIN_YEAR; i < year; i++) {\n', '                        if (isLeapYear(i)) {\n', '                                timestamp += LEAP_YEAR_IN_SECONDS;\n', '                        }\n', '                        else {\n', '                                timestamp += YEAR_IN_SECONDS;\n', '                        }\n', '                }\n', '\n', '                // Month\n', '                uint8[12] memory monthDayCounts;\n', '                monthDayCounts[0] = 31;\n', '                if (isLeapYear(year)) {\n', '                        monthDayCounts[1] = 29;\n', '                }\n', '                else {\n', '                        monthDayCounts[1] = 28;\n', '                }\n', '                monthDayCounts[2] = 31;\n', '                monthDayCounts[3] = 30;\n', '                monthDayCounts[4] = 31;\n', '                monthDayCounts[5] = 30;\n', '                monthDayCounts[6] = 31;\n', '                monthDayCounts[7] = 31;\n', '                monthDayCounts[8] = 30;\n', '                monthDayCounts[9] = 31;\n', '                monthDayCounts[10] = 30;\n', '                monthDayCounts[11] = 31;\n', '\n', '                for (i = 1; i < month; i++) {\n', '                        timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\n', '                }\n', '\n', '                // Day\n', '                timestamp += DAY_IN_SECONDS * (day - 1);\n', '\n', '                // Hour\n', '                timestamp += HOUR_IN_SECONDS * (hour);\n', '\n', '                // Minute\n', '                timestamp += MINUTE_IN_SECONDS * (minute);\n', '\n', '                // Second\n', '                timestamp += second;\n', '\n', '                return timestamp;\n', '        }\n', '\n', '\t\t// -1 t1 < t2\n', '\t\t// 0  t1 == t2\n', '\t\t// 1  t1 > t2\n', '\t\tfunction compareDatesWithoutTime(uint t1, uint t2) public constant returns (int res)\n', '\t\t{\n', '\t\t\t_DateTime memory dt1 = parseTimestamp(t1);\n', '\t\t\t_DateTime memory dt2 = parseTimestamp(t2);\n', '\n', '\t\t\tres = compareInts(dt1.year, dt2.year);\n', '\t\t\tif (res == 0)\n', '\t\t\t{\n', '\t\t\t\tres = compareInts(dt1.month, dt2.month);\n', '\t\t\t\tif (res == 0)\n', '\t\t\t\t{\n', '\t\t\t\t\tres = compareInts(dt1.day, dt2.day);\n', '\t\t\t\t}\n', '\t\t\t}\n', '\t\t}\n', '\n', '\n', '\t\t//  t2 -> MoveIn or MoveOut day in GMT, will be counted as beginning of a day\n', '\t\t//  t1 -> Current System DateTime\n', '\t\t// -1 t1 before t2\n', '\t\t//--------------------------------\n', '\t\t// 0  t1 same day as t2\n', '\t\t// 1  t1 after t2\n', '\t\tfunction compareDateTimesForContract(uint t1, uint t2) public constant returns (int res)\n', '\t\t{\n', '\t\t    uint endOfDay = t2 + (60 * 60 * 24);\n', '\t\t    res = 0;\n', '\t\t    \n', '\t\t    if (t2 <= t1 && t1 <= endOfDay)\n', '\t\t    {\n', '\t\t        res = 0;\n', '\t\t    }\n', '\t\t    else if (t2 > t1)\n', '\t\t    {\n', '\t\t        res = -1;\n', '\t\t    }\n', '\t\t    else if (t1 > endOfDay)\n', '\t\t    {\n', '\t\t        res = 1;\n', '\t\t    }\n', '\t\t}\t\n', '\n', '\n', '\t\t// -1 n1 < n2\n', '\t\t// 0  n1 == n2\n', '\t\t// 1  n1 > n2\n', '\t\tfunction compareInts(int n1, int n2) internal constant returns (int res)\n', '\t\t{\n', '\t\t\tif (n1 == n2)\n', '\t\t\t{\n', '\t\t\t\tres = 0;\n', '\t\t\t}\n', '\t\t\telse if (n1 < n2)\n', '\t\t\t{\n', '\t\t\t\tres = -1;\n', '\t\t\t}\n', '\t\t\telse if (n1 > n2)\n', '\t\t\t{\n', '\t\t\t\tres = 1;\n', '\t\t\t}\n', '\t\t}\n', '}']