['pragma solidity 0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/CanReclaimToken.sol\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens\n', ' * @author SylTi\n', ' * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n', ' * This will prevent any accidental loss of tokens.\n', ' */\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.safeTransfer(owner, balance);\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/HasNoEther.sol\n', '\n', '/**\n', ' * @title Contracts that should not own Ether\n', ' * @author Remco Bloemen <remco@2Ï€.com>\n', ' * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\n', ' * in the contract, it will allow the owner to reclaim this ether.\n', ' * @notice Ether can still be sent to this contract by:\n', ' * calling functions labeled `payable`\n', ' * `selfdestruct(contract_address)`\n', ' * mining directly to the contract address\n', ' */\n', 'contract HasNoEther is Ownable {\n', '\n', '  /**\n', '  * @dev Constructor that rejects incoming Ether\n', '  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n', '  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n', '  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n', '  * we could use assembly to access msg.value.\n', '  */\n', '  function HasNoEther() public payable {\n', '    require(msg.value == 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Disallows direct send by settings a default function without the `payable` flag.\n', '   */\n', '  function() external {\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer all Ether held by the contract to the owner.\n', '   */\n', '  function reclaimEther() external onlyOwner {\n', '    // solium-disable-next-line security/no-send\n', '    assert(owner.send(address(this).balance));\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/RTELockingVault.sol\n', '\n', '/**\n', ' * @title RTELockingVault\n', ' * @dev For RTE token holders to lock up their tokens for incentives\n', ' */\n', 'contract RTELockingVault is HasNoEther, CanReclaimToken {\n', '  using SafeERC20 for ERC20;\n', '  using SafeMath for uint256;\n', '\n', '  ERC20 public token;\n', '\n', '  bool public vaultUnlocked;\n', '\n', '  uint256 public cap;\n', '\n', '  uint256 public minimumDeposit;\n', '\n', '  uint256 public tokensDeposited;\n', '\n', '  uint256 public interestRate;\n', '\n', '  uint256 public vaultDepositDeadlineTime;\n', '\n', '  uint256 public vaultUnlockTime;\n', '\n', '  uint256 public vaultLockDays;\n', '\n', '  address public rewardWallet;\n', '\n', '  mapping(address => uint256) public lockedBalances;\n', '\n', '  /**\n', '   * @dev Locked tokens event\n', '   * @param _investor Investor address\n', '   * @param _value Tokens locked\n', '   */\n', '  event TokenLocked(address _investor, uint256 _value);\n', '\n', '  /**\n', '   * @dev Withdrawal event\n', '   * @param _investor Investor address\n', '   * @param _value Tokens withdrawn\n', '   */\n', '  event TokenWithdrawal(address _investor, uint256 _value);\n', '\n', '  constructor (\n', '    ERC20 _token,\n', '    uint256 _cap,\n', '    uint256 _minimumDeposit,\n', '    uint256 _interestRate,\n', '    uint256 _vaultDepositDeadlineTime,\n', '    uint256 _vaultUnlockTime,\n', '    uint256 _vaultLockDays,\n', '    address _rewardWallet\n', '  )\n', '    public\n', '  {\n', '    require(_vaultDepositDeadlineTime > now);\n', '    // require(_vaultDepositDeadlineTime < _vaultUnlockTime);\n', '\n', '    vaultUnlocked = false;\n', '\n', '    token = _token;\n', '    cap = _cap;\n', '    minimumDeposit = _minimumDeposit;\n', '    interestRate = _interestRate;\n', '    vaultDepositDeadlineTime = _vaultDepositDeadlineTime;\n', '    vaultUnlockTime = _vaultUnlockTime;\n', '    vaultLockDays = _vaultLockDays;\n', '    rewardWallet = _rewardWallet;\n', '  }\n', '\n', '  /**\n', '   * @dev Deposit and lock tokens\n', '   * @param _amount Amount of tokens to transfer and lock\n', '   */\n', '  function lockToken(uint256 _amount) public {\n', '    require(_amount >= minimumDeposit);\n', '    require(now < vaultDepositDeadlineTime);\n', '    require(tokensDeposited.add(_amount) <= cap);\n', '\n', '    token.safeTransferFrom(msg.sender, address(this), _amount);\n', '\n', '    lockedBalances[msg.sender] = lockedBalances[msg.sender].add(_amount);\n', '\n', '    tokensDeposited = tokensDeposited.add(_amount);\n', '\n', '    emit TokenLocked(msg.sender, _amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Withdraw locked tokens\n', '   */\n', '  function withdrawToken() public {\n', '    // require(vaultUnlocked);\n', '\n', '    uint256 interestAmount = (interestRate.mul(lockedBalances[msg.sender]).div(36500)).mul(vaultLockDays);\n', '\n', '    uint256 withdrawAmount = (lockedBalances[msg.sender]).add(interestAmount);\n', '    require(withdrawAmount > 0);\n', '\n', '    lockedBalances[msg.sender] = 0;\n', '\n', '    token.safeTransfer(msg.sender, withdrawAmount);\n', '\n', '    emit TokenWithdrawal(msg.sender, withdrawAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Force Withdraw locked tokens\n', '   */\n', '  function forceWithdrawToken(address _forceAddress) public onlyOwner {\n', '    require(vaultUnlocked);\n', '\n', '    uint256 interestAmount = (interestRate.mul(lockedBalances[_forceAddress]).div(36500)).mul(vaultLockDays);\n', '\n', '    uint256 withdrawAmount = (lockedBalances[_forceAddress]).add(interestAmount);\n', '    require(withdrawAmount > 0);\n', '\n', '    lockedBalances[_forceAddress] = 0;\n', '\n', '    token.safeTransfer(_forceAddress, withdrawAmount);\n', '\n', '    emit TokenWithdrawal(_forceAddress, withdrawAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Irreversibly finalizes and unlocks the vault - only owner of contract can call this\n', '   */\n', '  function finalizeVault() public onlyOwner {\n', '    // require(!vaultUnlocked);\n', '    require(now >= vaultUnlockTime);\n', '\n', '    vaultUnlocked = true;\n', '\n', '    uint256 bonusTokens = ((tokensDeposited.mul(interestRate)).div(36500)).mul(vaultLockDays);\n', '\n', '    token.safeTransferFrom(rewardWallet, address(this), bonusTokens);\n', '  }\n', '}']