['pragma solidity ^0.4.18;\n', '\n', 'contract DateTime {\n', '        /*\n', '         *  Date and Time utilities for ethereum contracts\n', '         *\n', '         */\n', '        struct _DateTime {\n', '                uint16 year;\n', '                uint8 month;\n', '                uint8 day;\n', '                uint8 hour;\n', '                uint8 minute;\n', '                uint8 second;\n', '                uint8 weekday;\n', '        }\n', '\n', '        uint constant DAY_IN_SECONDS = 86400;\n', '        uint constant YEAR_IN_SECONDS = 31536000;\n', '        uint constant LEAP_YEAR_IN_SECONDS = 31622400;\n', '\n', '        uint constant HOUR_IN_SECONDS = 3600;\n', '        uint constant MINUTE_IN_SECONDS = 60;\n', '\n', '        uint16 constant ORIGIN_YEAR = 1970;\n', '\n', '        function isLeapYear(uint16 year) public pure returns (bool) {\n', '                if (year % 4 != 0) {\n', '                        return false;\n', '                }\n', '                if (year % 100 != 0) {\n', '                        return true;\n', '                }\n', '                if (year % 400 != 0) {\n', '                        return false;\n', '                }\n', '                return true;\n', '        }\n', '\n', '        function leapYearsBefore(uint year) public pure returns (uint) {\n', '                year -= 1;\n', '                return year / 4 - year / 100 + year / 400;\n', '        }\n', '\n', '        function getDaysInMonth(uint8 month, uint16 year) public pure returns (uint8) {\n', '                if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n', '                        return 31;\n', '                }\n', '                else if (month == 4 || month == 6 || month == 9 || month == 11) {\n', '                        return 30;\n', '                }\n', '                else if (isLeapYear(year)) {\n', '                        return 29;\n', '                }\n', '                else {\n', '                        return 28;\n', '                }\n', '        }\n', '\n', '        function parseTimestamp(uint timestamp) internal pure returns (_DateTime dt) {\n', '                uint secondsAccountedFor = 0;\n', '                uint buf;\n', '                uint8 i;\n', '\n', '                // Year\n', '                dt.year = getYear(timestamp);\n', '                buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\n', '\n', '                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\n', '                secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\n', '\n', '                // Month\n', '                uint secondsInMonth;\n', '                for (i = 1; i <= 12; i++) {\n', '                        secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\n', '                        if (secondsInMonth + secondsAccountedFor > timestamp) {\n', '                                dt.month = i;\n', '                                break;\n', '                        }\n', '                        secondsAccountedFor += secondsInMonth;\n', '                }\n', '\n', '                // Day\n', '                for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\n', '                        if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\n', '                                dt.day = i;\n', '                                break;\n', '                        }\n', '                        secondsAccountedFor += DAY_IN_SECONDS;\n', '                }\n', '\n', '                // Hour\n', '                dt.hour = getHour(timestamp);\n', '\n', '                // Minute\n', '                dt.minute = getMinute(timestamp);\n', '\n', '                // Second\n', '                dt.second = getSecond(timestamp);\n', '\n', '                // Day of week.\n', '                dt.weekday = getWeekday(timestamp);\n', '        }\n', '\n', '        function getYear(uint timestamp) public pure returns (uint16) {\n', '                uint secondsAccountedFor = 0;\n', '                uint16 year;\n', '                uint numLeapYears;\n', '\n', '                // Year\n', '                year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\n', '                numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\n', '\n', '                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\n', '                secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\n', '\n', '                while (secondsAccountedFor > timestamp) {\n', '                        if (isLeapYear(uint16(year - 1))) {\n', '                                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\n', '                        }\n', '                        else {\n', '                                secondsAccountedFor -= YEAR_IN_SECONDS;\n', '                        }\n', '                        year -= 1;\n', '                }\n', '                return year;\n', '        }\n', '\n', '        function getMonth(uint timestamp) public pure returns (uint8) {\n', '                return parseTimestamp(timestamp).month;\n', '        }\n', '\n', '        function getDay(uint timestamp) public pure returns (uint8) {\n', '                return parseTimestamp(timestamp).day;\n', '        }\n', '\n', '        function getHour(uint timestamp) public pure returns (uint8) {\n', '                return uint8((timestamp / 60 / 60) % 24);\n', '        }\n', '\n', '        function getMinute(uint timestamp) public pure returns (uint8) {\n', '                return uint8((timestamp / 60) % 60);\n', '        }\n', '\n', '        function getSecond(uint timestamp) public pure returns (uint8) {\n', '                return uint8(timestamp % 60);\n', '        }\n', '\n', '        function getWeekday(uint timestamp) public pure returns (uint8) {\n', '                return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\n', '        }\n', '\n', '        function toTimestamp(uint16 year, uint8 month, uint8 day) public pure returns (uint timestamp) {\n', '                return toTimestamp(year, month, day, 0, 0, 0);\n', '        }\n', '\n', '        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) public pure returns (uint timestamp) {\n', '                return toTimestamp(year, month, day, hour, 0, 0);\n', '        }\n', '\n', '        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) public pure returns (uint timestamp) {\n', '                return toTimestamp(year, month, day, hour, minute, 0);\n', '        }\n', '\n', '        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) public pure returns (uint timestamp) {\n', '                uint16 i;\n', '\n', '                // Year\n', '                for (i = ORIGIN_YEAR; i < year; i++) {\n', '                        if (isLeapYear(i)) {\n', '                                timestamp += LEAP_YEAR_IN_SECONDS;\n', '                        }\n', '                        else {\n', '                                timestamp += YEAR_IN_SECONDS;\n', '                        }\n', '                }\n', '\n', '                // Month\n', '                uint8[12] memory monthDayCounts;\n', '                monthDayCounts[0] = 31;\n', '                if (isLeapYear(year)) {\n', '                        monthDayCounts[1] = 29;\n', '                }\n', '                else {\n', '                        monthDayCounts[1] = 28;\n', '                }\n', '                monthDayCounts[2] = 31;\n', '                monthDayCounts[3] = 30;\n', '                monthDayCounts[4] = 31;\n', '                monthDayCounts[5] = 30;\n', '                monthDayCounts[6] = 31;\n', '                monthDayCounts[7] = 31;\n', '                monthDayCounts[8] = 30;\n', '                monthDayCounts[9] = 31;\n', '                monthDayCounts[10] = 30;\n', '                monthDayCounts[11] = 31;\n', '\n', '                for (i = 1; i < month; i++) {\n', '                        timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\n', '                }\n', '\n', '                // Day\n', '                timestamp += DAY_IN_SECONDS * (day - 1);\n', '\n', '                // Hour\n', '                timestamp += HOUR_IN_SECONDS * (hour);\n', '\n', '                // Minute\n', '                timestamp += MINUTE_IN_SECONDS * (minute);\n', '\n', '                // Second\n', '                timestamp += second;\n', '\n', '                return timestamp;\n', '        }\n', '}\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Destructible\n', ' * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n', ' */\n', 'contract Destructible is Ownable {\n', '\n', '    function Destructible() public payable { }\n', '\n', '    /**\n', '     * @dev Transfers the current balance to the owner and terminates the contract.\n', '     */\n', '    function destroy() onlyOwner public {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '    function destroyAndSend(address _recipient) onlyOwner public {\n', '        selfdestruct(_recipient);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '}\n', '\n', '\n', '/// @title ABAToken - Token code for the ABA Project\n', '/// @author David Chen, Jacky Lin\n', 'contract ABAToken is StandardToken, Ownable, Pausable, Destructible {\n', '\n', '    using SafeMath for uint;\n', '    string public constant name = "EcosBall";\n', '    string public constant symbol = "ABA";\n', '    uint public constant decimals = 18;\n', '\n', '    DateTime public dateTime;\n', '\n', '    uint constant million=1000000e18;\n', '    //total token supply: 2.1 billion\n', '    uint constant totalToken = 2100*million;\n', '    //miner reward: 1.47 billion, 70% in 30 years, locked in the first year, 3.45% per year started from second year\n', '    uint constant minerTotalSupply = 1470*million;\n', '    //fund:105 million,5%, locked at least 1 year\n', '    uint constant fundTotalSupply = 105*million;\n', '    //IEO supply 105 million,5%\n', '    uint constant ieoTotalSupply = 105*million;\n', '    //Project team 105 million,5%, 12.5% of them are released in every 6 months\n', '    uint constant projectTotalSupply = 105*million;\n', '    //presale supply 105 million,5%\n', '    uint constant presaleTotalSupply = 105*million;\n', '    //market and community: 210 million, 10%, 50% of them are locked for 1 year\n', '    uint constant market_communityTotalSupply = 210*million;\n', '\n', '    uint projectUsedTokens = 0;\n', '    uint market_communityUsedTokens = 0;\n', '\n', '    bool bAllocFund = false;\n', '    bool bAllocMarket_community = false;\n', '    bool bAllocProject1 = false;\n', '    bool bAllocProject2 = false;\n', '    bool bAllocProject3 = false;\n', '    bool bAllocProject4 = false;\n', '    bool bAllocProject5 = false;\n', '    bool bAllocProject6 = false;\n', '    bool bAllocProject7 = false;\n', '    bool bAllocProject8 = false;\n', '    uint constant perProjectAlloc = 13125000e18;\n', '\n', '    address public fundStorageVault;\n', '    address public ieoStorageVault;\n', '    address public projectStorageVault;\n', '    address public presaleStorageVault;\n', '    address public market_communityStorageVault;\n', '\n', '    //@notice  Constructor of ABAToken\n', '    function ABAToken() {\n', '      totalSupply = totalToken;\n', '      fundStorageVault = 0xa5b2F189552d3200fF393a38cCD90D63F3a99D08;\n', '      ieoStorageVault = 0x07D150A514EB394efe4879d530C4c6C710509Da7;\n', '      projectStorageVault = 0xd275eD1359F89251FbDeCdCbC196B57Ad71B851c;\n', '      presaleStorageVault = 0xeA426B782D7526d5236Ff39515696cB096F5Af0A;\n', '      market_communityStorageVault = 0xA408529eb7a233808F4c37308ed52e02046e7B09;\n', '\n', '      balances[fundStorageVault] = 0;\n', '      balances[ieoStorageVault] = ieoTotalSupply;\n', '      balances[projectStorageVault] = 0;\n', '      balances[presaleStorageVault] = presaleTotalSupply;\n', '      market_communityUsedTokens = market_communityTotalSupply.div(2);\n', '      balances[market_communityStorageVault] = market_communityUsedTokens;\n', '\n', '      dateTime = new DateTime();\n', '      balances[msg.sender] = minerTotalSupply;\n', '    }\n', '\n', '    function allocateFundToken() onlyOwner whenNotPaused external {\n', '      if (now < dateTime.toTimestamp(2019,4,15)) throw;\n', '      if (bAllocFund) throw;\n', '      bAllocFund = true;\n', '      balances[fundStorageVault] = balances[fundStorageVault].add(fundTotalSupply);\n', '    }\n', '\n', '    function getProjectUsedTokens() constant returns (uint256) {\n', '      return projectUsedTokens;\n', '    }\n', '\n', '    function getProjectUnusedTokens() constant returns (uint256) {\n', '      if(projectUsedTokens > projectTotalSupply) throw;\n', '      uint projectUnusedTokens = projectTotalSupply.sub(projectUsedTokens);\n', '      return projectUnusedTokens;\n', '    }\n', '\n', '    function allocate1ProjectToken() onlyOwner whenNotPaused external {\n', '      if (now < dateTime.toTimestamp(2018,6,30)) throw;\n', '      if (bAllocProject1) throw;\n', '      bAllocProject1 = true;\n', '      projectUsedTokens = projectUsedTokens.add(perProjectAlloc);\n', '      balances[projectStorageVault] = balances[projectStorageVault].add(perProjectAlloc);\n', '    }\n', '\n', '    function allocate2ProjectToken() onlyOwner whenNotPaused external {\n', '      if (now < dateTime.toTimestamp(2018,12,31)) throw;\n', '      if (bAllocProject2) throw;\n', '      bAllocProject2 = true;\n', '      projectUsedTokens = projectUsedTokens.add(perProjectAlloc);\n', '      balances[projectStorageVault] = balances[projectStorageVault].add(perProjectAlloc);\n', '    }\n', '\n', '    function allocate3ProjectToken() onlyOwner whenNotPaused external {\n', '      if (now < dateTime.toTimestamp(2019,6,30)) throw;\n', '      if (bAllocProject3) throw;\n', '      bAllocProject3 = true;\n', '      projectUsedTokens = projectUsedTokens.add(perProjectAlloc);\n', '      balances[projectStorageVault] = balances[projectStorageVault].add(perProjectAlloc);\n', '    }\n', '\n', '    function allocate4ProjectToken() onlyOwner whenNotPaused external {\n', '      if (now < dateTime.toTimestamp(2019,12,31)) throw;\n', '      if (bAllocProject4) throw;\n', '      bAllocProject4 = true;\n', '      projectUsedTokens = projectUsedTokens.add(perProjectAlloc);\n', '      balances[projectStorageVault] = balances[projectStorageVault].add(perProjectAlloc);\n', '    }\n', '\n', '    function allocate5ProjectToken() onlyOwner whenNotPaused external {\n', '      if (now < dateTime.toTimestamp(2020,6,30)) throw;\n', '      if (bAllocProject5) throw;\n', '      bAllocProject5 = true;\n', '      projectUsedTokens = projectUsedTokens.add(perProjectAlloc);\n', '      balances[projectStorageVault] = balances[projectStorageVault].add(perProjectAlloc);\n', '    }\n', '\n', '    function allocate6ProjectToken() onlyOwner whenNotPaused external {\n', '      if (now < dateTime.toTimestamp(2020,12,31)) throw;\n', '      if (bAllocProject6) throw;\n', '      bAllocProject6 = true;\n', '      projectUsedTokens = projectUsedTokens.add(perProjectAlloc);\n', '      balances[projectStorageVault] = balances[projectStorageVault].add(perProjectAlloc);\n', '    }\n', '\n', '    function allocate7ProjectToken() onlyOwner whenNotPaused external {\n', '      if (now < dateTime.toTimestamp(2021,6,30)) throw;\n', '      if (bAllocProject7) throw;\n', '      bAllocProject7 = true;\n', '      projectUsedTokens = projectUsedTokens.add(perProjectAlloc);\n', '      balances[projectStorageVault] = balances[projectStorageVault].add(perProjectAlloc);\n', '    }\n', '\n', '    function allocate8ProjectToken() onlyOwner whenNotPaused external {\n', '      if (now < dateTime.toTimestamp(2021,12,31)) throw;\n', '      if (bAllocProject8) throw;\n', '      bAllocProject8 = true;\n', '      projectUsedTokens = projectUsedTokens.add(perProjectAlloc);\n', '      balances[projectStorageVault] = balances[projectStorageVault].add(perProjectAlloc);\n', '    }\n', '\n', '    function allocateMarket_CommunitTokens() onlyOwner whenNotPaused external {\n', '      if (now < dateTime.toTimestamp(2019,4,15)) throw;\n', '      if (bAllocMarket_community) throw;\n', '      bAllocMarket_community = true;\n', '      uint nowAllocateTokens = market_communityTotalSupply.div(2);\n', '      market_communityUsedTokens = market_communityUsedTokens.add(market_communityUsedTokens);\n', '      balances[market_communityStorageVault] = balances[market_communityStorageVault].add(nowAllocateTokens);\n', '    }\n', '\n', '    function getMarket_CommunitUsedTokens() constant returns (uint256) {\n', '      return market_communityUsedTokens;\n', '    }\n', '\n', '    function getMarket_CommunitUnusedTokens() constant returns (uint256) {\n', '      if(market_communityUsedTokens > market_communityTotalSupply) throw;\n', '      uint market_communityUnusedTokens = market_communityTotalSupply.sub(market_communityUsedTokens);\n', '      return market_communityUnusedTokens;\n', '    }\n', '}']