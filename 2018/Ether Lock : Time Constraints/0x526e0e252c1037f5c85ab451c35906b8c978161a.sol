['pragma solidity 0.4.18;\n', '\n', '\n', '/*\n', ' * https://github.com/OpenZeppelin/zeppelin-solidity\n', ' *\n', ' * The MIT License (MIT)\n', ' * Copyright (c) 2016 Smart Contract Solutions, Inc.\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/*\n', ' * https://github.com/OpenZeppelin/zeppelin-solidity\n', ' *\n', ' * The MIT License (MIT)\n', ' * Copyright (c) 2016 Smart Contract Solutions, Inc.\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Token interface compatible with ICO Crowdsale\n', ' * @author Jakub Stefanski (https://github.com/jstefanski)\n', ' * @author Wojciech Harzowski (https://github.com/harzo)\n', ' * @author Dominik Kroliczek (https://github.com/kruligh)\n', ' *\n', ' * https://github.com/OnLivePlatform/onlive-contracts\n', ' *\n', ' * The BSD 3-Clause Clear License\n', ' * Copyright (c) 2018 OnLive LTD\n', ' */\n', 'contract IcoToken {\n', '    uint256 public decimals;\n', '\n', '    function transfer(address to, uint256 amount) public;\n', '    function mint(address to, uint256 amount) public;\n', '    function burn(uint256 amount) public;\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '}\n', '\n', '\n', '/**\n', ' * @title ICO Crowdsale with multiple price tiers and limited supply\n', ' * @author Jakub Stefanski (https://github.com/jstefanski)\n', ' * @author Wojciech Harzowski (https://github.com/harzo)\n', ' * @author Dominik Kroliczek (https://github.com/kruligh)\n', ' *\n', ' * https://github.com/OnLivePlatform/onlive-contracts\n', ' *\n', ' * The BSD 3-Clause Clear License\n', ' * Copyright (c) 2018 OnLive LTD\n', ' */\n', 'contract IcoCrowdsale is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * @dev Structure representing price tier\n', '     */\n', '    struct Tier {\n', '        /**\n', '        * @dev The first block of the tier (inclusive)\n', '        */\n', '        uint256 startBlock;\n', '        /**\n', '        * @dev Price of token in Wei\n', '        */\n', '        uint256 price;\n', '    }\n', '\n', '    /**\n', '     * @dev Address of contribution wallet\n', '     */\n', '    address public wallet;\n', '\n', '    /**\n', '     * @dev Address of compatible token instance\n', '     */\n', '    IcoToken public token;\n', '\n', '    /**\n', '     * @dev Minimum ETH value sent as contribution\n', '     */\n', '    uint256 public minValue;\n', '\n', '    /**\n', '     * @dev Indicates whether contribution identified by bytes32 id is already registered\n', '     */\n', '    mapping (bytes32 => bool) public isContributionRegistered;\n', '\n', '    /**\n', '     * @dev Stores price tiers in chronological order\n', '     */\n', '    Tier[] private tiers;\n', '\n', '    /**\n', '    * @dev The last block of crowdsale (inclusive)\n', '    */\n', '    uint256 public endBlock;\n', '\n', '    modifier onlySufficientValue(uint256 value) {\n', '        require(value >= minValue);\n', '        _;\n', '    }\n', '\n', '    modifier onlyUniqueContribution(bytes32 id) {\n', '        require(!isContributionRegistered[id]);\n', '        _;\n', '    }\n', '\n', '    modifier onlyActive() {\n', '        require(isActive());\n', '        _;\n', '    }\n', '\n', '    modifier onlyFinished() {\n', '        require(isFinished());\n', '        _;\n', '    }\n', '\n', '    modifier onlyScheduledTiers() {\n', '        require(tiers.length > 0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyNotFinalized() {\n', '        require(!isFinalized());\n', '        _;\n', '    }\n', '\n', '    modifier onlySubsequentBlock(uint256 startBlock) {\n', '        if (tiers.length > 0) {\n', '            require(startBlock > tiers[tiers.length - 1].startBlock);\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier onlyNotZero(uint256 value) {\n', '        require(value != 0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyValid(address addr) {\n', '        require(addr != address(0));\n', '        _;\n', '    }\n', '\n', '    function IcoCrowdsale(\n', '        address _wallet,\n', '        IcoToken _token,\n', '        uint256 _minValue\n', '    )\n', '        public\n', '        onlyValid(_wallet)\n', '        onlyValid(_token)\n', '    {\n', '        wallet = _wallet;\n', '        token = _token;\n', '        minValue = _minValue;\n', '    }\n', '\n', '    /**\n', '     * @dev Contribution is accepted\n', '     * @param contributor address The recipient of the tokens\n', '     * @param value uint256 The amount of contributed ETH\n', '     * @param amount uint256 The amount of tokens\n', '     */\n', '    event ContributionAccepted(address indexed contributor, uint256 value, uint256 amount);\n', '\n', '    /**\n', '     * @dev Off-chain contribution registered\n', '     * @param id bytes32 A unique contribution id\n', '     * @param contributor address The recipient of the tokens\n', '     * @param amount uint256 The amount of tokens\n', '     */\n', '    event ContributionRegistered(bytes32 indexed id, address indexed contributor, uint256 amount);\n', '\n', '    /**\n', '     * @dev Tier scheduled with given start block and price\n', '     * @param startBlock uint256 The first block of tier activation (inclusive)\n', '     * @param price uint256 The price active during tier\n', '     */\n', '    event TierScheduled(uint256 startBlock, uint256 price);\n', '\n', '    /**\n', '     * @dev Crowdsale end block scheduled\n', '     * @param availableAmount uint256 The amount of tokens available in crowdsale\n', '     * @param endBlock uint256 The last block of crowdsale (inclusive)\n', '     */\n', '    event Finalized(uint256 endBlock, uint256 availableAmount);\n', '\n', '    /**\n', '     * @dev Unsold tokens burned\n', '     */\n', '    event RemainsBurned(uint256 burnedAmount);\n', '\n', '    /**\n', '     * @dev Accept ETH transfers as contributions\n', '     */\n', '    function () public payable {\n', '        acceptContribution(msg.sender, msg.value);\n', '    }\n', '\n', '    /**\n', '     * @dev Contribute ETH in exchange for tokens\n', '     * @param contributor address The address that receives tokens\n', '     * @return uint256 Amount of received ONL tokens\n', '     */\n', '    function contribute(address contributor) public payable returns (uint256) {\n', '        return acceptContribution(contributor, msg.value);\n', '    }\n', '\n', '    /**\n', '     * @dev Register contribution with given id\n', '     * @param id bytes32 A unique contribution id\n', '     * @param contributor address The recipient of the tokens\n', '     * @param amount uint256 The amount of tokens\n', '     */\n', '    function registerContribution(bytes32 id, address contributor, uint256 amount)\n', '        public\n', '        onlyOwner\n', '        onlyActive\n', '        onlyValid(contributor)\n', '        onlyNotZero(amount)\n', '        onlyUniqueContribution(id)\n', '    {\n', '        isContributionRegistered[id] = true;\n', '\n', '        token.transfer(contributor, amount);\n', '\n', '        ContributionRegistered(id, contributor, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Schedule price tier\n', '     * @param _startBlock uint256 Block when the tier activates, inclusive\n', '     * @param _price uint256 The price of the tier\n', '     */\n', '    function scheduleTier(uint256 _startBlock, uint256 _price)\n', '        public\n', '        onlyOwner\n', '        onlyNotFinalized\n', '        onlySubsequentBlock(_startBlock)\n', '        onlyNotZero(_startBlock)\n', '        onlyNotZero(_price)\n', '    {\n', '        tiers.push(\n', '            Tier({\n', '                startBlock: _startBlock,\n', '                price: _price\n', '            })\n', '        );\n', '\n', '        TierScheduled(_startBlock, _price);\n', '    }\n', '\n', '    /**\n', '     * @dev Schedule crowdsale end\n', '     * @param _endBlock uint256 The last block end of crowdsale (inclusive)\n', '     * @param _availableAmount uint256 Amount of tokens available in crowdsale\n', '     */\n', '    function finalize(uint256 _endBlock, uint256 _availableAmount)\n', '        public\n', '        onlyOwner\n', '        onlyNotFinalized\n', '        onlyScheduledTiers\n', '        onlySubsequentBlock(_endBlock)\n', '        onlyNotZero(_availableAmount)\n', '    {\n', '        endBlock = _endBlock;\n', '\n', '        token.mint(this, _availableAmount);\n', '\n', '        Finalized(_endBlock, _availableAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Burns all tokens which have not been sold\n', '     */\n', '    function burnRemains()\n', '        public\n', '        onlyOwner\n', '        onlyFinished\n', '    {\n', '        uint256 amount = availableAmount();\n', '\n', '        token.burn(amount);\n', '\n', '        RemainsBurned(amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate amount of ONL tokens received for given ETH value\n', '     * @param value uint256 Contribution value in wei\n', '     * @return uint256 Amount of received ONL tokens if contract active, otherwise 0\n', '     */\n', '    function calculateContribution(uint256 value) public view returns (uint256) {\n', '        uint256 price = currentPrice();\n', '        if (price > 0) {\n', '            return value.mul(10 ** token.decimals()).div(price);\n', '        }\n', '\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Find closest tier id to given block\n', '     * @return uint256 Tier containing the block or zero if before start or last if after finished\n', '     */\n', '    function getTierId(uint256 blockNumber) public view returns (uint256) {\n', '        for (uint256 i = tiers.length - 1; i >= 0; i--) {\n', '            if (blockNumber >= tiers[i].startBlock) {\n', '                return i;\n', '            }\n', '        }\n', '\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Get price of the current tier\n', '     * @return uint256 Current price if tiers defined, otherwise 0\n', '     */\n', '    function currentPrice() public view returns (uint256) {\n', '        if (tiers.length > 0) {\n', '            uint256 id = getTierId(block.number);\n', '            return tiers[id].price;\n', '        }\n', '\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Get current tier id\n', '     * @return uint256 Tier containing the block or zero if before start or last if after finished\n', '     */\n', '    function currentTierId() public view returns (uint256) {\n', '        return getTierId(block.number);\n', '    }\n', '\n', '    /**\n', '     * @dev Get available amount of tokens\n', '     * @return uint256 Amount of unsold tokens\n', '     */\n', '    function availableAmount() public view returns (uint256) {\n', '        return token.balanceOf(this);\n', '    }\n', '\n', '    /**\n', '     * @dev Get specification of all tiers\n', '     */\n', '    function listTiers()\n', '        public\n', '        view\n', '        returns (uint256[] startBlocks, uint256[] endBlocks, uint256[] prices)\n', '    {\n', '        startBlocks = new uint256[](tiers.length);\n', '        endBlocks = new uint256[](tiers.length);\n', '        prices = new uint256[](tiers.length);\n', '\n', '        for (uint256 i = 0; i < tiers.length; i++) {\n', '            startBlocks[i] = tiers[i].startBlock;\n', '            prices[i] = tiers[i].price;\n', '\n', '            if (i + 1 < tiers.length) {\n', '                endBlocks[i] = tiers[i + 1].startBlock - 1;\n', '            } else {\n', '                endBlocks[i] = endBlock;\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Check whether crowdsale is currently active\n', '     * @return boolean True if current block number is within tier ranges, otherwise False\n', '     */\n', '    function isActive() public view returns (bool) {\n', '        return\n', '            tiers.length > 0 &&\n', '            block.number >= tiers[0].startBlock &&\n', '            block.number <= endBlock;\n', '    }\n', '\n', '    /**\n', '     * @dev Check whether sale end is scheduled\n', '     * @return boolean True if end block is defined, otherwise False\n', '     */\n', '    function isFinalized() public view returns (bool) {\n', '        return endBlock > 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Check whether crowdsale has finished\n', '     * @return boolean True if end block passed, otherwise False\n', '     */\n', '    function isFinished() public view returns (bool) {\n', '        return endBlock > 0 && block.number > endBlock;\n', '    }\n', '\n', '    function acceptContribution(address contributor, uint256 value)\n', '        private\n', '        onlyActive\n', '        onlyValid(contributor)\n', '        onlySufficientValue(value)\n', '        returns (uint256)\n', '    {\n', '        uint256 amount = calculateContribution(value);\n', '        token.transfer(contributor, amount);\n', '\n', '        wallet.transfer(value);\n', '\n', '        ContributionAccepted(contributor, value, amount);\n', '\n', '        return amount;\n', '    }\n', '}']
['pragma solidity 0.4.18;\n', '\n', '\n', '/*\n', ' * https://github.com/OpenZeppelin/zeppelin-solidity\n', ' *\n', ' * The MIT License (MIT)\n', ' * Copyright (c) 2016 Smart Contract Solutions, Inc.\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/*\n', ' * https://github.com/OpenZeppelin/zeppelin-solidity\n', ' *\n', ' * The MIT License (MIT)\n', ' * Copyright (c) 2016 Smart Contract Solutions, Inc.\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Token interface compatible with ICO Crowdsale\n', ' * @author Jakub Stefanski (https://github.com/jstefanski)\n', ' * @author Wojciech Harzowski (https://github.com/harzo)\n', ' * @author Dominik Kroliczek (https://github.com/kruligh)\n', ' *\n', ' * https://github.com/OnLivePlatform/onlive-contracts\n', ' *\n', ' * The BSD 3-Clause Clear License\n', ' * Copyright (c) 2018 OnLive LTD\n', ' */\n', 'contract IcoToken {\n', '    uint256 public decimals;\n', '\n', '    function transfer(address to, uint256 amount) public;\n', '    function mint(address to, uint256 amount) public;\n', '    function burn(uint256 amount) public;\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '}\n', '\n', '\n', '/**\n', ' * @title ICO Crowdsale with multiple price tiers and limited supply\n', ' * @author Jakub Stefanski (https://github.com/jstefanski)\n', ' * @author Wojciech Harzowski (https://github.com/harzo)\n', ' * @author Dominik Kroliczek (https://github.com/kruligh)\n', ' *\n', ' * https://github.com/OnLivePlatform/onlive-contracts\n', ' *\n', ' * The BSD 3-Clause Clear License\n', ' * Copyright (c) 2018 OnLive LTD\n', ' */\n', 'contract IcoCrowdsale is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * @dev Structure representing price tier\n', '     */\n', '    struct Tier {\n', '        /**\n', '        * @dev The first block of the tier (inclusive)\n', '        */\n', '        uint256 startBlock;\n', '        /**\n', '        * @dev Price of token in Wei\n', '        */\n', '        uint256 price;\n', '    }\n', '\n', '    /**\n', '     * @dev Address of contribution wallet\n', '     */\n', '    address public wallet;\n', '\n', '    /**\n', '     * @dev Address of compatible token instance\n', '     */\n', '    IcoToken public token;\n', '\n', '    /**\n', '     * @dev Minimum ETH value sent as contribution\n', '     */\n', '    uint256 public minValue;\n', '\n', '    /**\n', '     * @dev Indicates whether contribution identified by bytes32 id is already registered\n', '     */\n', '    mapping (bytes32 => bool) public isContributionRegistered;\n', '\n', '    /**\n', '     * @dev Stores price tiers in chronological order\n', '     */\n', '    Tier[] private tiers;\n', '\n', '    /**\n', '    * @dev The last block of crowdsale (inclusive)\n', '    */\n', '    uint256 public endBlock;\n', '\n', '    modifier onlySufficientValue(uint256 value) {\n', '        require(value >= minValue);\n', '        _;\n', '    }\n', '\n', '    modifier onlyUniqueContribution(bytes32 id) {\n', '        require(!isContributionRegistered[id]);\n', '        _;\n', '    }\n', '\n', '    modifier onlyActive() {\n', '        require(isActive());\n', '        _;\n', '    }\n', '\n', '    modifier onlyFinished() {\n', '        require(isFinished());\n', '        _;\n', '    }\n', '\n', '    modifier onlyScheduledTiers() {\n', '        require(tiers.length > 0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyNotFinalized() {\n', '        require(!isFinalized());\n', '        _;\n', '    }\n', '\n', '    modifier onlySubsequentBlock(uint256 startBlock) {\n', '        if (tiers.length > 0) {\n', '            require(startBlock > tiers[tiers.length - 1].startBlock);\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier onlyNotZero(uint256 value) {\n', '        require(value != 0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyValid(address addr) {\n', '        require(addr != address(0));\n', '        _;\n', '    }\n', '\n', '    function IcoCrowdsale(\n', '        address _wallet,\n', '        IcoToken _token,\n', '        uint256 _minValue\n', '    )\n', '        public\n', '        onlyValid(_wallet)\n', '        onlyValid(_token)\n', '    {\n', '        wallet = _wallet;\n', '        token = _token;\n', '        minValue = _minValue;\n', '    }\n', '\n', '    /**\n', '     * @dev Contribution is accepted\n', '     * @param contributor address The recipient of the tokens\n', '     * @param value uint256 The amount of contributed ETH\n', '     * @param amount uint256 The amount of tokens\n', '     */\n', '    event ContributionAccepted(address indexed contributor, uint256 value, uint256 amount);\n', '\n', '    /**\n', '     * @dev Off-chain contribution registered\n', '     * @param id bytes32 A unique contribution id\n', '     * @param contributor address The recipient of the tokens\n', '     * @param amount uint256 The amount of tokens\n', '     */\n', '    event ContributionRegistered(bytes32 indexed id, address indexed contributor, uint256 amount);\n', '\n', '    /**\n', '     * @dev Tier scheduled with given start block and price\n', '     * @param startBlock uint256 The first block of tier activation (inclusive)\n', '     * @param price uint256 The price active during tier\n', '     */\n', '    event TierScheduled(uint256 startBlock, uint256 price);\n', '\n', '    /**\n', '     * @dev Crowdsale end block scheduled\n', '     * @param availableAmount uint256 The amount of tokens available in crowdsale\n', '     * @param endBlock uint256 The last block of crowdsale (inclusive)\n', '     */\n', '    event Finalized(uint256 endBlock, uint256 availableAmount);\n', '\n', '    /**\n', '     * @dev Unsold tokens burned\n', '     */\n', '    event RemainsBurned(uint256 burnedAmount);\n', '\n', '    /**\n', '     * @dev Accept ETH transfers as contributions\n', '     */\n', '    function () public payable {\n', '        acceptContribution(msg.sender, msg.value);\n', '    }\n', '\n', '    /**\n', '     * @dev Contribute ETH in exchange for tokens\n', '     * @param contributor address The address that receives tokens\n', '     * @return uint256 Amount of received ONL tokens\n', '     */\n', '    function contribute(address contributor) public payable returns (uint256) {\n', '        return acceptContribution(contributor, msg.value);\n', '    }\n', '\n', '    /**\n', '     * @dev Register contribution with given id\n', '     * @param id bytes32 A unique contribution id\n', '     * @param contributor address The recipient of the tokens\n', '     * @param amount uint256 The amount of tokens\n', '     */\n', '    function registerContribution(bytes32 id, address contributor, uint256 amount)\n', '        public\n', '        onlyOwner\n', '        onlyActive\n', '        onlyValid(contributor)\n', '        onlyNotZero(amount)\n', '        onlyUniqueContribution(id)\n', '    {\n', '        isContributionRegistered[id] = true;\n', '\n', '        token.transfer(contributor, amount);\n', '\n', '        ContributionRegistered(id, contributor, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Schedule price tier\n', '     * @param _startBlock uint256 Block when the tier activates, inclusive\n', '     * @param _price uint256 The price of the tier\n', '     */\n', '    function scheduleTier(uint256 _startBlock, uint256 _price)\n', '        public\n', '        onlyOwner\n', '        onlyNotFinalized\n', '        onlySubsequentBlock(_startBlock)\n', '        onlyNotZero(_startBlock)\n', '        onlyNotZero(_price)\n', '    {\n', '        tiers.push(\n', '            Tier({\n', '                startBlock: _startBlock,\n', '                price: _price\n', '            })\n', '        );\n', '\n', '        TierScheduled(_startBlock, _price);\n', '    }\n', '\n', '    /**\n', '     * @dev Schedule crowdsale end\n', '     * @param _endBlock uint256 The last block end of crowdsale (inclusive)\n', '     * @param _availableAmount uint256 Amount of tokens available in crowdsale\n', '     */\n', '    function finalize(uint256 _endBlock, uint256 _availableAmount)\n', '        public\n', '        onlyOwner\n', '        onlyNotFinalized\n', '        onlyScheduledTiers\n', '        onlySubsequentBlock(_endBlock)\n', '        onlyNotZero(_availableAmount)\n', '    {\n', '        endBlock = _endBlock;\n', '\n', '        token.mint(this, _availableAmount);\n', '\n', '        Finalized(_endBlock, _availableAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Burns all tokens which have not been sold\n', '     */\n', '    function burnRemains()\n', '        public\n', '        onlyOwner\n', '        onlyFinished\n', '    {\n', '        uint256 amount = availableAmount();\n', '\n', '        token.burn(amount);\n', '\n', '        RemainsBurned(amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate amount of ONL tokens received for given ETH value\n', '     * @param value uint256 Contribution value in wei\n', '     * @return uint256 Amount of received ONL tokens if contract active, otherwise 0\n', '     */\n', '    function calculateContribution(uint256 value) public view returns (uint256) {\n', '        uint256 price = currentPrice();\n', '        if (price > 0) {\n', '            return value.mul(10 ** token.decimals()).div(price);\n', '        }\n', '\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Find closest tier id to given block\n', '     * @return uint256 Tier containing the block or zero if before start or last if after finished\n', '     */\n', '    function getTierId(uint256 blockNumber) public view returns (uint256) {\n', '        for (uint256 i = tiers.length - 1; i >= 0; i--) {\n', '            if (blockNumber >= tiers[i].startBlock) {\n', '                return i;\n', '            }\n', '        }\n', '\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Get price of the current tier\n', '     * @return uint256 Current price if tiers defined, otherwise 0\n', '     */\n', '    function currentPrice() public view returns (uint256) {\n', '        if (tiers.length > 0) {\n', '            uint256 id = getTierId(block.number);\n', '            return tiers[id].price;\n', '        }\n', '\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Get current tier id\n', '     * @return uint256 Tier containing the block or zero if before start or last if after finished\n', '     */\n', '    function currentTierId() public view returns (uint256) {\n', '        return getTierId(block.number);\n', '    }\n', '\n', '    /**\n', '     * @dev Get available amount of tokens\n', '     * @return uint256 Amount of unsold tokens\n', '     */\n', '    function availableAmount() public view returns (uint256) {\n', '        return token.balanceOf(this);\n', '    }\n', '\n', '    /**\n', '     * @dev Get specification of all tiers\n', '     */\n', '    function listTiers()\n', '        public\n', '        view\n', '        returns (uint256[] startBlocks, uint256[] endBlocks, uint256[] prices)\n', '    {\n', '        startBlocks = new uint256[](tiers.length);\n', '        endBlocks = new uint256[](tiers.length);\n', '        prices = new uint256[](tiers.length);\n', '\n', '        for (uint256 i = 0; i < tiers.length; i++) {\n', '            startBlocks[i] = tiers[i].startBlock;\n', '            prices[i] = tiers[i].price;\n', '\n', '            if (i + 1 < tiers.length) {\n', '                endBlocks[i] = tiers[i + 1].startBlock - 1;\n', '            } else {\n', '                endBlocks[i] = endBlock;\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Check whether crowdsale is currently active\n', '     * @return boolean True if current block number is within tier ranges, otherwise False\n', '     */\n', '    function isActive() public view returns (bool) {\n', '        return\n', '            tiers.length > 0 &&\n', '            block.number >= tiers[0].startBlock &&\n', '            block.number <= endBlock;\n', '    }\n', '\n', '    /**\n', '     * @dev Check whether sale end is scheduled\n', '     * @return boolean True if end block is defined, otherwise False\n', '     */\n', '    function isFinalized() public view returns (bool) {\n', '        return endBlock > 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Check whether crowdsale has finished\n', '     * @return boolean True if end block passed, otherwise False\n', '     */\n', '    function isFinished() public view returns (bool) {\n', '        return endBlock > 0 && block.number > endBlock;\n', '    }\n', '\n', '    function acceptContribution(address contributor, uint256 value)\n', '        private\n', '        onlyActive\n', '        onlyValid(contributor)\n', '        onlySufficientValue(value)\n', '        returns (uint256)\n', '    {\n', '        uint256 amount = calculateContribution(value);\n', '        token.transfer(contributor, amount);\n', '\n', '        wallet.transfer(value);\n', '\n', '        ContributionAccepted(contributor, value, amount);\n', '\n', '        return amount;\n', '    }\n', '}']
