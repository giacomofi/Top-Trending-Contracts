['pragma solidity ^0.4.18;\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    function Ownable() public {\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) internal onlyOwner {\n', '        require(newOwner != address(0));\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '/**\n', ' * @title PoSTokenStandard\n', ' * @dev the interface of PoSTokenStandard\n', ' */\n', 'contract PoSTokenStandard {\n', '    uint256 public stakeStartTime;\n', '    uint256 public stakeMinAge;\n', '    uint256 public stakeMaxAge;\n', '    function mine() public  returns (bool);\n', '    function coinAge(address who) public  returns (uint256);\n', '    function annualInterest() public  returns (uint256);\n', '    event Mine(address indexed _address, uint _reward);\n', '}\n', '\n', 'contract CoinVila is ERC20,PoSTokenStandard,Ownable {\n', '    using SafeMath for uint256;\n', '    string public name = "CoinVila";\n', '    string public symbol = "VILA";\n', '    uint public decimals = 18;\n', '\n', '    uint public chainStartTime; //chain start time\n', '    uint public chainStartBlockNumber; //chain start block number\n', '    uint public stakeStartTime; //stake start time\n', '    uint public stakeMinAge = 3 days; // minimum age for coin age: 3D\n', '    uint public stakeMaxAge = 90 days; // stake age of full weight: 90D\n', '    uint public maxMintProofOfStake = 10**17; // default 10% annual interest\n', '\n', '    uint public totalSupply;\n', '    uint public maxTotalSupply = 44 * (10**6) * (10**uint256(decimals)); // 44 Mil\n', '    uint public totalInitialSupply = 250 * (10**3) * (10**uint256(decimals)); // 250 K\n', '    uint256 public INITIAL_SUPPLY = 250 * (10**3) * (10 ** uint256(decimals)); //250 K\n', '\n', '    address public addressFundTeam =    0x5F7C2F8041cAB567c41708D5a89119F710322e3f;\n', '    address public addressFundAirdrop = 0xba960ab8007B825Fa74682A61735FE3ECd653ee3;\n', '    address public addressFundBounty = 0xdF96e49EC0983153B0Bf2125d60032Eb3685A457;\n', '    address public addressFundPlatform = 0x65632770903989Ae84B49E9A758d7ADDA63697A3;\n', '    address public addressFundHolder = 0xa198baaB6dD6D7023b184C450D64175d19bCB450;\n', '\n', '    uint256 public amountFundTeam = 25 * (10**3) * (10**uint256(decimals));\n', '    uint256 public amountFundAirdrop = 120 * (10**3) * (10**uint256(decimals));\n', '    uint256 public amountFundBounty = 5 * (10**3) * (10**uint256(decimals));\n', '    uint256 public amountFundPlatform = 75 * (10**3) * (10**uint256(decimals));\n', '    uint256 public amountFundHolder = 25 * (10**3) * (10**uint256(decimals));\n', '\n', '    struct transferInStruct{\n', '        uint128 amount;\n', '        uint64 time;\n', '    }\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '    mapping(address => transferInStruct[]) transferIns;\n', '\n', '    /**\n', '     * @dev Fix for the ERC20 short address attack.\n', '     */\n', '    modifier onlyPayloadSize(uint size) {\n', '        require(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '\n', '    modifier canPoSMint() {\n', '        require(totalSupply < maxTotalSupply);\n', '        _;\n', '    }\n', '\n', '    function CoinVila(address _owner) public {\n', '        require(_owner != address(0));\n', '        owner = _owner;\n', '        CoinVilaStart();\n', '    }\n', '\n', '    function CoinVilaStart() private {\n', '\n', '        uint64 _now = uint64(now);\n', '        totalSupply = totalInitialSupply;\n', '\n', '        chainStartTime = _now;\n', '        chainStartBlockNumber = block.number;\n', '        stakeStartTime = _now;\n', '\n', '        balances[addressFundTeam] = amountFundTeam;\n', '        transferIns[addressFundTeam].push(transferInStruct(uint128(amountFundTeam),_now));\n', '\n', '        balances[addressFundHolder] = amountFundHolder;\n', '        transferIns[addressFundHolder].push(transferInStruct(uint128(amountFundHolder),_now));\n', '\n', '        balances[addressFundAirdrop] = amountFundAirdrop;\n', '        transferIns[addressFundAirdrop].push(transferInStruct(uint128(amountFundAirdrop),_now));\n', '\n', '        balances[addressFundBounty] = amountFundBounty;\n', '        transferIns[addressFundBounty].push(transferInStruct(uint128(amountFundBounty),_now));\n', '\n', '        balances[addressFundPlatform] = amountFundPlatform;\n', '        transferIns[addressFundPlatform].push(transferInStruct(uint128(amountFundPlatform),_now));\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public returns (bool) {\n', '        if(msg.sender == _to) return mine();\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        if(transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\n', '        uint64 _now = uint64(now);\n', '        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),_now));\n', '        transferIns[_to].push(transferInStruct(uint128(_value),_now));\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) public returns (bool) {\n', '        require(_to != address(0));\n', '\n', '        var _allowance = allowed[_from][msg.sender];\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        if(transferIns[_from].length > 0) delete transferIns[_from];\n', '        uint64 _now = uint64(now);\n', '        transferIns[_from].push(transferInStruct(uint128(balances[_from]),_now));\n', '        transferIns[_to].push(transferInStruct(uint128(_value),_now));\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function mine() canPoSMint public returns (bool) {\n', '        if(balances[msg.sender] <= 0) return false;\n', '        if(transferIns[msg.sender].length <= 0) return false;\n', '\n', '        uint reward = getProofOfStakeReward(msg.sender);\n', '        if(reward <= 0) return false;\n', '\n', '        totalSupply = totalSupply.add(reward);\n', '        balances[msg.sender] = balances[msg.sender].add(reward);\n', '        delete transferIns[msg.sender];\n', '        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),uint64(now)));\n', '        Mine(msg.sender, reward);\n', '        return true;\n', '    }\n', '\n', '    function getBlockNumber() public view returns (uint blockNumber) {\n', '        blockNumber = block.number.sub(chainStartBlockNumber);\n', '    }\n', '\n', '    function coinAge(address who) public returns (uint myCoinAge) {\n', '        myCoinAge = getCoinAge(who,now);\n', '    }\n', '\n', '    /**\n', '    * Year 1\t300%\t1,000,000\n', '    * Year 2\t300%\t4,000,000\n', '    * Year 3\t50%\t    6,000,000\n', '    * Year 4\t50%\t    9,000,000\n', '    * Year 5\t50%\t    13,500,000\n', '    * Year 6\t50%\t    21,000,000\n', '    * Year 7\t50%\t    32,000,000\n', '    * Year 8\t10%\t    36,000,000\n', '    * Year 9\t10%\t    40,000,000\n', '    * Year 10\t10%     44,000,000\n', '    */\n', '    function annualInterest() public returns(uint interest) {\n', '        uint _now = now;\n', '        interest = maxMintProofOfStake;\n', '        if((_now.sub(stakeStartTime).div(1 years) == 0) || (_now.sub(stakeStartTime).div(1 years) == 1) ) {\n', '            interest = (1650 * maxMintProofOfStake).div(100);\n', '        } else if((_now.sub(stakeStartTime).div(1 years) == 2) || (_now.sub(stakeStartTime).div(1 years) == 3) ||\n', '                    (_now.sub(stakeStartTime).div(1 years) == 4) || (_now.sub(stakeStartTime).div(1 years) == 5) ||\n', '                    (_now.sub(stakeStartTime).div(1 years) == 6)){\n', '            interest = (435 * maxMintProofOfStake).div(100);\n', '        }\n', '    }\n', '\n', '    function getProofOfStakeReward(address _address) internal view returns (uint) {\n', '        require( (now >= stakeStartTime) && (stakeStartTime > 0) );\n', '\n', '        uint _now = now;\n', '        uint _coinAge = getCoinAge(_address, _now);\n', '        if(_coinAge <= 0) return 0;\n', '\n', '        uint interest = maxMintProofOfStake;\n', '        // Due to the high interest rate for the first two years, compounding should be taken into account.\n', '        // Effective annual interest rate = (1 + (nominal rate / number of compounding periods)) ^ (number of compounding periods) - 1\n', '        if((_now.sub(stakeStartTime).div(1 years) == 0) || (_now.sub(stakeStartTime).div(1 years) == 1)) {\n', '            // 1st, 2nd year effective annual interest rate is 300% when we select the stakeMaxAge (90 days) as the compounding period.\n', '            interest = (1650 * maxMintProofOfStake).div(100);\n', '        } else if ((_now.sub(stakeStartTime).div(1 years) == 2) || (_now.sub(stakeStartTime).div(1 years) == 3) ||\n', '            (_now.sub(stakeStartTime).div(1 years) == 4) || (_now.sub(stakeStartTime).div(1 years) == 5) ||\n', '            (_now.sub(stakeStartTime).div(1 years) == 6)) {\n', '            // 3nd, 4nd, 5nd, 6nd, 7nd year effective annual interest rate is 50% when we select the stakeMaxAge (90 days) as the compounding period.\n', '            interest = (435 * maxMintProofOfStake).div(100);\n', '        }\n', '\n', '        return (_coinAge * interest).div(365 * (10**decimals));\n', '    }\n', '\n', '    function getCoinAge(address _address, uint _now) internal view returns (uint _coinAge) {\n', '        if(transferIns[_address].length <= 0) return 0;\n', '\n', '        for (uint i = 0; i < transferIns[_address].length; i++){\n', '            if( _now < uint(transferIns[_address][i].time).add(stakeMinAge) ) continue;\n', '\n', '            uint nCoinSeconds = _now.sub(uint(transferIns[_address][i].time));\n', '            if( nCoinSeconds > stakeMaxAge ) nCoinSeconds = stakeMaxAge;\n', '\n', '            _coinAge = _coinAge.add(uint(transferIns[_address][i].amount) * nCoinSeconds.div(1 days));\n', '        }\n', '    }\n', '\n', '    //function ownerSetStakeStartTime(uint timestamp) public {\n', '    function ownerSetStakeStartTime(uint timestamp) public onlyOwner {\n', '        require(stakeStartTime <= 0);\n', '        stakeStartTime = timestamp;\n', '    }\n', '\n', '    /**\n', '    * Peterson&#39;s Law Protection\n', '    * Claim tokens\n', '    */\n', '    function claimTokens() public onlyOwner {\n', '        uint256 balance = balanceOf(this);\n', '        transfer(owner, balance);\n', '        Transfer(this, owner, balance);\n', '        owner.transfer(this.balance);\n', '    }\n', '}']