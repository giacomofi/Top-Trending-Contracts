['pragma solidity ^0.4.18;\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    address public newOwnerCandidate;\n', '\n', '    event OwnershipRequested(address indexed _by, address indexed _to);\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() { require(msg.sender == owner); _;}\n', '\n', '    /// Proposes to transfer control of the contract to a newOwnerCandidate.\n', '    /// @param _newOwnerCandidate address The address to transfer ownership to.\n', '    function transferOwnership(address _newOwnerCandidate) external onlyOwner {\n', '        require(_newOwnerCandidate != address(0));\n', '\n', '        newOwnerCandidate = _newOwnerCandidate;\n', '\n', '        emit OwnershipRequested(msg.sender, newOwnerCandidate);\n', '    }\n', '\n', '    /// Accept ownership transfer. This method needs to be called by the perviously proposed owner.\n', '    function acceptOwnership() external {\n', '        if (msg.sender == newOwnerCandidate) {\n', '            owner = newOwnerCandidate;\n', '            newOwnerCandidate = address(0);\n', '\n', '            emit OwnershipTransferred(owner, newOwnerCandidate);\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'contract Serverable is Ownable {\n', '    address public server;\n', '\n', '    modifier onlyServer() { require(msg.sender == server); _;}\n', '\n', '    function setServerAddress(address _newServerAddress) external onlyOwner {\n', '        server = _newServerAddress;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC223 {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) public view returns (uint);\n', '  \n', '  function name() public view returns (string _name);\n', '  function symbol() public view returns (string _symbol);\n', '  function decimals() public view returns (uint8 _decimals);\n', '  function totalSupply() public view returns (uint256 _supply);\n', '\n', '  function transfer(address to, uint value) public returns (bool ok);\n', '  function transfer(address to, uint value, bytes data) public returns (bool ok);\n', '  function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\n', '  function transferFrom(address _from, address _to, uint _value) public returns (bool ok);\n', '  \n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', 'contract BalanceManager is Serverable {\n', '    /** player balances **/\n', '    mapping(uint32 => uint64) public balances;\n', '    /** player blocked tokens number **/\n', '    mapping(uint32 => uint64) public blockedBalances;\n', '    /** wallet balances **/\n', '    mapping(address => uint64) public walletBalances;\n', '    /** adress users **/\n', '    mapping(address => uint32) public userIds;\n', '\n', '    /** Dispatcher contract address **/\n', '    address public dispatcher;\n', '    /** service reward can be withdraw by owners **/\n', '    uint serviceReward;\n', '    /** service reward can be withdraw by owners **/\n', '    uint sentBonuses;\n', '    /** Token used to pay **/\n', '    ERC223 public gameToken;\n', '\n', '    modifier onlyDispatcher() {require(msg.sender == dispatcher);\n', '        _;}\n', '\n', '    event Withdraw(address _user, uint64 _amount);\n', '    event Deposit(address _user, uint64 _amount);\n', '\n', '    constructor(address _gameTokenAddress) public {\n', '        gameToken = ERC223(_gameTokenAddress);\n', '    }\n', '\n', '    function setDispatcherAddress(address _newDispatcherAddress) external onlyOwner {\n', '        dispatcher = _newDispatcherAddress;\n', '    }\n', '\n', '    /**\n', '     * Deposits from user\n', '     */\n', '    function tokenFallback(address _from, uint256 _amount, bytes _data) public {\n', '        if (userIds[_from] > 0) {\n', '            balances[userIds[_from]] += uint64(_amount);\n', '        } else {\n', '            walletBalances[_from] += uint64(_amount);\n', '        }\n', '\n', '        emit Deposit(_from, uint64(_amount));\n', '    }\n', '\n', '    /**\n', '     * Register user\n', '     */\n', '    function registerUserWallet(address _user, uint32 _id) external onlyServer {\n', '        require(userIds[_user] == 0);\n', '        require(_user != owner);\n', '\n', '        userIds[_user] = _id;\n', '        if (walletBalances[_user] > 0) {\n', '            balances[_id] += walletBalances[_user];\n', '            walletBalances[_user] = 0;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Deposits tokens in game to some user\n', '     */\n', '    function sendTo(address _user, uint64 _amount) external {\n', '        require(walletBalances[msg.sender] >= _amount);\n', '        walletBalances[msg.sender] -= _amount;\n', '        if (userIds[_user] > 0) {\n', '            balances[userIds[_user]] += _amount;\n', '        } else {\n', '            walletBalances[_user] += _amount;\n', '        }\n', '        emit Deposit(_user, _amount);\n', '    }\n', '\n', '    /**\n', '     * User can withdraw tokens manually in any time\n', '     */\n', '    function withdraw(uint64 _amount) external {\n', '        uint32 userId = userIds[msg.sender];\n', '        if (userId > 0) {\n', '            require(balances[userId] - blockedBalances[userId] >= _amount);\n', '            if (gameToken.transfer(msg.sender, _amount)) {\n', '                balances[userId] -= _amount;\n', '                emit Withdraw(msg.sender, _amount);\n', '            }\n', '        } else {\n', '            require(walletBalances[msg.sender] >= _amount);\n', '            if (gameToken.transfer(msg.sender, _amount)) {\n', '                walletBalances[msg.sender] -= _amount;\n', '                emit Withdraw(msg.sender, _amount);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Server can withdraw tokens to user\n', '     */\n', '    function systemWithdraw(address _user, uint64 _amount) external onlyServer {\n', '        uint32 userId = userIds[_user];\n', '        require(balances[userId] - blockedBalances[userId] >= _amount);\n', '\n', '        if (gameToken.transfer(_user, _amount)) {\n', '            balances[userId] -= _amount;\n', '            emit Withdraw(_user, _amount);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Dispatcher can change user balance\n', '     */\n', '    function addUserBalance(uint32 _userId, uint64 _amount) external onlyDispatcher {\n', '        balances[_userId] += _amount;\n', '    }\n', '\n', '    /**\n', '     * Dispatcher can change user balance\n', '     */\n', '    function spendUserBalance(uint32 _userId, uint64 _amount) external onlyDispatcher {\n', '        require(balances[_userId] >= _amount);\n', '        balances[_userId] -= _amount;\n', '        if (blockedBalances[_userId] > 0) {\n', '            if (blockedBalances[_userId] <= _amount)\n', '                blockedBalances[_userId] = 0;\n', '            else\n', '                blockedBalances[_userId] -= _amount;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Server can add bonuses to users, they will take from owner balance\n', '     */\n', '    function addBonus(uint32[] _userIds, uint64[] _amounts) external onlyServer {\n', '        require(_userIds.length == _amounts.length);\n', '\n', '        uint64 sum = 0;\n', '        for (uint32 i = 0; i < _amounts.length; i++)\n', '            sum += _amounts[i];\n', '\n', '        require(walletBalances[owner] >= sum);\n', '        for (i = 0; i < _userIds.length; i++) {\n', '            balances[_userIds[i]] += _amounts[i];\n', '            blockedBalances[_userIds[i]] += _amounts[i];\n', '        }\n', '\n', '        sentBonuses += sum;\n', '        walletBalances[owner] -= sum;\n', '    }\n', '\n', '    /**\n', '     * Dispatcher can change user balance\n', '     */\n', '    function addServiceReward(uint _amount) external onlyDispatcher {\n', '        serviceReward += _amount;\n', '    }\n', '\n', '    /**\n', '     * Owner withdraw service fee tokens \n', '     */\n', '    function serviceFeeWithdraw() external onlyOwner {\n', '        require(serviceReward > 0);\n', '        if (gameToken.transfer(msg.sender, serviceReward))\n', '            serviceReward = 0;\n', '    }\n', '\n', '    function viewSentBonuses() public view returns (uint) {\n', '        require(msg.sender == owner || msg.sender == server);\n', '        return sentBonuses;\n', '    }\n', '\n', '    function viewServiceReward() public view returns (uint) {\n', '        require(msg.sender == owner || msg.sender == server);\n', '        return serviceReward;\n', '    }\n', '}\n', '\n', '\n', 'contract BrokerManager is Ownable {\n', '\n', '\tstruct InvestTerm {\n', '\t\tuint64 amount;\n', '\t\tuint16 userFee;\n', '\t}\n', '\t/** server address **/\n', '\taddress public server;\n', '\t/** invesor fees **/\n', '\tmapping (uint32 => mapping (uint32 => InvestTerm)) public investTerms;\n', '\n', '\tmodifier onlyServer() {require(msg.sender == server); _;}\n', '\n', '\tfunction setServerAddress(address _newServerAddress) external onlyOwner {\n', '\t\tserver = _newServerAddress;\n', '\t}\n', '\n', '\t/**\n', '     * Create investition \n', '     */\n', '\tfunction invest(uint32 _playerId, uint32 _investorId, uint64 _amount, uint16 _userFee) external onlyServer {\n', '\t\trequire(_amount > 0 && _userFee > 0);\n', '\t\tinvestTerms[_investorId][_playerId] = InvestTerm(_amount, _userFee);\n', '\t}\n', '\n', '\t/**\n', '     * Delete investition \n', '     */\n', '\tfunction deleteInvest(uint32 _playerId, uint32 _investorId) external onlyServer {\n', '\t\tdelete investTerms[_investorId][_playerId];\n', '\t}\n', '}\n', '\n', '\n', 'contract Dispatcher is BrokerManager {\n', '\n', '    enum GameState {Initialized, Started, Finished, Cancelled}\n', '\n', '    struct GameTeam {\n', '        uint32 userId;\n', '        uint32 sponsorId;\n', '        uint64 prizeSum;\n', '        uint16 userFee;\n', '    }\n', '\n', '    struct Game {\n', '        GameState state;\n', '        uint64 entryFee;\n', '        uint32 serviceFee;\n', '        uint32 registrationDueDate;\n', '\n', '        bytes32 teamsHash;\n', '        bytes32 statsHash;\n', '\n', '        uint32 teamsNumber;\n', '        uint64 awardSent;\n', '    }\n', '\n', '    /** balance manager **/\n', '    BalanceManager public balanceManager;\n', '    /** player teams **/\n', '    mapping(uint32 => mapping(uint48 => GameTeam)) public teams;\n', '    /** games **/\n', '    mapping(uint32 => Game) public games;\n', '\n', '    constructor(address _balanceManagerAddress) public {\n', '        balanceManager = BalanceManager(_balanceManagerAddress);\n', '    }\n', '\n', '    /**\n', '     * Create new game\n', '     */\n', '    function createGame(\n', '        uint32 _gameId,\n', '        uint64 _entryFee,\n', '        uint32 _serviceFee,\n', '        uint32 _registrationDueDate\n', '    )\n', '    external\n', '    onlyServer\n', '    {\n', '        require(\n', '            games[_gameId].entryFee == 0\n', '            && _gameId > 0\n', '            && _entryFee > 0\n', '            && _registrationDueDate > 0\n', '        );\n', '        games[_gameId] = Game(GameState.Initialized, _entryFee, _serviceFee, _registrationDueDate, 0x0, 0x0, 0, 0);\n', '    }\n', '\n', '    /**\n', '     * Participate game\n', '     */\n', '    function participateGame(\n', '        uint32 _gameId,\n', '        uint32 _teamId,\n', '        uint32 _userId,\n', '        uint32 _sponsorId\n', '    )\n', '    external\n', '    onlyServer\n', '    {\n', '        Game storage game = games[_gameId];\n', '        require(\n', '            _gameId > 0\n', '            && game.state == GameState.Initialized\n', '            && _teamId > 0\n', '            && _userId > 0\n', '            && teams[_gameId][_teamId].userId == 0\n', '            && game.registrationDueDate > uint32(now)\n', '        );\n', '\n', '        uint16 userFee = 0;\n', '        if (_sponsorId > 0) {\n', '            require(balanceManager.balances(_sponsorId) >= game.entryFee && investTerms[_sponsorId][_userId].amount > game.entryFee);\n', '            balanceManager.spendUserBalance(_sponsorId, game.entryFee);\n', '            investTerms[_sponsorId][_userId].amount -= game.entryFee;\n', '            userFee = investTerms[_sponsorId][_userId].userFee;\n', '        }\n', '        else {\n', '            require(balanceManager.balances(_userId) >= game.entryFee);\n', '            balanceManager.spendUserBalance(_userId, game.entryFee);\n', '        }\n', '\n', '        teams[_gameId][_teamId] = GameTeam(_userId, _sponsorId, 0, userFee);\n', '        game.teamsNumber++;\n', '    }\n', '\n', '    /**\n', '     * Stop participate game, store teams hash\n', '     */\n', '    function startGame(uint32 _gameId, bytes32 _hash) external onlyServer {\n', '        Game storage game = games[_gameId];\n', '        require(\n', '            game.state == GameState.Initialized\n', '            && _gameId > 0\n', '        && _hash != 0x0\n', '        );\n', '\n', '        game.teamsHash = _hash;\n', '        game.state = GameState.Started;\n', '    }\n', '\n', '    /**\n', '     * Cancel game\n', '     */\n', '    function cancelGame(uint32 _gameId) external onlyServer {\n', '        Game storage game = games[_gameId];\n', '        require(\n', '            _gameId > 0\n', '            && game.state < GameState.Finished\n', '        );\n', '        game.state = GameState.Cancelled;\n', '    }\n', '\n', '    /**\n', '     * Finish game, store stats hash\n', '     */\n', '    function finishGame(uint32 _gameId, bytes32 _hash) external onlyServer {\n', '        Game storage game = games[_gameId];\n', '        require(\n', '            _gameId > 0\n', '            && game.state < GameState.Finished\n', '        && _hash != 0x0\n', '        );\n', '        game.statsHash = _hash;\n', '        game.state = GameState.Finished;\n', '    }\n', '\n', '    /**\n', '     * Reward winners\n', '     */\n', '    function winners(uint32 _gameId, uint32[] _teamIds, uint64[] _teamPrizes) external onlyServer {\n', '        Game storage game = games[_gameId];\n', '        require(game.state == GameState.Finished);\n', '\n', '        uint64 sumPrize = 0;\n', '        for (uint32 i = 0; i < _teamPrizes.length; i++)\n', '            sumPrize += _teamPrizes[i];\n', '\n', '        require(uint(sumPrize + game.awardSent) <= uint(game.entryFee * game.teamsNumber));\n', '\n', '        for (i = 0; i < _teamIds.length; i++) {\n', '            uint32 teamId = _teamIds[i];\n', '            GameTeam storage team = teams[_gameId][teamId];\n', '            uint32 userId = team.userId;\n', '\n', '            if (team.prizeSum == 0) {\n', '                if (team.sponsorId > 0) {\n', '                    uint64 userFee = team.userFee * _teamPrizes[i] / 100;\n', '                    balanceManager.addUserBalance(team.sponsorId, userFee);\n', '                    balanceManager.addUserBalance(userId, _teamPrizes[i] - userFee);\n', '                    team.prizeSum = _teamPrizes[i];\n', '                } else {\n', '                    balanceManager.addUserBalance(userId, _teamPrizes[i]);\n', '                    team.prizeSum = _teamPrizes[i];\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Refund money for cancelled game\n', '     */\n', '    function refundCancelledGame(uint32 _gameId, uint32[] _teamIds) external onlyServer {\n', '        Game storage game = games[_gameId];\n', '        require(game.state == GameState.Cancelled);\n', '\n', '        for (uint32 i = 0; i < _teamIds.length; i++) {\n', '            uint32 teamId = _teamIds[i];\n', '            GameTeam storage team = teams[_gameId][teamId];\n', '\n', '            require(teams[_gameId][teamId].prizeSum == 0);\n', '\n', '            if (team.prizeSum == 0) {\n', '                if (team.sponsorId > 0) {\n', '                    balanceManager.addUserBalance(team.sponsorId, game.entryFee);\n', '                } else {\n', '                    balanceManager.addUserBalance(team.userId, game.entryFee);\n', '                }\n', '                team.prizeSum = game.entryFee;\n', '            }\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    address public newOwnerCandidate;\n', '\n', '    event OwnershipRequested(address indexed _by, address indexed _to);\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() { require(msg.sender == owner); _;}\n', '\n', '    /// Proposes to transfer control of the contract to a newOwnerCandidate.\n', '    /// @param _newOwnerCandidate address The address to transfer ownership to.\n', '    function transferOwnership(address _newOwnerCandidate) external onlyOwner {\n', '        require(_newOwnerCandidate != address(0));\n', '\n', '        newOwnerCandidate = _newOwnerCandidate;\n', '\n', '        emit OwnershipRequested(msg.sender, newOwnerCandidate);\n', '    }\n', '\n', '    /// Accept ownership transfer. This method needs to be called by the perviously proposed owner.\n', '    function acceptOwnership() external {\n', '        if (msg.sender == newOwnerCandidate) {\n', '            owner = newOwnerCandidate;\n', '            newOwnerCandidate = address(0);\n', '\n', '            emit OwnershipTransferred(owner, newOwnerCandidate);\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'contract Serverable is Ownable {\n', '    address public server;\n', '\n', '    modifier onlyServer() { require(msg.sender == server); _;}\n', '\n', '    function setServerAddress(address _newServerAddress) external onlyOwner {\n', '        server = _newServerAddress;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC223 {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) public view returns (uint);\n', '  \n', '  function name() public view returns (string _name);\n', '  function symbol() public view returns (string _symbol);\n', '  function decimals() public view returns (uint8 _decimals);\n', '  function totalSupply() public view returns (uint256 _supply);\n', '\n', '  function transfer(address to, uint value) public returns (bool ok);\n', '  function transfer(address to, uint value, bytes data) public returns (bool ok);\n', '  function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\n', '  function transferFrom(address _from, address _to, uint _value) public returns (bool ok);\n', '  \n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', 'contract BalanceManager is Serverable {\n', '    /** player balances **/\n', '    mapping(uint32 => uint64) public balances;\n', '    /** player blocked tokens number **/\n', '    mapping(uint32 => uint64) public blockedBalances;\n', '    /** wallet balances **/\n', '    mapping(address => uint64) public walletBalances;\n', '    /** adress users **/\n', '    mapping(address => uint32) public userIds;\n', '\n', '    /** Dispatcher contract address **/\n', '    address public dispatcher;\n', '    /** service reward can be withdraw by owners **/\n', '    uint serviceReward;\n', '    /** service reward can be withdraw by owners **/\n', '    uint sentBonuses;\n', '    /** Token used to pay **/\n', '    ERC223 public gameToken;\n', '\n', '    modifier onlyDispatcher() {require(msg.sender == dispatcher);\n', '        _;}\n', '\n', '    event Withdraw(address _user, uint64 _amount);\n', '    event Deposit(address _user, uint64 _amount);\n', '\n', '    constructor(address _gameTokenAddress) public {\n', '        gameToken = ERC223(_gameTokenAddress);\n', '    }\n', '\n', '    function setDispatcherAddress(address _newDispatcherAddress) external onlyOwner {\n', '        dispatcher = _newDispatcherAddress;\n', '    }\n', '\n', '    /**\n', '     * Deposits from user\n', '     */\n', '    function tokenFallback(address _from, uint256 _amount, bytes _data) public {\n', '        if (userIds[_from] > 0) {\n', '            balances[userIds[_from]] += uint64(_amount);\n', '        } else {\n', '            walletBalances[_from] += uint64(_amount);\n', '        }\n', '\n', '        emit Deposit(_from, uint64(_amount));\n', '    }\n', '\n', '    /**\n', '     * Register user\n', '     */\n', '    function registerUserWallet(address _user, uint32 _id) external onlyServer {\n', '        require(userIds[_user] == 0);\n', '        require(_user != owner);\n', '\n', '        userIds[_user] = _id;\n', '        if (walletBalances[_user] > 0) {\n', '            balances[_id] += walletBalances[_user];\n', '            walletBalances[_user] = 0;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Deposits tokens in game to some user\n', '     */\n', '    function sendTo(address _user, uint64 _amount) external {\n', '        require(walletBalances[msg.sender] >= _amount);\n', '        walletBalances[msg.sender] -= _amount;\n', '        if (userIds[_user] > 0) {\n', '            balances[userIds[_user]] += _amount;\n', '        } else {\n', '            walletBalances[_user] += _amount;\n', '        }\n', '        emit Deposit(_user, _amount);\n', '    }\n', '\n', '    /**\n', '     * User can withdraw tokens manually in any time\n', '     */\n', '    function withdraw(uint64 _amount) external {\n', '        uint32 userId = userIds[msg.sender];\n', '        if (userId > 0) {\n', '            require(balances[userId] - blockedBalances[userId] >= _amount);\n', '            if (gameToken.transfer(msg.sender, _amount)) {\n', '                balances[userId] -= _amount;\n', '                emit Withdraw(msg.sender, _amount);\n', '            }\n', '        } else {\n', '            require(walletBalances[msg.sender] >= _amount);\n', '            if (gameToken.transfer(msg.sender, _amount)) {\n', '                walletBalances[msg.sender] -= _amount;\n', '                emit Withdraw(msg.sender, _amount);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Server can withdraw tokens to user\n', '     */\n', '    function systemWithdraw(address _user, uint64 _amount) external onlyServer {\n', '        uint32 userId = userIds[_user];\n', '        require(balances[userId] - blockedBalances[userId] >= _amount);\n', '\n', '        if (gameToken.transfer(_user, _amount)) {\n', '            balances[userId] -= _amount;\n', '            emit Withdraw(_user, _amount);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Dispatcher can change user balance\n', '     */\n', '    function addUserBalance(uint32 _userId, uint64 _amount) external onlyDispatcher {\n', '        balances[_userId] += _amount;\n', '    }\n', '\n', '    /**\n', '     * Dispatcher can change user balance\n', '     */\n', '    function spendUserBalance(uint32 _userId, uint64 _amount) external onlyDispatcher {\n', '        require(balances[_userId] >= _amount);\n', '        balances[_userId] -= _amount;\n', '        if (blockedBalances[_userId] > 0) {\n', '            if (blockedBalances[_userId] <= _amount)\n', '                blockedBalances[_userId] = 0;\n', '            else\n', '                blockedBalances[_userId] -= _amount;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Server can add bonuses to users, they will take from owner balance\n', '     */\n', '    function addBonus(uint32[] _userIds, uint64[] _amounts) external onlyServer {\n', '        require(_userIds.length == _amounts.length);\n', '\n', '        uint64 sum = 0;\n', '        for (uint32 i = 0; i < _amounts.length; i++)\n', '            sum += _amounts[i];\n', '\n', '        require(walletBalances[owner] >= sum);\n', '        for (i = 0; i < _userIds.length; i++) {\n', '            balances[_userIds[i]] += _amounts[i];\n', '            blockedBalances[_userIds[i]] += _amounts[i];\n', '        }\n', '\n', '        sentBonuses += sum;\n', '        walletBalances[owner] -= sum;\n', '    }\n', '\n', '    /**\n', '     * Dispatcher can change user balance\n', '     */\n', '    function addServiceReward(uint _amount) external onlyDispatcher {\n', '        serviceReward += _amount;\n', '    }\n', '\n', '    /**\n', '     * Owner withdraw service fee tokens \n', '     */\n', '    function serviceFeeWithdraw() external onlyOwner {\n', '        require(serviceReward > 0);\n', '        if (gameToken.transfer(msg.sender, serviceReward))\n', '            serviceReward = 0;\n', '    }\n', '\n', '    function viewSentBonuses() public view returns (uint) {\n', '        require(msg.sender == owner || msg.sender == server);\n', '        return sentBonuses;\n', '    }\n', '\n', '    function viewServiceReward() public view returns (uint) {\n', '        require(msg.sender == owner || msg.sender == server);\n', '        return serviceReward;\n', '    }\n', '}\n', '\n', '\n', 'contract BrokerManager is Ownable {\n', '\n', '\tstruct InvestTerm {\n', '\t\tuint64 amount;\n', '\t\tuint16 userFee;\n', '\t}\n', '\t/** server address **/\n', '\taddress public server;\n', '\t/** invesor fees **/\n', '\tmapping (uint32 => mapping (uint32 => InvestTerm)) public investTerms;\n', '\n', '\tmodifier onlyServer() {require(msg.sender == server); _;}\n', '\n', '\tfunction setServerAddress(address _newServerAddress) external onlyOwner {\n', '\t\tserver = _newServerAddress;\n', '\t}\n', '\n', '\t/**\n', '     * Create investition \n', '     */\n', '\tfunction invest(uint32 _playerId, uint32 _investorId, uint64 _amount, uint16 _userFee) external onlyServer {\n', '\t\trequire(_amount > 0 && _userFee > 0);\n', '\t\tinvestTerms[_investorId][_playerId] = InvestTerm(_amount, _userFee);\n', '\t}\n', '\n', '\t/**\n', '     * Delete investition \n', '     */\n', '\tfunction deleteInvest(uint32 _playerId, uint32 _investorId) external onlyServer {\n', '\t\tdelete investTerms[_investorId][_playerId];\n', '\t}\n', '}\n', '\n', '\n', 'contract Dispatcher is BrokerManager {\n', '\n', '    enum GameState {Initialized, Started, Finished, Cancelled}\n', '\n', '    struct GameTeam {\n', '        uint32 userId;\n', '        uint32 sponsorId;\n', '        uint64 prizeSum;\n', '        uint16 userFee;\n', '    }\n', '\n', '    struct Game {\n', '        GameState state;\n', '        uint64 entryFee;\n', '        uint32 serviceFee;\n', '        uint32 registrationDueDate;\n', '\n', '        bytes32 teamsHash;\n', '        bytes32 statsHash;\n', '\n', '        uint32 teamsNumber;\n', '        uint64 awardSent;\n', '    }\n', '\n', '    /** balance manager **/\n', '    BalanceManager public balanceManager;\n', '    /** player teams **/\n', '    mapping(uint32 => mapping(uint48 => GameTeam)) public teams;\n', '    /** games **/\n', '    mapping(uint32 => Game) public games;\n', '\n', '    constructor(address _balanceManagerAddress) public {\n', '        balanceManager = BalanceManager(_balanceManagerAddress);\n', '    }\n', '\n', '    /**\n', '     * Create new game\n', '     */\n', '    function createGame(\n', '        uint32 _gameId,\n', '        uint64 _entryFee,\n', '        uint32 _serviceFee,\n', '        uint32 _registrationDueDate\n', '    )\n', '    external\n', '    onlyServer\n', '    {\n', '        require(\n', '            games[_gameId].entryFee == 0\n', '            && _gameId > 0\n', '            && _entryFee > 0\n', '            && _registrationDueDate > 0\n', '        );\n', '        games[_gameId] = Game(GameState.Initialized, _entryFee, _serviceFee, _registrationDueDate, 0x0, 0x0, 0, 0);\n', '    }\n', '\n', '    /**\n', '     * Participate game\n', '     */\n', '    function participateGame(\n', '        uint32 _gameId,\n', '        uint32 _teamId,\n', '        uint32 _userId,\n', '        uint32 _sponsorId\n', '    )\n', '    external\n', '    onlyServer\n', '    {\n', '        Game storage game = games[_gameId];\n', '        require(\n', '            _gameId > 0\n', '            && game.state == GameState.Initialized\n', '            && _teamId > 0\n', '            && _userId > 0\n', '            && teams[_gameId][_teamId].userId == 0\n', '            && game.registrationDueDate > uint32(now)\n', '        );\n', '\n', '        uint16 userFee = 0;\n', '        if (_sponsorId > 0) {\n', '            require(balanceManager.balances(_sponsorId) >= game.entryFee && investTerms[_sponsorId][_userId].amount > game.entryFee);\n', '            balanceManager.spendUserBalance(_sponsorId, game.entryFee);\n', '            investTerms[_sponsorId][_userId].amount -= game.entryFee;\n', '            userFee = investTerms[_sponsorId][_userId].userFee;\n', '        }\n', '        else {\n', '            require(balanceManager.balances(_userId) >= game.entryFee);\n', '            balanceManager.spendUserBalance(_userId, game.entryFee);\n', '        }\n', '\n', '        teams[_gameId][_teamId] = GameTeam(_userId, _sponsorId, 0, userFee);\n', '        game.teamsNumber++;\n', '    }\n', '\n', '    /**\n', '     * Stop participate game, store teams hash\n', '     */\n', '    function startGame(uint32 _gameId, bytes32 _hash) external onlyServer {\n', '        Game storage game = games[_gameId];\n', '        require(\n', '            game.state == GameState.Initialized\n', '            && _gameId > 0\n', '        && _hash != 0x0\n', '        );\n', '\n', '        game.teamsHash = _hash;\n', '        game.state = GameState.Started;\n', '    }\n', '\n', '    /**\n', '     * Cancel game\n', '     */\n', '    function cancelGame(uint32 _gameId) external onlyServer {\n', '        Game storage game = games[_gameId];\n', '        require(\n', '            _gameId > 0\n', '            && game.state < GameState.Finished\n', '        );\n', '        game.state = GameState.Cancelled;\n', '    }\n', '\n', '    /**\n', '     * Finish game, store stats hash\n', '     */\n', '    function finishGame(uint32 _gameId, bytes32 _hash) external onlyServer {\n', '        Game storage game = games[_gameId];\n', '        require(\n', '            _gameId > 0\n', '            && game.state < GameState.Finished\n', '        && _hash != 0x0\n', '        );\n', '        game.statsHash = _hash;\n', '        game.state = GameState.Finished;\n', '    }\n', '\n', '    /**\n', '     * Reward winners\n', '     */\n', '    function winners(uint32 _gameId, uint32[] _teamIds, uint64[] _teamPrizes) external onlyServer {\n', '        Game storage game = games[_gameId];\n', '        require(game.state == GameState.Finished);\n', '\n', '        uint64 sumPrize = 0;\n', '        for (uint32 i = 0; i < _teamPrizes.length; i++)\n', '            sumPrize += _teamPrizes[i];\n', '\n', '        require(uint(sumPrize + game.awardSent) <= uint(game.entryFee * game.teamsNumber));\n', '\n', '        for (i = 0; i < _teamIds.length; i++) {\n', '            uint32 teamId = _teamIds[i];\n', '            GameTeam storage team = teams[_gameId][teamId];\n', '            uint32 userId = team.userId;\n', '\n', '            if (team.prizeSum == 0) {\n', '                if (team.sponsorId > 0) {\n', '                    uint64 userFee = team.userFee * _teamPrizes[i] / 100;\n', '                    balanceManager.addUserBalance(team.sponsorId, userFee);\n', '                    balanceManager.addUserBalance(userId, _teamPrizes[i] - userFee);\n', '                    team.prizeSum = _teamPrizes[i];\n', '                } else {\n', '                    balanceManager.addUserBalance(userId, _teamPrizes[i]);\n', '                    team.prizeSum = _teamPrizes[i];\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Refund money for cancelled game\n', '     */\n', '    function refundCancelledGame(uint32 _gameId, uint32[] _teamIds) external onlyServer {\n', '        Game storage game = games[_gameId];\n', '        require(game.state == GameState.Cancelled);\n', '\n', '        for (uint32 i = 0; i < _teamIds.length; i++) {\n', '            uint32 teamId = _teamIds[i];\n', '            GameTeam storage team = teams[_gameId][teamId];\n', '\n', '            require(teams[_gameId][teamId].prizeSum == 0);\n', '\n', '            if (team.prizeSum == 0) {\n', '                if (team.sponsorId > 0) {\n', '                    balanceManager.addUserBalance(team.sponsorId, game.entryFee);\n', '                } else {\n', '                    balanceManager.addUserBalance(team.userId, game.entryFee);\n', '                }\n', '                team.prizeSum = game.entryFee;\n', '            }\n', '        }\n', '    }\n', '}']
