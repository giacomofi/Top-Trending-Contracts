['pragma solidity ^0.4.4;\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint256 balance);\n', '    function transfer(address to, uint256 value) public returns (bool success);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '} \n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public constant returns (uint256 remaining);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool success);\n', '    function approve(address spender, uint256 value) public returns (bool success);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    \n', '    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '  \n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    \n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) public balances;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool success)  {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of. \n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint256 balance)  {\n', '        return balances[_owner];\n', '    }\n', ' \n', '}\n', ' \n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', ' \n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amout of tokens to be transfered\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success)  {\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '        // require (_value <= _allowance);\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool success)  {\n', '\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifing the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', ' \n', '}\n', ' \n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '    address public owner;\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable()  public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) onlyOwner  public {\n', '        require(newOwner != address(0));      \n', '        owner = newOwner;\n', '    }\n', ' \n', '}\n', ' \n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' */\n', ' \n', 'contract MintableToken is StandardToken, Ownable {\n', '    \n', '    event Mint(address indexed to, uint256 amount);\n', '\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to mint tokens\n', '    * @param _to The address that will recieve the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount); \n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to stop minting new tokens.\n', '    * @return True if the operation was successful.\n', '    */\n', '    function finishMinting() public onlyOwner returns (bool)  {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '  \n', '}\n', '\n', '\n', '// Токен \n', 'contract GWTToken is MintableToken {\n', '    \n', '    string public constant name = "Global Wind Token";\n', '    \n', '    string public constant symbol = "GWT";\n', '    \n', '    uint32 public constant decimals = 18; \n', '\n', '}\n', '\n', '// Контракт краудсейла\n', 'contract GWTCrowdsale is Ownable {\n', '    using SafeMath for uint;\n', '\n', '    uint public supplyLimit;         // Лимит выпуска токенов\n', '\n', '    address ethAddress;              // Адрес получателя эфира\n', '    uint saleStartTimestamp;         // Таймштамп запуска контракта\n', '\n', '    uint public currentStageNumber;  // Номер периода\n', '    uint currentStageStartTimestamp; // Таймштамп старта периода\n', '    uint currentStageEndTimestamp;   // Таймштамп окончания периода\n', '    uint currentStagePeriodDays;     // Кол-во дней (в тестовом минут) проведения периода краудсейла\n', '    uint public baseExchangeRate;    // Курс обмена на токены\n', '    uint currentStageMultiplier;     // Множитель для разных этапов:     bcostReal = baseExchangeRate * currentStageMultiplier\n', '\n', '    uint constant M = 1000000000000000000;  // 1 GWT = 10^18 GWTunits (wei)\n', '\n', '    uint[] _percs = [40, 30, 25, 20, 15, 10, 5, 0, 0];  // Бонусные проценты\n', '    uint[] _days  = [42, 1, 27, 1, 7, 7, 7, 14, 0];      // Продолжительность в днях\n', '\n', '    // Лимиты на выпуск токенов\n', '    uint PrivateSaleLimit = M.mul(420000000);\n', '    uint PreSaleLimit = M.mul(1300000000);\n', '    uint TokenSaleLimit = M.mul(8400000000);\n', '    uint RetailLimit = M.mul(22490000000);\n', '\n', '    // Курсы обмена токенов на эфир\n', '    uint TokensaleRate = M.mul(160000);\n', '    uint RetailRate = M.mul(16000);\n', '\n', '    GWTToken public token = new GWTToken(); // Токен\n', '\n', '    // Активен ли краудсейл\n', '    modifier isActive() {\n', '        require(isInActiveStage());\n', '        _;\n', '    }\n', '\n', '    function isInActiveStage() private returns(bool) {\n', '        if (currentStageNumber == 8) return true;\n', '        if (now >= currentStageStartTimestamp && now <= currentStageEndTimestamp){\n', '            return true;\n', '        }else if (now < currentStageStartTimestamp) {\n', '            return false;\n', '        }else if (now > currentStageEndTimestamp){\n', '            if (currentStageNumber == 0 || currentStageNumber == 2 || currentStageNumber == 7) return false;\n', '            switchPeriod();\n', '            // It is not possible for stage to be finished after straight the start\n', '            // Also new set currentStageStartTimestamp and currentStageEndTimestamp should be valid by definition\n', '            //return isInActiveStage();\n', '            return true;\n', '        }\n', '        // That will never get reached\n', '        return false;\n', '    }\n', '\n', '    // Перейти к следующему периоду\n', '    function switchPeriod() private onlyOwner {\n', '        if (currentStageNumber == 8) return;\n', '\n', '        currentStageNumber++;\n', '        currentStageStartTimestamp = currentStageEndTimestamp; // Запуск производится от конца прошлого периода, если нужно запустить с текущего момента поменяйте на now\n', '        currentStagePeriodDays = _days[currentStageNumber];\n', '        currentStageEndTimestamp = currentStageStartTimestamp + currentStagePeriodDays * 1 days;\n', '        currentStageMultiplier = _percs[currentStageNumber];\n', '\n', '        if(currentStageNumber == 0 ){\n', '            supplyLimit = PrivateSaleLimit;\n', '        } else if(currentStageNumber < 3){\n', '            supplyLimit = PreSaleLimit;\n', '        } else if(currentStageNumber < 8){\n', '            supplyLimit = TokenSaleLimit;\n', '        } else {\n', '            // Base rate for phase 8 should update exchange rate\n', '            baseExchangeRate = RetailRate;\n', '            supplyLimit = RetailLimit;\n', '        }\n', '    }\n', '\n', '    function setStage(uint _index) public onlyOwner {\n', '        require(_index >= 0 && _index < 9);\n', '        \n', '        if (_index == 0) return startPrivateSale();\n', '        currentStageNumber = _index - 1;\n', '        currentStageEndTimestamp = now;\n', '        switchPeriod();\n', '    }\n', '\n', '    // Установить курс обмена\n', '    function setRate(uint _rate) public onlyOwner {\n', '        baseExchangeRate = _rate;\n', '    }\n', '\n', '    // Установить можитель\n', '    function setBonus(uint _bonus) public onlyOwner {\n', '        currentStageMultiplier = _bonus;\n', '    }\n', '\n', '    function setTokenOwner(address _newTokenOwner) public onlyOwner {\n', '        token.transferOwnership(_newTokenOwner);\n', '    }\n', '\n', '    // Установить продолжительность текущего периода в днях\n', '    function setPeriodLength(uint _length) public onlyOwner {\n', '        // require(now < currentStageStartTimestamp + _length * 1 days);\n', '        currentStagePeriodDays = _length;\n', '        currentStageEndTimestamp = currentStageStartTimestamp + currentStagePeriodDays * 1 days;\n', '    }\n', '\n', '    // Изменить лимит выпуска токенов\n', '    function modifySupplyLimit(uint _new) public onlyOwner {\n', '        if (_new >= token.totalSupply()){\n', '            supplyLimit = _new;\n', '        }\n', '    }\n', '\n', '    // Выпустить токены на кошелек\n', '    function mintFor(address _to, uint _val) public onlyOwner isActive payable {\n', '        require(token.totalSupply() + _val <= supplyLimit);\n', '        token.mint(_to, _val);\n', '    }\n', '\n', '    // Прекратить выпуск токенов\n', '    // ВНИМАНИЕ! После вызова этой функции перезапуск будет невозможен!\n', '    function closeMinting() public onlyOwner {\n', '        token.finishMinting();\n', '    }\n', '\n', '    // Запуск прив. сейла\n', '    function startPrivateSale() public onlyOwner {\n', '        currentStageNumber = 0;\n', '        currentStageStartTimestamp = now;\n', '        currentStagePeriodDays = _days[0];\n', '        currentStageMultiplier = _percs[0];\n', '        supplyLimit = PrivateSaleLimit;\n', '        currentStageEndTimestamp = currentStageStartTimestamp + currentStagePeriodDays * 1 days;\n', '        baseExchangeRate = TokensaleRate;\n', '    }\n', '\n', '    function startPreSale() public onlyOwner {\n', '        currentStageNumber = 0;\n', '        currentStageEndTimestamp = now;\n', '        switchPeriod();\n', '    }\n', '\n', '    function startTokenSale() public onlyOwner {\n', '        currentStageNumber = 2;\n', '        currentStageEndTimestamp = now;\n', '        switchPeriod();\n', '    }\n', '\n', '    function endTokenSale() public onlyOwner {\n', '        currentStageNumber = 7;\n', '        currentStageEndTimestamp = now;\n', '        switchPeriod();\n', '    }\n', '\n', '    // 000000000000000000 - 18 нулей, добавить к сумме в целых GWT\n', '    // Старт\n', '    function GWTCrowdsale() public {\n', '        // Init\n', '        ethAddress = 0xB93B2be636e39340f074F0c7823427557941Be42;  // Записываем адрес, на который будет пересылаться эфир\n', '        // ethAddress = 0x16a49c8af25b3c2ff315934bf38a4cf645813844; // Dev\n', '        saleStartTimestamp = now;                                       // Записываем дату деплоя\n', '        startPrivateSale();\n', '    }\n', '\n', '    function changeEthAddress(address _newAddress) public onlyOwner {\n', '        ethAddress = _newAddress;\n', '    }\n', '\n', '    // Автоматическая покупка токенов\n', '    function createTokens() public isActive payable {\n', '        uint tokens = baseExchangeRate.mul(msg.value).div(1 ether); // Переводим ETH в GWT\n', '\n', '        if (currentStageMultiplier > 0 && currentStageEndTimestamp > now) {            // Начисляем бонус\n', '            tokens = tokens + tokens.div(100).mul(currentStageMultiplier);\n', '        }\n', '        // require(tokens > minLimit && tokens < buyLimit);\n', '        require(token.totalSupply() + tokens <= supplyLimit);\n', '        ethAddress.transfer(msg.value);   // переводим на основной кошелек\n', '        token.mint(msg.sender, tokens); // Начисляем\n', '    }\n', '\n', '    // Если кто-то перевел эфир на контракт\n', '    function() external payable {\n', '        createTokens(); // Вызываем функцию начисления токенов\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.4;\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint256 balance);\n', '    function transfer(address to, uint256 value) public returns (bool success);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '} \n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public constant returns (uint256 remaining);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool success);\n', '    function approve(address spender, uint256 value) public returns (bool success);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    \n', '    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '  \n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    \n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) public balances;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool success)  {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of. \n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint256 balance)  {\n', '        return balances[_owner];\n', '    }\n', ' \n', '}\n', ' \n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', ' \n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amout of tokens to be transfered\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success)  {\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '        // require (_value <= _allowance);\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool success)  {\n', '\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifing the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', ' \n', '}\n', ' \n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '    address public owner;\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable()  public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) onlyOwner  public {\n', '        require(newOwner != address(0));      \n', '        owner = newOwner;\n', '    }\n', ' \n', '}\n', ' \n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' */\n', ' \n', 'contract MintableToken is StandardToken, Ownable {\n', '    \n', '    event Mint(address indexed to, uint256 amount);\n', '\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to mint tokens\n', '    * @param _to The address that will recieve the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount); \n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to stop minting new tokens.\n', '    * @return True if the operation was successful.\n', '    */\n', '    function finishMinting() public onlyOwner returns (bool)  {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '  \n', '}\n', '\n', '\n', '// Токен \n', 'contract GWTToken is MintableToken {\n', '    \n', '    string public constant name = "Global Wind Token";\n', '    \n', '    string public constant symbol = "GWT";\n', '    \n', '    uint32 public constant decimals = 18; \n', '\n', '}\n', '\n', '// Контракт краудсейла\n', 'contract GWTCrowdsale is Ownable {\n', '    using SafeMath for uint;\n', '\n', '    uint public supplyLimit;         // Лимит выпуска токенов\n', '\n', '    address ethAddress;              // Адрес получателя эфира\n', '    uint saleStartTimestamp;         // Таймштамп запуска контракта\n', '\n', '    uint public currentStageNumber;  // Номер периода\n', '    uint currentStageStartTimestamp; // Таймштамп старта периода\n', '    uint currentStageEndTimestamp;   // Таймштамп окончания периода\n', '    uint currentStagePeriodDays;     // Кол-во дней (в тестовом минут) проведения периода краудсейла\n', '    uint public baseExchangeRate;    // Курс обмена на токены\n', '    uint currentStageMultiplier;     // Множитель для разных этапов:     bcostReal = baseExchangeRate * currentStageMultiplier\n', '\n', '    uint constant M = 1000000000000000000;  // 1 GWT = 10^18 GWTunits (wei)\n', '\n', '    uint[] _percs = [40, 30, 25, 20, 15, 10, 5, 0, 0];  // Бонусные проценты\n', '    uint[] _days  = [42, 1, 27, 1, 7, 7, 7, 14, 0];      // Продолжительность в днях\n', '\n', '    // Лимиты на выпуск токенов\n', '    uint PrivateSaleLimit = M.mul(420000000);\n', '    uint PreSaleLimit = M.mul(1300000000);\n', '    uint TokenSaleLimit = M.mul(8400000000);\n', '    uint RetailLimit = M.mul(22490000000);\n', '\n', '    // Курсы обмена токенов на эфир\n', '    uint TokensaleRate = M.mul(160000);\n', '    uint RetailRate = M.mul(16000);\n', '\n', '    GWTToken public token = new GWTToken(); // Токен\n', '\n', '    // Активен ли краудсейл\n', '    modifier isActive() {\n', '        require(isInActiveStage());\n', '        _;\n', '    }\n', '\n', '    function isInActiveStage() private returns(bool) {\n', '        if (currentStageNumber == 8) return true;\n', '        if (now >= currentStageStartTimestamp && now <= currentStageEndTimestamp){\n', '            return true;\n', '        }else if (now < currentStageStartTimestamp) {\n', '            return false;\n', '        }else if (now > currentStageEndTimestamp){\n', '            if (currentStageNumber == 0 || currentStageNumber == 2 || currentStageNumber == 7) return false;\n', '            switchPeriod();\n', '            // It is not possible for stage to be finished after straight the start\n', '            // Also new set currentStageStartTimestamp and currentStageEndTimestamp should be valid by definition\n', '            //return isInActiveStage();\n', '            return true;\n', '        }\n', '        // That will never get reached\n', '        return false;\n', '    }\n', '\n', '    // Перейти к следующему периоду\n', '    function switchPeriod() private onlyOwner {\n', '        if (currentStageNumber == 8) return;\n', '\n', '        currentStageNumber++;\n', '        currentStageStartTimestamp = currentStageEndTimestamp; // Запуск производится от конца прошлого периода, если нужно запустить с текущего момента поменяйте на now\n', '        currentStagePeriodDays = _days[currentStageNumber];\n', '        currentStageEndTimestamp = currentStageStartTimestamp + currentStagePeriodDays * 1 days;\n', '        currentStageMultiplier = _percs[currentStageNumber];\n', '\n', '        if(currentStageNumber == 0 ){\n', '            supplyLimit = PrivateSaleLimit;\n', '        } else if(currentStageNumber < 3){\n', '            supplyLimit = PreSaleLimit;\n', '        } else if(currentStageNumber < 8){\n', '            supplyLimit = TokenSaleLimit;\n', '        } else {\n', '            // Base rate for phase 8 should update exchange rate\n', '            baseExchangeRate = RetailRate;\n', '            supplyLimit = RetailLimit;\n', '        }\n', '    }\n', '\n', '    function setStage(uint _index) public onlyOwner {\n', '        require(_index >= 0 && _index < 9);\n', '        \n', '        if (_index == 0) return startPrivateSale();\n', '        currentStageNumber = _index - 1;\n', '        currentStageEndTimestamp = now;\n', '        switchPeriod();\n', '    }\n', '\n', '    // Установить курс обмена\n', '    function setRate(uint _rate) public onlyOwner {\n', '        baseExchangeRate = _rate;\n', '    }\n', '\n', '    // Установить можитель\n', '    function setBonus(uint _bonus) public onlyOwner {\n', '        currentStageMultiplier = _bonus;\n', '    }\n', '\n', '    function setTokenOwner(address _newTokenOwner) public onlyOwner {\n', '        token.transferOwnership(_newTokenOwner);\n', '    }\n', '\n', '    // Установить продолжительность текущего периода в днях\n', '    function setPeriodLength(uint _length) public onlyOwner {\n', '        // require(now < currentStageStartTimestamp + _length * 1 days);\n', '        currentStagePeriodDays = _length;\n', '        currentStageEndTimestamp = currentStageStartTimestamp + currentStagePeriodDays * 1 days;\n', '    }\n', '\n', '    // Изменить лимит выпуска токенов\n', '    function modifySupplyLimit(uint _new) public onlyOwner {\n', '        if (_new >= token.totalSupply()){\n', '            supplyLimit = _new;\n', '        }\n', '    }\n', '\n', '    // Выпустить токены на кошелек\n', '    function mintFor(address _to, uint _val) public onlyOwner isActive payable {\n', '        require(token.totalSupply() + _val <= supplyLimit);\n', '        token.mint(_to, _val);\n', '    }\n', '\n', '    // Прекратить выпуск токенов\n', '    // ВНИМАНИЕ! После вызова этой функции перезапуск будет невозможен!\n', '    function closeMinting() public onlyOwner {\n', '        token.finishMinting();\n', '    }\n', '\n', '    // Запуск прив. сейла\n', '    function startPrivateSale() public onlyOwner {\n', '        currentStageNumber = 0;\n', '        currentStageStartTimestamp = now;\n', '        currentStagePeriodDays = _days[0];\n', '        currentStageMultiplier = _percs[0];\n', '        supplyLimit = PrivateSaleLimit;\n', '        currentStageEndTimestamp = currentStageStartTimestamp + currentStagePeriodDays * 1 days;\n', '        baseExchangeRate = TokensaleRate;\n', '    }\n', '\n', '    function startPreSale() public onlyOwner {\n', '        currentStageNumber = 0;\n', '        currentStageEndTimestamp = now;\n', '        switchPeriod();\n', '    }\n', '\n', '    function startTokenSale() public onlyOwner {\n', '        currentStageNumber = 2;\n', '        currentStageEndTimestamp = now;\n', '        switchPeriod();\n', '    }\n', '\n', '    function endTokenSale() public onlyOwner {\n', '        currentStageNumber = 7;\n', '        currentStageEndTimestamp = now;\n', '        switchPeriod();\n', '    }\n', '\n', '    // 000000000000000000 - 18 нулей, добавить к сумме в целых GWT\n', '    // Старт\n', '    function GWTCrowdsale() public {\n', '        // Init\n', '        ethAddress = 0xB93B2be636e39340f074F0c7823427557941Be42;  // Записываем адрес, на который будет пересылаться эфир\n', '        // ethAddress = 0x16a49c8af25b3c2ff315934bf38a4cf645813844; // Dev\n', '        saleStartTimestamp = now;                                       // Записываем дату деплоя\n', '        startPrivateSale();\n', '    }\n', '\n', '    function changeEthAddress(address _newAddress) public onlyOwner {\n', '        ethAddress = _newAddress;\n', '    }\n', '\n', '    // Автоматическая покупка токенов\n', '    function createTokens() public isActive payable {\n', '        uint tokens = baseExchangeRate.mul(msg.value).div(1 ether); // Переводим ETH в GWT\n', '\n', '        if (currentStageMultiplier > 0 && currentStageEndTimestamp > now) {            // Начисляем бонус\n', '            tokens = tokens + tokens.div(100).mul(currentStageMultiplier);\n', '        }\n', '        // require(tokens > minLimit && tokens < buyLimit);\n', '        require(token.totalSupply() + tokens <= supplyLimit);\n', '        ethAddress.transfer(msg.value);   // переводим на основной кошелек\n', '        token.mint(msg.sender, tokens); // Начисляем\n', '    }\n', '\n', '    // Если кто-то перевел эфир на контракт\n', '    function() external payable {\n', '        createTokens(); // Вызываем функцию начисления токенов\n', '    }\n', '\n', '}']
