['pragma solidity ^0.4.21;\n', '\n', '// File: contracts/CCLToken.sol\n', '\n', '// modified from Moritz Neto with BokkyPooBah / Bok Consulting Pty Ltd Au 2017.\n', '// The MIT Licence.\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) public pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(uint a, uint b) public pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract CCLToken is ERC20Interface, Owned, SafeMath {\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '\n', '    function CCLToken() public {\n', '        symbol = "CCL";\n', '        name = "CyClean Token";\n', '        decimals = 18;\n', '        _totalSupply = 4000000000000000000000000000; //4,000,000,000\n', '        balances[0xf835bF0285c99102eaedd684b4401272eF36aF65] = _totalSupply;\n', '        Transfer(address(0), 0xf835bF0285c99102eaedd684b4401272eF36aF65, _totalSupply);\n', '    }\n', '\n', '\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = safeSub(balances[from], tokens);\n', '        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}\n', '\n', '// File: contracts/ICOEngineInterface.sol\n', '\n', 'contract ICOEngineInterface {\n', '\n', '    // false if the ico is not started, true if the ico is started and running, true if the ico is completed\n', '    function started() public view returns(bool);\n', '\n', '    // false if the ico is not started, false if the ico is started and running, true if the ico is completed\n', '    function ended() public view returns(bool);\n', '\n', '    // time stamp of the starting time of the ico, must return 0 if it depends on the block number\n', '    function startTime() public view returns(uint);\n', '\n', '    // time stamp of the ending time of the ico, must retrun 0 if it depends on the block number\n', '    function endTime() public view returns(uint);\n', '\n', '    // Optional function, can be implemented in place of startTime\n', '    // Returns the starting block number of the ico, must return 0 if it depends on the time stamp\n', '    // function startBlock() public view returns(uint);\n', '\n', '    // Optional function, can be implemented in place of endTime\n', '    // Returns theending block number of the ico, must retrun 0 if it depends on the time stamp\n', '    // function endBlock() public view returns(uint);\n', '\n', '    // returns the total number of the tokens available for the sale, must not change when the ico is started\n', '    function totalTokens() public view returns(uint);\n', '\n', '    // returns the number of the tokens available for the ico. At the moment that the ico starts it must be equal to totalTokens(),\n', '    // then it will decrease. It is used to calculate the percentage of sold tokens as remainingTokens() / totalTokens()\n', '    function remainingTokens() public view returns(uint);\n', '\n', '    // return the price as number of tokens released for each ether\n', '    function price() public view returns(uint);\n', '}\n', '\n', '// File: contracts/SafeMath.sol\n', '\n', 'library SafeMathLib {\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        assert(c>=a && c>=b);\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '}\n', '\n', '// File: contracts/KYCBase.sol\n', '\n', '// Abstract base contract\n', 'contract KYCBase {\n', '    using SafeMathLib for uint256;\n', '\n', '    mapping (address => bool) public isKycSigner;\n', '    mapping (uint64 => uint256) public alreadyPayed;\n', '\n', '    event KycVerified(address indexed signer, address buyerAddress, uint64 buyerId, uint maxAmount);\n', '    event ThisCheck(KYCBase base, address sender);\n', '    constructor ( address[] kycSigners) internal {\n', '        for (uint i = 0; i < kycSigners.length; i++) {\n', '            isKycSigner[kycSigners[i]] = true;\n', '        }\n', '    }\n', '\n', '    // Must be implemented in descending contract to assign tokens to the buyers. Called after the KYC verification is passed\n', '    function releaseTokensTo(address buyer) internal returns(bool);\n', '\n', '    // This method can be overridden to enable some sender to buy token for a different address\n', '    function senderAllowedFor(address buyer)\n', '        internal view returns(bool)\n', '    {\n', '        return buyer == msg.sender;\n', '    }\n', '\n', '    function buyTokensFor(address buyerAddress, uint64 buyerId, uint maxAmount, uint8 v, bytes32 r, bytes32 s)\n', '        public payable returns (bool)\n', '    {\n', '        require(senderAllowedFor(buyerAddress));\n', '        return buyImplementation(buyerAddress, buyerId, maxAmount, v, r, s);\n', '    }\n', '\n', '    function buyTokens(uint64 buyerId, uint maxAmount, uint8 v, bytes32 r, bytes32 s)\n', '        public payable returns (bool)\n', '    {\n', '        return buyImplementation(msg.sender, buyerId, maxAmount, v, r, s);\n', '    }\n', '\n', '    function buyImplementation(address buyerAddress, uint64 buyerId, uint maxAmount, uint8 v, bytes32 r, bytes32 s)\n', '        private returns (bool)\n', '    {\n', '        // check the signature\n', '        bytes32 hash = sha256(abi.encodePacked("Eidoo icoengine authorization", this, buyerAddress, buyerId, maxAmount));\n', '        emit ThisCheck(this, msg.sender);\n', '        //bytes32 hash = sha256("Eidoo icoengine authorization", this, buyerAddress, buyerId, maxAmount);\n', '        address signer = ecrecover(hash, v, r, s);\n', '        if (!isKycSigner[signer]) {\n', '            revert();\n', '        } else {\n', '            uint256 totalPayed = alreadyPayed[buyerId].add(msg.value);\n', '            require(totalPayed <= maxAmount);\n', '            alreadyPayed[buyerId] = totalPayed;\n', '            emit KycVerified(signer, buyerAddress, buyerId, maxAmount);\n', '            return releaseTokensTo(buyerAddress);\n', '        }\n', '    }\n', '\n', '    // No payable fallback function, the tokens must be buyed using the functions buyTokens and buyTokensFor\n', '    function () public {\n', '        revert();\n', '    }\n', '}\n', '\n', '// File: contracts/TokenSale.sol\n', '\n', 'contract TokenSale is ICOEngineInterface, KYCBase {\n', '    using SafeMathLib for uint;\n', '\n', '    event ReleaseTokensToCalled(address buyer);\n', '\n', '    event ReleaseTokensToCalledDetail(address wallet, address buyer, uint amount, uint remainingTokensValue);\n', '    event SenderCheck(address sender);\n', '\n', '    CCLToken public token;\n', '    address public wallet;\n', '\n', '    // from ICOEngineInterface\n', '    uint private priceValue;\n', '    function price() public view returns(uint) {\n', '        return priceValue;\n', '    }\n', '\n', '    // from ICOEngineInterface\n', '    uint private startTimeValue;\n', '    function startTime() public view returns(uint) {\n', '        return startTimeValue;\n', '    }\n', '\n', '    // from ICOEngineInterface\n', '    uint private endTimeValue;\n', '    function endTime() public view returns(uint) {\n', '        return endTimeValue;\n', '    }\n', '    // from ICOEngineInterface\n', '    uint private totalTokensValue;\n', '    function totalTokens() public view returns(uint) {\n', '        return totalTokensValue;\n', '    }\n', '\n', '    // from ICOEngineInterface\n', '    uint private remainingTokensValue;\n', '    function remainingTokens() public view returns(uint) {\n', '        return remainingTokensValue;\n', '    }\n', '\n', '\n', '    /**\n', '     *  After you deployed the SampleICO contract, you have to call the ERC20\n', '     *  approve() method from the _wallet account to the deployed contract address to assign\n', '     *  the tokens to be sold by the ICO.\n', '     */\n', '    constructor ( address[] kycSigner, CCLToken _token, address _wallet, uint _startTime, uint _endTime, uint _price, uint _totalTokens)\n', '        public KYCBase(kycSigner)\n', '    {\n', '        token = _token;\n', '        wallet = _wallet;\n', '        //emit WalletCheck(_wallet);\n', '        startTimeValue = _startTime;\n', '        endTimeValue = _endTime;\n', '        priceValue = _price;\n', '        totalTokensValue = _totalTokens;\n', '        remainingTokensValue = _totalTokens;\n', '    }\n', '\n', '    // from KYCBase\n', '    function releaseTokensTo(address buyer) internal returns(bool) {\n', '        //emit SenderCheck(msg.sender);\n', '        require(now >= startTimeValue && now < endTimeValue);\n', '        uint amount = msg.value.mul(priceValue);\n', '        remainingTokensValue = remainingTokensValue.sub(amount);\n', '        emit ReleaseTokensToCalledDetail(wallet, buyer, amount, remainingTokensValue);\n', '\n', '        wallet.transfer(msg.value);\n', '        //require(this == token.owner());\n', '        token.transferFrom(wallet, buyer, amount);\n', '        emit ReleaseTokensToCalled(buyer);\n', '        return true;\n', '    }\n', '\n', '    // from ICOEngineInterface\n', '    function started() public view returns(bool) {\n', '        return now >= startTimeValue;\n', '    }\n', '\n', '    // from ICOEngineInterface\n', '    function ended() public view returns(bool) {\n', '        return now >= endTimeValue || remainingTokensValue == 0;\n', '    }\n', '\n', '    function senderAllowedFor(address buyer)\n', '        internal view returns(bool)\n', '    {\n', '        bool value = super.senderAllowedFor(buyer);\n', '        return value;\n', '    }\n', '}']