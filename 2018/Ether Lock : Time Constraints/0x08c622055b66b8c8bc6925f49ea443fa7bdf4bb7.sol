['pragma solidity ^0.4.18;\n', '\n', '    /// @title Ownable\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    address public newOwnerCandidate;\n', '\n', '    event OwnershipRequested(address indexed _by, address indexed _to);\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    /// @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\n', '    function Ownable() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /// @dev Throws if called by any account other than the owner.\n', '    modifier onlyOwner() {\n', '        if (msg.sender != owner) {\n', '            throw;\n', '        }\n', '        _;\n', '    }\n', '\n', '    /// @dev Proposes to transfer control of the contract to a newOwnerCandidate.\n', '    /// @param _newOwnerCandidate address The address to transfer ownership to.\n', '    function transferOwnership(address _newOwnerCandidate) onlyOwner {\n', '        require(_newOwnerCandidate != address(0));\n', '\n', '        newOwnerCandidate = _newOwnerCandidate;\n', '\n', '        OwnershipRequested(msg.sender, newOwnerCandidate);\n', '    }\n', '\n', '    /// @dev Accept ownership transfer. This method needs to be called by the perviously proposed owner.\n', '    function acceptOwnership() {\n', '        if (msg.sender == newOwnerCandidate) {\n', '            owner = newOwnerCandidate;\n', '            newOwnerCandidate = address(0);\n', '\n', '            OwnershipTransferred(owner, newOwnerCandidate);\n', '        }\n', '    }\n', '}\n', '\n', 'interface token {\n', '    function transfer(address _to, uint256 _amount);\n', '}\n', '\n', 'contract SafeTimeLock is Ownable {\n', '    \n', '    token public epm;\n', '    \n', '    uint256 public constant DURATION = 2 years;\n', '    uint256 public startTime = 0;\n', '    uint256 public endTime = 0;\n', '    uint256 public remaining = 0;\n', '    \n', '    /**\n', '     * Constructor function\n', '     *\n', '     */\n', '\n', '    function SafeTimeLock() {\n', '        epm = token(0xc5594d84B996A68326d89FB35E4B89b3323ef37d);\n', '        startTime = now;\n', '        endTime = startTime + DURATION;\n', '    }\n', '    \n', '    function getRemainTime() public constant returns (uint256 remaining) {\n', '        remaining = endTime - now;\n', '    }\n', '    \n', '    modifier onlyOutTimeLock() {\n', '        if (now < startTime || now <= endTime) {\n', '            throw;\n', '        }\n', '        _;\n', '    }\n', '    \n', '    function Withdrawal(uint amount) onlyOutTimeLock {\n', '        epm.transfer(msg.sender, amount*10**18);\n', '    }\n', '}']