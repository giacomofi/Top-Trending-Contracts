['pragma solidity ^0.4.13;\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract MINC is ERC20,Ownable{\n', '\tusing SafeMath for uint256;\n', '\n', '\t//the base info of the token\n', '\tstring public constant name="MinerCoin";\n', '\tstring public constant symbol="MINC";\n', '\tstring public constant version = "1.0";\n', '\tuint256 public constant decimals = 18;\n', '\n', '\t//奖励2亿\n', '\tuint256 public constant REWARD_SUPPLY=200000000*10**decimals;\n', '\t//运营2亿\n', '\tuint256 public constant OPERATE_SUPPLY=200000000*10**decimals;\n', '\n', '\t//可普通提现额度4亿\n', '\tuint256 public constant COMMON_WITHDRAW_SUPPLY=REWARD_SUPPLY+OPERATE_SUPPLY;\n', '\n', '\t//公募5亿\n', '\tuint256 public constant MAX_FUNDING_SUPPLY=500000000*10**decimals;\n', '\n', '\t//团队持有1亿\n', '\tuint256 public constant TEAM_KEEPING=100000000*10**decimals;\t\n', '\n', '\t//总发行10亿\n', '\tuint256 public constant MAX_SUPPLY=COMMON_WITHDRAW_SUPPLY+MAX_FUNDING_SUPPLY+TEAM_KEEPING;\n', '\n', '\t//已普通提现额度\n', '\tuint256 public totalCommonWithdrawSupply;\n', '\n', '\t//公募参数\n', '\t//已经公募量\n', '\tuint256 public totalFundingSupply;\n', '\tuint256 public stepOneStartTime;\n', '\tuint256 public stepTwoStartTime;\n', '\tuint256 public endTime;\n', '\tuint256 public oneStepRate;\n', '\tuint256 public twoStepRate;\n', '\n', '\t//团队每次解禁\n', '\tuint256 public constant TEAM_UNFREEZE=20000000*10**decimals;\n', '\tbool public hasOneStepWithdraw;\n', '\tbool public hasTwoStepWithdraw;\n', '\tbool public hasThreeStepWithdraw;\n', '\tbool public hasFourStepWithdraw;\n', '\tbool public hasFiveStepWithdraw;\n', '\n', '\n', '\t \n', '\t//ERC20的余额\n', '    mapping(address => uint256) balances;\n', '\tmapping (address => mapping (address => uint256)) allowed;\n', '\t\n', '\n', '\tfunction MINC(){\n', '\t\ttotalCommonWithdrawSupply= 0;\n', '\t\ttotalSupply = 0 ;\n', '\t\ttotalFundingSupply = 0;\n', '\t\n', '\n', '\t\tstepOneStartTime=1520352000;\n', '\t\tstepTwoStartTime=1521475200;\n', '\t\tendTime=1524153600;\n', '\n', '\t\toneStepRate=5000;\n', '\t\ttwoStepRate=4000;\n', '\n', '\t\thasOneStepWithdraw=false;\n', '\t\thasTwoStepWithdraw=false;\n', '\t\thasThreeStepWithdraw=false;\n', '\t\thasFourStepWithdraw=false;\n', '\t\thasFiveStepWithdraw=false;\n', '\n', '\t}\n', '\n', '\tevent CreateMINC(address indexed _to, uint256 _value);\n', '\n', '\n', '\tmodifier notReachTotalSupply(uint256 _value,uint256 _rate){\n', '\t\tassert(MAX_SUPPLY>=totalSupply.add(_value.mul(_rate)));\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier notReachFundingSupply(uint256 _value,uint256 _rate){\n', '\t\tassert(MAX_FUNDING_SUPPLY>=totalFundingSupply.add(_value.mul(_rate)));\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier notReachCommonWithdrawSupply(uint256 _value,uint256 _rate){\n', '\t\tassert(COMMON_WITHDRAW_SUPPLY>=totalCommonWithdrawSupply.add(_value.mul(_rate)));\n', '\t\t_;\n', '\t}\n', '\n', '\n', '\tmodifier assertFalse(bool withdrawStatus){\n', '\t\tassert(!withdrawStatus);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier notBeforeTime(uint256 targetTime){\n', '\t\tassert(now>targetTime);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier notAfterTime(uint256 targetTime){\n', '\t\tassert(now<=targetTime);\n', '\t\t_;\n', '\t}\n', '\n', '\n', '\t//owner有权限提取账户中的eth\n', '\tfunction etherProceeds() external\n', '\t\tonlyOwner\n', '\n', '\t{\n', '\t\tif(!msg.sender.send(this.balance)) revert();\n', '\t}\n', '\n', '\n', '\t//代币分发函数，内部使用\n', '\tfunction processFunding(address receiver,uint256 _value,uint256 _rate) internal\n', '\t\tnotReachTotalSupply(_value,_rate)\n', '\t{\n', '\t\tuint256 amount=_value.mul(_rate);\n', '\t\ttotalSupply=totalSupply.add(amount);\n', '\t\tbalances[receiver] +=amount;\n', '\t\tCreateMINC(receiver,amount);\n', '\t\tTransfer(0x0, receiver, amount);\n', '\t}\n', '\n', '\tfunction funding (address receiver,uint256 _value,uint256 _rate) internal \n', '\t\tnotReachFundingSupply(_value,_rate)\n', '\t{\n', '\t\tprocessFunding(receiver,_value,_rate);\n', '\t\tuint256 amount=_value.mul(_rate);\n', '\t\ttotalFundingSupply = totalFundingSupply.add(amount);\n', '\t}\n', '\t\n', '\n', '\tfunction () payable external\n', '\t\tnotBeforeTime(stepOneStartTime)\n', '\t\tnotAfterTime(endTime)\n', '\t{\n', '\t\tif(now>=stepOneStartTime&&now<stepTwoStartTime){\n', '\t\t\tfunding(msg.sender,msg.value,oneStepRate);\n', '\t\t}else if(now>=stepTwoStartTime&&now<endTime){\n', '\t\t\tfunding(msg.sender,msg.value,twoStepRate);\n', '\t\t}else {\n', '\t\t\trevert();\n', '\t\t}\n', '\n', '\t}\n', '\n', '\t//普通提币\n', '\tfunction commonWithdraw(uint256 _value) external\n', '\t\tonlyOwner\n', '\t\tnotReachCommonWithdrawSupply(_value,1)\n', '\n', '\t{\n', '\t\tprocessFunding(msg.sender,_value,1);\n', '\t\t//增加已经普通提现份额\n', '\t\ttotalCommonWithdrawSupply=totalCommonWithdrawSupply.add(_value);\n', '\t}\n', '\t//20180907可提\n', '\tfunction withdrawForOneStep() external\n', '\t\tonlyOwner\n', '\t\tassertFalse(hasOneStepWithdraw)\n', '\t\tnotBeforeTime(1536249600)\n', '\t{\n', '\t\tprocessFunding(msg.sender,TEAM_UNFREEZE,1);\n', '\t\t//标记团队已提现\n', '\t\thasOneStepWithdraw = true;\n', '\t}\n', '\n', '\t//20190307\n', '\tfunction withdrawForTwoStep() external\n', '\t\tonlyOwner\n', '\t\tassertFalse(hasTwoStepWithdraw)\n', '\t\tnotBeforeTime(1551888000)\n', '\t{\n', '\t\tprocessFunding(msg.sender,TEAM_UNFREEZE,1);\n', '\t\t//标记团队已提现\n', '\t\thasTwoStepWithdraw = true;\n', '\t}\n', '\n', '\t//20190907\n', '\tfunction withdrawForThreeStep() external\n', '\t\tonlyOwner\n', '\t\tassertFalse(hasThreeStepWithdraw)\n', '\t\tnotBeforeTime(1567785600)\n', '\t{\n', '\t\tprocessFunding(msg.sender,TEAM_UNFREEZE,1);\n', '\t\t//标记团队已提现\n', '\t\thasThreeStepWithdraw = true;\n', '\t}\n', '\n', '\t//20200307\n', '\tfunction withdrawForFourStep() external\n', '\t\tonlyOwner\n', '\t\tassertFalse(hasFourStepWithdraw)\n', '\t\tnotBeforeTime(1583510400)\n', '\t{\n', '\t\tprocessFunding(msg.sender,TEAM_UNFREEZE,1);\n', '\t\t//标记团队已提现\n', '\t\thasFourStepWithdraw = true;\n', '\t}\n', '\n', '\t//20200907\n', '\tfunction withdrawForFiveStep() external\n', '\t\tonlyOwner\n', '\t\tassertFalse(hasFiveStepWithdraw)\n', '\t\tnotBeforeTime(1599408000)\n', '\t{\n', '\t\tprocessFunding(msg.sender,TEAM_UNFREEZE,1);\n', '\t\t//标记团队已提现\n', '\t\thasFiveStepWithdraw = true;\n', '\t}\t\t\t\n', '\n', '\n', '  \tfunction transfer(address _to, uint256 _value) public  returns (bool)\n', ' \t{\n', '\t\trequire(_to != address(0));\n', '\t\t// SafeMath.sub will throw if there is not enough balance.\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\tTransfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '  \t}\n', '\n', '  \tfunction balanceOf(address _owner) public constant returns (uint256 balance) \n', '  \t{\n', '\t\treturn balances[_owner];\n', '  \t}\n', '\n', '\n', '  \tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) \n', '  \t{\n', '\t\trequire(_to != address(0));\n', '\t\tuint256 _allowance = allowed[_from][msg.sender];\n', '\t\tbalances[_from] = balances[_from].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\tallowed[_from][msg.sender] = _allowance.sub(_value);\n', '\t\tTransfer(_from, _to, _value);\n', '\t\treturn true;\n', '  \t}\n', '\n', '  \tfunction approve(address _spender, uint256 _value) public returns (bool) \n', '  \t{\n', '\t\tallowed[msg.sender][_spender] = _value;\n', '\t\tApproval(msg.sender, _spender, _value);\n', '\t\treturn true;\n', '  \t}\n', '\n', '  \tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining) \n', '  \t{\n', '\t\treturn allowed[_owner][_spender];\n', '  \t}\n', '\n', '\n', '\tfunction setupFundingRate(uint256 _oneStepRate,uint256 _twoStepRate) external\n', '\t\tonlyOwner\n', '\t{\n', '\t\toneStepRate=_oneStepRate;\n', '\t\ttwoStepRate=_twoStepRate;\n', '\t}\n', '\n', '    function setupFundingTime(uint256 _stepOneStartTime,uint256 _stepTwoStartTime,uint256 _endTime) external\n', '        onlyOwner\n', '    {\n', '\t\tstepOneStartTime=_stepOneStartTime;\n', '\t\tstepTwoStartTime=_stepTwoStartTime;\n', '\t\tendTime=_endTime;\n', '    }\n', '\t  \n', '}']
['pragma solidity ^0.4.13;\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract MINC is ERC20,Ownable{\n', '\tusing SafeMath for uint256;\n', '\n', '\t//the base info of the token\n', '\tstring public constant name="MinerCoin";\n', '\tstring public constant symbol="MINC";\n', '\tstring public constant version = "1.0";\n', '\tuint256 public constant decimals = 18;\n', '\n', '\t//奖励2亿\n', '\tuint256 public constant REWARD_SUPPLY=200000000*10**decimals;\n', '\t//运营2亿\n', '\tuint256 public constant OPERATE_SUPPLY=200000000*10**decimals;\n', '\n', '\t//可普通提现额度4亿\n', '\tuint256 public constant COMMON_WITHDRAW_SUPPLY=REWARD_SUPPLY+OPERATE_SUPPLY;\n', '\n', '\t//公募5亿\n', '\tuint256 public constant MAX_FUNDING_SUPPLY=500000000*10**decimals;\n', '\n', '\t//团队持有1亿\n', '\tuint256 public constant TEAM_KEEPING=100000000*10**decimals;\t\n', '\n', '\t//总发行10亿\n', '\tuint256 public constant MAX_SUPPLY=COMMON_WITHDRAW_SUPPLY+MAX_FUNDING_SUPPLY+TEAM_KEEPING;\n', '\n', '\t//已普通提现额度\n', '\tuint256 public totalCommonWithdrawSupply;\n', '\n', '\t//公募参数\n', '\t//已经公募量\n', '\tuint256 public totalFundingSupply;\n', '\tuint256 public stepOneStartTime;\n', '\tuint256 public stepTwoStartTime;\n', '\tuint256 public endTime;\n', '\tuint256 public oneStepRate;\n', '\tuint256 public twoStepRate;\n', '\n', '\t//团队每次解禁\n', '\tuint256 public constant TEAM_UNFREEZE=20000000*10**decimals;\n', '\tbool public hasOneStepWithdraw;\n', '\tbool public hasTwoStepWithdraw;\n', '\tbool public hasThreeStepWithdraw;\n', '\tbool public hasFourStepWithdraw;\n', '\tbool public hasFiveStepWithdraw;\n', '\n', '\n', '\t \n', '\t//ERC20的余额\n', '    mapping(address => uint256) balances;\n', '\tmapping (address => mapping (address => uint256)) allowed;\n', '\t\n', '\n', '\tfunction MINC(){\n', '\t\ttotalCommonWithdrawSupply= 0;\n', '\t\ttotalSupply = 0 ;\n', '\t\ttotalFundingSupply = 0;\n', '\t\n', '\n', '\t\tstepOneStartTime=1520352000;\n', '\t\tstepTwoStartTime=1521475200;\n', '\t\tendTime=1524153600;\n', '\n', '\t\toneStepRate=5000;\n', '\t\ttwoStepRate=4000;\n', '\n', '\t\thasOneStepWithdraw=false;\n', '\t\thasTwoStepWithdraw=false;\n', '\t\thasThreeStepWithdraw=false;\n', '\t\thasFourStepWithdraw=false;\n', '\t\thasFiveStepWithdraw=false;\n', '\n', '\t}\n', '\n', '\tevent CreateMINC(address indexed _to, uint256 _value);\n', '\n', '\n', '\tmodifier notReachTotalSupply(uint256 _value,uint256 _rate){\n', '\t\tassert(MAX_SUPPLY>=totalSupply.add(_value.mul(_rate)));\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier notReachFundingSupply(uint256 _value,uint256 _rate){\n', '\t\tassert(MAX_FUNDING_SUPPLY>=totalFundingSupply.add(_value.mul(_rate)));\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier notReachCommonWithdrawSupply(uint256 _value,uint256 _rate){\n', '\t\tassert(COMMON_WITHDRAW_SUPPLY>=totalCommonWithdrawSupply.add(_value.mul(_rate)));\n', '\t\t_;\n', '\t}\n', '\n', '\n', '\tmodifier assertFalse(bool withdrawStatus){\n', '\t\tassert(!withdrawStatus);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier notBeforeTime(uint256 targetTime){\n', '\t\tassert(now>targetTime);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier notAfterTime(uint256 targetTime){\n', '\t\tassert(now<=targetTime);\n', '\t\t_;\n', '\t}\n', '\n', '\n', '\t//owner有权限提取账户中的eth\n', '\tfunction etherProceeds() external\n', '\t\tonlyOwner\n', '\n', '\t{\n', '\t\tif(!msg.sender.send(this.balance)) revert();\n', '\t}\n', '\n', '\n', '\t//代币分发函数，内部使用\n', '\tfunction processFunding(address receiver,uint256 _value,uint256 _rate) internal\n', '\t\tnotReachTotalSupply(_value,_rate)\n', '\t{\n', '\t\tuint256 amount=_value.mul(_rate);\n', '\t\ttotalSupply=totalSupply.add(amount);\n', '\t\tbalances[receiver] +=amount;\n', '\t\tCreateMINC(receiver,amount);\n', '\t\tTransfer(0x0, receiver, amount);\n', '\t}\n', '\n', '\tfunction funding (address receiver,uint256 _value,uint256 _rate) internal \n', '\t\tnotReachFundingSupply(_value,_rate)\n', '\t{\n', '\t\tprocessFunding(receiver,_value,_rate);\n', '\t\tuint256 amount=_value.mul(_rate);\n', '\t\ttotalFundingSupply = totalFundingSupply.add(amount);\n', '\t}\n', '\t\n', '\n', '\tfunction () payable external\n', '\t\tnotBeforeTime(stepOneStartTime)\n', '\t\tnotAfterTime(endTime)\n', '\t{\n', '\t\tif(now>=stepOneStartTime&&now<stepTwoStartTime){\n', '\t\t\tfunding(msg.sender,msg.value,oneStepRate);\n', '\t\t}else if(now>=stepTwoStartTime&&now<endTime){\n', '\t\t\tfunding(msg.sender,msg.value,twoStepRate);\n', '\t\t}else {\n', '\t\t\trevert();\n', '\t\t}\n', '\n', '\t}\n', '\n', '\t//普通提币\n', '\tfunction commonWithdraw(uint256 _value) external\n', '\t\tonlyOwner\n', '\t\tnotReachCommonWithdrawSupply(_value,1)\n', '\n', '\t{\n', '\t\tprocessFunding(msg.sender,_value,1);\n', '\t\t//增加已经普通提现份额\n', '\t\ttotalCommonWithdrawSupply=totalCommonWithdrawSupply.add(_value);\n', '\t}\n', '\t//20180907可提\n', '\tfunction withdrawForOneStep() external\n', '\t\tonlyOwner\n', '\t\tassertFalse(hasOneStepWithdraw)\n', '\t\tnotBeforeTime(1536249600)\n', '\t{\n', '\t\tprocessFunding(msg.sender,TEAM_UNFREEZE,1);\n', '\t\t//标记团队已提现\n', '\t\thasOneStepWithdraw = true;\n', '\t}\n', '\n', '\t//20190307\n', '\tfunction withdrawForTwoStep() external\n', '\t\tonlyOwner\n', '\t\tassertFalse(hasTwoStepWithdraw)\n', '\t\tnotBeforeTime(1551888000)\n', '\t{\n', '\t\tprocessFunding(msg.sender,TEAM_UNFREEZE,1);\n', '\t\t//标记团队已提现\n', '\t\thasTwoStepWithdraw = true;\n', '\t}\n', '\n', '\t//20190907\n', '\tfunction withdrawForThreeStep() external\n', '\t\tonlyOwner\n', '\t\tassertFalse(hasThreeStepWithdraw)\n', '\t\tnotBeforeTime(1567785600)\n', '\t{\n', '\t\tprocessFunding(msg.sender,TEAM_UNFREEZE,1);\n', '\t\t//标记团队已提现\n', '\t\thasThreeStepWithdraw = true;\n', '\t}\n', '\n', '\t//20200307\n', '\tfunction withdrawForFourStep() external\n', '\t\tonlyOwner\n', '\t\tassertFalse(hasFourStepWithdraw)\n', '\t\tnotBeforeTime(1583510400)\n', '\t{\n', '\t\tprocessFunding(msg.sender,TEAM_UNFREEZE,1);\n', '\t\t//标记团队已提现\n', '\t\thasFourStepWithdraw = true;\n', '\t}\n', '\n', '\t//20200907\n', '\tfunction withdrawForFiveStep() external\n', '\t\tonlyOwner\n', '\t\tassertFalse(hasFiveStepWithdraw)\n', '\t\tnotBeforeTime(1599408000)\n', '\t{\n', '\t\tprocessFunding(msg.sender,TEAM_UNFREEZE,1);\n', '\t\t//标记团队已提现\n', '\t\thasFiveStepWithdraw = true;\n', '\t}\t\t\t\n', '\n', '\n', '  \tfunction transfer(address _to, uint256 _value) public  returns (bool)\n', ' \t{\n', '\t\trequire(_to != address(0));\n', '\t\t// SafeMath.sub will throw if there is not enough balance.\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\tTransfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '  \t}\n', '\n', '  \tfunction balanceOf(address _owner) public constant returns (uint256 balance) \n', '  \t{\n', '\t\treturn balances[_owner];\n', '  \t}\n', '\n', '\n', '  \tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) \n', '  \t{\n', '\t\trequire(_to != address(0));\n', '\t\tuint256 _allowance = allowed[_from][msg.sender];\n', '\t\tbalances[_from] = balances[_from].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\tallowed[_from][msg.sender] = _allowance.sub(_value);\n', '\t\tTransfer(_from, _to, _value);\n', '\t\treturn true;\n', '  \t}\n', '\n', '  \tfunction approve(address _spender, uint256 _value) public returns (bool) \n', '  \t{\n', '\t\tallowed[msg.sender][_spender] = _value;\n', '\t\tApproval(msg.sender, _spender, _value);\n', '\t\treturn true;\n', '  \t}\n', '\n', '  \tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining) \n', '  \t{\n', '\t\treturn allowed[_owner][_spender];\n', '  \t}\n', '\n', '\n', '\tfunction setupFundingRate(uint256 _oneStepRate,uint256 _twoStepRate) external\n', '\t\tonlyOwner\n', '\t{\n', '\t\toneStepRate=_oneStepRate;\n', '\t\ttwoStepRate=_twoStepRate;\n', '\t}\n', '\n', '    function setupFundingTime(uint256 _stepOneStartTime,uint256 _stepTwoStartTime,uint256 _endTime) external\n', '        onlyOwner\n', '    {\n', '\t\tstepOneStartTime=_stepOneStartTime;\n', '\t\tstepTwoStartTime=_stepTwoStartTime;\n', '\t\tendTime=_endTime;\n', '    }\n', '\t  \n', '}']
