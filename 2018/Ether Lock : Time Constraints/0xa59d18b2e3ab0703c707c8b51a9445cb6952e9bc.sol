['pragma solidity ^0.4.21;\n', '\n', '/* Functions from Lemon Token main contract to be used by sale contract */\n', 'contract LemonToken {\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '}\n', '\n', 'contract Token {\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  \n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract LemonSelfDrop2 is Ownable {\n', '    LemonToken public lemonContract;\n', '    uint8 public dropNumber;\n', '    uint256 public lemonsDroppedToTheWorld;\n', '    uint256 public lemonsRemainingToDrop;\n', '    uint256 public holderAmount;\n', '    uint256 public basicReward;\n', '    uint256 public holderReward;\n', '    mapping (uint8 => uint256[]) donatorReward;\n', '    uint8 donatorRewardLevels;\n', '    uint8 public totalDropTransactions;\n', '    mapping (address => uint8) participants;\n', '    \n', '    \n', '    // Initialize the cutest contract in the world\n', '    function LemonSelfDrop2 () {\n', '        address c = 0x2089899d03607b2192afb2567874a3f287f2f1e4; // set Lemon Token contract address\n', '        lemonContract = LemonToken(c); \n', '        dropNumber = 1;\n', '        lemonsDroppedToTheWorld = 0;\n', '        lemonsRemainingToDrop = 0;\n', '        basicReward = 1000; // set initial basic reward to 500 Lemon Tokens\n', '        holderReward = 500000; // set initial holder reward to 500 Lemon Tokens\n', '        holderAmount = 10000000; // set initial hold amount to 50000 Lemon Tokens for extra reward\n', '        donatorReward[0]=[1,2000]; // set initial donator reward to 100 Lemon Tokens from 1 wei\n', '        donatorReward[1]=[1000000000000000,11111]; // set initial donator reward to 1000 Lemon Tokens from 0.001 ETH\n', '        donatorReward[2]=[10000000000000000,111111]; // set initial donator reward to 5000 Lemon Tokens from 0.01 ETH\n', '        donatorRewardLevels = 3;\n', '        totalDropTransactions = 0;\n', '    }\n', '    \n', '    \n', '    // Drop some wonderful cutest Lemon Tokens to sender every time contract is called without function\n', '    function() payable {\n', '        require (participants[msg.sender] < dropNumber && lemonsRemainingToDrop > basicReward);\n', '        uint256 tokensIssued = basicReward;\n', '        // Send extra Lemon Tokens bonus if participant is donating Ether\n', '        if (msg.value > donatorReward[0][0])\n', '            tokensIssued += donatorBonus(msg.value);\n', '        // Send extra Lemon Tokens bonus if participant holds at least holderAmount\n', '        if (lemonContract.balanceOf(msg.sender) >= holderAmount)\n', '            tokensIssued += holderReward;\n', '        // Check if number of Lemon Tokens to issue is higher than coins remaining for airdrop (last transaction of airdrop)\n', '        if (tokensIssued > lemonsRemainingToDrop)\n', '            tokensIssued = lemonsRemainingToDrop;\n', '        \n', '        // Give away these so cute Lemon Tokens to contributor\n', '        lemonContract.transfer(msg.sender, tokensIssued);\n', '        participants[msg.sender] = dropNumber;\n', '        lemonsRemainingToDrop -= tokensIssued;\n', '        lemonsDroppedToTheWorld += tokensIssued;\n', '        totalDropTransactions += 1;\n', '    }\n', '    \n', '    \n', '    function participant(address part) public constant returns (uint8 participationCount) {\n', '        return participants[part];\n', '    }\n', '    \n', '    \n', '    // Increase the airdrop count to allow sweet humans asking for more beautiful lemon Tokens\n', '    function setDropNumber(uint8 dropN) public onlyOwner {\n', '        dropNumber = dropN;\n', '        lemonsRemainingToDrop = lemonContract.balanceOf(this);\n', '    }\n', '    \n', '    \n', '    // Define amount of Lemon Tokens to hold in order to get holder reward\n', '    function setHolderAmount(uint256 amount) public onlyOwner {\n', '        holderAmount = amount;\n', '    }\n', '    \n', '    \n', '    // Define how many wonderful Lemon Tokens will be issued for participating the selfdrop : basic and holder reward\n', '    function setRewards(uint256 basic, uint256 holder) public onlyOwner {\n', '        basicReward = basic;\n', '        holderReward = holder;\n', '    }\n', '    \n', '    // Define how many wonderful Lemon Tokens will be issued for donators participating the selfdrop\n', '    function setDonatorReward(uint8 index, uint256[] values, uint8 levels) public onlyOwner {\n', '        donatorReward[index] = values;\n', '        donatorRewardLevels = levels;\n', '    }\n', '    \n', '    // Sends all ETH contributions to lovely Lemon owner\n', '    function withdrawAll() public onlyOwner {\n', '        owner.transfer(this.balance);\n', '    }\n', '    \n', '    \n', '    // Sends all remaining Lemon Tokens to owner, just in case of emergency\n', '    function withdrawLemontokens() public onlyOwner {\n', '        lemonContract.transfer(owner, lemonContract.balanceOf(this));\n', '        lemonsRemainingToDrop = 0;\n', '    }\n', '    \n', '    \n', '    // Sends all other tokens that would have been sent to owner (why people do that? We don&#39;t meow)\n', '    function withdrawToken(address token) public onlyOwner {\n', '        Token(token).transfer(owner, Token(token).balanceOf(this));\n', '    }\n', '    \n', '    \n', '    // Update number of Lemon Tokens remaining for drop, just in case it is needed\n', '    function updateLemontokensRemainingToDrop() public {\n', '        lemonsRemainingToDrop = lemonContract.balanceOf(this);\n', '    }\n', '    \n', '    \n', '    // Defines donator bonus to receive\n', '    function donatorBonus(uint256 amount) public returns (uint256) {\n', '        for(uint8 i = 1; i < donatorRewardLevels; i++) {\n', '            if(amount < donatorReward[i][0])\n', '                return (donatorReward[i-1][1]);\n', '        }\n', '        return (donatorReward[i-1][1]);\n', '    }\n', '    \n', '}']
['pragma solidity ^0.4.21;\n', '\n', '/* Functions from Lemon Token main contract to be used by sale contract */\n', 'contract LemonToken {\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '}\n', '\n', 'contract Token {\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  \n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract LemonSelfDrop2 is Ownable {\n', '    LemonToken public lemonContract;\n', '    uint8 public dropNumber;\n', '    uint256 public lemonsDroppedToTheWorld;\n', '    uint256 public lemonsRemainingToDrop;\n', '    uint256 public holderAmount;\n', '    uint256 public basicReward;\n', '    uint256 public holderReward;\n', '    mapping (uint8 => uint256[]) donatorReward;\n', '    uint8 donatorRewardLevels;\n', '    uint8 public totalDropTransactions;\n', '    mapping (address => uint8) participants;\n', '    \n', '    \n', '    // Initialize the cutest contract in the world\n', '    function LemonSelfDrop2 () {\n', '        address c = 0x2089899d03607b2192afb2567874a3f287f2f1e4; // set Lemon Token contract address\n', '        lemonContract = LemonToken(c); \n', '        dropNumber = 1;\n', '        lemonsDroppedToTheWorld = 0;\n', '        lemonsRemainingToDrop = 0;\n', '        basicReward = 1000; // set initial basic reward to 500 Lemon Tokens\n', '        holderReward = 500000; // set initial holder reward to 500 Lemon Tokens\n', '        holderAmount = 10000000; // set initial hold amount to 50000 Lemon Tokens for extra reward\n', '        donatorReward[0]=[1,2000]; // set initial donator reward to 100 Lemon Tokens from 1 wei\n', '        donatorReward[1]=[1000000000000000,11111]; // set initial donator reward to 1000 Lemon Tokens from 0.001 ETH\n', '        donatorReward[2]=[10000000000000000,111111]; // set initial donator reward to 5000 Lemon Tokens from 0.01 ETH\n', '        donatorRewardLevels = 3;\n', '        totalDropTransactions = 0;\n', '    }\n', '    \n', '    \n', '    // Drop some wonderful cutest Lemon Tokens to sender every time contract is called without function\n', '    function() payable {\n', '        require (participants[msg.sender] < dropNumber && lemonsRemainingToDrop > basicReward);\n', '        uint256 tokensIssued = basicReward;\n', '        // Send extra Lemon Tokens bonus if participant is donating Ether\n', '        if (msg.value > donatorReward[0][0])\n', '            tokensIssued += donatorBonus(msg.value);\n', '        // Send extra Lemon Tokens bonus if participant holds at least holderAmount\n', '        if (lemonContract.balanceOf(msg.sender) >= holderAmount)\n', '            tokensIssued += holderReward;\n', '        // Check if number of Lemon Tokens to issue is higher than coins remaining for airdrop (last transaction of airdrop)\n', '        if (tokensIssued > lemonsRemainingToDrop)\n', '            tokensIssued = lemonsRemainingToDrop;\n', '        \n', '        // Give away these so cute Lemon Tokens to contributor\n', '        lemonContract.transfer(msg.sender, tokensIssued);\n', '        participants[msg.sender] = dropNumber;\n', '        lemonsRemainingToDrop -= tokensIssued;\n', '        lemonsDroppedToTheWorld += tokensIssued;\n', '        totalDropTransactions += 1;\n', '    }\n', '    \n', '    \n', '    function participant(address part) public constant returns (uint8 participationCount) {\n', '        return participants[part];\n', '    }\n', '    \n', '    \n', '    // Increase the airdrop count to allow sweet humans asking for more beautiful lemon Tokens\n', '    function setDropNumber(uint8 dropN) public onlyOwner {\n', '        dropNumber = dropN;\n', '        lemonsRemainingToDrop = lemonContract.balanceOf(this);\n', '    }\n', '    \n', '    \n', '    // Define amount of Lemon Tokens to hold in order to get holder reward\n', '    function setHolderAmount(uint256 amount) public onlyOwner {\n', '        holderAmount = amount;\n', '    }\n', '    \n', '    \n', '    // Define how many wonderful Lemon Tokens will be issued for participating the selfdrop : basic and holder reward\n', '    function setRewards(uint256 basic, uint256 holder) public onlyOwner {\n', '        basicReward = basic;\n', '        holderReward = holder;\n', '    }\n', '    \n', '    // Define how many wonderful Lemon Tokens will be issued for donators participating the selfdrop\n', '    function setDonatorReward(uint8 index, uint256[] values, uint8 levels) public onlyOwner {\n', '        donatorReward[index] = values;\n', '        donatorRewardLevels = levels;\n', '    }\n', '    \n', '    // Sends all ETH contributions to lovely Lemon owner\n', '    function withdrawAll() public onlyOwner {\n', '        owner.transfer(this.balance);\n', '    }\n', '    \n', '    \n', '    // Sends all remaining Lemon Tokens to owner, just in case of emergency\n', '    function withdrawLemontokens() public onlyOwner {\n', '        lemonContract.transfer(owner, lemonContract.balanceOf(this));\n', '        lemonsRemainingToDrop = 0;\n', '    }\n', '    \n', '    \n', "    // Sends all other tokens that would have been sent to owner (why people do that? We don't meow)\n", '    function withdrawToken(address token) public onlyOwner {\n', '        Token(token).transfer(owner, Token(token).balanceOf(this));\n', '    }\n', '    \n', '    \n', '    // Update number of Lemon Tokens remaining for drop, just in case it is needed\n', '    function updateLemontokensRemainingToDrop() public {\n', '        lemonsRemainingToDrop = lemonContract.balanceOf(this);\n', '    }\n', '    \n', '    \n', '    // Defines donator bonus to receive\n', '    function donatorBonus(uint256 amount) public returns (uint256) {\n', '        for(uint8 i = 1; i < donatorRewardLevels; i++) {\n', '            if(amount < donatorReward[i][0])\n', '                return (donatorReward[i-1][1]);\n', '        }\n', '        return (donatorReward[i-1][1]);\n', '    }\n', '    \n', '}']
