['pragma solidity ^0.4.24;\n', '\n', 'contract Ownable {\n', '    \n', '    address public owner;\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    constructor () public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract Pausable is Ownable {\n', '  \n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '  */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '  */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '  */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '  */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', ' \n', ' \n', 'library SafeMath {\n', '    \n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a); \n', '    return c;\n', '  }\n', '}\n', '\n', ' \n', 'contract TokenERC20 {\n', '    function balanceOf(address who) public constant returns (uint);\n', '    function allowance(address owner, address spender) public constant returns (uint);\n', '    \n', '    function transfer(address to, uint value) public  returns (bool ok);\n', '    function transferFrom(address from, address to, uint value) public  returns (bool ok);\n', '    \n', '    function approve(address spender, uint value) public returns (bool ok);\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '} \n', '\n', 'contract TokenERC20Standart is TokenERC20, Pausable{\n', '    \n', '        using SafeMath for uint256;\n', '            \n', '            \n', '        // create array with all blances    \n', '        mapping(address => uint) public balances;\n', '        mapping(address => mapping(address => uint)) public allowed;\n', '        \n', '        /**\n', '        * @dev Fix for the ERC20 short address attack.\n', '        */\n', '        modifier onlyPayloadSize(uint size) {\n', '            require(msg.data.length >= size + 4) ;\n', '            _;\n', '        }\n', '            \n', '       \n', '        function balanceOf(address tokenOwner) public constant whenNotPaused  returns (uint balance) {\n', '             return balances[tokenOwner];\n', '        }\n', ' \n', '        function transfer(address to, uint256 tokens) public  whenNotPaused onlyPayloadSize(2*32) returns (bool success) {\n', '            _transfer(msg.sender, to, tokens);\n', '            return true;\n', '        }\n', ' \n', '\n', '        function approve(address spender, uint tokens) public whenNotPaused returns (bool success) {\n', '            allowed[msg.sender][spender] = tokens;\n', '            emit Approval(msg.sender, spender, tokens);\n', '            return true;\n', '        }\n', ' \n', '        function transferFrom(address from, address to, uint tokens) public whenNotPaused onlyPayloadSize(3*32) returns (bool success) {\n', '            assert(tokens > 0);\n', '            require (to != 0x0);    \n', '            require(balances[from] >= tokens);\n', '            require(balances[to] + tokens >= balances[to]); // overflow\n', '            require(allowed[from][msg.sender] >= tokens);\n', '            balances[from] = balances[from].sub(tokens);\n', '            allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '            balances[to] = balances[to].add(tokens);\n', '            emit Transfer(from, to, tokens);\n', '            return true;\n', '        }\n', '\n', '        function allowance(address tokenOwner, address spender) public  whenNotPaused constant returns (uint remaining) {\n', '            return allowed[tokenOwner][spender];\n', '        }\n', '\n', '        function _transfer(address _from, address _to, uint _value) internal {\n', '            assert(_value > 0);\n', '            require (_to != 0x0);                              \n', '            require (balances[_from] >= _value);               \n', '            require (balances[_to] + _value >= balances[_to]);\n', '            balances[_from] = balances[_from].sub(_value);                        \n', '            balances[_to] = balances[_to].add(_value);                           \n', '            emit Transfer(_from, _to, _value);\n', '        }\n', '\n', ' \n', '\n', '}\n', '\n', '\n', 'contract BeringiaContract is TokenERC20Standart{\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    string public name;                         // token name\n', '    uint256 public decimals;                    // Amount of decimals for display purposes \n', '    string public symbol;                       // symbol token\n', '    string public version;                      // contract version \n', '\n', '    uint256 public _totalSupply = 0;                    // number bought tokens\n', '    uint256 public constant RATE = 2900;                // count tokens per 1ETH\n', '    uint256 public fundingEndTime  = 1538179200000;     // final date ico\n', '    uint256 public minContribution = 350000000000000;   // min price onr token\n', '    uint256 public oneTokenInWei = 1000000000000000000;\n', '    uint256 public tokenCreationCap;                    // count created tokens\n', '\n', '    //discount period dates\n', '    uint256 private firstPeriodEND = 1532217600000;\n', '    uint256 private secondPeriodEND = 1534896000000;\n', '    uint256 private thirdPeriodEND = 1537574400000;\n', '   \n', '    //discount percentages \n', '    uint256 private firstPeriodDis = 25;\n', '    uint256 private secondPeriodDis = 20;\n', '    uint256 private thirdPeriodDis = 15;  \n', '    \n', '    uint256 private foundersTokens;                     // tokens for founders\n', '    uint256 private depositorsTokens;                   // tokens for depositors\n', '    \n', '    constructor () public {\n', '        name = "Beringia";                                          // Set the name for display purposes\n', '        decimals = 0;                                               // Amount of decimals for display purposes\n', '        symbol = "BER";                                             // Set the symbol for display purposes\n', '        owner = 0xdc889afED1ab326966c51E58abBEdC98b4d0DF64;         // Set contract owner\n', '        version = "1.0";                                            // Set contract version \n', '        tokenCreationCap = 510000000 * 10 ** uint256(decimals);\n', '        balances[owner] = tokenCreationCap;                         // Give the creator all initial tokens\n', '        emit Transfer(address(0x0), owner, tokenCreationCap);\n', '        foundersTokens = tokenCreationCap / 10;                     // 10% will be sent to the founders\n', '        depositorsTokens = tokenCreationCap.sub(foundersTokens);    // left 90% will be for depositors\n', '    }\n', '    \n', '    function transfer(address _to, uint _value) public  returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFounderTokens(address _to, uint _value) public onlyOwner whenNotPaused returns (bool){\n', '        require(foundersTokens > 0);\n', '        require(foundersTokens.sub(_value) >= 0);\n', '        foundersTokens = foundersTokens.sub(_value);\n', '        _totalSupply = _totalSupply.add(_value);\n', '        return super.transfer(_to, _value);\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '    \n', '    function () public payable {\n', '        createTokens(msg.sender, msg.value);\n', '    }\n', '    \n', '    function createTokens(address _sender, uint256 _value) public whenNotPaused { \n', '        require(_value > 0);\n', '        require(depositorsTokens > 0);\n', '        require(now <= fundingEndTime);\n', '        require(_value >= minContribution);\n', '        uint256 tokens = (_value * RATE) / oneTokenInWei;\n', '        require(tokens > 0);\n', '        if (now <= firstPeriodEND){\n', '            tokens =  ((tokens * 100) * (firstPeriodDis + 100))/10000;\n', '        }else if (now > firstPeriodEND && now <= secondPeriodEND){\n', '            tokens =  ((tokens * 100) *(secondPeriodDis + 100))/10000;\n', '        }else if (now > secondPeriodEND && now <= thirdPeriodEND){\n', '            tokens = ((tokens * 100) * (thirdPeriodDis + 100))/10000;\n', '        }\n', '        require(depositorsTokens.sub(tokens) >= 0);\n', '        depositorsTokens = depositorsTokens.sub(tokens);\n', '        _totalSupply = _totalSupply.add(tokens);\n', '        require(sell(_sender, tokens)); \n', '        owner.transfer(_value);\n', '    }\n', '    \n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply.sub(balances[address(0)]);\n', '    }\n', '    \n', '    function getBalance(address _sender) public view returns (uint256) {\n', '        return _sender.balance;\n', '    }\n', '    \n', '    /**\n', '     * @param _value must be in wei (1ETH = 1e18 wei) \n', '     */\n', '    function isLeftTokens(uint256 _value) public view returns (bool) { \n', '        require(_value > 0);\n', '        uint256 tokens = (_value * RATE) / oneTokenInWei;\n', '        require(tokens > 0);\n', '        if (now <= firstPeriodEND){\n', '            tokens =  ((tokens * 100) * (firstPeriodDis + 100))/10000;\n', '        }else if (now > firstPeriodEND && now <= secondPeriodEND){\n', '            tokens =  ((tokens * 100) *(secondPeriodDis + 100))/10000;\n', '        }else if (now > secondPeriodEND && now <= thirdPeriodEND){\n', '            tokens = ((tokens * 100) * (thirdPeriodDis + 100))/10000;\n', '        }\n', '        return depositorsTokens.sub(tokens) >= 0;\n', '    }\n', '\n', '    function sell(address _recipient, uint256 _value) internal whenNotPaused returns (bool success) {\n', '        _transfer (owner, _recipient, _value);\n', '        return true;\n', '    }\n', '    \n', '    function getFoundersTokens() public constant returns (uint256) {\n', '        return foundersTokens;\n', '    } \n', '    \n', '    function getDepositorsTokens() public constant returns (uint256) {\n', '        return depositorsTokens;\n', '    }\n', '    \n', '    function increaseTotalSupply(uint256 _value) public whenNotPaused onlyOwner returns (bool success) {\n', '        require(_value > 0);\n', '        require(_totalSupply.add(_value) <= tokenCreationCap);\n', '        _totalSupply = _totalSupply.add(_value);\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract Ownable {\n', '    \n', '    address public owner;\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    constructor () public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract Pausable is Ownable {\n', '  \n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '  */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '  */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '  */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '  */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', ' \n', ' \n', 'library SafeMath {\n', '    \n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a); \n', '    return c;\n', '  }\n', '}\n', '\n', ' \n', 'contract TokenERC20 {\n', '    function balanceOf(address who) public constant returns (uint);\n', '    function allowance(address owner, address spender) public constant returns (uint);\n', '    \n', '    function transfer(address to, uint value) public  returns (bool ok);\n', '    function transferFrom(address from, address to, uint value) public  returns (bool ok);\n', '    \n', '    function approve(address spender, uint value) public returns (bool ok);\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '} \n', '\n', 'contract TokenERC20Standart is TokenERC20, Pausable{\n', '    \n', '        using SafeMath for uint256;\n', '            \n', '            \n', '        // create array with all blances    \n', '        mapping(address => uint) public balances;\n', '        mapping(address => mapping(address => uint)) public allowed;\n', '        \n', '        /**\n', '        * @dev Fix for the ERC20 short address attack.\n', '        */\n', '        modifier onlyPayloadSize(uint size) {\n', '            require(msg.data.length >= size + 4) ;\n', '            _;\n', '        }\n', '            \n', '       \n', '        function balanceOf(address tokenOwner) public constant whenNotPaused  returns (uint balance) {\n', '             return balances[tokenOwner];\n', '        }\n', ' \n', '        function transfer(address to, uint256 tokens) public  whenNotPaused onlyPayloadSize(2*32) returns (bool success) {\n', '            _transfer(msg.sender, to, tokens);\n', '            return true;\n', '        }\n', ' \n', '\n', '        function approve(address spender, uint tokens) public whenNotPaused returns (bool success) {\n', '            allowed[msg.sender][spender] = tokens;\n', '            emit Approval(msg.sender, spender, tokens);\n', '            return true;\n', '        }\n', ' \n', '        function transferFrom(address from, address to, uint tokens) public whenNotPaused onlyPayloadSize(3*32) returns (bool success) {\n', '            assert(tokens > 0);\n', '            require (to != 0x0);    \n', '            require(balances[from] >= tokens);\n', '            require(balances[to] + tokens >= balances[to]); // overflow\n', '            require(allowed[from][msg.sender] >= tokens);\n', '            balances[from] = balances[from].sub(tokens);\n', '            allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '            balances[to] = balances[to].add(tokens);\n', '            emit Transfer(from, to, tokens);\n', '            return true;\n', '        }\n', '\n', '        function allowance(address tokenOwner, address spender) public  whenNotPaused constant returns (uint remaining) {\n', '            return allowed[tokenOwner][spender];\n', '        }\n', '\n', '        function _transfer(address _from, address _to, uint _value) internal {\n', '            assert(_value > 0);\n', '            require (_to != 0x0);                              \n', '            require (balances[_from] >= _value);               \n', '            require (balances[_to] + _value >= balances[_to]);\n', '            balances[_from] = balances[_from].sub(_value);                        \n', '            balances[_to] = balances[_to].add(_value);                           \n', '            emit Transfer(_from, _to, _value);\n', '        }\n', '\n', ' \n', '\n', '}\n', '\n', '\n', 'contract BeringiaContract is TokenERC20Standart{\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    string public name;                         // token name\n', '    uint256 public decimals;                    // Amount of decimals for display purposes \n', '    string public symbol;                       // symbol token\n', '    string public version;                      // contract version \n', '\n', '    uint256 public _totalSupply = 0;                    // number bought tokens\n', '    uint256 public constant RATE = 2900;                // count tokens per 1ETH\n', '    uint256 public fundingEndTime  = 1538179200000;     // final date ico\n', '    uint256 public minContribution = 350000000000000;   // min price onr token\n', '    uint256 public oneTokenInWei = 1000000000000000000;\n', '    uint256 public tokenCreationCap;                    // count created tokens\n', '\n', '    //discount period dates\n', '    uint256 private firstPeriodEND = 1532217600000;\n', '    uint256 private secondPeriodEND = 1534896000000;\n', '    uint256 private thirdPeriodEND = 1537574400000;\n', '   \n', '    //discount percentages \n', '    uint256 private firstPeriodDis = 25;\n', '    uint256 private secondPeriodDis = 20;\n', '    uint256 private thirdPeriodDis = 15;  \n', '    \n', '    uint256 private foundersTokens;                     // tokens for founders\n', '    uint256 private depositorsTokens;                   // tokens for depositors\n', '    \n', '    constructor () public {\n', '        name = "Beringia";                                          // Set the name for display purposes\n', '        decimals = 0;                                               // Amount of decimals for display purposes\n', '        symbol = "BER";                                             // Set the symbol for display purposes\n', '        owner = 0xdc889afED1ab326966c51E58abBEdC98b4d0DF64;         // Set contract owner\n', '        version = "1.0";                                            // Set contract version \n', '        tokenCreationCap = 510000000 * 10 ** uint256(decimals);\n', '        balances[owner] = tokenCreationCap;                         // Give the creator all initial tokens\n', '        emit Transfer(address(0x0), owner, tokenCreationCap);\n', '        foundersTokens = tokenCreationCap / 10;                     // 10% will be sent to the founders\n', '        depositorsTokens = tokenCreationCap.sub(foundersTokens);    // left 90% will be for depositors\n', '    }\n', '    \n', '    function transfer(address _to, uint _value) public  returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFounderTokens(address _to, uint _value) public onlyOwner whenNotPaused returns (bool){\n', '        require(foundersTokens > 0);\n', '        require(foundersTokens.sub(_value) >= 0);\n', '        foundersTokens = foundersTokens.sub(_value);\n', '        _totalSupply = _totalSupply.add(_value);\n', '        return super.transfer(_to, _value);\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '    \n', '    function () public payable {\n', '        createTokens(msg.sender, msg.value);\n', '    }\n', '    \n', '    function createTokens(address _sender, uint256 _value) public whenNotPaused { \n', '        require(_value > 0);\n', '        require(depositorsTokens > 0);\n', '        require(now <= fundingEndTime);\n', '        require(_value >= minContribution);\n', '        uint256 tokens = (_value * RATE) / oneTokenInWei;\n', '        require(tokens > 0);\n', '        if (now <= firstPeriodEND){\n', '            tokens =  ((tokens * 100) * (firstPeriodDis + 100))/10000;\n', '        }else if (now > firstPeriodEND && now <= secondPeriodEND){\n', '            tokens =  ((tokens * 100) *(secondPeriodDis + 100))/10000;\n', '        }else if (now > secondPeriodEND && now <= thirdPeriodEND){\n', '            tokens = ((tokens * 100) * (thirdPeriodDis + 100))/10000;\n', '        }\n', '        require(depositorsTokens.sub(tokens) >= 0);\n', '        depositorsTokens = depositorsTokens.sub(tokens);\n', '        _totalSupply = _totalSupply.add(tokens);\n', '        require(sell(_sender, tokens)); \n', '        owner.transfer(_value);\n', '    }\n', '    \n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply.sub(balances[address(0)]);\n', '    }\n', '    \n', '    function getBalance(address _sender) public view returns (uint256) {\n', '        return _sender.balance;\n', '    }\n', '    \n', '    /**\n', '     * @param _value must be in wei (1ETH = 1e18 wei) \n', '     */\n', '    function isLeftTokens(uint256 _value) public view returns (bool) { \n', '        require(_value > 0);\n', '        uint256 tokens = (_value * RATE) / oneTokenInWei;\n', '        require(tokens > 0);\n', '        if (now <= firstPeriodEND){\n', '            tokens =  ((tokens * 100) * (firstPeriodDis + 100))/10000;\n', '        }else if (now > firstPeriodEND && now <= secondPeriodEND){\n', '            tokens =  ((tokens * 100) *(secondPeriodDis + 100))/10000;\n', '        }else if (now > secondPeriodEND && now <= thirdPeriodEND){\n', '            tokens = ((tokens * 100) * (thirdPeriodDis + 100))/10000;\n', '        }\n', '        return depositorsTokens.sub(tokens) >= 0;\n', '    }\n', '\n', '    function sell(address _recipient, uint256 _value) internal whenNotPaused returns (bool success) {\n', '        _transfer (owner, _recipient, _value);\n', '        return true;\n', '    }\n', '    \n', '    function getFoundersTokens() public constant returns (uint256) {\n', '        return foundersTokens;\n', '    } \n', '    \n', '    function getDepositorsTokens() public constant returns (uint256) {\n', '        return depositorsTokens;\n', '    }\n', '    \n', '    function increaseTotalSupply(uint256 _value) public whenNotPaused onlyOwner returns (bool success) {\n', '        require(_value > 0);\n', '        require(_totalSupply.add(_value) <= tokenCreationCap);\n', '        _totalSupply = _totalSupply.add(_value);\n', '        return true;\n', '    }\n', '}']
