['pragma solidity ^0.4.24;\n', '\n', 'interface token {\n', '    function transfer(address receiver, uint amount) external;\n', '}\n', '\n', '\n', 'contract Ownable {\n', '\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '}\n', '\n', 'contract AirdropNEOC is Ownable {\n', '    \n', '    address public beneficiary;\n', '    uint256 public amountTokensPerEth = 10000000;\n', '    uint256 public amountEthRaised = 0;\n', '    uint256 public availableTokens;\n', '    token public tokenReward;\n', '    mapping(address => uint256) public balanceOf;\n', '    \n', '    \n', '    /**\n', '     * Constructor function\n', '     *\n', '     * Set beneficiary and set the token smart contract address\n', '     */\n', '    constructor() public {\n', '        \n', '        beneficiary = msg.sender;\n', '        tokenReward = token(0x91A6f588E5B99077da9c78667ab691564A8fA4DD);\n', '    }\n', '\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function () payable public {\n', '        \n', '        uint256 amount = msg.value;\n', '        uint256 tokens = amount * amountTokensPerEth;\n', '        require(availableTokens >= amount);\n', '        \n', '        balanceOf[msg.sender] += amount;\n', '        availableTokens -= tokens;\n', '        amountEthRaised += amount;\n', '        tokenReward.transfer(msg.sender, tokens);\n', '        beneficiary.transfer(amount);\n', '    }\n', '\n', '    /**\n', '     * Withdraw an "amount" of available tokens in the contract\n', '     * \n', '     */\n', '    function withdrawAvailableToken(address _address, uint amount) public onlyOwner {\n', '        require(availableTokens >= amount);\n', '        availableTokens -= amount;\n', '        tokenReward.transfer(_address, amount);\n', '    }\n', '    \n', '    /**\n', '     * Set the amount of tokens per one ether\n', '     * \n', '     */\n', '    function setTokensPerEth(uint value) public onlyOwner {\n', '        \n', '        amountTokensPerEth = value;\n', '    }\n', '    \n', '   /**\n', '     * Set a token contract address and available tokens and the available tokens\n', '     * \n', '     */\n', '    function setTokenReward(address _address, uint amount) public onlyOwner {\n', '        \n', '        tokenReward = token(_address);\n', '        availableTokens = amount;\n', '    }\n', '    \n', '   /**\n', '     * Set available tokens to synchronized values or force to stop contribution campaign\n', '     * \n', '     */\n', '    function setAvailableToken(uint value) public onlyOwner {\n', '        \n', '        availableTokens = value;\n', '    }\n', '    \n', '    \n', '    \n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'interface token {\n', '    function transfer(address receiver, uint amount) external;\n', '}\n', '\n', '\n', 'contract Ownable {\n', '\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '}\n', '\n', 'contract AirdropNEOC is Ownable {\n', '    \n', '    address public beneficiary;\n', '    uint256 public amountTokensPerEth = 10000000;\n', '    uint256 public amountEthRaised = 0;\n', '    uint256 public availableTokens;\n', '    token public tokenReward;\n', '    mapping(address => uint256) public balanceOf;\n', '    \n', '    \n', '    /**\n', '     * Constructor function\n', '     *\n', '     * Set beneficiary and set the token smart contract address\n', '     */\n', '    constructor() public {\n', '        \n', '        beneficiary = msg.sender;\n', '        tokenReward = token(0x91A6f588E5B99077da9c78667ab691564A8fA4DD);\n', '    }\n', '\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function () payable public {\n', '        \n', '        uint256 amount = msg.value;\n', '        uint256 tokens = amount * amountTokensPerEth;\n', '        require(availableTokens >= amount);\n', '        \n', '        balanceOf[msg.sender] += amount;\n', '        availableTokens -= tokens;\n', '        amountEthRaised += amount;\n', '        tokenReward.transfer(msg.sender, tokens);\n', '        beneficiary.transfer(amount);\n', '    }\n', '\n', '    /**\n', '     * Withdraw an "amount" of available tokens in the contract\n', '     * \n', '     */\n', '    function withdrawAvailableToken(address _address, uint amount) public onlyOwner {\n', '        require(availableTokens >= amount);\n', '        availableTokens -= amount;\n', '        tokenReward.transfer(_address, amount);\n', '    }\n', '    \n', '    /**\n', '     * Set the amount of tokens per one ether\n', '     * \n', '     */\n', '    function setTokensPerEth(uint value) public onlyOwner {\n', '        \n', '        amountTokensPerEth = value;\n', '    }\n', '    \n', '   /**\n', '     * Set a token contract address and available tokens and the available tokens\n', '     * \n', '     */\n', '    function setTokenReward(address _address, uint amount) public onlyOwner {\n', '        \n', '        tokenReward = token(_address);\n', '        availableTokens = amount;\n', '    }\n', '    \n', '   /**\n', '     * Set available tokens to synchronized values or force to stop contribution campaign\n', '     * \n', '     */\n', '    function setAvailableToken(uint value) public onlyOwner {\n', '        \n', '        availableTokens = value;\n', '    }\n', '    \n', '    \n', '    \n', '}']
