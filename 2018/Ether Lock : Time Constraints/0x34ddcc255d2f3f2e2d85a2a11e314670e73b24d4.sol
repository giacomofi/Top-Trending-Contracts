['pragma solidity ^0.4.25;\n', '\n', 'contract ERC20Interface \n', '{\n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '    mapping(address => mapping(address => uint)) allowed;\n', '}\n', '\n', 'contract lottrygame{\n', '    //base setting\n', '    uint256 public people;\n', '    uint numbers;\n', '    uint256 public tickamount = 100;\n', '    uint256 public winnergetETH1 = 0.05 ether;\n', '    uint256 public winnergetETH2 = 0.03 ether;\n', '    uint256 public winnergetETH3 = 0.02 ether;\n', '    uint public gamecount = 0;\n', '    uint public inputsbt = 100;\n', '    uint  black=1;\n', '    uint  red=2;\n', '    uint  yellow=3;\n', '    \n', '    address[] public tickplayers;\n', '    address public owner;\n', '    address tokenAddress = 0x503F9794d6A6bB0Df8FBb19a2b3e2Aeab35339Ad;//ttt\n', '    address poolwallet;\n', '    \n', '    bool public tickgamelock = true;\n', '    bool public full = true;\n', '    event tickwinner(uint,address,address,address,uint,uint,uint);\n', '    event ticksell(uint gettick,uint paytick);   \n', '    \n', '    modifier ownerOnly() {\n', '    require(msg.sender == owner);\n', '    _;\n', '}\n', '    constructor() public {\n', '        owner = msg.sender;\n', '}\n', '    //function can get ETH\n', 'function () external payable ownerOnly{\n', '    tickgamelock=false;\n', '    owner = msg.sender;\n', '    poolwallet = msg.sender;\n', '}\n', '    //change winner can get ETH\n', 'function changewinnerget(uint ethamount) public ownerOnly{\n', '    require(ethamount!=0);\n', '    require(msg.sender==owner);\n', '    if(ethamount==1){\n', '    winnergetETH1 = 0.05 ether;\n', '    winnergetETH2 = 0.03 ether;\n', '    winnergetETH3 = 0.02 ether;\n', '    inputsbt = 100;\n', '    }\n', '    else if(ethamount==10){\n', '    winnergetETH1 = 0.12 ether;\n', '    winnergetETH2 = 0.08 ether;\n', '    winnergetETH3 = 0.05 ether;\n', '    inputsbt = 250;\n', '    }\n', '    else if(ethamount==100){\n', '    winnergetETH1 = 1 ether;\n', '    winnergetETH2 = 0.6 ether;\n', '    winnergetETH3 = 0.4 ether;\n', '    inputsbt = 1500;\n', '    }\n', '}\n', '    //change tick amount\n', 'function changetickamount(uint256 _tickamount) public ownerOnly{\n', '    require(msg.sender==poolwallet);\n', '    tickamount = _tickamount;\n', '}\n', '\n', '    //players joingame\n', 'function jointickgame(uint gettick) public {\n', '    require(tickgamelock == false);\n', '    require(gettick<=tickamount&&gettick>0);\n', '    require(gettick<=10&&people<=100);\n', '    if(people<tickamount){\n', '        uint paytick=uint(inputsbt)*1e18*gettick;\n', '        uint i;\n', '        ERC20Interface(tokenAddress).transferFrom(msg.sender,address(this),paytick);\n', '        for (i=0 ;i<gettick;i++){\n', '        tickplayers.push(msg.sender);\n', '        people ++;}\n', '        emit ticksell(gettick,paytick);\n', '    }\n', '    else if (people<=tickamount){\n', '        paytick=uint(inputsbt)*1e18*gettick;\n', '        ERC20Interface(tokenAddress).transferFrom(msg.sender,address(this),paytick);\n', '        for (i=0 ;i<gettick;i++){\n', '        tickplayers.push(msg.sender);\n', '        people ++;}\n', '        emit ticksell(gettick,paytick);\n', '        require(full==false);\n', '        pictickWinner();\n', '    }\n', '}\n', '\n', '//===================random====================\\\\\n', 'function changerandom(uint b,uint y,uint r)public ownerOnly{\n', '    require(msg.sender==owner);\n', '    black=b;\n', '    yellow=y;\n', '    red=r;\n', '}\n', 'function tickrandom()private view returns(uint) {\n', '    return uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp,tickamount+black))); \n', '}\n', 'function tickrandom1()private view returns(uint) {\n', '    return uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp,tickamount+yellow)));\n', '}\n', 'function tickrandom2()private view returns(uint) {\n', '    return uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp,tickamount+red))); \n', '}\n', '//===============================================\\\\\n', '\n', '    //get winner in players\n', 'function pictickWinner()public ownerOnly{\n', '    require(msg.sender==poolwallet);\n', '    require(tickgamelock == false);\n', '    require(people>0);\n', '    uint tickindex = tickrandom() % (tickplayers.length);\n', '    uint tickindex1 = tickrandom1() % (tickplayers.length);\n', '    uint tickindex2 = tickrandom2() % (tickplayers.length);\n', '    address sendwiner = tickplayers[tickindex];\n', '    address sendwiner1 = tickplayers[tickindex1];\n', '    address sendwiner2 = tickplayers[tickindex2];\n', '    address(sendwiner).transfer(winnergetETH1);\n', '    address(sendwiner1).transfer(winnergetETH2);\n', '    address(sendwiner2).transfer(winnergetETH3);\n', '    tickplayers = new address[](0);\n', '    people = 0;\n', '    tickamount = 100;\n', '    gamecount++;\n', '    emit tickwinner(gamecount,sendwiner,sendwiner1,sendwiner2,tickindex,tickindex1,tickindex2);\n', '    \n', '    \n', '}\n', '    //destory game\n', 'function killgame()public ownerOnly {\n', '    require(msg.sender==poolwallet);\n', '    selfdestruct(owner);\n', '}\n', 'function changefull()public ownerOnly{\n', '    require(msg.sender==poolwallet);\n', '    if(full== true){\n', '        full=false;\n', '    }else if(full==false){\n', '        full=true;\n', '    }\n', '}\n', '\n', '    //setgamelock true=lock,false=unlock\n', 'function settickgamelock() public ownerOnly{\n', '    require(msg.sender==poolwallet);\n', '       if(tickgamelock == true){\n', '        tickgamelock = false;\n', '       }\n', '       else if(tickgamelock==false){\n', '           tickgamelock =true;\n', '       }\n', '    }\n', '    //transfer contract inside tokens to owner\n', 'function transferanyERC20token(address _tokenAddress,uint tokens)public ownerOnly{\n', '    require(msg.sender==poolwallet);\n', '    ERC20Interface(_tokenAddress).transfer(owner, tokens);\n', '}\n', '}']