['pragma solidity ^0.4.21;\n', '\n', 'contract Owned {\n', '\n', '  address owner;\n', '  uint last_blocknumber;\n', '\n', '  \n', '  function Owned() public {\n', '    owner = msg.sender;\n', '  }\n', '  \n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function getBalance() public view returns (uint) {\n', '    return address(this).balance;\n', '\n', '  }\n', '\n', '  function close() public onlyOwner {\n', '    selfdestruct(msg.sender);\n', '  }\n', '}\n', '\n', 'contract Gamble is Owned {\n', '  uint constant magic = 5;\n', '  \n', '  function getMaxBet() public view returns (uint) {\n', '    return getBalance()/magic;\n', '  }\n', '  \n', '  function Play() public payable protect protect_mining {\n', '    require(msg.value <= getMaxBet());\n', '    if (now % magic != 0) {\n', '      msg.sender.transfer(msg.value + msg.value/magic);\n', '    }\n', '    last_blocknumber = block.number;\n', '  }\n', '\n', '  modifier protect {\n', '    require(tx.origin == msg.sender);\n', '    _;\n', '  }\n', '\n', '  modifier protect_mining {\n', '    //very simple protection against miners\n', '    require (block.number != last_blocknumber);\n', '    _;\n', '  }\n', '\n', '  function () public payable {\n', '    Play();\n', '  }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'contract Owned {\n', '\n', '  address owner;\n', '  uint last_blocknumber;\n', '\n', '  \n', '  function Owned() public {\n', '    owner = msg.sender;\n', '  }\n', '  \n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function getBalance() public view returns (uint) {\n', '    return address(this).balance;\n', '\n', '  }\n', '\n', '  function close() public onlyOwner {\n', '    selfdestruct(msg.sender);\n', '  }\n', '}\n', '\n', 'contract Gamble is Owned {\n', '  uint constant magic = 5;\n', '  \n', '  function getMaxBet() public view returns (uint) {\n', '    return getBalance()/magic;\n', '  }\n', '  \n', '  function Play() public payable protect protect_mining {\n', '    require(msg.value <= getMaxBet());\n', '    if (now % magic != 0) {\n', '      msg.sender.transfer(msg.value + msg.value/magic);\n', '    }\n', '    last_blocknumber = block.number;\n', '  }\n', '\n', '  modifier protect {\n', '    require(tx.origin == msg.sender);\n', '    _;\n', '  }\n', '\n', '  modifier protect_mining {\n', '    //very simple protection against miners\n', '    require (block.number != last_blocknumber);\n', '    _;\n', '  }\n', '\n', '  function () public payable {\n', '    Play();\n', '  }\n', '}']
