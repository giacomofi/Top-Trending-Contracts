['pragma solidity ^0.4.25;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    return _a / _b;\n', '  }\n', '\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract FivePercent {\n', '\tusing SafeMath for uint256;\n', '\n', '\taddress public constant marketingAddress = 0xbacd82fd2a77128274f68983f82c8372e06a1472;\n', '\n', '\tmapping (address => uint256) deposited;\n', '\tmapping (address => uint256) withdrew;\n', '\tmapping (address => uint256) refearned;\n', '\tmapping (address => uint256) blocklock;\n', '\n', '\tuint256 public totalDepositedWei = 0;\n', '\tuint256 public totalWithdrewWei = 0;\n', '\n', '\tfunction() payable external\n', '\t{\n', '\t\tuint256 marketingPerc = msg.value.mul(5).div(100);\n', '\n', '\t\tmarketingAddress.transfer(marketingPerc);\n', '\t\t\n', '\t\tif (deposited[msg.sender] != 0)\n', '\t\t{\n', '\t\t\taddress investor = msg.sender;\n', '\t\t\tuint256 depositsPercents = deposited[msg.sender].mul(5).div(100).mul(block.number-blocklock[msg.sender]).div(5900);\n', '\t\t\tinvestor.transfer(depositsPercents);\n', '\n', '\t\t\twithdrew[msg.sender] += depositsPercents;\n', '\t\t\ttotalWithdrewWei = totalWithdrewWei.add(depositsPercents);\n', '\t\t}\n', '\n', '\t\taddress referrer = bytesToAddress(msg.data);\n', '\t\tuint256 refPerc = msg.value.mul(5).div(100);\n', '\t\t\n', '\t\tif (referrer > 0x0 && referrer != msg.sender)\n', '\t\t{\n', '\t\t\treferrer.transfer(refPerc);\n', '\n', '\t\t\trefearned[referrer] += refPerc;\n', '\t\t}\n', '\n', '\t\tblocklock[msg.sender] = block.number;\n', '\t\tdeposited[msg.sender] += msg.value;\n', '\n', '\t\ttotalDepositedWei = totalDepositedWei.add(msg.value);\n', '\t}\n', '\n', '\tfunction userDepositedWei(address _address) public view returns (uint256)\n', '\t{\n', '\t\treturn deposited[_address];\n', '    }\n', '\n', '\tfunction userWithdrewWei(address _address) public view returns (uint256)\n', '\t{\n', '\t\treturn withdrew[_address];\n', '    }\n', '\n', '\tfunction userDividendsWei(address _address) public view returns (uint256)\n', '\t{\n', '\t\treturn deposited[_address].mul(5).div(100).mul(block.number-blocklock[_address]).div(5900);\n', '    }\n', '\n', '\tfunction userReferralsWei(address _address) public view returns (uint256)\n', '\t{\n', '\t\treturn refearned[_address];\n', '    }\n', '\n', '\tfunction bytesToAddress(bytes bys) private pure returns (address addr)\n', '\t{\n', '\t\tassembly {\n', '\t\t\taddr := mload(add(bys, 20))\n', '\t\t}\n', '\t}\n', '}']
['pragma solidity ^0.4.25;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    return _a / _b;\n', '  }\n', '\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract FivePercent {\n', '\tusing SafeMath for uint256;\n', '\n', '\taddress public constant marketingAddress = 0xbacd82fd2a77128274f68983f82c8372e06a1472;\n', '\n', '\tmapping (address => uint256) deposited;\n', '\tmapping (address => uint256) withdrew;\n', '\tmapping (address => uint256) refearned;\n', '\tmapping (address => uint256) blocklock;\n', '\n', '\tuint256 public totalDepositedWei = 0;\n', '\tuint256 public totalWithdrewWei = 0;\n', '\n', '\tfunction() payable external\n', '\t{\n', '\t\tuint256 marketingPerc = msg.value.mul(5).div(100);\n', '\n', '\t\tmarketingAddress.transfer(marketingPerc);\n', '\t\t\n', '\t\tif (deposited[msg.sender] != 0)\n', '\t\t{\n', '\t\t\taddress investor = msg.sender;\n', '\t\t\tuint256 depositsPercents = deposited[msg.sender].mul(5).div(100).mul(block.number-blocklock[msg.sender]).div(5900);\n', '\t\t\tinvestor.transfer(depositsPercents);\n', '\n', '\t\t\twithdrew[msg.sender] += depositsPercents;\n', '\t\t\ttotalWithdrewWei = totalWithdrewWei.add(depositsPercents);\n', '\t\t}\n', '\n', '\t\taddress referrer = bytesToAddress(msg.data);\n', '\t\tuint256 refPerc = msg.value.mul(5).div(100);\n', '\t\t\n', '\t\tif (referrer > 0x0 && referrer != msg.sender)\n', '\t\t{\n', '\t\t\treferrer.transfer(refPerc);\n', '\n', '\t\t\trefearned[referrer] += refPerc;\n', '\t\t}\n', '\n', '\t\tblocklock[msg.sender] = block.number;\n', '\t\tdeposited[msg.sender] += msg.value;\n', '\n', '\t\ttotalDepositedWei = totalDepositedWei.add(msg.value);\n', '\t}\n', '\n', '\tfunction userDepositedWei(address _address) public view returns (uint256)\n', '\t{\n', '\t\treturn deposited[_address];\n', '    }\n', '\n', '\tfunction userWithdrewWei(address _address) public view returns (uint256)\n', '\t{\n', '\t\treturn withdrew[_address];\n', '    }\n', '\n', '\tfunction userDividendsWei(address _address) public view returns (uint256)\n', '\t{\n', '\t\treturn deposited[_address].mul(5).div(100).mul(block.number-blocklock[_address]).div(5900);\n', '    }\n', '\n', '\tfunction userReferralsWei(address _address) public view returns (uint256)\n', '\t{\n', '\t\treturn refearned[_address];\n', '    }\n', '\n', '\tfunction bytesToAddress(bytes bys) private pure returns (address addr)\n', '\t{\n', '\t\tassembly {\n', '\t\t\taddr := mload(add(bys, 20))\n', '\t\t}\n', '\t}\n', '}']
