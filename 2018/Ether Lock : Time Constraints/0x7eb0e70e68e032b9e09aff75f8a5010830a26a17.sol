['pragma solidity ^0.4.24;\n', 'contract BeatProfitMembership{\n', '    address owner= 0x6A3CACAbaA5958A0cA73bd3908445d81852F3A7E;\n', '    uint256 [] priceOfPeriod = [10000000000000000, 30000000000000000,300000000000000000,2000000000000000000, 5000000000000000000];\n', '    uint256 [] TimeInSec = [3600, 86400,2592000,31536000];\n', '    \n', '    mapping (address => uint256) public DueTime;\n', '    mapping (address => bool) public Premium;\n', '\n', '    constructor() public {\n', '        DueTime[owner] = 4689878400;\n', '        DueTime[0x491cFe3e5eF0C093971DaDdaBce7747EA69A991E] = 4689878400;\n', '        DueTime[0x2ECc452E01f748183d697be4cb1db0531cc8F38F] = 4689878400;\n', '        DueTime[0x353507473A89184e28E8F13e156Dc8055fD62A2C] = 4689878400;\n', '        \n', '        Premium[0x491cFe3e5eF0C093971DaDdaBce7747EA69A991E] = true;\n', '        Premium[0x2ECc452E01f748183d697be4cb1db0531cc8F38F] = true;\n', '        Premium[0x353507473A89184e28E8F13e156Dc8055fD62A2C] = true;\n', '    }\n', '\n', '    function extendMembership(uint256 _type) public payable{\n', '    // Type:[0]:hour, [1]:day, [2]:month, [3]:year, [4]:premium\n', '    \n', '        require(msg.value >= priceOfPeriod[_type], "Payment Amount Wrong.");\n', '        if(_type==4){\n', '            // Premium Membership\n', '            Premium[msg.sender] = true;\n', '            DueTime[msg.sender] = 4689878400;\n', '        }\n', '        else if(DueTime[msg.sender]>now){\n', '            DueTime[msg.sender] += mul(div(msg.value, priceOfPeriod[_type]), TimeInSec[_type]);\n', '        }\n', '        else{\n', '            DueTime[msg.sender] = now + mul(div(msg.value, priceOfPeriod[_type]), TimeInSec[_type]);\n', '        }\n', '        \n', '        owner.transfer(msg.value);\n', '    }\n', '\n', '    function setPrice(uint256 [] new_prices) public{\n', '        require(msg.sender == owner, "Only Available to BeatProfit Core Team");\n', '        priceOfPeriod[0] = new_prices[0];\n', '        priceOfPeriod[1] = new_prices[1];\n', '        priceOfPeriod[2] = new_prices[2];\n', '        priceOfPeriod[3] = new_prices[3];\n', '        priceOfPeriod[4] = new_prices[4];\n', '    }\n', '\n', '    function setMemberShip(address user, uint256 _timestamp) public {\n', '        require(msg.sender==owner);\n', '        DueTime[user]=_timestamp;\n', '    }\n', '\n', '  //   Safe Math Functions\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {return a / b;}\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {assert(b <= a); return a - b;}\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', 'contract BeatProfitMembership{\n', '    address owner= 0x6A3CACAbaA5958A0cA73bd3908445d81852F3A7E;\n', '    uint256 [] priceOfPeriod = [10000000000000000, 30000000000000000,300000000000000000,2000000000000000000, 5000000000000000000];\n', '    uint256 [] TimeInSec = [3600, 86400,2592000,31536000];\n', '    \n', '    mapping (address => uint256) public DueTime;\n', '    mapping (address => bool) public Premium;\n', '\n', '    constructor() public {\n', '        DueTime[owner] = 4689878400;\n', '        DueTime[0x491cFe3e5eF0C093971DaDdaBce7747EA69A991E] = 4689878400;\n', '        DueTime[0x2ECc452E01f748183d697be4cb1db0531cc8F38F] = 4689878400;\n', '        DueTime[0x353507473A89184e28E8F13e156Dc8055fD62A2C] = 4689878400;\n', '        \n', '        Premium[0x491cFe3e5eF0C093971DaDdaBce7747EA69A991E] = true;\n', '        Premium[0x2ECc452E01f748183d697be4cb1db0531cc8F38F] = true;\n', '        Premium[0x353507473A89184e28E8F13e156Dc8055fD62A2C] = true;\n', '    }\n', '\n', '    function extendMembership(uint256 _type) public payable{\n', '    // Type:[0]:hour, [1]:day, [2]:month, [3]:year, [4]:premium\n', '    \n', '        require(msg.value >= priceOfPeriod[_type], "Payment Amount Wrong.");\n', '        if(_type==4){\n', '            // Premium Membership\n', '            Premium[msg.sender] = true;\n', '            DueTime[msg.sender] = 4689878400;\n', '        }\n', '        else if(DueTime[msg.sender]>now){\n', '            DueTime[msg.sender] += mul(div(msg.value, priceOfPeriod[_type]), TimeInSec[_type]);\n', '        }\n', '        else{\n', '            DueTime[msg.sender] = now + mul(div(msg.value, priceOfPeriod[_type]), TimeInSec[_type]);\n', '        }\n', '        \n', '        owner.transfer(msg.value);\n', '    }\n', '\n', '    function setPrice(uint256 [] new_prices) public{\n', '        require(msg.sender == owner, "Only Available to BeatProfit Core Team");\n', '        priceOfPeriod[0] = new_prices[0];\n', '        priceOfPeriod[1] = new_prices[1];\n', '        priceOfPeriod[2] = new_prices[2];\n', '        priceOfPeriod[3] = new_prices[3];\n', '        priceOfPeriod[4] = new_prices[4];\n', '    }\n', '\n', '    function setMemberShip(address user, uint256 _timestamp) public {\n', '        require(msg.sender==owner);\n', '        DueTime[user]=_timestamp;\n', '    }\n', '\n', '  //   Safe Math Functions\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {return a / b;}\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {assert(b <= a); return a - b;}\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']
