['pragma solidity ^0.4.16;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', ' mapping (address => uint) public pendingWithdrawals;\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '\n', '\n', 'function withdraw() {\n', '        uint amount = pendingWithdrawals[msg.sender];\n', '        pendingWithdrawals[msg.sender] = 0;\n', '        msg.sender.transfer(amount);\n', '    }\n', '\n', '}\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', '\n', 'contract AirDrop is Ownable {\n', '\n', '  Token token;\n', '\n', '  event TransferredToken(address indexed to, uint256 value);\n', '  event FailedTransfer(address indexed to, uint256 value);\n', '\n', '  modifier whenDropIsActive() {\n', '    assert(isActive());\n', '\n', '    _;\n', '  }\n', 'address public creator;\n', '  function AirDrop () {\n', '      address _tokenAddr = creator; //here pass address of your token\n', '      token = Token(_tokenAddr);\n', '  }\n', '\n', '  function isActive() constant returns (bool) {\n', '    return (\n', '        tokensAvailable() > 0 // Tokens must be available to send\n', '    );\n', '  }\n', '  //below function can be used when you want to send every recipeint with different number of tokens\n', '  function sendTokens(address[] dests, uint256[] values) whenDropIsActive onlyOwner external {\n', '    uint256 i = 0;\n', '    while (i < dests.length) {\n', '        uint256 toSend = values[i] ;\n', '        sendInternally(dests[i] , toSend, values[i]);\n', '        i++;\n', '    }\n', '  }\n', '\n', '  // this function can be used when you want to send same number of tokens to all the recipients\n', '  function sendTokensSingleValue(address[] dests, uint256 value) whenDropIsActive onlyOwner external {\n', '    uint256 i = 0;\n', '    uint256 toSend = value;\n', '    while (i < dests.length) {\n', '        sendInternally(dests[i] , toSend, value);\n', '        i++;\n', '    }\n', '  }  \n', '\n', '  function sendInternally(address recipient, uint256 tokensToSend, uint256 valueToPresent) internal {\n', '    if(recipient == address(0)) return;\n', '\n', '    if(tokensAvailable() >= tokensToSend) {\n', '      token.transfer(recipient, tokensToSend);\n', '      TransferredToken(recipient, valueToPresent);\n', '    } else {\n', '      FailedTransfer(recipient, valueToPresent); \n', '    }\n', '  }   \n', '\n', '\n', '  function tokensAvailable() constant returns (uint256) {\n', '    return token.balanceOf(this);\n', '  }\n', '\n', '  function destroy() onlyOwner {\n', '    uint256 balance = tokensAvailable();\n', '    require (balance > 0);\n', '    token.transfer(owner, balance);\n', '    selfdestruct(owner);\n', '  }\n', '}\n', 'contract Claimable is Ownable {\n', '    address public pendingOwner;\n', '\n', '    /**\n', '     * @dev Modifier throws if called by any account other than the pendingOwner.\n', '     */\n', '    modifier onlyPendingOwner() {\n', '        require(msg.sender == pendingOwner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to set the pendingOwner address.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        pendingOwner = newOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the pendingOwner address to finalize the transfer.\n', '     */\n', '    function claimOwnership() onlyPendingOwner public {\n', '        OwnershipTransferred(owner, pendingOwner);\n', '        owner = pendingOwner;\n', '        pendingOwner = address(0);\n', '    }\n', '\n', '\n', '}\n', '\n', '\n', 'contract EtherToFARM is Ownable {\n', ' using SafeMath for uint;\n', ' using SafeMath for uint256;\n', '\n', '\n', 'uint256 public totalSupply;// total no of tokens in supply\n', 'uint remaining;\n', 'uint price;\n', '\n', 'mapping (address => uint) investors; //it maps no of FarmCoin given to each address\n', '\n', ' function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', 'function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', ' function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', 'function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', 'function ()  payable {// called when ether is send\n', '\n', '    uint256 remaining;\n', '    uint256 totalSupply;\n', '    uint price;\n', '    assert(remaining < totalSupply);\n', '    uint FarmCoin = div(msg.value,price); // calculate no of FarmCoin to be issued depending on the price and ether send\n', '    assert(FarmCoin < sub(totalSupply,remaining)); //FarmCoin available should be greater than the one to be issued\n', '    add(investors[msg.sender],FarmCoin);\n', '    remaining = add(remaining, FarmCoin);\n', '    transfer(msg.sender, FarmCoin);\n', '}\n', '\n', 'function setPrice(uint _price)\n', '{ //  price need to be set maually as it cannot be done via ethereum network\n', '    uint price;\n', '    price = _price;\n', '}\n', '\n', 'function giveReward(address _payer,uint _payment) public payable returns (bool _success){\n', '        uint tokenamount = _payment / price;\n', '        return transfer(_payer,tokenamount);\n', '    }    \n', '}\n', '\n', 'contract PayToken is EtherToFARM {\n', ' function() public payable{\n', '         if(msg.sender!=owner)\n', '       giveReward(msg.sender,msg.value);\n', '}\n', '}\n', '\n', 'contract Token is EtherToFARM {\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '}\n', '\n', '\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", "        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n", '        //Replace the if with this one instead.\n', '        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '}\n', '\n', '\n', '\n', "//name this contract whatever you'd like\n", 'contract FarmCoin is StandardToken {\n', '\n', '   \n', '    /* Public variables of the token */\n', '\n', '    /*\n', '    NOTE:\n', '    The following variables are OPTIONAL vanities. One does not have to include them.\n', '    They allow one to customise the token contract & in no way influences the core functionality.\n', '    Some wallets/interfaces might not even bother to look at this information.\n', '    */\n', "    string public name = 'FarmCoin';                   //fancy name: eg Simon Bucks\n", "    uint8 public decimals = 18;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\n", "    string public symbol = 'FARM';                 //An identifier: eg SBX\n", "    string public version = 'H1.0';       //human 0.1 standard. Just an arbitrary versioning scheme.\n", '\n', '//\n', '// CHANGE THESE VALUES FOR YOUR TOKEN\n', '//\n', '\n', "//make sure this function name matches the contract name above. So if you're token is called TutorialToken, make sure the //contract name above is also TutorialToken instead of ERC20Token\n", '\n', '    function FarmCoin(\n', '        ) {\n', '        balances[msg.sender] = 5000000000000000000000000;               // Give the creator all initial tokens (100000 for example)\n', '        totalSupply = 5000000000000000000000000;                        // Update total supply (100000 for example)\n', '        name = "FarmCoin";                                   // Set the name for display purposes\n', '        decimals = 18;                            // Amount of decimals for display purposes\n', '        symbol = "FARM";                               // Set the symbol for display purposes\n', '    }\n', '\n', '    /* Approves and then calls the receiving contract */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', "        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n", '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { revert; }\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract FarmCoinSale is FarmCoin {\n', '\n', '    uint256 public maxMintable;\n', '    uint256 public totalMinted;\n', '    uint256 public decimals = 18;\n', '    uint public endBlock;\n', '    uint public startBlock;\n', '    uint256 public exchangeRate;\n', '    uint public startTime;\n', '    bool public isFunding;\n', '    address public ETHWallet;\n', '    uint256 public heldTotal;\n', '\n', '    bool private configSet;\n', '    address public creator;\n', '\n', '    mapping (address => uint256) public heldTokens;\n', '    mapping (address => uint) public heldTimeline;\n', '\n', '    event Contribution(address from, uint256 amount);\n', '    event ReleaseTokens(address from, uint256 amount);\n', '\n', '// start and end dates where crowdsale is allowed (both inclusive)\n', '  uint256 constant public START = 1517461200000; // +new Date(2018, 2, 1) / 1000\n', '  uint256 constant public END = 1522555200000; // +new Date(2018, 4, 1) / 1000\n', '\n', '// @return the rate in FARM per 1 ETH according to the time of the tx and the FARM pricing program.\n', '    // @Override\n', '  function getRate() constant returns (uint256 rate) {\n', '    if      (now < START)            return rate = 840; // presale, 40% bonus\n', '    else if (now <= START +  6 days) return rate = 810; // day 1 to 6, 35% bonus\n', '    else if (now <= START + 13 days) return rate = 780; // day 7 to 13, 30% bonus\n', '    else if (now <= START + 20 days) return rate = 750; // day 14 to 20, 25% bonus\n', '    else if (now <= START + 28 days) return rate = 720; // day 21 to 28, 20% bonus\n', '    return rate = 600; // no bonus\n', '  }\n', '\n', '\n', '    function FarmCoinSale() {\n', '        startBlock = block.number;\n', '        maxMintable = 5000000000000000000000000; // 3 million max sellable (18 decimals)\n', '        ETHWallet = 0x3b444fC8c2C45DCa5e6610E49dC54423c5Dcd86E;\n', '        isFunding = true;\n', '        \n', '        creator = msg.sender;\n', '        createHeldCoins();\n', '        startTime = 1517461200000;\n', '        exchangeRate= 600;\n', '        }\n', '\n', ' \n', '    // setup function to be ran only 1 time\n', '    // setup token address\n', '    // setup end Block number\n', '    function setup(address TOKEN, uint endBlockTime) {\n', '        require(!configSet);\n', '        endBlock = endBlockTime;\n', '        configSet = true;\n', '    }\n', '\n', '    function closeSale() external {\n', '      require(msg.sender==creator);\n', '      isFunding = false;\n', '    }\n', '\n', '    // CONTRIBUTE FUNCTION\n', '    // converts ETH to TOKEN and sends new TOKEN to the sender\n', '    function contribute() external payable {\n', '        require(msg.value>0);\n', '        require(isFunding);\n', '        require(block.number <= endBlock);\n', '        uint256 amount = msg.value * exchangeRate;\n', '        uint256 total = totalMinted + amount;\n', '        require(total<=maxMintable);\n', '        totalMinted += total;\n', '        ETHWallet.transfer(msg.value);\n', '        Contribution(msg.sender, amount);\n', '    }\n', '\n', '    function deposit() payable {\n', '      create(msg.sender);\n', '    }\n', '    function register(address sender) payable {\n', '    }\n', '    function () payable {\n', '    }\n', '  \n', '    function create(address _beneficiary) payable{\n', '    uint256 amount = msg.value;\n', '    /// \n', '    }\n', '\n', '    function withdraw() {\n', '    require ( msg.sender == owner );\n', '    msg.sender.transfer(this.balance);\n', '}\n', '    // update the ETH/COIN rate\n', '    function updateRate(uint256 rate) external {\n', '        require(msg.sender==creator);\n', '        require(isFunding);\n', '        exchangeRate = rate;\n', '    }\n', '\n', '    // change creator address\n', '    function changeCreator(address _creator) external {\n', '        require(msg.sender==creator);\n', '        creator = _creator;\n', '    }\n', '\n', '    // change transfer status for FarmCoin token\n', '    function changeTransferStats(bool _allowed) external {\n', '        require(msg.sender==creator);\n', '     }\n', '\n', '    // internal function that allocates a specific amount of ATYX at a specific block number.\n', '    // only ran 1 time on initialization\n', '    function createHeldCoins() internal {\n', '        // TOTAL SUPPLY = 5,000,000\n', '        createHoldToken(msg.sender, 1000);\n', '        createHoldToken(0xd9710D829fa7c36E025011b801664009E4e7c69D, 100000000000000000000000);\n', '        createHoldToken(0xd9710D829fa7c36E025011b801664009E4e7c69D, 100000000000000000000000);\n', '    }\n', '\n', '    // function to create held tokens for developer\n', '    function createHoldToken(address _to, uint256 amount) internal {\n', '        heldTokens[_to] = amount;\n', '        heldTimeline[_to] = block.number + 0;\n', '        heldTotal += amount;\n', '        totalMinted += heldTotal;\n', '    }\n', '\n', '    // function to release held tokens for developers\n', '    function releaseHeldCoins() external {\n', '        uint256 held = heldTokens[msg.sender];\n', '        uint heldBlock = heldTimeline[msg.sender];\n', '        require(!isFunding);\n', '        require(held >= 0);\n', '        require(block.number >= heldBlock);\n', '        heldTokens[msg.sender] = 0;\n', '        heldTimeline[msg.sender] = 0;\n', '        ReleaseTokens(msg.sender, held);\n', '    }\n', '\n', '}']