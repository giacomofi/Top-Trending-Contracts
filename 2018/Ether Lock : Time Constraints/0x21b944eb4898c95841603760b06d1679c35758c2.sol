['pragma solidity 0.4.18;\n', '\n', 'contract SafeMath {\n', '    function safeMul(uint a, uint b) pure internal returns(uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint a, uint b) pure  internal returns(uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint a, uint b) pure internal returns(uint) {\n', '        uint c = a + b;\n', '        assert(c >= a && c >= b);\n', '        return c;\n', '    }\n', '    \n', '    function safeDiv(uint a, uint b) pure internal returns (uint) {\n', '    assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', '     assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '}\n', 'contract ERC20 {\n', '  uint256 public totalsupply;\n', '  function totalSupply() public constant returns(uint256 _totalSupply);\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool ok);\n', '  function approve(address spender, uint256 value) public returns (bool ok);\n', '  function transfer(address to, uint256 value) public returns (bool ok);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Mari is ERC20, SafeMath\n', '{\n', '    // Name of the token\n', '    string public constant name = "Mari";\n', '\n', '    // Symbol of token\n', '    string public constant symbol = "MAR";\n', '\n', '    uint8 public constant decimals = 18;\n', '    uint public totalsupply = 2000000 * 10 ** 18; //\n', '    address public owner;\n', '    uint256 public _price_tokn = 483 ;\n', '    uint256 no_of_tokens;\n', '    bool stopped = true;\n', '    uint256 startdate;\n', '    uint256 enddate;\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    \n', '     enum Stages {\n', '        NOTSTARTED,\n', '        ICO,\n', '        PAUSED,\n', '        ENDED\n', '    }\n', '    Stages public stage;\n', '    \n', '    modifier atStage(Stages _stage) {\n', '        if (stage != _stage)\n', '            // Contract not in expected state\n', '            revert();\n', '        _;\n', '    }\n', '    \n', '     modifier onlyOwner() {\n', '        if (msg.sender != owner) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '    function Mari() public\n', '    {\n', '        owner = msg.sender;\n', '        balances[owner] = 1750000 * 10 **18;\n', '        balances[address(this)] = 250000 *10**18;\n', '        stage = Stages.NOTSTARTED;\n', '        Transfer(0, owner, balances[owner]);\n', '        Transfer(0, owner, balances[address(this)]);\n', '    }\n', '  \n', '    function () public payable atStage(Stages.ICO)\n', '    {\n', '        require(!stopped && msg.sender != owner && now <= enddate);\n', '        no_of_tokens = safeMul(msg.value , _price_tokn);\n', '        transferTokens(msg.sender,no_of_tokens);\n', '    }\n', '    \n', '     function start_ICO() public onlyOwner \n', '      {\n', '          stage = Stages.ICO;\n', '          stopped = false;\n', '          startdate = now;\n', '          enddate = startdate + 30 days;\n', '     }\n', '    \n', '    // called by the owner, pause ICO\n', '    function StopICO() external onlyOwner {\n', '        stopped = true;\n', '        stage = Stages.PAUSED;\n', '    }\n', '\n', '    // called by the owner , resumes ICO\n', '    function releaseICO() external onlyOwner {\n', '        stopped = false;\n', '        stage = Stages.ICO;\n', '    }\n', '    \n', '     function end_ICO() external onlyOwner\n', '     {\n', '         stage = Stages.ENDED;\n', '         totalsupply = safeSub(totalsupply , balances[address(this)]);\n', '         balances[address(this)] = 0;\n', '         Transfer(address(this), 0 , balances[address(this)]);\n', '         \n', '     }\n', '\n', '\n', '    function totalSupply() public constant returns(uint256 _totalSupply)\n', '    {\n', '        return totalsupply;\n', '    }\n', '    \n', '    function balanceOf(address sender) public constant returns (uint256)\n', '    {\n', '        return balances[sender];\n', '    }\n', '    \n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) public returns(bool success) {\n', '        if (balances[_from] >= _amount &&\n', '            allowed[_from][msg.sender] >= _amount &&\n', '            _amount > 0 &&\n', '            balances[_to] + _amount > balances[_to]) {\n', '            balances[_from] -= _amount;\n', '            allowed[_from][msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    function approve(address _spender, uint256 _amount) public returns(bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns(uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '      // Transfer the balance from owner&#39;s account to another account\n', '    function transfer(address _to, uint256 _amount) public returns(bool success) {\n', '        if (balances[msg.sender] >= _amount &&\n', '            _amount > 0 &&\n', '            balances[_to] + _amount > balances[_to]) {\n', '         \n', '            balances[msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(msg.sender, _to, _amount);\n', '\n', '          \n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '          // Transfer the balance from owner&#39;s account to another account\n', '    function transferTokens(address _to, uint256 _amount) private returns(bool success) {\n', '        if (balances[address(this)] >= _amount &&\n', '            _amount > 0 &&\n', '            balances[_to] + _amount > balances[_to]) {\n', '         \n', '            balances[address(this)] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(address(this), _to, _amount);\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '     function drain() external onlyOwner {\n', '        owner.transfer(this.balance);\n', '    }\n', '    \n', '    \n', '    \n', '}']
['pragma solidity 0.4.18;\n', '\n', 'contract SafeMath {\n', '    function safeMul(uint a, uint b) pure internal returns(uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint a, uint b) pure  internal returns(uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint a, uint b) pure internal returns(uint) {\n', '        uint c = a + b;\n', '        assert(c >= a && c >= b);\n', '        return c;\n', '    }\n', '    \n', '    function safeDiv(uint a, uint b) pure internal returns (uint) {\n', '    assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', "     assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '}\n', 'contract ERC20 {\n', '  uint256 public totalsupply;\n', '  function totalSupply() public constant returns(uint256 _totalSupply);\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool ok);\n', '  function approve(address spender, uint256 value) public returns (bool ok);\n', '  function transfer(address to, uint256 value) public returns (bool ok);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Mari is ERC20, SafeMath\n', '{\n', '    // Name of the token\n', '    string public constant name = "Mari";\n', '\n', '    // Symbol of token\n', '    string public constant symbol = "MAR";\n', '\n', '    uint8 public constant decimals = 18;\n', '    uint public totalsupply = 2000000 * 10 ** 18; //\n', '    address public owner;\n', '    uint256 public _price_tokn = 483 ;\n', '    uint256 no_of_tokens;\n', '    bool stopped = true;\n', '    uint256 startdate;\n', '    uint256 enddate;\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    \n', '     enum Stages {\n', '        NOTSTARTED,\n', '        ICO,\n', '        PAUSED,\n', '        ENDED\n', '    }\n', '    Stages public stage;\n', '    \n', '    modifier atStage(Stages _stage) {\n', '        if (stage != _stage)\n', '            // Contract not in expected state\n', '            revert();\n', '        _;\n', '    }\n', '    \n', '     modifier onlyOwner() {\n', '        if (msg.sender != owner) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '    function Mari() public\n', '    {\n', '        owner = msg.sender;\n', '        balances[owner] = 1750000 * 10 **18;\n', '        balances[address(this)] = 250000 *10**18;\n', '        stage = Stages.NOTSTARTED;\n', '        Transfer(0, owner, balances[owner]);\n', '        Transfer(0, owner, balances[address(this)]);\n', '    }\n', '  \n', '    function () public payable atStage(Stages.ICO)\n', '    {\n', '        require(!stopped && msg.sender != owner && now <= enddate);\n', '        no_of_tokens = safeMul(msg.value , _price_tokn);\n', '        transferTokens(msg.sender,no_of_tokens);\n', '    }\n', '    \n', '     function start_ICO() public onlyOwner \n', '      {\n', '          stage = Stages.ICO;\n', '          stopped = false;\n', '          startdate = now;\n', '          enddate = startdate + 30 days;\n', '     }\n', '    \n', '    // called by the owner, pause ICO\n', '    function StopICO() external onlyOwner {\n', '        stopped = true;\n', '        stage = Stages.PAUSED;\n', '    }\n', '\n', '    // called by the owner , resumes ICO\n', '    function releaseICO() external onlyOwner {\n', '        stopped = false;\n', '        stage = Stages.ICO;\n', '    }\n', '    \n', '     function end_ICO() external onlyOwner\n', '     {\n', '         stage = Stages.ENDED;\n', '         totalsupply = safeSub(totalsupply , balances[address(this)]);\n', '         balances[address(this)] = 0;\n', '         Transfer(address(this), 0 , balances[address(this)]);\n', '         \n', '     }\n', '\n', '\n', '    function totalSupply() public constant returns(uint256 _totalSupply)\n', '    {\n', '        return totalsupply;\n', '    }\n', '    \n', '    function balanceOf(address sender) public constant returns (uint256)\n', '    {\n', '        return balances[sender];\n', '    }\n', '    \n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) public returns(bool success) {\n', '        if (balances[_from] >= _amount &&\n', '            allowed[_from][msg.sender] >= _amount &&\n', '            _amount > 0 &&\n', '            balances[_to] + _amount > balances[_to]) {\n', '            balances[_from] -= _amount;\n', '            allowed[_from][msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    function approve(address _spender, uint256 _amount) public returns(bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns(uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', "      // Transfer the balance from owner's account to another account\n", '    function transfer(address _to, uint256 _amount) public returns(bool success) {\n', '        if (balances[msg.sender] >= _amount &&\n', '            _amount > 0 &&\n', '            balances[_to] + _amount > balances[_to]) {\n', '         \n', '            balances[msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(msg.sender, _to, _amount);\n', '\n', '          \n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', "          // Transfer the balance from owner's account to another account\n", '    function transferTokens(address _to, uint256 _amount) private returns(bool success) {\n', '        if (balances[address(this)] >= _amount &&\n', '            _amount > 0 &&\n', '            balances[_to] + _amount > balances[_to]) {\n', '         \n', '            balances[address(this)] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(address(this), _to, _amount);\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '     function drain() external onlyOwner {\n', '        owner.transfer(this.balance);\n', '    }\n', '    \n', '    \n', '    \n', '}']
