['pragma solidity ^0.4.18;\n', '\n', '\n', 'library SafeMath\n', '{\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256)\n', '    {\n', '        uint256 c = a+b;\n', '        assert (c>=a);\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256)\n', '    {\n', '        assert(a>=b);\n', '        return (a-b);\n', '    }\n', '\n', '    function mul(uint256 a,uint256 b)internal pure returns (uint256)\n', '    {\n', '        if (a==0)\n', '        {\n', '        return 0;\n', '        }\n', '        uint256 c = a*b;\n', '        assert ((c/a)==b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a,uint256 b)internal pure returns (uint256)\n', '    {\n', '        uint256 c = a/b;\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ERC20\n', '{\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Owned\n', '{\n', '    address public owner;\n', '    function Owned() internal\n', '     {\n', '         owner = msg.sender;\n', '     }\n', '     modifier onlyowner()\n', '     {\n', '         require(msg.sender==owner);\n', '         _;\n', '     }\n', '     function setowner(address _newowner) public onlyowner\n', '     {\n', '         owner = _newowner;\n', '\n', '     }\n', '}\n', '\n', '\n', 'contract TokenControl is ERC20\n', '{\n', '    using SafeMath for uint256;\n', '    mapping (address =>uint256) internal balances;\n', '    mapping (address => mapping(address =>uint256)) internal allowed;\n', '    uint256 totaltoken;\n', '\n', '\n', '    function totalSupply() public view returns (uint256)\n', '    {\n', '        return totaltoken;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool)\n', '    {\n', '        require(_to!=address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    function balanceOf(address _owner) public view returns (uint256 balance)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool)\n', '    {\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue)\n', '        {\n', '            allowed[msg.sender][_spender] = 0;\n', '        }\n', '        else\n', '        {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '//////////////////////////////////Atoken Start////////////////////////\n', '\n', 'contract AToken is TokenControl,Owned\n', '{\n', '    using SafeMath for uint256 ;\n', '\n', '    string public constant name    = "Alvin\'s Token";\n', '    string public constant symbol  = "Atoken";\n', '    uint8 public decimals = 9;\n', '\n', '\n', '    //定義各個stage\n', '    enum  Stage\n', '    {\n', '        first,\n', '        firstreturn,\n', '        second,\n', '        secondreturn,\n', '        fail\n', '    }\n', '    Stage public stage;\n', '    uint32 public endtime;\n', '    uint256 public Remain;\n', '    //進入下一個stage\n', '    bool public confirm2stage = false;\n', '    function ownerconfirm() public onlyowner\n', '    {\n', '        require (uint32(block.timestamp)> endtime);\n', '        require (!confirm2stage);\n', '        Remain = Remain.add(40000000*10**9);\n', '        totaltoken = 90000000*10**9;\n', '        confirm2stage = true;\n', '        verifyStage();\n', '    }\n', '\n', '    function ownerforce() public onlyowner\n', '    {\n', '        require(stage==Stage.second);\n', '        stage= Stage.secondreturn;\n', '    }\n', '\n', '    function verifyStage()internal\n', '    {\n', '        if (stage==Stage.second&&Remain==0)\n', '        {\n', '            stage= Stage.secondreturn;\n', '        }\n', '        if (stage==Stage.firstreturn&&confirm2stage)\n', '        {\n', '             stage=Stage.second;\n', '        }\n', '        if (uint32(block.timestamp)> endtime&&Remain>10000000*10**9&&stage==Stage.first)\n', '        {\n', '            stage=Stage.fail;\n', '        }\n', '        if (uint32(block.timestamp)>= endtime&&stage==Stage.first)\n', '        {\n', '             stage=Stage.firstreturn;\n', '        }\n', '    }\n', '\n', '    //根據不同state給予不同價錢\n', '    function price() internal constant returns (uint256)\n', '    {\n', '        if(stage==Stage.first)\n', '        {\n', '            return 10;\n', '        }\n', '        if(stage==Stage.second)\n', '        {\n', '            return 8;\n', '        }\n', '        else\n', '        {\n', '        return 0;\n', '        }\n', '    }\n', '\n', '    //block時間\n', '    function timeset() public constant returns (uint256)\n', '    {\n', '        return block.timestamp;\n', '    }\n', '    function viewprice() public constant returns (uint256)\n', '    {\n', '        return price();\n', '    }\n', '\n', '    //給予contract初始值\n', '    function AToken() public\n', '    {\n', '        totaltoken = 50000000*10**9;\n', '        Remain = totaltoken;\n', '        endtime = 1524571200;\n', '        stage= Stage.first;\n', '\n', '    }\n', '    function () public payable\n', '    {\n', '        buyAtoken();\n', '    }\n', '\n', '    function buyAtoken() public payable\n', '    {\n', '      //reject the buyer from contract\n', '        require(!isContract(msg.sender));\n', '        require(Remain>0);\n', '\n', '      //check current changerate\n', '        uint256 rate = price();\n', '      //return if not in payable stage\n', '        require(rate >0);\n', '        uint256 requested;\n', '        uint256 toreturn;\n', '        requested = msg.value.mul(rate);\n', '        if (requested >Remain)\n', '        {\n', '          requested = Remain;\n', '          toreturn = msg.value.sub(Remain.div(rate));\n', '        }\n', '        Remain = Remain.sub(requested);\n', '        balances[msg.sender]=balances[msg.sender].add(requested);\n', '\n', '        if (toreturn>0)\n', '        {\n', '            msg.sender.transfer(toreturn);\n', '        }\n', '        verifyStage();\n', '    }\n', '\n', '\n', '    function greedyowner() public\n', '    {\n', '        require(msg.sender==owner);\n', '        selfdestruct(owner);\n', '    }\n', '\n', '    function withdraw() public\n', '    {\n', '      require(stage==Stage.fail);\n', '      require(balances[msg.sender]>0);\n', '      uint256 ethreturn = balances[msg.sender].div(10);\n', '      balances[msg.sender] = 0;\n', '      msg.sender.transfer(ethreturn);      \n', '    }\n', '\n', '\n', '    function isContract(address _addr) constant internal returns(bool) \n', '    {\n', '        uint size;\n', '        if (_addr == 0) return false;\n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '        return size > 0;\n', '    }\n', '    \n', '    function ownertransfer(address _target,uint256 _amount) public onlyowner\n', '    {\n', '        require(stage==Stage.firstreturn||stage==Stage.secondreturn);\n', '        uint256 contractvalue = address(this).balance;\n', '        require(contractvalue>0);\n', '        if (_amount>contractvalue)\n', '        {\n', '            _target.transfer(contractvalue);\n', '        }    \n', '        else\n', '        {\n', '            _target.transfer(_amount);\n', '        }\n', '        \n', '    }\n', '\n', '}']