['pragma solidity ^0.4.24;\n', '\n', 'contract Robocalls  {\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {}\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '}\n', '\n', 'contract RobocallsTokenSale  is Owned {\n', '    uint   public startDate;\n', '    uint   public bonusEnds;\n', '    uint   public endDate;\n', '    address public main_addr;\n', '    address public tokenOwner;\n', '    Robocalls r;\n', '    \n', '    \n', '    constructor() public {\n', '        bonusEnds = now + 8 weeks;\n', '        endDate = now + 12 weeks;\n', '        startDate = now;\n', '        main_addr = 0xAD7615B0524849918AEe77e6c2285Dd7e8468650;\n', '        r = Robocalls(main_addr);\n', '    }\n', '    \n', '    \n', '    function setEndDate(uint _newEndDate ) public {\n', '        require(msg.sender==owner);\n', '        endDate =  _newEndDate;\n', '    } \n', '    \n', '    function setBonusEndDate(uint _newBonusEndDate ) public {\n', '        require(msg.sender==owner);\n', '        bonusEnds =  _newBonusEndDate;\n', '    } \n', '    \n', '    // ------------------------------------------------------------------------\n', '    // CrowdSale Function 10,000,000 RCALLS Tokens per 1 ETH\n', '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        require(now >= startDate && now <= endDate);\n', '        uint tokens;\n', '        if (now <= bonusEnds) {\n', '            tokens = msg.value * 1500000;\n', '        } else {\n', '            tokens = msg.value * 10000000;\n', '        }\n', '        r.transferFrom(owner,msg.sender, tokens);\n', '        owner.transfer(msg.value);\n', '    }\n', '\n', '}']