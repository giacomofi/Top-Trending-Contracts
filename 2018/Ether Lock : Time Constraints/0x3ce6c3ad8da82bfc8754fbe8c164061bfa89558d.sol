['pragma solidity ^0.4.23;\n', '\n', '// SafeMath\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '// Ownable\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// ERC223\n', 'contract ERC223 {\n', '    uint public totalSupply;\n', '\n', '    function balanceOf(address who) public view returns (uint);\n', '    function totalSupply() public view returns (uint256 _supply);\n', '    function transfer(address to, uint value) public returns (bool ok);\n', '    function transfer(address to, uint value, bytes data) public returns (bool ok);\n', '    function transfer(address to, uint value, bytes data, string customFallback) public returns (bool ok);\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '\n', '    function name() public view returns (string _name);\n', '    function symbol() public view returns (string _symbol);\n', '    function decimals() public view returns (uint8 _decimals);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '\n', ' // ContractReceiver\n', ' contract ContractReceiver {\n', '\n', '    struct TKN {\n', '        address sender;\n', '        uint value;\n', '        bytes data;\n', '        bytes4 sig;\n', '    }\n', '\n', '    function tokenFallback(address _from, uint _value, bytes _data) public pure {\n', '        TKN memory tkn;\n', '        tkn.sender = _from;\n', '        tkn.value = _value;\n', '        tkn.data = _data;\n', '        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n', '        tkn.sig = bytes4(u);\n', '\n', '        /*\n', '         * tkn variable is analogue of msg variable of Ether transaction\n', '         * tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\n', '         * tkn.value the number of tokens that were sent   (analogue of msg.value)\n', '         * tkn.data is data of token transaction   (analogue of msg.data)\n', '         * tkn.sig is 4 bytes signature of function if data of token transaction is a function execution\n', '         */\n', '    }\n', '}\n', '\n', '\n', '// GRAVURE COIN\n', 'contract GRAVURECOIN is ERC223, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    string public name = "gravure coin";\n', '    string public symbol = "GRAV";\n', '    uint8 public decimals = 16;\n', '    uint256 public totalSupply;\n', '\n', '    uint public chainStartTime; //chain start time\n', '    uint public chainStartBlockNumber; //chain start block number\n', '    uint public stakeStartTime; //stake start time\n', '    uint public stakeMinAge = 7 days; // minimum age for coin age: 7D\n', '    uint public stakeMaxAge = 120 days; // stake age of full weight: 120D\n', '\n', '    uint256 public maxTotalSupply = 50e9 * 1e16;\n', '    uint256 public initialTotalSupply = 20e9 * 1e16;\n', '\n', '    struct transferInStruct{\n', '      uint256 amount;\n', '      uint64 time;\n', '    }\n', '\n', '    address public admin = 0x96e80228c243dbCB7Af0f9af3eAA3FC01E1CfE8f;\n', '    address public presale = 0xA1C9457Eb8C11c053Ef317680f3dE734Bf7604Bc;\n', '    address public develop = 0x7279E1294a037a6dFFa0E01BA524181652F66DfE;\n', '    address public pr = 0xd710eB2Fc91b90dB33006BD777d35C7381030a1E;\n', '    address public manage = 0xb89cb493b9399aD693A797f969FE27F41799D02a;\n', '\n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => mapping (address => uint256)) public allowance;\n', '    mapping(address => transferInStruct[]) public transferIns;\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '    event PosMint(address indexed _address, uint _reward);\n', '\n', '    constructor () public {\n', '        owner = admin;\n', '        totalSupply = initialTotalSupply;\n', '        balanceOf[owner] = totalSupply;\n', '\n', '        chainStartTime = now;\n', '        chainStartBlockNumber = block.number;\n', '    }\n', '\n', '    function name() public view returns (string _name) {\n', '        return name;\n', '    }\n', '\n', '    function symbol() public view returns (string _symbol) {\n', '        return symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8 _decimals) {\n', '        return decimals;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256 _totalSupply) {\n', '        return totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balanceOf[_owner];\n', '    }\n', '\n', '    // transfer\n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '        require(_value > 0);\n', '\n', '        bytes memory empty;\n', '        if (isContract(_to)) {\n', '            return transferToContract(_to, _value, empty);\n', '        } else {\n', '            return transferToAddress(_to, _value, empty);\n', '        }\n', '    }\n', '\n', '    function transfer(address _to, uint _value, bytes _data) public  returns (bool success) {\n', '        require(_value > 0);\n', '\n', '        if (isContract(_to)) {\n', '            return transferToContract(_to, _value, _data);\n', '        } else {\n', '            return transferToAddress(_to, _value, _data);\n', '        }\n', '    }\n', '\n', '    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success) {\n', '        require(_value > 0);\n', '\n', '        if (isContract(_to)) {\n', '            require(balanceOf[msg.sender] >= _value);\n', '            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '            balanceOf[_to] = balanceOf[_to].add(_value);\n', '            assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n', '            emit Transfer(msg.sender, _to, _value, _data);\n', '            emit Transfer(msg.sender, _to, _value);\n', '\n', '            if(transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\n', '            uint64 _now = uint64(now);\n', '            transferIns[msg.sender].push(transferInStruct(uint256(balanceOf[msg.sender]),_now));\n', '            transferIns[_to].push(transferInStruct(uint256(_value),_now));\n', '\n', '            return true;\n', '        } else {\n', '            return transferToAddress(_to, _value, _data);\n', '        }\n', '    }\n', '\n', '    // assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '    function isContract(address _addr) private view returns (bool is_contract) {\n', '        uint length;\n', '        assembly {\n', '            //retrieve the size of the code on target address, this needs assembly\n', '            length := extcodesize(_addr)\n', '        }\n', '        return (length > 0);\n', '    }\n', '\n', '    // function that is called when transaction target is an address\n', '    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '        emit Transfer(msg.sender, _to, _value);\n', '\n', '        if(transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\n', '        uint64 _now = uint64(now);\n', '        transferIns[msg.sender].push(transferInStruct(uint256(balanceOf[msg.sender]),_now));\n', '        transferIns[_to].push(transferInStruct(uint256(_value),_now));\n', '\n', '        return true;\n', '    }\n', '\n', '    // function that is called when transaction target is a contract\n', '    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        ContractReceiver receiver = ContractReceiver(_to);\n', '        receiver.tokenFallback(msg.sender, _value, _data);\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '        emit Transfer(msg.sender, _to, _value);\n', '\n', '        if(transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\n', '        uint64 _now = uint64(now);\n', '        transferIns[msg.sender].push(transferInStruct(uint256(balanceOf[msg.sender]),_now));\n', '        transferIns[_to].push(transferInStruct(uint256(_value),_now));\n', '\n', '        return true;\n', '    }\n', '\n', '    // transferFrom\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0)\n', '                && _value > 0\n', '                && balanceOf[_from] >= _value\n', '                && allowance[_from][msg.sender] >= _value);\n', '\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '\n', '        if(transferIns[_from].length > 0) delete transferIns[_from];\n', '        uint64 _now = uint64(now);\n', '        transferIns[_from].push(transferInStruct(uint256(balanceOf[_from]),_now));\n', '        transferIns[_to].push(transferInStruct(uint256(_value),_now));\n', '\n', '        return true;\n', '    }\n', '\n', '    // approve\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    // allowance\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowance[_owner][_spender];\n', '    }\n', '\n', '    // airdrop\n', '    function airdrop(address[] addresses, uint[] amounts) public returns (bool) {\n', '        require(addresses.length > 0\n', '                && addresses.length == amounts.length);\n', '\n', '        uint256 totalAmount = 0;\n', '\n', '        for(uint j = 0; j < addresses.length; j++){\n', '            require(amounts[j] > 0\n', '                    && addresses[j] != 0x0);\n', '\n', '            amounts[j] = amounts[j].mul(1e16);\n', '            totalAmount = totalAmount.add(amounts[j]);\n', '        }\n', '        require(balanceOf[msg.sender] >= totalAmount);\n', '\n', '        uint64 _now = uint64(now);\n', '        for (j = 0; j < addresses.length; j++) {\n', '            balanceOf[addresses[j]] = balanceOf[addresses[j]].add(amounts[j]);\n', '            emit Transfer(msg.sender, addresses[j], amounts[j]);\n', '\n', '            transferIns[addresses[j]].push(transferInStruct(uint256(amounts[j]),_now));\n', '        }\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(totalAmount);\n', '\n', '        if(transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\n', '        if(balanceOf[msg.sender] > 0) transferIns[msg.sender].push(transferInStruct(uint256(balanceOf[msg.sender]),_now));\n', '\n', '        return true;\n', '    }\n', '\n', '    function setStakeStartTime(uint timestamp) onlyOwner public {\n', '        require((stakeStartTime <= 0) && (timestamp >= chainStartTime));\n', '        stakeStartTime = timestamp;\n', '    }\n', '\n', '    function ownerBurnToken(uint _value) onlyOwner public {\n', '        require(_value > 0);\n', '\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '        delete transferIns[msg.sender];\n', '        transferIns[msg.sender].push(transferInStruct(uint128(balanceOf[msg.sender]),uint64(now)));\n', '\n', '        totalSupply = totalSupply.sub(_value);\n', '        initialTotalSupply = initialTotalSupply.sub(_value);\n', '        maxTotalSupply = maxTotalSupply.sub(_value*10);\n', '\n', '        emit Burn(msg.sender, _value);\n', '    }\n', '\n', '    function getBlockNumber() constant public returns (uint blockNumber) {\n', '        blockNumber = block.number.sub(chainStartBlockNumber);\n', '    }\n', '\n', '    modifier canPoSMint() {\n', '        require(totalSupply < maxTotalSupply);\n', '        _;\n', '    }\n', '\n', '    function posMint() canPoSMint public returns (bool) {\n', '        if(balanceOf[msg.sender] <= 0) return false;\n', '        if(transferIns[msg.sender].length <= 0) return false;\n', '\n', '        uint reward = getReward(msg.sender);\n', '        if(reward <= 0) return false;\n', '\n', '        totalSupply = totalSupply.add(reward);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].add(reward);\n', '        delete transferIns[msg.sender];\n', '        transferIns[msg.sender].push(transferInStruct(uint256(balanceOf[msg.sender]),uint64(now)));\n', '\n', '        emit PosMint(msg.sender, reward);\n', '        return true;\n', '    }\n', '\n', '    function coinAge() constant public returns (uint myCoinAge) {\n', '        myCoinAge = getCoinAge(msg.sender,now);\n', '    }\n', '\n', '    function getCoinAge(address _address, uint _now) internal view returns (uint _coinAge) {\n', '        if(transferIns[_address].length <= 0) return 0;\n', '\n', '        for (uint i = 0; i < transferIns[_address].length; i++){\n', '            if( _now < uint(transferIns[_address][i].time).add(stakeMinAge) ) continue;\n', '\n', '            uint nCoinSeconds = _now.sub(uint(transferIns[_address][i].time));\n', '            if( nCoinSeconds > stakeMaxAge ) nCoinSeconds = stakeMaxAge;\n', '\n', '            _coinAge = _coinAge.add(uint(transferIns[_address][i].amount).mul(nCoinSeconds).div(1 days));\n', '        }\n', '    }\n', '\n', '    function getReward(address _address) internal view returns (uint reward) {\n', '        require( (now >= stakeStartTime) && (stakeStartTime > 0) );\n', '\n', '        uint64 _now = uint64(now);\n', '        uint _coinAge = getCoinAge(_address, _now);\n', '        if(_coinAge <= 0) return 0;\n', '\n', '        reward = _coinAge.mul(50).div(1000).div(365);\n', '        return reward;\n', '    }\n', '\n', '}']