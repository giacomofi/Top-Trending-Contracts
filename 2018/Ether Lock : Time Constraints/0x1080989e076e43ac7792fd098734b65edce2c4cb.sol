['pragma solidity ^0.4.16;\n', '\n', '\n', 'contract owned {\n', '    constructor() public { owner = msg.sender; }\n', '\n', '    address owner;\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20 {\n', '    function balanceOf(address tokenOwner) public constant returns (uint256 balance);\n', '    function transfer(address to, uint256 tokens) public returns (bool success);\n', '}\n', '\n', '\n', 'contract AddressManager is owned {\n', '\n', '    mapping (address => bool) _tankByAddress;\n', '\n', '    function setTank(address tankAddress) public onlyOwner {\n', '        _tankByAddress[tankAddress] = true;\n', '    }\n', '\n', '    function removeTank(address tankAddress) public onlyOwner {\n', '        _tankByAddress[tankAddress] = false;\n', '    }\n', '\n', '    function isTank(address tankAddress) public constant returns (bool) {\n', '        return _tankByAddress[tankAddress];\n', '    }\n', '}\n', '\n', '\n', 'contract Wallet {\n', '\n', '    address _addressManagerAddress;\n', '\n', '    constructor(address addressManagerAddress) public {\n', '        _addressManagerAddress = addressManagerAddress;\n', '    }\n', '\n', '    function () payable public {}\n', '\n', '    function transferEther(address toAddress, uint256 amount) public {\n', '        require(AddressManager(_addressManagerAddress).isTank(msg.sender));\n', '        toAddress.transfer(amount);\n', '    }\n', '\n', '    function transferToken(address token, address toAddress, uint256 amount) public {\n', '        require(AddressManager(_addressManagerAddress).isTank(msg.sender));\n', '        ERC20(token).transfer(toAddress, amount);\n', '    }\n', '}']