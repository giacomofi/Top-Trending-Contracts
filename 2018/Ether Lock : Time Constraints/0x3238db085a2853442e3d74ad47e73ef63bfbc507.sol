['pragma solidity ^0.4.18;\n', '\n', '\n', 'contract owned {\n', '    address public owner;\n', '    address private ownerCandidate;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        assert(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwnerCandidate() {\n', '        assert(msg.sender == ownerCandidate);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address candidate) external onlyOwner {\n', '        ownerCandidate = candidate;\n', '    }\n', '\n', '    function acceptOwnership() external onlyOwnerCandidate {\n', '        owner = ownerCandidate;\n', '    }\n', '}\n', '\n', '\n', 'contract Random {\n', '    uint64 _seed = 0;\n', '\n', '\n', '    function random(uint64 upper) public returns (uint64 randomNumber) {\n', '        _seed = uint64(keccak256(keccak256(block.blockhash(block.number), _seed), now));\n', '        return _seed % upper;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract SafeMath {\n', '    function safeMul(uint a, uint b) pure internal returns (uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeDiv(uint a, uint b) pure internal returns (uint) {\n', '        uint c = a / b;\n', '        assert(b == 0);\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint a, uint b) pure internal returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint a, uint b) pure internal returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a && c >= b);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Token is SafeMath, owned {\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint public decimals = 8;\n', '\n', '    mapping (address => uint) public balanceOf;\n', '    mapping (address => mapping (address => uint)) public allowance;\n', '    mapping (address => uint) public limitAddress;\n', '\n', '    uint public totalSupply = 10 * 10000 * 10000 * 10 ** uint256(decimals);\n', '\n', '    modifier validAddress(address _address) {\n', '        assert(0x0 != _address);\n', '        _;\n', '    }\n', '\n', '    function addLimitAddress(address _a)\n', '        public\n', '        validAddress(_a)\n', '        onlyOwner\n', '    {\n', '        limitAddress[_a] = 1;\n', '    }\n', '\n', '    function delLitAddress(address _a)\n', '        public\n', '        validAddress(_a)\n', '        onlyOwner\n', '    {\n', '        limitAddress[_a] = 0;\n', '    }\n', '\n', '    function Token(string _name, string _symbol)\n', '        public\n', '    {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        owner = msg.sender;\n', '        balanceOf[this] = totalSupply;\n', '        Transfer(0x0, this, totalSupply);\n', '    }\n', '\n', '    function transfer(address _to, uint _value)\n', '        public\n', '        validAddress(_to)\n', '        returns (bool success)\n', '    {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function batchtransfer(address[] _to, uint256[] _amount) public returns(bool success) {\n', '        for(uint i = 0; i < _to.length; i++){\n', '            require(transfer(_to[i], _amount[i]));\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function transferInner(address _to, uint _value)\n', '        private\n', '        returns (bool success)\n', '    {\n', '        balanceOf[this] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(this, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value)\n', '        public\n', '        validAddress(_from)\n', '        validAddress(_to)\n', '        returns (bool success)\n', '    {\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        balanceOf[_to] += _value;\n', '        balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint _value)\n', '        public\n', '        validAddress(_spender)\n', '        returns (bool success)\n', '    {\n', '        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function ()\n', '        public\n', '        payable\n', '    {\n', '\n', '    }\n', '\n', '    function mint(address _to, uint _amount) public validAddress(_to)\n', '    {\n', '        if(limitAddress[msg.sender] != 1) return;\n', '        if(balanceOf[this] == 0) return;\n', '\n', '        uint supply = _amount;\n', '\n', '        if(balanceOf[this] < supply) {\n', '            supply = balanceOf[this];\n', '        }\n', '        require(transferInner(_to, supply));\n', '        \n', '        Mint(_to, supply);\n', '    }\n', '\n', '    function withdraw(uint amount)\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(this.balance >= amount);\n', '        msg.sender.transfer(amount);\n', '    }\n', '\n', '    event Mint(address _to, uint _amount);\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '}\n', '\n', '\n', 'contract GameOne is SafeMath, Random, owned {\n', '\n', '    uint256 public createTime = 0;\n', '\n', '\n', '    uint public gameState = 0;\n', '    uint private constant GAME_RUNNING = 0;\n', '    uint private constant GAME_FINISHED = 2;\n', '    uint public gameCount = 0;\n', '\n', '\n', '    uint public minEth = 0.1 ether;\n', '    uint public maxEth = 100 ether;\n', '\n', '    uint public cut = 10;\n', '    uint public ethQuantity = 0;\n', '\n', '    address public opponent = 0x0;\n', '    uint public opponentAmount = 0;\n', '\n', '    Token public tokenContract;\n', '\n', '    event Bet(address a, uint av, address b, uint bv, uint apercent, uint rand, address winner, uint _now);\n', '\n', '    modifier validAddress(address _address) {\n', '        assert(0x0 != _address);\n', '        _;\n', '    }\n', '\n', '    modifier isOwner {\n', '        assert(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier validEth {\n', '        assert(msg.value >= minEth && msg.value <= maxEth);\n', '        _;\n', '    }\n', '\n', '    modifier validState {\n', '        assert(gameState == GAME_RUNNING);\n', '        _;\n', '    }\n', '\n', '    function GameOne(address _tokenContract) public validAddress(_tokenContract) {\n', '        tokenContract = Token(_tokenContract);\n', '        createTime = now;\n', '    }\n', '\n', '    \n', '    function () public payable {\n', '        bet();\n', '    }\n', '\n', '    function setCut(uint newCut) public isOwner {\n', '        assert(newCut > 0 && newCut <= 20);\n', '        cut = newCut;\n', '    }\n', '\n', '    function setMinEth(uint newMinEth) public isOwner {\n', '        assert(newMinEth >= 0.01 ether);\n', '        minEth = newMinEth;\n', '    }\n', '\n', '    function setMaxEth(uint newMaxEth) public isOwner {\n', '        assert(newMaxEth >= 0.1 ether);\n', '        maxEth = newMaxEth;\n', '    }\n', '\n', '    function setTokenAddress(address _addr) public isOwner {\n', '        tokenContract = Token(_addr);\n', '    }\n', '\n', '\n', '    function bet() public payable\n', '        validState\n', '        validEth\n', '    {\n', '        uint eth = msg.value;\n', '        uint bonus = 0;\n', '        uint amount = 0;\n', '        address winner;\n', '        address loser;\n', '        uint loserAmount = 0;\n', '        uint rate;\n', '        uint token = 0;\n', '\n', '\n', '        ethQuantity = safeAdd(ethQuantity, eth);\n', '\n', '        if (opponent== 0x0) {\n', '            opponent = msg.sender;\n', '            opponentAmount = eth;\n', '        } else {\n', '            winner = randomaward(opponent, msg.sender, opponentAmount, eth);\n', '            if(winner == msg.sender) {\n', '                loser = opponent;\n', '                loserAmount = opponentAmount;\n', '                rate = opponentAmount * cut/100;\n', '            }else{\n', '                loser = msg.sender;\n', '                loserAmount = eth;\n', '                rate = eth * cut/100;\n', '            }\n', '\n', '            token = loserAmount * 10000 / 10 ** 10;\n', '            tokenContract.mint(loser, token);\n', '\n', '            gameCount = safeAdd(gameCount, 1);\n', '\n', '            bonus = safeAdd(opponentAmount, eth);\n', '            amount = safeSub(bonus, rate);\n', '            require(transferInner(winner, amount));\n', '            reset();\n', '        }\n', '    }\n', '\n', '    function reset () private {\n', '        opponent = 0x0;\n', '        opponentAmount = 0;\n', '    }\n', '\n', '    function randomaward(address a, address b, uint av, uint bv) private returns (address win) {\n', '        uint bonus = safeAdd(av, bv);\n', '\n', '        uint apercent = av * 10 ** 2 /bonus;\n', '        uint rand = random(100);\n', '        if (rand<=apercent) {\n', '            win = a;\n', '        } else {\n', '            win = b;\n', '        }\n', '        Bet(a, av, b, bv, apercent, rand, win, now);\n', '        return win;\n', '    }\n', '\n', '    function withdraw (uint amount) public isOwner {\n', '        uint  lef = 0;\n', '        if (opponent != 0x0) {\n', '            lef = this.balance - opponentAmount;\n', '        } else {\n', '            lef = this.balance;\n', '        }\n', '        require(lef >= amount);\n', '\n', '        msg.sender.transfer(amount);\n', '    }\n', '\n', '\n', '    function setFinished () public isOwner {\n', '        gameState = GAME_FINISHED;\n', '    }\n', '\n', '    function setRunning () public isOwner {\n', '        gameState = GAME_RUNNING;\n', '    }\n', '\n', '    function transferInner(address _to, uint _value)\n', '        private\n', '        returns (bool success)\n', '    {\n', '        require(this.balance >= _value);\n', '        _to.transfer(_value);\n', '        Transfer(this, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '}']