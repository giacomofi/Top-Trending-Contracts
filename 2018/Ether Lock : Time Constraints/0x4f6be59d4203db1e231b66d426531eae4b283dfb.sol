['// Play2liveICO tokensale smart contract.\n', '// Developed by Phenom.Team <info@phenom.team>\n', 'pragma solidity ^0.4.15;\n', '\n', '/**\n', ' *   @title SafeMath\n', ' *   @dev Math operations with safety checks that throw on error\n', ' */\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint a, uint b) internal constant returns (uint) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal constant returns(uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal constant returns(uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal constant returns(uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' *   @title ERC20\n', ' *   @dev Standart ERC20 token interface\n', ' */\n', '\n', 'contract ERC20 {\n', '    uint public totalSupply = 0;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    function balanceOf(address _owner) constant returns (uint);\n', '    function transfer(address _to, uint _value) returns (bool);\n', '    function transferFrom(address _from, address _to, uint _value) returns (bool);\n', '    function approve(address _spender, uint _value) returns (bool);\n', '    function allowance(address _owner, address _spender) constant returns (uint);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '} \n', '\n', '/**\n', ' *   @title Play2liveICO contract  - takes funds from users and issues tokens\n', ' */\n', 'contract Play2liveICO {\n', '    // LUC - Level Up Coin token contract\n', '    using SafeMath for uint;\n', '    LucToken public LUC = new LucToken(this);\n', '    Presale public preSaleToken;\n', '\n', '    // Token price parameters\n', '    // These parametes can be changed only by manager of contract\n', '    uint public tokensPerDollar = 20;\n', '    uint public rateEth = 446; // Rate USD per ETH\n', '    uint public tokenPrice = tokensPerDollar * rateEth; // DTRC per ETH\n', '    //Crowdsale parameters\n', '    uint constant publicIcoPart = 625; // 62,5% of TotalSupply for BountyFund\n', '    uint constant operationsPart = 111;\n', '    uint constant foundersPart = 104;\n', '    uint constant partnersPart = 78; // 7,8% of TotalSupply for parnersFund\n', '    uint constant advisorsPart = 72;\n', '    uint constant bountyPart = 10; // 1% of TotalSupply for BountyFund\n', '    uint constant hardCap = 30000000 * tokensPerDollar * 1e18; // \n', '    uint public soldAmount = 0;\n', '    // Output ethereum addresses\n', '    address public Company;\n', '    address public OperationsFund;\n', '    address public FoundersFund;\n', '    address public PartnersFund;\n', '    address public AdvisorsFund;\n', '    address public BountyFund;\n', '    address public Manager; // Manager controls contract\n', '    address public Controller_Address1; // First address that is used to buy tokens for other cryptos\n', '    address public Controller_Address2; // Second address that is used to buy tokens for other cryptos\n', '    address public Controller_Address3; // Third address that is used to buy tokens for other cryptos\n', '    address public Oracle; // Oracle address\n', '\n', '    // Possible ICO statuses\n', '    enum StatusICO {\n', '        Created,\n', '        PreIcoStarted,\n', '        PreIcoPaused,\n', '        PreIcoFinished,\n', '        IcoStarted,\n', '        IcoPaused,\n', '        IcoFinished\n', '    }\n', '    StatusICO statusICO = StatusICO.Created;\n', '    \n', '    // Mappings\n', '    mapping(address => bool) public swaped;\n', '    mapping (address => string) public keys;\n', '    \n', '    // Events Log\n', '    event LogStartPreICO();\n', '    event LogPausePreICO();\n', '    event LogFinishPreICO();\n', '    event LogStartICO();\n', '    event LogPauseICO();\n', '    event LogFinishICO();\n', '    event LogBuyForInvestor(address investor, uint lucValue, string txHash);\n', '    event LogSwapTokens(address investor, uint tokensAmount);\n', '    event LogRegister(address investor, string key);\n', '\n', '    // Modifiers\n', '    // Allows execution by the manager only\n', '    modifier managerOnly { \n', '        require(msg.sender == Manager);\n', '        _; \n', '     }\n', '    // Allows execution by the oracle only\n', '    modifier oracleOnly { \n', '        require(msg.sender == Oracle);\n', '        _; \n', '     }\n', '    // Allows execution by the one of controllers only\n', '    modifier controllersOnly {\n', '        require(\n', '            (msg.sender == Controller_Address1)||\n', '            (msg.sender == Controller_Address2)||\n', '            (msg.sender == Controller_Address3)\n', '        );\n', '        _;\n', '    }\n', '\n', '\n', '   /**\n', '    *   @dev Contract constructor function\n', '    */\n', '    function Play2liveICO(\n', '        address _preSaleToken,\n', '        address _Company,\n', '        address _OperationsFund,\n', '        address _FoundersFund,\n', '        address _PartnersFund,\n', '        address _AdvisorsFund,\n', '        address _BountyFund,\n', '        address _Manager,\n', '        address _Controller_Address1,\n', '        address _Controller_Address2,\n', '        address _Controller_Address3,\n', '        address _Oracle\n', '        ) public {\n', '        preSaleToken = Presale(_preSaleToken);\n', '        Company = _Company;\n', '        OperationsFund = _OperationsFund;\n', '        FoundersFund = _FoundersFund;\n', '        PartnersFund = _PartnersFund;\n', '        AdvisorsFund = _AdvisorsFund;\n', '        BountyFund = _BountyFund;\n', '        Manager = _Manager;\n', '        Controller_Address1 = _Controller_Address1;\n', '        Controller_Address2 = _Controller_Address2;\n', '        Controller_Address3 = _Controller_Address3;\n', '        Oracle = _Oracle;\n', '    }\n', '\n', '   /**\n', '    *   @dev Function to set rate of ETH and update token price\n', '    *   @param _rateEth       current ETH rate\n', '    */\n', '    function setRate(uint _rateEth) external oracleOnly {\n', '        rateEth = _rateEth;\n', '        tokenPrice = tokensPerDollar.mul(rateEth);\n', '    }\n', '\n', '   /**\n', '    *   @dev Function to start PreICO\n', '    *   Sets ICO status to PreIcoStarted\n', '    */\n', '    function startPreIco() external managerOnly {\n', '        require(statusICO == StatusICO.Created || statusICO == StatusICO.PreIcoPaused);\n', '        statusICO = StatusICO.PreIcoStarted;\n', '        LogStartPreICO();\n', '    }\n', '\n', '   /**\n', '    *   @dev Function to pause PreICO\n', '    *   Sets ICO status to PreIcoPaused\n', '    */\n', '    function pausePreIco() external managerOnly {\n', '       require(statusICO == StatusICO.PreIcoStarted);\n', '       statusICO = StatusICO.PreIcoPaused;\n', '       LogPausePreICO();\n', '    }\n', '\n', '   /**\n', '    *   @dev Function to finish PreICO\n', '    *   Sets ICO status to PreIcoFinished\n', '    */\n', '    function finishPreIco() external managerOnly {\n', '        require(statusICO == StatusICO.PreIcoStarted || statusICO == StatusICO.PreIcoPaused);\n', '        statusICO = StatusICO.PreIcoFinished;\n', '        LogFinishPreICO();\n', '    }\n', '\n', '   /**\n', '    *   @dev Function to start ICO\n', '    *   Sets ICO status to IcoStarted\n', '    */\n', '    function startIco() external managerOnly {\n', '        require(statusICO == StatusICO.PreIcoFinished || statusICO == StatusICO.IcoPaused);\n', '        statusICO = StatusICO.IcoStarted;\n', '        LogStartICO();\n', '    }\n', '\n', '   /**\n', '    *   @dev Function to pause ICO\n', '    *   Sets ICO status to IcoPaused\n', '    */\n', '    function pauseIco() external managerOnly {\n', '       require(statusICO == StatusICO.IcoStarted);\n', '       statusICO = StatusICO.IcoPaused;\n', '       LogPauseICO();\n', '    }\n', '\n', '   /**\n', '    *   @dev Function to finish ICO\n', '    *   Sets ICO status to IcoFinished and  emits tokens for funds\n', '    */\n', '    function finishIco() external managerOnly {\n', '        require(statusICO == StatusICO.IcoStarted || statusICO == StatusICO.IcoPaused);\n', '        uint alreadyMinted = LUC.totalSupply();\n', '        uint totalAmount = alreadyMinted.mul(1000).div(publicIcoPart);\n', '        LUC.mintTokens(OperationsFund, operationsPart.mul(totalAmount).div(1000));\n', '        LUC.mintTokens(FoundersFund, foundersPart.mul(totalAmount).div(1000));\n', '        LUC.mintTokens(PartnersFund, partnersPart.mul(totalAmount).div(1000));\n', '        LUC.mintTokens(AdvisorsFund, advisorsPart.mul(totalAmount).div(1000));\n', '        LUC.mintTokens(BountyFund, bountyPart.mul(totalAmount).div(1000));\n', '        statusICO = StatusICO.IcoFinished;\n', '        LogFinishICO();\n', '    }\n', '\n', '   /**\n', '    *   @dev Unfreeze tokens(enable token transfers)\n', '    */\n', '    function unfreeze() external managerOnly {\n', '        require(statusICO == StatusICO.IcoFinished);\n', '        LUC.defrost();\n', '    }\n', '    \n', '   /**\n', '    *   @dev Function to swap tokens from pre-sale\n', '    *   @param _investor     pre-sale tokens holder address\n', '    */\n', '    function swapTokens(address _investor) external managerOnly {\n', '         require(statusICO != StatusICO.IcoFinished);\n', '         require(!swaped[_investor]);\n', '         swaped[_investor] = true;\n', '         uint tokensToSwap = preSaleToken.balanceOf(_investor);\n', '         LUC.mintTokens(_investor, tokensToSwap);\n', '         soldAmount = soldAmount.add(tokensToSwap);\n', '         LogSwapTokens(_investor, tokensToSwap);\n', '    }\n', '   /**\n', '    *   @dev Fallback function calls buy(address _investor, uint _DTRCValue) function to issue tokens\n', '    *        when investor sends ETH to address of ICO contract and then stores investment amount \n', '    */\n', '    function() external payable {\n', '        if (statusICO == StatusICO.PreIcoStarted) {\n', '            require(msg.value >= 100 finney);\n', '        }\n', '        buy(msg.sender, msg.value.mul(tokenPrice)); \n', '    }\n', '\n', '   /**\n', '    *   @dev Function to issues tokens for investors who made purchases in other cryptocurrencies\n', '    *   @param _investor     address the tokens will be issued to\n', "    *   @param _txHash       transaction hash of investor's payment\n", '    *   @param _lucValue     number of LUC tokens\n', '    */\n', '\n', '    function buyForInvestor(\n', '        address _investor, \n', '        uint _lucValue, \n', '        string _txHash\n', '    ) \n', '        external \n', '        controllersOnly {\n', '        buy(_investor, _lucValue);\n', '        LogBuyForInvestor(_investor, _lucValue, _txHash);\n', '    }\n', '\n', '   /**\n', '    *   @dev Function to issue tokens for investors who paid in ether\n', '    *   @param _investor     address which the tokens will be issued tokens\n', '    *   @param _lucValue     number of LUC tokens\n', '    */\n', '    function buy(address _investor, uint _lucValue) internal {\n', '        require(statusICO == StatusICO.PreIcoStarted || statusICO == StatusICO.IcoStarted);\n', '        uint bonus = getBonus(_lucValue);\n', '        uint total = _lucValue.add(bonus);\n', '        require(soldAmount + _lucValue <= hardCap);\n', '        LUC.mintTokens(_investor, total);\n', '        soldAmount = soldAmount.add(_lucValue);\n', '    }\n', '\n', '\n', '\n', '   /**\n', '    *   @dev Function to calculates bonuses \n', '    *   @param _value        amount of tokens\n', '    *   @return              bonus value\n', '    */\n', '    function getBonus(uint _value) public constant returns (uint) {\n', '        uint bonus = 0;\n', '        if (statusICO == StatusICO.PreIcoStarted) {\n', '            if (now < 1517356800) {\n', '                bonus = _value.mul(30).div(100);\n', '                return bonus;\n', '            } else {\n', '                bonus = _value.mul(25).div(100);\n', '                return bonus;                \n', '            }\n', '        }\n', '        if (statusICO == StatusICO.IcoStarted) {\n', '            if (now < 1518652800) {\n', '                bonus = _value.mul(10).div(100);\n', '                return bonus;                   \n', '            }\n', '            if (now < 1518912000) {\n', '                bonus = _value.mul(9).div(100);\n', '                return bonus;                   \n', '            }\n', '            if (now < 1519171200) {\n', '                bonus = _value.mul(8).div(100);\n', '                return bonus;                   \n', '            }\n', '            if (now < 1519344000) {\n', '                bonus = _value.mul(7).div(100);\n', '                return bonus;                   \n', '            }\n', '            if (now < 1519516800) {\n', '                bonus = _value.mul(6).div(100);\n', '                return bonus;                   \n', '            }\n', '            if (now < 1519689600) {\n', '                bonus = _value.mul(5).div(100);\n', '                return bonus;                   \n', '            }\n', '            if (now < 1519862400) {\n', '                bonus = _value.mul(4).div(100);\n', '                return bonus;                   \n', '            }\n', '            if (now < 1520035200) {\n', '                bonus = _value.mul(3).div(100);\n', '                return bonus;                   \n', '            }\n', '            if (now < 1520208000) {\n', '                bonus = _value.mul(2).div(100);\n', '                return bonus;                   \n', '            } else {\n', '                bonus = _value.mul(1).div(100);\n', '                return bonus;                   \n', '            }\n', '        }\n', '        return bonus;\n', '    }\n', '\n', '   /**\n', '    *   @dev Allows invetsot to register thier Level Up Chain address\n', '    */\n', '    function register(string _key) public {\n', '        keys[msg.sender] = _key;\n', '        LogRegister(msg.sender, _key);\n', '    }\n', '\n', '   /**\n', '    *   @dev Allows Company withdraw investments\n', '    */\n', '    function withdrawEther() external managerOnly {\n', '        Company.transfer(this.balance);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' *   @title LucToken\n', ' *   @dev Luc token contract\n', ' */\n', 'contract LucToken is ERC20 {\n', '    using SafeMath for uint;\n', '    string public name = "Level Up Coin";\n', '    string public symbol = "LUC";\n', '    uint public decimals = 18;\n', '\n', '    // Ico contract address\n', '    address public ico;\n', '    \n', '    // Tokens transfer ability status\n', '    bool public tokensAreFrozen = true;\n', '\n', '    // Allows execution by the owner only\n', '    modifier icoOnly { \n', '        require(msg.sender == ico); \n', '        _; \n', '    }\n', '\n', '   /**\n', '    *   @dev Contract constructor function sets Ico address\n', '    *   @param _ico          ico address\n', '    */\n', '    function LucToken(address _ico) public {\n', '       ico = _ico;\n', '    }\n', '\n', '   /**\n', '    *   @dev Function to mint tokens\n', '    *   @param _holder       beneficiary address the tokens will be issued to\n', '    *   @param _value        number of tokens to issue\n', '    */\n', '    function mintTokens(address _holder, uint _value) external icoOnly {\n', '       require(_value > 0);\n', '       balances[_holder] = balances[_holder].add(_value);\n', '       totalSupply = totalSupply.add(_value);\n', '       Transfer(0x0, _holder, _value);\n', '    }\n', '\n', '\n', '   /**\n', '    *   @dev Function to enable token transfers\n', '    */\n', '    function defrost() external icoOnly {\n', '       tokensAreFrozen = false;\n', '    }\n', '\n', '   /**\n', '    *   @dev Get balance of tokens holder\n', "    *   @param _holder        holder's address\n", '    *   @return               balance of investor\n', '    */\n', '    function balanceOf(address _holder) constant returns (uint256) {\n', '         return balances[_holder];\n', '    }\n', '\n', '   /**\n', '    *   @dev Send coins\n', '    *   throws on any error rather then return a false flag to minimize\n', '    *   user errors\n', '    *   @param _to           target address\n', '    *   @param _amount       transfer amount\n', '    *\n', '    *   @return true if the transfer was successful\n', '    */\n', '    function transfer(address _to, uint256 _amount) public returns (bool) {\n', '        require(!tokensAreFrozen);\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '   /**\n', '    *   @dev An account/contract attempts to get the coins\n', '    *   throws on any error rather then return a false flag to minimize user errors\n', '    *\n', '    *   @param _from         source address\n', '    *   @param _to           target address\n', '    *   @param _amount       transfer amount\n', '    *\n', '    *   @return true if the transfer was successful\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool) {\n', '        require(!tokensAreFrozen);\n', '        balances[_from] = balances[_from].sub(_amount);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Transfer(_from, _to, _amount);\n', '        return true;\n', '     }\n', '\n', '\n', '   /**\n', '    *   @dev Allows another account/contract to spend some tokens on its behalf\n', '    *   throws on any error rather then return a false flag to minimize user errors\n', '    *\n', '    *   also, to minimize the risk of the approve/transferFrom attack vector\n', '    *   approve has to be called twice in 2 separate transactions - once to\n', '    *   change the allowance to 0 and secondly to change it to the new allowance\n', '    *   value\n', '    *\n', '    *   @param _spender      approved address\n', '    *   @param _amount       allowance amount\n', '    *\n', '    *   @return true if the approval was successful\n', '    */\n', '    function approve(address _spender, uint256 _amount) public returns (bool) {\n', '        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '   /**\n', '    *   @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    *   @param _owner        the address which owns the funds\n', '    *   @param _spender      the address which will spend the funds\n', '    *\n', '    *   @return              the amount of tokens still avaible for the spender\n', '    */\n', '    function allowance(address _owner, address _spender) constant returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract tokenLUCG {\n', '    /* Public variables of the token */\n', '        string public name;\n', '        string public symbol;\n', '        uint8 public decimals;\n', '        uint256 public totalSupply = 0;\n', '\n', '\n', '        function tokenLUCG (string _name, string _symbol, uint8 _decimals){\n', '            name = _name;\n', '            symbol = _symbol;\n', '            decimals = _decimals;\n', '\n', '        }\n', '    /* This creates an array with all balances */\n', '        mapping (address => uint256) public balanceOf;\n', '\n', '}\n', '\n', 'contract Presale is tokenLUCG {\n', '\n', '        using SafeMath for uint;\n', "        string name = 'Level Up Coin Gold';\n", "        string symbol = 'LUCG';\n", '        uint8 decimals = 18;\n', '        address manager;\n', '        address public ico;\n', '\n', '        function Presale (address _manager) tokenLUCG (name, symbol, decimals){\n', '             manager = _manager;\n', '\n', '        }\n', '\n', '        event Transfer(address _from, address _to, uint256 amount);\n', '        event Burn(address _from, uint256 amount);\n', '\n', '        modifier onlyManager{\n', '             require(msg.sender == manager);\n', '            _;\n', '        }\n', '\n', '        modifier onlyIco{\n', '             require(msg.sender == ico);\n', '            _;\n', '        }\n', '        function mintTokens(address _investor, uint256 _mintedAmount) public onlyManager {\n', '             balanceOf[_investor] = balanceOf[_investor].add(_mintedAmount);\n', '             totalSupply = totalSupply.add(_mintedAmount);\n', '             Transfer(this, _investor, _mintedAmount);\n', '\n', '        }\n', '\n', '        function burnTokens(address _owner) public onlyIco{\n', '             uint  tokens = balanceOf[_owner];\n', '             require(balanceOf[_owner] != 0);\n', '             balanceOf[_owner] = 0;\n', '             totalSupply = totalSupply.sub(tokens);\n', '             Burn(_owner, tokens);\n', '        }\n', '\n', '        function setIco(address _ico) onlyManager{\n', '            ico = _ico;\n', '        }\n', '}']