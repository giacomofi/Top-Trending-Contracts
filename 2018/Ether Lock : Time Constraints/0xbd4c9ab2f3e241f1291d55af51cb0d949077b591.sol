['pragma solidity ^0.4.24;\n', '\n', 'contract Forwarder {\n', '    string public name = "Forwarder";\n', '    address private currentCorpBank_;\n', '    bool needsBank_ = true;\n', '    \n', '    constructor() \n', '        public\n', '    {\n', '        //constructor does nothing.\n', '    }\n', '    \n', '    function()\n', '        public\n', '        payable\n', '    {\n', '        // done so that if any one tries to dump eth into this contract, we can\n', '        // just forward it to corp bank.\n', '        if (currentCorpBank_ != address(0))\n', '            currentCorpBank_.transfer(msg.value);\n', '    }\n', '    \n', '    function deposit()\n', '        public \n', '        payable\n', '        returns(bool)\n', '    {\n', '        require(msg.value > 0, "Forwarder Deposit failed - zero deposits not allowed");\n', '        require(needsBank_ == false, "Forwarder Deposit failed - no registered bank");\n', '        currentCorpBank_.transfer(msg.value);\n', '        return(true);\n', '    }\n', '\n', '    function withdraw()\n', '        public\n', '        payable\n', '    {\n', '        require(msg.sender == currentCorpBank_);\n', '        currentCorpBank_.transfer(address(this).balance);\n', '    }\n', '\n', '    function setup(address _firstCorpBank)\n', '        external\n', '    {\n', '        require(needsBank_ == true, "Forwarder setup failed - corp bank already registered");\n', '        currentCorpBank_ = _firstCorpBank;\n', '        needsBank_ = false;\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract Forwarder {\n', '    string public name = "Forwarder";\n', '    address private currentCorpBank_;\n', '    bool needsBank_ = true;\n', '    \n', '    constructor() \n', '        public\n', '    {\n', '        //constructor does nothing.\n', '    }\n', '    \n', '    function()\n', '        public\n', '        payable\n', '    {\n', '        // done so that if any one tries to dump eth into this contract, we can\n', '        // just forward it to corp bank.\n', '        if (currentCorpBank_ != address(0))\n', '            currentCorpBank_.transfer(msg.value);\n', '    }\n', '    \n', '    function deposit()\n', '        public \n', '        payable\n', '        returns(bool)\n', '    {\n', '        require(msg.value > 0, "Forwarder Deposit failed - zero deposits not allowed");\n', '        require(needsBank_ == false, "Forwarder Deposit failed - no registered bank");\n', '        currentCorpBank_.transfer(msg.value);\n', '        return(true);\n', '    }\n', '\n', '    function withdraw()\n', '        public\n', '        payable\n', '    {\n', '        require(msg.sender == currentCorpBank_);\n', '        currentCorpBank_.transfer(address(this).balance);\n', '    }\n', '\n', '    function setup(address _firstCorpBank)\n', '        external\n', '    {\n', '        require(needsBank_ == true, "Forwarder setup failed - corp bank already registered");\n', '        currentCorpBank_ = _firstCorpBank;\n', '        needsBank_ = false;\n', '    }\n', '}']
