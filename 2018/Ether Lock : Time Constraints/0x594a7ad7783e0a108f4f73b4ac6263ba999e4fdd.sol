['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * EIP-20 standard token interface, as defined at\n', ' * ttps://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', ' */\n', 'contract Token {\n', '    function name() public constant returns (string);\n', '    function symbol() public constant returns (string);\n', '    function decimals() public constant returns (uint8);\n', '    function totalSupply() public constant returns (uint256);\n', '    function balanceOf(address _owner) public constant returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        public returns (bool);\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '    function allowance(address _owner, address _spender)\n', '        public constant returns (uint256);\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(\n', '        address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/**\n', ' * Allows one to lock EIP-20 tokens until certain time arrives.\n', ' * Copyright &#169; 2018 by Oleksii Vynogradov\n', ' * Author: Oleksii Vynogradov <alex[at]cfc.io>\n', ' */\n', 'contract CradTimeLock {\n', '    /**\n', '     * Create new Token Time Lock with given owner address.\n', '     *\n', '     * @param _owner owner address\n', '     */\n', '    function CradTimeLock (address _owner) public {\n', '        owner = _owner;\n', '    }\n', '\n', '    /**\n', '     * Lock given amount of given EIP-20 tokens until given time arrives, after\n', '     * this time allow the tokens to be transferred to given beneficiary.  This\n', '     * contract should be allowed to transfer at least given amount of tokens\n', '     * from msg.sender.\n', '     *\n', '     * @param _token EIP-20 token contract managing tokens to be locked\n', '     * @param _beneficiary beneficiary to receive tokens after unlock time\n', '     * @param _amount amount of tokens to be locked\n', '     * @param _unlockTime unlock time\n', '     *\n', '     * @return time lock ID\n', '     */\n', '    function lock (\n', '        Token _token, address _beneficiary, uint256 _amount,\n', '        uint256 _unlockTime) public returns (uint256) {\n', '        require (_amount > 0);\n', '        require (msg.sender == owner);\n', '\n', '        uint256 id = nextLockID++;\n', '\n', '        TokenTimeLockInfo storage lockInfo = locks [id];\n', '\n', '        lockInfo.token = _token;\n', '        lockInfo.beneficiary = _beneficiary;\n', '        lockInfo.amount = _amount;\n', '        lockInfo.unlockTime = _unlockTime;\n', '\n', '        emit Lock (id, _token, _beneficiary, _amount, _unlockTime);\n', '\n', '        require (_token.transferFrom (msg.sender, this, _amount));\n', '\n', '        return id;\n', '    }\n', '\n', '    /**\n', '     * Unlock tokens locked under time lock with given ID and transfer them to\n', '     * corresponding beneficiary.\n', '     *\n', '     * @param _id time lock ID to unlock tokens locked under\n', '     */\n', '    function unlock (uint256 _id) public {\n', '        TokenTimeLockInfo memory lockInfo = locks [_id];\n', '        delete locks [_id];\n', '\n', '        require (lockInfo.amount > 0);\n', '        require (lockInfo.unlockTime <= block.timestamp);\n', '        require (msg.sender == owner);\n', '\n', '        emit Unlock (_id);\n', '\n', '        require (\n', '            lockInfo.token.transfer (\n', '                lockInfo.beneficiary, lockInfo.amount));\n', '    }\n', '\n', '    /**\n', '     * If you like this contract, you may send some ether to this address and\n', '     * it will be used to develop more useful contracts available to everyone.\n', '     */\n', '    address public owner;\n', '\n', '    /**\n', '     * Next time lock ID to be used.\n', '     */\n', '    uint256 private nextLockID = 0;\n', '\n', '    /**\n', '     * Maps time lock ID to TokenTimeLockInfo structure encapsulating time lock\n', '     * information.\n', '     */\n', '    mapping (uint256 => TokenTimeLockInfo) public locks;\n', '\n', '    /**\n', '     * Encapsulates information abount time lock.\n', '     */\n', '    struct TokenTimeLockInfo {\n', '        /**\n', '         * EIP-20 token contract managing locked tokens.\n', '         */\n', '        Token token;\n', '\n', '        /**\n', '         * Beneficiary to receive tokens once they are unlocked.\n', '         */\n', '        address beneficiary;\n', '\n', '        /**\n', '         * Amount of locked tokens.\n', '         */\n', '        uint256 amount;\n', '\n', '        /**\n', '         * Unlock time.\n', '         */\n', '        uint256 unlockTime;\n', '    }\n', '\n', '    /**\n', '     * Logged when tokens were time locked.\n', '     *\n', '     * @param id time lock ID\n', '     * @param token EIP-20 token contract managing locked tokens\n', '     * @param beneficiary beneficiary to receive tokens once they are unlocked\n', '     * @param amount amount of locked tokens\n', '     * @param unlockTime unlock time\n', '     */\n', '    event Lock (\n', '        uint256 indexed id, Token indexed token, address indexed beneficiary,\n', '        uint256 amount, uint256 unlockTime);\n', '\n', '    /**\n', '     * Logged when tokens were unlocked and sent to beneficiary.\n', '     *\n', '     * @param id time lock ID\n', '     */\n', '    event Unlock (uint256 indexed id);\n', '}']
['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * EIP-20 standard token interface, as defined at\n', ' * ttps://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', ' */\n', 'contract Token {\n', '    function name() public constant returns (string);\n', '    function symbol() public constant returns (string);\n', '    function decimals() public constant returns (uint8);\n', '    function totalSupply() public constant returns (uint256);\n', '    function balanceOf(address _owner) public constant returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        public returns (bool);\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '    function allowance(address _owner, address _spender)\n', '        public constant returns (uint256);\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(\n', '        address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/**\n', ' * Allows one to lock EIP-20 tokens until certain time arrives.\n', ' * Copyright Â© 2018 by Oleksii Vynogradov\n', ' * Author: Oleksii Vynogradov <alex[at]cfc.io>\n', ' */\n', 'contract CradTimeLock {\n', '    /**\n', '     * Create new Token Time Lock with given owner address.\n', '     *\n', '     * @param _owner owner address\n', '     */\n', '    function CradTimeLock (address _owner) public {\n', '        owner = _owner;\n', '    }\n', '\n', '    /**\n', '     * Lock given amount of given EIP-20 tokens until given time arrives, after\n', '     * this time allow the tokens to be transferred to given beneficiary.  This\n', '     * contract should be allowed to transfer at least given amount of tokens\n', '     * from msg.sender.\n', '     *\n', '     * @param _token EIP-20 token contract managing tokens to be locked\n', '     * @param _beneficiary beneficiary to receive tokens after unlock time\n', '     * @param _amount amount of tokens to be locked\n', '     * @param _unlockTime unlock time\n', '     *\n', '     * @return time lock ID\n', '     */\n', '    function lock (\n', '        Token _token, address _beneficiary, uint256 _amount,\n', '        uint256 _unlockTime) public returns (uint256) {\n', '        require (_amount > 0);\n', '        require (msg.sender == owner);\n', '\n', '        uint256 id = nextLockID++;\n', '\n', '        TokenTimeLockInfo storage lockInfo = locks [id];\n', '\n', '        lockInfo.token = _token;\n', '        lockInfo.beneficiary = _beneficiary;\n', '        lockInfo.amount = _amount;\n', '        lockInfo.unlockTime = _unlockTime;\n', '\n', '        emit Lock (id, _token, _beneficiary, _amount, _unlockTime);\n', '\n', '        require (_token.transferFrom (msg.sender, this, _amount));\n', '\n', '        return id;\n', '    }\n', '\n', '    /**\n', '     * Unlock tokens locked under time lock with given ID and transfer them to\n', '     * corresponding beneficiary.\n', '     *\n', '     * @param _id time lock ID to unlock tokens locked under\n', '     */\n', '    function unlock (uint256 _id) public {\n', '        TokenTimeLockInfo memory lockInfo = locks [_id];\n', '        delete locks [_id];\n', '\n', '        require (lockInfo.amount > 0);\n', '        require (lockInfo.unlockTime <= block.timestamp);\n', '        require (msg.sender == owner);\n', '\n', '        emit Unlock (_id);\n', '\n', '        require (\n', '            lockInfo.token.transfer (\n', '                lockInfo.beneficiary, lockInfo.amount));\n', '    }\n', '\n', '    /**\n', '     * If you like this contract, you may send some ether to this address and\n', '     * it will be used to develop more useful contracts available to everyone.\n', '     */\n', '    address public owner;\n', '\n', '    /**\n', '     * Next time lock ID to be used.\n', '     */\n', '    uint256 private nextLockID = 0;\n', '\n', '    /**\n', '     * Maps time lock ID to TokenTimeLockInfo structure encapsulating time lock\n', '     * information.\n', '     */\n', '    mapping (uint256 => TokenTimeLockInfo) public locks;\n', '\n', '    /**\n', '     * Encapsulates information abount time lock.\n', '     */\n', '    struct TokenTimeLockInfo {\n', '        /**\n', '         * EIP-20 token contract managing locked tokens.\n', '         */\n', '        Token token;\n', '\n', '        /**\n', '         * Beneficiary to receive tokens once they are unlocked.\n', '         */\n', '        address beneficiary;\n', '\n', '        /**\n', '         * Amount of locked tokens.\n', '         */\n', '        uint256 amount;\n', '\n', '        /**\n', '         * Unlock time.\n', '         */\n', '        uint256 unlockTime;\n', '    }\n', '\n', '    /**\n', '     * Logged when tokens were time locked.\n', '     *\n', '     * @param id time lock ID\n', '     * @param token EIP-20 token contract managing locked tokens\n', '     * @param beneficiary beneficiary to receive tokens once they are unlocked\n', '     * @param amount amount of locked tokens\n', '     * @param unlockTime unlock time\n', '     */\n', '    event Lock (\n', '        uint256 indexed id, Token indexed token, address indexed beneficiary,\n', '        uint256 amount, uint256 unlockTime);\n', '\n', '    /**\n', '     * Logged when tokens were unlocked and sent to beneficiary.\n', '     *\n', '     * @param id time lock ID\n', '     */\n', '    event Unlock (uint256 indexed id);\n', '}']
