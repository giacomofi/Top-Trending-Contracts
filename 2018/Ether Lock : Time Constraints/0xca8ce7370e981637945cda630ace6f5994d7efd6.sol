['pragma solidity ^0.4.15;\n', '\n', 'contract Token {\n', '    \n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (uint256 => address) public addresses;\n', '    mapping (address => bool) public addressExists;\n', '    mapping (address => uint256) public addressIndex;\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '    uint256 public numberOfAddress = 0;\n', '    \n', '    string public physicalString;\n', '    string public cryptoString;\n', '    \n', '    bool public isSecured;\n', '    string public name;\n', '    string public symbol;\n', '    uint256 public totalSupply;\n', '    bool public canMintBurn;\n', '    uint256 public txnTax;\n', '    uint256 public holdingTax;\n', '    //In Weeks, on Fridays\n', '    uint256 public holdingTaxInterval;\n', '    uint256 public lastHoldingTax;\n', '    uint256 public holdingTaxDecimals = 2;\n', '    bool public isPrivate;\n', '    \n', '    address public owner;\n', '    \n', '    function Token(string n, string a, uint256 totalSupplyToUse, bool isSecured, bool cMB, string physical, string crypto, uint256 txnTaxToUse, uint256 holdingTaxToUse, uint256 holdingTaxIntervalToUse, bool isPrivateToUse) {\n', '        name = n;\n', '        symbol = a;\n', '        totalSupply = totalSupplyToUse;\n', '        balanceOf[msg.sender] = totalSupplyToUse;\n', '        isSecured = isSecured;\n', '        physicalString = physical;\n', '        cryptoString = crypto;\n', '        canMintBurn = cMB;\n', '        owner = msg.sender;\n', '        txnTax = txnTaxToUse;\n', '        holdingTax = holdingTaxToUse;\n', '        holdingTaxInterval = holdingTaxIntervalToUse;\n', '        if(holdingTaxInterval!=0) {\n', '            lastHoldingTax = now;\n', '            while(getHour(lastHoldingTax)!=21) {\n', '                lastHoldingTax -= 1 hours;\n', '            }\n', '            while(getWeekday(lastHoldingTax)!=5) {\n', '                lastHoldingTax -= 1 days;\n', '            }\n', '            lastHoldingTax -= getMinute(lastHoldingTax) * (1 minutes) + getSecond(lastHoldingTax) * (1 seconds);\n', '        }\n', '        isPrivate = isPrivateToUse;\n', '        \n', '        addAddress(owner);\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) payable returns (bool success) {\n', '        chargeHoldingTax();\n', '        if (balanceOf[msg.sender] < _value) return false;\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) return false;\n', '        if (msg.sender != owner && _to != owner && txnTax != 0) {\n', '            if(!owner.send(txnTax)) {\n', '                return false;\n', '            }\n', '        }\n', '        if(isPrivate && msg.sender != owner && !addressExists[_to]) {\n', '            return false;\n', '        }\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        addAddress(_to);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(\n', '         address _from,\n', '         address _to,\n', '         uint256 _amount\n', '     ) payable returns (bool success) {\n', '        if (_from != owner && _to != owner && txnTax != 0) {\n', '            if(!owner.send(txnTax)) {\n', '                return false;\n', '            }\n', '        }\n', '        if(isPrivate && _from != owner && !addressExists[_to]) {\n', '            return false;\n', '        }\n', '        if (balanceOf[_from] >= _amount\n', '            && allowed[_from][msg.sender] >= _amount\n', '            && _amount > 0\n', '            && balanceOf[_to] + _amount > balanceOf[_to]) {\n', '            balanceOf[_from] -= _amount;\n', '            allowed[_from][msg.sender] -= _amount;\n', '            balanceOf[_to] += _amount;\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '     \n', '    function approve(address _spender, uint256 _amount) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function changeTxnTax(uint256 _newValue) {\n', '        if(msg.sender != owner) throw;\n', '        txnTax = _newValue;\n', '    }\n', '    \n', '    function mint(uint256 _value) {\n', '        if(canMintBurn && msg.sender == owner) {\n', '            if (balanceOf[msg.sender] + _value < balanceOf[msg.sender]) throw;\n', '            balanceOf[msg.sender] += _value;\n', '            totalSupply += _value;\n', '            Transfer(0, msg.sender, _value);\n', '        }\n', '    }\n', '    \n', '    function burn(uint256 _value) {\n', '        if(canMintBurn && msg.sender == owner) {\n', '            if (balanceOf[msg.sender] < _value) throw;\n', '            balanceOf[msg.sender] -= _value;\n', '            totalSupply -= _value;\n', '            Transfer(msg.sender, 0, _value);\n', '        }\n', '    }\n', '    \n', '    function chargeHoldingTax() {\n', '        if(holdingTaxInterval!=0) {\n', '            uint256 dateDif = now - lastHoldingTax;\n', '            bool changed = false;\n', '            while(dateDif >= holdingTaxInterval * (1 weeks)) {\n', '                changed=true;\n', '                dateDif -= holdingTaxInterval * (1 weeks);\n', '                for(uint256 i = 0;i<numberOfAddress;i++) {\n', '                    if(addresses[i]!=owner) {\n', '                        uint256 amtOfTaxToPay = ((balanceOf[addresses[i]]) * holdingTax)  / (10**holdingTaxDecimals)/ (10**holdingTaxDecimals);\n', '                        balanceOf[addresses[i]] -= amtOfTaxToPay;\n', '                        balanceOf[owner] += amtOfTaxToPay;\n', '                    }\n', '                }\n', '            }\n', '            if(changed) {\n', '                lastHoldingTax = now;\n', '                while(getHour(lastHoldingTax)!=21) {\n', '                    lastHoldingTax -= 1 hours;\n', '                }\n', '                while(getWeekday(lastHoldingTax)!=5) {\n', '                    lastHoldingTax -= 1 days;\n', '                }\n', '                lastHoldingTax -= getMinute(lastHoldingTax) * (1 minutes) + getSecond(lastHoldingTax) * (1 seconds);\n', '            }\n', '        }\n', '    }\n', '    \n', '    function changeHoldingTax(uint256 _newValue) {\n', '        if(msg.sender != owner) throw;\n', '        holdingTax = _newValue;\n', '    }\n', '    \n', '    function changeHoldingTaxInterval(uint256 _newValue) {\n', '        if(msg.sender != owner) throw;\n', '        holdingTaxInterval = _newValue;\n', '    }\n', '    \n', '    function addAddress (address addr) private {\n', '        if(!addressExists[addr]) {\n', '            addressIndex[addr] = numberOfAddress;\n', '            addresses[numberOfAddress++] = addr;\n', '            addressExists[addr] = true;\n', '        }\n', '    }\n', '    \n', '    function addAddressManual (address addr) {\n', '        if(msg.sender == owner && isPrivate) {\n', '            addAddress(addr);\n', '        } else {\n', '            throw;\n', '        }\n', '    }\n', '    \n', '    function removeAddress (address addr) private {\n', '        if(addressExists[addr]) {\n', '            numberOfAddress--;\n', '            addresses[addressIndex[addr]] = 0x0;\n', '            addressExists[addr] = false;\n', '        }\n', '    }\n', '    \n', '    function removeAddressManual (address addr) {\n', '        if(msg.sender == owner && isPrivate) {\n', '            removeAddress(addr);\n', '        } else {\n', '            throw;\n', '        }\n', '    }\n', '    \n', '    function getWeekday(uint timestamp) returns (uint8) {\n', '            return uint8((timestamp / 86400 + 4) % 7);\n', '    }\n', '    \n', '    function getHour(uint timestamp) returns (uint8) {\n', '            return uint8((timestamp / 60 / 60) % 24);\n', '    }\n', '\n', '    function getMinute(uint timestamp) returns (uint8) {\n', '            return uint8((timestamp / 60) % 60);\n', '    }\n', '\n', '    function getSecond(uint timestamp) returns (uint8) {\n', '            return uint8(timestamp % 60);\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}']