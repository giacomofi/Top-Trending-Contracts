['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '   /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', 'contract KYCCrowdsale is Ownable{\n', '\n', '    bool public isKYCRequired = false;\n', '\n', '    mapping (bytes32 => address) public whiteListed;\n', '\n', '    function enableKYC() external onlyOwner {\n', '        require(!isKYCRequired); // kyc is not enabled\n', '        isKYCRequired = true;\n', '    }\n', '\n', '    function disableKYC() external onlyOwner {\n', '        require(isKYCRequired); // kyc is enabled\n', '        isKYCRequired = false; \n', '    }\n', '\n', '    //TODO: handle single address can be whiteListed multiple time using unique signed hashes\n', '    function isWhitelistedAddress(bytes32 hash, uint8 v, bytes32 r, bytes32 s) public returns (bool){\n', '        assert( whiteListed[hash] == address(0x0)); // verify hash is unique\n', '        require(owner == ecrecover(hash, v, r, s));\n', '        whiteListed[hash] = msg.sender;\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale is Pausable, KYCCrowdsale{\n', '  using SafeMath for uint256;\n', '    \n', '  // The token interface\n', '  ERC20 public token;\n', '\n', '  // The address of token holder that allowed allowance to contract\n', '  address public tokenWallet;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // token rate in wei\n', '  uint256 public rate;\n', '  \n', '  uint256 public roundOneRate;\n', '  uint256 public roundTwoRate;\n', '  uint256 public defaultBonussRate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  uint256 public tokensSold;\n', '\n', '  uint256 public constant forSale = 16250000;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   * @param releaseTime tokens unlock time\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount, uint256 releaseTime);\n', '\n', '  /**\n', '   * event upon endTime updated\n', '   */\n', '  event EndTimeUpdated();\n', '\n', '  /**\n', '   * EQUI token price updated\n', '   */\n', '  event EQUIPriceUpdated(uint256 oldPrice, uint256 newPrice);\n', '\n', '  /**\n', '   * event for token releasing\n', '   * @param holder who is releasing his tokens\n', '   */\n', '  event TokenReleased(address indexed holder, uint256 amount);\n', '\n', '  constructor() public\n', '   {\n', '    owner = 0xe46d0049D4a4642bC875164bd9293a05dBa523f1;\n', '    startTime = now;\n', '    endTime = 1527811199; //GMT: Thursday, May 31, 2018 11:59:59 PM\n', '    rate = 500000000000000;                     // 1 Token price: 0.0005 Ether == $0.35 @ Ether prie $700\n', '    roundOneRate = (rate.mul(6)).div(10);       // price at 40% discount\n', '    roundTwoRate = (rate.mul(65)).div(100);     // price at 35% discount\n', '    defaultBonussRate = (rate.mul(8)).div(10);  // price at 20% discount\n', '    \n', '    wallet =  0xccB84A750f386bf5A4FC8C29611ad59057968605;\n', '    token = ERC20(0x1b0cD7c0DC07418296585313a816e0Cb953DEa96);\n', '    tokenWallet =  0x4AA48F9cF25eB7d2c425780653c321cfaC458FA4;\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable whenNotPaused {\n', '    require(beneficiary != address(0));\n', '\n', '    validPurchase();\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    tokensSold = tokensSold.add(tokens);\n', '    deposited[msg.sender] = deposited[msg.sender].add(weiAmount);\n', '    updateRoundLimits(tokens);\n', '   \n', '    uint256 lockedFor = assignTokens(beneficiary, tokens);\n', '    emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens, lockedFor);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '  \n', '   uint256 public roundOneLimit = 9500000 ether;\n', '   uint256 public roundTwoLimit = 6750000 ether;\n', '   \n', '  function updateRoundLimits(uint256 _amount) private {\n', '      if (roundOneLimit > 0){\n', '          if(roundOneLimit > _amount){\n', '                roundOneLimit = roundOneLimit.sub(_amount);\n', '                return;\n', '          } else {\n', '              _amount = _amount.sub(roundOneLimit);\n', '              roundOneLimit = 0;\n', '          }\n', '      }\n', '      roundTwoLimit = roundTwoLimit.sub(_amount);\n', '  }\n', '\n', '  function getTokenAmount(uint256 weiAmount) public view returns(uint256) {\n', '  \n', '      uint256 buffer = 0;\n', '      uint256 tokens = 0;\n', '      if(weiAmount < 1 ether)\n', '      \n', '        // 20% disount = $0.28 EQUI Price , default category\n', '        // 1 ETH = 2400 EQUI\n', '        return (weiAmount.div(defaultBonussRate)).mul(1 ether);\n', '\n', '      else if(weiAmount >= 1 ether) {\n', '          \n', '          \n', '          if(roundOneLimit > 0){\n', '              \n', '              uint256 amount = roundOneRate * roundOneLimit;\n', '              \n', '              if (weiAmount > amount){\n', '                  buffer = weiAmount - amount;\n', '                  tokens =  (amount.div(roundOneRate)).mul(1 ether);\n', '              }else{\n', '                  // 40% disount = $0.21 EQUI Price , round one bonuss category\n', '                  // 1 ETH = 3333\n', '                  return (weiAmount.div(roundOneRate)).mul(1 ether);\n', '              }\n', '        \n', '          }\n', '          \n', '          if(buffer > 0){\n', '              uint256 roundTwo = (buffer.div(roundTwoRate)).mul(1 ether);\n', '              return tokens + roundTwo;\n', '          }\n', '          \n', '          return (weiAmount.div(roundTwoRate)).mul(1 ether);\n', '      }\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view {\n', '    require(msg.value != 0);\n', '    require(remainingTokens() > 0,"contract doesn&#39;t have tokens");\n', '    require(now >= startTime && now <= endTime);\n', '  }\n', '\n', '  function updateEndTime(uint256 newTime) onlyOwner external {\n', '    require(newTime > startTime);\n', '    endTime = newTime;\n', '    emit EndTimeUpdated();\n', '  }\n', '\n', '  function updateEQUIPrice(uint256 weiAmount) onlyOwner external {\n', '    require(weiAmount > 0);\n', '    assert((1 ether) % weiAmount == 0);\n', '    emit EQUIPriceUpdated(rate, weiAmount);\n', '    rate = weiAmount;\n', '    roundOneRate = (rate.mul(6)).div(10);       // price at 40% discount\n', '    roundTwoRate = (rate.mul(65)).div(100);     // price at 35% discount\n', '    defaultBonussRate = (rate.mul(8)).div(10);    // price at 20% discount\n', '  }\n', '\n', '  mapping(address => uint256) balances;\n', '  mapping(address => uint256) internal deposited;\n', '\n', '  struct account{\n', '      uint256[] releaseTime;\n', '      mapping(uint256 => uint256) balance;\n', '  }\n', '  mapping(address => account) ledger;\n', '\n', '\n', '  function assignTokens(address beneficiary, uint256 amount) private returns(uint256 lockedFor){\n', '      lockedFor = 1526278800; //September 30, 2018 11:59:59 PM\n', '\n', '      balances[beneficiary] = balances[beneficiary].add(amount);\n', '\n', '      ledger[beneficiary].releaseTime.push(lockedFor);\n', '      ledger[beneficiary].balance[lockedFor] = amount;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function unlockedBalance(address _owner) public view returns (uint256 amount) {\n', '    for(uint256 i = 0 ; i < ledger[_owner].releaseTime.length; i++){\n', '        uint256 time = ledger[_owner].releaseTime[i];\n', '        if(now >= time) amount +=  ledger[_owner].balance[time];\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers tokens held by timelock to beneficiary.\n', '   */\n', '  function releaseEQUITokens(bytes32 hash, uint8 v, bytes32 r, bytes32 s) public whenNotPaused {\n', '    require(balances[msg.sender] > 0);\n', '\n', '    uint256 amount = 0;\n', '    for(uint8 i = 0 ; i < ledger[msg.sender].releaseTime.length; i++){\n', '        uint256 time = ledger[msg.sender].releaseTime[i];\n', '        if(now >= time && ledger[msg.sender].balance[time] > 0){\n', '            amount = ledger[msg.sender].balance[time];\n', '            ledger[msg.sender].balance[time] = 0;\n', '            continue;\n', '        }\n', '    }\n', '\n', '    if(amount <= 0 || balances[msg.sender] < amount){\n', '        revert();\n', '    }\n', '\n', '    if(isKYCRequired){\n', '        require(isWhitelistedAddress(hash, v, r, s));\n', '        balances[msg.sender] = balances[msg.sender].sub(amount);\n', '        if(!token.transferFrom(tokenWallet,msg.sender,amount)){\n', '            revert();\n', '        }\n', '        emit TokenReleased(msg.sender,amount);\n', '    } else {\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(amount);\n', '        if(!token.transferFrom(tokenWallet,msg.sender,amount)){\n', '            revert();\n', '        }\n', '        emit TokenReleased(msg.sender,amount);\n', '    }\n', '  }\n', '\n', '   /**\n', '   * @dev Checks the amount of tokens left in the allowance.\n', '   * @return Amount of tokens left in the allowance\n', '   */\n', '  function remainingTokens() public view returns (uint256) {\n', '    return token.allowance(tokenWallet, this);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract Refundable is Crowdsale {\n', '\n', '  uint256 public available; \n', '  bool public refunding = false;\n', '\n', '  event RefundStatusUpdated();\n', '  event Deposited();\n', '  event Withdraw(uint256 _amount);\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '  \n', '  function deposit() onlyOwner public payable {\n', '    available = available.add(msg.value);\n', '    emit Deposited();\n', '  }\n', '\n', '  function tweakRefundStatus() onlyOwner public {\n', '    refunding = !refunding;\n', '    emit RefundStatusUpdated();\n', '  }\n', '\n', '  \n', '  function refund() public {\n', '    require(refunding);\n', '    uint256 depositedValue = deposited[msg.sender];\n', '    deposited[msg.sender] = 0;\n', '    msg.sender.transfer(depositedValue);\n', '    emit Refunded(msg.sender, depositedValue);\n', '  }\n', '  \n', '  function withDrawBack() onlyOwner public{\n', '      owner.transfer(this.balance);\n', '  }\n', '  \n', '  function Contractbalance() view external returns( uint256){\n', '      return this.balance;\n', '  }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '   /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', 'contract KYCCrowdsale is Ownable{\n', '\n', '    bool public isKYCRequired = false;\n', '\n', '    mapping (bytes32 => address) public whiteListed;\n', '\n', '    function enableKYC() external onlyOwner {\n', '        require(!isKYCRequired); // kyc is not enabled\n', '        isKYCRequired = true;\n', '    }\n', '\n', '    function disableKYC() external onlyOwner {\n', '        require(isKYCRequired); // kyc is enabled\n', '        isKYCRequired = false; \n', '    }\n', '\n', '    //TODO: handle single address can be whiteListed multiple time using unique signed hashes\n', '    function isWhitelistedAddress(bytes32 hash, uint8 v, bytes32 r, bytes32 s) public returns (bool){\n', '        assert( whiteListed[hash] == address(0x0)); // verify hash is unique\n', '        require(owner == ecrecover(hash, v, r, s));\n', '        whiteListed[hash] = msg.sender;\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale is Pausable, KYCCrowdsale{\n', '  using SafeMath for uint256;\n', '    \n', '  // The token interface\n', '  ERC20 public token;\n', '\n', '  // The address of token holder that allowed allowance to contract\n', '  address public tokenWallet;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // token rate in wei\n', '  uint256 public rate;\n', '  \n', '  uint256 public roundOneRate;\n', '  uint256 public roundTwoRate;\n', '  uint256 public defaultBonussRate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  uint256 public tokensSold;\n', '\n', '  uint256 public constant forSale = 16250000;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   * @param releaseTime tokens unlock time\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount, uint256 releaseTime);\n', '\n', '  /**\n', '   * event upon endTime updated\n', '   */\n', '  event EndTimeUpdated();\n', '\n', '  /**\n', '   * EQUI token price updated\n', '   */\n', '  event EQUIPriceUpdated(uint256 oldPrice, uint256 newPrice);\n', '\n', '  /**\n', '   * event for token releasing\n', '   * @param holder who is releasing his tokens\n', '   */\n', '  event TokenReleased(address indexed holder, uint256 amount);\n', '\n', '  constructor() public\n', '   {\n', '    owner = 0xe46d0049D4a4642bC875164bd9293a05dBa523f1;\n', '    startTime = now;\n', '    endTime = 1527811199; //GMT: Thursday, May 31, 2018 11:59:59 PM\n', '    rate = 500000000000000;                     // 1 Token price: 0.0005 Ether == $0.35 @ Ether prie $700\n', '    roundOneRate = (rate.mul(6)).div(10);       // price at 40% discount\n', '    roundTwoRate = (rate.mul(65)).div(100);     // price at 35% discount\n', '    defaultBonussRate = (rate.mul(8)).div(10);  // price at 20% discount\n', '    \n', '    wallet =  0xccB84A750f386bf5A4FC8C29611ad59057968605;\n', '    token = ERC20(0x1b0cD7c0DC07418296585313a816e0Cb953DEa96);\n', '    tokenWallet =  0x4AA48F9cF25eB7d2c425780653c321cfaC458FA4;\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable whenNotPaused {\n', '    require(beneficiary != address(0));\n', '\n', '    validPurchase();\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    tokensSold = tokensSold.add(tokens);\n', '    deposited[msg.sender] = deposited[msg.sender].add(weiAmount);\n', '    updateRoundLimits(tokens);\n', '   \n', '    uint256 lockedFor = assignTokens(beneficiary, tokens);\n', '    emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens, lockedFor);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '  \n', '   uint256 public roundOneLimit = 9500000 ether;\n', '   uint256 public roundTwoLimit = 6750000 ether;\n', '   \n', '  function updateRoundLimits(uint256 _amount) private {\n', '      if (roundOneLimit > 0){\n', '          if(roundOneLimit > _amount){\n', '                roundOneLimit = roundOneLimit.sub(_amount);\n', '                return;\n', '          } else {\n', '              _amount = _amount.sub(roundOneLimit);\n', '              roundOneLimit = 0;\n', '          }\n', '      }\n', '      roundTwoLimit = roundTwoLimit.sub(_amount);\n', '  }\n', '\n', '  function getTokenAmount(uint256 weiAmount) public view returns(uint256) {\n', '  \n', '      uint256 buffer = 0;\n', '      uint256 tokens = 0;\n', '      if(weiAmount < 1 ether)\n', '      \n', '        // 20% disount = $0.28 EQUI Price , default category\n', '        // 1 ETH = 2400 EQUI\n', '        return (weiAmount.div(defaultBonussRate)).mul(1 ether);\n', '\n', '      else if(weiAmount >= 1 ether) {\n', '          \n', '          \n', '          if(roundOneLimit > 0){\n', '              \n', '              uint256 amount = roundOneRate * roundOneLimit;\n', '              \n', '              if (weiAmount > amount){\n', '                  buffer = weiAmount - amount;\n', '                  tokens =  (amount.div(roundOneRate)).mul(1 ether);\n', '              }else{\n', '                  // 40% disount = $0.21 EQUI Price , round one bonuss category\n', '                  // 1 ETH = 3333\n', '                  return (weiAmount.div(roundOneRate)).mul(1 ether);\n', '              }\n', '        \n', '          }\n', '          \n', '          if(buffer > 0){\n', '              uint256 roundTwo = (buffer.div(roundTwoRate)).mul(1 ether);\n', '              return tokens + roundTwo;\n', '          }\n', '          \n', '          return (weiAmount.div(roundTwoRate)).mul(1 ether);\n', '      }\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view {\n', '    require(msg.value != 0);\n', '    require(remainingTokens() > 0,"contract doesn\'t have tokens");\n', '    require(now >= startTime && now <= endTime);\n', '  }\n', '\n', '  function updateEndTime(uint256 newTime) onlyOwner external {\n', '    require(newTime > startTime);\n', '    endTime = newTime;\n', '    emit EndTimeUpdated();\n', '  }\n', '\n', '  function updateEQUIPrice(uint256 weiAmount) onlyOwner external {\n', '    require(weiAmount > 0);\n', '    assert((1 ether) % weiAmount == 0);\n', '    emit EQUIPriceUpdated(rate, weiAmount);\n', '    rate = weiAmount;\n', '    roundOneRate = (rate.mul(6)).div(10);       // price at 40% discount\n', '    roundTwoRate = (rate.mul(65)).div(100);     // price at 35% discount\n', '    defaultBonussRate = (rate.mul(8)).div(10);    // price at 20% discount\n', '  }\n', '\n', '  mapping(address => uint256) balances;\n', '  mapping(address => uint256) internal deposited;\n', '\n', '  struct account{\n', '      uint256[] releaseTime;\n', '      mapping(uint256 => uint256) balance;\n', '  }\n', '  mapping(address => account) ledger;\n', '\n', '\n', '  function assignTokens(address beneficiary, uint256 amount) private returns(uint256 lockedFor){\n', '      lockedFor = 1526278800; //September 30, 2018 11:59:59 PM\n', '\n', '      balances[beneficiary] = balances[beneficiary].add(amount);\n', '\n', '      ledger[beneficiary].releaseTime.push(lockedFor);\n', '      ledger[beneficiary].balance[lockedFor] = amount;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function unlockedBalance(address _owner) public view returns (uint256 amount) {\n', '    for(uint256 i = 0 ; i < ledger[_owner].releaseTime.length; i++){\n', '        uint256 time = ledger[_owner].releaseTime[i];\n', '        if(now >= time) amount +=  ledger[_owner].balance[time];\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers tokens held by timelock to beneficiary.\n', '   */\n', '  function releaseEQUITokens(bytes32 hash, uint8 v, bytes32 r, bytes32 s) public whenNotPaused {\n', '    require(balances[msg.sender] > 0);\n', '\n', '    uint256 amount = 0;\n', '    for(uint8 i = 0 ; i < ledger[msg.sender].releaseTime.length; i++){\n', '        uint256 time = ledger[msg.sender].releaseTime[i];\n', '        if(now >= time && ledger[msg.sender].balance[time] > 0){\n', '            amount = ledger[msg.sender].balance[time];\n', '            ledger[msg.sender].balance[time] = 0;\n', '            continue;\n', '        }\n', '    }\n', '\n', '    if(amount <= 0 || balances[msg.sender] < amount){\n', '        revert();\n', '    }\n', '\n', '    if(isKYCRequired){\n', '        require(isWhitelistedAddress(hash, v, r, s));\n', '        balances[msg.sender] = balances[msg.sender].sub(amount);\n', '        if(!token.transferFrom(tokenWallet,msg.sender,amount)){\n', '            revert();\n', '        }\n', '        emit TokenReleased(msg.sender,amount);\n', '    } else {\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(amount);\n', '        if(!token.transferFrom(tokenWallet,msg.sender,amount)){\n', '            revert();\n', '        }\n', '        emit TokenReleased(msg.sender,amount);\n', '    }\n', '  }\n', '\n', '   /**\n', '   * @dev Checks the amount of tokens left in the allowance.\n', '   * @return Amount of tokens left in the allowance\n', '   */\n', '  function remainingTokens() public view returns (uint256) {\n', '    return token.allowance(tokenWallet, this);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract Refundable is Crowdsale {\n', '\n', '  uint256 public available; \n', '  bool public refunding = false;\n', '\n', '  event RefundStatusUpdated();\n', '  event Deposited();\n', '  event Withdraw(uint256 _amount);\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '  \n', '  function deposit() onlyOwner public payable {\n', '    available = available.add(msg.value);\n', '    emit Deposited();\n', '  }\n', '\n', '  function tweakRefundStatus() onlyOwner public {\n', '    refunding = !refunding;\n', '    emit RefundStatusUpdated();\n', '  }\n', '\n', '  \n', '  function refund() public {\n', '    require(refunding);\n', '    uint256 depositedValue = deposited[msg.sender];\n', '    deposited[msg.sender] = 0;\n', '    msg.sender.transfer(depositedValue);\n', '    emit Refunded(msg.sender, depositedValue);\n', '  }\n', '  \n', '  function withDrawBack() onlyOwner public{\n', '      owner.transfer(this.balance);\n', '  }\n', '  \n', '  function Contractbalance() view external returns( uint256){\n', '      return this.balance;\n', '  }\n', '}']
