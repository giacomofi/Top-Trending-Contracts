['pragma solidity ^0.4.15;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// HODL YOUR COINS HERE!! THE SAFEST WALLET!!\n', '\n', 'contract HODLWallet {\n', '    using SafeMath for uint256;\n', '    \n', '    address internal owner;\n', '    mapping(address => uint256) public balances;\n', '    mapping(address => uint256) public withdrawalCount;\n', '    mapping(address => mapping(address => bool)) public approvals;\n', '    \n', '    uint256 public constant MAX_WITHDRAWAL = 0.002 * 1000000000000000000;\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function HODLWallet(address[] addrs, uint256[] _balances) public payable {\n', '        require(addrs.length == _balances.length);\n', '        \n', '        owner = msg.sender;\n', '        \n', '        for (uint256 i = 0; i < addrs.length; i++) {\n', '            balances[addrs[i]] = _balances[i];\n', '            withdrawalCount[addrs[i]] = 0;\n', '        }\n', '    }\n', '\n', '    function doWithdraw(address from, address to, uint256 amount) internal {\n', '        // only use in emergencies!\n', '        // you can only get a little at a time.\n', '        // we will hodl the rest for you.\n', '        \n', '        require(amount <= MAX_WITHDRAWAL);\n', '        require(balances[from] >= amount);\n', '        require(withdrawalCount[from] < 3);\n', '\n', '        balances[from] = balances[from].sub(amount);\n', '\n', '        to.call.value(amount)();\n', '\n', '        withdrawalCount[from] = withdrawalCount[from].add(1);\n', '    }\n', '    \n', '    function () payable public{\n', '        deposit();\n', '    }\n', '\n', '    function doDeposit(address to) internal {\n', '        require(msg.value > 0);\n', '        \n', '        balances[to] = balances[to].add(msg.value);\n', '    }\n', '    \n', '    function deposit() payable public {\n', '        // deposit as much as you want, my dudes\n', '        doDeposit(msg.sender);\n', '    }\n', '    \n', '    function depositTo(address to) payable public {\n', '        // you can even deposit for someone else!\n', '        doDeposit(to);\n', '    }\n', '    \n', '    function withdraw(uint256 amount) public {\n', '        doWithdraw(msg.sender, msg.sender, amount);\n', '    }\n', '    \n', '    function withdrawTo(address to, uint256 amount) public {\n', '        doWithdraw(msg.sender, to, amount);\n', '    }\n', '    \n', '    function withdrawFor(address from, uint256 amount) public {\n', '        require(approvals[from][msg.sender]);\n', '        doWithdraw(from, msg.sender, amount);\n', '    }\n', '    \n', '    function withdrawForTo(address from, address to, uint256 amount) public {\n', '        require(approvals[from][msg.sender]);\n', '        doWithdraw(from, to, amount);\n', '    }\n', '    \n', '    function destroy() public onlyOwner {\n', '        // we will withdraw for you when we think it&#39;s time to stop HODLing\n', '        // probably in two weeks or so after moon and/or lambo\n', '        \n', '        selfdestruct(owner);\n', '    }\n', '    \n', '    function getBalance(address toCheck) public constant returns (uint256) {\n', '        return balances[toCheck];\n', '    }\n', '    \n', '    function addBalances(address[] addrs, uint256[] _balances) public payable onlyOwner {\n', '        // in case more idio^H^H^H^HHODLers want to join\n', '        \n', '        require(addrs.length == _balances.length);\n', '        for (uint256 i = 0; i < addrs.length; i++) {\n', '            balances[addrs[i]] = _balances[i];\n', '            withdrawalCount[addrs[i]] = 0;\n', '        }\n', '    }\n', '    \n', '    function approve(address toApprove) public {\n', '        // in case you want to do your business from other addresses\n', '        \n', '        require(balances[msg.sender] > 0);\n', '        \n', '        approvals[msg.sender][toApprove] = true;\n', '    }\n', '    \n', '    function unapprove(address toUnapprove) public {\n', '        // in case trusting that address was a bad idea\n', '        \n', '        require(balances[msg.sender] > 0);\n', '        \n', '        approvals[msg.sender][toUnapprove] = false;\n', '    }\n', '}']
['pragma solidity ^0.4.15;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// HODL YOUR COINS HERE!! THE SAFEST WALLET!!\n', '\n', 'contract HODLWallet {\n', '    using SafeMath for uint256;\n', '    \n', '    address internal owner;\n', '    mapping(address => uint256) public balances;\n', '    mapping(address => uint256) public withdrawalCount;\n', '    mapping(address => mapping(address => bool)) public approvals;\n', '    \n', '    uint256 public constant MAX_WITHDRAWAL = 0.002 * 1000000000000000000;\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function HODLWallet(address[] addrs, uint256[] _balances) public payable {\n', '        require(addrs.length == _balances.length);\n', '        \n', '        owner = msg.sender;\n', '        \n', '        for (uint256 i = 0; i < addrs.length; i++) {\n', '            balances[addrs[i]] = _balances[i];\n', '            withdrawalCount[addrs[i]] = 0;\n', '        }\n', '    }\n', '\n', '    function doWithdraw(address from, address to, uint256 amount) internal {\n', '        // only use in emergencies!\n', '        // you can only get a little at a time.\n', '        // we will hodl the rest for you.\n', '        \n', '        require(amount <= MAX_WITHDRAWAL);\n', '        require(balances[from] >= amount);\n', '        require(withdrawalCount[from] < 3);\n', '\n', '        balances[from] = balances[from].sub(amount);\n', '\n', '        to.call.value(amount)();\n', '\n', '        withdrawalCount[from] = withdrawalCount[from].add(1);\n', '    }\n', '    \n', '    function () payable public{\n', '        deposit();\n', '    }\n', '\n', '    function doDeposit(address to) internal {\n', '        require(msg.value > 0);\n', '        \n', '        balances[to] = balances[to].add(msg.value);\n', '    }\n', '    \n', '    function deposit() payable public {\n', '        // deposit as much as you want, my dudes\n', '        doDeposit(msg.sender);\n', '    }\n', '    \n', '    function depositTo(address to) payable public {\n', '        // you can even deposit for someone else!\n', '        doDeposit(to);\n', '    }\n', '    \n', '    function withdraw(uint256 amount) public {\n', '        doWithdraw(msg.sender, msg.sender, amount);\n', '    }\n', '    \n', '    function withdrawTo(address to, uint256 amount) public {\n', '        doWithdraw(msg.sender, to, amount);\n', '    }\n', '    \n', '    function withdrawFor(address from, uint256 amount) public {\n', '        require(approvals[from][msg.sender]);\n', '        doWithdraw(from, msg.sender, amount);\n', '    }\n', '    \n', '    function withdrawForTo(address from, address to, uint256 amount) public {\n', '        require(approvals[from][msg.sender]);\n', '        doWithdraw(from, to, amount);\n', '    }\n', '    \n', '    function destroy() public onlyOwner {\n', "        // we will withdraw for you when we think it's time to stop HODLing\n", '        // probably in two weeks or so after moon and/or lambo\n', '        \n', '        selfdestruct(owner);\n', '    }\n', '    \n', '    function getBalance(address toCheck) public constant returns (uint256) {\n', '        return balances[toCheck];\n', '    }\n', '    \n', '    function addBalances(address[] addrs, uint256[] _balances) public payable onlyOwner {\n', '        // in case more idio^H^H^H^HHODLers want to join\n', '        \n', '        require(addrs.length == _balances.length);\n', '        for (uint256 i = 0; i < addrs.length; i++) {\n', '            balances[addrs[i]] = _balances[i];\n', '            withdrawalCount[addrs[i]] = 0;\n', '        }\n', '    }\n', '    \n', '    function approve(address toApprove) public {\n', '        // in case you want to do your business from other addresses\n', '        \n', '        require(balances[msg.sender] > 0);\n', '        \n', '        approvals[msg.sender][toApprove] = true;\n', '    }\n', '    \n', '    function unapprove(address toUnapprove) public {\n', '        // in case trusting that address was a bad idea\n', '        \n', '        require(balances[msg.sender] > 0);\n', '        \n', '        approvals[msg.sender][toUnapprove] = false;\n', '    }\n', '}']
