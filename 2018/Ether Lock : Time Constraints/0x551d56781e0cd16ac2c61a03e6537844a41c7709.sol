['pragma solidity ^0.4.22;\n', '\n', '// File: contracts/ERC20Interface.sol\n', '\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'interface ERC20 {\n', '    function totalSupply() external view returns (uint supply);\n', '    function balanceOf(address _owner) external view returns (uint balance);\n', '    function transfer(address _to, uint _value) external returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\n', '    function approve(address _spender, uint _value) external returns (bool success);\n', '    function allowance(address _owner, address _spender) external view returns (uint remaining);\n', '    function decimals() external view returns(uint digits);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '// File: contracts/SupplierInterface.sol\n', '\n', 'interface SupplierInterface {\n', '\n', '    function trade(\n', '        ERC20 srcToken,\n', '        uint srcAmount,\n', '        ERC20 destToken,\n', '        address destAddress,\n', '        uint conversionRate,\n', '        bool validate\n', '    )\n', '        external\n', '        payable\n', '        returns(bool);\n', '\n', '    function getConversionRate(ERC20 src, ERC20 dest, uint srcQty, uint blockNumber) external view returns(uint);\n', '}\n', '\n', '// File: contracts/PermissionGroups.sol\n', '\n', 'contract PermissionGroups {\n', '\n', '    address public admin;\n', '    address public pendingAdmin;\n', '    mapping(address=>bool) internal operators;\n', '    mapping(address=>bool) internal quoters;\n', '    address[] internal operatorsGroup;\n', '    address[] internal quotersGroup;\n', '    uint constant internal MAX_GROUP_SIZE = 50;\n', '\n', '    constructor() public {\n', '        admin = msg.sender;\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOperator() {\n', '        require(operators[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    modifier onlyQuoter() {\n', '        require(quoters[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function getOperators () external view returns(address[]) {\n', '        return operatorsGroup;\n', '    }\n', '\n', '    function getQuoters () external view returns(address[]) {\n', '        return quotersGroup;\n', '    }\n', '\n', '    event TransferAdminPending(address pendingAdmin);\n', '\n', '    /**\n', '     * @dev Allows the current admin to set the pendingAdmin address.\n', '     * @param newAdmin The address to transfer ownership to.\n', '     */\n', '    function transferAdmin(address newAdmin) public onlyAdmin {\n', '        require(newAdmin != address(0));\n', '        emit TransferAdminPending(pendingAdmin);\n', '        pendingAdmin = newAdmin;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\n', '     * @param newAdmin The address to transfer ownership to.\n', '     */\n', '    function transferAdminQuickly(address newAdmin) public onlyAdmin {\n', '        require(newAdmin != address(0));\n', '        emit TransferAdminPending(newAdmin);\n', '        emit AdminClaimed(newAdmin, admin);\n', '        admin = newAdmin;\n', '    }\n', '\n', '    event AdminClaimed( address newAdmin, address previousAdmin);\n', '\n', '    /**\n', '     * @dev Allows the pendingAdmin address to finalize the change admin process.\n', '     */\n', '    function claimAdmin() public {\n', '        require(pendingAdmin == msg.sender);\n', '        emit AdminClaimed(pendingAdmin, admin);\n', '        admin = pendingAdmin;\n', '        pendingAdmin = address(0);\n', '    }\n', '\n', '    event OperatorAdded(address newOperator, bool isAdd);\n', '\n', '    function addOperator(address newOperator) public onlyAdmin {\n', '        require(!operators[newOperator]); // prevent duplicates.\n', '        require(operatorsGroup.length < MAX_GROUP_SIZE);\n', '\n', '        emit OperatorAdded(newOperator, true);\n', '        operators[newOperator] = true;\n', '        operatorsGroup.push(newOperator);\n', '    }\n', '\n', '    function removeOperator (address operator) public onlyAdmin {\n', '        require(operators[operator]);\n', '        operators[operator] = false;\n', '\n', '        for (uint i = 0; i < operatorsGroup.length; ++i) {\n', '            if (operatorsGroup[i] == operator) {\n', '                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];\n', '                operatorsGroup.length -= 1;\n', '                emit OperatorAdded(operator, false);\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    event QuoterAdded (address newQuoter, bool isAdd);\n', '\n', '    function addQuoter(address newQuoter) public onlyAdmin {\n', '        require(!quoters[newQuoter]); // prevent duplicates.\n', '        require(quotersGroup.length < MAX_GROUP_SIZE);\n', '\n', '        emit QuoterAdded(newQuoter, true);\n', '        quoters[newQuoter] = true;\n', '        quotersGroup.push(newQuoter);\n', '    }\n', '\n', '    function removeQuoter (address alerter) public onlyAdmin {\n', '        require(quoters[alerter]);\n', '        quoters[alerter] = false;\n', '\n', '        for (uint i = 0; i < quotersGroup.length; ++i) {\n', '            if (quotersGroup[i] == alerter) {\n', '                quotersGroup[i] = quotersGroup[quotersGroup.length - 1];\n', '                quotersGroup.length--;\n', '                emit QuoterAdded(alerter, false);\n', '                break;\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/Withdrawable.sol\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens or ethers\n', ' * @dev This allows to recover any tokens or Ethers received in a contract.\n', ' * This will prevent any accidental loss of tokens.\n', ' */\n', 'contract Withdrawable is PermissionGroups {\n', '\n', '    event TokenWithdraw(ERC20 token, uint amount, address sendTo);\n', '\n', '    /**\n', '     * @dev Withdraw all ERC20 compatible tokens\n', '     * @param token ERC20 The address of the token contract\n', '     */\n', '    function withdrawToken(ERC20 token, uint amount, address sendTo) external onlyAdmin {\n', '        require(token.transfer(sendTo, amount));\n', '        emit TokenWithdraw(token, amount, sendTo);\n', '    }\n', '\n', '    event EtherWithdraw(uint amount, address sendTo);\n', '\n', '    /**\n', '     * @dev Withdraw Ethers\n', '     */\n', '    function withdrawEther(uint amount, address sendTo) external onlyAdmin {\n', '        sendTo.transfer(amount);\n', '        emit EtherWithdraw(amount, sendTo);\n', '    }\n', '}\n', '\n', '// File: contracts/Base.sol\n', '\n', '/**\n', ' * The Base contract does this and that...\n', ' */\n', 'contract Base {\n', '\n', '    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n', '    uint  constant internal PRECISION = (10**18);\n', '    uint  constant internal MAX_QTY   = (10**28); // 10B tokens\n', '    uint  constant internal MAX_RATE  = (PRECISION * 10**6); // up to 1M tokens per ETH\n', '    uint  constant internal MAX_DECIMALS = 18;\n', '    uint  constant internal ETH_DECIMALS = 18;\n', '    mapping(address=>uint) internal decimals;\n', '\n', '\tfunction setDecimals(ERC20 token) internal {\n', '        if (token == ETH_TOKEN_ADDRESS) decimals[token] = ETH_DECIMALS;\n', '        else decimals[token] = token.decimals();\n', '    }\n', '\n', '    function getDecimals(ERC20 token) internal view returns(uint) {\n', '        if (token == ETH_TOKEN_ADDRESS) return ETH_DECIMALS; // save storage access\n', '        uint tokenDecimals = decimals[token];\n', '        // technically, there might be token with decimals 0\n', '        // moreover, very possible that old tokens have decimals 0\n', '        // these tokens will just have higher gas fees.\n', '        if(tokenDecimals == 0) return token.decimals();\n', '\n', '        return tokenDecimals;\n', '    }\n', '\n', '    function calcDstQty(uint srcQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n', '        require(srcQty <= MAX_QTY);\n', '        require(rate <= MAX_RATE);\n', '\n', '        if (dstDecimals >= srcDecimals) {\n', '            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n', '            return (srcQty * rate * (10**(dstDecimals - srcDecimals))) / PRECISION;\n', '        } else {\n', '            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n', '            return (srcQty * rate) / (PRECISION * (10**(srcDecimals - dstDecimals)));\n', '        }\n', '    }\n', '\n', '    function calcSrcQty(uint dstQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n', '        require(dstQty <= MAX_QTY);\n', '        require(rate <= MAX_RATE);\n', '        \n', '        //source quantity is rounded up. to avoid dest quantity being too low.\n', '        uint numerator;\n', '        uint denominator;\n', '        if (srcDecimals >= dstDecimals) {\n', '            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n', '            numerator = (PRECISION * dstQty * (10**(srcDecimals - dstDecimals)));\n', '            denominator = rate;\n', '        } else {\n', '            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n', '            numerator = (PRECISION * dstQty);\n', '            denominator = (rate * (10**(dstDecimals - srcDecimals)));\n', '        }\n', '        return (numerator + denominator - 1) / denominator; //avoid rounding down errors\n', '    }\n', '}\n', '\n', '// File: contracts/WhiteListInterface.sol\n', '\n', 'contract WhiteListInterface {\n', '    function getUserCapInWei(address user) external view returns (uint userCapWei);\n', '}\n', '\n', '// File: contracts/ExpectedRateInterface.sol\n', '\n', 'interface ExpectedRateInterface {\n', '    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) external view\n', '        returns (uint expectedRate, uint slippageRate);\n', '}\n', '\n', '// File: contracts/MartletInstantlyTrader.sol\n', '\n', 'contract MartletInstantlyTrader is Withdrawable, Base {\n', '\n', '    uint public negligibleRateDiff = 10; // basic rate steps will be in 0.01%\n', '    SupplierInterface[] public suppliers;\n', '    mapping(address=>bool) public isSupplier;\n', '    WhiteListInterface public whiteListContract;\n', '    ExpectedRateInterface public expectedRateContract;\n', '    mapping(address=>bool) validateCodeTokens;\n', '    uint                  public maxGasPrice = 50 * 1000 * 1000 * 1000; // 50 gwei\n', '    uint                  internal validBlkNum = 256; \n', '    bool                  public enabled = false; // network is enabled\n', '    mapping(bytes32=>uint) public info; // this is only a UI field for external app.\n', '    mapping(address=>mapping(bytes32=>bool)) public perSupplierListedPairs;\n', '    uint    internal  quoteKey = 0;\n', '\n', '    constructor (address _admin) public {\n', '        require(_admin != address(0));\n', '        admin = _admin;\n', '    }\n', '\n', '    event EtherReceival(address indexed sender, uint amount);\n', '\n', '    /* solhint-disable no-complex-fallback */\n', '    function() public payable {\n', '        require(isSupplier[msg.sender]);\n', '        emit EtherReceival(msg.sender, msg.value);\n', '    }\n', '    /* solhint-enable no-complex-fallback */\n', '\n', '    event LogCode(bytes32 bs);\n', '    event ExecuteTrade(address indexed sender, ERC20 src, ERC20 dest, uint actualSrcAmount, uint actualDestAmount);\n', '\n', '    /// @notice use token address ETH_TOKEN_ADDRESS for ether\n', '    /// @dev makes a trade between src and dest token and send dest token to destAddress\n', '    /// @param src Src token\n', '    /// @param srcAmount amount of src tokens\n', '    /// @param dest   Destination token\n', '    /// @param destAddress Address to send tokens to\n', '    /// @param maxDestAmount A limit on the amount of dest tokens\n', '    /// @param minConversionRate The minimal conversion rate. If actual rate is lower, trade is canceled.\n', '    /// @param rate100 "x".\n', '    /// @param sn "y".\n', '    /// @param code "z"\n', '    /// @return amount of actual dest tokens\n', '    function trade(\n', '        ERC20 src,\n', '        uint srcAmount,\n', '        ERC20 dest,\n', '        address destAddress,\n', '        uint maxDestAmount,\n', '        uint minConversionRate,\n', '        uint rate100,\n', '        uint sn,\n', '        bytes32 code\n', '        \n', '    )\n', '        public\n', '        payable\n', '        returns(uint)\n', '    {\n', '        require(enabled);\n', '        require(validateTradeInput(src, srcAmount, dest, destAddress, rate100, sn, code));\n', '\n', '        uint userSrcBalanceBefore;\n', '        uint userDestBalanceBefore;\n', '\n', '        userSrcBalanceBefore = getBalance(src, msg.sender);\n', '        if (src == ETH_TOKEN_ADDRESS)\n', '            userSrcBalanceBefore += msg.value;\n', '        userDestBalanceBefore = getBalance(dest, destAddress);\n', '\n', '        // emit LogEx(srcAmount, maxDestAmount, minConversionRate);\n', '        // uint actualDestAmount = 24;\n', '        uint actualDestAmount = doTrade(src,\n', '                                        srcAmount,\n', '                                        dest,\n', '                                        destAddress,\n', '                                        maxDestAmount,\n', '                                        minConversionRate,\n', '                                        rate100\n', '                                        );\n', '        require(actualDestAmount > 0);\n', '        require(checkBalance(src, dest, destAddress, userSrcBalanceBefore, userDestBalanceBefore, minConversionRate));\n', '        return actualDestAmount;\n', '}\n', '\n', 'function checkBalance(ERC20 src, ERC20 dest, address destAddress,\n', '    uint userSrcBalanceBefore, \n', '    uint userDestBalanceBefore, \n', '    uint minConversionRate) internal view returns(bool)\n', '{\n', '    uint userSrcBalanceAfter = getBalance(src, msg.sender);\n', '    uint userDestBalanceAfter = getBalance(dest, destAddress);\n', '\n', '    if(userSrcBalanceAfter > userSrcBalanceBefore){\n', '        return false;\n', '    }\n', '    if(userDestBalanceAfter < userDestBalanceBefore){\n', '        return false;\n', '    }\n', '\n', '    return (userDestBalanceAfter - userDestBalanceBefore) >=\n', '        calcDstQty((userSrcBalanceBefore - userSrcBalanceAfter), getDecimals(src), getDecimals(dest), minConversionRate);\n', '}\n', '\n', '    event AddSupplier(SupplierInterface supplier, bool add);\n', '\n', '    /// @notice can be called only by admin\n', '    /// @dev add or deletes a supplier to/from the network.\n', '    /// @param supplier The supplier address.\n', '    /// @param add If true, the add supplier. Otherwise delete supplier.\n', '    function addSupplier(SupplierInterface supplier, bool add) public onlyAdmin {\n', '\n', '        if (add) {\n', '            require(!isSupplier[supplier]);\n', '            suppliers.push(supplier);\n', '            isSupplier[supplier] = true;\n', '            emit AddSupplier(supplier, true);\n', '        } else {\n', '            isSupplier[supplier] = false;\n', '            for (uint i = 0; i < suppliers.length; i++) {\n', '                if (suppliers[i] == supplier) {\n', '                    suppliers[i] = suppliers[suppliers.length - 1];\n', '                    suppliers.length--;\n', '                    emit AddSupplier(supplier, false);\n', '                    break;\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    event ListSupplierPairs(address supplier, ERC20 src, ERC20 dest, bool add);\n', '\n', '    /// @notice can be called only by admin\n', '    /// @dev allow or prevent a specific supplier to trade a pair of tokens\n', '    /// @param supplier The supplier address.\n', '    /// @param src Src token\n', '    /// @param dest Destination token\n', '    /// @param add If true then enable trade, otherwise delist pair.\n', '    function listPairForSupplier(address supplier, ERC20 src, ERC20 dest, bool add) public onlyAdmin {\n', '        (perSupplierListedPairs[supplier])[keccak256(src, dest)] = add;\n', '\n', '        if (src != ETH_TOKEN_ADDRESS) {\n', '            if (add) {\n', '                src.approve(supplier, 2**255); // approve infinity\n', '                // src.approve(supplier, src.balanceOf(msg.sender));\n', '            } else {\n', '                src.approve(supplier, 0);\n', '            }\n', '        }\n', '\n', '        setDecimals(src);\n', '        setDecimals(dest);\n', '\n', '        emit ListSupplierPairs(supplier, src, dest, add);\n', '    }\n', '\n', '    function setParams(\n', '        WhiteListInterface    _whiteList,\n', '        ExpectedRateInterface _expectedRate,\n', '        uint                  _maxGasPrice,\n', '        uint                  _negligibleRateDiff,\n', '        uint                  _validBlkNum\n', '    )\n', '        public\n', '        onlyAdmin\n', '    {\n', '        require(_whiteList != address(0));\n', '        require(_expectedRate != address(0));\n', '        require(_negligibleRateDiff <= 100 * 100); // at most 100%\n', '        require( _validBlkNum > 1 && _validBlkNum < 256);\n', '        \n', '        whiteListContract = _whiteList;\n', '        expectedRateContract = _expectedRate;\n', '        maxGasPrice = _maxGasPrice;\n', '        negligibleRateDiff = _negligibleRateDiff;\n', '        validBlkNum = _validBlkNum;\n', '    }\n', '\n', '    function setEnable(bool _enable) public onlyAdmin {\n', '        if (_enable) {\n', '            require(whiteListContract != address(0));\n', '            require(expectedRateContract != address(0));\n', '        }\n', '        enabled = _enable;\n', '    }\n', '\n', '    function setQuoteKey(uint _quoteKey) public onlyOperator{\n', '        require(_quoteKey > 0, "quoteKey must greater than 0!");\n', '        quoteKey = _quoteKey;\n', '    }\n', '\n', '    function getQuoteKey() public onlyOperator view returns(uint){\n', '        return quoteKey;\n', '    }\n', '\n', '    function setInfo(bytes32 field, uint value) public onlyOperator {\n', '        info[field] = value;\n', '    }\n', '\n', '    /// @dev returns number of suppliers\n', '    /// @return number of suppliers\n', '    function getNumSuppliers() public view returns(uint) {\n', '        return suppliers.length;\n', '    }\n', '\n', '    /// @notice should be called off chain with as much gas as needed\n', '    /// @dev get an array of all suppliers\n', '    /// @return An array of all suppliers\n', '    function getSuppliers() public view returns(SupplierInterface[]) {\n', '        return suppliers;\n', '    }\n', '\n', '    /// @dev get the balance of a user.\n', '    /// @param token The token type\n', '    /// @return The balance\n', '    function getBalance(ERC20 token, address user) public view returns(uint) {\n', '        if (token == ETH_TOKEN_ADDRESS)\n', '            return user.balance;\n', '        else\n', '            return token.balanceOf(user);\n', '    }\n', '\n', '    /// @notice use token address ETH_TOKEN_ADDRESS for ether\n', '    /// @dev best conversion rate for a pair of tokens, if number of suppliers have small differences. randomize\n', '    /// @param src Src token\n', '    /// @param dest Destination token\n', '    /* solhint-disable code-complexity */\n', '    function findBestRate(ERC20 src, ERC20 dest, uint srcQty) public view returns(uint, uint) {\n', '        uint bestRate = 0;\n', '        uint bestSupplier = 0;\n', '        uint numRelevantSuppliers = 0;\n', '        uint numSuppliers = suppliers.length;\n', '        uint[] memory rates = new uint[](numSuppliers);\n', '        uint[] memory supplierCandidates = new uint[](numSuppliers);\n', '\n', '        for (uint i = 0; i < numSuppliers; i++) {\n', '            //list all suppliers that have this token.\n', '            if (!(perSupplierListedPairs[suppliers[i]])[keccak256(src, dest)]) continue;\n', '\n', '            rates[i] = suppliers[i].getConversionRate(src, dest, srcQty, block.number);\n', '\n', '            if (rates[i] > bestRate) {\n', '                //best rate is highest rate\n', '                bestRate = rates[i];\n', '            }\n', '        }\n', '\n', '        if (bestRate > 0) {\n', '            uint random = 0;\n', '            uint smallestRelevantRate = (bestRate * 10000) / (10000 + negligibleRateDiff);\n', '\n', '            for (i = 0; i < numSuppliers; i++) {\n', '                if (rates[i] >= smallestRelevantRate) {\n', '                    supplierCandidates[numRelevantSuppliers++] = i;\n', '                }\n', '            }\n', '\n', '            if (numRelevantSuppliers > 1) {\n', '                //when encountering small rate diff from bestRate. draw from relevant suppliers\n', '                random = uint(blockhash(block.number-1)) % numRelevantSuppliers;\n', '            }\n', '\n', '            bestSupplier = supplierCandidates[random];\n', '            bestRate = rates[bestSupplier];\n', '        }\n', '\n', '        return (bestSupplier, bestRate);\n', '    }\n', '    /* solhint-enable code-complexity */\n', '\n', '    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty)\n', '        public view\n', '        returns (uint expectedRate, uint slippageRate)\n', '    {\n', '        require(expectedRateContract != address(0));\n', '        return expectedRateContract.getExpectedRate(src, dest, srcQty);\n', '    }\n', '\n', '    function getUserCapInWei(address user) public view returns(uint) {\n', '        return whiteListContract.getUserCapInWei(user);\n', '    }\n', '\n', '    // event LogEx(uint no, uint n1, uint n2);\n', '\n', '    function doTrade(\n', '        ERC20 src,\n', '        uint srcAmount,\n', '        ERC20 dest,\n', '        address destAddress,\n', '        uint maxDestAmount,\n', '        uint minConversionRate,\n', '        uint rate100\n', '    )\n', '        internal\n', '        returns(uint)\n', '    {\n', '        require(tx.gasprice <= maxGasPrice);\n', '\n', '        uint supplierInd;\n', '        uint rate;\n', '\n', '        (supplierInd, rate) = findBestRate(src, dest, srcAmount);\n', '        SupplierInterface theSupplier = suppliers[supplierInd];\n', '        require(rate > 0 && rate < MAX_RATE);\n', '        if (validateCodeTokens[src] || validateCodeTokens[dest]){\n', '            require(rate100 > 0 && rate100 >= minConversionRate && rate100 < MAX_RATE);\n', '            rate = rate100;\n', '        }\n', '        else{\n', '            require(rate >= minConversionRate);\n', '        }\n', '\n', '        uint actualSrcAmount = srcAmount;\n', '        uint actualDestAmount = calcDestAmount(src, dest, actualSrcAmount, rate100);\n', '        if (actualDestAmount > maxDestAmount) {\n', '            actualDestAmount = maxDestAmount;\n', '            actualSrcAmount = calcSrcAmount(src, dest, actualDestAmount, rate100);\n', '            require(actualSrcAmount <= srcAmount);\n', '        }\n', '\n', '        // do the trade\n', '        // verify trade size is smaller than user cap\n', '        uint ethAmount;\n', '        if (src == ETH_TOKEN_ADDRESS) {\n', '            ethAmount = actualSrcAmount;\n', '        } else {\n', '            ethAmount = actualDestAmount;\n', '        }\n', '\n', '        require(ethAmount <= getUserCapInWei(msg.sender));\n', '        require(doSupplierTrade(src, actualSrcAmount, dest, destAddress, actualDestAmount, theSupplier, rate, true));\n', '\n', '        if ((actualSrcAmount < srcAmount) && (src == ETH_TOKEN_ADDRESS)) {\n', '            msg.sender.transfer(srcAmount - actualSrcAmount);\n', '        }\n', '\n', '\n', '        emit ExecuteTrade(msg.sender, src, dest, actualSrcAmount, actualDestAmount);\n', '        return actualDestAmount;\n', '    }\n', '\n', '    /// @notice use token address ETH_TOKEN_ADDRESS for ether\n', '    /// @dev do one trade with a supplier\n', '    /// @param src Src token\n', '    /// @param amount amount of src tokens\n', '    /// @param dest   Destination token\n', '    /// @param destAddress Address to send tokens to\n', '    /// @param supplier Supplier to use\n', '    /// @param validate If true, additional validations are applicable\n', '    /// @return true if trade is successful\n', '    function doSupplierTrade(\n', '        ERC20 src,\n', '        uint amount,\n', '        ERC20 dest,\n', '        address destAddress,\n', '        uint expectedDestAmount,\n', '        SupplierInterface supplier,\n', '        uint conversionRate,\n', '        bool validate\n', '    )\n', '        internal\n', '        returns(bool)\n', '    {\n', '        uint callValue = 0;\n', '        \n', '        if (src == ETH_TOKEN_ADDRESS) {\n', '            callValue = amount;\n', '        } else {\n', '            // take src tokens to this contract\n', '            require(src.transferFrom(msg.sender, this, amount));\n', '        }\n', '\n', '        // supplier sends tokens/eth to network. network sends it to destination\n', '\n', '        require(supplier.trade.value(callValue)(src, amount, dest, this, conversionRate, validate));\n', '        emit SupplierTrade(callValue, src, amount, dest, this, conversionRate, validate);\n', '\n', '        if (dest == ETH_TOKEN_ADDRESS) {\n', '            destAddress.transfer(expectedDestAmount);\n', '        } else {\n', '            require(dest.transfer(destAddress, expectedDestAmount));\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    event SupplierTrade(uint v, ERC20 src, uint amnt, ERC20 dest, address destAddress, uint conversionRate, bool validate);\n', '\n', '    function calcDestAmount(ERC20 src, ERC20 dest, uint srcAmount, uint rate) internal view returns(uint) {\n', '        return calcDstQty(srcAmount, getDecimals(src), getDecimals(dest), rate);\n', '    }\n', '\n', '    function calcSrcAmount(ERC20 src, ERC20 dest, uint destAmount, uint rate) internal view returns(uint) {\n', '        return calcSrcQty(destAmount, getDecimals(src), getDecimals(dest), rate);\n', '    }\n', '\n', '    function setValidateCodeTokens(ERC20 token, bool add) public onlyAdmin{\n', '        if (add){\n', '            require(!validateCodeTokens[token]);\n', '            validateCodeTokens[token] = true;\n', '        }\n', '        else{\n', '            require(validateCodeTokens[token]);\n', '            delete validateCodeTokens[token];\n', '        }\n', '    }\n', '\n', '    /// @notice use token address ETH_TOKEN_ADDRESS for ether\n', '    /// @dev checks that user sent ether/tokens to contract before trade\n', '    /// @param src Src token\n', '    /// @param srcAmount amount of src tokens\n', '    /// @return true if input is valid\n', '    function validateTradeInput(ERC20 src, uint srcAmount, ERC20 dest, address destAddress, uint rate, uint sn, bytes32 code) internal view returns(bool) {\n', '        if (validateCodeTokens[src] || validateCodeTokens[dest]){\n', '            if(sn > block.number || block.number - sn > validBlkNum)\n', '            {\n', '                return false;\n', '            }\n', '            if(keccak256(rate, sn, quoteKey) != code){\n', '                return false;\n', '            }\n', '        }\n', '        if ((srcAmount >= MAX_QTY) || (srcAmount == 0) || (destAddress == 0))\n', '            return false;\n', '\n', '        if (src == ETH_TOKEN_ADDRESS) {\n', '            if (msg.value != srcAmount)\n', '                return false;\n', '        } else {\n', '            if ((msg.value != 0) || (src.allowance(msg.sender, this) < srcAmount))\n', '                return false;\n', '        }\n', '\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.22;\n', '\n', '// File: contracts/ERC20Interface.sol\n', '\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'interface ERC20 {\n', '    function totalSupply() external view returns (uint supply);\n', '    function balanceOf(address _owner) external view returns (uint balance);\n', '    function transfer(address _to, uint _value) external returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\n', '    function approve(address _spender, uint _value) external returns (bool success);\n', '    function allowance(address _owner, address _spender) external view returns (uint remaining);\n', '    function decimals() external view returns(uint digits);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '// File: contracts/SupplierInterface.sol\n', '\n', 'interface SupplierInterface {\n', '\n', '    function trade(\n', '        ERC20 srcToken,\n', '        uint srcAmount,\n', '        ERC20 destToken,\n', '        address destAddress,\n', '        uint conversionRate,\n', '        bool validate\n', '    )\n', '        external\n', '        payable\n', '        returns(bool);\n', '\n', '    function getConversionRate(ERC20 src, ERC20 dest, uint srcQty, uint blockNumber) external view returns(uint);\n', '}\n', '\n', '// File: contracts/PermissionGroups.sol\n', '\n', 'contract PermissionGroups {\n', '\n', '    address public admin;\n', '    address public pendingAdmin;\n', '    mapping(address=>bool) internal operators;\n', '    mapping(address=>bool) internal quoters;\n', '    address[] internal operatorsGroup;\n', '    address[] internal quotersGroup;\n', '    uint constant internal MAX_GROUP_SIZE = 50;\n', '\n', '    constructor() public {\n', '        admin = msg.sender;\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOperator() {\n', '        require(operators[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    modifier onlyQuoter() {\n', '        require(quoters[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function getOperators () external view returns(address[]) {\n', '        return operatorsGroup;\n', '    }\n', '\n', '    function getQuoters () external view returns(address[]) {\n', '        return quotersGroup;\n', '    }\n', '\n', '    event TransferAdminPending(address pendingAdmin);\n', '\n', '    /**\n', '     * @dev Allows the current admin to set the pendingAdmin address.\n', '     * @param newAdmin The address to transfer ownership to.\n', '     */\n', '    function transferAdmin(address newAdmin) public onlyAdmin {\n', '        require(newAdmin != address(0));\n', '        emit TransferAdminPending(pendingAdmin);\n', '        pendingAdmin = newAdmin;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\n', '     * @param newAdmin The address to transfer ownership to.\n', '     */\n', '    function transferAdminQuickly(address newAdmin) public onlyAdmin {\n', '        require(newAdmin != address(0));\n', '        emit TransferAdminPending(newAdmin);\n', '        emit AdminClaimed(newAdmin, admin);\n', '        admin = newAdmin;\n', '    }\n', '\n', '    event AdminClaimed( address newAdmin, address previousAdmin);\n', '\n', '    /**\n', '     * @dev Allows the pendingAdmin address to finalize the change admin process.\n', '     */\n', '    function claimAdmin() public {\n', '        require(pendingAdmin == msg.sender);\n', '        emit AdminClaimed(pendingAdmin, admin);\n', '        admin = pendingAdmin;\n', '        pendingAdmin = address(0);\n', '    }\n', '\n', '    event OperatorAdded(address newOperator, bool isAdd);\n', '\n', '    function addOperator(address newOperator) public onlyAdmin {\n', '        require(!operators[newOperator]); // prevent duplicates.\n', '        require(operatorsGroup.length < MAX_GROUP_SIZE);\n', '\n', '        emit OperatorAdded(newOperator, true);\n', '        operators[newOperator] = true;\n', '        operatorsGroup.push(newOperator);\n', '    }\n', '\n', '    function removeOperator (address operator) public onlyAdmin {\n', '        require(operators[operator]);\n', '        operators[operator] = false;\n', '\n', '        for (uint i = 0; i < operatorsGroup.length; ++i) {\n', '            if (operatorsGroup[i] == operator) {\n', '                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];\n', '                operatorsGroup.length -= 1;\n', '                emit OperatorAdded(operator, false);\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    event QuoterAdded (address newQuoter, bool isAdd);\n', '\n', '    function addQuoter(address newQuoter) public onlyAdmin {\n', '        require(!quoters[newQuoter]); // prevent duplicates.\n', '        require(quotersGroup.length < MAX_GROUP_SIZE);\n', '\n', '        emit QuoterAdded(newQuoter, true);\n', '        quoters[newQuoter] = true;\n', '        quotersGroup.push(newQuoter);\n', '    }\n', '\n', '    function removeQuoter (address alerter) public onlyAdmin {\n', '        require(quoters[alerter]);\n', '        quoters[alerter] = false;\n', '\n', '        for (uint i = 0; i < quotersGroup.length; ++i) {\n', '            if (quotersGroup[i] == alerter) {\n', '                quotersGroup[i] = quotersGroup[quotersGroup.length - 1];\n', '                quotersGroup.length--;\n', '                emit QuoterAdded(alerter, false);\n', '                break;\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/Withdrawable.sol\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens or ethers\n', ' * @dev This allows to recover any tokens or Ethers received in a contract.\n', ' * This will prevent any accidental loss of tokens.\n', ' */\n', 'contract Withdrawable is PermissionGroups {\n', '\n', '    event TokenWithdraw(ERC20 token, uint amount, address sendTo);\n', '\n', '    /**\n', '     * @dev Withdraw all ERC20 compatible tokens\n', '     * @param token ERC20 The address of the token contract\n', '     */\n', '    function withdrawToken(ERC20 token, uint amount, address sendTo) external onlyAdmin {\n', '        require(token.transfer(sendTo, amount));\n', '        emit TokenWithdraw(token, amount, sendTo);\n', '    }\n', '\n', '    event EtherWithdraw(uint amount, address sendTo);\n', '\n', '    /**\n', '     * @dev Withdraw Ethers\n', '     */\n', '    function withdrawEther(uint amount, address sendTo) external onlyAdmin {\n', '        sendTo.transfer(amount);\n', '        emit EtherWithdraw(amount, sendTo);\n', '    }\n', '}\n', '\n', '// File: contracts/Base.sol\n', '\n', '/**\n', ' * The Base contract does this and that...\n', ' */\n', 'contract Base {\n', '\n', '    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n', '    uint  constant internal PRECISION = (10**18);\n', '    uint  constant internal MAX_QTY   = (10**28); // 10B tokens\n', '    uint  constant internal MAX_RATE  = (PRECISION * 10**6); // up to 1M tokens per ETH\n', '    uint  constant internal MAX_DECIMALS = 18;\n', '    uint  constant internal ETH_DECIMALS = 18;\n', '    mapping(address=>uint) internal decimals;\n', '\n', '\tfunction setDecimals(ERC20 token) internal {\n', '        if (token == ETH_TOKEN_ADDRESS) decimals[token] = ETH_DECIMALS;\n', '        else decimals[token] = token.decimals();\n', '    }\n', '\n', '    function getDecimals(ERC20 token) internal view returns(uint) {\n', '        if (token == ETH_TOKEN_ADDRESS) return ETH_DECIMALS; // save storage access\n', '        uint tokenDecimals = decimals[token];\n', '        // technically, there might be token with decimals 0\n', '        // moreover, very possible that old tokens have decimals 0\n', '        // these tokens will just have higher gas fees.\n', '        if(tokenDecimals == 0) return token.decimals();\n', '\n', '        return tokenDecimals;\n', '    }\n', '\n', '    function calcDstQty(uint srcQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n', '        require(srcQty <= MAX_QTY);\n', '        require(rate <= MAX_RATE);\n', '\n', '        if (dstDecimals >= srcDecimals) {\n', '            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n', '            return (srcQty * rate * (10**(dstDecimals - srcDecimals))) / PRECISION;\n', '        } else {\n', '            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n', '            return (srcQty * rate) / (PRECISION * (10**(srcDecimals - dstDecimals)));\n', '        }\n', '    }\n', '\n', '    function calcSrcQty(uint dstQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n', '        require(dstQty <= MAX_QTY);\n', '        require(rate <= MAX_RATE);\n', '        \n', '        //source quantity is rounded up. to avoid dest quantity being too low.\n', '        uint numerator;\n', '        uint denominator;\n', '        if (srcDecimals >= dstDecimals) {\n', '            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n', '            numerator = (PRECISION * dstQty * (10**(srcDecimals - dstDecimals)));\n', '            denominator = rate;\n', '        } else {\n', '            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n', '            numerator = (PRECISION * dstQty);\n', '            denominator = (rate * (10**(dstDecimals - srcDecimals)));\n', '        }\n', '        return (numerator + denominator - 1) / denominator; //avoid rounding down errors\n', '    }\n', '}\n', '\n', '// File: contracts/WhiteListInterface.sol\n', '\n', 'contract WhiteListInterface {\n', '    function getUserCapInWei(address user) external view returns (uint userCapWei);\n', '}\n', '\n', '// File: contracts/ExpectedRateInterface.sol\n', '\n', 'interface ExpectedRateInterface {\n', '    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) external view\n', '        returns (uint expectedRate, uint slippageRate);\n', '}\n', '\n', '// File: contracts/MartletInstantlyTrader.sol\n', '\n', 'contract MartletInstantlyTrader is Withdrawable, Base {\n', '\n', '    uint public negligibleRateDiff = 10; // basic rate steps will be in 0.01%\n', '    SupplierInterface[] public suppliers;\n', '    mapping(address=>bool) public isSupplier;\n', '    WhiteListInterface public whiteListContract;\n', '    ExpectedRateInterface public expectedRateContract;\n', '    mapping(address=>bool) validateCodeTokens;\n', '    uint                  public maxGasPrice = 50 * 1000 * 1000 * 1000; // 50 gwei\n', '    uint                  internal validBlkNum = 256; \n', '    bool                  public enabled = false; // network is enabled\n', '    mapping(bytes32=>uint) public info; // this is only a UI field for external app.\n', '    mapping(address=>mapping(bytes32=>bool)) public perSupplierListedPairs;\n', '    uint    internal  quoteKey = 0;\n', '\n', '    constructor (address _admin) public {\n', '        require(_admin != address(0));\n', '        admin = _admin;\n', '    }\n', '\n', '    event EtherReceival(address indexed sender, uint amount);\n', '\n', '    /* solhint-disable no-complex-fallback */\n', '    function() public payable {\n', '        require(isSupplier[msg.sender]);\n', '        emit EtherReceival(msg.sender, msg.value);\n', '    }\n', '    /* solhint-enable no-complex-fallback */\n', '\n', '    event LogCode(bytes32 bs);\n', '    event ExecuteTrade(address indexed sender, ERC20 src, ERC20 dest, uint actualSrcAmount, uint actualDestAmount);\n', '\n', '    /// @notice use token address ETH_TOKEN_ADDRESS for ether\n', '    /// @dev makes a trade between src and dest token and send dest token to destAddress\n', '    /// @param src Src token\n', '    /// @param srcAmount amount of src tokens\n', '    /// @param dest   Destination token\n', '    /// @param destAddress Address to send tokens to\n', '    /// @param maxDestAmount A limit on the amount of dest tokens\n', '    /// @param minConversionRate The minimal conversion rate. If actual rate is lower, trade is canceled.\n', '    /// @param rate100 "x".\n', '    /// @param sn "y".\n', '    /// @param code "z"\n', '    /// @return amount of actual dest tokens\n', '    function trade(\n', '        ERC20 src,\n', '        uint srcAmount,\n', '        ERC20 dest,\n', '        address destAddress,\n', '        uint maxDestAmount,\n', '        uint minConversionRate,\n', '        uint rate100,\n', '        uint sn,\n', '        bytes32 code\n', '        \n', '    )\n', '        public\n', '        payable\n', '        returns(uint)\n', '    {\n', '        require(enabled);\n', '        require(validateTradeInput(src, srcAmount, dest, destAddress, rate100, sn, code));\n', '\n', '        uint userSrcBalanceBefore;\n', '        uint userDestBalanceBefore;\n', '\n', '        userSrcBalanceBefore = getBalance(src, msg.sender);\n', '        if (src == ETH_TOKEN_ADDRESS)\n', '            userSrcBalanceBefore += msg.value;\n', '        userDestBalanceBefore = getBalance(dest, destAddress);\n', '\n', '        // emit LogEx(srcAmount, maxDestAmount, minConversionRate);\n', '        // uint actualDestAmount = 24;\n', '        uint actualDestAmount = doTrade(src,\n', '                                        srcAmount,\n', '                                        dest,\n', '                                        destAddress,\n', '                                        maxDestAmount,\n', '                                        minConversionRate,\n', '                                        rate100\n', '                                        );\n', '        require(actualDestAmount > 0);\n', '        require(checkBalance(src, dest, destAddress, userSrcBalanceBefore, userDestBalanceBefore, minConversionRate));\n', '        return actualDestAmount;\n', '}\n', '\n', 'function checkBalance(ERC20 src, ERC20 dest, address destAddress,\n', '    uint userSrcBalanceBefore, \n', '    uint userDestBalanceBefore, \n', '    uint minConversionRate) internal view returns(bool)\n', '{\n', '    uint userSrcBalanceAfter = getBalance(src, msg.sender);\n', '    uint userDestBalanceAfter = getBalance(dest, destAddress);\n', '\n', '    if(userSrcBalanceAfter > userSrcBalanceBefore){\n', '        return false;\n', '    }\n', '    if(userDestBalanceAfter < userDestBalanceBefore){\n', '        return false;\n', '    }\n', '\n', '    return (userDestBalanceAfter - userDestBalanceBefore) >=\n', '        calcDstQty((userSrcBalanceBefore - userSrcBalanceAfter), getDecimals(src), getDecimals(dest), minConversionRate);\n', '}\n', '\n', '    event AddSupplier(SupplierInterface supplier, bool add);\n', '\n', '    /// @notice can be called only by admin\n', '    /// @dev add or deletes a supplier to/from the network.\n', '    /// @param supplier The supplier address.\n', '    /// @param add If true, the add supplier. Otherwise delete supplier.\n', '    function addSupplier(SupplierInterface supplier, bool add) public onlyAdmin {\n', '\n', '        if (add) {\n', '            require(!isSupplier[supplier]);\n', '            suppliers.push(supplier);\n', '            isSupplier[supplier] = true;\n', '            emit AddSupplier(supplier, true);\n', '        } else {\n', '            isSupplier[supplier] = false;\n', '            for (uint i = 0; i < suppliers.length; i++) {\n', '                if (suppliers[i] == supplier) {\n', '                    suppliers[i] = suppliers[suppliers.length - 1];\n', '                    suppliers.length--;\n', '                    emit AddSupplier(supplier, false);\n', '                    break;\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    event ListSupplierPairs(address supplier, ERC20 src, ERC20 dest, bool add);\n', '\n', '    /// @notice can be called only by admin\n', '    /// @dev allow or prevent a specific supplier to trade a pair of tokens\n', '    /// @param supplier The supplier address.\n', '    /// @param src Src token\n', '    /// @param dest Destination token\n', '    /// @param add If true then enable trade, otherwise delist pair.\n', '    function listPairForSupplier(address supplier, ERC20 src, ERC20 dest, bool add) public onlyAdmin {\n', '        (perSupplierListedPairs[supplier])[keccak256(src, dest)] = add;\n', '\n', '        if (src != ETH_TOKEN_ADDRESS) {\n', '            if (add) {\n', '                src.approve(supplier, 2**255); // approve infinity\n', '                // src.approve(supplier, src.balanceOf(msg.sender));\n', '            } else {\n', '                src.approve(supplier, 0);\n', '            }\n', '        }\n', '\n', '        setDecimals(src);\n', '        setDecimals(dest);\n', '\n', '        emit ListSupplierPairs(supplier, src, dest, add);\n', '    }\n', '\n', '    function setParams(\n', '        WhiteListInterface    _whiteList,\n', '        ExpectedRateInterface _expectedRate,\n', '        uint                  _maxGasPrice,\n', '        uint                  _negligibleRateDiff,\n', '        uint                  _validBlkNum\n', '    )\n', '        public\n', '        onlyAdmin\n', '    {\n', '        require(_whiteList != address(0));\n', '        require(_expectedRate != address(0));\n', '        require(_negligibleRateDiff <= 100 * 100); // at most 100%\n', '        require( _validBlkNum > 1 && _validBlkNum < 256);\n', '        \n', '        whiteListContract = _whiteList;\n', '        expectedRateContract = _expectedRate;\n', '        maxGasPrice = _maxGasPrice;\n', '        negligibleRateDiff = _negligibleRateDiff;\n', '        validBlkNum = _validBlkNum;\n', '    }\n', '\n', '    function setEnable(bool _enable) public onlyAdmin {\n', '        if (_enable) {\n', '            require(whiteListContract != address(0));\n', '            require(expectedRateContract != address(0));\n', '        }\n', '        enabled = _enable;\n', '    }\n', '\n', '    function setQuoteKey(uint _quoteKey) public onlyOperator{\n', '        require(_quoteKey > 0, "quoteKey must greater than 0!");\n', '        quoteKey = _quoteKey;\n', '    }\n', '\n', '    function getQuoteKey() public onlyOperator view returns(uint){\n', '        return quoteKey;\n', '    }\n', '\n', '    function setInfo(bytes32 field, uint value) public onlyOperator {\n', '        info[field] = value;\n', '    }\n', '\n', '    /// @dev returns number of suppliers\n', '    /// @return number of suppliers\n', '    function getNumSuppliers() public view returns(uint) {\n', '        return suppliers.length;\n', '    }\n', '\n', '    /// @notice should be called off chain with as much gas as needed\n', '    /// @dev get an array of all suppliers\n', '    /// @return An array of all suppliers\n', '    function getSuppliers() public view returns(SupplierInterface[]) {\n', '        return suppliers;\n', '    }\n', '\n', '    /// @dev get the balance of a user.\n', '    /// @param token The token type\n', '    /// @return The balance\n', '    function getBalance(ERC20 token, address user) public view returns(uint) {\n', '        if (token == ETH_TOKEN_ADDRESS)\n', '            return user.balance;\n', '        else\n', '            return token.balanceOf(user);\n', '    }\n', '\n', '    /// @notice use token address ETH_TOKEN_ADDRESS for ether\n', '    /// @dev best conversion rate for a pair of tokens, if number of suppliers have small differences. randomize\n', '    /// @param src Src token\n', '    /// @param dest Destination token\n', '    /* solhint-disable code-complexity */\n', '    function findBestRate(ERC20 src, ERC20 dest, uint srcQty) public view returns(uint, uint) {\n', '        uint bestRate = 0;\n', '        uint bestSupplier = 0;\n', '        uint numRelevantSuppliers = 0;\n', '        uint numSuppliers = suppliers.length;\n', '        uint[] memory rates = new uint[](numSuppliers);\n', '        uint[] memory supplierCandidates = new uint[](numSuppliers);\n', '\n', '        for (uint i = 0; i < numSuppliers; i++) {\n', '            //list all suppliers that have this token.\n', '            if (!(perSupplierListedPairs[suppliers[i]])[keccak256(src, dest)]) continue;\n', '\n', '            rates[i] = suppliers[i].getConversionRate(src, dest, srcQty, block.number);\n', '\n', '            if (rates[i] > bestRate) {\n', '                //best rate is highest rate\n', '                bestRate = rates[i];\n', '            }\n', '        }\n', '\n', '        if (bestRate > 0) {\n', '            uint random = 0;\n', '            uint smallestRelevantRate = (bestRate * 10000) / (10000 + negligibleRateDiff);\n', '\n', '            for (i = 0; i < numSuppliers; i++) {\n', '                if (rates[i] >= smallestRelevantRate) {\n', '                    supplierCandidates[numRelevantSuppliers++] = i;\n', '                }\n', '            }\n', '\n', '            if (numRelevantSuppliers > 1) {\n', '                //when encountering small rate diff from bestRate. draw from relevant suppliers\n', '                random = uint(blockhash(block.number-1)) % numRelevantSuppliers;\n', '            }\n', '\n', '            bestSupplier = supplierCandidates[random];\n', '            bestRate = rates[bestSupplier];\n', '        }\n', '\n', '        return (bestSupplier, bestRate);\n', '    }\n', '    /* solhint-enable code-complexity */\n', '\n', '    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty)\n', '        public view\n', '        returns (uint expectedRate, uint slippageRate)\n', '    {\n', '        require(expectedRateContract != address(0));\n', '        return expectedRateContract.getExpectedRate(src, dest, srcQty);\n', '    }\n', '\n', '    function getUserCapInWei(address user) public view returns(uint) {\n', '        return whiteListContract.getUserCapInWei(user);\n', '    }\n', '\n', '    // event LogEx(uint no, uint n1, uint n2);\n', '\n', '    function doTrade(\n', '        ERC20 src,\n', '        uint srcAmount,\n', '        ERC20 dest,\n', '        address destAddress,\n', '        uint maxDestAmount,\n', '        uint minConversionRate,\n', '        uint rate100\n', '    )\n', '        internal\n', '        returns(uint)\n', '    {\n', '        require(tx.gasprice <= maxGasPrice);\n', '\n', '        uint supplierInd;\n', '        uint rate;\n', '\n', '        (supplierInd, rate) = findBestRate(src, dest, srcAmount);\n', '        SupplierInterface theSupplier = suppliers[supplierInd];\n', '        require(rate > 0 && rate < MAX_RATE);\n', '        if (validateCodeTokens[src] || validateCodeTokens[dest]){\n', '            require(rate100 > 0 && rate100 >= minConversionRate && rate100 < MAX_RATE);\n', '            rate = rate100;\n', '        }\n', '        else{\n', '            require(rate >= minConversionRate);\n', '        }\n', '\n', '        uint actualSrcAmount = srcAmount;\n', '        uint actualDestAmount = calcDestAmount(src, dest, actualSrcAmount, rate100);\n', '        if (actualDestAmount > maxDestAmount) {\n', '            actualDestAmount = maxDestAmount;\n', '            actualSrcAmount = calcSrcAmount(src, dest, actualDestAmount, rate100);\n', '            require(actualSrcAmount <= srcAmount);\n', '        }\n', '\n', '        // do the trade\n', '        // verify trade size is smaller than user cap\n', '        uint ethAmount;\n', '        if (src == ETH_TOKEN_ADDRESS) {\n', '            ethAmount = actualSrcAmount;\n', '        } else {\n', '            ethAmount = actualDestAmount;\n', '        }\n', '\n', '        require(ethAmount <= getUserCapInWei(msg.sender));\n', '        require(doSupplierTrade(src, actualSrcAmount, dest, destAddress, actualDestAmount, theSupplier, rate, true));\n', '\n', '        if ((actualSrcAmount < srcAmount) && (src == ETH_TOKEN_ADDRESS)) {\n', '            msg.sender.transfer(srcAmount - actualSrcAmount);\n', '        }\n', '\n', '\n', '        emit ExecuteTrade(msg.sender, src, dest, actualSrcAmount, actualDestAmount);\n', '        return actualDestAmount;\n', '    }\n', '\n', '    /// @notice use token address ETH_TOKEN_ADDRESS for ether\n', '    /// @dev do one trade with a supplier\n', '    /// @param src Src token\n', '    /// @param amount amount of src tokens\n', '    /// @param dest   Destination token\n', '    /// @param destAddress Address to send tokens to\n', '    /// @param supplier Supplier to use\n', '    /// @param validate If true, additional validations are applicable\n', '    /// @return true if trade is successful\n', '    function doSupplierTrade(\n', '        ERC20 src,\n', '        uint amount,\n', '        ERC20 dest,\n', '        address destAddress,\n', '        uint expectedDestAmount,\n', '        SupplierInterface supplier,\n', '        uint conversionRate,\n', '        bool validate\n', '    )\n', '        internal\n', '        returns(bool)\n', '    {\n', '        uint callValue = 0;\n', '        \n', '        if (src == ETH_TOKEN_ADDRESS) {\n', '            callValue = amount;\n', '        } else {\n', '            // take src tokens to this contract\n', '            require(src.transferFrom(msg.sender, this, amount));\n', '        }\n', '\n', '        // supplier sends tokens/eth to network. network sends it to destination\n', '\n', '        require(supplier.trade.value(callValue)(src, amount, dest, this, conversionRate, validate));\n', '        emit SupplierTrade(callValue, src, amount, dest, this, conversionRate, validate);\n', '\n', '        if (dest == ETH_TOKEN_ADDRESS) {\n', '            destAddress.transfer(expectedDestAmount);\n', '        } else {\n', '            require(dest.transfer(destAddress, expectedDestAmount));\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    event SupplierTrade(uint v, ERC20 src, uint amnt, ERC20 dest, address destAddress, uint conversionRate, bool validate);\n', '\n', '    function calcDestAmount(ERC20 src, ERC20 dest, uint srcAmount, uint rate) internal view returns(uint) {\n', '        return calcDstQty(srcAmount, getDecimals(src), getDecimals(dest), rate);\n', '    }\n', '\n', '    function calcSrcAmount(ERC20 src, ERC20 dest, uint destAmount, uint rate) internal view returns(uint) {\n', '        return calcSrcQty(destAmount, getDecimals(src), getDecimals(dest), rate);\n', '    }\n', '\n', '    function setValidateCodeTokens(ERC20 token, bool add) public onlyAdmin{\n', '        if (add){\n', '            require(!validateCodeTokens[token]);\n', '            validateCodeTokens[token] = true;\n', '        }\n', '        else{\n', '            require(validateCodeTokens[token]);\n', '            delete validateCodeTokens[token];\n', '        }\n', '    }\n', '\n', '    /// @notice use token address ETH_TOKEN_ADDRESS for ether\n', '    /// @dev checks that user sent ether/tokens to contract before trade\n', '    /// @param src Src token\n', '    /// @param srcAmount amount of src tokens\n', '    /// @return true if input is valid\n', '    function validateTradeInput(ERC20 src, uint srcAmount, ERC20 dest, address destAddress, uint rate, uint sn, bytes32 code) internal view returns(bool) {\n', '        if (validateCodeTokens[src] || validateCodeTokens[dest]){\n', '            if(sn > block.number || block.number - sn > validBlkNum)\n', '            {\n', '                return false;\n', '            }\n', '            if(keccak256(rate, sn, quoteKey) != code){\n', '                return false;\n', '            }\n', '        }\n', '        if ((srcAmount >= MAX_QTY) || (srcAmount == 0) || (destAddress == 0))\n', '            return false;\n', '\n', '        if (src == ETH_TOKEN_ADDRESS) {\n', '            if (msg.value != srcAmount)\n', '                return false;\n', '        } else {\n', '            if ((msg.value != 0) || (src.allowance(msg.sender, this) < srcAmount))\n', '                return false;\n', '        }\n', '\n', '        return true;\n', '    }\n', '}']
