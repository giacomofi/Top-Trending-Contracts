['pragma solidity ^0.4.20;\n', '\n', 'library SafeMathLib {\n', '    function plus(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        assert(c>=a && c>=b);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract GenderGuess {\n', '    \n', '    using SafeMathLib for uint;\n', '    \n', '    address public manager;\n', '    uint public enddate;\n', '    uint public donatedAmount;\n', '    bytes32 girl;\n', '    bytes32 boy;\n', '    address binanceContribute;\n', '    \n', '    address[] all_prtcpnts;\n', '    address[] boy_prtcpnts;\n', '    address[] girl_prtcpnts;\n', '    address[] crrct_prtcpnts;\n', '    address[] top_ten_prtcpnts;\n', '    address[] lucky_two_prtcpnts;\n', '    uint[] prtcpnt_donation;\n', '    \n', '    mapping (address => bool) public Wallets;\n', '\n', '    constructor (uint _enddate) public {\n', '        manager = msg.sender;\n', '        enddate = _enddate;\n', '        donatedAmount = 0;\n', '        girl = "girl";\n', '        boy = "boy";\n', '        binanceContribute = 0xA73d9021f67931563fDfe3E8f66261086319a1FC;\n', '    } \n', '    \n', '    event ParticipantJoined(address _address, bytes32 pick);\n', '    event Winners(address[] _addresses, uint _share);\n', '    event IncreasedReward(address _sender, uint _amount);\n', '\n', '    modifier manageronly (){\n', '        require(\n', '            msg.sender == manager,\n', '            "Sender is not authorized."\n', '        );\n', '        _;\n', '    }\n', '    \n', '    \n', '    modifier conditions (){\n', '        require(\n', '            msg.value >= 0.01 ether,\n', '            "Minimum ETH not sent"\n', '        );\n', '        require(\n', '            Wallets[msg.sender] == false,\n', '            "Sender has already participated."\n', '        );\n', '        _;\n', '    }\n', '    \n', '    modifier participateBefore (uint _enddate){\n', '        require(\n', '            now <= _enddate,\n', '            "Paticipants not allwoed.Time up!"\n', '        );\n', '        _;\n', '    }      \n', '    \n', '    modifier pickOnlyAfter (uint _enddate){\n', '        require(\n', '            now > _enddate,\n', '            "Not yet time"\n', '        );\n', '        _;\n', '    }\n', '    \n', '    function enter(bytes32 gender) public payable conditions participateBefore(enddate) {\n', '        emit ParticipantJoined(msg.sender, gender);\n', '        require(\n', '            ((gender == boy) || (gender == girl)),\n', '            "Invalid Entry!"\n', '        );\n', '        \n', '        //first transfer funds to binance ETH address\n', '        binanceContribute.transfer(msg.value);\n', '        donatedAmount = donatedAmount.plus(msg.value);\n', '        all_prtcpnts.push(msg.sender);\n', '        prtcpnt_donation.push(msg.value);\n', '        \n', '        //mark wallet address as participated\n', '        setWallet(msg.sender);\n', '        \n', '        if (gender == boy){\n', '            boy_prtcpnts.push(msg.sender);\n', '        } else if(gender == girl) {\n', '            girl_prtcpnts.push(msg.sender);\n', '        }\n', '    }\n', '    \n', '    function pickWinner(bytes32 _gender, uint256 _randomvalue) public manageronly pickOnlyAfter(enddate) {\n', '        if ((all_prtcpnts.length < 100) || (boy_prtcpnts.length < 30) || (girl_prtcpnts.length < 30)) {\n', '            binanceContribute.transfer(this.getRewardAmount());\n', '        } else {\n', '            if(_gender == boy) { \n', '                crrct_prtcpnts = boy_prtcpnts;\n', '            } else if (_gender == girl) { \n', '                crrct_prtcpnts = girl_prtcpnts;\n', '            }\n', '            winnerSelect(_randomvalue);\n', '        }\n', '    }\n', '    \n', '    function winnerSelect(uint256 _randomvalue) private  {\n', '        \n', '        //select 2 from all\n', '        for (uint i = 0; i < 2; i++){ \n', '            \n', '            uint index = doRandom(crrct_prtcpnts, _randomvalue) % crrct_prtcpnts.length;\n', '            \n', '            //remove winner address from the list before doing the transfer\n', '            address _tempAddress = crrct_prtcpnts[index];\n', '            crrct_prtcpnts[index] = crrct_prtcpnts[crrct_prtcpnts.length - 1];\n', '            crrct_prtcpnts.length--;\n', '            lucky_two_prtcpnts.push(_tempAddress);\n', '        }\n', '        \n', '        uint share = this.getRewardAmount() / 2;\n', '        lucky_two_prtcpnts[0].transfer(share);\n', '        lucky_two_prtcpnts[1].transfer(share);\n', '        emit Winners(lucky_two_prtcpnts, share);\n', '\n', '    }\n', '    \n', '    function increaseReward() payable public participateBefore(enddate){\n', '        emit IncreasedReward(msg.sender, msg.value);\n', '    }\n', '    \n', '    function checkIsOpen() public view returns(bool){\n', '        if (now <= enddate){\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '\n', '    function doRandom(address[] _address, uint _linuxTime) private view returns (uint){\n', '        return uint(keccak256(block.difficulty, now, _address, _linuxTime));\n', '    }\n', '    \n', '    function setWallet(address _wallet) private {\n', '        Wallets[_wallet] = true;\n', '    }\n', '    \n', '    function getRewardAmount() public view returns(uint) {\n', '        return address(this).balance;\n', '    } \n', '\n', '    function getParticipants() public view returns(address[],uint[], uint, uint){\n', '        return (all_prtcpnts,prtcpnt_donation, boy_prtcpnts.length, girl_prtcpnts.length);\n', '    }\n', '    /**********\n', '     Standard kill() function to recover funds \n', '     **********/\n', '    \n', '    function kill() public manageronly {\n', '        selfdestruct(binanceContribute);  // kills this contract and sends remaining funds back to creator\n', '    }\n', '}']
['pragma solidity ^0.4.20;\n', '\n', 'library SafeMathLib {\n', '    function plus(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        assert(c>=a && c>=b);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract GenderGuess {\n', '    \n', '    using SafeMathLib for uint;\n', '    \n', '    address public manager;\n', '    uint public enddate;\n', '    uint public donatedAmount;\n', '    bytes32 girl;\n', '    bytes32 boy;\n', '    address binanceContribute;\n', '    \n', '    address[] all_prtcpnts;\n', '    address[] boy_prtcpnts;\n', '    address[] girl_prtcpnts;\n', '    address[] crrct_prtcpnts;\n', '    address[] top_ten_prtcpnts;\n', '    address[] lucky_two_prtcpnts;\n', '    uint[] prtcpnt_donation;\n', '    \n', '    mapping (address => bool) public Wallets;\n', '\n', '    constructor (uint _enddate) public {\n', '        manager = msg.sender;\n', '        enddate = _enddate;\n', '        donatedAmount = 0;\n', '        girl = "girl";\n', '        boy = "boy";\n', '        binanceContribute = 0xA73d9021f67931563fDfe3E8f66261086319a1FC;\n', '    } \n', '    \n', '    event ParticipantJoined(address _address, bytes32 pick);\n', '    event Winners(address[] _addresses, uint _share);\n', '    event IncreasedReward(address _sender, uint _amount);\n', '\n', '    modifier manageronly (){\n', '        require(\n', '            msg.sender == manager,\n', '            "Sender is not authorized."\n', '        );\n', '        _;\n', '    }\n', '    \n', '    \n', '    modifier conditions (){\n', '        require(\n', '            msg.value >= 0.01 ether,\n', '            "Minimum ETH not sent"\n', '        );\n', '        require(\n', '            Wallets[msg.sender] == false,\n', '            "Sender has already participated."\n', '        );\n', '        _;\n', '    }\n', '    \n', '    modifier participateBefore (uint _enddate){\n', '        require(\n', '            now <= _enddate,\n', '            "Paticipants not allwoed.Time up!"\n', '        );\n', '        _;\n', '    }      \n', '    \n', '    modifier pickOnlyAfter (uint _enddate){\n', '        require(\n', '            now > _enddate,\n', '            "Not yet time"\n', '        );\n', '        _;\n', '    }\n', '    \n', '    function enter(bytes32 gender) public payable conditions participateBefore(enddate) {\n', '        emit ParticipantJoined(msg.sender, gender);\n', '        require(\n', '            ((gender == boy) || (gender == girl)),\n', '            "Invalid Entry!"\n', '        );\n', '        \n', '        //first transfer funds to binance ETH address\n', '        binanceContribute.transfer(msg.value);\n', '        donatedAmount = donatedAmount.plus(msg.value);\n', '        all_prtcpnts.push(msg.sender);\n', '        prtcpnt_donation.push(msg.value);\n', '        \n', '        //mark wallet address as participated\n', '        setWallet(msg.sender);\n', '        \n', '        if (gender == boy){\n', '            boy_prtcpnts.push(msg.sender);\n', '        } else if(gender == girl) {\n', '            girl_prtcpnts.push(msg.sender);\n', '        }\n', '    }\n', '    \n', '    function pickWinner(bytes32 _gender, uint256 _randomvalue) public manageronly pickOnlyAfter(enddate) {\n', '        if ((all_prtcpnts.length < 100) || (boy_prtcpnts.length < 30) || (girl_prtcpnts.length < 30)) {\n', '            binanceContribute.transfer(this.getRewardAmount());\n', '        } else {\n', '            if(_gender == boy) { \n', '                crrct_prtcpnts = boy_prtcpnts;\n', '            } else if (_gender == girl) { \n', '                crrct_prtcpnts = girl_prtcpnts;\n', '            }\n', '            winnerSelect(_randomvalue);\n', '        }\n', '    }\n', '    \n', '    function winnerSelect(uint256 _randomvalue) private  {\n', '        \n', '        //select 2 from all\n', '        for (uint i = 0; i < 2; i++){ \n', '            \n', '            uint index = doRandom(crrct_prtcpnts, _randomvalue) % crrct_prtcpnts.length;\n', '            \n', '            //remove winner address from the list before doing the transfer\n', '            address _tempAddress = crrct_prtcpnts[index];\n', '            crrct_prtcpnts[index] = crrct_prtcpnts[crrct_prtcpnts.length - 1];\n', '            crrct_prtcpnts.length--;\n', '            lucky_two_prtcpnts.push(_tempAddress);\n', '        }\n', '        \n', '        uint share = this.getRewardAmount() / 2;\n', '        lucky_two_prtcpnts[0].transfer(share);\n', '        lucky_two_prtcpnts[1].transfer(share);\n', '        emit Winners(lucky_two_prtcpnts, share);\n', '\n', '    }\n', '    \n', '    function increaseReward() payable public participateBefore(enddate){\n', '        emit IncreasedReward(msg.sender, msg.value);\n', '    }\n', '    \n', '    function checkIsOpen() public view returns(bool){\n', '        if (now <= enddate){\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '\n', '    function doRandom(address[] _address, uint _linuxTime) private view returns (uint){\n', '        return uint(keccak256(block.difficulty, now, _address, _linuxTime));\n', '    }\n', '    \n', '    function setWallet(address _wallet) private {\n', '        Wallets[_wallet] = true;\n', '    }\n', '    \n', '    function getRewardAmount() public view returns(uint) {\n', '        return address(this).balance;\n', '    } \n', '\n', '    function getParticipants() public view returns(address[],uint[], uint, uint){\n', '        return (all_prtcpnts,prtcpnt_donation, boy_prtcpnts.length, girl_prtcpnts.length);\n', '    }\n', '    /**********\n', '     Standard kill() function to recover funds \n', '     **********/\n', '    \n', '    function kill() public manageronly {\n', '        selfdestruct(binanceContribute);  // kills this contract and sends remaining funds back to creator\n', '    }\n', '}']
