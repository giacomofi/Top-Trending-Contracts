['pragma solidity ^0.4.18;\n', '\n', 'pragma solidity ^0.4.11;\n', '\n', ' \n', 'contract Token {\n', '\tfunction SetupToken(string tokenName, string tokenSymbol, uint256 tokenSupply) public;\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _amount) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success);\n', '    function approve(address _spender, uint256 _amount) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '}\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Crowdsale *Modded*\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Author: https://github.com/OpenZeppelin/zeppelin-solidity/tree/master/contracts/crowdsale\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive. \n', ' * Modded to use preminted token contract, and graft in capped crowdsale code from the openZepplin github\n', ' */\n', ' \n', ' \n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  Token token;\n', '  address public owner;\n', '  \n', '  // public cap in wei : when initialized, its per ether\n', '  uint256 public cap;\n', '  \n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei : when initialized, its per ether\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '  \n', '  \n', '  // amount of raised money in current tier in wei\n', '  uint256 public tierTotal;\n', '  \n', '  //tier count\n', '  uint256 public tierNum = 0;\n', '  \n', '  /*  Funding Tiers\n', '  *   Tier  Rave/ETH Rave Limit Eth Limit\n', '  *   One\t6000\t2.000.000\t333,3333\n', '  *   Two\t5500\t5.000.000\t909,0909\n', '  *   Three\t5000\t9.000.000\t1800,0000\n', '  *   Four\t4500\t14.000.000\t3111,1111\n', '  *   Five\t4000\t20.000.000\t5000,0000\n', '  */\n', '  \n', '   uint256[5] fundingRate = [6000, 5500, 5000, 4500, 4000]; //Rave per Eth\n', '   uint256[5] fundingLimit = [2000000, 5000000, 9000000, 14000000, 20000000]; //Max Rave Available per tier\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  event FailedTransfer(address indexed to, uint256 value);\n', '  event initialCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _cap, uint256 cap, uint256 _rate, uint256 rate, address _wallet);\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _cap, address _wallet) public {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_cap > 0);\n', '    require(_wallet != address(0));\n', '    \n', '    owner = msg.sender;\n', '    address _tokenAddr = 0x6A09e1b7cC5cb52FfdfC585a8dF51CED7063915C; //Token Contract Address\n', '    token = Token(_tokenAddr);\n', '      \n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate =  fundingRate[tierNum];  \n', '    cap = _cap.mul(1 ether);  \n', '    wallet = _wallet;\n', '    \n', '    initialCrowdsale(_startTime, _endTime, _cap, cap, fundingRate[tierNum], rate, _wallet);\n', '\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be sent in wei\n', '    uint256 tokens = getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    tierTotal = tierTotal.add(weiAmount);\n', '\n', '    // Check balance of contract\n', '    token.transfer(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '    \n', '    forwardFunds();\n', '    \n', '    //upgrade rate tier check\n', '    rateUpgrade(tierTotal);\n', '  }\n', '\n', '  // @return true if crowdsale event has ended & limit has not been reached\n', '  function hasEnded() public view returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    bool timeLimit = now > endTime;\n', '    return capReached || timeLimit;\n', '  }\n', '\n', '\n', '  // If weiAmountRaised is over tier thresholds, then upgrade rave per eth\n', '  function rateUpgrade(uint256 tierAmount) internal {\n', '    uint256 tierEthLimit  = fundingLimit[tierNum].div(fundingRate[tierNum]);\n', '    uint256 tierWeiLimit  = tierEthLimit.mul(1 ether);\n', '    if(tierAmount >= tierWeiLimit) {\n', '        tierNum = tierNum.add(1); //increment tier number\n', '        rate = fundingRate[tierNum]; // set new rate in wei\n', '        tierTotal = 0; //reset to 0 wei\n', '    }\n', ' }\n', '  // Override this method to have a way to add business logic to your crowdsale when buying\n', '  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\n', '        return weiAmount.mul(rate);\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '  \n', '  // @return true if the transaction can buy tokens & within cap & nonzero\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinCap = weiRaised.add(msg.value) <= cap;\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && withinCap && nonZeroPurchase;\n', '  }\n', '  \n', '  function tokensAvailable() public onlyOwner constant returns (uint256) {\n', '    return token.balanceOf(this);\n', '  }\n', '  \n', '  \n', '  function getRate() public onlyOwner constant returns(uint256) {\n', '    return rate;\n', '  }\n', '\n', '  function getWallet() public onlyOwner constant returns(address) {\n', '    return wallet;\n', '  }\n', '  \n', '  function destroy() public onlyOwner payable {\n', '    uint256 balance = tokensAvailable();\n', '    if(balance > 0) {\n', '    token.transfer(owner, balance);\n', '    }\n', '    selfdestruct(owner);\n', '  }\n', '  \n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '}']