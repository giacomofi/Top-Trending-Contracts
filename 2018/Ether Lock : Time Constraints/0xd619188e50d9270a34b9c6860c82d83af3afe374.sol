['pragma solidity ^0.4.23;\n', '\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', 'contract ARPLongTermHolding {\n', '    using SafeERC20 for ERC20;\n', '    using SafeMath for uint256;\n', '    using Math for uint256;\n', '\n', '    // During the first 31 days of deployment, this contract opens for deposit of ARP.\n', '    uint256 public constant DEPOSIT_PERIOD      = 31 days; // = 1 months\n', '\n', '    // 16 months after deposit, user can withdrawal all his/her ARP.\n', '    uint256 public constant WITHDRAWAL_DELAY    = 480 days; // = 16 months\n', '\n', '    // Ower can drain all remaining ARP after 3 years.\n', '    uint256 public constant DRAIN_DELAY         = 1080 days; // = 3 years.\n', '\n', '    // 50% bonus ARP return\n', '    uint256 public constant BONUS_SCALE         = 2;\n', '\n', '    // ERC20 basic token contract being held\n', '    ERC20 public arpToken;\n', '    address public owner;\n', '    uint256 public arpDeposited;\n', '    uint256 public depositStartTime;\n', '    uint256 public depositStopTime;\n', '\n', '    struct Record {\n', '        uint256 amount;\n', '        uint256 timestamp;\n', '    }\n', '\n', '    mapping (address => Record) records;\n', '\n', '    /* \n', '     * EVENTS\n', '     */\n', '\n', '    /// Emitted when all ARP are drained.\n', '    event Drained(uint256 _amount);\n', '\n', '    /// Emitted for each sucuessful deposit.\n', '    uint256 public depositId = 0;\n', '    event Deposit(uint256 _depositId, address indexed _addr, uint256 _amount, uint256 _bonus);\n', '\n', '    /// Emitted for each sucuessful withdrawal.\n', '    uint256 public withdrawId = 0;\n', '    event Withdrawal(uint256 _withdrawId, address indexed _addr, uint256 _amount);\n', '\n', '    /// Initialize the contract\n', '    constructor(ERC20 _arpToken, uint256 _depositStartTime) public {\n', '        arpToken = _arpToken;\n', '        owner = msg.sender;\n', '        depositStartTime = _depositStartTime;\n', '        depositStopTime = _depositStartTime.add(DEPOSIT_PERIOD);\n', '    }\n', '\n', '    /*\n', '     * PUBLIC FUNCTIONS\n', '     */\n', '\n', '    /// Drains ARP.\n', '    function drain() public {\n', '        require(msg.sender == owner);\n', '        // solium-disable-next-line security/no-block-members\n', '        require(now >= depositStartTime.add(DRAIN_DELAY));\n', '\n', '        uint256 balance = arpToken.balanceOf(address(this));\n', '        require(balance > 0);\n', '\n', '        arpToken.safeTransfer(owner, balance);\n', '\n', '        emit Drained(balance);\n', '    }\n', '\n', '    function() public {\n', '        // solium-disable-next-line security/no-block-members\n', '        if (now >= depositStartTime && now < depositStopTime) {\n', '            deposit();\n', '        // solium-disable-next-line security/no-block-members\n', '        } else if (now > depositStopTime){\n', '            withdraw();\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    /// Gets the balance of the specified address.\n', '    function balanceOf(address _owner) view public returns (uint256) {\n', '        return records[_owner].amount;\n', '    }\n', '\n', '    /// Gets the withdrawal timestamp of the specified address.\n', '    function withdrawalTimeOf(address _owner) view public returns (uint256) {\n', '        return records[_owner].timestamp.add(WITHDRAWAL_DELAY);\n', '    }\n', '\n', '    /// Deposits ARP.\n', '    function deposit() private {\n', '        uint256 amount = arpToken\n', '            .balanceOf(msg.sender)\n', '            .min256(arpToken.allowance(msg.sender, address(this)));\n', '        require(amount > 0);\n', '\n', '        uint256 bonus = amount.div(BONUS_SCALE);\n', '\n', '        Record storage record = records[msg.sender];\n', '        record.amount = record.amount.add(amount).add(bonus);\n', '        // solium-disable-next-line security/no-block-members\n', '        record.timestamp = now;\n', '        records[msg.sender] = record;\n', '\n', '        arpDeposited = arpDeposited.add(amount).add(bonus);\n', '\n', '        if (bonus > 0) {\n', '            arpToken.safeTransferFrom(owner, address(this), bonus);\n', '        }\n', '        arpToken.safeTransferFrom(msg.sender, address(this), amount);\n', '\n', '        emit Deposit(depositId++, msg.sender, amount, bonus);\n', '    }\n', '\n', '    /// Withdraws ARP.\n', '    function withdraw() private {\n', '        require(arpDeposited > 0);\n', '\n', '        Record storage record = records[msg.sender];\n', '        require(record.amount > 0);\n', '        // solium-disable-next-line security/no-block-members\n', '        require(now >= record.timestamp.add(WITHDRAWAL_DELAY));\n', '        uint256 amount = record.amount;\n', '        delete records[msg.sender];\n', '\n', '        arpDeposited = arpDeposited.sub(amount);\n', '\n', '        arpToken.safeTransfer(msg.sender, amount);\n', '\n', '        emit Withdrawal(withdrawId++, msg.sender, amount);\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', 'contract ARPLongTermHolding {\n', '    using SafeERC20 for ERC20;\n', '    using SafeMath for uint256;\n', '    using Math for uint256;\n', '\n', '    // During the first 31 days of deployment, this contract opens for deposit of ARP.\n', '    uint256 public constant DEPOSIT_PERIOD      = 31 days; // = 1 months\n', '\n', '    // 16 months after deposit, user can withdrawal all his/her ARP.\n', '    uint256 public constant WITHDRAWAL_DELAY    = 480 days; // = 16 months\n', '\n', '    // Ower can drain all remaining ARP after 3 years.\n', '    uint256 public constant DRAIN_DELAY         = 1080 days; // = 3 years.\n', '\n', '    // 50% bonus ARP return\n', '    uint256 public constant BONUS_SCALE         = 2;\n', '\n', '    // ERC20 basic token contract being held\n', '    ERC20 public arpToken;\n', '    address public owner;\n', '    uint256 public arpDeposited;\n', '    uint256 public depositStartTime;\n', '    uint256 public depositStopTime;\n', '\n', '    struct Record {\n', '        uint256 amount;\n', '        uint256 timestamp;\n', '    }\n', '\n', '    mapping (address => Record) records;\n', '\n', '    /* \n', '     * EVENTS\n', '     */\n', '\n', '    /// Emitted when all ARP are drained.\n', '    event Drained(uint256 _amount);\n', '\n', '    /// Emitted for each sucuessful deposit.\n', '    uint256 public depositId = 0;\n', '    event Deposit(uint256 _depositId, address indexed _addr, uint256 _amount, uint256 _bonus);\n', '\n', '    /// Emitted for each sucuessful withdrawal.\n', '    uint256 public withdrawId = 0;\n', '    event Withdrawal(uint256 _withdrawId, address indexed _addr, uint256 _amount);\n', '\n', '    /// Initialize the contract\n', '    constructor(ERC20 _arpToken, uint256 _depositStartTime) public {\n', '        arpToken = _arpToken;\n', '        owner = msg.sender;\n', '        depositStartTime = _depositStartTime;\n', '        depositStopTime = _depositStartTime.add(DEPOSIT_PERIOD);\n', '    }\n', '\n', '    /*\n', '     * PUBLIC FUNCTIONS\n', '     */\n', '\n', '    /// Drains ARP.\n', '    function drain() public {\n', '        require(msg.sender == owner);\n', '        // solium-disable-next-line security/no-block-members\n', '        require(now >= depositStartTime.add(DRAIN_DELAY));\n', '\n', '        uint256 balance = arpToken.balanceOf(address(this));\n', '        require(balance > 0);\n', '\n', '        arpToken.safeTransfer(owner, balance);\n', '\n', '        emit Drained(balance);\n', '    }\n', '\n', '    function() public {\n', '        // solium-disable-next-line security/no-block-members\n', '        if (now >= depositStartTime && now < depositStopTime) {\n', '            deposit();\n', '        // solium-disable-next-line security/no-block-members\n', '        } else if (now > depositStopTime){\n', '            withdraw();\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    /// Gets the balance of the specified address.\n', '    function balanceOf(address _owner) view public returns (uint256) {\n', '        return records[_owner].amount;\n', '    }\n', '\n', '    /// Gets the withdrawal timestamp of the specified address.\n', '    function withdrawalTimeOf(address _owner) view public returns (uint256) {\n', '        return records[_owner].timestamp.add(WITHDRAWAL_DELAY);\n', '    }\n', '\n', '    /// Deposits ARP.\n', '    function deposit() private {\n', '        uint256 amount = arpToken\n', '            .balanceOf(msg.sender)\n', '            .min256(arpToken.allowance(msg.sender, address(this)));\n', '        require(amount > 0);\n', '\n', '        uint256 bonus = amount.div(BONUS_SCALE);\n', '\n', '        Record storage record = records[msg.sender];\n', '        record.amount = record.amount.add(amount).add(bonus);\n', '        // solium-disable-next-line security/no-block-members\n', '        record.timestamp = now;\n', '        records[msg.sender] = record;\n', '\n', '        arpDeposited = arpDeposited.add(amount).add(bonus);\n', '\n', '        if (bonus > 0) {\n', '            arpToken.safeTransferFrom(owner, address(this), bonus);\n', '        }\n', '        arpToken.safeTransferFrom(msg.sender, address(this), amount);\n', '\n', '        emit Deposit(depositId++, msg.sender, amount, bonus);\n', '    }\n', '\n', '    /// Withdraws ARP.\n', '    function withdraw() private {\n', '        require(arpDeposited > 0);\n', '\n', '        Record storage record = records[msg.sender];\n', '        require(record.amount > 0);\n', '        // solium-disable-next-line security/no-block-members\n', '        require(now >= record.timestamp.add(WITHDRAWAL_DELAY));\n', '        uint256 amount = record.amount;\n', '        delete records[msg.sender];\n', '\n', '        arpDeposited = arpDeposited.sub(amount);\n', '\n', '        arpToken.safeTransfer(msg.sender, amount);\n', '\n', '        emit Withdrawal(withdrawId++, msg.sender, amount);\n', '    }\n', '}']
