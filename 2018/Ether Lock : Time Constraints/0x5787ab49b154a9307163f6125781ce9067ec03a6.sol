['pragma solidity ^0.4.24;\n', '\n', 'interface FoMo3DlongInterface {\n', '      function getBuyPrice()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    ;\n', '  function getTimeLeft()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    ;\n', '  function withdraw() external;\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    \n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract PwnFoMo3D is Owned {\n', '    FoMo3DlongInterface fomo3d;\n', '  constructor() public payable {\n', '     fomo3d  = FoMo3DlongInterface(0x0aD3227eB47597b566EC138b3AfD78cFEA752de5);\n', '  }\n', '  \n', '  function gotake() public  {\n', '    // Link up the fomo3d contract and ensure this whole thing is worth it\n', '    \n', '    // if (fomo3d.getTimeLeft() > 50) {\n', '    //   revert();\n', '    // }\n', '\n', '    address(fomo3d).call.value( fomo3d.getBuyPrice() *2 )();\n', '  }\n', '  \n', '     function withdrawOwner2(uint256 a)  public onlyOwner {\n', '        fomo3d.withdraw();\n', '    }\n', '  \n', '    function withdrawOwner(uint256 a)  public onlyOwner {\n', '        msg.sender.transfer(a);    \n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'interface FoMo3DlongInterface {\n', '      function getBuyPrice()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    ;\n', '  function getTimeLeft()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    ;\n', '  function withdraw() external;\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    \n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract PwnFoMo3D is Owned {\n', '    FoMo3DlongInterface fomo3d;\n', '  constructor() public payable {\n', '     fomo3d  = FoMo3DlongInterface(0x0aD3227eB47597b566EC138b3AfD78cFEA752de5);\n', '  }\n', '  \n', '  function gotake() public  {\n', '    // Link up the fomo3d contract and ensure this whole thing is worth it\n', '    \n', '    // if (fomo3d.getTimeLeft() > 50) {\n', '    //   revert();\n', '    // }\n', '\n', '    address(fomo3d).call.value( fomo3d.getBuyPrice() *2 )();\n', '  }\n', '  \n', '     function withdrawOwner2(uint256 a)  public onlyOwner {\n', '        fomo3d.withdraw();\n', '    }\n', '  \n', '    function withdrawOwner(uint256 a)  public onlyOwner {\n', '        msg.sender.transfer(a);    \n', '    }\n', '}']
