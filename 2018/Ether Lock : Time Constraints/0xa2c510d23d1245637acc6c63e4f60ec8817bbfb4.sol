['pragma solidity ^0.4.25;\n', '\n', '/**\n', '  Info\n', '*/\n', '\n', 'contract Test {\n', '    address constant private PROMO1 = 0x51A2BF880F4db7713E95498833308ffE4D61d080;\n', '\taddress constant private PROMO2 = 0x1e8f7BD53c898625cDc2416ae5f1c446A16dd8D9;\n', '\taddress constant private TECH = 0x36413D58cA47520575889EE3E02E7Bb508b3D1E8;\n', '    uint constant public PROMO_PERCENT1 = 1;\n', '\tuint constant public PROMO_PERCENT2 = 1;\n', '\tuint constant public TECH_PERCENT = 1;\n', '    uint constant public MULTIPLIER = 110;\n', '    \n', '    struct Deposit {\n', '        address depositor; \n', '        uint128 deposit;  \n', '        uint128 expect;   \n', '    }\n', '\n', '    Deposit[] private queue;\n', '    uint public currentReceiverIndex = 0;\n', '\n', '    function () public payable {\n', '        if(msg.value > 0){\n', '            require(gasleft() >= 220000, "We require more gas!"); \n', '            require(msg.value >= 0.01 ether && msg.value <= 0.011 ether); \n', '            \n', '            queue.push(Deposit(msg.sender, uint128(msg.value), uint128(msg.value*MULTIPLIER/100)));\n', '            uint promo1 = msg.value*PROMO_PERCENT1/100;\n', '            PROMO1.send(promo1);\n', '\t\t\tuint promo2 = msg.value*PROMO_PERCENT2/100;\n', '            PROMO2.send(promo2);\n', '\t\t\tuint tech = msg.value*TECH_PERCENT/100;\n', '            TECH.send(tech);\n', '            pay();\n', '        }\n', '    }\n', '\n', '    function pay() private {\n', '        uint128 money = uint128(address(this).balance);\n', '        for(uint i=0; i<queue.length; i++){\n', '            uint idx = currentReceiverIndex + i;\n', '            Deposit storage dep = queue[idx]; \n', '            if(money >= dep.expect){  \n', '                dep.depositor.send(dep.expect); \n', '                money -= dep.expect;            \n', '                delete queue[idx];\n', '            }else{\n', '                dep.depositor.send(money); \n', '                dep.expect -= money;       \n', '                break;                    \n', '            }\n', '            if(gasleft() <= 50000)         \n', '                break;                     \n', '        }\n', '        currentReceiverIndex += i; \n', '    }\n', '\n', '    function getDeposit(uint idx) public view returns (address depositor, uint deposit, uint expect){\n', '        Deposit storage dep = queue[idx];\n', '        return (dep.depositor, dep.deposit, dep.expect);\n', '    }\n', '\n', '    function getDepositsCount(address depositor) public view returns (uint) {\n', '        uint c = 0;\n', '        for(uint i=currentReceiverIndex; i<queue.length; ++i){\n', '            if(queue[i].depositor == depositor)\n', '                c++;\n', '        }\n', '        return c;\n', '    }\n', '\n', '    function getDeposits(address depositor) public view returns (uint[] idxs, uint128[] deposits, uint128[] expects) {\n', '        uint c = getDepositsCount(depositor);\n', '\n', '        idxs = new uint[](c);\n', '        deposits = new uint128[](c);\n', '        expects = new uint128[](c);\n', '\n', '        if(c > 0) {\n', '            uint j = 0;\n', '            for(uint i=currentReceiverIndex; i<queue.length; ++i){\n', '                Deposit storage dep = queue[i];\n', '                if(dep.depositor == depositor){\n', '                    idxs[j] = i;\n', '                    deposits[j] = dep.deposit;\n', '                    expects[j] = dep.expect;\n', '                    j++;\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    function getQueueLength() public view returns (uint) {\n', '        return queue.length - currentReceiverIndex;\n', '    }\n', '\n', '}']