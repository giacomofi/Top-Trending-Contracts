['pragma solidity ^0.4.8;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'contract SafeMath {\n', '  function safeMul(uint256 a, uint256 b)  internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >=a);\n', '    return c;\n', '  }\n', '\n', ' \n', '  \n', '}\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function kill() public {\n', '      if (msg.sender == owner)\n', '          selfdestruct(owner);\n', '  }\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '  bool public paused = false;\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', 'contract richtestkk is SafeMath,Pausable{\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\t  address public owner;\n', '    uint256 public startTime;\n', '    uint256[9] public founderAmounts;\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '\t  mapping (address => uint256) public freezeOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '\t/* This notifies clients about the amount frozen */\n', '    event Freeze(address indexed from, uint256 value);\n', '\n', '\t/* This notifies clients about the amount unfrozen */\n', '    event Unfreeze(address indexed from, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function richtestkk(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        uint8 decimalUnits,\n', '        string tokenSymbol\n', '        ) public {\n', '        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\n', '        totalSupply = initialSupply;                        // Update total supply\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '        decimals = decimalUnits;                            // Amount of decimals for display purposes\n', '\t\t    owner = msg.sender;\n', '        startTime=now;\n', '        founderAmounts = [427*10** uint256(25), 304*10** uint256(25), 217*10** uint256(25), 154*10** uint256(25), 11*10** uint256(25), 78*10** uint256(25), 56*10** uint256(25), 34*10** uint256(25), 2*10** uint256(26)];\n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) public whenNotPaused {\n', '        if (_to == 0x0) revert();                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        if (balanceOf[msg.sender] < _value) revert();           // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); // Check for overflows\n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                     // Subtract from the sender\n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                            // Add the same to the recipient\n', '        emit Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n', '    }\n', '\n', '    function minutestotal() public onlyOwner \n', '    {\n', '       if (now > startTime + 3 days&& founderAmounts[0]>0)\n', '       {\n', '        totalSupply=  SafeMath.safeAdd(totalSupply, founderAmounts[0]);\n', '        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], founderAmounts[0]);\n', '        founderAmounts[0]=0;\n', '        emit  Transfer(0, msg.sender, founderAmounts[0]);\n', '\n', '       }\n', '       if (now > startTime + 6 days&& founderAmounts[1]>0)\n', '       {\n', '        totalSupply=  SafeMath.safeAdd(totalSupply, founderAmounts[1]);\n', '        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], founderAmounts[1]);\n', '        founderAmounts[1]=0;\n', '        emit Transfer(0, msg.sender, founderAmounts[1]);\n', '\n', '       }\n', '        if (now > startTime + 9 days&& founderAmounts[2]>0)\n', '       {\n', '        totalSupply=  SafeMath.safeAdd(totalSupply, founderAmounts[2]);\n', '        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], founderAmounts[2]);\n', '        founderAmounts[2]=0;\n', '        emit Transfer(0, msg.sender, founderAmounts[2]);\n', '       }\n', '\n', '        if (now > startTime + 12 days&& founderAmounts[3]>0)\n', '       {\n', '        totalSupply=  SafeMath.safeAdd(totalSupply, founderAmounts[3]);\n', '        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], founderAmounts[3]);\n', '        founderAmounts[3]=0;\n', '        emit  Transfer(0, msg.sender, founderAmounts[3]);\n', '       }\n', '        if (now > startTime + 15 days&& founderAmounts[4]>0)\n', '       {\n', '        totalSupply=  SafeMath.safeAdd(totalSupply, founderAmounts[4]);\n', '        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], founderAmounts[4]);\n', '        founderAmounts[4]=0;\n', '        emit Transfer(0, msg.sender, founderAmounts[4]);\n', '       }\n', '        if (now > startTime + 18 days&& founderAmounts[5]>0)\n', '       {\n', '        totalSupply=  SafeMath.safeAdd(totalSupply, founderAmounts[5]);\n', '        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], founderAmounts[5]);\n', '        founderAmounts[5]=0;\n', '        emit  Transfer(0, msg.sender, founderAmounts[5]);\n', '       }\n', '        if (now > startTime + 21 days&& founderAmounts[6]>0)\n', '       {\n', '        totalSupply=  SafeMath.safeAdd(totalSupply, founderAmounts[6]);\n', '        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], founderAmounts[6]);\n', '        founderAmounts[6]=0;\n', '        emit  Transfer(0, msg.sender, founderAmounts[6]);\n', '       }\n', '         if (now > startTime + 24 days&& founderAmounts[7]>0)\n', '       {\n', '        totalSupply=  SafeMath.safeAdd(totalSupply, founderAmounts[7]);\n', '        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], founderAmounts[7]);\n', '        founderAmounts[7]=0;\n', '        emit  Transfer(0, msg.sender, founderAmounts[7]);\n', '       }\n', '        if (now > startTime + 27 days&& founderAmounts[8]>0)\n', '       {\n', '        totalSupply=  SafeMath.safeAdd(totalSupply, founderAmounts[8]);\n', '        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], founderAmounts[8]);\n', '        founderAmounts[8]=0;\n', '        emit  Transfer(0, msg.sender, founderAmounts[8]);\n', '       }\n', '    }\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value) public whenNotPaused  returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit  Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool success) {\n', '        if (_to == 0x0) revert();                                // Prevent transfer to 0x0 address. \n', '        if (balanceOf[_from] < _value) revert();                 // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert();  // Check for overflows\n', '        if (_value > allowance[_from][msg.sender]) revert();     // Check allowance\n', '        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);                           // Subtract from the sender\n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                             // Add the same to the recipient\n', '        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '\tfunction freeze(uint256 _value) public whenNotPaused returns (bool success) {\n', '        if (balanceOf[msg.sender] < _value) revert();            // Check if the sender has enough\n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      // Subtract from the sender\n', '        freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender], _value);                                // Updates totalSupply\n', '        emit  Freeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '\tfunction unfreeze(uint256 _value) public whenNotPaused returns (bool success) {\n', '        if (freezeOf[msg.sender] < _value) revert();            // Check if the sender has enough\n', '        freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender], _value);                      // Subtract from the sender\n', '\t\t    balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);\n', '        emit Unfreeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '}']
['pragma solidity ^0.4.8;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'contract SafeMath {\n', '  function safeMul(uint256 a, uint256 b)  internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >=a);\n', '    return c;\n', '  }\n', '\n', ' \n', '  \n', '}\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function kill() public {\n', '      if (msg.sender == owner)\n', '          selfdestruct(owner);\n', '  }\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '  bool public paused = false;\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', 'contract richtestkk is SafeMath,Pausable{\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\t  address public owner;\n', '    uint256 public startTime;\n', '    uint256[9] public founderAmounts;\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '\t  mapping (address => uint256) public freezeOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '\t/* This notifies clients about the amount frozen */\n', '    event Freeze(address indexed from, uint256 value);\n', '\n', '\t/* This notifies clients about the amount unfrozen */\n', '    event Unfreeze(address indexed from, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function richtestkk(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        uint8 decimalUnits,\n', '        string tokenSymbol\n', '        ) public {\n', '        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\n', '        totalSupply = initialSupply;                        // Update total supply\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '        decimals = decimalUnits;                            // Amount of decimals for display purposes\n', '\t\t    owner = msg.sender;\n', '        startTime=now;\n', '        founderAmounts = [427*10** uint256(25), 304*10** uint256(25), 217*10** uint256(25), 154*10** uint256(25), 11*10** uint256(25), 78*10** uint256(25), 56*10** uint256(25), 34*10** uint256(25), 2*10** uint256(26)];\n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) public whenNotPaused {\n', '        if (_to == 0x0) revert();                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        if (balanceOf[msg.sender] < _value) revert();           // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); // Check for overflows\n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                     // Subtract from the sender\n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                            // Add the same to the recipient\n', '        emit Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n', '    }\n', '\n', '    function minutestotal() public onlyOwner \n', '    {\n', '       if (now > startTime + 3 days&& founderAmounts[0]>0)\n', '       {\n', '        totalSupply=  SafeMath.safeAdd(totalSupply, founderAmounts[0]);\n', '        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], founderAmounts[0]);\n', '        founderAmounts[0]=0;\n', '        emit  Transfer(0, msg.sender, founderAmounts[0]);\n', '\n', '       }\n', '       if (now > startTime + 6 days&& founderAmounts[1]>0)\n', '       {\n', '        totalSupply=  SafeMath.safeAdd(totalSupply, founderAmounts[1]);\n', '        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], founderAmounts[1]);\n', '        founderAmounts[1]=0;\n', '        emit Transfer(0, msg.sender, founderAmounts[1]);\n', '\n', '       }\n', '        if (now > startTime + 9 days&& founderAmounts[2]>0)\n', '       {\n', '        totalSupply=  SafeMath.safeAdd(totalSupply, founderAmounts[2]);\n', '        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], founderAmounts[2]);\n', '        founderAmounts[2]=0;\n', '        emit Transfer(0, msg.sender, founderAmounts[2]);\n', '       }\n', '\n', '        if (now > startTime + 12 days&& founderAmounts[3]>0)\n', '       {\n', '        totalSupply=  SafeMath.safeAdd(totalSupply, founderAmounts[3]);\n', '        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], founderAmounts[3]);\n', '        founderAmounts[3]=0;\n', '        emit  Transfer(0, msg.sender, founderAmounts[3]);\n', '       }\n', '        if (now > startTime + 15 days&& founderAmounts[4]>0)\n', '       {\n', '        totalSupply=  SafeMath.safeAdd(totalSupply, founderAmounts[4]);\n', '        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], founderAmounts[4]);\n', '        founderAmounts[4]=0;\n', '        emit Transfer(0, msg.sender, founderAmounts[4]);\n', '       }\n', '        if (now > startTime + 18 days&& founderAmounts[5]>0)\n', '       {\n', '        totalSupply=  SafeMath.safeAdd(totalSupply, founderAmounts[5]);\n', '        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], founderAmounts[5]);\n', '        founderAmounts[5]=0;\n', '        emit  Transfer(0, msg.sender, founderAmounts[5]);\n', '       }\n', '        if (now > startTime + 21 days&& founderAmounts[6]>0)\n', '       {\n', '        totalSupply=  SafeMath.safeAdd(totalSupply, founderAmounts[6]);\n', '        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], founderAmounts[6]);\n', '        founderAmounts[6]=0;\n', '        emit  Transfer(0, msg.sender, founderAmounts[6]);\n', '       }\n', '         if (now > startTime + 24 days&& founderAmounts[7]>0)\n', '       {\n', '        totalSupply=  SafeMath.safeAdd(totalSupply, founderAmounts[7]);\n', '        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], founderAmounts[7]);\n', '        founderAmounts[7]=0;\n', '        emit  Transfer(0, msg.sender, founderAmounts[7]);\n', '       }\n', '        if (now > startTime + 27 days&& founderAmounts[8]>0)\n', '       {\n', '        totalSupply=  SafeMath.safeAdd(totalSupply, founderAmounts[8]);\n', '        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], founderAmounts[8]);\n', '        founderAmounts[8]=0;\n', '        emit  Transfer(0, msg.sender, founderAmounts[8]);\n', '       }\n', '    }\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value) public whenNotPaused  returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit  Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool success) {\n', '        if (_to == 0x0) revert();                                // Prevent transfer to 0x0 address. \n', '        if (balanceOf[_from] < _value) revert();                 // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert();  // Check for overflows\n', '        if (_value > allowance[_from][msg.sender]) revert();     // Check allowance\n', '        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);                           // Subtract from the sender\n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                             // Add the same to the recipient\n', '        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '\tfunction freeze(uint256 _value) public whenNotPaused returns (bool success) {\n', '        if (balanceOf[msg.sender] < _value) revert();            // Check if the sender has enough\n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      // Subtract from the sender\n', '        freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender], _value);                                // Updates totalSupply\n', '        emit  Freeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '\tfunction unfreeze(uint256 _value) public whenNotPaused returns (bool success) {\n', '        if (freezeOf[msg.sender] < _value) revert();            // Check if the sender has enough\n', '        freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender], _value);                      // Subtract from the sender\n', '\t\t    balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);\n', '        emit Unfreeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '}']
