['pragma solidity 0.4.21;\n', '\n', 'interface DreamToken {\n', '    function transfer(address receiver, uint amount) external;\n', '    function transferFrom(address from, address to, uint tokens) external returns (bool success);\n', '    function totalSupply() external constant returns (uint);\n', '}\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '\n', '    function safeMul(uint a, uint b) public pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '\n', '    function safeDiv(uint a, uint b) public pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract Crowdsale is Owned, SafeMath {\n', '    address public escrowAddress;\n', '    uint public totalEthInWei;\n', '    \n', '    uint start = 1529274449;\n', '    uint period = 1;\n', '    uint amountPerEther = 1500;\n', '    uint minAmount = 1e16; // 0.01 ETH\n', '    DreamToken token;\n', '\n', '    function Crowdsale() public {\n', '        escrowAddress = owner;\n', '        token = DreamToken(0xBcd4012cECBbFc7a73EC4a14EBb39406D361a0f5);\n', '    }\n', '\n', '    function setEscrowAddress(address newAddress)\n', '    public onlyOwner returns (bool success) {\n', '        escrowAddress = newAddress;\n', '\n', '        return true;\n', '    }\n', '    \n', '    function setAmountPerEther(uint newAmount)\n', '    public onlyOwner returns (bool success) {\n', '        amountPerEther = newAmount;\n', '\n', '        return true;\n', '    }\n', '    \n', '    function getSaleIsOn()\n', '    public constant returns (bool success) {\n', '        \n', '        return now > start && now < start + period * 13 days;\n', '    }\n', '    \n', '    function() external payable {\n', '        require(getSaleIsOn());\n', '        require(msg.value >= minAmount);\n', '        totalEthInWei = totalEthInWei + msg.value;\n', '        \n', '        if (owner != msg.sender) {\n', '            uint amount = safeDiv(msg.value, 1e10);\n', '            amount = safeMul(amount, amountPerEther);\n', '            token.transferFrom(owner, msg.sender, amount);\n', '            \n', '            //Transfer ether to fundsWallet\n', '            escrowAddress.transfer(msg.value);\n', '            //emit Transfer(msg.sender, _to, _value);\n', '        }\n', '    }\n', '}']
['pragma solidity 0.4.21;\n', '\n', 'interface DreamToken {\n', '    function transfer(address receiver, uint amount) external;\n', '    function transferFrom(address from, address to, uint tokens) external returns (bool success);\n', '    function totalSupply() external constant returns (uint);\n', '}\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '\n', '    function safeMul(uint a, uint b) public pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '\n', '    function safeDiv(uint a, uint b) public pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract Crowdsale is Owned, SafeMath {\n', '    address public escrowAddress;\n', '    uint public totalEthInWei;\n', '    \n', '    uint start = 1529274449;\n', '    uint period = 1;\n', '    uint amountPerEther = 1500;\n', '    uint minAmount = 1e16; // 0.01 ETH\n', '    DreamToken token;\n', '\n', '    function Crowdsale() public {\n', '        escrowAddress = owner;\n', '        token = DreamToken(0xBcd4012cECBbFc7a73EC4a14EBb39406D361a0f5);\n', '    }\n', '\n', '    function setEscrowAddress(address newAddress)\n', '    public onlyOwner returns (bool success) {\n', '        escrowAddress = newAddress;\n', '\n', '        return true;\n', '    }\n', '    \n', '    function setAmountPerEther(uint newAmount)\n', '    public onlyOwner returns (bool success) {\n', '        amountPerEther = newAmount;\n', '\n', '        return true;\n', '    }\n', '    \n', '    function getSaleIsOn()\n', '    public constant returns (bool success) {\n', '        \n', '        return now > start && now < start + period * 13 days;\n', '    }\n', '    \n', '    function() external payable {\n', '        require(getSaleIsOn());\n', '        require(msg.value >= minAmount);\n', '        totalEthInWei = totalEthInWei + msg.value;\n', '        \n', '        if (owner != msg.sender) {\n', '            uint amount = safeDiv(msg.value, 1e10);\n', '            amount = safeMul(amount, amountPerEther);\n', '            token.transferFrom(owner, msg.sender, amount);\n', '            \n', '            //Transfer ether to fundsWallet\n', '            escrowAddress.transfer(msg.value);\n', '            //emit Transfer(msg.sender, _to, _value);\n', '        }\n', '    }\n', '}']
