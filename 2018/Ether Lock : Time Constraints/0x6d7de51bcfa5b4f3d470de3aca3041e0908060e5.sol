['pragma solidity ^0.4.18; \n', '\n', '\n', 'contract CEO_Trader{\n', '    address public ceoAddress;\n', '    address public dev1 = 0x3b6B7E115EF186Aa4151651468e34f0E92084852;\n', '    address public hotPotatoHolder;\n', '    address public lastHotPotatoHolder;\n', '    uint256 public lastBidTime;\n', '    uint256 public contestStartTime;\n', '    uint256 public lastPot;\n', '    mapping (address => uint256) public cantBidUntil;\n', '    Potato[] public potatoes;\n', '    \n', '    uint256 public TIME_TO_COOK=6 hours; \n', '    uint256 public NUM_POTATOES=9;\n', '    uint256 public START_PRICE=0.005 ether;\n', '    uint256 public CONTEST_INTERVAL=12 hours;\n', '    \n', '    /*** DATATYPES ***/\n', '    struct Potato {\n', '        address owner;\n', '        uint256 price;\n', '    }\n', '    \n', '     /// Access modifier for contract owner only functionality\n', '     modifier onlyContractOwner() {\n', '         require(msg.sender == ceoAddress);\n', '        _;\n', '     }\n', '    \n', '    /*** CONSTRUCTOR ***/\n', '    function CEO_Trader() public{\n', '        ceoAddress=msg.sender;\n', '        hotPotatoHolder=0;\n', '        contestStartTime=1520799754;//sunday march 11\n', '        for(uint i = 0; i<NUM_POTATOES; i++){\n', '            Potato memory newpotato=Potato({owner:address(this),price: START_PRICE});\n', '            potatoes.push(newpotato);\n', '        }\n', '    }\n', '    \n', '    /*** PUBLIC FUNCTIONS ***/\n', '    function buyPotato(uint256 index) public payable{\n', '        require(block.timestamp>contestStartTime);\n', '        if(_endContestIfNeeded()){ \n', '\n', '        }\n', '        else{\n', '            Potato storage potato=potatoes[index];\n', '            require(msg.value >= potato.price);\n', '            //allow calling transfer() on these addresses without risking re-entrancy attacks\n', '            require(msg.sender != potato.owner);\n', '            require(msg.sender != ceoAddress);\n', '            uint256 sellingPrice=potato.price;\n', '            uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\n', '            uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 80), 100));\n', '            //20 percent remaining in the contract goes to the pot\n', '            //if the owner is the contract, this is the first purchase, and payment should go to the pot\n', '            if(potato.owner!=address(this)){\n', '                potato.owner.transfer(payment);\n', '            }\n', '            potato.price= SafeMath.div(SafeMath.mul(sellingPrice, 140), 80);\n', '            potato.owner=msg.sender;//transfer ownership\n', '            hotPotatoHolder=msg.sender;//becomes holder with potential to win the pot\n', '            lastBidTime=block.timestamp;\n', '            msg.sender.transfer(purchaseExcess);//returns excess eth\n', '        }\n', '    }\n', '    \n', '    function getBalance() public view returns(uint256 value){\n', '        return this.balance;\n', '    }\n', '    function timePassed() public view returns(uint256 time){\n', '        if(lastBidTime==0){\n', '            return 0;\n', '        }\n', '        return SafeMath.sub(block.timestamp,lastBidTime);\n', '    }\n', '    function timeLeftToContestStart() public view returns(uint256 time){\n', '        if(block.timestamp>contestStartTime){\n', '            return 0;\n', '        }\n', '        return SafeMath.sub(contestStartTime,block.timestamp);\n', '    }\n', '    function timeLeftToCook() public view returns(uint256 time){\n', '        return SafeMath.sub(TIME_TO_COOK,timePassed());\n', '    }\n', '    function contestOver() public view returns(bool){\n', '        return _endContestIfNeeded();\n', '    }\n', '    function payout() public onlyContractOwner {\n', '    ceoAddress.transfer(this.balance);\n', '    }\n', '    \n', '    /*** PRIVATE FUNCTIONS ***/\n', '    function _endContestIfNeeded() private returns(bool){\n', '        if(timePassed()>=TIME_TO_COOK){\n', '            //contest over, refund anything paid\n', '            uint256 devFee = uint256(SafeMath.div(SafeMath.mul(this.balance, 10), 100));\n', '            ceoAddress.transfer(devFee); //To pump winning stock\n', '            dev1.transfer(devFee); //To pump winning stock\n', '            uint256 faucetFee = uint256(SafeMath.div(SafeMath.mul(this.balance, 1), 100));\n', '            msg.sender.transfer(faucetFee); \n', '            msg.sender.transfer(msg.value); \n', '            lastPot=this.balance;\n', '            lastHotPotatoHolder=hotPotatoHolder;\n', '            uint256 potRevard = uint256(SafeMath.div(SafeMath.mul(this.balance, 90), 100));\n', '            hotPotatoHolder.transfer(potRevard);\n', '            hotPotatoHolder=0;\n', '            lastBidTime=0;\n', '            _resetPotatoes();\n', '            _setNewStartTime();\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    function _resetPotatoes() private{\n', '        for(uint i = 0; i<NUM_POTATOES; i++){\n', '            Potato memory newpotato=Potato({owner:address(this),price: START_PRICE});\n', '            potatoes[i]=newpotato;\n', '        }\n', '    }\n', '    function _setNewStartTime() private{\n', '        uint256 start=contestStartTime;\n', '        while(start<block.timestamp){\n', '            start=SafeMath.add(start,CONTEST_INTERVAL);\n', '        }\n', '        contestStartTime=start;\n', '    }\n', '\n', '}\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
['pragma solidity ^0.4.18; \n', '\n', '\n', 'contract CEO_Trader{\n', '    address public ceoAddress;\n', '    address public dev1 = 0x3b6B7E115EF186Aa4151651468e34f0E92084852;\n', '    address public hotPotatoHolder;\n', '    address public lastHotPotatoHolder;\n', '    uint256 public lastBidTime;\n', '    uint256 public contestStartTime;\n', '    uint256 public lastPot;\n', '    mapping (address => uint256) public cantBidUntil;\n', '    Potato[] public potatoes;\n', '    \n', '    uint256 public TIME_TO_COOK=6 hours; \n', '    uint256 public NUM_POTATOES=9;\n', '    uint256 public START_PRICE=0.005 ether;\n', '    uint256 public CONTEST_INTERVAL=12 hours;\n', '    \n', '    /*** DATATYPES ***/\n', '    struct Potato {\n', '        address owner;\n', '        uint256 price;\n', '    }\n', '    \n', '     /// Access modifier for contract owner only functionality\n', '     modifier onlyContractOwner() {\n', '         require(msg.sender == ceoAddress);\n', '        _;\n', '     }\n', '    \n', '    /*** CONSTRUCTOR ***/\n', '    function CEO_Trader() public{\n', '        ceoAddress=msg.sender;\n', '        hotPotatoHolder=0;\n', '        contestStartTime=1520799754;//sunday march 11\n', '        for(uint i = 0; i<NUM_POTATOES; i++){\n', '            Potato memory newpotato=Potato({owner:address(this),price: START_PRICE});\n', '            potatoes.push(newpotato);\n', '        }\n', '    }\n', '    \n', '    /*** PUBLIC FUNCTIONS ***/\n', '    function buyPotato(uint256 index) public payable{\n', '        require(block.timestamp>contestStartTime);\n', '        if(_endContestIfNeeded()){ \n', '\n', '        }\n', '        else{\n', '            Potato storage potato=potatoes[index];\n', '            require(msg.value >= potato.price);\n', '            //allow calling transfer() on these addresses without risking re-entrancy attacks\n', '            require(msg.sender != potato.owner);\n', '            require(msg.sender != ceoAddress);\n', '            uint256 sellingPrice=potato.price;\n', '            uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\n', '            uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 80), 100));\n', '            //20 percent remaining in the contract goes to the pot\n', '            //if the owner is the contract, this is the first purchase, and payment should go to the pot\n', '            if(potato.owner!=address(this)){\n', '                potato.owner.transfer(payment);\n', '            }\n', '            potato.price= SafeMath.div(SafeMath.mul(sellingPrice, 140), 80);\n', '            potato.owner=msg.sender;//transfer ownership\n', '            hotPotatoHolder=msg.sender;//becomes holder with potential to win the pot\n', '            lastBidTime=block.timestamp;\n', '            msg.sender.transfer(purchaseExcess);//returns excess eth\n', '        }\n', '    }\n', '    \n', '    function getBalance() public view returns(uint256 value){\n', '        return this.balance;\n', '    }\n', '    function timePassed() public view returns(uint256 time){\n', '        if(lastBidTime==0){\n', '            return 0;\n', '        }\n', '        return SafeMath.sub(block.timestamp,lastBidTime);\n', '    }\n', '    function timeLeftToContestStart() public view returns(uint256 time){\n', '        if(block.timestamp>contestStartTime){\n', '            return 0;\n', '        }\n', '        return SafeMath.sub(contestStartTime,block.timestamp);\n', '    }\n', '    function timeLeftToCook() public view returns(uint256 time){\n', '        return SafeMath.sub(TIME_TO_COOK,timePassed());\n', '    }\n', '    function contestOver() public view returns(bool){\n', '        return _endContestIfNeeded();\n', '    }\n', '    function payout() public onlyContractOwner {\n', '    ceoAddress.transfer(this.balance);\n', '    }\n', '    \n', '    /*** PRIVATE FUNCTIONS ***/\n', '    function _endContestIfNeeded() private returns(bool){\n', '        if(timePassed()>=TIME_TO_COOK){\n', '            //contest over, refund anything paid\n', '            uint256 devFee = uint256(SafeMath.div(SafeMath.mul(this.balance, 10), 100));\n', '            ceoAddress.transfer(devFee); //To pump winning stock\n', '            dev1.transfer(devFee); //To pump winning stock\n', '            uint256 faucetFee = uint256(SafeMath.div(SafeMath.mul(this.balance, 1), 100));\n', '            msg.sender.transfer(faucetFee); \n', '            msg.sender.transfer(msg.value); \n', '            lastPot=this.balance;\n', '            lastHotPotatoHolder=hotPotatoHolder;\n', '            uint256 potRevard = uint256(SafeMath.div(SafeMath.mul(this.balance, 90), 100));\n', '            hotPotatoHolder.transfer(potRevard);\n', '            hotPotatoHolder=0;\n', '            lastBidTime=0;\n', '            _resetPotatoes();\n', '            _setNewStartTime();\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    function _resetPotatoes() private{\n', '        for(uint i = 0; i<NUM_POTATOES; i++){\n', '            Potato memory newpotato=Potato({owner:address(this),price: START_PRICE});\n', '            potatoes[i]=newpotato;\n', '        }\n', '    }\n', '    function _setNewStartTime() private{\n', '        uint256 start=contestStartTime;\n', '        while(start<block.timestamp){\n', '            start=SafeMath.add(start,CONTEST_INTERVAL);\n', '        }\n', '        contestStartTime=start;\n', '    }\n', '\n', '}\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
