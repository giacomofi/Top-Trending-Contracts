['pragma solidity 0.4.24;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function decimals() public view returns (uint);\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract TokenLocker is Ownable {\n', '    \n', '    ERC20 public token = ERC20(0x611171923b84185e9328827CFAaE6630481eCc7a); // STM address\n', '    \n', '    // timestamp when token release is enabled\n', '    uint256 public releaseTimeFund = 1537833600; // 25 сентября 2018\n', '    uint256 public releaseTimeTeamAdvisorsPartners = 1552348800; // 12 марта 2019\n', '    \n', '    address public ReserveFund = 0xC5fed49Be1F6c3949831a06472aC5AB271AF89BD; // 18 600 000\n', '    uint public ReserveFundAmount = 18600000 ether;\n', '    \n', '    address public AdvisorsPartners = 0x5B5521E9D795CA083eF928A58393B8f7FF95e098; // 3 720 000\n', '    uint public AdvisorsPartnersAmount = 3720000 ether;\n', '    \n', '    address public Team = 0x556dB38b73B97954960cA72580EbdAc89327808E; // 4 650 000\n', '    uint public TeamAmount = 4650000 ether;\n', '    \n', '    function unlockFund () public onlyOwner {\n', '        require(releaseTimeFund <= block.timestamp);\n', '        require(ReserveFundAmount > 0);\n', '        uint tokenBalance = token.balanceOf(this);\n', '        require(tokenBalance >= ReserveFundAmount);\n', '        \n', '        if (token.transfer(ReserveFund, ReserveFundAmount)) {\n', '            ReserveFundAmount = 0;\n', '        }\n', '    }\n', '    \n', '    function unlockTeamAdvisorsPartnersTokens () public onlyOwner {\n', '        require(releaseTimeTeamAdvisorsPartners <= block.timestamp);\n', '        require(AdvisorsPartnersAmount > 0);\n', '        require(TeamAmount > 0);\n', '        uint tokenBalance = token.balanceOf(this);\n', '        require(tokenBalance >= AdvisorsPartnersAmount + TeamAmount);\n', '        \n', '        if (token.transfer(AdvisorsPartners, AdvisorsPartnersAmount)) {\n', '            AdvisorsPartnersAmount = 0;\n', '        }\n', '        \n', '        if (token.transfer(Team, TeamAmount)) {\n', '            TeamAmount = 0;\n', '        }\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function decimals() public view returns (uint);\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract TokenLocker is Ownable {\n', '    \n', '    ERC20 public token = ERC20(0x611171923b84185e9328827CFAaE6630481eCc7a); // STM address\n', '    \n', '    // timestamp when token release is enabled\n', '    uint256 public releaseTimeFund = 1537833600; // 25 сентября 2018\n', '    uint256 public releaseTimeTeamAdvisorsPartners = 1552348800; // 12 марта 2019\n', '    \n', '    address public ReserveFund = 0xC5fed49Be1F6c3949831a06472aC5AB271AF89BD; // 18 600 000\n', '    uint public ReserveFundAmount = 18600000 ether;\n', '    \n', '    address public AdvisorsPartners = 0x5B5521E9D795CA083eF928A58393B8f7FF95e098; // 3 720 000\n', '    uint public AdvisorsPartnersAmount = 3720000 ether;\n', '    \n', '    address public Team = 0x556dB38b73B97954960cA72580EbdAc89327808E; // 4 650 000\n', '    uint public TeamAmount = 4650000 ether;\n', '    \n', '    function unlockFund () public onlyOwner {\n', '        require(releaseTimeFund <= block.timestamp);\n', '        require(ReserveFundAmount > 0);\n', '        uint tokenBalance = token.balanceOf(this);\n', '        require(tokenBalance >= ReserveFundAmount);\n', '        \n', '        if (token.transfer(ReserveFund, ReserveFundAmount)) {\n', '            ReserveFundAmount = 0;\n', '        }\n', '    }\n', '    \n', '    function unlockTeamAdvisorsPartnersTokens () public onlyOwner {\n', '        require(releaseTimeTeamAdvisorsPartners <= block.timestamp);\n', '        require(AdvisorsPartnersAmount > 0);\n', '        require(TeamAmount > 0);\n', '        uint tokenBalance = token.balanceOf(this);\n', '        require(tokenBalance >= AdvisorsPartnersAmount + TeamAmount);\n', '        \n', '        if (token.transfer(AdvisorsPartners, AdvisorsPartnersAmount)) {\n', '            AdvisorsPartnersAmount = 0;\n', '        }\n', '        \n', '        if (token.transfer(Team, TeamAmount)) {\n', '            TeamAmount = 0;\n', '        }\n', '    }\n', '}']
