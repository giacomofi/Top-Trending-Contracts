['pragma solidity ^0.4.15;\n', '\n', 'contract Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', 'contract AbstractSingularDTVToken is Token {\n', '\n', '}\n', '\n', '\n', '/// @title Fund contract - Implements reward distribution.\n', '/// @author Stefan George - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="dfacabbab9beb1f1b8bab0adb8ba9fbcb0b1acbab1aca6acf1b1baab">[email&#160;protected]</a>>\n', '/// @author Milad Mostavi - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="a2cfcbcec3c68ccfcdd1d6c3d4cbe2c1cdccd1c7ccd1dbd18cccc7d6">[email&#160;protected]</a>>\n', 'contract SingularDTVFund {\n', '    string public version = "0.1.0";\n', '\n', '    /*\n', '     *  External contracts\n', '     */\n', '    AbstractSingularDTVToken public singularDTVToken;\n', '\n', '    /*\n', '     *  Storage\n', '     */\n', '    address public owner;\n', '    uint public totalReward;\n', '\n', '    // User&#39;s address => Reward at time of withdraw\n', '    mapping (address => uint) public rewardAtTimeOfWithdraw;\n', '\n', '    // User&#39;s address => Reward which can be withdrawn\n', '    mapping (address => uint) public owed;\n', '\n', '    modifier onlyOwner() {\n', '        // Only guard is allowed to do this action.\n', '        if (msg.sender != owner) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '    /*\n', '     *  Contract functions\n', '     */\n', '    /// @dev Deposits reward. Returns success.\n', '    function depositReward()\n', '        public\n', '        payable\n', '        returns (bool)\n', '    {\n', '        totalReward += msg.value;\n', '        return true;\n', '    }\n', '\n', '    /// @dev Withdraws reward for user. Returns reward.\n', '    /// @param forAddress user&#39;s address.\n', '    function calcReward(address forAddress) private returns (uint) {\n', '        return singularDTVToken.balanceOf(forAddress) * (totalReward - rewardAtTimeOfWithdraw[forAddress]) / singularDTVToken.totalSupply();\n', '    }\n', '\n', '    /// @dev Withdraws reward for user. Returns reward.\n', '    function withdrawReward()\n', '        public\n', '        returns (uint)\n', '    {\n', '        uint value = calcReward(msg.sender) + owed[msg.sender];\n', '        rewardAtTimeOfWithdraw[msg.sender] = totalReward;\n', '        owed[msg.sender] = 0;\n', '        if (value > 0 && !msg.sender.send(value)) {\n', '            revert();\n', '        }\n', '        return value;\n', '    }\n', '\n', '    /// @dev Credits reward to owed balance.\n', '    /// @param forAddress user&#39;s address.\n', '    function softWithdrawRewardFor(address forAddress)\n', '        external\n', '        returns (uint)\n', '    {\n', '        uint value = calcReward(forAddress);\n', '        rewardAtTimeOfWithdraw[forAddress] = totalReward;\n', '        owed[forAddress] += value;\n', '        return value;\n', '    }\n', '\n', '    /// @dev Setup function sets external token address.\n', '    /// @param singularDTVTokenAddress Token address.\n', '    function setup(address singularDTVTokenAddress)\n', '        external\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        if (address(singularDTVToken) == 0) {\n', '            singularDTVToken = AbstractSingularDTVToken(singularDTVTokenAddress);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /// @dev Contract constructor function sets guard address.\n', '    function SingularDTVFund() {\n', '        // Set owner address\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /// @dev Fallback function acts as depositReward()\n', '    function ()\n', '        public\n', '        payable\n', '    {\n', '        if (msg.value == 0) {\n', '            withdrawReward();\n', '        } else {\n', '            depositReward();\n', '        }\n', '    }\n', '}']