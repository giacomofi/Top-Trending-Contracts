['/*! mytilcoinstorage.sol | (c) 2018 Develop by BelovITLab LLC (smartcontract.ru), author @stupidlovejoy | License: MIT */\n', '\n', 'pragma solidity 0.4.21;\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    modifier onlyOwner() { require(msg.sender == owner); _; }\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        owner = newOwner;\n', '        OwnershipTransferred(owner, newOwner);\n', '    }\n', '}\n', '\n', 'contract Manageable is Ownable {\n', '    mapping(address => bool) public managers;\n', '\n', '    event ManagerAdded(address indexed manager);\n', '    event ManagerRemoved(address indexed manager);\n', '\n', '    modifier onlyManager() { require(managers[msg.sender]); _; }\n', '\n', '    function addManager(address _manager) onlyOwner public {\n', '        require(_manager != address(0));\n', '\n', '        managers[_manager] = true;\n', '\n', '        ManagerAdded(_manager);\n', '    }\n', '\n', '    function removeManager(address _manager) onlyOwner public {\n', '        require(_manager != address(0));\n', '\n', '        managers[_manager] = false;\n', '\n', '        ManagerRemoved(_manager);\n', '    }\n', '}\n', '\n', 'contract TilcoinStorage is Manageable {\n', '    struct Picture {\n', '        string hash;\n', '        uint32 rows;\n', '        uint32 cols;\n', '        uint32 width;\n', '        uint32 height;\n', '        string image;\n', '        string name;\n', '        string author;\n', '    }\n', '\n', '    struct Segment {\n', '        uint32 row;\n', '        uint32 col;\n', '        string hash;\n', '        string image;\n', '        string email;\n', '        string login;\n', '    }\n', '    \n', '    mapping(bytes32 => Picture) public pictures;\n', '    mapping(bytes32 => mapping(uint32 => mapping(uint32 => Segment))) public segments;\n', '\n', '    event AddPicture(bytes32 indexed hash, uint32 rows, uint32 cols, uint32 width, uint32 height, string image, string name, string author);\n', '    event SetSegment(bytes32 indexed picture, uint32 indexed row, uint32 indexed col, bytes32 hash, string image);\n', '    event SegmentOwner(bytes32 indexed picture, uint32 indexed row, uint32 indexed col, string email, string login);\n', '\n', '    function TilcoinStorage() public {\n', '        addManager(msg.sender);\n', '        addManager(0x209eba96c917871f78671a3ed3503ecc4144495c);\n', '    }\n', '\n', '    function addPicture(string _hash, uint32 _rows, uint32 _cols, uint32 _width, uint32 _height, string _image, string _name, string _author) onlyManager public returns(bool success) {\n', '        bytes32 key = str_to_bytes32(_hash);\n', '\n', '        require(!(pictures[key].rows > 0));\n', '        require(_rows > 0 && _cols > 0 && _width > 0 && _height > 0);\n', '        \n', '        pictures[key] = Picture({\n', '            hash: _hash,\n', '            rows: _rows,\n', '            cols: _cols,\n', '            width: _width,\n', '            height: _height,\n', '            image: _image,\n', '            name: _name,\n', '            author: _author\n', '        });\n', '\n', '        AddPicture(key, _rows, _cols, _width, _height, _image, _name, _author);\n', '\n', '        return true;\n', '    }\n', '\n', '    function setSegment(string _picture, uint32 _row, uint32 _col, string _hash, string _image, string _email, string _login) onlyManager public returns(bool success) {\n', '        bytes32 key = str_to_bytes32(_picture);\n', '\n', '        require(pictures[key].rows > 0);\n', '        require(_row > 0 && _col > 0 && _row <= pictures[key].rows && _col <= pictures[key].cols);\n', '        require(!(segments[key][_row][_col].row > 0));\n', '        \n', '        segments[key][_row][_col] = Segment({\n', '            row: _row,\n', '            col: _col,\n', '            hash: _hash,\n', '            image: _image,\n', '            email: _email,\n', '            login: _login\n', '        });\n', '\n', '        SetSegment(key, _row, _col, str_to_bytes32(_hash), _image);\n', '        SegmentOwner(key, _row, _col, _email, _login);\n', '\n', '        return true;\n', '    }\n', '\n', '    function setSegmentOwner(string _picture, uint32 _row, uint32 _col, string _email, string _login) onlyManager public returns(bool success) {\n', '        bytes32 key = str_to_bytes32(_picture);\n', '\n', '        require(pictures[key].rows > 0);\n', '        require(_row > 0 && _col > 0 && _row <= pictures[key].rows && _col <= pictures[key].cols);\n', '        require(segments[key][_row][_col].row > 0);\n', '        \n', '        segments[key][_row][_col].email = _email;\n', '        segments[key][_row][_col].login = _login;\n', '\n', '        SegmentOwner(key, _row, _col, _email, _login);\n', '\n', '        return true;\n', '    }\n', '\n', '    function str_to_bytes32(string memory source) private pure returns(bytes32 result) {\n', '        bytes memory tempEmptyStringTest = bytes(source);\n', '        if(tempEmptyStringTest.length == 0) {\n', '            return 0x0;\n', '        }\n', '\n', '        assembly {\n', '            result := mload(add(source, 32))\n', '        }\n', '    }\n', '}']
['/*! mytilcoinstorage.sol | (c) 2018 Develop by BelovITLab LLC (smartcontract.ru), author @stupidlovejoy | License: MIT */\n', '\n', 'pragma solidity 0.4.21;\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    modifier onlyOwner() { require(msg.sender == owner); _; }\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        owner = newOwner;\n', '        OwnershipTransferred(owner, newOwner);\n', '    }\n', '}\n', '\n', 'contract Manageable is Ownable {\n', '    mapping(address => bool) public managers;\n', '\n', '    event ManagerAdded(address indexed manager);\n', '    event ManagerRemoved(address indexed manager);\n', '\n', '    modifier onlyManager() { require(managers[msg.sender]); _; }\n', '\n', '    function addManager(address _manager) onlyOwner public {\n', '        require(_manager != address(0));\n', '\n', '        managers[_manager] = true;\n', '\n', '        ManagerAdded(_manager);\n', '    }\n', '\n', '    function removeManager(address _manager) onlyOwner public {\n', '        require(_manager != address(0));\n', '\n', '        managers[_manager] = false;\n', '\n', '        ManagerRemoved(_manager);\n', '    }\n', '}\n', '\n', 'contract TilcoinStorage is Manageable {\n', '    struct Picture {\n', '        string hash;\n', '        uint32 rows;\n', '        uint32 cols;\n', '        uint32 width;\n', '        uint32 height;\n', '        string image;\n', '        string name;\n', '        string author;\n', '    }\n', '\n', '    struct Segment {\n', '        uint32 row;\n', '        uint32 col;\n', '        string hash;\n', '        string image;\n', '        string email;\n', '        string login;\n', '    }\n', '    \n', '    mapping(bytes32 => Picture) public pictures;\n', '    mapping(bytes32 => mapping(uint32 => mapping(uint32 => Segment))) public segments;\n', '\n', '    event AddPicture(bytes32 indexed hash, uint32 rows, uint32 cols, uint32 width, uint32 height, string image, string name, string author);\n', '    event SetSegment(bytes32 indexed picture, uint32 indexed row, uint32 indexed col, bytes32 hash, string image);\n', '    event SegmentOwner(bytes32 indexed picture, uint32 indexed row, uint32 indexed col, string email, string login);\n', '\n', '    function TilcoinStorage() public {\n', '        addManager(msg.sender);\n', '        addManager(0x209eba96c917871f78671a3ed3503ecc4144495c);\n', '    }\n', '\n', '    function addPicture(string _hash, uint32 _rows, uint32 _cols, uint32 _width, uint32 _height, string _image, string _name, string _author) onlyManager public returns(bool success) {\n', '        bytes32 key = str_to_bytes32(_hash);\n', '\n', '        require(!(pictures[key].rows > 0));\n', '        require(_rows > 0 && _cols > 0 && _width > 0 && _height > 0);\n', '        \n', '        pictures[key] = Picture({\n', '            hash: _hash,\n', '            rows: _rows,\n', '            cols: _cols,\n', '            width: _width,\n', '            height: _height,\n', '            image: _image,\n', '            name: _name,\n', '            author: _author\n', '        });\n', '\n', '        AddPicture(key, _rows, _cols, _width, _height, _image, _name, _author);\n', '\n', '        return true;\n', '    }\n', '\n', '    function setSegment(string _picture, uint32 _row, uint32 _col, string _hash, string _image, string _email, string _login) onlyManager public returns(bool success) {\n', '        bytes32 key = str_to_bytes32(_picture);\n', '\n', '        require(pictures[key].rows > 0);\n', '        require(_row > 0 && _col > 0 && _row <= pictures[key].rows && _col <= pictures[key].cols);\n', '        require(!(segments[key][_row][_col].row > 0));\n', '        \n', '        segments[key][_row][_col] = Segment({\n', '            row: _row,\n', '            col: _col,\n', '            hash: _hash,\n', '            image: _image,\n', '            email: _email,\n', '            login: _login\n', '        });\n', '\n', '        SetSegment(key, _row, _col, str_to_bytes32(_hash), _image);\n', '        SegmentOwner(key, _row, _col, _email, _login);\n', '\n', '        return true;\n', '    }\n', '\n', '    function setSegmentOwner(string _picture, uint32 _row, uint32 _col, string _email, string _login) onlyManager public returns(bool success) {\n', '        bytes32 key = str_to_bytes32(_picture);\n', '\n', '        require(pictures[key].rows > 0);\n', '        require(_row > 0 && _col > 0 && _row <= pictures[key].rows && _col <= pictures[key].cols);\n', '        require(segments[key][_row][_col].row > 0);\n', '        \n', '        segments[key][_row][_col].email = _email;\n', '        segments[key][_row][_col].login = _login;\n', '\n', '        SegmentOwner(key, _row, _col, _email, _login);\n', '\n', '        return true;\n', '    }\n', '\n', '    function str_to_bytes32(string memory source) private pure returns(bytes32 result) {\n', '        bytes memory tempEmptyStringTest = bytes(source);\n', '        if(tempEmptyStringTest.length == 0) {\n', '            return 0x0;\n', '        }\n', '\n', '        assembly {\n', '            result := mload(add(source, 32))\n', '        }\n', '    }\n', '}']
