['pragma solidity ^0.4.17;\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint x, uint y) pure internal returns(uint) {\n', '      uint z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtract(uint x, uint y) pure internal returns(uint) {\n', '      assert(x >= y);\n', '      uint z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint x, uint y) pure internal returns(uint) {\n', '      uint z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '    \n', '     \n', '\n', '    function getRandomNumber(uint16 maxRandom, uint8 min, address privateAddress) constant public returns(uint8) {\n', '        uint256 genNum = uint256(block.blockhash(block.number-1)) + uint256(privateAddress);\n', '        return uint8(genNum % (maxRandom - min + 1)+min);\n', '    }\n', '}\n', '\n', 'contract Enums {\n', '    enum ResultCode {\n', '        SUCCESS,\n', '        ERROR_CLASS_NOT_FOUND,\n', '        ERROR_LOW_BALANCE,\n', '        ERROR_SEND_FAIL,\n', '        ERROR_NOT_OWNER,\n', '        ERROR_NOT_ENOUGH_MONEY,\n', '        ERROR_INVALID_AMOUNT\n', '    }\n', '\n', '    enum AngelAura { \n', '        Blue, \n', '        Yellow, \n', '        Purple, \n', '        Orange, \n', '        Red, \n', '        Green \n', '    }\n', '}\n', 'contract AccessControl {\n', '    address public creatorAddress;\n', '    uint16 public totalSeraphims = 0;\n', '    mapping (address => bool) public seraphims;\n', '\n', '    bool public isMaintenanceMode = true;\n', ' \n', '    modifier onlyCREATOR() {\n', '        require(msg.sender == creatorAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlySERAPHIM() {\n', '        require(seraphims[msg.sender] == true);\n', '        _;\n', '    }\n', '    \n', '    modifier isContractActive {\n', '        require(!isMaintenanceMode);\n', '        _;\n', '    }\n', '    \n', '    // Constructor\n', '    function AccessControl() public {\n', '        creatorAddress = msg.sender;\n', '    }\n', '    \n', '\n', '    function addSERAPHIM(address _newSeraphim) onlyCREATOR public {\n', '        if (seraphims[_newSeraphim] == false) {\n', '            seraphims[_newSeraphim] = true;\n', '            totalSeraphims += 1;\n', '        }\n', '    }\n', '    \n', '    function removeSERAPHIM(address _oldSeraphim) onlyCREATOR public {\n', '        if (seraphims[_oldSeraphim] == true) {\n', '            seraphims[_oldSeraphim] = false;\n', '            totalSeraphims -= 1;\n', '        }\n', '    }\n', '\n', '    function updateMaintenanceMode(bool _isMaintaining) onlyCREATOR public {\n', '        isMaintenanceMode = _isMaintaining;\n', '    }\n', '\n', '  \n', '} \n', '\n', 'contract IAngelCardData is AccessControl, Enums {\n', '    uint8 public totalAngelCardSeries;\n', '    uint64 public totalAngels;\n', '\n', '    \n', '    // write\n', '    // angels\n', '    function createAngelCardSeries(uint8 _angelCardSeriesId, uint _basePrice,  uint64 _maxTotal, uint8 _baseAura, uint16 _baseBattlePower, uint64 _liveTime) onlyCREATOR external returns(uint8);\n', '    function updateAngelCardSeries(uint8 _angelCardSeriesId, uint64 _newPrice, uint64 _newMaxTotal) onlyCREATOR external;\n', '    function setAngel(uint8 _angelCardSeriesId, address _owner, uint _price, uint16 _battlePower) onlySERAPHIM external returns(uint64);\n', '    function addToAngelExperienceLevel(uint64 _angelId, uint _value) onlySERAPHIM external;\n', '    function setAngelLastBattleTime(uint64 _angelId) onlySERAPHIM external;\n', '    function setAngelLastVsBattleTime(uint64 _angelId) onlySERAPHIM external;\n', '    function setLastBattleResult(uint64 _angelId, uint16 _value) onlySERAPHIM external;\n', '    function addAngelIdMapping(address _owner, uint64 _angelId) private;\n', '    function transferAngel(address _from, address _to, uint64 _angelId) onlySERAPHIM public returns(ResultCode);\n', '    function ownerAngelTransfer (address _to, uint64 _angelId)  public;\n', '    function updateAngelLock (uint64 _angelId, bool newValue) public;\n', '    function removeCreator() onlyCREATOR external;\n', '\n', '    // read\n', '    function getAngelCardSeries(uint8 _angelCardSeriesId) constant public returns(uint8 angelCardSeriesId, uint64 currentAngelTotal, uint basePrice, uint64 maxAngelTotal, uint8 baseAura, uint baseBattlePower, uint64 lastSellTime, uint64 liveTime);\n', '    function getAngel(uint64 _angelId) constant public returns(uint64 angelId, uint8 angelCardSeriesId, uint16 battlePower, uint8 aura, uint16 experience, uint price, uint64 createdTime, uint64 lastBattleTime, uint64 lastVsBattleTime, uint16 lastBattleResult, address owner);\n', '    function getOwnerAngelCount(address _owner) constant public returns(uint);\n', '    function getAngelByIndex(address _owner, uint _index) constant public returns(uint64);\n', '    function getTotalAngelCardSeries() constant public returns (uint8);\n', '    function getTotalAngels() constant public returns (uint64);\n', '    function getAngelLockStatus(uint64 _angelId) constant public returns (bool);\n', '}\n', '\n', 'contract ISponsoredLeaderboardData is AccessControl {\n', '\n', '  \n', '    uint16 public totalLeaderboards;\n', '    \n', '    //The reserved balance is the total balance outstanding on all open leaderboards. \n', '    //We keep track of this figure to prevent the developers from pulling out money currently pledged\n', '    uint public contractReservedBalance;\n', '    \n', '\n', '    function setMinMaxDays(uint8 _minDays, uint8 _maxDays) external ;\n', '        function openLeaderboard(uint8 numDays, string message) external payable ;\n', '        function closeLeaderboard(uint16 leaderboardId) onlySERAPHIM external;\n', '        \n', '        function setMedalsClaimed(uint16 leaderboardId) onlySERAPHIM external ;\n', '    function withdrawEther() onlyCREATOR external;\n', '  function getTeamFromLeaderboard(uint16 leaderboardId, uint8 rank) public constant returns (uint64 angelId, uint64 petId, uint64 accessoryId) ;\n', '    \n', '    function getLeaderboard(uint16 id) public constant returns (uint startTime, uint endTime, bool isLive, address sponsor, uint prize, uint8 numTeams, string message, bool medalsClaimed);\n', '      function newTeamOnEnd(uint16 leaderboardId, uint64 angelId, uint64 petId, uint64 accessoryId) onlySERAPHIM external;\n', '       function switchRankings (uint16 leaderboardId, uint8 spot,uint64 angel1ID, uint64 pet1ID, uint64 accessory1ID,uint64 angel2ID,uint64 pet2ID,uint64 accessory2ID) onlySERAPHIM external;\n', '       function verifyPosition(uint16 leaderboardId, uint8 spot, uint64 angelID) external constant returns (bool); \n', '        function angelOnLeaderboards(uint64 angelID) external constant returns (bool);\n', '         function petOnLeaderboards(uint64 petID) external constant returns (bool);\n', '         function accessoryOnLeaderboards(uint64 accessoryID) external constant returns (bool) ;\n', '    function safeMult(uint x, uint y) pure internal returns(uint) ;\n', '     function SafeDiv(uint256 a, uint256 b) internal pure returns (uint256) ;\n', '    function getTotalLeaderboards() public constant returns (uint16);\n', '      \n', '  \n', '        \n', '   \n', '        \n', '        \n', '        \n', '   \n', '      \n', '        \n', '   \n', '}\n', 'contract IMedalData is AccessControl {\n', '  \n', '    modifier onlyOwnerOf(uint256 _tokenId) {\n', '    require(ownerOf(_tokenId) == msg.sender);\n', '    _;\n', '  }\n', '   \n', 'function totalSupply() public view returns (uint256);\n', 'function setMaxTokenNumbers()  onlyCREATOR external;\n', 'function balanceOf(address _owner) public view returns (uint256);\n', 'function tokensOf(address _owner) public view returns (uint256[]) ;\n', 'function ownerOf(uint256 _tokenId) public view returns (address);\n', 'function approvedFor(uint256 _tokenId) public view returns (address) ;\n', 'function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId);\n', 'function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId);\n', 'function takeOwnership(uint256 _tokenId) public;\n', 'function _createMedal(address _to, uint8 _seriesID) onlySERAPHIM public ;\n', 'function getCurrentTokensByType(uint32 _seriesID) public constant returns (uint32);\n', 'function getMedalType (uint256 _tokenId) public constant returns (uint8);\n', 'function _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) external;\n', 'function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) ;\n', 'function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal;\n', 'function clearApproval(address _owner, uint256 _tokenId) private;\n', 'function addToken(address _to, uint256 _tokenId) private ;\n', 'function removeToken(address _from, uint256 _tokenId) private;\n', '}\n', '\n', '//INSTURCTIONS: You can access this contract through our webUI at angelbattles.com (preferred)\n', '//You can also access this contract directly by sending a transaction the the leaderboardId you wish to claim medals for\n', '//Variable names are self explanatory, but contact us if you have any questions. \n', '\n', 'contract ClaimSponsoredMedals is AccessControl, SafeMath  {\n', '    // Addresses for other contracts MedalClaim interacts with. \n', '    address public angelCardDataContract = 0x6D2E76213615925c5fc436565B5ee788Ee0E86DC;\n', '    address public medalDataContract =  0x33A104dCBEd81961701900c06fD14587C908EAa3;\n', '    address public sponsoredLeaderboardDataContract = 0xAbe64ec568AeB065D0445B9D76F511A7B5eA2d7f;\n', '    \n', '    // events\n', '     event EventMedalSuccessful(address owner,uint64 Medal);\n', '  \n', '\n', '\n', '\n', '    // write functions\n', '    function DataContacts(address _angelCardDataContract,  address _medalDataContract, address _sponsoredLeaderboardDataContract) onlyCREATOR external {\n', '        angelCardDataContract = _angelCardDataContract;\n', '        medalDataContract = _medalDataContract;\n', '        sponsoredLeaderboardDataContract = _sponsoredLeaderboardDataContract;\n', '    }\n', '       \n', '\n', '\n', '\n', 'function claimMedals (uint16 leaderboardId) public  {\n', '    \n', '    //Function can be called by anyone, as long as the medals haven&#39;t already been claimed, the leaderboard is closed, and it&#39;s past the end time. \n', '    \n', '           ISponsoredLeaderboardData sponsoredLeaderboardData = ISponsoredLeaderboardData(sponsoredLeaderboardDataContract);  \n', '        if ((leaderboardId < 0 ) || (leaderboardId > sponsoredLeaderboardData.getTotalLeaderboards())) {revert();}\n', '            uint endTime;\n', '            bool isLive;\n', '            bool medalsClaimed;\n', '            uint prize;\n', '            (,endTime,isLive,,prize,,,medalsClaimed) =  sponsoredLeaderboardData.getLeaderboard(leaderboardId);\n', '            if (isLive == true) {revert();} \n', '            if (now < endTime) {revert();}\n', '            if (medalsClaimed = true) {revert();}\n', '            sponsoredLeaderboardData.setMedalsClaimed(leaderboardId);\n', '            \n', '            \n', '             address owner1;\n', '             address owner2;\n', '             address owner3;\n', '             address owner4;\n', '             \n', '             uint64 angel;\n', '             \n', '             \n', '            (angel,,) =  sponsoredLeaderboardData.getTeamFromLeaderboard(leaderboardId, 0);\n', '             (,,,,,,,,,,owner1) = angelCardData.getAngel(angel);\n', '             (angel,,) =  sponsoredLeaderboardData.getTeamFromLeaderboard(leaderboardId, 1);\n', '             (,,,,,,,,,,owner2) = angelCardData.getAngel(angel);\n', '              (angel,,) =  sponsoredLeaderboardData.getTeamFromLeaderboard(leaderboardId, 2);\n', '             (,,,,,,,,,,owner3) = angelCardData.getAngel(angel);\n', '              (angel,,) =  sponsoredLeaderboardData.getTeamFromLeaderboard(leaderboardId, 3);\n', '             (,,,,,,,,,,owner4) = angelCardData.getAngel(angel);\n', '            \n', '            IAngelCardData angelCardData = IAngelCardData(angelCardDataContract);\n', '     \n', '    \n', '            \n', '             IMedalData medalData = IMedalData(medalDataContract);  \n', '            if (prize == 10000000000000000) {\n', '             medalData._createMedal(owner1, 2);\n', '             medalData._createMedal(owner2, 1);\n', '             medalData._createMedal(owner3,0);\n', '             medalData._createMedal(owner4,0);\n', '             return;\n', '            }\n', '            if ((prize > 10000000000000000) && (prize <= 50000000000000000)) {\n', '             medalData._createMedal(owner1, 5);\n', '             medalData._createMedal(owner2, 4);\n', '             medalData._createMedal(owner3,3);\n', '             medalData._createMedal(owner4,3);\n', '             return;\n', '            }\n', '               if ((prize > 50000000000000000) && (prize <= 100000000000000000)) {\n', '             medalData._createMedal(owner1, 6);\n', '             medalData._createMedal(owner2, 5);\n', '             medalData._createMedal(owner3,4);\n', '             medalData._createMedal(owner4,4);\n', '             return;\n', '            }\n', '                 if ((prize > 100000000000000000) && (prize <= 250000000000000000)) {\n', '             medalData._createMedal(owner1, 9);\n', '             medalData._createMedal(owner2, 6);\n', '             medalData._createMedal(owner3,5);\n', '             medalData._createMedal(owner4,5);\n', '             return;\n', '            }\n', '                if ((prize > 250000000000000000  ) && (prize <= 500000000000000000)) {\n', '             medalData._createMedal(owner1,10);\n', '             medalData._createMedal(owner2, 9);\n', '             medalData._createMedal(owner3,6);\n', '             medalData._createMedal(owner4,6);\n', '            }\n', '                if (prize  > 500000000000000000)   {\n', '             medalData._createMedal(owner1, 11);\n', '             medalData._createMedal(owner2, 10);\n', '             medalData._createMedal(owner3,9);\n', '             medalData._createMedal(owner4,9);\n', '             \n', '            }\n', '            \n', '}\n', '\n', '           \n', '            \n', '        }']
['pragma solidity ^0.4.17;\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint x, uint y) pure internal returns(uint) {\n', '      uint z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtract(uint x, uint y) pure internal returns(uint) {\n', '      assert(x >= y);\n', '      uint z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint x, uint y) pure internal returns(uint) {\n', '      uint z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '    \n', '     \n', '\n', '    function getRandomNumber(uint16 maxRandom, uint8 min, address privateAddress) constant public returns(uint8) {\n', '        uint256 genNum = uint256(block.blockhash(block.number-1)) + uint256(privateAddress);\n', '        return uint8(genNum % (maxRandom - min + 1)+min);\n', '    }\n', '}\n', '\n', 'contract Enums {\n', '    enum ResultCode {\n', '        SUCCESS,\n', '        ERROR_CLASS_NOT_FOUND,\n', '        ERROR_LOW_BALANCE,\n', '        ERROR_SEND_FAIL,\n', '        ERROR_NOT_OWNER,\n', '        ERROR_NOT_ENOUGH_MONEY,\n', '        ERROR_INVALID_AMOUNT\n', '    }\n', '\n', '    enum AngelAura { \n', '        Blue, \n', '        Yellow, \n', '        Purple, \n', '        Orange, \n', '        Red, \n', '        Green \n', '    }\n', '}\n', 'contract AccessControl {\n', '    address public creatorAddress;\n', '    uint16 public totalSeraphims = 0;\n', '    mapping (address => bool) public seraphims;\n', '\n', '    bool public isMaintenanceMode = true;\n', ' \n', '    modifier onlyCREATOR() {\n', '        require(msg.sender == creatorAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlySERAPHIM() {\n', '        require(seraphims[msg.sender] == true);\n', '        _;\n', '    }\n', '    \n', '    modifier isContractActive {\n', '        require(!isMaintenanceMode);\n', '        _;\n', '    }\n', '    \n', '    // Constructor\n', '    function AccessControl() public {\n', '        creatorAddress = msg.sender;\n', '    }\n', '    \n', '\n', '    function addSERAPHIM(address _newSeraphim) onlyCREATOR public {\n', '        if (seraphims[_newSeraphim] == false) {\n', '            seraphims[_newSeraphim] = true;\n', '            totalSeraphims += 1;\n', '        }\n', '    }\n', '    \n', '    function removeSERAPHIM(address _oldSeraphim) onlyCREATOR public {\n', '        if (seraphims[_oldSeraphim] == true) {\n', '            seraphims[_oldSeraphim] = false;\n', '            totalSeraphims -= 1;\n', '        }\n', '    }\n', '\n', '    function updateMaintenanceMode(bool _isMaintaining) onlyCREATOR public {\n', '        isMaintenanceMode = _isMaintaining;\n', '    }\n', '\n', '  \n', '} \n', '\n', 'contract IAngelCardData is AccessControl, Enums {\n', '    uint8 public totalAngelCardSeries;\n', '    uint64 public totalAngels;\n', '\n', '    \n', '    // write\n', '    // angels\n', '    function createAngelCardSeries(uint8 _angelCardSeriesId, uint _basePrice,  uint64 _maxTotal, uint8 _baseAura, uint16 _baseBattlePower, uint64 _liveTime) onlyCREATOR external returns(uint8);\n', '    function updateAngelCardSeries(uint8 _angelCardSeriesId, uint64 _newPrice, uint64 _newMaxTotal) onlyCREATOR external;\n', '    function setAngel(uint8 _angelCardSeriesId, address _owner, uint _price, uint16 _battlePower) onlySERAPHIM external returns(uint64);\n', '    function addToAngelExperienceLevel(uint64 _angelId, uint _value) onlySERAPHIM external;\n', '    function setAngelLastBattleTime(uint64 _angelId) onlySERAPHIM external;\n', '    function setAngelLastVsBattleTime(uint64 _angelId) onlySERAPHIM external;\n', '    function setLastBattleResult(uint64 _angelId, uint16 _value) onlySERAPHIM external;\n', '    function addAngelIdMapping(address _owner, uint64 _angelId) private;\n', '    function transferAngel(address _from, address _to, uint64 _angelId) onlySERAPHIM public returns(ResultCode);\n', '    function ownerAngelTransfer (address _to, uint64 _angelId)  public;\n', '    function updateAngelLock (uint64 _angelId, bool newValue) public;\n', '    function removeCreator() onlyCREATOR external;\n', '\n', '    // read\n', '    function getAngelCardSeries(uint8 _angelCardSeriesId) constant public returns(uint8 angelCardSeriesId, uint64 currentAngelTotal, uint basePrice, uint64 maxAngelTotal, uint8 baseAura, uint baseBattlePower, uint64 lastSellTime, uint64 liveTime);\n', '    function getAngel(uint64 _angelId) constant public returns(uint64 angelId, uint8 angelCardSeriesId, uint16 battlePower, uint8 aura, uint16 experience, uint price, uint64 createdTime, uint64 lastBattleTime, uint64 lastVsBattleTime, uint16 lastBattleResult, address owner);\n', '    function getOwnerAngelCount(address _owner) constant public returns(uint);\n', '    function getAngelByIndex(address _owner, uint _index) constant public returns(uint64);\n', '    function getTotalAngelCardSeries() constant public returns (uint8);\n', '    function getTotalAngels() constant public returns (uint64);\n', '    function getAngelLockStatus(uint64 _angelId) constant public returns (bool);\n', '}\n', '\n', 'contract ISponsoredLeaderboardData is AccessControl {\n', '\n', '  \n', '    uint16 public totalLeaderboards;\n', '    \n', '    //The reserved balance is the total balance outstanding on all open leaderboards. \n', '    //We keep track of this figure to prevent the developers from pulling out money currently pledged\n', '    uint public contractReservedBalance;\n', '    \n', '\n', '    function setMinMaxDays(uint8 _minDays, uint8 _maxDays) external ;\n', '        function openLeaderboard(uint8 numDays, string message) external payable ;\n', '        function closeLeaderboard(uint16 leaderboardId) onlySERAPHIM external;\n', '        \n', '        function setMedalsClaimed(uint16 leaderboardId) onlySERAPHIM external ;\n', '    function withdrawEther() onlyCREATOR external;\n', '  function getTeamFromLeaderboard(uint16 leaderboardId, uint8 rank) public constant returns (uint64 angelId, uint64 petId, uint64 accessoryId) ;\n', '    \n', '    function getLeaderboard(uint16 id) public constant returns (uint startTime, uint endTime, bool isLive, address sponsor, uint prize, uint8 numTeams, string message, bool medalsClaimed);\n', '      function newTeamOnEnd(uint16 leaderboardId, uint64 angelId, uint64 petId, uint64 accessoryId) onlySERAPHIM external;\n', '       function switchRankings (uint16 leaderboardId, uint8 spot,uint64 angel1ID, uint64 pet1ID, uint64 accessory1ID,uint64 angel2ID,uint64 pet2ID,uint64 accessory2ID) onlySERAPHIM external;\n', '       function verifyPosition(uint16 leaderboardId, uint8 spot, uint64 angelID) external constant returns (bool); \n', '        function angelOnLeaderboards(uint64 angelID) external constant returns (bool);\n', '         function petOnLeaderboards(uint64 petID) external constant returns (bool);\n', '         function accessoryOnLeaderboards(uint64 accessoryID) external constant returns (bool) ;\n', '    function safeMult(uint x, uint y) pure internal returns(uint) ;\n', '     function SafeDiv(uint256 a, uint256 b) internal pure returns (uint256) ;\n', '    function getTotalLeaderboards() public constant returns (uint16);\n', '      \n', '  \n', '        \n', '   \n', '        \n', '        \n', '        \n', '   \n', '      \n', '        \n', '   \n', '}\n', 'contract IMedalData is AccessControl {\n', '  \n', '    modifier onlyOwnerOf(uint256 _tokenId) {\n', '    require(ownerOf(_tokenId) == msg.sender);\n', '    _;\n', '  }\n', '   \n', 'function totalSupply() public view returns (uint256);\n', 'function setMaxTokenNumbers()  onlyCREATOR external;\n', 'function balanceOf(address _owner) public view returns (uint256);\n', 'function tokensOf(address _owner) public view returns (uint256[]) ;\n', 'function ownerOf(uint256 _tokenId) public view returns (address);\n', 'function approvedFor(uint256 _tokenId) public view returns (address) ;\n', 'function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId);\n', 'function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId);\n', 'function takeOwnership(uint256 _tokenId) public;\n', 'function _createMedal(address _to, uint8 _seriesID) onlySERAPHIM public ;\n', 'function getCurrentTokensByType(uint32 _seriesID) public constant returns (uint32);\n', 'function getMedalType (uint256 _tokenId) public constant returns (uint8);\n', 'function _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) external;\n', 'function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) ;\n', 'function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal;\n', 'function clearApproval(address _owner, uint256 _tokenId) private;\n', 'function addToken(address _to, uint256 _tokenId) private ;\n', 'function removeToken(address _from, uint256 _tokenId) private;\n', '}\n', '\n', '//INSTURCTIONS: You can access this contract through our webUI at angelbattles.com (preferred)\n', '//You can also access this contract directly by sending a transaction the the leaderboardId you wish to claim medals for\n', '//Variable names are self explanatory, but contact us if you have any questions. \n', '\n', 'contract ClaimSponsoredMedals is AccessControl, SafeMath  {\n', '    // Addresses for other contracts MedalClaim interacts with. \n', '    address public angelCardDataContract = 0x6D2E76213615925c5fc436565B5ee788Ee0E86DC;\n', '    address public medalDataContract =  0x33A104dCBEd81961701900c06fD14587C908EAa3;\n', '    address public sponsoredLeaderboardDataContract = 0xAbe64ec568AeB065D0445B9D76F511A7B5eA2d7f;\n', '    \n', '    // events\n', '     event EventMedalSuccessful(address owner,uint64 Medal);\n', '  \n', '\n', '\n', '\n', '    // write functions\n', '    function DataContacts(address _angelCardDataContract,  address _medalDataContract, address _sponsoredLeaderboardDataContract) onlyCREATOR external {\n', '        angelCardDataContract = _angelCardDataContract;\n', '        medalDataContract = _medalDataContract;\n', '        sponsoredLeaderboardDataContract = _sponsoredLeaderboardDataContract;\n', '    }\n', '       \n', '\n', '\n', '\n', 'function claimMedals (uint16 leaderboardId) public  {\n', '    \n', "    //Function can be called by anyone, as long as the medals haven't already been claimed, the leaderboard is closed, and it's past the end time. \n", '    \n', '           ISponsoredLeaderboardData sponsoredLeaderboardData = ISponsoredLeaderboardData(sponsoredLeaderboardDataContract);  \n', '        if ((leaderboardId < 0 ) || (leaderboardId > sponsoredLeaderboardData.getTotalLeaderboards())) {revert();}\n', '            uint endTime;\n', '            bool isLive;\n', '            bool medalsClaimed;\n', '            uint prize;\n', '            (,endTime,isLive,,prize,,,medalsClaimed) =  sponsoredLeaderboardData.getLeaderboard(leaderboardId);\n', '            if (isLive == true) {revert();} \n', '            if (now < endTime) {revert();}\n', '            if (medalsClaimed = true) {revert();}\n', '            sponsoredLeaderboardData.setMedalsClaimed(leaderboardId);\n', '            \n', '            \n', '             address owner1;\n', '             address owner2;\n', '             address owner3;\n', '             address owner4;\n', '             \n', '             uint64 angel;\n', '             \n', '             \n', '            (angel,,) =  sponsoredLeaderboardData.getTeamFromLeaderboard(leaderboardId, 0);\n', '             (,,,,,,,,,,owner1) = angelCardData.getAngel(angel);\n', '             (angel,,) =  sponsoredLeaderboardData.getTeamFromLeaderboard(leaderboardId, 1);\n', '             (,,,,,,,,,,owner2) = angelCardData.getAngel(angel);\n', '              (angel,,) =  sponsoredLeaderboardData.getTeamFromLeaderboard(leaderboardId, 2);\n', '             (,,,,,,,,,,owner3) = angelCardData.getAngel(angel);\n', '              (angel,,) =  sponsoredLeaderboardData.getTeamFromLeaderboard(leaderboardId, 3);\n', '             (,,,,,,,,,,owner4) = angelCardData.getAngel(angel);\n', '            \n', '            IAngelCardData angelCardData = IAngelCardData(angelCardDataContract);\n', '     \n', '    \n', '            \n', '             IMedalData medalData = IMedalData(medalDataContract);  \n', '            if (prize == 10000000000000000) {\n', '             medalData._createMedal(owner1, 2);\n', '             medalData._createMedal(owner2, 1);\n', '             medalData._createMedal(owner3,0);\n', '             medalData._createMedal(owner4,0);\n', '             return;\n', '            }\n', '            if ((prize > 10000000000000000) && (prize <= 50000000000000000)) {\n', '             medalData._createMedal(owner1, 5);\n', '             medalData._createMedal(owner2, 4);\n', '             medalData._createMedal(owner3,3);\n', '             medalData._createMedal(owner4,3);\n', '             return;\n', '            }\n', '               if ((prize > 50000000000000000) && (prize <= 100000000000000000)) {\n', '             medalData._createMedal(owner1, 6);\n', '             medalData._createMedal(owner2, 5);\n', '             medalData._createMedal(owner3,4);\n', '             medalData._createMedal(owner4,4);\n', '             return;\n', '            }\n', '                 if ((prize > 100000000000000000) && (prize <= 250000000000000000)) {\n', '             medalData._createMedal(owner1, 9);\n', '             medalData._createMedal(owner2, 6);\n', '             medalData._createMedal(owner3,5);\n', '             medalData._createMedal(owner4,5);\n', '             return;\n', '            }\n', '                if ((prize > 250000000000000000  ) && (prize <= 500000000000000000)) {\n', '             medalData._createMedal(owner1,10);\n', '             medalData._createMedal(owner2, 9);\n', '             medalData._createMedal(owner3,6);\n', '             medalData._createMedal(owner4,6);\n', '            }\n', '                if (prize  > 500000000000000000)   {\n', '             medalData._createMedal(owner1, 11);\n', '             medalData._createMedal(owner2, 10);\n', '             medalData._createMedal(owner3,9);\n', '             medalData._createMedal(owner4,9);\n', '             \n', '            }\n', '            \n', '}\n', '\n', '           \n', '            \n', '        }']
