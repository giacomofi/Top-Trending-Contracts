['pragma solidity 0.4 .25;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns(uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', 'contract X2month {\n', '\n', '  using SafeMath\n', '  for uint;\n', '  // array containing information about beneficiaries\n', '  mapping(address => uint) public userDeposit;\n', '  //array containing information about the time of payment\n', '  mapping(address => uint) public userTime;\n', '  //array containing information on interest paid\n', '  mapping(address=>uint) public persentWithdraw;\n', '  //fund fo transfer percent\n', '  address public projectFund = 0x15e3aAD84394012f450d7A6965f2f4C59Ca7071a;\n', '  //wallet for a charitable foundation\n', '  address public charityFund = 0x6c3607D37A000d7879F02b98c59376c7DAc91151;\n', '  //percentage deducted to the advertising fund\n', '  uint projectPercent = 5;\n', '  //percent for a charitable foundation\n', '  uint charityPercent = 1;\n', '  //min payment 0.01 ether\n', '  uint public minPayment = 1 finney;\n', '  //time through which you can take dividends\n', '  uint chargingTime = 1 hours;\n', '  //persent 0.175 per hour\n', '  uint public startPercent = 175;\n', '  uint public lowPersent = 200;\n', '  uint public middlePersent = 225;\n', '  uint public highPersent = 250;\n', '  //interest rate increase steps\n', '  uint public stepLow = 1000 ether;\n', '  uint public stepMiddle = 2500 ether;\n', '  uint public stepHigh = 5000 ether;\n', '  uint countOfInvestors = 0;\n', '  \n', '  modifier isIssetUser() {\n', '    require(userDeposit[msg.sender] > 0, "Deposit not found");\n', '    _;\n', '  }\n', '\n', '  modifier timePayment() {\n', '    require(now >= userTime[msg.sender].add(chargingTime), "Too fast payout request");\n', '    _;\n', '  }\n', ' \n', '  function collectPercent() isIssetUser timePayment internal {\n', '    //if the user received 200% or more of his contribution, delete the user\n', '    if( (userDeposit[msg.sender].mul(2)) <= persentWithdraw[msg.sender]){\n', '        userDeposit[msg.sender]=0;\n', '        userTime[msg.sender]=0;\n', '        persentWithdraw[msg.sender]=0;\n', '    }else{\n', '       uint payout = payoutAmount();\n', '       userTime[msg.sender] = now;    \n', '       persentWithdraw[msg.sender]+=payout;    \n', '       msg.sender.transfer(payout); \n', '    }\n', '  }\n', '  \n', '  function persentRate()public view returns(uint){\n', '      //get contract balance\n', '      uint balance = address(this).balance;\n', '      //calculate persent rate\n', '      if(balance < stepLow){return(startPercent);}\n', '      if(balance>=stepLow && balance<stepMiddle){return(lowPersent);}\n', '      if(balance>=stepMiddle && balance<stepHigh){return(middlePersent);}\n', '      if(balance>=stepHigh){return(highPersent);}\n', '  }\n', '  \n', '  function payoutAmount()public view returns(uint){\n', '      uint persent = persentRate();\n', '      uint rate = userDeposit[msg.sender].mul(persent).div(100000);\n', '      uint interestRate=now.sub(userTime[msg.sender]).div(chargingTime);\n', '      uint withdrawalAmount = rate.mul(interestRate);\n', '      return(withdrawalAmount);\n', '  }\n', '\n', '  function makeDeposit() private {\n', '    \n', '    if (msg.value > 0) {\n', '      \n', '      if(userDeposit[msg.sender]==0){\n', '          countOfInvestors+=1;\n', '      }\n', '      \n', '      if(userDeposit[msg.sender] > 0 && now > userTime[msg.sender].add(chargingTime)){\n', '          collectPercent();\n', '      }\n', '\n', '      userDeposit[msg.sender] = userDeposit[msg.sender].add(msg.value);\n', '      userTime[msg.sender] = now;\n', '      //sending money for advertising\n', '      projectFund.transfer(msg.value.mul(projectPercent).div(100));\n', '      //sending money to charity\n', '      charityFund.transfer(msg.value.mul(charityPercent).div(100));\n', '    } else {\n', '      collectPercent();\n', '    }\n', '  }\n', '  \n', '  function returnDeposit()isIssetUser private{\n', '      \n', '      require(userDeposit[msg.sender] > persentWithdraw[msg.sender], &#39;You have already repaid your deposit&#39;);\n', '      //userDeposit-persentWithdraw-(userDeposit*6/100)\n', '      uint withdrawalAmount = userDeposit[msg.sender].sub(persentWithdraw[msg.sender]).sub(userDeposit[msg.sender].mul(6).div(100));\n', '      //delete user record\n', '      userDeposit[msg.sender] = 0;\n', '      userTime[msg.sender] = 0;\n', '      persentWithdraw[msg.sender] = 0;\n', '      \n', '      msg.sender.transfer(withdrawalAmount);\n', '  }\n', '\n', '  function() external payable {\n', '    if(msg.value == 0.00000112 ether){\n', '        returnDeposit();\n', '    }else{\n', '        makeDeposit();\n', '    }\n', '  }\n', '}']