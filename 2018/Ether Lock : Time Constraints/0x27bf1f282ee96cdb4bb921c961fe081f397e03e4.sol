['pragma solidity ^0.4.19;\n', '\n', 'pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', '\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '\n', '// Slightly modified Zeppelin&#39;s Vested Token deriving MiniMeToken\n', '\n', '/*\n', '    Copyright 2018, Konstantin Viktorov (EscrowBlock Foundation)\n', '    Copyright 2017, Jorge Izquierdo (Aragon Foundation)\n', '    Copyright 2017, Jordi Baylina (Giveth)\n', '\n', '    Based on MiniMeToken.sol from https://github.com/Giveth/minime\n', '*/\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n', '}\n', '\n', '/*\n', '    Copyright 2018, Konstantin Viktorov (EscrowBlock Foundation)\n', '    Copyright 2017, Jorge Izquierdo (Aragon Foundation)\n', '    Copyright 2017, Jordi Baylina (Giveth)\n', '\n', '    Based on MiniMeToken.sol from https://github.com/Giveth/minime\n', ' */\n', '\n', 'contract Controlled {\n', '    address public controller;\n', '\n', '    function Controlled() {\n', '         controller = msg.sender;\n', '    }\n', '\n', '    /// @notice The address of the controller is the only address that can call\n', '    ///    a function with this modifier\n', '    modifier onlyController {\n', '        require(msg.sender == controller);\n', '        _;\n', '    }\n', '\n', '    /// @notice Changes the controller of the contract\n', '    /// @param _newController The new controller of the contract\n', '    function changeController(address _newController) onlyController {\n', '        controller = _newController;\n', '    }\n', '}\n', '\n', '/*\n', '    Copyright 2018, Konstantin Viktorov (EscrowBlock Foundation)\n', '    Copyright 2017, Jorge Izquierdo (Aragon Foundation)\n', '    Copyright 2017, Jordi Baylina (Giveth)\n', '\n', '    Based on MiniMeToken.sol from https://github.com/Giveth/minime\n', ' */\n', '\n', '/// @dev The token controller contract must implement these functions\n', 'contract TokenController {\n', '    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n', '    /// @param _owner The address that sent the ether to create tokens\n', '    /// @return True if the ether is accepted, false if it throws\n', '    function proxyPayment(address _owner) payable returns(bool);\n', '\n', '    /// @notice Notifies the controller about a token transfer allowing the\n', '    ///    controller to react if desired\n', '    /// @param _from The origin of the transfer\n', '    /// @param _to The destination of the transfer\n', '    /// @param _amount The amount of the transfer\n', '    /// @return False if the controller does not authorize the transfer\n', '    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n', '\n', '    /// @notice Notifies the controller about an approval allowing the\n', '    ///    controller to react if desired\n', '    /// @param _owner The address that calls `approve()`\n', '    /// @param _spender The spender in the `approve()` call\n', '    /// @param _amount The amount in the `approve()` call\n', '    /// @return False if the controller does not authorize the approval\n', '    function onApprove(address _owner, address _spender, uint _amount) returns(bool);\n', '}\n', '\n', '/*\n', '    Copyright 2016, Jordi Baylina\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.    If not, see <http://www.gnu.org/licenses/>.\n', ' */\n', '\n', '/// @title MiniMeToken Contract\n', '/// @author Jordi Baylina\n', '/// @dev This token contract&#39;s goal is to make it easy for anyone to clone this\n', '///    token using the token distribution at a given block, this will allow DAO&#39;s\n', '///    and DApps to upgrade their features in a decentralized manner without\n', '///    affecting the original token\n', '/// @dev It is ERC20 compliant, but still needs to under go further testing.\n', '\n', '/// @dev The actual token contract, the default controller is the msg.sender\n', '///    that deploys the contract, so usually this token will be deployed by a\n', '///    token controller contract, which Giveth will call a "Campaign"\n', 'contract MiniMeToken is Controlled {\n', '\n', '    string public name;               //The Token&#39;s name: e.g. DigixDAO Tokens\n', '    uint8 public decimals;             //Number of decimals of the smallest unit\n', '    string public symbol;               //An identifier: e.g. REP\n', '    string public version = "MMT_0.1"; //An arbitrary versioning scheme\n', '\n', '\n', '    /// @dev `Checkpoint` is the structure that attaches a block number to a\n', '    ///    given value, the block number attached is the one that last changed the\n', '    ///    value\n', '    struct    Checkpoint {\n', '\n', '        // `fromBlock` is the block number that the value was generated from\n', '        uint128 fromBlock;\n', '\n', '        // `value` is the amount of tokens at a specific block number\n', '        uint128 value;\n', '    }\n', '\n', '    // `parentToken` is the Token address that was cloned to produce this token;\n', '    //    it will be 0x0 for a token that was not cloned\n', '    MiniMeToken public parentToken;\n', '\n', '    // `parentSnapShotBlock` is the block number from the Parent Token that was\n', '    //    used to determine the initial distribution of the Clone Token\n', '    uint public parentSnapShotBlock;\n', '\n', '    // `creationBlock` is the block number that the Clone Token was created\n', '    uint public creationBlock;\n', '\n', '    // `balances` is the map that tracks the balance of each address, in this\n', '    //    contract when the balance changes the block number that the change\n', '    //    occurred is also included in the map\n', '    mapping (address => Checkpoint[]) balances;\n', '\n', '    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    // Tracks the history of the `totalSupply` of the token\n', '    Checkpoint[] totalSupplyHistory;\n', '\n', '    // Flag that determines if the token is transferable or not.\n', '    bool public transfersEnabled;\n', '\n', '    // The factory used to create new clone tokens\n', '    MiniMeTokenFactory public tokenFactory;\n', '\n', '////////////////\n', '// Constructor\n', '////////////////\n', '\n', '    /// @notice Constructor to create a MiniMeToken\n', '    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n', '    ///    will create the Clone token contracts, the token factory needs to be\n', '    ///    deployed first\n', '    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n', '    ///    new token\n', '    /// @param _parentSnapShotBlock Block of the parent token that will\n', '    ///    determine the initial distribution of the clone token, set to 0 if it\n', '    ///    is a new token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    function MiniMeToken(\n', '        address _tokenFactory,\n', '        address _parentToken,\n', '        uint _parentSnapShotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) {\n', '        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n', '        name = _tokenName;                                // Set the name\n', '        decimals = _decimalUnits;                            // Set the decimals\n', '        symbol = _tokenSymbol;                             // Set the symbol\n', '        parentToken = MiniMeToken(_parentToken);\n', '        parentSnapShotBlock = _parentSnapShotBlock;\n', '        transfersEnabled = _transfersEnabled;\n', '        creationBlock = block.number;\n', '    }\n', '\n', '\n', '///////////////////\n', '// ERC20 Methods\n', '///////////////////\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _amount) returns (bool success) {\n', '        require(transfersEnabled);\n', '        doTransfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n', '    ///    is approved by `_from`\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function transferFrom(address _from, address _to, uint256 _amount\n', '    ) returns (bool success) {\n', '\n', '        // The controller of this contract can move tokens around at will,\n', '        //    this is important to recognize! Confirm that you trust the\n', '        //    controller of this contract, which in most situations should be\n', '        //    another open source smart contract or 0x0\n', '        if (msg.sender != controller) {\n', '            require(transfersEnabled);\n', '\n', '            // The standard ERC 20 transferFrom functionality\n', '            require(allowed[_from][msg.sender] >= _amount);\n', '            allowed[_from][msg.sender] -= _amount;\n', '        }\n', '        doTransfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /// @dev This is the actual transfer function in the token contract, it can\n', '    ///    only be called by other functions in this contract.\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function doTransfer(address _from, address _to, uint _amount\n', '    ) internal {\n', '\n', '             if (_amount == 0) {\n', '             Transfer(_from, _to, _amount);    // Follow the spec to issue the event when transfer 0\n', '             return;\n', '             }\n', '\n', '             require(parentSnapShotBlock < block.number);\n', '\n', '             // Do not allow transfer to 0x0 or the token contract itself\n', '             require((_to != 0) && (_to != address(this)));\n', '\n', '             // If the amount being transfered is more than the balance of the\n', '             //    account the transfer throws\n', '             uint256 previousBalanceFrom = balanceOfAt(_from, block.number);\n', '             require(previousBalanceFrom >= _amount);\n', '\n', '             // Alerts the token controller of the transfer\n', '             if (isContract(controller)) {\n', '                 require(TokenController(controller).onTransfer(_from, _to, _amount));\n', '             }\n', '\n', '             // First update the balance array with the new value for the address\n', '             //    sending the tokens\n', '             updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n', '\n', '             // Then update the balance array with the new value for the address\n', '             //    receiving the tokens\n', '             uint256 previousBalanceTo = balanceOfAt(_to, block.number);\n', '             require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n', '             updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n', '\n', '             // An event to make the transfer easy to find on the blockchain\n', '             Transfer(_from, _to, _amount);\n', '\n', '    }\n', '\n', '    /// @param _owner The address that&#39;s balance is being requested\n', '    /// @return The balance of `_owner` at the current block\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balanceOfAt(_owner, block.number);\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n', '    ///    its behalf. This is a modified version of the ERC20 approve function\n', '    ///    to be a little bit safer\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the approval was successful\n', '    function approve(address _spender, uint256 _amount) returns (bool success) {\n', '        require(transfersEnabled);\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //    allowance to zero by calling `approve(_spender,0)` if it is not\n', '        //    already 0 to mitigate the race condition described here:\n', '        //    https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        // Alerts the token controller of the approve function call\n', '        if (isContract(controller)) {\n', '            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n', '        }\n', '\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to read the `allowed[]` map\n', '    /// @param _owner The address of the account that owns the token\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens of _owner that _spender is allowed\n', '    ///    to spend\n', '    function allowance(address _owner, address _spender\n', '    ) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n', '    ///    its behalf, and then a function is triggered in the contract that is\n', '    ///    being approved, `_spender`. This allows users to use their tokens to\n', '    ///    interact with contracts in one function call instead of two\n', '    /// @param _spender The address of the contract able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the function call was successful\n', '    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n', '    ) public returns (bool success) {\n', '        require(approve(_spender, _amount));\n', '\n', '        ApproveAndCallFallBack(_spender).receiveApproval(\n', '            msg.sender,\n', '            _amount,\n', '            this,\n', '            _extraData\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to get the total number of tokens\n', '    /// @return The total number of tokens\n', '    function totalSupply() constant returns (uint) {\n', '        return totalSupplyAt(block.number);\n', '    }\n', '\n', '\n', '////////////////\n', '// Query balance and totalSupply in History\n', '////////////////\n', '\n', '    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @param _blockNumber The block number when the balance is queried\n', '    /// @return The balance at `_blockNumber`\n', '    function balanceOfAt(address _owner, uint _blockNumber) public view\n', '        returns (uint) {\n', '\n', '        // These next few lines are used when the balance of the token is\n', '        //    requested before a check point was ever created for this token, it\n', '        //    requires that the `parentToken.balanceOfAt` be queried at the\n', '        //    genesis block for that token as this contains initial balance of\n', '        //    this token\n', '        if ((balances[_owner].length == 0)\n', '            || (balances[_owner][0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != 0) {\n', '               return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '               // Has no parent\n', '               return 0;\n', '            }\n', '\n', '        // This will return the expected balance during normal situations\n', '        } else {\n', '            return getValueAt(balances[_owner], _blockNumber);\n', '        }\n', '    }\n', '\n', '    /// @notice Total amount of tokens at a specific `_blockNumber`.\n', '    /// @param _blockNumber The block number when the totalSupply is queried\n', '    /// @return The total amount of tokens at `_blockNumber`\n', '    function totalSupplyAt(uint _blockNumber) public view returns(uint) {\n', '\n', '        // These next few lines are used when the totalSupply of the token is\n', '        //    requested before a check point was ever created for this token, it\n', '        //    requires that the `parentToken.totalSupplyAt` be queried at the\n', '        //    genesis block for this token as that contains totalSupply of this\n', '        //    token at this block number.\n', '        if ((totalSupplyHistory.length == 0)\n', '            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != 0) {\n', '               return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '               return 0;\n', '            }\n', '\n', '        // This will return the expected totalSupply during normal situations\n', '        } else {\n', '            return getValueAt(totalSupplyHistory, _blockNumber);\n', '        }\n', '    }\n', '\n', '////////////////\n', '// Clone Token Method\n', '////////////////\n', '\n', '    /// @notice Creates a new clone token with the initial distribution being\n', '    ///    this token at `_snapshotBlock`\n', '    /// @param _cloneTokenName Name of the clone token\n', '    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\n', '    /// @param _cloneTokenSymbol Symbol of the clone token\n', '    /// @param _snapshotBlock Block when the distribution of the parent token is\n', '    ///    copied to set the initial distribution of the new clone token;\n', '    ///    if the block is zero than the actual block, the current block is used\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    /// @return The address of the new MiniMeToken Contract\n', '    function createCloneToken(\n', '        string _cloneTokenName,\n', '        uint8 _cloneDecimalUnits,\n', '        string _cloneTokenSymbol,\n', '        uint _snapshotBlock,\n', '        bool _transfersEnabled\n', '        ) returns(address) {\n', '        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n', '        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n', '            this,\n', '            _snapshotBlock,\n', '            _cloneTokenName,\n', '            _cloneDecimalUnits,\n', '            _cloneTokenSymbol,\n', '            _transfersEnabled\n', '            );\n', '\n', '        cloneToken.changeController(msg.sender);\n', '\n', '        // An event to make the token easy to find on the blockchain\n', '        NewCloneToken(address(cloneToken), _snapshotBlock);\n', '        return address(cloneToken);\n', '    }\n', '\n', '////////////////\n', '// Generate and destroy tokens\n', '////////////////\n', '\n', '    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n', '    /// @param _owner The address that will be assigned the new tokens\n', '    /// @param _amount The quantity of tokens generated\n', '    /// @return True if the tokens are generated correctly\n', '    function generateTokens(address _owner, uint _amount\n', '    ) onlyController returns (bool) {\n', '        uint curTotalSupply = totalSupply();\n', '        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n', '        uint previousBalanceTo = balanceOf(_owner);\n', '        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n', '        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n', '        Transfer(0, _owner, _amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    /// @notice Burns `_amount` tokens from `_owner`\n', '    /// @param _owner The address that will lose the tokens\n', '    /// @param _amount The quantity of tokens to burn\n', '    /// @return True if the tokens are burned correctly\n', '    function destroyTokens(address _owner, uint256 _amount\n', '    ) onlyController returns (bool) {\n', '        uint256 curTotalSupply = totalSupply();\n', '        require(curTotalSupply >= _amount);\n', '        uint256 previousBalanceFrom = balanceOf(_owner);\n', '        require(previousBalanceFrom >= _amount);\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n', '        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n', '        Transfer(_owner, 0, _amount);\n', '        return true;\n', '    }\n', '\n', '////////////////\n', '// Enable tokens transfers\n', '////////////////\n', '\n', '\n', '    /// @notice Enables token holders to transfer their tokens freely if true\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    function enableTransfers(bool _transfersEnabled) onlyController {\n', '        transfersEnabled = _transfersEnabled;\n', '    }\n', '\n', '////////////////\n', '// Internal helper functions to query and set a value in a snapshot array\n', '////////////////\n', '\n', '    /// @dev `getValueAt` retrieves the number of tokens at a given block number\n', '    /// @param checkpoints The history of values being queried\n', '    /// @param _block The block number to retrieve the value at\n', '    /// @return The number of tokens being queried\n', '    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n', '    ) internal view returns (uint) {\n', '        if (checkpoints.length == 0) return 0;\n', '\n', '        // Shortcut for the actual value\n', '        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n', '            return checkpoints[checkpoints.length-1].value;\n', '        if (_block < checkpoints[0].fromBlock) return 0;\n', '\n', '        // Binary search of the value in the array\n', '        uint min = 0;\n', '        uint max = checkpoints.length-1;\n', '        while (max > min) {\n', '            uint mid = (max + min + 1)/ 2;\n', '            if (checkpoints[mid].fromBlock<=_block) {\n', '               min = mid;\n', '            } else {\n', '               max = mid-1;\n', '            }\n', '        }\n', '        return checkpoints[min].value;\n', '    }\n', '\n', '    /// @dev `updateValueAtNow` used to update the `balances` map and the\n', '    ///    `totalSupplyHistory`\n', '    /// @param checkpoints The history of data being updated\n', '    /// @param _value The new number of tokens\n', '    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n', '    ) internal    {\n', '        if ((checkpoints.length == 0)\n', '        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\n', '                 Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n', '                 newCheckPoint.fromBlock =    uint128(block.number);\n', '                 newCheckPoint.value = uint128(_value);\n', '             } else {\n', '                 Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\n', '                 oldCheckPoint.value = uint128(_value);\n', '             }\n', '    }\n', '\n', '    /// @dev Internal function to determine if an address is a contract\n', '    /// @param _addr The address being queried\n', '    /// @return True if `_addr` is a contract\n', '    function isContract(address _addr) internal view returns(bool) {\n', '        uint size;\n', '        if (_addr == 0) return false;\n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '        return size > 0;\n', '    }\n', '\n', '    /// @dev Helper function to return a min betwen the two uints\n', '    function min(uint a, uint b) internal pure returns (uint) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /// @notice The fallback function: If the contract&#39;s controller has not been\n', '    ///    set to 0, then the `proxyPayment` method is called which relays the\n', '    ///    ether and creates tokens as described in the token controller contract\n', '    function ()    payable {\n', '        require(isContract(controller));\n', '        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n', '    }\n', '\n', '//////////\n', '// Safety Methods\n', '//////////\n', '\n', '    /// @notice This method can be used by the controller to extract mistakenly\n', '    ///    sent tokens to this contract.\n', '    /// @param _token The address of the token contract that you want to recover\n', '    ///    set to 0 in case you want to extract ether.\n', '    function claimTokens(address _token) onlyController {\n', '        if (_token == 0x0) {\n', '            controller.transfer(this.balance);\n', '            return;\n', '        }\n', '\n', '        MiniMeToken token = MiniMeToken(_token);\n', '        uint balance = token.balanceOf(this);\n', '        token.transfer(controller, balance);\n', '        ClaimedTokens(_token, controller, balance);\n', '    }\n', '\n', '////////////////\n', '// Events\n', '////////////////\n', '    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n', '    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n', '    event Approval(\n', '        address indexed _owner,\n', '        address indexed _spender,\n', '        uint256 _amount\n', '        );\n', '\n', '}\n', '\n', '\n', '////////////////\n', '// MiniMeTokenFactory\n', '////////////////\n', '\n', '/// @dev This contract is used to generate clone contracts from a contract.\n', '///    In solidity this is the way to create a contract from a contract of the\n', '///    same class\n', 'contract MiniMeTokenFactory {\n', '\n', '    /// @notice Update the DApp by creating a new token with new functionalities\n', '    ///    the msg.sender becomes the controller of this clone token\n', '    /// @param _parentToken Address of the token being cloned\n', '    /// @param _snapshotBlock Block of the parent token that will\n', '    ///    determine the initial distribution of the clone token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    /// @return The address of the new token contract\n', '    function createCloneToken(\n', '        address _parentToken,\n', '        uint _snapshotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) returns (MiniMeToken) {\n', '        MiniMeToken newToken = new MiniMeToken(\n', '            this,\n', '            _parentToken,\n', '            _snapshotBlock,\n', '            _tokenName,\n', '            _decimalUnits,\n', '            _tokenSymbol,\n', '            _transfersEnabled\n', '            );\n', '\n', '        newToken.changeController(msg.sender);\n', '        return newToken;\n', '    }\n', '}\n', '\n', '/**\n', '    * Copyright 2018, Konstantin Viktorov (EscrowBlock Foundation)\n', '    * Copyright 2017, Jorge Izquierdo (Aragon Foundation)\n', '    *\n', '    * Based on VestedToken.sol from https://github.com/OpenZeppelin/zeppelin-solidity\n', '    *\n', '    * Math – Copyright (c) 2016 Smart Contract Solutions, Inc.\n', '    * SafeMath – Copyright (c) 2016 Smart Contract Solutions, Inc.\n', '    * MiniMeToken – Copyright 2017, Jordi Baylina (Giveth)\n', '    **/\n', '\n', '// @dev MiniMeIrrevocableVestedToken is a derived version of MiniMeToken adding the\n', '// ability to createTokenGrants which are basically a transfer that limits the\n', '// receiver of the tokens how can he spend them over time.\n', '\n', '// For simplicity, token grants are not saved in MiniMe type checkpoints.\n', '// Vanilla cloning ESCBCoin will clone it into a MiniMeToken without vesting.\n', '// More complex cloning could account for past vesting calendars.\n', '\n', 'contract MiniMeIrrevocableVestedToken is MiniMeToken {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    uint256 MAX_GRANTS_PER_ADDRESS = 20;\n', '    // Keep the struct at 2 stores (1 slot for value + 64 * 3 (dates) + 20 (address) = 2 slots\n', '    // (2nd slot is 212 bytes, lower than 256))\n', '    struct TokenGrant {\n', '    address granter;    // 20 bytes\n', '    uint256 value;         // 32 bytes\n', '    uint64 cliff;\n', '    uint64 vesting;\n', '    uint64 start;        // 3 * 8 = 24 bytes\n', '    bool revokable;\n', '    bool burnsOnRevoke;    // 2 * 1 = 2 bits? or 2 bytes?\n', '    } // total 78 bytes = 3 sstore per operation (32 per sstore)\n', '\n', '    mapping (address => TokenGrant[]) public grants;\n', '\n', '    event NewTokenGrant(address indexed from, address indexed to, uint256 value, uint64 start, uint64 cliff, uint64 vesting, uint256 grantId);\n', '\n', '    mapping (address => bool) canCreateGrants;\n', '    address vestingWhitelister;\n', '\n', '    modifier canTransfer(address _sender, uint _value) {\n', '    require(_value <= spendableBalanceOf(_sender));\n', '    _;\n', '    }\n', '\n', '    modifier onlyVestingWhitelister {\n', '    require(msg.sender == vestingWhitelister);\n', '    _;\n', '    }\n', '\n', '    function MiniMeIrrevocableVestedToken (\n', '        address _tokenFactory,\n', '        address _parentToken,\n', '        uint _parentSnapShotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) public MiniMeToken(_tokenFactory, _parentToken, _parentSnapShotBlock, _tokenName, _decimalUnits, _tokenSymbol, _transfersEnabled) {\n', '    vestingWhitelister = msg.sender;\n', '    doSetCanCreateGrants(vestingWhitelister, true);\n', '    }\n', '\n', '    // @dev Add canTransfer modifier before allowing transfer and transferFrom to go through\n', '    function transfer(address _to, uint _value)\n', '             canTransfer(msg.sender, _value)\n', '             public\n', '             returns (bool success) {\n', '    return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value)\n', '             canTransfer(_from, _value)\n', '             public\n', '             returns (bool success) {\n', '    return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function spendableBalanceOf(address _holder) constant public returns (uint) {\n', '    return transferableTokens(_holder, uint64(now));\n', '    }\n', '\n', '    /**\n', '    * @dev Grant tokens to a specified address\n', '    * @param _to address The address which the tokens will be granted to.\n', '    * @param _value uint256 The amount of tokens to be granted.\n', '    * @param _start uint64 Time of the beginning of the grant.\n', '    * @param _cliff uint64 Time of the cliff period.\n', '    * @param _vesting uint64 The vesting period.\n', '    * @param _revokable bool Token can be revoked with send amount to back.\n', '    * @param _burnsOnRevoke bool Token can be revoked with send amount to back and destroyed.\n', '    */\n', '    function grantVestedTokens(\n', '    address _to,\n', '    uint256 _value,\n', '    uint64 _start,\n', '    uint64 _cliff,\n', '    uint64 _vesting,\n', '    bool _revokable,\n', '    bool _burnsOnRevoke\n', '    ) public {\n', '\n', '    // Check for date inconsistencies that may cause unexpected behavior\n', '    require(_cliff >= _start && _vesting >= _cliff);\n', '    require(canCreateGrants[msg.sender]);\n', '\n', '    require(tokenGrantsCount(_to) < MAX_GRANTS_PER_ADDRESS);    // To prevent a user being spammed and have his balance locked (out of gas attack when calculating vesting).\n', '\n', '    uint256 count = grants[_to].push(\n', '               TokenGrant(\n', '                   _revokable ? msg.sender : 0, // avoid storing an extra 20 bytes when it is non-revokable\n', '                   _value,\n', '                   _cliff,\n', '                   _vesting,\n', '                   _start,\n', '                   _revokable,\n', '                   _burnsOnRevoke\n', '               )\n', '               );\n', '\n', '    transfer(_to, _value);\n', '\n', '    NewTokenGrant(msg.sender, _to, _value, _cliff, _vesting, _start, count - 1);\n', '    }\n', '\n', '    function setCanCreateGrants(address _addr, bool _allowed) onlyVestingWhitelister public {\n', '    doSetCanCreateGrants(_addr, _allowed);\n', '    }\n', '\n', '    function doSetCanCreateGrants(address _addr, bool _allowed) internal {\n', '    canCreateGrants[_addr] = _allowed;\n', '    }\n', '\n', '    function changeVestingWhitelister(address _newWhitelister) onlyVestingWhitelister public {\n', '    doSetCanCreateGrants(vestingWhitelister, false);\n', '    vestingWhitelister = _newWhitelister;\n', '    doSetCanCreateGrants(vestingWhitelister, true);\n', '    }\n', '\n', '    /**\n', '    * @dev Revoke the grant of tokens of a specifed address.\n', '    * @param _holder The address which will have its tokens revoked.\n', '    * @param _grantId The id of the token grant.\n', '    */\n', '    function revokeTokenGrant(address _holder, uint256 _grantId) public {\n', '    TokenGrant storage grant = grants[_holder][_grantId];\n', '\n', '    require(grant.revokable);\n', '    require(grant.granter == msg.sender); // Only granter can revoke it\n', '\n', '    address receiver = grant.burnsOnRevoke ? 0xdead : msg.sender;\n', '\n', '    uint256 nonVested = nonVestedTokens(grant, uint64(now));\n', '\n', '    // remove grant from array\n', '    delete grants[_holder][_grantId];\n', '    grants[_holder][_grantId] = grants[_holder][grants[_holder].length.sub(1)];\n', '    grants[_holder].length -= 1;\n', '\n', '    var previousBalanceReceiver = balanceOfAt(receiver, block.number);\n', '\n', '    //balances[receiver] = balances[receiver].add(nonVested);\n', '    updateValueAtNow(balances[receiver], previousBalanceReceiver + nonVested);\n', '\n', '    var previousBalance_holder = balanceOfAt(_holder, block.number);\n', '\n', '    //balances[_holder] = balances[_holder].sub(nonVested);\n', '    updateValueAtNow(balances[_holder], previousBalance_holder - nonVested);\n', '\n', '    Transfer(_holder, receiver, nonVested);\n', '    }\n', '\n', '    /**\n', '    * @dev Calculate the total amount of transferable tokens of a holder at a given time\n', '    * @param holder address The address of the holder\n', '    * @param time uint64 The specific time.\n', '    * @return An uint256 representing a holder&#39;s total amount of transferable tokens.\n', '    */\n', '    function transferableTokens(address holder, uint64 time) public view returns (uint256) {\n', '    uint256 grantIndex = tokenGrantsCount(holder);\n', '\n', '    if (grantIndex == 0) return balanceOf(holder); // shortcut for holder without grants\n', '\n', '    // Iterate through all the grants the holder has, and add all non-vested tokens\n', '    uint256 nonVested = 0;\n', '    for (uint256 i = 0; i < grantIndex; i++) {\n', '        nonVested = SafeMath.add(nonVested, nonVestedTokens(grants[holder][i], time));\n', '    }\n', '\n', '    // Balance - totalNonVested is the amount of tokens a holder can transfer at any given time\n', '    uint256 vestedTransferable = SafeMath.sub(balanceOf(holder), nonVested);\n', '\n', '    // Return the minimum of how many vested can transfer and other value\n', '    // in case there are other limiting transferability factors (default is balanceOf)\n', '    return Math.min256(vestedTransferable, balanceOf(holder));\n', '    }\n', '\n', '    /**\n', '    * @dev Check the amount of grants that an address has.\n', '    * @param _holder The holder of the grants.\n', '    * @return A uint256 representing the total amount of grants.\n', '    */\n', '    function tokenGrantsCount(address _holder) public view returns (uint256 index) {\n', '    return grants[_holder].length;\n', '    }\n', '\n', '    /**\n', '    * @dev Calculate amount of vested tokens at a specifc time.\n', '    * @param tokens uint256 The amount of tokens grantted.\n', '    * @param time uint64 The time to be checked\n', '    * @param start uint64 A time representing the begining of the grant\n', '    * @param cliff uint64 The cliff period.\n', '    * @param vesting uint64 The vesting period.\n', '    * @return An uint256 representing the amount of vested tokensof a specif grant.\n', '    *    transferableTokens\n', '    *    |                        _/--------    vestedTokens rect\n', '    *    |                        _/\n', '    *    |                    _/\n', '    *    |                    _/\n', '    *    |                 _/\n', '    *    |               /\n', '    *    |               .|\n', '    *    |            .    |\n', '    *    |            .    |\n', '    *    |        .        |\n', '    *    |        .        |\n', '    *    |    .            |\n', '    *    +===+===========+---------+----------> time\n', '    *        Start         Clift    Vesting\n', '    */\n', '    function calculateVestedTokens(\n', '    uint256 tokens,\n', '    uint256 time,\n', '    uint256 start,\n', '    uint256 cliff,\n', '    uint256 vesting) internal view returns (uint256)\n', '    {\n', '        // Shortcuts for before cliff and after vesting cases.\n', '        if (time < cliff) return 0;\n', '        if (time >= vesting) return tokens;\n', '\n', '        // Interpolate all vested tokens.\n', '        // As before cliff the shortcut returns 0, we can use just calculate a value\n', '        // in the vesting rect (as shown in above&#39;s figure)\n', '\n', '        // vestedTokens = tokens * (time - start) / (vesting - start)\n', '        uint256 vestedTokens = SafeMath.div(\n', '                                    SafeMath.mul(\n', '                                       tokens,\n', '                                       SafeMath.sub(time, start)\n', '                                       ),\n', '                                    SafeMath.sub(vesting, start)\n', '                                    );\n', '\n', '        return vestedTokens;\n', '    }\n', '\n', '    /**\n', '    * @dev Get all information about a specifc grant.\n', '    * @param _holder The address which will have its tokens revoked.\n', '    * @param _grantId The id of the token grant.\n', '    * @return Returns all the values that represent a TokenGrant(address, value, start, cliff,\n', '    * revokability, burnsOnRevoke, and vesting) plus the vested value at the current time.\n', '    */\n', '    function tokenGrant(address _holder, uint256 _grantId) public view returns (address granter, uint256 value, uint256 vested, uint64 start, uint64 cliff, uint64 vesting, bool revokable, bool burnsOnRevoke) {\n', '    TokenGrant storage grant = grants[_holder][_grantId];\n', '\n', '    granter = grant.granter;\n', '    value = grant.value;\n', '    start = grant.start;\n', '    cliff = grant.cliff;\n', '    vesting = grant.vesting;\n', '    revokable = grant.revokable;\n', '    burnsOnRevoke = grant.burnsOnRevoke;\n', '\n', '    vested = vestedTokens(grant, uint64(now));\n', '    }\n', '\n', '    /**\n', '    * @dev Get the amount of vested tokens at a specific time.\n', '    * @param grant TokenGrant The grant to be checked.\n', '    * @param time The time to be checked\n', '    * @return An uint256 representing the amount of vested tokens of a specific grant at a specific time.\n', '    */\n', '    function vestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\n', '    return calculateVestedTokens(\n', '        grant.value,\n', '        uint256(time),\n', '        uint256(grant.start),\n', '        uint256(grant.cliff),\n', '        uint256(grant.vesting)\n', '    );\n', '    }\n', '\n', '    /**\n', '    * @dev Calculate the amount of non vested tokens at a specific time.\n', '    * @param grant TokenGrant The grant to be checked.\n', '    * @param time uint64 The time to be checked\n', '    * @return An uint256 representing the amount of non vested tokens of a specifc grant on the\n', '    * passed time frame.\n', '    */\n', '    function nonVestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\n', '    // Of all the tokens of the grant, how many of them are not vested?\n', '    // grantValue - vestedTokens\n', '    return grant.value.sub(vestedTokens(grant, time));\n', '    }\n', '\n', '    /**\n', '    * @dev Calculate the date when the holder can trasfer all its tokens\n', '    * @param holder address The address of the holder\n', '    * @return An uint256 representing the date of the last transferable tokens.\n', '    */\n', '    function lastTokenIsTransferableDate(address holder) constant public returns (uint64 date) {\n', '    date = uint64(now);\n', '    uint256 grantIndex = grants[holder].length;\n', '    for (uint256 i = 0; i < grantIndex; i++) {\n', '        date = Math.max64(grants[holder][i].vesting, date);\n', '    }\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * Dividends\n', ' * Copyright 2018, Konstantin Viktorov (EscrowBlock Foundation)\n', ' * Copyright 2017, Adam Dossa\n', ' * Based on ProfitSharingContract.sol from https://github.com/adamdossa/ProfitSharingContract\n', ' **/\n', '\n', 'contract MiniMeIrrVesDivToken is MiniMeIrrevocableVestedToken {\n', '\n', '    event DividendDeposited(address indexed _depositor, uint256 _blockNumber, uint256 _timestamp, uint256 _amount, uint256 _totalSupply, uint256 _dividendIndex);\n', '    event DividendClaimed(address indexed _claimer, uint256 _dividendIndex, uint256 _claim);\n', '    event DividendRecycled(address indexed _recycler, uint256 _blockNumber, uint256 _timestamp, uint256 _amount, uint256 _totalSupply, uint256 _dividendIndex);\n', '\n', '    uint256 public RECYCLE_TIME = 1 years;\n', '\n', '    function MiniMeIrrVesDivToken (\n', '         address _tokenFactory,\n', '         address _parentToken,\n', '         uint _parentSnapShotBlock,\n', '         string _tokenName,\n', '         uint8 _decimalUnits,\n', '         string _tokenSymbol,\n', '         bool _transfersEnabled\n', '    ) public MiniMeIrrevocableVestedToken(_tokenFactory, _parentToken, _parentSnapShotBlock, _tokenName, _decimalUnits, _tokenSymbol, _transfersEnabled) {}\n', '\n', '    struct Dividend {\n', '    uint256 blockNumber;\n', '    uint256 timestamp;\n', '    uint256 amount;\n', '    uint256 claimedAmount;\n', '    uint256 totalSupply;\n', '    bool recycled;\n', '    mapping (address => bool) claimed;\n', '    }\n', '\n', '    Dividend[] public dividends;\n', '\n', '    mapping (address => uint256) dividendsClaimed;\n', '\n', '    modifier validDividendIndex(uint256 _dividendIndex) {\n', '    require(_dividendIndex < dividends.length);\n', '    _;\n', '    }\n', '\n', '    function depositDividend() public payable\n', '    onlyController\n', '    {\n', '    uint256 currentSupply = super.totalSupplyAt(block.number);\n', '    uint256 dividendIndex = dividends.length;\n', '    uint256 blockNumber = SafeMath.sub(block.number, 1);\n', '    dividends.push(\n', '         Dividend(\n', '         blockNumber,\n', '         getNow(),\n', '         msg.value,\n', '         0,\n', '         currentSupply,\n', '         false\n', '         )\n', '    );\n', '    DividendDeposited(msg.sender, blockNumber, getNow(), msg.value, currentSupply, dividendIndex);\n', '    }\n', '\n', '    function claimDividend(uint256 _dividendIndex) public\n', '    validDividendIndex(_dividendIndex)\n', '    {\n', '    Dividend storage dividend = dividends[_dividendIndex];\n', '    require(dividend.claimed[msg.sender] == false);\n', '    require(dividend.recycled == false);\n', '    uint256 balance = super.balanceOfAt(msg.sender, dividend.blockNumber);\n', '    uint256 claim = balance.mul(dividend.amount).div(dividend.totalSupply);\n', '    dividend.claimed[msg.sender] = true;\n', '    dividend.claimedAmount = SafeMath.add(dividend.claimedAmount, claim);\n', '    if (claim > 0) {\n', '         msg.sender.transfer(claim);\n', '         DividendClaimed(msg.sender, _dividendIndex, claim);\n', '    }\n', '    }\n', '\n', '    function claimDividendAll() public {\n', '    require(dividendsClaimed[msg.sender] < dividends.length);\n', '    for (uint i = dividendsClaimed[msg.sender]; i < dividends.length; i++) {\n', '         if ((dividends[i].claimed[msg.sender] == false) && (dividends[i].recycled == false)) {\n', '         dividendsClaimed[msg.sender] = SafeMath.add(i, 1);\n', '         claimDividend(i);\n', '         }\n', '    }\n', '    }\n', '\n', '    function recycleDividend(uint256 _dividendIndex) public\n', '    onlyController\n', '    validDividendIndex(_dividendIndex)\n', '    {\n', '    Dividend storage dividend = dividends[_dividendIndex];\n', '    require(dividend.recycled == false);\n', '    require(dividend.timestamp < SafeMath.sub(getNow(), RECYCLE_TIME));\n', '    dividends[_dividendIndex].recycled = true;\n', '    uint256 currentSupply = super.totalSupplyAt(block.number);\n', '    uint256 remainingAmount = SafeMath.sub(dividend.amount, dividend.claimedAmount);\n', '    uint256 dividendIndex = dividends.length;\n', '    uint256 blockNumber = SafeMath.sub(block.number, 1);\n', '    dividends.push(\n', '         Dividend(\n', '         blockNumber,\n', '         getNow(),\n', '         remainingAmount,\n', '         0,\n', '         currentSupply,\n', '         false\n', '         )\n', '    );\n', '    DividendRecycled(msg.sender, blockNumber, getNow(), remainingAmount, currentSupply, dividendIndex);\n', '    }\n', '\n', '    function getNow() internal constant returns (uint256) {\n', '    return now;\n', '    }\n', '}\n', '\n', '/**\n', ' * Copyright 2018, Konstantin Viktorov (EscrowBlock Foundation)\n', ' **/\n', '\n', 'contract ESCBCoin is MiniMeIrrVesDivToken {\n', '  // @dev ESCBCoin constructor just parametrizes the MiniMeIrrVesDivToken constructor\n', '  function ESCBCoin (\n', '    address _tokenFactory\n', '  ) public MiniMeIrrVesDivToken(\n', '    _tokenFactory,\n', '    0x0,            // no parent token\n', '    0,              // no snapshot block number from parent\n', '    "ESCB token",   // Token name\n', '    18,             // Decimals\n', '    "ESCB",         // Symbol\n', '    true            // Enable transfers\n', '    ) {}\n', '}']