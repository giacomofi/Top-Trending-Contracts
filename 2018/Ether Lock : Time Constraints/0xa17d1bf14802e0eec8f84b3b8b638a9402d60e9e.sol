['pragma solidity ^0.4.10;\n', '\n', 'contract IERC20Token {\n', '    function totalSupply() public constant returns ( uint256 supply ) { supply; }\n', '    function balanceOf( address _owner ) public constant returns ( uint256 balance ) { _owner; balance; }\n', '    function allowance( address _owner, address _spender ) public constant returns ( uint256 remaining ) { _owner; _spender; remaining; }\n', '\n', '  function transfer( address _to, uint256 _value ) public returns ( bool success );\n', '  function transferFrom( address _from, address _to, uint256 _value ) public returns ( bool success );\n', '  function approve( address _spender, uint256 _value ) public returns ( bool success );\n', '}\n', 'contract RegaUtils {\n', '  modifier validAddress( address _address ) {\n', '    require( _address != 0x0 );\n', '    _;\n', '  }\n', '\n', '  // Overflow checked math\n', '  function safeAdd( uint256 x, uint256 y ) internal returns( uint256 ) {\n', '    uint256 z = x + y;\n', '    assert( z >= x );\n', '    return z;\n', '  }\n', '\n', '  function safeSub( uint256 x, uint256 y ) internal returns( uint256 ) {\n', '    assert( x >= y);\n', '    return x - y;\n', '  }\n', '}\n', 'contract ERC20Token is IERC20Token, RegaUtils {\n', '  uint256 public totalSupply = 0;\n', '  mapping( address => uint256 ) public balanceOf;\n', '  mapping( address => mapping( address => uint256 ) ) public allowance;\n', '\n', '  event Transfer( address indexed _from, address indexed _to, uint256 _value );\n', '  event Approval( address indexed _owner, address indexed _spender, uint256 _value );\n', '\n', '  function transfer( address _to, uint256 _value ) validAddress( _to )\n', '    returns( bool success )\n', '  {\n', '    balanceOf[ msg.sender ] = safeSub( balanceOf[ msg.sender ], _value );\n', '    balanceOf[ _to ] = safeAdd( balanceOf[ _to ], _value );\n', '    Transfer( msg.sender, _to, _value );\n', '    return true;\n', '  }\n', '\n', '  function transferFrom( address _from, address _to, uint256 _value ) validAddress( _from ) validAddress( _to )\n', '    returns( bool success )\n', '  {\n', '    allowance[ _from ][ msg.sender ] = safeSub( allowance[ _from ][ msg.sender ], _value );\n', '    balanceOf[ _from] = safeSub( balanceOf[_from], _value );\n', '    balanceOf[ _to] = safeAdd( balanceOf[_to], _value );\n', '    Transfer( _from, _to, _value );\n', '    return true;\n', '  }\n', '\n', '  function approve( address _spender, uint256 _value ) validAddress( _spender )\n', '    returns( bool success)\n', '  {\n', '    require( _value == 0 || allowance[ msg.sender ][ _spender ] == 0 );\n', '\n', '    allowance[ msg.sender ][ _spender ] = _value;\n', '    Approval( msg.sender, _spender, _value );\n', '    return true;\n', '  }\n', '\n', '}\n', 'contract RSTBase is ERC20Token {\n', '  address public board;\n', '  address public owner;\n', '\n', '  address public votingData;\n', '  address public tokenData;\n', '  address public feesData;\n', '\n', '  uint256 public reserve;\n', '  uint32  public crr;         // per cent\n', '  uint256 public weiForToken; // current rate\n', '  uint8   public totalAccounts;\n', '\n', '  modifier boardOnly() {\n', '    require(msg.sender == board);\n', '    _;\n', '  }\n', '}\n', 'contract TokenControllerBase is RSTBase {\n', '  function init() public;\n', '  function isSellOpen() public constant returns(bool);\n', '  function isBuyOpen() public constant returns(bool);\n', '  function sell(uint value) public;\n', '  function buy() public payable;\n', '  function addToReserve() public payable;\n', '}\n', '\n', 'contract VotingControllerBase is RSTBase {\n', '  function voteFor() public;\n', '  function voteAgainst() public;\n', '  function startVoting() public;\n', '  function stopVoting() public;\n', '  function getCurrentVotingDescription() public constant returns (bytes32 vd) ;\n', '}\n', '\n', 'contract FeesControllerBase is RSTBase {\n', '  function init() public;\n', '  function withdrawFee() public;\n', '  function calculateFee() public;\n', '  function addPayee( address payee ) public;\n', '  function removePayee( address payee ) public;\n', '  function setRepayment( ) payable public;\n', '}\n', 'contract RiskSharingToken is RSTBase {\n', '  string public constant version = "0.1";\n', '  string public constant name = "REGA Risk Sharing Token";\n', '  string public constant symbol = "RST";\n', '  uint8 public constant decimals = 10;\n', '\n', '  TokenControllerBase public tokenController;\n', '  VotingControllerBase public votingController;\n', '  FeesControllerBase public feesController;\n', '\n', '  modifier ownerOnly() {\n', '    require( msg.sender == owner );\n', '    _;\n', '  }\n', '\n', '  modifier boardOnly() {\n', '    require( msg.sender == board );\n', '    _;\n', '  }\n', '\n', '  modifier authorized() {\n', '    require( msg.sender == owner || msg.sender == board);\n', '    _;\n', '  }\n', '\n', '\n', '  function RiskSharingToken( address _board ) {\n', '    board = _board;\n', '    owner = msg.sender;\n', '    tokenController = TokenControllerBase(0);\n', '    votingController = VotingControllerBase(0);\n', '    weiForToken = uint(10)**(18-1-decimals); // 0.1 Ether\n', '    reserve = 0;\n', '    crr = 20;\n', '    totalAccounts = 0;\n', '  }\n', '\n', '  function() payable {\n', '\n', '  }\n', '\n', '  function setTokenController( TokenControllerBase tc, address _tokenData ) public boardOnly {\n', '    tokenController = tc;\n', '    if( _tokenData != address(0) )\n', '      tokenData = _tokenData;\n', '    if( tokenController != TokenControllerBase(0) )\n', '      if( !tokenController.delegatecall(bytes4(sha3("init()"))) )\n', '        revert();\n', '  }\n', '\n', '// Voting\n', '  function setVotingController( VotingControllerBase vc ) public boardOnly {\n', '    votingController = vc;\n', '  }\n', '\n', '  function startVoting( bytes32 /*description*/ ) public boardOnly validAddress(votingController) {\n', '    if( !votingController.delegatecall(msg.data) )\n', '      revert();\n', '  }\n', '\n', '  function stopVoting() public boardOnly validAddress(votingController) {\n', '    if( !votingController.delegatecall(msg.data) )\n', '      revert();\n', '  }\n', '\n', '  function voteFor() public validAddress(votingController) {\n', '    if( !votingController.delegatecall(msg.data) )\n', '      revert();\n', '  }\n', '\n', '  function voteAgainst() public validAddress(votingController) {\n', '    if( !votingController.delegatecall(msg.data) )\n', '      revert();\n', '  }\n', '\n', '// Tokens operations\n', '  function buy() public payable validAddress(tokenController) {\n', '    if( !tokenController.delegatecall(msg.data) )\n', '      revert();\n', '  }\n', '\n', '  function sell( uint /*value*/ ) public validAddress(tokenController) {\n', '    if( !tokenController.delegatecall(msg.data) )\n', '      revert();\n', '  }\n', '\n', '  function addToReserve( ) public payable validAddress(tokenController) {\n', '    if( !tokenController.delegatecall(msg.data) )\n', '      revert();\n', '  }\n', '\n', '// some amount ma be not the reserve\n', '  function withdraw( uint256 amount ) public boardOnly {\n', '    require(safeSub(this.balance, amount) >= reserve);\n', '    board.transfer( amount );\n', '  }\n', '\n', '  function issueToken( address /*holder*/, uint256 /*amount*/ ) public authorized {\n', '    if( !tokenController.delegatecall(msg.data) )\n', '      revert();\n', '  }\n', '\n', '  function issueTokens( uint256[] /*data*/ ) public ownerOnly {\n', '    if( !tokenController.delegatecall(msg.data) )\n', '      revert();\n', '  }\n', '\n', '  // fees operations\n', '\n', '  function setFeesController( FeesControllerBase fc ) public boardOnly {\n', '    feesController = fc;\n', '    if( !feesController.delegatecall(bytes4(sha3("init()"))) )\n', '      revert();\n', '  }\n', '\n', '  function withdrawFee() public validAddress(feesController) {\n', '      if( !feesController.delegatecall(msg.data) )\n', '        revert();\n', '  }\n', '\n', '  function calculateFee() public validAddress(feesController) {\n', '      if( !feesController.delegatecall(msg.data) )\n', '        revert();\n', '  }\n', '  function addPayee( address /*payee*/ ) public validAddress(feesController) {\n', '      if( !feesController.delegatecall(msg.data) )\n', '        revert();\n', '  }\n', '  function removePayee( address /*payee*/ ) public validAddress(feesController) {\n', '      if( !feesController.delegatecall(msg.data) )\n', '        revert();\n', '  }\n', '  function setRepayment( ) payable public validAddress(feesController) {\n', '      if( !feesController.delegatecall(msg.data) )\n', '        revert();\n', '  }\n', '}']