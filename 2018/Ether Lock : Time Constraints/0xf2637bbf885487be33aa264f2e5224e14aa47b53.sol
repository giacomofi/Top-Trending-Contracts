['pragma solidity 0.4.21;\n', '\n', 'contract pixelgrid {\n', '    uint8[1000000] public pixels;\n', '    address public manager;\n', '    address public owner = 0x668d7b1a47b3a981CbdE581bc973B047e1989390;\n', '    event Updated();\n', '    function pixelgrid() public {\n', '        manager = msg.sender;\n', '    }\n', '\n', '    function setColors(uint32[] pixelIndex, uint8[] color) public payable  {\n', '      require(pixelIndex.length < 256);\n', '      require(msg.value >= pixelIndex.length * 0.0001 ether || msg.sender == manager);\n', '      require(color.length == pixelIndex.length);\n', '    for (uint8 i=0; i<pixelIndex.length; i++) {\n', '    pixels[pixelIndex[i]] = color[i];\n', '    }\n', '    emit Updated();\n', '\n', '    }\n', '\n', '\n', '    function getColors(uint32 start) public view returns (uint8[50000] ) {\n', '      require(start < 1000000);\n', '        uint8[50000] memory partialPixels;\n', '           for (uint32 i=0; i<50000; i++) {\n', '               partialPixels[i]=pixels[start+i];\n', '           }\n', '\n', '      return partialPixels;\n', '    }\n', '\n', '    function collectFunds() public {\n', '         require(msg.sender == manager || msg.sender == owner);\n', '         address contractAddress = this;\n', '         owner.transfer(contractAddress .balance);\n', '    }\n', '\n', '    function () public payable {\n', '      // dont receive ether via fallback\n', '  }\n', '}']
['pragma solidity 0.4.21;\n', '\n', 'contract pixelgrid {\n', '    uint8[1000000] public pixels;\n', '    address public manager;\n', '    address public owner = 0x668d7b1a47b3a981CbdE581bc973B047e1989390;\n', '    event Updated();\n', '    function pixelgrid() public {\n', '        manager = msg.sender;\n', '    }\n', '\n', '    function setColors(uint32[] pixelIndex, uint8[] color) public payable  {\n', '      require(pixelIndex.length < 256);\n', '      require(msg.value >= pixelIndex.length * 0.0001 ether || msg.sender == manager);\n', '      require(color.length == pixelIndex.length);\n', '    for (uint8 i=0; i<pixelIndex.length; i++) {\n', '    pixels[pixelIndex[i]] = color[i];\n', '    }\n', '    emit Updated();\n', '\n', '    }\n', '\n', '\n', '    function getColors(uint32 start) public view returns (uint8[50000] ) {\n', '      require(start < 1000000);\n', '        uint8[50000] memory partialPixels;\n', '           for (uint32 i=0; i<50000; i++) {\n', '               partialPixels[i]=pixels[start+i];\n', '           }\n', '\n', '      return partialPixels;\n', '    }\n', '\n', '    function collectFunds() public {\n', '         require(msg.sender == manager || msg.sender == owner);\n', '         address contractAddress = this;\n', '         owner.transfer(contractAddress .balance);\n', '    }\n', '\n', '    function () public payable {\n', '      // dont receive ether via fallback\n', '  }\n', '}']
