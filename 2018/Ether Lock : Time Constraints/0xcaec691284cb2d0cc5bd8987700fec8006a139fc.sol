['pragma solidity ^0.4.19;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  \n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20 {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '  \n', '  address internal tokensHolder = 0x2Ff4be5E03a079D5FC20Dba8d763059FcB78CA9f;\n', '  address internal burnAndRef = 0x84765e3f2D0379eC7AAb7de8b480762a75f14ef4;\n', '\n', '  uint256 totalSupply_;\n', '  uint256 tokensDistributed_;\n', '  uint256 burnedTokens_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '  function tokensAvailable() public view returns (uint256) {\n', '    return balances[tokensHolder];\n', '  }\n', '  function tokensDistributed() public view returns (uint256) {\n', '    return tokensDistributed_;\n', '  }\n', '  function getTokensHolder() public view returns (address) {\n', '    return tokensHolder;\n', '  }\n', '  function burnedTokens() public view returns (uint256) {\n', '    return burnedTokens_;\n', '  }\n', '  function getRefAddress() public view returns (address) {\n', '    return burnAndRef;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  \n', '  function deposit(address _to, uint256 _value) onlyOwner public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= tokensAvailable());\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[tokensHolder] = balances[tokensHolder].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    tokensDistributed_ = tokensDistributed_.add(_value);\n', '    emit Transfer(address(0), _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract BurnableToken is MintableToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '  \n', '  function transferToRef(address _to, uint256 _value) public onlyOwner {\n', '    require(_value <= balances[tokensHolder]);\n', '\n', '    balances[tokensHolder] = balances[tokensHolder].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    tokensDistributed_ = tokensDistributed_.add(_value);\n', '    emit Transfer(tokensHolder, address(0), _value);\n', '  }\n', '  \n', '  function burnTokens(uint256 _value) public onlyOwner {\n', '    require(_value <= balances[burnAndRef]);\n', '\n', '    balances[burnAndRef] = balances[burnAndRef].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    burnedTokens_ = burnedTokens_.add(_value);\n', '    emit Burn(burnAndRef, _value);\n', '    emit Transfer(burnAndRef, address(0), _value);\n', '  }\n', '}\n', '\n', 'contract WRLToken is BurnableToken {\n', '    string public name = "Whyral Token";\n', '    string public symbol = "WRL";\n', '    uint256 public decimals = 8;\n', '    \n', '    uint256 internal rate;\n', '    \n', '    uint256 public currentStage;\n', '  \n', '    uint256 internal stage0Cap = 42000000 * (10 ** uint256(decimals));\n', '    uint256 internal stage1Cap = 71165000 * (10 ** uint256(decimals));  //29165000\n', '    uint256 internal stage2Cap = 91165000 * (10 ** uint256(decimals));  //20000000\n', '    uint256 internal stage3Cap = 103497402 * (10 ** uint256(decimals)); //12332402\n', '\n', '    uint256 internal stage0Start = 1523782800; //15 April 2018\n', '    uint256 internal stage0End = 1527764400;   //31 May 2018\n', '    uint256 internal stage1Start = 1528016400; //3 June 2018\n', '    uint256 internal stage1End = 1530356400;   //30 June 2018\n', '    uint256 internal stage2Start = 1530608400; //3 July 2018\n', '    uint256 internal stage2End = 1532516400;   //25 July 2018\n', '    uint256 internal stage3Start = 1532768400; //28 July 2018\n', '    uint256 internal stage3End = 1534330800;   //15 Aug 2018\n', '    \n', '    uint256 internal stage0Rate = 700000;  //1 ETH = 7000.00 Decimal is considered while calculation\n', '    uint256 internal stage1Rate = 583300;  //1 ETH = 5833.00 Decimal is considered while calculation\n', '    uint256 internal stage2Rate = 500000;  //1 ETH = 5000.00 Decimal is considered while calculation\n', '    uint256 internal stage3Rate = 466782;  //1 ETH = 4667.82 Decimal is considered while calculation\n', '    \n', '    function getStage0Cap() public view returns (uint256) {\n', '        return stage0Cap;\n', '    }\n', '    function getStage1Cap() public view returns (uint256) {\n', '        return stage1Cap;\n', '    }\n', '    function getStage2Cap() public view returns (uint256) {\n', '        return stage2Cap;\n', '    }\n', '    function getStage3Cap() public view returns (uint256) {\n', '        return stage3Cap;\n', '    }\n', '    function getStage0End() public view returns (uint256) {\n', '        return stage0End;\n', '    }\n', '    function getStage1End() public view returns (uint256) {\n', '        return stage1End;\n', '    }\n', '    function getStage2End() public view returns (uint256) {\n', '        return stage2End;\n', '    }\n', '    function getStage3End() public view returns (uint256) {\n', '        return stage3End;\n', '    }\n', '    function getStage0Start() public view returns (uint256) {\n', '        return stage0Start;\n', '    }\n', '    function getStage1Start() public view returns (uint256) {\n', '        return stage1Start;\n', '    }\n', '    function getStage2Start() public view returns (uint256) {\n', '        return stage2Start;\n', '    }\n', '    function getStage3Start() public view returns (uint256) {\n', '        return stage3Start;\n', '    }\n', '    function getDecimals() public view returns (uint256) {\n', '        return decimals;\n', '    }\n', '\n', '    \n', '    function getRateStages(uint256 _tokens) public onlyOwner returns(uint256) {\n', '      uint256 tokensDistributedValue = tokensDistributed();\n', '      tokensDistributedValue = tokensDistributedValue.sub(4650259800000000);\n', '      uint256 burnedTokensValue = burnedTokens();\n', '      uint256 currentValue = tokensDistributedValue.add(burnedTokensValue);\n', '      uint256 finalTokenValue = currentValue.add(_tokens);\n', '      uint256 toBeBurned;\n', '      \n', '      if(now >= stage0Start && now < stage0End) {\n', '          if(finalTokenValue <= stage0Cap) {\n', '              rate = stage0Rate;\n', '              currentStage = 0;\n', '          }\n', '          else {\n', '              rate = 0;\n', '              currentStage = 0;\n', '          }\n', '      }\n', '      else if(now >= stage1Start && now < stage1End) {\n', '          if(currentValue < stage0Cap) {\n', '              toBeBurned = stage0Cap.sub(currentValue);\n', '              transferToRef(burnAndRef, toBeBurned);\n', '              \n', '              finalTokenValue = finalTokenValue.add(toBeBurned);\n', '              \n', '              if(finalTokenValue <= stage1Cap) {\n', '                  rate = stage1Rate;\n', '                  currentStage = 1;\n', '              }\n', '              else {\n', '                  rate = 0;\n', '                  currentStage = 1;\n', '              }\n', '          }\n', '          else {\n', '              if(finalTokenValue <= stage1Cap) {\n', '                  rate = stage1Rate;\n', '                  currentStage = 1;\n', '              }\n', '              else {\n', '                  rate = 0;\n', '                  currentStage = 1;\n', '              }\n', '          }\n', '      }\n', '      else if(now >= stage2Start && now < stage2End) {\n', '          if(currentValue < stage1Cap) {\n', '              toBeBurned = stage1Cap.sub(currentValue);\n', '              transferToRef(burnAndRef, toBeBurned);\n', '              \n', '              finalTokenValue = finalTokenValue.add(toBeBurned);\n', '              \n', '              if(finalTokenValue <= stage2Cap) {\n', '                  rate = stage2Rate;\n', '                  currentStage = 2;\n', '              }\n', '              else {\n', '                  rate = 0;\n', '                  currentStage = 2;\n', '              }\n', '          }\n', '          else {\n', '              if(finalTokenValue <= stage2Cap) {\n', '                  rate = stage2Rate;\n', '                  currentStage = 2;\n', '              }\n', '              else {\n', '                  rate = 0;\n', '                  currentStage = 2;\n', '              }\n', '          }\n', '      }\n', '      else if(now >= stage3Start && now < stage3End) {\n', '          if(currentValue < stage2Cap) {\n', '              toBeBurned = stage2Cap.sub(currentValue);\n', '              transferToRef(burnAndRef, toBeBurned);\n', '              \n', '              finalTokenValue = finalTokenValue.add(toBeBurned);\n', '              \n', '              if(finalTokenValue <= stage3Cap) {\n', '                  rate = stage3Rate;\n', '                  currentStage = 3;\n', '              }\n', '              else {\n', '                  rate = 0;\n', '                  currentStage = 3;\n', '              }\n', '          }\n', '          else {\n', '              if(finalTokenValue <= stage3Cap) {\n', '                  rate = stage3Rate;\n', '                  currentStage = 3;\n', '              }\n', '              else {\n', '                  rate = 0;\n', '                  currentStage = 3;\n', '              }\n', '          }\n', '      }\n', '      else if(now >= stage3End) {\n', '          if(currentValue < stage3Cap) {\n', '              toBeBurned = stage3Cap.sub(currentValue);\n', '              transferToRef(burnAndRef, toBeBurned);\n', '              \n', '              rate = 0;\n', '              currentStage = 4;\n', '          }\n', '          else {\n', '              rate = 0;\n', '              currentStage = 4;\n', '          }\n', '      }\n', '      else {\n', '          rate = 0;\n', '      }\n', '      \n', '      return rate;\n', '  }\n', '    \n', '    function WRLToken() public {\n', '        totalSupply_ = 0;\n', '        tokensDistributed_ = 0;\n', '        currentStage = 0;\n', '        \n', '        uint256 __initialSupply = 150000000 * (10 ** uint256(decimals));\n', '        address tokensHolder = getTokensHolder();\n', '        mint(tokensHolder, __initialSupply);\n', '        finishMinting();\n', '    }\n', '}\n', '\n', 'contract TimedCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public openingTime;\n', '  uint256 public closingTime;\n', '\n', '  /**\n', '   * @dev Reverts if not in crowdsale time range. \n', '   */\n', '  modifier onlyWhileOpen {\n', '    require(now >= openingTime && now <= closingTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor, takes crowdsale opening and closing times.\n', '   * @param _openingTime Crowdsale opening time\n', '   * @param _closingTime Crowdsale closing time\n', '   */\n', '  function TimedCrowdsale(uint256 _openingTime, uint256 _closingTime) public {\n', '    require(_openingTime >= now);\n', '    require(_closingTime >= _openingTime);\n', '\n', '    openingTime = _openingTime;\n', '    closingTime = _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    return now > closingTime;\n', '  }\n', '  \n', '  function isOpen() public view returns (bool) {\n', '    return ((now > openingTime) && (now < closingTime));\n', '  }\n', '  \n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhileOpen {\n', '    //super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', 'contract FinalizableCrowdsale is TimedCrowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '  \n', '  // The token being sold\n', '  WRLToken public token;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', '   * work. Calls the contract&#39;s finalization function.\n', '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasClosed());\n', '\n', '    finalization();\n', '    emit Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '      token.getRateStages(0);\n', '  }\n', '}\n', '\n', 'contract WhitelistedCrowdsale is FinalizableCrowdsale {\n', '\n', '  mapping(address => bool) public whitelist;\n', '\n', '  /**\n', '   * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\n', '   */\n', '  modifier isWhitelisted(address _beneficiary) {\n', '    require(whitelist[_beneficiary]);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds single address to whitelist.\n', '   * @param _beneficiary Address to be added to the whitelist\n', '   */\n', '  function addToWhitelist(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\n', '   * @param _beneficiaries Addresses to be added to the whitelist\n', '   */\n', '  function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\n', '    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '      whitelist[_beneficiaries[i]] = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Removes single address from whitelist.\n', '   * @param _beneficiary Address to be removed to the whitelist\n', '   */\n', '  function removeFromWhitelist(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring beneficiary to be in whitelist.\n', '   * @param _beneficiary Token beneficiary\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal isWhitelisted(_beneficiary) {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', 'contract WRLCrowdsale is WhitelistedCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // Address where funds are collected\n', '  address public wallet = 0x4fB0346F51fA853639EC0d0dA211Cb6F3e27a1f5;\n', '  // Other Addresses\n', '  address internal foundersAndTeam = 0x2E6f0ebFdee59546f224450Ba0c8F0522cedA2e9;\n', '  address internal advisors = 0xCa502d4cEaa99Bf1aD554f91FD2A9013511629D4;\n', '  address internal bounties = 0x45138E31Ab7402b8Cf363F9d4e732fdb020e5Dd8;\n', '  address internal reserveFund = 0xE9ebcAdB98127e3CDe242EaAdcCb57BF0d9576Cc;\n', '  \n', '  uint256 internal foundersAndTeamTokens = 22502598 * (10 ** uint256(8));\n', '  uint256 internal advisorsTokens = 12000000 * (10 ** uint256(8));\n', '  uint256 internal bountiesTokens = 6000000 * (10 ** uint256(8));\n', '  uint256 internal reserveFundTokens = 6000000 * (10 ** uint256(8));\n', '    \n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  \n', '  //1523782800 : 15 April 2018\n', '  //1534330800 : 15 Aug 2018\n', '  function WRLCrowdsale() public \n', '     TimedCrowdsale(1523782800, 1534330800)\n', '  {\n', '      weiRaised = 0;\n', '      \n', '      token = new WRLToken();\n', '      \n', '      token.deposit(foundersAndTeam, foundersAndTeamTokens);\n', '      token.deposit(advisors, advisorsTokens);\n', '      token.deposit(bounties, bountiesTokens);\n', '      token.deposit(reserveFund, reserveFundTokens);\n', '  }\n', '  \n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '    require(msg.value >= 100000000000000000);\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    uint256 rate = token.getRateStages(tokens);\n', '    require(rate != 0);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '  \n', '  function referralTokens(address _beneficiary, uint256 _tokens) onlyOwner public {\n', '      uint256 decimals = token.getDecimals();\n', '      _tokens = _tokens * (10 ** uint256(decimals));\n', '      _preValidatePurchase(_beneficiary, _tokens);\n', '      \n', '      uint256 rate = token.getRateStages(_tokens);\n', '      require(rate != 0);\n', '      \n', '      _processPurchase(_beneficiary, _tokens);\n', '      emit TokenPurchase(msg.sender, _beneficiary, 0, _tokens);\n', '      \n', '      _updatePurchasingState(_beneficiary, 0);\n', '      \n', '      _postValidatePurchase(_beneficiary, 0);\n', '  }\n', '  \n', '  function callStages() onlyOwner public {\n', '      token.getRateStages(0);\n', '  }\n', '  \n', '  function callBurnTokens(uint256 _tokens) public {\n', '      address a = token.getRefAddress();\n', '      require(msg.sender == a);\n', '      \n', '      token.burnTokens(_tokens);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statemens to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    require(_tokenAmount <= token.tokensAvailable());\n', '\n', '    token.deposit(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount) internal returns (uint256) {\n', '      uint256 tokenAmount = _weiAmount;\n', '      uint256 rate = token.getRateStages(0);\n', '      require(rate != 0);\n', '      tokenAmount = tokenAmount.mul(rate);\n', '      tokenAmount = tokenAmount.div(1000000000000);\n', '      return tokenAmount;\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  \n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20 {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '  \n', '  address internal tokensHolder = 0x2Ff4be5E03a079D5FC20Dba8d763059FcB78CA9f;\n', '  address internal burnAndRef = 0x84765e3f2D0379eC7AAb7de8b480762a75f14ef4;\n', '\n', '  uint256 totalSupply_;\n', '  uint256 tokensDistributed_;\n', '  uint256 burnedTokens_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '  function tokensAvailable() public view returns (uint256) {\n', '    return balances[tokensHolder];\n', '  }\n', '  function tokensDistributed() public view returns (uint256) {\n', '    return tokensDistributed_;\n', '  }\n', '  function getTokensHolder() public view returns (address) {\n', '    return tokensHolder;\n', '  }\n', '  function burnedTokens() public view returns (uint256) {\n', '    return burnedTokens_;\n', '  }\n', '  function getRefAddress() public view returns (address) {\n', '    return burnAndRef;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  \n', '  function deposit(address _to, uint256 _value) onlyOwner public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= tokensAvailable());\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[tokensHolder] = balances[tokensHolder].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    tokensDistributed_ = tokensDistributed_.add(_value);\n', '    emit Transfer(address(0), _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract BurnableToken is MintableToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '  \n', '  function transferToRef(address _to, uint256 _value) public onlyOwner {\n', '    require(_value <= balances[tokensHolder]);\n', '\n', '    balances[tokensHolder] = balances[tokensHolder].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    tokensDistributed_ = tokensDistributed_.add(_value);\n', '    emit Transfer(tokensHolder, address(0), _value);\n', '  }\n', '  \n', '  function burnTokens(uint256 _value) public onlyOwner {\n', '    require(_value <= balances[burnAndRef]);\n', '\n', '    balances[burnAndRef] = balances[burnAndRef].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    burnedTokens_ = burnedTokens_.add(_value);\n', '    emit Burn(burnAndRef, _value);\n', '    emit Transfer(burnAndRef, address(0), _value);\n', '  }\n', '}\n', '\n', 'contract WRLToken is BurnableToken {\n', '    string public name = "Whyral Token";\n', '    string public symbol = "WRL";\n', '    uint256 public decimals = 8;\n', '    \n', '    uint256 internal rate;\n', '    \n', '    uint256 public currentStage;\n', '  \n', '    uint256 internal stage0Cap = 42000000 * (10 ** uint256(decimals));\n', '    uint256 internal stage1Cap = 71165000 * (10 ** uint256(decimals));  //29165000\n', '    uint256 internal stage2Cap = 91165000 * (10 ** uint256(decimals));  //20000000\n', '    uint256 internal stage3Cap = 103497402 * (10 ** uint256(decimals)); //12332402\n', '\n', '    uint256 internal stage0Start = 1523782800; //15 April 2018\n', '    uint256 internal stage0End = 1527764400;   //31 May 2018\n', '    uint256 internal stage1Start = 1528016400; //3 June 2018\n', '    uint256 internal stage1End = 1530356400;   //30 June 2018\n', '    uint256 internal stage2Start = 1530608400; //3 July 2018\n', '    uint256 internal stage2End = 1532516400;   //25 July 2018\n', '    uint256 internal stage3Start = 1532768400; //28 July 2018\n', '    uint256 internal stage3End = 1534330800;   //15 Aug 2018\n', '    \n', '    uint256 internal stage0Rate = 700000;  //1 ETH = 7000.00 Decimal is considered while calculation\n', '    uint256 internal stage1Rate = 583300;  //1 ETH = 5833.00 Decimal is considered while calculation\n', '    uint256 internal stage2Rate = 500000;  //1 ETH = 5000.00 Decimal is considered while calculation\n', '    uint256 internal stage3Rate = 466782;  //1 ETH = 4667.82 Decimal is considered while calculation\n', '    \n', '    function getStage0Cap() public view returns (uint256) {\n', '        return stage0Cap;\n', '    }\n', '    function getStage1Cap() public view returns (uint256) {\n', '        return stage1Cap;\n', '    }\n', '    function getStage2Cap() public view returns (uint256) {\n', '        return stage2Cap;\n', '    }\n', '    function getStage3Cap() public view returns (uint256) {\n', '        return stage3Cap;\n', '    }\n', '    function getStage0End() public view returns (uint256) {\n', '        return stage0End;\n', '    }\n', '    function getStage1End() public view returns (uint256) {\n', '        return stage1End;\n', '    }\n', '    function getStage2End() public view returns (uint256) {\n', '        return stage2End;\n', '    }\n', '    function getStage3End() public view returns (uint256) {\n', '        return stage3End;\n', '    }\n', '    function getStage0Start() public view returns (uint256) {\n', '        return stage0Start;\n', '    }\n', '    function getStage1Start() public view returns (uint256) {\n', '        return stage1Start;\n', '    }\n', '    function getStage2Start() public view returns (uint256) {\n', '        return stage2Start;\n', '    }\n', '    function getStage3Start() public view returns (uint256) {\n', '        return stage3Start;\n', '    }\n', '    function getDecimals() public view returns (uint256) {\n', '        return decimals;\n', '    }\n', '\n', '    \n', '    function getRateStages(uint256 _tokens) public onlyOwner returns(uint256) {\n', '      uint256 tokensDistributedValue = tokensDistributed();\n', '      tokensDistributedValue = tokensDistributedValue.sub(4650259800000000);\n', '      uint256 burnedTokensValue = burnedTokens();\n', '      uint256 currentValue = tokensDistributedValue.add(burnedTokensValue);\n', '      uint256 finalTokenValue = currentValue.add(_tokens);\n', '      uint256 toBeBurned;\n', '      \n', '      if(now >= stage0Start && now < stage0End) {\n', '          if(finalTokenValue <= stage0Cap) {\n', '              rate = stage0Rate;\n', '              currentStage = 0;\n', '          }\n', '          else {\n', '              rate = 0;\n', '              currentStage = 0;\n', '          }\n', '      }\n', '      else if(now >= stage1Start && now < stage1End) {\n', '          if(currentValue < stage0Cap) {\n', '              toBeBurned = stage0Cap.sub(currentValue);\n', '              transferToRef(burnAndRef, toBeBurned);\n', '              \n', '              finalTokenValue = finalTokenValue.add(toBeBurned);\n', '              \n', '              if(finalTokenValue <= stage1Cap) {\n', '                  rate = stage1Rate;\n', '                  currentStage = 1;\n', '              }\n', '              else {\n', '                  rate = 0;\n', '                  currentStage = 1;\n', '              }\n', '          }\n', '          else {\n', '              if(finalTokenValue <= stage1Cap) {\n', '                  rate = stage1Rate;\n', '                  currentStage = 1;\n', '              }\n', '              else {\n', '                  rate = 0;\n', '                  currentStage = 1;\n', '              }\n', '          }\n', '      }\n', '      else if(now >= stage2Start && now < stage2End) {\n', '          if(currentValue < stage1Cap) {\n', '              toBeBurned = stage1Cap.sub(currentValue);\n', '              transferToRef(burnAndRef, toBeBurned);\n', '              \n', '              finalTokenValue = finalTokenValue.add(toBeBurned);\n', '              \n', '              if(finalTokenValue <= stage2Cap) {\n', '                  rate = stage2Rate;\n', '                  currentStage = 2;\n', '              }\n', '              else {\n', '                  rate = 0;\n', '                  currentStage = 2;\n', '              }\n', '          }\n', '          else {\n', '              if(finalTokenValue <= stage2Cap) {\n', '                  rate = stage2Rate;\n', '                  currentStage = 2;\n', '              }\n', '              else {\n', '                  rate = 0;\n', '                  currentStage = 2;\n', '              }\n', '          }\n', '      }\n', '      else if(now >= stage3Start && now < stage3End) {\n', '          if(currentValue < stage2Cap) {\n', '              toBeBurned = stage2Cap.sub(currentValue);\n', '              transferToRef(burnAndRef, toBeBurned);\n', '              \n', '              finalTokenValue = finalTokenValue.add(toBeBurned);\n', '              \n', '              if(finalTokenValue <= stage3Cap) {\n', '                  rate = stage3Rate;\n', '                  currentStage = 3;\n', '              }\n', '              else {\n', '                  rate = 0;\n', '                  currentStage = 3;\n', '              }\n', '          }\n', '          else {\n', '              if(finalTokenValue <= stage3Cap) {\n', '                  rate = stage3Rate;\n', '                  currentStage = 3;\n', '              }\n', '              else {\n', '                  rate = 0;\n', '                  currentStage = 3;\n', '              }\n', '          }\n', '      }\n', '      else if(now >= stage3End) {\n', '          if(currentValue < stage3Cap) {\n', '              toBeBurned = stage3Cap.sub(currentValue);\n', '              transferToRef(burnAndRef, toBeBurned);\n', '              \n', '              rate = 0;\n', '              currentStage = 4;\n', '          }\n', '          else {\n', '              rate = 0;\n', '              currentStage = 4;\n', '          }\n', '      }\n', '      else {\n', '          rate = 0;\n', '      }\n', '      \n', '      return rate;\n', '  }\n', '    \n', '    function WRLToken() public {\n', '        totalSupply_ = 0;\n', '        tokensDistributed_ = 0;\n', '        currentStage = 0;\n', '        \n', '        uint256 __initialSupply = 150000000 * (10 ** uint256(decimals));\n', '        address tokensHolder = getTokensHolder();\n', '        mint(tokensHolder, __initialSupply);\n', '        finishMinting();\n', '    }\n', '}\n', '\n', 'contract TimedCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public openingTime;\n', '  uint256 public closingTime;\n', '\n', '  /**\n', '   * @dev Reverts if not in crowdsale time range. \n', '   */\n', '  modifier onlyWhileOpen {\n', '    require(now >= openingTime && now <= closingTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor, takes crowdsale opening and closing times.\n', '   * @param _openingTime Crowdsale opening time\n', '   * @param _closingTime Crowdsale closing time\n', '   */\n', '  function TimedCrowdsale(uint256 _openingTime, uint256 _closingTime) public {\n', '    require(_openingTime >= now);\n', '    require(_closingTime >= _openingTime);\n', '\n', '    openingTime = _openingTime;\n', '    closingTime = _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    return now > closingTime;\n', '  }\n', '  \n', '  function isOpen() public view returns (bool) {\n', '    return ((now > openingTime) && (now < closingTime));\n', '  }\n', '  \n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhileOpen {\n', '    //super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', 'contract FinalizableCrowdsale is TimedCrowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '  \n', '  // The token being sold\n', '  WRLToken public token;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasClosed());\n', '\n', '    finalization();\n', '    emit Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '      token.getRateStages(0);\n', '  }\n', '}\n', '\n', 'contract WhitelistedCrowdsale is FinalizableCrowdsale {\n', '\n', '  mapping(address => bool) public whitelist;\n', '\n', '  /**\n', '   * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\n', '   */\n', '  modifier isWhitelisted(address _beneficiary) {\n', '    require(whitelist[_beneficiary]);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds single address to whitelist.\n', '   * @param _beneficiary Address to be added to the whitelist\n', '   */\n', '  function addToWhitelist(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\n', '   * @param _beneficiaries Addresses to be added to the whitelist\n', '   */\n', '  function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\n', '    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '      whitelist[_beneficiaries[i]] = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Removes single address from whitelist.\n', '   * @param _beneficiary Address to be removed to the whitelist\n', '   */\n', '  function removeFromWhitelist(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring beneficiary to be in whitelist.\n', '   * @param _beneficiary Token beneficiary\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal isWhitelisted(_beneficiary) {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', 'contract WRLCrowdsale is WhitelistedCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // Address where funds are collected\n', '  address public wallet = 0x4fB0346F51fA853639EC0d0dA211Cb6F3e27a1f5;\n', '  // Other Addresses\n', '  address internal foundersAndTeam = 0x2E6f0ebFdee59546f224450Ba0c8F0522cedA2e9;\n', '  address internal advisors = 0xCa502d4cEaa99Bf1aD554f91FD2A9013511629D4;\n', '  address internal bounties = 0x45138E31Ab7402b8Cf363F9d4e732fdb020e5Dd8;\n', '  address internal reserveFund = 0xE9ebcAdB98127e3CDe242EaAdcCb57BF0d9576Cc;\n', '  \n', '  uint256 internal foundersAndTeamTokens = 22502598 * (10 ** uint256(8));\n', '  uint256 internal advisorsTokens = 12000000 * (10 ** uint256(8));\n', '  uint256 internal bountiesTokens = 6000000 * (10 ** uint256(8));\n', '  uint256 internal reserveFundTokens = 6000000 * (10 ** uint256(8));\n', '    \n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  \n', '  //1523782800 : 15 April 2018\n', '  //1534330800 : 15 Aug 2018\n', '  function WRLCrowdsale() public \n', '     TimedCrowdsale(1523782800, 1534330800)\n', '  {\n', '      weiRaised = 0;\n', '      \n', '      token = new WRLToken();\n', '      \n', '      token.deposit(foundersAndTeam, foundersAndTeamTokens);\n', '      token.deposit(advisors, advisorsTokens);\n', '      token.deposit(bounties, bountiesTokens);\n', '      token.deposit(reserveFund, reserveFundTokens);\n', '  }\n', '  \n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '    require(msg.value >= 100000000000000000);\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    uint256 rate = token.getRateStages(tokens);\n', '    require(rate != 0);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '  \n', '  function referralTokens(address _beneficiary, uint256 _tokens) onlyOwner public {\n', '      uint256 decimals = token.getDecimals();\n', '      _tokens = _tokens * (10 ** uint256(decimals));\n', '      _preValidatePurchase(_beneficiary, _tokens);\n', '      \n', '      uint256 rate = token.getRateStages(_tokens);\n', '      require(rate != 0);\n', '      \n', '      _processPurchase(_beneficiary, _tokens);\n', '      emit TokenPurchase(msg.sender, _beneficiary, 0, _tokens);\n', '      \n', '      _updatePurchasingState(_beneficiary, 0);\n', '      \n', '      _postValidatePurchase(_beneficiary, 0);\n', '  }\n', '  \n', '  function callStages() onlyOwner public {\n', '      token.getRateStages(0);\n', '  }\n', '  \n', '  function callBurnTokens(uint256 _tokens) public {\n', '      address a = token.getRefAddress();\n', '      require(msg.sender == a);\n', '      \n', '      token.burnTokens(_tokens);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statemens to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    require(_tokenAmount <= token.tokensAvailable());\n', '\n', '    token.deposit(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount) internal returns (uint256) {\n', '      uint256 tokenAmount = _weiAmount;\n', '      uint256 rate = token.getRateStages(0);\n', '      require(rate != 0);\n', '      tokenAmount = tokenAmount.mul(rate);\n', '      tokenAmount = tokenAmount.div(1000000000000);\n', '      return tokenAmount;\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}']
