['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract REDToken is ERC20, Ownable {\n', '\n', '    using SafeMath for uint;\n', '\n', '/*----------------- Token Information -----------------*/\n', '\n', '    string public constant name = "Red Community Token";\n', '    string public constant symbol = "RED";\n', '\n', '    uint8 public decimals = 18;                            // (ERC20 API) Decimal precision, factor is 1e18\n', '\n', '    mapping (address => uint256) angels;                   // Angels accounts table (during locking period only)\n', "    mapping (address => uint256) accounts;                 // User's accounts table\n", "    mapping (address => mapping (address => uint256)) allowed; // User's allowances table\n", '\n', '/*----------------- ICO Information -----------------*/\n', '\n', '    uint256 public angelSupply;                            // Angels sale supply\n', '    uint256 public earlyBirdsSupply;                       // Early birds supply\n', '    uint256 public publicSupply;                           // Open round supply\n', '    uint256 public foundationSupply;                       // Red Foundation/Community supply\n', '    uint256 public redTeamSupply;                          // Red team supply\n', '    uint256 public marketingSupply;                        // Marketing & strategic supply\n', '\n', '    uint256 public angelAmountRemaining;                   // Amount of private angels tokens remaining at a given time\n', '    uint256 public icoStartsAt;                            // Crowdsale ending timestamp\n', '    uint256 public icoEndsAt;                              // Crowdsale ending timestamp\n', "    uint256 public redTeamLockingPeriod;                   // Locking period for Red team's supply\n", "    uint256 public angelLockingPeriod;                     // Locking period for Angel's supply\n", '\n', '    address public crowdfundAddress;                       // Crowdfunding contract address\n', '    address public redTeamAddress;                         // Red team address\n', '    address public foundationAddress;                      // Foundation address\n', '    address public marketingAddress;                       // Private equity address\n', '\n', '    bool public unlock20Done = false;                      // Allows the 20% unlocking for angels only once\n', '\n', '    enum icoStages {\n', "        Ready,                                             // Initial state on contract's creation\n", '        EarlyBirds,                                        // Early birds state\n', '        PublicSale,                                        // Public crowdsale state\n', '        Done                                               // Ending state after ICO\n', '    }\n', '    icoStages stage;                                       // Crowdfunding current state\n', '\n', '/*----------------- Events -----------------*/\n', '\n', '    event EarlyBirdsFinalized(uint tokensRemaining);       // Event called when early birds round is done\n', '    event CrowdfundFinalized(uint tokensRemaining);        // Event called when crowdfund is done\n', '\n', '/*----------------- Modifiers -----------------*/\n', '\n', '    modifier nonZeroAddress(address _to) {                 // Ensures an address is provided\n', '        require(_to != 0x0);\n', '        _;\n', '    }\n', '\n', '    modifier nonZeroAmount(uint _amount) {                 // Ensures a non-zero amount\n', '        require(_amount > 0);\n', '        _;\n', '    }\n', '\n', '    modifier nonZeroValue() {                              // Ensures a non-zero value is passed\n', '        require(msg.value > 0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyDuringCrowdfund(){                   // Ensures actions can only happen after crowdfund ends\n', '        require((now >= icoStartsAt) && (now < icoEndsAt));\n', '        _;\n', '    }\n', '\n', '    modifier notBeforeCrowdfundEnds(){                     // Ensures actions can only happen after crowdfund ends\n', '        require(now >= icoEndsAt);\n', '        _;\n', '    }\n', '\n', '    modifier checkRedTeamLockingPeriod() {                 // Ensures locking period is over\n', '        require(now >= redTeamLockingPeriod);\n', '        _;\n', '    }\n', '\n', '    modifier checkAngelsLockingPeriod() {                  // Ensures locking period is over\n', '        require(now >= angelLockingPeriod);\n', '        _;\n', '    }\n', '\n', '    modifier onlyCrowdfund() {                             // Ensures only crowdfund can call the function\n', '        require(msg.sender == crowdfundAddress);\n', '        _;\n', '    }\n', '\n', '/*----------------- ERC20 API -----------------*/\n', '\n', '    // -------------------------------------------------\n', '    // Transfers amount to address\n', '    // -------------------------------------------------\n', '    function transfer(address _to, uint256 _amount) public notBeforeCrowdfundEnds returns (bool success) {\n', '        require(accounts[msg.sender] >= _amount);         // check amount of balance can be tranfered\n', '        addToBalance(_to, _amount);\n', '        decrementBalance(msg.sender, _amount);\n', '        Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    // -------------------------------------------------\n', '    // Transfers from one address to another (need allowance to be called first)\n', '    // -------------------------------------------------\n', '    function transferFrom(address _from, address _to, uint256 _amount) public notBeforeCrowdfundEnds returns (bool success) {\n', '        require(allowance(_from, msg.sender) >= _amount);\n', '        decrementBalance(_from, _amount);\n', '        addToBalance(_to, _amount);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    // -------------------------------------------------\n', '    // Approves another address a certain amount of RED\n', '    // -------------------------------------------------\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require((_value == 0) || (allowance(msg.sender, _spender) == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    // -------------------------------------------------\n', "    // Gets an address's RED allowance\n", '    // -------------------------------------------------\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    // -------------------------------------------------\n', '    // Gets the RED balance of any address\n', '    // -------------------------------------------------\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return accounts[_owner] + angels[_owner];\n', '    }\n', '\n', '\n', '/*----------------- Token API -----------------*/\n', '\n', '    // -------------------------------------------------\n', "    // Contract's constructor\n", '    // -------------------------------------------------\n', '    function REDToken() public {\n', '        totalSupply         = 200000000 * 1e18;             // 100% - 200 million total RED with 18 decimals\n', '\n', '        angelSupply         =  20000000 * 1e18;             //  10% -  20 million RED for private angels sale\n', '        earlyBirdsSupply    =  48000000 * 1e18;             //  24% -  48 million RED for early-bird sale\n', '        publicSupply        =  12000000 * 1e18;             //   6% -  12 million RED for the public crowdsale\n', '        redTeamSupply       =  30000000 * 1e18;             //  15% -  30 million RED for Red team\n', '        foundationSupply    =  70000000 * 1e18;             //  35% -  70 million RED for foundation/incentivising efforts\n', '        marketingSupply     =  20000000 * 1e18;             //  10% -  20 million RED for covering marketing and strategic expenses\n', '\n', '        angelAmountRemaining = angelSupply;                 // Decreased over the course of the private angel sale\n', '        redTeamAddress       = 0x31aa507c140E012d0DcAf041d482e04F36323B03;       // Red Team address\n', '        foundationAddress    = 0x93e3AF42939C163Ee4146F63646Fb4C286CDbFeC;       // Foundation/Community address\n', '        marketingAddress     = 0x0;                         // Marketing/Strategic address\n', '\n', '        icoStartsAt          = 1515398400;                  // Jan 8th 2018, 16:00, GMT+8\n', '        icoEndsAt            = 1517385600;                  // Jan 31th 2018, 16:00, GMT+8\n', '        angelLockingPeriod   = icoEndsAt.add(90 days);      //  3 months locking period\n', '        redTeamLockingPeriod = icoEndsAt.add(365 days);     // 12 months locking period\n', '\n', '        addToBalance(foundationAddress, foundationSupply);\n', '\n', '        stage = icoStages.Ready;                            // Initializes state\n', '    }\n', '\n', '    // -------------------------------------------------\n', '    // Opens early birds sale\n', '    // -------------------------------------------------\n', '    function startCrowdfund() external onlyCrowdfund onlyDuringCrowdfund returns(bool) {\n', '        require(stage == icoStages.Ready);\n', '        stage = icoStages.EarlyBirds;\n', '        addToBalance(crowdfundAddress, earlyBirdsSupply);\n', '        return true;\n', '    }\n', '\n', '    // -------------------------------------------------\n', '    // Returns TRUE if early birds round is currently going on\n', '    // -------------------------------------------------\n', '    function isEarlyBirdsStage() external view returns(bool) {\n', '        return (stage == icoStages.EarlyBirds);\n', '    }\n', '\n', '    // -------------------------------------------------\n', '    // Sets the crowdfund address, can only be done once\n', '    // -------------------------------------------------\n', '    function setCrowdfundAddress(address _crowdfundAddress) external onlyOwner nonZeroAddress(_crowdfundAddress) {\n', '        require(crowdfundAddress == 0x0);\n', '        crowdfundAddress = _crowdfundAddress;\n', '    }\n', '\n', '    // -------------------------------------------------\n', '    // Function for the Crowdfund to transfer tokens\n', '    // -------------------------------------------------\n', '    function transferFromCrowdfund(address _to, uint256 _amount) external onlyCrowdfund nonZeroAmount(_amount) nonZeroAddress(_to) returns (bool success) {\n', '        require(balanceOf(crowdfundAddress) >= _amount);\n', '        decrementBalance(crowdfundAddress, _amount);\n', '        addToBalance(_to, _amount);\n', '        Transfer(0x0, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    // -------------------------------------------------\n', '    // Releases Red team supply after locking period is passed\n', '    // -------------------------------------------------\n', '    function releaseRedTeamTokens() external checkRedTeamLockingPeriod onlyOwner returns(bool success) {\n', '        require(redTeamSupply > 0);\n', '        addToBalance(redTeamAddress, redTeamSupply);\n', '        Transfer(0x0, redTeamAddress, redTeamSupply);\n', '        redTeamSupply = 0;\n', '        return true;\n', '    }\n', '\n', '    // -------------------------------------------------\n', '    // Releases Marketing & strategic supply\n', '    // -------------------------------------------------\n', '    function releaseMarketingTokens() external onlyOwner returns(bool success) {\n', '        require(marketingSupply > 0);\n', '        addToBalance(marketingAddress, marketingSupply);\n', '        Transfer(0x0, marketingAddress, marketingSupply);\n', '        marketingSupply = 0;\n', '        return true;\n', '    }\n', '\n', '    // -------------------------------------------------\n', '    // Finalizes early birds round. If some RED are left, let them overflow to the crowdfund\n', '    // -------------------------------------------------\n', '    function finalizeEarlyBirds() external onlyOwner returns (bool success) {\n', '        require(stage == icoStages.EarlyBirds);\n', '        uint256 amount = balanceOf(crowdfundAddress);\n', '        addToBalance(crowdfundAddress, publicSupply);\n', '        stage = icoStages.PublicSale;\n', '        EarlyBirdsFinalized(amount);                       // event log\n', '        return true;\n', '    }\n', '\n', '    // -------------------------------------------------\n', '    // Finalizes crowdfund. If there are leftover RED, let them overflow to foundation\n', '    // -------------------------------------------------\n', '    function finalizeCrowdfund() external onlyCrowdfund {\n', '        require(stage == icoStages.PublicSale);\n', '        uint256 amount = balanceOf(crowdfundAddress);\n', '        if (amount > 0) {\n', '            accounts[crowdfundAddress] = 0;\n', '            addToBalance(foundationAddress, amount);\n', '            Transfer(crowdfundAddress, foundationAddress, amount);\n', '        }\n', '        stage = icoStages.Done;\n', '        CrowdfundFinalized(amount);                        // event log\n', '    }\n', '\n', '    // -------------------------------------------------\n', '    // Changes Red Team wallet\n', '    // -------------------------------------------------\n', '    function changeRedTeamAddress(address _wallet) external onlyOwner {\n', '        redTeamAddress = _wallet;\n', '    }\n', '\n', '    // -------------------------------------------------\n', '    // Changes Marketing&Strategic wallet\n', '    // -------------------------------------------------\n', '    function changeMarketingAddress(address _wallet) external onlyOwner {\n', '        marketingAddress = _wallet;\n', '    }\n', '\n', '    // -------------------------------------------------\n', '    // Function to unlock 20% RED to private angels investors\n', '    // -------------------------------------------------\n', '    function partialUnlockAngelsAccounts(address[] _batchOfAddresses) external onlyOwner notBeforeCrowdfundEnds returns (bool success) {\n', '        require(unlock20Done == false);\n', '        uint256 amount;\n', '        address holder;\n', '        for (uint256 i = 0; i < _batchOfAddresses.length; i++) {\n', '            holder = _batchOfAddresses[i];\n', '            amount = angels[holder].mul(20).div(100);\n', '            angels[holder] = angels[holder].sub(amount);\n', '            addToBalance(holder, amount);\n', '        }\n', '        unlock20Done = true;\n', '        return true;\n', '    }\n', '\n', '    // -------------------------------------------------\n', '    // Function to unlock all remaining RED to private angels investors (after 3 months)\n', '    // -------------------------------------------------\n', '    function fullUnlockAngelsAccounts(address[] _batchOfAddresses) external onlyOwner checkAngelsLockingPeriod returns (bool success) {\n', '        uint256 amount;\n', '        address holder;\n', '        for (uint256 i = 0; i < _batchOfAddresses.length; i++) {\n', '            holder = _batchOfAddresses[i];\n', '            amount = angels[holder];\n', '            angels[holder] = 0;\n', '            addToBalance(holder, amount);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    // -------------------------------------------------\n', '    // Function to reserve RED to private angels investors (initially locked)\n', '    // the amount of RED is in Wei\n', '    // -------------------------------------------------\n', '    function deliverAngelsREDAccounts(address[] _batchOfAddresses, uint[] _amountOfRED) external onlyOwner onlyDuringCrowdfund returns (bool success) {\n', '        for (uint256 i = 0; i < _batchOfAddresses.length; i++) {\n', '            deliverAngelsREDBalance(_batchOfAddresses[i], _amountOfRED[i]);\n', '        }\n', '        return true;\n', '    }\n', '/*----------------- Helper functions -----------------*/\n', '    // -------------------------------------------------\n', '    // If one address has contributed more than once,\n', '    // the contributions will be aggregated\n', '    // -------------------------------------------------\n', '    function deliverAngelsREDBalance(address _accountHolder, uint _amountOfBoughtRED) internal onlyOwner {\n', '        require(angelAmountRemaining > 0);\n', '        angels[_accountHolder] = angels[_accountHolder].add(_amountOfBoughtRED);\n', '        Transfer(0x0, _accountHolder, _amountOfBoughtRED);\n', '        angelAmountRemaining = angelAmountRemaining.sub(_amountOfBoughtRED);\n', '    }\n', '\n', '    // -------------------------------------------------\n', '    // Adds to balance\n', '    // -------------------------------------------------\n', '    function addToBalance(address _address, uint _amount) internal {\n', '        accounts[_address] = accounts[_address].add(_amount);\n', '    }\n', '\n', '    // -------------------------------------------------\n', '    // Removes from balance\n', '    // -------------------------------------------------\n', '    function decrementBalance(address _address, uint _amount) internal {\n', '        accounts[_address] = accounts[_address].sub(_amount);\n', '    }\n', '}']