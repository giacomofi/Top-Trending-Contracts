['pragma solidity ^0.4.18;\n', '\n', 'contract DogCoreInterface {\n', '\n', '    address public ceoAddress;\n', '    address public cfoAddress;\n', '\n', '    function getDog(uint256 _id)\n', '        external\n', '        view\n', '        returns (\n', '        uint256 cooldownIndex,\n', '        uint256 nextActionAt,\n', '        uint256 siringWithId,\n', '        uint256 birthTime,\n', '        uint256 matronId,\n', '        uint256 sireId,\n', '        uint256 generation,\n', '        uint256 genes,\n', '        uint8  variation,\n', '        uint256 gen0\n', '    );\n', '    function ownerOf(uint256 _tokenId) external view returns (address);\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n', '    function sendMoney(address _to, uint256 _money) external;\n', '    function totalSupply() external view returns (uint);\n', '    function getOwner(uint256 _tokenId) public view returns(address);\n', '    function getAvailableBlance() external view returns(uint256);\n', '}\n', '\n', '\n', 'contract LotteryBase {\n', '    \n', '    uint8 public currentGene;\n', '    \n', '    uint256 public lastBlockNumber;\n', '    \n', '    uint256 randomSeed = 1;\n', '\n', '    struct CLottery {\n', '        \n', '        uint8[7]        luckyGenes;\n', '        \n', '        uint256         totalAmount;\n', '        \n', '        uint256         openBlock;\n', '        \n', '        bool            isReward;\n', '        \n', '        bool         noFirstReward;\n', '    }\n', '    \n', '    CLottery[] public CLotteries;\n', '    \n', '    address public finalLottery;\n', '    \n', '    uint256 public SpoolAmount = 0;\n', '    \n', '    DogCoreInterface public dogCore;\n', '    \n', '    event OpenLottery(uint8 currentGene, uint8 luckyGenes, uint256 currentTerm, uint256 blockNumber, uint256 totalAmount);\n', '    \n', '    event OpenCarousel(uint256 luckyGenes, uint256 currentTerm, uint256 blockNumber, uint256 totalAmount);\n', '    \n', '    \n', '    modifier onlyCEO() {\n', '        require(msg.sender == dogCore.ceoAddress());\n', '        _;  \n', '    }\n', '    \n', '    modifier onlyCFO() {\n', '        require(msg.sender == dogCore.cfoAddress());\n', '        _;  \n', '    }\n', '    \n', '    function toLotteryPool(uint amount) public onlyCFO {\n', '        require(SpoolAmount >= amount);\n', '        SpoolAmount -= amount;\n', '    }\n', '    \n', '    function _isCarousal(uint256 currentTerm) external view returns(bool) {\n', '       return (currentTerm > 1 && CLotteries[currentTerm - 2].noFirstReward && CLotteries[currentTerm - 1].noFirstReward); \n', '    }\n', '    \n', '    function getCurrentTerm() external view returns (uint256) {\n', '\n', '        return (CLotteries.length - 1);\n', '    }\n', '}\n', '\n', '\n', 'contract LotteryGenes is LotteryBase {\n', '    \n', '    function convertGeneArray(uint256 gene) public pure returns(uint8[7]) {\n', '        uint8[28] memory geneArray; \n', '        uint8[7] memory lotteryArray;\n', '        uint index = 0;\n', '        for (index = 0; index < 28; index++) {\n', '            uint256 geneItem = gene % (2 ** (5 * (index + 1)));\n', '            geneItem /= (2 ** (5 * index));\n', '            geneArray[index] = uint8(geneItem);\n', '        }\n', '        for (index = 0; index < 7; index++) {\n', '            uint size = 4 * index;\n', '            lotteryArray[index] = geneArray[size];\n', '            \n', '        }\n', '        return lotteryArray;\n', '    }\n', '\n', '    function convertGene(uint8[7] luckyGenes) public pure returns(uint256) {\n', '        uint8[28] memory geneArray;\n', '        for (uint8 i = 0; i < 28; i++) {\n', '            if (i%4 == 0) {\n', '                geneArray[i] = luckyGenes[i/4];\n', '            } else {\n', '                geneArray[i] = 6;\n', '            }\n', '        }\n', '        uint256 gene = uint256(geneArray[0]);\n', '        \n', '        for (uint8 index = 1; index < 28; index++) {\n', '            uint256 geneItem = uint256(geneArray[index]);\n', '            gene += geneItem << (index * 5);\n', '        }\n', '        return gene;\n', '    }\n', '}\n', '\n', '\n', 'contract SetLottery is LotteryGenes {\n', '\n', '    function random(uint8 seed) internal returns(uint8) {\n', '        randomSeed = block.timestamp;\n', '        return uint8(uint256(keccak256(randomSeed, block.difficulty))%seed)+1;\n', '    }\n', '\n', '    function openLottery(uint8 _viewId) public returns(uint8,uint8) {\n', '        uint8 viewId = _viewId;\n', '        require(viewId < 7);\n', '        uint256 currentTerm = CLotteries.length - 1;\n', '        CLottery storage clottery = CLotteries[currentTerm];\n', '\n', '        if (currentGene == 0 && clottery.openBlock > 0 && clottery.isReward == false) {\n', '            OpenLottery(viewId, clottery.luckyGenes[viewId], currentTerm, clottery.openBlock, clottery.totalAmount);\n', '            return (clottery.luckyGenes[viewId],1);\n', '        }\n', '        if (lastBlockNumber == block.number) {\n', '            OpenLottery(viewId, clottery.luckyGenes[viewId], currentTerm, clottery.openBlock, clottery.totalAmount);\n', '            return (clottery.luckyGenes[viewId],2);\n', '        }\n', '        if (currentGene == 0 && clottery.isReward == true) {\n', '            CLottery memory _clottery;\n', '            _clottery.luckyGenes = [0,0,0,0,0,0,0];\n', '            _clottery.totalAmount = uint256(0);\n', '            _clottery.isReward = false;\n', '            _clottery.openBlock = uint256(0);\n', '            currentTerm = CLotteries.push(_clottery) - 1;\n', '        }\n', '\n', '        if (this._isCarousal(currentTerm)) {\n', '            revert();\n', '        }\n', '\n', '        uint8 luckyNum = 0;\n', '        \n', '        uint256 bonusBalance = dogCore.getAvailableBlance();\n', '        if (currentGene == 6) {\n', '            if (bonusBalance <= SpoolAmount) {\n', '                OpenLottery(viewId, clottery.luckyGenes[viewId], currentTerm, 0, 0);\n', '                return (clottery.luckyGenes[viewId],3);\n', '            }\n', '            luckyNum = random(8);\n', '            CLotteries[currentTerm].luckyGenes[currentGene] = luckyNum;\n', '            OpenLottery(currentGene, luckyNum, currentTerm, block.number, bonusBalance);\n', '            currentGene = 0;\n', '            CLotteries[currentTerm].openBlock = block.number;\n', '            CLotteries[currentTerm].totalAmount = bonusBalance;\n', '            lastBlockNumber = block.number;\n', '        } else {         \n', '            luckyNum = random(12);\n', '            CLotteries[currentTerm].luckyGenes[currentGene] = luckyNum;\n', '\n', '            OpenLottery(currentGene, luckyNum, currentTerm, 0, 0);\n', '            currentGene ++;\n', '            lastBlockNumber = block.number;\n', '        }\n', '        return (luckyNum,0);\n', '    } \n', '\n', '    function random2() internal view returns (uint256) {\n', '        return uint256(uint256(keccak256(block.timestamp, block.difficulty))%uint256(dogCore.totalSupply()) + 1);\n', '    }\n', '\n', '    function openCarousel() public {\n', '        uint256 currentTerm = CLotteries.length - 1;\n', '        CLottery storage clottery = CLotteries[currentTerm];\n', '\n', '        if (currentGene == 0 && clottery.openBlock > 0 && clottery.isReward == false) {\n', '\n', '            OpenCarousel(convertGene(clottery.luckyGenes), currentTerm, clottery.openBlock, clottery.totalAmount);\n', '        }\n', '\n', '        if (currentGene == 0 && clottery.openBlock > 0 && clottery.isReward == true) {\n', '            CLottery memory _clottery;\n', '            _clottery.luckyGenes = [0,0,0,0,0,0,0];\n', '            _clottery.totalAmount = uint256(0);\n', '            _clottery.isReward = false;\n', '            _clottery.openBlock = uint256(0);\n', '            currentTerm = CLotteries.push(_clottery) - 1;\n', '        }\n', '\n', '        uint256 bonusBlance = dogCore.getAvailableBlance();\n', '\n', '        require (this._isCarousal(currentTerm));\n', '        uint256 genes = _getValidRandomGenes();\n', '        require (genes > 0);\n', '        uint8[7] memory luckyGenes = convertGeneArray(genes);\n', '        OpenCarousel(genes, currentTerm, block.number, bonusBlance);\n', '\n', '        CLotteries[currentTerm].luckyGenes = luckyGenes;\n', '        CLotteries[currentTerm].openBlock = block.number;\n', '        CLotteries[currentTerm].totalAmount = bonusBlance;        \n', '    }\n', '    \n', '    function _getValidRandomGenes() internal view returns (uint256) {\n', '        uint256 luckyDog = random2();\n', '        uint256 genes = _validGenes(luckyDog);\n', '        uint256 totalSupply = dogCore.totalSupply();\n', '        if (genes > 0) {\n', '            return genes;\n', '        }  \n', '        uint256 min = (luckyDog < totalSupply-luckyDog) ? (luckyDog - 1) : totalSupply-luckyDog;\n', '        for (uint256 i = 1; i < min + 1; i++) {\n', '            genes = _validGenes(luckyDog - i);\n', '            if (genes > 0) {\n', '                break;\n', '            }\n', '            genes = _validGenes(luckyDog + i);\n', '            if (genes > 0) {\n', '                    break;\n', '                }\n', '            }\n', '        if (genes == 0) {\n', '            if (min == luckyDog - 1) {\n', '                for (i = min + luckyDog; i < totalSupply + 1; i++) {\n', '                        genes = _validGenes(i);\n', '                        if (genes > 0) {\n', '                            break;\n', '                        }\n', '                    }   \n', '                }\n', '            if (min == totalSupply - luckyDog) {\n', '                for (i = min; i < luckyDog; i++) {\n', '                        genes = _validGenes(luckyDog - i - 1);\n', '                        if (genes > 0) {\n', '                            break;\n', '                        }\n', '                    }   \n', '                }\n', '            }\n', '        return genes;\n', '    }\n', '\n', '\n', '    function _validGenes(uint256 dogId) internal view returns (uint256) {\n', '\n', '        var(, , , , , ,generation, genes, variation,) = dogCore.getDog(dogId);\n', '        if (generation == 0 || dogCore.ownerOf(dogId) == finalLottery || variation > 0) {\n', '            return 0;\n', '        } else {\n', '            return genes;\n', '        }\n', '    }\n', '\n', '    \n', '}\n', '\n', '\n', 'contract LotteryCore is SetLottery {\n', '    \n', '    function LotteryCore(address _ktAddress) public {\n', '\n', '        dogCore = DogCoreInterface(_ktAddress);\n', '\n', '        CLottery memory _clottery;\n', '        _clottery.luckyGenes = [0,0,0,0,0,0,0];\n', '        _clottery.totalAmount = uint256(0);\n', '        _clottery.isReward = false;\n', '        _clottery.openBlock = uint256(0);\n', '        CLotteries.push(_clottery);\n', '    }\n', '\n', '    function setFinalLotteryAddress(address _flAddress) public onlyCEO {\n', '        finalLottery = _flAddress;\n', '    }\n', '    \n', '    function getCLottery() \n', '        public \n', '        view \n', '        returns (\n', '            uint8[7]        luckyGenes,\n', '            uint256         totalAmount,\n', '            uint256         openBlock,\n', '            bool            isReward,\n', '            uint256         term\n', '        ) {\n', '            term = CLotteries.length - uint256(1);\n', '            luckyGenes = CLotteries[term].luckyGenes;\n', '            totalAmount = CLotteries[term].totalAmount;\n', '            openBlock = CLotteries[term].openBlock;\n', '            isReward = CLotteries[term].isReward;\n', '    }\n', '\n', '    function rewardLottery(bool isMore) external {\n', '        require(msg.sender == finalLottery);\n', '\n', '        uint256 term = CLotteries.length - 1;\n', '        CLotteries[term].isReward = true;\n', '        CLotteries[term].noFirstReward = isMore;\n', '    }\n', '\n', '    function toSPool(uint amount) external {\n', '        \n', '        require(msg.sender == finalLottery);\n', '\n', '        SpoolAmount += amount;\n', '    }\n', '}\n', '\n', '\n', 'contract FinalLottery {\n', '    bool public isLottery = true;\n', '    LotteryCore public lotteryCore;\n', '    DogCoreInterface public dogCore;\n', '    uint8[7] public luckyGenes;\n', '    uint256         totalAmount;\n', '    uint256         openBlock;\n', '    bool            isReward;\n', '    uint256         currentTerm;\n', '    uint256  public duration;\n', '    uint8   public  lotteryRatio;\n', '    uint8[7] public lotteryParam;\n', '    uint8   public  carousalRatio;\n', '    uint8[7] public carousalParam; \n', '    \n', '    struct FLottery {\n', '        address[]        owners0;\n', '        uint256[]        dogs0;\n', '        address[]        owners1;\n', '        uint256[]        dogs1;\n', '        address[]        owners2;\n', '        uint256[]        dogs2;\n', '        address[]        owners3;\n', '        uint256[]        dogs3;\n', '        address[]        owners4;\n', '        uint256[]        dogs4;\n', '        address[]        owners5;\n', '        uint256[]        dogs5;\n', '        address[]        owners6;\n', '        uint256[]        dogs6;\n', '        uint256[]       reward;\n', '    }\n', '    mapping(uint256 => FLottery) flotteries;\n', '\n', '    function FinalLottery(address _lcAddress) public {\n', '        lotteryCore = LotteryCore(_lcAddress);\n', '        dogCore = DogCoreInterface(lotteryCore.dogCore());\n', '        duration = 11520;\n', '        lotteryRatio = 23;\n', '        lotteryParam = [46,16,10,9,8,6,5];\n', '        carousalRatio = 12;\n', '        carousalParam = [35,18,14,12,8,7,6];        \n', '    }\n', '    \n', '    event DistributeLottery(uint256[] rewardArray, uint256 currentTerm);\n', '    \n', '    event RegisterLottery(uint256 dogId, address owner, uint8 lotteryClass, string result);\n', '    \n', '    function setLotteryDuration(uint256 durationBlocks) public {\n', '        require(msg.sender == dogCore.ceoAddress());\n', '        require(durationBlocks > 140);\n', '        require(durationBlocks < block.number);\n', '        duration = durationBlocks;\n', '    }\n', '    \n', '    function registerLottery(uint256 dogId) public returns (uint8) {\n', '        uint256 _dogId = dogId;\n', '        (luckyGenes, totalAmount, openBlock, isReward, currentTerm) = lotteryCore.getCLottery();\n', '        address owner = dogCore.ownerOf(_dogId);\n', '        require (owner != address(this));\n', '        require(address(dogCore) == msg.sender);\n', '        require(totalAmount > 0 && isReward == false && openBlock > (block.number-duration));\n', '        var(, , , birthTime, , ,generation,genes, variation,) = dogCore.getDog(_dogId);\n', '        require(birthTime < openBlock);\n', '        require(generation > 0);\n', '        require(variation == 0);\n', '        uint8 _lotteryClass = getLotteryClass(luckyGenes, genes);\n', '        require(_lotteryClass < 7);\n', '        address[] memory owners;\n', '        uint256[] memory dogs;\n', '         (dogs, owners) = _getLuckyList(currentTerm, _lotteryClass);\n', '            \n', '        for (uint i = 0; i < dogs.length; i++) {\n', '            if (_dogId == dogs[i]) {\n', '                RegisterLottery(_dogId, owner, _lotteryClass,"dog already registered");\n', '                 return 5;\n', '            }\n', '        }\n', '        _pushLuckyInfo(currentTerm, _lotteryClass, owner, _dogId);\n', '        \n', '        RegisterLottery(_dogId, owner, _lotteryClass,"successful");\n', '        return 0;\n', '    }\n', '    \n', '    function distributeLottery() public returns (uint8) {\n', '        (luckyGenes, totalAmount, openBlock, isReward, currentTerm) = lotteryCore.getCLottery();\n', '        \n', '        require(openBlock > 0 && openBlock < (block.number-duration));\n', '\n', '        require(totalAmount >= lotteryCore.SpoolAmount());\n', '\n', '        if (isReward == true) {\n', '            DistributeLottery(flotteries[currentTerm].reward, currentTerm);\n', '            return 1;\n', '        }\n', '        uint256 legalAmount = totalAmount - lotteryCore.SpoolAmount();\n', '        uint256 totalDistribute = 0;\n', '        uint8[7] memory lR;\n', '        uint8 ratio;\n', '\n', '        if (lotteryCore._isCarousal(currentTerm) ) {\n', '            lR = carousalParam;\n', '            ratio = carousalRatio;\n', '        } else {\n', '            lR = lotteryParam;\n', '            ratio = lotteryRatio;\n', '        }\n', '        for (uint8 i = 0; i < 7; i++) {\n', '            address[] memory owners;\n', '            uint256[] memory dogs;\n', '            (dogs, owners) = _getLuckyList(currentTerm, i);\n', '            if (owners.length > 0) {\n', '                    uint256 reward = (legalAmount * ratio * lR[i])/(10000 * owners.length);\n', '                    totalDistribute += reward * owners.length;\n', '                    dogCore.sendMoney(dogCore.cfoAddress(),reward * owners.length/10);\n', '                    \n', '                    for (uint j = 0; j < owners.length; j++) {\n', '                        address gen0Add;\n', '                        if (i == 0) {\n', '                            dogCore.sendMoney(owners[j],reward*95*9/1000);\n', '                            gen0Add = _getGen0Address(dogs[j]);\n', '                            if(gen0Add != address(0)){\n', '                                dogCore.sendMoney(gen0Add,reward*5/100);\n', '                            }\n', '                        } else if (i == 1) {\n', '                            dogCore.sendMoney(owners[j],reward*97*9/1000);\n', '                            gen0Add = _getGen0Address(dogs[j]);\n', '                            if(gen0Add != address(0)){\n', '                                dogCore.sendMoney(gen0Add,reward*3/100);\n', '                            }\n', '                        } else if (i == 2) {\n', '                            dogCore.sendMoney(owners[j],reward*98*9/1000);\n', '                            gen0Add = _getGen0Address(dogs[j]);\n', '                            if(gen0Add != address(0)){\n', '                                dogCore.sendMoney(gen0Add,reward*2/100);\n', '                            }\n', '                        } else {\n', '                            dogCore.sendMoney(owners[j],reward*9/10);\n', '                        }\n', '                    }\n', '                    flotteries[currentTerm].reward.push(reward); \n', '                } else {\n', '                    flotteries[currentTerm].reward.push(0);\n', '                } \n', '        }\n', '        if (flotteries[currentTerm].owners0.length == 0) {\n', '            lotteryCore.toSPool((dogCore.getAvailableBlance() - lotteryCore.SpoolAmount())/20);\n', '            lotteryCore.rewardLottery(true);\n', '        } else {\n', '            lotteryCore.rewardLottery(false);\n', '        }\n', '        \n', '        DistributeLottery(flotteries[currentTerm].reward, currentTerm);\n', '        return 0;\n', '    }\n', '\n', '    function _getGen0Address(uint256 dogId) internal view returns(address) {\n', '        var(, , , , , , , , , gen0) = dogCore.getDog(dogId);\n', '        return dogCore.getOwner(gen0);\n', '    }\n', '\n', '    function _getLuckyList(uint256 currentTerm1, uint8 lotclass) public view returns (uint256[] kts, address[] ons) {\n', '        if (lotclass==0) {\n', '            ons = flotteries[currentTerm1].owners0;\n', '            kts = flotteries[currentTerm1].dogs0;\n', '        } else if (lotclass==1) {\n', '            ons = flotteries[currentTerm1].owners1;\n', '            kts = flotteries[currentTerm1].dogs1;\n', '        } else if (lotclass==2) {\n', '            ons = flotteries[currentTerm1].owners2;\n', '            kts = flotteries[currentTerm1].dogs2;\n', '        } else if (lotclass==3) {\n', '            ons = flotteries[currentTerm1].owners3;\n', '            kts = flotteries[currentTerm1].dogs3;\n', '        } else if (lotclass==4) {\n', '            ons = flotteries[currentTerm1].owners4;\n', '            kts = flotteries[currentTerm1].dogs4;\n', '        } else if (lotclass==5) {\n', '            ons = flotteries[currentTerm1].owners5;\n', '            kts = flotteries[currentTerm1].dogs5;\n', '        } else if (lotclass==6) {\n', '            ons = flotteries[currentTerm1].owners6;\n', '            kts = flotteries[currentTerm1].dogs6;\n', '        }\n', '    }\n', '\n', '    function _pushLuckyInfo(uint256 currentTerm1, uint8 _lotteryClass, address owner, uint256 _dogId) internal {\n', '        if (_lotteryClass == 0) {\n', '            flotteries[currentTerm1].owners0.push(owner);\n', '            flotteries[currentTerm1].dogs0.push(_dogId);\n', '        } else if (_lotteryClass == 1) {\n', '            flotteries[currentTerm1].owners1.push(owner);\n', '            flotteries[currentTerm1].dogs1.push(_dogId);\n', '        } else if (_lotteryClass == 2) {\n', '            flotteries[currentTerm1].owners2.push(owner);\n', '            flotteries[currentTerm1].dogs2.push(_dogId);\n', '        } else if (_lotteryClass == 3) {\n', '            flotteries[currentTerm1].owners3.push(owner);\n', '            flotteries[currentTerm1].dogs3.push(_dogId);\n', '        } else if (_lotteryClass == 4) {\n', '            flotteries[currentTerm1].owners4.push(owner);\n', '            flotteries[currentTerm1].dogs4.push(_dogId);\n', '        } else if (_lotteryClass == 5) {\n', '            flotteries[currentTerm1].owners5.push(owner);\n', '            flotteries[currentTerm1].dogs5.push(_dogId);\n', '        } else if (_lotteryClass == 6) {\n', '            flotteries[currentTerm1].owners6.push(owner);\n', '            flotteries[currentTerm1].dogs6.push(_dogId);\n', '        }\n', '    }\n', '\n', '    function getLotteryClass(uint8[7] luckyGenesArray, uint256 genes) internal view returns(uint8) {\n', '        if (currentTerm < 0) {\n', '            return 100;\n', '        }\n', '        \n', '        uint8[7] memory dogArray = lotteryCore.convertGeneArray(genes);\n', '        uint8 cnt = 0;\n', '        uint8 lnt = 0;\n', '        for (uint i = 0; i < 6; i++) {\n', '\n', '            if (luckyGenesArray[i] > 0 && luckyGenesArray[i] == dogArray[i]) {\n', '                cnt++;\n', '            }\n', '        }\n', '        if (luckyGenesArray[6] > 0 && luckyGenesArray[6] == dogArray[6]) {\n', '            lnt = 1;\n', '        }\n', '        uint8 lotclass = 100;\n', '        if (cnt==6 && lnt==1) {\n', '            lotclass = 0;\n', '        } else if (cnt==6 && lnt==0) {\n', '            lotclass = 1;\n', '        } else if (cnt==5 && lnt==1) {\n', '            lotclass = 2;\n', '        } else if (cnt==5 && lnt==0) {\n', '            lotclass = 3;\n', '        } else if (cnt==4 && lnt==1) {\n', '            lotclass = 4;\n', '        } else if (cnt==3 && lnt==1) {\n', '            lotclass = 5;\n', '        } else if (cnt==3 && lnt==0) {\n', '            lotclass = 6;\n', '        } else {\n', '            lotclass = 100;\n', '        }\n', '        return lotclass;\n', '    }\n', '    \n', '    function checkLottery(uint256 genes) public view returns(uint8) {\n', '        var(luckyGenesArray, , , isReward1, ) = lotteryCore.getCLottery();\n', '        if (isReward1) {\n', '            return 100;\n', '        }\n', '        return getLotteryClass(luckyGenesArray, genes);\n', '    }\n', '    \n', '    function getCLottery() \n', '        public \n', '        view \n', '        returns (\n', '            uint8[7]        luckyGenes1,\n', '            uint256         totalAmount1,\n', '            uint256         openBlock1,\n', '            bool            isReward1,\n', '            uint256         term1,\n', '            uint8           currentGenes1,\n', '            uint256         tSupply,\n', '            uint256         sPoolAmount1,\n', '            uint256[]       reward1\n', '        ) {\n', '            (luckyGenes1, totalAmount1, openBlock1, isReward1, term1) = lotteryCore.getCLottery();\n', '            currentGenes1 = lotteryCore.currentGene();\n', '            tSupply = dogCore.totalSupply();\n', '            sPoolAmount1 = lotteryCore.SpoolAmount();\n', '            reward1 = flotteries[term1].reward;\n', '    }    \n', '}']