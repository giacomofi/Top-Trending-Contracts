['pragma solidity ^0.4.16;\n', '\n', 'interface Token {\n', '    function transfer(address _to, uint256 _value) external;\n', '}\n', '\n', 'contract TBECrowdsale {\n', '    \n', '    Token public tokenReward;\n', '    uint256 public price;\n', '    address public creator;\n', '    address public owner = 0x0;\n', '    uint256 public startDate;\n', '    uint256 public endDate;\n', '\n', '    mapping (address => bool) public whitelist;\n', '    mapping (address => bool) public categorie1;\n', '    mapping (address => bool) public categorie2;\n', '    mapping (address => uint256) public balanceOfEther;\n', '\n', '    modifier isCreator() {\n', '        require(msg.sender == creator);\n', '        _;\n', '    }\n', '\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '\n', '    function TBECrowdsale() public {\n', '        creator = msg.sender;\n', '        price = 8000;\n', '        startDate = now;\n', '        endDate = startDate + 30 days;\n', '        tokenReward = Token(0x647972c6A5bD977Db85dC364d18cC05D3Db70378);\n', '    }\n', '\n', '    function setOwner(address _owner) isCreator public {\n', '        owner = _owner;      \n', '    }\n', '\n', '    function setCreator(address _creator) isCreator public {\n', '        creator = _creator;      \n', '    }\n', '\n', '    function setStartDate(uint256 _startDate) isCreator public {\n', '        startDate = _startDate;      \n', '    }\n', '\n', '    function setEndtDate(uint256 _endDate) isCreator public {\n', '        endDate = _endDate;      \n', '    }\n', '    \n', '    function setPrice(uint256 _price) isCreator public {\n', '        price = _price;      \n', '    }\n', '\n', '    function addToWhitelist(address _address) isCreator public {\n', '        whitelist[_address] = true;\n', '    }\n', '\n', '    function addToCategorie1(address _address) isCreator public {\n', '        categorie1[_address] = true;\n', '    }\n', '\n', '    function addToCategorie2(address _address) isCreator public {\n', '        categorie2[_address] = true;\n', '    }\n', '\n', '    function setToken(address _token) isCreator public {\n', '        tokenReward = Token(_token);      \n', '    }\n', '\n', '    function sendToken(address _to, uint256 _value) isCreator public {\n', '        tokenReward.transfer(_to, _value);      \n', '    }\n', '\n', '    function kill() isCreator public {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '    function () payable public {\n', '        require(msg.value > 0);\n', '        require(now > startDate);\n', '        require(now < endDate);\n', '        require(whitelist[msg.sender]);\n', '        \n', '        if (categorie1[msg.sender]) {\n', '            require(balanceOfEther[msg.sender] <= 2);\n', '        }\n', '\n', '        uint256 amount = msg.value * price;\n', '\n', '        if (now > startDate && now <= startDate + 5) {\n', '            uint256 _amount = amount / 10;\n', '            amount += _amount * 3;\n', '        }\n', '\n', '        balanceOfEther[msg.sender] += msg.value / 1 ether;\n', '        tokenReward.transfer(msg.sender, amount);\n', '        FundTransfer(msg.sender, amount, true);\n', '        owner.transfer(msg.value);\n', '    }\n', '}']
['pragma solidity ^0.4.16;\n', '\n', 'interface Token {\n', '    function transfer(address _to, uint256 _value) external;\n', '}\n', '\n', 'contract TBECrowdsale {\n', '    \n', '    Token public tokenReward;\n', '    uint256 public price;\n', '    address public creator;\n', '    address public owner = 0x0;\n', '    uint256 public startDate;\n', '    uint256 public endDate;\n', '\n', '    mapping (address => bool) public whitelist;\n', '    mapping (address => bool) public categorie1;\n', '    mapping (address => bool) public categorie2;\n', '    mapping (address => uint256) public balanceOfEther;\n', '\n', '    modifier isCreator() {\n', '        require(msg.sender == creator);\n', '        _;\n', '    }\n', '\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '\n', '    function TBECrowdsale() public {\n', '        creator = msg.sender;\n', '        price = 8000;\n', '        startDate = now;\n', '        endDate = startDate + 30 days;\n', '        tokenReward = Token(0x647972c6A5bD977Db85dC364d18cC05D3Db70378);\n', '    }\n', '\n', '    function setOwner(address _owner) isCreator public {\n', '        owner = _owner;      \n', '    }\n', '\n', '    function setCreator(address _creator) isCreator public {\n', '        creator = _creator;      \n', '    }\n', '\n', '    function setStartDate(uint256 _startDate) isCreator public {\n', '        startDate = _startDate;      \n', '    }\n', '\n', '    function setEndtDate(uint256 _endDate) isCreator public {\n', '        endDate = _endDate;      \n', '    }\n', '    \n', '    function setPrice(uint256 _price) isCreator public {\n', '        price = _price;      \n', '    }\n', '\n', '    function addToWhitelist(address _address) isCreator public {\n', '        whitelist[_address] = true;\n', '    }\n', '\n', '    function addToCategorie1(address _address) isCreator public {\n', '        categorie1[_address] = true;\n', '    }\n', '\n', '    function addToCategorie2(address _address) isCreator public {\n', '        categorie2[_address] = true;\n', '    }\n', '\n', '    function setToken(address _token) isCreator public {\n', '        tokenReward = Token(_token);      \n', '    }\n', '\n', '    function sendToken(address _to, uint256 _value) isCreator public {\n', '        tokenReward.transfer(_to, _value);      \n', '    }\n', '\n', '    function kill() isCreator public {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '    function () payable public {\n', '        require(msg.value > 0);\n', '        require(now > startDate);\n', '        require(now < endDate);\n', '        require(whitelist[msg.sender]);\n', '        \n', '        if (categorie1[msg.sender]) {\n', '            require(balanceOfEther[msg.sender] <= 2);\n', '        }\n', '\n', '        uint256 amount = msg.value * price;\n', '\n', '        if (now > startDate && now <= startDate + 5) {\n', '            uint256 _amount = amount / 10;\n', '            amount += _amount * 3;\n', '        }\n', '\n', '        balanceOfEther[msg.sender] += msg.value / 1 ether;\n', '        tokenReward.transfer(msg.sender, amount);\n', '        FundTransfer(msg.sender, amount, true);\n', '        owner.transfer(msg.value);\n', '    }\n', '}']
