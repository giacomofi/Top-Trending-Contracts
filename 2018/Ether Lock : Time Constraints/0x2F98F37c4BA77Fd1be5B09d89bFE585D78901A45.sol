['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Controlled {\n', '    address public controller;\n', '    /// @notice The address of the controller is the only address that can call\n', '    ///  a function with this modifier\n', '    modifier onlyController { require(msg.sender == controller); _; }\n', '    // @notice Constructor\n', '    constructor() public { controller = msg.sender;}\n', '    /// @notice Changes the controller of the contract\n', '    /// @param _newController The new controller of the contract\n', '    function changeController(address _newController) public onlyController {\n', '        controller = _newController;\n', '    }\n', '}\n', '\n', '// ERC Token Standard #20 Interface\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract SofiaToken is ERC20Interface,Controlled {\n', '\n', '    using SafeMath for uint;\n', '\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public totalSupply;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    /*\n', '     * @notice &#39;constructor()&#39; initiates the Token by setting its funding\n', '       parameters\n', '     * @param _totalSupply Total supply of tokens\n', '     */\n', '    constructor(uint _totalSupply) public {\n', '      symbol = "SFX";\n', '      name = "Sofia Token";\n', '      decimals = 18;\n', '      totalSupply = _totalSupply  * (1 ether);\n', '      balances[msg.sender] = totalSupply; //transfer all Tokens to contract creator\n', '      emit Transfer(address(0),controller,totalSupply);\n', '    }\n', '\n', '    /*\n', '     * @notice ERC20 Standard method to return total number of tokens\n', '     */\n', '    function totalSupply() public view returns (uint){\n', '      return totalSupply;\n', '    }\n', '\n', '    /*\n', '     * @notice ERC20 Standard method to return the token balance of an address\n', '     * @param tokenOwner Address to query\n', '     */\n', '    function balanceOf(address tokenOwner) public view returns (uint balance){\n', '       return balances[tokenOwner];\n', '    }\n', '\n', '    /*\n', '     * @notice ERC20 Standard method to return spending allowance\n', '     * @param tokenOwner Owner of the tokens, who allows\n', '     * @param spender Token spender\n', '     */\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining){\n', '      if (allowed[tokenOwner][spender] < balances[tokenOwner]) {\n', '        return allowed[tokenOwner][spender];\n', '      }\n', '      return balances[tokenOwner];\n', '    }\n', '\n', '    /*\n', '     * @notice ERC20 Standard method to tranfer tokens\n', '     * @param to Address where the tokens will be transfered to\n', '     * @param tokens Number of tokens to be transfered\n', '     */\n', '    function transfer(address to, uint tokens) public  returns (bool success){\n', '      return doTransfer(msg.sender,to,tokens);\n', '    }\n', '\n', '    /*\n', '     * @notice ERC20 Standard method to transfer tokens on someone elses behalf\n', '     * @param from Address where the tokens are held\n', '     * @param to Address where the tokens will be transfered to\n', '     * @param tokens Number of tokens to be transfered\n', '     */\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success){\n', '      if(allowed[from][msg.sender] > 0 && allowed[from][msg.sender] >= tokens)\n', '      {\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        return doTransfer(from,to,tokens);\n', '      }\n', '      return false;\n', '    }\n', '\n', '    /*\n', '     * @notice method that does the actual transfer of the tokens, to be used by both transfer and transferFrom methods\n', '     * @param from Address where the tokens are held\n', '     * @param to Address where the tokens will be transfered to\n', '     * @param tokens Number of tokens to be transfered\n', '     */\n', '    function doTransfer(address from,address to, uint tokens) internal returns (bool success){\n', '        if( tokens > 0 && balances[from] >= tokens){\n', '            balances[from] = balances[from].sub(tokens);\n', '            balances[to] = balances[to].add(tokens);\n', '            emit Transfer(from,to,tokens);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /*\n', '     * @notice ERC20 Standard method to give a spender an allowance\n', '     * @param spender Address that wil receive the allowance\n', '     * @param tokens Number of tokens in the allowance\n', '     */\n', '    function approve(address spender, uint tokens) public returns (bool success){\n', '      if(balances[msg.sender] >= tokens){\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender,spender,tokens);\n', '        return true;\n', '      }\n', '      return false;\n', '    }\n', '\n', '    /*\n', '     * @notice revert any incoming ether\n', '     */\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '  /*\n', '   * @notice a specific amount of tokens. Only controller can burn tokens\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint _value) public onlyController{\n', '    require(_value <= balances[msg.sender]);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    emit Burn(msg.sender, _value);\n', '    emit Transfer(msg.sender, address(0), _value);\n', '  }\n', '\n', '  /*\n', '   * Events\n', '   */\n', '  event Transfer(address indexed from, address indexed to, uint tokens);\n', '  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '  event Burn(address indexed burner, uint value);\n', '}\n', '\n', 'contract Extollet is Controlled {\n', '\n', '    using SafeMath for uint;\n', '\n', '    string public name;                     //Campaign name\n', '    uint256 public startFundingTime;        //In UNIX Time Format\n', '    uint256 public endFundingTime;          //In UNIX Time Format\n', '    uint public volume;                     //Total volume of tokens in this Campaign\n', '    uint public totalCollected;             //In WEI\n', '    uint public totalTokensSold;            //Number of tokens sold so far\n', '    uint public rate;                       //Rate in WEI\n', '    SofiaToken public tokenContract;        //The token for this Campaign\n', '    address public vaultAddress;           //The address to hold the funds donated\n', '\n', '  /*\n', '   * @notice &#39;constructor()&#39; initiates the Campaign by setting its funding parameters\n', '   * @param _startFundingTime The time that the Campaign will be able to start receiving funds\n', '   * @param _endFundingTime The time that the Campaign will stop being able to receive funds\n', '   * @param _volume Total volume\n', '   * @param _rate Rate in wei\n', '   * @param _vaultAddress The address that will store the donated funds\n', '   * @param _tokenAddress Address of the token contract this contract controls\n', '   */\n', '  constructor(\n', '      uint256 _startFundingTime,\n', '      uint256 _endFundingTime,\n', '      uint _volume,\n', '      uint _rate,\n', '      address _vaultAddress,\n', '      address _tokenAddress\n', '    ) public {\n', '     require ((_endFundingTime >= now) &&            //Cannot end in the past\n', '              (_endFundingTime > _startFundingTime) &&\n', '              (_volume > 0) &&\n', '              (_rate > 0) &&\n', '              (_vaultAddress != 0));                 //To prevent burning ETH\n', '      startFundingTime = _startFundingTime;\n', '      endFundingTime = _endFundingTime;\n', '      volume = _volume.mul(1 ether);\n', '      rate = _rate;\n', '      vaultAddress = _vaultAddress;\n', '      totalCollected = 0;\n', '      totalTokensSold = 0;\n', '      tokenContract = SofiaToken(_tokenAddress); //The Deployed Token Contract\n', '      name = "Extollet";\n', '      }\n', '\n', '  /*\n', '   * @notice The fallback function is called when ether is sent to the contract, it\n', '     simply calls `doPayment()` with the address that sent the ether as the\n', '     `_owner`. Payable is a required solidity modifier for functions to receive\n', '     ether, without this modifier functions will throw if ether is sent to them\n', '   */\n', '  function () public payable{\n', '    doPayment(msg.sender);\n', '  }\n', '\n', '  /*\n', '   * @notice `proxyPayment()` allows the caller to send ether to the Campaign and\n', '     have the tokens created in an address of their choosing\n', '   * @param _owner The address that will hold the newly created tokens\n', '   */\n', '  function proxyPayment(address _owner) public payable returns(bool) {\n', '      doPayment(_owner);\n', '      return true;\n', '  }\n', '\n', '  /*\n', '   * @notice `doPayment()` is an internal function that sends the ether that this\n', '     contract receives to the `vault` and creates tokens in the address of the\n', '     `_owner` assuming the Campaign is still accepting funds\n', '   * @param _owner The address that will hold the newly created tokens\n', '   */\n', '  function doPayment(address _owner) internal {\n', '//   Calculate token amount\n', '    uint tokenAmount = getTokenAmount(msg.value);\n', '//   Check that the Campaign is allowed to receive this donation\n', '    require ((now >= startFundingTime) &&\n', '            (now <= endFundingTime) &&\n', '            (tokenContract.controller() != 0) &&            //Extra check\n', '            (msg.value != 0) &&\n', '            ((totalTokensSold + tokenAmount) <= volume)\n', '            );\n', '  //Send the ether to the vault\n', '    preValidatePurchase(_owner,msg.value);\n', '    require (vaultAddress.send(msg.value));\n', '    require (tokenContract.transfer(_owner,tokenAmount));\n', '//  Track how much the Campaign has collected\n', '    totalCollected += msg.value;\n', '    totalTokensSold += tokenAmount;\n', '    emit FundTransfer(msg.sender,tokenAmount,true);\n', '    return;\n', '    }\n', '\n', '    /*\n', '     * @notice Validation of an incoming purchase. Use require statemens to revert state when conditions are not met.\n', '     * @param _beneficiary Address performing the token purchase\n', '     * @param _weiAmount Value in wei involved in the purchase\n', '     */\n', '    function preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal pure{\n', '      require(_beneficiary != address(0));\n', '      require(_weiAmount != 0);\n', '    }\n', '\n', '    /*\n', '     * @param _weiAmount Value in wei to be converted into tokens\n', '     * @return Number of tokens that can be purchased with the specified _weiAmount\n', '     */\n', '    function getTokenAmount(uint _weiAmount) internal view returns (uint) {\n', '      uint preDecimalAmount = _weiAmount.div(rate);\n', '      uint postDecimalAmount = preDecimalAmount.mul(1 ether);\n', '      return postDecimalAmount;\n', '    }\n', '\n', '    /*\n', '     * @notice `onlyController` changes the location that ether is sent\n', '     * @param _newVaultAddress The address that will receive the ether sent to this\n', '     */\n', '    function setVault(address _newVaultAddress) public onlyController {\n', '        vaultAddress = _newVaultAddress;\n', '    }\n', '\n', '    /*\n', '     * @notice `onlyController` changes the campaing ending time\n', '     * @param newEndingTime The new campaign end time in UNIX time format\n', '     */\n', '    function modifyEndFundingTime(uint256 newEndingTime) public onlyController{\n', '      require((now < endFundingTime) && (now < newEndingTime));\n', '      endFundingTime = newEndingTime;\n', '    }\n', '\n', '    /*\n', '     * @dev `finalizeFunding()` can only be called after the end of the funding period.\n', '     */\n', '      function finalizeFunding(address to) public onlyController{\n', '        require(now >= endFundingTime);\n', '        uint tokensLeft = tokenContract.balanceOf(this);\n', '        require(tokensLeft > 0);\n', '        require(tokenContract.transfer(to,tokensLeft));\n', '      }\n', '\n', '    /*\n', '     *Events\n', '     */\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '}']