['/**\n', ' * Investors relations: partners@xrpconnect.co\n', ' * \n', ' * Ken Brannon\n', ' * Contact: ken@xrpconnect.co\n', '**/\n', '\n', 'pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', ' \n', ' \n', '/**\n', ' * SafeMath library to support basic mathematical operations \n', ' * Used for security of the contract\n', ' **/ \n', ' \n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', ' function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * Ownable contract  \n', ' * Makes an address the owner of a contract\n', ' * Used so that onlyOwner modifier can be Used\n', ' * onlyOwner modifier is used so that some functions can only be called by the contract owner\n', ' **/\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'interface XRPCToken {\n', '    function transfer(address receiver, uint amount) public;\n', '    function balanceOf(address _owner) public returns (uint256 balance);\n', '    function mint(address wallet, address buyer, uint256 tokenAmount) public;\n', '    function showMyTokenBalance(address addr) public;\n', '}\n', '\n', 'contract newCrowdsale is Ownable {\n', '    \n', '    // safe math library imported for safe mathematical operations\n', '    using SafeMath for uint256;\n', '    \n', '    // start and end timestamps where investments are allowed (both inclusive)\n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '  \n', '    // to maintain a list of owners and their specific equity percentages\n', '    mapping(address=>uint256) public ownerAddresses;  //the first one would always be the major owner\n', '    \n', '    address[] owners;\n', '    \n', '    uint256 public majorOwnerShares = 100;\n', '    uint256 public minorOwnerShares = 10;\n', '    uint256 public coinPercentage = 5;\n', '  \n', '    // how many token units a buyer gets per wei\n', '    uint256 public rate = 650;\n', '\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '  \n', '    bool public isCrowdsaleStopped = false;\n', '  \n', '    bool public isCrowdsalePaused = false;\n', '    \n', '    /**\n', '    * event for token purchase logging\n', '    * @param purchaser who paid for the tokens\n', '    * @param beneficiary who got the tokens\n', '    * @param value weis paid for purchase\n', '    * @param amount amount of tokens purchased\n', '    */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  \n', '    // The token that would be sold using this contract \n', '    XRPCToken public token;\n', '    \n', '    \n', '    function newCrowdsale(uint _daysToStart, address _walletMajorOwner) public \n', '    {\n', '        token = XRPCToken(0xAdb41FCD3DF9FF681680203A074271D3b3Dae526); \n', '        \n', '        _daysToStart = _daysToStart * 1 days;\n', '        \n', '        startTime = now + _daysToStart;   \n', '        endTime = startTime + 90 days;\n', '        \n', '        require(endTime >= startTime);\n', '        require(_walletMajorOwner != 0x0);\n', '        \n', '        ownerAddresses[_walletMajorOwner] = majorOwnerShares;\n', '        \n', '        owners.push(_walletMajorOwner);\n', '        \n', '        owner = _walletMajorOwner;\n', '    }\n', '    \n', '    // fallback function can be used to buy tokens\n', '    function () public payable {\n', '    buy(msg.sender);\n', '    }\n', '    \n', '    function buy(address beneficiary) public payable\n', '    {\n', '        require (isCrowdsaleStopped != true);\n', '        require (isCrowdsalePaused != true);\n', '        \n', '        require(beneficiary != 0x0);\n', '        require(validPurchase());\n', '\n', '        uint256 weiAmount = msg.value;\n', '        uint256 tokens = weiAmount.mul(rate);\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        token.transfer(beneficiary,tokens);\n', '         uint partnerCoins = tokens.mul(coinPercentage);\n', '        partnerCoins = partnerCoins.div(100);\n', '        \n', '        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '        forwardFunds(partnerCoins);\n', '    }\n', '    \n', '     // send ether to the fund collection wallet(s)\n', '    function forwardFunds(uint256 partnerTokenAmount) internal {\n', '      for (uint i=0;i<owners.length;i++)\n', '      {\n', '         uint percent = ownerAddresses[owners[i]];\n', '         uint amountToBeSent = msg.value.mul(percent);\n', '         amountToBeSent = amountToBeSent.div(100);\n', '         owners[i].transfer(amountToBeSent);\n', '         \n', '         if (owners[i]!=owner &&  ownerAddresses[owners[i]]>0)\n', '         {\n', '             token.transfer(owners[i],partnerTokenAmount);\n', '         }\n', '      }\n', '    }\n', '   \n', '     /**\n', '     * function to add a partner\n', '     * can only be called by the major/actual owner wallet\n', '     **/  \n', '    function addPartner(address partner) public onlyOwner {\n', '\n', '        require(partner != 0x0);\n', '        require(ownerAddresses[owner] >=20);\n', '        require(ownerAddresses[partner] == 0);\n', '        owners.push(partner);\n', '        ownerAddresses[partner] = 10;\n', '        uint majorOwnerShare = ownerAddresses[owner];\n', '        ownerAddresses[owner] = majorOwnerShare.sub(10);\n', '    }\n', '    \n', '    /**\n', '     * function to remove a partner\n', '     * can only be called by the major/actual owner wallet\n', '     **/ \n', '    function removePartner(address partner) public onlyOwner  {\n', '        require(partner != 0x0);\n', '        require(ownerAddresses[partner] > 0);\n', '        require(ownerAddresses[owner] <= 90);\n', '        ownerAddresses[partner] = 0;\n', '        uint majorOwnerShare = ownerAddresses[owner];\n', '        ownerAddresses[owner] = majorOwnerShare.add(10);\n', '    }\n', '\n', '    // @return true if the transaction can buy tokens\n', '    function validPurchase() internal constant returns (bool) {\n', '        bool withinPeriod = now >= startTime && now <= endTime;\n', '        bool nonZeroPurchase = msg.value != 0;\n', '        return withinPeriod && nonZeroPurchase;\n', '    }\n', '\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public constant returns (bool) {\n', '        return now > endTime;\n', '    }\n', '  \n', '    function showMyTokenBalance(address myAddress) public returns (uint256 tokenBalance) {\n', '       tokenBalance = token.balanceOf(myAddress);\n', '    }\n', '\n', '    /**\n', '     * function to change the end date of the ICO\n', '     **/ \n', '    function setEndDate(uint256 daysToEndFromToday) public onlyOwner returns(bool) {\n', '        daysToEndFromToday = daysToEndFromToday * 1 days;\n', '        endTime = now + daysToEndFromToday;\n', '    }\n', '\n', '    /**\n', '     * function to set the new price \n', '     * can only be called from owner wallet\n', '     **/ \n', '    function setPriceRate(uint256 newPrice) public onlyOwner returns (bool) {\n', '        rate = newPrice;\n', '    }\n', '    \n', '    /**\n', '     * function to pause the crowdsale \n', '     * can only be called from owner wallet\n', '     **/\n', '     \n', '    function pauseCrowdsale() public onlyOwner returns(bool) {\n', '        isCrowdsalePaused = true;\n', '    }\n', '\n', '    /**\n', '     * function to resume the crowdsale if it is paused\n', '     * can only be called from owner wallet\n', '     * if the crowdsale has been stopped, this function would not resume it\n', '     **/ \n', '    function resumeCrowdsale() public onlyOwner returns (bool) {\n', '        isCrowdsalePaused = false;\n', '    }\n', '    \n', '    /**\n', '     * function to stop the crowdsale\n', '     * can only be called from the owner wallet\n', '     **/\n', '    function stopCrowdsale() public onlyOwner returns (bool) {\n', '        isCrowdsaleStopped = true;\n', '    }\n', '    \n', '    /**\n', '     * function to start the crowdsale manually\n', '     * can only be called from the owner wallet\n', '     * this function can be used if the owner wants to start the ICO before the specified start date\n', '     * this function can also be used to undo the stopcrowdsale, in case the crowdsale is stopped due to human error\n', '     **/\n', '    function startCrowdsale() public onlyOwner returns (bool) {\n', '        isCrowdsaleStopped = false;\n', '        startTime = now; \n', '    }\n', '    \n', '    /**\n', '     * Shows the remaining tokens in the contract i.e. tokens remaining for sale\n', '     **/ \n', '    function tokensRemainingForSale(address contractAddress) public returns (uint balance) {\n', '        balance = token.balanceOf(contractAddress);\n', '    }\n', '    \n', '    /**\n', '     * function to show the equity percentage of an owner - major or minor\n', '     * can only be called from the owner wallet\n', '     **/\n', '    function checkOwnerShare (address owner) public onlyOwner constant returns (uint share) {\n', '        share = ownerAddresses[owner];\n', '    }\n', '\n', '    /**\n', '     * function to change the coin percentage awarded to the partners\n', '     * can only be called from the owner wallet\n', '     **/\n', '    function changePartnerCoinPercentage(uint percentage) public onlyOwner {\n', '        coinPercentage = percentage;\n', '    }\n', '}']