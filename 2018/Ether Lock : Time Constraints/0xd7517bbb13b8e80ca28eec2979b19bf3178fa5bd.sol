['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', 'library Math {\n', '  /**\n', '  * @dev Returns the largest of two numbers.\n', '  */\n', '  function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  /**\n', '  * @dev Returns the smallest of two numbers.\n', '  */\n', '  function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  /**\n', '  * @dev Calculates the average of two numbers. Since these are integers,\n', '  * averages of an even and odd number cannot be represented, and will be\n', '  * rounded down.\n', '  */\n', '  function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // (a + b) / 2 can overflow, so we distribute\n', '    return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', 'library AddressUtils {\n', '    function isContract(address _addr) internal view returns (bool) {\n', '        uint256 size;\n', '        assembly {size := extcodesize(_addr)}\n', '        return size > 0;\n', '    }\n', '}\n', '\n', 'library Helpers {\n', '    function walletFromData(bytes data) internal pure returns (address wallet) {\n', '        assembly {\n', '            wallet := mload(add(data, 20))\n', '        }\n', '    }\n', '}\n', '\n', 'contract Riveth {\n', '    using SafeMath for uint256;\n', '    using AddressUtils for address;\n', '\n', '    address public adminWallet;\n', '\n', '    uint256 constant public DEPOSIT_MIN = 10 finney;\n', '    uint256 constant public DEPOSIT_MAX = 50 ether;\n', '    uint256 constant public DEPOSIT_PERIOD = 60 days;\n', '    uint256 constant public DEPOSIT_COUNT_LIMIT = 5;\n', '    uint256 constant public TOTAL_BASE_PERCENT = 120;\n', '    uint256 constant public UPLINE_BASE_PERCENT = 5;\n', '    uint256 constant public UPLINE_MIN_DEPOSIT = 10 finney;\n', '    uint256 constant public EXPENSES_PERCENT = 10;\n', '\n', '    uint256 public totalDeposited = 0;\n', '    uint256 public totalWithdrawn = 0;\n', '    uint256 public usersCount = 0;\n', '    uint256 public depositsCount = 0;\n', '\n', '    mapping(address => User) public users;\n', '    mapping(uint256 => Deposit) public deposits;\n', '\n', '    struct Deposit {\n', '        uint256 createdAt;\n', '        uint256 endAt;\n', '        uint256 amount;\n', '        uint256 accrued;\n', '        bool active;\n', '    }\n', '\n', '    struct User {\n', '        uint256 createdAt;\n', '        address upline;\n', '        uint256 totalDeposited;\n', '        uint256 totalWithdrawn;\n', '        uint256 activeDepositsCount;\n', '        uint256 activeDepositsAmount;\n', '        uint256[] deposits;\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == adminWallet);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        adminWallet = msg.sender;\n', '        createUser(msg.sender, address(0));\n', '    }\n', '\n', '    function createUser(address wallet, address upline) internal {\n', '        users[wallet] = User({\n', '            createdAt : now,\n', '            upline : upline,\n', '            totalDeposited : 0,\n', '            totalWithdrawn : 0,\n', '            activeDepositsCount : 0,\n', '            activeDepositsAmount : 0,\n', '            deposits : new uint256[](0)\n', '            });\n', '        usersCount++;\n', '    }\n', '\n', '    function createDeposit(address wallet, uint256 amount) internal {\n', '        User storage user = users[wallet];\n', '\n', '        Deposit memory deposit = Deposit({\n', '            createdAt : now,\n', '            endAt : now.add(DEPOSIT_PERIOD),\n', '            amount : amount,\n', '            accrued : 0,\n', '            active : true\n', '        });\n', '\n', '        deposits[depositsCount] = deposit;\n', '        user.deposits.push(depositsCount);\n', '\n', '        user.totalDeposited = user.totalDeposited.add(amount);\n', '        totalDeposited = amount.add(totalDeposited);\n', '\n', '        depositsCount++;\n', '        user.activeDepositsCount++;\n', '        user.activeDepositsAmount = user.activeDepositsAmount.add(amount);\n', '\n', '        adminWallet.transfer(amount.mul(EXPENSES_PERCENT).div(100));\n', '\n', '        uint256 uplineFee = amount.mul(UPLINE_BASE_PERCENT).div(100);\n', '        transferUplineFee(uplineFee);\n', '    }\n', '\n', '    function transferUplineFee(uint256 amount) internal {\n', '        if (users[msg.sender].upline != address(0)) {\n', '            users[msg.sender].upline.transfer(amount);\n', '        }\n', '    }\n', '\n', '    function getUpline() internal view returns (address){\n', '        address uplineWallet = Helpers.walletFromData(msg.data);\n', '        return users[uplineWallet].createdAt > 0 \n', '        && users[uplineWallet].totalDeposited >= UPLINE_MIN_DEPOSIT \n', '        && msg.sender != uplineWallet\n', '        ? uplineWallet\n', '        : adminWallet;\n', '    }\n', '\n', '    function() payable public {\n', "        require(msg.sender != address(0), 'Address incorrect');\n", "        require(!msg.sender.isContract(), 'Address is contract');\n", "        require(msg.value <= DEPOSIT_MAX, 'Amount too big');\n", '\n', '        if (users[msg.sender].createdAt == 0) {\n', '            createUser(msg.sender, getUpline());\n', '        }\n', '\n', '        if (msg.value >= DEPOSIT_MIN) {\n', "            require(users[msg.sender].activeDepositsCount < DEPOSIT_COUNT_LIMIT, 'Active deposits count limit');\n", '            createDeposit(msg.sender, msg.value);\n', '        } else {\n', '            accrueDeposits();\n', '        }\n', '    }\n', '\n', '    function accrueDeposits() internal {\n', '        User storage user = users[msg.sender];\n', '\n', '        for (uint i = 0; i < user.deposits.length; i++) {\n', '            if(deposits[user.deposits[i]].active){\n', '                accrueDeposits(user.deposits[i]);\n', '            }\n', '        }\n', '    }\n', '\n', '    function accrueDeposits(uint256 depositId) internal {\n', '        uint256 amount = getAccrualAmount(depositId);\n', '        Deposit storage deposit = deposits[depositId];\n', '\n', '        withdraw(msg.sender, amount);\n', '\n', '        deposits[depositId].accrued = deposit.accrued.add(amount);\n', '\n', '        if (deposits[depositId].endAt >= now) {\n', '            deposits[depositId].active = false;\n', '            users[msg.sender].activeDepositsCount--;\n', '            users[msg.sender].activeDepositsAmount = users[msg.sender].activeDepositsAmount.sub(deposits[depositId].amount);\n', '        }\n', '    }\n', '\n', '    function getAccrualAmount(uint256 depositId) internal view returns (uint256){\n', '        Deposit storage deposit = deposits[depositId];\n', '        uint256 totalProfit = totalForAccrual(msg.sender, depositId);\n', '        uint256 amount = totalProfit\n', '        .mul(\n', '            now.sub(deposit.createdAt)\n', '        )\n', '        .div(DEPOSIT_PERIOD)\n', '        .sub(deposit.accrued);\n', '\n', '        if (amount.add(deposit.accrued) > totalProfit) {\n', '            amount = totalProfit.sub(deposit.accrued);\n', '        }\n', '        return amount;\n', '    }\n', '\n', '\n', '    function withdraw(address wallet, uint256 amount) internal {\n', '        wallet.transfer(amount);\n', '        totalWithdrawn = totalWithdrawn.add(amount);\n', '        users[wallet].totalWithdrawn = users[wallet].totalWithdrawn.add(amount);\n', '    }\n', '\n', '    function getUserDeposits(address _address) public view returns (uint256[]){\n', '        return users[_address].deposits;\n', '    }\n', '\n', '    function getGlobalPercent() public view returns (uint256){\n', '        uint256 balance = address(this).balance;\n', '        if(balance >= 5000 ether){\n', '            //5.5% daily\n', '            return 330;\n', '        }\n', '        if(balance >= 3000 ether){\n', '            //5% daily\n', '            return 300;\n', '        }\n', '        if(balance >= 1000 ether){\n', '            //4.5% daily\n', '            return 270;\n', '        }\n', '        if(balance >= 500 ether){\n', '            //4% daily\n', '            return 240;\n', '        }\n', '        if(balance >= 200 ether){\n', '            //3.5% daily\n', '            return 210;\n', '        }\n', '        if(balance >= 100 ether){\n', '            //3% daily\n', '            return 180;\n', '        }\n', '        if(balance >= 50 ether){\n', '            //2.5% daily\n', '            return 150;\n', '        }\n', '        return TOTAL_BASE_PERCENT;\n', '    }\n', '\n', '    function getLocalPercent() public view returns (uint256){\n', '        return getLocalPercent(msg.sender);\n', '    }\n', '\n', '    function getLocalPercent(address user) public view returns (uint256){\n', '        uint256 activeDepositsAmount = users[user].activeDepositsAmount;\n', '        if(activeDepositsAmount >= 250 ether){\n', '            //5.5% daily\n', '            return 330;\n', '        }\n', '        if(activeDepositsAmount >= 150 ether){\n', '            //5% daily\n', '            return 300;\n', '        }\n', '        if(activeDepositsAmount >= 50 ether){\n', '            //4.5% daily\n', '            return 270;\n', '        }\n', '        if(activeDepositsAmount >= 25 ether){\n', '            //4% daily\n', '            return 240;\n', '        }\n', '        if(activeDepositsAmount >= 10 ether){\n', '            //3.5% daily\n', '            return 210;\n', '        }\n', '        if(activeDepositsAmount >= 5 ether){\n', '            //3% daily\n', '            return 180;\n', '        }\n', '        if(activeDepositsAmount >= 3 ether){\n', '            //2.5% daily\n', '            return 150;\n', '        }\n', '\n', '        return TOTAL_BASE_PERCENT;\n', '    }\n', '\n', '    function getIndividualPercent() public view returns (uint256){\n', '        return getIndividualPercent(msg.sender);\n', '    }\n', '\n', '    function getIndividualPercent(address user) public view returns (uint256){\n', '        return Math.max(getGlobalPercent(), getLocalPercent(user));\n', '    }\n', '    \n', '    function totalForAccrual(address user, uint256 depositId) public view returns (uint256){\n', '        return deposits[depositId].amount.mul(getIndividualPercent(user)).div(100);\n', '    }\n', '}']