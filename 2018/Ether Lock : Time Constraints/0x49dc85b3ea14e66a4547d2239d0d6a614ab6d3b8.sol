['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract TokenSale is Ownable ,Pausable {\n', '  \n', '  uint256 public weiRaised;       \n', '  uint256 public saleHardcap;   \n', '  uint256 public personalMincap;  \n', '  uint256 public startTime;    \n', '  uint256 public endTime;       \n', '  bool    public isFinalized;     \n', '  \n', '  uint256 public mtStartTime; \n', '  uint256 public mtEndTime;      \n', '\n', '  mapping (address => uint256) public beneficiaryFunded; \n', '\n', '  function TokenSale() public \n', '    { \n', '      startTime = 1526634000; //  (2018.05.15 09:00:00 UTC);\n', '      endTime = 1527778800;   //  (2018.05.31 15:00:00 UTC);\n', '      saleHardcap = 17411.9813 * (1 ether);\n', '      personalMincap = 1 ether;\n', '      isFinalized = false;\n', '      weiRaised = 0x00;\n', '    }\n', '\n', '  function () public payable {\n', '    buyPresale();\n', '  }\n', '\n', '  function buyPresale() public payable \n', '  whenNotPaused\n', '  {\n', '    address beneficiary = msg.sender;\n', '    uint256 toFund = msg.value;  \n', '    // check validity\n', '    require(!isFinalized);\n', '    require(validPurchase());   \n', '        \n', '    uint256 postWeiRaised = SafeMath.add(weiRaised, toFund); \n', '    require(postWeiRaised <= saleHardcap);\n', '\n', '    weiRaised = SafeMath.add(weiRaised, toFund);     \n', '    beneficiaryFunded[beneficiary] = SafeMath.add(beneficiaryFunded[msg.sender], toFund);\n', '  }\n', '\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool validValue = msg.value >= personalMincap;                                                       \n', '    bool validTime = now >= startTime && now <= endTime && !checkMaintenanceTime(); \n', '    return validValue && !maxReached() && validTime;  \n', '  }\n', '\n', '  function maxReached() public constant returns (bool) {\n', '    return weiRaised >= saleHardcap;\n', '  }\n', '\n', '  function getNowTime() public constant returns(uint256) {\n', '      return now;\n', '  }\n', '\n', '  // Owner only Functions\n', '  function changeStartTime( uint64 newStartTime ) public onlyOwner {\n', '    startTime = newStartTime;\n', '  }\n', '\n', '  function changeEndTime( uint64 newEndTime ) public onlyOwner {\n', '    endTime = newEndTime;\n', '  }\n', '\n', '  function changeSaleHardcap( uint256 newsaleHardcap ) public onlyOwner {\n', '    saleHardcap = newsaleHardcap * (1 ether);\n', '  }\n', '\n', '  function changePersonalMincap( uint256 newpersonalMincap ) public onlyOwner {\n', '    personalMincap = newpersonalMincap * (1 ether);\n', '  }\n', '\n', '  function FinishTokensale() public onlyOwner {\n', '    require(maxReached() || now > endTime);\n', '    isFinalized = true;\n', '    \n', '    owner.transfer(address(this).balance);\n', '  }\n', '  \n', '  function changeMaintenanceTime(uint256 _starttime, uint256 _endtime) public onlyOwner{\n', '    mtStartTime = _starttime;\n', '    mtEndTime = _endtime;\n', '  }\n', '  \n', '  function checkMaintenanceTime() public view returns (bool)\n', '  {\n', '    uint256 datetime = now % (60 * 60 * 24);\n', '    return (datetime >= mtStartTime && datetime < mtEndTime);\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract TokenSale is Ownable ,Pausable {\n', '  \n', '  uint256 public weiRaised;       \n', '  uint256 public saleHardcap;   \n', '  uint256 public personalMincap;  \n', '  uint256 public startTime;    \n', '  uint256 public endTime;       \n', '  bool    public isFinalized;     \n', '  \n', '  uint256 public mtStartTime; \n', '  uint256 public mtEndTime;      \n', '\n', '  mapping (address => uint256) public beneficiaryFunded; \n', '\n', '  function TokenSale() public \n', '    { \n', '      startTime = 1526634000; //  (2018.05.15 09:00:00 UTC);\n', '      endTime = 1527778800;   //  (2018.05.31 15:00:00 UTC);\n', '      saleHardcap = 17411.9813 * (1 ether);\n', '      personalMincap = 1 ether;\n', '      isFinalized = false;\n', '      weiRaised = 0x00;\n', '    }\n', '\n', '  function () public payable {\n', '    buyPresale();\n', '  }\n', '\n', '  function buyPresale() public payable \n', '  whenNotPaused\n', '  {\n', '    address beneficiary = msg.sender;\n', '    uint256 toFund = msg.value;  \n', '    // check validity\n', '    require(!isFinalized);\n', '    require(validPurchase());   \n', '        \n', '    uint256 postWeiRaised = SafeMath.add(weiRaised, toFund); \n', '    require(postWeiRaised <= saleHardcap);\n', '\n', '    weiRaised = SafeMath.add(weiRaised, toFund);     \n', '    beneficiaryFunded[beneficiary] = SafeMath.add(beneficiaryFunded[msg.sender], toFund);\n', '  }\n', '\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool validValue = msg.value >= personalMincap;                                                       \n', '    bool validTime = now >= startTime && now <= endTime && !checkMaintenanceTime(); \n', '    return validValue && !maxReached() && validTime;  \n', '  }\n', '\n', '  function maxReached() public constant returns (bool) {\n', '    return weiRaised >= saleHardcap;\n', '  }\n', '\n', '  function getNowTime() public constant returns(uint256) {\n', '      return now;\n', '  }\n', '\n', '  // Owner only Functions\n', '  function changeStartTime( uint64 newStartTime ) public onlyOwner {\n', '    startTime = newStartTime;\n', '  }\n', '\n', '  function changeEndTime( uint64 newEndTime ) public onlyOwner {\n', '    endTime = newEndTime;\n', '  }\n', '\n', '  function changeSaleHardcap( uint256 newsaleHardcap ) public onlyOwner {\n', '    saleHardcap = newsaleHardcap * (1 ether);\n', '  }\n', '\n', '  function changePersonalMincap( uint256 newpersonalMincap ) public onlyOwner {\n', '    personalMincap = newpersonalMincap * (1 ether);\n', '  }\n', '\n', '  function FinishTokensale() public onlyOwner {\n', '    require(maxReached() || now > endTime);\n', '    isFinalized = true;\n', '    \n', '    owner.transfer(address(this).balance);\n', '  }\n', '  \n', '  function changeMaintenanceTime(uint256 _starttime, uint256 _endtime) public onlyOwner{\n', '    mtStartTime = _starttime;\n', '    mtEndTime = _endtime;\n', '  }\n', '  \n', '  function checkMaintenanceTime() public view returns (bool)\n', '  {\n', '    uint256 datetime = now % (60 * 60 * 24);\n', '    return (datetime >= mtStartTime && datetime < mtEndTime);\n', '  }\n', '\n', '}']
