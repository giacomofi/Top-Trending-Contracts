['pragma solidity ^0.4.19;\n', '\n', 'contract SimpleEthBank {\n', '    address public director;\n', '    mapping (address => uint) accountBalances;\n', '    mapping (address => bool) accountExists;\n', '\n', '    event Deposit(address from, uint amount);\n', '    event Withdrawal(address from, uint amount);\n', '    event Transfer(address from, address to, uint amount);\n', '\n', '    function SimpleEthBank() {\n', '        director = msg.sender;\n', '    }\n', '\n', '    function() public payable {\n', '        deposit();\n', '    }\n', '\n', '    function getBalanceOf(address addr) public constant returns(int) {\n', '        if (accountExists[addr])\n', '            return int(accountBalances[addr]);\n', '        return -1;\n', '    }\n', '\n', '    function deposit() public payable {\n', '        require(msg.value >= 0.5 ether);\n', '        accountBalances[msg.sender] += msg.value;\n', '        accountExists[msg.sender] = true;\n', '        Deposit(msg.sender, msg.value);\n', '    }\n', '    function withdraw(uint amount) public {\n', '        require(accountExists[msg.sender] && accountBalances[msg.sender] >= amount);\n', '        accountBalances[msg.sender] -= amount;\n', '        msg.sender.call.value(amount);\n', '        Withdrawal(msg.sender, amount);\n', '    }\n', '\n', '    function transfer(address to, uint amount) public {\n', '        require(accountExists[msg.sender] && accountExists[to] && accountBalances[msg.sender] >= amount);\n', '        accountBalances[to] += amount;\n', '        Transfer(msg.sender, to, amount);\n', '    }\n', '\n', '    function kill() public {\n', '        require(msg.sender == director);\n', '        selfdestruct(director);\n', '    }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', 'contract SimpleEthBank {\n', '    address public director;\n', '    mapping (address => uint) accountBalances;\n', '    mapping (address => bool) accountExists;\n', '\n', '    event Deposit(address from, uint amount);\n', '    event Withdrawal(address from, uint amount);\n', '    event Transfer(address from, address to, uint amount);\n', '\n', '    function SimpleEthBank() {\n', '        director = msg.sender;\n', '    }\n', '\n', '    function() public payable {\n', '        deposit();\n', '    }\n', '\n', '    function getBalanceOf(address addr) public constant returns(int) {\n', '        if (accountExists[addr])\n', '            return int(accountBalances[addr]);\n', '        return -1;\n', '    }\n', '\n', '    function deposit() public payable {\n', '        require(msg.value >= 0.5 ether);\n', '        accountBalances[msg.sender] += msg.value;\n', '        accountExists[msg.sender] = true;\n', '        Deposit(msg.sender, msg.value);\n', '    }\n', '    function withdraw(uint amount) public {\n', '        require(accountExists[msg.sender] && accountBalances[msg.sender] >= amount);\n', '        accountBalances[msg.sender] -= amount;\n', '        msg.sender.call.value(amount);\n', '        Withdrawal(msg.sender, amount);\n', '    }\n', '\n', '    function transfer(address to, uint amount) public {\n', '        require(accountExists[msg.sender] && accountExists[to] && accountBalances[msg.sender] >= amount);\n', '        accountBalances[to] += amount;\n', '        Transfer(msg.sender, to, amount);\n', '    }\n', '\n', '    function kill() public {\n', '        require(msg.sender == director);\n', '        selfdestruct(director);\n', '    }\n', '}']
