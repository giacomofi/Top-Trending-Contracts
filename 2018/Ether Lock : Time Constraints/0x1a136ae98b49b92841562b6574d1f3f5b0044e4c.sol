['pragma solidity ^0.4.18;\n', '\n', '// ----------------------------------------------------------------------------\n', '// &#39;PoWAdv Token&#39; contract\n', '// Mineable ERC20 Token using Proof Of Work\n', '//\n', '// Symbol      : POWA\n', '// Name        : PoWAdv Token\n', '// Total supply: 100,000,000.00\n', '// Decimals    : 8\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'library ExtendedMath {\n', '    //return the smaller of the two inputs (a or b)\n', '    function limitLessThan(uint a, uint b) internal pure returns (uint c) {\n', '        if(a > b) return b;\n', '        return a;\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and an\n', '// initial fixed supply\n', '// ----------------------------------------------------------------------------\n', 'contract PoWAdvCoinToken is ERC20Interface, Owned {\n', '    using SafeMath for uint;\n', '    using ExtendedMath for uint;\n', '\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '\n', '    uint public latestDifficultyPeriodStarted;\n', '    uint public firstValidBlockNumber;\n', '\n', '    uint public epochCount; //number of &#39;blocks&#39; mined\n', '\n', '    uint public _BLOCKS_PER_READJUSTMENT = 16;\n', '    // avg ETH block period is ~10sec this is 60 roughly block per 10min\n', '    uint public _TARGET_EPOCH_PER_PEDIOD = _BLOCKS_PER_READJUSTMENT * 60; \n', '    uint public _BLOCK_REWARD = (250 * 10**uint(8));\n', '    //a little number\n', '    uint public  _MINIMUM_TARGET = 2**16;\n', '    //a big number is easier ; just find a solution that is smaller\n', '    uint public  _MAXIMUM_TARGET = 2**234;\n', '\n', '    uint public miningTarget;\n', '    bytes32 public challengeNumber;   //generate a new one when a new reward is minted\n', '\n', '    bool locked = false;\n', '\n', '    mapping(bytes32 => bytes32) solutionForChallenge;\n', '\n', '    uint public tokensMinted;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    function PoWAdvCoinToken() public onlyOwner {\n', '\n', '        symbol = "POWA";\n', '        name = "PoWAdv Token";\n', '        decimals = 8;\n', '        _totalSupply = 100000000 * 10**uint(decimals);\n', '\n', '        if(locked) \n', '\t\t\trevert();\n', '\t\t\t\n', '        locked = true;\n', '        tokensMinted = 0;\n', '        miningTarget = _MAXIMUM_TARGET;\n', '        latestDifficultyPeriodStarted = block.number;\n', '        firstValidBlockNumber =  5349511;\n', '        _startNewMiningEpoch();\n', '\n', '        // Sum of tokens mined before hard fork, will be distributed manually\n', '        epochCount = 3071;\n', '        balances[owner] = epochCount * _BLOCK_REWARD;\n', '        tokensMinted = epochCount * _BLOCK_REWARD;\n', '    }\n', ' \n', '\tfunction mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success) {\n', '\n', '        require(block.number > firstValidBlockNumber);\n', '            \n', '\t\t//the PoW must contain work that includes a recent ethereum block hash (challenge number) and the msg.sender&#39;s address to prevent MITM attacks\n', '\t\tbytes32 digest = keccak256(challengeNumber, msg.sender, nonce);\n', '\n', '\t\t//the challenge digest must match the expected\n', '\t\tif (digest != challenge_digest) \n', '\t\t\trevert();\n', '\n', '\t\t//the digest must be smaller than the target\n', '\t\tif(uint256(digest) > discountedMiningTarget(msg.sender)) \n', '\t\t\trevert();\n', '\n', '\t\t//only allow one reward for each challenge\n', '\t\tbytes32 solution = solutionForChallenge[challengeNumber];\n', '\t\tsolutionForChallenge[challengeNumber] = digest;\n', '\t\tif(solution != 0x0) \n', '\t\t\trevert();  //prevent the same answer from awarding twice\n', '\n', '\t\tuint reward_amount = _BLOCK_REWARD;\n', '\n', '\t\tbalances[msg.sender] = balances[msg.sender].add(reward_amount);\n', '\n', '        tokensMinted = tokensMinted.add(reward_amount);\n', '        \n', '\t\tassert(tokensMinted <= _totalSupply);\n', '\t\n', '\t\t_startNewMiningEpoch();\n', '\n', '\t\temit Mint(msg.sender, reward_amount, epochCount, challengeNumber);\n', '\n', '\t\treturn true;\n', '\t}\n', '\n', '    //a new &#39;block&#39; to be mined\n', '    function _startNewMiningEpoch() internal {\n', '\t\tepochCount = epochCount.add(1);\n', '\n', '\t\t//every so often, readjust difficulty. Dont readjust when deploying\n', '\t\tif(epochCount % _BLOCKS_PER_READJUSTMENT == 0)\n', '\t\t\t_reAdjustDifficulty();\n', '\t\t\n', '\t\t//make the latest ethereum block hash a part of the next challenge for PoW to prevent pre-mining future blocks\n', '\t\t//do this last since this is a protection mechanism in the mint() function\n', '\t\tchallengeNumber = block.blockhash(block.number - 1);\n', '    }\n', '\n', '    function _reAdjustDifficulty() internal {\n', '\n', '        uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\n', '\n', '        //we want miners to spend 10 minutes to mine each &#39;block&#39;, about 60 ethereum blocks = one POWA epoch\n', '        uint targetEthBlocksPerDiffPeriod = _TARGET_EPOCH_PER_PEDIOD; //should be X times slower than ethereum\n', '\n', '        //if there were less eth blocks passed in time than expected\n', '        if(ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod)\n', '        {\n', '\t\t\tuint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div(ethBlocksSinceLastDifficultyPeriod);\n', '\t\t\tuint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\n', '\t\t\n', '\t\t\t//make it harder\n', '\t\t\tminingTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));   //by up to 50 %\n', '        }else{\n', '\t\t\tuint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div(targetEthBlocksPerDiffPeriod);\n', '\t\t\tuint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000); //always between 0 and 1000\n', '\n', '\t\t\t//make it easier\n', '\t\t\tminingTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));  //by up to 50 %\n', '        }\n', '\n', '        latestDifficultyPeriodStarted = block.number;\n', '\n', '        if(miningTarget < _MINIMUM_TARGET) //very difficult\n', '        {\n', '\t\t\tminingTarget = _MINIMUM_TARGET;\n', '        }\n', '\n', '        if(miningTarget > _MAXIMUM_TARGET) //very easy\n', '        {\n', '\t\t\tminingTarget = _MAXIMUM_TARGET;\n', '        }\n', '    }\n', '\n', '    //this is a recent ethereum block hash, used to prevent pre-mining future blocks\n', '    function getChallengeNumber() public constant returns (bytes32) {\n', '        return challengeNumber;\n', '    }\n', '\n', '    //the number of zeroes the digest of the PoW solution requires.  Auto adjusts\n', '     function getMiningDifficulty() public constant returns (uint) {\n', '        return _MAXIMUM_TARGET.div(miningTarget);\n', '    }\n', '\n', '\tfunction getMiningTarget() public constant returns (uint) {\n', '\t\treturn miningTarget;\n', '\t}\n', '\t\n', '    function discountedMiningTarget(address solver) public constant returns (uint256 discountedDiff) {\n', '        // the number of coins owned\n', '        uint256 minerBalance = uint256(balanceOf(solver));\n', '         \n', '        if(minerBalance <= 2 * _BLOCK_REWARD)\n', '            return getMiningTarget();\n', '            \n', '        // the number of full block rewards owned\n', '        uint256 minerDiscount = uint256(minerBalance.div(_BLOCK_REWARD));\n', '            \n', '        discountedDiff = miningTarget.mul(minerDiscount.mul(minerDiscount));\n', '        \n', '        if(discountedDiff > _MAXIMUM_TARGET) //very easy\n', '            discountedDiff = _MAXIMUM_TARGET;\n', '      \n', '        return discountedDiff;\n', '    }\n', '    \n', '    function discountedMiningDifficulty(address solver) public constant returns (uint256 discountedDiff) {\n', '        return _MAXIMUM_TARGET.div(discountedMiningTarget(solver));\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply - balances[address(0)];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from token owner&#39;s account to `to` account\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '    // - 0 value transfers are not allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        require(to != 0);\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account\n', '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces\n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    //\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account. The `spender` contract function\n', '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Don&#39;t accept ETH\n', '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// ----------------------------------------------------------------------------\n', "// 'PoWAdv Token' contract\n", '// Mineable ERC20 Token using Proof Of Work\n', '//\n', '// Symbol      : POWA\n', '// Name        : PoWAdv Token\n', '// Total supply: 100,000,000.00\n', '// Decimals    : 8\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'library ExtendedMath {\n', '    //return the smaller of the two inputs (a or b)\n', '    function limitLessThan(uint a, uint b) internal pure returns (uint c) {\n', '        if(a > b) return b;\n', '        return a;\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and an\n', '// initial fixed supply\n', '// ----------------------------------------------------------------------------\n', 'contract PoWAdvCoinToken is ERC20Interface, Owned {\n', '    using SafeMath for uint;\n', '    using ExtendedMath for uint;\n', '\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '\n', '    uint public latestDifficultyPeriodStarted;\n', '    uint public firstValidBlockNumber;\n', '\n', "    uint public epochCount; //number of 'blocks' mined\n", '\n', '    uint public _BLOCKS_PER_READJUSTMENT = 16;\n', '    // avg ETH block period is ~10sec this is 60 roughly block per 10min\n', '    uint public _TARGET_EPOCH_PER_PEDIOD = _BLOCKS_PER_READJUSTMENT * 60; \n', '    uint public _BLOCK_REWARD = (250 * 10**uint(8));\n', '    //a little number\n', '    uint public  _MINIMUM_TARGET = 2**16;\n', '    //a big number is easier ; just find a solution that is smaller\n', '    uint public  _MAXIMUM_TARGET = 2**234;\n', '\n', '    uint public miningTarget;\n', '    bytes32 public challengeNumber;   //generate a new one when a new reward is minted\n', '\n', '    bool locked = false;\n', '\n', '    mapping(bytes32 => bytes32) solutionForChallenge;\n', '\n', '    uint public tokensMinted;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    function PoWAdvCoinToken() public onlyOwner {\n', '\n', '        symbol = "POWA";\n', '        name = "PoWAdv Token";\n', '        decimals = 8;\n', '        _totalSupply = 100000000 * 10**uint(decimals);\n', '\n', '        if(locked) \n', '\t\t\trevert();\n', '\t\t\t\n', '        locked = true;\n', '        tokensMinted = 0;\n', '        miningTarget = _MAXIMUM_TARGET;\n', '        latestDifficultyPeriodStarted = block.number;\n', '        firstValidBlockNumber =  5349511;\n', '        _startNewMiningEpoch();\n', '\n', '        // Sum of tokens mined before hard fork, will be distributed manually\n', '        epochCount = 3071;\n', '        balances[owner] = epochCount * _BLOCK_REWARD;\n', '        tokensMinted = epochCount * _BLOCK_REWARD;\n', '    }\n', ' \n', '\tfunction mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success) {\n', '\n', '        require(block.number > firstValidBlockNumber);\n', '            \n', "\t\t//the PoW must contain work that includes a recent ethereum block hash (challenge number) and the msg.sender's address to prevent MITM attacks\n", '\t\tbytes32 digest = keccak256(challengeNumber, msg.sender, nonce);\n', '\n', '\t\t//the challenge digest must match the expected\n', '\t\tif (digest != challenge_digest) \n', '\t\t\trevert();\n', '\n', '\t\t//the digest must be smaller than the target\n', '\t\tif(uint256(digest) > discountedMiningTarget(msg.sender)) \n', '\t\t\trevert();\n', '\n', '\t\t//only allow one reward for each challenge\n', '\t\tbytes32 solution = solutionForChallenge[challengeNumber];\n', '\t\tsolutionForChallenge[challengeNumber] = digest;\n', '\t\tif(solution != 0x0) \n', '\t\t\trevert();  //prevent the same answer from awarding twice\n', '\n', '\t\tuint reward_amount = _BLOCK_REWARD;\n', '\n', '\t\tbalances[msg.sender] = balances[msg.sender].add(reward_amount);\n', '\n', '        tokensMinted = tokensMinted.add(reward_amount);\n', '        \n', '\t\tassert(tokensMinted <= _totalSupply);\n', '\t\n', '\t\t_startNewMiningEpoch();\n', '\n', '\t\temit Mint(msg.sender, reward_amount, epochCount, challengeNumber);\n', '\n', '\t\treturn true;\n', '\t}\n', '\n', "    //a new 'block' to be mined\n", '    function _startNewMiningEpoch() internal {\n', '\t\tepochCount = epochCount.add(1);\n', '\n', '\t\t//every so often, readjust difficulty. Dont readjust when deploying\n', '\t\tif(epochCount % _BLOCKS_PER_READJUSTMENT == 0)\n', '\t\t\t_reAdjustDifficulty();\n', '\t\t\n', '\t\t//make the latest ethereum block hash a part of the next challenge for PoW to prevent pre-mining future blocks\n', '\t\t//do this last since this is a protection mechanism in the mint() function\n', '\t\tchallengeNumber = block.blockhash(block.number - 1);\n', '    }\n', '\n', '    function _reAdjustDifficulty() internal {\n', '\n', '        uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\n', '\n', "        //we want miners to spend 10 minutes to mine each 'block', about 60 ethereum blocks = one POWA epoch\n", '        uint targetEthBlocksPerDiffPeriod = _TARGET_EPOCH_PER_PEDIOD; //should be X times slower than ethereum\n', '\n', '        //if there were less eth blocks passed in time than expected\n', '        if(ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod)\n', '        {\n', '\t\t\tuint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div(ethBlocksSinceLastDifficultyPeriod);\n', '\t\t\tuint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\n', '\t\t\n', '\t\t\t//make it harder\n', '\t\t\tminingTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));   //by up to 50 %\n', '        }else{\n', '\t\t\tuint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div(targetEthBlocksPerDiffPeriod);\n', '\t\t\tuint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000); //always between 0 and 1000\n', '\n', '\t\t\t//make it easier\n', '\t\t\tminingTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));  //by up to 50 %\n', '        }\n', '\n', '        latestDifficultyPeriodStarted = block.number;\n', '\n', '        if(miningTarget < _MINIMUM_TARGET) //very difficult\n', '        {\n', '\t\t\tminingTarget = _MINIMUM_TARGET;\n', '        }\n', '\n', '        if(miningTarget > _MAXIMUM_TARGET) //very easy\n', '        {\n', '\t\t\tminingTarget = _MAXIMUM_TARGET;\n', '        }\n', '    }\n', '\n', '    //this is a recent ethereum block hash, used to prevent pre-mining future blocks\n', '    function getChallengeNumber() public constant returns (bytes32) {\n', '        return challengeNumber;\n', '    }\n', '\n', '    //the number of zeroes the digest of the PoW solution requires.  Auto adjusts\n', '     function getMiningDifficulty() public constant returns (uint) {\n', '        return _MAXIMUM_TARGET.div(miningTarget);\n', '    }\n', '\n', '\tfunction getMiningTarget() public constant returns (uint) {\n', '\t\treturn miningTarget;\n', '\t}\n', '\t\n', '    function discountedMiningTarget(address solver) public constant returns (uint256 discountedDiff) {\n', '        // the number of coins owned\n', '        uint256 minerBalance = uint256(balanceOf(solver));\n', '         \n', '        if(minerBalance <= 2 * _BLOCK_REWARD)\n', '            return getMiningTarget();\n', '            \n', '        // the number of full block rewards owned\n', '        uint256 minerDiscount = uint256(minerBalance.div(_BLOCK_REWARD));\n', '            \n', '        discountedDiff = miningTarget.mul(minerDiscount.mul(minerDiscount));\n', '        \n', '        if(discountedDiff > _MAXIMUM_TARGET) //very easy\n', '            discountedDiff = _MAXIMUM_TARGET;\n', '      \n', '        return discountedDiff;\n', '    }\n', '    \n', '    function discountedMiningDifficulty(address solver) public constant returns (uint256 discountedDiff) {\n', '        return _MAXIMUM_TARGET.div(discountedMiningTarget(solver));\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply - balances[address(0)];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to `to` account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are not allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        require(to != 0);\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account\n", '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces\n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    //\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account. The `spender` contract function\n", '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Don't accept ETH\n", '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']
