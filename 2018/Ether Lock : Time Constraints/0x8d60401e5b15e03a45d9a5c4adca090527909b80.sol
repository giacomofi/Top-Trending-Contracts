['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '\n', '  function add(uint a, uint b)\n', '    internal\n', '    pure\n', '    returns (uint c)\n', '  {\n', '    c = a + b;\n', '    require(c >= a);\n', '  }\n', '\n', '  function sub(uint a, uint b)\n', '    internal\n', '    pure\n', '    returns (uint c)\n', '  {\n', '    require(b <= a);\n', '    c = a - b;\n', '  }\n', '\n', '  function mul(uint a, uint b)\n', '    internal\n', '    pure\n', '    returns (uint c)\n', '  {\n', '    c = a * b;\n', '    require(a == 0 || c / a == b);\n', '  }\n', '\n', '  function div(uint a, uint b)\n', '    internal\n', '    pure\n', '    returns (uint c)\n', '  {\n', '    require(b > 0);\n', '    c = a / b;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract ERC20Interface {\n', '\n', '  event Transfer(address indexed from, address indexed to, uint tokens);\n', '  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '\n', '  function totalSupply() public constant returns (uint);\n', '  function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '  function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '  function transfer(address to, uint tokens) public returns (bool success);\n', '  function approve(address spender, uint tokens) public returns (bool success);\n', '  function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '}\n', '\n', '\n', '\n', '\n', 'contract Owned {\n', '\n', '  event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '  address public owner;\n', '  address public newOwner;\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function Owned()\n', '    public\n', '  {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function transferOwnership(address _newOwner)\n', '    public\n', '    onlyOwner\n', '  {\n', '    newOwner = _newOwner;\n', '  }\n', '\n', '  function acceptOwnership()\n', '    public\n', '  {\n', '    require(msg.sender == newOwner);\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '    newOwner = address(0);\n', '  }\n', '\n', '}\n', '\n', 'contract PopulStayToken is ERC20Interface, Owned {\n', '\n', '  using SafeMath for uint;\n', '\n', '  string public symbol;\n', '  string public  name;\n', '  uint8 public decimals;\n', '  uint public _totalSupply;\n', '\n', '  mapping(address => uint) balances;\n', '  mapping(address => mapping(address => uint)) allowed;\n', '\n', '  function PopulStayToken()\n', '    public\n', '  {\n', '    symbol = "PPS";\n', '    name = "PopulStay Token";\n', '    decimals = 0;\n', '    _totalSupply = 5000000000;\n', '    balances[owner] = _totalSupply;\n', '    emit Transfer(address(0), owner, _totalSupply);\n', '  }\n', '\n', '  function totalSupply()\n', '    public\n', '    constant\n', '    returns (uint)\n', '  {\n', '    return _totalSupply  - balances[address(0)];\n', '  }\n', '\n', '  function balanceOf(address tokenOwner)\n', '    public\n', '    constant\n', '    returns (uint balance)\n', '  {\n', '    return balances[tokenOwner];\n', '  }\n', '\n', '\n', '  function transfer(address to, uint tokens)\n', '    public\n', '    returns (bool success)\n', '  {\n', '    balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    emit Transfer(msg.sender, to, tokens);\n', '    return true;\n', '  }\n', '\n', '\n', '\n', '  function approve(address spender, uint tokens)\n', '    public\n', '    returns (bool success)\n', '  {\n', '    allowed[msg.sender][spender] = tokens;\n', '    emit Approval(msg.sender, spender, tokens);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address from, address to, uint tokens)\n', '    public\n', '    returns (bool success)\n', '  {\n', '    balances[from] = balances[from].sub(tokens);\n', '    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    emit Transfer(from, to, tokens);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address tokenOwner, address spender)\n', '    public\n', '    constant\n', '    returns (uint remaining)\n', '  {\n', '    return allowed[tokenOwner][spender];\n', '  }\n', '\n', '\n', ' function approveAndCall(address spender, uint tokens, address _owneraddress, bytes32 _houseinfo, uint _from, uint _to ,uint _days)\n', '     public\n', '    returns (address _preorder)\n', '  {\n', '    allowed[msg.sender][spender] = tokens;\n', '    emit Approval(msg.sender, spender, tokens);\n', '    return HouseInfoListing(spender).preOrder(msg.sender,_owneraddress, _houseinfo, _from, _to,_days);\n', '  }\n', '\n', '\n', '\n', '  function ()\n', '    public\n', '    payable\n', '  {\n', '    revert();\n', '  }\n', '\n', '\n', '  function transferAnyERC20Token(address tokenAddress, uint tokens)\n', '    public\n', '    onlyOwner\n', '    returns (bool success)\n', '  {\n', '    return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '  }\n', '  \n', '  function approveAndCall1(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '}\n', '\n', '}\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', 'contract HouseInfoListing{\n', '   address public tokenAddress;//tokenAddress used to pay \n', '   \n', '   bytes32[] private districtcode;//district code\n', '   address private contractowner;\n', '   \n', '   address public preOrderaddressfortest;\n', '   uint public transferPriceForTest;\n', '   \n', '   \n', '   function HouseInfoListing(address _tokenAddress)\n', '   payable\n', '   public{\n', '       tokenAddress   = _tokenAddress;\n', '       contractowner  = msg.sender; \n', '   }\n', '   \n', '   \n', ' function setDistrictCode(bytes32 _districtcode) \n', '   public \n', '   returns(bool success)\n', '  {\n', '    if(msg.sender!= contractowner)\n', '    return false;\n', '    districtcode.push(_districtcode);\n', '    return true;\n', '  }\n', '   \n', '   function getDistrictCode() \n', '   public \n', '   view\n', '   returns(bytes32[] _districtcode)\n', '  {\n', '    return districtcode;\n', '  }\n', '   \n', '    \n', '    \n', '  struct HouseInfo {\n', '    string  roominfo;\n', '    uint    price;\n', '    uint    contractdatetime;\n', '    uint    state;//0 close , 1 open\n', '    address owner;\n', '  \n', '  }\n', '  \n', '  mapping ( address => bytes32[] ) private hostRoomList;//every house info has one uuid,find house info by host address\n', '                                                      \n', '  \n', '  \n', '  mapping ( bytes32 => HouseInfo ) private houseInfo;   //describ the house information\n', '  mapping ( bytes32 => bytes32[] ) private uuids;       //every house info has one uuid,find house info by districtcode\n', '                                                        //should add find house info by city street \n', '                                                        \n', '                                                        \n', '  //通过房屋信息uuid确定预定合约信息                                                        \n', '  mapping ( bytes32 => address[] ) private PreOrders;   \n', '                                                        //find preorders lists by house info uuid \n', '                                                        //find preOrder or order infomation from this connection \n', '  //通过房客address找到合约信息\n', '  mapping (address => address[]) private GuestOrders;   //find guest orders by guest address\n', '  \n', '  //通过房东address找到合约信息\n', '  mapping (address => address[]) private HouseOwnerOrders;//find house owner orders by house owner address\n', '  \n', '  \n', '  \n', '  function preOrder( address _guestaddress,address _hostaddress, bytes32 _houseinfo, uint _from, uint _to, uint _days)\n', '  payable\n', '  public\n', '  returns (address _contractaddress)\n', '  {\n', '      uint transferPrice = _days * houseInfo[_houseinfo].price;\n', '      transferPriceForTest = transferPrice;\n', '      PreOrder preorder = new PreOrder( tokenAddress , _hostaddress , _guestaddress , _houseinfo , _from , _to , _days , 0 ,transferPrice );\n', '      preOrderaddressfortest =preorder;\n', '         if(Token(tokenAddress).transferFrom(_guestaddress,preorder,transferPrice))//transfer token to contract address\n', '         {\n', '             \n', '            PreOrders[_houseinfo].push(preorder); \n', '            GuestOrders[_guestaddress].push(preorder);\n', '            HouseOwnerOrders[_hostaddress].push(preorder);\n', '            return address(preorder);\n', '             \n', '         }\n', '         else\n', '         {\n', '             //transfer token failure\n', '             return ;\n', '         }\n', '      \n', '      \n', '      return ;\n', '      \n', '  }\n', '  //"test",9,"roominfo","test","0x3333322d30303332000000000000000000000000000000000000000000000000"\n', '   function setHouseInfo(bytes32 _uuid,uint _price,string _roominfo,bytes32 _districtcode) \n', '   public \n', '   returns(bool success)\n', '  {\n', '    houseInfo[_uuid] = HouseInfo(\n', '      {\n', '        roominfo: _roominfo,\n', '        price   : _price,\n', '        contractdatetime:block.timestamp,\n', '        owner   : msg.sender,\n', '        state   : 1\n', '      });\n', '              \n', '    uuids[_districtcode].push(_uuid);\n', '    hostRoomList[msg.sender].push(_uuid);\n', '    return true;\n', '  }\n', '  \n', '  function getHostRoomLists(address _hostaddress)\n', '    view\n', '    public\n', '    returns(bytes32[] _hostRoomList)\n', '  {\n', '    return hostRoomList[_hostaddress];\n', '  }\n', '    \n', '    \n', '  function getGuestOrders(address _guestaddress)\n', '  view\n', '  public\n', '  returns (address[] _guestOrders)\n', '  {\n', '      return GuestOrders[_guestaddress];\n', '  }\n', '  \n', '  function getHostOrders(address _hostaddress)\n', '  view\n', '  public\n', '  returns (address[] _hostOrders)\n', '  {\n', '      return HouseOwnerOrders[_hostaddress];\n', '  }\n', '  \n', '  function getPreorders(bytes32 _houseinfo)\n', '  view\n', '  public\n', '  returns (address[] _preorders)\n', '  {\n', '      return PreOrders[_houseinfo];\n', '  }\n', '  \n', '  \n', '  \n', '  function getUUIDS(bytes32 _districtcode)\n', '    view\n', '    public\n', '    returns(bytes32[] _uuid)\n', '  {\n', '    return uuids[_districtcode];\n', '  }\n', '    \n', '  function getHouseInfo(bytes32 _uuid)\n', '    view\n', '    public\n', '    returns (uint _price, uint _contractdatetime, address _owner,uint _state,string _roominfo)\n', '  {\n', '    //check the contract list, the most important thing is that if state is 0, that means this house had been rented.\n', '    return (\n', '      houseInfo[_uuid].price,\n', '      houseInfo[_uuid].contractdatetime,\n', '      houseInfo[_uuid].owner,\n', '      houseInfo[_uuid].state,\n', '      houseInfo[_uuid].roominfo\n', '    );\n', '  }\n', ' \n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract PreOrder{\n', '    address public tokenAddress;\n', '    address public owneraddress;\n', '    address public guestaddress;\n', '    bytes32 public houseinfo;\n', '    uint public from;\n', '    uint public to;\n', '    uint public rentDays;\n', '    uint public status;//0:preorder 1: success  -1: cancel\n', '    uint public price;\n', '    \n', '    \n', '    function PreOrder (\n', '                        address _tokenAddress, \n', '                        address _owneraddress,\n', '                        address _guestaddress,\n', '                        bytes32 _houseinfo,\n', '                        uint _from,\n', '                        uint _to,\n', '                        uint _days,\n', '                        uint _status,\n', '                        uint _price\n', '                    ) \n', '    payable public{\n', '        tokenAddress = _tokenAddress;\n', '        owneraddress = _owneraddress;\n', '        guestaddress = _guestaddress;\n', '        houseinfo    = _houseinfo;\n', '        from         = _from;\n', '        to           = _to;\n', '        rentDays     = _days;\n', '        status       = _status;\n', '        price        = _price;\n', '        \n', '    }\n', '    \n', '    function getPreorderInfo()\n', '    view\n', '    public\n', '    returns (\n', '                address _tokenAddress, \n', '                address _owneraddress,\n', '                address _guestaddress,\n', '                bytes32 _houseinfo,\n', '                uint _from,\n', '                uint _to,\n', '                uint _days,\n', '                uint _status,\n', '                uint _price\n', '            ) \n', '    {\n', '    //check the contract list, the most important thing is that if state is 0, that means this house had been rented.\n', '    return (\n', '        tokenAddress ,\n', '        owneraddress ,\n', '        guestaddress ,\n', '        houseinfo    ,\n', '        from         ,\n', '        to           ,\n', '        rentDays     ,\n', '        status       ,\n', '        price        \n', '    );\n', '    }\n', '    \n', '    \n', '    \n', '    function confirmOrder()\n', '    payable\n', '    public\n', '    returns(bool success)\n', '    {\n', '       if( msg.sender == guestaddress && status == 0)   \n', '       {\n', '            if(Token(tokenAddress).transfer(owneraddress,price))//transfer token to contract address\n', '         {\n', '             \n', '            status = 1;\n', '            return true;\n', '             \n', '         }\n', '         else\n', '         {\n', '             //transfer token failure\n', '             return false;\n', '         }\n', '           \n', '       }\n', '      //1 transfer token from contract address to guest address\n', '      //2 if step 1 successfully finished, update info of preOrder contract\n', '      //3 if step 1 successfully finished, remove order info from PreOrders lists\n', '      return true;\n', '   }\n', '    \n', '    bool private houseOwnerAgreeToCancel = false;\n', '    bool private guestAgreeToCancel      = false;\n', '//     function cancelOrder()\n', '//     public\n', '//     returns(bool success)\n', '//     {\n', '//       //both of house owner and guest should be agreed to cancel this contract then the Token in this contract can send back\n', '\n', '//       //1 transfer token from contract address to guest address\n', '//       //2 if step 1 successfully finished, update info of preOrder contract\n', '//       return true;\n', '//   }\n', '    \n', '    \n', '}\n', '\n', '\n', '\n', 'contract Token {\n', '\n', '  event Transfer(address indexed from, address indexed to, uint tokens);\n', '  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '\n', '  function totalSupply() public constant returns (uint);\n', '  function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '  function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '  function transfer(address to, uint tokens) public returns (bool success);\n', '  function approve(address spender, uint tokens) public returns (bool success);\n', '  function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '\n', '  function add(uint a, uint b)\n', '    internal\n', '    pure\n', '    returns (uint c)\n', '  {\n', '    c = a + b;\n', '    require(c >= a);\n', '  }\n', '\n', '  function sub(uint a, uint b)\n', '    internal\n', '    pure\n', '    returns (uint c)\n', '  {\n', '    require(b <= a);\n', '    c = a - b;\n', '  }\n', '\n', '  function mul(uint a, uint b)\n', '    internal\n', '    pure\n', '    returns (uint c)\n', '  {\n', '    c = a * b;\n', '    require(a == 0 || c / a == b);\n', '  }\n', '\n', '  function div(uint a, uint b)\n', '    internal\n', '    pure\n', '    returns (uint c)\n', '  {\n', '    require(b > 0);\n', '    c = a / b;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract ERC20Interface {\n', '\n', '  event Transfer(address indexed from, address indexed to, uint tokens);\n', '  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '\n', '  function totalSupply() public constant returns (uint);\n', '  function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '  function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '  function transfer(address to, uint tokens) public returns (bool success);\n', '  function approve(address spender, uint tokens) public returns (bool success);\n', '  function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '}\n', '\n', '\n', '\n', '\n', 'contract Owned {\n', '\n', '  event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '  address public owner;\n', '  address public newOwner;\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function Owned()\n', '    public\n', '  {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function transferOwnership(address _newOwner)\n', '    public\n', '    onlyOwner\n', '  {\n', '    newOwner = _newOwner;\n', '  }\n', '\n', '  function acceptOwnership()\n', '    public\n', '  {\n', '    require(msg.sender == newOwner);\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '    newOwner = address(0);\n', '  }\n', '\n', '}\n', '\n', 'contract PopulStayToken is ERC20Interface, Owned {\n', '\n', '  using SafeMath for uint;\n', '\n', '  string public symbol;\n', '  string public  name;\n', '  uint8 public decimals;\n', '  uint public _totalSupply;\n', '\n', '  mapping(address => uint) balances;\n', '  mapping(address => mapping(address => uint)) allowed;\n', '\n', '  function PopulStayToken()\n', '    public\n', '  {\n', '    symbol = "PPS";\n', '    name = "PopulStay Token";\n', '    decimals = 0;\n', '    _totalSupply = 5000000000;\n', '    balances[owner] = _totalSupply;\n', '    emit Transfer(address(0), owner, _totalSupply);\n', '  }\n', '\n', '  function totalSupply()\n', '    public\n', '    constant\n', '    returns (uint)\n', '  {\n', '    return _totalSupply  - balances[address(0)];\n', '  }\n', '\n', '  function balanceOf(address tokenOwner)\n', '    public\n', '    constant\n', '    returns (uint balance)\n', '  {\n', '    return balances[tokenOwner];\n', '  }\n', '\n', '\n', '  function transfer(address to, uint tokens)\n', '    public\n', '    returns (bool success)\n', '  {\n', '    balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    emit Transfer(msg.sender, to, tokens);\n', '    return true;\n', '  }\n', '\n', '\n', '\n', '  function approve(address spender, uint tokens)\n', '    public\n', '    returns (bool success)\n', '  {\n', '    allowed[msg.sender][spender] = tokens;\n', '    emit Approval(msg.sender, spender, tokens);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address from, address to, uint tokens)\n', '    public\n', '    returns (bool success)\n', '  {\n', '    balances[from] = balances[from].sub(tokens);\n', '    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    emit Transfer(from, to, tokens);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address tokenOwner, address spender)\n', '    public\n', '    constant\n', '    returns (uint remaining)\n', '  {\n', '    return allowed[tokenOwner][spender];\n', '  }\n', '\n', '\n', ' function approveAndCall(address spender, uint tokens, address _owneraddress, bytes32 _houseinfo, uint _from, uint _to ,uint _days)\n', '     public\n', '    returns (address _preorder)\n', '  {\n', '    allowed[msg.sender][spender] = tokens;\n', '    emit Approval(msg.sender, spender, tokens);\n', '    return HouseInfoListing(spender).preOrder(msg.sender,_owneraddress, _houseinfo, _from, _to,_days);\n', '  }\n', '\n', '\n', '\n', '  function ()\n', '    public\n', '    payable\n', '  {\n', '    revert();\n', '  }\n', '\n', '\n', '  function transferAnyERC20Token(address tokenAddress, uint tokens)\n', '    public\n', '    onlyOwner\n', '    returns (bool success)\n', '  {\n', '    return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '  }\n', '  \n', '  function approveAndCall1(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '}\n', '\n', '}\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', 'contract HouseInfoListing{\n', '   address public tokenAddress;//tokenAddress used to pay \n', '   \n', '   bytes32[] private districtcode;//district code\n', '   address private contractowner;\n', '   \n', '   address public preOrderaddressfortest;\n', '   uint public transferPriceForTest;\n', '   \n', '   \n', '   function HouseInfoListing(address _tokenAddress)\n', '   payable\n', '   public{\n', '       tokenAddress   = _tokenAddress;\n', '       contractowner  = msg.sender; \n', '   }\n', '   \n', '   \n', ' function setDistrictCode(bytes32 _districtcode) \n', '   public \n', '   returns(bool success)\n', '  {\n', '    if(msg.sender!= contractowner)\n', '    return false;\n', '    districtcode.push(_districtcode);\n', '    return true;\n', '  }\n', '   \n', '   function getDistrictCode() \n', '   public \n', '   view\n', '   returns(bytes32[] _districtcode)\n', '  {\n', '    return districtcode;\n', '  }\n', '   \n', '    \n', '    \n', '  struct HouseInfo {\n', '    string  roominfo;\n', '    uint    price;\n', '    uint    contractdatetime;\n', '    uint    state;//0 close , 1 open\n', '    address owner;\n', '  \n', '  }\n', '  \n', '  mapping ( address => bytes32[] ) private hostRoomList;//every house info has one uuid,find house info by host address\n', '                                                      \n', '  \n', '  \n', '  mapping ( bytes32 => HouseInfo ) private houseInfo;   //describ the house information\n', '  mapping ( bytes32 => bytes32[] ) private uuids;       //every house info has one uuid,find house info by districtcode\n', '                                                        //should add find house info by city street \n', '                                                        \n', '                                                        \n', '  //通过房屋信息uuid确定预定合约信息                                                        \n', '  mapping ( bytes32 => address[] ) private PreOrders;   \n', '                                                        //find preorders lists by house info uuid \n', '                                                        //find preOrder or order infomation from this connection \n', '  //通过房客address找到合约信息\n', '  mapping (address => address[]) private GuestOrders;   //find guest orders by guest address\n', '  \n', '  //通过房东address找到合约信息\n', '  mapping (address => address[]) private HouseOwnerOrders;//find house owner orders by house owner address\n', '  \n', '  \n', '  \n', '  function preOrder( address _guestaddress,address _hostaddress, bytes32 _houseinfo, uint _from, uint _to, uint _days)\n', '  payable\n', '  public\n', '  returns (address _contractaddress)\n', '  {\n', '      uint transferPrice = _days * houseInfo[_houseinfo].price;\n', '      transferPriceForTest = transferPrice;\n', '      PreOrder preorder = new PreOrder( tokenAddress , _hostaddress , _guestaddress , _houseinfo , _from , _to , _days , 0 ,transferPrice );\n', '      preOrderaddressfortest =preorder;\n', '         if(Token(tokenAddress).transferFrom(_guestaddress,preorder,transferPrice))//transfer token to contract address\n', '         {\n', '             \n', '            PreOrders[_houseinfo].push(preorder); \n', '            GuestOrders[_guestaddress].push(preorder);\n', '            HouseOwnerOrders[_hostaddress].push(preorder);\n', '            return address(preorder);\n', '             \n', '         }\n', '         else\n', '         {\n', '             //transfer token failure\n', '             return ;\n', '         }\n', '      \n', '      \n', '      return ;\n', '      \n', '  }\n', '  //"test",9,"roominfo","test","0x3333322d30303332000000000000000000000000000000000000000000000000"\n', '   function setHouseInfo(bytes32 _uuid,uint _price,string _roominfo,bytes32 _districtcode) \n', '   public \n', '   returns(bool success)\n', '  {\n', '    houseInfo[_uuid] = HouseInfo(\n', '      {\n', '        roominfo: _roominfo,\n', '        price   : _price,\n', '        contractdatetime:block.timestamp,\n', '        owner   : msg.sender,\n', '        state   : 1\n', '      });\n', '              \n', '    uuids[_districtcode].push(_uuid);\n', '    hostRoomList[msg.sender].push(_uuid);\n', '    return true;\n', '  }\n', '  \n', '  function getHostRoomLists(address _hostaddress)\n', '    view\n', '    public\n', '    returns(bytes32[] _hostRoomList)\n', '  {\n', '    return hostRoomList[_hostaddress];\n', '  }\n', '    \n', '    \n', '  function getGuestOrders(address _guestaddress)\n', '  view\n', '  public\n', '  returns (address[] _guestOrders)\n', '  {\n', '      return GuestOrders[_guestaddress];\n', '  }\n', '  \n', '  function getHostOrders(address _hostaddress)\n', '  view\n', '  public\n', '  returns (address[] _hostOrders)\n', '  {\n', '      return HouseOwnerOrders[_hostaddress];\n', '  }\n', '  \n', '  function getPreorders(bytes32 _houseinfo)\n', '  view\n', '  public\n', '  returns (address[] _preorders)\n', '  {\n', '      return PreOrders[_houseinfo];\n', '  }\n', '  \n', '  \n', '  \n', '  function getUUIDS(bytes32 _districtcode)\n', '    view\n', '    public\n', '    returns(bytes32[] _uuid)\n', '  {\n', '    return uuids[_districtcode];\n', '  }\n', '    \n', '  function getHouseInfo(bytes32 _uuid)\n', '    view\n', '    public\n', '    returns (uint _price, uint _contractdatetime, address _owner,uint _state,string _roominfo)\n', '  {\n', '    //check the contract list, the most important thing is that if state is 0, that means this house had been rented.\n', '    return (\n', '      houseInfo[_uuid].price,\n', '      houseInfo[_uuid].contractdatetime,\n', '      houseInfo[_uuid].owner,\n', '      houseInfo[_uuid].state,\n', '      houseInfo[_uuid].roominfo\n', '    );\n', '  }\n', ' \n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract PreOrder{\n', '    address public tokenAddress;\n', '    address public owneraddress;\n', '    address public guestaddress;\n', '    bytes32 public houseinfo;\n', '    uint public from;\n', '    uint public to;\n', '    uint public rentDays;\n', '    uint public status;//0:preorder 1: success  -1: cancel\n', '    uint public price;\n', '    \n', '    \n', '    function PreOrder (\n', '                        address _tokenAddress, \n', '                        address _owneraddress,\n', '                        address _guestaddress,\n', '                        bytes32 _houseinfo,\n', '                        uint _from,\n', '                        uint _to,\n', '                        uint _days,\n', '                        uint _status,\n', '                        uint _price\n', '                    ) \n', '    payable public{\n', '        tokenAddress = _tokenAddress;\n', '        owneraddress = _owneraddress;\n', '        guestaddress = _guestaddress;\n', '        houseinfo    = _houseinfo;\n', '        from         = _from;\n', '        to           = _to;\n', '        rentDays     = _days;\n', '        status       = _status;\n', '        price        = _price;\n', '        \n', '    }\n', '    \n', '    function getPreorderInfo()\n', '    view\n', '    public\n', '    returns (\n', '                address _tokenAddress, \n', '                address _owneraddress,\n', '                address _guestaddress,\n', '                bytes32 _houseinfo,\n', '                uint _from,\n', '                uint _to,\n', '                uint _days,\n', '                uint _status,\n', '                uint _price\n', '            ) \n', '    {\n', '    //check the contract list, the most important thing is that if state is 0, that means this house had been rented.\n', '    return (\n', '        tokenAddress ,\n', '        owneraddress ,\n', '        guestaddress ,\n', '        houseinfo    ,\n', '        from         ,\n', '        to           ,\n', '        rentDays     ,\n', '        status       ,\n', '        price        \n', '    );\n', '    }\n', '    \n', '    \n', '    \n', '    function confirmOrder()\n', '    payable\n', '    public\n', '    returns(bool success)\n', '    {\n', '       if( msg.sender == guestaddress && status == 0)   \n', '       {\n', '            if(Token(tokenAddress).transfer(owneraddress,price))//transfer token to contract address\n', '         {\n', '             \n', '            status = 1;\n', '            return true;\n', '             \n', '         }\n', '         else\n', '         {\n', '             //transfer token failure\n', '             return false;\n', '         }\n', '           \n', '       }\n', '      //1 transfer token from contract address to guest address\n', '      //2 if step 1 successfully finished, update info of preOrder contract\n', '      //3 if step 1 successfully finished, remove order info from PreOrders lists\n', '      return true;\n', '   }\n', '    \n', '    bool private houseOwnerAgreeToCancel = false;\n', '    bool private guestAgreeToCancel      = false;\n', '//     function cancelOrder()\n', '//     public\n', '//     returns(bool success)\n', '//     {\n', '//       //both of house owner and guest should be agreed to cancel this contract then the Token in this contract can send back\n', '\n', '//       //1 transfer token from contract address to guest address\n', '//       //2 if step 1 successfully finished, update info of preOrder contract\n', '//       return true;\n', '//   }\n', '    \n', '    \n', '}\n', '\n', '\n', '\n', 'contract Token {\n', '\n', '  event Transfer(address indexed from, address indexed to, uint tokens);\n', '  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '\n', '  function totalSupply() public constant returns (uint);\n', '  function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '  function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '  function transfer(address to, uint tokens) public returns (bool success);\n', '  function approve(address spender, uint tokens) public returns (bool success);\n', '  function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '}']
