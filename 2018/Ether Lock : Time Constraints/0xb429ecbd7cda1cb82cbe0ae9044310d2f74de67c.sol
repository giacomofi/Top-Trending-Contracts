['pragma solidity ^0.4.19;\n', '\n', 'contract SmzTradingContract\n', '{\n', '    address public constant RECEIVER_ADDRESS = 0xf3eB3CA356c111ECb418D457e55A3A3D185faf61;\n', '    uint256 public constant ACCEPTED_AMOUNT = 3 ether;\n', '    uint256 public RECEIVER_PAYOUT_THRESHOLD = 100 ether;\n', '    \n', '    address public constant END_ADDRESS = 0x3559e34004b944906Bc727a40d7568a98bDc42d3;\n', '    uint256 public constant END_AMOUNT = 0.39 ether;\n', '    \n', '    bool public ended = false;\n', '    \n', '    mapping(address => bool) public addressesAllowed;\n', '    mapping(address => bool) public addressesDeposited;\n', '    \n', '    // The manager can allow and disallow addresses to deposit\n', '    address public manager;\n', '    \n', '    function SmzTradingContract() public\n', '    {\n', '        manager = msg.sender;\n', '    }\n', '    function setManager(address _newManager) external\n', '    {\n', '        require(msg.sender == manager);\n', '        manager = _newManager;\n', '    }\n', '    \n', '    function () payable external\n', '    {\n', '        // If the ending address sends the ending amount, block all deposits\n', '        if (msg.sender == END_ADDRESS && msg.value == END_AMOUNT)\n', '        {\n', '            ended = true;\n', '            RECEIVER_ADDRESS.transfer(this.balance);\n', '            return;\n', '        }\n', '        \n', '        // Only allow deposits if the process has not been ended yet\n', '        require(!ended);\n', '        \n', '        // Only allow deposits of one exact amount\n', '        require(msg.value == ACCEPTED_AMOUNT);\n', '        \n', '        // Only explicitly allowed addresses can deposit\n', '        require(addressesAllowed[msg.sender] == true);\n', '        \n', '        // Each address can only despoit once\n', '        require(addressesDeposited[msg.sender] == false);\n', '        addressesDeposited[msg.sender] = true;\n', '        \n', '        // When an address has deposited, we set their allowed state to 0.\n', '        // This refunds approximately 15000 gas.\n', '        addressesAllowed[msg.sender] = false;\n', '        \n', '        // If we have crossed the payout threshold,\n', '        // transfer all the deposited amounts to the receiver address\n', '        if (this.balance >= RECEIVER_PAYOUT_THRESHOLD)\n', '        {\n', '            RECEIVER_ADDRESS.transfer(this.balance);\n', '        }\n', '    }\n', '    \n', "    // The receiver may add and remove each address' permission to deposit\n", '    function addAllowedAddress(address _allowedAddress) public\n', '    {\n', '        require(msg.sender == manager);\n', '        addressesAllowed[_allowedAddress] = true;\n', '    }\n', '    function removeAllowedAddress(address _disallowedAddress) public\n', '    {\n', '        require(msg.sender == manager);\n', '        addressesAllowed[_disallowedAddress] = false;\n', '    }\n', '    \n', '    function addMultipleAllowedAddresses(address[] _allowedAddresses) external\n', '    {\n', '        require(msg.sender == manager);\n', '        for (uint256 i=0; i<_allowedAddresses.length; i++)\n', '        {\n', '            addressesAllowed[_allowedAddresses[i]] = true;\n', '        }\n', '    }\n', '    function removeMultipleAllowedAddresses(address[] _disallowedAddresses) external\n', '    {\n', '        require(msg.sender == manager);\n', '        for (uint256 i=0; i<_disallowedAddresses.length; i++)\n', '        {\n', '            addressesAllowed[_disallowedAddresses[i]] = false;\n', '        }\n', '    }\n', '}']