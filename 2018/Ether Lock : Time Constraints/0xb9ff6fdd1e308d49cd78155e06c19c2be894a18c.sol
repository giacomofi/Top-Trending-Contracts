['pragma solidity ^0.4.0;\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function safeAdd(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', 'interface token {\n', '    function transfer(address to, uint tokens) external;\n', '    function balanceOf(address tokenOwner) external returns(uint balance);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '    event tokensBought(address _addr, uint _amount);\n', '    event tokensCalledBack(uint _amount);\n', '    event privateSaleEnded(uint _time);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        owner = _newOwner;\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract Crowdsale is Owned{\n', '    using SafeMath for uint;\n', '    uint public endDate;\n', '    address public developer;\n', '    address public marketing;\n', '    address public kelly;\n', '    address public company;\n', '    uint public phaseOneEnd;\n', '    uint public phaseTwoEnd;\n', '    uint public phaseThreeEnd;\n', '    token public CCC;\n', '    \n', '    event tokensBought(address _addr, uint _amount);\n', '    constructor() public{\n', '    phaseOneEnd = now + 3 days;\n', '    phaseTwoEnd = now + 6 days;\n', '    phaseThreeEnd = now + 29 days;\n', '    CCC = token(0x4446B2551d7aCdD1f606Ef3Eed9a9af913AE3e51);\n', '    developer = 0x215c6e1FaFa372E16CfD3cA7D223fc7856018793;\n', '    company = 0x49BAf97cc2DF6491407AE91a752e6198BC109339;\n', '    kelly = 0x36e8A1C0360B733d6a4ce57a721Ccf702d4008dE;\n', '    marketing = 0x4DbADf088EEBc22e9A679f4036877B1F7Ce71e4f;\n', '    }\n', '    \n', '    function() payable public{\n', '        require(msg.value >= 0.3 ether);\n', '        require(now < phaseThreeEnd);\n', '        uint tokens;\n', '        if (now <= phaseOneEnd) {\n', '            tokens = msg.value * 6280;\n', '        } else if (now > phaseOneEnd && now <= phaseTwoEnd) {\n', '            tokens = msg.value * 6280;\n', '        }else if( now > phaseTwoEnd && now <= phaseThreeEnd){\n', '            tokens = msg.value * 6280;\n', '        }\n', '        CCC.transfer(msg.sender, tokens);\n', '        emit tokensBought(msg.sender, tokens);\n', '    }\n', '    \n', '    function safeWithdrawal() public onlyOwner {\n', '        require(now >= phaseThreeEnd);\n', '        uint amount = address(this).balance;\n', '        uint devamount = amount/uint(100);\n', '        uint devamtFinal = devamount*5;\n', '        uint marketamtFinal = devamount*5;\n', '        uint kellyamtFinal = devamount*5;\n', '        uint companyamtFinal = devamount*85;\n', '        developer.transfer(devamtFinal);\n', '        marketing.transfer(marketamtFinal);\n', '        company.transfer(companyamtFinal);\n', '        kelly.transfer(kellyamtFinal);\n', '\n', '        \n', '    }\n', '    \n', '\n', '    function withdrawTokens() public onlyOwner{\n', '        require(now >= phaseThreeEnd);\n', '        uint Ownerbalance = CCC.balanceOf(this);\n', '    \tCCC.transfer(owner, Ownerbalance);\n', '    \temit tokensCalledBack(Ownerbalance);\n', '\n', '    }\n', '    \n', '}']
['pragma solidity ^0.4.0;\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function safeAdd(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', 'interface token {\n', '    function transfer(address to, uint tokens) external;\n', '    function balanceOf(address tokenOwner) external returns(uint balance);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '    event tokensBought(address _addr, uint _amount);\n', '    event tokensCalledBack(uint _amount);\n', '    event privateSaleEnded(uint _time);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        owner = _newOwner;\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract Crowdsale is Owned{\n', '    using SafeMath for uint;\n', '    uint public endDate;\n', '    address public developer;\n', '    address public marketing;\n', '    address public kelly;\n', '    address public company;\n', '    uint public phaseOneEnd;\n', '    uint public phaseTwoEnd;\n', '    uint public phaseThreeEnd;\n', '    token public CCC;\n', '    \n', '    event tokensBought(address _addr, uint _amount);\n', '    constructor() public{\n', '    phaseOneEnd = now + 3 days;\n', '    phaseTwoEnd = now + 6 days;\n', '    phaseThreeEnd = now + 29 days;\n', '    CCC = token(0x4446B2551d7aCdD1f606Ef3Eed9a9af913AE3e51);\n', '    developer = 0x215c6e1FaFa372E16CfD3cA7D223fc7856018793;\n', '    company = 0x49BAf97cc2DF6491407AE91a752e6198BC109339;\n', '    kelly = 0x36e8A1C0360B733d6a4ce57a721Ccf702d4008dE;\n', '    marketing = 0x4DbADf088EEBc22e9A679f4036877B1F7Ce71e4f;\n', '    }\n', '    \n', '    function() payable public{\n', '        require(msg.value >= 0.3 ether);\n', '        require(now < phaseThreeEnd);\n', '        uint tokens;\n', '        if (now <= phaseOneEnd) {\n', '            tokens = msg.value * 6280;\n', '        } else if (now > phaseOneEnd && now <= phaseTwoEnd) {\n', '            tokens = msg.value * 6280;\n', '        }else if( now > phaseTwoEnd && now <= phaseThreeEnd){\n', '            tokens = msg.value * 6280;\n', '        }\n', '        CCC.transfer(msg.sender, tokens);\n', '        emit tokensBought(msg.sender, tokens);\n', '    }\n', '    \n', '    function safeWithdrawal() public onlyOwner {\n', '        require(now >= phaseThreeEnd);\n', '        uint amount = address(this).balance;\n', '        uint devamount = amount/uint(100);\n', '        uint devamtFinal = devamount*5;\n', '        uint marketamtFinal = devamount*5;\n', '        uint kellyamtFinal = devamount*5;\n', '        uint companyamtFinal = devamount*85;\n', '        developer.transfer(devamtFinal);\n', '        marketing.transfer(marketamtFinal);\n', '        company.transfer(companyamtFinal);\n', '        kelly.transfer(kellyamtFinal);\n', '\n', '        \n', '    }\n', '    \n', '\n', '    function withdrawTokens() public onlyOwner{\n', '        require(now >= phaseThreeEnd);\n', '        uint Ownerbalance = CCC.balanceOf(this);\n', '    \tCCC.transfer(owner, Ownerbalance);\n', '    \temit tokensCalledBack(Ownerbalance);\n', '\n', '    }\n', '    \n', '}']
