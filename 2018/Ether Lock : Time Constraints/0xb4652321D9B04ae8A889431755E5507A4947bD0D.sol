['pragma solidity 0.4.21;\n', '\n', '/// @title SafeMath\n', '/// @dev Math operations with safety checks that throw on error\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/// @title Kakushin Solidity Token\n', '/// @author PriusLabs\n', 'contract KakushinToken {\n', '   \n', '   using SafeMath for uint256 ;\n', '   \n', '    string public name ;\n', '    string public symbol ;\n', '    uint8 public decimals = 18;\n', '   \n', '   \n', '    uint256 public totalSupply = 2400000000;\n', '    \n', '    address public constant companyWallet = 0xd9240Ac690F7764fC53e151863b5f79105c50E3d ;\n', '    \n', '    address public constant founder1Wallet = 0xcE13BC6f7168B309584b70Ae996ec6168c296427 ;    \n', '    \n', '    address public constant founder2Wallet = 0xa520044662761ad83b8cfA8Cd63c156F64104B9E ;    \n', '    \n', '    address public constant founder3Wallet = 0xF9e2d35b4C23446929330EA327895D754E17784D ;    \n', '    \n', '    address public constant founder4Wallet = 0xcc3870Ec7Cc86Cd3f267f17c5d78467d49B9FA2b ;   \n', '    \n', '    address public constant owner1 = 0x9c27c3465a7dE3E653417234A60a51C51C9E978e;\n', '\t\n', '\taddress public constant owner2 = 0x36F7f9cD70b52f4b2b8Ca861fAa4A44D8C1E4Be3;   //Address of Admin Wallet---- //\n', '    \n', '    uint startDate;\n', '    \n', '    uint endDate = 1530403199 ;\n', '    \n', '    \n', '\n', '  \n', '  \n', '    mapping (address => uint256) public balances;\n', '\n', '   \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /// @notice Function that implements SafeMath for exponent operations\n', '    /// @param a Value to be raised to the power of @param b\n', '    /// @return uint256 result of the operation\n', '    function safeExp(uint256 a, uint256 b) private pure returns(uint256){\n', '        if(a == 0) { return 0; }\n', '        uint256 c = a;\n', '        uint i;\n', '        if(b == 0) {\n', '            c = 1;\n', '        }\n', '        else if(b < 0) {\n', '            for(i = 0; i >= b; i--) {\n', '                c = c.div(a);\n', '            }\n', '        }\n', '        else {\n', '            for(i = 1; i < b; i++) {\n', '                c = c.mul(a);\n', '            }\n', '        }\n', '        return c;\n', '    }\n', '    \n', '   /// @dev constructor function for contract, initializes the totalSupply for the owners, sets name and symbol for smart contract token\n', '    function KakushinToken() public {\n', '        totalSupply = totalSupply.mul(safeExp(10, uint256(decimals)));  // Update total supply with the decimal amount\n', '                      // Give the creator all initial tokens\n', '        name = "KAKUSHIN";                                   // Set the name for display purposes\n', '        symbol = "KKN";                               // Set the symbol for display purposes\n', '        balances[owner1] = uint256(59).mul(totalSupply.div(100));\n', '        balances[companyWallet] = uint256(28).mul(totalSupply.div(100));  \n', '        balances[founder1Wallet] = uint256(62400000).mul(safeExp(10, uint256(decimals)));\n', '        balances[founder2Wallet] = uint256(62400000).mul(safeExp(10, uint256(decimals)));\n', '        balances[founder3Wallet] = uint256(124800000).mul(safeExp(10, uint256(decimals)));\n', '        balances[founder4Wallet] = uint256(62400000).mul(safeExp(10, uint256(decimals)));\n', '        startDate = now;\n', '        \n', '    }\n', '    \n', '    /// @notice send `value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to , uint value) public returns (bool success){\n', '        \n', '        require(_to != 0x0);\n', '        \n', '        require(balances[msg.sender] >= value);\n', '        \n', '        startDate = now ;\n', '        \n', '       \n', '        if(msg.sender == owner1 || msg.sender == owner2){\n', '            \n', '            balances[_to] = balances[_to].add(value); \n', '            balances[msg.sender] = balances[msg.sender].sub(value);\n', '            \n', '        }else if(startDate > endDate){\n', '                  \n', '            balances[_to] = balances[_to].add(value) ; \n', '            balances[msg.sender] = balances[msg.sender].sub(value) ; \n', '                  \n', '        }\n', '              \n', '        emit Transfer(msg.sender, _to, value);\n', '              \n', '        return true ;\n', '        \n', '    }\n', '    \n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    /// @notice Checks sale is greater than end date\n', '    /// @return Boolean result of the checking\n', '    function checkSale() public view returns(bool success) {\n', '        \n', '        \n', '        if(startDate > endDate){\n', '            return true ;\n', '        } else {\n', '            return false;\n', '        }\n', '        \n', '    }\n', '\n', '  \n', '    \n', '}']