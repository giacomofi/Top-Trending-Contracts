['pragma solidity 0.4.22;\n', '/**\n', ' * Zigilua token contract\n', ' *\n', ' * Solidity 0.4.22 compiler\n', ' *\n', ' * @package   Zigilua\n', ' * @author    Roger Sei <https://www.linkedin.com/in/roger-sei/>\n', ' * @copyright 2018 Roger Sei\n', ' * @license   http://www.gnu.org/licenses/gpl.txt GPL\n', ' * @version   Release: GIT: 1\n', ' *\n', ' * Convention used: PHPCS\n', ' */\n', '\n', '/**\n', ' * ERC20 interface\n', ' *\n', ' * https://en.wikipedia.org/wiki/ERC20\n', ' */\n', 'interface ERC20\n', '{\n', '    function allowance(address _owner, address _spender) external constant returns (uint256 remaining);\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '    function balanceOf(address _owner) external constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n', '    \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '}\n', '\n', '/**\n', ' * Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' * Adapted to 0.4.22 solidity version\n', ' */\n', 'contract StandardToken is ERC20\n', '{\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success)\n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', '        if (!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) {\n', '            revert();\n', '        }\n', '\n', '        return true;\n', '\n', '    }\n', '    \n', '    function balanceOf(address _owner) public constant returns (uint256 balance)\n', '    {\n', '        return balances[_owner];\n', '\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success)\n', '    {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '\n', '        return false;\n', '\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            emit Transfer(_from, _to, _value);\n', '            return true;\n', '        }\n', '\n', '        return false;\n', '\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256 supply) \n', '    {\n', '        return totalSupply;\n', '\n', '    }\n', '    \n', '}\n', '\n', '/**\n', ' * Zigilua contract\n', ' *\n', ' * @author    Roger Sei\n', ' */\n', 'contract Zigilua is StandardToken\n', '{\n', '    string public name;\n', '    uint8 public decimals;\n', '    string public symbol;\n', '    string public version = &#39;Z1&#39;;\n', '    address public zigWallet;\n', '\n', '    uint256 private _usd;\n', '    uint8 private _crrStage;\n', '    uint private _minUSDrequired;\n', '    uint8[] public ZIGS_BY_STAGE = [\n', '                                    1,\n', '                                    1,\n', '                                    3,\n', '                                    5\n', '                                   ];\n', '\n', '\n', '    /**\n', '     * Constructor for Zigilua\n', '     */\n', '    function Zigilua() public\n', '    {\n', '        balances[msg.sender] = 79700000000;\n', '        totalSupply          = 79700000000;\n', '        name                 = "ZigiLua";\n', '        decimals             = 0;\n', '        symbol               = "ZGL";\n', '        zigWallet            = msg.sender;\n', '\n', '        _crrStage            = 0;\n', '        _minUSDrequired      = 200;\n', '        _usd                 = 50000;\n', '    }\n', '\n', '\n', '    /**\n', '     * Payable fallback\n', '     *\n', '     * @return void\n', '     */\n', '    function () public payable\n', '    {\n', '        buy(msg.value);\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * Allows to buy zigs (ZGL) from DApps\n', '     *\n', '     * @param wai {uint256} Desired amount, in wei\n', '     *\n', '     * @return {uint256[]} [wai, _usd, amount, owner balance, user balance] Useful for debugging purposes\n', '     */\n', '    function buy(uint256 wai) public payable returns (uint256[5])\n', '    {\n', '        uint256 amount = ((wai * _usd * 10 * ZIGS_BY_STAGE[_crrStage]) / (1e18));\n', '\n', '        require(balances[zigWallet] >= amount);\n', '        require(amount >= (2000 * (1 / ZIGS_BY_STAGE[_crrStage])));\n', '\n', '        balances[zigWallet]  = (balances[zigWallet] - amount);\n', '        balances[msg.sender] = (balances[msg.sender] + amount);\n', '\n', '        emit Transfer(zigWallet, msg.sender, amount);\n', '\n', '        zigWallet.transfer(msg.value);\n', '\n', '        return ([wai, _usd, amount, balances[zigWallet], balances[msg.sender]]);\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * Returns the owner balance, in zigs\n', '     *\n', '     * @return {uint256} Current owner balance\n', '     */\n', '    function getBalanceFromOwner() public view returns (uint256)\n', '    {\n', '        return balances[zigWallet];\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * Returns a balance, in zigs, from a given address, identified by from\n', '     *\n', '     * @param from {address} Any given address\n', '     *\n', '     * @return {uint256} Current user balance\n', '     */\n', '    function getBalanceFrom(address from) public view returns (uint256)\n', '    {\n', '        return balances[from];\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * Gets the current dollar rate, wihtout decimal\n', '     *\n', '     * @return {uint256} Returns the current dollar rate used to buy zigs\n', '     */\n', '    function getUSD() public view returns (uint256)\n', '    {\n', '        return _usd;\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * Returns current ICO stage\n', '     *\n', '     * @return {uint256} \n', '     */\n', '    function getStage() public view returns (uint256)\n', '    {\n', '        return _crrStage;\n', '\n', '    }\n', '    \n', '    /**\n', '     * Defines the ICO stage, allowed to be changed only by Zigilua (owner)\n', '     *\n', '     * @param stage {uint8} Defines the ICO stage\n', '     *\n', '     * @return {bool} True if successful\n', '     */\n', '    function setStage(uint8 stage) public returns (bool)\n', '    {\n', '        require(msg.sender == zigWallet);\n', '\n', '        _crrStage = stage;\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * Allows Zigilua to set the dollar rate\n', '     *\n', '     * @param usd {uint256} Dollar rate, in ethereum, without decimal\n', '     *\n', '     * @return {bool} True if successful\n', '     */\n', '    function setUSD(uint256 usd) public returns (bool)\n', '    {\n', '        require(msg.sender == zigWallet);\n', '        require(usd > 0);\n', '        _usd = usd;\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '}']