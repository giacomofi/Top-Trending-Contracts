['pragma solidity ^0.4.24;\n', '\n', '// File: contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * Copyright (c) 2016 Smart Contract Solutions, Inc.\n', ' * Released under the MIT license.\n', ' * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/LICENSE\n', '*/\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/token/ERC20/ERC20Interface.sol\n', '\n', '/**\n', ' * Copyright (c) 2016 Smart Contract Solutions, Inc.\n', ' * Released under the MIT license.\n', ' * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/LICENSE\n', '*/\n', '\n', '/**\n', ' * @title \n', ' * @dev \n', ' */\n', 'contract ERC20Interface {\n', '  function totalSupply() external view returns (uint256);\n', '  function balanceOf(address who) external view returns (uint256);\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '  function approve(address spender, uint256 value) external returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/DAICOVO/TimeLockPool.sol\n', '\n', '/// @title A token-pool that locks deposited tokens until their date of maturity.\n', '/// @author ICOVO AG\n', '/// @dev It regards the address "0x0" as ETH when you speficy a token.\n', 'contract TimeLockPool{\n', '    using SafeMath for uint256;\n', '\n', '    struct LockedBalance {\n', '      uint256 balance;\n', '      uint256 releaseTime;\n', '    }\n', '\n', '    /*\n', '      structure: lockedBalnces[owner][token] = LockedBalance(balance, releaseTime);\n', "      token address = '0x0' stands for ETH (unit = wei)\n", '    */\n', '    mapping (address => mapping (address => LockedBalance[])) public lockedBalances;\n', '\n', '    event Deposit(\n', '        address indexed owner,\n', '        address indexed tokenAddr,\n', '        uint256 amount,\n', '        uint256 releaseTime\n', '    );\n', '\n', '    event Withdraw(\n', '        address indexed owner,\n', '        address indexed tokenAddr,\n', '        uint256 amount\n', '    );\n', '\n', '    /// @dev Constructor. \n', '    /// @return \n', '    constructor() public {}\n', '\n', '    /// @dev Deposit tokens to specific account with time-lock.\n', '    /// @param tokenAddr The contract address of a ERC20/ERC223 token.\n', '    /// @param account The owner of deposited tokens.\n', '    /// @param amount Amount to deposit.\n', '    /// @param releaseTime Time-lock period.\n', '    /// @return True if it is successful, revert otherwise.\n', '    function depositERC20 (\n', '        address tokenAddr,\n', '        address account,\n', '        uint256 amount,\n', '        uint256 releaseTime\n', '    ) external returns (bool) {\n', '        require(account != address(0x0));\n', '        require(tokenAddr != 0x0);\n', '        require(msg.value == 0);\n', '        require(amount > 0);\n', '        require(ERC20Interface(tokenAddr).transferFrom(msg.sender, this, amount));\n', '\n', '        lockedBalances[account][tokenAddr].push(LockedBalance(amount, releaseTime));\n', '        emit Deposit(account, tokenAddr, amount, releaseTime);\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @dev Deposit ETH to specific account with time-lock.\n', '    /// @param account The owner of deposited tokens.\n', '    /// @param releaseTime Timestamp to release the fund.\n', '    /// @return True if it is successful, revert otherwise.\n', '    function depositETH (\n', '        address account,\n', '        uint256 releaseTime\n', '    ) external payable returns (bool) {\n', '        require(account != address(0x0));\n', '        address tokenAddr = address(0x0);\n', '        uint256 amount = msg.value;\n', '        require(amount > 0);\n', '\n', '        lockedBalances[account][tokenAddr].push(LockedBalance(amount, releaseTime));\n', '        emit Deposit(account, tokenAddr, amount, releaseTime);\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @dev Release the available balance of an account.\n', '    /// @param account An account to receive tokens.\n', '    /// @param tokenAddr An address of ERC20/ERC223 token.\n', '    /// @param max_count Max number of records to withdraw.\n', '    /// @return True if it is successful, revert otherwise.\n', '    function withdraw (address account, address tokenAddr, uint256 max_count) external returns (bool) {\n', '        require(account != address(0x0));\n', '\n', '        uint256 release_amount = 0;\n', '        for (uint256 i = 0; i < lockedBalances[account][tokenAddr].length && i < max_count; i++) {\n', '            if (lockedBalances[account][tokenAddr][i].balance > 0 &&\n', '                lockedBalances[account][tokenAddr][i].releaseTime <= block.timestamp) {\n', '\n', '                release_amount = release_amount.add(lockedBalances[account][tokenAddr][i].balance);\n', '                lockedBalances[account][tokenAddr][i].balance = 0;\n', '            }\n', '        }\n', '\n', '        require(release_amount > 0);\n', '\n', '        if (tokenAddr == 0x0) {\n', '            if (!account.send(release_amount)) {\n', '                revert();\n', '            }\n', '            emit Withdraw(account, tokenAddr, release_amount);\n', '            return true;\n', '        } else {\n', '            if (!ERC20Interface(tokenAddr).transfer(account, release_amount)) {\n', '                revert();\n', '            }\n', '            emit Withdraw(account, tokenAddr, release_amount);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns total amount of balances which already passed release time.\n', '    /// @param account An account to receive tokens.\n', '    /// @param tokenAddr An address of ERC20/ERC223 token.\n', '    /// @return Available balance of specified token.\n', '    function getAvailableBalanceOf (address account, address tokenAddr) \n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        require(account != address(0x0));\n', '\n', '        uint256 balance = 0;\n', '        for(uint256 i = 0; i < lockedBalances[account][tokenAddr].length; i++) {\n', '            if (lockedBalances[account][tokenAddr][i].releaseTime <= block.timestamp) {\n', '                balance = balance.add(lockedBalances[account][tokenAddr][i].balance);\n', '            }\n', '        }\n', '        return balance;\n', '    }\n', '\n', '    /// @dev Returns total amount of balances which are still locked.\n', '    /// @param account An account to receive tokens.\n', '    /// @param tokenAddr An address of ERC20/ERC223 token.\n', '    /// @return Locked balance of specified token.\n', '    function getLockedBalanceOf (address account, address tokenAddr)\n', '        external\n', '        view\n', '        returns (uint256) \n', '    {\n', '        require(account != address(0x0));\n', '\n', '        uint256 balance = 0;\n', '        for(uint256 i = 0; i < lockedBalances[account][tokenAddr].length; i++) {\n', '            if(lockedBalances[account][tokenAddr][i].releaseTime > block.timestamp) {\n', '                balance = balance.add(lockedBalances[account][tokenAddr][i].balance);\n', '            }\n', '        }\n', '        return balance;\n', '    }\n', '\n', '    /// @dev Returns next release time of locked balances.\n', '    /// @param account An account to receive tokens.\n', '    /// @param tokenAddr An address of ERC20/ERC223 token.\n', '    /// @return Timestamp of next release.\n', '    function getNextReleaseTimeOf (address account, address tokenAddr)\n', '        external\n', '        view\n', '        returns (uint256) \n', '    {\n', '        require(account != address(0x0));\n', '\n', '        uint256 nextRelease = 2**256 - 1;\n', '        for (uint256 i = 0; i < lockedBalances[account][tokenAddr].length; i++) {\n', '            if (lockedBalances[account][tokenAddr][i].releaseTime > block.timestamp &&\n', '               lockedBalances[account][tokenAddr][i].releaseTime < nextRelease) {\n', '\n', '                nextRelease = lockedBalances[account][tokenAddr][i].releaseTime;\n', '            }\n', '        }\n', '\n', '        /* returns 0 if there are no more locked balances. */\n', '        if (nextRelease == 2**256 - 1) {\n', '            nextRelease = 0;\n', '        }\n', '        return nextRelease;\n', '    }\n', '}']