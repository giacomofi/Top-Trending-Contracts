['pragma solidity ^0.4.17;\n', '\n', '//SmartVows Marriage Smart Contract for Partner 1 and Partner 2\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract Util{\n', '\n', '    function Util() public{}\n', '\n', '    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string){\n', '        bytes memory _ba = bytes(_a);\n', '        bytes memory _bb = bytes(_b);\n', '        bytes memory _bc = bytes(_c);\n', '        bytes memory _bd = bytes(_d);\n', '        bytes memory _be = bytes(_e);\n', '        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n', '        bytes memory babcde = bytes(abcde);\n', '        uint k = 0;\n', '        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n', '        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n', '        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n', '        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n', '        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n', '        return string(babcde);\n', '    }\n', '\n', '    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n', '        return strConcat(_a, _b, _c, _d, "");\n', '    }\n', '\n', '    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\n', '        return strConcat(_a, _b, _c, "", "");\n', '    }\n', '\n', '    function strConcat(string _a, string _b) internal pure returns (string) {\n', '        return strConcat(_a, _b, "", "", "");\n', '    }\n', '\n', '    function toString(address x) internal pure returns (string) {\n', '        bytes memory b = new bytes(20);\n', '        for (uint i = 0; i < 20; i++)\n', '        b[i] = byte(uint8(uint(x) / (2**(8*(19 - i)))));\n', '        return string(b);\n', '    }\n', '}\n', '\n', 'contract SmartVows is Ownable, Util {\n', '\n', '    // Names of marriage partners\n', '    string public partner1_name;\n', '    string public partner2_name;\n', '    \n', '    // Partners&#39; eth address\n', '    address public partner1_address;\n', '    address public partner2_address;\n', '    \n', '    // Partners Vows\n', '    string public partner1_vows;\n', '    string public partner2_vows;\n', '\n', '    // Marriage Date\n', '    string public marriageDate;\n', '\n', '    //Marital Status\n', '    string public maritalStatus;\n', '\n', '    // Couple Image Hash\n', '    string public coupleImageIPFShash;\n', '\n', '    // Marriage License Image Hash\n', '    string public marriageLicenceImageIPFShash;\n', '\n', '    // prenup Text\n', '    string public prenupAgreement;\n', '    \n', '    //Last Will and Testaments\n', '    string public partner1_will;\n', '    string public partner2_will;\n', '\n', '    // Partners Signed Marriage Contract\n', '    bool public partner1_signed;\n', '    bool public partner2_signed;\n', '    \n', '    // Partners Voted to update the prenup\n', '    bool public partner1_voted_update_prenup;\n', '    bool public partner2_voted_update_prenup;\n', '    \n', '    //Partners Voted to update the marriage status\n', '    bool public partner1_voted_update_marriage_status;\n', '    bool public partner2_voted_update_marriage_status;\n', '    \n', '    // Did both partners signed the contract\n', '     bool public is_signed;\n', '    \n', '    // Officiant\n', '    string public officiant;\n', '\n', '    // Witnesses\n', '    string public witnesses;\n', '\n', '    // Location of marriage\n', '    string public location;\n', '    \n', '    Event[] public lifeEvents;\n', '\n', '    struct Event {\n', '        uint date;\n', '        string name;\n', '        string description;\n', '        string mesg;\n', '    }\n', '    \n', '    uint public eventcount; \n', '\n', '    // Declare Life event structure\n', '    event LifeEvent(string name, string description, string mesg);\n', '\n', '    contractEvent[] public contractEvents;\n', '\n', '    struct contractEvent {\n', '        uint ce_date;\n', '        string ce_description;\n', '        string ce_mesg;\n', '    }\n', '    \n', '    uint public contracteventcount; \n', '\n', '    // Declare Contract event structure\n', '    event ContractEvent(string ce_description, string ce_mesg);\n', '\n', '    function SmartVows(string _partner1, address _partner1_address, string _partner2, address _partner2_address, string _marriageDate, string _maritalStatus, string _officiant, string _witnesses, string _location, string _coupleImageIPFShash, string _marriageLicenceImageIPFShash) public{        \n', '        partner1_name = _partner1;\n', '        partner2_name = _partner2;  \n', '        partner1_address=_partner1_address;\n', '        partner2_address=_partner2_address;\n', '        marriageDate =_marriageDate;\n', '        maritalStatus = _maritalStatus;\n', '        officiant=_officiant;\n', '        witnesses=_witnesses;\n', '        location=_location;\n', '        coupleImageIPFShash = _coupleImageIPFShash;\n', '        marriageLicenceImageIPFShash = _marriageLicenceImageIPFShash;\n', '\n', '        //Record contract creation in events\n', '        saveContractEvent("Blockchain marriage smart contract created","Marriage smart contract added to the blockchain");\n', '        \n', '    }\n', '\n', '    // Add Life event, either partner can update\n', '    function addLifeEvent(string name, string description, string mesg) public{\n', '        require(msg.sender == owner || msg.sender == partner1_address || msg.sender == partner2_address);\n', '        saveLifeEvent(name, description, mesg);\n', '    }\n', '\n', '    function saveLifeEvent(string name, string description, string mesg) private {\n', '        lifeEvents.push(Event(block.timestamp, name, description, mesg));\n', '        LifeEvent(name, description, mesg);\n', '        eventcount++;\n', '    }\n', '    \n', '    \n', '    function saveContractEvent(string description, string mesg) private {\n', '        contractEvents.push(contractEvent(block.timestamp, description, mesg));\n', '        ContractEvent(description, mesg);\n', '        contracteventcount++;\n', '    }\n', '\n', '    \n', '    // Update partner 1 vows only once\n', '    function updatePartner1_vows(string _partner1_vows) public {\n', '        require((msg.sender == owner || msg.sender == partner1_address) && (bytes(partner1_vows).length == 0));\n', '        partner1_vows = _partner1_vows;\n', '    }\n', '\n', '    // Update partner 2 vows only once\n', '    function updatePartner2_vows(string _partner2_vows) public {\n', '        require((msg.sender == owner || msg.sender == partner2_address) && (bytes(partner2_vows).length == 0));\n', '        partner2_vows = _partner2_vows;\n', '    }\n', '\n', '    // Update Marriage status only if both partners have previously voted to update the prenup\n', '    function updateMaritalStatus(string _maritalStatus) public {\n', '        require((msg.sender == owner || msg.sender == partner1_address || msg.sender == partner2_address) && (partner1_voted_update_marriage_status == true)&&(partner2_voted_update_marriage_status == true));\n', '        saveContractEvent("Marital status updated", strConcat("Marital status changed from ", maritalStatus , " to ", _maritalStatus));\n', '        maritalStatus = _maritalStatus;\n', '        partner1_voted_update_marriage_status = false;\n', '        partner2_voted_update_marriage_status = false;\n', '    }\n', '\n', '    // Partners can sign the contract\n', '    function sign() public {\n', '        require(msg.sender == partner1_address || msg.sender == partner2_address);\n', '        if(msg.sender == partner1_address){\n', '            partner1_signed = true;\n', '            saveContractEvent("Marriage signed", "Smart Contract signed by Partner 1");\n', '        }else {\n', '            partner2_signed = true;\n', '            saveContractEvent("Marriage signed", "Smart Contract signed by Partner 2");\n', '        }\n', '        \n', '        if(partner1_signed && partner2_signed){// if both signed then make the contract as signed\n', '            is_signed = true;\n', '        }\n', '    }\n', '    \n', '    //Function to vote to allow for updating marital status, both partners must vote to allow update\n', '        function voteToUpdateMaritalStatus() public {\n', '        if(msg.sender == partner1_address){\n', '            partner1_voted_update_marriage_status = true;\n', '            saveContractEvent("Vote - Change Marital Status", "Partner 1 voted to updated Marital Status");\n', '        }\n', '        if(msg.sender == partner2_address){\n', '            partner2_voted_update_marriage_status = true;\n', '            saveContractEvent("Vote - Change Marital Status", "Partner 2 voted to updated Marital Status");\n', '        }\n', '    }\n', '    \n', '    //Function to vote to allow for updating prenup, both partners must vote true to allow update\n', '    function voteToUpdatePrenup() public {\n', '        if(msg.sender == partner1_address){\n', '            partner1_voted_update_prenup = true;\n', '            saveContractEvent("Vote - Update Prenup", "Partner 1 voted to updated Prenuptial Aggreement");\n', '        }\n', '        if(msg.sender == partner2_address){\n', '            partner2_voted_update_prenup = true;\n', '            saveContractEvent("Vote - Update Prenup", "Partner 2 voted to updated Prenuptial Aggreement");\n', '        }\n', '    }\n', '\n', '    // Update coupleImage hash, either partner can update\n', '    function updateCoupleImageIPFShash(string _coupleImageIPFShash) public{\n', '        require(msg.sender == owner || msg.sender == partner1_address || msg.sender == partner2_address);\n', '        coupleImageIPFShash = _coupleImageIPFShash;\n', '    }\n', '\n', '    // Update marriage licence image hash, either partner can update\n', '    function updateMarriageLicenceImageIPFShash(string _marriageLicenceImageIPFShash) public{\n', '        require(msg.sender == owner || msg.sender == partner1_address || msg.sender == partner2_address);\n', '        marriageLicenceImageIPFShash = _marriageLicenceImageIPFShash;\n', '    }\n', '\n', '    // Update prenup text, but only if both partners have previously agreed to update the prenup\n', '    function updatePrenup(string _prenupAgreement) public{\n', '        require((msg.sender == owner || msg.sender == partner1_address || msg.sender == partner2_address) && (partner1_voted_update_prenup == true)&&(partner2_voted_update_prenup == true));\n', '        prenupAgreement = _prenupAgreement;\n', '        saveContractEvent("Update - Prenup", "Prenuptial Agreement Updated");\n', '        partner1_voted_update_prenup = false;\n', '        partner2_voted_update_prenup = false;\n', '    }\n', '     \n', '    // Update partner 1 will, only partner 1 can update\n', '    function updatePartner1_will(string _partner1_will) public {\n', '        require(msg.sender == partner1_address);\n', '        partner1_will = _partner1_will;\n', '        saveContractEvent("Update - Will", "Partner 1 Will Updated");\n', '    }\n', '  \n', '    // Update partner 2 will, only partner 2 can update\n', '    function updatePartner2_will(string _partner2_will) public {\n', '        require(msg.sender == partner2_address);\n', '        partner2_will = _partner2_will;\n', '        saveContractEvent("Update - Will", "Partner 2 Will Updated");\n', '    }\n', '    \n', '}']