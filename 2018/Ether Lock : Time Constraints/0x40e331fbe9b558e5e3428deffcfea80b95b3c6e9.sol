['pragma solidity ^0.4.25;\n', '\n', '/*\n', '* 911ETH - Financial Ambulance\n', '*\n', '* INVEST AND GAIN UP TO 9.11% DAILY\n', '*\n', '* For detailed information go to 911eth.finance\n', '*/\n', '\n', 'contract ETH911 {\n', '\n', '    using SafeMath for uint;\n', '    //Total deposit of every participant\n', '    mapping(address => uint) public balance;\n', '    //Time since last deposit\n', '    mapping(address => uint) public time;\n', '    //Current withdrawal amount\n', '    mapping(address => uint) public percentWithdraw;\n', '    //Overall withdrawal amount\n', '    mapping(address => uint) public allPercentWithdraw;\n', '    //interest rates of participants\n', '    mapping(address => uint) public interestRate;\n', '    //bonus rates of participants\n', '    mapping(address => uint) public bonusRate;\n', '    //checks whether participant has referrer or not\n', '    mapping (address => uint) public referrers;\n', '    //minimal amount of time since payment to request withdraw\n', '    uint public stepTime = 1 hours;\n', '    //Total count of participants\n', '    uint public countOfInvestors = 0;\n', '    //Advertising address\n', '    address public advertising = 0x6bD679Be133eD01262E206768734Ba20823fCa43;\n', '    //Address for support service\n', '    address public support = 0xDDd7eC52FAdB9f3673220e88EC72D0783E2E9d0f;\n', '    //Overall project(support and ads) rate = 9.11%\n', '    uint projectPercent = 911;\n', '    //Data of DATA field\n', '    bytes msg_data;\n', '\n', '    event Invest(address investor, uint256 amount);\n', '    event Withdraw(address investor, uint256 amount);\n', '\n', '    modifier userExist() {\n', '        require(balance[msg.sender] > 0, "Address not found");\n', '        _;\n', '    }\n', '    \n', '    //Sending payout by request\n', '\n', '    function collectPercent() userExist internal {\n', '            uint payout = payoutAmount();\n', '            if (payout > address(this).balance) \n', '                payout = address(this).balance;\n', '            percentWithdraw[msg.sender] = percentWithdraw[msg.sender].add(payout);\n', '            allPercentWithdraw[msg.sender] = allPercentWithdraw[msg.sender].add(payout);\n', '            msg.sender.transfer(payout);\n', '            emit Withdraw(msg.sender, payout);\n', '    }\n', '    \n', '    //Setting interest rate for participant depending on overall count of participants\n', '    \n', '    function setInterestRate() private {\n', '        if (interestRate[msg.sender]<100)\n', '            if (countOfInvestors <= 100)\n', '                interestRate[msg.sender]=911;\n', '            else if (countOfInvestors > 100 && countOfInvestors <= 500)\n', '                interestRate[msg.sender]=611;\n', '            else if (countOfInvestors > 500) \n', '                interestRate[msg.sender]=311;\n', '    }\n', '    \n', '    //Setting bonus rate for participant depending on overall count of participants\n', '    \n', '    function setBonusRate() private {\n', '        if (countOfInvestors <= 100)\n', '            bonusRate[msg.sender]=31;\n', '        else if (countOfInvestors > 100 && countOfInvestors <= 500)\n', '            bonusRate[msg.sender]=61;\n', '        else if (countOfInvestors > 500 && countOfInvestors <= 1000) \n', '            bonusRate[msg.sender]=91;\n', '    }\n', '    \n', '    //Sending bonuses to referrers and referrals\n', '    \n', '    function sendRefBonuses() private{\n', '        if(msg_data.length == 20 && referrers[msg.sender] == 0) {\n', '            address referrer = bytesToAddress(msg_data);\n', '            if(referrer != msg.sender && balance[referrer]>0){\n', '                referrers[msg.sender] = 1;\n', '                uint bonus = msg.value.mul(311).div(10000);\n', '                referrer.transfer(bonus); \n', '                msg.sender.transfer(bonus);\n', '            }\n', '        }    \n', '    }\n', '    \n', '    //Transmits bytes to address\n', '    \n', '    function bytesToAddress(bytes source) internal pure returns(address) {\n', '        uint result;\n', '        uint mul = 1;\n', '        for(uint i = 20; i > 0; i--) {\n', '            result += uint8(source[i-1])*mul;\n', '            mul = mul*256;\n', '        }\n', '        return address(result);\n', '    }\n', '    \n', '    //Calculating amount of payout\n', '\n', '    function payoutAmount() public view returns(uint256) {\n', '        if ((balance[msg.sender].mul(2)) <= allPercentWithdraw[msg.sender])\n', '            interestRate[msg.sender] = 100;\n', '        uint256 percent = interestRate[msg.sender]; \n', '        uint256 different = now.sub(time[msg.sender]).div(stepTime); \n', '        if (different>264)\n', '            different=different.mul(bonusRate[msg.sender]).div(100).add(different);\n', '        uint256 rate = balance[msg.sender].mul(percent).div(10000);\n', '        uint256 withdrawalAmount = rate.mul(different).div(24).sub(percentWithdraw[msg.sender]);\n', '        return withdrawalAmount;\n', '    }\n', '    \n', '    //Deposit processing\n', '\n', '    function deposit() private {\n', '        if (msg.value > 0) {\n', '            if (balance[msg.sender] == 0){\n', '                countOfInvestors += 1;\n', '                setInterestRate();\n', '                setBonusRate();\n', '            }\n', '            if (balance[msg.sender] > 0 && now > time[msg.sender].add(stepTime)) {\n', '                collectPercent();\n', '                percentWithdraw[msg.sender] = 0;\n', '            }\n', '            balance[msg.sender] = balance[msg.sender].add(msg.value);\n', '            time[msg.sender] = now;\n', '            advertising.transfer(msg.value.mul(projectPercent).div(20000));\n', '            support.transfer(msg.value.mul(projectPercent).div(20000));\n', '            msg_data = bytes(msg.data);\n', '            sendRefBonuses();\n', '            emit Invest(msg.sender, msg.value);\n', '        } else {\n', '            collectPercent();\n', '        }\n', '    }\n', '    \n', '    //Refund by request\n', '    \n', '    function returnDeposit() userExist private {\n', '        if (balance[msg.sender] > allPercentWithdraw[msg.sender]) {\n', '            uint256 payout = balance[msg.sender].sub(allPercentWithdraw[msg.sender]);\n', '            if (payout > address(this).balance) \n', '                payout = address(this).balance;\n', '            interestRate[msg.sender] = 0;    \n', '            bonusRate[msg.sender] = 0;    \n', '            time[msg.sender] = 0;\n', '            percentWithdraw[msg.sender] = 0;\n', '            allPercentWithdraw[msg.sender] = 0;\n', '            balance[msg.sender] = 0;\n', '            referrers[msg.sender] = 0;\n', '            msg.sender.transfer(payout.mul(40).div(100));\n', '            advertising.transfer(payout.mul(25).div(100));\n', '            support.transfer(payout.mul(25).div(100));\n', '        } \n', '    }\n', '    \n', '    function() external payable {\n', '        if (msg.value == 0.000911 ether) {\n', '            returnDeposit();\n', '        } else {\n', '            deposit();\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']