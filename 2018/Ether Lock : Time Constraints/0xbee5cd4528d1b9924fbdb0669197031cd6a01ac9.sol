['pragma solidity ^0.4.25;\n', '\n', '\n', '// File: openzeppelin-solidity\\contracts\\math\\SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '// File: openzeppelin-solidity\\contracts\\token\\ERC20\\SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract SpecialERC20 {\n', '    function transfer(address to, uint256 value) public;\n', '}\n', '\n', 'contract Random {\n', '  function getRandom(bytes32 hash) public view returns (uint);\n', '    \n', '}\n', '\n', 'contract RedEnvelope is Ownable {\n', '    \n', '    using SafeMath for uint;\n', '    using SafeERC20 for ERC20;\n', '    \n', '    Random public random;\n', '    \n', '    struct Info {\n', '        address token;\n', '        address owner;\n', '        uint amount;\n', '        uint count;\n', '        address[] limitAddress;\n', '        bool isRandom;\n', '        bool isSpecialERC20;\n', '        uint expires;\n', '        uint created;\n', '        string desc;\n', '        uint fill;\n', '    }\n', '    \n', '    string public name = "RedEnvelope";\n', '    \n', '    mapping(bytes32 => Info) public infos;\n', '    \n', '    struct SnatchInfo {\n', '        address user;\n', '        uint amount;\n', '        uint time;\n', '    }\n', '    \n', '    mapping(bytes32 => SnatchInfo[]) public snatchInfos;\n', '    \n', '    constructor() public {\n', '        \n', '    }\n', '    \n', '    function setRandom(address _random) public onlyOwner {\n', '        random = Random(_random);\n', '    }\n', '    \n', '    event RedEnvelopeCreated(bytes32 hash);\n', '    \n', '    // 创建红包\n', '    function create(\n', '        bool isSpecialERC20, \n', '        address token, \n', '        uint amount, \n', '        uint count, \n', '        uint expires, \n', '        address[] limitAddress, \n', '        bool isRandom, \n', '        string desc, \n', '        uint nonce\n', '    ) public payable {\n', '        if (token == address(0)) {\n', '            require(msg.value >= amount);\n', '        } else {\n', '            ERC20(token).transferFrom(msg.sender, this, amount);\n', '        }\n', '\n', '        require(amount > 0);\n', '        require(count > 0);\n', '        require(expires > now);\n', '        \n', '        bytes32 hash = sha256(abi.encodePacked(this, isSpecialERC20, token, amount, expires, nonce, msg.sender, now));\n', '        require(infos[hash].created == 0);\n', '        infos[hash] = Info(token, msg.sender, amount, count, limitAddress, isRandom, isSpecialERC20, expires, now, desc, 0);\n', '     \n', '        emit RedEnvelopeCreated(hash);   \n', '    }\n', '    \n', '    event Snatch(bytes32 hash, address user, uint amount, uint time);\n', '\n', '    // 抢红包\n', '    function snatch(bytes32 hash) public {\n', '        Info storage info = infos[hash];\n', '        require(info.created > 0);\n', '        require(info.amount >= info.fill);\n', '        require(info.expires >= now);\n', '        \n', '        \n', '        if (info.limitAddress.length > 0) {\n', '            bool find = false;\n', '            for (uint i = 0; i < info.limitAddress.length; i++) {\n', '                if (info.limitAddress[i] == msg.sender) {\n', '                    find = true;\n', '                    break;\n', '                }\n', '            }\n', '            require(find);\n', '        }\n', '\n', '        SnatchInfo[] storage curSnatchInfos = snatchInfos[hash];\n', '        require(info.count > curSnatchInfos.length);\n', '        for (i = 0; i < curSnatchInfos.length; i++) {\n', '            require (curSnatchInfos[i].user != msg.sender);\n', '        }\n', '        \n', '        uint per = 0;\n', '\n', '        if (info.isRandom) {\n', '            if (curSnatchInfos.length + 1 == info.count) {\n', '                per = info.amount - info.fill;\n', '            } else {\n', '                require(random != address(0));\n', '                per = random.getRandom(hash);\n', '            }\n', '        } else {\n', '            per = info.amount / info.count;\n', '        }\n', '\n', '        snatchInfos[hash].push(SnatchInfo(msg.sender, per, now));\n', '        if (info.token == address(0)) {\n', '            msg.sender.transfer(per);\n', '        } else {\n', '            if (info.isSpecialERC20) {\n', '                SpecialERC20(info.token).transfer(msg.sender, per);\n', '            } else {\n', '                ERC20(info.token).transfer(msg.sender, per);\n', '            }\n', '        }\n', '        info.fill += per;\n', '        \n', '        emit Snatch(hash, msg.sender, per, now);\n', '    }\n', '\n', '    function getRandom() internal view returns (uint) {\n', '        bytes32 hash = sha256(abi.encodePacked(this, now, block.blockhash(block.number - 1)));\n', '        uint val = uint(hash);\n', '        return val % 100;\n', '    }\n', '    \n', '    event RedEnvelopeSendBack(bytes32 hash, address owner, uint amount);\n', '    \n', '    function sendBack(bytes32 hash) public {\n', '        Info storage info = infos[hash];\n', '        require(info.expires < now);\n', '        require(info.fill < info.amount);\n', '        require(info.owner == msg.sender);\n', '        \n', '        uint back = info.amount - info.fill;\n', '        info.fill = info.amount;\n', '        if (info.token == address(0)) {\n', '            msg.sender.transfer(back);\n', '        } else {\n', '            if (info.isSpecialERC20) {\n', '                SpecialERC20(info.token).transfer(msg.sender, back);\n', '            } else {\n', '                ERC20(info.token).transfer(msg.sender, back);\n', '            }\n', '        }\n', '        \n', '        emit RedEnvelopeSendBack(hash, msg.sender, back);\n', '    }\n', '    \n', '    function getInfo(bytes32 hash) public view returns(\n', '        address token, \n', '        address owner, \n', '        uint amount, \n', '        uint count, \n', '        address[] limitAddress, \n', '        bool isRandom, \n', '        bool isSpecialERC20, \n', '        uint expires, \n', '        uint created, \n', '        string desc,\n', '        uint fill\n', '    ) {\n', '        Info storage info = infos[hash];\n', '        return (info.token, \n', '            info.owner, \n', '            info.amount, \n', '            info.count, \n', '            info.limitAddress, \n', '            info.isRandom, \n', '            info.isSpecialERC20, \n', '            info.expires, \n', '            info.created, \n', '            info.desc,\n', '            info.fill\n', '        );\n', '    }\n', '\n', '    function getLightInfo(bytes32 hash) public view returns (\n', '        address token, \n', '        uint amount, \n', '        uint count,  \n', '        uint fill,\n', '        uint userCount\n', '    ) {\n', '        Info storage info = infos[hash];\n', '        SnatchInfo[] storage snatchInfo = snatchInfos[hash];\n', '        return (info.token, \n', '            info.amount, \n', '            info.count, \n', '            info.fill,\n', '            snatchInfo.length\n', '        );\n', '    }\n', '    \n', '    function getSnatchInfo(bytes32 hash) public view returns (address[] user, uint[] amount, uint[] time) {\n', '        SnatchInfo[] storage info = snatchInfos[hash];\n', '        \n', '        address[] memory _user = new address[](info.length);\n', '        uint[] memory _amount = new uint[](info.length);\n', '        uint[] memory _time = new uint[](info.length);\n', '        \n', '        for (uint i = 0; i < info.length; i++) {\n', '            _user[i] = info[i].user;\n', '            _amount[i] = info[i].amount;\n', '            _time[i] = info[i].time;\n', '        }\n', '        \n', '        return (_user, _amount, _time);\n', '    }\n', '    \n', '}']