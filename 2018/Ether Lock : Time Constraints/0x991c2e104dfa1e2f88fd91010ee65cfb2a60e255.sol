['pragma solidity ^0.4.24;\n', '\n', '//  _______  .______        ___      .__   __.  __  ___\n', '// |       \\ |   _  \\      /   \\     |  \\ |  | |  |/  /\n', "// |  .--.  ||  |_)  |    /  ^  \\    |   \\|  | |  '  /\n", '// |  |  |  ||   _  <    /  /_\\  \\   |  . `  | |    <\n', "// |  '--'  ||  |_)  |  /  _____  \\  |  |\\   | |  .  \\\n", '// |_______/ |______/  /__/     \\__\\ |__| \\__| |__|\\__\\\n', '// \n', '// VISIT => http://dbank.money\n', '// \n', '// The first global decentralized bank.\n', '// \n', '// 1. GAIN 4% PER 24 HOURS (every 5900 blocks)\n', '// 2. [FREE BONUS] New users get a 0.1 ETH bonus immediately!\n', '// 3. [REFERRAL BONUS] If you invite your friend to invest, you both get a 10% bonus.\n', '// 4. NO COMMISSION. NO FEES.\n', '// \n', '// Contracts reviewed and approved by pros!\n', '\n', 'contract DBank {\n', '    uint256 dbk_;   // total investment in DBank\n', '    mapping (address => uint256) invested; // address => investment\n', "    mapping (address => uint256) atBlock; // address => user's investment at block\n", '    uint256 public r_ = 4; //profit ratioï¼Œevery 5900 blocks(1 day) you earn 4%\n', '    uint256 public blocks_ = 5900; //blocks in every cycle\n', '\n', '    // Player and referral bonus\n', '    uint256 public pID_;    // total number of players\n', '    mapping (address => uint256) public pIDxAddr_;  // (addr => pID) returns player id by address\n', '    mapping (uint256 => address) public plyr_;   // (pID => data) player data\n', '\n', '    // New User Bonus\n', '    bool public bonusOn_ = true;    // give bonus or not\n', '    uint256 public bonusAmount_ = 1 * 10**16;   // 0.01 ETH\n', '\n', '    // this function called every time anyone sends a transaction to this contract\n', '    function ()\n', '        external \n', '        payable\n', '    {\n', '        buyCore(msg.sender, msg.value);\n', '    }\n', '\n', '    // buy with refferal ID\n', '    function buy(uint256 refID)\n', '        public\n', '        payable\n', '    {\n', '        buyCore(msg.sender, msg.value);\n', '\n', '        // bonus for refferal 10%\n', '        if (plyr_[refID] != address(0)) {\n', '            invested[plyr_[refID]] += msg.value / 10;\n', '        }\n', '\n', '        // bonus for user self 10%\n', '        invested[msg.sender] += msg.value / 10;\n', '    }\n', '\n', '    // Reinvest\n', '    function reinvest()\n', '        public\n', '    {\n', '        if (invested[msg.sender] != 0) {\n', '            uint256 amount = invested[msg.sender] * r_ / 100 * (block.number - atBlock[msg.sender]) / blocks_;\n', '            \n', '            atBlock[msg.sender] = block.number;\n', '            invested[msg.sender] += amount;\n', '        }\n', '    }\n', '\n', '    // === Getters ===\n', '\n', '    // get investment and profit\n', '    // returns: base, profit, playerID, players\n', '    function getMyInvestment()\n', '        public\n', '        view\n', '        returns (uint256, uint256, uint256, uint256)\n', '    {\n', '        uint256 amount = 0;\n', '        if (invested[msg.sender] != 0) {\n', '            amount = invested[msg.sender] * r_ / 100 * (block.number - atBlock[msg.sender]) / blocks_;\n', '        }\n', '        return (invested[msg.sender], amount, pIDxAddr_[msg.sender], pID_);\n', '    }\n', '\n', '    // === Private Methods ===\n', '\n', '    // Core Logic of Buying\n', '    function buyCore(address _addr, uint256 _value)\n', '        private\n', '    {\n', '        // New user check\n', '        bool isNewPlayer = determinePID(_addr);\n', '\n', '        // If you have investment\n', '        if (invested[_addr] != 0) {\n', '            uint256 amount = invested[_addr] * r_ / 100 * (block.number - atBlock[_addr]) / blocks_;\n', '            \n', '            // send calculated amount of ether directly to sender (aka YOU)\n', '            if (amount <= dbk_){\n', '                _addr.transfer(amount);\n', '                dbk_ -= amount;\n', '            }\n', '        }\n', '\n', '        // record block number and invested amount (msg.value) of this transaction\n', '        atBlock[_addr] = block.number;\n', '        invested[_addr] += _value;\n', '        dbk_ += _value;\n', '        \n', "        // if bonus is On and you're a new player, then you'll get bonus\n", '        if (bonusOn_ && isNewPlayer) {\n', '            invested[_addr] += bonusAmount_;\n', '        }\n', '    }\n', '\n', '    // get players ID by address\n', "    // If doesn't exist, then create one.\n", '    // returns: is new player or not\n', '    function determinePID(address _addr)\n', '        private\n', '        returns (bool)\n', '    {\n', '        if (pIDxAddr_[_addr] == 0)\n', '        {\n', '            pID_++;\n', '            pIDxAddr_[_addr] = pID_;\n', '            plyr_[pID_] = _addr;\n', '            \n', '            return (true);  // New Player\n', '        } else {\n', '            return (false);\n', '        }\n', '    }\n', '\n', '    // === Only owner ===\n', '\n', '    address owner;\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        pID_ = 500;\n', '    }\n', '\n', '    // Only owner modifier\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    // Set new user bonus on/off\n', '    function setBonusOn(bool _on)\n', '        public\n', '        onlyOwner()\n', '    {\n', '        bonusOn_ = _on;\n', '    }\n', '\n', '    // Set new user bonus amount\n', '    function setBonusAmount(uint256 _amount)\n', '        public\n', '        onlyOwner()\n', '    {\n', '        bonusAmount_ = _amount;\n', '    }\n', '\n', '    // Set profit ratio\n', '    function setProfitRatio(uint256 _r)\n', '        public\n', '        onlyOwner()\n', '    {\n', '        r_ = _r;\n', '    }\n', '\n', '    // Set profit ratio\n', '    function setBlocks(uint256 _blocks)\n', '        public\n', '        onlyOwner()\n', '    {\n', '        blocks_ = _blocks;\n', '    }\n', '\n', '    // ======= Deprecated Version of DBank =======\n', '\n', '    // *** Deprecated. ***\n', '    // deposit in dbank\n', '    mapping (address => uint256) public deposit_; \n', '\n', '    // *** Deprecated. ***\n', '    // deposit in dbk deposit(no reward)\n', '    function dbkDeposit()\n', '        public\n', '        payable\n', '    {\n', '        deposit_[msg.sender] += msg.value;\n', '    }\n', '\n', '    // *** Deprecated. ***\n', '    // withdraw from dbk deposit\n', '    function dbkWithdraw()\n', '        public\n', '    {\n', '        uint256 _eth = deposit_[msg.sender];\n', '        if (_eth > 0) {\n', '            msg.sender.transfer(_eth);\n', '            deposit_[msg.sender] = 0;\n', '        }\n', '    }\n', '}']