['pragma solidity ^0.4.17;\n', '\n', '\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * Multiplication\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '  \tif (a == 0) {\n', '      return 0;\n', '  \t}\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * Division\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0); \n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * Soustraction\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * Addition\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // ERROR if not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * Amount of token burn\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    Burn(burner, _value);\n', '  }\n', '}\n', '\n', 'contract CCXToken is  BurnableToken{\n', '    string public constant name = "CCX";\n', '    string public constant symbol = "CCX";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public totalSupply;\n', '\n', '    function CCXToken() public\n', '    {\n', '        totalSupply = 40000000 * 10 ** uint256(decimals);\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '    \n', '    \n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', ' event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '}\n', '\n', 'contract CCXCrowdsale is Ownable{\n', '\n', '    using SafeMath for uint256;\n', '\n', '    enum Periods {NotStarted, PreSale,EndPreSale,ThirdWeek,SecondWeek,FirstWeek,Finished}\n', '    Periods public period;\n', '\n', '\n', '    CCXToken public token;\n', '    address public wallet;\n', '    uint256 public constant ratePresale = 1500;\n', '    uint256 public constant rateFirstWeek = 1100;\n', '    uint256 public constant rateSecondWeek = 1200;\n', '    uint256 public constant rateThirdWeek = 1300;\n', '    uint256 public constant rate = 1000;\n', '    uint256 public balance;\n', '    uint256 public tokens;\n', '\n', '    mapping(address => uint256) internal balances;\n', '\n', '     function CCXCrowdsale(address _token,address _wallet) public{\n', '        token = CCXToken(_token);\n', '           wallet = _wallet;\n', '        period = Periods.NotStarted;\n', '    }\n', '\n', '   \n', '    \n', '    \n', '\n', '    function nextState() onlyOwner public{\n', '       \n', '        if(period == Periods.NotStarted){\n', '            period = Periods.PreSale;\n', '        }\n', '        else if(period == Periods.PreSale){\n', '            period = Periods.EndPreSale;\n', '        }\n', '        else if(period == Periods.EndPreSale){\n', '            period = Periods.ThirdWeek;\n', '        }\n', '        else if(period == Periods.ThirdWeek){\n', '            period = Periods.SecondWeek;\n', '        }\n', '        else if(period == Periods.SecondWeek){\n', '            period = Periods.FirstWeek;\n', '        }\n', '    }\n', '\n', '    function buyTokens() internal\n', '    {\n', '        \n', '          uint256   amount = msg.value;\n', '          bool success= false;\n', '      if(uint(period) == 1){\n', '      \t\t    tokens = amount.mul(ratePresale); \t\n', '       }else if(uint(period) == 3){\n', '      \t\t    tokens = amount.mul(rateThirdWeek);\n', '       }\n', '         else if(uint(period) == 4){    \n', '      \t\t    tokens = amount.mul(rateSecondWeek);\n', '       }\n', '         else if(uint(period) == 5){     \n', '      \t\t    tokens = amount.mul(rateFirstWeek);\n', '       }\n', '       else{\n', '         tokens = amount.mul(rate);\n', '    }\n', '        success = token.transfer(msg.sender, tokens);\n', '        balance = balance.add(tokens);\n', '        require(success);\n', '        wallet.transfer(msg.value);\n', '  \n', '       }\n', '\n', '\n', '    function () public payable{\n', '            require(msg.sender != address(0));\n', '        require(msg.value > 0);\n', '        buyTokens();\n', '    }\n', '  \n', '   function burningTokens() public onlyOwner{\n', '        if(period == Periods.Finished){\n', '            token.burn(tokens);\n', '        }\n', '    }\n', '}\n', '\n', '   contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '\n', '}']