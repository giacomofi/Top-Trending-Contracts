['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnerChanged(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function changeOwner(address _newOwner) onlyOwner public {\n', '        require(_newOwner != address(0));\n', '        OwnerChanged(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract ContractStakeToken is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    enum TypeStake {DAY, WEEK, MONTH}\n', '    TypeStake typeStake;\n', '    enum StatusStake {ACTIVE, COMPLETED, CANCEL}\n', '\n', '    struct TransferInStructToken {\n', '        uint256 indexStake;\n', '        bool isRipe;\n', '    }\n', '\n', '    struct StakeStruct {\n', '        address owner;\n', '        uint256 amount;\n', '        TypeStake stakeType;\n', '        uint256 time;\n', '        StatusStake status;\n', '    }\n', '\n', '    StakeStruct[] arrayStakesToken;\n', '\n', '    uint256[] public rates = [101, 109, 136];\n', '\n', '    uint256 public totalDepositTokenAll;\n', '\n', '    uint256 public totalWithdrawTokenAll;\n', '\n', '    mapping (address => uint256) balancesToken;\n', '    mapping (address => uint256) totalDepositToken;\n', '    mapping (address => uint256) totalWithdrawToken;\n', '    mapping (address => TransferInStructToken[]) transferInsToken;\n', '    mapping (address => bool) public contractUsers;\n', '\n', '    event Withdraw(address indexed receiver, uint256 amount);\n', '\n', '    function ContractStakeToken(address _owner) public {\n', '        require(_owner != address(0));\n', '        owner = _owner;\n', '        //owner = msg.sender; // for test&#39;s\n', '    }\n', '\n', '    modifier onlyOwnerOrUser() {\n', '        require(msg.sender == owner || contractUsers[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Add an contract admin\n', '    */\n', '    function setContractUser(address _user, bool _isUser) public onlyOwner {\n', '        contractUsers[_user] = _isUser;\n', '    }\n', '\n', '    // fallback function can be used to buy tokens\n', '    function() payable public {\n', '        //deposit(msg.sender, msg.value, TypeStake.DAY, now);\n', '    }\n', '\n', '    function depositToken(address _investor, TypeStake _stakeType, uint256 _time, uint256 _value) onlyOwnerOrUser external returns (bool){\n', '        require(_investor != address(0));\n', '        require(_value > 0);\n', '        require(transferInsToken[_investor].length < 31);\n', '\n', '        balancesToken[_investor] = balancesToken[_investor].add(_value);\n', '        totalDepositToken[_investor] = totalDepositToken[_investor].add(_value);\n', '        totalDepositTokenAll = totalDepositTokenAll.add(_value);\n', '        uint256 indexStake = arrayStakesToken.length;\n', '\n', '        arrayStakesToken.push(StakeStruct({\n', '            owner : _investor,\n', '            amount : _value,\n', '            stakeType : _stakeType,\n', '            time : _time,\n', '            status : StatusStake.ACTIVE\n', '            }));\n', '        transferInsToken[_investor].push(TransferInStructToken(indexStake, false));\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function checks how much you can remove the Token\n', '     * @param _address The address of depositor.\n', '     * @param _now The current time.\n', '     * @return the amount of Token that can be withdrawn from contract\n', '     */\n', '    function validWithdrawToken(address _address, uint256 _now) public returns (uint256){\n', '        require(_address != address(0));\n', '        uint256 amount = 0;\n', '\n', '        if (balancesToken[_address] <= 0 || transferInsToken[_address].length <= 0) {\n', '            return amount;\n', '        }\n', '\n', '        for (uint i = 0; i < transferInsToken[_address].length; i++) {\n', '            uint256 indexCurStake = transferInsToken[_address][i].indexStake;\n', '            TypeStake stake = arrayStakesToken[indexCurStake].stakeType;\n', '            uint256 stakeTime = arrayStakesToken[indexCurStake].time;\n', '            uint256 stakeAmount = arrayStakesToken[indexCurStake].amount;\n', '            uint8 currentStake = 0;\n', '            if (arrayStakesToken[transferInsToken[_address][i].indexStake].status == StatusStake.CANCEL) {\n', '                amount = amount.add(stakeAmount);\n', '                transferInsToken[_address][i].isRipe = true;\n', '                continue;\n', '            }\n', '            if (stake == TypeStake.DAY) {\n', '                currentStake = 0;\n', '                if (_now < stakeTime.add(1 days)) continue;\n', '            }\n', '            if (stake == TypeStake.WEEK) {\n', '                currentStake = 1;\n', '                if (_now < stakeTime.add(7 days)) continue;\n', '            }\n', '            if (stake == TypeStake.MONTH) {\n', '                currentStake = 2;\n', '                if (_now < stakeTime.add(730 hours)) continue;\n', '            }\n', '            uint256 amountHours = _now.sub(stakeTime).div(1 hours);\n', '            stakeAmount = calculator(currentStake, stakeAmount, amountHours);\n', '            amount = amount.add(stakeAmount);\n', '            transferInsToken[_address][i].isRipe = true;\n', '            arrayStakesToken[transferInsToken[_address][i].indexStake].status = StatusStake.COMPLETED;\n', '        }\n', '        return amount;\n', '    }\n', '\n', '    function withdrawToken(address _address) onlyOwnerOrUser public returns (uint256){\n', '        require(_address != address(0));\n', '        uint256 _currentTime = now;\n', '        _currentTime = 1525651200; // for test\n', '        uint256 _amount = validWithdrawToken(_address, _currentTime);\n', '        require(_amount > 0);\n', '        totalWithdrawToken[_address] = totalWithdrawToken[_address].add(_amount);\n', '        totalWithdrawTokenAll = totalWithdrawTokenAll.add(_amount);\n', '        while (clearTransferInsToken(_address) == false) {\n', '            clearTransferInsToken(_address);\n', '        }\n', '        Withdraw(_address, _amount);\n', '        return _amount;\n', '    }\n', '\n', '    function clearTransferInsToken(address _owner) private returns (bool) {\n', '        for (uint i = 0; i < transferInsToken[_owner].length; i++) {\n', '            if (transferInsToken[_owner][i].isRipe == true) {\n', '                balancesToken[_owner] = balancesToken[_owner].sub(arrayStakesToken[transferInsToken[_owner][i].indexStake].amount);\n', '                removeMemberArrayToken(_owner, i);\n', '                return false;\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function removeMemberArrayToken(address _address, uint index) private {\n', '        if (index >= transferInsToken[_address].length) return;\n', '        for (uint i = index; i < transferInsToken[_address].length - 1; i++) {\n', '            transferInsToken[_address][i] = transferInsToken[_address][i + 1];\n', '        }\n', '        delete transferInsToken[_address][transferInsToken[_address].length - 1];\n', '        transferInsToken[_address].length--;\n', '    }\n', '\n', '    function balanceOfToken(address _owner) public view returns (uint256 balance) {\n', '        return balancesToken[_owner];\n', '    }\n', '\n', '    function cancel(uint256 _index, address _address) onlyOwnerOrUser public returns (bool _result) {\n', '        require(_index >= 0);\n', '        require(_address != address(0));\n', '        if(_address != arrayStakesToken[_index].owner){\n', '            return false;\n', '        }\n', '        arrayStakesToken[_index].status = StatusStake.CANCEL;\n', '        return true;\n', '    }\n', '\n', '    function withdrawOwner(uint256 _amount) public onlyOwner returns (bool) {\n', '        require(this.balance >= _amount);\n', '        owner.transfer(_amount);\n', '        Withdraw(owner, _amount);\n', '    }\n', '\n', '    function changeRates(uint8 _numberRate, uint256 _percent) onlyOwnerOrUser public returns (bool) {\n', '        require(_percent >= 0);\n', '        require(0 <= _numberRate && _numberRate < 3);\n', '        rates[_numberRate] = _percent.add(100);\n', '        return true;\n', '\n', '    }\n', '\n', '    function getTokenStakeByIndex(uint256 _index) onlyOwnerOrUser public view returns (\n', '        address _owner,\n', '        uint256 _amount,\n', '        TypeStake _stakeType,\n', '        uint256 _time,\n', '        StatusStake _status\n', '    ) {\n', '        require(_index < arrayStakesToken.length);\n', '        _owner = arrayStakesToken[_index].owner;\n', '        _amount = arrayStakesToken[_index].amount;\n', '        _stakeType = arrayStakesToken[_index].stakeType;\n', '        _time = arrayStakesToken[_index].time;\n', '        _status = arrayStakesToken[_index].status;\n', '    }\n', '\n', '    function getTokenTransferInsByAddress(address _address, uint256 _index) onlyOwnerOrUser public view returns (\n', '        uint256 _indexStake,\n', '        bool _isRipe\n', '    ) {\n', '        require(_index < transferInsToken[_address].length);\n', '        _indexStake = transferInsToken[_address][_index].indexStake;\n', '        _isRipe = transferInsToken[_address][_index].isRipe;\n', '    }\n', '\n', '    function getCountTransferInsToken(address _address) public view returns (uint256 _count) {\n', '        _count = transferInsToken[_address].length;\n', '    }\n', '\n', '    function getCountStakesToken() public view returns (uint256 _count) {\n', '        _count = arrayStakesToken.length;\n', '    }\n', '\n', '    function getTotalTokenDepositByAddress(address _owner) public view returns (uint256 _amountToken) {\n', '        return totalDepositToken[_owner];\n', '    }\n', '\n', '    function getTotalTokenWithdrawByAddress(address _owner) public view returns (uint256 _amountToken) {\n', '        return totalWithdrawToken[_owner];\n', '    }\n', '\n', '    function removeContract() public onlyOwner {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '    function calculator(uint8 _currentStake, uint256 _amount, uint256 _amountHours) public view returns (uint256 stakeAmount){\n', '        uint32 i = 0;\n', '        uint256 number = 0;\n', '        stakeAmount = _amount;\n', '        if (_currentStake == 0) {\n', '            number = _amountHours.div(24);\n', '        }\n', '        if (_currentStake == 1) {\n', '            number = _amountHours.div(168);\n', '        }\n', '        if (_currentStake == 2) {\n', '            number = _amountHours.div(730);\n', '        }\n', '        while(i < number){\n', '            stakeAmount= stakeAmount.mul(rates[_currentStake]).div(100);\n', '            i++;\n', '        }\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnerChanged(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function changeOwner(address _newOwner) onlyOwner public {\n', '        require(_newOwner != address(0));\n', '        OwnerChanged(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract ContractStakeToken is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    enum TypeStake {DAY, WEEK, MONTH}\n', '    TypeStake typeStake;\n', '    enum StatusStake {ACTIVE, COMPLETED, CANCEL}\n', '\n', '    struct TransferInStructToken {\n', '        uint256 indexStake;\n', '        bool isRipe;\n', '    }\n', '\n', '    struct StakeStruct {\n', '        address owner;\n', '        uint256 amount;\n', '        TypeStake stakeType;\n', '        uint256 time;\n', '        StatusStake status;\n', '    }\n', '\n', '    StakeStruct[] arrayStakesToken;\n', '\n', '    uint256[] public rates = [101, 109, 136];\n', '\n', '    uint256 public totalDepositTokenAll;\n', '\n', '    uint256 public totalWithdrawTokenAll;\n', '\n', '    mapping (address => uint256) balancesToken;\n', '    mapping (address => uint256) totalDepositToken;\n', '    mapping (address => uint256) totalWithdrawToken;\n', '    mapping (address => TransferInStructToken[]) transferInsToken;\n', '    mapping (address => bool) public contractUsers;\n', '\n', '    event Withdraw(address indexed receiver, uint256 amount);\n', '\n', '    function ContractStakeToken(address _owner) public {\n', '        require(_owner != address(0));\n', '        owner = _owner;\n', "        //owner = msg.sender; // for test's\n", '    }\n', '\n', '    modifier onlyOwnerOrUser() {\n', '        require(msg.sender == owner || contractUsers[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Add an contract admin\n', '    */\n', '    function setContractUser(address _user, bool _isUser) public onlyOwner {\n', '        contractUsers[_user] = _isUser;\n', '    }\n', '\n', '    // fallback function can be used to buy tokens\n', '    function() payable public {\n', '        //deposit(msg.sender, msg.value, TypeStake.DAY, now);\n', '    }\n', '\n', '    function depositToken(address _investor, TypeStake _stakeType, uint256 _time, uint256 _value) onlyOwnerOrUser external returns (bool){\n', '        require(_investor != address(0));\n', '        require(_value > 0);\n', '        require(transferInsToken[_investor].length < 31);\n', '\n', '        balancesToken[_investor] = balancesToken[_investor].add(_value);\n', '        totalDepositToken[_investor] = totalDepositToken[_investor].add(_value);\n', '        totalDepositTokenAll = totalDepositTokenAll.add(_value);\n', '        uint256 indexStake = arrayStakesToken.length;\n', '\n', '        arrayStakesToken.push(StakeStruct({\n', '            owner : _investor,\n', '            amount : _value,\n', '            stakeType : _stakeType,\n', '            time : _time,\n', '            status : StatusStake.ACTIVE\n', '            }));\n', '        transferInsToken[_investor].push(TransferInStructToken(indexStake, false));\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function checks how much you can remove the Token\n', '     * @param _address The address of depositor.\n', '     * @param _now The current time.\n', '     * @return the amount of Token that can be withdrawn from contract\n', '     */\n', '    function validWithdrawToken(address _address, uint256 _now) public returns (uint256){\n', '        require(_address != address(0));\n', '        uint256 amount = 0;\n', '\n', '        if (balancesToken[_address] <= 0 || transferInsToken[_address].length <= 0) {\n', '            return amount;\n', '        }\n', '\n', '        for (uint i = 0; i < transferInsToken[_address].length; i++) {\n', '            uint256 indexCurStake = transferInsToken[_address][i].indexStake;\n', '            TypeStake stake = arrayStakesToken[indexCurStake].stakeType;\n', '            uint256 stakeTime = arrayStakesToken[indexCurStake].time;\n', '            uint256 stakeAmount = arrayStakesToken[indexCurStake].amount;\n', '            uint8 currentStake = 0;\n', '            if (arrayStakesToken[transferInsToken[_address][i].indexStake].status == StatusStake.CANCEL) {\n', '                amount = amount.add(stakeAmount);\n', '                transferInsToken[_address][i].isRipe = true;\n', '                continue;\n', '            }\n', '            if (stake == TypeStake.DAY) {\n', '                currentStake = 0;\n', '                if (_now < stakeTime.add(1 days)) continue;\n', '            }\n', '            if (stake == TypeStake.WEEK) {\n', '                currentStake = 1;\n', '                if (_now < stakeTime.add(7 days)) continue;\n', '            }\n', '            if (stake == TypeStake.MONTH) {\n', '                currentStake = 2;\n', '                if (_now < stakeTime.add(730 hours)) continue;\n', '            }\n', '            uint256 amountHours = _now.sub(stakeTime).div(1 hours);\n', '            stakeAmount = calculator(currentStake, stakeAmount, amountHours);\n', '            amount = amount.add(stakeAmount);\n', '            transferInsToken[_address][i].isRipe = true;\n', '            arrayStakesToken[transferInsToken[_address][i].indexStake].status = StatusStake.COMPLETED;\n', '        }\n', '        return amount;\n', '    }\n', '\n', '    function withdrawToken(address _address) onlyOwnerOrUser public returns (uint256){\n', '        require(_address != address(0));\n', '        uint256 _currentTime = now;\n', '        _currentTime = 1525651200; // for test\n', '        uint256 _amount = validWithdrawToken(_address, _currentTime);\n', '        require(_amount > 0);\n', '        totalWithdrawToken[_address] = totalWithdrawToken[_address].add(_amount);\n', '        totalWithdrawTokenAll = totalWithdrawTokenAll.add(_amount);\n', '        while (clearTransferInsToken(_address) == false) {\n', '            clearTransferInsToken(_address);\n', '        }\n', '        Withdraw(_address, _amount);\n', '        return _amount;\n', '    }\n', '\n', '    function clearTransferInsToken(address _owner) private returns (bool) {\n', '        for (uint i = 0; i < transferInsToken[_owner].length; i++) {\n', '            if (transferInsToken[_owner][i].isRipe == true) {\n', '                balancesToken[_owner] = balancesToken[_owner].sub(arrayStakesToken[transferInsToken[_owner][i].indexStake].amount);\n', '                removeMemberArrayToken(_owner, i);\n', '                return false;\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function removeMemberArrayToken(address _address, uint index) private {\n', '        if (index >= transferInsToken[_address].length) return;\n', '        for (uint i = index; i < transferInsToken[_address].length - 1; i++) {\n', '            transferInsToken[_address][i] = transferInsToken[_address][i + 1];\n', '        }\n', '        delete transferInsToken[_address][transferInsToken[_address].length - 1];\n', '        transferInsToken[_address].length--;\n', '    }\n', '\n', '    function balanceOfToken(address _owner) public view returns (uint256 balance) {\n', '        return balancesToken[_owner];\n', '    }\n', '\n', '    function cancel(uint256 _index, address _address) onlyOwnerOrUser public returns (bool _result) {\n', '        require(_index >= 0);\n', '        require(_address != address(0));\n', '        if(_address != arrayStakesToken[_index].owner){\n', '            return false;\n', '        }\n', '        arrayStakesToken[_index].status = StatusStake.CANCEL;\n', '        return true;\n', '    }\n', '\n', '    function withdrawOwner(uint256 _amount) public onlyOwner returns (bool) {\n', '        require(this.balance >= _amount);\n', '        owner.transfer(_amount);\n', '        Withdraw(owner, _amount);\n', '    }\n', '\n', '    function changeRates(uint8 _numberRate, uint256 _percent) onlyOwnerOrUser public returns (bool) {\n', '        require(_percent >= 0);\n', '        require(0 <= _numberRate && _numberRate < 3);\n', '        rates[_numberRate] = _percent.add(100);\n', '        return true;\n', '\n', '    }\n', '\n', '    function getTokenStakeByIndex(uint256 _index) onlyOwnerOrUser public view returns (\n', '        address _owner,\n', '        uint256 _amount,\n', '        TypeStake _stakeType,\n', '        uint256 _time,\n', '        StatusStake _status\n', '    ) {\n', '        require(_index < arrayStakesToken.length);\n', '        _owner = arrayStakesToken[_index].owner;\n', '        _amount = arrayStakesToken[_index].amount;\n', '        _stakeType = arrayStakesToken[_index].stakeType;\n', '        _time = arrayStakesToken[_index].time;\n', '        _status = arrayStakesToken[_index].status;\n', '    }\n', '\n', '    function getTokenTransferInsByAddress(address _address, uint256 _index) onlyOwnerOrUser public view returns (\n', '        uint256 _indexStake,\n', '        bool _isRipe\n', '    ) {\n', '        require(_index < transferInsToken[_address].length);\n', '        _indexStake = transferInsToken[_address][_index].indexStake;\n', '        _isRipe = transferInsToken[_address][_index].isRipe;\n', '    }\n', '\n', '    function getCountTransferInsToken(address _address) public view returns (uint256 _count) {\n', '        _count = transferInsToken[_address].length;\n', '    }\n', '\n', '    function getCountStakesToken() public view returns (uint256 _count) {\n', '        _count = arrayStakesToken.length;\n', '    }\n', '\n', '    function getTotalTokenDepositByAddress(address _owner) public view returns (uint256 _amountToken) {\n', '        return totalDepositToken[_owner];\n', '    }\n', '\n', '    function getTotalTokenWithdrawByAddress(address _owner) public view returns (uint256 _amountToken) {\n', '        return totalWithdrawToken[_owner];\n', '    }\n', '\n', '    function removeContract() public onlyOwner {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '    function calculator(uint8 _currentStake, uint256 _amount, uint256 _amountHours) public view returns (uint256 stakeAmount){\n', '        uint32 i = 0;\n', '        uint256 number = 0;\n', '        stakeAmount = _amount;\n', '        if (_currentStake == 0) {\n', '            number = _amountHours.div(24);\n', '        }\n', '        if (_currentStake == 1) {\n', '            number = _amountHours.div(168);\n', '        }\n', '        if (_currentStake == 2) {\n', '            number = _amountHours.div(730);\n', '        }\n', '        while(i < number){\n', '            stakeAmount= stakeAmount.mul(rates[_currentStake]).div(100);\n', '            i++;\n', '        }\n', '    }\n', '\n', '}']
