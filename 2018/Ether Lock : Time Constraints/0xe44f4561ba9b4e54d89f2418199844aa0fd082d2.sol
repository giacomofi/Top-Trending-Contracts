['pragma solidity ^0.4.21;\n', '\n', '// File: contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'contract SafeMath {\n', '    /**\n', '    * @dev constructor\n', '    */\n', '    function SafeMath() public {\n', '    }\n', '\n', '    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(a >= b);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '// File: contracts/token/IERC20Token.sol\n', '\n', '/**\n', ' * @title IERC20Token - ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract IERC20Token {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value)  public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value)  public returns (bool success);\n', '    function approve(address _spender, uint256 _value)  public returns (bool success);\n', '    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '// File: contracts/token/LockedTokens.sol\n', '\n', '/**\n', ' * @title LockedTokens\n', ' * @dev Lock tokens for certain period of time\n', ' */\n', 'contract LockedTokens is SafeMath {\n', '    struct Tokens {\n', '        uint256 amount;\n', '        uint256 lockEndTime;\n', '        bool released;\n', '    }\n', '\n', '    event TokensUnlocked(address _to, uint256 _value);\n', '\n', '    IERC20Token public token;\n', '    address public crowdsaleAddress;\n', '    mapping(address => Tokens[]) public walletTokens;\n', '\n', '    /**\n', '     * @dev LockedTokens constructor\n', '     * @param _token ERC20 compatible token contract\n', '     * @param _crowdsaleAddress Crowdsale contract address\n', '     */\n', '    function LockedTokens(IERC20Token _token, address _crowdsaleAddress) public {\n', '        token = _token;\n', '        crowdsaleAddress = _crowdsaleAddress;\n', '    }\n', '\n', '    /**\n', '     * @dev Functions locks tokens\n', '     * @param _to Wallet address to transfer tokens after _lockEndTime\n', '     * @param _amount Amount of tokens to lock\n', '     * @param _lockEndTime End of lock period\n', '     */\n', '    function addTokens(address _to, uint256 _amount, uint256 _lockEndTime) external {\n', '        require(msg.sender == crowdsaleAddress);\n', '        walletTokens[_to].push(Tokens({amount: _amount, lockEndTime: _lockEndTime, released: false}));\n', '    }\n', '\n', '    /**\n', '     * @dev Called by owner of locked tokens to release them\n', '     */\n', '    function releaseTokens() public {\n', '        require(walletTokens[msg.sender].length > 0);\n', '\n', '        for(uint256 i = 0; i < walletTokens[msg.sender].length; i++) {\n', '            if(!walletTokens[msg.sender][i].released && now >= walletTokens[msg.sender][i].lockEndTime) {\n', '                walletTokens[msg.sender][i].released = true;\n', '                token.transfer(msg.sender, walletTokens[msg.sender][i].amount);\n', '                TokensUnlocked(msg.sender, walletTokens[msg.sender][i].amount);\n', '            }\n', '        }\n', '    }\n', '}']