['pragma solidity ^0.4.24;\n', '\n', '/***********************************************************\n', ' * SafeDif contract\n', ' *  - GAIN 2.4% PER 24 HOURS (every 5900 blocks) 60 days  0.01~500eth\n', ' *  - GAIN 3.5% PER 24 HOURS (every 5900 blocks) 40 days  1~1000eth\n', ' *  - GAIN 4.7% PER 24 HOURS (every 5900 blocks) 35 days  10~10000eth\n', ' *  - GAIN 1% PER 24 HOURS (every 5900 blocks) forever    0.01~10000eth\n', ' *  - GAIN 9% PER 24 HOURS (every 5900 blocks) 12 days    1~10000eth\n', ' *  \n', ' *  https://www.safedif.com\n', ' ***********************************************************/\n', '\n', '/***********************************************************\n', ' * @title SafeMath v0.1.9\n', ' * @dev Math operations with safety checks that throw on error\n', ' * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\n', ' * - added sqrt\n', ' * - added sq\n', ' * - added pwr \n', ' * - changed asserts to requires with error log outputs\n', ' * - removed div, its useless\n', ' ***********************************************************/\n', ' library SafeMath {\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) \n', '        internal \n', '        pure \n', '        returns (uint256 c) \n', '    {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        require(c / a == b, "SafeMath mul failed");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '    \n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256) \n', '    {\n', '        require(b <= a, "SafeMath sub failed");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256 c) \n', '    {\n', '        c = a + b;\n', '        require(c >= a, "SafeMath add failed");\n', '        return c;\n', '    }\n', '    \n', '    /**\n', '     * @dev gives square root of given x.\n', '     */\n', '    function sqrt(uint256 x)\n', '        internal\n', '        pure\n', '        returns (uint256 y) \n', '    {\n', '        uint256 z = ((add(x,1)) / 2);\n', '        y = x;\n', '        while (z < y) \n', '        {\n', '            y = z;\n', '            z = ((add((x / z),z)) / 2);\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @dev gives square. multiplies x by x\n', '     */\n', '    function sq(uint256 x)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return (mul(x,x));\n', '    }\n', '    \n', '    /**\n', '     * @dev x to the power of y \n', '     */\n', '    function pwr(uint256 x, uint256 y)\n', '        internal \n', '        pure \n', '        returns (uint256)\n', '    {\n', '        if (x==0)\n', '            return (0);\n', '        else if (y==0)\n', '            return (1);\n', '        else \n', '        {\n', '            uint256 z = x;\n', '            for (uint256 i=1; i < y; i++)\n', '                z = mul(z,x);\n', '            return (z);\n', '        }\n', '    }\n', '}\n', '\n', '/***********************************************************\n', ' * SDDatasets library\n', ' ***********************************************************/\n', 'library SDDatasets {\n', '    struct Player {\n', '        address addr;   // player address\n', '        uint256 aff;    // affiliate vault,directly send\n', '        uint256 laff;   // parent id\n', '        uint256 planCount;\n', '        mapping(uint256=>PalyerPlan) plans;\n', '        uint256 aff1sum; //4 level\n', '        uint256 aff2sum;\n', '        uint256 aff3sum;\n', '        uint256 aff4sum;\n', '    }\n', '    \n', '    struct PalyerPlan {\n', '        uint256 planId;\n', '        uint256 startTime;\n', '        uint256 startBlock;\n', '        uint256 invested;    //\n', '        uint256 atBlock;    // \n', '        uint256 payEth;\n', '        bool isClose;\n', '    }\n', '\n', '    struct Plan {\n', '        uint256 interest;    // interest per day %%\n', '        uint256 dayRange;    // days, 0 means No time limit\n', '        uint256 min;\n', '        uint256 max;\n', '    }    \n', '}\n', '\n', 'contract SafeDif {\n', '    using SafeMath              for *;\n', '\n', '    address public devAddr_ = address(0xe6CE2a354a0BF26B5b383015B7E61701F6adb39C);\n', '    address public affiAddr_ = address(0x08F521636a2B117B554d04dc9E54fa4061161859);\n', '    \n', '    //partner address\n', '    address public partnerAddr_ = address(0xa8502800F27F5c13F0701450fE07550Cf81C62a7);\n', '\n', '    bool public activated_ = false;\n', '    \n', '    uint256 ruleSum_ = 5;\n', '    modifier isActivated() {\n', '        require(activated_ == true, "its not active yet."); \n', '        _;\n', '    }\n', '\n', '    //Start ---> Version 1 has code holes, and administrators have privileges. Migration of version 1 data is used.\n', '    function version1Invest(address addr, uint256 eth, uint256 _affCode, uint256 _planId)\n', '    isAdmin() public payable {\n', '        require(activated_ == false, "Only not active");\n', '        \n', '\t    require(_planId >= 1 && _planId <= ruleSum_, "_planId error");\n', '        \n', '\t\t//get uid\n', '\t\tuint256 uid = pIDxAddr_[addr];\n', '\t\t\n', '\t\t//first\n', '\t\tif (uid == 0) {\n', '\t\t    if (player_[_affCode].addr != address(0x0)) {\n', '\t\t        register_(addr, _affCode);\n', '\t\t    } else {\n', '\t\t\t    register_(addr, 1000);\n', '\t\t    }\n', '\t\t    \n', '\t\t\tuid = G_NowUserId;\n', '\t\t}\n', '\t\t\n', '        uint256 planCount = player_[uid].planCount;\n', '        player_[uid].plans[planCount].planId = _planId;\n', '        player_[uid].plans[planCount].startTime = now;\n', '        player_[uid].plans[planCount].startBlock = block.number;\n', '        player_[uid].plans[planCount].atBlock = block.number;\n', '        player_[uid].plans[planCount].invested = eth;\n', '        player_[uid].plans[planCount].payEth = 0;\n', '        player_[uid].plans[planCount].isClose = false;\n', '        \n', '        player_[uid].planCount = player_[uid].planCount.add(1);\n', '\n', '        G_AllEth = G_AllEth.add(eth);\n', '\n', '    }\n', '    //<--- end\n', '    \n', '    function activate() isAdmin() public {\n', '        require(address(devAddr_) != address(0x0), "Must setup devAddr_.");\n', '        require(address(partnerAddr_) != address(0x0), "Must setup partnerAddr_.");\n', '        require(address(affiAddr_) != address(0x0), "Must setup affiAddr_.");\n', '\n', '        require(activated_ == false, "Only once");\n', '        activated_ = true ;\n', '\t}\n', '\t\n', '    mapping(address => uint256)     private g_users ;\n', '    function initUsers() private {\n', '        g_users[msg.sender] = 9 ;\n', '        \n', '        uint256 pId = G_NowUserId;\n', '        pIDxAddr_[msg.sender] = pId;\n', '        player_[pId].addr = msg.sender;\n', '    }\n', '    modifier isAdmin() {\n', '        uint256 role = g_users[msg.sender];\n', '        require((role==9), "Must be admin.");\n', '        _;\n', '    }\t\n', '\n', '    uint256 public G_NowUserId = 1000; //first user\n', '    uint256 public G_AllEth = 0;\n', '    uint256 G_DayBlocks = 5900;\n', '    \n', '    mapping (address => uint256) public pIDxAddr_;  \n', '    mapping (uint256 => SDDatasets.Player) public player_; \n', '    mapping (uint256 => SDDatasets.Plan) private plan_;   \n', '\t\n', '\tfunction GetIdByAddr(address addr) public \n', '\t    view returns(uint256)\n', '\t{\n', '\t    return pIDxAddr_[addr];\n', '\t}\n', '\t\n', '\n', '\tfunction GetPlayerByUid(uint256 uid) public \n', '\t    view returns(uint256,uint256,uint256,uint256,uint256,uint256,uint256)\n', '\t{\n', '\t    SDDatasets.Player storage player = player_[uid];\n', '\n', '\t    return\n', '\t    (\n', '\t        player.aff,\n', '\t        player.laff,\n', '\t        player.aff1sum,\n', '\t        player.aff2sum,\n', '\t        player.aff3sum,\n', '\t        player.aff4sum,\n', '\t        player.planCount\n', '\t    );\n', '\t}\n', '\t\n', '    function GetPlanByUid(uint256 uid) public \n', '\t    view returns(uint256[],uint256[],uint256[],uint256[],uint256[],bool[])\n', '\t{\n', '\t    uint256[] memory planIds = new  uint256[] (player_[uid].planCount);\n', '\t    uint256[] memory startBlocks = new  uint256[] (player_[uid].planCount);\n', '\t    uint256[] memory investeds = new  uint256[] (player_[uid].planCount);\n', '\t    uint256[] memory atBlocks = new  uint256[] (player_[uid].planCount);\n', '\t    uint256[] memory payEths = new  uint256[] (player_[uid].planCount);\n', '\t    bool[] memory isCloses = new  bool[] (player_[uid].planCount);\n', '\t    \n', '        for(uint i = 0; i < player_[uid].planCount; i++) {\n', '\t        planIds[i] = player_[uid].plans[i].planId;\n', '\t        startBlocks[i] = player_[uid].plans[i].startBlock;\n', '\t        investeds[i] = player_[uid].plans[i].invested;\n', '\t        atBlocks[i] = player_[uid].plans[i].atBlock;\n', '\t        payEths[i] = player_[uid].plans[i].payEth;\n', '\t        isCloses[i] = player_[uid].plans[i].isClose;\n', '\t    }\n', '\t    \n', '\t    return\n', '\t    (\n', '\t        planIds,\n', '\t        startBlocks,\n', '\t        investeds,\n', '\t        atBlocks,\n', '\t        payEths,\n', '\t        isCloses\n', '\t    );\n', '\t}\n', '\t\n', 'function GetPlanTimeByUid(uint256 uid) public \n', '\t    view returns(uint256[])\n', '\t{\n', '\t    uint256[] memory startTimes = new  uint256[] (player_[uid].planCount);\n', '\n', '        for(uint i = 0; i < player_[uid].planCount; i++) {\n', '\t        startTimes[i] = player_[uid].plans[i].startTime;\n', '\t    }\n', '\t    \n', '\t    return\n', '\t    (\n', '\t        startTimes\n', '\t    );\n', '\t}\t\n', '\n', '    constructor() public {\n', '        plan_[1] = SDDatasets.Plan(240,60,1e16, 5e20);\n', '        plan_[2] = SDDatasets.Plan(350,40,1e18, 1e21);\n', '        plan_[3] = SDDatasets.Plan(470,35,1e19, 1e22);\n', '        plan_[4] = SDDatasets.Plan(100,0,1e16, 1e22);\n', '        plan_[5] = SDDatasets.Plan(900,12,1e18, 1e22);\n', '        \n', '        initUsers();\n', '    }\n', '\t\n', '\tfunction register_(address addr, uint256 _affCode) private{\n', '        G_NowUserId = G_NowUserId.add(1);\n', '        \n', '        address _addr = addr;\n', '        \n', '        pIDxAddr_[_addr] = G_NowUserId;\n', '\n', '        player_[G_NowUserId].addr = _addr;\n', '        player_[G_NowUserId].laff = _affCode;\n', '        player_[G_NowUserId].planCount = 0;\n', '        \n', '        uint256 _affID1 = _affCode;\n', '        uint256 _affID2 = player_[_affID1].laff;\n', '        uint256 _affID3 = player_[_affID2].laff;\n', '        uint256 _affID4 = player_[_affID3].laff;\n', '        \n', '        player_[_affID1].aff1sum = player_[_affID1].aff1sum.add(1);\n', '        player_[_affID2].aff2sum = player_[_affID2].aff2sum.add(1);\n', '        player_[_affID3].aff3sum = player_[_affID3].aff3sum.add(1);\n', '        player_[_affID4].aff4sum = player_[_affID4].aff4sum.add(1);\n', '\t}\n', '\t\n', '    \n', '    // this function called every time anyone sends a transaction to this contract\n', '    function () isActivated() external payable {\n', '        if (msg.value == 0) {\n', '            withdraw();\n', '        } else {\n', '            invest(1000, 1);\n', '        }\n', '    } \t\n', '    \n', '    function invest(uint256 _affCode, uint256 _planId) isActivated() public payable {\n', '\t    require(_planId >= 1 && _planId <= ruleSum_, "_planId error");\n', '        \n', '\t\t//get uid\n', '\t\tuint256 uid = pIDxAddr_[msg.sender];\n', '\t\t\n', '\t\t//first\n', '\t\tif (uid == 0) {\n', '\t\t    if (player_[_affCode].addr != address(0x0)) {\n', '\t\t        register_(msg.sender, _affCode);\n', '\t\t    } else {\n', '\t\t\t    register_(msg.sender, 1000);\n', '\t\t    }\n', '\t\t    \n', '\t\t\tuid = G_NowUserId;\n', '\t\t}\n', '\t\t\n', '\t    require(msg.value >= plan_[_planId].min && msg.value <= plan_[_planId].max, "invest amount error, please set the exact amount");\n', '\n', '        // record block number and invested amount (msg.value) of this transaction\n', '        uint256 planCount = player_[uid].planCount;\n', '        player_[uid].plans[planCount].planId = _planId;\n', '        player_[uid].plans[planCount].startTime = now;\n', '        player_[uid].plans[planCount].startBlock = block.number;\n', '        player_[uid].plans[planCount].atBlock = block.number;\n', '        player_[uid].plans[planCount].invested = msg.value;\n', '        player_[uid].plans[planCount].payEth = 0;\n', '        player_[uid].plans[planCount].isClose = false;\n', '        \n', '        player_[uid].planCount = player_[uid].planCount.add(1);\n', '\n', '        G_AllEth = G_AllEth.add(msg.value);\n', '        \n', '        if (msg.value > 1000000000) {\n', '            distributeRef(msg.value, player_[uid].laff);\n', '            \n', '            uint256 devFee = (msg.value.mul(2)).div(100);\n', '            devAddr_.transfer(devFee);\n', '            \n', '            uint256 partnerFee = (msg.value.mul(2)).div(100);\n', '            partnerAddr_.transfer(partnerFee);\n', '        } \n', '        \n', '    }\n', '   \n', '\t\n', '\tfunction withdraw() isActivated() public payable {\n', '\t    require(msg.value == 0, "withdraw fee is 0 ether, please set the exact amount");\n', '\t    \n', '\t    uint256 uid = pIDxAddr_[msg.sender];\n', '\t    require(uid != 0, "no invest");\n', '\n', '        for(uint i = 0; i < player_[uid].planCount; i++) {\n', '\t        if (player_[uid].plans[i].isClose) {\n', '\t            continue;\n', '\t        }\n', '\n', '            SDDatasets.Plan plan = plan_[player_[uid].plans[i].planId];\n', '            \n', '            uint256 blockNumber = block.number;\n', '            bool bClose = false;\n', '            if (plan.dayRange > 0) {\n', '                \n', '                uint256 endBlockNumber = player_[uid].plans[i].startBlock.add(plan.dayRange*G_DayBlocks);\n', '                if (blockNumber > endBlockNumber){\n', '                    blockNumber = endBlockNumber;\n', '                    bClose = true;\n', '                }\n', '            }\n', '            \n', '            uint256 amount = player_[uid].plans[i].invested * plan.interest / 10000 * (blockNumber - player_[uid].plans[i].atBlock) / G_DayBlocks;\n', '\n', '            // send calculated amount of ether directly to sender (aka YOU)\n', '            address sender = msg.sender;\n', '            sender.send(amount);\n', '\n', '            // record block number and invested amount (msg.value) of this transaction\n', '            player_[uid].plans[i].atBlock = block.number;\n', '            player_[uid].plans[i].isClose = bClose;\n', '            player_[uid].plans[i].payEth += amount;\n', '        }\n', '\t}\n', '\n', '\t\n', '    function distributeRef(uint256 _eth, uint256 _affID) private{\n', '        \n', '        uint256 _allaff = (_eth.mul(8)).div(100);\n', '        \n', '        uint256 _affID1 = _affID;\n', '        uint256 _affID2 = player_[_affID1].laff;\n', '        uint256 _affID3 = player_[_affID2].laff;\n', '        uint256 _aff = 0;\n', '\n', '        if (_affID1 != 0) {   \n', '            _aff = (_eth.mul(5)).div(100);\n', '            _allaff = _allaff.sub(_aff);\n', '            player_[_affID1].aff = _aff.add(player_[_affID1].aff);\n', '            player_[_affID1].addr.transfer(_aff);\n', '        }\n', '\n', '        if (_affID2 != 0) {   \n', '            _aff = (_eth.mul(2)).div(100);\n', '            _allaff = _allaff.sub(_aff);\n', '            player_[_affID2].aff = _aff.add(player_[_affID2].aff);\n', '            player_[_affID2].addr.transfer(_aff);\n', '        }\n', '\n', '        if (_affID3 != 0) {   \n', '            _aff = (_eth.mul(1)).div(100);\n', '            _allaff = _allaff.sub(_aff);\n', '            player_[_affID3].aff = _aff.add(player_[_affID3].aff);\n', '            player_[_affID3].addr.transfer(_aff);\n', '       }\n', '\n', '        if(_allaff > 0 ){\n', '            affiAddr_.transfer(_allaff);\n', '        }      \n', '    }\t\n', '}']