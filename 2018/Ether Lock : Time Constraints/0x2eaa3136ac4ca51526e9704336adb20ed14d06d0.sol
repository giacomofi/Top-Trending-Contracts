['/**\n', ' * Overflow aware uint math functions.\n', ' *\n', ' * Inspired by https://github.com/MakerDAO/maker-otc/blob/master/contracts/simple_market.sol\n', ' */\n', 'pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * ERC 20 token\n', ' *\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract RCCCToken  {\n', '    string public constant name = "RCCC Token";\n', '    string public constant symbol = "RCCC";\n', '    uint public constant decimals = 18;\n', '    uint256 _totalSupply    = 500000000 * 10**decimals;\n', '\n', '    function totalSupply() constant returns (uint256 supply) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping(address => uint256) balances; //list of balance of each address\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    uint public baseStartTime; //All other time spots are calculated based on this time spot.\n', '\n', '    address public founder = 0x5e06E608959D68Cf33584BEa9bF6e5CF3975EDe4;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    //constructor\n', '    function RCCCToken() {\n', '        balances[founder] = _totalSupply;\n', '    }\n', '\n', '    function setStartTime(uint _startTime) {\n', '        if (msg.sender!=founder) revert();\n', '        baseStartTime = _startTime;\n', '    }\n', '\n', '    /**\n', '     * ERC 20 Standard Token interface transfer function\n', '     *\n', '     * Prevent transfers until freeze period is over.\n', '     *\n', '     * Applicable tests:\n', '     *\n', '     * - Test restricted early transfer\n', '     * - Test transfer after restricted period\n', '     */\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (now < baseStartTime) revert();\n', '\n', '        //Default assumes totalSupply can&#39;t be over max (2^256 - 1).\n', '        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn&#39;t wrap.\n', '        //Replace the if with this one instead.\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Change founder address (where ICO ETH is being forwarded).\n', '     *\n', '     * Applicable tests:\n', '     *\n', '     * - Test founder change by hacker\n', '     * - Test founder change\n', '     * - Test founder token allocation twice\n', '     */\n', '    function changeFounder(address newFounder) {\n', '        if (msg.sender!=founder) revert();\n', '        founder = newFounder;\n', '    }\n', '\n', '    /**\n', '     * ERC 20 Standard Token interface transfer function\n', '     *\n', '     * Prevent transfers until freeze period is over.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (msg.sender != founder) revert();\n', '\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    // forward all eth to founder\n', '    function() payable {\n', '        if (!founder.call.value(msg.value)()) revert(); \n', '    }\n', '\n', '    // only owner can kill\n', '    function kill() { \n', '        if (msg.sender == founder) {\n', '            suicide(founder); \n', '        }\n', '    }\n', '\n', '}']
['/**\n', ' * Overflow aware uint math functions.\n', ' *\n', ' * Inspired by https://github.com/MakerDAO/maker-otc/blob/master/contracts/simple_market.sol\n', ' */\n', 'pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * ERC 20 token\n', ' *\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract RCCCToken  {\n', '    string public constant name = "RCCC Token";\n', '    string public constant symbol = "RCCC";\n', '    uint public constant decimals = 18;\n', '    uint256 _totalSupply    = 500000000 * 10**decimals;\n', '\n', '    function totalSupply() constant returns (uint256 supply) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping(address => uint256) balances; //list of balance of each address\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    uint public baseStartTime; //All other time spots are calculated based on this time spot.\n', '\n', '    address public founder = 0x5e06E608959D68Cf33584BEa9bF6e5CF3975EDe4;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    //constructor\n', '    function RCCCToken() {\n', '        balances[founder] = _totalSupply;\n', '    }\n', '\n', '    function setStartTime(uint _startTime) {\n', '        if (msg.sender!=founder) revert();\n', '        baseStartTime = _startTime;\n', '    }\n', '\n', '    /**\n', '     * ERC 20 Standard Token interface transfer function\n', '     *\n', '     * Prevent transfers until freeze period is over.\n', '     *\n', '     * Applicable tests:\n', '     *\n', '     * - Test restricted early transfer\n', '     * - Test transfer after restricted period\n', '     */\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (now < baseStartTime) revert();\n', '\n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", "        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n", '        //Replace the if with this one instead.\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Change founder address (where ICO ETH is being forwarded).\n', '     *\n', '     * Applicable tests:\n', '     *\n', '     * - Test founder change by hacker\n', '     * - Test founder change\n', '     * - Test founder token allocation twice\n', '     */\n', '    function changeFounder(address newFounder) {\n', '        if (msg.sender!=founder) revert();\n', '        founder = newFounder;\n', '    }\n', '\n', '    /**\n', '     * ERC 20 Standard Token interface transfer function\n', '     *\n', '     * Prevent transfers until freeze period is over.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (msg.sender != founder) revert();\n', '\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    // forward all eth to founder\n', '    function() payable {\n', '        if (!founder.call.value(msg.value)()) revert(); \n', '    }\n', '\n', '    // only owner can kill\n', '    function kill() { \n', '        if (msg.sender == founder) {\n', '            suicide(founder); \n', '        }\n', '    }\n', '\n', '}']
