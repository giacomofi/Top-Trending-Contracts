['pragma solidity ^0.4.18;\n', 'interface token {\n', '    function transfer(address receiver, uint amount) public;                                    // Transfer function for transferring tokens\n', '    function getBalanceOf(address _owner) public constant returns (uint256 balance);            // Getting the balance from the main contract\n', '}\n', 'contract Presale {\n', '    address public beneficiary;                     // Who is the beneficiary of this contract\n', '    uint public fundingLimit;                       // The maximum ether allowed in this sale\n', '    uint public amountRaised;                       // The total amount raised during presale\n', '    uint public deadline;                           // The deadline for this contract\n', '    uint public tokensPerEther;                     // Tokens received as a reward of participating in this pre sale\n', '    uint public minFinnRequired;                    // Minimum Finney needed to participate in this pre sale\n', '    uint public startTime;                          // StartTime for the presale\n', '    token public tokenReward;                       // The token contract it refers too\n', '    \n', '    mapping(address => uint256) public balanceOf;   // Mapping of all balances in this contract\n', '    event FundTransfer(address backer, uint amount, bool isContribution);   // Event of fund transfer to show each transaction\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Setup the owner\n', '     */\n', '    function Presale(\n', '        address ifSuccessfulSendTo,\n', '        uint fundingLimitInEthers,\n', '        uint durationInMinutes,\n', '        uint tokensPerEthereum,\n', '        uint minFinneyRequired,\n', '        uint presaleStartTime,\n', '        address addressOfTokenUsedAsReward\n', '    ) public {\n', '        beneficiary = ifSuccessfulSendTo;\n', '        fundingLimit = fundingLimitInEthers * 1 ether;\n', '        deadline = presaleStartTime + durationInMinutes * 1 minutes;\n', '        tokensPerEther = tokensPerEthereum;\n', '        minFinnRequired = minFinneyRequired * 1 finney;\n', '        startTime = presaleStartTime;\n', '        tokenReward = token(addressOfTokenUsedAsReward);\n', '    }\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function () payable public {\n', '        require(startTime <= now);\n', '        require(amountRaised < fundingLimit);\n', '        require(msg.value >= minFinnRequired);\n', '        \n', '        uint amount = msg.value;\n', '        balanceOf[msg.sender] += amount;\n', '        amountRaised += amount;\n', '        tokenReward.transfer(msg.sender, amount * tokensPerEther);\n', '        FundTransfer(msg.sender, amount, true);\n', '    }\n', '    /**\n', '     * Withdraw the funds\n', '     *\n', '     * Checks to see if goal or time limit has been reached, and if so, and the funding goal was reached,\n', '     * sends the entire amount to the beneficiary. If goal was not reached, each contributor can withdraw\n', '     * the amount they contributed.\n', '     */\n', '    function withdrawFundBeneficiary() public {\n', '        require(now >= deadline);\n', '        require(beneficiary == msg.sender);\n', '        uint remaining = tokenReward.getBalanceOf(this);\n', '        if(remaining > 0) {\n', '            tokenReward.transfer(beneficiary, remaining);\n', '        }\n', '        if (beneficiary.send(amountRaised)) {\n', '            FundTransfer(beneficiary, amountRaised, false);\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', 'interface token {\n', '    function transfer(address receiver, uint amount) public;                                    // Transfer function for transferring tokens\n', '    function getBalanceOf(address _owner) public constant returns (uint256 balance);            // Getting the balance from the main contract\n', '}\n', 'contract Presale {\n', '    address public beneficiary;                     // Who is the beneficiary of this contract\n', '    uint public fundingLimit;                       // The maximum ether allowed in this sale\n', '    uint public amountRaised;                       // The total amount raised during presale\n', '    uint public deadline;                           // The deadline for this contract\n', '    uint public tokensPerEther;                     // Tokens received as a reward of participating in this pre sale\n', '    uint public minFinnRequired;                    // Minimum Finney needed to participate in this pre sale\n', '    uint public startTime;                          // StartTime for the presale\n', '    token public tokenReward;                       // The token contract it refers too\n', '    \n', '    mapping(address => uint256) public balanceOf;   // Mapping of all balances in this contract\n', '    event FundTransfer(address backer, uint amount, bool isContribution);   // Event of fund transfer to show each transaction\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Setup the owner\n', '     */\n', '    function Presale(\n', '        address ifSuccessfulSendTo,\n', '        uint fundingLimitInEthers,\n', '        uint durationInMinutes,\n', '        uint tokensPerEthereum,\n', '        uint minFinneyRequired,\n', '        uint presaleStartTime,\n', '        address addressOfTokenUsedAsReward\n', '    ) public {\n', '        beneficiary = ifSuccessfulSendTo;\n', '        fundingLimit = fundingLimitInEthers * 1 ether;\n', '        deadline = presaleStartTime + durationInMinutes * 1 minutes;\n', '        tokensPerEther = tokensPerEthereum;\n', '        minFinnRequired = minFinneyRequired * 1 finney;\n', '        startTime = presaleStartTime;\n', '        tokenReward = token(addressOfTokenUsedAsReward);\n', '    }\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function () payable public {\n', '        require(startTime <= now);\n', '        require(amountRaised < fundingLimit);\n', '        require(msg.value >= minFinnRequired);\n', '        \n', '        uint amount = msg.value;\n', '        balanceOf[msg.sender] += amount;\n', '        amountRaised += amount;\n', '        tokenReward.transfer(msg.sender, amount * tokensPerEther);\n', '        FundTransfer(msg.sender, amount, true);\n', '    }\n', '    /**\n', '     * Withdraw the funds\n', '     *\n', '     * Checks to see if goal or time limit has been reached, and if so, and the funding goal was reached,\n', '     * sends the entire amount to the beneficiary. If goal was not reached, each contributor can withdraw\n', '     * the amount they contributed.\n', '     */\n', '    function withdrawFundBeneficiary() public {\n', '        require(now >= deadline);\n', '        require(beneficiary == msg.sender);\n', '        uint remaining = tokenReward.getBalanceOf(this);\n', '        if(remaining > 0) {\n', '            tokenReward.transfer(beneficiary, remaining);\n', '        }\n', '        if (beneficiary.send(amountRaised)) {\n', '            FundTransfer(beneficiary, amountRaised, false);\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '}']
