['pragma solidity ^0.4.18;\n', '\n', 'contract Utils {\n', '\n', '    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n', '    uint  constant internal PRECISION = (10**18);\n', '    uint  constant internal MAX_QTY   = (10**28); // 10B tokens\n', '    uint  constant internal MAX_RATE  = (PRECISION * 10**6); // up to 1M tokens per ETH\n', '    uint  constant internal MAX_DECIMALS = 18;\n', '    uint  constant internal ETH_DECIMALS = 18;\n', '    mapping(address=>uint) internal decimals;\n', '\n', '    function setDecimals(ERC20 token) internal {\n', '        if (token == ETH_TOKEN_ADDRESS) decimals[token] = ETH_DECIMALS;\n', '        else decimals[token] = token.decimals();\n', '    }\n', '\n', '    function getDecimals(ERC20 token) internal view returns(uint) {\n', '        if (token == ETH_TOKEN_ADDRESS) return ETH_DECIMALS; // save storage access\n', '        uint tokenDecimals = decimals[token];\n', '        // technically, there might be token with decimals 0\n', '        // moreover, very possible that old tokens have decimals 0\n', '        // these tokens will just have higher gas fees.\n', '        if(tokenDecimals == 0) return token.decimals();\n', '\n', '        return tokenDecimals;\n', '    }\n', '\n', '    function calcDstQty(uint srcQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n', '        require(srcQty <= MAX_QTY);\n', '        require(rate <= MAX_RATE);\n', '\n', '        if (dstDecimals >= srcDecimals) {\n', '            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n', '            return (srcQty * rate * (10**(dstDecimals - srcDecimals))) / PRECISION;\n', '        } else {\n', '            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n', '            return (srcQty * rate) / (PRECISION * (10**(srcDecimals - dstDecimals)));\n', '        }\n', '    }\n', '\n', '    function calcSrcQty(uint dstQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n', '        require(dstQty <= MAX_QTY);\n', '        require(rate <= MAX_RATE);\n', '\n', '        //source quantity is rounded up. to avoid dest quantity being too low.\n', '        uint numerator;\n', '        uint denominator;\n', '        if (srcDecimals >= dstDecimals) {\n', '            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n', '            numerator = (PRECISION * dstQty * (10**(srcDecimals - dstDecimals)));\n', '            denominator = rate;\n', '        } else {\n', '            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n', '            numerator = (PRECISION * dstQty);\n', '            denominator = (rate * (10**(dstDecimals - srcDecimals)));\n', '        }\n', '        return (numerator + denominator - 1) / denominator; //avoid rounding down errors\n', '    }\n', '}\n', '\n', 'interface FeeBurnerInterface {\n', '    function handleFees (uint tradeWeiAmount, address reserve, address wallet) public returns(bool);\n', '}\n', '\n', 'interface KyberReserveInterface {\n', '\n', '    function trade(\n', '        ERC20 srcToken,\n', '        uint srcAmount,\n', '        ERC20 destToken,\n', '        address destAddress,\n', '        uint conversionRate,\n', '        bool validate\n', '    )\n', '        public\n', '        payable\n', '        returns(bool);\n', '\n', '    function getConversionRate(ERC20 src, ERC20 dest, uint srcQty, uint blockNumber) public view returns(uint);\n', '}\n', '\n', 'interface ERC20 {\n', '    function totalSupply() public view returns (uint supply);\n', '    function balanceOf(address _owner) public view returns (uint balance);\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '    function approve(address _spender, uint _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint remaining);\n', '    function decimals() public view returns(uint digits);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', 'interface ExpectedRateInterface {\n', '    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) public view\n', '        returns (uint expectedRate, uint slippageRate);\n', '}\n', '\n', 'contract PermissionGroups {\n', '\n', '    address public admin;\n', '    address public pendingAdmin;\n', '    mapping(address=>bool) internal operators;\n', '    mapping(address=>bool) internal alerters;\n', '    address[] internal operatorsGroup;\n', '    address[] internal alertersGroup;\n', '    uint constant internal MAX_GROUP_SIZE = 50;\n', '\n', '    function PermissionGroups() public {\n', '        admin = msg.sender;\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOperator() {\n', '        require(operators[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAlerter() {\n', '        require(alerters[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function getOperators () external view returns(address[]) {\n', '        return operatorsGroup;\n', '    }\n', '\n', '    function getAlerters () external view returns(address[]) {\n', '        return alertersGroup;\n', '    }\n', '\n', '    event TransferAdminPending(address pendingAdmin);\n', '\n', '    /**\n', '     * @dev Allows the current admin to set the pendingAdmin address.\n', '     * @param newAdmin The address to transfer ownership to.\n', '     */\n', '    function transferAdmin(address newAdmin) public onlyAdmin {\n', '        require(newAdmin != address(0));\n', '        TransferAdminPending(pendingAdmin);\n', '        pendingAdmin = newAdmin;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\n', '     * @param newAdmin The address to transfer ownership to.\n', '     */\n', '    function transferAdminQuickly(address newAdmin) public onlyAdmin {\n', '        require(newAdmin != address(0));\n', '        TransferAdminPending(newAdmin);\n', '        AdminClaimed(newAdmin, admin);\n', '        admin = newAdmin;\n', '    }\n', '\n', '    event AdminClaimed( address newAdmin, address previousAdmin);\n', '\n', '    /**\n', '     * @dev Allows the pendingAdmin address to finalize the change admin process.\n', '     */\n', '    function claimAdmin() public {\n', '        require(pendingAdmin == msg.sender);\n', '        AdminClaimed(pendingAdmin, admin);\n', '        admin = pendingAdmin;\n', '        pendingAdmin = address(0);\n', '    }\n', '\n', '    event AlerterAdded (address newAlerter, bool isAdd);\n', '\n', '    function addAlerter(address newAlerter) public onlyAdmin {\n', '        require(!alerters[newAlerter]); // prevent duplicates.\n', '        require(alertersGroup.length < MAX_GROUP_SIZE);\n', '\n', '        AlerterAdded(newAlerter, true);\n', '        alerters[newAlerter] = true;\n', '        alertersGroup.push(newAlerter);\n', '    }\n', '\n', '    function removeAlerter (address alerter) public onlyAdmin {\n', '        require(alerters[alerter]);\n', '        alerters[alerter] = false;\n', '\n', '        for (uint i = 0; i < alertersGroup.length; ++i) {\n', '            if (alertersGroup[i] == alerter) {\n', '                alertersGroup[i] = alertersGroup[alertersGroup.length - 1];\n', '                alertersGroup.length--;\n', '                AlerterAdded(alerter, false);\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    event OperatorAdded(address newOperator, bool isAdd);\n', '\n', '    function addOperator(address newOperator) public onlyAdmin {\n', '        require(!operators[newOperator]); // prevent duplicates.\n', '        require(operatorsGroup.length < MAX_GROUP_SIZE);\n', '\n', '        OperatorAdded(newOperator, true);\n', '        operators[newOperator] = true;\n', '        operatorsGroup.push(newOperator);\n', '    }\n', '\n', '    function removeOperator (address operator) public onlyAdmin {\n', '        require(operators[operator]);\n', '        operators[operator] = false;\n', '\n', '        for (uint i = 0; i < operatorsGroup.length; ++i) {\n', '            if (operatorsGroup[i] == operator) {\n', '                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];\n', '                operatorsGroup.length -= 1;\n', '                OperatorAdded(operator, false);\n', '                break;\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'contract WhiteListInterface {\n', '    function getUserCapInWei(address user) external view returns (uint userCapWei);\n', '}\n', '\n', 'contract Withdrawable is PermissionGroups {\n', '\n', '    event TokenWithdraw(ERC20 token, uint amount, address sendTo);\n', '\n', '    /**\n', '     * @dev Withdraw all ERC20 compatible tokens\n', '     * @param token ERC20 The address of the token contract\n', '     */\n', '    function withdrawToken(ERC20 token, uint amount, address sendTo) external onlyAdmin {\n', '        require(token.transfer(sendTo, amount));\n', '        TokenWithdraw(token, amount, sendTo);\n', '    }\n', '\n', '    event EtherWithdraw(uint amount, address sendTo);\n', '\n', '    /**\n', '     * @dev Withdraw Ethers\n', '     */\n', '    function withdrawEther(uint amount, address sendTo) external onlyAdmin {\n', '        sendTo.transfer(amount);\n', '        EtherWithdraw(amount, sendTo);\n', '    }\n', '}\n', '\n', 'contract KyberNetwork is Withdrawable, Utils {\n', '\n', '    uint public negligibleRateDiff = 10; // basic rate steps will be in 0.01%\n', '    KyberReserveInterface[] public reserves;\n', '    mapping(address=>bool) public isReserve;\n', '    WhiteListInterface public whiteListContract;\n', '    ExpectedRateInterface public expectedRateContract;\n', '    FeeBurnerInterface    public feeBurnerContract;\n', '    uint                  public maxGasPrice = 50 * 1000 * 1000 * 1000; // 50 gwei\n', '    bool                  public enabled = false; // network is enabled\n', '    mapping(bytes32=>uint) public info; // this is only a UI field for external app.\n', '    mapping(address=>mapping(bytes32=>bool)) public perReserveListedPairs;\n', '\n', '    function KyberNetwork(address _admin) public {\n', '        require(_admin != address(0));\n', '        admin = _admin;\n', '    }\n', '\n', '    event EtherReceival(address indexed sender, uint amount);\n', '\n', '    /* solhint-disable no-complex-fallback */\n', '    function() public payable {\n', '        require(isReserve[msg.sender]);\n', '        EtherReceival(msg.sender, msg.value);\n', '    }\n', '    /* solhint-enable no-complex-fallback */\n', '\n', '    event ExecuteTrade(address indexed sender, ERC20 src, ERC20 dest, uint actualSrcAmount, uint actualDestAmount);\n', '\n', '    /// @notice use token address ETH_TOKEN_ADDRESS for ether\n', '    /// @dev makes a trade between src and dest token and send dest token to destAddress\n', '    /// @param src Src token\n', '    /// @param srcAmount amount of src tokens\n', '    /// @param dest   Destination token\n', '    /// @param destAddress Address to send tokens to\n', '    /// @param maxDestAmount A limit on the amount of dest tokens\n', '    /// @param minConversionRate The minimal conversion rate. If actual rate is lower, trade is canceled.\n', '    /// @param walletId is the wallet ID to send part of the fees\n', '    /// @return amount of actual dest tokens\n', '    function trade(\n', '        ERC20 src,\n', '        uint srcAmount,\n', '        ERC20 dest,\n', '        address destAddress,\n', '        uint maxDestAmount,\n', '        uint minConversionRate,\n', '        address walletId\n', '    )\n', '        public\n', '        payable\n', '        returns(uint)\n', '    {\n', '        require(enabled);\n', '\n', '        uint userSrcBalanceBefore;\n', '        uint userSrcBalanceAfter;\n', '        uint userDestBalanceBefore;\n', '        uint userDestBalanceAfter;\n', '\n', '        userSrcBalanceBefore = getBalance(src, msg.sender);\n', '        if (src == ETH_TOKEN_ADDRESS)\n', '            userSrcBalanceBefore += msg.value;\n', '        userDestBalanceBefore = getBalance(dest, destAddress);\n', '\n', '        uint actualDestAmount = doTrade(src,\n', '                                        srcAmount,\n', '                                        dest,\n', '                                        destAddress,\n', '                                        maxDestAmount,\n', '                                        minConversionRate,\n', '                                        walletId\n', '                                        );\n', '        require(actualDestAmount > 0);\n', '\n', '        userSrcBalanceAfter = getBalance(src, msg.sender);\n', '        userDestBalanceAfter = getBalance(dest, destAddress);\n', '\n', '        require(userSrcBalanceAfter <= userSrcBalanceBefore);\n', '        require(userDestBalanceAfter >= userDestBalanceBefore);\n', '\n', '        require((userDestBalanceAfter - userDestBalanceBefore) >=\n', '            calcDstQty((userSrcBalanceBefore - userSrcBalanceAfter), getDecimals(src), getDecimals(dest),\n', '                minConversionRate));\n', '\n', '        return actualDestAmount;\n', '    }\n', '\n', '    event AddReserveToNetwork(KyberReserveInterface reserve, bool add);\n', '\n', '    /// @notice can be called only by admin\n', '    /// @dev add or deletes a reserve to/from the network.\n', '    /// @param reserve The reserve address.\n', '    /// @param add If true, the add reserve. Otherwise delete reserve.\n', '    function addReserve(KyberReserveInterface reserve, bool add) public onlyAdmin {\n', '\n', '        if (add) {\n', '            require(!isReserve[reserve]);\n', '            reserves.push(reserve);\n', '            isReserve[reserve] = true;\n', '            AddReserveToNetwork(reserve, true);\n', '        } else {\n', '            isReserve[reserve] = false;\n', '            // will have trouble if more than 50k reserves...\n', '            for (uint i = 0; i < reserves.length; i++) {\n', '                if (reserves[i] == reserve) {\n', '                    reserves[i] = reserves[reserves.length - 1];\n', '                    reserves.length--;\n', '                    AddReserveToNetwork(reserve, false);\n', '                    break;\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    event ListReservePairs(address reserve, ERC20 src, ERC20 dest, bool add);\n', '\n', '    /// @notice can be called only by admin\n', '    /// @dev allow or prevent a specific reserve to trade a pair of tokens\n', '    /// @param reserve The reserve address.\n', '    /// @param src Src token\n', '    /// @param dest Destination token\n', '    /// @param add If true then enable trade, otherwise delist pair.\n', '    function listPairForReserve(address reserve, ERC20 src, ERC20 dest, bool add) public onlyAdmin {\n', '        (perReserveListedPairs[reserve])[keccak256(src, dest)] = add;\n', '\n', '        if (src != ETH_TOKEN_ADDRESS) {\n', '            if (add) {\n', '                src.approve(reserve, 2**255); // approve infinity\n', '            } else {\n', '                src.approve(reserve, 0);\n', '            }\n', '        }\n', '\n', '        setDecimals(src);\n', '        setDecimals(dest);\n', '\n', '        ListReservePairs(reserve, src, dest, add);\n', '    }\n', '\n', '    function setParams(\n', '        WhiteListInterface    _whiteList,\n', '        ExpectedRateInterface _expectedRate,\n', '        FeeBurnerInterface    _feeBurner,\n', '        uint                  _maxGasPrice,\n', '        uint                  _negligibleRateDiff\n', '    )\n', '        public\n', '        onlyAdmin\n', '    {\n', '        require(_whiteList != address(0));\n', '        require(_feeBurner != address(0));\n', '        require(_expectedRate != address(0));\n', '        require(_negligibleRateDiff <= 100 * 100); // at most 100%\n', '\n', '        whiteListContract = _whiteList;\n', '        expectedRateContract = _expectedRate;\n', '        feeBurnerContract = _feeBurner;\n', '        maxGasPrice = _maxGasPrice;\n', '        negligibleRateDiff = _negligibleRateDiff;\n', '    }\n', '\n', '    function setEnable(bool _enable) public onlyAdmin {\n', '        if (_enable) {\n', '            require(whiteListContract != address(0));\n', '            require(feeBurnerContract != address(0));\n', '            require(expectedRateContract != address(0));\n', '        }\n', '        enabled = _enable;\n', '    }\n', '\n', '    function setInfo(bytes32 field, uint value) public onlyOperator {\n', '        info[field] = value;\n', '    }\n', '\n', '    /// @dev returns number of reserves\n', '    /// @return number of reserves\n', '    function getNumReserves() public view returns(uint) {\n', '        return reserves.length;\n', '    }\n', '\n', '    /// @notice should be called off chain with as much gas as needed\n', '    /// @dev get an array of all reserves\n', '    /// @return An array of all reserves\n', '    function getReserves() public view returns(KyberReserveInterface[]) {\n', '        return reserves;\n', '    }\n', '\n', '    /// @dev get the balance of a user.\n', '    /// @param token The token type\n', '    /// @return The balance\n', '    function getBalance(ERC20 token, address user) public view returns(uint) {\n', '        if (token == ETH_TOKEN_ADDRESS)\n', '            return user.balance;\n', '        else\n', '            return token.balanceOf(user);\n', '    }\n', '\n', '    /// @notice use token address ETH_TOKEN_ADDRESS for ether\n', '    /// @dev best conversion rate for a pair of tokens, if number of reserves have small differences. randomize\n', '    /// @param src Src token\n', '    /// @param dest Destination token\n', '    /* solhint-disable code-complexity */\n', '    function findBestRate(ERC20 src, ERC20 dest, uint srcQty) public view returns(uint, uint) {\n', '        uint bestRate = 0;\n', '        uint bestReserve = 0;\n', '        uint numRelevantReserves = 0;\n', '        uint numReserves = reserves.length;\n', '        uint[] memory rates = new uint[](numReserves);\n', '        uint[] memory reserveCandidates = new uint[](numReserves);\n', '\n', '        for (uint i = 0; i < numReserves; i++) {\n', '            //list all reserves that have this token.\n', '            if (!(perReserveListedPairs[reserves[i]])[keccak256(src, dest)]) continue;\n', '\n', '            rates[i] = reserves[i].getConversionRate(src, dest, srcQty, block.number);\n', '\n', '            if (rates[i] > bestRate) {\n', '                //best rate is highest rate\n', '                bestRate = rates[i];\n', '            }\n', '        }\n', '\n', '        if (bestRate > 0) {\n', '            uint random = 0;\n', '            uint smallestRelevantRate = (bestRate * 10000) / (10000 + negligibleRateDiff);\n', '\n', '            for (i = 0; i < numReserves; i++) {\n', '                if (rates[i] >= smallestRelevantRate) {\n', '                    reserveCandidates[numRelevantReserves++] = i;\n', '                }\n', '            }\n', '\n', '            if (numRelevantReserves > 1) {\n', '                //when encountering small rate diff from bestRate. draw from relevant reserves\n', '                random = uint(block.blockhash(block.number-1)) % numRelevantReserves;\n', '            }\n', '\n', '            bestReserve = reserveCandidates[random];\n', '            bestRate = rates[bestReserve];\n', '        }\n', '\n', '        return (bestReserve, bestRate);\n', '    }\n', '    /* solhint-enable code-complexity */\n', '\n', '    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty)\n', '        public view\n', '        returns (uint expectedRate, uint slippageRate)\n', '    {\n', '        require(expectedRateContract != address(0));\n', '        return expectedRateContract.getExpectedRate(src, dest, srcQty);\n', '    }\n', '\n', '    function getUserCapInWei(address user) public view returns(uint) {\n', '        return whiteListContract.getUserCapInWei(user);\n', '    }\n', '\n', '    function doTrade(\n', '        ERC20 src,\n', '        uint srcAmount,\n', '        ERC20 dest,\n', '        address destAddress,\n', '        uint maxDestAmount,\n', '        uint minConversionRate,\n', '        address walletId\n', '    )\n', '        internal\n', '        returns(uint)\n', '    {\n', '        require(tx.gasprice <= maxGasPrice);\n', '        require(validateTradeInput(src, srcAmount, destAddress));\n', '\n', '        uint reserveInd;\n', '        uint rate;\n', '\n', '        (reserveInd, rate) = findBestRate(src, dest, srcAmount);\n', '        KyberReserveInterface theReserve = reserves[reserveInd];\n', '        require(rate > 0);\n', '        require(rate < MAX_RATE);\n', '        require(rate >= minConversionRate);\n', '\n', '        uint actualSrcAmount = srcAmount;\n', '        uint actualDestAmount = calcDestAmount(src, dest, actualSrcAmount, rate);\n', '        if (actualDestAmount > maxDestAmount) {\n', '            actualDestAmount = maxDestAmount;\n', '            actualSrcAmount = calcSrcAmount(src, dest, actualDestAmount, rate);\n', '            require(actualSrcAmount <= srcAmount);\n', '        }\n', '\n', '        // do the trade\n', '        // verify trade size is smaller than user cap\n', '        uint ethAmount;\n', '        if (src == ETH_TOKEN_ADDRESS) {\n', '            ethAmount = actualSrcAmount;\n', '        } else {\n', '            ethAmount = actualDestAmount;\n', '        }\n', '\n', '        require(ethAmount <= getUserCapInWei(msg.sender));\n', '        require(doReserveTrade(\n', '                src,\n', '                actualSrcAmount,\n', '                dest,\n', '                destAddress,\n', '                actualDestAmount,\n', '                theReserve,\n', '                rate,\n', '                true));\n', '\n', '        if ((actualSrcAmount < srcAmount) && (src == ETH_TOKEN_ADDRESS)) {\n', '            msg.sender.transfer(srcAmount - actualSrcAmount);\n', '        }\n', '\n', '        require(feeBurnerContract.handleFees(ethAmount, theReserve, walletId));\n', '\n', '        ExecuteTrade(msg.sender, src, dest, actualSrcAmount, actualDestAmount);\n', '        return actualDestAmount;\n', '    }\n', '\n', '    /// @notice use token address ETH_TOKEN_ADDRESS for ether\n', '    /// @dev do one trade with a reserve\n', '    /// @param src Src token\n', '    /// @param amount amount of src tokens\n', '    /// @param dest   Destination token\n', '    /// @param destAddress Address to send tokens to\n', '    /// @param reserve Reserve to use\n', '    /// @param validate If true, additional validations are applicable\n', '    /// @return true if trade is successful\n', '    function doReserveTrade(\n', '        ERC20 src,\n', '        uint amount,\n', '        ERC20 dest,\n', '        address destAddress,\n', '        uint expectedDestAmount,\n', '        KyberReserveInterface reserve,\n', '        uint conversionRate,\n', '        bool validate\n', '    )\n', '        internal\n', '        returns(bool)\n', '    {\n', '        uint callValue = 0;\n', '\n', '        if (src == ETH_TOKEN_ADDRESS) {\n', '            callValue = amount;\n', '        } else {\n', '            // take src tokens to this contract\n', '            src.transferFrom(msg.sender, this, amount);\n', '        }\n', '\n', '        // reserve sends tokens/eth to network. network sends it to destination\n', '        require(reserve.trade.value(callValue)(src, amount, dest, this, conversionRate, validate));\n', '\n', '        if (dest == ETH_TOKEN_ADDRESS) {\n', '            destAddress.transfer(expectedDestAmount);\n', '        } else {\n', '            require(dest.transfer(destAddress, expectedDestAmount));\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function calcDestAmount(ERC20 src, ERC20 dest, uint srcAmount, uint rate) internal view returns(uint) {\n', '        return calcDstQty(srcAmount, getDecimals(src), getDecimals(dest), rate);\n', '    }\n', '\n', '    function calcSrcAmount(ERC20 src, ERC20 dest, uint destAmount, uint rate) internal view returns(uint) {\n', '        return calcSrcQty(destAmount, getDecimals(src), getDecimals(dest), rate);\n', '    }\n', '\n', '    /// @notice use token address ETH_TOKEN_ADDRESS for ether\n', '    /// @dev checks that user sent ether/tokens to contract before trade\n', '    /// @param src Src token\n', '    /// @param srcAmount amount of src tokens\n', '    /// @return true if input is valid\n', '    function validateTradeInput(ERC20 src, uint srcAmount, address destAddress) internal view returns(bool) {\n', '        if ((srcAmount >= MAX_QTY) || (srcAmount == 0) || (destAddress == 0))\n', '            return false;\n', '\n', '        if (src == ETH_TOKEN_ADDRESS) {\n', '            if (msg.value != srcAmount)\n', '                return false;\n', '        } else {\n', '            if ((msg.value != 0) || (src.allowance(msg.sender, this) < srcAmount))\n', '                return false;\n', '        }\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '/// @title Contract for a burnable ERC\n', '/// @dev From https://github.com/KyberNetwork/smart-contracts/blob/master/contracts/ERC20Interface.sol\n', '/// @dev Added burn function\n', 'interface BurnableErc20 {\n', '    function totalSupply() public view returns (uint supply);\n', '    function balanceOf(address _owner) public view returns (uint balance);\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '    function approve(address _spender, uint _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint remaining);\n', '    function decimals() public view returns(uint digits);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '    function burn(uint _value) public;\n', '}\n', '\n', '\n', '/// @title A contract to burn ERC20 tokens from ETH on the contract\n', '/// @notice Sends the ETH on the contract to kyber for conversion to ERC20\n', '///  The converted ERC20 is then burned\n', '/// @dev Used to burn the REQ fees. Request fees are paid in ETH. The ETH is sent by the \n', '///  currency contracts to this burn contract. When the burn contract is called, it converts\n', '///  the ETH to REQ and burn the REQ\n', '/// @author Request Network\n', 'contract Burner {\n', '    /// Kyber contract that will be used for the conversion\n', '    KyberNetwork public kyberContract;\n', '\n', '    // Contract for the ERC20\n', '    BurnableErc20 public destErc20;\n', '\n', '    /// @param _destErc20 Destination token\n', '    /// @param _kyberContract Kyber contract to use\n', '    function Burner(address _destErc20, address _kyberContract) public {\n', '        // Check inputs\n', '        require(_destErc20 != address(0));\n', '        require(_kyberContract != address(0));\n', '\n', '        destErc20 = BurnableErc20(_destErc20);\n', '        kyberContract = KyberNetwork(_kyberContract);\n', '    }\n', '    \n', '    /// Fallback function to receive the ETH to burn later\n', '    function() public payable { }\n', '\n', '    /// @dev Main function. Trade the ETH for ERC20 and burn them\n', '    /// @param maxSrcAmount Maximum amount of ETH to convert. If set to 0, all ETH on the\n', '    ///  contract will be burned\n', '    /// @param maxDestAmount A limit on the amount of converted ERC20 tokens. Default value is MAX_UINT\n', '    /// @param minConversionRate The minimal conversion rate. Default value is 1 (market rate)\n', '    /// @return amount of dest ERC20 tokens burned\n', '    function burn(uint maxSrcAmount, uint maxDestAmount, uint minConversionRate)\n', '        public\n', '        returns(uint)\n', '    {\n', '        // ETH to convert on Kyber, by default the amount of ETH on the contract\n', '        // If maxSrcAmount is defined, ethToConvert = min(balance on contract, maxSrcAmount)\n', '        uint ethToConvert = this.balance;\n', '        if (maxSrcAmount != 0 && maxSrcAmount < ethToConvert) {\n', '            ethToConvert = maxSrcAmount;\n', '        }\n', '\n', '        // Set maxDestAmount to MAX_UINT if not sent as parameter\n', '        if (maxDestAmount == 0) {\n', '            maxDestAmount = 2**256 - 1;\n', '        }\n', '\n', '        // Set minConversionRate to 1 if not sent as parameter\n', '        // A value of 1 will execute the trade according to market price in the time of the transaction confirmation\n', '        if (minConversionRate == 0) {\n', '            minConversionRate = 1;\n', '        }\n', '\n', '        // Convert the ETH to ERC20\n', '        // erc20ToBurn is the amount of the ERC20 tokens converted by Kyber that will be burned\n', '        uint erc20ToBurn = kyberContract.trade.value(ethToConvert)(\n', '            // Source. From Kyber docs, this value denotes ETH\n', '            ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee),\n', '            \n', '            // Source amount\n', '            ethToConvert,\n', '\n', '            // Destination. Downcast BurnableErc20 to ERC20\n', '            ERC20(destErc20),\n', '            \n', '            // destAddress: this contract\n', '            this,\n', '            \n', '            // maxDestAmount\n', '            maxDestAmount,\n', '            \n', '            // minConversionRate \n', '            minConversionRate,\n', '            \n', '            // walletId\n', '            0\n', '        );\n', '\n', '        // Burn the converted ERC20 tokens\n', '        destErc20.burn(erc20ToBurn);\n', '\n', '        return erc20ToBurn;\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'contract Utils {\n', '\n', '    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n', '    uint  constant internal PRECISION = (10**18);\n', '    uint  constant internal MAX_QTY   = (10**28); // 10B tokens\n', '    uint  constant internal MAX_RATE  = (PRECISION * 10**6); // up to 1M tokens per ETH\n', '    uint  constant internal MAX_DECIMALS = 18;\n', '    uint  constant internal ETH_DECIMALS = 18;\n', '    mapping(address=>uint) internal decimals;\n', '\n', '    function setDecimals(ERC20 token) internal {\n', '        if (token == ETH_TOKEN_ADDRESS) decimals[token] = ETH_DECIMALS;\n', '        else decimals[token] = token.decimals();\n', '    }\n', '\n', '    function getDecimals(ERC20 token) internal view returns(uint) {\n', '        if (token == ETH_TOKEN_ADDRESS) return ETH_DECIMALS; // save storage access\n', '        uint tokenDecimals = decimals[token];\n', '        // technically, there might be token with decimals 0\n', '        // moreover, very possible that old tokens have decimals 0\n', '        // these tokens will just have higher gas fees.\n', '        if(tokenDecimals == 0) return token.decimals();\n', '\n', '        return tokenDecimals;\n', '    }\n', '\n', '    function calcDstQty(uint srcQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n', '        require(srcQty <= MAX_QTY);\n', '        require(rate <= MAX_RATE);\n', '\n', '        if (dstDecimals >= srcDecimals) {\n', '            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n', '            return (srcQty * rate * (10**(dstDecimals - srcDecimals))) / PRECISION;\n', '        } else {\n', '            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n', '            return (srcQty * rate) / (PRECISION * (10**(srcDecimals - dstDecimals)));\n', '        }\n', '    }\n', '\n', '    function calcSrcQty(uint dstQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n', '        require(dstQty <= MAX_QTY);\n', '        require(rate <= MAX_RATE);\n', '\n', '        //source quantity is rounded up. to avoid dest quantity being too low.\n', '        uint numerator;\n', '        uint denominator;\n', '        if (srcDecimals >= dstDecimals) {\n', '            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n', '            numerator = (PRECISION * dstQty * (10**(srcDecimals - dstDecimals)));\n', '            denominator = rate;\n', '        } else {\n', '            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n', '            numerator = (PRECISION * dstQty);\n', '            denominator = (rate * (10**(dstDecimals - srcDecimals)));\n', '        }\n', '        return (numerator + denominator - 1) / denominator; //avoid rounding down errors\n', '    }\n', '}\n', '\n', 'interface FeeBurnerInterface {\n', '    function handleFees (uint tradeWeiAmount, address reserve, address wallet) public returns(bool);\n', '}\n', '\n', 'interface KyberReserveInterface {\n', '\n', '    function trade(\n', '        ERC20 srcToken,\n', '        uint srcAmount,\n', '        ERC20 destToken,\n', '        address destAddress,\n', '        uint conversionRate,\n', '        bool validate\n', '    )\n', '        public\n', '        payable\n', '        returns(bool);\n', '\n', '    function getConversionRate(ERC20 src, ERC20 dest, uint srcQty, uint blockNumber) public view returns(uint);\n', '}\n', '\n', 'interface ERC20 {\n', '    function totalSupply() public view returns (uint supply);\n', '    function balanceOf(address _owner) public view returns (uint balance);\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '    function approve(address _spender, uint _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint remaining);\n', '    function decimals() public view returns(uint digits);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', 'interface ExpectedRateInterface {\n', '    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) public view\n', '        returns (uint expectedRate, uint slippageRate);\n', '}\n', '\n', 'contract PermissionGroups {\n', '\n', '    address public admin;\n', '    address public pendingAdmin;\n', '    mapping(address=>bool) internal operators;\n', '    mapping(address=>bool) internal alerters;\n', '    address[] internal operatorsGroup;\n', '    address[] internal alertersGroup;\n', '    uint constant internal MAX_GROUP_SIZE = 50;\n', '\n', '    function PermissionGroups() public {\n', '        admin = msg.sender;\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOperator() {\n', '        require(operators[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAlerter() {\n', '        require(alerters[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function getOperators () external view returns(address[]) {\n', '        return operatorsGroup;\n', '    }\n', '\n', '    function getAlerters () external view returns(address[]) {\n', '        return alertersGroup;\n', '    }\n', '\n', '    event TransferAdminPending(address pendingAdmin);\n', '\n', '    /**\n', '     * @dev Allows the current admin to set the pendingAdmin address.\n', '     * @param newAdmin The address to transfer ownership to.\n', '     */\n', '    function transferAdmin(address newAdmin) public onlyAdmin {\n', '        require(newAdmin != address(0));\n', '        TransferAdminPending(pendingAdmin);\n', '        pendingAdmin = newAdmin;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\n', '     * @param newAdmin The address to transfer ownership to.\n', '     */\n', '    function transferAdminQuickly(address newAdmin) public onlyAdmin {\n', '        require(newAdmin != address(0));\n', '        TransferAdminPending(newAdmin);\n', '        AdminClaimed(newAdmin, admin);\n', '        admin = newAdmin;\n', '    }\n', '\n', '    event AdminClaimed( address newAdmin, address previousAdmin);\n', '\n', '    /**\n', '     * @dev Allows the pendingAdmin address to finalize the change admin process.\n', '     */\n', '    function claimAdmin() public {\n', '        require(pendingAdmin == msg.sender);\n', '        AdminClaimed(pendingAdmin, admin);\n', '        admin = pendingAdmin;\n', '        pendingAdmin = address(0);\n', '    }\n', '\n', '    event AlerterAdded (address newAlerter, bool isAdd);\n', '\n', '    function addAlerter(address newAlerter) public onlyAdmin {\n', '        require(!alerters[newAlerter]); // prevent duplicates.\n', '        require(alertersGroup.length < MAX_GROUP_SIZE);\n', '\n', '        AlerterAdded(newAlerter, true);\n', '        alerters[newAlerter] = true;\n', '        alertersGroup.push(newAlerter);\n', '    }\n', '\n', '    function removeAlerter (address alerter) public onlyAdmin {\n', '        require(alerters[alerter]);\n', '        alerters[alerter] = false;\n', '\n', '        for (uint i = 0; i < alertersGroup.length; ++i) {\n', '            if (alertersGroup[i] == alerter) {\n', '                alertersGroup[i] = alertersGroup[alertersGroup.length - 1];\n', '                alertersGroup.length--;\n', '                AlerterAdded(alerter, false);\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    event OperatorAdded(address newOperator, bool isAdd);\n', '\n', '    function addOperator(address newOperator) public onlyAdmin {\n', '        require(!operators[newOperator]); // prevent duplicates.\n', '        require(operatorsGroup.length < MAX_GROUP_SIZE);\n', '\n', '        OperatorAdded(newOperator, true);\n', '        operators[newOperator] = true;\n', '        operatorsGroup.push(newOperator);\n', '    }\n', '\n', '    function removeOperator (address operator) public onlyAdmin {\n', '        require(operators[operator]);\n', '        operators[operator] = false;\n', '\n', '        for (uint i = 0; i < operatorsGroup.length; ++i) {\n', '            if (operatorsGroup[i] == operator) {\n', '                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];\n', '                operatorsGroup.length -= 1;\n', '                OperatorAdded(operator, false);\n', '                break;\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'contract WhiteListInterface {\n', '    function getUserCapInWei(address user) external view returns (uint userCapWei);\n', '}\n', '\n', 'contract Withdrawable is PermissionGroups {\n', '\n', '    event TokenWithdraw(ERC20 token, uint amount, address sendTo);\n', '\n', '    /**\n', '     * @dev Withdraw all ERC20 compatible tokens\n', '     * @param token ERC20 The address of the token contract\n', '     */\n', '    function withdrawToken(ERC20 token, uint amount, address sendTo) external onlyAdmin {\n', '        require(token.transfer(sendTo, amount));\n', '        TokenWithdraw(token, amount, sendTo);\n', '    }\n', '\n', '    event EtherWithdraw(uint amount, address sendTo);\n', '\n', '    /**\n', '     * @dev Withdraw Ethers\n', '     */\n', '    function withdrawEther(uint amount, address sendTo) external onlyAdmin {\n', '        sendTo.transfer(amount);\n', '        EtherWithdraw(amount, sendTo);\n', '    }\n', '}\n', '\n', 'contract KyberNetwork is Withdrawable, Utils {\n', '\n', '    uint public negligibleRateDiff = 10; // basic rate steps will be in 0.01%\n', '    KyberReserveInterface[] public reserves;\n', '    mapping(address=>bool) public isReserve;\n', '    WhiteListInterface public whiteListContract;\n', '    ExpectedRateInterface public expectedRateContract;\n', '    FeeBurnerInterface    public feeBurnerContract;\n', '    uint                  public maxGasPrice = 50 * 1000 * 1000 * 1000; // 50 gwei\n', '    bool                  public enabled = false; // network is enabled\n', '    mapping(bytes32=>uint) public info; // this is only a UI field for external app.\n', '    mapping(address=>mapping(bytes32=>bool)) public perReserveListedPairs;\n', '\n', '    function KyberNetwork(address _admin) public {\n', '        require(_admin != address(0));\n', '        admin = _admin;\n', '    }\n', '\n', '    event EtherReceival(address indexed sender, uint amount);\n', '\n', '    /* solhint-disable no-complex-fallback */\n', '    function() public payable {\n', '        require(isReserve[msg.sender]);\n', '        EtherReceival(msg.sender, msg.value);\n', '    }\n', '    /* solhint-enable no-complex-fallback */\n', '\n', '    event ExecuteTrade(address indexed sender, ERC20 src, ERC20 dest, uint actualSrcAmount, uint actualDestAmount);\n', '\n', '    /// @notice use token address ETH_TOKEN_ADDRESS for ether\n', '    /// @dev makes a trade between src and dest token and send dest token to destAddress\n', '    /// @param src Src token\n', '    /// @param srcAmount amount of src tokens\n', '    /// @param dest   Destination token\n', '    /// @param destAddress Address to send tokens to\n', '    /// @param maxDestAmount A limit on the amount of dest tokens\n', '    /// @param minConversionRate The minimal conversion rate. If actual rate is lower, trade is canceled.\n', '    /// @param walletId is the wallet ID to send part of the fees\n', '    /// @return amount of actual dest tokens\n', '    function trade(\n', '        ERC20 src,\n', '        uint srcAmount,\n', '        ERC20 dest,\n', '        address destAddress,\n', '        uint maxDestAmount,\n', '        uint minConversionRate,\n', '        address walletId\n', '    )\n', '        public\n', '        payable\n', '        returns(uint)\n', '    {\n', '        require(enabled);\n', '\n', '        uint userSrcBalanceBefore;\n', '        uint userSrcBalanceAfter;\n', '        uint userDestBalanceBefore;\n', '        uint userDestBalanceAfter;\n', '\n', '        userSrcBalanceBefore = getBalance(src, msg.sender);\n', '        if (src == ETH_TOKEN_ADDRESS)\n', '            userSrcBalanceBefore += msg.value;\n', '        userDestBalanceBefore = getBalance(dest, destAddress);\n', '\n', '        uint actualDestAmount = doTrade(src,\n', '                                        srcAmount,\n', '                                        dest,\n', '                                        destAddress,\n', '                                        maxDestAmount,\n', '                                        minConversionRate,\n', '                                        walletId\n', '                                        );\n', '        require(actualDestAmount > 0);\n', '\n', '        userSrcBalanceAfter = getBalance(src, msg.sender);\n', '        userDestBalanceAfter = getBalance(dest, destAddress);\n', '\n', '        require(userSrcBalanceAfter <= userSrcBalanceBefore);\n', '        require(userDestBalanceAfter >= userDestBalanceBefore);\n', '\n', '        require((userDestBalanceAfter - userDestBalanceBefore) >=\n', '            calcDstQty((userSrcBalanceBefore - userSrcBalanceAfter), getDecimals(src), getDecimals(dest),\n', '                minConversionRate));\n', '\n', '        return actualDestAmount;\n', '    }\n', '\n', '    event AddReserveToNetwork(KyberReserveInterface reserve, bool add);\n', '\n', '    /// @notice can be called only by admin\n', '    /// @dev add or deletes a reserve to/from the network.\n', '    /// @param reserve The reserve address.\n', '    /// @param add If true, the add reserve. Otherwise delete reserve.\n', '    function addReserve(KyberReserveInterface reserve, bool add) public onlyAdmin {\n', '\n', '        if (add) {\n', '            require(!isReserve[reserve]);\n', '            reserves.push(reserve);\n', '            isReserve[reserve] = true;\n', '            AddReserveToNetwork(reserve, true);\n', '        } else {\n', '            isReserve[reserve] = false;\n', '            // will have trouble if more than 50k reserves...\n', '            for (uint i = 0; i < reserves.length; i++) {\n', '                if (reserves[i] == reserve) {\n', '                    reserves[i] = reserves[reserves.length - 1];\n', '                    reserves.length--;\n', '                    AddReserveToNetwork(reserve, false);\n', '                    break;\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    event ListReservePairs(address reserve, ERC20 src, ERC20 dest, bool add);\n', '\n', '    /// @notice can be called only by admin\n', '    /// @dev allow or prevent a specific reserve to trade a pair of tokens\n', '    /// @param reserve The reserve address.\n', '    /// @param src Src token\n', '    /// @param dest Destination token\n', '    /// @param add If true then enable trade, otherwise delist pair.\n', '    function listPairForReserve(address reserve, ERC20 src, ERC20 dest, bool add) public onlyAdmin {\n', '        (perReserveListedPairs[reserve])[keccak256(src, dest)] = add;\n', '\n', '        if (src != ETH_TOKEN_ADDRESS) {\n', '            if (add) {\n', '                src.approve(reserve, 2**255); // approve infinity\n', '            } else {\n', '                src.approve(reserve, 0);\n', '            }\n', '        }\n', '\n', '        setDecimals(src);\n', '        setDecimals(dest);\n', '\n', '        ListReservePairs(reserve, src, dest, add);\n', '    }\n', '\n', '    function setParams(\n', '        WhiteListInterface    _whiteList,\n', '        ExpectedRateInterface _expectedRate,\n', '        FeeBurnerInterface    _feeBurner,\n', '        uint                  _maxGasPrice,\n', '        uint                  _negligibleRateDiff\n', '    )\n', '        public\n', '        onlyAdmin\n', '    {\n', '        require(_whiteList != address(0));\n', '        require(_feeBurner != address(0));\n', '        require(_expectedRate != address(0));\n', '        require(_negligibleRateDiff <= 100 * 100); // at most 100%\n', '\n', '        whiteListContract = _whiteList;\n', '        expectedRateContract = _expectedRate;\n', '        feeBurnerContract = _feeBurner;\n', '        maxGasPrice = _maxGasPrice;\n', '        negligibleRateDiff = _negligibleRateDiff;\n', '    }\n', '\n', '    function setEnable(bool _enable) public onlyAdmin {\n', '        if (_enable) {\n', '            require(whiteListContract != address(0));\n', '            require(feeBurnerContract != address(0));\n', '            require(expectedRateContract != address(0));\n', '        }\n', '        enabled = _enable;\n', '    }\n', '\n', '    function setInfo(bytes32 field, uint value) public onlyOperator {\n', '        info[field] = value;\n', '    }\n', '\n', '    /// @dev returns number of reserves\n', '    /// @return number of reserves\n', '    function getNumReserves() public view returns(uint) {\n', '        return reserves.length;\n', '    }\n', '\n', '    /// @notice should be called off chain with as much gas as needed\n', '    /// @dev get an array of all reserves\n', '    /// @return An array of all reserves\n', '    function getReserves() public view returns(KyberReserveInterface[]) {\n', '        return reserves;\n', '    }\n', '\n', '    /// @dev get the balance of a user.\n', '    /// @param token The token type\n', '    /// @return The balance\n', '    function getBalance(ERC20 token, address user) public view returns(uint) {\n', '        if (token == ETH_TOKEN_ADDRESS)\n', '            return user.balance;\n', '        else\n', '            return token.balanceOf(user);\n', '    }\n', '\n', '    /// @notice use token address ETH_TOKEN_ADDRESS for ether\n', '    /// @dev best conversion rate for a pair of tokens, if number of reserves have small differences. randomize\n', '    /// @param src Src token\n', '    /// @param dest Destination token\n', '    /* solhint-disable code-complexity */\n', '    function findBestRate(ERC20 src, ERC20 dest, uint srcQty) public view returns(uint, uint) {\n', '        uint bestRate = 0;\n', '        uint bestReserve = 0;\n', '        uint numRelevantReserves = 0;\n', '        uint numReserves = reserves.length;\n', '        uint[] memory rates = new uint[](numReserves);\n', '        uint[] memory reserveCandidates = new uint[](numReserves);\n', '\n', '        for (uint i = 0; i < numReserves; i++) {\n', '            //list all reserves that have this token.\n', '            if (!(perReserveListedPairs[reserves[i]])[keccak256(src, dest)]) continue;\n', '\n', '            rates[i] = reserves[i].getConversionRate(src, dest, srcQty, block.number);\n', '\n', '            if (rates[i] > bestRate) {\n', '                //best rate is highest rate\n', '                bestRate = rates[i];\n', '            }\n', '        }\n', '\n', '        if (bestRate > 0) {\n', '            uint random = 0;\n', '            uint smallestRelevantRate = (bestRate * 10000) / (10000 + negligibleRateDiff);\n', '\n', '            for (i = 0; i < numReserves; i++) {\n', '                if (rates[i] >= smallestRelevantRate) {\n', '                    reserveCandidates[numRelevantReserves++] = i;\n', '                }\n', '            }\n', '\n', '            if (numRelevantReserves > 1) {\n', '                //when encountering small rate diff from bestRate. draw from relevant reserves\n', '                random = uint(block.blockhash(block.number-1)) % numRelevantReserves;\n', '            }\n', '\n', '            bestReserve = reserveCandidates[random];\n', '            bestRate = rates[bestReserve];\n', '        }\n', '\n', '        return (bestReserve, bestRate);\n', '    }\n', '    /* solhint-enable code-complexity */\n', '\n', '    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty)\n', '        public view\n', '        returns (uint expectedRate, uint slippageRate)\n', '    {\n', '        require(expectedRateContract != address(0));\n', '        return expectedRateContract.getExpectedRate(src, dest, srcQty);\n', '    }\n', '\n', '    function getUserCapInWei(address user) public view returns(uint) {\n', '        return whiteListContract.getUserCapInWei(user);\n', '    }\n', '\n', '    function doTrade(\n', '        ERC20 src,\n', '        uint srcAmount,\n', '        ERC20 dest,\n', '        address destAddress,\n', '        uint maxDestAmount,\n', '        uint minConversionRate,\n', '        address walletId\n', '    )\n', '        internal\n', '        returns(uint)\n', '    {\n', '        require(tx.gasprice <= maxGasPrice);\n', '        require(validateTradeInput(src, srcAmount, destAddress));\n', '\n', '        uint reserveInd;\n', '        uint rate;\n', '\n', '        (reserveInd, rate) = findBestRate(src, dest, srcAmount);\n', '        KyberReserveInterface theReserve = reserves[reserveInd];\n', '        require(rate > 0);\n', '        require(rate < MAX_RATE);\n', '        require(rate >= minConversionRate);\n', '\n', '        uint actualSrcAmount = srcAmount;\n', '        uint actualDestAmount = calcDestAmount(src, dest, actualSrcAmount, rate);\n', '        if (actualDestAmount > maxDestAmount) {\n', '            actualDestAmount = maxDestAmount;\n', '            actualSrcAmount = calcSrcAmount(src, dest, actualDestAmount, rate);\n', '            require(actualSrcAmount <= srcAmount);\n', '        }\n', '\n', '        // do the trade\n', '        // verify trade size is smaller than user cap\n', '        uint ethAmount;\n', '        if (src == ETH_TOKEN_ADDRESS) {\n', '            ethAmount = actualSrcAmount;\n', '        } else {\n', '            ethAmount = actualDestAmount;\n', '        }\n', '\n', '        require(ethAmount <= getUserCapInWei(msg.sender));\n', '        require(doReserveTrade(\n', '                src,\n', '                actualSrcAmount,\n', '                dest,\n', '                destAddress,\n', '                actualDestAmount,\n', '                theReserve,\n', '                rate,\n', '                true));\n', '\n', '        if ((actualSrcAmount < srcAmount) && (src == ETH_TOKEN_ADDRESS)) {\n', '            msg.sender.transfer(srcAmount - actualSrcAmount);\n', '        }\n', '\n', '        require(feeBurnerContract.handleFees(ethAmount, theReserve, walletId));\n', '\n', '        ExecuteTrade(msg.sender, src, dest, actualSrcAmount, actualDestAmount);\n', '        return actualDestAmount;\n', '    }\n', '\n', '    /// @notice use token address ETH_TOKEN_ADDRESS for ether\n', '    /// @dev do one trade with a reserve\n', '    /// @param src Src token\n', '    /// @param amount amount of src tokens\n', '    /// @param dest   Destination token\n', '    /// @param destAddress Address to send tokens to\n', '    /// @param reserve Reserve to use\n', '    /// @param validate If true, additional validations are applicable\n', '    /// @return true if trade is successful\n', '    function doReserveTrade(\n', '        ERC20 src,\n', '        uint amount,\n', '        ERC20 dest,\n', '        address destAddress,\n', '        uint expectedDestAmount,\n', '        KyberReserveInterface reserve,\n', '        uint conversionRate,\n', '        bool validate\n', '    )\n', '        internal\n', '        returns(bool)\n', '    {\n', '        uint callValue = 0;\n', '\n', '        if (src == ETH_TOKEN_ADDRESS) {\n', '            callValue = amount;\n', '        } else {\n', '            // take src tokens to this contract\n', '            src.transferFrom(msg.sender, this, amount);\n', '        }\n', '\n', '        // reserve sends tokens/eth to network. network sends it to destination\n', '        require(reserve.trade.value(callValue)(src, amount, dest, this, conversionRate, validate));\n', '\n', '        if (dest == ETH_TOKEN_ADDRESS) {\n', '            destAddress.transfer(expectedDestAmount);\n', '        } else {\n', '            require(dest.transfer(destAddress, expectedDestAmount));\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function calcDestAmount(ERC20 src, ERC20 dest, uint srcAmount, uint rate) internal view returns(uint) {\n', '        return calcDstQty(srcAmount, getDecimals(src), getDecimals(dest), rate);\n', '    }\n', '\n', '    function calcSrcAmount(ERC20 src, ERC20 dest, uint destAmount, uint rate) internal view returns(uint) {\n', '        return calcSrcQty(destAmount, getDecimals(src), getDecimals(dest), rate);\n', '    }\n', '\n', '    /// @notice use token address ETH_TOKEN_ADDRESS for ether\n', '    /// @dev checks that user sent ether/tokens to contract before trade\n', '    /// @param src Src token\n', '    /// @param srcAmount amount of src tokens\n', '    /// @return true if input is valid\n', '    function validateTradeInput(ERC20 src, uint srcAmount, address destAddress) internal view returns(bool) {\n', '        if ((srcAmount >= MAX_QTY) || (srcAmount == 0) || (destAddress == 0))\n', '            return false;\n', '\n', '        if (src == ETH_TOKEN_ADDRESS) {\n', '            if (msg.value != srcAmount)\n', '                return false;\n', '        } else {\n', '            if ((msg.value != 0) || (src.allowance(msg.sender, this) < srcAmount))\n', '                return false;\n', '        }\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '/// @title Contract for a burnable ERC\n', '/// @dev From https://github.com/KyberNetwork/smart-contracts/blob/master/contracts/ERC20Interface.sol\n', '/// @dev Added burn function\n', 'interface BurnableErc20 {\n', '    function totalSupply() public view returns (uint supply);\n', '    function balanceOf(address _owner) public view returns (uint balance);\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '    function approve(address _spender, uint _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint remaining);\n', '    function decimals() public view returns(uint digits);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '    function burn(uint _value) public;\n', '}\n', '\n', '\n', '/// @title A contract to burn ERC20 tokens from ETH on the contract\n', '/// @notice Sends the ETH on the contract to kyber for conversion to ERC20\n', '///  The converted ERC20 is then burned\n', '/// @dev Used to burn the REQ fees. Request fees are paid in ETH. The ETH is sent by the \n', '///  currency contracts to this burn contract. When the burn contract is called, it converts\n', '///  the ETH to REQ and burn the REQ\n', '/// @author Request Network\n', 'contract Burner {\n', '    /// Kyber contract that will be used for the conversion\n', '    KyberNetwork public kyberContract;\n', '\n', '    // Contract for the ERC20\n', '    BurnableErc20 public destErc20;\n', '\n', '    /// @param _destErc20 Destination token\n', '    /// @param _kyberContract Kyber contract to use\n', '    function Burner(address _destErc20, address _kyberContract) public {\n', '        // Check inputs\n', '        require(_destErc20 != address(0));\n', '        require(_kyberContract != address(0));\n', '\n', '        destErc20 = BurnableErc20(_destErc20);\n', '        kyberContract = KyberNetwork(_kyberContract);\n', '    }\n', '    \n', '    /// Fallback function to receive the ETH to burn later\n', '    function() public payable { }\n', '\n', '    /// @dev Main function. Trade the ETH for ERC20 and burn them\n', '    /// @param maxSrcAmount Maximum amount of ETH to convert. If set to 0, all ETH on the\n', '    ///  contract will be burned\n', '    /// @param maxDestAmount A limit on the amount of converted ERC20 tokens. Default value is MAX_UINT\n', '    /// @param minConversionRate The minimal conversion rate. Default value is 1 (market rate)\n', '    /// @return amount of dest ERC20 tokens burned\n', '    function burn(uint maxSrcAmount, uint maxDestAmount, uint minConversionRate)\n', '        public\n', '        returns(uint)\n', '    {\n', '        // ETH to convert on Kyber, by default the amount of ETH on the contract\n', '        // If maxSrcAmount is defined, ethToConvert = min(balance on contract, maxSrcAmount)\n', '        uint ethToConvert = this.balance;\n', '        if (maxSrcAmount != 0 && maxSrcAmount < ethToConvert) {\n', '            ethToConvert = maxSrcAmount;\n', '        }\n', '\n', '        // Set maxDestAmount to MAX_UINT if not sent as parameter\n', '        if (maxDestAmount == 0) {\n', '            maxDestAmount = 2**256 - 1;\n', '        }\n', '\n', '        // Set minConversionRate to 1 if not sent as parameter\n', '        // A value of 1 will execute the trade according to market price in the time of the transaction confirmation\n', '        if (minConversionRate == 0) {\n', '            minConversionRate = 1;\n', '        }\n', '\n', '        // Convert the ETH to ERC20\n', '        // erc20ToBurn is the amount of the ERC20 tokens converted by Kyber that will be burned\n', '        uint erc20ToBurn = kyberContract.trade.value(ethToConvert)(\n', '            // Source. From Kyber docs, this value denotes ETH\n', '            ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee),\n', '            \n', '            // Source amount\n', '            ethToConvert,\n', '\n', '            // Destination. Downcast BurnableErc20 to ERC20\n', '            ERC20(destErc20),\n', '            \n', '            // destAddress: this contract\n', '            this,\n', '            \n', '            // maxDestAmount\n', '            maxDestAmount,\n', '            \n', '            // minConversionRate \n', '            minConversionRate,\n', '            \n', '            // walletId\n', '            0\n', '        );\n', '\n', '        // Burn the converted ERC20 tokens\n', '        destErc20.burn(erc20ToBurn);\n', '\n', '        return erc20ToBurn;\n', '    }\n', '}']
