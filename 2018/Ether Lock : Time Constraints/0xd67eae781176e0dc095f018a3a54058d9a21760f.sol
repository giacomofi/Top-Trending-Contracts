['pragma solidity ^0.4.13;\n', '\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract ICSTCrowSale is Ownable{\n', '\tusing SafeMath for uint256;\n', '\n', '\t\n', '\tuint256 public totalFundingSupply;\n', '\tERC20 public token;\n', '\tuint256 public startTime;\n', '\tuint256 public endTime;\n', '\tuint256 public airdropSupply;\n', '\tuint256 public rate;\n', '\tevent Wasted(address to, uint256 value, uint256 date);\n', '\tfunction ICSTCrowSale(){\n', '\t\trate = 0;\n', '\t\tstartTime=0;\n', '\t\tendTime=0;\n', '\t\tairdropSupply = 0;\n', '\t\ttotalFundingSupply = 0;\n', '\t\ttoken=ERC20(0xe6bc60a00b81c7f3cbc8f4ef3b0a6805b6851753);\n', '\t}\n', '\n', '\tfunction () payable external\n', '\t{\n', '\t\t\trequire(now>startTime);\n', '\t\t\trequire(now<=endTime);\n', '\t\t\tuint256 amount=0;\n', '\t\t\tprocessFunding(msg.sender,msg.value,rate);\n', '\t\t\tamount=msg.value.mul(rate);\n', '\t\t\ttotalFundingSupply = totalFundingSupply.add(amount);\n', '\t}\n', '\n', '    function withdrawCoinToOwner(uint256 _value) external\n', '\t\tonlyOwner\n', '\t{\n', '\t\tprocessFunding(msg.sender,_value,1);\n', '\t}\n', '\t//空投\n', '    function airdrop(address [] _holders,uint256 paySize) external\n', '    \tonlyOwner \n', '\t{\n', '        uint256 count = _holders.length;\n', '        assert(paySize.mul(count) <= token.balanceOf(this));\n', '        for (uint256 i = 0; i < count; i++) {\n', '\t\t\tprocessFunding(_holders [i],paySize,1);\n', '\t\t\tairdropSupply = airdropSupply.add(paySize); \n', '        }\n', '        Wasted(owner, airdropSupply, now);\n', '    }\n', '\tfunction processFunding(address receiver,uint256 _value,uint256 _rate) internal\n', '\t{\n', '\t\tuint256 amount=_value.mul(_rate);\n', '\t\trequire(amount<=token.balanceOf(this));\n', '\t\tif(!token.transfer(receiver,amount)){\n', '\t\t\trevert();\n', '\t\t}\n', '\t}\n', '\n', '\t\n', '\tfunction etherProceeds() external\n', '\t\tonlyOwner\n', '\n', '\t{\n', '\t\tif(!msg.sender.send(this.balance)) revert();\n', '\t}\n', '\n', '\n', '\n', '\tfunction init(uint256 _startTime,uint256 _endTime,uint _rate) external\n', '\t\tonlyOwner\n', '\t{\n', '\t\tstartTime=_startTime;\n', '\t\tendTime=_endTime;\n', '\t\trate=_rate;\n', '\t}\n', '\n', '\tfunction changeToken(address _tokenAddress) external\n', '\t\tonlyOwner\n', '\t{\n', '\t\ttoken = ERC20(_tokenAddress);\n', '\t}\t\n', '\t  \n', '}']
['pragma solidity ^0.4.13;\n', '\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract ICSTCrowSale is Ownable{\n', '\tusing SafeMath for uint256;\n', '\n', '\t\n', '\tuint256 public totalFundingSupply;\n', '\tERC20 public token;\n', '\tuint256 public startTime;\n', '\tuint256 public endTime;\n', '\tuint256 public airdropSupply;\n', '\tuint256 public rate;\n', '\tevent Wasted(address to, uint256 value, uint256 date);\n', '\tfunction ICSTCrowSale(){\n', '\t\trate = 0;\n', '\t\tstartTime=0;\n', '\t\tendTime=0;\n', '\t\tairdropSupply = 0;\n', '\t\ttotalFundingSupply = 0;\n', '\t\ttoken=ERC20(0xe6bc60a00b81c7f3cbc8f4ef3b0a6805b6851753);\n', '\t}\n', '\n', '\tfunction () payable external\n', '\t{\n', '\t\t\trequire(now>startTime);\n', '\t\t\trequire(now<=endTime);\n', '\t\t\tuint256 amount=0;\n', '\t\t\tprocessFunding(msg.sender,msg.value,rate);\n', '\t\t\tamount=msg.value.mul(rate);\n', '\t\t\ttotalFundingSupply = totalFundingSupply.add(amount);\n', '\t}\n', '\n', '    function withdrawCoinToOwner(uint256 _value) external\n', '\t\tonlyOwner\n', '\t{\n', '\t\tprocessFunding(msg.sender,_value,1);\n', '\t}\n', '\t//空投\n', '    function airdrop(address [] _holders,uint256 paySize) external\n', '    \tonlyOwner \n', '\t{\n', '        uint256 count = _holders.length;\n', '        assert(paySize.mul(count) <= token.balanceOf(this));\n', '        for (uint256 i = 0; i < count; i++) {\n', '\t\t\tprocessFunding(_holders [i],paySize,1);\n', '\t\t\tairdropSupply = airdropSupply.add(paySize); \n', '        }\n', '        Wasted(owner, airdropSupply, now);\n', '    }\n', '\tfunction processFunding(address receiver,uint256 _value,uint256 _rate) internal\n', '\t{\n', '\t\tuint256 amount=_value.mul(_rate);\n', '\t\trequire(amount<=token.balanceOf(this));\n', '\t\tif(!token.transfer(receiver,amount)){\n', '\t\t\trevert();\n', '\t\t}\n', '\t}\n', '\n', '\t\n', '\tfunction etherProceeds() external\n', '\t\tonlyOwner\n', '\n', '\t{\n', '\t\tif(!msg.sender.send(this.balance)) revert();\n', '\t}\n', '\n', '\n', '\n', '\tfunction init(uint256 _startTime,uint256 _endTime,uint _rate) external\n', '\t\tonlyOwner\n', '\t{\n', '\t\tstartTime=_startTime;\n', '\t\tendTime=_endTime;\n', '\t\trate=_rate;\n', '\t}\n', '\n', '\tfunction changeToken(address _tokenAddress) external\n', '\t\tonlyOwner\n', '\t{\n', '\t\ttoken = ERC20(_tokenAddress);\n', '\t}\t\n', '\t  \n', '}']
