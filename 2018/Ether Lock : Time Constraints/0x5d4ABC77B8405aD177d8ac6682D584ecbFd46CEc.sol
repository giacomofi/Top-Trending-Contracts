['pragma solidity ^0.4.23;\n', '\n', 'library Roles {\n', '    struct Role {\n', '        mapping(address => bool) bearer;\n', '    }\n', '\n', '    function add(Role storage role, address addr) internal {\n', '        role.bearer[addr] = true;\n', '    }\n', '\n', '    function remove(Role storage role, address addr) internal {\n', '        role.bearer[addr] = false;\n', '    }\n', '\n', '    function check(Role storage role, address addr) view internal {\n', '        require(has(role, addr));\n', '    }\n', '\n', '    function has(Role storage role, address addr) view internal returns (bool) {\n', '        return role.bearer[addr];\n', '    }\n', '}\n', '\n', 'contract RBAC {\n', '\n', '    address initialOwner;\n', '\n', '    using Roles for Roles.Role;\n', '\n', '    mapping(string => Roles.Role) private roles;\n', '\n', '    event RoleAdded(address addr, string roleName);\n', '    event RoleRemoved(address addr, string roleName);\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == initialOwner);\n', '        _;\n', '    }\n', '\n', '    function checkRole(address addr, string roleName) view public {\n', '        roles[roleName].check(addr);\n', '    }\n', '\n', '    function hasRole(address addr, string roleName) view public returns (bool) {\n', '        return roles[roleName].has(addr);\n', '    }\n', '\n', '    function addRole(address addr, string roleName) public onlyOwner {\n', '        roles[roleName].add(addr);\n', '        emit RoleAdded(addr, roleName);\n', '    }\n', '\n', '    function removeRole(address addr, string roleName) public onlyOwner {\n', '        roles[roleName].remove(addr);\n', '        emit RoleRemoved(addr, roleName);\n', '    }\n', '\n', '    modifier onlyRole(string roleName) {\n', '        checkRole(msg.sender, roleName);\n', '        _;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b > 0);\n', '        // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        assert(a == b * c);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a - b;\n', '        assert(b <= a);\n', '        assert(a == c + b);\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        assert(a == c - b);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract PrimasToken is RBAC {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    string public name;\n', '    uint256 public decimals;\n', '    string public symbol;\n', '    string public version;\n', '    uint256 public totalSupply;\n', '    uint256 initialAmount;\n', '    uint256 deployTime;\n', '    uint256 lastInflationDayStart;\n', '    uint256 incentivesPool;\n', '\n', '    mapping(address => uint256) private userLockedTokens;\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Lock(address userAddress, uint256 amount);\n', '    event Unlock(address userAddress,uint256 amount);\n', '    event Inflate (uint256 incentivesPoolValue);\n', '\n', '    constructor(uint256 _previouslyInflatedAmount) public {\n', '        name = "Primas Token";\n', '        decimals = 18;\n', '        symbol = "PST";\n', '        version = "V2.0";\n', '        initialAmount = 100000000 * 10 ** decimals;\n', '        initialOwner = msg.sender;\n', '        deployTime = block.timestamp;\n', '        lastInflationDayStart = 0;\n', '        incentivesPool = 0;\n', '\n', '        // Primas token is deployed at 2018/06/01\n', '        // When upgrading after new deployment of the contract\n', '        // we need to add the inflated tokens back\n', '        // for system consistency.\n', '\n', '        totalSupply = initialAmount.add(_previouslyInflatedAmount);\n', '        balances[msg.sender] = totalSupply;\n', '\n', '        emit Transfer(address(0), msg.sender, totalSupply);\n', '    }\n', '\n', '    function inflate() public onlyRole("InflationOperator") returns (uint256)  {\n', '        uint256 currentTime = block.timestamp;\n', '        uint256 currentDayStart = currentTime / 1 days;\n', '        uint256 inflationAmount;\n', '        require(lastInflationDayStart != currentDayStart);\n', '        lastInflationDayStart = currentDayStart;\n', '        uint256 createDurationYears = (currentTime - deployTime) / 1 years;\n', '        if (createDurationYears < 1) {\n', '            inflationAmount = initialAmount / 10 / 365;\n', '        } else if (createDurationYears >= 20) {\n', '            inflationAmount = 0;\n', '        } else {\n', '            inflationAmount = initialAmount * (100 - (5 * createDurationYears)) / 365 / 1000;\n', '        }\n', '        incentivesPool = incentivesPool.add(inflationAmount);\n', '        totalSupply = totalSupply.add(inflationAmount);\n', '        emit Inflate(incentivesPool);\n', '        return incentivesPool;\n', '    }\n', '\n', '    function getIncentivesPool() view public returns (uint256) {\n', '        return incentivesPool;\n', '    }\n', '\n', '    function incentivesIn(address[] _users, uint256[] _values) public onlyRole("IncentivesCollector") returns (bool success) {\n', '        require(_users.length == _values.length);\n', '        for (uint256 i = 0; i < _users.length; i++) {\n', '            userLockedTokens[_users[i]] = userLockedTokens[_users[i]].sub(_values[i]);\n', '            balances[_users[i]] = balances[_users[i]].sub(_values[i]);\n', '            incentivesPool = incentivesPool.add(_values[i]);\n', '            emit Transfer(_users[i], address(0), _values[i]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function incentivesOut(address[] _users, uint256[] _values) public onlyRole("IncentivesDistributor") returns (bool success) {\n', '        require(_users.length == _values.length);\n', '        for (uint256 i = 0; i < _users.length; i++) {\n', '            incentivesPool = incentivesPool.sub(_values[i]);\n', '            balances[_users[i]] = balances[_users[i]].add(_values[i]);\n', '            emit Transfer(address(0), _users[i], _values[i]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function tokenLock(address _userAddress, uint256 _amount) public onlyRole("Locker") {\n', '        require(balanceOf(_userAddress) >= _amount);\n', '        userLockedTokens[_userAddress] = userLockedTokens[_userAddress].add(_amount);\n', '        emit Lock(_userAddress, _amount);\n', '    }\n', '\n', '    function tokenUnlock(address _userAddress, uint256 _amount, address _to, uint256 _toAmount) public onlyRole("Unlocker") {\n', '        require(_amount >= _toAmount);\n', '        require(userLockedTokens[_userAddress] >= _amount);\n', '        userLockedTokens[_userAddress] = userLockedTokens[_userAddress].sub(_amount);\n', '        emit Unlock(_userAddress, _amount);\n', '        if (_to != address(0) && _toAmount != 0) {\n', '            balances[_userAddress] = balances[_userAddress].sub(_toAmount);\n', '            balances[_to] = balances[_to].add(_toAmount);\n', '            emit Transfer(_userAddress, _to, _toAmount);\n', '        }\n', '    }\n', '\n', '    function transferAndLock(address _userAddress, address _to, uint256 _amount) public onlyRole("Locker")  {\n', '        require(balanceOf(_userAddress) >= _amount);\n', '        balances[_userAddress] = balances[_userAddress].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        userLockedTokens[_to] = userLockedTokens[_to].add(_amount);\n', '        emit Transfer(_userAddress, _to, _amount);\n', '        emit Lock(_to, _amount);\n', '    }\n', '\n', '    function balanceOf(address _owner) view public returns (uint256 balance) {\n', '        return balances[_owner] - userLockedTokens[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balanceOf(msg.sender) >= _value);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(balanceOf(_from) >= _value && allowed[_from][msg.sender] >= _value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}']