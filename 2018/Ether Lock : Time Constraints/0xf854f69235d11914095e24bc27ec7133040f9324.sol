['pragma solidity 0.4.24;\n', '\n', '// ----------------------------------------------------------------------------\n', '// &#39;ExToke.com&#39; Crowdsale contract\n', '//\n', '// Admin       \t : 0xEd86f5216BCAFDd85E5875d35463Aca60925bF16\n', '// fees      \t : zero (0)\n', '// ICO StartTime : 1530075600;   // 06/27/2018 @ 5:00am (UTC)\n', '// ICO EndTime   : 1532217540;   // 07/21/2018 @ 11:59pm (UTC)\n', '// ExchangeRate  : 1 Token = 0.000001 ETH;\n', '//\n', '// Copyright (c) ExToke.com. The MIT Licence.\n', '// Contract crafted by: GDO Infotech Pvt Ltd (https://GDO.co.in) \n', '// ----------------------------------------------------------------------------\n', '\n', '    /**\n', '     * @title SafeMath\n', '     * @dev Math operations with safety checks that throw on error\n', '     */\n', '    library SafeMath {\n', '      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '          return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '      }\n', '    \n', '      function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '      }\n', '    \n', '      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '      }\n', '    \n', '      function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '      }\n', '    }\n', '    \n', '    contract owned {\n', '        address public owner;\n', '    \tusing SafeMath for uint256;\n', '    \t\n', '        constructor() public {\n', '            owner = msg.sender;\n', '        }\n', '    \n', '        modifier onlyOwner {\n', '            require(msg.sender == owner);\n', '            _;\n', '        }\n', '    \n', '        function transferOwnership(address newOwner) onlyOwner public {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '    \n', '    \n', '    interface token {\n', '    function transfer(address receiver, uint amount) external;\n', '    }\n', '    \n', '    contract ExTokeCrowdSale is owned {\n', '        // Public variables of the token\n', '        using SafeMath for uint256;\n', '    \tuint256 public startTime = 1530075600; // 06/27/2018 @ 5:00am (UTC)\n', '    \tuint256 public EndTime = 1532217540;   // 07/21/2018 @ 11:59pm (UTC)\n', '\t\tuint256 public ExchangeRate=0.000001 * (1 ether);\n', '        token public tokenReward;\n', '        \n', '\t\t// This generates a public event on the blockchain that will notify clients\n', '        event Transfer(address indexed from, address indexed to, uint256 value);\n', '        \n', '        constructor (\n', '        address addressOfTokenUsedAsReward\n', '        ) public {\n', '        tokenReward = token(addressOfTokenUsedAsReward);\n', '        }\n', '        function () payable public{\n', '             require(EndTime > now);\n', '             require (startTime < now);\n', '            uint256 ethervalue=msg.value;\n', '            uint256 tokenAmount=ethervalue.div(ExchangeRate);\n', '            tokenReward.transfer(msg.sender, tokenAmount.mul(1 ether));\t\t\t// makes the transfers\n', '\t\t\towner.transfer(msg.value);\t//transfer the fund to admin\n', '        }\n', '        \n', '        function withdrawEtherManually()onlyOwner public{\n', '\t\t    require(msg.sender == owner); \n', '\t\t\tuint256 amount=address(this).balance;\n', '\t\t\towner.transfer(amount);\n', '\t\t}\n', '\t\t\n', '        function withdrawTokenManually(uint256 tokenAmount) onlyOwner public{\n', '            require(msg.sender == owner);\n', '            tokenReward.transfer(msg.sender,tokenAmount);\n', '        }\n', '        \n', '        function setExchangeRate(uint256 NewExchangeRate) onlyOwner public {\n', '            require(msg.sender == owner);\n', '\t\t\tExchangeRate=NewExchangeRate;\n', '        }\n', '    }']
['pragma solidity 0.4.24;\n', '\n', '// ----------------------------------------------------------------------------\n', "// 'ExToke.com' Crowdsale contract\n", '//\n', '// Admin       \t : 0xEd86f5216BCAFDd85E5875d35463Aca60925bF16\n', '// fees      \t : zero (0)\n', '// ICO StartTime : 1530075600;   // 06/27/2018 @ 5:00am (UTC)\n', '// ICO EndTime   : 1532217540;   // 07/21/2018 @ 11:59pm (UTC)\n', '// ExchangeRate  : 1 Token = 0.000001 ETH;\n', '//\n', '// Copyright (c) ExToke.com. The MIT Licence.\n', '// Contract crafted by: GDO Infotech Pvt Ltd (https://GDO.co.in) \n', '// ----------------------------------------------------------------------------\n', '\n', '    /**\n', '     * @title SafeMath\n', '     * @dev Math operations with safety checks that throw on error\n', '     */\n', '    library SafeMath {\n', '      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '          return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '      }\n', '    \n', '      function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '      }\n', '    \n', '      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '      }\n', '    \n', '      function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '      }\n', '    }\n', '    \n', '    contract owned {\n', '        address public owner;\n', '    \tusing SafeMath for uint256;\n', '    \t\n', '        constructor() public {\n', '            owner = msg.sender;\n', '        }\n', '    \n', '        modifier onlyOwner {\n', '            require(msg.sender == owner);\n', '            _;\n', '        }\n', '    \n', '        function transferOwnership(address newOwner) onlyOwner public {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '    \n', '    \n', '    interface token {\n', '    function transfer(address receiver, uint amount) external;\n', '    }\n', '    \n', '    contract ExTokeCrowdSale is owned {\n', '        // Public variables of the token\n', '        using SafeMath for uint256;\n', '    \tuint256 public startTime = 1530075600; // 06/27/2018 @ 5:00am (UTC)\n', '    \tuint256 public EndTime = 1532217540;   // 07/21/2018 @ 11:59pm (UTC)\n', '\t\tuint256 public ExchangeRate=0.000001 * (1 ether);\n', '        token public tokenReward;\n', '        \n', '\t\t// This generates a public event on the blockchain that will notify clients\n', '        event Transfer(address indexed from, address indexed to, uint256 value);\n', '        \n', '        constructor (\n', '        address addressOfTokenUsedAsReward\n', '        ) public {\n', '        tokenReward = token(addressOfTokenUsedAsReward);\n', '        }\n', '        function () payable public{\n', '             require(EndTime > now);\n', '             require (startTime < now);\n', '            uint256 ethervalue=msg.value;\n', '            uint256 tokenAmount=ethervalue.div(ExchangeRate);\n', '            tokenReward.transfer(msg.sender, tokenAmount.mul(1 ether));\t\t\t// makes the transfers\n', '\t\t\towner.transfer(msg.value);\t//transfer the fund to admin\n', '        }\n', '        \n', '        function withdrawEtherManually()onlyOwner public{\n', '\t\t    require(msg.sender == owner); \n', '\t\t\tuint256 amount=address(this).balance;\n', '\t\t\towner.transfer(amount);\n', '\t\t}\n', '\t\t\n', '        function withdrawTokenManually(uint256 tokenAmount) onlyOwner public{\n', '            require(msg.sender == owner);\n', '            tokenReward.transfer(msg.sender,tokenAmount);\n', '        }\n', '        \n', '        function setExchangeRate(uint256 NewExchangeRate) onlyOwner public {\n', '            require(msg.sender == owner);\n', '\t\t\tExchangeRate=NewExchangeRate;\n', '        }\n', '    }']
