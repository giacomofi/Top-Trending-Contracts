['pragma solidity ^0.4.24;\n', '//\n', '// Answer the riddle and win the jackpot\n', '// To play, call the play() method with your guess and 0.25 ether\n', '//\n', '// Hint: Check the previous guesses to avoid wrong answers\n', '//\n', 'contract Riddle {\n', '    bytes32 private answerHash;\n', '    bool private isActive;\n', '    Guess[] public guesses;\n', '    string public riddle;\n', '    string public answer;\n', '\n', '    struct Guess { address player; string guess; }\n', '    address private riddler;\n', '\n', '    function () payable public {}\n', '    \n', '    constructor (string _riddle, bytes32 _answerHash) public payable {\n', '        riddler = msg.sender;\n', '        riddle = _riddle;\n', '        answerHash = _answerHash;\n', '        isActive = true;\n', '    }\n', '\n', '    function play(string guess) public payable {\n', '        require(isActive);\n', '        require(msg.value >= 0.25 ether);\n', '        require(bytes(guess).length > 0);\n', '        \n', '        Guess newGuess;\n', '        newGuess.player = msg.sender;\n', '        newGuess.guess = guess;\n', '        guesses.push(newGuess);\n', '        \n', '        if (keccak256(guess) == answerHash) {\n', '            answer = guess;\n', '            isActive = false;\n', '            msg.sender.transfer(this.balance);\n', '        }\n', '    }\n', '    \n', '    function end(string _answer) public {\n', '        require(msg.sender == riddler);\n', '        answer = _answer;\n', '        isActive = false;\n', '        msg.sender.transfer(this.balance);\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '//\n', '// Answer the riddle and win the jackpot\n', '// To play, call the play() method with your guess and 0.25 ether\n', '//\n', '// Hint: Check the previous guesses to avoid wrong answers\n', '//\n', 'contract Riddle {\n', '    bytes32 private answerHash;\n', '    bool private isActive;\n', '    Guess[] public guesses;\n', '    string public riddle;\n', '    string public answer;\n', '\n', '    struct Guess { address player; string guess; }\n', '    address private riddler;\n', '\n', '    function () payable public {}\n', '    \n', '    constructor (string _riddle, bytes32 _answerHash) public payable {\n', '        riddler = msg.sender;\n', '        riddle = _riddle;\n', '        answerHash = _answerHash;\n', '        isActive = true;\n', '    }\n', '\n', '    function play(string guess) public payable {\n', '        require(isActive);\n', '        require(msg.value >= 0.25 ether);\n', '        require(bytes(guess).length > 0);\n', '        \n', '        Guess newGuess;\n', '        newGuess.player = msg.sender;\n', '        newGuess.guess = guess;\n', '        guesses.push(newGuess);\n', '        \n', '        if (keccak256(guess) == answerHash) {\n', '            answer = guess;\n', '            isActive = false;\n', '            msg.sender.transfer(this.balance);\n', '        }\n', '    }\n', '    \n', '    function end(string _answer) public {\n', '        require(msg.sender == riddler);\n', '        answer = _answer;\n', '        isActive = false;\n', '        msg.sender.transfer(this.balance);\n', '    }\n', '}']
