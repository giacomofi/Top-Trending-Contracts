['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // Gas optimization: this is cheaper than requiring &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Whitelist contract\n', ' * @dev Whitelist for wallets.\n', '*/\n', 'contract Whitelist is Ownable {\n', '    mapping(address => bool) whitelist;\n', '\n', '    uint256 public whitelistLength = 0;\n', '\n', '    address private addressApi;\n', '\n', '    modifier onlyPrivilegeAddresses {\n', '        require(msg.sender == addressApi || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Set backend Api address.\n', '    * @dev Accept request from the owner only.\n', '    * @param _api The address of backend API to set.\n', '    */\n', '    function setApiAddress(address _api) public onlyOwner {\n', '        require(_api != address(0));\n', '        addressApi = _api;\n', '    }\n', '\n', '    /**\n', '    * @dev Add wallet to whitelist.\n', '    * @dev Accept request from the privileged addresses only.\n', '    * @param _wallet The address of wallet to add.\n', '    */  \n', '    function addWallet(address _wallet) public onlyPrivilegeAddresses {\n', '        require(_wallet != address(0));\n', '        require(!isWhitelisted(_wallet));\n', '        whitelist[_wallet] = true;\n', '        whitelistLength++;\n', '    }\n', '\n', '    /**\n', '    * @dev Remove wallet from whitelist.\n', '    * @dev Accept request from the owner only.\n', '    * @param _wallet The address of whitelisted wallet to remove.\n', '    */  \n', '    function removeWallet(address _wallet) public onlyOwner {\n', '        require(_wallet != address(0));\n', '        require(isWhitelisted(_wallet));\n', '        whitelist[_wallet] = false;\n', '        whitelistLength--;\n', '    }\n', '\n', '    /**\n', '    * @dev Check the specified wallet whether it is in the whitelist.\n', '    * @param _wallet The address of wallet to check.\n', '    */ \n', '    function isWhitelisted(address _wallet) public view returns (bool) {\n', '        return whitelist[_wallet];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyOwner whenNotPaused {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyOwner whenPaused {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract VeiagToken is StandardToken, Ownable, Pausable {\n', '    string constant public name = "Veiag Token";\n', '    string constant public symbol = "VEIAG";\n', '    uint8 constant public decimals = 18;\n', '\n', '    uint256 constant public INITIAL_TOTAL_SUPPLY = 1e9 * (uint256(10) ** decimals);\n', '\n', '    address private addressIco;\n', '\n', '    modifier onlyIco() {\n', '        require(msg.sender == addressIco);\n', '        _;\n', '    }\n', '    \n', '    /**\n', '    * @dev Create VeiagToken contract and set pause\n', '    * @param _ico The address of ICO contract.\n', '    */\n', '    function VeiagToken (address _ico) public {\n', '        require(_ico != address(0));\n', '\n', '        addressIco = _ico;\n', '\n', '        totalSupply_ = totalSupply_.add(INITIAL_TOTAL_SUPPLY);\n', '        balances[_ico] = balances[_ico].add(INITIAL_TOTAL_SUPPLY);\n', '        Transfer(address(0), _ico, INITIAL_TOTAL_SUPPLY);\n', '\n', '        pause();\n', '    }\n', '\n', '     /**\n', '    * @dev Transfer token for a specified address with pause feature for owner.\n', '    * @dev Only applies when the transfer is allowed by the owner.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another with pause feature for owner.\n', '    * @dev Only applies when the transfer is allowed by the owner.\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from ICO address to another address.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transferFromIco(address _to, uint256 _value) public onlyIco returns (bool) {\n', '        super.transfer(_to, _value);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(\n', '    ERC20Basic _token,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transfer(_to, _value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 _token,\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transferFrom(_from, _to, _value));\n', '  }\n', '\n', '  function safeApprove(\n', '    ERC20 _token,\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.approve(_spender, _value));\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TokenTimelock {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  // ERC20 basic token contract being held\n', '  ERC20Basic public token;\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  // timestamp when token release is enabled\n', '  uint256 public releaseTime;\n', '\n', '  constructor(\n', '    ERC20Basic _token,\n', '    address _beneficiary,\n', '    uint256 _releaseTime\n', '  )\n', '    public\n', '  {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_releaseTime > block.timestamp);\n', '    token = _token;\n', '    beneficiary = _beneficiary;\n', '    releaseTime = _releaseTime;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers tokens held by timelock to beneficiary.\n', '   */\n', '  function release() public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= releaseTime);\n', '\n', '    uint256 amount = token.balanceOf(address(this));\n', '    require(amount > 0);\n', '\n', '    token.transfer(beneficiary, amount);\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    public\n', '    hasMintPermission\n', '    canMint\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() public onlyOwner canMint returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract LockedOutTokens is TokenTimelock {\n', '    function LockedOutTokens(\n', '        ERC20Basic _token,\n', '        address _beneficiary,\n', '        uint256 _releaseTime\n', '    ) public TokenTimelock(_token, _beneficiary, _releaseTime)\n', '    {\n', '    }\n', '\n', '    function release() public {\n', '        require(beneficiary == msg.sender);\n', '\n', '        super.release();\n', '    }\n', '}\n', '/* solium-disable security/no-block-members */\n', '\n', '\n', '/**\n', ' * @title TokenVesting\n', ' * @dev A token holder contract that can release its token balance gradually like a\n', ' * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n', ' * owner.\n', ' */\n', 'contract TokenVesting is Ownable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  event Released(uint256 amount);\n', '  event Revoked();\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  uint256 public cliff;\n', '  uint256 public start;\n', '  uint256 public duration;\n', '\n', '  bool public revocable;\n', '\n', '  mapping (address => uint256) public released;\n', '  mapping (address => bool) public revoked;\n', '\n', '  /**\n', '   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n', '   * of the balance will have vested.\n', '   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n', '   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n', '   * @param _start the time (as Unix time) at which point vesting starts\n', '   * @param _duration duration in seconds of the period in which the tokens will vest\n', '   * @param _revocable whether the vesting is revocable or not\n', '   */\n', '  constructor(\n', '    address _beneficiary,\n', '    uint256 _start,\n', '    uint256 _cliff,\n', '    uint256 _duration,\n', '    bool _revocable\n', '  )\n', '    public\n', '  {\n', '    require(_beneficiary != address(0));\n', '    require(_cliff <= _duration);\n', '\n', '    beneficiary = _beneficiary;\n', '    revocable = _revocable;\n', '    duration = _duration;\n', '    cliff = _start.add(_cliff);\n', '    start = _start;\n', '  }\n', '\n', '  function setStart(uint256 _start) onlyOwner public {\n', '    start = _start;  \n', '  }\n', '  /**\n', '   * @notice Transfers vested tokens to beneficiary.\n', '   * @param _token ERC20 token which is being vested\n', '   */\n', '  function release(ERC20Basic _token) public {\n', '    uint256 unreleased = releasableAmount(_token);\n', '\n', '    require(unreleased > 0);\n', '\n', '    released[_token] = released[_token].add(unreleased);\n', '\n', '    _token.transfer(beneficiary, unreleased);\n', '\n', '    emit Released(unreleased);\n', '  }\n', '\n', '  /**\n', '   * @notice Allows the owner to revoke the vesting. Tokens already vested\n', '   * remain in the contract, the rest are returned to the owner.\n', '   * @param _token ERC20 token which is being vested\n', '   */\n', '  function revoke(ERC20Basic _token) public onlyOwner {\n', '    require(revocable);\n', '    require(!revoked[_token]);\n', '\n', '    uint256 balance = _token.balanceOf(address(this));\n', '\n', '    uint256 unreleased = releasableAmount(_token);\n', '    uint256 refund = balance.sub(unreleased);\n', '\n', '    revoked[_token] = true;\n', '\n', '    _token.transfer(owner, refund);\n', '\n', '    emit Revoked();\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested but hasn&#39;t been released yet.\n', '   * @param _token ERC20 token which is being vested\n', '   */\n', '  function releasableAmount(ERC20Basic _token) public view returns (uint256) {\n', '    return vestedAmount(_token).sub(released[_token]);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested.\n', '   * @param _token ERC20 token which is being vested\n', '   */\n', '  function vestedAmount(ERC20Basic _token) public view returns (uint256) {\n', '    uint256 currentBalance = _token.balanceOf(address(this));\n', '    uint256 totalBalance = currentBalance.add(released[_token]);\n', '\n', '    if (block.timestamp < cliff) {\n', '      return 0;\n', '    } else if (block.timestamp >= start.add(duration) || revoked[_token]) {\n', '      return totalBalance;\n', '    } else {\n', '      return totalBalance.mul(block.timestamp.sub(start)).div(duration);\n', '    }\n', '  }\n', '}\n', '\n', 'contract VeiagTokenVesting is TokenVesting {\n', '    ERC20Basic public token;\n', '\n', '    function VeiagTokenVesting(\n', '        ERC20Basic _token,\n', '        address _beneficiary,\n', '        uint256 _start,\n', '        uint256 _cliff,\n', '        uint256 _duration,\n', '        bool _revocable\n', '    ) TokenVesting(_beneficiary, _start, _cliff, _duration, _revocable) public\n', '    {\n', '        require(_token != address(0));\n', '\n', '        token = _token;\n', '    }\n', '\n', '    function grant() public {\n', '        release(token);\n', '    }\n', '\n', '    function release(ERC20Basic _token) public {\n', '        require(beneficiary == msg.sender);\n', '        super.release(_token);\n', '    }\n', '}\n', '\n', 'contract Whitelistable {\n', '    Whitelist public whitelist;\n', '\n', '    modifier whenWhitelisted(address _wallet) {\n', '   //     require(whitelist.isWhitelisted(_wallet));\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Constructor for Whitelistable contract.\n', '    */\n', '    function Whitelistable() public {\n', '        whitelist = new Whitelist();\n', '    }\n', '}\n', '\n', 'contract VeiagCrowdsale is Pausable, Whitelistable {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 constant private DECIMALS = 18;\n', '\n', '    uint256 constant public RESERVED_LOCKED_TOKENS = 250e6 * (10 ** DECIMALS);\n', '    uint256 constant public RESERVED_TEAMS_TOKENS = 100e6 * (10 ** DECIMALS);\n', '    uint256 constant public RESERVED_FOUNDERS_TOKENS = 100e6 * (10 ** DECIMALS);\n', '    uint256 constant public RESERVED_MARKETING_TOKENS = 50e6 * (10 ** DECIMALS);\n', '\n', '    uint256 constant public MAXCAP_TOKENS_PRE_ICO = 100e6 * (10 ** DECIMALS);\n', '    \n', '    uint256 constant public MAXCAP_TOKENS_ICO = 400e6 * (10 ** DECIMALS);\n', '\n', '    uint256 constant public MIN_INVESTMENT = (10 ** 16);   // 0.01  ETH\n', '\n', '    uint256 constant public MAX_INVESTMENT = 100 * (10 ** DECIMALS); // 100  ETH\n', '\n', '    uint256 public startTimePreIco = 0;\n', '    uint256 public endTimePreIco = 0;\n', '\n', '    uint256 public startTimeIco = 0;\n', '    uint256 public endTimeIco = 0;\n', '\n', '    // rate = 0.005 ETH, 1 ETH = 200 tokens\n', '    uint256 public exchangeRatePreIco = 200;\n', '\n', '    uint256 public icoFirstWeekRate = 150;\n', '    uint256 public icoSecondWeekRate = 125;\n', '    uint256 public icoThirdWeekRate = 110;\n', '    // rate = 0.01 ETH, 1 ETH = 100 tokens\n', '    uint256 public icoRate = 100;\n', '\n', '    uint256 public tokensRemainingPreIco = MAXCAP_TOKENS_PRE_ICO;\n', '    uint256 public tokensRemainingIco = MAXCAP_TOKENS_ICO;\n', '\n', '    uint256 public tokensSoldPreIco = 0;\n', '    uint256 public tokensSoldIco = 0;\n', '    uint256 public tokensSoldTotal = 0;\n', '\n', '    uint256 public weiRaisedPreIco = 0;\n', '    uint256 public weiRaisedIco = 0;\n', '    uint256 public weiRaisedTotal = 0;\n', '\n', '    VeiagToken public token = new VeiagToken(this);\n', '    LockedOutTokens public lockedTokens;\n', '    VeiagTokenVesting public teamsTokenVesting;\n', '    VeiagTokenVesting public foundersTokenVesting;\n', '\n', '    mapping (address => uint256) private totalInvestedAmount;\n', '\n', '    modifier beforeReachingPreIcoMaxCap() {\n', '        require(tokensRemainingPreIco > 0);\n', '        _;\n', '    }\n', '\n', '    modifier beforeReachingIcoMaxCap() {\n', '        require(tokensRemainingIco > 0);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Constructor for VeiagCrowdsale contract.\n', '    * @dev Set the owner who can manage whitelist and token.\n', '    * @param _startTimePreIco The pre-ICO start time.\n', '    * @param _endTimePreIco The pre-ICO end time.\n', '    * @param _startTimeIco The ICO start time.\n', '    * @param _endTimeIco The ICO end time.\n', '    * @param _lockedWallet The address for future sale.\n', '    * @param _teamsWallet The address for reserved tokens for teams.\n', '    * @param _foundersWallet The address for reserved tokens for founders.\n', '    * @param _marketingWallet The address for reserved tokens for marketing.\n', '    */\n', '    function VeiagCrowdsale(\n', '        uint256 _startTimePreIco,\n', '        uint256 _endTimePreIco, \n', '        uint256 _startTimeIco,\n', '        uint256 _endTimeIco,\n', '        address _lockedWallet,\n', '        address _teamsWallet,\n', '        address _foundersWallet,\n', '        address _marketingWallet\n', '    ) public Whitelistable()\n', '    {\n', '        require(_lockedWallet != address(0) && _teamsWallet != address(0) && _foundersWallet != address(0) && _marketingWallet != address(0));\n', '        require(_startTimePreIco > now && _endTimePreIco > _startTimePreIco);\n', '        require(_startTimeIco > _endTimePreIco && _endTimeIco > _startTimeIco);\n', '        startTimePreIco = _startTimePreIco;\n', '        endTimePreIco = _endTimePreIco;\n', '\n', '        startTimeIco = _startTimeIco;\n', '        endTimeIco = _endTimeIco;\n', '\n', '        lockedTokens = new LockedOutTokens(token, _lockedWallet, RESERVED_LOCKED_TOKENS);\n', '        teamsTokenVesting = new VeiagTokenVesting(token, _teamsWallet, 0, 1 days, 365 days, false);\n', '        foundersTokenVesting = new VeiagTokenVesting(token, _foundersWallet, 0, 1 days, 100 days, false);\n', '\n', '        token.transferFromIco(lockedTokens, RESERVED_LOCKED_TOKENS);\n', '        token.transferFromIco(teamsTokenVesting, RESERVED_TEAMS_TOKENS);\n', '        token.transferFromIco(foundersTokenVesting, RESERVED_FOUNDERS_TOKENS);\n', '        token.transferFromIco(_marketingWallet, RESERVED_MARKETING_TOKENS);\n', '        teamsTokenVesting.transferOwnership(this);\n', '        foundersTokenVesting.transferOwnership(this);        \n', '        \n', '        whitelist.transferOwnership(msg.sender);\n', '        token.transferOwnership(msg.sender);\n', '    }\n', '\tfunction SetStartVesting(uint256 _startTimeVestingForFounders) public onlyOwner{\n', '\t    require(now > endTimeIco);\n', '\t    require(_startTimeVestingForFounders > endTimeIco);\n', '\t    teamsTokenVesting.setStart(_startTimeVestingForFounders);\n', '\t    foundersTokenVesting.setStart(endTimeIco);\n', '        teamsTokenVesting.transferOwnership(msg.sender);\n', '        foundersTokenVesting.transferOwnership(msg.sender);\t    \n', '\t}\n', '\n', '\tfunction SetStartTimeIco(uint256 _startTimeIco) public onlyOwner{\n', '        uint256 deltaTime;  \n', '        require(_startTimeIco > now && startTimeIco > now);\n', '        if (_startTimeIco > startTimeIco){\n', '          deltaTime = _startTimeIco.sub(startTimeIco);\n', '\t      endTimePreIco = endTimePreIco.add(deltaTime);\n', '\t      startTimeIco = startTimeIco.add(deltaTime);\n', '\t      endTimeIco = endTimeIco.add(deltaTime);\n', '        }\n', '        if (_startTimeIco < startTimeIco){\n', '          deltaTime = startTimeIco.sub(_startTimeIco);\n', '          endTimePreIco = endTimePreIco.sub(deltaTime);\n', '\t      startTimeIco = startTimeIco.sub(deltaTime);\n', '\t      endTimeIco = endTimeIco.sub(deltaTime);\n', '        }  \n', '    }\n', '\t\n', '\t\n', '    \n', '    /**\n', '    * @dev Fallback function can be used to buy tokens.\n', '    */\n', '    function() public payable {\n', '        if (isPreIco()) {\n', '            sellTokensPreIco();\n', '        } else if (isIco()) {\n', '            sellTokensIco();\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Check whether the pre-ICO is active at the moment.\n', '    */\n', '    function isPreIco() public view returns (bool) {\n', '        return now >= startTimePreIco && now <= endTimePreIco;\n', '    }\n', '\n', '    /**\n', '    * @dev Check whether the ICO is active at the moment.\n', '    */\n', '    function isIco() public view returns (bool) {\n', '        return now >= startTimeIco && now <= endTimeIco;\n', '    }\n', '\n', '    /**\n', '    * @dev Calculate rate for ICO phase.\n', '    */\n', '    function exchangeRateIco() public view returns(uint256) {\n', '        require(now >= startTimeIco && now <= endTimeIco);\n', '\n', '        if (now < startTimeIco + 1 weeks)\n', '            return icoFirstWeekRate;\n', '\n', '        if (now < startTimeIco + 2 weeks)\n', '            return icoSecondWeekRate;\n', '\n', '        if (now < startTimeIco + 3 weeks)\n', '            return icoThirdWeekRate;\n', '\n', '        return icoRate;\n', '    }\n', '\t\n', '    function setExchangeRatePreIco(uint256 _exchangeRatePreIco) public onlyOwner{\n', '\t  exchangeRatePreIco = _exchangeRatePreIco;\n', '\t} \n', '\t\n', '    function setIcoFirstWeekRate(uint256 _icoFirstWeekRate) public onlyOwner{\n', '\t  icoFirstWeekRate = _icoFirstWeekRate;\n', '\t} \t\n', '\t\n', '    function setIcoSecondWeekRate(uint256 _icoSecondWeekRate) public onlyOwner{\n', '\t  icoSecondWeekRate = _icoSecondWeekRate;\n', '\t} \n', '\t\n', '    function setIcoThirdWeekRate(uint256 _icoThirdWeekRate) public onlyOwner{\n', '\t  icoThirdWeekRate = _icoThirdWeekRate;\n', '\t}\n', '\t\n', '    function setIcoRate(uint256 _icoRate) public onlyOwner{\n', '\t  icoRate = _icoRate;\n', '\t}\n', '\t\n', '    /**\n', '    * @dev Sell tokens during Pre-ICO stage.\n', '    */\n', '    function sellTokensPreIco() public payable whenWhitelisted(msg.sender) beforeReachingPreIcoMaxCap whenNotPaused {\n', '        require(isPreIco());\n', '        require(msg.value >= MIN_INVESTMENT);\n', '        uint256 senderTotalInvestment = totalInvestedAmount[msg.sender].add(msg.value);\n', '        require(senderTotalInvestment <= MAX_INVESTMENT);\n', '\n', '        uint256 weiAmount = msg.value;\n', '        uint256 excessiveFunds = 0;\n', '\n', '        uint256 tokensAmount = weiAmount.mul(exchangeRatePreIco);\n', '\n', '        if (tokensAmount > tokensRemainingPreIco) {\n', '            uint256 weiToAccept = tokensRemainingPreIco.div(exchangeRatePreIco);\n', '            excessiveFunds = weiAmount.sub(weiToAccept);\n', '\n', '            tokensAmount = tokensRemainingPreIco;\n', '            weiAmount = weiToAccept;\n', '        }\n', '\n', '        addPreIcoPurchaseInfo(weiAmount, tokensAmount);\n', '\n', '        owner.transfer(weiAmount);\n', '\n', '        token.transferFromIco(msg.sender, tokensAmount);\n', '\n', '        if (excessiveFunds > 0) {\n', '            msg.sender.transfer(excessiveFunds);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Sell tokens during ICO stage.\n', '    */\n', '    function sellTokensIco() public payable whenWhitelisted(msg.sender) beforeReachingIcoMaxCap whenNotPaused {\n', '        require(isIco());\n', '        require(msg.value >= MIN_INVESTMENT);\n', '        uint256 senderTotalInvestment = totalInvestedAmount[msg.sender].add(msg.value);\n', '        require(senderTotalInvestment <= MAX_INVESTMENT);\n', '\n', '        uint256 weiAmount = msg.value;\n', '        uint256 excessiveFunds = 0;\n', '\n', '        uint256 tokensAmount = weiAmount.mul(exchangeRateIco());\n', '\n', '        if (tokensAmount > tokensRemainingIco) {\n', '            uint256 weiToAccept = tokensRemainingIco.div(exchangeRateIco());\n', '            excessiveFunds = weiAmount.sub(weiToAccept);\n', '\n', '            tokensAmount = tokensRemainingIco;\n', '            weiAmount = weiToAccept;\n', '        }\n', '\n', '        addIcoPurchaseInfo(weiAmount, tokensAmount);\n', '\n', '        owner.transfer(weiAmount);\n', '\n', '        token.transferFromIco(msg.sender, tokensAmount);\n', '\n', '        if (excessiveFunds > 0) {\n', '            msg.sender.transfer(excessiveFunds);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Manual send tokens to the specified address.\n', '    * @param _address The address of a investor.\n', '    * @param _tokensAmount Amount of tokens.\n', '    */\n', '    function manualSendTokens(address _address, uint256 _tokensAmount) public whenWhitelisted(_address) onlyOwner {\n', '        require(_address != address(0));\n', '        require(_tokensAmount > 0);\n', '        \n', '        if (isPreIco() && _tokensAmount <= tokensRemainingPreIco) {\n', '            token.transferFromIco(_address, _tokensAmount);\n', '            addPreIcoPurchaseInfo(0, _tokensAmount);\n', '        } else if (isIco() && _tokensAmount <= tokensRemainingIco) {\n', '            token.transferFromIco(_address, _tokensAmount);\n', '            addIcoPurchaseInfo(0, _tokensAmount);\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Update the pre-ICO investments statistic.\n', '    * @param _weiAmount The investment received from a pre-ICO investor.\n', '    * @param _tokensAmount The tokens that will be sent to pre-ICO investor.\n', '    */\n', '    function addPreIcoPurchaseInfo(uint256 _weiAmount, uint256 _tokensAmount) internal {\n', '        totalInvestedAmount[msg.sender] = totalInvestedAmount[msg.sender].add(_weiAmount);\n', '\n', '        tokensSoldPreIco = tokensSoldPreIco.add(_tokensAmount);\n', '        tokensSoldTotal = tokensSoldTotal.add(_tokensAmount);\n', '        tokensRemainingPreIco = tokensRemainingPreIco.sub(_tokensAmount);\n', '\n', '        weiRaisedPreIco = weiRaisedPreIco.add(_weiAmount);\n', '        weiRaisedTotal = weiRaisedTotal.add(_weiAmount);\n', '    }\n', '\n', '    /**\n', '    * @dev Update the ICO investments statistic.\n', '    * @param _weiAmount The investment received from a ICO investor.\n', '    * @param _tokensAmount The tokens that will be sent to ICO investor.\n', '    */\n', '    function addIcoPurchaseInfo(uint256 _weiAmount, uint256 _tokensAmount) internal {\n', '        totalInvestedAmount[msg.sender] = totalInvestedAmount[msg.sender].add(_weiAmount);\n', '\n', '        tokensSoldIco = tokensSoldIco.add(_tokensAmount);\n', '        tokensSoldTotal = tokensSoldTotal.add(_tokensAmount);\n', '        tokensRemainingIco = tokensRemainingIco.sub(_tokensAmount);\n', '\n', '        weiRaisedIco = weiRaisedIco.add(_weiAmount);\n', '        weiRaisedTotal = weiRaisedTotal.add(_weiAmount);\n', '    }\n', '}\n', 'contract Factory {\n', '    VeiagCrowdsale public crowdsale;\n', '\n', '    function createCrowdsale (\n', '        uint256 _startTimePreIco,\n', '        uint256 _endTimePreIco,\n', '        uint256 _startTimeIco,\n', '        uint256 _endTimeIco,\n', '        address _lockedWallet,\n', '        address _teamsWallet,\n', '        address _foundersWallet,\n', '        address _marketingWallet\n', '    ) public\n', '    {\n', '        crowdsale = new VeiagCrowdsale(\n', '            _startTimePreIco,\n', '            _endTimePreIco,\n', '            _startTimeIco,\n', '            _endTimeIco,\n', '            _lockedWallet,\n', '            _teamsWallet,\n', '            _foundersWallet,\n', '            _marketingWallet\n', '        );\n', '\n', '        Whitelist whitelist = crowdsale.whitelist();\n', '        whitelist.transferOwnership(msg.sender);\n', '\n', '        VeiagToken token = crowdsale.token();\n', '        token.transferOwnership(msg.sender);\n', '        crowdsale.transferOwnership(msg.sender);\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Whitelist contract\n', ' * @dev Whitelist for wallets.\n', '*/\n', 'contract Whitelist is Ownable {\n', '    mapping(address => bool) whitelist;\n', '\n', '    uint256 public whitelistLength = 0;\n', '\n', '    address private addressApi;\n', '\n', '    modifier onlyPrivilegeAddresses {\n', '        require(msg.sender == addressApi || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Set backend Api address.\n', '    * @dev Accept request from the owner only.\n', '    * @param _api The address of backend API to set.\n', '    */\n', '    function setApiAddress(address _api) public onlyOwner {\n', '        require(_api != address(0));\n', '        addressApi = _api;\n', '    }\n', '\n', '    /**\n', '    * @dev Add wallet to whitelist.\n', '    * @dev Accept request from the privileged addresses only.\n', '    * @param _wallet The address of wallet to add.\n', '    */  \n', '    function addWallet(address _wallet) public onlyPrivilegeAddresses {\n', '        require(_wallet != address(0));\n', '        require(!isWhitelisted(_wallet));\n', '        whitelist[_wallet] = true;\n', '        whitelistLength++;\n', '    }\n', '\n', '    /**\n', '    * @dev Remove wallet from whitelist.\n', '    * @dev Accept request from the owner only.\n', '    * @param _wallet The address of whitelisted wallet to remove.\n', '    */  \n', '    function removeWallet(address _wallet) public onlyOwner {\n', '        require(_wallet != address(0));\n', '        require(isWhitelisted(_wallet));\n', '        whitelist[_wallet] = false;\n', '        whitelistLength--;\n', '    }\n', '\n', '    /**\n', '    * @dev Check the specified wallet whether it is in the whitelist.\n', '    * @param _wallet The address of wallet to check.\n', '    */ \n', '    function isWhitelisted(address _wallet) public view returns (bool) {\n', '        return whitelist[_wallet];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyOwner whenNotPaused {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyOwner whenPaused {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract VeiagToken is StandardToken, Ownable, Pausable {\n', '    string constant public name = "Veiag Token";\n', '    string constant public symbol = "VEIAG";\n', '    uint8 constant public decimals = 18;\n', '\n', '    uint256 constant public INITIAL_TOTAL_SUPPLY = 1e9 * (uint256(10) ** decimals);\n', '\n', '    address private addressIco;\n', '\n', '    modifier onlyIco() {\n', '        require(msg.sender == addressIco);\n', '        _;\n', '    }\n', '    \n', '    /**\n', '    * @dev Create VeiagToken contract and set pause\n', '    * @param _ico The address of ICO contract.\n', '    */\n', '    function VeiagToken (address _ico) public {\n', '        require(_ico != address(0));\n', '\n', '        addressIco = _ico;\n', '\n', '        totalSupply_ = totalSupply_.add(INITIAL_TOTAL_SUPPLY);\n', '        balances[_ico] = balances[_ico].add(INITIAL_TOTAL_SUPPLY);\n', '        Transfer(address(0), _ico, INITIAL_TOTAL_SUPPLY);\n', '\n', '        pause();\n', '    }\n', '\n', '     /**\n', '    * @dev Transfer token for a specified address with pause feature for owner.\n', '    * @dev Only applies when the transfer is allowed by the owner.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another with pause feature for owner.\n', '    * @dev Only applies when the transfer is allowed by the owner.\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from ICO address to another address.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transferFromIco(address _to, uint256 _value) public onlyIco returns (bool) {\n', '        super.transfer(_to, _value);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(\n', '    ERC20Basic _token,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transfer(_to, _value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 _token,\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transferFrom(_from, _to, _value));\n', '  }\n', '\n', '  function safeApprove(\n', '    ERC20 _token,\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.approve(_spender, _value));\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TokenTimelock {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  // ERC20 basic token contract being held\n', '  ERC20Basic public token;\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  // timestamp when token release is enabled\n', '  uint256 public releaseTime;\n', '\n', '  constructor(\n', '    ERC20Basic _token,\n', '    address _beneficiary,\n', '    uint256 _releaseTime\n', '  )\n', '    public\n', '  {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_releaseTime > block.timestamp);\n', '    token = _token;\n', '    beneficiary = _beneficiary;\n', '    releaseTime = _releaseTime;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers tokens held by timelock to beneficiary.\n', '   */\n', '  function release() public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= releaseTime);\n', '\n', '    uint256 amount = token.balanceOf(address(this));\n', '    require(amount > 0);\n', '\n', '    token.transfer(beneficiary, amount);\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    public\n', '    hasMintPermission\n', '    canMint\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() public onlyOwner canMint returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract LockedOutTokens is TokenTimelock {\n', '    function LockedOutTokens(\n', '        ERC20Basic _token,\n', '        address _beneficiary,\n', '        uint256 _releaseTime\n', '    ) public TokenTimelock(_token, _beneficiary, _releaseTime)\n', '    {\n', '    }\n', '\n', '    function release() public {\n', '        require(beneficiary == msg.sender);\n', '\n', '        super.release();\n', '    }\n', '}\n', '/* solium-disable security/no-block-members */\n', '\n', '\n', '/**\n', ' * @title TokenVesting\n', ' * @dev A token holder contract that can release its token balance gradually like a\n', ' * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n', ' * owner.\n', ' */\n', 'contract TokenVesting is Ownable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  event Released(uint256 amount);\n', '  event Revoked();\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  uint256 public cliff;\n', '  uint256 public start;\n', '  uint256 public duration;\n', '\n', '  bool public revocable;\n', '\n', '  mapping (address => uint256) public released;\n', '  mapping (address => bool) public revoked;\n', '\n', '  /**\n', '   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n', '   * of the balance will have vested.\n', '   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n', '   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n', '   * @param _start the time (as Unix time) at which point vesting starts\n', '   * @param _duration duration in seconds of the period in which the tokens will vest\n', '   * @param _revocable whether the vesting is revocable or not\n', '   */\n', '  constructor(\n', '    address _beneficiary,\n', '    uint256 _start,\n', '    uint256 _cliff,\n', '    uint256 _duration,\n', '    bool _revocable\n', '  )\n', '    public\n', '  {\n', '    require(_beneficiary != address(0));\n', '    require(_cliff <= _duration);\n', '\n', '    beneficiary = _beneficiary;\n', '    revocable = _revocable;\n', '    duration = _duration;\n', '    cliff = _start.add(_cliff);\n', '    start = _start;\n', '  }\n', '\n', '  function setStart(uint256 _start) onlyOwner public {\n', '    start = _start;  \n', '  }\n', '  /**\n', '   * @notice Transfers vested tokens to beneficiary.\n', '   * @param _token ERC20 token which is being vested\n', '   */\n', '  function release(ERC20Basic _token) public {\n', '    uint256 unreleased = releasableAmount(_token);\n', '\n', '    require(unreleased > 0);\n', '\n', '    released[_token] = released[_token].add(unreleased);\n', '\n', '    _token.transfer(beneficiary, unreleased);\n', '\n', '    emit Released(unreleased);\n', '  }\n', '\n', '  /**\n', '   * @notice Allows the owner to revoke the vesting. Tokens already vested\n', '   * remain in the contract, the rest are returned to the owner.\n', '   * @param _token ERC20 token which is being vested\n', '   */\n', '  function revoke(ERC20Basic _token) public onlyOwner {\n', '    require(revocable);\n', '    require(!revoked[_token]);\n', '\n', '    uint256 balance = _token.balanceOf(address(this));\n', '\n', '    uint256 unreleased = releasableAmount(_token);\n', '    uint256 refund = balance.sub(unreleased);\n', '\n', '    revoked[_token] = true;\n', '\n', '    _token.transfer(owner, refund);\n', '\n', '    emit Revoked();\n', '  }\n', '\n', '  /**\n', "   * @dev Calculates the amount that has already vested but hasn't been released yet.\n", '   * @param _token ERC20 token which is being vested\n', '   */\n', '  function releasableAmount(ERC20Basic _token) public view returns (uint256) {\n', '    return vestedAmount(_token).sub(released[_token]);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested.\n', '   * @param _token ERC20 token which is being vested\n', '   */\n', '  function vestedAmount(ERC20Basic _token) public view returns (uint256) {\n', '    uint256 currentBalance = _token.balanceOf(address(this));\n', '    uint256 totalBalance = currentBalance.add(released[_token]);\n', '\n', '    if (block.timestamp < cliff) {\n', '      return 0;\n', '    } else if (block.timestamp >= start.add(duration) || revoked[_token]) {\n', '      return totalBalance;\n', '    } else {\n', '      return totalBalance.mul(block.timestamp.sub(start)).div(duration);\n', '    }\n', '  }\n', '}\n', '\n', 'contract VeiagTokenVesting is TokenVesting {\n', '    ERC20Basic public token;\n', '\n', '    function VeiagTokenVesting(\n', '        ERC20Basic _token,\n', '        address _beneficiary,\n', '        uint256 _start,\n', '        uint256 _cliff,\n', '        uint256 _duration,\n', '        bool _revocable\n', '    ) TokenVesting(_beneficiary, _start, _cliff, _duration, _revocable) public\n', '    {\n', '        require(_token != address(0));\n', '\n', '        token = _token;\n', '    }\n', '\n', '    function grant() public {\n', '        release(token);\n', '    }\n', '\n', '    function release(ERC20Basic _token) public {\n', '        require(beneficiary == msg.sender);\n', '        super.release(_token);\n', '    }\n', '}\n', '\n', 'contract Whitelistable {\n', '    Whitelist public whitelist;\n', '\n', '    modifier whenWhitelisted(address _wallet) {\n', '   //     require(whitelist.isWhitelisted(_wallet));\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Constructor for Whitelistable contract.\n', '    */\n', '    function Whitelistable() public {\n', '        whitelist = new Whitelist();\n', '    }\n', '}\n', '\n', 'contract VeiagCrowdsale is Pausable, Whitelistable {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 constant private DECIMALS = 18;\n', '\n', '    uint256 constant public RESERVED_LOCKED_TOKENS = 250e6 * (10 ** DECIMALS);\n', '    uint256 constant public RESERVED_TEAMS_TOKENS = 100e6 * (10 ** DECIMALS);\n', '    uint256 constant public RESERVED_FOUNDERS_TOKENS = 100e6 * (10 ** DECIMALS);\n', '    uint256 constant public RESERVED_MARKETING_TOKENS = 50e6 * (10 ** DECIMALS);\n', '\n', '    uint256 constant public MAXCAP_TOKENS_PRE_ICO = 100e6 * (10 ** DECIMALS);\n', '    \n', '    uint256 constant public MAXCAP_TOKENS_ICO = 400e6 * (10 ** DECIMALS);\n', '\n', '    uint256 constant public MIN_INVESTMENT = (10 ** 16);   // 0.01  ETH\n', '\n', '    uint256 constant public MAX_INVESTMENT = 100 * (10 ** DECIMALS); // 100  ETH\n', '\n', '    uint256 public startTimePreIco = 0;\n', '    uint256 public endTimePreIco = 0;\n', '\n', '    uint256 public startTimeIco = 0;\n', '    uint256 public endTimeIco = 0;\n', '\n', '    // rate = 0.005 ETH, 1 ETH = 200 tokens\n', '    uint256 public exchangeRatePreIco = 200;\n', '\n', '    uint256 public icoFirstWeekRate = 150;\n', '    uint256 public icoSecondWeekRate = 125;\n', '    uint256 public icoThirdWeekRate = 110;\n', '    // rate = 0.01 ETH, 1 ETH = 100 tokens\n', '    uint256 public icoRate = 100;\n', '\n', '    uint256 public tokensRemainingPreIco = MAXCAP_TOKENS_PRE_ICO;\n', '    uint256 public tokensRemainingIco = MAXCAP_TOKENS_ICO;\n', '\n', '    uint256 public tokensSoldPreIco = 0;\n', '    uint256 public tokensSoldIco = 0;\n', '    uint256 public tokensSoldTotal = 0;\n', '\n', '    uint256 public weiRaisedPreIco = 0;\n', '    uint256 public weiRaisedIco = 0;\n', '    uint256 public weiRaisedTotal = 0;\n', '\n', '    VeiagToken public token = new VeiagToken(this);\n', '    LockedOutTokens public lockedTokens;\n', '    VeiagTokenVesting public teamsTokenVesting;\n', '    VeiagTokenVesting public foundersTokenVesting;\n', '\n', '    mapping (address => uint256) private totalInvestedAmount;\n', '\n', '    modifier beforeReachingPreIcoMaxCap() {\n', '        require(tokensRemainingPreIco > 0);\n', '        _;\n', '    }\n', '\n', '    modifier beforeReachingIcoMaxCap() {\n', '        require(tokensRemainingIco > 0);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Constructor for VeiagCrowdsale contract.\n', '    * @dev Set the owner who can manage whitelist and token.\n', '    * @param _startTimePreIco The pre-ICO start time.\n', '    * @param _endTimePreIco The pre-ICO end time.\n', '    * @param _startTimeIco The ICO start time.\n', '    * @param _endTimeIco The ICO end time.\n', '    * @param _lockedWallet The address for future sale.\n', '    * @param _teamsWallet The address for reserved tokens for teams.\n', '    * @param _foundersWallet The address for reserved tokens for founders.\n', '    * @param _marketingWallet The address for reserved tokens for marketing.\n', '    */\n', '    function VeiagCrowdsale(\n', '        uint256 _startTimePreIco,\n', '        uint256 _endTimePreIco, \n', '        uint256 _startTimeIco,\n', '        uint256 _endTimeIco,\n', '        address _lockedWallet,\n', '        address _teamsWallet,\n', '        address _foundersWallet,\n', '        address _marketingWallet\n', '    ) public Whitelistable()\n', '    {\n', '        require(_lockedWallet != address(0) && _teamsWallet != address(0) && _foundersWallet != address(0) && _marketingWallet != address(0));\n', '        require(_startTimePreIco > now && _endTimePreIco > _startTimePreIco);\n', '        require(_startTimeIco > _endTimePreIco && _endTimeIco > _startTimeIco);\n', '        startTimePreIco = _startTimePreIco;\n', '        endTimePreIco = _endTimePreIco;\n', '\n', '        startTimeIco = _startTimeIco;\n', '        endTimeIco = _endTimeIco;\n', '\n', '        lockedTokens = new LockedOutTokens(token, _lockedWallet, RESERVED_LOCKED_TOKENS);\n', '        teamsTokenVesting = new VeiagTokenVesting(token, _teamsWallet, 0, 1 days, 365 days, false);\n', '        foundersTokenVesting = new VeiagTokenVesting(token, _foundersWallet, 0, 1 days, 100 days, false);\n', '\n', '        token.transferFromIco(lockedTokens, RESERVED_LOCKED_TOKENS);\n', '        token.transferFromIco(teamsTokenVesting, RESERVED_TEAMS_TOKENS);\n', '        token.transferFromIco(foundersTokenVesting, RESERVED_FOUNDERS_TOKENS);\n', '        token.transferFromIco(_marketingWallet, RESERVED_MARKETING_TOKENS);\n', '        teamsTokenVesting.transferOwnership(this);\n', '        foundersTokenVesting.transferOwnership(this);        \n', '        \n', '        whitelist.transferOwnership(msg.sender);\n', '        token.transferOwnership(msg.sender);\n', '    }\n', '\tfunction SetStartVesting(uint256 _startTimeVestingForFounders) public onlyOwner{\n', '\t    require(now > endTimeIco);\n', '\t    require(_startTimeVestingForFounders > endTimeIco);\n', '\t    teamsTokenVesting.setStart(_startTimeVestingForFounders);\n', '\t    foundersTokenVesting.setStart(endTimeIco);\n', '        teamsTokenVesting.transferOwnership(msg.sender);\n', '        foundersTokenVesting.transferOwnership(msg.sender);\t    \n', '\t}\n', '\n', '\tfunction SetStartTimeIco(uint256 _startTimeIco) public onlyOwner{\n', '        uint256 deltaTime;  \n', '        require(_startTimeIco > now && startTimeIco > now);\n', '        if (_startTimeIco > startTimeIco){\n', '          deltaTime = _startTimeIco.sub(startTimeIco);\n', '\t      endTimePreIco = endTimePreIco.add(deltaTime);\n', '\t      startTimeIco = startTimeIco.add(deltaTime);\n', '\t      endTimeIco = endTimeIco.add(deltaTime);\n', '        }\n', '        if (_startTimeIco < startTimeIco){\n', '          deltaTime = startTimeIco.sub(_startTimeIco);\n', '          endTimePreIco = endTimePreIco.sub(deltaTime);\n', '\t      startTimeIco = startTimeIco.sub(deltaTime);\n', '\t      endTimeIco = endTimeIco.sub(deltaTime);\n', '        }  \n', '    }\n', '\t\n', '\t\n', '    \n', '    /**\n', '    * @dev Fallback function can be used to buy tokens.\n', '    */\n', '    function() public payable {\n', '        if (isPreIco()) {\n', '            sellTokensPreIco();\n', '        } else if (isIco()) {\n', '            sellTokensIco();\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Check whether the pre-ICO is active at the moment.\n', '    */\n', '    function isPreIco() public view returns (bool) {\n', '        return now >= startTimePreIco && now <= endTimePreIco;\n', '    }\n', '\n', '    /**\n', '    * @dev Check whether the ICO is active at the moment.\n', '    */\n', '    function isIco() public view returns (bool) {\n', '        return now >= startTimeIco && now <= endTimeIco;\n', '    }\n', '\n', '    /**\n', '    * @dev Calculate rate for ICO phase.\n', '    */\n', '    function exchangeRateIco() public view returns(uint256) {\n', '        require(now >= startTimeIco && now <= endTimeIco);\n', '\n', '        if (now < startTimeIco + 1 weeks)\n', '            return icoFirstWeekRate;\n', '\n', '        if (now < startTimeIco + 2 weeks)\n', '            return icoSecondWeekRate;\n', '\n', '        if (now < startTimeIco + 3 weeks)\n', '            return icoThirdWeekRate;\n', '\n', '        return icoRate;\n', '    }\n', '\t\n', '    function setExchangeRatePreIco(uint256 _exchangeRatePreIco) public onlyOwner{\n', '\t  exchangeRatePreIco = _exchangeRatePreIco;\n', '\t} \n', '\t\n', '    function setIcoFirstWeekRate(uint256 _icoFirstWeekRate) public onlyOwner{\n', '\t  icoFirstWeekRate = _icoFirstWeekRate;\n', '\t} \t\n', '\t\n', '    function setIcoSecondWeekRate(uint256 _icoSecondWeekRate) public onlyOwner{\n', '\t  icoSecondWeekRate = _icoSecondWeekRate;\n', '\t} \n', '\t\n', '    function setIcoThirdWeekRate(uint256 _icoThirdWeekRate) public onlyOwner{\n', '\t  icoThirdWeekRate = _icoThirdWeekRate;\n', '\t}\n', '\t\n', '    function setIcoRate(uint256 _icoRate) public onlyOwner{\n', '\t  icoRate = _icoRate;\n', '\t}\n', '\t\n', '    /**\n', '    * @dev Sell tokens during Pre-ICO stage.\n', '    */\n', '    function sellTokensPreIco() public payable whenWhitelisted(msg.sender) beforeReachingPreIcoMaxCap whenNotPaused {\n', '        require(isPreIco());\n', '        require(msg.value >= MIN_INVESTMENT);\n', '        uint256 senderTotalInvestment = totalInvestedAmount[msg.sender].add(msg.value);\n', '        require(senderTotalInvestment <= MAX_INVESTMENT);\n', '\n', '        uint256 weiAmount = msg.value;\n', '        uint256 excessiveFunds = 0;\n', '\n', '        uint256 tokensAmount = weiAmount.mul(exchangeRatePreIco);\n', '\n', '        if (tokensAmount > tokensRemainingPreIco) {\n', '            uint256 weiToAccept = tokensRemainingPreIco.div(exchangeRatePreIco);\n', '            excessiveFunds = weiAmount.sub(weiToAccept);\n', '\n', '            tokensAmount = tokensRemainingPreIco;\n', '            weiAmount = weiToAccept;\n', '        }\n', '\n', '        addPreIcoPurchaseInfo(weiAmount, tokensAmount);\n', '\n', '        owner.transfer(weiAmount);\n', '\n', '        token.transferFromIco(msg.sender, tokensAmount);\n', '\n', '        if (excessiveFunds > 0) {\n', '            msg.sender.transfer(excessiveFunds);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Sell tokens during ICO stage.\n', '    */\n', '    function sellTokensIco() public payable whenWhitelisted(msg.sender) beforeReachingIcoMaxCap whenNotPaused {\n', '        require(isIco());\n', '        require(msg.value >= MIN_INVESTMENT);\n', '        uint256 senderTotalInvestment = totalInvestedAmount[msg.sender].add(msg.value);\n', '        require(senderTotalInvestment <= MAX_INVESTMENT);\n', '\n', '        uint256 weiAmount = msg.value;\n', '        uint256 excessiveFunds = 0;\n', '\n', '        uint256 tokensAmount = weiAmount.mul(exchangeRateIco());\n', '\n', '        if (tokensAmount > tokensRemainingIco) {\n', '            uint256 weiToAccept = tokensRemainingIco.div(exchangeRateIco());\n', '            excessiveFunds = weiAmount.sub(weiToAccept);\n', '\n', '            tokensAmount = tokensRemainingIco;\n', '            weiAmount = weiToAccept;\n', '        }\n', '\n', '        addIcoPurchaseInfo(weiAmount, tokensAmount);\n', '\n', '        owner.transfer(weiAmount);\n', '\n', '        token.transferFromIco(msg.sender, tokensAmount);\n', '\n', '        if (excessiveFunds > 0) {\n', '            msg.sender.transfer(excessiveFunds);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Manual send tokens to the specified address.\n', '    * @param _address The address of a investor.\n', '    * @param _tokensAmount Amount of tokens.\n', '    */\n', '    function manualSendTokens(address _address, uint256 _tokensAmount) public whenWhitelisted(_address) onlyOwner {\n', '        require(_address != address(0));\n', '        require(_tokensAmount > 0);\n', '        \n', '        if (isPreIco() && _tokensAmount <= tokensRemainingPreIco) {\n', '            token.transferFromIco(_address, _tokensAmount);\n', '            addPreIcoPurchaseInfo(0, _tokensAmount);\n', '        } else if (isIco() && _tokensAmount <= tokensRemainingIco) {\n', '            token.transferFromIco(_address, _tokensAmount);\n', '            addIcoPurchaseInfo(0, _tokensAmount);\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Update the pre-ICO investments statistic.\n', '    * @param _weiAmount The investment received from a pre-ICO investor.\n', '    * @param _tokensAmount The tokens that will be sent to pre-ICO investor.\n', '    */\n', '    function addPreIcoPurchaseInfo(uint256 _weiAmount, uint256 _tokensAmount) internal {\n', '        totalInvestedAmount[msg.sender] = totalInvestedAmount[msg.sender].add(_weiAmount);\n', '\n', '        tokensSoldPreIco = tokensSoldPreIco.add(_tokensAmount);\n', '        tokensSoldTotal = tokensSoldTotal.add(_tokensAmount);\n', '        tokensRemainingPreIco = tokensRemainingPreIco.sub(_tokensAmount);\n', '\n', '        weiRaisedPreIco = weiRaisedPreIco.add(_weiAmount);\n', '        weiRaisedTotal = weiRaisedTotal.add(_weiAmount);\n', '    }\n', '\n', '    /**\n', '    * @dev Update the ICO investments statistic.\n', '    * @param _weiAmount The investment received from a ICO investor.\n', '    * @param _tokensAmount The tokens that will be sent to ICO investor.\n', '    */\n', '    function addIcoPurchaseInfo(uint256 _weiAmount, uint256 _tokensAmount) internal {\n', '        totalInvestedAmount[msg.sender] = totalInvestedAmount[msg.sender].add(_weiAmount);\n', '\n', '        tokensSoldIco = tokensSoldIco.add(_tokensAmount);\n', '        tokensSoldTotal = tokensSoldTotal.add(_tokensAmount);\n', '        tokensRemainingIco = tokensRemainingIco.sub(_tokensAmount);\n', '\n', '        weiRaisedIco = weiRaisedIco.add(_weiAmount);\n', '        weiRaisedTotal = weiRaisedTotal.add(_weiAmount);\n', '    }\n', '}\n', 'contract Factory {\n', '    VeiagCrowdsale public crowdsale;\n', '\n', '    function createCrowdsale (\n', '        uint256 _startTimePreIco,\n', '        uint256 _endTimePreIco,\n', '        uint256 _startTimeIco,\n', '        uint256 _endTimeIco,\n', '        address _lockedWallet,\n', '        address _teamsWallet,\n', '        address _foundersWallet,\n', '        address _marketingWallet\n', '    ) public\n', '    {\n', '        crowdsale = new VeiagCrowdsale(\n', '            _startTimePreIco,\n', '            _endTimePreIco,\n', '            _startTimeIco,\n', '            _endTimeIco,\n', '            _lockedWallet,\n', '            _teamsWallet,\n', '            _foundersWallet,\n', '            _marketingWallet\n', '        );\n', '\n', '        Whitelist whitelist = crowdsale.whitelist();\n', '        whitelist.transferOwnership(msg.sender);\n', '\n', '        VeiagToken token = crowdsale.token();\n', '        token.transferOwnership(msg.sender);\n', '        crowdsale.transferOwnership(msg.sender);\n', '    }\n', '}']
