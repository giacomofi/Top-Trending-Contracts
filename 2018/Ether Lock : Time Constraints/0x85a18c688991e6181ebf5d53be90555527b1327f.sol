['pragma solidity ^0.4.24;\n', '\n', 'contract Owned {\n', '    \n', '    /// &#39;owner&#39; is the only address that can call a function with \n', '    /// this modifier\n', '    address public owner;\n', '    address internal newOwner;\n', '    \n', '    ///@notice The constructor assigns the message sender to be &#39;owner&#39;\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    event updateOwner(address _oldOwner, address _newOwner);\n', '    \n', '    ///change the owner\n', '    function changeOwner(address _newOwner) public onlyOwner returns(bool) {\n', '        require(owner != _newOwner);\n', '        newOwner = _newOwner;\n', '        return true;\n', '    }\n', '    \n', '    /// accept the ownership\n', '    function acceptNewOwner() public returns(bool) {\n', '        require(msg.sender == newOwner);\n', '        emit updateOwner(owner, newOwner);\n', '        owner = newOwner;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract SafeMath {\n', '    function safeMul(uint a, uint b) pure internal returns (uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '    \n', '    function safeSub(uint a, uint b) pure internal returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    \n', '    function safeAdd(uint a, uint b) pure internal returns (uint) {\n', '        uint c = a + b;\n', '        assert(c>=a && c>=b);\n', '        return c;\n', '    }\n', '\n', '}\n', '\n', 'contract ERC20Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '    \n', '    /// user tokens\n', '    mapping (address => uint256) public balances;\n', '    \n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant public returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    \n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract DateTime {\n', '        /*\n', '         *  Date and Time utilities for ethereum contracts\n', '         *\n', '         */\n', '        struct _DateTime {\n', '                uint16 year;\n', '                uint8 month;\n', '        }\n', '\n', '        uint constant DAY_IN_SECONDS = 86400;\n', '        uint constant YEAR_IN_SECONDS = 31536000;\n', '        uint constant LEAP_YEAR_IN_SECONDS = 31622400;\n', '\n', '        uint constant HOUR_IN_SECONDS = 3600;\n', '        uint constant MINUTE_IN_SECONDS = 60;\n', '\n', '        uint16 constant ORIGIN_YEAR = 1970;\n', '\n', '        function isLeapYear(uint16 year) internal pure returns (bool) {\n', '                if (year % 4 != 0) {\n', '                        return false;\n', '                }\n', '                if (year % 100 != 0) {\n', '                        return true;\n', '                }\n', '                if (year % 400 != 0) {\n', '                        return false;\n', '                }\n', '                return true;\n', '        }\n', '\n', '        function leapYearsBefore(uint year) internal pure returns (uint) {\n', '                year -= 1;\n', '                return year / 4 - year / 100 + year / 400;\n', '        }\n', '\n', '        function getDaysInMonth(uint8 month, uint16 year) internal pure returns (uint8) {\n', '                if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n', '                        return 31;\n', '                }\n', '                else if (month == 4 || month == 6 || month == 9 || month == 11) {\n', '                        return 30;\n', '                }\n', '                else if (isLeapYear(year)) {\n', '                        return 29;\n', '                }\n', '                else {\n', '                        return 28;\n', '                }\n', '        }\n', '\n', '        function parseTimestamp(uint timestamp) internal pure returns (_DateTime dt) {\n', '                uint secondsAccountedFor = 0;\n', '                uint buf;\n', '                uint8 i;\n', '\n', '                // Year\n', '                dt.year = getYear(timestamp);\n', '                buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\n', '\n', '                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\n', '                secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\n', '\n', '                // Month\n', '                uint secondsInMonth;\n', '                for (i = 1; i <= 12; i++) {\n', '                        secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\n', '                        if (secondsInMonth + secondsAccountedFor > timestamp) {\n', '                                dt.month = i;\n', '                                break;\n', '                        }\n', '                        secondsAccountedFor += secondsInMonth;\n', '                }\n', '\n', '        }\n', '\n', '        function getYear(uint timestamp) internal pure returns (uint16) {\n', '                uint secondsAccountedFor = 0;\n', '                uint16 year;\n', '                uint numLeapYears;\n', '\n', '                // Year\n', '                year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\n', '                numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\n', '\n', '                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\n', '                secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\n', '\n', '                while (secondsAccountedFor > timestamp) {\n', '                        if (isLeapYear(uint16(year - 1))) {\n', '                                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\n', '                        }\n', '                        else {\n', '                                secondsAccountedFor -= YEAR_IN_SECONDS;\n', '                        }\n', '                        year -= 1;\n', '                }\n', '                return year;\n', '        }\n', '\n', '        function getMonth(uint timestamp) internal pure returns (uint8) {\n', '                return parseTimestamp(timestamp).month;\n', '        }\n', '}\n', '\n', 'contract CUSEexerciseContract is Owned,SafeMath,DateTime {\n', '    \n', '    /// @dev name of CUSEexec contract\n', '    string public name = "CUSE_Exercise_Option";\n', '    /// @dev decimal of CUSE\n', '    uint256 decimals = 18;\n', '\n', '    /// @dev token holder\n', '    address public CUSEaddr          = 0x6081dEd2d0a57fC4b63765B182D8773E72327fE2;\n', '    address constant public USEaddr  = 0xd9485499499d66B175Cf5ED54c0a19f1a6Bcb61A;\n', '    address public tokenHolder       = 0x89Ead717c9DC15a222926221897c68F9486E7229;\n', '    address public officialAddress   = 0x41eFD65d4f101ff729D93e7a2b7F9e22f9033332;\n', '    \n', '    /// @dev exercise price of Each Month\n', '    \n', '    mapping (uint => mapping(uint => uint)) public eachExercisePrice;\n', '    \n', '    constructor (uint[] _year, uint[] _month, uint[] _exercisePrice) public {\n', '        require (_year.length == _month.length);\n', '        require (_month.length == _exercisePrice.length);\n', '        for (uint i=0; i<_month.length; i++) {\n', '            eachExercisePrice[_year[i]][_month[i]] = _exercisePrice[i];\n', '        }\n', '    }\n', '    \n', '    function () public payable {\n', '        address _user = msg.sender;\n', '        uint    _value = msg.value;\n', '        require(exerciseCUSE(_user, _value) == true);\n', '    }\n', '    \n', '    /// @dev internal function: exercise option of CUSE\n', '    function exerciseCUSE(address _user, uint _ether) internal returns (bool) {\n', '        /// @dev get CUSE price\n', '        uint _exercisePrice = getPrice();\n', '        \n', '        /// @dev get CUSE of msg.sender\n', '        \n', '        uint _CUSE = ERC20Token(CUSEaddr).balanceOf(_user);\n', '        // ETH user send\n', '        (uint _use, uint _refoundETH) = calcUSE(_CUSE, _ether, _exercisePrice);\n', '        \n', '        // do exercise\n', '        require (ERC20Token(CUSEaddr).transferFrom(_user, officialAddress, _use) == true);\n', '        require (ERC20Token(USEaddr).transferFrom(tokenHolder, _user, _use) == true);\n', '        \n', '        // refound ETH\n', '        needRefoundETH(_user, _refoundETH);\n', '        officialAddress.transfer(safeSub(_ether, _refoundETH));\n', '        return true;\n', '    }\n', '    \n', '    /// @dev get exercise price\n', '    function getPrice() internal view returns(uint) {\n', '        uint _year = getYear(now);\n', '        uint _month = getMonth(now);\n', '        return eachExercisePrice[_year][_month];\n', '    }\n', '    \n', '    /// @dev Calculate USE value\n', '    function calcUSE(uint _cuse, uint _ether, uint _exercisePrice) internal pure returns (uint _use, uint _refoundETH) {\n', '        uint _amount = _ether / _exercisePrice;\n', '        require (_amount > 0);\n', '        require (safeMul(_amount, _exercisePrice) <= _ether);\n', '        \n', '        // Check Whether msg.sender Have Enough CUSE\n', '        if (safeMul(_amount, 10**18) <= _cuse) {\n', '            _use = safeMul(_amount, 10**18);\n', '            _refoundETH = 0;\n', '        } else {\n', '            _use = _cuse;\n', '            _refoundETH = safeMul(safeSub(_amount, _use/(10**18)), _exercisePrice);\n', '        }\n', '    }\n', '    \n', '    function needRefoundETH(address _user, uint _refoundETH) internal {\n', '        if (_refoundETH > 0) {\n', '            _user.transfer(_refoundETH);\n', '        }\n', '    }\n', '    \n', '    /// @dev Change Exercise Price\n', '    function changeExerciseprice(uint[] _year, uint[] _month, uint[] _exercisePrice) public onlyOwner {\n', '        require (_year.length == _month.length);\n', '        require (_month.length == _exercisePrice.length);\n', '        for (uint i=0; i<_month.length; i++) {\n', '            eachExercisePrice[_year[i]][_month[i]] = _exercisePrice[i];\n', '        }\n', '    }\n', '    \n', '    function changeCUSEaddress(address _cuseAddr) public onlyOwner {\n', '        CUSEaddr = _cuseAddr;\n', '    }\n', '    \n', '    /// @dev Change token holder\n', '    function changeTokenHolder(address _tokenHolder) public onlyOwner {\n', '        tokenHolder = _tokenHolder;\n', '    }\n', '    \n', '    /// @dev Change Official Address If Necessary\n', '    function changeOfficialAddressIfNecessary(address _officialAddress) public onlyOwner {\n', '        officialAddress = _officialAddress;\n', '    }\n', '\n', '}']