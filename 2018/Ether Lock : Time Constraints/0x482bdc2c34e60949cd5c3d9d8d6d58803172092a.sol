['pragma solidity 0.4.21;\n', '/**\n', '* @title ICO CONTRACT\n', '* @dev ERC-20 Token Standard Compliant\n', '* @author Fares A. Akel C. <span class="__cf_email__" data-cfemail="2e48004f405a41404741004f454b426e49434f4742004d4143">[email&#160;protected]</span>\n', '*/\n', '\n', '/**\n', ' * @title SafeMath by OpenZeppelin\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract token {\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    }\n', '\n', 'contract DateTimeAPI {\n', '        \n', '    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) public constant returns (uint timestamp);\n', '\n', '}\n', '\n', 'contract ICO {\n', '\n', '    DateTimeAPI dateTimeContract = DateTimeAPI(0x1a6184CD4C5Bea62B0116de7962EE7315B7bcBce);//Main\n', '    //DateTimeAPI dateTimeContract = DateTimeAPI(0x71b6e049E78c75fC61480357CD5aA1B81E1b16E0);//Kovan\n', '    //DateTimeAPI dateTimeContract = DateTimeAPI(0x670b2B167e13b131C491D87bA745dA41f07ecbc3);//Rinkeby\n', '    //DateTimeAPI dateTimeContract = DateTimeAPI(0x1F0a2ba4B115bd3e4007533C52BBd30C17E8B222);//Ropsten\n', '    \n', '    using SafeMath for uint256;\n', '    enum State {\n', '    //This ico have  states\n', '        preSale,\n', '        stage1a,\n', '        stage1b,\n', '        stage2a,\n', '        stage2b,\n', '        stage3a,\n', '        stage3b,\n', '        stage4a,\n', '        stage4b,\n', '        finishing,\n', '        Successful\n', '    }\n', '\n', '    //public variables\n', '    State public state = State.preSale; //Set initial stage\n', '    uint256 public startTime = dateTimeContract.toTimestamp(2018,4,1,0,0); //block-time when it start\n', '    uint256 public totalRaised; //eth in wei\n', '    uint256 public totalDistributed; //tokens distributed\n', '    uint256 public stageDistributed; //tokens distributed per stage\n', '    uint256[10] public rates = [2500,1250,1000,833,714,625,556,500,417,250];\n', '    uint256 public ICOdeadline;\n', '    uint256 public completedAt;\n', '    token public tokenReward;\n', '    address public creator;\n', '    address public beneficiary;\n', '    string public campaignUrl;\n', '    string public version = &#39;1&#39;;\n', '\n', '    //events for log\n', '    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\n', '    event LogBeneficiaryPaid(address _beneficiaryAddress);\n', '    event LogFundingSuccessful(uint _totalRaised);\n', '    event LogFunderInitialized(\n', '        address _creator,\n', '        string _url,\n', '        uint256 _ICOdeadline);\n', '    event LogContributorsPayout(address _addr, uint _amount);\n', '    event LogStageDistributed(uint256 _amount, State _stage);\n', '\n', '    modifier notFinished() {\n', '        require(state != State.Successful);\n', '        _;\n', '    }\n', '    /**\n', '    * @notice ICO constructor\n', '    * @param _addressOfTokenUsedAsReward is the token totalDistributed\n', '    * @param _beneficiary is the address that will receive funds collected\n', '    */\n', '    function ICO ( token _addressOfTokenUsedAsReward, address _beneficiary ) public {\n', '\n', '        creator = msg.sender;\n', '        tokenReward = _addressOfTokenUsedAsReward;\n', '        beneficiary = _beneficiary;\n', '\n', '        ICOdeadline = dateTimeContract.toTimestamp(2018,6,30,23,59); //June 30 at 23:59 Unix time\n', '\n', '        emit LogFunderInitialized(\n', '            creator,\n', '            campaignUrl,\n', '            ICOdeadline);\n', '            \n', '    }\n', '\n', '    /**\n', '    * @notice contribution handler\n', '    */\n', '    function contribute() public notFinished payable {\n', '        require(now >= startTime);\n', '\n', '        uint256 tokenBought = 0;\n', '\n', '        totalRaised = totalRaised.add(msg.value);\n', '\n', '        //Rate of exchange depends on stage\n', '        if (state == State.preSale){\n', '\n', '            tokenBought = msg.value.mul(rates[0]);\n', '            require(stageDistributed.add(tokenBought) <= 2000000 * (10**18));\n', '        \n', '        } else if (state == State.stage1a){\n', '        \n', '            tokenBought = msg.value.mul(rates[1]);\n', '            require(stageDistributed.add(tokenBought) <= 1500000 * (10**18));\n', '        \n', '        } else if (state == State.stage1b){\n', '        \n', '            tokenBought = msg.value.mul(rates[2]);\n', '            require(stageDistributed.add(tokenBought) <= 1500000 * (10**18));\n', '        \n', '        } else if (state == State.stage2a){\n', '        \n', '            tokenBought = msg.value.mul(rates[3]);\n', '            require(stageDistributed.add(tokenBought) <= 1500000 * (10**18));\n', '        \n', '        } else if (state == State.stage2b){\n', '        \n', '            tokenBought = msg.value.mul(rates[4]);\n', '            require(stageDistributed.add(tokenBought) <= 1500000 * (10**18));\n', '        \n', '        } else if (state == State.stage3a){\n', '        \n', '            tokenBought = msg.value.mul(rates[5]);\n', '            require(stageDistributed.add(tokenBought) <= 1500000 * (10**18));\n', '        \n', '        } else if (state == State.stage3b){\n', '        \n', '            tokenBought = msg.value.mul(rates[6]);\n', '            require(stageDistributed.add(tokenBought) <= 1500000 * (10**18));\n', '        \n', '        } else if (state == State.stage4a){\n', '        \n', '            tokenBought = msg.value.mul(rates[7]);\n', '            require(stageDistributed.add(tokenBought) <= 1500000 * (10**18));\n', '        \n', '        } else if (state == State.stage4b){\n', '        \n', '            tokenBought = msg.value.mul(rates[8]);\n', '            require(stageDistributed.add(tokenBought) <= 1500000 * (10**18));\n', '        \n', '        } else if (state == State.finishing){\n', '\n', '            tokenBought = msg.value.mul(rates[9]);\n', '\n', '        }\n', '\n', '        stageDistributed = stageDistributed.add(tokenBought);\n', '        totalDistributed = totalDistributed.add(tokenBought);\n', '        \n', '        tokenReward.transfer(msg.sender, tokenBought);\n', '\n', '        emit LogFundingReceived(msg.sender, msg.value, totalRaised);\n', '        emit LogContributorsPayout(msg.sender, tokenBought);\n', '\n', '        checkIfFundingCompleteOrExpired();\n', '    }\n', '\n', '    /**\n', '    * @notice check status\n', '    */\n', '    function checkIfFundingCompleteOrExpired() public {\n', '\n', '        if(state == State.preSale && now > dateTimeContract.toTimestamp(2018,4,30,23,59)){ // Apr 30 2018\n', '\n', '            emit LogStageDistributed(stageDistributed,state);\n', '\n', '            state = State.stage1a;\n', '            stageDistributed = 0;\n', '\n', '        } else if(state == State.stage1a && now > dateTimeContract.toTimestamp(2018,5,7,23,59)){ // May 7 2018\n', '\n', '            emit LogStageDistributed(stageDistributed,state);\n', '\n', '            state = State.stage1b;\n', '            stageDistributed = 0;\n', '            \n', '        } else if(state == State.stage1b && now > dateTimeContract.toTimestamp(2018,5,14,23,59)){ // May 14 2018\n', '\n', '            emit LogStageDistributed(stageDistributed,state);\n', '            \n', '            state = State.stage2a;\n', '            stageDistributed = 0;\n', '            \n', '        } else if(state == State.stage2a && now > dateTimeContract.toTimestamp(2018,5,21,23,59)){ // May 21 2018\n', '\n', '            emit LogStageDistributed(stageDistributed,state);\n', '            \n', '            state = State.stage2b;\n', '            stageDistributed = 0;\n', '            \n', '        } else if(state == State.stage2b && now > dateTimeContract.toTimestamp(2018,5,28,23,59)){ // May 28 2018\n', '\n', '            emit LogStageDistributed(stageDistributed,state);\n', '            \n', '            state = State.stage3a;\n', '            stageDistributed = 0;\n', '            \n', '        } else if(state == State.stage3a && now > dateTimeContract.toTimestamp(2018,6,4,23,59)){ // Jun 4 2018\n', '\n', '            emit LogStageDistributed(stageDistributed,state);\n', '            \n', '            state = State.stage3b;\n', '            stageDistributed = 0;\n', '            \n', '        } else if(state == State.stage3b && now > dateTimeContract.toTimestamp(2018,6,11,23,59)){ // Jun 11 2018\n', '\n', '            emit LogStageDistributed(stageDistributed,state);\n', '            \n', '            state = State.stage4a;\n', '            stageDistributed = 0;\n', '            \n', '        } else if(state == State.stage4a && now > dateTimeContract.toTimestamp(2018,6,18,23,59)){ // Jun 18 2018\n', '\n', '            emit LogStageDistributed(stageDistributed,state);\n', '            \n', '            state = State.stage4b;\n', '            stageDistributed = 0;\n', '            \n', '        } else if(state == State.stage4b && now > dateTimeContract.toTimestamp(2018,6,25,23,59)){ // Jun 25 2018\n', '\n', '            emit LogStageDistributed(stageDistributed,state);\n', '            \n', '            state = State.finishing;\n', '            stageDistributed = 0;\n', '            \n', '        } else if(state == State.finishing && now > ICOdeadline && state!=State.Successful){ // ICOdeadline is Jun 30\n', '\n', '            emit LogStageDistributed(stageDistributed,state);\n', '            \n', '            state = State.Successful; //ico becomes Successful\n', '            completedAt = now; //ICO is complete\n', '\n', '            emit LogFundingSuccessful(totalRaised); //we log the finish\n', '            finished(); //and execute closure\n', '\n', '        }\n', '\n', '    }\n', '\n', '    /**\n', '    * @notice closure handler\n', '    */\n', '    function finished() public { //When finished eth and remaining tokens are transfered to beneficiary\n', '\n', '        require(state == State.Successful);\n', '        uint256 remanent = tokenReward.balanceOf(this);\n', '\n', '        require(beneficiary.send(address(this).balance));\n', '        tokenReward.transfer(beneficiary,remanent);\n', '\n', '        emit LogBeneficiaryPaid(beneficiary);\n', '        emit LogContributorsPayout(beneficiary, remanent);\n', '\n', '    }\n', '\n', '    /*\n', '    * @dev direct payments handle\n', '    */\n', '    function () public payable {\n', '        \n', '        contribute();\n', '\n', '    }\n', '}']