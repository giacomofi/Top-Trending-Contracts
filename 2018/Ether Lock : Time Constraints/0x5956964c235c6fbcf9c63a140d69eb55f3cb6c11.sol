['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a / b;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract BSPMintable is Ownable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  event Mint(uint256 amount);\n', '  event DistributorChanged(address indexed previousDistributor, address indexed newDistributor);\n', '\n', '  address public distributor = 0x4F91C1f068E0dED2B7fF823289Add800E1c26Fc3;\n', '\n', '  // BSP contract address\n', '  ERC20Basic public BSPToken = ERC20Basic(0x5d551fA77ec2C7dd1387B626c4f33235c3885199);\n', '  // lock 30% total supply of BSP for mining\n', '  uint256 constant public rewardAmount = 630000000 * (10 ** 18);\n', '  // mining duration\n', '  uint256 constant public duration = 4 years;\n', '  // adjust mining rate every 1 year\n', '  uint256[4] public miningRate = [40,20,20,20];\n', '\n', '  bool public started = false;\n', '\n', '  uint256 public startTime;\n', '\n', '  uint256 public minted;\n', '\n', '  modifier whenStarted() {\n', '    require(started == true && startTime <= block.timestamp);\n', '    _;\n', '  }\n', '\n', '  function startMining(uint256 _startTime) public onlyOwner {\n', '\n', '      require(started == false && BSPToken.balanceOf(this) >= rewardAmount);\n', '\n', '      // cannot start from a historical time\n', '      require(_startTime >= block.timestamp);\n', '      // prevent input error\n', '      require(_startTime <= block.timestamp + 60 days);\n', '\n', '      startTime = _startTime;\n', '      started = true;\n', '  }\n', '\n', '  function changeDistributor(address _newDistributor) public onlyOwner {\n', '    emit DistributorChanged(distributor, _newDistributor);\n', '    distributor = _newDistributor;\n', '\n', '  }\n', '\n', '  function mint() public whenStarted {\n', '    uint256 unminted = mintableAmount();\n', '    require(unminted > 0);\n', '\n', '    minted = minted.add(unminted);\n', '    BSPToken.safeTransfer(distributor, unminted);\n', '\n', '    emit Mint(unminted);\n', '  }\n', '\n', '  function mintableAmount() public view returns (uint256) {\n', '\n', '    if(started == false || startTime >= block.timestamp){\n', '        return 0;\n', '    }\n', '\n', '    if (block.timestamp >= startTime.add(duration)){\n', '        return BSPToken.balanceOf(this);\n', '    }\n', '\n', '    uint currentYear = block.timestamp.sub(startTime).div(1 years);\n', '    uint currentDay = (block.timestamp.sub(startTime) % (1 years)).div(1 days);\n', '    uint currentMintable = 0;\n', '\n', '    for (uint i = 0; i < currentYear; i++){\n', '        currentMintable = currentMintable.add(rewardAmount.mul(miningRate[i]).div(100));\n', '    }\n', '    currentMintable = currentMintable.add(rewardAmount.mul(miningRate[currentYear]).div(36500).mul(currentDay));\n', '\n', '    return currentMintable.sub(minted);\n', '  }\n', '\n', '  function totalBspAmount() public view returns (uint256) {\n', '      return BSPToken.balanceOf(this).add(minted);\n', '  }\n', '\n', '  function () public payable {\n', '    revert ();\n', '  }\n', '\n', '}']