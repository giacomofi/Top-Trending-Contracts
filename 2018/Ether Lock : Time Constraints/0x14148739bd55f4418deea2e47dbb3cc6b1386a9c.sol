['pragma solidity ^0.4.21;\n', '\n', 'contract ERC20 {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '  function transfer(address to, uint value) returns (bool ok);\n', '  function transferFrom(address from, address to, uint value) returns (bool ok);\n', '  function approve(address spender, uint value) returns (bool ok);\n', '  function mintToken(address to, uint256 value) returns (uint256);\n', '  function changeTransfer(bool allowed);\n', '}\n', '\n', '\n', 'contract Sale {\n', '\n', '    uint256 public maxMintable;\n', '    uint256 public totalMinted;\n', '    uint public endBlock;\n', '    uint public startBlock;\n', '    uint public exchangeRate;\n', '    bool public isFunding;\n', '    ERC20 public Token;\n', '    address public ETHWallet;\n', '    uint256 public heldTotal;\n', '\n', '    bool private configSet;\n', '    address public creator;\n', '\n', '    mapping (address => uint256) public heldTokens;\n', '    mapping (address => uint) public heldTimeline;\n', '\n', '    event Contribution(address from, uint256 amount);\n', '    event ReleaseTokens(address from, uint256 amount);\n', '\n', '    function Sale(address _wallet) {\n', '        startBlock = block.number;\n', '        maxMintable = 110000000000000000000000000;\n', '        ETHWallet = _wallet;\n', '        isFunding = true;\n', '        creator = msg.sender;\n', '        createHeldCoins();\n', '        exchangeRate = 25000;\n', '    }\n', '\n', '    // setup function to be ran only 1 time\n', '    // setup token address\n', '    // setup end Block number\n', '    function setup(address token_address, uint end_block) {\n', '        require(!configSet);\n', '        Token = ERC20(token_address);\n', '        endBlock = end_block;\n', '        configSet = true;\n', '    }\n', '\n', '    function closeSale() external {\n', '      require(msg.sender==creator);\n', '      isFunding = false;\n', '    }\n', '\n', '    function () payable {\n', '        require(msg.value>0);\n', '        require(isFunding);\n', '        require(block.number <= endBlock);\n', '        uint256 amount = msg.value * exchangeRate;\n', '        uint256 total = totalMinted + amount;\n', '        require(total<=maxMintable);\n', '        totalMinted += total;\n', '        ETHWallet.transfer(msg.value);\n', '        Token.mintToken(msg.sender, amount);\n', '        Contribution(msg.sender, amount);\n', '    }\n', '\n', '    // CONTRIBUTE FUNCTION\n', '    // converts ETH to TOKEN and sends new TOKEN to the sender\n', '    function contribute() external payable {\n', '        require(msg.value>0);\n', '        require(isFunding);\n', '        require(block.number <= endBlock);\n', '        uint256 amount = msg.value * exchangeRate;\n', '        uint256 total = totalMinted + amount;\n', '        require(total<=maxMintable);\n', '        totalMinted += total;\n', '        ETHWallet.transfer(msg.value);\n', '        Token.mintToken(msg.sender, amount);\n', '        Contribution(msg.sender, amount);\n', '    }\n', '\n', '    // update the ETH/COIN rate\n', '    function updateRate(uint256 rate) external {\n', '        require(msg.sender==creator);\n', '        require(isFunding);\n', '        exchangeRate = rate;\n', '    }\n', '\n', '    // change creator address\n', '    function changeCreator(address _creator) external {\n', '        require(msg.sender==creator);\n', '        creator = _creator;\n', '    }\n', '\n', '    // change transfer status for ERC20 token\n', '    function changeTransferStats(bool _allowed) external {\n', '        require(msg.sender==creator);\n', '        Token.changeTransfer(_allowed);\n', '    }\n', '\n', '    // internal function that allocates a specific amount of TOKENS at a specific block number.\n', '    // only ran 1 time on initialization\n', '    function createHeldCoins() internal {\n', '        createHoldToken(0xd04443ceae5aed6871db555caf1a154802ce1600, 40000000000000000000000000);\n', '        createHoldToken(0x8ce3b3d46e994b6ec215963e385b7bf20d60683d, 40000000000000000000000000);\n', '        createHoldToken(0x61777c00fc0353d8c62a8f8c34336dfc46596906, 10000000000000000000000000);\n', '    }\n', '\n', '    // public function to get the amount of tokens held for an address\n', '    function getHeldCoin(address _address) public constant returns (uint256) {\n', '        return heldTokens[_address];\n', '    }\n', '\n', '    // function to create held tokens for developer\n', '    function createHoldToken(address _to, uint256 amount) internal {\n', '        heldTokens[_to] = amount;\n', '        heldTimeline[_to] = block.number + 0;\n', '        heldTotal += amount;\n', '        totalMinted += heldTotal;\n', '    }\n', '\n', '    // function to release held tokens for developers\n', '    function releaseHeldCoins() external {\n', '        uint256 held = heldTokens[msg.sender];\n', '        uint heldBlock = heldTimeline[msg.sender];\n', '        require(held >= 0);\n', '        require(block.number >= heldBlock);\n', '        heldTokens[msg.sender] = 0;\n', '        heldTimeline[msg.sender] = 0;\n', '        Token.mintToken(msg.sender, held);\n', '        ReleaseTokens(msg.sender, held);\n', '    }\n', '\n', '\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'contract ERC20 {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '  function transfer(address to, uint value) returns (bool ok);\n', '  function transferFrom(address from, address to, uint value) returns (bool ok);\n', '  function approve(address spender, uint value) returns (bool ok);\n', '  function mintToken(address to, uint256 value) returns (uint256);\n', '  function changeTransfer(bool allowed);\n', '}\n', '\n', '\n', 'contract Sale {\n', '\n', '    uint256 public maxMintable;\n', '    uint256 public totalMinted;\n', '    uint public endBlock;\n', '    uint public startBlock;\n', '    uint public exchangeRate;\n', '    bool public isFunding;\n', '    ERC20 public Token;\n', '    address public ETHWallet;\n', '    uint256 public heldTotal;\n', '\n', '    bool private configSet;\n', '    address public creator;\n', '\n', '    mapping (address => uint256) public heldTokens;\n', '    mapping (address => uint) public heldTimeline;\n', '\n', '    event Contribution(address from, uint256 amount);\n', '    event ReleaseTokens(address from, uint256 amount);\n', '\n', '    function Sale(address _wallet) {\n', '        startBlock = block.number;\n', '        maxMintable = 110000000000000000000000000;\n', '        ETHWallet = _wallet;\n', '        isFunding = true;\n', '        creator = msg.sender;\n', '        createHeldCoins();\n', '        exchangeRate = 25000;\n', '    }\n', '\n', '    // setup function to be ran only 1 time\n', '    // setup token address\n', '    // setup end Block number\n', '    function setup(address token_address, uint end_block) {\n', '        require(!configSet);\n', '        Token = ERC20(token_address);\n', '        endBlock = end_block;\n', '        configSet = true;\n', '    }\n', '\n', '    function closeSale() external {\n', '      require(msg.sender==creator);\n', '      isFunding = false;\n', '    }\n', '\n', '    function () payable {\n', '        require(msg.value>0);\n', '        require(isFunding);\n', '        require(block.number <= endBlock);\n', '        uint256 amount = msg.value * exchangeRate;\n', '        uint256 total = totalMinted + amount;\n', '        require(total<=maxMintable);\n', '        totalMinted += total;\n', '        ETHWallet.transfer(msg.value);\n', '        Token.mintToken(msg.sender, amount);\n', '        Contribution(msg.sender, amount);\n', '    }\n', '\n', '    // CONTRIBUTE FUNCTION\n', '    // converts ETH to TOKEN and sends new TOKEN to the sender\n', '    function contribute() external payable {\n', '        require(msg.value>0);\n', '        require(isFunding);\n', '        require(block.number <= endBlock);\n', '        uint256 amount = msg.value * exchangeRate;\n', '        uint256 total = totalMinted + amount;\n', '        require(total<=maxMintable);\n', '        totalMinted += total;\n', '        ETHWallet.transfer(msg.value);\n', '        Token.mintToken(msg.sender, amount);\n', '        Contribution(msg.sender, amount);\n', '    }\n', '\n', '    // update the ETH/COIN rate\n', '    function updateRate(uint256 rate) external {\n', '        require(msg.sender==creator);\n', '        require(isFunding);\n', '        exchangeRate = rate;\n', '    }\n', '\n', '    // change creator address\n', '    function changeCreator(address _creator) external {\n', '        require(msg.sender==creator);\n', '        creator = _creator;\n', '    }\n', '\n', '    // change transfer status for ERC20 token\n', '    function changeTransferStats(bool _allowed) external {\n', '        require(msg.sender==creator);\n', '        Token.changeTransfer(_allowed);\n', '    }\n', '\n', '    // internal function that allocates a specific amount of TOKENS at a specific block number.\n', '    // only ran 1 time on initialization\n', '    function createHeldCoins() internal {\n', '        createHoldToken(0xd04443ceae5aed6871db555caf1a154802ce1600, 40000000000000000000000000);\n', '        createHoldToken(0x8ce3b3d46e994b6ec215963e385b7bf20d60683d, 40000000000000000000000000);\n', '        createHoldToken(0x61777c00fc0353d8c62a8f8c34336dfc46596906, 10000000000000000000000000);\n', '    }\n', '\n', '    // public function to get the amount of tokens held for an address\n', '    function getHeldCoin(address _address) public constant returns (uint256) {\n', '        return heldTokens[_address];\n', '    }\n', '\n', '    // function to create held tokens for developer\n', '    function createHoldToken(address _to, uint256 amount) internal {\n', '        heldTokens[_to] = amount;\n', '        heldTimeline[_to] = block.number + 0;\n', '        heldTotal += amount;\n', '        totalMinted += heldTotal;\n', '    }\n', '\n', '    // function to release held tokens for developers\n', '    function releaseHeldCoins() external {\n', '        uint256 held = heldTokens[msg.sender];\n', '        uint heldBlock = heldTimeline[msg.sender];\n', '        require(held >= 0);\n', '        require(block.number >= heldBlock);\n', '        heldTokens[msg.sender] = 0;\n', '        heldTimeline[msg.sender] = 0;\n', '        Token.mintToken(msg.sender, held);\n', '        ReleaseTokens(msg.sender, held);\n', '    }\n', '\n', '\n', '}']
