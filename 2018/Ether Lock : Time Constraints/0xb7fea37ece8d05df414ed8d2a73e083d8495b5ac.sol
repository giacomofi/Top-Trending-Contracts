['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '}\n', '\n', '\n', 'interface BittechToken {\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function transfer(address receiver, uint amount) external;\n', '    function burn(uint256 _value) external;\n', '}\n', '\n', '\n', 'contract BittechSale is Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    BittechToken public token;\n', '    uint256 public minimalPriceUSD = 10000; // 10 usd\n', '    uint256 public ETHUSD = 300;\n', '    uint256 public tokenPricePerUSD = 100; // 1 usd\n', '    \n', '    address public constant fundsWallet = 0x1ba99f4F5Aa56684423a122D72990A7851AaFD9e;\n', '    uint256 public startTime;\n', '    uint256 public constant weekTime = 604800;\n', '    \n', '    constructor() public {\n', '       token = BittechToken(0x6EE2EE1a5a257E6E7AdE7fe537617EaD9C7BD3D2);\n', '       startTime = now;\n', '    }\n', '    \n', '    function getBonus() public view returns (uint256) {\n', '        \n', '        if (now >= startTime.add(weekTime.mul(8))) {\n', '            return 104;\n', '        } else if (now >= startTime.add(weekTime.mul(7))) {\n', '            return 106;\n', '        } else if (now >= startTime.add(weekTime.mul(6))) {\n', '            return 108;\n', '        } else if (now >= startTime.add(weekTime.mul(5))) {\n', '            return 110;\n', '        } else if (now >= startTime.add(weekTime.mul(4))) {\n', '            return 112;\n', '        } else if (now >= startTime.add(weekTime.mul(3))) {\n', '            return 114;\n', '        } else if (now >= startTime.add(weekTime.mul(2))) {\n', '            return 116;\n', '        } else if (now >= startTime.add(weekTime)) {\n', '            return 118;\n', '        } else {\n', '            return 120;\n', '        }\n', '        \n', '    }\n', '    \n', '    function () external payable {\n', '        require(msg.sender != address(0));\n', '        require(msg.value.mul(ETHUSD) >= minimalPriceUSD.mul(10 ** 18).div(1000));\n', '        \n', '        uint256 tokens = msg.value.mul(ETHUSD).mul(getBonus()).mul(tokenPricePerUSD).div(100).div(100);\n', '        token.transfer(msg.sender, tokens);\n', '        \n', '        if (now >= startTime.add(weekTime.mul(8))) {\n', '            fundsWallet.transfer(address(this).balance);\n', '            token.burn(token.balanceOf(address(this)));\n', '        }\n', '    }\n', '    \n', '    function sendTokens(address _to, uint256 _amount) external onlyOwner {\n', '        token.transfer(_to, _amount);\n', '    }\n', '    \n', '    function updatePrice(uint256 _ETHUSD) onlyOwner public {\n', '        ETHUSD = _ETHUSD;\n', '    }\n', '\n', '    function updateMinimal(uint256 _minimalPriceUSD) onlyOwner public {\n', '        minimalPriceUSD = _minimalPriceUSD;\n', '    }\n', '\n', '    function updateTokenPricePerUSD(uint256 _tokenPricePerUSD) onlyOwner public {\n', '        tokenPricePerUSD = _tokenPricePerUSD;\n', '    }\n', '    \n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '}\n', '\n', '\n', 'interface BittechToken {\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function transfer(address receiver, uint amount) external;\n', '    function burn(uint256 _value) external;\n', '}\n', '\n', '\n', 'contract BittechSale is Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    BittechToken public token;\n', '    uint256 public minimalPriceUSD = 10000; // 10 usd\n', '    uint256 public ETHUSD = 300;\n', '    uint256 public tokenPricePerUSD = 100; // 1 usd\n', '    \n', '    address public constant fundsWallet = 0x1ba99f4F5Aa56684423a122D72990A7851AaFD9e;\n', '    uint256 public startTime;\n', '    uint256 public constant weekTime = 604800;\n', '    \n', '    constructor() public {\n', '       token = BittechToken(0x6EE2EE1a5a257E6E7AdE7fe537617EaD9C7BD3D2);\n', '       startTime = now;\n', '    }\n', '    \n', '    function getBonus() public view returns (uint256) {\n', '        \n', '        if (now >= startTime.add(weekTime.mul(8))) {\n', '            return 104;\n', '        } else if (now >= startTime.add(weekTime.mul(7))) {\n', '            return 106;\n', '        } else if (now >= startTime.add(weekTime.mul(6))) {\n', '            return 108;\n', '        } else if (now >= startTime.add(weekTime.mul(5))) {\n', '            return 110;\n', '        } else if (now >= startTime.add(weekTime.mul(4))) {\n', '            return 112;\n', '        } else if (now >= startTime.add(weekTime.mul(3))) {\n', '            return 114;\n', '        } else if (now >= startTime.add(weekTime.mul(2))) {\n', '            return 116;\n', '        } else if (now >= startTime.add(weekTime)) {\n', '            return 118;\n', '        } else {\n', '            return 120;\n', '        }\n', '        \n', '    }\n', '    \n', '    function () external payable {\n', '        require(msg.sender != address(0));\n', '        require(msg.value.mul(ETHUSD) >= minimalPriceUSD.mul(10 ** 18).div(1000));\n', '        \n', '        uint256 tokens = msg.value.mul(ETHUSD).mul(getBonus()).mul(tokenPricePerUSD).div(100).div(100);\n', '        token.transfer(msg.sender, tokens);\n', '        \n', '        if (now >= startTime.add(weekTime.mul(8))) {\n', '            fundsWallet.transfer(address(this).balance);\n', '            token.burn(token.balanceOf(address(this)));\n', '        }\n', '    }\n', '    \n', '    function sendTokens(address _to, uint256 _amount) external onlyOwner {\n', '        token.transfer(_to, _amount);\n', '    }\n', '    \n', '    function updatePrice(uint256 _ETHUSD) onlyOwner public {\n', '        ETHUSD = _ETHUSD;\n', '    }\n', '\n', '    function updateMinimal(uint256 _minimalPriceUSD) onlyOwner public {\n', '        minimalPriceUSD = _minimalPriceUSD;\n', '    }\n', '\n', '    function updateTokenPricePerUSD(uint256 _tokenPricePerUSD) onlyOwner public {\n', '        tokenPricePerUSD = _tokenPricePerUSD;\n', '    }\n', '    \n', '}']
