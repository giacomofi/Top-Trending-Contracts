['pragma solidity ^0.4.0;\n', '\n', 'contract Coinflip {\n', '\n', '    uint public minWager = 10000000000000000;\n', '    uint public joinDelta = 10;\n', '    uint public fee = 1; //1%\n', '    uint public cancelFee = 1; //1%\n', '    uint public maxDuration = 86400; //24h\n', '    bool public canCreateGames = true;\n', '\n', '    address public owner = msg.sender;\n', '\n', '    uint public gamesCounter = 0;\n', '    mapping(uint => CoinFlipGame) private games;\n', '    event gameStateChanged(uint gameId, uint state);\n', '    event onWithdraw(uint amount, uint time);\n', '    event onDeposit(uint amount, address from, uint time);\n', '\n', '    struct CoinFlipGame {\n', '        uint state;\n', '        uint createTime;\n', '        uint endTime;\n', '        uint odds;\n', '        uint fee;\n', '        uint hostWager;\n', '        uint opponentWager;\n', '        uint cancelFee;\n', '        uint winAmount;\n', '        address host;\n', '        address opponent;\n', '        address winner;\n', '    }\n', '\n', '    function() public payable {\n', '        onDeposit(msg.value, msg.sender, now);\n', '    }\n', '\n', '    modifier onlyBy(address _account)\n', '    {\n', '        require(msg.sender == _account);\n', '        _;\n', '    }\n', '\n', '    function terminate() public onlyBy(owner) {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '    function randomize() private view returns (uint) {\n', '        var firstPart =  uint(block.blockhash(block.number-1)) % 25;\n', '        var secondPart =  uint(block.blockhash(block.number-2)) % 25;\n', '        var thirdPart =  uint(block.blockhash(block.number-3)) % 25;\n', '        var fourthPart =  uint(block.blockhash(block.number-4)) % 25;\n', '        return firstPart + secondPart + thirdPart + fourthPart;\n', '    }\n', '\n', '    function withdraw(uint amount) onlyBy(owner) public {\n', '        require(amount > 0);\n', '        owner.transfer(amount);\n', '        onWithdraw(amount, now);\n', '    }\n', '\n', '    function toggleCanCreateGames() onlyBy(owner) public {\n', '        canCreateGames = !canCreateGames;\n', '    }\n', '\n', '    function setCancelFee(uint newCancelFee) onlyBy(owner) public {\n', '        require(newCancelFee > 0 && newCancelFee < 25);\n', '        cancelFee = newCancelFee;\n', '    }\n', '\n', '    function setMinWager(uint newMinWager) onlyBy(owner) public {\n', '        require(newMinWager > 0);\n', '        minWager = newMinWager;\n', '    }\n', '\n', '    function setMaxDuration(uint newMaxDuration) onlyBy(owner) public {\n', '        require(newMaxDuration > 0);\n', '        maxDuration = newMaxDuration;\n', '    }\n', '\n', '    function setFee(uint newFee) onlyBy(owner) public {\n', '        require(newFee < 25);\n', '        fee = newFee;\n', '    }\n', '\n', '    function setJoinDelta(uint newJoinDelta) onlyBy(owner) public {\n', '        require(newJoinDelta > 0);\n', '        require(newJoinDelta < 100);\n', '        joinDelta = newJoinDelta;\n', '    }\n', '\n', '    function getGame(uint id) public constant returns(  uint gameId,\n', '                                                        uint state,\n', '                                                        uint createTime,\n', '                                                        uint endTime,\n', '                                                        uint odds,\n', '                                                        address host,\n', '                                                        uint hostWager,\n', '                                                        address opponent,\n', '                                                        uint opponentWager,\n', '                                                        address winner,\n', '                                                        uint winAmount) {\n', '        require(id <= gamesCounter);\n', '        var game = games[id];\n', '        return (\n', '        id,\n', '        game.state,\n', '        game.createTime,\n', '        game.endTime,\n', '        game.odds,\n', '        game.host,\n', '        game.hostWager,\n', '        game.opponent,\n', '        game.opponentWager,\n', '        game.winner,\n', '        game.winAmount);\n', '    }\n', '\n', '    function getGameFees(uint id) public constant returns(  uint gameId,\n', '        uint feeVal,\n', '        uint cancelFeeVal) {\n', '        require(id <= gamesCounter);\n', '        var game = games[id];\n', '        return (\n', '        id,\n', '        game.fee,\n', '        game.cancelFee);\n', '    }\n', '\n', '    function cancelGame(uint id) public {\n', '        require(id <= gamesCounter);\n', '        CoinFlipGame storage game = games[id];\n', '        if(msg.sender == game.host) {\n', '            game.state = 3; //cacneled\n', '            game.endTime = now;\n', '            game.host.transfer(game.hostWager);\n', '            gameStateChanged(id, 3);\n', '        } else {\n', '            require(game.state == 1); //active\n', '            require((now - game.createTime) >= maxDuration); //outdated\n', '            require(msg.sender == owner); //server cancel\n', '            gameStateChanged(id, 3);\n', '            game.state = 3; //canceled\n', '            game.endTime = now;\n', '            var cancelFeeValue = game.hostWager * cancelFee / 100;\n', '            game.host.transfer(game.hostWager - cancelFeeValue);\n', '            game.cancelFee = cancelFeeValue;\n', '        }\n', '    }\n', '\n', '    function joinGame(uint id) public payable {\n', '        var game = games[id];\n', '        require(game.state == 1);\n', '        require(msg.value >= minWager);\n', '        require((now - game.createTime) < maxDuration); //not outdated\n', '        if(msg.value != game.hostWager) {\n', '            uint delta;\n', '            if( game.hostWager < msg.value ) {\n', '                delta = msg.value - game.hostWager;\n', '            } else {\n', '                delta = game.hostWager - msg.value;\n', '            }\n', '            require( ((delta * 100) / game.hostWager ) <= joinDelta);\n', '        }\n', '\n', '        game.state = 2;\n', '        gameStateChanged(id, 2);\n', '        game.opponent = msg.sender;\n', '        game.opponentWager = msg.value;\n', '        game.endTime = now;\n', '        game.odds = randomize() % 100;\n', '        var totalAmount = (game.hostWager + game.opponentWager);\n', '        var hostWagerPercentage = (100 * game.hostWager) / totalAmount;\n', '        game.fee = (totalAmount * fee) / 100;\n', '        var transferAmount = totalAmount - game.fee;\n', '        require(game.odds >= 0 && game.odds <= 100);\n', '        if(hostWagerPercentage > game.odds) {\n', '            game.winner = game.host;\n', '            game.winAmount = transferAmount;\n', '            game.host.transfer(transferAmount);\n', '        } else {\n', '            game.winner = game.opponent;\n', '            game.winAmount = transferAmount;\n', '            game.opponent.transfer(transferAmount);\n', '        }\n', '    }\n', '\n', '    function startGame() public payable returns(uint) {\n', '        require(canCreateGames == true);\n', '        require(msg.value >= minWager);\n', '        gamesCounter++;\n', '        var game = games[gamesCounter];\n', '        gameStateChanged(gamesCounter, 1);\n', '        game.state = 1;\n', '        game.createTime = now;\n', '        game.host = msg.sender;\n', '        game.hostWager = msg.value;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.0;\n', '\n', 'contract Coinflip {\n', '\n', '    uint public minWager = 10000000000000000;\n', '    uint public joinDelta = 10;\n', '    uint public fee = 1; //1%\n', '    uint public cancelFee = 1; //1%\n', '    uint public maxDuration = 86400; //24h\n', '    bool public canCreateGames = true;\n', '\n', '    address public owner = msg.sender;\n', '\n', '    uint public gamesCounter = 0;\n', '    mapping(uint => CoinFlipGame) private games;\n', '    event gameStateChanged(uint gameId, uint state);\n', '    event onWithdraw(uint amount, uint time);\n', '    event onDeposit(uint amount, address from, uint time);\n', '\n', '    struct CoinFlipGame {\n', '        uint state;\n', '        uint createTime;\n', '        uint endTime;\n', '        uint odds;\n', '        uint fee;\n', '        uint hostWager;\n', '        uint opponentWager;\n', '        uint cancelFee;\n', '        uint winAmount;\n', '        address host;\n', '        address opponent;\n', '        address winner;\n', '    }\n', '\n', '    function() public payable {\n', '        onDeposit(msg.value, msg.sender, now);\n', '    }\n', '\n', '    modifier onlyBy(address _account)\n', '    {\n', '        require(msg.sender == _account);\n', '        _;\n', '    }\n', '\n', '    function terminate() public onlyBy(owner) {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '    function randomize() private view returns (uint) {\n', '        var firstPart =  uint(block.blockhash(block.number-1)) % 25;\n', '        var secondPart =  uint(block.blockhash(block.number-2)) % 25;\n', '        var thirdPart =  uint(block.blockhash(block.number-3)) % 25;\n', '        var fourthPart =  uint(block.blockhash(block.number-4)) % 25;\n', '        return firstPart + secondPart + thirdPart + fourthPart;\n', '    }\n', '\n', '    function withdraw(uint amount) onlyBy(owner) public {\n', '        require(amount > 0);\n', '        owner.transfer(amount);\n', '        onWithdraw(amount, now);\n', '    }\n', '\n', '    function toggleCanCreateGames() onlyBy(owner) public {\n', '        canCreateGames = !canCreateGames;\n', '    }\n', '\n', '    function setCancelFee(uint newCancelFee) onlyBy(owner) public {\n', '        require(newCancelFee > 0 && newCancelFee < 25);\n', '        cancelFee = newCancelFee;\n', '    }\n', '\n', '    function setMinWager(uint newMinWager) onlyBy(owner) public {\n', '        require(newMinWager > 0);\n', '        minWager = newMinWager;\n', '    }\n', '\n', '    function setMaxDuration(uint newMaxDuration) onlyBy(owner) public {\n', '        require(newMaxDuration > 0);\n', '        maxDuration = newMaxDuration;\n', '    }\n', '\n', '    function setFee(uint newFee) onlyBy(owner) public {\n', '        require(newFee < 25);\n', '        fee = newFee;\n', '    }\n', '\n', '    function setJoinDelta(uint newJoinDelta) onlyBy(owner) public {\n', '        require(newJoinDelta > 0);\n', '        require(newJoinDelta < 100);\n', '        joinDelta = newJoinDelta;\n', '    }\n', '\n', '    function getGame(uint id) public constant returns(  uint gameId,\n', '                                                        uint state,\n', '                                                        uint createTime,\n', '                                                        uint endTime,\n', '                                                        uint odds,\n', '                                                        address host,\n', '                                                        uint hostWager,\n', '                                                        address opponent,\n', '                                                        uint opponentWager,\n', '                                                        address winner,\n', '                                                        uint winAmount) {\n', '        require(id <= gamesCounter);\n', '        var game = games[id];\n', '        return (\n', '        id,\n', '        game.state,\n', '        game.createTime,\n', '        game.endTime,\n', '        game.odds,\n', '        game.host,\n', '        game.hostWager,\n', '        game.opponent,\n', '        game.opponentWager,\n', '        game.winner,\n', '        game.winAmount);\n', '    }\n', '\n', '    function getGameFees(uint id) public constant returns(  uint gameId,\n', '        uint feeVal,\n', '        uint cancelFeeVal) {\n', '        require(id <= gamesCounter);\n', '        var game = games[id];\n', '        return (\n', '        id,\n', '        game.fee,\n', '        game.cancelFee);\n', '    }\n', '\n', '    function cancelGame(uint id) public {\n', '        require(id <= gamesCounter);\n', '        CoinFlipGame storage game = games[id];\n', '        if(msg.sender == game.host) {\n', '            game.state = 3; //cacneled\n', '            game.endTime = now;\n', '            game.host.transfer(game.hostWager);\n', '            gameStateChanged(id, 3);\n', '        } else {\n', '            require(game.state == 1); //active\n', '            require((now - game.createTime) >= maxDuration); //outdated\n', '            require(msg.sender == owner); //server cancel\n', '            gameStateChanged(id, 3);\n', '            game.state = 3; //canceled\n', '            game.endTime = now;\n', '            var cancelFeeValue = game.hostWager * cancelFee / 100;\n', '            game.host.transfer(game.hostWager - cancelFeeValue);\n', '            game.cancelFee = cancelFeeValue;\n', '        }\n', '    }\n', '\n', '    function joinGame(uint id) public payable {\n', '        var game = games[id];\n', '        require(game.state == 1);\n', '        require(msg.value >= minWager);\n', '        require((now - game.createTime) < maxDuration); //not outdated\n', '        if(msg.value != game.hostWager) {\n', '            uint delta;\n', '            if( game.hostWager < msg.value ) {\n', '                delta = msg.value - game.hostWager;\n', '            } else {\n', '                delta = game.hostWager - msg.value;\n', '            }\n', '            require( ((delta * 100) / game.hostWager ) <= joinDelta);\n', '        }\n', '\n', '        game.state = 2;\n', '        gameStateChanged(id, 2);\n', '        game.opponent = msg.sender;\n', '        game.opponentWager = msg.value;\n', '        game.endTime = now;\n', '        game.odds = randomize() % 100;\n', '        var totalAmount = (game.hostWager + game.opponentWager);\n', '        var hostWagerPercentage = (100 * game.hostWager) / totalAmount;\n', '        game.fee = (totalAmount * fee) / 100;\n', '        var transferAmount = totalAmount - game.fee;\n', '        require(game.odds >= 0 && game.odds <= 100);\n', '        if(hostWagerPercentage > game.odds) {\n', '            game.winner = game.host;\n', '            game.winAmount = transferAmount;\n', '            game.host.transfer(transferAmount);\n', '        } else {\n', '            game.winner = game.opponent;\n', '            game.winAmount = transferAmount;\n', '            game.opponent.transfer(transferAmount);\n', '        }\n', '    }\n', '\n', '    function startGame() public payable returns(uint) {\n', '        require(canCreateGames == true);\n', '        require(msg.value >= minWager);\n', '        gamesCounter++;\n', '        var game = games[gamesCounter];\n', '        gameStateChanged(gamesCounter, 1);\n', '        game.state = 1;\n', '        game.createTime = now;\n', '        game.host = msg.sender;\n', '        game.hostWager = msg.value;\n', '    }\n', '\n', '}']
