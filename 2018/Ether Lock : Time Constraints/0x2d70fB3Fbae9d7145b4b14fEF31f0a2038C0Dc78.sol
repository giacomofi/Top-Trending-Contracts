['pragma solidity 0.4.18;\n', '\n', '// File: contracts/ERC20Interface.sol\n', '\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'interface ERC20 {\n', '    function totalSupply() public view returns (uint supply);\n', '    function balanceOf(address _owner) public view returns (uint balance);\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '    function approve(address _spender, uint _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint remaining);\n', '    function decimals() public view returns(uint digits);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '// File: contracts/KyberReserveInterface.sol\n', '\n', '/// @title Kyber Reserve contract\n', 'interface KyberReserveInterface {\n', '\n', '    function trade(\n', '        ERC20 srcToken,\n', '        uint srcAmount,\n', '        ERC20 destToken,\n', '        address destAddress,\n', '        uint conversionRate,\n', '        bool validate\n', '    )\n', '        public\n', '        payable\n', '        returns(bool);\n', '\n', '    function getConversionRate(ERC20 src, ERC20 dest, uint srcQty, uint blockNumber) public view returns(uint);\n', '}\n', '\n', '// File: contracts/Utils.sol\n', '\n', '/// @title Kyber constants contract\n', 'contract Utils {\n', '\n', '    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n', '    uint  constant internal PRECISION = (10**18);\n', '    uint  constant internal MAX_QTY   = (10**28); // 10B tokens\n', '    uint  constant internal MAX_RATE  = (PRECISION * 10**6); // up to 1M tokens per ETH\n', '    uint  constant internal MAX_DECIMALS = 18;\n', '    uint  constant internal ETH_DECIMALS = 18;\n', '    mapping(address=>uint) internal decimals;\n', '\n', '    function setDecimals(ERC20 token) internal {\n', '        if (token == ETH_TOKEN_ADDRESS) decimals[token] = ETH_DECIMALS;\n', '        else decimals[token] = token.decimals();\n', '    }\n', '\n', '    function getDecimals(ERC20 token) internal view returns(uint) {\n', '        if (token == ETH_TOKEN_ADDRESS) return ETH_DECIMALS; // save storage access\n', '        uint tokenDecimals = decimals[token];\n', '        // technically, there might be token with decimals 0\n', '        // moreover, very possible that old tokens have decimals 0\n', '        // these tokens will just have higher gas fees.\n', '        if(tokenDecimals == 0) return token.decimals();\n', '\n', '        return tokenDecimals;\n', '    }\n', '\n', '    function calcDstQty(uint srcQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n', '        require(srcQty <= MAX_QTY);\n', '        require(rate <= MAX_RATE);\n', '\n', '        if (dstDecimals >= srcDecimals) {\n', '            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n', '            return (srcQty * rate * (10**(dstDecimals - srcDecimals))) / PRECISION;\n', '        } else {\n', '            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n', '            return (srcQty * rate) / (PRECISION * (10**(srcDecimals - dstDecimals)));\n', '        }\n', '    }\n', '\n', '    function calcSrcQty(uint dstQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n', '        require(dstQty <= MAX_QTY);\n', '        require(rate <= MAX_RATE);\n', '        \n', '        //source quantity is rounded up. to avoid dest quantity being too low.\n', '        uint numerator;\n', '        uint denominator;\n', '        if (srcDecimals >= dstDecimals) {\n', '            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n', '            numerator = (PRECISION * dstQty * (10**(srcDecimals - dstDecimals)));\n', '            denominator = rate;\n', '        } else {\n', '            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n', '            numerator = (PRECISION * dstQty);\n', '            denominator = (rate * (10**(dstDecimals - srcDecimals)));\n', '        }\n', '        return (numerator + denominator - 1) / denominator; //avoid rounding down errors\n', '    }\n', '}\n', '\n', '// File: contracts/PermissionGroups.sol\n', '\n', 'contract PermissionGroups {\n', '\n', '    address public admin;\n', '    address public pendingAdmin;\n', '    mapping(address=>bool) internal operators;\n', '    mapping(address=>bool) internal alerters;\n', '    address[] internal operatorsGroup;\n', '    address[] internal alertersGroup;\n', '    uint constant internal MAX_GROUP_SIZE = 50;\n', '\n', '    function PermissionGroups() public {\n', '        admin = msg.sender;\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOperator() {\n', '        require(operators[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAlerter() {\n', '        require(alerters[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function getOperators () external view returns(address[]) {\n', '        return operatorsGroup;\n', '    }\n', '\n', '    function getAlerters () external view returns(address[]) {\n', '        return alertersGroup;\n', '    }\n', '\n', '    event TransferAdminPending(address pendingAdmin);\n', '\n', '    /**\n', '     * @dev Allows the current admin to set the pendingAdmin address.\n', '     * @param newAdmin The address to transfer ownership to.\n', '     */\n', '    function transferAdmin(address newAdmin) public onlyAdmin {\n', '        require(newAdmin != address(0));\n', '        TransferAdminPending(pendingAdmin);\n', '        pendingAdmin = newAdmin;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\n', '     * @param newAdmin The address to transfer ownership to.\n', '     */\n', '    function transferAdminQuickly(address newAdmin) public onlyAdmin {\n', '        require(newAdmin != address(0));\n', '        TransferAdminPending(newAdmin);\n', '        AdminClaimed(newAdmin, admin);\n', '        admin = newAdmin;\n', '    }\n', '\n', '    event AdminClaimed( address newAdmin, address previousAdmin);\n', '\n', '    /**\n', '     * @dev Allows the pendingAdmin address to finalize the change admin process.\n', '     */\n', '    function claimAdmin() public {\n', '        require(pendingAdmin == msg.sender);\n', '        AdminClaimed(pendingAdmin, admin);\n', '        admin = pendingAdmin;\n', '        pendingAdmin = address(0);\n', '    }\n', '\n', '    event AlerterAdded (address newAlerter, bool isAdd);\n', '\n', '    function addAlerter(address newAlerter) public onlyAdmin {\n', '        require(!alerters[newAlerter]); // prevent duplicates.\n', '        require(alertersGroup.length < MAX_GROUP_SIZE);\n', '\n', '        AlerterAdded(newAlerter, true);\n', '        alerters[newAlerter] = true;\n', '        alertersGroup.push(newAlerter);\n', '    }\n', '\n', '    function removeAlerter (address alerter) public onlyAdmin {\n', '        require(alerters[alerter]);\n', '        alerters[alerter] = false;\n', '\n', '        for (uint i = 0; i < alertersGroup.length; ++i) {\n', '            if (alertersGroup[i] == alerter) {\n', '                alertersGroup[i] = alertersGroup[alertersGroup.length - 1];\n', '                alertersGroup.length--;\n', '                AlerterAdded(alerter, false);\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    event OperatorAdded(address newOperator, bool isAdd);\n', '\n', '    function addOperator(address newOperator) public onlyAdmin {\n', '        require(!operators[newOperator]); // prevent duplicates.\n', '        require(operatorsGroup.length < MAX_GROUP_SIZE);\n', '\n', '        OperatorAdded(newOperator, true);\n', '        operators[newOperator] = true;\n', '        operatorsGroup.push(newOperator);\n', '    }\n', '\n', '    function removeOperator (address operator) public onlyAdmin {\n', '        require(operators[operator]);\n', '        operators[operator] = false;\n', '\n', '        for (uint i = 0; i < operatorsGroup.length; ++i) {\n', '            if (operatorsGroup[i] == operator) {\n', '                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];\n', '                operatorsGroup.length -= 1;\n', '                OperatorAdded(operator, false);\n', '                break;\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/Withdrawable.sol\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens or ethers\n', ' * @author Ilan Doron\n', ' * @dev This allows to recover any tokens or Ethers received in a contract.\n', ' * This will prevent any accidental loss of tokens.\n', ' */\n', 'contract Withdrawable is PermissionGroups {\n', '\n', '    event TokenWithdraw(ERC20 token, uint amount, address sendTo);\n', '\n', '    /**\n', '     * @dev Withdraw all ERC20 compatible tokens\n', '     * @param token ERC20 The address of the token contract\n', '     */\n', '    function withdrawToken(ERC20 token, uint amount, address sendTo) external onlyAdmin {\n', '        require(token.transfer(sendTo, amount));\n', '        TokenWithdraw(token, amount, sendTo);\n', '    }\n', '\n', '    event EtherWithdraw(uint amount, address sendTo);\n', '\n', '    /**\n', '     * @dev Withdraw Ethers\n', '     */\n', '    function withdrawEther(uint amount, address sendTo) external onlyAdmin {\n', '        sendTo.transfer(amount);\n', '        EtherWithdraw(amount, sendTo);\n', '    }\n', '}\n', '\n', '// File: contracts/KyberOasisReserve.sol\n', '\n', 'contract OtcInterface {\n', '    function getBuyAmount(ERC20 buyGem, ERC20 payGem, uint payAmt) public constant returns (uint fillAmt);\n', '    function sellAllAmount(ERC20 payGem, uint payAmt, ERC20 buyGem, uint minFillAmount) public returns (uint fillAmt);\n', '}\n', '\n', '\n', 'contract TokenInterface is ERC20 {\n', '    function deposit() public payable;\n', '    function withdraw(uint) public;\n', '}\n', '\n', '\n', 'contract KyberOasisReserve is KyberReserveInterface, Withdrawable, Utils {\n', '\n', '    address public kyberNetwork;\n', '    OtcInterface public otc;\n', '    TokenInterface public wethToken;\n', '    ERC20 public tradeToken;\n', '    bool public tradeEnabled;\n', '    uint public feeBps;\n', '\n', '    function KyberOasisReserve(\n', '        address _kyberNetwork,\n', '        OtcInterface _otc,\n', '        TokenInterface _wethToken,\n', '        ERC20 _tradeToken,\n', '        address _admin,\n', '        uint _feeBps\n', '    ) public {\n', '        require(_admin != address(0));\n', '        require(_kyberNetwork != address(0));\n', '        require(_otc != address(0));\n', '        require(_wethToken != address(0));\n', '        require(_tradeToken != address(0));\n', '        require(_feeBps < 10000);\n', '\n', '        kyberNetwork = _kyberNetwork;\n', '        otc = _otc;\n', '        wethToken = _wethToken;\n', '        tradeToken = _tradeToken;\n', '        admin = _admin;\n', '        feeBps = _feeBps;\n', '        tradeEnabled = true;\n', '    }\n', '\n', '    event DepositToken(ERC20 token, uint amount);\n', '\n', '    function() public payable {\n', '        DepositToken(ETH_TOKEN_ADDRESS, msg.value);\n', '    }\n', '\n', '    event TradeExecute(\n', '        address indexed origin,\n', '        address src,\n', '        uint srcAmount,\n', '        address destToken,\n', '        uint destAmount,\n', '        address destAddress\n', '    );\n', '\n', '    function trade(\n', '        ERC20 srcToken,\n', '        uint srcAmount,\n', '        ERC20 destToken,\n', '        address destAddress,\n', '        uint conversionRate,\n', '        bool validate\n', '    )\n', '        public\n', '        payable\n', '        returns(bool)\n', '    {\n', '\n', '        require(tradeEnabled);\n', '        require(msg.sender == kyberNetwork);\n', '\n', '        require(doTrade(srcToken, srcAmount, destToken, destAddress, conversionRate, validate));\n', '\n', '        return true;\n', '    }\n', '\n', '    event TradeEnabled(bool enable);\n', '\n', '    function enableTrade() public onlyAdmin returns(bool) {\n', '        tradeEnabled = true;\n', '        TradeEnabled(true);\n', '\n', '        return true;\n', '    }\n', '\n', '    function disableTrade() public onlyAlerter returns(bool) {\n', '        tradeEnabled = false;\n', '        TradeEnabled(false);\n', '\n', '        return true;\n', '    }\n', '\n', '    event ReserveParamsSet(\n', '        address kyberNetwork,\n', '        OtcInterface otc,\n', '        TokenInterface wethToken,\n', '        ERC20 tradeToken,\n', '        uint feeBps\n', '    );\n', '\n', '    function setReserveParams(\n', '        address _kyberNetwork,\n', '        OtcInterface _otc,\n', '        TokenInterface _wethToken,\n', '        ERC20 _tradeToken,\n', '        uint _feeBps\n', '    )\n', '        public\n', '        onlyAdmin\n', '    {\n', '        require(_kyberNetwork != address(0));\n', '        require(_otc != address(0));\n', '        require(_wethToken != address(0));\n', '        require(_tradeToken != address(0));\n', '        require(_feeBps < 10000);\n', '\n', '        kyberNetwork = _kyberNetwork;\n', '        otc = _otc;\n', '        wethToken = _wethToken;\n', '        tradeToken = _tradeToken;\n', '        feeBps = _feeBps;\n', '\n', '        ReserveParamsSet(kyberNetwork, otc, wethToken, tradeToken, feeBps);\n', '    }\n', '\n', '    function getDestQty(ERC20 src, ERC20 dest, uint srcQty, uint rate) public view returns(uint) {\n', '        uint dstDecimals = getDecimals(dest);\n', '        uint srcDecimals = getDecimals(src);\n', '\n', '        return calcDstQty(srcQty, srcDecimals, dstDecimals, rate);\n', '    }\n', '\n', '    function valueAfterReducingFee(uint val) public view returns(uint) {\n', '        require(val <= MAX_QTY);\n', '        return ((10000 - feeBps) * val) / 10000;\n', '    }\n', '\n', '    function getConversionRate(ERC20 src, ERC20 dest, uint srcQty, uint blockNumber) public view returns(uint) {\n', '        uint  rate;\n', '        uint  destQty;\n', '        ERC20 wrappedSrc;\n', '        ERC20 wrappedDest;\n', '\n', '        blockNumber;\n', '\n', '        if (!tradeEnabled) return 0;\n', '        if ((tradeToken != src) && (tradeToken != dest)) return 0;\n', '\n', '        if (src == ETH_TOKEN_ADDRESS) {\n', '            wrappedSrc = wethToken;\n', '            wrappedDest = dest;\n', '        } else if (dest == ETH_TOKEN_ADDRESS) {\n', '            wrappedSrc = src;\n', '            wrappedDest = wethToken;\n', '        } else {\n', '            return 0;\n', '        }\n', '\n', '        destQty = otc.getBuyAmount(wrappedDest, wrappedSrc, srcQty);\n', '\n', '        rate = valueAfterReducingFee(destQty) * PRECISION / srcQty;\n', '\n', '        return rate;\n', '    }\n', '\n', '    function doTrade(\n', '        ERC20 srcToken,\n', '        uint srcAmount,\n', '        ERC20 destToken,\n', '        address destAddress,\n', '        uint conversionRate,\n', '        bool validate\n', '    )\n', '        internal\n', '        returns(bool)\n', '    {\n', '\n', '        uint actualDestAmount;\n', '\n', '        require((ETH_TOKEN_ADDRESS == srcToken) || (ETH_TOKEN_ADDRESS == destToken));\n', '        require((tradeToken == srcToken) || (tradeToken == destToken));\n', '\n', '        // can skip validation if done at kyber network level\n', '        if (validate) {\n', '            require(conversionRate > 0);\n', '            if (srcToken == ETH_TOKEN_ADDRESS)\n', '                require(msg.value == srcAmount);\n', '            else\n', '                require(msg.value == 0);\n', '        }\n', '\n', '        uint destAmount = getDestQty(srcToken, destToken, srcAmount, conversionRate);\n', '        // sanity check\n', '        require(destAmount > 0);\n', '\n', '        if (srcToken == ETH_TOKEN_ADDRESS) {\n', '            wethToken.deposit.value(msg.value)();\n', '\n', '            //TODO - move to constructor...\n', '            if (wethToken.allowance(this, otc) < msg.value) {\n', '                wethToken.approve(otc, uint(-1));\n', '            }\n', '\n', '            actualDestAmount = otc.sellAllAmount(wethToken, msg.value, destToken, destAmount);\n', '            require(actualDestAmount >= destAmount);\n', '\n', '            // transfer back only requested dest amount.\n', '            require(destToken.transfer(destAddress, destAmount));\n', '        } else {\n', '            require(srcToken.transferFrom(msg.sender, this, srcAmount));\n', '\n', '            /* TODO - move to constructor  */\n', '            if (srcToken.allowance(this, otc) < srcAmount) {\n', '                srcToken.approve(otc, uint(-1));\n', '            }\n', ' \n', '            actualDestAmount = otc.sellAllAmount(srcToken, srcAmount, wethToken, destAmount);\n', '            require(actualDestAmount >= destAmount);\n', '            wethToken.withdraw(actualDestAmount);\n', '\n', '            // transfer back only requested dest amount.\n', '            destAddress.transfer(destAmount); \n', '        }\n', '\n', '        TradeExecute(msg.sender, srcToken, srcAmount, destToken, destAmount, destAddress);\n', '\n', '        return true;\n', '\n', '    }\n', '}']