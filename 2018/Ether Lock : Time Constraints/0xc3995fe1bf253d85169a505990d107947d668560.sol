['pragma solidity ^0.4.24;\n', '\n', 'contract TokenContract {\n', '  function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n', '  function balanceOf(address who) external view returns (uint256);\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '  \n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner, "Only Owner");\n', '    _;\n', '  }\n', '}\n', '\n', 'contract GymRewardsExchange is Ownable {\n', '  TokenContract public tkn;\n', '  bool public active = true;\n', '  mapping (address => uint256) public deposits;\n', '  mapping (address => string) public ethtoeosAddress;\n', '  mapping (bytes32 => address) public eostoethAddress;\n', '  mapping (uint256 => address) public indexedAddress;\n', '  uint256 public addresIndex = 0;\n', '\n', '  constructor() public {\n', '    tkn = TokenContract(0x92D3e963aA94D909869940A8d15FA16CcbC6655E);\n', '  }\n', '\n', '  function activateExchange(bool _active) public onlyOwner {\n', '    active = _active;\n', '  }\n', '\n', '  function deposit(bytes32 _addressHash, string _eosAddress) public {\n', '    require(active, "Exchange is not active");\n', '    uint256 currentBalance = tkn.balanceOf(msg.sender);\n', '    require(currentBalance > 0, "You should have Tokens to exchange");\n', '    require(tkn.allowance(msg.sender, address(this)) == currentBalance, "This contract needs aproval for the whole amount of tokens");\n', '    require(deposits[msg.sender] == 0, "Only one deposit per address is allowed");\n', '    if (tkn.transferFrom(msg.sender, address(this), currentBalance)) {\n', '      addresIndex += 1;\n', '      indexedAddress[addresIndex] = msg.sender;\n', '      deposits[msg.sender] = currentBalance;\n', '      ethtoeosAddress[msg.sender] = _eosAddress;\n', '      eostoethAddress[_addressHash] = msg.sender;\n', '      emit NewDeposit(msg.sender, currentBalance, _eosAddress);\n', '    }\n', '  }\n', '\n', '  function checkAddressDeposit(address _address) public view returns (uint256) {\n', '      return(deposits[_address]);\n', '  }\n', '  \n', '  function checkAddressEOS(address _address) public view returns (string) {\n', '      return(ethtoeosAddress[_address]);\n', '  }\n', '\n', '  function checkAddressETH(bytes32 _address) public view returns (address) {\n', '      return(eostoethAddress[_address]);\n', '  }\n', '  \n', '  event NewDeposit(address senderAccount, uint256 amount, string eosAddress);\n', '\n', '}']