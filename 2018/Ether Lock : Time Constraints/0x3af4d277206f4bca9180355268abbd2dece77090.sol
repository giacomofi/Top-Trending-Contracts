['pragma solidity ^0.4.21;\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and an\n', '// initial fixed supply\n', '// ----------------------------------------------------------------------------\n', 'contract SEPCToken is ERC20Interface, Ownable{\n', '    using SafeMath for uint;\n', '\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint _totalSupply;\n', '\n', '    // ERC20 token max reward amount\n', '    uint public angelMaxAmount;\n', '    uint public firstMaxAmount;\n', '    uint public secondMaxAmount;\n', '    uint public thirdMaxAmount;\n', '\n', '    // ERC20 token current reward amount\n', '    uint public angelCurrentAmount = 0;\n', '    uint public firstCurrentAmount = 0;\n', '    uint public secondCurrentAmount = 0;\n', '    uint public thirdCurrentAmount = 0;\n', '\n', '    // ERC20 token reward rate\n', '    uint public angelRate = 40000;\n', '    uint public firstRate = 13333;\n', '    uint public secondRate = 10000;\n', '    uint public thirdRate = 6153;\n', '\n', '    //Team hold amount\n', '    uint public teamHoldAmount = 700000000;\n', '\n', '    //every stage start time and end time\n', '    uint public angelStartTime = 1528905600;  // Bei jing time 2018/06/14 00:00:00\n', '    uint public firstStartTime = 1530201600;  // Beijing time 2018/06/29 00:00:00\n', '    uint public secondStartTime = 1531929600; // Beijing time 2018/07/19 00:00:00\n', '    uint public thirdStartTime = 1534521600;  // Beijing time 2018/08/18 00:00:00\n', '    uint public endTime = 1550419200; // Beijing time 2019/02/18 00:00:00\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    function SEPCToken() public {\n', '        symbol = "SEPC";\n', '        name = "SEPC";\n', '        decimals = 18;\n', '        angelMaxAmount = 54000000 * 10**uint(decimals);\n', '        firstMaxAmount = 56000000 * 10**uint(decimals);\n', '        secondMaxAmount= 90000000 * 10**uint(decimals);\n', '        thirdMaxAmount = 100000000 * 10**uint(decimals);\n', '        _totalSupply = 1000000000 * 10**uint(decimals);\n', '        balances[msg.sender] = teamHoldAmount * 10**uint(decimals);\n', '        emit Transfer(address(0), msg.sender, teamHoldAmount * 10**uint(decimals));\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from token owner&#39;s account to `to` account\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account\n', '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces\n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    //\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account. The `spender` contract function\n', '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // send ERC20 Token to multi address\n', '    // ------------------------------------------------------------------------\n', '    function multiTransfer(address[] _addresses, uint256[] amounts) public returns (bool success){\n', '        for (uint256 i = 0; i < _addresses.length; i++) {\n', '            transfer(_addresses[i], amounts[i]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // send ERC20 Token to multi address with decimals\n', '    // ------------------------------------------------------------------------\n', '    function multiTransferDecimals(address[] _addresses, uint256[] amounts) public returns (bool success){\n', '        for (uint256 i = 0; i < _addresses.length; i++) {\n', '            transfer(_addresses[i], amounts[i] * 10**uint(decimals));\n', '        }\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Crowd-funding\n', '    // ------------------------------------------------------------------------\n', '    function () payable public {\n', '          require(now < endTime && now >= angelStartTime);\n', '          require(angelCurrentAmount <= angelMaxAmount && firstCurrentAmount <= firstMaxAmount && secondCurrentAmount <= secondMaxAmount && thirdCurrentAmount <= thirdMaxAmount);\n', '          uint weiAmount = msg.value;\n', '          uint rewardAmount;\n', '          if(now >= angelStartTime && now < firstStartTime){\n', '            rewardAmount = weiAmount.mul(angelRate);\n', '            balances[msg.sender] = balances[msg.sender].add(rewardAmount);\n', '            angelCurrentAmount = angelCurrentAmount.add(rewardAmount);\n', '            require(angelCurrentAmount <= angelMaxAmount);\n', '          }else if (now >= firstStartTime && now < secondStartTime){\n', '            rewardAmount = weiAmount.mul(firstRate);\n', '            balances[msg.sender] = balances[msg.sender].add(rewardAmount);\n', '            firstCurrentAmount = firstCurrentAmount.add(rewardAmount);\n', '            require(firstCurrentAmount <= firstMaxAmount);\n', '          }else if(now >= secondStartTime && now < thirdStartTime){\n', '            rewardAmount = weiAmount.mul(secondRate);\n', '            balances[msg.sender] = balances[msg.sender].add(rewardAmount);\n', '            secondCurrentAmount = secondCurrentAmount.add(rewardAmount);\n', '            require(secondCurrentAmount <= secondMaxAmount);\n', '          }else if(now >= thirdStartTime && now < endTime){\n', '            rewardAmount = weiAmount.mul(thirdRate);\n', '            balances[msg.sender] = balances[msg.sender].add(rewardAmount);\n', '            thirdCurrentAmount = thirdCurrentAmount.add(rewardAmount);\n', '            require(thirdCurrentAmount <= thirdMaxAmount);\n', '          }\n', '          owner.transfer(msg.value);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // After-Crowd-funding\n', '    // ------------------------------------------------------------------------\n', '    function collectToken()  public onlyOwner {\n', '        require( now > endTime);\n', '        balances[owner] = balances[owner].add(angelMaxAmount + firstMaxAmount + secondMaxAmount + thirdMaxAmount -angelCurrentAmount - firstCurrentAmount - secondCurrentAmount - thirdCurrentAmount);\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and an\n', '// initial fixed supply\n', '// ----------------------------------------------------------------------------\n', 'contract SEPCToken is ERC20Interface, Ownable{\n', '    using SafeMath for uint;\n', '\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint _totalSupply;\n', '\n', '    // ERC20 token max reward amount\n', '    uint public angelMaxAmount;\n', '    uint public firstMaxAmount;\n', '    uint public secondMaxAmount;\n', '    uint public thirdMaxAmount;\n', '\n', '    // ERC20 token current reward amount\n', '    uint public angelCurrentAmount = 0;\n', '    uint public firstCurrentAmount = 0;\n', '    uint public secondCurrentAmount = 0;\n', '    uint public thirdCurrentAmount = 0;\n', '\n', '    // ERC20 token reward rate\n', '    uint public angelRate = 40000;\n', '    uint public firstRate = 13333;\n', '    uint public secondRate = 10000;\n', '    uint public thirdRate = 6153;\n', '\n', '    //Team hold amount\n', '    uint public teamHoldAmount = 700000000;\n', '\n', '    //every stage start time and end time\n', '    uint public angelStartTime = 1528905600;  // Bei jing time 2018/06/14 00:00:00\n', '    uint public firstStartTime = 1530201600;  // Beijing time 2018/06/29 00:00:00\n', '    uint public secondStartTime = 1531929600; // Beijing time 2018/07/19 00:00:00\n', '    uint public thirdStartTime = 1534521600;  // Beijing time 2018/08/18 00:00:00\n', '    uint public endTime = 1550419200; // Beijing time 2019/02/18 00:00:00\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    function SEPCToken() public {\n', '        symbol = "SEPC";\n', '        name = "SEPC";\n', '        decimals = 18;\n', '        angelMaxAmount = 54000000 * 10**uint(decimals);\n', '        firstMaxAmount = 56000000 * 10**uint(decimals);\n', '        secondMaxAmount= 90000000 * 10**uint(decimals);\n', '        thirdMaxAmount = 100000000 * 10**uint(decimals);\n', '        _totalSupply = 1000000000 * 10**uint(decimals);\n', '        balances[msg.sender] = teamHoldAmount * 10**uint(decimals);\n', '        emit Transfer(address(0), msg.sender, teamHoldAmount * 10**uint(decimals));\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to `to` account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account\n", '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces\n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    //\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account. The `spender` contract function\n", '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // send ERC20 Token to multi address\n', '    // ------------------------------------------------------------------------\n', '    function multiTransfer(address[] _addresses, uint256[] amounts) public returns (bool success){\n', '        for (uint256 i = 0; i < _addresses.length; i++) {\n', '            transfer(_addresses[i], amounts[i]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // send ERC20 Token to multi address with decimals\n', '    // ------------------------------------------------------------------------\n', '    function multiTransferDecimals(address[] _addresses, uint256[] amounts) public returns (bool success){\n', '        for (uint256 i = 0; i < _addresses.length; i++) {\n', '            transfer(_addresses[i], amounts[i] * 10**uint(decimals));\n', '        }\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Crowd-funding\n', '    // ------------------------------------------------------------------------\n', '    function () payable public {\n', '          require(now < endTime && now >= angelStartTime);\n', '          require(angelCurrentAmount <= angelMaxAmount && firstCurrentAmount <= firstMaxAmount && secondCurrentAmount <= secondMaxAmount && thirdCurrentAmount <= thirdMaxAmount);\n', '          uint weiAmount = msg.value;\n', '          uint rewardAmount;\n', '          if(now >= angelStartTime && now < firstStartTime){\n', '            rewardAmount = weiAmount.mul(angelRate);\n', '            balances[msg.sender] = balances[msg.sender].add(rewardAmount);\n', '            angelCurrentAmount = angelCurrentAmount.add(rewardAmount);\n', '            require(angelCurrentAmount <= angelMaxAmount);\n', '          }else if (now >= firstStartTime && now < secondStartTime){\n', '            rewardAmount = weiAmount.mul(firstRate);\n', '            balances[msg.sender] = balances[msg.sender].add(rewardAmount);\n', '            firstCurrentAmount = firstCurrentAmount.add(rewardAmount);\n', '            require(firstCurrentAmount <= firstMaxAmount);\n', '          }else if(now >= secondStartTime && now < thirdStartTime){\n', '            rewardAmount = weiAmount.mul(secondRate);\n', '            balances[msg.sender] = balances[msg.sender].add(rewardAmount);\n', '            secondCurrentAmount = secondCurrentAmount.add(rewardAmount);\n', '            require(secondCurrentAmount <= secondMaxAmount);\n', '          }else if(now >= thirdStartTime && now < endTime){\n', '            rewardAmount = weiAmount.mul(thirdRate);\n', '            balances[msg.sender] = balances[msg.sender].add(rewardAmount);\n', '            thirdCurrentAmount = thirdCurrentAmount.add(rewardAmount);\n', '            require(thirdCurrentAmount <= thirdMaxAmount);\n', '          }\n', '          owner.transfer(msg.value);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // After-Crowd-funding\n', '    // ------------------------------------------------------------------------\n', '    function collectToken()  public onlyOwner {\n', '        require( now > endTime);\n', '        balances[owner] = balances[owner].add(angelMaxAmount + firstMaxAmount + secondMaxAmount + thirdMaxAmount -angelCurrentAmount - firstCurrentAmount - secondCurrentAmount - thirdCurrentAmount);\n', '    }\n', '}']
