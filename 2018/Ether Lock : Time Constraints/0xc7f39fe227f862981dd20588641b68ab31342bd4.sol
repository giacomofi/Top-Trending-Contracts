['contract EthereumButton {\n', '    address private owner;\n', '    address private lastPresser;\n', '    uint256 private targetBlock;\n', '    uint256 private pressCount;\n', '    bool private started = false;\n', '\n', '    event Pressed(address _presser, uint256 _timestamp);\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyWhenStarted() {\n', '        require(started == true);\n', '        _;\n', '    }\n', '\n', '    modifier onlyWhenPaused() {\n', '        require(started == false);\n', '        _;\n', '    }\n', '    \n', '    function EthereumButton() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function start() public onlyOwner onlyWhenPaused {\n', '        started = true;\n', '        targetBlock = block.number + 240;\n', '        pressCount = 0;\n', '        lastPresser = 0x0;\n', '    }\n', '\n', '    function() public payable {\n', '        revert();\n', '    }   \n', '\n', '    function pressButton() public onlyWhenStarted payable {\n', '        require(msg.value == 10000000000000000 && block.number <= targetBlock);\n', '\n', '        lastPresser = msg.sender;\n', '        targetBlock = targetBlock + 240;\n', '        pressCount++;\n', '\n', '        Pressed(msg.sender, now);\n', '    }\n', '\n', '    function getPressCount() public view returns(uint256) {\n', '        return pressCount;\n', '    }\n', '\n', '    function getTargetBlock() public view returns(uint256) {\n', '        return targetBlock;\n', '    }\n', '\n', '    function getLastPresser() public view returns(address) {\n', '        return lastPresser;\n', '    }\n', '    \n', '    function claimPrize() public onlyWhenStarted {\n', '        require(block.number > targetBlock && (msg.sender == lastPresser || msg.sender == owner));\n', '\n', '        // In case of nobody pressed it, the owner can call this to set started to false\n', '        if (pressCount == 0) {\n', '            started = false;\n', '            return;\n', '        }\n', '\n', '        uint256 amount = pressCount * 9500000000000000;\n', '        \n', '        lastPresser.transfer(amount);\n', '\n', '        started = false;\n', '    }\n', '\n', '    function depositEther() public payable onlyOwner { } \n', '\n', '    function kill() public onlyOwner onlyWhenPaused {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '    function withdrawBalance() public onlyOwner onlyWhenPaused {\n', '        owner.transfer(this.balance);\n', '    }\n', '}']
['contract EthereumButton {\n', '    address private owner;\n', '    address private lastPresser;\n', '    uint256 private targetBlock;\n', '    uint256 private pressCount;\n', '    bool private started = false;\n', '\n', '    event Pressed(address _presser, uint256 _timestamp);\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyWhenStarted() {\n', '        require(started == true);\n', '        _;\n', '    }\n', '\n', '    modifier onlyWhenPaused() {\n', '        require(started == false);\n', '        _;\n', '    }\n', '    \n', '    function EthereumButton() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function start() public onlyOwner onlyWhenPaused {\n', '        started = true;\n', '        targetBlock = block.number + 240;\n', '        pressCount = 0;\n', '        lastPresser = 0x0;\n', '    }\n', '\n', '    function() public payable {\n', '        revert();\n', '    }   \n', '\n', '    function pressButton() public onlyWhenStarted payable {\n', '        require(msg.value == 10000000000000000 && block.number <= targetBlock);\n', '\n', '        lastPresser = msg.sender;\n', '        targetBlock = targetBlock + 240;\n', '        pressCount++;\n', '\n', '        Pressed(msg.sender, now);\n', '    }\n', '\n', '    function getPressCount() public view returns(uint256) {\n', '        return pressCount;\n', '    }\n', '\n', '    function getTargetBlock() public view returns(uint256) {\n', '        return targetBlock;\n', '    }\n', '\n', '    function getLastPresser() public view returns(address) {\n', '        return lastPresser;\n', '    }\n', '    \n', '    function claimPrize() public onlyWhenStarted {\n', '        require(block.number > targetBlock && (msg.sender == lastPresser || msg.sender == owner));\n', '\n', '        // In case of nobody pressed it, the owner can call this to set started to false\n', '        if (pressCount == 0) {\n', '            started = false;\n', '            return;\n', '        }\n', '\n', '        uint256 amount = pressCount * 9500000000000000;\n', '        \n', '        lastPresser.transfer(amount);\n', '\n', '        started = false;\n', '    }\n', '\n', '    function depositEther() public payable onlyOwner { } \n', '\n', '    function kill() public onlyOwner onlyWhenPaused {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '    function withdrawBalance() public onlyOwner onlyWhenPaused {\n', '        owner.transfer(this.balance);\n', '    }\n', '}']
