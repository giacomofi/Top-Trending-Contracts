['pragma solidity ^0.4.10;\n', '\n', 'contract Ownable {\n', '    address public Owner = msg.sender;\n', '    function isOwner() returns (bool) {\n', '        if (Owner == msg.sender) return true; return false;\n', '    }\n', '}\n', '\n', 'contract ICO_Hold is Ownable {\n', '    mapping (address => uint) public deposits;\n', '    uint public openDate;\n', '    address public Owner;\n', '\n', '    function() public payable { }\n', '    \n', '    function setup(uint _openDate) public {\n', '        Owner = msg.sender;\n', '        openDate = _openDate;\n', '    }\n', '    \n', '    function deposit() public payable {\n', '        if (msg.value >= 0.5 ether) {\n', '            deposits[msg.sender] += msg.value;\n', '        }\n', '    }\n', '\n', '    function withdraw(uint amount) public {\n', '        if (isOwner() && now >= openDate) {\n', '            uint max = deposits[msg.sender];\n', '            if (amount <= max && max > 0) {\n', '                msg.sender.transfer(amount);\n', '            }\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.10;\n', '\n', 'contract Ownable {\n', '    address public Owner = msg.sender;\n', '    function isOwner() returns (bool) {\n', '        if (Owner == msg.sender) return true; return false;\n', '    }\n', '}\n', '\n', 'contract ICO_Hold is Ownable {\n', '    mapping (address => uint) public deposits;\n', '    uint public openDate;\n', '    address public Owner;\n', '\n', '    function() public payable { }\n', '    \n', '    function setup(uint _openDate) public {\n', '        Owner = msg.sender;\n', '        openDate = _openDate;\n', '    }\n', '    \n', '    function deposit() public payable {\n', '        if (msg.value >= 0.5 ether) {\n', '            deposits[msg.sender] += msg.value;\n', '        }\n', '    }\n', '\n', '    function withdraw(uint amount) public {\n', '        if (isOwner() && now >= openDate) {\n', '            uint max = deposits[msg.sender];\n', '            if (amount <= max && max > 0) {\n', '                msg.sender.transfer(amount);\n', '            }\n', '        }\n', '    }\n', '}']
