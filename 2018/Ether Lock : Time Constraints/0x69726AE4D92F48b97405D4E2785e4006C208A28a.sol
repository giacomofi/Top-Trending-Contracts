['pragma solidity 0.4.18;\n', '\n', '//import "ds-token/token.sol";\n', '    //import "ds-stop/stop.sol";\n', '        //import "ds-auth/auth.sol";\n', '        //import "ds-note/note.sol";\n', '    //import "./base.sol";\n', '        //import "erc20/erc20.sol";\n', '        //import "ds-math/math.sol";\n', '\n', '//import "ds-math/math.sol";\n', 'contract DSMath {\n', '    \n', '    /*\n', '    standard uint256 functions\n', '     */\n', '\n', '    function add(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x + y) >= x);\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x - y) <= x);\n', '    }\n', '\n', '    function mul(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        z = x * y;\n', '        assert(x == 0 || z / x == y);\n', '    }\n', '\n', '    function div(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        z = x / y;\n', '    }\n', '\n', '    function min(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function max(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    /*\n', '    uint128 functions (h is for half)\n', '     */\n', '\n', '\n', '    function hadd(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        assert((z = x + y) >= x);\n', '    }\n', '\n', '    function hsub(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        assert((z = x - y) <= x);\n', '    }\n', '\n', '    function hmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = x * y;\n', '        assert(x == 0 || z / x == y);\n', '    }\n', '\n', '    function hdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = x / y;\n', '    }\n', '\n', '    function hmin(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function hmax(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '\n', '    /*\n', '    int256 functions\n', '     */\n', '\n', '    function imin(int256 x, int256 y) constant internal returns (int256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function imax(int256 x, int256 y) constant internal returns (int256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    /*\n', '    WAD math\n', '     */\n', '\n', '    uint128 constant WAD = 10 ** 18;\n', '\n', '    function wadd(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hadd(x, y);\n', '    }\n', '\n', '    function wsub(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hsub(x, y);\n', '    }\n', '\n', '    function wmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * y + WAD / 2) / WAD);\n', '    }\n', '\n', '    function wdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * WAD + y / 2) / y);\n', '    }\n', '\n', '    function wmin(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmin(x, y);\n', '    }\n', '    function wmax(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmax(x, y);\n', '    }\n', '\n', '    /*\n', '    RAY math\n', '     */\n', '\n', '    uint128 constant RAY = 10 ** 27;\n', '\n', '    function radd(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hadd(x, y);\n', '    }\n', '\n', '    function rsub(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hsub(x, y);\n', '    }\n', '\n', '    function rmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * y + RAY / 2) / RAY);\n', '    }\n', '\n', '    function rdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * RAY + y / 2) / y);\n', '    }\n', '\n', '    function rpow(uint128 x, uint64 n) constant internal returns (uint128 z) {\n', '        // This famous algorithm is called "exponentiation by squaring"\n', '        // and calculates x^n with x as fixed-point and n as regular unsigned.\n', '        //\n', "        // It's O(log n), instead of O(n) for naive repeated multiplication.\n", '        //\n', '        // These facts are why it works:\n', '        //\n', '        //  If n is even, then x^n = (x^2)^(n/2).\n', '        //  If n is odd,  then x^n = x * x^(n-1),\n', '        //   and applying the equation for even x gives\n', '        //    x^n = x * (x^2)^((n-1) / 2).\n', '        //\n', '        //  Also, EVM division is flooring and\n', '        //    floor[(n-1) / 2] = floor[n / 2].\n', '\n', '        z = n % 2 != 0 ? x : RAY;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            x = rmul(x, x);\n', '\n', '            if (n % 2 != 0) {\n', '                z = rmul(z, x);\n', '            }\n', '        }\n', '    }\n', '\n', '    function rmin(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmin(x, y);\n', '    }\n', '    function rmax(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmax(x, y);\n', '    }\n', '\n', '    function cast(uint256 x) constant internal returns (uint128 z) {\n', '        assert((z = uint128(x)) == x);\n', '    }\n', '\n', '}\n', '\n', '//import "erc20/erc20.sol";\n', 'contract ERC20 {\n', '    function totalSupply() constant returns (uint supply);\n', '    function balanceOf( address who ) constant returns (uint value);\n', '    function allowance( address owner, address spender ) constant returns (uint _allowance);\n', '\n', '    function transfer( address to, uint value) returns (bool ok);\n', '    function transferFrom( address from, address to, uint value) returns (bool ok);\n', '    function approve( address spender, uint value ) returns (bool ok);\n', '\n', '    event Transfer( address indexed from, address indexed to, uint value);\n', '    event Approval( address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '//import "./base.sol";\n', 'contract DSTokenBase is ERC20, DSMath {\n', '    uint256                                            _supply;\n', '    mapping (address => uint256)                       _balances;\n', '    mapping (address => mapping (address => uint256))  _approvals;\n', '    \n', '    function DSTokenBase(uint256 supply) {\n', '        _balances[msg.sender] = supply;\n', '        _supply = supply;\n', '    }\n', '    \n', '    function totalSupply() constant returns (uint256) {\n', '        return _supply;\n', '    }\n', '    function balanceOf(address src) constant returns (uint256) {\n', '        return _balances[src];\n', '    }\n', '    function allowance(address src, address guy) constant returns (uint256) {\n', '        return _approvals[src][guy];\n', '    }\n', '    \n', '    function transfer(address dst, uint wad) returns (bool) {\n', '        assert(_balances[msg.sender] >= wad);\n', '        \n', '        _balances[msg.sender] = sub(_balances[msg.sender], wad);\n', '        _balances[dst] = add(_balances[dst], wad);\n', '        \n', '        Transfer(msg.sender, dst, wad);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address src, address dst, uint wad) returns (bool) {\n', '        assert(_balances[src] >= wad);\n', '        assert(_approvals[src][msg.sender] >= wad);\n', '        \n', '        _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n', '        _balances[src] = sub(_balances[src], wad);\n', '        _balances[dst] = add(_balances[dst], wad);\n', '        \n', '        Transfer(src, dst, wad);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function approve(address guy, uint256 wad) returns (bool) {\n', '        _approvals[msg.sender][guy] = wad;\n', '        \n', '        Approval(msg.sender, guy, wad);\n', '        \n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '//import "ds-auth/auth.sol";\n', 'contract DSAuthority {\n', '    function canCall(\n', '        address src, address dst, bytes4 sig\n', '    ) constant returns (bool);\n', '}\n', '\n', 'contract DSAuthEvents {\n', '    event LogSetAuthority (address indexed authority);\n', '    event LogSetOwner     (address indexed owner);\n', '}\n', '\n', 'contract DSAuth is DSAuthEvents {\n', '    DSAuthority  public  authority;\n', '    address      public  owner;\n', '\n', '    function DSAuth() {\n', '        owner = msg.sender;\n', '        LogSetOwner(msg.sender);\n', '    }\n', '\n', '    function setOwner(address owner_)\n', '        auth\n', '    {\n', '        owner = owner_;\n', '        LogSetOwner(owner);\n', '    }\n', '\n', '    function setAuthority(DSAuthority authority_)\n', '        auth\n', '    {\n', '        authority = authority_;\n', '        LogSetAuthority(authority);\n', '    }\n', '\n', '    modifier auth {\n', '        assert(isAuthorized(msg.sender, msg.sig));\n', '        _;\n', '    }\n', '\n', '    function isAuthorized(address src, bytes4 sig) internal returns (bool) {\n', '        if (src == address(this)) {\n', '            return true;\n', '        } else if (src == owner) {\n', '            return true;\n', '        } else if (authority == DSAuthority(0)) {\n', '            return false;\n', '        } else {\n', '            return authority.canCall(src, this, sig);\n', '        }\n', '    }\n', '}\n', '\n', '//import "ds-note/note.sol";\n', 'contract DSNote {\n', '    event LogNote(\n', '        bytes4   indexed  sig,\n', '        address  indexed  guy,\n', '        bytes32  indexed  foo,\n', '        bytes32  indexed  bar,\n', '        uint              wad,\n', '        bytes             fax\n', '    ) anonymous;\n', '\n', '    modifier note {\n', '        bytes32 foo;\n', '        bytes32 bar;\n', '\n', '        assembly {\n', '            foo := calldataload(4)\n', '            bar := calldataload(36)\n', '        }\n', '\n', '        LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n', '\n', '        _;\n', '    }\n', '}\n', '\n', '//import "ds-stop/stop.sol";\n', 'contract DSStop is DSNote, DSAuth {\n', '\n', '    bool public stopped;\n', '\n', '    modifier stoppable {\n', '        assert (!stopped);\n', '        _;\n', '    }\n', '    function stop() auth note {\n', '        stopped = true;\n', '    }\n', '    function start() auth note {\n', '        stopped = false;\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', '//import "ds-token/token.sol";\n', 'contract DSToken is DSTokenBase(0), DSStop {\n', '\n', '    bytes32  public  symbol;\n', '    uint256  public  decimals = 18; // standard token precision. override to customize\n', '\n', '    function DSToken(bytes32 symbol_) {\n', '        symbol = symbol_;\n', '    }\n', '\n', '    function transfer(address dst, uint wad) stoppable note returns (bool) {\n', '        return super.transfer(dst, wad);\n', '    }\n', '    function transferFrom(\n', '        address src, address dst, uint wad\n', '    ) stoppable note returns (bool) {\n', '        return super.transferFrom(src, dst, wad);\n', '    }\n', '    function approve(address guy, uint wad) stoppable note returns (bool) {\n', '        return super.approve(guy, wad);\n', '    }\n', '\n', '    function push(address dst, uint128 wad) returns (bool) {\n', '        return transfer(dst, wad);\n', '    }\n', '    function pull(address src, uint128 wad) returns (bool) {\n', '        return transferFrom(src, msg.sender, wad);\n', '    }\n', '\n', '    function mint(uint128 wad) auth stoppable note {\n', '        _balances[msg.sender] = add(_balances[msg.sender], wad);\n', '        _supply = add(_supply, wad);\n', '    }\n', '    function burn(uint128 wad) auth stoppable note {\n', '        _balances[msg.sender] = sub(_balances[msg.sender], wad);\n', '        _supply = sub(_supply, wad);\n', '    }\n', '\n', '    // Optional token name\n', '\n', '    bytes32   public  name = "";\n', '    \n', '    function setName(bytes32 name_) auth {\n', '        name = name_;\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', '\n', 'contract KeyRewardPool is DSMath, DSNote{\n', '\n', '    DSToken public key;\n', '    uint public rewardStartTime;\n', '\n', '    uint constant public yearlyRewardPercentage = 10; // 10% of remaining tokens\n', '    uint public totalRewardThisYear;\n', '    uint public collectedTokens;\n', '    address public withdrawer;\n', '    address public owner;\n', '    bool public paused;\n', '\n', '    event TokensWithdrawn(address indexed _holder, uint _amount);\n', '    event LogSetWithdrawer(address indexed _withdrawer);\n', '    event LogSetOwner(address indexed _owner);\n', '\n', '    modifier onlyWithdrawer {\n', '        require(msg.sender == withdrawer);\n', '        _;\n', '    }\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier notPaused {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    function KeyRewardPool(uint _rewardStartTime, address _key, address _withdrawer) public{\n', '        require(_rewardStartTime != 0 );\n', '        require(_key != address(0) );\n', '        require(_withdrawer != address(0) );\n', '        uint _time = time();\n', '        require(_rewardStartTime > _time - 364 days);\n', '\n', '        rewardStartTime = _rewardStartTime;\n', '        key = DSToken(_key);\n', '        withdrawer = _withdrawer;\n', '        owner = msg.sender;\n', '        paused = false;\n', '    }\n', '\n', '    // @notice call this method to extract the tokens\n', '    function collectToken() public notPaused onlyWithdrawer{\n', '        uint _time = time();\n', '        require(_time > rewardStartTime);\n', '\n', '        var _key = key;  // create a in memory variable for storage variable will save gas usage.\n', '\n', '\n', '        uint balance = _key.balanceOf(address(this));\n', '        uint total = add(collectedTokens, balance);\n', '\n', '        uint remainingTokens = total;\n', '\n', '        uint yearCount = yearFor(_time);\n', '\n', '        for(uint i = 0; i < yearCount; i++) {\n', '            remainingTokens =  div( mul(remainingTokens, 100 - yearlyRewardPercentage), 100);\n', '        }\n', '        //\n', '        totalRewardThisYear =  div( mul(remainingTokens, yearlyRewardPercentage), 100);\n', '\n', '        // the reward will be increasing linearly in one year.\n', '        uint canExtractThisYear = div( mul(totalRewardThisYear, (_time - rewardStartTime)  % 365 days), 365 days);\n', '\n', '        uint canExtract = canExtractThisYear + (total - remainingTokens);\n', '\n', '        canExtract = sub(canExtract, collectedTokens);\n', '\n', '        if(canExtract > balance) {\n', '            canExtract = balance;\n', '        }\n', '\n', '        \n', '        collectedTokens = add(collectedTokens, canExtract);\n', '\n', '        assert(_key.transfer(withdrawer, canExtract)); // Fix potential re-entry bug.\n', '        TokensWithdrawn(withdrawer, canExtract);\n', '    }\n', '\n', '\n', '    function yearFor(uint timestamp) public constant returns(uint) {\n', '        return timestamp < rewardStartTime\n', '            ? 0\n', '            : sub(timestamp, rewardStartTime) / (365 days);\n', '    }\n', '\n', '    // overrideable for easy testing\n', '    function time() public constant returns (uint) {\n', '        return now;\n', '    }\n', '\n', '    function setWithdrawer(address _withdrawer) public onlyOwner {\n', '        withdrawer = _withdrawer;\n', '        LogSetWithdrawer(_withdrawer);\n', '    }\n', '\n', '    function setOwner(address _owner) public onlyOwner {\n', '        owner = _owner;\n', '        LogSetOwner(_owner);\n', '    }\n', '\n', '\n', '    function pauseCollectToken() public onlyOwner {\n', '        paused = true;\n', '    }\n', '\n', '    function resumeCollectToken() public onlyOwner {\n', '        paused = false;\n', '    }\n', '\n', '    // @notice This method can be used by the controller to extract mistakenly\n', '    //  sent tokens to this contract.\n', '    // @param dst The address that will be receiving the tokens\n', '    // @param wad The amount of tokens to transfer\n', '    // @param _token The address of the token contract that you want to recover\n', '    function transferTokens(address dst, uint wad, address _token) public onlyWithdrawer {\n', '        require( _token != address(key));\n', '        if (wad > 0) {\n', '            ERC20 token = ERC20(_token);\n', '            token.transfer(dst, wad);\n', '        }\n', '    }\n', '\n', '    \n', '}']