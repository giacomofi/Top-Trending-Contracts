['pragma solidity ^0.4.21;\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'library DateTime {\n', '        /*\n', '         *  Date and Time utilities for ethereum contracts\n', '         *\n', '         */\n', '        struct MyDateTime {\n', '                uint16 year;\n', '                uint8 month;\n', '                uint8 day;\n', '                uint8 hour;\n', '                uint8 minute;\n', '                uint8 second;\n', '                uint8 weekday;\n', '        }\n', '        uint constant DAY_IN_SECONDS = 86400;\n', '        uint constant YEAR_IN_SECONDS = 31536000;\n', '        uint constant LEAP_YEAR_IN_SECONDS = 31622400;\n', '        uint constant HOUR_IN_SECONDS = 3600;\n', '        uint constant MINUTE_IN_SECONDS = 60;\n', '        uint16 constant ORIGIN_YEAR = 1970;\n', '        function isLeapYear(uint16 year) constant returns (bool) {\n', '                if (year % 4 != 0) {\n', '                        return false;\n', '                }\n', '                if (year % 100 != 0) {\n', '                        return true;\n', '                }\n', '                if (year % 400 != 0) {\n', '                        return false;\n', '                }\n', '                return true;\n', '        }\n', '        function leapYearsBefore(uint year) constant returns (uint) {\n', '                year -= 1;\n', '                return year / 4 - year / 100 + year / 400;\n', '        }\n', '        function getDaysInMonth(uint8 month, uint16 year) constant returns (uint8) {\n', '                if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n', '                        return 31;\n', '                }\n', '                else if (month == 4 || month == 6 || month == 9 || month == 11) {\n', '                        return 30;\n', '                }\n', '                else if (isLeapYear(year)) {\n', '                        return 29;\n', '                }\n', '                else {\n', '                        return 28;\n', '                }\n', '        }\n', '        function parseTimestamp(uint timestamp) internal returns (MyDateTime dt) {\n', '                uint secondsAccountedFor = 0;\n', '                uint buf;\n', '                uint8 i;\n', '                // Year\n', '                dt.year = getYear(timestamp);\n', '                buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\n', '                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\n', '                secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\n', '                // Month\n', '                uint secondsInMonth;\n', '                for (i = 1; i <= 12; i++) {\n', '                        secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\n', '                        if (secondsInMonth + secondsAccountedFor > timestamp) {\n', '                                dt.month = i;\n', '                                break;\n', '                        }\n', '                        secondsAccountedFor += secondsInMonth;\n', '                }\n', '                // Day\n', '                for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\n', '                        if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\n', '                                dt.day = i;\n', '                                break;\n', '                        }\n', '                        secondsAccountedFor += DAY_IN_SECONDS;\n', '                }\n', '                // Hour\n', '                dt.hour = 0;//getHour(timestamp);\n', '                // Minute\n', '                dt.minute = 0;//getMinute(timestamp);\n', '                // Second\n', '                dt.second = 0;//getSecond(timestamp);\n', '                // Day of week.\n', '                dt.weekday = 0;//getWeekday(timestamp);\n', '        }\n', '        function getYear(uint timestamp) constant returns (uint16) {\n', '                uint secondsAccountedFor = 0;\n', '                uint16 year;\n', '                uint numLeapYears;\n', '                // Year\n', '                year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\n', '                numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\n', '                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\n', '                secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\n', '                while (secondsAccountedFor > timestamp) {\n', '                        if (isLeapYear(uint16(year - 1))) {\n', '                                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\n', '                        }\n', '                        else {\n', '                                secondsAccountedFor -= YEAR_IN_SECONDS;\n', '                        }\n', '                        year -= 1;\n', '                }\n', '                return year;\n', '        }\n', '        function getMonth(uint timestamp) constant returns (uint8) {\n', '                return parseTimestamp(timestamp).month;\n', '        }\n', '        function getDay(uint timestamp) constant returns (uint8) {\n', '                return parseTimestamp(timestamp).day;\n', '        }\n', '        function getHour(uint timestamp) constant returns (uint8) {\n', '                return uint8((timestamp / 60 / 60) % 24);\n', '        }\n', '        function getMinute(uint timestamp) constant returns (uint8) {\n', '                return uint8((timestamp / 60) % 60);\n', '        }\n', '        function getSecond(uint timestamp) constant returns (uint8) {\n', '                return uint8(timestamp % 60);\n', '        }\n', '        function toTimestamp(uint16 year, uint8 month, uint8 day) constant returns (uint timestamp) {\n', '                return toTimestamp(year, month, day, 0, 0, 0);\n', '        }\n', '        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) constant returns (uint timestamp) {\n', '                uint16 i;\n', '                // Year\n', '                for (i = ORIGIN_YEAR; i < year; i++) {\n', '                        if (isLeapYear(i)) {\n', '                                timestamp += LEAP_YEAR_IN_SECONDS;\n', '                        }\n', '                        else {\n', '                                timestamp += YEAR_IN_SECONDS;\n', '                        }\n', '                }\n', '                // Month\n', '                uint8[12] memory monthDayCounts;\n', '                monthDayCounts[0] = 31;\n', '                if (isLeapYear(year)) {\n', '                        monthDayCounts[1] = 29;\n', '                }\n', '                else {\n', '                        monthDayCounts[1] = 28;\n', '                }\n', '                monthDayCounts[2] = 31;\n', '                monthDayCounts[3] = 30;\n', '                monthDayCounts[4] = 31;\n', '                monthDayCounts[5] = 30;\n', '                monthDayCounts[6] = 31;\n', '                monthDayCounts[7] = 31;\n', '                monthDayCounts[8] = 30;\n', '                monthDayCounts[9] = 31;\n', '                monthDayCounts[10] = 30;\n', '                monthDayCounts[11] = 31;\n', '                for (i = 1; i < month; i++) {\n', '                        timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\n', '                }\n', '                // Day\n', '                timestamp += DAY_IN_SECONDS * (day - 1);\n', '                // Hour\n', '                timestamp += HOUR_IN_SECONDS * (hour);\n', '                // Minute\n', '                timestamp += MINUTE_IN_SECONDS * (minute);\n', '                // Second\n', '                timestamp += second;\n', '                return timestamp;\n', '        }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '    uint8 public decimals = 18;\n', '    uint public allSupply = 54000000 ;    // 90000000 * 0.6\n', '    uint public freezeSupply = 36000000  * 10 ** uint256(decimals);   // 90000000 * 0.4\n', '    uint256 totalSupply_ = freezeSupply;  //  åå§æ¶ ä¾åºéä¸ºå»ç»é\n', '\n', '  constructor() public {\n', '      balances[msg.sender] = 0;\n', '      //  å»ç»çè´§å¸é\n', '      balances[0x0] = freezeSupply;\n', '  }\n', '\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract NBToken is ERC20, BasicToken {\n', '\n', '  using DateTime for uint256;\n', '\n', '  string public name = "NineBlock";\n', '  string public symbol = "NB";\n', '\n', '  address owner;\n', '\n', '  event ReleaseSupply(address indexed receiver, uint256 value, uint256 releaseTime);\n', '\n', '  uint256 public createTime;\n', '\n', '  struct ReleaseRecord {\n', '      uint256 amount; // release amount\n', '      uint256 releasedTime; // release time\n', '  }\n', '\n', '  mapping (uint => ReleaseRecord) public releasedRecords;\n', '  uint public releasedRecordsCount = 0;\n', '\n', '    constructor() public {\n', '      owner = msg.sender;\n', '      createTime = now;\n', '    }\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  // æ¯å¤©éæ¾è°ç¨è¿ä¸ªæ¹æ³\n', '  function releaseToday() public onlyOwner returns(uint256 _actualRelease) {\n', '    return releaseSupply(now);\n', '  }\n', '\n', '  // å¦ææåªå¤©éæ¼äºï¼å¯ä»¥è°ç¨è¿ä¸ªæ¹æ³\n', '  function releaseSupply(uint256 timestamp) public onlyOwner returns(uint256 _actualRelease) {\n', '      require(timestamp >= createTime && timestamp <= now);\n', '      require(!judgeReleaseRecordExist(timestamp));\n', '\n', '      uint award = updateAward(timestamp);\n', '\n', '      balances[owner] = balances[owner].add(award);\n', '      totalSupply_ = totalSupply_.add(award);\n', '      releasedRecords[releasedRecordsCount] = ReleaseRecord(award, timestamp);\n', '      releasedRecordsCount++;\n', '      emit ReleaseSupply(owner, award, timestamp);\n', '      emit Transfer(0, owner, award);\n', '      return award;\n', '  }\n', '\n', '  function judgeReleaseRecordExist(uint256 timestamp) internal returns(bool _exist) {\n', '      bool exist = false;\n', '      if (releasedRecordsCount > 0) {\n', '          for (uint index = 0; index < releasedRecordsCount; index++) {\n', '              if ((releasedRecords[index].releasedTime.parseTimestamp().year == timestamp.parseTimestamp().year)\n', '                  && (releasedRecords[index].releasedTime.parseTimestamp().month == timestamp.parseTimestamp().month)\n', '                  && (releasedRecords[index].releasedTime.parseTimestamp().day == timestamp.parseTimestamp().day)) {\n', '                  exist = true;\n', '              }\n', '          }\n', '      }\n', '      return exist;\n', '  }\n', '\n', '  function updateAward(uint256 timestamp) internal returns(uint256 ) {\n', '\n', '      uint passMonth  = now.sub(createTime) / 30 days + 1;\n', '\n', '      if (passMonth == 1) {\n', '          return 270000 * 10 ** uint256(decimals);\n', '      } else if (passMonth == 2) {\n', '          return 252000 * 10 ** uint256(decimals);\n', '      } else if (passMonth == 3) {\n', '          return 234000 * 10 ** uint256(decimals);\n', '      } else if (passMonth == 4) {\n', '          return 216000 * 10 ** uint256(decimals);\n', '      } else if (passMonth == 5) {\n', '          return 198000 * 10 ** uint256(decimals);\n', '      } else if (passMonth == 6) {\n', '          return 180000 * 10 ** uint256(decimals);\n', '      } else if (passMonth == 7) {\n', '          return 162000 * 10 ** uint256(decimals);\n', '      } else if (passMonth == 8) {\n', '          return 144000 * 10 ** uint256(decimals);\n', '      } else if (passMonth == 9) {\n', '          return 144000 * 10 ** uint256(decimals);\n', '      }\n', '      return 0;\n', '\n', '  }\n', '\n', '}']