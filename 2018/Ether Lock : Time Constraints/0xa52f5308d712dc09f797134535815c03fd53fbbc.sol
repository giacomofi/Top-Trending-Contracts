['pragma solidity ^0.4.25;\n', '\n', '/**\n', ' *\n', ' * Best Multiplier - profitable financial game\n', ' * Honest, fully automated smart quick turn contract with a jackpot system\n', ' *\n', ' * Web              - https://bestmultiplier.biz\n', ' * Telegram channel - https://t.me/bestMultiplierNews\n', ' * Telegram chat    - https://t.me/bestMultiplier\n', ' *\n', ' *  - Contribution allocation schemes:\n', ' *    -- 90% players\n', ' *    -- 5% jackpot\n', ' *    -- 3.25% promotion\n', ' *    -- 1.75% support\n', ' *\n', ' *  - Limits:\n', ' *    -- Min deposit: 0.01 ETH\n', ' *    -- Min deposit for jackpot: 0.05 ETH\n', ' *    -- Max deposit: 7 ETH\n', ' *\n', ' * Recommended gas limit: 300000\n', ' * Recommended gas price: https://ethgasstation.info/\n', ' *\n', ' */\n', 'contract BestMultiplier {\n', '\n', '    uint constant MINIMAL_DEPOSIT = 0.01 ether; // minimum deposit for participation in the game\n', '    uint constant MAX_DEPOSIT = 7 ether; // maximum possible deposit\n', '\n', '    uint constant JACKPOT_MINIMAL_DEPOSIT = 0.05 ether; // minimum deposit for jackpot\n', '    uint constant JACKPOT_DURATION = 20 minutes; // the duration of the jackpot after which the winner will be determined\n', '\n', '    uint constant JACKPOT_PERCENTAGE = 500; // jackpot winner gets 5% of all deposits\n', '    uint constant PROMOTION_PERCENTAGE = 325; // 3.25% will be sent to the promotion of the project\n', '    uint constant PAYROLL_PERCENTAGE = 175; // 1.75% will be sent to support the project\n', '\n', '    // These 2 addresses, one of which is a backup, can set a new time to start the game.\n', '    address constant MANAGER = 0x6dACb074D55909e3a477B926404A3a3A5BeF0d39;\n', '    address constant RESERVE_MANAGER = 0xE33c7B34c6113Fb066F16660791a0bB38f416cb8;\n', '\n', '    // Address where ETH will be sent for project promotion\n', '    address constant PROMOTION_FUND = 0x8026F25c6f898b4afE03d05F87e6c2AFeaaC3a3D;\n', '\n', '    // Address where ETH will be sent to support the project\n', '    address constant SUPPORT_FUND = 0x8a3F4DCb5c59b555a54Ee171c6e98320547Dd4F4;\n', '\n', '    struct Deposit {\n', '        address member;\n', '        uint amount;\n', '    }\n', '\n', '    struct Jackpot {\n', '        address lastMember;\n', '        uint time;\n', '        uint amount;\n', '    }\n', '\n', '    Deposit[] public deposits; // keeps a history of all deposits\n', '    Jackpot public jackpot; // stores the data for the current jackpot\n', '\n', '    uint public totalInvested; // how many ETH were collected for this game\n', '    uint public currentIndex; // current deposit index\n', '    uint public startTime; // start time game. If this value is 0, the contract is temporarily stopped\n', '\n', '    // this function called every time anyone sends a transaction to this contract\n', '    function () public payable {\n', '\n', '        // the contract can only take ETH when the game is running\n', '        require(isRunning());\n', '\n', '        address member = msg.sender; // address of the current player who sent the ETH\n', '        uint amount = msg.value; // the amount sent by this player\n', '\n', '        // ckeck to jackpot winner\n', '        if (now - jackpot.time >= JACKPOT_DURATION && jackpot.time > 0) {\n', '\n', '            send(member, amount); // return this deposit to the sender\n', '\n', '            if (!payouts()) { // send remaining payouts\n', '                return;\n', '            }\n', '\n', '            send(jackpot.lastMember, jackpot.amount); // send jackpot to winner\n', '            startTime = 0; // stop queue\n', '            return;\n', '        }\n', '\n', '        // deposit check\n', '        require(amount >= MINIMAL_DEPOSIT && amount <= MAX_DEPOSIT);\n', '\n', '        // add member to jackpot\n', '        if (amount >= JACKPOT_MINIMAL_DEPOSIT) {\n', '            jackpot.lastMember = member;\n', '            jackpot.time = now;\n', '        }\n', '\n', '        // update variables in storage\n', '        deposits.push( Deposit(member, amount * calcMultiplier() / 100) );\n', '        totalInvested += amount;\n', '        jackpot.amount += amount * JACKPOT_PERCENTAGE / 10000;\n', '\n', '        // send fee\n', '        send(PROMOTION_FUND, amount * PROMOTION_PERCENTAGE / 10000);\n', '        send(SUPPORT_FUND, amount * PAYROLL_PERCENTAGE / 10000);\n', '\n', '        // send payouts\n', '        payouts();\n', '\n', '    }\n', '\n', '    // This function sends amounts to players who are in the current queue\n', '    // Returns true if all available ETH is sent\n', '    function payouts() internal returns(bool complete) {\n', '\n', '        uint balance = address(this).balance;\n', '\n', '        // impossible but better to check\n', '        balance = balance >= jackpot.amount ? balance - jackpot.amount : 0;\n', '\n', '        uint countPayouts;\n', '\n', '        for (uint i = currentIndex; i < deposits.length; i++) {\n', '\n', '            Deposit storage deposit = deposits[currentIndex];\n', '\n', '            if (balance >= deposit.amount) {\n', '\n', '                send(deposit.member, deposit.amount);\n', '                balance -= deposit.amount;\n', '                delete deposits[currentIndex];\n', '                currentIndex++;\n', '                countPayouts++;\n', '\n', '                // Maximum of one request can send no more than 15 payments\n', '                // This was done so that players could not spend too much gas in 1 transaction\n', '                if (countPayouts >= 15) {\n', '                    break;\n', '                }\n', '\n', '            } else {\n', '\n', '                send(deposit.member, balance);\n', '                deposit.amount -= balance;\n', '                complete = true;\n', '                break;\n', '\n', '            }\n', '        }\n', '\n', '    }\n', '\n', '    // This function safely sends the ETH by the passed parameters\n', '    function send(address _receiver, uint _amount) internal {\n', '\n', '        if (_amount > 0 && address(_receiver) != 0) {\n', '            _receiver.send(_amount);\n', '        }\n', '\n', '    }\n', '\n', '    // This function makes the game restart on a specific date when it is stopped or in waiting mode\n', '    // (Available only to managers)\n', '    function restart(uint _time) public {\n', '\n', '        require(MANAGER == msg.sender || RESERVE_MANAGER == msg.sender);\n', '        require(!isRunning());\n', '        require(_time >= now + 10 minutes);\n', '\n', '        currentIndex = deposits.length; // skip investors from old queue\n', '        startTime = _time; // set the time to start the project\n', '        totalInvested = 0;\n', '\n', '        delete jackpot;\n', '\n', '    }\n', '\n', '    // Returns true if the game is in stopped mode\n', '    function isStopped() public view returns(bool) {\n', '        return startTime == 0;\n', '    }\n', '\n', '    // Returns true if the game is in waiting mode\n', '    function isWaiting() public view returns(bool) {\n', '        return startTime > now;\n', '    }\n', '\n', '    // Returns true if the game is in running mode\n', '    function isRunning() public view returns(bool) {\n', '        return !isWaiting() && !isStopped();\n', '    }\n', '\n', '    // How many percent for your deposit to be multiplied at now\n', '    function calcMultiplier() public view returns (uint) {\n', '\n', '        if (totalInvested <= 75 ether) return 120;\n', '        if (totalInvested <= 200 ether) return 130;\n', '        if (totalInvested <= 350 ether) return 135;\n', '\n', '        return 140; // max value\n', '    }\n', '\n', '    // This function returns all active player deposits in the current queue\n', '    function depositsOfMember(address _member) public view returns(uint[] amounts, uint[] places) {\n', '\n', '        uint count;\n', '        for (uint i = currentIndex; i < deposits.length; i++) {\n', '            if (deposits[i].member == _member) {\n', '                count++;\n', '            }\n', '        }\n', '\n', '        amounts = new uint[](count);\n', '        places = new uint[](count);\n', '\n', '        uint id;\n', '        for (i = currentIndex; i < deposits.length; i++) {\n', '\n', '            if (deposits[i].member == _member) {\n', '                amounts[id] = deposits[i].amount;\n', '                places[id] = i - currentIndex + 1;\n', '                id++;\n', '            }\n', '\n', '        }\n', '\n', '    }\n', '\n', '    // This function returns detailed information about the current game\n', '    function stats() public view returns(\n', '        string status,\n', '        uint timestamp,\n', '        uint timeStart,\n', '        uint timeJackpot,\n', '        uint queueLength,\n', '        uint invested,\n', '        uint multiplier,\n', '        uint jackpotAmount,\n', '        address jackpotMember\n', '    ) {\n', '\n', '        if (isStopped()) {\n', '            status = "stopped";\n', '        } else if (isWaiting()) {\n', '            status = "waiting";\n', '        } else {\n', '            status = "running";\n', '        }\n', '\n', '        if (isWaiting()) {\n', '            timeStart = startTime - now;\n', '        }\n', '\n', '        if (now - jackpot.time < JACKPOT_DURATION) {\n', '            timeJackpot = JACKPOT_DURATION - (now - jackpot.time);\n', '        }\n', '\n', '        timestamp = now;\n', '        queueLength = deposits.length - currentIndex;\n', '        invested = totalInvested;\n', '        jackpotAmount = jackpot.amount;\n', '        jackpotMember = jackpot.lastMember;\n', '        multiplier = calcMultiplier();\n', '\n', '    }\n', '\n', '}']