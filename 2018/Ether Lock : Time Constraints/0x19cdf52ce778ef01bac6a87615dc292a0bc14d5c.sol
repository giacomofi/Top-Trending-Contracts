['pragma solidity 0.4.24;\n', 'pragma experimental "v0.5.0";\n', '\n', 'library SafeMath {\n', '\n', '  // We use `pure` bbecause it promises that the value for the function depends ONLY\n', '  // on the function arguments\n', '    function mul(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '        uint256 c = a * b;\n', '        require(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'interface RTCoinInterface {\n', '    \n', '\n', '    /** Functions - ERC20 */\n', '    function transfer(address _recipient, uint256 _amount) external returns (bool);\n', '\n', '    function transferFrom(address _owner, address _recipient, uint256 _amount) external returns (bool);\n', '\n', '    function approve(address _spender, uint256 _amount) external returns (bool approved);\n', '\n', '    /** Getters - ERC20 */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address _holder) external view returns (uint256);\n', '\n', '    function allowance(address _owner, address _spender) external view returns (uint256);\n', '\n', '    /** Getters - Custom */\n', '    function mint(address _recipient, uint256 _amount) external returns (bool);\n', '\n', '    function stakeContractAddress() external view returns (address);\n', '\n', '    function mergedMinerValidatorAddress() external view returns (address);\n', '    \n', '    /** Functions - Custom */\n', '    function freezeTransfers() external returns (bool);\n', '\n', '    function thawTransfers() external returns (bool);\n', '}\n', '\n', '/// @title Merged Miner Validator allows people who mine mainnet Ethereum blocks to also mint RTC\n', '/// @author Postables, RTrade Technologies Ltd\n', '/// @notice Version 1, future versions will require a non-interactive block submissinon method\n', '/// @dev We able V5 for safety features, see https://solidity.readthedocs.io/en/v0.4.24/security-considerations.html#take-warnings-seriously\n', 'contract MergedMinerValidator {\n', '\n', '    using SafeMath for uint256;\n', '    \n', '    // 0.5\n', '    uint256 constant public SUBMISSIONREWARD = 500000000000000000;\n', '    // 0.3\n', '    uint256 constant public BLOCKREWARD = 300000000000000000;\n', '    string  constant public VERSION = "production";\n', '    address constant public TOKENADDRESS = 0xecc043b92834c1ebDE65F2181B59597a6588D616;\n', '    RTCoinInterface constant public RTI = RTCoinInterface(TOKENADDRESS);\n', '    \n', '    address public tokenAddress;\n', '    address public admin;\n', '    uint256 public lastBlockSet;\n', '\n', '    enum BlockStateEnum { nil, submitted, claimed }\n', '\n', '    struct Blocks {\n', '        uint256 number;\n', '        address coinbase;\n', '        BlockStateEnum state;\n', '    }\n', '\n', '    mapping (uint256 => Blocks) public blocks;\n', '    mapping (uint256 => bytes) public hashedBlocks;\n', '    event BlockInformationSubmitted(address indexed _coinbase, uint256 indexed _blockNumber, address _submitter);\n', '    event MergedMinedRewardClaimed(address indexed _claimer, uint256[] indexed _blockNumbers, uint256 _totalReward);\n', '\n', '    modifier submittedBlock(uint256 _blockNum) {\n', '        require(blocks[_blockNum].state == BlockStateEnum.submitted, "block state must be submitted");\n', '        _;\n', '\n', '    }\n', '\n', '    modifier nonSubmittedBlock(uint256 _blockNum) {\n', '        require(blocks[_blockNum].state == BlockStateEnum.nil, "block state must be empty");\n', '        _;\n', '    }\n', '\n', '    modifier isCoinbase(uint256 _blockNumber) {\n', '        require(msg.sender == blocks[_blockNumber].coinbase, "sender must be coinbase");\n', '        _;\n', '    }\n', '\n', '    modifier canMint() {\n', '        require(RTI.mergedMinerValidatorAddress() == address(this), "merged miner contract on rtc token must be set to this contract");\n', '        _;\n', '    }\n', '\n', '    modifier notCurrentSetBlock(uint256 _blockNumber) {\n', '        require(_blockNumber > lastBlockSet, "unable to submit information for already submitted block");\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == admin, "only an admin can invoke this function");\n', '        _;\n', '    }\n', '\n', '    modifier tokenAddressNotSet() {\n', '        require(tokenAddress == address(0), "token address must not be set");\n', '        _;\n', '    }\n', '\n', '    constructor(address _admin) public {\n', '        admin = _admin;\n', '        Blocks memory b = Blocks({\n', '            number: block.number,\n', '            coinbase: block.coinbase,\n', '            state: BlockStateEnum.submitted\n', '        });\n', '        lastBlockSet = block.number;\n', '        blocks[block.number] = b;\n', '        // we use address(0) and don\'t mint any tokens, since "we are submitting the information" \n', '        emit BlockInformationSubmitted(block.coinbase, block.number, address(0));\n', '    }\n', '\n', '    /** @notice Used to submit block hash, and block miner information for the current block\n', '        * @dev Future iterations will avoid this process entirely, and use RLP encoded block headers to parse the data.\n', '     */\n', '    function submitBlock() public nonSubmittedBlock(block.number) notCurrentSetBlock(block.number) returns (bool) {\n', '        Blocks memory b = Blocks({\n', '            number: block.number,\n', '            coinbase: block.coinbase,\n', '            state: BlockStateEnum.submitted\n', '        });\n', '        lastBlockSet = block.number;\n', '        blocks[block.number] = b;\n', '        // lets not do a storage lookup so we can avoid SSLOAD gas usage\n', '        emit BlockInformationSubmitted(block.coinbase, block.number, msg.sender);\n', '        require(RTI.mint(msg.sender, SUBMISSIONREWARD), "failed to transfer reward to block submitter");\n', '        return true;\n', '    }\n', '    \n', '\n', '    /** @notice Used by a miner to claim their merged mined RTC\n', '        * @param _blockNumber The block number of the block that the person mined\n', '     */\n', '    function claimReward(uint256 _blockNumber) \n', '        internal\n', '        isCoinbase(_blockNumber) \n', '        submittedBlock(_blockNumber)\n', '        returns (uint256) \n', '    {\n', '        // mark the reward as claimed\n', '        blocks[_blockNumber].state = BlockStateEnum.claimed;\n', '        return BLOCKREWARD;\n', '    }\n', '\n', '    /** @notice Used by a miner to bulk claim their merged mined RTC\n', '        * @dev To prevent expensive looping, we throttle to 20 withdrawals at once\n', '        * @param _blockNumbers Contains the block numbers for which they want to claim\n', '     */\n', '    function bulkClaimReward(uint256[] _blockNumbers) external canMint returns (bool) {\n', '        require(_blockNumbers.length <= 20, "can only claim up to 20 rewards at once");\n', '        uint256 totalMint;\n', '        for (uint256 i = 0; i < _blockNumbers.length; i++) {\n', '            // update their total amount minted\n', '            totalMint = totalMint.add(claimReward(_blockNumbers[i]));\n', '        }\n', '        emit MergedMinedRewardClaimed(msg.sender, _blockNumbers, totalMint);\n', '        // make sure more than 0 is being claimed\n', '        require(totalMint > 0, "total coins to mint must be greater than 0");\n', '        require(RTI.mint(msg.sender, totalMint), "unable to mint tokens");\n', '        return true;\n', '    }\n', '\n', '    /** @notice Used to destroy the contract\n', '     */\n', '    function goodNightSweetPrince() public onlyAdmin returns (bool) {\n', '        selfdestruct(msg.sender);\n', '        return true;\n', '    }\n', '\n', '}']