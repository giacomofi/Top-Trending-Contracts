['pragma solidity 0.4.18;\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/FxRates.sol\n', '\n', '/**\n', ' * @title FxRates\n', ' * @dev Store the historic fx rates for conversion ETHEUR and BTCEUR\n', ' */\n', 'contract FxRates is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    struct Rate {\n', '        string rate;\n', '        string timestamp;\n', '    }\n', '\n', '    /**\n', '     * @dev Event for logging an update of the exchange rates\n', '     * @param symbol one of ["ETH", "BTC"]\n', '     * @param updateNumber an incremental number giving the number of update\n', '     * @param timestamp human readable timestamp of the earliest validity time\n', '     * @param rate a string containing the rate value\n', '     */\n', '    event RateUpdate(string symbol, uint256 updateNumber, string timestamp, string rate);\n', '\n', '    uint256 public numberBtcUpdates = 0;\n', '\n', '    mapping(uint256 => Rate) public btcUpdates;\n', '\n', '    uint256 public numberEthUpdates = 0;\n', '\n', '    mapping(uint256 => Rate) public ethUpdates;\n', '\n', '    /**\n', '     * @dev Adds the latest Ether Euro rate to the history. Only the crontract owner can execute this.\n', '     * @param _rate the exchange rate\n', '     * @param _timestamp human readable earliest point in time where the rate is valid\n', '     */\n', '    function updateEthRate(string _rate, string _timestamp) public onlyOwner {\n', '        numberEthUpdates = numberEthUpdates.add(1);\n', '        ethUpdates[numberEthUpdates] = Rate({\n', '            rate: _rate,\n', '            timestamp: _timestamp\n', '        });\n', '        RateUpdate("ETH", numberEthUpdates, _timestamp, _rate);\n', '    }\n', '\n', '    /**\n', '     * @dev Adds the latest Btc Euro rate to the history. . Only the crontract owner can execute this.\n', '     * @param _rate the exchange rate\n', '     * @param _timestamp human readable earliest point in time where the rate is valid\n', '     */\n', '    function updateBtcRate(string _rate, string _timestamp) public onlyOwner {\n', '        numberBtcUpdates = numberBtcUpdates.add(1);\n', '        btcUpdates[numberBtcUpdates] = Rate({\n', '            rate: _rate,\n', '            timestamp: _timestamp\n', '        });\n', '        RateUpdate("BTC", numberBtcUpdates, _timestamp, _rate);\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the latest Eth Euro rate\n', '     * @return a tuple containing the rate and the timestamp in human readable format\n', '     */\n', '    function getEthRate() public view returns(Rate) {\n', '        /* require(numberEthUpdates > 0); */\n', '        return ethUpdates[numberEthUpdates];\n', '            /* ethUpdates[numberEthUpdates].rate, */\n', '            /* ethUpdates[numberEthUpdates].timestamp */\n', '        /* ); */\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the latest Btc Euro rate\n', '     * @return a tuple containing the rate and the timestamp in human readable format\n', '     */\n', '    function getBtcRate() public view returns(string, string) {\n', '        /* require(numberBtcUpdates > 0); */\n', '        return (\n', '            btcUpdates[numberBtcUpdates].rate,\n', '            btcUpdates[numberBtcUpdates].timestamp\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the historic Eth Euro rate\n', '     * @param _updateNumber the number of the update the rate corresponds to.\n', '     * @return a tuple containing the rate and the timestamp in human readable format\n', '     */\n', '    function getHistEthRate(uint256 _updateNumber) public view returns(string, string) {\n', '        require(_updateNumber <= numberEthUpdates);\n', '        return (\n', '            ethUpdates[_updateNumber].rate,\n', '            ethUpdates[_updateNumber].timestamp\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the historic Btc Euro rate\n', '     * @param _updateNumber the number of the update the rate corresponds to.\n', '     * @return a tuple containing the rate and the timestamp in human readable format\n', '     */\n', '    function getHistBtcRate(uint256 _updateNumber) public view returns(string, string) {\n', '        require(_updateNumber <= numberBtcUpdates);\n', '        return (\n', '            btcUpdates[_updateNumber].rate,\n', '            btcUpdates[_updateNumber].timestamp\n', '        );\n', '    }\n', '}']