['pragma solidity ^0.4.21;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract KahnAirDrop2{\n', '    using SafeMath for uint256;\n', '\t\n', '    struct User{\n', '\t\taddress user_address;\n', '\t\tuint signup_time;\n', '\t\tuint256 reward_amount;\n', '\t\tbool blacklisted;\n', '\t\tuint paid_time;\n', '\t\tuint256 paid_token;\n', '\t\tbool status;\n', '\t}\n', '\t\n', '\t/* @dev Contract creator address */\n', '    address public owner;\n', '\t\n', '    /* @dev Assigned wallet where the remaining unclaim tokens to be return */\n', '    address public wallet;\n', '\t\n', '\t/* @dev bounty address  */\n', '\taddress[] public bountyaddress;\n', '\t\n', '\t/* @dev admin address  */\n', '\taddress[] public adminaddress;\n', '\t\n', '    /* @dev Total Signup count */\n', '    uint public userSignupCount = 0;\n', '\t\n', '    /* @dev Total tokens claimed */\n', '    uint256 public userClaimAmt = 0;\n', '\n', '    /* @dev The token being distribute */\n', '    ERC20 public token;\n', '\n', '    /* @dev To record the different reward amount for each bounty  */\n', '    mapping(address => User) public bounties;\n', '\t\n', '    /* @dev to include the bounty in the list */\n', '\tmapping(address => bool) public signups;\n', '\t\n', '    /* @dev Admin with permission to manage the signed up bounty */\n', '    mapping (address => bool) public admins;\n', '\t\n', '    /**\n', '    * @param _token Token smart contract address\n', '    * @param _wallet ETH address to reclaim unclaim tokens\n', '    */\n', '    function KahnAirDrop2(ERC20 _token, address _wallet) public {\n', '        require(_token != address(0));\n', '        token = _token;\n', '        admins[msg.sender] = true;\n', '        adminaddress.push(msg.sender) -1;\n', '        owner = msg.sender;\n', '        wallet = _wallet;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '       require(msg.sender == owner);\n', '       _;\n', '    }\n', '\t\n', '    modifier onlyAdmin {\n', '        require(admins[msg.sender]);\n', '        _;\n', '    }\n', '\n', '\t/*******************/\n', '\t/* Owner Function **/\n', '\t/*******************/\n', '    /* @dev Update Contract Configuration  */\n', '    function ownerUpdateToken(ERC20 _token, address _wallet) public onlyOwner{\n', '        token = _token;\n', '        wallet = _wallet;\n', '    }\n', '\n', '\t/*******************/\n', '\t/* Admin Function **/\n', '\t/*******************/\n', '    /* @dev Add admin to whitelist */\n', '\tfunction addAdminWhitelist(address[] _userlist) public onlyOwner onlyAdmin{\n', '\t\trequire(_userlist.length > 0);\n', '\t\tfor (uint256 i = 0; i < _userlist.length; i++) {\n', '\t\t\taddress baddr = _userlist[i];\n', '\t\t\tif(baddr != address(0)){\n', '\t\t\t\tif(!admins[baddr]){\n', '\t\t\t\t\tadmins[baddr] = true;\n', '\t\t\t\t\tadminaddress.push(baddr) -1;\n', '\t\t\t\t}\n', '\t\t\t}\n', '\t\t}\n', '\t}\n', '\t\n', '    /* @dev Remove admin from whitelist */\n', '\tfunction removeAdminWhitelist(address[] _userlist) public onlyAdmin{\n', '\t\trequire(_userlist.length > 0);\n', '\t\tfor (uint256 i = 0; i < _userlist.length; i++) {\n', '\t\t\taddress baddr = _userlist[i];\n', '\t\t\tif(baddr != address(0)){\n', '\t\t\t\tif(admins[baddr]){\n', '\t\t\t\t\tadmins[baddr] = false;\n', '\t\t\t\t}\n', '\t\t\t}\n', '\t\t}\n', '\t}\n', '\t\n', '\t/* @dev Allow Admin to reclaim all unclaim tokens back to the specified wallet */\n', '\tfunction reClaimBalance() public onlyAdmin{\n', '\t\tuint256 taBal = token.balanceOf(this);\n', '\t\ttoken.transfer(wallet, taBal);\n', '\t}\n', '\t\n', '\tfunction adminUpdateWallet(address _wallet) public onlyAdmin{\n', '\t\trequire(_wallet != address(0));\n', '\t\twallet = _wallet;\n', '\t}\n', '\n', '\t/***************************/\n', '\t/* Admin & Staff Function **/\n', '\t/***************************/\n', '\t/* @dev Admin/Staffs Update Contract Configuration */\n', '\n', '    /* @dev Add user to whitelist */\n', '    function signupUserWhitelist(address[] _userlist, uint256[] _amount) public onlyAdmin{\n', '    \trequire(_userlist.length > 0);\n', '\t\trequire(_amount.length > 0);\n', '    \tfor (uint256 i = 0; i < _userlist.length; i++) {\n', '    \t\taddress baddr = _userlist[i];\n', '    \t\tuint256 bval = _amount[i];\n', '    \t\tif(baddr != address(0)){\n', '    \t\t\tif(bounties[baddr].user_address != baddr){\n', '\t\t\t\t\tbounties[baddr] = User(baddr,now,0,false,now,bval,true);\n', '\t\t\t\t\ttoken.transfer(baddr, bval);\n', '    \t\t\t}\n', '    \t\t}\n', '    \t}\n', '    }\n', '\t\n', '\t/* @dev Return list of bounty addresses */\n', '\tfunction getBountyAddress() view public onlyAdmin returns(address[]){\n', '\t\treturn bountyaddress;\n', '\t}\n', '\t\n', '\tfunction chkUserDetails(address _address) view public onlyAdmin returns(address,uint,uint256,bool,uint,uint256,bool){\n', '\t\trequire(_address != address(0));\n', '\t\treturn(bounties[_address].user_address, bounties[_address].signup_time, bounties[_address].reward_amount, bounties[_address].blacklisted, bounties[_address].paid_time, bounties[_address].paid_token, bounties[_address].status);\n', '\t}\n', '\t\n', '\tfunction () external payable {\n', '\t\trevert();\n', '\t}\n', '\t\n', '}']