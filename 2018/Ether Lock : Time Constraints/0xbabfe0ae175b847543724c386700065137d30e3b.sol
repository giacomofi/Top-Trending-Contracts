['pragma solidity ^0.4.18;\n', '\n', 'contract PrivateBank\n', '{\n', '    mapping (address => uint) balances;\n', '    \n', '    function GetBal() \n', '    public\n', '    constant\n', '    returns(uint) \n', '    {\n', '        return balances[msg.sender];\n', '    }\n', '    \n', '    uint public MinDeposit = 1 ether;\n', '    \n', '    Log TransferLog;\n', '    \n', '    function PrivateBank(address _lib)\n', '    {\n', '        TransferLog = Log(_lib);\n', '    }\n', '    \n', '    function Deposit()\n', '    public\n', '    payable\n', '    {\n', '        if(msg.value >= MinDeposit)\n', '        {\n', '            balances[msg.sender]+=msg.value;\n', '            TransferLog.AddMessage(msg.sender,msg.value,"Deposit");\n', '        }\n', '    }\n', '    \n', '    function CashOut(uint _am)\n', '    {\n', '        if(_am<=balances[msg.sender])\n', '        {\n', '            if(msg.sender.call.value(_am)())\n', '            {\n', '                balances[msg.sender]-=_am;\n', '                TransferLog.AddMessage(msg.sender,_am,"CashOut");\n', '            }\n', '        }\n', '    }\n', '    \n', '    function() public payable{}\n', '    \n', '    function bal()\n', '    public\n', '    constant\n', '    returns(uint)\n', '    {\n', '         return this.balance;\n', '    }\n', '}\n', '\n', 'contract Log \n', '{\n', '   \n', '    struct Message\n', '    {\n', '        address Sender;\n', '        string  Data;\n', '        uint Val;\n', '        uint  Time;\n', '    }\n', '    \n', '    Message[] public History;\n', '    \n', '    Message public LastMsg;\n', '    \n', '    function AddMessage(address _adr,uint _val,string _data)\n', '    public\n', '    {\n', '        LastMsg.Sender = _adr;\n', '        LastMsg.Time = now;\n', '        LastMsg.Val = _val;\n', '        LastMsg.Data = _data;\n', '        History.push(LastMsg);\n', '    }\n', '}']