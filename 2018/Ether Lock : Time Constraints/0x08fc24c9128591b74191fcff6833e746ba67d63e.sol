['//demonstration of a how a honeypot contract is exploiting the way uninitialized storage pointers are handled\n', '\n', 'pragma solidity ^0.4.25;\n', 'contract Lottery50chance\n', '{\n', '  uint256 public randomNumber = 1;\n', '  uint256 public minBet = 1 finney;\n', '  address owner = msg.sender;\n', '\n', '  struct GameHistory \n', '  {\n', '    address player;\n', '    uint256 number;\n', '  }\n', '  \n', '  GameHistory[] public log;\n', '\n', '  modifier onlyOwner() \n', '  {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function play(uint256 _number) \n', '  public \n', '  payable \n', '  {\n', '      if(msg.value >= minBet && _number <= 1)\n', '      {\n', '          GameHistory gameHistory;\n', '          gameHistory.player = msg.sender;\n', '          gameHistory.number = _number;\n', '          log.push(gameHistory);\n', '          \n', '          // if player guesses correctly, transfer contract balance\n', '          // else transfer to owner\n', '       \n', '          if (_number == randomNumber) \n', '          {\n', '              msg.sender.transfer(address(this).balance);\n', '          }else{\n', '              owner.transfer(address(this).balance);\n', '          }\n', '          \n', '      }\n', '  }\n', '  \n', '  function withdraw(uint256 amount) \n', '  public \n', '  onlyOwner \n', '  {\n', '    owner.transfer(amount);\n', '  }\n', '\n', '  function() public payable { }\n', '  \n', '}']
['//demonstration of a how a honeypot contract is exploiting the way uninitialized storage pointers are handled\n', '\n', 'pragma solidity ^0.4.25;\n', 'contract Lottery50chance\n', '{\n', '  uint256 public randomNumber = 1;\n', '  uint256 public minBet = 1 finney;\n', '  address owner = msg.sender;\n', '\n', '  struct GameHistory \n', '  {\n', '    address player;\n', '    uint256 number;\n', '  }\n', '  \n', '  GameHistory[] public log;\n', '\n', '  modifier onlyOwner() \n', '  {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function play(uint256 _number) \n', '  public \n', '  payable \n', '  {\n', '      if(msg.value >= minBet && _number <= 1)\n', '      {\n', '          GameHistory gameHistory;\n', '          gameHistory.player = msg.sender;\n', '          gameHistory.number = _number;\n', '          log.push(gameHistory);\n', '          \n', '          // if player guesses correctly, transfer contract balance\n', '          // else transfer to owner\n', '       \n', '          if (_number == randomNumber) \n', '          {\n', '              msg.sender.transfer(address(this).balance);\n', '          }else{\n', '              owner.transfer(address(this).balance);\n', '          }\n', '          \n', '      }\n', '  }\n', '  \n', '  function withdraw(uint256 amount) \n', '  public \n', '  onlyOwner \n', '  {\n', '    owner.transfer(amount);\n', '  }\n', '\n', '  function() public payable { }\n', '  \n', '}']
