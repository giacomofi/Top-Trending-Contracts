['pragma solidity ^0.4.21;\n', '\n', 'contract SafeMath {\n', '     function safeMul(uint a, uint b) internal pure returns (uint) {\n', '          uint c = a * b;\n', '          assert(a == 0 || c / a == b);\n', '          return c;\n', '     }\n', '\n', '     function safeSub(uint a, uint b) internal pure returns (uint) {\n', '          assert(b <= a);\n', '          return a - b;\n', '     }\n', '\n', '     function safeAdd(uint a, uint b) internal pure returns (uint) {\n', '          uint c = a + b;\n', '          assert(c>=a && c>=b);\n', '          return c;\n', '     }\n', '}\n', '\n', '\n', 'contract Token is SafeMath {\n', '\n', '     \n', '     function transfer(address _to, uint256 _value) public;\n', '     function transferFrom(address _from, address _to, uint256 _value) public returns(bool);\n', '     function approve(address _spender, uint256 _amount) public returns (bool success);\n', '\n', '     event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract Crowdsale is Token {\n', '\n', '    // Public and other variables of the token\n', '    address public owner;\n', '    string public name = "crowdsalenetworkplatform";\n', '    string public symbol = "CSNP";\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply = 50000000 * 10 ** uint256(decimals);\n', '    \n', '    address internal foundersAddress;\n', '    address internal bonusAddress;\n', '    uint internal dayStart = now;\n', '\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function Crowdsale(address enterFoundersAddress, address enterBonusAddress) public {\n', '        foundersAddress = enterFoundersAddress;\n', '        bonusAddress = enterBonusAddress;\n', '        balanceOf[foundersAddress] = 12500000 * 10 ** uint256(decimals);\n', '        balanceOf[bonusAddress] = 18750000 * 10 ** uint256(decimals);\n', '        balanceOf[msg.sender] = totalSupply - (12500000 * 10 ** uint256(decimals)) - (18750000 * 10 ** uint256(decimals));                \n', '        owner = msg.sender;\n', '\n', '    }\n', '\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Subtract from the sender\n', '        balanceOf[_from] = safeSub(balanceOf[_from],_value);\n', '        // Add the same to the recipient\n', '        balanceOf[_to] = safeAdd(balanceOf[_to],_value);\n', '        emit Transfer(_from, _to, _value);\n', '\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public  {\n', '        if(now < (dayStart + 365 days)){\n', '            require(msg.sender != foundersAddress && tx.origin != foundersAddress);\n', '        }\n', '        \n', '        if(now < (dayStart + 180 days)){\n', '            require(msg.sender != bonusAddress && tx.origin != bonusAddress);\n', '        }\n', '        \n', '\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        \n', '        if(now < (dayStart + 365 days)){\n', '            require(_from != foundersAddress);\n', '        }\n', '        \n', '        if(now < (dayStart + 180 days)){\n', '            require(_from != bonusAddress);\n', '        }\n', '\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    \n', '    /**\n', '    *   Set allowance for other address\n', '    *\n', '    *   also, to minimize the risk of the approve/transferFrom attack vector\n', '    *   approve has to be called twice in 2 separate transactions - once to\n', '    *   change the allowance to 0 and secondly to change it to the new allowance\n', '    *   value\n', '    *\n', '    *   @param _spender      approved address\n', '    *   @param _amount       allowance amount\n', '    *\n', '    *   @return true if the approval was successful\n', '    */\n', '    function approve(address _spender, uint256 _amount) public returns(bool success) {\n', '        require((_amount == 0) || (allowance[msg.sender][_spender] == 0));\n', '        \n', '        if(now < (dayStart + 365 days)){\n', '            require(msg.sender != foundersAddress && tx.origin != foundersAddress);\n', '        }\n', '        \n', '        if(now < (dayStart + 180 days)){\n', '            require(msg.sender != bonusAddress && tx.origin != bonusAddress);\n', '        }\n', '        \n', '        \n', '        allowance[msg.sender][_spender] = _amount;\n', '        return true;\n', '    }\n', '    \n', '        \n', '     \n', '\n', '}']