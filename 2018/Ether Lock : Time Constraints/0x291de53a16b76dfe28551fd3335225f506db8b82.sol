['pragma solidity ^0.4.18;\n', '\n', '// ----------------------------------------------------------------------------\n', '//\n', '//  Symbol       : 0xGOLD\n', '//  Name         : 0xGold Token\n', '//  Total supply : 5000000 (5 million)\n', '//  Decimals     : 10\n', '//\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'library ExtendedMath {\n', '    //return the smaller of the two inputs (a or b)\n', '    function limitLessThan(uint a, uint b) internal pure returns (uint c) {\n', '        if(a > b) return b;\n', '        return a;\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC-20 Token Interface\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract ERC918Interface  {\n', '\n', '    function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success);\n', '\n', '    function getChallengeNumber() public constant returns (bytes32);\n', '\n', '    function getMiningDifficulty() public constant returns (uint);\n', '\n', '    function getMiningTarget() public constant returns (uint);\n', '\n', '    function getMiningReward() public constant returns (uint);\n', '\n', '    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\n', '\n', '    address public lastRewardTo;\n', '    uint public lastRewardAmount;\n', '    uint public lastRewardEthBlockNumber;\n', '    bytes32 public challengeNumber;\n', '\n', '\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC-20 Token\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract _0xGoldToken is ERC20Interface, Owned, ERC918Interface {\n', '\n', '    using SafeMath for uint;\n', '    using ExtendedMath for uint;\n', '\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '    uint public latestDifficultyPeriodStarted;\n', '    uint public epochCount;                 //number of &#39;blocks&#39; mined\n', '    uint public _BLOCKS_PER_READJUSTMENT = 100;\n', '\n', '    //a little number and a big number\n', '    uint public  _MINIMUM_TARGET = 2**16;\n', '    uint public  _MAXIMUM_TARGET = 2**234;\n', '    \n', '    address public parentAddress;     // for merge mining\n', '\n', '    uint public miningTarget;\n', '    bytes32 public challengeNumber;   //generate a new one when a new reward is minted\n', '\n', '    uint public rewardEra;\n', '    uint public maxSupplyForEra;\n', '\n', '    address public lastRewardTo;\n', '    uint public lastRewardAmount;\n', '    uint public lastRewardEthBlockNumber;\n', '\n', '    bool locked = false;\n', '\n', '    mapping(bytes32 => bytes32) solutionForChallenge;\n', '\n', '    uint public tokensMinted;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    function _0xGoldToken() public onlyOwner{\n', '\n', '        symbol = "0xGOLD";\n', '        name = "0xGold Token";\n', '        decimals = 10;\n', '        _totalSupply = 5000000 * 10**uint(decimals);\n', '\n', '        if(locked) revert();\n', '\n', '        locked = true;\n', '        tokensMinted = 500000000000000; // 50,000\n', '        rewardEra = 0;\n', '        maxSupplyForEra = _totalSupply.div(2);\n', '        miningTarget = _MAXIMUM_TARGET;\n', '        latestDifficultyPeriodStarted = block.number;\n', '\n', '        _startNewMiningEpoch();\n', '        \n', '        parentAddress = 0xB6eD7644C69416d67B522e20bC294A9a9B405B31; // for merge mining\n', '        \n', '        balances[owner] = tokensMinted;\n', '        Transfer(address(0), owner, tokensMinted);\n', '\n', '\n', '    }\n', '\n', '    function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success) {\n', '\n', '      //the PoW must contain work that includes a recent ethereum block hash (challenge number) and the msg.sender&#39;s address to prevent MITM attacks\n', '      bytes32 digest =  keccak256(challengeNumber, msg.sender, nonce );\n', '\n', '      //the challenge digest must match the expected\n', '      if (digest != challenge_digest) revert();\n', '\n', '      //the digest must be smaller than the target\n', '      if(uint256(digest) > miningTarget) revert();\n', '\n', '      //only allow one reward for each challenge\n', '      bytes32 solution = solutionForChallenge[challengeNumber];\n', '      solutionForChallenge[challengeNumber] = digest;\n', '      if(solution != 0x0) revert();  //prevent the same answer from awarding twice\n', '\n', '      uint reward_amount = getMiningReward();\n', '      balances[msg.sender] = balances[msg.sender].add(reward_amount);\n', '      tokensMinted = tokensMinted.add(reward_amount);\n', '\n', '      //Cannot mint more tokens than there are\n', '      assert(tokensMinted <= maxSupplyForEra);\n', '\n', '      //set readonly diagnostics data\n', '      lastRewardTo = msg.sender;\n', '      lastRewardAmount = reward_amount;\n', '      lastRewardEthBlockNumber = block.number;\n', '\n', '      _startNewMiningEpoch();\n', '\n', '      Mint(msg.sender, reward_amount, epochCount, challengeNumber );\n', '\n', '      return true;\n', '\n', '    }\n', '\n', '    //a new &#39;block&#39; to be mined\n', '    function _startNewMiningEpoch() internal {\n', '\n', '      //if max supply for the era will be exceeded next reward round then enter the new era before that happens\n', '\n', '      //2 is the final reward era, almost all tokens minted\n', '      //once the final era is reached, more tokens will not be given out because the assert function\n', '      if( tokensMinted.add(getMiningReward()) > maxSupplyForEra && rewardEra < 2)\n', '      {\n', '        rewardEra = rewardEra + 1;\n', '      }\n', '\n', '      //set the next minted supply at which the era will change\n', '      // total supply is 50000000000000000  because of 10 decimal places\n', '      maxSupplyForEra = _totalSupply - _totalSupply.div( 2**(rewardEra + 1));\n', '\n', '      epochCount = epochCount.add(1);\n', '\n', '      //every so often, readjust difficulty. Dont readjust when deploying\n', '      if(epochCount % _BLOCKS_PER_READJUSTMENT == 0)\n', '      {\n', '        _reAdjustDifficulty();\n', '      }\n', '\n', '      //make the latest ethereum block hash a part of the next challenge for PoW to prevent pre-mining future blocks\n', '      //do this last since this is a protection mechanism in the mint() function\n', '      challengeNumber = block.blockhash(block.number - 1);\n', '\n', '    }\n', '\n', '    //readjust the target by 5 percent\n', '    function _reAdjustDifficulty() internal {\n', '\n', '        uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\n', '        //assume 240 ethereum blocks per hour\n', '\n', '        //we want miners to spend 7 minutes to mine each &#39;block&#39;, about 28 ethereum blocks = one 0xGOLD epoch\n', '        uint epochsMined = _BLOCKS_PER_READJUSTMENT; //256\n', '\n', '        uint targetEthBlocksPerDiffPeriod = epochsMined * 28; //should be 28 times slower than ethereum\n', '\n', '        //if there were less eth blocks passed in time than expected\n', '        if( ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod )\n', '        {\n', '          uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div( ethBlocksSinceLastDifficultyPeriod );\n', '\n', '          uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\n', '          // If there were 5% more blocks mined than expected then this is 5.  If there were 100% more blocks mined than expected then this is 100.\n', '\n', '          //make it harder\n', '          miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));   //by up to 50 %\n', '        }else{\n', '          uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div( targetEthBlocksPerDiffPeriod );\n', '          uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000); //always between 0 and 1000\n', '\n', '          //make it easier\n', '          miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));   //by up to 50 %\n', '        }\n', '\n', '        latestDifficultyPeriodStarted = block.number;\n', '\n', '        if(miningTarget < _MINIMUM_TARGET) //very difficult\n', '        {\n', '          miningTarget = _MINIMUM_TARGET;\n', '        }\n', '\n', '        if(miningTarget > _MAXIMUM_TARGET) //very easy\n', '        {\n', '          miningTarget = _MAXIMUM_TARGET;\n', '        }\n', '    }\n', '\n', '\n', '    //this is a recent ethereum block hash, used to prevent pre-mining future blocks\n', '    function getChallengeNumber() public constant returns (bytes32) {\n', '        return challengeNumber;\n', '    }\n', '\n', '    //the number of zeroes the digest of the PoW solution requires.  Auto adjusts\n', '     function getMiningDifficulty() public constant returns (uint) {\n', '        return _MAXIMUM_TARGET.div(miningTarget);\n', '    }\n', '\n', '    function getMiningTarget() public constant returns (uint) {\n', '       return miningTarget;\n', '   }\n', '\n', '    //reward is cut in half every reward era (as tokens are mined)\n', '    function getMiningReward() public constant returns (uint) {\n', '         //every reward era, the reward amount halves.\n', '         return (16 * 10**uint(decimals) ).div( 2**rewardEra ) ;\n', '    }\n', '\n', '    //help debug mining software\n', '    function getMintDigest(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number) public view returns (bytes32 digesttest) {\n', '        bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\n', '        return digest;\n', '      }\n', '\n', '      //help debug mining software\n', '      function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns (bool success) {\n', '          bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\n', '          if(uint256(digest) > testTarget) revert();\n', '          return (digest == challenge_digest);\n', '        }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from token owner&#39;s account to `to` account\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account. The `spender` contract function\n', '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Don&#39;t accept ETH\n', '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Merge Mining\n', '    // ------------------------------------------------------------------------\n', '    \n', '    function merge() public returns (bool success) {\n', '\n', '            bytes32 future_challengeNumber = block.blockhash(block.number - 1);\n', '            if(challengeNumber == future_challengeNumber){\n', '                return false; // ( this is likely the second time that mergeMint() has been called in a transaction, so return false (don&#39;t revert))\n', '            }\n', '\n', '            //verify Parent::lastRewardTo == msg.sender;\n', '            if(ERC918Interface(parentAddress).lastRewardTo() != msg.sender){\n', '                return false; // a different address called mint last so return false ( don&#39;t revert)\n', '            }\n', '            \n', '            //verify Parent::lastRewardEthBlockNumber == block.number;\n', '\n', '            if(ERC918Interface(parentAddress).lastRewardEthBlockNumber() != block.number){\n', '                return false; // parent::mint() was called in a different block number so return false ( don&#39;t revert)\n', '            }\n', '\n', '\n', '             bytes32 parentChallengeNumber = ERC918Interface(parentAddress).challengeNumber();\n', '             bytes32 solution = solutionForChallenge[parentChallengeNumber];\n', '             if(solution != 0x0) return false;  //prevent the same answer from awarding twice\n', '             bytes32 digest = &#39;merge&#39;;\n', '             solutionForChallenge[parentChallengeNumber] = digest;\n', '\n', '\n', '            //so now we may safely run the relevant logic to give an award to the sender, and update the contract\n', '            \n', '                       uint reward_amount = getMiningReward();\n', '\n', '            balances[msg.sender] = balances[msg.sender].add(reward_amount);\n', '\n', '            tokensMinted = tokensMinted.add(reward_amount);\n', '\n', '\n', '            //Cannot mint more tokens than there are\n', '            assert(tokensMinted <= maxSupplyForEra);\n', '\n', '            //set readonly diagnostics data\n', '            lastRewardTo = msg.sender;\n', '            lastRewardAmount = reward_amount;\n', '            lastRewardEthBlockNumber = block.number;\n', '\n', '\n', '             _startNewMiningEpoch();\n', '\n', '              Mint(msg.sender, reward_amount, epochCount, 0 ); // use 0 to indicate a merge mine\n', '\n', '           return true;\n', '\n', '        }\n', '\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// ----------------------------------------------------------------------------\n', '//\n', '//  Symbol       : 0xGOLD\n', '//  Name         : 0xGold Token\n', '//  Total supply : 5000000 (5 million)\n', '//  Decimals     : 10\n', '//\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'library ExtendedMath {\n', '    //return the smaller of the two inputs (a or b)\n', '    function limitLessThan(uint a, uint b) internal pure returns (uint c) {\n', '        if(a > b) return b;\n', '        return a;\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC-20 Token Interface\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract ERC918Interface  {\n', '\n', '    function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success);\n', '\n', '    function getChallengeNumber() public constant returns (bytes32);\n', '\n', '    function getMiningDifficulty() public constant returns (uint);\n', '\n', '    function getMiningTarget() public constant returns (uint);\n', '\n', '    function getMiningReward() public constant returns (uint);\n', '\n', '    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\n', '\n', '    address public lastRewardTo;\n', '    uint public lastRewardAmount;\n', '    uint public lastRewardEthBlockNumber;\n', '    bytes32 public challengeNumber;\n', '\n', '\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC-20 Token\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract _0xGoldToken is ERC20Interface, Owned, ERC918Interface {\n', '\n', '    using SafeMath for uint;\n', '    using ExtendedMath for uint;\n', '\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '    uint public latestDifficultyPeriodStarted;\n', "    uint public epochCount;                 //number of 'blocks' mined\n", '    uint public _BLOCKS_PER_READJUSTMENT = 100;\n', '\n', '    //a little number and a big number\n', '    uint public  _MINIMUM_TARGET = 2**16;\n', '    uint public  _MAXIMUM_TARGET = 2**234;\n', '    \n', '    address public parentAddress;     // for merge mining\n', '\n', '    uint public miningTarget;\n', '    bytes32 public challengeNumber;   //generate a new one when a new reward is minted\n', '\n', '    uint public rewardEra;\n', '    uint public maxSupplyForEra;\n', '\n', '    address public lastRewardTo;\n', '    uint public lastRewardAmount;\n', '    uint public lastRewardEthBlockNumber;\n', '\n', '    bool locked = false;\n', '\n', '    mapping(bytes32 => bytes32) solutionForChallenge;\n', '\n', '    uint public tokensMinted;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    function _0xGoldToken() public onlyOwner{\n', '\n', '        symbol = "0xGOLD";\n', '        name = "0xGold Token";\n', '        decimals = 10;\n', '        _totalSupply = 5000000 * 10**uint(decimals);\n', '\n', '        if(locked) revert();\n', '\n', '        locked = true;\n', '        tokensMinted = 500000000000000; // 50,000\n', '        rewardEra = 0;\n', '        maxSupplyForEra = _totalSupply.div(2);\n', '        miningTarget = _MAXIMUM_TARGET;\n', '        latestDifficultyPeriodStarted = block.number;\n', '\n', '        _startNewMiningEpoch();\n', '        \n', '        parentAddress = 0xB6eD7644C69416d67B522e20bC294A9a9B405B31; // for merge mining\n', '        \n', '        balances[owner] = tokensMinted;\n', '        Transfer(address(0), owner, tokensMinted);\n', '\n', '\n', '    }\n', '\n', '    function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success) {\n', '\n', "      //the PoW must contain work that includes a recent ethereum block hash (challenge number) and the msg.sender's address to prevent MITM attacks\n", '      bytes32 digest =  keccak256(challengeNumber, msg.sender, nonce );\n', '\n', '      //the challenge digest must match the expected\n', '      if (digest != challenge_digest) revert();\n', '\n', '      //the digest must be smaller than the target\n', '      if(uint256(digest) > miningTarget) revert();\n', '\n', '      //only allow one reward for each challenge\n', '      bytes32 solution = solutionForChallenge[challengeNumber];\n', '      solutionForChallenge[challengeNumber] = digest;\n', '      if(solution != 0x0) revert();  //prevent the same answer from awarding twice\n', '\n', '      uint reward_amount = getMiningReward();\n', '      balances[msg.sender] = balances[msg.sender].add(reward_amount);\n', '      tokensMinted = tokensMinted.add(reward_amount);\n', '\n', '      //Cannot mint more tokens than there are\n', '      assert(tokensMinted <= maxSupplyForEra);\n', '\n', '      //set readonly diagnostics data\n', '      lastRewardTo = msg.sender;\n', '      lastRewardAmount = reward_amount;\n', '      lastRewardEthBlockNumber = block.number;\n', '\n', '      _startNewMiningEpoch();\n', '\n', '      Mint(msg.sender, reward_amount, epochCount, challengeNumber );\n', '\n', '      return true;\n', '\n', '    }\n', '\n', "    //a new 'block' to be mined\n", '    function _startNewMiningEpoch() internal {\n', '\n', '      //if max supply for the era will be exceeded next reward round then enter the new era before that happens\n', '\n', '      //2 is the final reward era, almost all tokens minted\n', '      //once the final era is reached, more tokens will not be given out because the assert function\n', '      if( tokensMinted.add(getMiningReward()) > maxSupplyForEra && rewardEra < 2)\n', '      {\n', '        rewardEra = rewardEra + 1;\n', '      }\n', '\n', '      //set the next minted supply at which the era will change\n', '      // total supply is 50000000000000000  because of 10 decimal places\n', '      maxSupplyForEra = _totalSupply - _totalSupply.div( 2**(rewardEra + 1));\n', '\n', '      epochCount = epochCount.add(1);\n', '\n', '      //every so often, readjust difficulty. Dont readjust when deploying\n', '      if(epochCount % _BLOCKS_PER_READJUSTMENT == 0)\n', '      {\n', '        _reAdjustDifficulty();\n', '      }\n', '\n', '      //make the latest ethereum block hash a part of the next challenge for PoW to prevent pre-mining future blocks\n', '      //do this last since this is a protection mechanism in the mint() function\n', '      challengeNumber = block.blockhash(block.number - 1);\n', '\n', '    }\n', '\n', '    //readjust the target by 5 percent\n', '    function _reAdjustDifficulty() internal {\n', '\n', '        uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\n', '        //assume 240 ethereum blocks per hour\n', '\n', "        //we want miners to spend 7 minutes to mine each 'block', about 28 ethereum blocks = one 0xGOLD epoch\n", '        uint epochsMined = _BLOCKS_PER_READJUSTMENT; //256\n', '\n', '        uint targetEthBlocksPerDiffPeriod = epochsMined * 28; //should be 28 times slower than ethereum\n', '\n', '        //if there were less eth blocks passed in time than expected\n', '        if( ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod )\n', '        {\n', '          uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div( ethBlocksSinceLastDifficultyPeriod );\n', '\n', '          uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\n', '          // If there were 5% more blocks mined than expected then this is 5.  If there were 100% more blocks mined than expected then this is 100.\n', '\n', '          //make it harder\n', '          miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));   //by up to 50 %\n', '        }else{\n', '          uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div( targetEthBlocksPerDiffPeriod );\n', '          uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000); //always between 0 and 1000\n', '\n', '          //make it easier\n', '          miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));   //by up to 50 %\n', '        }\n', '\n', '        latestDifficultyPeriodStarted = block.number;\n', '\n', '        if(miningTarget < _MINIMUM_TARGET) //very difficult\n', '        {\n', '          miningTarget = _MINIMUM_TARGET;\n', '        }\n', '\n', '        if(miningTarget > _MAXIMUM_TARGET) //very easy\n', '        {\n', '          miningTarget = _MAXIMUM_TARGET;\n', '        }\n', '    }\n', '\n', '\n', '    //this is a recent ethereum block hash, used to prevent pre-mining future blocks\n', '    function getChallengeNumber() public constant returns (bytes32) {\n', '        return challengeNumber;\n', '    }\n', '\n', '    //the number of zeroes the digest of the PoW solution requires.  Auto adjusts\n', '     function getMiningDifficulty() public constant returns (uint) {\n', '        return _MAXIMUM_TARGET.div(miningTarget);\n', '    }\n', '\n', '    function getMiningTarget() public constant returns (uint) {\n', '       return miningTarget;\n', '   }\n', '\n', '    //reward is cut in half every reward era (as tokens are mined)\n', '    function getMiningReward() public constant returns (uint) {\n', '         //every reward era, the reward amount halves.\n', '         return (16 * 10**uint(decimals) ).div( 2**rewardEra ) ;\n', '    }\n', '\n', '    //help debug mining software\n', '    function getMintDigest(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number) public view returns (bytes32 digesttest) {\n', '        bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\n', '        return digest;\n', '      }\n', '\n', '      //help debug mining software\n', '      function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns (bool success) {\n', '          bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\n', '          if(uint256(digest) > testTarget) revert();\n', '          return (digest == challenge_digest);\n', '        }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to `to` account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account\n", '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account. The `spender` contract function\n", '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Don't accept ETH\n", '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Merge Mining\n', '    // ------------------------------------------------------------------------\n', '    \n', '    function merge() public returns (bool success) {\n', '\n', '            bytes32 future_challengeNumber = block.blockhash(block.number - 1);\n', '            if(challengeNumber == future_challengeNumber){\n', "                return false; // ( this is likely the second time that mergeMint() has been called in a transaction, so return false (don't revert))\n", '            }\n', '\n', '            //verify Parent::lastRewardTo == msg.sender;\n', '            if(ERC918Interface(parentAddress).lastRewardTo() != msg.sender){\n', "                return false; // a different address called mint last so return false ( don't revert)\n", '            }\n', '            \n', '            //verify Parent::lastRewardEthBlockNumber == block.number;\n', '\n', '            if(ERC918Interface(parentAddress).lastRewardEthBlockNumber() != block.number){\n', "                return false; // parent::mint() was called in a different block number so return false ( don't revert)\n", '            }\n', '\n', '\n', '             bytes32 parentChallengeNumber = ERC918Interface(parentAddress).challengeNumber();\n', '             bytes32 solution = solutionForChallenge[parentChallengeNumber];\n', '             if(solution != 0x0) return false;  //prevent the same answer from awarding twice\n', "             bytes32 digest = 'merge';\n", '             solutionForChallenge[parentChallengeNumber] = digest;\n', '\n', '\n', '            //so now we may safely run the relevant logic to give an award to the sender, and update the contract\n', '            \n', '                       uint reward_amount = getMiningReward();\n', '\n', '            balances[msg.sender] = balances[msg.sender].add(reward_amount);\n', '\n', '            tokensMinted = tokensMinted.add(reward_amount);\n', '\n', '\n', '            //Cannot mint more tokens than there are\n', '            assert(tokensMinted <= maxSupplyForEra);\n', '\n', '            //set readonly diagnostics data\n', '            lastRewardTo = msg.sender;\n', '            lastRewardAmount = reward_amount;\n', '            lastRewardEthBlockNumber = block.number;\n', '\n', '\n', '             _startNewMiningEpoch();\n', '\n', '              Mint(msg.sender, reward_amount, epochCount, 0 ); // use 0 to indicate a merge mine\n', '\n', '           return true;\n', '\n', '        }\n', '\n', '\n', '}']
