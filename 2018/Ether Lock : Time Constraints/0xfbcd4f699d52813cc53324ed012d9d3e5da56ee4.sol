['pragma solidity 0.4.24;\n', '\n', '\n', 'contract AccreditationRegistryV1 {\n', '    address public owner;\n', '    bool public halted;\n', '\n', '    mapping(bytes32 => mapping(bytes32 => bool)) public accreditations;\n', '\n', '    modifier onlyOwner() {\n', '        require(\n', '            msg.sender == owner,\n', '            "Only the owner can perform this action."\n', '        );\n', '        _;\n', '    }\n', '    modifier onlyUnhalted() {\n', '        require(!halted, "Contract is halted");\n', '        _;\n', '    }\n', '\n', '    event AccreditationChange(\n', '        bytes32 provider,\n', '        bytes32 identifier,\n', '        bool active\n', '    );\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        halted = false;\n', '    }\n', '\n', '    function getAccreditationActive(\n', '        bytes32 _provider, bytes32 _identifier\n', '    ) public view returns (bool active_) {\n', '        return accreditations[_provider][_identifier];\n', '    }\n', '    function setAccreditationActive(\n', '        bytes32 _provider, bytes32 _identifier, bool _active\n', '    ) public onlyOwner onlyUnhalted {\n', '        if (accreditations[_provider][_identifier] != _active) {\n', '            accreditations[_provider][_identifier] = _active;\n', '            emit AccreditationChange(_provider, _identifier, _active);\n', '        }\n', '    }\n', '\n', '    function halt() public onlyOwner {\n', '        halted = true;\n', '    }\n', '    function unhalt() public onlyOwner {\n', '        halted = false;\n', '    }\n', '\n', '    function setOwner(address newOwner_) public onlyOwner {\n', '        owner = newOwner_;\n', '    }\n', '\n', '    function getRegistryVersion(\n', '    ) public pure returns (int version) {\n', '        return 1;\n', '    }\n', '\n', '    function() public payable {\n', '        revert("Does not accept a default");\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '\n', 'contract AccreditationRegistryV1 {\n', '    address public owner;\n', '    bool public halted;\n', '\n', '    mapping(bytes32 => mapping(bytes32 => bool)) public accreditations;\n', '\n', '    modifier onlyOwner() {\n', '        require(\n', '            msg.sender == owner,\n', '            "Only the owner can perform this action."\n', '        );\n', '        _;\n', '    }\n', '    modifier onlyUnhalted() {\n', '        require(!halted, "Contract is halted");\n', '        _;\n', '    }\n', '\n', '    event AccreditationChange(\n', '        bytes32 provider,\n', '        bytes32 identifier,\n', '        bool active\n', '    );\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        halted = false;\n', '    }\n', '\n', '    function getAccreditationActive(\n', '        bytes32 _provider, bytes32 _identifier\n', '    ) public view returns (bool active_) {\n', '        return accreditations[_provider][_identifier];\n', '    }\n', '    function setAccreditationActive(\n', '        bytes32 _provider, bytes32 _identifier, bool _active\n', '    ) public onlyOwner onlyUnhalted {\n', '        if (accreditations[_provider][_identifier] != _active) {\n', '            accreditations[_provider][_identifier] = _active;\n', '            emit AccreditationChange(_provider, _identifier, _active);\n', '        }\n', '    }\n', '\n', '    function halt() public onlyOwner {\n', '        halted = true;\n', '    }\n', '    function unhalt() public onlyOwner {\n', '        halted = false;\n', '    }\n', '\n', '    function setOwner(address newOwner_) public onlyOwner {\n', '        owner = newOwner_;\n', '    }\n', '\n', '    function getRegistryVersion(\n', '    ) public pure returns (int version) {\n', '        return 1;\n', '    }\n', '\n', '    function() public payable {\n', '        revert("Does not accept a default");\n', '    }\n', '}']
