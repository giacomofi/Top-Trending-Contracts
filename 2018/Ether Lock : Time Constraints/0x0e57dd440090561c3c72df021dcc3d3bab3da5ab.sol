['pragma solidity ^0.4.0;\n', '\n', 'contract EthBird {\n', '    \n', '    address public owner;\n', '    address highScoreUser;\n', '    \n', '    uint currentHighScore = 0;\n', '    uint256 ownerCommision = 0;\n', '    uint contestStartTime = now;\n', '    \n', '    mapping(address => bool) paidUsers;\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function EthBird() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function payEntryFee() public payable  {\n', '        if (msg.value >= 0.001 ether) {\n', '            paidUsers[msg.sender] = true;\n', '            ownerCommision = msg.value / 5;\n', '            address(owner).transfer(ownerCommision);\n', '        }\n', '        \n', '        if(now >= contestEndTime()){\n', '            awardHighScore();   \n', '        }\n', '    }\n', '\n', '    function getCurrentHighscore() public constant returns (uint) {\n', '        return currentHighScore;\n', '    }\n', '    \n', '    function getCurrentHighscoreUser() public constant returns (address) {\n', '        return highScoreUser;\n', '    }\n', '    \n', '    function getCurrentJackpot() public constant returns (uint) {\n', '        return address(this).balance;\n', '    }\n', '    \n', '    function contestEndTime() public constant returns (uint) {\n', '        return contestStartTime + 3 hours;\n', '    }\n', '    \n', '    function getNextPayoutEstimation() public constant returns (uint) {\n', '        if(contestEndTime() > now){\n', '            return contestEndTime() - now;\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '    \n', '    function recordHighScore(uint score, address userToScore)  public onlyOwner {\n', '        if(paidUsers[userToScore]){\n', '            if(score > 0 && score >= currentHighScore){\n', '                highScoreUser = userToScore;\n', '                currentHighScore = score;\n', '            }\n', '        }\n', '    }\n', '    \n', '    function awardHighScore() internal {\n', '        address(highScoreUser).transfer(address(this).balance);\n', '        contestStartTime = now;\n', '        currentHighScore = 0;\n', '        highScoreUser = 0;\n', '    }\n', '}']
['pragma solidity ^0.4.0;\n', '\n', 'contract EthBird {\n', '    \n', '    address public owner;\n', '    address highScoreUser;\n', '    \n', '    uint currentHighScore = 0;\n', '    uint256 ownerCommision = 0;\n', '    uint contestStartTime = now;\n', '    \n', '    mapping(address => bool) paidUsers;\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function EthBird() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function payEntryFee() public payable  {\n', '        if (msg.value >= 0.001 ether) {\n', '            paidUsers[msg.sender] = true;\n', '            ownerCommision = msg.value / 5;\n', '            address(owner).transfer(ownerCommision);\n', '        }\n', '        \n', '        if(now >= contestEndTime()){\n', '            awardHighScore();   \n', '        }\n', '    }\n', '\n', '    function getCurrentHighscore() public constant returns (uint) {\n', '        return currentHighScore;\n', '    }\n', '    \n', '    function getCurrentHighscoreUser() public constant returns (address) {\n', '        return highScoreUser;\n', '    }\n', '    \n', '    function getCurrentJackpot() public constant returns (uint) {\n', '        return address(this).balance;\n', '    }\n', '    \n', '    function contestEndTime() public constant returns (uint) {\n', '        return contestStartTime + 3 hours;\n', '    }\n', '    \n', '    function getNextPayoutEstimation() public constant returns (uint) {\n', '        if(contestEndTime() > now){\n', '            return contestEndTime() - now;\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '    \n', '    function recordHighScore(uint score, address userToScore)  public onlyOwner {\n', '        if(paidUsers[userToScore]){\n', '            if(score > 0 && score >= currentHighScore){\n', '                highScoreUser = userToScore;\n', '                currentHighScore = score;\n', '            }\n', '        }\n', '    }\n', '    \n', '    function awardHighScore() internal {\n', '        address(highScoreUser).transfer(address(this).balance);\n', '        contestStartTime = now;\n', '        currentHighScore = 0;\n', '        highScoreUser = 0;\n', '    }\n', '}']
