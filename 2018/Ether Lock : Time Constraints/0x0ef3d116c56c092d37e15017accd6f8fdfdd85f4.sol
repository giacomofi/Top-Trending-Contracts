['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title owned\n', ' * @dev The owned contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken.\n', ' */\n', 'contract BasicToken {\n', '    using SafeMath for uint256;\n', '    \n', '    uint256       _supply;\n', '    mapping (address => uint256)    _balances;\n', '    \n', '    event Transfer( address indexed from, address indexed to, uint256 value);\n', '\n', '    function BasicToken() public {    }\n', '    \n', '    function totalSupply() public view returns (uint256) {\n', '        return _supply;\n', '    }\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return _balances[_owner];\n', '    }\n', '    \n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_balances[msg.sender] >= _value);\n', '        \n', '        _balances[msg.sender] =_balances[msg.sender].sub(_value);\n', '        _balances[_to] =_balances[_to].add(_value);\n', '        \n', '        emit Transfer(msg.sender, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '  \n', '}\n', '\n', 'contract DBToken is BasicToken,owned {\n', '    string  constant public symbol = "DB";\n', '    string  constant public name = "Digital Block";\n', '    uint256 constant public decimals =6; \n', '    uint256 public lockedCounts = 8*(10**8)*(10**6);\n', '    uint256 public eachUnlockCounts = 2*(10**8)*(10**6);\n', '    //crowdSale end time, May/10/2018\n', '    uint256 public startTime = 1525881600;\n', '\n', '    struct LockStruct {\n', '        uint256 unlockTime;\n', '        bool locked;\n', '    }\n', '\n', '    LockStruct[] public unlockTimeMap;\n', '\n', '    function DBToken() public {\n', '        _supply =50*(10**8)*(10**6);\n', '        _balances[0x01] = lockedCounts;\n', '         _balances[msg.sender] =_supply.sub(lockedCounts);\n', '\n', '        // November/10/2018\n', '        unlockTimeMap.push(LockStruct({unlockTime:1541779200, locked: true})); \n', '        // May/10/2019\n', '        unlockTimeMap.push(LockStruct({unlockTime:1557417600, locked: true})); \n', '        // November/10/2019\n', '        unlockTimeMap.push(LockStruct({unlockTime:1573315200, locked: true})); \n', '        // May/10/2020\n', '        unlockTimeMap.push(LockStruct({unlockTime:1589040000, locked: true})); \n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require (now >= startTime);\n', '\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function distribute(address _to, uint256 _value) onlyOwner public returns (bool) {\n', '\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev unlock , only can be called by owner.\n', '     */\n', '    function unlock(uint256 _index) onlyOwner public {\n', '        require(_index>=0 && _index<unlockTimeMap.length);\n', '        require(now >= unlockTimeMap[_index].unlockTime && unlockTimeMap[_index].locked);\n', '        require(_balances[0x01] >= eachUnlockCounts);\n', '\n', '        _balances[0x01] =_balances[0x01].sub(eachUnlockCounts);\n', '        _balances[owner] =_balances[owner].add(eachUnlockCounts);\n', '\n', '        lockedCounts =lockedCounts.sub(eachUnlockCounts);\n', '        unlockTimeMap[_index].locked = false;\n', '\n', '        emit Transfer(0x01, owner, eachUnlockCounts);\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title owned\n', ' * @dev The owned contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken.\n', ' */\n', 'contract BasicToken {\n', '    using SafeMath for uint256;\n', '    \n', '    uint256       _supply;\n', '    mapping (address => uint256)    _balances;\n', '    \n', '    event Transfer( address indexed from, address indexed to, uint256 value);\n', '\n', '    function BasicToken() public {    }\n', '    \n', '    function totalSupply() public view returns (uint256) {\n', '        return _supply;\n', '    }\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return _balances[_owner];\n', '    }\n', '    \n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_balances[msg.sender] >= _value);\n', '        \n', '        _balances[msg.sender] =_balances[msg.sender].sub(_value);\n', '        _balances[_to] =_balances[_to].add(_value);\n', '        \n', '        emit Transfer(msg.sender, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '  \n', '}\n', '\n', 'contract DBToken is BasicToken,owned {\n', '    string  constant public symbol = "DB";\n', '    string  constant public name = "Digital Block";\n', '    uint256 constant public decimals =6; \n', '    uint256 public lockedCounts = 8*(10**8)*(10**6);\n', '    uint256 public eachUnlockCounts = 2*(10**8)*(10**6);\n', '    //crowdSale end time, May/10/2018\n', '    uint256 public startTime = 1525881600;\n', '\n', '    struct LockStruct {\n', '        uint256 unlockTime;\n', '        bool locked;\n', '    }\n', '\n', '    LockStruct[] public unlockTimeMap;\n', '\n', '    function DBToken() public {\n', '        _supply =50*(10**8)*(10**6);\n', '        _balances[0x01] = lockedCounts;\n', '         _balances[msg.sender] =_supply.sub(lockedCounts);\n', '\n', '        // November/10/2018\n', '        unlockTimeMap.push(LockStruct({unlockTime:1541779200, locked: true})); \n', '        // May/10/2019\n', '        unlockTimeMap.push(LockStruct({unlockTime:1557417600, locked: true})); \n', '        // November/10/2019\n', '        unlockTimeMap.push(LockStruct({unlockTime:1573315200, locked: true})); \n', '        // May/10/2020\n', '        unlockTimeMap.push(LockStruct({unlockTime:1589040000, locked: true})); \n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require (now >= startTime);\n', '\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function distribute(address _to, uint256 _value) onlyOwner public returns (bool) {\n', '\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev unlock , only can be called by owner.\n', '     */\n', '    function unlock(uint256 _index) onlyOwner public {\n', '        require(_index>=0 && _index<unlockTimeMap.length);\n', '        require(now >= unlockTimeMap[_index].unlockTime && unlockTimeMap[_index].locked);\n', '        require(_balances[0x01] >= eachUnlockCounts);\n', '\n', '        _balances[0x01] =_balances[0x01].sub(eachUnlockCounts);\n', '        _balances[owner] =_balances[owner].add(eachUnlockCounts);\n', '\n', '        lockedCounts =lockedCounts.sub(eachUnlockCounts);\n', '        unlockTimeMap[_index].locked = false;\n', '\n', '        emit Transfer(0x01, owner, eachUnlockCounts);\n', '    }\n', '}']
