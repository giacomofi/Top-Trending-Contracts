['pragma solidity ^0.4.24;\n', '\n', '// File: contracts/interface/DiviesInterface.sol\n', '\n', 'interface DiviesInterface {\n', '    function deposit() external payable;\n', '}\n', '\n', '// File: contracts/library/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath v0.1.9\n', ' * @dev Math operations with safety checks that throw on error\n', ' * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\n', ' * - added sqrt\n', ' * - added sq\n', ' * - added pwr \n', ' * - changed asserts to requires with error log outputs\n', ' * - removed div, its useless\n', ' */\n', 'library SafeMath {\n', '    \n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) \n', '        internal \n', '        pure \n', '        returns (uint256 c) \n', '    {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        require(c / a == b, "SafeMath mul failed");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '    \n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256) \n', '    {\n', '        require(b <= a, "SafeMath sub failed");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256 c) \n', '    {\n', '        c = a + b;\n', '        require(c >= a, "SafeMath add failed");\n', '        return c;\n', '    }\n', '    \n', '    /**\n', '     * @dev gives square root of given x.\n', '     */\n', '    function sqrt(uint256 x)\n', '        internal\n', '        pure\n', '        returns (uint256 y) \n', '    {\n', '        uint256 z = ((add(x,1)) / 2);\n', '        y = x;\n', '        while (z < y) \n', '        {\n', '            y = z;\n', '            z = ((add((x / z),z)) / 2);\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @dev gives square. multiplies x by x\n', '     */\n', '    function sq(uint256 x)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return (mul(x,x));\n', '    }\n', '    \n', '    /**\n', '     * @dev x to the power of y \n', '     */\n', '    function pwr(uint256 x, uint256 y)\n', '        internal \n', '        pure \n', '        returns (uint256)\n', '    {\n', '        if (x==0)\n', '            return (0);\n', '        else if (y==0)\n', '            return (1);\n', '        else \n', '        {\n', '            uint256 z = x;\n', '            for (uint256 i=1; i < y; i++)\n', '                z = mul(z,x);\n', '            return (z);\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/library/UintCompressor.sol\n', '\n', 'library UintCompressor {\n', '    using SafeMath for *;\n', '    \n', '    function insert(uint256 _var, uint256 _include, uint256 _start, uint256 _end)\n', '        internal\n', '        pure\n', '        returns(uint256)\n', '    {\n', '        // check conditions \n', '        require(_end < 77 && _start < 77, "start/end must be less than 77");\n', '        require(_end >= _start, "end must be >= start");\n', '        \n', '        // format our start/end points\n', '        _end = exponent(_end).mul(10);\n', '        _start = exponent(_start);\n', '        \n', '        // check that the include data fits into its segment \n', '        require(_include < (_end / _start));\n', '        \n', '        // build middle\n', '        if (_include > 0)\n', '            _include = _include.mul(_start);\n', '        \n', '        return((_var.sub((_var / _start).mul(_start))).add(_include).add((_var / _end).mul(_end)));\n', '    }\n', '    \n', '    function extract(uint256 _input, uint256 _start, uint256 _end)\n', '\t    internal\n', '\t    pure\n', '\t    returns(uint256)\n', '    {\n', '        // check conditions\n', '        require(_end < 77 && _start < 77, "start/end must be less than 77");\n', '        require(_end >= _start, "end must be >= start");\n', '        \n', '        // format our start/end points\n', '        _end = exponent(_end).mul(10);\n', '        _start = exponent(_start);\n', '        \n', '        // return requested section\n', '        return((((_input / _start).mul(_start)).sub((_input / _end).mul(_end))) / _start);\n', '    }\n', '    \n', '    function exponent(uint256 _position)\n', '        private\n', '        pure\n', '        returns(uint256)\n', '    {\n', '        return((10).pwr(_position));\n', '    }\n', '}\n', '\n', '// File: contracts/interface/HourglassInterface.sol\n', '\n', 'interface HourglassInterface {\n', '    function() payable external;\n', '    function buy(address _playerAddress) payable external returns(uint256);\n', '    function sell(uint256 _amountOfTokens) external;\n', '    function reinvest() external;\n', '    function withdraw() external;\n', '    function exit() external;\n', '    function dividendsOf(address _playerAddress) external view returns(uint256);\n', '    function balanceOf(address _playerAddress) external view returns(uint256);\n', '    function transfer(address _toAddress, uint256 _amountOfTokens) external returns(bool);\n', '    function stakingRequirement() external view returns(uint256);\n', '}\n', '\n', '// File: contracts/DiviesLong.sol\n', '\n', '/**\n', ' *         ┌──────────────────────────────────────────────────────────────────────┐\n', ' *         │ Divies!, is a contract that adds an external dividend system to P3D. │\n', ' *         │ All eth sent to this contract, can be distributed to P3D holders.    │\n', ' *         │ Uses msg.sender as masternode for initial buy order.                 │\n', ' *         └──────────────────────────────────────────────────────────────────────┘\n', ' *                                ┌────────────────────┐\n', ' *                                │ Setup Instructions │\n', ' *                                └────────────────────┘\n', ' * (Step 1) import this contracts interface into your contract\n', ' * \n', ' *    import "./DiviesInterface.sol";\n', ' * \n', ' * (Step 2) set up the interface and point it to this contract\n', ' * \n', ' *    DiviesInterface private Divies = DiviesInterface(0xc7029Ed9EBa97A096e72607f4340c34049C7AF48);\n', ' *                                ┌────────────────────┐\n', ' *                                │ Usage Instructions │\n', ' *                                └────────────────────┘\n', ' * call as follows anywhere in your code:\n', ' *   \n', ' *    Divies.deposit.value(amount)();\n', ' *          ex:  Divies.deposit.value(232000000000000000000)();\n', ' */\n', '\n', '\n', '\n', '\n', '\n', 'contract DiviesLong {\n', '    using SafeMath for uint256;\n', '    using UintCompressor for uint256;\n', '\n', '    //TODO:\n', '    HourglassInterface constant P3Dcontract_ = HourglassInterface(0x97550CE17666bB49349EF0E50f9fDb88353EDb64);\n', '    \n', '    uint256 public pusherTracker_ = 100;\n', '    mapping (address => Pusher) public pushers_;\n', '    struct Pusher\n', '    {\n', '        uint256 tracker;\n', '        uint256 time;\n', '    }\n', '    uint256 public rateLimiter_;\n', '    \n', '    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', '    // MODIFIERS\n', '    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', '    modifier isHuman() {\n', '        address _addr = msg.sender;\n', '        require (_addr == tx.origin);\n', '        uint256 _codeLength;\n', '        \n', '        assembly {_codeLength := extcodesize(_addr)}\n', '        require(_codeLength == 0, "sorry humans only");\n', '        _;\n', '    }\n', '    \n', '    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', '    // BALANCE\n', '    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', '    function balances()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return (address(this).balance);\n', '    }\n', '    \n', '    \n', '    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', '    // DEPOSIT\n', '    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', '    function deposit()\n', '        external\n', '        payable\n', '    {\n', '        \n', '    }\n', '    \n', '    // used so the distribute function can call hourglass&#39;s withdraw\n', '    function() external payable {\n', '        // don&#39;t send it\n', '        revert();\n', '    }\n', '    \n', '    \n', '    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', '    // EVENTS\n', '    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', '    event onDistribute(\n', '        address pusher,\n', '        uint256 startingBalance,\n', '        uint256 masternodePayout,\n', '        uint256 finalBalance,\n', '        uint256 compressedData\n', '    );\n', '    /* compression key\n', '    [0-14] - timestamp\n', '    [15-29] - caller pusher tracker \n', '    [30-44] - global pusher tracker \n', '    [45-46] - percent\n', '    [47] - greedy\n', '    */  \n', '    \n', '    \n', '    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', '    // DISTRIBUTE\n', '    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', '    function distribute(uint256 _percent)\n', '        public\n', '        isHuman()\n', '    {\n', '        // make sure _percent is within boundaries\n', '        require(_percent > 0 && _percent < 100, "please pick a percent between 1 and 99");\n', '        \n', '        // data setup\n', '        address _pusher = msg.sender;\n', '        uint256 _bal = address(this).balance;\n', '        uint256 _mnPayout;\n', '        uint256 _compressedData;\n', '        \n', '        // limit pushers greed (use "if" instead of require for level 42 top kek)\n', '        if (\n', '            pushers_[_pusher].tracker <= pusherTracker_.sub(100) && // pusher is greedy: wait your turn\n', '            pushers_[_pusher].time.add(1 hours) < now               // pusher is greedy: its not even been 1 hour\n', '        )\n', '        {\n', '            // update pushers wait que \n', '            pushers_[_pusher].tracker = pusherTracker_;\n', '            pusherTracker_++;\n', '            \n', '            // setup mn payout for event\n', '            if (P3Dcontract_.balanceOf(_pusher) >= P3Dcontract_.stakingRequirement())\n', '                _mnPayout = (_bal / 10) / 3;\n', '            \n', '            // setup _stop.  this will be used to tell the loop to stop\n', '            uint256 _stop = (_bal.mul(100 - _percent)) / 100;\n', '            \n', '            // buy & sell    \n', '            P3Dcontract_.buy.value(_bal)(_pusher);\n', '            P3Dcontract_.sell(P3Dcontract_.balanceOf(address(this)));\n', '            \n', '            // setup tracker.  this will be used to tell the loop to stop\n', '            uint256 _tracker = P3Dcontract_.dividendsOf(address(this));\n', '    \n', '            // reinvest/sell loop\n', '            while (_tracker >= _stop) \n', '            {\n', '                // lets burn some tokens to distribute dividends to p3d holders\n', '                P3Dcontract_.reinvest();\n', '                P3Dcontract_.sell(P3Dcontract_.balanceOf(address(this)));\n', '                \n', '                // update our tracker with estimates (yea. not perfect, but cheaper on gas)\n', '                _tracker = (_tracker.mul(81)) / 100;\n', '            }\n', '            \n', '            // withdraw\n', '            P3Dcontract_.withdraw();\n', '        } else {\n', '            _compressedData = _compressedData.insert(1, 47, 47);\n', '        }\n', '        \n', '        // update pushers timestamp  (do outside of "if" for super saiyan level top kek)\n', '        pushers_[_pusher].time = now;\n', '    \n', '        // prep event compression data \n', '        _compressedData = _compressedData.insert(now, 0, 14);\n', '        _compressedData = _compressedData.insert(pushers_[_pusher].tracker, 15, 29);\n', '        _compressedData = _compressedData.insert(pusherTracker_, 30, 44);\n', '        _compressedData = _compressedData.insert(_percent, 45, 46);\n', '            \n', '        // fire event\n', '        emit onDistribute(_pusher, _bal, _mnPayout, address(this).balance, _compressedData);\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '// File: contracts/interface/DiviesInterface.sol\n', '\n', 'interface DiviesInterface {\n', '    function deposit() external payable;\n', '}\n', '\n', '// File: contracts/library/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath v0.1.9\n', ' * @dev Math operations with safety checks that throw on error\n', ' * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\n', ' * - added sqrt\n', ' * - added sq\n', ' * - added pwr \n', ' * - changed asserts to requires with error log outputs\n', ' * - removed div, its useless\n', ' */\n', 'library SafeMath {\n', '    \n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) \n', '        internal \n', '        pure \n', '        returns (uint256 c) \n', '    {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        require(c / a == b, "SafeMath mul failed");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '    \n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256) \n', '    {\n', '        require(b <= a, "SafeMath sub failed");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256 c) \n', '    {\n', '        c = a + b;\n', '        require(c >= a, "SafeMath add failed");\n', '        return c;\n', '    }\n', '    \n', '    /**\n', '     * @dev gives square root of given x.\n', '     */\n', '    function sqrt(uint256 x)\n', '        internal\n', '        pure\n', '        returns (uint256 y) \n', '    {\n', '        uint256 z = ((add(x,1)) / 2);\n', '        y = x;\n', '        while (z < y) \n', '        {\n', '            y = z;\n', '            z = ((add((x / z),z)) / 2);\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @dev gives square. multiplies x by x\n', '     */\n', '    function sq(uint256 x)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return (mul(x,x));\n', '    }\n', '    \n', '    /**\n', '     * @dev x to the power of y \n', '     */\n', '    function pwr(uint256 x, uint256 y)\n', '        internal \n', '        pure \n', '        returns (uint256)\n', '    {\n', '        if (x==0)\n', '            return (0);\n', '        else if (y==0)\n', '            return (1);\n', '        else \n', '        {\n', '            uint256 z = x;\n', '            for (uint256 i=1; i < y; i++)\n', '                z = mul(z,x);\n', '            return (z);\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/library/UintCompressor.sol\n', '\n', 'library UintCompressor {\n', '    using SafeMath for *;\n', '    \n', '    function insert(uint256 _var, uint256 _include, uint256 _start, uint256 _end)\n', '        internal\n', '        pure\n', '        returns(uint256)\n', '    {\n', '        // check conditions \n', '        require(_end < 77 && _start < 77, "start/end must be less than 77");\n', '        require(_end >= _start, "end must be >= start");\n', '        \n', '        // format our start/end points\n', '        _end = exponent(_end).mul(10);\n', '        _start = exponent(_start);\n', '        \n', '        // check that the include data fits into its segment \n', '        require(_include < (_end / _start));\n', '        \n', '        // build middle\n', '        if (_include > 0)\n', '            _include = _include.mul(_start);\n', '        \n', '        return((_var.sub((_var / _start).mul(_start))).add(_include).add((_var / _end).mul(_end)));\n', '    }\n', '    \n', '    function extract(uint256 _input, uint256 _start, uint256 _end)\n', '\t    internal\n', '\t    pure\n', '\t    returns(uint256)\n', '    {\n', '        // check conditions\n', '        require(_end < 77 && _start < 77, "start/end must be less than 77");\n', '        require(_end >= _start, "end must be >= start");\n', '        \n', '        // format our start/end points\n', '        _end = exponent(_end).mul(10);\n', '        _start = exponent(_start);\n', '        \n', '        // return requested section\n', '        return((((_input / _start).mul(_start)).sub((_input / _end).mul(_end))) / _start);\n', '    }\n', '    \n', '    function exponent(uint256 _position)\n', '        private\n', '        pure\n', '        returns(uint256)\n', '    {\n', '        return((10).pwr(_position));\n', '    }\n', '}\n', '\n', '// File: contracts/interface/HourglassInterface.sol\n', '\n', 'interface HourglassInterface {\n', '    function() payable external;\n', '    function buy(address _playerAddress) payable external returns(uint256);\n', '    function sell(uint256 _amountOfTokens) external;\n', '    function reinvest() external;\n', '    function withdraw() external;\n', '    function exit() external;\n', '    function dividendsOf(address _playerAddress) external view returns(uint256);\n', '    function balanceOf(address _playerAddress) external view returns(uint256);\n', '    function transfer(address _toAddress, uint256 _amountOfTokens) external returns(bool);\n', '    function stakingRequirement() external view returns(uint256);\n', '}\n', '\n', '// File: contracts/DiviesLong.sol\n', '\n', '/**\n', ' *         ┌──────────────────────────────────────────────────────────────────────┐\n', ' *         │ Divies!, is a contract that adds an external dividend system to P3D. │\n', ' *         │ All eth sent to this contract, can be distributed to P3D holders.    │\n', ' *         │ Uses msg.sender as masternode for initial buy order.                 │\n', ' *         └──────────────────────────────────────────────────────────────────────┘\n', ' *                                ┌────────────────────┐\n', ' *                                │ Setup Instructions │\n', ' *                                └────────────────────┘\n', ' * (Step 1) import this contracts interface into your contract\n', ' * \n', ' *    import "./DiviesInterface.sol";\n', ' * \n', ' * (Step 2) set up the interface and point it to this contract\n', ' * \n', ' *    DiviesInterface private Divies = DiviesInterface(0xc7029Ed9EBa97A096e72607f4340c34049C7AF48);\n', ' *                                ┌────────────────────┐\n', ' *                                │ Usage Instructions │\n', ' *                                └────────────────────┘\n', ' * call as follows anywhere in your code:\n', ' *   \n', ' *    Divies.deposit.value(amount)();\n', ' *          ex:  Divies.deposit.value(232000000000000000000)();\n', ' */\n', '\n', '\n', '\n', '\n', '\n', 'contract DiviesLong {\n', '    using SafeMath for uint256;\n', '    using UintCompressor for uint256;\n', '\n', '    //TODO:\n', '    HourglassInterface constant P3Dcontract_ = HourglassInterface(0x97550CE17666bB49349EF0E50f9fDb88353EDb64);\n', '    \n', '    uint256 public pusherTracker_ = 100;\n', '    mapping (address => Pusher) public pushers_;\n', '    struct Pusher\n', '    {\n', '        uint256 tracker;\n', '        uint256 time;\n', '    }\n', '    uint256 public rateLimiter_;\n', '    \n', '    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', '    // MODIFIERS\n', '    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', '    modifier isHuman() {\n', '        address _addr = msg.sender;\n', '        require (_addr == tx.origin);\n', '        uint256 _codeLength;\n', '        \n', '        assembly {_codeLength := extcodesize(_addr)}\n', '        require(_codeLength == 0, "sorry humans only");\n', '        _;\n', '    }\n', '    \n', '    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', '    // BALANCE\n', '    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', '    function balances()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return (address(this).balance);\n', '    }\n', '    \n', '    \n', '    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', '    // DEPOSIT\n', '    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', '    function deposit()\n', '        external\n', '        payable\n', '    {\n', '        \n', '    }\n', '    \n', "    // used so the distribute function can call hourglass's withdraw\n", '    function() external payable {\n', "        // don't send it\n", '        revert();\n', '    }\n', '    \n', '    \n', '    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', '    // EVENTS\n', '    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', '    event onDistribute(\n', '        address pusher,\n', '        uint256 startingBalance,\n', '        uint256 masternodePayout,\n', '        uint256 finalBalance,\n', '        uint256 compressedData\n', '    );\n', '    /* compression key\n', '    [0-14] - timestamp\n', '    [15-29] - caller pusher tracker \n', '    [30-44] - global pusher tracker \n', '    [45-46] - percent\n', '    [47] - greedy\n', '    */  \n', '    \n', '    \n', '    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', '    // DISTRIBUTE\n', '    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', '    function distribute(uint256 _percent)\n', '        public\n', '        isHuman()\n', '    {\n', '        // make sure _percent is within boundaries\n', '        require(_percent > 0 && _percent < 100, "please pick a percent between 1 and 99");\n', '        \n', '        // data setup\n', '        address _pusher = msg.sender;\n', '        uint256 _bal = address(this).balance;\n', '        uint256 _mnPayout;\n', '        uint256 _compressedData;\n', '        \n', '        // limit pushers greed (use "if" instead of require for level 42 top kek)\n', '        if (\n', '            pushers_[_pusher].tracker <= pusherTracker_.sub(100) && // pusher is greedy: wait your turn\n', '            pushers_[_pusher].time.add(1 hours) < now               // pusher is greedy: its not even been 1 hour\n', '        )\n', '        {\n', '            // update pushers wait que \n', '            pushers_[_pusher].tracker = pusherTracker_;\n', '            pusherTracker_++;\n', '            \n', '            // setup mn payout for event\n', '            if (P3Dcontract_.balanceOf(_pusher) >= P3Dcontract_.stakingRequirement())\n', '                _mnPayout = (_bal / 10) / 3;\n', '            \n', '            // setup _stop.  this will be used to tell the loop to stop\n', '            uint256 _stop = (_bal.mul(100 - _percent)) / 100;\n', '            \n', '            // buy & sell    \n', '            P3Dcontract_.buy.value(_bal)(_pusher);\n', '            P3Dcontract_.sell(P3Dcontract_.balanceOf(address(this)));\n', '            \n', '            // setup tracker.  this will be used to tell the loop to stop\n', '            uint256 _tracker = P3Dcontract_.dividendsOf(address(this));\n', '    \n', '            // reinvest/sell loop\n', '            while (_tracker >= _stop) \n', '            {\n', '                // lets burn some tokens to distribute dividends to p3d holders\n', '                P3Dcontract_.reinvest();\n', '                P3Dcontract_.sell(P3Dcontract_.balanceOf(address(this)));\n', '                \n', '                // update our tracker with estimates (yea. not perfect, but cheaper on gas)\n', '                _tracker = (_tracker.mul(81)) / 100;\n', '            }\n', '            \n', '            // withdraw\n', '            P3Dcontract_.withdraw();\n', '        } else {\n', '            _compressedData = _compressedData.insert(1, 47, 47);\n', '        }\n', '        \n', '        // update pushers timestamp  (do outside of "if" for super saiyan level top kek)\n', '        pushers_[_pusher].time = now;\n', '    \n', '        // prep event compression data \n', '        _compressedData = _compressedData.insert(now, 0, 14);\n', '        _compressedData = _compressedData.insert(pushers_[_pusher].tracker, 15, 29);\n', '        _compressedData = _compressedData.insert(pusherTracker_, 30, 44);\n', '        _compressedData = _compressedData.insert(_percent, 45, 46);\n', '            \n', '        // fire event\n', '        emit onDistribute(_pusher, _bal, _mnPayout, address(this).balance, _compressedData);\n', '    }\n', '}']
