['pragma solidity ^0.4.18;\n', '\n', 'interface token {\n', '    function transferFrom(address _from, address _to, uint256 _value) public;\n', '}\n', '\n', 'contract RetailSale {\n', '    address public beneficiary;\n', '    uint public actualPrice;\n', '    uint public nextPrice;\n', '    uint public nextPriceDate = 0;\n', '    uint public periodStart;\n', '    uint public periodEnd;\n', '    uint public bonus = 0;\n', '    uint public bonusStart = 0;\n', '    uint public bonusEnd = 0;\n', '    uint public milestone = 0;\n', '    uint public milestoneBonus = 0;\n', '    bool public milestoneReached = true;\n', '    uint public minPurchase;\n', '    token public tokenReward;\n', '\n', '    event FundTransfer(address backer, uint amount, uint bonus, uint tokens);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Setup the owner\n', '     */\n', '    function RetailSale(\n', '        address _beneficiary,\n', '        address addressOfTokenUsedAsReward,\n', '        uint ethPriceInWei,\n', '        uint _minPurchase,\n', '        uint start,\n', '        uint end\n', '    ) public {\n', '        beneficiary = _beneficiary;\n', '        tokenReward = token(addressOfTokenUsedAsReward);\n', '        actualPrice = ethPriceInWei;\n', '        nextPrice = ethPriceInWei;\n', '        minPurchase = _minPurchase;\n', '        periodStart = start;\n', '        periodEnd = end;\n', '    }\n', '\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function()\n', '    payable\n', '    isOpen\n', '    aboveMinValue\n', '    public {\n', '        uint price = actualPrice;\n', '        if (now >= nextPriceDate) {\n', '            price = nextPrice;\n', '        }\n', '        uint vp = (msg.value * 1 ether) / price;\n', '        uint b = 0;\n', '        uint tokens = 0;\n', '        if (now >= bonusStart && now <= bonusEnd) {\n', '            b = bonus;\n', '        }\n', '        if (this.balance >= milestone && !milestoneReached) {\n', '            b = milestoneBonus;\n', '            milestoneReached = true;\n', '        }\n', '        if (b == 0) {\n', '            tokens = vp;\n', '        } else {\n', '            tokens = (vp + ((vp * b) / 100));\n', '        }\n', '        tokenReward.transferFrom(beneficiary, msg.sender, tokens);\n', '        FundTransfer(msg.sender, msg.value, b, tokens);\n', '    }\n', '\n', '    modifier aboveMinValue() {\n', '        require(msg.value >= minPurchase);\n', '        _;\n', '    }\n', '\n', '    modifier isOwner() {\n', '        require(msg.sender == beneficiary);\n', '        _;\n', '    }\n', '\n', '    modifier isClosed() {\n', '        require(!(now >= periodStart && now <= periodEnd));\n', '        _;\n', '    }\n', '\n', '    modifier isOpen() {\n', '        require(now >= periodStart && now <= periodEnd);\n', '        _;\n', '    }\n', '\n', '    modifier validPeriod(uint start, uint end){\n', '        require(start < end);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Set next start date\n', '     * @param _start the next start date in seconds.\n', '     * @param _start the next end date in seconds.\n', '     */\n', '    function setNextPeriod(uint _start, uint _end)\n', '    isOwner\n', '    validPeriod(_start, _end)\n', '    public {\n', '        periodStart = _start;\n', '        periodEnd = _end;\n', '    }\n', '\n', '    /**\n', '     * Set the new min purchase value\n', '     * @param _minPurchase the new minpurchase value in wei.\n', '     */\n', '    function setMinPurchase(uint _minPurchase)\n', '    isOwner\n', '    public {\n', '        minPurchase = _minPurchase;\n', '    }\n', '\n', '    /**\n', '     * Change the bonus percentage\n', '     * @param _bonus the new bonus percentage.\n', '     * @param _bonusStart When the bonus starts in seconds.\n', '     * @param _bonusEnd When the bonus ends in seconds.\n', '     */\n', '    function changeBonus(uint _bonus, uint _bonusStart, uint _bonusEnd)\n', '    isOwner\n', '    public {\n', '        bonus = _bonus;\n', '        bonusStart = _bonusStart;\n', '        bonusEnd = _bonusEnd;\n', '    }\n', '\n', '    /**\n', '     * Change the next milestone\n', '     * @param _milestone The next milestone amount in wei\n', '     * @param _milestoneBonus The bonus of the next milestone\n', '     */\n', '    function setNextMilestone(uint _milestone, uint _milestoneBonus)\n', '    isOwner\n', '    public {\n', '        milestone = _milestone;\n', '        milestoneBonus = _milestoneBonus;\n', '        milestoneReached = false;\n', '    }\n', '\n', '    /**\n', '     * Set the next price\n', '     * @param _price The next eth price in wei\n', '     * @param _priceDate The date in second when the next price start\n', '     */\n', '    function setNextPrice(uint _price, uint _priceDate)\n', '    isOwner\n', '    public {\n', '        actualPrice = nextPrice;\n', '        nextPrice = _price;\n', '        nextPriceDate = _priceDate;\n', '    }\n', '\n', '\n', '    /**\n', '     * Withdraw the funds\n', '     *\n', '     * Checks to see if goal or time limit has been reached, and if so, and the funding goal was reached,\n', '     * sends the entire amount to the beneficiary. If goal was not reached, each contributor can withdraw\n', '     * the amount they contributed.\n', '     */\n', '    function safeWithdrawal()\n', '    isClosed\n', '    isOwner\n', '    public {\n', '\n', '        beneficiary.transfer(this.balance);\n', '\n', '    }\n', '\n', '    function open() view public returns (bool) {\n', '        return (now >= periodStart && now <= periodEnd);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'interface token {\n', '    function transferFrom(address _from, address _to, uint256 _value) public;\n', '}\n', '\n', 'contract RetailSale {\n', '    address public beneficiary;\n', '    uint public actualPrice;\n', '    uint public nextPrice;\n', '    uint public nextPriceDate = 0;\n', '    uint public periodStart;\n', '    uint public periodEnd;\n', '    uint public bonus = 0;\n', '    uint public bonusStart = 0;\n', '    uint public bonusEnd = 0;\n', '    uint public milestone = 0;\n', '    uint public milestoneBonus = 0;\n', '    bool public milestoneReached = true;\n', '    uint public minPurchase;\n', '    token public tokenReward;\n', '\n', '    event FundTransfer(address backer, uint amount, uint bonus, uint tokens);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Setup the owner\n', '     */\n', '    function RetailSale(\n', '        address _beneficiary,\n', '        address addressOfTokenUsedAsReward,\n', '        uint ethPriceInWei,\n', '        uint _minPurchase,\n', '        uint start,\n', '        uint end\n', '    ) public {\n', '        beneficiary = _beneficiary;\n', '        tokenReward = token(addressOfTokenUsedAsReward);\n', '        actualPrice = ethPriceInWei;\n', '        nextPrice = ethPriceInWei;\n', '        minPurchase = _minPurchase;\n', '        periodStart = start;\n', '        periodEnd = end;\n', '    }\n', '\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function()\n', '    payable\n', '    isOpen\n', '    aboveMinValue\n', '    public {\n', '        uint price = actualPrice;\n', '        if (now >= nextPriceDate) {\n', '            price = nextPrice;\n', '        }\n', '        uint vp = (msg.value * 1 ether) / price;\n', '        uint b = 0;\n', '        uint tokens = 0;\n', '        if (now >= bonusStart && now <= bonusEnd) {\n', '            b = bonus;\n', '        }\n', '        if (this.balance >= milestone && !milestoneReached) {\n', '            b = milestoneBonus;\n', '            milestoneReached = true;\n', '        }\n', '        if (b == 0) {\n', '            tokens = vp;\n', '        } else {\n', '            tokens = (vp + ((vp * b) / 100));\n', '        }\n', '        tokenReward.transferFrom(beneficiary, msg.sender, tokens);\n', '        FundTransfer(msg.sender, msg.value, b, tokens);\n', '    }\n', '\n', '    modifier aboveMinValue() {\n', '        require(msg.value >= minPurchase);\n', '        _;\n', '    }\n', '\n', '    modifier isOwner() {\n', '        require(msg.sender == beneficiary);\n', '        _;\n', '    }\n', '\n', '    modifier isClosed() {\n', '        require(!(now >= periodStart && now <= periodEnd));\n', '        _;\n', '    }\n', '\n', '    modifier isOpen() {\n', '        require(now >= periodStart && now <= periodEnd);\n', '        _;\n', '    }\n', '\n', '    modifier validPeriod(uint start, uint end){\n', '        require(start < end);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Set next start date\n', '     * @param _start the next start date in seconds.\n', '     * @param _start the next end date in seconds.\n', '     */\n', '    function setNextPeriod(uint _start, uint _end)\n', '    isOwner\n', '    validPeriod(_start, _end)\n', '    public {\n', '        periodStart = _start;\n', '        periodEnd = _end;\n', '    }\n', '\n', '    /**\n', '     * Set the new min purchase value\n', '     * @param _minPurchase the new minpurchase value in wei.\n', '     */\n', '    function setMinPurchase(uint _minPurchase)\n', '    isOwner\n', '    public {\n', '        minPurchase = _minPurchase;\n', '    }\n', '\n', '    /**\n', '     * Change the bonus percentage\n', '     * @param _bonus the new bonus percentage.\n', '     * @param _bonusStart When the bonus starts in seconds.\n', '     * @param _bonusEnd When the bonus ends in seconds.\n', '     */\n', '    function changeBonus(uint _bonus, uint _bonusStart, uint _bonusEnd)\n', '    isOwner\n', '    public {\n', '        bonus = _bonus;\n', '        bonusStart = _bonusStart;\n', '        bonusEnd = _bonusEnd;\n', '    }\n', '\n', '    /**\n', '     * Change the next milestone\n', '     * @param _milestone The next milestone amount in wei\n', '     * @param _milestoneBonus The bonus of the next milestone\n', '     */\n', '    function setNextMilestone(uint _milestone, uint _milestoneBonus)\n', '    isOwner\n', '    public {\n', '        milestone = _milestone;\n', '        milestoneBonus = _milestoneBonus;\n', '        milestoneReached = false;\n', '    }\n', '\n', '    /**\n', '     * Set the next price\n', '     * @param _price The next eth price in wei\n', '     * @param _priceDate The date in second when the next price start\n', '     */\n', '    function setNextPrice(uint _price, uint _priceDate)\n', '    isOwner\n', '    public {\n', '        actualPrice = nextPrice;\n', '        nextPrice = _price;\n', '        nextPriceDate = _priceDate;\n', '    }\n', '\n', '\n', '    /**\n', '     * Withdraw the funds\n', '     *\n', '     * Checks to see if goal or time limit has been reached, and if so, and the funding goal was reached,\n', '     * sends the entire amount to the beneficiary. If goal was not reached, each contributor can withdraw\n', '     * the amount they contributed.\n', '     */\n', '    function safeWithdrawal()\n', '    isClosed\n', '    isOwner\n', '    public {\n', '\n', '        beneficiary.transfer(this.balance);\n', '\n', '    }\n', '\n', '    function open() view public returns (bool) {\n', '        return (now >= periodStart && now <= periodEnd);\n', '    }\n', '\n', '}']
