['pragma solidity ^0.4.18; // solhint-disable-line\n', '\n', '\n', '\n', 'contract TicTacPotato{\n', '\n', '    /***EVENTS***/\n', '    event StalematePayout(address adr, uint256 amount);\n', '\n', '    address public ceoAddress;\n', '    uint256 public lastBidTime;\n', '    uint256 public contestStartTime;\n', '    uint256 public lastPot;\n', '    \n', '    //mapping (address => uint256) public numTilesOwnedByAddress;\n', '    mapping (uint256 => address) public indexToAddress;\n', '    mapping (address => uint256) public cantBidUntil;\n', '    Tile[] public tiles;\n', '    \n', '    uint256 public TIME_TO_STALEMATE=30 minutes;\n', '    uint256 public NUM_TILES=12;\n', '    uint256 public START_PRICE=0.005 ether;\n', '    uint256 public CONTEST_INTERVAL=15 minutes;\n', '    uint256 public COOLDOWN_TIME=7 minutes;//time you have to wait between buying tiles\n', '    uint[][]  tests = [[0,1,2],[3,4,5],[6,7,8], [0,3,6],[1,4,7],[2,5,8], [0,4,8],[2,4,6]];\n', '    /*** DATATYPES ***/\n', '    struct Tile {\n', '        address owner;\n', '        uint256 price;\n', '    }\n', '    \n', '    /*** CONSTRUCTOR ***/\n', '    function TicTacPotato() public{\n', '        ceoAddress=msg.sender;\n', '        contestStartTime=SafeMath.add(now,1 hours);\n', '        for(uint i = 0; i<NUM_TILES; i++){\n', '            Tile memory newtile=Tile({owner:address(this),price: START_PRICE});\n', '            tiles.push(newtile);\n', '            indexToAddress[i]=address(this);\n', '        }\n', '    }\n', '    \n', '    /*** PUBLIC FUNCTIONS ***/\n', '    function buyTile(uint256 index) public payable{\n', '        require(now>contestStartTime);\n', '        if(_endContestIfNeededStalemate()){ \n', '\n', '        }\n', '        else{\n', '            Tile storage tile=tiles[index];\n', '            require(msg.value >= tile.price);\n', '            require(now >= cantBidUntil[msg.sender]);//ensure timeout has expired\n', '            cantBidUntil[msg.sender]=SafeMath.add(now,COOLDOWN_TIME);\n', '            //allow calling transfer() on these addresses without risking re-entrancy attacks\n', '            require(msg.sender != tile.owner);\n', '            require(msg.sender != ceoAddress);\n', '            uint256 sellingPrice=tile.price;\n', '            uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\n', '            uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 70), 100));\n', '            uint256 devFee= uint256(SafeMath.div(SafeMath.mul(sellingPrice, 4), 100));\n', '            //26 percent remaining in the contract goes to the pot\n', '            //if the owner is the contract, this is the first purchase, and payment should go to the pot\n', '            if(tile.owner!=address(this)){\n', '                tile.owner.transfer(payment);\n', '            }\n', '            ceoAddress.transfer(devFee);\n', '            //numTilesOwnedByAddress[tile.owner]=SafeMath.sub(numTilesOwnedByAddress[tile.owner],1)\n', '            tile.price= SafeMath.div(SafeMath.mul(sellingPrice, 115), 70);\n', '            tile.owner=msg.sender;//transfer ownership\n', '            indexToAddress[index]=msg.sender;\n', '            lastBidTime=block.timestamp;\n', '            if(!_endContestIfNeeded()){//if contest ended through this method, caller will receive entire contract balance anyways.\n', '                msg.sender.transfer(purchaseExcess);//returns excess eth\n', '            }\n', '        }\n', '    }\n', '    function pause() public {\n', '        require(msg.sender==ceoAddress);\n', '        require(now<contestStartTime);\n', '        contestStartTime=SafeMath.add(now,7 days);\n', '    }\n', '    function unpause() public{\n', '        require(msg.sender==ceoAddress);\n', '        require(now<contestStartTime);\n', '        _setNewStartTime();\n', '    }\n', '    function getBalance() public view returns(uint256 value){\n', '        return this.balance;\n', '    }\n', '    function timePassed() public view returns(uint256 time){\n', '        if(lastBidTime==0){\n', '            return 0;\n', '        }\n', '        return SafeMath.sub(block.timestamp,lastBidTime);\n', '    }\n', '    function timeLeftToContestStart() public view returns(uint256 time){\n', '        if(block.timestamp>contestStartTime){\n', '            return 0;\n', '        }\n', '        return SafeMath.sub(contestStartTime,block.timestamp);\n', '    }\n', '    function timeLeftToBid(address addr) public view returns(uint256 time){\n', '        if(now>cantBidUntil[addr]){\n', '            return 0;\n', '        }\n', '        return SafeMath.sub(cantBidUntil[addr],now);\n', '    }\n', '    function timeLeftToCook() public view returns(uint256 time){\n', '        return SafeMath.sub(TIME_TO_STALEMATE,timePassed());\n', '    }\n', '    function contestOver() public view returns(bool){\n', '        return timePassed()>=TIME_TO_STALEMATE;\n', '    }\n', '    function haveIWon() public view returns(bool){\n', '        return checkWinner(msg.sender);\n', '    }\n', '    \n', '     // 0 1 2\n', '    // 3 4 5\n', '    // 6 7 8\n', '    function checkWinner(address a) constant returns (bool){\n', '        for(uint i =0; i < 8;i++){\n', '            uint[] memory b = tests[i];\n', '            if(indexToAddress[b[0]] ==a && indexToAddress[b[1]]==a && indexToAddress[b[2]]==a) return true;\n', '        }\n', '        return false;\n', '    }\n', '    \n', '    /*** PRIVATE FUNCTIONS ***/\n', '    \n', '    function _endContestIfNeeded() private returns(bool){\n', '        if(haveIWon()){\n', '            lastPot=this.balance;\n', '            msg.sender.transfer(this.balance);//send winner the pot\n', '            lastBidTime=0;\n', '            _resetTiles();\n', '            _setNewStartTime();\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    //for ending the contest in a stalemate\n', '    function _endContestIfNeededStalemate() private returns(bool){\n', '        if(timePassed()>=TIME_TO_STALEMATE){\n', '            //contest over, refund anything paid\n', '            msg.sender.transfer(msg.value);\n', '            lastPot=this.balance;\n', '            _stalemateTransfer();\n', '            lastBidTime=0;\n', '            _resetTiles();\n', '            _setNewStartTime();\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    //transfers various amounts to the holders of the stalemate cards\n', '    function _stalemateTransfer() private{\n', '        uint payout=this.balance;\n', '        //pay the pot to holders of the stalemate cards\n', '        for(uint i=9;i<12;i++){\n', '            require(msg.sender != indexToAddress[i]);\n', '            if(indexToAddress[i]!=address(this)){\n', '                uint proportion=(i-8)*15;\n', '                indexToAddress[i].transfer(uint256(SafeMath.div(SafeMath.mul(payout, proportion), 100)));\n', '                emit StalematePayout(indexToAddress[i], uint256(SafeMath.div(SafeMath.mul(payout, proportion), 100)));\n', '            }\n', '        }\n', '    }\n', '    function _resetTiles() private{\n', '        for(uint i = 0; i<NUM_TILES; i++){\n', '            //numTilesOwnedByAddress[tiles[i].owner]=0;\n', '            Tile memory newtile=Tile({owner:address(this),price: START_PRICE});\n', '            tiles[i]=newtile;\n', '            indexToAddress[i]=address(this);\n', '        }\n', '        //numTilesOwnedByAddress[address(this)]=9;\n', '    }\n', '    function _setNewStartTime() private{\n', '            contestStartTime=SafeMath.add(now,CONTEST_INTERVAL);\n', '    }\n', '}\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
['pragma solidity ^0.4.18; // solhint-disable-line\n', '\n', '\n', '\n', 'contract TicTacPotato{\n', '\n', '    /***EVENTS***/\n', '    event StalematePayout(address adr, uint256 amount);\n', '\n', '    address public ceoAddress;\n', '    uint256 public lastBidTime;\n', '    uint256 public contestStartTime;\n', '    uint256 public lastPot;\n', '    \n', '    //mapping (address => uint256) public numTilesOwnedByAddress;\n', '    mapping (uint256 => address) public indexToAddress;\n', '    mapping (address => uint256) public cantBidUntil;\n', '    Tile[] public tiles;\n', '    \n', '    uint256 public TIME_TO_STALEMATE=30 minutes;\n', '    uint256 public NUM_TILES=12;\n', '    uint256 public START_PRICE=0.005 ether;\n', '    uint256 public CONTEST_INTERVAL=15 minutes;\n', '    uint256 public COOLDOWN_TIME=7 minutes;//time you have to wait between buying tiles\n', '    uint[][]  tests = [[0,1,2],[3,4,5],[6,7,8], [0,3,6],[1,4,7],[2,5,8], [0,4,8],[2,4,6]];\n', '    /*** DATATYPES ***/\n', '    struct Tile {\n', '        address owner;\n', '        uint256 price;\n', '    }\n', '    \n', '    /*** CONSTRUCTOR ***/\n', '    function TicTacPotato() public{\n', '        ceoAddress=msg.sender;\n', '        contestStartTime=SafeMath.add(now,1 hours);\n', '        for(uint i = 0; i<NUM_TILES; i++){\n', '            Tile memory newtile=Tile({owner:address(this),price: START_PRICE});\n', '            tiles.push(newtile);\n', '            indexToAddress[i]=address(this);\n', '        }\n', '    }\n', '    \n', '    /*** PUBLIC FUNCTIONS ***/\n', '    function buyTile(uint256 index) public payable{\n', '        require(now>contestStartTime);\n', '        if(_endContestIfNeededStalemate()){ \n', '\n', '        }\n', '        else{\n', '            Tile storage tile=tiles[index];\n', '            require(msg.value >= tile.price);\n', '            require(now >= cantBidUntil[msg.sender]);//ensure timeout has expired\n', '            cantBidUntil[msg.sender]=SafeMath.add(now,COOLDOWN_TIME);\n', '            //allow calling transfer() on these addresses without risking re-entrancy attacks\n', '            require(msg.sender != tile.owner);\n', '            require(msg.sender != ceoAddress);\n', '            uint256 sellingPrice=tile.price;\n', '            uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\n', '            uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 70), 100));\n', '            uint256 devFee= uint256(SafeMath.div(SafeMath.mul(sellingPrice, 4), 100));\n', '            //26 percent remaining in the contract goes to the pot\n', '            //if the owner is the contract, this is the first purchase, and payment should go to the pot\n', '            if(tile.owner!=address(this)){\n', '                tile.owner.transfer(payment);\n', '            }\n', '            ceoAddress.transfer(devFee);\n', '            //numTilesOwnedByAddress[tile.owner]=SafeMath.sub(numTilesOwnedByAddress[tile.owner],1)\n', '            tile.price= SafeMath.div(SafeMath.mul(sellingPrice, 115), 70);\n', '            tile.owner=msg.sender;//transfer ownership\n', '            indexToAddress[index]=msg.sender;\n', '            lastBidTime=block.timestamp;\n', '            if(!_endContestIfNeeded()){//if contest ended through this method, caller will receive entire contract balance anyways.\n', '                msg.sender.transfer(purchaseExcess);//returns excess eth\n', '            }\n', '        }\n', '    }\n', '    function pause() public {\n', '        require(msg.sender==ceoAddress);\n', '        require(now<contestStartTime);\n', '        contestStartTime=SafeMath.add(now,7 days);\n', '    }\n', '    function unpause() public{\n', '        require(msg.sender==ceoAddress);\n', '        require(now<contestStartTime);\n', '        _setNewStartTime();\n', '    }\n', '    function getBalance() public view returns(uint256 value){\n', '        return this.balance;\n', '    }\n', '    function timePassed() public view returns(uint256 time){\n', '        if(lastBidTime==0){\n', '            return 0;\n', '        }\n', '        return SafeMath.sub(block.timestamp,lastBidTime);\n', '    }\n', '    function timeLeftToContestStart() public view returns(uint256 time){\n', '        if(block.timestamp>contestStartTime){\n', '            return 0;\n', '        }\n', '        return SafeMath.sub(contestStartTime,block.timestamp);\n', '    }\n', '    function timeLeftToBid(address addr) public view returns(uint256 time){\n', '        if(now>cantBidUntil[addr]){\n', '            return 0;\n', '        }\n', '        return SafeMath.sub(cantBidUntil[addr],now);\n', '    }\n', '    function timeLeftToCook() public view returns(uint256 time){\n', '        return SafeMath.sub(TIME_TO_STALEMATE,timePassed());\n', '    }\n', '    function contestOver() public view returns(bool){\n', '        return timePassed()>=TIME_TO_STALEMATE;\n', '    }\n', '    function haveIWon() public view returns(bool){\n', '        return checkWinner(msg.sender);\n', '    }\n', '    \n', '     // 0 1 2\n', '    // 3 4 5\n', '    // 6 7 8\n', '    function checkWinner(address a) constant returns (bool){\n', '        for(uint i =0; i < 8;i++){\n', '            uint[] memory b = tests[i];\n', '            if(indexToAddress[b[0]] ==a && indexToAddress[b[1]]==a && indexToAddress[b[2]]==a) return true;\n', '        }\n', '        return false;\n', '    }\n', '    \n', '    /*** PRIVATE FUNCTIONS ***/\n', '    \n', '    function _endContestIfNeeded() private returns(bool){\n', '        if(haveIWon()){\n', '            lastPot=this.balance;\n', '            msg.sender.transfer(this.balance);//send winner the pot\n', '            lastBidTime=0;\n', '            _resetTiles();\n', '            _setNewStartTime();\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    //for ending the contest in a stalemate\n', '    function _endContestIfNeededStalemate() private returns(bool){\n', '        if(timePassed()>=TIME_TO_STALEMATE){\n', '            //contest over, refund anything paid\n', '            msg.sender.transfer(msg.value);\n', '            lastPot=this.balance;\n', '            _stalemateTransfer();\n', '            lastBidTime=0;\n', '            _resetTiles();\n', '            _setNewStartTime();\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    //transfers various amounts to the holders of the stalemate cards\n', '    function _stalemateTransfer() private{\n', '        uint payout=this.balance;\n', '        //pay the pot to holders of the stalemate cards\n', '        for(uint i=9;i<12;i++){\n', '            require(msg.sender != indexToAddress[i]);\n', '            if(indexToAddress[i]!=address(this)){\n', '                uint proportion=(i-8)*15;\n', '                indexToAddress[i].transfer(uint256(SafeMath.div(SafeMath.mul(payout, proportion), 100)));\n', '                emit StalematePayout(indexToAddress[i], uint256(SafeMath.div(SafeMath.mul(payout, proportion), 100)));\n', '            }\n', '        }\n', '    }\n', '    function _resetTiles() private{\n', '        for(uint i = 0; i<NUM_TILES; i++){\n', '            //numTilesOwnedByAddress[tiles[i].owner]=0;\n', '            Tile memory newtile=Tile({owner:address(this),price: START_PRICE});\n', '            tiles[i]=newtile;\n', '            indexToAddress[i]=address(this);\n', '        }\n', '        //numTilesOwnedByAddress[address(this)]=9;\n', '    }\n', '    function _setNewStartTime() private{\n', '            contestStartTime=SafeMath.add(now,CONTEST_INTERVAL);\n', '    }\n', '}\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
