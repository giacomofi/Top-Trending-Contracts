['/*! mytilcoinstorage.sol | (c) 2018 Develop by BelovITLab LLC (smartcontract.ru), author @stupidlovejoy | License: MIT */\n', '\n', 'pragma solidity 0.4.21;\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    modifier onlyOwner() { require(msg.sender == owner); _; }\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        owner = newOwner;\n', '        OwnershipTransferred(owner, newOwner);\n', '    }\n', '}\n', '\n', 'contract Manageable is Ownable {\n', '    mapping(address => bool) public managers;\n', '\n', '    event ManagerAdded(address indexed manager);\n', '    event ManagerRemoved(address indexed manager);\n', '\n', '    modifier onlyManager() { require(managers[msg.sender]); _; }\n', '\n', '    function addManager(address _manager) onlyOwner public {\n', '        require(_manager != address(0));\n', '\n', '        managers[_manager] = true;\n', '\n', '        ManagerAdded(_manager);\n', '    }\n', '\n', '    function removeManager(address _manager) onlyOwner public {\n', '        require(_manager != address(0));\n', '\n', '        managers[_manager] = false;\n', '\n', '        ManagerRemoved(_manager);\n', '    }\n', '}\n', '\n', 'contract MytilcoinStorage is Manageable {\n', '    struct Picture {\n', '        string hash;\n', '        uint32 rows;\n', '        uint32 cols;\n', '        uint32 width;\n', '        uint32 height;\n', '        string image;\n', '        string name;\n', '        string author;\n', '    }\n', '\n', '    mapping(bytes32 => Picture) public pictures;\n', '    mapping(bytes32 => bool) public hashes;\n', '\n', '    event AddPicture(bytes32 indexed hash, uint32 rows, uint32 cols, uint32 width, uint32 height, string image, string name, string author);\n', '    event SetHash(bytes32 indexed hash);\n', '\n', '    function MytilcoinStorage() public {\n', '        addManager(msg.sender);\n', '        addManager(0x73b1046A185bF68c11b4c90d79Cffc2E07519951);\n', '        addManager(0x7b15d3e5418E5140fF827127Ee1f44d2d65F8710);\n', '        addManager(0x977482e6f7Ad897Ee70c33A20f30c369f4BF7265);\n', '        addManager(0xa611D8C5183E533e13ecfFb3E9F9628e9dEF2755);\n', '        addManager(0xe16BBd0Cf49F4cC1Eb92fFBbaa71d7580b966097);\n', '        addManager(0x5c9E1b25113A5c18fBFd7655cCd5C160bf79B51E);\n', '        addManager(0x0812B7182aC1C5285E10644CdF5E9BB6234d0AF0);\n', '        addManager(0x52e5689a151CA40B56C217B5dB667F66A197e7Bb);\n', '        addManager(0xA71396Fcb7efd57AeC5FaD1Eb7e5503cDE136123);\n', '        addManager(0xF3f90257dAd60f8c4496D35117e04eAbb507b713);\n', '        addManager(0x63B182305Bd56f0b250a4974Cc872169ab706c53);\n', '        addManager(0x28d2446cE3F1F99B477DD77F9C6361f5b57DcFd8);\n', '        addManager(0x5c3770785Ebd50Ef7bC91b8afC8a7F86F014c54E);\n', '        addManager(0x0fDdAe9D4E6670e3699bdBA3058a84b92DFf95b2);\n', '        addManager(0x5CB547C3fA7abd51E508C980470fb86B731cd0bf);\n', '        addManager(0xEB9e2e0a32BD1De66762cCaef5438586C6C9ac3c);\n', '        addManager(0x6dBA00A685e0E4485A838E31A3a7EB63A5935702);\n', '        addManager(0x2EF9a68D2A9fB9aC4919e2D85cf22780e5EBFCfD);\n', '        addManager(0x7e4FD70e4F8c355d51E2CCFb15aF87d47e6D2167);\n', '        addManager(0x51ce146F1128Ff424Dc918441B46Cb56cC95a172);\n', '        addManager(0x2f2eb8766EC9EaAc7EBa6E851794DB3B45669D2A);\n', '    }\n', '\n', '    function addPicture(string _hash, uint32 _rows, uint32 _cols, uint32 _width, uint32 _height, string _image, string _name, string _author) onlyManager public returns(bool success) {\n', '        bytes32 key = str_to_bytes32(_hash);\n', '\n', '        require(!(pictures[key].rows > 0));\n', '        require(_rows > 0 && _cols > 0 && _width > 0 && _height > 0);\n', '        \n', '        pictures[key] = Picture({\n', '            hash: _hash,\n', '            rows: _rows,\n', '            cols: _cols,\n', '            width: _width,\n', '            height: _height,\n', '            image: _image,\n', '            name: _name,\n', '            author: _author\n', '        });\n', '\n', '        AddPicture(key, _rows, _cols, _width, _height, _image, _name, _author);\n', '\n', '        return true;\n', '    }\n', '\n', '    function setHash(string _hash) onlyManager public returns(bool success) {\n', '        bytes32 key = str_to_bytes32(_hash);\n', '\n', '        hashes[key] = true;\n', '\n', '        SetHash(key);\n', '\n', '        return true;\n', '    }\n', '    \n', '    function str_to_bytes32(string memory source) private pure returns(bytes32 result) {\n', '        bytes memory tempEmptyStringTest = bytes(source);\n', '        if(tempEmptyStringTest.length == 0) {\n', '            return 0x0;\n', '        }\n', '\n', '        assembly {\n', '            result := mload(add(source, 32))\n', '        }\n', '    }\n', '}']
['/*! mytilcoinstorage.sol | (c) 2018 Develop by BelovITLab LLC (smartcontract.ru), author @stupidlovejoy | License: MIT */\n', '\n', 'pragma solidity 0.4.21;\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    modifier onlyOwner() { require(msg.sender == owner); _; }\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        owner = newOwner;\n', '        OwnershipTransferred(owner, newOwner);\n', '    }\n', '}\n', '\n', 'contract Manageable is Ownable {\n', '    mapping(address => bool) public managers;\n', '\n', '    event ManagerAdded(address indexed manager);\n', '    event ManagerRemoved(address indexed manager);\n', '\n', '    modifier onlyManager() { require(managers[msg.sender]); _; }\n', '\n', '    function addManager(address _manager) onlyOwner public {\n', '        require(_manager != address(0));\n', '\n', '        managers[_manager] = true;\n', '\n', '        ManagerAdded(_manager);\n', '    }\n', '\n', '    function removeManager(address _manager) onlyOwner public {\n', '        require(_manager != address(0));\n', '\n', '        managers[_manager] = false;\n', '\n', '        ManagerRemoved(_manager);\n', '    }\n', '}\n', '\n', 'contract MytilcoinStorage is Manageable {\n', '    struct Picture {\n', '        string hash;\n', '        uint32 rows;\n', '        uint32 cols;\n', '        uint32 width;\n', '        uint32 height;\n', '        string image;\n', '        string name;\n', '        string author;\n', '    }\n', '\n', '    mapping(bytes32 => Picture) public pictures;\n', '    mapping(bytes32 => bool) public hashes;\n', '\n', '    event AddPicture(bytes32 indexed hash, uint32 rows, uint32 cols, uint32 width, uint32 height, string image, string name, string author);\n', '    event SetHash(bytes32 indexed hash);\n', '\n', '    function MytilcoinStorage() public {\n', '        addManager(msg.sender);\n', '        addManager(0x73b1046A185bF68c11b4c90d79Cffc2E07519951);\n', '        addManager(0x7b15d3e5418E5140fF827127Ee1f44d2d65F8710);\n', '        addManager(0x977482e6f7Ad897Ee70c33A20f30c369f4BF7265);\n', '        addManager(0xa611D8C5183E533e13ecfFb3E9F9628e9dEF2755);\n', '        addManager(0xe16BBd0Cf49F4cC1Eb92fFBbaa71d7580b966097);\n', '        addManager(0x5c9E1b25113A5c18fBFd7655cCd5C160bf79B51E);\n', '        addManager(0x0812B7182aC1C5285E10644CdF5E9BB6234d0AF0);\n', '        addManager(0x52e5689a151CA40B56C217B5dB667F66A197e7Bb);\n', '        addManager(0xA71396Fcb7efd57AeC5FaD1Eb7e5503cDE136123);\n', '        addManager(0xF3f90257dAd60f8c4496D35117e04eAbb507b713);\n', '        addManager(0x63B182305Bd56f0b250a4974Cc872169ab706c53);\n', '        addManager(0x28d2446cE3F1F99B477DD77F9C6361f5b57DcFd8);\n', '        addManager(0x5c3770785Ebd50Ef7bC91b8afC8a7F86F014c54E);\n', '        addManager(0x0fDdAe9D4E6670e3699bdBA3058a84b92DFf95b2);\n', '        addManager(0x5CB547C3fA7abd51E508C980470fb86B731cd0bf);\n', '        addManager(0xEB9e2e0a32BD1De66762cCaef5438586C6C9ac3c);\n', '        addManager(0x6dBA00A685e0E4485A838E31A3a7EB63A5935702);\n', '        addManager(0x2EF9a68D2A9fB9aC4919e2D85cf22780e5EBFCfD);\n', '        addManager(0x7e4FD70e4F8c355d51E2CCFb15aF87d47e6D2167);\n', '        addManager(0x51ce146F1128Ff424Dc918441B46Cb56cC95a172);\n', '        addManager(0x2f2eb8766EC9EaAc7EBa6E851794DB3B45669D2A);\n', '    }\n', '\n', '    function addPicture(string _hash, uint32 _rows, uint32 _cols, uint32 _width, uint32 _height, string _image, string _name, string _author) onlyManager public returns(bool success) {\n', '        bytes32 key = str_to_bytes32(_hash);\n', '\n', '        require(!(pictures[key].rows > 0));\n', '        require(_rows > 0 && _cols > 0 && _width > 0 && _height > 0);\n', '        \n', '        pictures[key] = Picture({\n', '            hash: _hash,\n', '            rows: _rows,\n', '            cols: _cols,\n', '            width: _width,\n', '            height: _height,\n', '            image: _image,\n', '            name: _name,\n', '            author: _author\n', '        });\n', '\n', '        AddPicture(key, _rows, _cols, _width, _height, _image, _name, _author);\n', '\n', '        return true;\n', '    }\n', '\n', '    function setHash(string _hash) onlyManager public returns(bool success) {\n', '        bytes32 key = str_to_bytes32(_hash);\n', '\n', '        hashes[key] = true;\n', '\n', '        SetHash(key);\n', '\n', '        return true;\n', '    }\n', '    \n', '    function str_to_bytes32(string memory source) private pure returns(bytes32 result) {\n', '        bytes memory tempEmptyStringTest = bytes(source);\n', '        if(tempEmptyStringTest.length == 0) {\n', '            return 0x0;\n', '        }\n', '\n', '        assembly {\n', '            result := mload(add(source, 32))\n', '        }\n', '    }\n', '}']
