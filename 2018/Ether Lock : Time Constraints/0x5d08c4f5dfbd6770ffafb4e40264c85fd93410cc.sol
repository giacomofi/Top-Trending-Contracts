['pragma solidity ^0.4.11;\n', '\n', '/// @title DNNToken contract - Main DNN contract\n', '/// @author Dondrey Taylor - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="73171c1d1701160a33171d1d5d1e16171a12">[email&#160;protected]</a>>\n', 'contract DNNToken {\n', '    enum DNNSupplyAllocations {\n', '        EarlyBackerSupplyAllocation,\n', '        PRETDESupplyAllocation,\n', '        TDESupplyAllocation,\n', '        BountySupplyAllocation,\n', '        WriterAccountSupplyAllocation,\n', '        AdvisorySupplyAllocation,\n', '        PlatformSupplyAllocation\n', '    }\n', '    function issueTokens(address, uint256, DNNSupplyAllocations) public returns (bool) {}\n', '}\n', '\n', '/// @title DNNRedemption contract - Issues DNN tokens\n', '/// @author Dondrey Taylor - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="d2b6bdbcb6a0b7ab92b6bcbcfcbfb7b6bbb3">[email&#160;protected]</a>>\n', 'contract DNNRedemption {\n', '\n', '    /////////////////////////\n', '    // DNN Token Contract  //\n', '    /////////////////////////\n', '    DNNToken public dnnToken;\n', '\n', '    //////////////////////////////////////////\n', '    // Addresses of the co-founders of DNN. //\n', '    //////////////////////////////////////////\n', '    address public cofounderA;\n', '    address public cofounderB;\n', '\n', '    /////////////////////////////////////////////////\n', '    // Number of tokens distributed (in atto-DNN) //\n', '    /////////////////////////////////////////////////\n', '    uint256 public tokensDistributed = 0;\n', '\n', '    //////////////////////////////////////////////////////////////////\n', '    // Maximum number of tokens for this distribution (in atto-DNN) //\n', '    //////////////////////////////////////////////////////////////////\n', '    uint256 public maxTokensToDistribute = 30000000 * 1 ether;\n', '\n', '    ///////////////////////////////////////////////\n', '    // Used to generate number of tokens to send //\n', '    ///////////////////////////////////////////////\n', '    uint256 public seed = 8633926795440059073718754917553891166080514579013872221976080033791214;\n', '\n', '    /////////////////////////////////////////////////\n', '    // We&#39;ll keep track of who we have sent DNN to //\n', '    /////////////////////////////////////////////////\n', '    mapping(address => uint256) holders;\n', '\n', '    /////////////////////////////////////////////////////////////////////////////\n', '    // Event triggered when tokens are transferred from one address to another //\n', '    /////////////////////////////////////////////////////////////////////////////\n', '    event Redemption(address indexed to, uint256 value);\n', '\n', '\n', '    ////////////////////////////////////////////////////\n', '    // Checks if CoFounders are performing the action //\n', '    ////////////////////////////////////////////////////\n', '    modifier onlyCofounders() {\n', '        require (msg.sender == cofounderA || msg.sender == cofounderB);\n', '        _;\n', '    }\n', '\n', '    ///////////////////////////////////////////////////////////////\n', '    // @des DNN Holder Check                                     //\n', '    // @param Checks if we sent DNN to the benfeficiary before   //\n', '    ///////////////////////////////////////////////////////////////\n', '    function hasDNN(address beneficiary) public view returns (bool) {\n', '        return holders[beneficiary] > 0;\n', '    }\n', '\n', '    ///////////////////////////////////////////////////\n', '    // Make sure that user did no redeeem DNN before //\n', '    ///////////////////////////////////////////////////\n', '    modifier doesNotHaveDNN(address beneficiary) {\n', '        require(hasDNN(beneficiary) == false);\n', '        _;\n', '    }\n', '\n', '    //////////////////////////////////////////////////////////\n', '    //  @des Updates max token distribution amount          //\n', '    //  @param New amount of tokens that can be distributed //\n', '    //////////////////////////////////////////////////////////\n', '    function updateMaxTokensToDistribute(uint256 maxTokens)\n', '      public\n', '      onlyCofounders\n', '    {\n', '        maxTokensToDistribute = maxTokens;\n', '    }\n', '\n', '    ///////////////////////////////////////////////////////////////\n', '    // @des Issues bounty tokens                                 //\n', '    // @param beneficiary Address the tokens will be issued to.  //\n', '    ///////////////////////////////////////////////////////////////\n', '    function issueTokens(address beneficiary)\n', '        public\n', '        doesNotHaveDNN(beneficiary)\n', '        returns (uint256)\n', '    {\n', '        // Number of tokens that we&#39;ll send\n', '        uint256 tokenCount = (uint(keccak256(abi.encodePacked(blockhash(block.number-1), seed ))) % 1000);\n', '\n', '        // If the amount is over 200 then we&#39;ll cap the tokens we&#39;ll\n', '        // give to 200 to prevent giving too many. Since the highest amount\n', '        // of tokens earned in the bounty was 99 DNN, we&#39;ll be issuing a bonus to everyone\n', '        // for the long wait.\n', '        if (tokenCount > 200) {\n', '            tokenCount = 200;\n', '        }\n', '\n', '        // Change atto-DNN to DNN\n', '        tokenCount = tokenCount * 1 ether;\n', '\n', '        // If we have reached our max tokens then we&#39;ll bail out of the transaction\n', '        if (tokensDistributed+tokenCount > maxTokensToDistribute) {\n', '            revert();\n', '        }\n', '\n', '        // Update holder balance\n', '        holders[beneficiary] = tokenCount;\n', '\n', '        // Update total amount of tokens distributed (in atto-DNN)\n', '        tokensDistributed = tokensDistributed + tokenCount;\n', '\n', '        // Allocation type will be Platform\n', '        DNNToken.DNNSupplyAllocations allocationType = DNNToken.DNNSupplyAllocations.PlatformSupplyAllocation;\n', '\n', '        // Attempt to issue tokens\n', '        if (!dnnToken.issueTokens(beneficiary, tokenCount, allocationType)) {\n', '            revert();\n', '        }\n', '\n', '        // Emit redemption event\n', '        Redemption(beneficiary, tokenCount);\n', '\n', '        return tokenCount;\n', '    }\n', '\n', '    ///////////////////////////////\n', '    // @des Contract constructor //\n', '    ///////////////////////////////\n', '    constructor() public\n', '    {\n', '        // Set token address\n', '        dnnToken = DNNToken(0x9d9832d1beb29cc949d75d61415fd00279f84dc2);\n', '\n', '        // Set cofounder addresses\n', '        cofounderA = 0x3Cf26a9FE33C219dB87c2e50572e50803eFb2981;\n', '        cofounderB = 0x9FFE2aD5D76954C7C25be0cEE30795279c4Cab9f;\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////\n', '    // @des ONLY SEND 0 ETH TRANSACTIONS TO THIS CONTRACT //\n', '    ////////////////////////////////////////////////////////\n', '    function () public payable {\n', '        if (!hasDNN(msg.sender)) issueTokens(msg.sender);\n', '        else revert();\n', '    }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '/// @title DNNToken contract - Main DNN contract\n', '/// @author Dondrey Taylor - <dondrey@dnn.media>\n', 'contract DNNToken {\n', '    enum DNNSupplyAllocations {\n', '        EarlyBackerSupplyAllocation,\n', '        PRETDESupplyAllocation,\n', '        TDESupplyAllocation,\n', '        BountySupplyAllocation,\n', '        WriterAccountSupplyAllocation,\n', '        AdvisorySupplyAllocation,\n', '        PlatformSupplyAllocation\n', '    }\n', '    function issueTokens(address, uint256, DNNSupplyAllocations) public returns (bool) {}\n', '}\n', '\n', '/// @title DNNRedemption contract - Issues DNN tokens\n', '/// @author Dondrey Taylor - <dondrey@dnn.media>\n', 'contract DNNRedemption {\n', '\n', '    /////////////////////////\n', '    // DNN Token Contract  //\n', '    /////////////////////////\n', '    DNNToken public dnnToken;\n', '\n', '    //////////////////////////////////////////\n', '    // Addresses of the co-founders of DNN. //\n', '    //////////////////////////////////////////\n', '    address public cofounderA;\n', '    address public cofounderB;\n', '\n', '    /////////////////////////////////////////////////\n', '    // Number of tokens distributed (in atto-DNN) //\n', '    /////////////////////////////////////////////////\n', '    uint256 public tokensDistributed = 0;\n', '\n', '    //////////////////////////////////////////////////////////////////\n', '    // Maximum number of tokens for this distribution (in atto-DNN) //\n', '    //////////////////////////////////////////////////////////////////\n', '    uint256 public maxTokensToDistribute = 30000000 * 1 ether;\n', '\n', '    ///////////////////////////////////////////////\n', '    // Used to generate number of tokens to send //\n', '    ///////////////////////////////////////////////\n', '    uint256 public seed = 8633926795440059073718754917553891166080514579013872221976080033791214;\n', '\n', '    /////////////////////////////////////////////////\n', "    // We'll keep track of who we have sent DNN to //\n", '    /////////////////////////////////////////////////\n', '    mapping(address => uint256) holders;\n', '\n', '    /////////////////////////////////////////////////////////////////////////////\n', '    // Event triggered when tokens are transferred from one address to another //\n', '    /////////////////////////////////////////////////////////////////////////////\n', '    event Redemption(address indexed to, uint256 value);\n', '\n', '\n', '    ////////////////////////////////////////////////////\n', '    // Checks if CoFounders are performing the action //\n', '    ////////////////////////////////////////////////////\n', '    modifier onlyCofounders() {\n', '        require (msg.sender == cofounderA || msg.sender == cofounderB);\n', '        _;\n', '    }\n', '\n', '    ///////////////////////////////////////////////////////////////\n', '    // @des DNN Holder Check                                     //\n', '    // @param Checks if we sent DNN to the benfeficiary before   //\n', '    ///////////////////////////////////////////////////////////////\n', '    function hasDNN(address beneficiary) public view returns (bool) {\n', '        return holders[beneficiary] > 0;\n', '    }\n', '\n', '    ///////////////////////////////////////////////////\n', '    // Make sure that user did no redeeem DNN before //\n', '    ///////////////////////////////////////////////////\n', '    modifier doesNotHaveDNN(address beneficiary) {\n', '        require(hasDNN(beneficiary) == false);\n', '        _;\n', '    }\n', '\n', '    //////////////////////////////////////////////////////////\n', '    //  @des Updates max token distribution amount          //\n', '    //  @param New amount of tokens that can be distributed //\n', '    //////////////////////////////////////////////////////////\n', '    function updateMaxTokensToDistribute(uint256 maxTokens)\n', '      public\n', '      onlyCofounders\n', '    {\n', '        maxTokensToDistribute = maxTokens;\n', '    }\n', '\n', '    ///////////////////////////////////////////////////////////////\n', '    // @des Issues bounty tokens                                 //\n', '    // @param beneficiary Address the tokens will be issued to.  //\n', '    ///////////////////////////////////////////////////////////////\n', '    function issueTokens(address beneficiary)\n', '        public\n', '        doesNotHaveDNN(beneficiary)\n', '        returns (uint256)\n', '    {\n', "        // Number of tokens that we'll send\n", '        uint256 tokenCount = (uint(keccak256(abi.encodePacked(blockhash(block.number-1), seed ))) % 1000);\n', '\n', "        // If the amount is over 200 then we'll cap the tokens we'll\n", '        // give to 200 to prevent giving too many. Since the highest amount\n', "        // of tokens earned in the bounty was 99 DNN, we'll be issuing a bonus to everyone\n", '        // for the long wait.\n', '        if (tokenCount > 200) {\n', '            tokenCount = 200;\n', '        }\n', '\n', '        // Change atto-DNN to DNN\n', '        tokenCount = tokenCount * 1 ether;\n', '\n', "        // If we have reached our max tokens then we'll bail out of the transaction\n", '        if (tokensDistributed+tokenCount > maxTokensToDistribute) {\n', '            revert();\n', '        }\n', '\n', '        // Update holder balance\n', '        holders[beneficiary] = tokenCount;\n', '\n', '        // Update total amount of tokens distributed (in atto-DNN)\n', '        tokensDistributed = tokensDistributed + tokenCount;\n', '\n', '        // Allocation type will be Platform\n', '        DNNToken.DNNSupplyAllocations allocationType = DNNToken.DNNSupplyAllocations.PlatformSupplyAllocation;\n', '\n', '        // Attempt to issue tokens\n', '        if (!dnnToken.issueTokens(beneficiary, tokenCount, allocationType)) {\n', '            revert();\n', '        }\n', '\n', '        // Emit redemption event\n', '        Redemption(beneficiary, tokenCount);\n', '\n', '        return tokenCount;\n', '    }\n', '\n', '    ///////////////////////////////\n', '    // @des Contract constructor //\n', '    ///////////////////////////////\n', '    constructor() public\n', '    {\n', '        // Set token address\n', '        dnnToken = DNNToken(0x9d9832d1beb29cc949d75d61415fd00279f84dc2);\n', '\n', '        // Set cofounder addresses\n', '        cofounderA = 0x3Cf26a9FE33C219dB87c2e50572e50803eFb2981;\n', '        cofounderB = 0x9FFE2aD5D76954C7C25be0cEE30795279c4Cab9f;\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////\n', '    // @des ONLY SEND 0 ETH TRANSACTIONS TO THIS CONTRACT //\n', '    ////////////////////////////////////////////////////////\n', '    function () public payable {\n', '        if (!hasDNN(msg.sender)) issueTokens(msg.sender);\n', '        else revert();\n', '    }\n', '}']
