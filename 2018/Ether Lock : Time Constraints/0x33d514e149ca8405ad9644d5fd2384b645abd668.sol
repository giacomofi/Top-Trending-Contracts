['pragma solidity ^0.4.17;\n', '\n', 'contract AccessControl {\n', '    address public creatorAddress;\n', '    uint16 public totalSeraphims = 0;\n', '    mapping (address => bool) public seraphims;\n', '\n', '    bool public isMaintenanceMode = true;\n', ' \n', '    modifier onlyCREATOR() {\n', '        require(msg.sender == creatorAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlySERAPHIM() {\n', '        require(seraphims[msg.sender] == true);\n', '        _;\n', '    }\n', '    \n', '    modifier isContractActive {\n', '        require(!isMaintenanceMode);\n', '        _;\n', '    }\n', '    \n', '    // Constructor\n', '    function AccessControl() public {\n', '        creatorAddress = msg.sender;\n', '    }\n', '    \n', '\n', '    function addSERAPHIM(address _newSeraphim) onlyCREATOR public {\n', '        if (seraphims[_newSeraphim] == false) {\n', '            seraphims[_newSeraphim] = true;\n', '            totalSeraphims += 1;\n', '        }\n', '    }\n', '    \n', '    function removeSERAPHIM(address _oldSeraphim) onlyCREATOR public {\n', '        if (seraphims[_oldSeraphim] == true) {\n', '            seraphims[_oldSeraphim] = false;\n', '            totalSeraphims -= 1;\n', '        }\n', '    }\n', '\n', '    function updateMaintenanceMode(bool _isMaintaining) onlyCREATOR public {\n', '        isMaintenanceMode = _isMaintaining;\n', '    }\n', '\n', '  \n', '} \n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint x, uint y) pure internal returns(uint) {\n', '      uint z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtract(uint x, uint y) pure internal returns(uint) {\n', '      assert(x >= y);\n', '      uint z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint x, uint y) pure internal returns(uint) {\n', '      uint z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '\n', '    function getRandomNumber(uint16 maxRandom, uint8 min, address privateAddress) constant public returns(uint8) {\n', '        uint256 genNum = uint256(block.blockhash(block.number-1)) + uint256(privateAddress);\n', '        return uint8(genNum % (maxRandom - min + 1)+min);\n', '    }\n', '}\n', '\n', 'contract Enums {\n', '    enum ResultCode {\n', '        SUCCESS,\n', '        ERROR_CLASS_NOT_FOUND,\n', '        ERROR_LOW_BALANCE,\n', '        ERROR_SEND_FAIL,\n', '        ERROR_NOT_OWNER,\n', '        ERROR_NOT_ENOUGH_MONEY,\n', '        ERROR_INVALID_AMOUNT\n', '    }\n', '\n', '    enum AngelAura { \n', '        Blue, \n', '        Yellow, \n', '        Purple, \n', '        Orange, \n', '        Red, \n', '        Green \n', '    }\n', '}\n', '\n', 'contract IAngelCardData is AccessControl, Enums {\n', '    uint8 public totalAngelCardSeries;\n', '    uint64 public totalAngels;\n', '\n', '    \n', '    // write\n', '    // angels\n', '    function createAngelCardSeries(uint8 _angelCardSeriesId, uint _basePrice,  uint64 _maxTotal, uint8 _baseAura, uint16 _baseBattlePower, uint64 _liveTime) onlyCREATOR external returns(uint8);\n', '    function updateAngelCardSeries(uint8 _angelCardSeriesId) onlyCREATOR external;\n', '    function setAngel(uint8 _angelCardSeriesId, address _owner, uint _price, uint16 _battlePower) onlySERAPHIM external returns(uint64);\n', '    function addToAngelExperienceLevel(uint64 _angelId, uint _value) onlySERAPHIM external;\n', '    function setAngelLastBattleTime(uint64 _angelId) onlySERAPHIM external;\n', '    function setAngelLastVsBattleTime(uint64 _angelId) onlySERAPHIM external;\n', '    function setLastBattleResult(uint64 _angelId, uint16 _value) onlySERAPHIM external;\n', '    function addAngelIdMapping(address _owner, uint64 _angelId) private;\n', '    function transferAngel(address _from, address _to, uint64 _angelId) onlySERAPHIM public returns(ResultCode);\n', '    function ownerAngelTransfer (address _to, uint64 _angelId)  public;\n', '\n', '    // read\n', '    function getAngelCardSeries(uint8 _angelCardSeriesId) constant public returns(uint8 angelCardSeriesId, uint64 currentAngelTotal, uint basePrice, uint64 maxAngelTotal, uint8 baseAura, uint baseBattlePower, uint64 lastSellTime, uint64 liveTime);\n', '    function getAngel(uint64 _angelId) constant public returns(uint64 angelId, uint8 angelCardSeriesId, uint16 battlePower, uint8 aura, uint16 experience, uint price, uint64 createdTime, uint64 lastBattleTime, uint64 lastVsBattleTime, uint16 lastBattleResult, address owner);\n', '    function getOwnerAngelCount(address _owner) constant public returns(uint);\n', '    function getAngelByIndex(address _owner, uint _index) constant public returns(uint64);\n', '    function getTotalAngelCardSeries() constant public returns (uint8);\n', '    function getTotalAngels() constant public returns (uint64);\n', '}\n', '\n', '\n', 'contract AngelCardData is IAngelCardData, SafeMath {\n', '    /*** EVENTS ***/\n', '    event CreatedAngel(uint64 angelId);\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '\n', '    /*** DATA TYPES ***/\n', '    struct AngelCardSeries {\n', '        uint8 angelCardSeriesId;\n', '        uint basePrice; \n', '        uint64 currentAngelTotal;\n', '        uint64 maxAngelTotal;\n', '        AngelAura baseAura;\n', '        uint baseBattlePower;\n', '        uint64 lastSellTime;\n', '        uint64 liveTime;\n', '    }\n', '\n', '    struct Angel {\n', '        uint64 angelId;\n', '        uint8 angelCardSeriesId;\n', '        address owner;\n', '        uint16 battlePower;\n', '        AngelAura aura;\n', '        uint16 experience;\n', '        uint price;\n', '        uint64 createdTime;\n', '        uint64 lastBattleTime;\n', '        uint64 lastVsBattleTime;\n', '        uint16 lastBattleResult;\n', '    }\n', '\n', '    /*** STORAGE ***/\n', '\n', '    mapping(uint8 => AngelCardSeries) public angelCardSeriesCollection;\n', '    mapping(uint64 => Angel) public angelCollection;\n', '    mapping(address => uint64[]) public ownerAngelCollection;\n', '    uint256 public prevSeriesSelloutHours;\n', '    \n', '    /*** FUNCTIONS ***/\n', '    //*** Write Access ***//\n', '    function AngelCardData() public {\n', '        \n', '    }\n', '  \n', '\n', '    function createAngelCardSeries(uint8 _angelCardSeriesId, uint _basePrice,  uint64 _maxTotal, uint8 _baseAura, uint16 _baseBattlePower, uint64 _liveTime) onlyCREATOR external returns(uint8) {\n', '         if ((now > 1516692600) || (totalAngelCardSeries >= 24)) {revert();}\n', '        //This confirms that no one, even the develoopers, can create any angel series after JAN/23/2018 @ 7:30 am (UTC) or more than the original 24 series.\n', '\n', '        AngelCardSeries storage angelCardSeries = angelCardSeriesCollection[_angelCardSeriesId];\n', '        angelCardSeries.angelCardSeriesId = _angelCardSeriesId;\n', '        angelCardSeries.basePrice = _basePrice; \n', '        angelCardSeries.maxAngelTotal = _maxTotal;\n', '        angelCardSeries.baseAura = AngelAura(_baseAura);\n', '        angelCardSeries.baseBattlePower = _baseBattlePower;\n', '        angelCardSeries.lastSellTime = 0;\n', '        angelCardSeries.liveTime = _liveTime;\n', '\n', '        totalAngelCardSeries += 1;\n', '        return totalAngelCardSeries;\n', '    }\n', '\n', '    // This is called every 5 days to set the basePrice and maxAngelTotal for the angel series based on buy pressure of the last card\n', '    function updateAngelCardSeries(uint8 _angelCardSeriesId) onlyCREATOR external {\n', '        // Require that the series is above the Arel card\n', '        if (_angelCardSeriesId < 4) \n', '            revert();\n', "        //don't need to use safesubtract here because above we already reverted id less than 4. \n", '        AngelCardSeries memory seriesMinusOne = angelCardSeriesCollection[_angelCardSeriesId - 1];\n', '        AngelCardSeries storage seriesStorage = angelCardSeriesCollection[_angelCardSeriesId];\n', '        //In case no conditions are true, then no change. \n', '        seriesStorage.maxAngelTotal = seriesMinusOne.maxAngelTotal;\n', '        if (seriesMinusOne.currentAngelTotal >= seriesMinusOne.maxAngelTotal) {\n', '            prevSeriesSelloutHours = (safeSubtract(seriesMinusOne.lastSellTime,seriesMinusOne.liveTime))/3600;\n', '        } else {\n', '            prevSeriesSelloutHours = 120;\n', '        }\n', '\n', '        // Set the new basePrice for the angelCardSeries\n', "        //Lower by 0.65 eth if didn't sell out, until min of 0.005 eth\n", '        if (prevSeriesSelloutHours > 100) { \n', '            if (seriesMinusOne.basePrice > 70000000000000000) \n', '            {seriesStorage.basePrice = seriesMinusOne.basePrice - 65000000000000000;}\n', '            else {seriesStorage.basePrice = 5000000000000000;}\n', '        }\n', '        //Increase by 0.005 ETH for 100-sell out hours. Price increases faster based on demand. \n', '        else {seriesStorage.basePrice = seriesMinusOne.basePrice+((100-prevSeriesSelloutHours)*5000000000000000);}\n', '        \n', '        // Adjust the maxTotal for the angelCardSeries\n', "        //Don't need safeMath here because we are already checking values. \n", '        if (prevSeriesSelloutHours < 100 && seriesMinusOne.maxAngelTotal <= 435) {\n', '            seriesStorage.maxAngelTotal = seriesMinusOne.maxAngelTotal+15;\n', '        } else if (prevSeriesSelloutHours > 100 && seriesMinusOne.maxAngelTotal >= 60) {\n', '            seriesStorage.maxAngelTotal = seriesMinusOne.maxAngelTotal-15;\n', '        }\n', "        // Need to set this incase no cards  sell, so that other calculations don't break\n", '        seriesStorage.lastSellTime = uint64(now);\n', '    }\n', '\n', '    function setAngel(uint8 _angelCardSeriesId, address _owner, uint _price, uint16 _battlePower) onlySERAPHIM external returns(uint64) {\n', '        AngelCardSeries storage series = angelCardSeriesCollection[_angelCardSeriesId];\n', '    \n', '        if (series.currentAngelTotal >= series.maxAngelTotal) {\n', '            revert();\n', '        }\n', '       else { \n', '        totalAngels += 1;\n', '        Angel storage angel = angelCollection[totalAngels];\n', '        series.currentAngelTotal += 1;\n', '        series.lastSellTime = uint64(now);\n', '        angel.angelId = totalAngels;\n', '        angel.angelCardSeriesId = _angelCardSeriesId;\n', '        angel.owner = _owner;\n', '        angel.battlePower = _battlePower; \n', '        angel.aura = series.baseAura;\n', '        angel.experience = 0;\n', '        angel.price = _price;\n', '        angel.createdTime = uint64(now);\n', '        angel.lastBattleTime = 0;\n', '        angel.lastVsBattleTime = 0;\n', '        angel.lastBattleResult = 0;\n', '        addAngelIdMapping(_owner, angel.angelId);\n', '        return angel.angelId;\n', '       }\n', '    }\n', '     \n', '    function addToAngelExperienceLevel(uint64 _angelId, uint _value) onlySERAPHIM external {\n', '        Angel storage angel = angelCollection[_angelId];\n', '        if (angel.angelId == _angelId) {\n', '            angel.experience = uint16(safeAdd(angel.experience, _value));\n', '        }\n', '    }\n', '\n', '    function setAngelLastBattleTime(uint64 _angelId) onlySERAPHIM external {\n', '        Angel storage angel = angelCollection[_angelId];\n', '        if (angel.angelId == _angelId) {\n', '            angel.lastBattleTime = uint64(now);\n', '        }\n', '    }\n', '\n', '    function setAngelLastVsBattleTime(uint64 _angelId) onlySERAPHIM external {\n', '        Angel storage angel = angelCollection[_angelId];\n', '        if (angel.angelId == _angelId) {\n', '            angel.lastVsBattleTime = uint64(now);\n', '        }\n', '    }\n', '\n', '    function setLastBattleResult(uint64 _angelId, uint16 _value) onlySERAPHIM external {\n', '        Angel storage angel = angelCollection[_angelId];\n', '        if (angel.angelId == _angelId) {\n', '            angel.lastBattleResult = _value;\n', '        }\n', '    }\n', '    \n', '    function addAngelIdMapping(address _owner, uint64 _angelId) private {\n', '            uint64[] storage owners = ownerAngelCollection[_owner];\n', '            owners.push(_angelId);\n', '            Angel storage angel = angelCollection[_angelId];\n', '            angel.owner = _owner;\n', '    }\n', '//Anyone can transfer their own angel by sending a transaction with the address to transfer to from the address that owns it. \n', '    function ownerAngelTransfer (address _to, uint64 _angelId)  public  {\n', '        \n', '       if ((_angelId > totalAngels) || (_angelId == 0)) {revert();}\n', '       Angel storage angel = angelCollection[_angelId];\n', '        if (msg.sender == _to) {revert();}\n', '        if (angel.owner != msg.sender) {\n', '            revert();\n', '        }\n', '        else {\n', '        angel.owner = _to;\n', '        addAngelIdMapping(_to, _angelId);\n', '        }\n', '    }\n', '    function transferAngel(address _from, address _to, uint64 _angelId) onlySERAPHIM public returns(ResultCode) {\n', '        Angel storage angel = angelCollection[_angelId];\n', '        if (_from == _to) {revert();}\n', '        if (angel.owner != _from) {\n', '            return ResultCode.ERROR_NOT_OWNER;\n', '        }\n', '        angel.owner = _to;\n', '        addAngelIdMapping(_to, _angelId);\n', '        return ResultCode.SUCCESS;\n', '    }\n', '\n', '  \n', '   \n', '    //*** Read Access ***//\n', '    function getAngelCardSeries(uint8 _angelCardSeriesId) constant public returns(uint8 angelCardSeriesId, uint64 currentAngelTotal, uint basePrice, uint64 maxAngelTotal, uint8 baseAura, uint baseBattlePower, uint64 lastSellTime, uint64 liveTime) {\n', '        AngelCardSeries memory series = angelCardSeriesCollection[_angelCardSeriesId];\n', '        angelCardSeriesId = series.angelCardSeriesId;\n', '        currentAngelTotal = series.currentAngelTotal;\n', '        basePrice = series.basePrice;\n', '        maxAngelTotal = series.maxAngelTotal;\n', '        baseAura = uint8(series.baseAura);\n', '        baseBattlePower = series.baseBattlePower;\n', '        lastSellTime = series.lastSellTime;\n', '        liveTime = series.liveTime;\n', '    }\n', '\n', '\n', '    function getAngel(uint64 _angelId) constant public returns(uint64 angelId, uint8 angelCardSeriesId, uint16 battlePower, uint8 aura, uint16 experience, uint price, uint64 createdTime, uint64 lastBattleTime, uint64 lastVsBattleTime, uint16 lastBattleResult, address owner) {\n', '        Angel memory angel = angelCollection[_angelId];\n', '        angelId = angel.angelId;\n', '        angelCardSeriesId = angel.angelCardSeriesId;\n', '        battlePower = angel.battlePower;\n', '        aura = uint8(angel.aura);\n', '        experience = angel.experience;\n', '        price = angel.price;\n', '        createdTime = angel.createdTime;\n', '        lastBattleTime = angel.lastBattleTime;\n', '        lastVsBattleTime = angel.lastVsBattleTime;\n', '        lastBattleResult = angel.lastBattleResult;\n', '        owner = angel.owner;\n', '    }\n', '\n', '    function getOwnerAngelCount(address _owner) constant public returns(uint) {\n', '        return ownerAngelCollection[_owner].length;\n', '    }\n', '\n', '    function getAngelByIndex(address _owner, uint _index) constant public returns(uint64) {\n', '        if (_index >= ownerAngelCollection[_owner].length) {\n', '            return 0; }\n', '        return ownerAngelCollection[_owner][_index];\n', '    }\n', '\n', '    function getTotalAngelCardSeries() constant public returns (uint8) {\n', '        return totalAngelCardSeries;\n', '    }\n', '\n', '    function getTotalAngels() constant public returns (uint64) {\n', '        return totalAngels;\n', '    }\n', '}']