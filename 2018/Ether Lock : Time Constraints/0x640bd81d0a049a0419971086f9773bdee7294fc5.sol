['pragma solidity ^0.4.25;\n', '\n', '\n', 'contract Fast50plus {\n', '    //Address for marketing expences\n', '    address constant private MARKETING = 0x82770c9dE54e316a9eba378516A3314Bc17FAcbe;\n', '    //Percent for marketing expences\n', '    uint constant public MARKETING_PERCENT = 8;\n', '    uint constant public MAX_PERCENT = 110;\n', '    \n', '    struct Deposit {\n', '        address depositor; \n', '        uint128 deposit;  \n', '        uint128 expect;   \n', '    }\n', '\n', '    Deposit[] private queue;  \n', '    uint public currentReceiverIndex = 0;\n', '    \n', '    function () public payable {\n', '        if(msg.value > 0){\n', '            \n', '            require(gasleft() >= 220000);\n', '            require(msg.value <= 7.5 ether);\n', '            \n', '            queue.push(Deposit(msg.sender, uint128(msg.value), uint128(msg.value*MAX_PERCENT/100)));\n', '            uint promo = msg.value*MARKETING_PERCENT/100;\n', '            MARKETING.transfer(promo);\n', '            pay();\n', '        }\n', '    }\n', '    \n', '    function pay() private {\n', '        //Try to send all the money on contract to the first investors in line\n', '        uint128 money = uint128(address(this).balance);\n', '\n', '        //We will do cycle on the queue\n', '        for(uint i=0; i<queue.length; i++){\n', '\n', '            uint idx = currentReceiverIndex + i; \n', '\n', '            Deposit storage dep = queue[idx]; \n', '            if(money >= dep.expect){  \n', '                dep.depositor.transfer(dep.expect);\n', '                money -= dep.expect;   \n', '                delete queue[idx];\n', '            }else{\n', '                dep.depositor.transfer(money); \n', '                dep.expect -= money;      \n', '                break;                    \n', '            }\n', '\n', '            if(gasleft() <= 50000)         \n', '                break;                    \n', '        }\n', '\n', '        currentReceiverIndex += i;\n', '    }\n', '   \n', '    function getDeposit(uint idx) public view returns (address depositor, uint deposit, uint expect){\n', '        Deposit storage dep = queue[idx];\n', '        return (dep.depositor, dep.deposit, dep.expect);\n', '    }\n', '   \n', '    function getDepositsCount(address depositor) public view returns (uint) {\n', '        uint c = 0;\n', '        for(uint i=currentReceiverIndex; i<queue.length; ++i){\n', '            if(queue[i].depositor == depositor)\n', '                c++;\n', '        }\n', '        return c;\n', '    }\n', '    \n', '    function getDeposits(address depositor) public view returns (uint[] idxs, uint128[] deposits, uint128[] expects) {\n', '        uint c = getDepositsCount(depositor);\n', '\n', '        idxs = new uint[](c);\n', '        deposits = new uint128[](c);\n', '        expects = new uint128[](c);\n', '\n', '        if(c > 0) {\n', '            uint j = 0;\n', '            for(uint i=currentReceiverIndex; i<queue.length; ++i){\n', '                Deposit storage dep = queue[i];\n', '                if(dep.depositor == depositor){\n', '                    idxs[j] = i;\n', '                    deposits[j] = dep.deposit;\n', '                    expects[j] = dep.expect;\n', '                    j++;\n', '                }\n', '            }\n', '        }\n', '    }\n', '    \n', '    function getQueueLength() public view returns (uint) {\n', '        return queue.length - currentReceiverIndex;\n', '    }\n', '\n', '}']