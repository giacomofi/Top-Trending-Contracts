['pragma solidity ^0.4.18;\n', '\n', '// File: contracts/ReceivingContractCallback.sol\n', '\n', 'contract ReceivingContractCallback {\n', '\n', '  function tokenFallback(address _from, uint _value) public;\n', '\n', '}\n', '\n', '// File: contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/token/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts/token/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/token/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/token/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/LightcashCryptoToken.sol\n', '\n', 'contract LightcashCryptoToken is StandardToken, Ownable {\n', '\n', '  event Mint(address indexed to, uint256 amount);\n', '\n', '  event MintFinished();\n', '\n', "  string public constant name = 'Lightcash crypto';\n", '\n', "  string public constant symbol = 'LCSH';\n", '\n', '  uint32 public constant decimals = 18;\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  address public saleAgent;\n', '\n', '  mapping(address => bool) public authorized;\n', '\n', '  mapping(address => bool)  public registeredCallbacks;\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    return processCallback(super.transfer(_to, _value), msg.sender, _to, _value);\n', '  }\n', '\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '    return processCallback(super.transferFrom(from, to, value), from, to, value);\n', '  }\n', '\n', '  function setSaleAgent(address newSaleAgent) public {\n', '    require(saleAgent == msg.sender || owner == msg.sender);\n', '    saleAgent = newSaleAgent;\n', '  }\n', '\n', '  function mint(address _to, uint256 _amount) public returns (bool) {\n', '    require(!mintingFinished);\n', '    require(msg.sender == saleAgent);\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(address(0), _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  function finishMinting() public returns (bool) {\n', '    require(!mintingFinished);\n', '    require(msg.sender == owner || msg.sender == saleAgent);\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '\n', '  function registerCallback(address callback) public onlyOwner {\n', '    registeredCallbacks[callback] = true;\n', '  }\n', '\n', '  function deregisterCallback(address callback) public onlyOwner {\n', '    registeredCallbacks[callback] = false;\n', '  }\n', '\n', '  function processCallback(bool result, address from, address to, uint value) internal returns(bool) {\n', '    if (result && registeredCallbacks[to]) {\n', '      ReceivingContractCallback targetCallback = ReceivingContractCallback(to);\n', '      targetCallback.tokenFallback(from, value);\n', '    }\n', '    return result;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/CommonTokenEvent.sol\n', '\n', 'contract CommonTokenEvent is Ownable {\n', '\n', '  using SafeMath for uint;\n', '\n', '  uint public constant PERCENT_RATE = 100;\n', '\n', '  uint public price;\n', '\n', '  uint public start;\n', '\n', '  uint public period;\n', '\n', '  uint public minPurchaseLimit;\n', '\n', '  uint public minted;\n', '\n', '  uint public hardcap;\n', '\n', '  uint public invested;\n', '\n', '  uint public referrerPercent;\n', '\n', '  uint public maxReferrerTokens;\n', '\n', '  address public directMintAgent;\n', '\n', '  address public wallet;\n', '\n', '  LightcashCryptoToken public token;\n', '\n', '  modifier canMint() {\n', '    require(now >= start && now < lastSaleDate() && msg.value >= minPurchaseLimit && minted < hardcap);\n', '    _;\n', '  }\n', '\n', '  modifier onlyDirectMintAgentOrOwner() {\n', '    require(directMintAgent == msg.sender || owner == msg.sender);\n', '    _;\n', '  }\n', '\n', '  function sendReferrerTokens(uint tokens) internal {\n', '    if (msg.data.length == 20) {\n', '      address referrer = bytesToAddres(bytes(msg.data));\n', '      require(referrer != address(token) && referrer != msg.sender);\n', '      uint referrerTokens = tokens.mul(referrerPercent).div(PERCENT_RATE);\n', '      if(referrerTokens > maxReferrerTokens) {\n', '        referrerTokens = maxReferrerTokens;\n', '      }\n', '      mintAndSendTokens(referrer, referrerTokens);\n', '    }\n', '  }\n', '\n', '  function bytesToAddres(bytes source) internal pure returns(address) {\n', '    uint result;\n', '    uint mul = 1;\n', '    for (uint i = 20; i > 0; i--) {\n', '      result += uint8(source[i-1])*mul;\n', '      mul = mul*256;\n', '    }\n', '    return address(result);\n', '  }\n', '\n', '  function setMaxReferrerTokens(uint newMaxReferrerTokens) public onlyOwner {\n', '    maxReferrerTokens = newMaxReferrerTokens;\n', '  }\n', '\n', '  function setHardcap(uint newHardcap) public onlyOwner {\n', '    hardcap = newHardcap;\n', '  }\n', '\n', '  function setToken(address newToken) public onlyOwner {\n', '    token = LightcashCryptoToken(newToken);\n', '  }\n', '\n', '  function setReferrerPercent(uint newReferrerPercent) public onlyOwner {\n', '    referrerPercent = newReferrerPercent;\n', '  }\n', '\n', '  function setStart(uint newStart) public onlyOwner {\n', '    start = newStart;\n', '  }\n', '\n', '  function setPrice(uint newPrice) public onlyOwner {\n', '    price = newPrice;\n', '  }\n', '\n', '  function lastSaleDate() public view returns(uint) {\n', '    return start + period * 1 days;\n', '  }\n', '\n', '  function setMinPurchaseLimit(uint newMinPurchaseLimit) public onlyOwner {\n', '    minPurchaseLimit = newMinPurchaseLimit;\n', '  }\n', '\n', '  function setWallet(address newWallet) public onlyOwner {\n', '    wallet = newWallet;\n', '  }\n', '\n', '  function setDirectMintAgent(address newDirectMintAgent) public onlyOwner {\n', '    directMintAgent = newDirectMintAgent;\n', '  }\n', '\n', '  function directMint(address to, uint investedWei) public onlyDirectMintAgentOrOwner {\n', '    calculateAndTransferTokens(to, investedWei);\n', '  }\n', '\n', '  function directMintTokens(address to, uint count) public onlyDirectMintAgentOrOwner {\n', '    mintAndSendTokens(to, count);\n', '  }\n', '\n', '  function mintAndSendTokens(address to, uint amount) internal {\n', '    token.mint(to, amount);\n', '    minted = minted.add(amount);\n', '  }\n', '\n', '  function calculateAndTransferTokens(address to, uint investedInWei) internal returns(uint) {\n', '    uint tokens = calculateTokens(investedInWei);\n', '    mintAndSendTokens(to, tokens);\n', '    invested = invested.add(investedInWei);\n', '    return tokens;\n', '  }\n', '\n', '  function calculateAndTransferTokensWithReferrer(address to, uint investedInWei) internal {\n', '    uint tokens = calculateAndTransferTokens(to, investedInWei);\n', '    sendReferrerTokens(tokens);\n', '  }\n', '\n', '  function calculateTokens(uint investedInWei) public view returns(uint);\n', '\n', '  function createTokens() public payable;\n', '\n', '  function() external payable {\n', '    createTokens();\n', '  }\n', '\n', '  function retrieveTokens(address to, address anotherToken) public onlyOwner {\n', '    ERC20 alienToken = ERC20(anotherToken);\n', '    alienToken.transfer(to, alienToken.balanceOf(this));\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/PreTGE.sol\n', '\n', 'contract PreTGE is CommonTokenEvent {\n', '\n', '  uint public softcap;\n', '\n', '  bool public refundOn;\n', '\n', '  bool public softcapAchieved;\n', '\n', '  address public nextSaleAgent;\n', '\n', '  mapping (address => uint) public balances;\n', '\n', '  event RefundsEnabled();\n', '\n', '  event SoftcapReached();\n', '\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  function setPeriod(uint newPeriod) public onlyOwner {\n', '    period = newPeriod;\n', '  }\n', '\n', '  function calculateTokens(uint investedInWei) public view returns(uint) {\n', '    return investedInWei.mul(price).div(1 ether);\n', '  }\n', '\n', '  function setNextSaleAgent(address newNextSaleAgent) public onlyOwner {\n', '    nextSaleAgent = newNextSaleAgent;\n', '  }\n', '\n', '  function setSoftcap(uint newSoftcap) public onlyOwner {\n', '    softcap = newSoftcap;\n', '  }\n', '\n', '  function refund() public {\n', '    require(now > start && refundOn && balances[msg.sender] > 0);\n', '    uint value = balances[msg.sender];\n', '    balances[msg.sender] = 0;\n', '    msg.sender.transfer(value);\n', '    Refunded(msg.sender, value);\n', '  }\n', '\n', '  function widthraw() public {\n', '    require(softcapAchieved);\n', '    wallet.transfer(this.balance);\n', '  }\n', '\n', '  function createTokens() public payable canMint {\n', '    balances[msg.sender] = balances[msg.sender].add(msg.value);\n', '    super.calculateAndTransferTokensWithReferrer(msg.sender, msg.value);\n', '    if (!softcapAchieved && minted >= softcap) {\n', '      softcapAchieved = true;\n', '      SoftcapReached();\n', '    }\n', '  }\n', '\n', '  function finish() public onlyOwner {\n', '    if (!softcapAchieved) {\n', '      refundOn = true;\n', '      RefundsEnabled();\n', '    } else {\n', '      widthraw();\n', '      token.setSaleAgent(nextSaleAgent);\n', '    }\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/StagedTokenEvent.sol\n', '\n', 'contract StagedTokenEvent is CommonTokenEvent {\n', '\n', '  using SafeMath for uint;\n', '\n', '  struct Stage {\n', '    uint period;\n', '    uint discount;\n', '  }\n', '\n', '  uint public constant STAGES_PERCENT_RATE = 100;\n', '\n', '  Stage[] public stages;\n', '\n', '  function stagesCount() public constant returns(uint) {\n', '    return stages.length;\n', '  }\n', '\n', '  function addStage(uint stagePeriod, uint discount) public onlyOwner {\n', '    require(stagePeriod > 0);\n', '    stages.push(Stage(stagePeriod, discount));\n', '    period = period.add(stagePeriod);\n', '  }\n', '\n', '  function removeStage(uint8 number) public onlyOwner {\n', '    require(number >= 0 && number < stages.length);\n', '\n', '    Stage storage stage = stages[number];\n', '    period = period.sub(stage.period);\n', '\n', '    delete stages[number];\n', '\n', '    for (uint i = number; i < stages.length - 1; i++) {\n', '      stages[i] = stages[i+1];\n', '    }\n', '\n', '    stages.length--;\n', '  }\n', '\n', '  function changeStage(uint8 number, uint stagePeriod, uint discount) public onlyOwner {\n', '    require(number >= 0 && number < stages.length);\n', '\n', '    Stage storage stage = stages[number];\n', '\n', '    period = period.sub(stage.period);\n', '\n', '    stage.period = stagePeriod;\n', '    stage.discount = discount;\n', '\n', '    period = period.add(stagePeriod);\n', '  }\n', '\n', '  function insertStage(uint8 numberAfter, uint stagePeriod, uint discount) public onlyOwner {\n', '    require(numberAfter < stages.length);\n', '\n', '\n', '    period = period.add(stagePeriod);\n', '\n', '    stages.length++;\n', '\n', '    for (uint i = stages.length - 2; i > numberAfter; i--) {\n', '      stages[i + 1] = stages[i];\n', '    }\n', '\n', '    stages[numberAfter + 1] = Stage(period, discount);\n', '  }\n', '\n', '  function clearStages() public onlyOwner {\n', '    for (uint i = 0; i < stages.length; i++) {\n', '      delete stages[i];\n', '    }\n', '    stages.length -= stages.length;\n', '    period = 0;\n', '  }\n', '\n', '  function getDiscount() public constant returns(uint) {\n', '    uint prevTimeLimit = start;\n', '    for (uint i = 0; i < stages.length; i++) {\n', '      Stage storage stage = stages[i];\n', '      prevTimeLimit += stage.period * 1 days;\n', '      if (now < prevTimeLimit)\n', '        return stage.discount;\n', '    }\n', '    revert();\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/TGE.sol\n', '\n', 'contract TGE is StagedTokenEvent {\n', '\n', '  address public extraTokensWallet;\n', '\n', '  uint public extraTokensPercent;\n', '\n', '  bool public finished = false;\n', '\n', '  function setExtraTokensWallet(address newExtraTokensWallet) public onlyOwner {\n', '    extraTokensWallet = newExtraTokensWallet;\n', '  }\n', '\n', '  function setExtraTokensPercent(uint newExtraTokensPercent) public onlyOwner {\n', '    extraTokensPercent = newExtraTokensPercent;\n', '  }\n', '\n', '  function calculateTokens(uint investedInWei) public view returns(uint) {\n', '    return investedInWei.mul(price).mul(STAGES_PERCENT_RATE).div(STAGES_PERCENT_RATE.sub(getDiscount())).div(1 ether);\n', '  }\n', '\n', '  function finish() public onlyOwner {\n', '    require(!finished);\n', '    finished = true;\n', '    uint256 totalSupply = token.totalSupply();\n', '    uint allTokens = totalSupply.mul(PERCENT_RATE).div(PERCENT_RATE.sub(extraTokensPercent));\n', '    uint extraTokens = allTokens.mul(extraTokensPercent).div(PERCENT_RATE);\n', '    mintAndSendTokens(extraTokensWallet, extraTokens);\n', '  }\n', '\n', '  function createTokens() public payable canMint {\n', '    require(!finished);\n', '    wallet.transfer(msg.value);\n', '    calculateAndTransferTokensWithReferrer(msg.sender, msg.value);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/Deployer.sol\n', '\n', 'contract Deployer is Ownable {\n', '\n', '  LightcashCryptoToken public token;\n', '\n', '  PreTGE public preTGE;\n', '\n', '  TGE public tge;\n', '\n', '  function deploy() public onlyOwner {\n', '    token = new LightcashCryptoToken();\n', '\n', '    preTGE = new PreTGE();\n', '    preTGE.setPrice(7143000000000000000000);\n', '    preTGE.setMinPurchaseLimit(100000000000000000);\n', '    preTGE.setSoftcap(7142857000000000000000000);\n', '    preTGE.setHardcap(52500000000000000000000000);\n', '    preTGE.setStart(1517230800);\n', '    preTGE.setPeriod(11);\n', '    preTGE.setWallet(0xDFDCAc0c9Eb45C63Bcff91220A48684882F1DAd0);\n', '    preTGE.setMaxReferrerTokens(10000000000000000000000);\n', '    preTGE.setReferrerPercent(10);\n', '\n', '    tge = new TGE();\n', '    tge.setPrice(5000000000000000000000);\n', '    tge.setMinPurchaseLimit(10000000000000000);\n', '    tge.setHardcap(126000000000000000000000000);\n', '    tge.setStart(1517835600);\n', '    tge.setWallet(0x3aC45b49A4D3CB35022fd8122Fd865cd1B47932f);\n', '    tge.setExtraTokensWallet(0xF0e830148F3d1C4656770DAa282Fda6FAAA0Fe0B);\n', '    tge.setExtraTokensPercent(15);\n', '    tge.addStage(7, 20);\n', '    tge.addStage(7, 15);\n', '    tge.addStage(7, 10);\n', '    tge.addStage(1000, 5);\n', '    tge.setMaxReferrerTokens(10000000000000000000000);\n', '    tge.setReferrerPercent(10);\n', '\n', '    preTGE.setToken(token);\n', '    tge.setToken(token);\n', '    preTGE.setNextSaleAgent(tge);\n', '    token.setSaleAgent(preTGE);\n', '\n', '    address newOnwer = 0xF51E0a3a17990D41C5f1Ff1d0D772b26E4D6B6d0;\n', '    token.transferOwnership(newOnwer);\n', '    preTGE.transferOwnership(newOnwer);\n', '    tge.transferOwnership(newOnwer);\n', '  }\n', '\n', '}']