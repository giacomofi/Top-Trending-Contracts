['pragma solidity ^0.4.19;\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract HHRinterface {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool); \n', '}\n', 'contract HHRLocker is Ownable {\n', '    using SafeMath for uint;\n', '    uint lockTime;\n', '    uint[] frozenAmount=[7500000000000,3750000000000,1875000000000,937500000000,468750000000,234375000000,117187500000,58593750000,29296875000,0];\n', '    HHRinterface HHR;\n', '    \n', '    function HHRFallback(address _from, uint _value, uint _code){\n', '        \n', '    } //troll&#39;s trap\n', '    function getToken(uint _amount,address _to) onlyOwner {\n', '        uint deltaTime = now-lockTime;\n', '        uint yearNum = deltaTime.div(1 years);\n', '        if (_amount>frozenAmount[yearNum]){\n', '            revert();\n', '        }\n', '        else{\n', '            HHR.transfer(_to,_amount);\n', '        }        \n', '    }\n', '    function setLockTime() onlyOwner {\n', '        lockTime=now;\n', '    }\n', '    function HHRLocker(){\n', '        lockTime = now;\n', '    }\n', '    function cashOut(uint amount) onlyOwner{\n', '        HHR.transfer(owner,amount);\n', '    }\n', '    function setHHRAddress(address HHRAddress) onlyOwner{\n', '        HHR = HHRinterface(HHRAddress);\n', '    }\n', '}']
['pragma solidity ^0.4.19;\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract HHRinterface {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool); \n', '}\n', 'contract HHRLocker is Ownable {\n', '    using SafeMath for uint;\n', '    uint lockTime;\n', '    uint[] frozenAmount=[7500000000000,3750000000000,1875000000000,937500000000,468750000000,234375000000,117187500000,58593750000,29296875000,0];\n', '    HHRinterface HHR;\n', '    \n', '    function HHRFallback(address _from, uint _value, uint _code){\n', '        \n', "    } //troll's trap\n", '    function getToken(uint _amount,address _to) onlyOwner {\n', '        uint deltaTime = now-lockTime;\n', '        uint yearNum = deltaTime.div(1 years);\n', '        if (_amount>frozenAmount[yearNum]){\n', '            revert();\n', '        }\n', '        else{\n', '            HHR.transfer(_to,_amount);\n', '        }        \n', '    }\n', '    function setLockTime() onlyOwner {\n', '        lockTime=now;\n', '    }\n', '    function HHRLocker(){\n', '        lockTime = now;\n', '    }\n', '    function cashOut(uint amount) onlyOwner{\n', '        HHR.transfer(owner,amount);\n', '    }\n', '    function setHHRAddress(address HHRAddress) onlyOwner{\n', '        HHR = HHRinterface(HHRAddress);\n', '    }\n', '}']
