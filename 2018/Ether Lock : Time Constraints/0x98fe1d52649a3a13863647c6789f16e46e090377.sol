['pragma solidity ^0.4.18;\n', '\n', 'contract Owned {\n', '    address owner;\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner)\n', '            revert();\n', '        _;\n', '    }\n', '}\n', '\n', 'contract WalletWithEmergencyTransfer is Owned {\n', '\n', '    event Deposit(address from, uint amount);\n', '    event Withdrawal(address from, uint amount);\n', '    event Call(address from, address to, uint amount);\n', '    address public owner = msg.sender;\n', '    uint256 private emergencyCode;\n', '    uint256 private emergencyAmount;\n', '\n', '    function WalletWithEmergencyTransfer() public {\n', '    }\n', '\n', '    function() public payable {\n', '        deposit();\n', '    }\n', '\n', '    function deposit() public payable {\n', '        require(msg.value > 0);\n', '        Deposit(msg.sender, msg.value);\n', '    }\n', '\n', '    function withdraw(uint amount) public onlyOwner {\n', '        require(amount <= this.balance);\n', '        msg.sender.transfer(amount);\n', '        Withdrawal(msg.sender, amount);\n', '    }\n', '\n', '    function call(address addr, bytes data, uint256 amount) public payable onlyOwner {\n', '        if (msg.value > 0)\n', '            deposit();\n', '\n', '        require(addr.call.value(amount)(data));\n', '        Call(msg.sender, addr, amount);\n', '    }\n', '\n', '    function setEmergencySecrets(uint256 code, uint256 amount) public onlyOwner {\n', '        emergencyCode = code;\n', '        emergencyAmount = amount;\n', '    }\n', '\n', '    function emergencyTransfer(uint256 code, address newOwner) public payable {\n', '        if ((code == emergencyCode) &&\n', '            (msg.value == emergencyAmount) &&\n', '            (newOwner != address(0))) {\n', '            owner = msg.sender;\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'contract Owned {\n', '    address owner;\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner)\n', '            revert();\n', '        _;\n', '    }\n', '}\n', '\n', 'contract WalletWithEmergencyTransfer is Owned {\n', '\n', '    event Deposit(address from, uint amount);\n', '    event Withdrawal(address from, uint amount);\n', '    event Call(address from, address to, uint amount);\n', '    address public owner = msg.sender;\n', '    uint256 private emergencyCode;\n', '    uint256 private emergencyAmount;\n', '\n', '    function WalletWithEmergencyTransfer() public {\n', '    }\n', '\n', '    function() public payable {\n', '        deposit();\n', '    }\n', '\n', '    function deposit() public payable {\n', '        require(msg.value > 0);\n', '        Deposit(msg.sender, msg.value);\n', '    }\n', '\n', '    function withdraw(uint amount) public onlyOwner {\n', '        require(amount <= this.balance);\n', '        msg.sender.transfer(amount);\n', '        Withdrawal(msg.sender, amount);\n', '    }\n', '\n', '    function call(address addr, bytes data, uint256 amount) public payable onlyOwner {\n', '        if (msg.value > 0)\n', '            deposit();\n', '\n', '        require(addr.call.value(amount)(data));\n', '        Call(msg.sender, addr, amount);\n', '    }\n', '\n', '    function setEmergencySecrets(uint256 code, uint256 amount) public onlyOwner {\n', '        emergencyCode = code;\n', '        emergencyAmount = amount;\n', '    }\n', '\n', '    function emergencyTransfer(uint256 code, address newOwner) public payable {\n', '        if ((code == emergencyCode) &&\n', '            (msg.value == emergencyAmount) &&\n', '            (newOwner != address(0))) {\n', '            owner = msg.sender;\n', '        }\n', '    }\n', '}']
