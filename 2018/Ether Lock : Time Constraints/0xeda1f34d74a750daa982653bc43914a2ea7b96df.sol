['pragma solidity ^0.4.18;\n', '\n', '\n', 'interface ERC20 {\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '}\n', '\n', 'interface TokenConfigInterface {\n', '    function admin() public returns(address);\n', '    function claimAdmin() public;\n', '    function transferAdminQuickly(address newAdmin) public;\n', '\n', '    // network\n', '    function listPairForReserve(address reserve, address src, address dest, bool add) public;\n', '\n', '    // reserve\n', '    function approveWithdrawAddress(address token, address addr, bool approve) public;\n', '    function withdrawToken(address token, uint amount, address sendTo) external;\n', '    function withdrawEther(uint amount, address sendTo) external;\n', '\n', '    // conversion rate\n', '    function addToken(address token) public;\n', '    function enableTokenTrade(address token) public;\n', '    function setTokenControlInfo(\n', '        address token,\n', '        uint minimalRecordResolution,\n', '        uint maxPerBlockImbalance,\n', '        uint maxTotalImbalance\n', '    ) public;\n', '    function setQtyStepFunction(\n', '        ERC20 token,\n', '        int[] xBuy,\n', '        int[] yBuy,\n', '        int[] xSell,\n', '        int[] ySell\n', '    ) public;\n', '\n', '    function setImbalanceStepFunction(\n', '        ERC20 token,\n', '        int[] xBuy,\n', '        int[] yBuy,\n', '        int[] xSell,\n', '        int[] ySell\n', '    ) public;\n', '}\n', '\n', '\n', 'contract TokenAdder {\n', '    TokenConfigInterface public network;\n', '    TokenConfigInterface public reserve;\n', '    TokenConfigInterface public conversionRate;\n', '    address public multisigAddress;\n', '    address public withdrawAddress;\n', '    address public ETH = 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee;\n', '    ERC20 public ENG = ERC20(0xf0ee6b27b759c9893ce4f094b49ad28fd15a23e4);\n', '    ERC20 public SALT = ERC20(0x4156D3342D5c385a87D264F90653733592000581);\n', '    ERC20 public APPC = ERC20(0x1a7a8bd9106f2b8d977e08582dc7d24c723ab0db);\n', '    ERC20 public RDN = ERC20(0x255aa6df07540cb5d3d297f0d0d4d84cb52bc8e6);\n', '    ERC20 public OMG = ERC20(0xd26114cd6EE289AccF82350c8d8487fedB8A0C07);\n', '    ERC20 public KNC = ERC20(0xdd974D5C2e2928deA5F71b9825b8b646686BD200);\n', '    ERC20 public EOS = ERC20(0x86Fa049857E0209aa7D9e616F7eb3b3B78ECfdb0);\n', '    ERC20 public SNT = ERC20(0x744d70fdbe2ba4cf95131626614a1763df805b9e);\n', '    ERC20 public ELF = ERC20(0xbf2179859fc6d5bee9bf9158632dc51678a4100e);\n', '    ERC20 public POWR = ERC20(0x595832f8fc6bf59c85c527fec3740a1b7a361269);\n', '    ERC20 public MANA = ERC20(0x0f5d2fb29fb7d3cfee444a200298f468908cc942);\n', '    ERC20 public BAT = ERC20(0x0d8775f648430679a709e98d2b0cb6250d2887ef);\n', '    ERC20 public REQ = ERC20(0x8f8221afbb33998d8584a2b05749ba73c37a938a);\n', '    ERC20 public GTO = ERC20(0xc5bbae50781be1669306b9e001eff57a2957b09d);\n', '\n', '    address[] public newTokens = [\n', '        ENG,\n', '        SALT,\n', '        APPC,\n', '        RDN];\n', '    int[] zeroArray;\n', '\n', '    function TokenAdder(TokenConfigInterface _network,\n', '                        TokenConfigInterface _reserve,\n', '                        TokenConfigInterface _conversionRate,\n', '                        address              _withdrawAddress,\n', '                        address              _multisigAddress) public {\n', '\n', '        network = _network;\n', '        reserve = _reserve;\n', '        conversionRate = _conversionRate;\n', '        withdrawAddress = _withdrawAddress;\n', '        multisigAddress = _multisigAddress;\n', '    }\n', '\n', '    function listPairs() public {\n', '        address orgAdmin = network.admin();\n', '        network.claimAdmin();\n', '\n', '        for( uint i = 0 ; i < newTokens.length ; i++ ) {\n', '            network.listPairForReserve(reserve,ETH,newTokens[i],true);\n', '            network.listPairForReserve(reserve,newTokens[i],ETH,true);\n', '        }\n', '\n', '        network.transferAdminQuickly(orgAdmin);\n', '        require(orgAdmin == network.admin());\n', '    }\n', '\n', '    function approveWithdrawAddress() public {\n', '        address orgAdmin = reserve.admin();\n', '        reserve.claimAdmin();\n', '\n', '        for( uint i = 0 ; i < newTokens.length ; i++ ) {\n', '            reserve.approveWithdrawAddress(newTokens[i], withdrawAddress, true);\n', '        }\n', '\n', '\n', '        reserve.transferAdminQuickly(orgAdmin);\n', '        require(orgAdmin == reserve.admin());\n', '    }\n', '\n', '    function addTokens() public {\n', '        address orgAdmin = conversionRate.admin();\n', '        conversionRate.claimAdmin();\n', '\n', '        conversionRate.setTokenControlInfo(\n', '            RDN,\n', '            1000000000000000,\n', '            2191833834271476809728,\n', '            3001716436034787475456 );\n', '\n', '        conversionRate.setTokenControlInfo(\n', '            APPC,\n', '            1000000000000000,\n', '            8346369318913311768576,\n', '            11430352782251779948544 );\n', '\n', '        conversionRate.setTokenControlInfo(\n', '            ENG,\n', '            10000,\n', '            245309013986,\n', '            335950694654 );\n', '\n', '        conversionRate.setTokenControlInfo(\n', '            SALT,\n', '            10000,\n', '            117682709761,\n', '            117682709761 );\n', '\n', '        zeroArray.length = 0;\n', '        zeroArray.push(int(0));\n', '        for( uint i = 0 ; i < newTokens.length ; i++ ) {\n', '            conversionRate.addToken(newTokens[i]);\n', '            conversionRate.enableTokenTrade(newTokens[i]);\n', '/*\n', '            conversionRate.setQtyStepFunction(ERC20(newTokens[i]),\n', '                                              zeroArray,\n', '                                              zeroArray,\n', '                                              zeroArray,\n', '                                              zeroArray);\n', '\n', '            conversionRate.setImbalanceStepFunction(ERC20(newTokens[i]),\n', '                                              zeroArray,\n', '                                              zeroArray,\n', '                                              zeroArray,\n', '                                              zeroArray);\n', '*/                                              \n', '        }\n', '\n', '        conversionRate.transferAdminQuickly(orgAdmin);\n', '        require(orgAdmin == conversionRate.admin());\n', '    }\n', '\n', '    function tranferToReserve() public {\n', '        ENG.transferFrom(multisigAddress,reserve,790805150356);\n', '        RDN.transferFrom(multisigAddress,reserve,5991690723304920842240);\n', '        APPC.transferFrom(multisigAddress,reserve,28294946522551069704192);\n', '        SALT.transferFrom(multisigAddress,reserve,512404807997);\n', '    }\n', '\n', '    function withdrawToMultisig() public {\n', '        address orgAdmin = reserve.admin();\n', '        reserve.claimAdmin();\n', '\n', '        reserve.withdrawToken(OMG,579712353000204795904,multisigAddress);\n', '        //reserve.withdrawToken(KNC,0,multisigAddress);\n', '        reserve.withdrawToken(EOS,404333617684274479104,multisigAddress);\n', '        //reserve.withdrawToken(SNT,0,multisigAddress);\n', '        reserve.withdrawToken(ELF,2851672250969491505152,multisigAddress);\n', '        //reserve.withdrawToken(POWR,0,multisigAddress);\n', '        reserve.withdrawToken(MANA,18906283885644627312640,multisigAddress);\n', '        reserve.withdrawToken(BAT,5034264918417995726848,multisigAddress);\n', '        reserve.withdrawToken(REQ,6848892587322741096448,multisigAddress);\n', '        reserve.withdrawToken(GTO,3232686829,multisigAddress);\n', '\n', '\n', '        reserve.transferAdminQuickly(orgAdmin);\n', '        require(orgAdmin == reserve.admin());\n', '    }\n', '}']