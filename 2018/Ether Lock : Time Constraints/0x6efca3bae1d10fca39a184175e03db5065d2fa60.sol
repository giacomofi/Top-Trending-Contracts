['pragma solidity ^0.4.23;\n', '\n', '/*\n', '\n', '\n', '    (   )\n', '  (   ) (\n', '   ) _   )\n', '    ( \\_\n', '  _(_\\ \\)__\n', ' (____\\___)) \n', ' \n', ' \n', '*/\n', '\n', '\n', '// similar to ShrimpFarmer, with eight changes:\n', '// 1. one third of your ShitClones die when you sell your time\n', '// 2. the ownership of the devfee can transfer through sacrificing ShitClones\n', '//  a. the new requirement will be how many remaining ShitClones you have after the sacrifice\n', '//  b. you cannot sacrifice ShitClones if you are the ShitClonesLord\n', '// 3. the "free" 500 ShitClones cost 0.001 eth (in line with the mining fee)\n', '// bots should have a harder time, and whales can compete for the devfee\n', '// 4. UI is for peasants, this is mew sniper territory. Step away to a safe distance.\n', '// 5. I made some changes to the contract that might have fucked it, or not.\n', '// https://bit.ly/2xc8v53\n', '// 6. Join our discord @ https://discord.gg/RbgqjPd\n', '// 7. Let&#39;s stop creating these and move on. M&#39;kay?\n', '// 8. Drops the mic.\n', '\n', 'contract ShitCloneFarmer {\n', '\n', '    uint256 public TIME_TO_MAKE_1_SHITCLONE = 86400;\n', '    uint256 public STARTING_SHITCLONE = 100;\n', '    uint256 PSN = 10000;\n', '    uint256 PSNH = 5000;\n', '    bool public initialized = true;\n', '    address public ShitCloneslordAddress;\n', '    uint256 public ShitCloneslordReq = 500000; // starts at 500k ShitClones\n', '    mapping (address => uint256) public ballShitClone;\n', '    mapping (address => uint256) public claimedTime;\n', '    mapping (address => uint256) public lastEvent;\n', '    mapping (address => address) public referrals;\n', '    uint256 public marketTime;\n', '\n', '    function ShitCloneFarmer() public {\n', '        ShitCloneslordAddress = msg.sender;\n', '    }\n', '\n', '    function makeShitClone(address ref) public {\n', '        require(initialized);\n', '\n', '        if (referrals[msg.sender] == 0 && referrals[msg.sender] != msg.sender) {\n', '            referrals[msg.sender] = ref;\n', '        }\n', '\n', '        uint256 timeUsed = getMyTime();\n', '        uint256 newShitClone = SafeMath.div(timeUsed, TIME_TO_MAKE_1_SHITCLONE);\n', '        ballShitClone[msg.sender] = SafeMath.add(ballShitClone[msg.sender], newShitClone);\n', '        claimedTime[msg.sender] = 0;\n', '        lastEvent[msg.sender] = now;\n', '        \n', '        // send referral time\n', '        claimedTime[referrals[msg.sender]] = SafeMath.add(claimedTime[referrals[msg.sender]], SafeMath.div(timeUsed, 5)); // +20%\n', '        \n', '        // boost market to prevent sprem hoarding\n', '        marketTime = SafeMath.add(marketTime, SafeMath.div(timeUsed, 10)); // +10%\n', '    }\n', '\n', '    function sellShitClones() public {\n', '        require(initialized);\n', '\n', '        uint256 cellCount = getMyTime();\n', '        uint256 cellValue = calculateCellSell(cellCount);\n', '        uint256 fee = devFee(cellValue);\n', '        \n', '        // one third of your ShitClones die :&#39;(\n', '        ballShitClone[msg.sender] = SafeMath.mul(SafeMath.div(ballShitClone[msg.sender], 3), 2); // =66%\n', '        claimedTime[msg.sender] = 0;\n', '        lastEvent[msg.sender] = now;\n', '\n', '        // put them on the market\n', '        marketTime = SafeMath.add(marketTime, cellCount);\n', '\n', '        // ALL HAIL THE SHITCLONELORD!\n', '        ShitCloneslordAddress.transfer(fee);\n', '        msg.sender.transfer(SafeMath.sub(cellValue, fee));\n', '    }\n', '\n', '    function buyShitClones() public payable {\n', '        require(initialized);\n', '\n', '        uint256 timeBought = calculateCellBuy(msg.value, SafeMath.sub(this.balance, msg.value));\n', '        timeBought = SafeMath.sub(timeBought, devFee(timeBought));\n', '        claimedTime[msg.sender] = SafeMath.add(claimedTime[msg.sender], timeBought);\n', '\n', '        // ALL HAIL THE SHITCLONELORD!\n', '        ShitCloneslordAddress.transfer(devFee(msg.value));\n', '    }\n', '\n', '    // magic trade balancing algorithm\n', '    function calculateTrade(uint256 rt, uint256 rs, uint256 bs) public view returns(uint256) {\n', '        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n', '        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n', '    }\n', '\n', '    function calculateCellSell(uint256 time) public view returns(uint256) {\n', '        return calculateTrade(time, marketTime, this.balance);\n', '    }\n', '\n', '    function calculateCellBuy(uint256 eth, uint256 contractBalance) public view returns(uint256) {\n', '        return calculateTrade(eth, contractBalance, marketTime);\n', '    }\n', '\n', '    function calculateCellBuySimple(uint256 eth) public view returns(uint256) {\n', '        return calculateCellBuy(eth, this.balance);\n', '    }\n', '\n', '    function devFee(uint256 amount) public view returns(uint256) {\n', '        return SafeMath.div(SafeMath.mul(amount, 4), 100); // 4%\n', '    }\n', '\n', '    function seedMarket(uint256 time) public payable {\n', '        require(marketTime == 0);\n', '        require(ShitCloneslordAddress == msg.sender);\n', '        marketTime = time;\n', '    }\n', '\n', '    function getFreeShitClone() public payable {\n', '        require(initialized);\n', '        require(msg.value == 0.001 ether); // similar to mining fee, prevents bots\n', '        ShitCloneslordAddress.transfer(msg.value); // the ShitCloneslord gets the entry fee ;)\n', '\n', '        require(ballShitClone[msg.sender] == 0);\n', '        lastEvent[msg.sender] = now;\n', '        ballShitClone[msg.sender] = STARTING_SHITCLONE;\n', '    }\n', '\n', '    function getBalance() public view returns(uint256) {\n', '        return this.balance;\n', '    }\n', '\n', '    function getMyShitClone() public view returns(uint256) {\n', '        return ballShitClone[msg.sender];\n', '    }\n', '\n', '    function becomeShitClonelord() public {\n', '        require(initialized);\n', '        require(msg.sender != ShitCloneslordAddress);\n', '        require(ballShitClone[msg.sender] >= ShitCloneslordReq);\n', '\n', '        ballShitClone[msg.sender] = SafeMath.sub(ballShitClone[msg.sender], ShitCloneslordReq);\n', '        ShitCloneslordReq = ballShitClone[msg.sender]; // the requirement now becomes the balance at that time\n', '        ShitCloneslordAddress = msg.sender;\n', '    }\n', '\n', '    function getShitClonelordReq() public view returns(uint256) {\n', '        return ShitCloneslordReq;\n', '    }\n', '\n', '    function getMyTime() public view returns(uint256) {\n', '        return SafeMath.add(claimedTime[msg.sender], getTimeSinceLastEvent(msg.sender));\n', '    }\n', '\n', '    function getTimeSinceLastEvent(address adr) public view returns(uint256) {\n', '        uint256 secondsPassed = min(TIME_TO_MAKE_1_SHITCLONE, SafeMath.sub(now, lastEvent[adr]));\n', '        return SafeMath.mul(secondsPassed, ballShitClone[adr]);\n', '    }\n', '\n', '    function min(uint256 a, uint256 b) private pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '/*\n', '\n', '\n', '    (   )\n', '  (   ) (\n', '   ) _   )\n', '    ( \\_\n', '  _(_\\ \\)__\n', ' (____\\___)) \n', ' \n', ' \n', '*/\n', '\n', '\n', '// similar to ShrimpFarmer, with eight changes:\n', '// 1. one third of your ShitClones die when you sell your time\n', '// 2. the ownership of the devfee can transfer through sacrificing ShitClones\n', '//  a. the new requirement will be how many remaining ShitClones you have after the sacrifice\n', '//  b. you cannot sacrifice ShitClones if you are the ShitClonesLord\n', '// 3. the "free" 500 ShitClones cost 0.001 eth (in line with the mining fee)\n', '// bots should have a harder time, and whales can compete for the devfee\n', '// 4. UI is for peasants, this is mew sniper territory. Step away to a safe distance.\n', '// 5. I made some changes to the contract that might have fucked it, or not.\n', '// https://bit.ly/2xc8v53\n', '// 6. Join our discord @ https://discord.gg/RbgqjPd\n', "// 7. Let's stop creating these and move on. M'kay?\n", '// 8. Drops the mic.\n', '\n', 'contract ShitCloneFarmer {\n', '\n', '    uint256 public TIME_TO_MAKE_1_SHITCLONE = 86400;\n', '    uint256 public STARTING_SHITCLONE = 100;\n', '    uint256 PSN = 10000;\n', '    uint256 PSNH = 5000;\n', '    bool public initialized = true;\n', '    address public ShitCloneslordAddress;\n', '    uint256 public ShitCloneslordReq = 500000; // starts at 500k ShitClones\n', '    mapping (address => uint256) public ballShitClone;\n', '    mapping (address => uint256) public claimedTime;\n', '    mapping (address => uint256) public lastEvent;\n', '    mapping (address => address) public referrals;\n', '    uint256 public marketTime;\n', '\n', '    function ShitCloneFarmer() public {\n', '        ShitCloneslordAddress = msg.sender;\n', '    }\n', '\n', '    function makeShitClone(address ref) public {\n', '        require(initialized);\n', '\n', '        if (referrals[msg.sender] == 0 && referrals[msg.sender] != msg.sender) {\n', '            referrals[msg.sender] = ref;\n', '        }\n', '\n', '        uint256 timeUsed = getMyTime();\n', '        uint256 newShitClone = SafeMath.div(timeUsed, TIME_TO_MAKE_1_SHITCLONE);\n', '        ballShitClone[msg.sender] = SafeMath.add(ballShitClone[msg.sender], newShitClone);\n', '        claimedTime[msg.sender] = 0;\n', '        lastEvent[msg.sender] = now;\n', '        \n', '        // send referral time\n', '        claimedTime[referrals[msg.sender]] = SafeMath.add(claimedTime[referrals[msg.sender]], SafeMath.div(timeUsed, 5)); // +20%\n', '        \n', '        // boost market to prevent sprem hoarding\n', '        marketTime = SafeMath.add(marketTime, SafeMath.div(timeUsed, 10)); // +10%\n', '    }\n', '\n', '    function sellShitClones() public {\n', '        require(initialized);\n', '\n', '        uint256 cellCount = getMyTime();\n', '        uint256 cellValue = calculateCellSell(cellCount);\n', '        uint256 fee = devFee(cellValue);\n', '        \n', "        // one third of your ShitClones die :'(\n", '        ballShitClone[msg.sender] = SafeMath.mul(SafeMath.div(ballShitClone[msg.sender], 3), 2); // =66%\n', '        claimedTime[msg.sender] = 0;\n', '        lastEvent[msg.sender] = now;\n', '\n', '        // put them on the market\n', '        marketTime = SafeMath.add(marketTime, cellCount);\n', '\n', '        // ALL HAIL THE SHITCLONELORD!\n', '        ShitCloneslordAddress.transfer(fee);\n', '        msg.sender.transfer(SafeMath.sub(cellValue, fee));\n', '    }\n', '\n', '    function buyShitClones() public payable {\n', '        require(initialized);\n', '\n', '        uint256 timeBought = calculateCellBuy(msg.value, SafeMath.sub(this.balance, msg.value));\n', '        timeBought = SafeMath.sub(timeBought, devFee(timeBought));\n', '        claimedTime[msg.sender] = SafeMath.add(claimedTime[msg.sender], timeBought);\n', '\n', '        // ALL HAIL THE SHITCLONELORD!\n', '        ShitCloneslordAddress.transfer(devFee(msg.value));\n', '    }\n', '\n', '    // magic trade balancing algorithm\n', '    function calculateTrade(uint256 rt, uint256 rs, uint256 bs) public view returns(uint256) {\n', '        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n', '        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n', '    }\n', '\n', '    function calculateCellSell(uint256 time) public view returns(uint256) {\n', '        return calculateTrade(time, marketTime, this.balance);\n', '    }\n', '\n', '    function calculateCellBuy(uint256 eth, uint256 contractBalance) public view returns(uint256) {\n', '        return calculateTrade(eth, contractBalance, marketTime);\n', '    }\n', '\n', '    function calculateCellBuySimple(uint256 eth) public view returns(uint256) {\n', '        return calculateCellBuy(eth, this.balance);\n', '    }\n', '\n', '    function devFee(uint256 amount) public view returns(uint256) {\n', '        return SafeMath.div(SafeMath.mul(amount, 4), 100); // 4%\n', '    }\n', '\n', '    function seedMarket(uint256 time) public payable {\n', '        require(marketTime == 0);\n', '        require(ShitCloneslordAddress == msg.sender);\n', '        marketTime = time;\n', '    }\n', '\n', '    function getFreeShitClone() public payable {\n', '        require(initialized);\n', '        require(msg.value == 0.001 ether); // similar to mining fee, prevents bots\n', '        ShitCloneslordAddress.transfer(msg.value); // the ShitCloneslord gets the entry fee ;)\n', '\n', '        require(ballShitClone[msg.sender] == 0);\n', '        lastEvent[msg.sender] = now;\n', '        ballShitClone[msg.sender] = STARTING_SHITCLONE;\n', '    }\n', '\n', '    function getBalance() public view returns(uint256) {\n', '        return this.balance;\n', '    }\n', '\n', '    function getMyShitClone() public view returns(uint256) {\n', '        return ballShitClone[msg.sender];\n', '    }\n', '\n', '    function becomeShitClonelord() public {\n', '        require(initialized);\n', '        require(msg.sender != ShitCloneslordAddress);\n', '        require(ballShitClone[msg.sender] >= ShitCloneslordReq);\n', '\n', '        ballShitClone[msg.sender] = SafeMath.sub(ballShitClone[msg.sender], ShitCloneslordReq);\n', '        ShitCloneslordReq = ballShitClone[msg.sender]; // the requirement now becomes the balance at that time\n', '        ShitCloneslordAddress = msg.sender;\n', '    }\n', '\n', '    function getShitClonelordReq() public view returns(uint256) {\n', '        return ShitCloneslordReq;\n', '    }\n', '\n', '    function getMyTime() public view returns(uint256) {\n', '        return SafeMath.add(claimedTime[msg.sender], getTimeSinceLastEvent(msg.sender));\n', '    }\n', '\n', '    function getTimeSinceLastEvent(address adr) public view returns(uint256) {\n', '        uint256 secondsPassed = min(TIME_TO_MAKE_1_SHITCLONE, SafeMath.sub(now, lastEvent[adr]));\n', '        return SafeMath.mul(secondsPassed, ballShitClone[adr]);\n', '    }\n', '\n', '    function min(uint256 a, uint256 b) private pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
