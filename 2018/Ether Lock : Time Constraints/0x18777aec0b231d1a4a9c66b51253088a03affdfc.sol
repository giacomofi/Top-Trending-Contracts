['pragma solidity ^0.4.21;\n', '\n', 'contract LuckchemyCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    //  Token for selling\n', '    LuckchemyToken public token;\n', '\n', '    /*\n', '    *  Start and End date of investment process\n', '    */\n', '\n', '    // 2018-04-30 00:00:00 GMT - start time for public sale\n', '    uint256 public constant START_TIME_SALE = 1525046400;\n', '\n', '    // 2018-07-20 23:59:59 GMT - end time for public sale\n', '    uint256 public constant END_TIME_SALE = 1532131199;\n', '\n', '    // 2018-04-02 00:00:00 GMT - start time for private sale\n', '    uint256 public constant START_TIME_PRESALE = 1522627200;\n', '\n', '    // 2018-04-24 23:59:59 GMT - end time for private sale\n', '    uint256 public constant END_TIME_PRESALE = 1524614399;\n', '\n', '\n', '    // amount of already sold tokens\n', '    uint256 public tokensSold = 0;\n', '\n', '    //supply for crowdSale\n', '    uint256 public totalSupply = 0;\n', '    // hard cap\n', '    uint256 public constant hardCap = 45360 ether;\n', '    // soft cap\n', '    uint256 public constant softCap = 2000 ether;\n', '\n', '    // wei representation of collected fiat\n', '    uint256 public fiatBalance = 0;\n', '    // ether collected in wei\n', '    uint256 public ethBalance = 0;\n', '\n', '    //address of serviceAgent (it can calls  payFiat function)\n', '    address public serviceAgent;\n', '\n', '    // owner of the contract\n', '    address public owner;\n', '\n', '    //default token rate\n', '    uint256 public constant RATE = 12500; // Token price in ETH - 0.00008 ETH  1 ETHER = 12500 tokens\n', '\n', '    // 2018/04/30 - 2018/07/22  \n', '    uint256 public constant DISCOUNT_PRIVATE_PRESALE = 80; // 80 % discount\n', '\n', '    // 2018/04/30 - 2018/07/20\n', '    uint256 public constant DISCOUNT_STAGE_ONE = 40;  // 40% discount\n', '\n', '    // 2018/04/02 - 2018/04/24   \n', '    uint256 public constant DISCOUNT_STAGE_TWO = 20; // 20% discount\n', '\n', '    // 2018/04/30 - 2018/07/22  \n', '    uint256 public constant DISCOUNT_STAGE_THREE = 0;\n', '\n', '\n', '\n', '\n', '    //White list of addresses that are allowed to by a token\n', '    mapping(address => bool) public whitelist;\n', '\n', '\n', '    /**\n', '     * List of addresses for ICO fund with shares in %\n', '     * \n', '     */\n', '    uint256 public constant LOTTERY_FUND_SHARE = 40;\n', '    uint256 public constant OPERATIONS_SHARE = 50;\n', '    uint256 public constant PARTNERS_SHARE = 10;\n', '\n', '    address public constant LOTTERY_FUND_ADDRESS = 0x84137CB59076a61F3f94B2C39Da8fbCb63B6f096;\n', '    address public constant OPERATIONS_ADDRESS = 0xEBBeAA0699837De527B29A03ECC914159D939Eea;\n', '    address public constant PARTNERS_ADDRESS = 0x820502e8c80352f6e11Ce036DF03ceeEBE002642;\n', '\n', '    /**\n', '     * event for token ETH purchase  logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenETHPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '    /**\n', '     * event for token FIAT purchase  logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenFiatPurchase(address indexed purchaser, address indexed beneficiary, uint256 amount);\n', '\n', '    /*\n', '     * modifier which gives specific rights to owner\n', '     */\n', '    modifier onlyOwner(){\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    /*\n', '     * modifier which gives possibility to call payFiat function\n', '     */\n', '    modifier onlyServiceAgent(){\n', '        require(msg.sender == serviceAgent);\n', '        _;\n', '    }\n', '\n', '    /*\n', '    *\n', '    *modifier which gives possibility to purchase\n', '    *\n', '    */\n', '    modifier onlyWhiteList(address _address){\n', '        require(whitelist[_address] == true);\n', '        _;\n', '    }\n', '    /*\n', '     * Enum which defines stages of ICO\n', '    */\n', '\n', '    enum Stage {\n', '        Private,\n', '        Discount40,\n', '        Discount20,\n', '        NoDiscount\n', '    }\n', '\n', '    //current stage\n', '    Stage public  currentStage;\n', '\n', '    //pools of token for each stage\n', '    mapping(uint256 => uint256) public tokenPools;\n', '\n', '    //number of tokens per 1 ether for each stage\n', '    mapping(uint256 => uint256) public stageRates;\n', '\n', '    /*\n', '    * deposit is amount in wei , which was sent to the contract\n', '    * @ address - address of depositor\n', '    * @ uint256 - amount\n', '    */\n', '    mapping(address => uint256) public deposits;\n', '\n', '    /* \n', '    * constructor of contract \n', '    *  @ _service- address which has rights to call payFiat\n', '    */\n', '    function LuckchemyCrowdsale(address _service) public {\n', '        require(START_TIME_SALE >= now);\n', '        require(START_TIME_SALE > END_TIME_PRESALE);\n', '        require(END_TIME_SALE > START_TIME_SALE);\n', '\n', '        require(_service != 0x0);\n', '\n', '        owner = msg.sender;\n', '        serviceAgent = _service;\n', '        token = new LuckchemyToken();\n', '        totalSupply = token.CROWDSALE_SUPPLY();\n', '\n', '        currentStage = Stage.Private;\n', '\n', '        uint256 decimals = uint256(token.decimals());\n', '\n', '        tokenPools[uint256(Stage.Private)] = 70000000 * (10 ** decimals);\n', '        tokenPools[uint256(Stage.Discount40)] = 105000000 * (10 ** decimals);\n', '        tokenPools[uint256(Stage.Discount20)] = 175000000 * (10 ** decimals);\n', '        tokenPools[uint256(Stage.NoDiscount)] = 350000000 * (10 ** decimals);\n', '\n', '        stageRates[uint256(Stage.Private)] = RATE.mul(10 ** decimals).mul(100).div(100 - DISCOUNT_PRIVATE_PRESALE);\n', '        stageRates[uint256(Stage.Discount40)] = RATE.mul(10 ** decimals).mul(100).div(100 - DISCOUNT_STAGE_ONE);\n', '        stageRates[uint256(Stage.Discount20)] = RATE.mul(10 ** decimals).mul(100).div(100 - DISCOUNT_STAGE_TWO);\n', '        stageRates[uint256(Stage.NoDiscount)] = RATE.mul(10 ** decimals).mul(100).div(100 - DISCOUNT_STAGE_THREE);\n', '\n', '    }\n', '\n', '    /*\n', '     * function to get amount ,which invested by depositor\n', '     * @depositor - address ,which bought tokens\n', '    */\n', '    function depositOf(address depositor) public constant returns (uint256) {\n', '        return deposits[depositor];\n', '    }\n', '    /*\n', '     * fallback function can be used to buy  tokens\n', '     */\n', '    function() public payable {\n', '        payETH(msg.sender);\n', '    }\n', '\n', '\n', '    /*\n', '    * function for tracking ethereum purchases\n', '    * @beneficiary - address ,which received tokens\n', '    */\n', '    function payETH(address beneficiary) public onlyWhiteList(beneficiary) payable {\n', '\n', '        require(msg.value >= 0.1 ether);\n', '        require(beneficiary != 0x0);\n', '        require(validPurchase());\n', '        if (isPrivateSale()) {\n', '            processPrivatePurchase(msg.value, beneficiary);\n', '        } else {\n', '            processPublicPurchase(msg.value, beneficiary);\n', '        }\n', '\n', '\n', '    }\n', '\n', '    /*\n', '     * function for processing purchase in private sale\n', '     * @weiAmount - amount of wei , which send to the contract\n', '     * @beneficiary - address for receiving tokens\n', '     */\n', '    function processPrivatePurchase(uint256 weiAmount, address beneficiary) private {\n', '\n', '        uint256 stage = uint256(Stage.Private);\n', '\n', '        require(currentStage == Stage.Private);\n', '        require(tokenPools[stage] > 0);\n', '\n', '        //calculate number tokens\n', '        uint256 tokensToBuy = (weiAmount.mul(stageRates[stage])).div(1 ether);\n', '        if (tokensToBuy <= tokenPools[stage]) {\n', '            //pool has enough tokens\n', '            payoutTokens(beneficiary, tokensToBuy, weiAmount);\n', '\n', '        } else {\n', '            //pool doesn&#39;t have enough tokens\n', '            tokensToBuy = tokenPools[stage];\n', '            //left wei\n', '            uint256 usedWei = (tokensToBuy.mul(1 ether)).div(stageRates[stage]);\n', '            uint256 leftWei = weiAmount.sub(usedWei);\n', '\n', '            payoutTokens(beneficiary, tokensToBuy, usedWei);\n', '\n', '            //change stage to Public Sale\n', '            currentStage = Stage.Discount40;\n', '\n', '            //return left wei to beneficiary and change stage\n', '            beneficiary.transfer(leftWei);\n', '        }\n', '    }\n', '    /*\n', '    * function for processing purchase in public sale\n', '    * @weiAmount - amount of wei , which send to the contract\n', '    * @beneficiary - address for receiving tokens\n', '    */\n', '    function processPublicPurchase(uint256 weiAmount, address beneficiary) private {\n', '\n', '        if (currentStage == Stage.Private) {\n', '            currentStage = Stage.Discount40;\n', '            tokenPools[uint256(Stage.Discount40)] = tokenPools[uint256(Stage.Discount40)].add(tokenPools[uint256(Stage.Private)]);\n', '            tokenPools[uint256(Stage.Private)] = 0;\n', '        }\n', '\n', '        for (uint256 stage = uint256(currentStage); stage <= 3; stage++) {\n', '\n', '            //calculate number tokens\n', '            uint256 tokensToBuy = (weiAmount.mul(stageRates[stage])).div(1 ether);\n', '\n', '            if (tokensToBuy <= tokenPools[stage]) {\n', '                //pool has enough tokens\n', '                payoutTokens(beneficiary, tokensToBuy, weiAmount);\n', '\n', '                break;\n', '            } else {\n', '                //pool doesn&#39;t have enough tokens\n', '                tokensToBuy = tokenPools[stage];\n', '                //left wei\n', '                uint256 usedWei = (tokensToBuy.mul(1 ether)).div(stageRates[stage]);\n', '                uint256 leftWei = weiAmount.sub(usedWei);\n', '\n', '                payoutTokens(beneficiary, tokensToBuy, usedWei);\n', '\n', '                if (stage == 3) {\n', '                    //return unused wei when all tokens sold\n', '                    beneficiary.transfer(leftWei);\n', '                    break;\n', '                } else {\n', '                    weiAmount = leftWei;\n', '                    //change current stage\n', '                    currentStage = Stage(stage + 1);\n', '                }\n', '            }\n', '        }\n', '    }\n', '    /*\n', '     * function for actual payout in public sale\n', '     * @beneficiary - address for receiving tokens\n', '     * @tokenAmount - amount of tokens to payout\n', '     * @weiAmount - amount of wei used\n', '     */\n', '    function payoutTokens(address beneficiary, uint256 tokenAmount, uint256 weiAmount) private {\n', '        uint256 stage = uint256(currentStage);\n', '        tokensSold = tokensSold.add(tokenAmount);\n', '        tokenPools[stage] = tokenPools[stage].sub(tokenAmount);\n', '        deposits[beneficiary] = deposits[beneficiary].add(weiAmount);\n', '        ethBalance = ethBalance.add(weiAmount);\n', '\n', '        token.transfer(beneficiary, tokenAmount);\n', '        TokenETHPurchase(msg.sender, beneficiary, weiAmount, tokenAmount);\n', '    }\n', '    /*\n', '     * function for change btc agent\n', '     * can be called only by owner of the contract\n', '     * @_newServiceAgent - new serviceAgent address\n', '     */\n', '    function setServiceAgent(address _newServiceAgent) public onlyOwner {\n', '        serviceAgent = _newServiceAgent;\n', '    }\n', '    /*\n', '     * function for tracking bitcoin purchases received by bitcoin wallet\n', '     * each transaction and amount of tokens according to rate can be validated on public bitcoin wallet\n', '     * public key - #\n', '     * @beneficiary - address, which received tokens\n', '     * @amount - amount tokens\n', '     * @stage - number of the stage (80% 40% 20% 0% discount)\n', '     * can be called only by serviceAgent address\n', '     */\n', '    function payFiat(address beneficiary, uint256 amount, uint256 stage) public onlyServiceAgent onlyWhiteList(beneficiary) {\n', '\n', '        require(beneficiary != 0x0);\n', '        require(tokenPools[stage] >= amount);\n', '        require(stage == uint256(currentStage));\n', '\n', '        //calculate fiat amount in wei\n', '        uint256 fiatWei = amount.mul(1 ether).div(stageRates[stage]);\n', '        fiatBalance = fiatBalance.add(fiatWei);\n', '        require(validPurchase());\n', '\n', '        tokenPools[stage] = tokenPools[stage].sub(amount);\n', '        tokensSold = tokensSold.add(amount);\n', '\n', '        token.transfer(beneficiary, amount);\n', '        TokenFiatPurchase(msg.sender, beneficiary, amount);\n', '    }\n', '\n', '\n', '    /*\n', '     * function for  checking if crowdsale is finished\n', '     */\n', '    function hasEnded() public constant returns (bool) {\n', '        return now > END_TIME_SALE || tokensSold >= totalSupply;\n', '    }\n', '\n', '    /*\n', '     * function for  checking if hardCapReached\n', '     */\n', '    function hardCapReached() public constant returns (bool) {\n', '        return tokensSold >= totalSupply || fiatBalance.add(ethBalance) >= hardCap;\n', '    }\n', '    /*\n', '     * function for  checking if crowdsale goal is reached\n', '     */\n', '    function softCapReached() public constant returns (bool) {\n', '        return fiatBalance.add(ethBalance) >= softCap;\n', '    }\n', '\n', '    function isPrivateSale() public constant returns (bool) {\n', '        return now >= START_TIME_PRESALE && now <= END_TIME_PRESALE;\n', '    }\n', '\n', '    /*\n', '     * function that call after crowdsale is ended\n', '     *          releaseTokenTransfer - enable token transfer between users.\n', '     *          burn tokens which are left on crowsale contract balance\n', '     *          transfer balance of contract to wallets according to shares.\n', '     */\n', '    function forwardFunds() public onlyOwner {\n', '        require(hasEnded());\n', '        require(softCapReached());\n', '\n', '        token.releaseTokenTransfer();\n', '        token.burn(token.balanceOf(this));\n', '\n', '        //transfer token ownership to this owner of crowdsale\n', '        token.transferOwnership(msg.sender);\n', '\n', '        //transfer funds here\n', '        uint256 totalBalance = this.balance;\n', '        LOTTERY_FUND_ADDRESS.transfer((totalBalance.mul(LOTTERY_FUND_SHARE)).div(100));\n', '        OPERATIONS_ADDRESS.transfer((totalBalance.mul(OPERATIONS_SHARE)).div(100));\n', '        PARTNERS_ADDRESS.transfer(this.balance); // send the rest to partners (PARTNERS_SHARE)\n', '    }\n', '    /*\n', '     * function that call after crowdsale is ended\n', '     *          conditions : ico ended and goal isn&#39;t reached. amount of depositor > 0.\n', '     *\n', '     *          refund eth deposit (fiat refunds will be done manually)\n', '     */\n', '    function refund() public {\n', '        require(hasEnded());\n', '        require(!softCapReached() || ((now > END_TIME_SALE + 30 days) && !token.released()));\n', '        uint256 amount = deposits[msg.sender];\n', '        require(amount > 0);\n', '        deposits[msg.sender] = 0;\n', '        msg.sender.transfer(amount);\n', '\n', '    }\n', '\n', '    /*\n', '        internal functions\n', '    */\n', '\n', '    /*\n', '     *  function for checking period of investment and investment amount restriction for ETH purchases\n', '     */\n', '    function validPurchase() internal constant returns (bool) {\n', '        bool withinPeriod = (now >= START_TIME_PRESALE && now <= END_TIME_PRESALE) || (now >= START_TIME_SALE && now <= END_TIME_SALE);\n', '        return withinPeriod && !hardCapReached();\n', '    }\n', '    /*\n', '     * function for adding address to whitelist\n', '     * @_whitelistAddress - address to add\n', '     */\n', '    function addToWhiteList(address _whitelistAddress) public onlyServiceAgent {\n', '        whitelist[_whitelistAddress] = true;\n', '    }\n', '\n', '    /*\n', '     * function for removing address from whitelist\n', '     * @_whitelistAddress - address to remove\n', '     */\n', '    function removeWhiteList(address _whitelistAddress) public onlyServiceAgent {\n', '        delete whitelist[_whitelistAddress];\n', '    }\n', '\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    Burn(burner, _value);\n', '    Transfer(burner, address(0), _value);\n', '  }\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', 'contract LuckchemyToken is BurnableToken, StandardToken, Claimable {\n', '\n', '    bool public released = false;\n', '\n', '    string public constant name = "Luckchemy";\n', '\n', '    string public constant symbol = "LUK";\n', '\n', '    uint8 public constant decimals = 8;\n', '\n', '    uint256 public CROWDSALE_SUPPLY;\n', '\n', '    uint256 public OWNERS_AND_PARTNERS_SUPPLY;\n', '\n', '    address public constant OWNERS_AND_PARTNERS_ADDRESS = 0x603a535a1D7C5050021F9f5a4ACB773C35a67602;\n', '\n', '    // Index of unique addresses\n', '    uint256 public addressCount = 0;\n', '\n', '    // Map of unique addresses\n', '    mapping(uint256 => address) public addressMap;\n', '    mapping(address => bool) public addressAvailabilityMap;\n', '\n', '    //blacklist of addresses (product/developers addresses) that are not included in the final Holder lottery\n', '    mapping(address => bool) public blacklist;\n', '\n', '    // service agent for managing blacklist\n', '    address public serviceAgent;\n', '\n', '    event Release();\n', '    event BlacklistAdd(address indexed addr);\n', '    event BlacklistRemove(address indexed addr);\n', '\n', '    /**\n', '     * Do not transfer tokens until the crowdsale is over.\n', '     *\n', '     */\n', '    modifier canTransfer() {\n', '        require(released || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /*\n', '     * modifier which gives specific rights to serviceAgent\n', '     */\n', '    modifier onlyServiceAgent(){\n', '        require(msg.sender == serviceAgent);\n', '        _;\n', '    }\n', '\n', '\n', '    function LuckchemyToken() public {\n', '\n', '        totalSupply_ = 1000000000 * (10 ** uint256(decimals));\n', '        CROWDSALE_SUPPLY = 700000000 * (10 ** uint256(decimals));\n', '        OWNERS_AND_PARTNERS_SUPPLY = 300000000 * (10 ** uint256(decimals));\n', '\n', '        addAddressToUniqueMap(msg.sender);\n', '        addAddressToUniqueMap(OWNERS_AND_PARTNERS_ADDRESS);\n', '\n', '        balances[msg.sender] = CROWDSALE_SUPPLY;\n', '\n', '        balances[OWNERS_AND_PARTNERS_ADDRESS] = OWNERS_AND_PARTNERS_SUPPLY;\n', '\n', '        owner = msg.sender;\n', '\n', '        Transfer(0x0, msg.sender, CROWDSALE_SUPPLY);\n', '\n', '        Transfer(0x0, OWNERS_AND_PARTNERS_ADDRESS, OWNERS_AND_PARTNERS_SUPPLY);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public canTransfer returns (bool success) {\n', '        //Add address to map of unique token owners\n', '        addAddressToUniqueMap(_to);\n', '\n', '        // Call StandardToken.transfer()\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public canTransfer returns (bool success) {\n', '        //Add address to map of unique token owners\n', '        addAddressToUniqueMap(_to);\n', '\n', '        // Call StandardToken.transferForm()\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '    *\n', '    * Release the tokens to the public.\n', '    * Can be called only by owner which should be the Crowdsale contract\n', '    * Should be called if the crowdale is successfully finished\n', '    *\n', '    */\n', '    function releaseTokenTransfer() public onlyOwner {\n', '        released = true;\n', '        Release();\n', '    }\n', '\n', '    /**\n', '     * Add address to the black list.\n', '     * Only service agent can do this\n', '     */\n', '    function addBlacklistItem(address _blackAddr) public onlyServiceAgent {\n', '        blacklist[_blackAddr] = true;\n', '\n', '        BlacklistAdd(_blackAddr);\n', '    }\n', '\n', '    /**\n', '    * Remove address from the black list.\n', '    * Only service agent can do this\n', '    */\n', '    function removeBlacklistItem(address _blackAddr) public onlyServiceAgent {\n', '        delete blacklist[_blackAddr];\n', '    }\n', '\n', '    /**\n', '    * Add address to unique map if it is not added\n', '    */\n', '    function addAddressToUniqueMap(address _addr) private returns (bool) {\n', '        if (addressAvailabilityMap[_addr] == true) {\n', '            return true;\n', '        }\n', '\n', '        addressAvailabilityMap[_addr] = true;\n', '        addressMap[addressCount++] = _addr;\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * Get address by index from map of unique addresses\n', '    */\n', '    function getUniqueAddressByIndex(uint256 _addressIndex) public view returns (address) {\n', '        return addressMap[_addressIndex];\n', '    }\n', '\n', '    /**\n', '    * Change service agent\n', '    */\n', '    function changeServiceAgent(address _addr) public onlyOwner {\n', '        serviceAgent = _addr;\n', '    }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'contract LuckchemyCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    //  Token for selling\n', '    LuckchemyToken public token;\n', '\n', '    /*\n', '    *  Start and End date of investment process\n', '    */\n', '\n', '    // 2018-04-30 00:00:00 GMT - start time for public sale\n', '    uint256 public constant START_TIME_SALE = 1525046400;\n', '\n', '    // 2018-07-20 23:59:59 GMT - end time for public sale\n', '    uint256 public constant END_TIME_SALE = 1532131199;\n', '\n', '    // 2018-04-02 00:00:00 GMT - start time for private sale\n', '    uint256 public constant START_TIME_PRESALE = 1522627200;\n', '\n', '    // 2018-04-24 23:59:59 GMT - end time for private sale\n', '    uint256 public constant END_TIME_PRESALE = 1524614399;\n', '\n', '\n', '    // amount of already sold tokens\n', '    uint256 public tokensSold = 0;\n', '\n', '    //supply for crowdSale\n', '    uint256 public totalSupply = 0;\n', '    // hard cap\n', '    uint256 public constant hardCap = 45360 ether;\n', '    // soft cap\n', '    uint256 public constant softCap = 2000 ether;\n', '\n', '    // wei representation of collected fiat\n', '    uint256 public fiatBalance = 0;\n', '    // ether collected in wei\n', '    uint256 public ethBalance = 0;\n', '\n', '    //address of serviceAgent (it can calls  payFiat function)\n', '    address public serviceAgent;\n', '\n', '    // owner of the contract\n', '    address public owner;\n', '\n', '    //default token rate\n', '    uint256 public constant RATE = 12500; // Token price in ETH - 0.00008 ETH  1 ETHER = 12500 tokens\n', '\n', '    // 2018/04/30 - 2018/07/22  \n', '    uint256 public constant DISCOUNT_PRIVATE_PRESALE = 80; // 80 % discount\n', '\n', '    // 2018/04/30 - 2018/07/20\n', '    uint256 public constant DISCOUNT_STAGE_ONE = 40;  // 40% discount\n', '\n', '    // 2018/04/02 - 2018/04/24   \n', '    uint256 public constant DISCOUNT_STAGE_TWO = 20; // 20% discount\n', '\n', '    // 2018/04/30 - 2018/07/22  \n', '    uint256 public constant DISCOUNT_STAGE_THREE = 0;\n', '\n', '\n', '\n', '\n', '    //White list of addresses that are allowed to by a token\n', '    mapping(address => bool) public whitelist;\n', '\n', '\n', '    /**\n', '     * List of addresses for ICO fund with shares in %\n', '     * \n', '     */\n', '    uint256 public constant LOTTERY_FUND_SHARE = 40;\n', '    uint256 public constant OPERATIONS_SHARE = 50;\n', '    uint256 public constant PARTNERS_SHARE = 10;\n', '\n', '    address public constant LOTTERY_FUND_ADDRESS = 0x84137CB59076a61F3f94B2C39Da8fbCb63B6f096;\n', '    address public constant OPERATIONS_ADDRESS = 0xEBBeAA0699837De527B29A03ECC914159D939Eea;\n', '    address public constant PARTNERS_ADDRESS = 0x820502e8c80352f6e11Ce036DF03ceeEBE002642;\n', '\n', '    /**\n', '     * event for token ETH purchase  logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenETHPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '    /**\n', '     * event for token FIAT purchase  logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenFiatPurchase(address indexed purchaser, address indexed beneficiary, uint256 amount);\n', '\n', '    /*\n', '     * modifier which gives specific rights to owner\n', '     */\n', '    modifier onlyOwner(){\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    /*\n', '     * modifier which gives possibility to call payFiat function\n', '     */\n', '    modifier onlyServiceAgent(){\n', '        require(msg.sender == serviceAgent);\n', '        _;\n', '    }\n', '\n', '    /*\n', '    *\n', '    *modifier which gives possibility to purchase\n', '    *\n', '    */\n', '    modifier onlyWhiteList(address _address){\n', '        require(whitelist[_address] == true);\n', '        _;\n', '    }\n', '    /*\n', '     * Enum which defines stages of ICO\n', '    */\n', '\n', '    enum Stage {\n', '        Private,\n', '        Discount40,\n', '        Discount20,\n', '        NoDiscount\n', '    }\n', '\n', '    //current stage\n', '    Stage public  currentStage;\n', '\n', '    //pools of token for each stage\n', '    mapping(uint256 => uint256) public tokenPools;\n', '\n', '    //number of tokens per 1 ether for each stage\n', '    mapping(uint256 => uint256) public stageRates;\n', '\n', '    /*\n', '    * deposit is amount in wei , which was sent to the contract\n', '    * @ address - address of depositor\n', '    * @ uint256 - amount\n', '    */\n', '    mapping(address => uint256) public deposits;\n', '\n', '    /* \n', '    * constructor of contract \n', '    *  @ _service- address which has rights to call payFiat\n', '    */\n', '    function LuckchemyCrowdsale(address _service) public {\n', '        require(START_TIME_SALE >= now);\n', '        require(START_TIME_SALE > END_TIME_PRESALE);\n', '        require(END_TIME_SALE > START_TIME_SALE);\n', '\n', '        require(_service != 0x0);\n', '\n', '        owner = msg.sender;\n', '        serviceAgent = _service;\n', '        token = new LuckchemyToken();\n', '        totalSupply = token.CROWDSALE_SUPPLY();\n', '\n', '        currentStage = Stage.Private;\n', '\n', '        uint256 decimals = uint256(token.decimals());\n', '\n', '        tokenPools[uint256(Stage.Private)] = 70000000 * (10 ** decimals);\n', '        tokenPools[uint256(Stage.Discount40)] = 105000000 * (10 ** decimals);\n', '        tokenPools[uint256(Stage.Discount20)] = 175000000 * (10 ** decimals);\n', '        tokenPools[uint256(Stage.NoDiscount)] = 350000000 * (10 ** decimals);\n', '\n', '        stageRates[uint256(Stage.Private)] = RATE.mul(10 ** decimals).mul(100).div(100 - DISCOUNT_PRIVATE_PRESALE);\n', '        stageRates[uint256(Stage.Discount40)] = RATE.mul(10 ** decimals).mul(100).div(100 - DISCOUNT_STAGE_ONE);\n', '        stageRates[uint256(Stage.Discount20)] = RATE.mul(10 ** decimals).mul(100).div(100 - DISCOUNT_STAGE_TWO);\n', '        stageRates[uint256(Stage.NoDiscount)] = RATE.mul(10 ** decimals).mul(100).div(100 - DISCOUNT_STAGE_THREE);\n', '\n', '    }\n', '\n', '    /*\n', '     * function to get amount ,which invested by depositor\n', '     * @depositor - address ,which bought tokens\n', '    */\n', '    function depositOf(address depositor) public constant returns (uint256) {\n', '        return deposits[depositor];\n', '    }\n', '    /*\n', '     * fallback function can be used to buy  tokens\n', '     */\n', '    function() public payable {\n', '        payETH(msg.sender);\n', '    }\n', '\n', '\n', '    /*\n', '    * function for tracking ethereum purchases\n', '    * @beneficiary - address ,which received tokens\n', '    */\n', '    function payETH(address beneficiary) public onlyWhiteList(beneficiary) payable {\n', '\n', '        require(msg.value >= 0.1 ether);\n', '        require(beneficiary != 0x0);\n', '        require(validPurchase());\n', '        if (isPrivateSale()) {\n', '            processPrivatePurchase(msg.value, beneficiary);\n', '        } else {\n', '            processPublicPurchase(msg.value, beneficiary);\n', '        }\n', '\n', '\n', '    }\n', '\n', '    /*\n', '     * function for processing purchase in private sale\n', '     * @weiAmount - amount of wei , which send to the contract\n', '     * @beneficiary - address for receiving tokens\n', '     */\n', '    function processPrivatePurchase(uint256 weiAmount, address beneficiary) private {\n', '\n', '        uint256 stage = uint256(Stage.Private);\n', '\n', '        require(currentStage == Stage.Private);\n', '        require(tokenPools[stage] > 0);\n', '\n', '        //calculate number tokens\n', '        uint256 tokensToBuy = (weiAmount.mul(stageRates[stage])).div(1 ether);\n', '        if (tokensToBuy <= tokenPools[stage]) {\n', '            //pool has enough tokens\n', '            payoutTokens(beneficiary, tokensToBuy, weiAmount);\n', '\n', '        } else {\n', "            //pool doesn't have enough tokens\n", '            tokensToBuy = tokenPools[stage];\n', '            //left wei\n', '            uint256 usedWei = (tokensToBuy.mul(1 ether)).div(stageRates[stage]);\n', '            uint256 leftWei = weiAmount.sub(usedWei);\n', '\n', '            payoutTokens(beneficiary, tokensToBuy, usedWei);\n', '\n', '            //change stage to Public Sale\n', '            currentStage = Stage.Discount40;\n', '\n', '            //return left wei to beneficiary and change stage\n', '            beneficiary.transfer(leftWei);\n', '        }\n', '    }\n', '    /*\n', '    * function for processing purchase in public sale\n', '    * @weiAmount - amount of wei , which send to the contract\n', '    * @beneficiary - address for receiving tokens\n', '    */\n', '    function processPublicPurchase(uint256 weiAmount, address beneficiary) private {\n', '\n', '        if (currentStage == Stage.Private) {\n', '            currentStage = Stage.Discount40;\n', '            tokenPools[uint256(Stage.Discount40)] = tokenPools[uint256(Stage.Discount40)].add(tokenPools[uint256(Stage.Private)]);\n', '            tokenPools[uint256(Stage.Private)] = 0;\n', '        }\n', '\n', '        for (uint256 stage = uint256(currentStage); stage <= 3; stage++) {\n', '\n', '            //calculate number tokens\n', '            uint256 tokensToBuy = (weiAmount.mul(stageRates[stage])).div(1 ether);\n', '\n', '            if (tokensToBuy <= tokenPools[stage]) {\n', '                //pool has enough tokens\n', '                payoutTokens(beneficiary, tokensToBuy, weiAmount);\n', '\n', '                break;\n', '            } else {\n', "                //pool doesn't have enough tokens\n", '                tokensToBuy = tokenPools[stage];\n', '                //left wei\n', '                uint256 usedWei = (tokensToBuy.mul(1 ether)).div(stageRates[stage]);\n', '                uint256 leftWei = weiAmount.sub(usedWei);\n', '\n', '                payoutTokens(beneficiary, tokensToBuy, usedWei);\n', '\n', '                if (stage == 3) {\n', '                    //return unused wei when all tokens sold\n', '                    beneficiary.transfer(leftWei);\n', '                    break;\n', '                } else {\n', '                    weiAmount = leftWei;\n', '                    //change current stage\n', '                    currentStage = Stage(stage + 1);\n', '                }\n', '            }\n', '        }\n', '    }\n', '    /*\n', '     * function for actual payout in public sale\n', '     * @beneficiary - address for receiving tokens\n', '     * @tokenAmount - amount of tokens to payout\n', '     * @weiAmount - amount of wei used\n', '     */\n', '    function payoutTokens(address beneficiary, uint256 tokenAmount, uint256 weiAmount) private {\n', '        uint256 stage = uint256(currentStage);\n', '        tokensSold = tokensSold.add(tokenAmount);\n', '        tokenPools[stage] = tokenPools[stage].sub(tokenAmount);\n', '        deposits[beneficiary] = deposits[beneficiary].add(weiAmount);\n', '        ethBalance = ethBalance.add(weiAmount);\n', '\n', '        token.transfer(beneficiary, tokenAmount);\n', '        TokenETHPurchase(msg.sender, beneficiary, weiAmount, tokenAmount);\n', '    }\n', '    /*\n', '     * function for change btc agent\n', '     * can be called only by owner of the contract\n', '     * @_newServiceAgent - new serviceAgent address\n', '     */\n', '    function setServiceAgent(address _newServiceAgent) public onlyOwner {\n', '        serviceAgent = _newServiceAgent;\n', '    }\n', '    /*\n', '     * function for tracking bitcoin purchases received by bitcoin wallet\n', '     * each transaction and amount of tokens according to rate can be validated on public bitcoin wallet\n', '     * public key - #\n', '     * @beneficiary - address, which received tokens\n', '     * @amount - amount tokens\n', '     * @stage - number of the stage (80% 40% 20% 0% discount)\n', '     * can be called only by serviceAgent address\n', '     */\n', '    function payFiat(address beneficiary, uint256 amount, uint256 stage) public onlyServiceAgent onlyWhiteList(beneficiary) {\n', '\n', '        require(beneficiary != 0x0);\n', '        require(tokenPools[stage] >= amount);\n', '        require(stage == uint256(currentStage));\n', '\n', '        //calculate fiat amount in wei\n', '        uint256 fiatWei = amount.mul(1 ether).div(stageRates[stage]);\n', '        fiatBalance = fiatBalance.add(fiatWei);\n', '        require(validPurchase());\n', '\n', '        tokenPools[stage] = tokenPools[stage].sub(amount);\n', '        tokensSold = tokensSold.add(amount);\n', '\n', '        token.transfer(beneficiary, amount);\n', '        TokenFiatPurchase(msg.sender, beneficiary, amount);\n', '    }\n', '\n', '\n', '    /*\n', '     * function for  checking if crowdsale is finished\n', '     */\n', '    function hasEnded() public constant returns (bool) {\n', '        return now > END_TIME_SALE || tokensSold >= totalSupply;\n', '    }\n', '\n', '    /*\n', '     * function for  checking if hardCapReached\n', '     */\n', '    function hardCapReached() public constant returns (bool) {\n', '        return tokensSold >= totalSupply || fiatBalance.add(ethBalance) >= hardCap;\n', '    }\n', '    /*\n', '     * function for  checking if crowdsale goal is reached\n', '     */\n', '    function softCapReached() public constant returns (bool) {\n', '        return fiatBalance.add(ethBalance) >= softCap;\n', '    }\n', '\n', '    function isPrivateSale() public constant returns (bool) {\n', '        return now >= START_TIME_PRESALE && now <= END_TIME_PRESALE;\n', '    }\n', '\n', '    /*\n', '     * function that call after crowdsale is ended\n', '     *          releaseTokenTransfer - enable token transfer between users.\n', '     *          burn tokens which are left on crowsale contract balance\n', '     *          transfer balance of contract to wallets according to shares.\n', '     */\n', '    function forwardFunds() public onlyOwner {\n', '        require(hasEnded());\n', '        require(softCapReached());\n', '\n', '        token.releaseTokenTransfer();\n', '        token.burn(token.balanceOf(this));\n', '\n', '        //transfer token ownership to this owner of crowdsale\n', '        token.transferOwnership(msg.sender);\n', '\n', '        //transfer funds here\n', '        uint256 totalBalance = this.balance;\n', '        LOTTERY_FUND_ADDRESS.transfer((totalBalance.mul(LOTTERY_FUND_SHARE)).div(100));\n', '        OPERATIONS_ADDRESS.transfer((totalBalance.mul(OPERATIONS_SHARE)).div(100));\n', '        PARTNERS_ADDRESS.transfer(this.balance); // send the rest to partners (PARTNERS_SHARE)\n', '    }\n', '    /*\n', '     * function that call after crowdsale is ended\n', "     *          conditions : ico ended and goal isn't reached. amount of depositor > 0.\n", '     *\n', '     *          refund eth deposit (fiat refunds will be done manually)\n', '     */\n', '    function refund() public {\n', '        require(hasEnded());\n', '        require(!softCapReached() || ((now > END_TIME_SALE + 30 days) && !token.released()));\n', '        uint256 amount = deposits[msg.sender];\n', '        require(amount > 0);\n', '        deposits[msg.sender] = 0;\n', '        msg.sender.transfer(amount);\n', '\n', '    }\n', '\n', '    /*\n', '        internal functions\n', '    */\n', '\n', '    /*\n', '     *  function for checking period of investment and investment amount restriction for ETH purchases\n', '     */\n', '    function validPurchase() internal constant returns (bool) {\n', '        bool withinPeriod = (now >= START_TIME_PRESALE && now <= END_TIME_PRESALE) || (now >= START_TIME_SALE && now <= END_TIME_SALE);\n', '        return withinPeriod && !hardCapReached();\n', '    }\n', '    /*\n', '     * function for adding address to whitelist\n', '     * @_whitelistAddress - address to add\n', '     */\n', '    function addToWhiteList(address _whitelistAddress) public onlyServiceAgent {\n', '        whitelist[_whitelistAddress] = true;\n', '    }\n', '\n', '    /*\n', '     * function for removing address from whitelist\n', '     * @_whitelistAddress - address to remove\n', '     */\n', '    function removeWhiteList(address _whitelistAddress) public onlyServiceAgent {\n', '        delete whitelist[_whitelistAddress];\n', '    }\n', '\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    Burn(burner, _value);\n', '    Transfer(burner, address(0), _value);\n', '  }\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', 'contract LuckchemyToken is BurnableToken, StandardToken, Claimable {\n', '\n', '    bool public released = false;\n', '\n', '    string public constant name = "Luckchemy";\n', '\n', '    string public constant symbol = "LUK";\n', '\n', '    uint8 public constant decimals = 8;\n', '\n', '    uint256 public CROWDSALE_SUPPLY;\n', '\n', '    uint256 public OWNERS_AND_PARTNERS_SUPPLY;\n', '\n', '    address public constant OWNERS_AND_PARTNERS_ADDRESS = 0x603a535a1D7C5050021F9f5a4ACB773C35a67602;\n', '\n', '    // Index of unique addresses\n', '    uint256 public addressCount = 0;\n', '\n', '    // Map of unique addresses\n', '    mapping(uint256 => address) public addressMap;\n', '    mapping(address => bool) public addressAvailabilityMap;\n', '\n', '    //blacklist of addresses (product/developers addresses) that are not included in the final Holder lottery\n', '    mapping(address => bool) public blacklist;\n', '\n', '    // service agent for managing blacklist\n', '    address public serviceAgent;\n', '\n', '    event Release();\n', '    event BlacklistAdd(address indexed addr);\n', '    event BlacklistRemove(address indexed addr);\n', '\n', '    /**\n', '     * Do not transfer tokens until the crowdsale is over.\n', '     *\n', '     */\n', '    modifier canTransfer() {\n', '        require(released || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /*\n', '     * modifier which gives specific rights to serviceAgent\n', '     */\n', '    modifier onlyServiceAgent(){\n', '        require(msg.sender == serviceAgent);\n', '        _;\n', '    }\n', '\n', '\n', '    function LuckchemyToken() public {\n', '\n', '        totalSupply_ = 1000000000 * (10 ** uint256(decimals));\n', '        CROWDSALE_SUPPLY = 700000000 * (10 ** uint256(decimals));\n', '        OWNERS_AND_PARTNERS_SUPPLY = 300000000 * (10 ** uint256(decimals));\n', '\n', '        addAddressToUniqueMap(msg.sender);\n', '        addAddressToUniqueMap(OWNERS_AND_PARTNERS_ADDRESS);\n', '\n', '        balances[msg.sender] = CROWDSALE_SUPPLY;\n', '\n', '        balances[OWNERS_AND_PARTNERS_ADDRESS] = OWNERS_AND_PARTNERS_SUPPLY;\n', '\n', '        owner = msg.sender;\n', '\n', '        Transfer(0x0, msg.sender, CROWDSALE_SUPPLY);\n', '\n', '        Transfer(0x0, OWNERS_AND_PARTNERS_ADDRESS, OWNERS_AND_PARTNERS_SUPPLY);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public canTransfer returns (bool success) {\n', '        //Add address to map of unique token owners\n', '        addAddressToUniqueMap(_to);\n', '\n', '        // Call StandardToken.transfer()\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public canTransfer returns (bool success) {\n', '        //Add address to map of unique token owners\n', '        addAddressToUniqueMap(_to);\n', '\n', '        // Call StandardToken.transferForm()\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '    *\n', '    * Release the tokens to the public.\n', '    * Can be called only by owner which should be the Crowdsale contract\n', '    * Should be called if the crowdale is successfully finished\n', '    *\n', '    */\n', '    function releaseTokenTransfer() public onlyOwner {\n', '        released = true;\n', '        Release();\n', '    }\n', '\n', '    /**\n', '     * Add address to the black list.\n', '     * Only service agent can do this\n', '     */\n', '    function addBlacklistItem(address _blackAddr) public onlyServiceAgent {\n', '        blacklist[_blackAddr] = true;\n', '\n', '        BlacklistAdd(_blackAddr);\n', '    }\n', '\n', '    /**\n', '    * Remove address from the black list.\n', '    * Only service agent can do this\n', '    */\n', '    function removeBlacklistItem(address _blackAddr) public onlyServiceAgent {\n', '        delete blacklist[_blackAddr];\n', '    }\n', '\n', '    /**\n', '    * Add address to unique map if it is not added\n', '    */\n', '    function addAddressToUniqueMap(address _addr) private returns (bool) {\n', '        if (addressAvailabilityMap[_addr] == true) {\n', '            return true;\n', '        }\n', '\n', '        addressAvailabilityMap[_addr] = true;\n', '        addressMap[addressCount++] = _addr;\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * Get address by index from map of unique addresses\n', '    */\n', '    function getUniqueAddressByIndex(uint256 _addressIndex) public view returns (address) {\n', '        return addressMap[_addressIndex];\n', '    }\n', '\n', '    /**\n', '    * Change service agent\n', '    */\n', '    function changeServiceAgent(address _addr) public onlyOwner {\n', '        serviceAgent = _addr;\n', '    }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
