['pragma solidity ^0.4.16;\n', '\n', 'contract BasicAccessControl {\n', '    address public owner;\n', '    // address[] public moderators;\n', '    uint16 public totalModerators = 0;\n', '    mapping (address => bool) public moderators;\n', '    bool public isMaintaining = false;\n', '\n', '    function BasicAccessControl() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyModerators() {\n', '        require(msg.sender == owner || moderators[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '    modifier isActive {\n', '        require(!isMaintaining);\n', '        _;\n', '    }\n', '\n', '    function ChangeOwner(address _newOwner) onlyOwner public {\n', '        if (_newOwner != address(0)) {\n', '            owner = _newOwner;\n', '        }\n', '    }\n', '\n', '\n', '    function AddModerator(address _newModerator) onlyOwner public {\n', '        if (moderators[_newModerator] == false) {\n', '            moderators[_newModerator] = true;\n', '            totalModerators += 1;\n', '        }\n', '    }\n', '    \n', '    function RemoveModerator(address _oldModerator) onlyOwner public {\n', '        if (moderators[_oldModerator] == true) {\n', '            moderators[_oldModerator] = false;\n', '            totalModerators -= 1;\n', '        }\n', '    }\n', '\n', '    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\n', '        isMaintaining = _isMaintaining;\n', '    }\n', '}\n', '\n', 'contract EtheremonEnum {\n', '    enum ArrayType {\n', '        CLASS_TYPE,\n', '        STAT_STEP,\n', '        STAT_START,\n', '        STAT_BASE,\n', '        OBJ_SKILL\n', '    }\n', '}\n', '\n', 'interface EtheremonTradeInterface {\n', '    function isOnTrading(uint64 _objId) constant external returns(bool);\n', '}\n', '\n', 'contract EtheremonDataBase is EtheremonEnum {\n', '    uint64 public totalMonster;\n', '\n', '    function getMonsterObj(uint64 _objId) constant public returns(uint64 objId, uint32 classId, address trainer, uint32 exp, uint32 createIndex, uint32 lastClaimIndex, uint createTime);\n', '    function getMonsterDexSize(address _trainer) constant public returns(uint);\n', '    function getElementInArrayType(ArrayType _type, uint64 _id, uint _index) constant public returns(uint8);\n', '    \n', '    function addMonsterObj(uint32 _classId, address _trainer, string _name)  public returns(uint64);\n', '    function addElementToArrayType(ArrayType _type, uint64 _id, uint8 _value) public returns(uint);\n', '}\n', '\n', 'interface EtheremonRankData {\n', '    function setPlayer(address _trainer, uint64 _a0, uint64 _a1, uint64 _a2, uint64 _s0, uint64 _s1, uint64 _s2) external returns(uint32 playerId);\n', '    function isOnBattle(address _trainer, uint64 _objId) constant external returns(bool);\n', '}\n', '\n', 'contract EtheremonRankBattle is BasicAccessControl, EtheremonEnum {\n', '\n', '    struct MonsterObjAcc {\n', '        uint64 monsterId;\n', '        uint32 classId;\n', '        address trainer;\n', '        string name;\n', '        uint32 exp;\n', '        uint32 createIndex;\n', '        uint32 lastClaimIndex;\n', '        uint createTime;\n', '    }\n', '    \n', '    // linked smart contract\n', '    address public dataContract;\n', '    address public tradeContract;\n', '    address public rankDataContract;\n', '    \n', '    // modifier\n', '    modifier requireDataContract {\n', '        require(dataContract != address(0));\n', '        _;\n', '    }\n', '    \n', '    modifier requireTradeContract {\n', '        require(tradeContract != address(0));\n', '        _;\n', '    }\n', '\n', '    modifier requireRankDataContract {\n', '        require(rankDataContract != address(0));\n', '        _;\n', '    }\n', '\n', '    // event\n', '    event EventUpdateCastle(address indexed trainer, uint32 playerId);\n', '    \n', '    function EtheremonRankBattle(address _dataContract, address _tradeContract, address _rankDataContract) public {\n', '        dataContract = _dataContract;\n', '        tradeContract = _tradeContract;\n', '        rankDataContract = _rankDataContract;\n', '    }\n', '    \n', '    function setContract(address _dataContract, address _tradeContract, address _rankDataContract) onlyModerators external {\n', '        dataContract = _dataContract;\n', '        tradeContract = _tradeContract;\n', '        rankDataContract = _rankDataContract;\n', '    }\n', '\n', '    // public\n', '    \n', '    function getValidClassId(uint64 _objId, address _owner) constant public returns(uint32) {\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        MonsterObjAcc memory obj;\n', '        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(_objId);\n', '        if (obj.trainer != _owner || obj.classId == 21) return 0;\n', '        return obj.classId;\n', '    }\n', '    \n', '    function hasValidParam(address _trainer, uint64 _a1, uint64 _a2, uint64 _a3, uint64 _s1, uint64 _s2, uint64 _s3) constant public returns(bool) {\n', '        if (_a1 == 0 || _a2 == 0 || _a3 == 0)\n', '            return false;\n', '        if (_a1 == _a2 || _a1 == _a3 || _a1 == _s1 || _a1 == _s2 || _a1 == _s3)\n', '            return false;\n', '        if (_a2 == _a3 || _a2 == _s1 || _a2 == _s2 || _a2 == _s3)\n', '            return false;\n', '        if (_a3 == _s1 || _a3 == _s2 || _a3 == _s3)\n', '            return false;\n', '        if (_s1 > 0 && (_s1 == _s2 || _s1 == _s3))\n', '            return false;\n', '        if (_s2 > 0 && (_s2 == _s3))\n', '            return false;\n', '        \n', '        uint32 classA1 = getValidClassId(_a1, _trainer);\n', '        uint32 classA2 = getValidClassId(_a2, _trainer);\n', '        uint32 classA3 = getValidClassId(_a3, _trainer);\n', '        \n', '        if (classA1 == 0 || classA2 == 0 || classA3 == 0)\n', '            return false;\n', '        if (classA1 == classA2 || classA1 == classA3 || classA2 == classA3)\n', '            return false;\n', '        if (_s1 > 0 && getValidClassId(_s1, _trainer) == 0)\n', '            return false;\n', '        if (_s2 > 0 && getValidClassId(_s2, _trainer) == 0)\n', '            return false;\n', '        if (_s3 > 0 && getValidClassId(_s3, _trainer) == 0)\n', '            return false;\n', '        return true;\n', '    }\n', '    \n', '    function setCastle(uint64 _a1, uint64 _a2, uint64 _a3, uint64 _s1, uint64 _s2, uint64 _s3) isActive requireDataContract \n', '        requireTradeContract requireRankDataContract external {\n', '        \n', '        if (!hasValidParam(msg.sender, _a1, _a2, _a3, _s1, _s2, _s3))\n', '            revert();\n', '        \n', '        EtheremonTradeInterface trade = EtheremonTradeInterface(tradeContract);\n', '        if (trade.isOnTrading(_a1) || trade.isOnTrading(_a2) || trade.isOnTrading(_a3) || \n', '            trade.isOnTrading(_s1) || trade.isOnTrading(_s2) || trade.isOnTrading(_s3))\n', '            revert();\n', '\n', '        EtheremonRankData rank = EtheremonRankData(rankDataContract);\n', '        uint32 playerId = rank.setPlayer(msg.sender, _a1, _a2, _a3, _s1, _s2, _s3);\n', '        EventUpdateCastle(msg.sender, playerId);\n', '    }\n', '    \n', '    function isOnBattle(uint64 _objId) constant external requireDataContract requireRankDataContract returns(bool) {\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        MonsterObjAcc memory obj;\n', '        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(_objId);\n', '        if (obj.monsterId == 0)\n', '            return false;\n', '        EtheremonRankData rank = EtheremonRankData(rankDataContract);\n', '        return rank.isOnBattle(obj.trainer, _objId);\n', '    }\n', '}']
['pragma solidity ^0.4.16;\n', '\n', 'contract BasicAccessControl {\n', '    address public owner;\n', '    // address[] public moderators;\n', '    uint16 public totalModerators = 0;\n', '    mapping (address => bool) public moderators;\n', '    bool public isMaintaining = false;\n', '\n', '    function BasicAccessControl() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyModerators() {\n', '        require(msg.sender == owner || moderators[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '    modifier isActive {\n', '        require(!isMaintaining);\n', '        _;\n', '    }\n', '\n', '    function ChangeOwner(address _newOwner) onlyOwner public {\n', '        if (_newOwner != address(0)) {\n', '            owner = _newOwner;\n', '        }\n', '    }\n', '\n', '\n', '    function AddModerator(address _newModerator) onlyOwner public {\n', '        if (moderators[_newModerator] == false) {\n', '            moderators[_newModerator] = true;\n', '            totalModerators += 1;\n', '        }\n', '    }\n', '    \n', '    function RemoveModerator(address _oldModerator) onlyOwner public {\n', '        if (moderators[_oldModerator] == true) {\n', '            moderators[_oldModerator] = false;\n', '            totalModerators -= 1;\n', '        }\n', '    }\n', '\n', '    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\n', '        isMaintaining = _isMaintaining;\n', '    }\n', '}\n', '\n', 'contract EtheremonEnum {\n', '    enum ArrayType {\n', '        CLASS_TYPE,\n', '        STAT_STEP,\n', '        STAT_START,\n', '        STAT_BASE,\n', '        OBJ_SKILL\n', '    }\n', '}\n', '\n', 'interface EtheremonTradeInterface {\n', '    function isOnTrading(uint64 _objId) constant external returns(bool);\n', '}\n', '\n', 'contract EtheremonDataBase is EtheremonEnum {\n', '    uint64 public totalMonster;\n', '\n', '    function getMonsterObj(uint64 _objId) constant public returns(uint64 objId, uint32 classId, address trainer, uint32 exp, uint32 createIndex, uint32 lastClaimIndex, uint createTime);\n', '    function getMonsterDexSize(address _trainer) constant public returns(uint);\n', '    function getElementInArrayType(ArrayType _type, uint64 _id, uint _index) constant public returns(uint8);\n', '    \n', '    function addMonsterObj(uint32 _classId, address _trainer, string _name)  public returns(uint64);\n', '    function addElementToArrayType(ArrayType _type, uint64 _id, uint8 _value) public returns(uint);\n', '}\n', '\n', 'interface EtheremonRankData {\n', '    function setPlayer(address _trainer, uint64 _a0, uint64 _a1, uint64 _a2, uint64 _s0, uint64 _s1, uint64 _s2) external returns(uint32 playerId);\n', '    function isOnBattle(address _trainer, uint64 _objId) constant external returns(bool);\n', '}\n', '\n', 'contract EtheremonRankBattle is BasicAccessControl, EtheremonEnum {\n', '\n', '    struct MonsterObjAcc {\n', '        uint64 monsterId;\n', '        uint32 classId;\n', '        address trainer;\n', '        string name;\n', '        uint32 exp;\n', '        uint32 createIndex;\n', '        uint32 lastClaimIndex;\n', '        uint createTime;\n', '    }\n', '    \n', '    // linked smart contract\n', '    address public dataContract;\n', '    address public tradeContract;\n', '    address public rankDataContract;\n', '    \n', '    // modifier\n', '    modifier requireDataContract {\n', '        require(dataContract != address(0));\n', '        _;\n', '    }\n', '    \n', '    modifier requireTradeContract {\n', '        require(tradeContract != address(0));\n', '        _;\n', '    }\n', '\n', '    modifier requireRankDataContract {\n', '        require(rankDataContract != address(0));\n', '        _;\n', '    }\n', '\n', '    // event\n', '    event EventUpdateCastle(address indexed trainer, uint32 playerId);\n', '    \n', '    function EtheremonRankBattle(address _dataContract, address _tradeContract, address _rankDataContract) public {\n', '        dataContract = _dataContract;\n', '        tradeContract = _tradeContract;\n', '        rankDataContract = _rankDataContract;\n', '    }\n', '    \n', '    function setContract(address _dataContract, address _tradeContract, address _rankDataContract) onlyModerators external {\n', '        dataContract = _dataContract;\n', '        tradeContract = _tradeContract;\n', '        rankDataContract = _rankDataContract;\n', '    }\n', '\n', '    // public\n', '    \n', '    function getValidClassId(uint64 _objId, address _owner) constant public returns(uint32) {\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        MonsterObjAcc memory obj;\n', '        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(_objId);\n', '        if (obj.trainer != _owner || obj.classId == 21) return 0;\n', '        return obj.classId;\n', '    }\n', '    \n', '    function hasValidParam(address _trainer, uint64 _a1, uint64 _a2, uint64 _a3, uint64 _s1, uint64 _s2, uint64 _s3) constant public returns(bool) {\n', '        if (_a1 == 0 || _a2 == 0 || _a3 == 0)\n', '            return false;\n', '        if (_a1 == _a2 || _a1 == _a3 || _a1 == _s1 || _a1 == _s2 || _a1 == _s3)\n', '            return false;\n', '        if (_a2 == _a3 || _a2 == _s1 || _a2 == _s2 || _a2 == _s3)\n', '            return false;\n', '        if (_a3 == _s1 || _a3 == _s2 || _a3 == _s3)\n', '            return false;\n', '        if (_s1 > 0 && (_s1 == _s2 || _s1 == _s3))\n', '            return false;\n', '        if (_s2 > 0 && (_s2 == _s3))\n', '            return false;\n', '        \n', '        uint32 classA1 = getValidClassId(_a1, _trainer);\n', '        uint32 classA2 = getValidClassId(_a2, _trainer);\n', '        uint32 classA3 = getValidClassId(_a3, _trainer);\n', '        \n', '        if (classA1 == 0 || classA2 == 0 || classA3 == 0)\n', '            return false;\n', '        if (classA1 == classA2 || classA1 == classA3 || classA2 == classA3)\n', '            return false;\n', '        if (_s1 > 0 && getValidClassId(_s1, _trainer) == 0)\n', '            return false;\n', '        if (_s2 > 0 && getValidClassId(_s2, _trainer) == 0)\n', '            return false;\n', '        if (_s3 > 0 && getValidClassId(_s3, _trainer) == 0)\n', '            return false;\n', '        return true;\n', '    }\n', '    \n', '    function setCastle(uint64 _a1, uint64 _a2, uint64 _a3, uint64 _s1, uint64 _s2, uint64 _s3) isActive requireDataContract \n', '        requireTradeContract requireRankDataContract external {\n', '        \n', '        if (!hasValidParam(msg.sender, _a1, _a2, _a3, _s1, _s2, _s3))\n', '            revert();\n', '        \n', '        EtheremonTradeInterface trade = EtheremonTradeInterface(tradeContract);\n', '        if (trade.isOnTrading(_a1) || trade.isOnTrading(_a2) || trade.isOnTrading(_a3) || \n', '            trade.isOnTrading(_s1) || trade.isOnTrading(_s2) || trade.isOnTrading(_s3))\n', '            revert();\n', '\n', '        EtheremonRankData rank = EtheremonRankData(rankDataContract);\n', '        uint32 playerId = rank.setPlayer(msg.sender, _a1, _a2, _a3, _s1, _s2, _s3);\n', '        EventUpdateCastle(msg.sender, playerId);\n', '    }\n', '    \n', '    function isOnBattle(uint64 _objId) constant external requireDataContract requireRankDataContract returns(bool) {\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        MonsterObjAcc memory obj;\n', '        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(_objId);\n', '        if (obj.monsterId == 0)\n', '            return false;\n', '        EtheremonRankData rank = EtheremonRankData(rankDataContract);\n', '        return rank.isOnBattle(obj.trainer, _objId);\n', '    }\n', '}']
