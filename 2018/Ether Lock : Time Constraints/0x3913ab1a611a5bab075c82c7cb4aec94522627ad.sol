['pragma solidity ^0.4.24;\n', '\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract ANBXTimelock {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  // ERC20 basic token contract being held\n', '  ERC20Basic public token;\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  // timestamp when token release is enabled\n', '  uint256 public firstReleaseTime;\n', '  uint256 public secondReleaseTime;\n', '\n', '  constructor(\n', '    address _token,\n', '    address _beneficiary,\n', '    uint256 _firstLockupInDays,\n', '    uint256 _secondLockupInDays\n', '  )\n', '    public\n', '  {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_firstLockupInDays > 0);\n', '    require(_secondLockupInDays > 0);\n', '    token = ERC20Basic(_token);\n', '    beneficiary = _beneficiary;\n', '    firstReleaseTime = now + _firstLockupInDays * 1 days;\n', '    secondReleaseTime = now + _secondLockupInDays * 1 days;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers tokens held by timelock to beneficiary.\n', '   */\n', '  function release() public {\n', '    uint256 amount;\n', '    // solium-disable-next-line security/no-block-members\n', '    if (secondReleaseTime != 0 && block.timestamp >= secondReleaseTime) {\n', '      amount = token.balanceOf(this);\n', '      require(amount > 0);\n', '      token.safeTransfer(beneficiary, amount);\n', '      secondReleaseTime = 0;\n', '    } else if (firstReleaseTime != 0 && block.timestamp >= firstReleaseTime) {\n', '      amount = token.balanceOf(this);\n', '      require(amount > 0);\n', '      token.safeTransfer(beneficiary, amount / 2);\n', '      firstReleaseTime = 0;\n', '    }\n', '  }\n', '}']