['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * ██████╗     ███████╗████████╗███████╗ ██████╗    ███╗        ██╗    █████╗    ██╗     \n', ' * ██╔══██╗  ██╔════╝╚══██╔══╝██╔════╝ ██╔══██╗  ████╗     ██║ ██╔══██╗ ██║     \n', ' * ██████╔╝  █████╗              ██║        █████╗      ██████╔╝  ██╔██╗   ██║ ███████║ ██║     \n', ' * ██╔══██╗  ██╔══╝              ██║        ██╔══╝      ██╔══██╗  ██║╚██╗██║ ██╔══██║ ██║     \n', ' * ██║      ██║ ███████╗         ██║        ███████╗ ██║      ██║ ██║   ╚████║ ██║     ██║ ███████╗\n', ' * ╚═╝      ╚═╝ ╚══════╝         ╚═╝        ╚══════╝ ╚═╝      ╚═╝ ╚═╝      ╚═══╝╚═╝      ╚═╝╚══════╝    \n', ' * \n', ' *  Contacts:\n', ' * \n', ' *   -- t.me/Reternal\n', ' *   -- https://www.reternal.net\n', ' * \n', ' * - GAIN PER 24 HOURS:\n', ' * \n', ' *     -- Individual balance < 1 Ether: 3.15%\n', ' *     -- Individual balance >= 1 Ether: 3.25%\n', ' *     -- Individual balance >= 4 Ether: 3.45%\n', ' *     -- Individual balance >= 12 Ether: 3.65%\n', ' *     -- Individual balance >= 50 Ether: 3.85%\n', ' *     -- Individual balance >= 200 Ether: 4.15%\n', ' * \n', ' *     -- Contract balance < 500 Ether: 0%\n', ' *     -- Contract balance >= 500 Ether: 0.10%\n', ' *     -- Contract balance >= 1500 Ether: 0.20%\n', ' *     -- Contract balance >= 2500 Ether: 0.30%\n', ' *     -- Contract balance >= 7000 Ether: 0.45%\n', ' *     -- Contract balance >= 15000 Ether: 0.65%\n', ' * \n', ' *  - Minimal contribution 0.01 eth\n', ' *  - Contribution allocation schemes:\n', ' *    -- 95% payments\n', ' *    -- 5% Marketing + Operating Expenses\n', ' * \n', ' * - How to use:\n', ' *  1. Send from your personal ETH wallet to the smart-contract address any amount more than or equal to 0.01 ETH\n', ' *  2. Add your refferer&#39;s wallet to a HEX data in your transaction to \n', ' *     get a bonus amount back to your wallet only for the FIRST deposit\n', ' *     IMPORTANT: if you want to support Reternal project, you can leave your HEX data field empty, \n', ' *                if you have no referrer and do not want to support Reternal, you can type &#39;noreferrer&#39;\n', ' *                if there is no referrer, you will not get any bonuses\n', ' *  3. Use etherscan.io to verify your transaction \n', ' *  4. Claim your dividents by sending 0 ether transaction (available anytime)\n', ' *  5. You can reinvest anytime you want\n', ' *\n', ' * RECOMMENDED GAS LIMIT: 200000\n', ' * RECOMMENDED GAS PRICE: https://ethgasstation.info/\n', ' * \n', ' * The smart-contract has a "restart" function, more info at www.reternal.net\n', ' * \n', ' * If you want to check your dividents, you can use etherscan.io site, following the "Internal Txns" tab of your wallet\n', ' * WARNING: do not use exchanges&#39; wallets - you will loose your funds. Only use your personal wallet for transactions \n', ' * \n', ' */\n', '\n', 'contract Reternal {\n', '    \n', '    // Investor&#39;s data storage\n', '    mapping (address => Investor) public investors;\n', '    address[] public addresses;\n', '    \n', '    struct Investor\n', '    {\n', '        uint id;\n', '        uint deposit;\n', '        uint depositCount;\n', '        uint block;\n', '        address referrer;\n', '    }\n', '    \n', '    uint constant public MINIMUM_INVEST = 10000000000000000 wei;\n', '    address defaultReferrer = 0x25EDFd665C2898c2898E499Abd8428BaC616a0ED;\n', '    \n', '    uint public round;\n', '    uint public totalDepositAmount;\n', '    bool public pause;\n', '    uint public restartBlock;\n', '    bool ref_flag;\n', '    \n', '    // Investors&#39; dividents increase goals due to a bank growth\n', '    uint bank1 = 5e20; // 500 eth\n', '    uint bank2 = 15e20; // 1500 eth\n', '    uint bank3 = 25e20; // 2500 eth\n', '    uint bank4 = 7e21; // 7000 eth\n', '    uint bank5 = 15e20; // 15000 eth\n', '    // Investors&#39; dividents increase due to individual deposit amount\n', '    uint dep1 = 1e18; // 1 ETH\n', '    uint dep2 = 4e18; // 4 ETH\n', '    uint dep3 = 12e18; // 12 ETH\n', '    uint dep4 = 5e19; // 50 ETH\n', '    uint dep5 = 2e20; // 200 ETH\n', '    \n', '    event NewInvestor(address indexed investor, uint deposit, address referrer);\n', '    event PayOffDividends(address indexed investor, uint value);\n', '    event refPayout(address indexed investor, uint value, address referrer);\n', '    event NewDeposit(address indexed investor, uint value);\n', '    event NextRoundStarted(uint round, uint block, address addr, uint value);\n', '    \n', '    constructor() public {\n', '        addresses.length = 1;\n', '        round = 1;\n', '        pause = false;\n', '    }\n', '\n', '    function restart() private {\n', '        address addr;\n', '\n', '        for (uint i = addresses.length - 1; i > 0; i--) {\n', '            addr = addresses[i];\n', '            addresses.length -= 1;\n', '            delete investors[addr];\n', '        }\n', '        \n', '        emit NextRoundStarted(round, block.number, msg.sender, msg.value);\n', '        pause = false;\n', '        round += 1;\n', '        totalDepositAmount = 0;\n', '        \n', '        createDeposit();\n', '    }\n', '\n', '    function getRaisedPercents(address addr) internal view  returns(uint){\n', '        // Individual deposit percentage sums up with &#39;Reternal total fund&#39; percentage\n', '        uint percent = getIndividualPercent() + getBankPercent();\n', '        uint256 amount = investors[addr].deposit * percent / 100*(block.number-investors[addr].block)/6000;\n', '        return(amount / 100);\n', '    }\n', '    \n', '    function payDividends() private{\n', '        require(investors[msg.sender].id > 0, "Investor not found.");\n', '        // Investor&#39;s total raised amount\n', '        uint amount = getRaisedPercents(msg.sender);\n', '            \n', '        if (address(this).balance < amount) {\n', '            pause = true;\n', '            restartBlock = block.number + 6000;\n', '            return;\n', '        }\n', '        \n', '        // Service fee deduction \n', '        uint FeeToWithdraw = amount * 5 / 100;\n', '        uint payment = amount - FeeToWithdraw;\n', '        \n', '        address(0xD9bE11E7412584368546b1CaE64b6C384AE85ebB).transfer(FeeToWithdraw);\n', '        msg.sender.transfer(payment);\n', '        emit PayOffDividends(msg.sender, amount);\n', '        \n', '    }\n', '    \n', '    function createDeposit() private{\n', '        Investor storage user = investors[msg.sender];\n', '        \n', '        if (user.id == 0) {\n', '            \n', '            // Check for malicious smart-contract\n', '            msg.sender.transfer(0 wei);\n', '            user.id = addresses.push(msg.sender);\n', '\n', '            if (msg.data.length != 0) {\n', '                address referrer = bytesToAddress(msg.data);\n', '                \n', '                // Check for referrer&#39;s registration. Check for self referring\n', '                if (investors[referrer].id > 0 && referrer != msg.sender) {\n', '                    user.referrer = referrer;\n', '                    \n', '                    // Cashback only for the first deposit\n', '                    if (user.depositCount == 0) { // cashback only for the first deposit\n', '                        uint cashback = msg.value / 100;\n', '                        if (msg.sender.send(cashback)) {\n', '                            emit refPayout(msg.sender, cashback, referrer);\n', '                        }\n', '                    }\n', '                }\n', '            } else {\n', '                // If data is empty:\n', '                user.referrer = defaultReferrer;\n', '            }\n', '            \n', '            emit NewInvestor(msg.sender, msg.value, referrer);\n', '            \n', '        } else {\n', '            // Dividents payment for an investor\n', '            payDividends();\n', '        }\n', '        \n', '        // 2% from a referral deposit transfer to a referrer\n', '        uint payReferrer = msg.value * 2 / 100; // 2% from referral deposit to referrer\n', '        \n', '        //\n', '        if (user.referrer == defaultReferrer) {\n', '            user.referrer.transfer(payReferrer);\n', '        } else {\n', '            investors[referrer].deposit += payReferrer;\n', '        }\n', '        \n', '        \n', '        user.depositCount++;\n', '        user.deposit += msg.value;\n', '        user.block = block.number;\n', '        totalDepositAmount += msg.value;\n', '        emit NewDeposit(msg.sender, msg.value);\n', '    }\n', '\n', '    function() external payable {\n', '        if(pause) {\n', '            if (restartBlock <= block.number) { restart(); }\n', '            require(!pause, "Eternal is restarting, wait for the block in restartBlock");\n', '        } else {\n', '            if (msg.value == 0) {\n', '                payDividends();\n', '                return;\n', '            }\n', '            require(msg.value >= MINIMUM_INVEST, "Too small amount, minimum 0.01 ether");\n', '            createDeposit();\n', '        }\n', '    }\n', '    \n', '    function getBankPercent() public view returns(uint){\n', '        \n', '        uint contractBalance = address(this).balance;\n', '        \n', '        uint totalBank1 = bank1;\n', '        uint totalBank2 = bank2;\n', '        uint totalBank3 = bank3;\n', '        uint totalBank4 = bank4;\n', '        uint totalBank5 = bank5;\n', '        \n', '        if(contractBalance < totalBank1){\n', '            return(0); // If bank lower than 500, whole procent doesnt add\n', '        }\n', '        if(contractBalance >= totalBank1 && contractBalance < totalBank2){\n', '            return(10); // If bank amount more than or equal to 500 ETH, whole procent add 0.10%\n', '        }\n', '        if(contractBalance >= totalBank2 && contractBalance < totalBank3){\n', '            return(20); // If bank amount more than or equal to 1500 ETH, whole procent add 0.10%\n', '        }\n', '        if(contractBalance >= totalBank3 && contractBalance < totalBank4){\n', '            return(30); // If bank amount more than or equal to 2500 ETH, whole procent add 0.10%\n', '        }\n', '        if(contractBalance >= totalBank4 && contractBalance < totalBank5){\n', '            return(45); // If bank amount more than or equal to 7000 ETH, whole procent add 0.15%\n', '        }\n', '        if(contractBalance >= totalBank5){\n', '            return(65); // If bank amount more than or equal to 15000 ETH, whole procent add 0.20%\n', '        }\n', '    }\n', '\n', '    function getIndividualPercent() public view returns(uint){\n', '        \n', '        uint userBalance = investors[msg.sender].deposit;\n', '        \n', '        uint totalDeposit1 = dep1;\n', '        uint totalDeposit2 = dep2;\n', '        uint totalDeposit3 = dep3;\n', '        uint totalDeposit4 = dep4;\n', '        uint totalDeposit5 = dep5;\n', '        \n', '        if(userBalance < totalDeposit1){\n', '            return(315); // 3.15% by default, investor deposit lower than 1 ETH\n', '        }\n', '        if(userBalance >= totalDeposit1 && userBalance < totalDeposit2){\n', '            return(325); // 3.25% Your Deposit more than or equal to 1 ETH\n', '        }\n', '        if(userBalance >= totalDeposit2 && userBalance < totalDeposit3){\n', '            return(345); // 3.45% Your Deposit more than or equal to 4 ETH\n', '        }\n', '        if(userBalance >= totalDeposit3 && userBalance < totalDeposit4){\n', '            return(360); // 3.60% Your Deposit more than or equal to 12 ETH  \n', '        }\n', '        if(userBalance >= totalDeposit4 && userBalance < totalDeposit5){\n', '            return(385); // 3.85% Your Deposit more than or equal to 50 ETH\n', '        }\n', '        if(userBalance >= totalDeposit5){\n', '            return(415); // 4.15% Your Deposit more than or equal to 200 ETH\n', '        }\n', '    }\n', '    \n', '    function getInvestorCount() public view returns (uint) {\n', '        return addresses.length - 1;\n', '    }\n', '    \n', '    function bytesToAddress(bytes bys) private pure returns (address addr) {\n', '        assembly {\n', '            addr := mload(add(bys, 20))\n', '        }\n', '    }\n', '\n', '}']