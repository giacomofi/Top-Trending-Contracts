['pragma solidity ^0.4.23;\n', '// ----------------------------------------------------------------------------\n', '// &#39;0xCatether Token&#39; contract\n', '// Mineable ERC20 Token using Proof Of Work\n', '//\n', '// Symbol      : 0xCATE\n', '// Name        : 0xCatether Token\n', '// Total supply: No Limit\n', '// Decimals    : 4\n', '//\n', '// ----------------------------------------------------------------------------\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', 'library ExtendedMath {\n', '    //return the smaller of the two inputs (a or b)\n', '    function limitLessThan(uint a, uint b) internal pure returns (uint c) {\n', '        if(a > b) return b;\n', '        return a;\n', '    }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract EIP918Interface {\n', '\n', '    /*\n', '     * Externally facing mint function that is called by miners to validate challenge digests, calculate reward,\n', '     * populate statistics, mutate epoch variables and adjust the solution difficulty as required. Once complete,\n', '     * a Mint event is emitted before returning a success indicator.\n', '     **/\n', '    function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success);\n', '\n', '    /*\n', '     * Optional\n', '     * Externally facing merge function that is called by miners to validate challenge digests, calculate reward,\n', '     * populate statistics, mutate epoch variables and adjust the solution difficulty as required. Additionally, the\n', '     * merge function takes an array of target token addresses to be used in merged rewards. Once complete,\n', '     * a Mint event is emitted before returning a success indicator.\n', '     **/\n', '    //function merge(uint256 nonce, bytes32 challenge_digest, address[] mineTokens) public returns (bool);\n', '\n', '    /*\n', '     * Returns the challenge number\n', '     **/\n', '    function getChallengeNumber() public view returns (bytes32);\n', '\n', '    /*\n', '     * Returns the mining difficulty. The number of digits that the digest of the PoW solution requires which \n', '     * typically auto adjusts during reward generation.\n', '     **/\n', '    function getMiningDifficulty() public view returns (uint);\n', '\n', '    /*\n', '     * Returns the mining target\n', '     **/\n', '    function getMiningTarget() public view returns (uint);\n', '\n', '    /*\n', '     * Return the current reward amount. Depending on the algorithm, typically rewards are divided every reward era \n', '     * as tokens are mined to provide scarcity\n', '     **/\n', '    function getMiningReward() public view returns (uint);\n', '    \n', '    /*\n', '     * Upon successful verification and reward the mint method dispatches a Mint Event indicating the reward address, \n', '     * the reward amount, the epoch count and newest challenge number.\n', '     **/\n', '    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\n', '\n', '}\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and an\n', '// initial fixed supply\n', '// ----------------------------------------------------------------------------\n', 'contract _0xCatetherToken is ERC20Interface, EIP918Interface, Owned {\n', '    using SafeMath for uint;\n', '    using ExtendedMath for uint;\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '    uint public latestDifficultyPeriodStarted;\n', '    uint public epochCount;//number of &#39;blocks&#39; mined\n', '    //a little number\n', '    uint public  _MINIMUM_TARGET = 2**16;\n', '    //a big number is easier ; just find a solution that is smaller\n', '    //uint public  _MAXIMUM_TARGET = 2**224;  bitcoin uses 224\n', '    uint public  _MAXIMUM_TARGET = 2**224;\n', '    uint public miningTarget;\n', '    bytes32 public challengeNumber;   //generate a new one when a new reward is minted\n', '    address public lastRewardTo;\n', '    uint public lastRewardAmount;\n', '    uint public lastRewardEthBlockNumber;\n', '    // a bunch of maps to know where this is going (pun intended)\n', '    \n', '    mapping(bytes32 => bytes32) public solutionForChallenge;\n', '    mapping(uint => uint) public targetForEpoch;\n', '    mapping(uint => uint) public timeStampForEpoch;\n', '    mapping(address => uint) balances;\n', '    mapping(address => address) donationsTo;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    event Donation(address donation);\n', '    event DonationAddressOf(address donator, address donnationAddress);\n', '    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor() public{\n', '        symbol = "0xCATE";\n', '        name = "0xCatether Token";\n', '        \n', '        decimals = 4;\n', '        epochCount = 0;\n', '        _totalSupply = 1337000000*10**uint(decimals); \n', '        \n', '        targetForEpoch[epochCount] = _MAXIMUM_TARGET;\n', '        challengeNumber = "GENESIS_BLOCK";\n', '        solutionForChallenge[challengeNumber] = "42"; // ahah yes\n', '        timeStampForEpoch[epochCount] = block.timestamp;\n', '        latestDifficultyPeriodStarted = block.number;\n', '        \n', '        epochCount = epochCount.add(1);\n', '        targetForEpoch[epochCount] = _MAXIMUM_TARGET;\n', '        miningTarget = _MAXIMUM_TARGET;\n', '        \n', '        balances[owner] = _totalSupply;\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '    }\n', '\n', '    function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success) {\n', '        //the PoW must contain work that includes a recent ethereum block hash (challenge number) and the msg.sender&#39;s address to prevent MITM attacks\n', '        bytes32 digest =  keccak256(challengeNumber, msg.sender, nonce );\n', '        //the challenge digest must match the expected\n', '        if (digest != challenge_digest) revert();\n', '        //the digest must be smaller than the target\n', '        if(uint256(digest) > miningTarget) revert();\n', '        //only allow one reward for each challenge\n', '        bytes32 solution = solutionForChallenge[challenge_digest];\n', '        solutionForChallenge[challengeNumber] = digest;\n', '        if(solution != 0x0) revert();  //prevent the same answer from awarding twice\n', '        uint reward_amount = getMiningReward();\n', '        balances[msg.sender] = balances[msg.sender].add(reward_amount);\n', '        _totalSupply = _totalSupply.add(reward_amount);\n', '        //set readonly diagnostics data\n', '        lastRewardTo = msg.sender;\n', '        lastRewardAmount = reward_amount;\n', '        lastRewardEthBlockNumber = block.number;\n', '        _startNewMiningEpoch();\n', '        emit Mint(msg.sender, reward_amount, epochCount, challengeNumber );\n', '       return true;\n', '    }\n', '\n', '    //a new &#39;block&#39; to be mined\n', '    function _startNewMiningEpoch() internal {\n', '        \n', '        timeStampForEpoch[epochCount] = block.timestamp;\n', '        epochCount = epochCount.add(1);\n', '    \n', '      //Difficulty adjustment following the DigiChieldv3 implementation (Tempered-SMA)\n', '      // Allows more thorough protection against multi-pool hash attacks\n', '      // https://github.com/zawy12/difficulty-algorithms/issues/9\n', '        miningTarget = _reAdjustDifficulty(epochCount);\n', '      //make the latest ethereum block hash a part of the next challenge for PoW to prevent pre-mining future blocks\n', '      //do this last since this is a protection mechanism in the mint() function\n', '      challengeNumber = blockhash(block.number.sub(1));\n', '    }\n', '\n', '    //https://github.com/zawy12/difficulty-algorithms/issues/21\n', '    //readjust the target via a tempered EMA\n', '    function _reAdjustDifficulty(uint epoch) internal returns (uint) {\n', '    \n', '        uint timeTarget = 300;  // We want miners to spend 5 minutes to mine each &#39;block&#39;\n', '        uint N = 6180;          //N = 1000*n, ratio between timeTarget and windowTime (31-ish minutes)\n', '                                // (Ethereum doesn&#39;t handle floating point numbers very well)\n', '        uint elapsedTime = timeStampForEpoch[epoch.sub(1)].sub(timeStampForEpoch[epoch.sub(2)]); // will revert if current timestamp is smaller than the previous one\n', '        targetForEpoch[epoch] = (targetForEpoch[epoch.sub(1)].mul(10000)).div( N.mul(3920).div(N.sub(1000).add(elapsedTime.mul(1042).div(timeTarget))).add(N));\n', '        //              newTarget   =   Tampered EMA-retarget on the last 6 blocks (a bit more, it&#39;s an approximation)\n', '\t// \t\t\t\tAlso, there&#39;s an adjust factor, in order to correct the delays induced by the time it takes for transactions to confirm\n', '\t//\t\t\t\tDifficulty is adjusted to the time it takes to produce a valid hash. Here, if we set it to take 300 seconds, it will actually take \n', '\t//\t\t\t\t300 seconds + TxConfirmTime to validate that block. So, we wad a little % to correct that lag time.\n', '\t//\t\t\t\tOnce Ethereum scales, it will actually make block times go a tad faster. There&#39;s no perfect answer to this problem at the moment\n', '        latestDifficultyPeriodStarted = block.number;\n', '        return targetForEpoch[epoch];\n', '    }\n', '\n', '    //this is a recent ethereum block hash, used to prevent pre-mining future blocks\n', '    function getChallengeNumber() public constant returns (bytes32) {\n', '        return challengeNumber;\n', '    }\n', '\n', '    //the number of zeroes the digest of the PoW solution requires.  Auto adjusts\n', '     function getMiningDifficulty() public constant returns (uint) {\n', '        return _MAXIMUM_TARGET.div(targetForEpoch[epochCount]);\n', '    }\n', '\n', '    function getMiningTarget() public constant returns (uint) {\n', '       return targetForEpoch[epochCount];\n', '    }\n', '\n', '    //There&#39;s no limit to the coin supply\n', '    //reward follows more or less the same emmission rate as Dogecoins&#39;. 5 minutes per block / 105120 block in one year (roughly)\n', '    function getMiningReward() public constant returns (uint) {\n', '        bytes32 digest = solutionForChallenge[challengeNumber];\n', '        if(epochCount > 160000) return (50000   * 10**uint(decimals) );                                   //  14.4 M/day / ~ 1.0B Tokens in 20&#39;000 blocks (coin supply @100&#39;000th block ~ 150 Billions)\n', '        if(epochCount > 140000) return (75000   * 10**uint(decimals) );                                   //  21.6 M/day / ~ 1.5B Tokens in 20&#39;000 blocks (coin supply @100&#39;000th block ~ 149 Billions)\n', '        if(epochCount > 120000) return (125000  * 10**uint(decimals) );                                  //  36.0 M/day / ~ 2.5B Tokens in 20&#39;000 blocks (coin supply @100&#39;000th block ~ 146 Billions)\n', '        if(epochCount > 100000) return (250000  * 10**uint(decimals) );                                  //  72.0 M/day / ~ 5.0B Tokens in 20&#39;000 blocks (coin supply @100&#39;000th block ~ 141 Billions) (~ 1 year elapsed)\n', '        if(epochCount > 80000) return  (500000  * 10**uint(decimals) );                                   // 144.0 M/day / ~10.0B Tokens in 20&#39;000 blocks (coin supply @ 80&#39;000th block ~ 131 Billions)\n', '        if(epochCount > 60000) return  (1000000 * 10**uint(decimals) );                                  // 288.0 M/day / ~20.0B Tokens in 20&#39;000 blocks (coin supply @ 60&#39;000th block ~ 111 Billions)\n', '        if(epochCount > 40000) return  ((uint256(keccak256(digest)) % 2500000) * 10**uint(decimals) );   // 360.0 M/day / ~25.0B Tokens in 20&#39;000 blocks (coin supply @ 40&#39;000th block ~  86 Billions)\n', '        if(epochCount > 20000) return  ((uint256(keccak256(digest)) % 3500000) * 10**uint(decimals) );   // 504.0 M/day / ~35.0B Tokens in 20&#39;000 blocks (coin supply @ 20&#39;000th block ~  51 Billions)\n', '                               return  ((uint256(keccak256(digest)) % 5000000) * 10**uint(decimals) );                         // 720.0 M/day / ~50.0B Tokens in 20&#39;000 blocks \n', '    }\n', '\n', '    //help debug mining software (even though challenge_digest isn&#39;t used, this function is constant and helps troubleshooting mining issues)\n', '    function getMintDigest(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number) public view returns (bytes32 digesttest) {\n', '        bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\n', '        return digest;\n', '    }\n', '\n', '    //help debug mining software\n', '    function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns (bool success) {\n', '      bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\n', '      if(uint256(digest) > testTarget) revert();\n', '      return (digest == challenge_digest);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply.sub(balances[address(0)]);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '    \n', '    function donationTo(address tokenOwner) public constant returns (address donationAddress) {\n', '        return donationsTo[tokenOwner];\n', '    }\n', '    \n', '    function changeDonation(address donationAddress) public returns (bool success) {\n', '        donationsTo[msg.sender] = donationAddress;\n', '        \n', '        emit DonationAddressOf(msg.sender , donationAddress); \n', '        return true;\n', '    \n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from token owner&#39;s account to `to` account\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        \n', '        address donation = donationsTo[msg.sender];\n', '        balances[msg.sender] = (balances[msg.sender].sub(tokens)).add(5000); // 0.5 CATE for the sender\n', '        \n', '        balances[to] = balances[to].add(tokens);\n', '        balances[donation] = balances[donation].add(5000); // 0.5 CATE for the sender&#39;s donation address\n', '        \n', '        emit Transfer(msg.sender, to, tokens);\n', '        emit Donation(donation);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function transferAndDonateTo(address to, uint tokens, address donation) public returns (bool success) {\n', '        \n', '        balances[msg.sender] = (balances[msg.sender].sub(tokens)).add(5000); // 0.5 CATE for the sender\n', '        balances[to] = balances[to].add(tokens);\n', '        balances[donation] = balances[donation].add(5000); // 0.5 CATE for the sender&#39;s specified donation address\n', '        emit Transfer(msg.sender, to, tokens);\n', '        emit Donation(donation);\n', '        return true;\n', '    }\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account\n', '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces\n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    //\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        \n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        balances[donationsTo[from]] = balances[donationsTo[from]].add(5000);     // 0.5 CATE for the sender&#39;s donation address\n', '        balances[donationsTo[msg.sender]] = balances[donationsTo[msg.sender]].add(5000); // 0.5 CATE for the sender\n', '        emit Transfer(from, to, tokens);\n', '        emit Donation(donationsTo[from]);\n', '        emit Donation(donationsTo[msg.sender]);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account. The `spender` contract function\n', '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Don&#39;t accept ETH\n', '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        revert();\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '// ----------------------------------------------------------------------------\n', "// '0xCatether Token' contract\n", '// Mineable ERC20 Token using Proof Of Work\n', '//\n', '// Symbol      : 0xCATE\n', '// Name        : 0xCatether Token\n', '// Total supply: No Limit\n', '// Decimals    : 4\n', '//\n', '// ----------------------------------------------------------------------------\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', 'library ExtendedMath {\n', '    //return the smaller of the two inputs (a or b)\n', '    function limitLessThan(uint a, uint b) internal pure returns (uint c) {\n', '        if(a > b) return b;\n', '        return a;\n', '    }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract EIP918Interface {\n', '\n', '    /*\n', '     * Externally facing mint function that is called by miners to validate challenge digests, calculate reward,\n', '     * populate statistics, mutate epoch variables and adjust the solution difficulty as required. Once complete,\n', '     * a Mint event is emitted before returning a success indicator.\n', '     **/\n', '    function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success);\n', '\n', '    /*\n', '     * Optional\n', '     * Externally facing merge function that is called by miners to validate challenge digests, calculate reward,\n', '     * populate statistics, mutate epoch variables and adjust the solution difficulty as required. Additionally, the\n', '     * merge function takes an array of target token addresses to be used in merged rewards. Once complete,\n', '     * a Mint event is emitted before returning a success indicator.\n', '     **/\n', '    //function merge(uint256 nonce, bytes32 challenge_digest, address[] mineTokens) public returns (bool);\n', '\n', '    /*\n', '     * Returns the challenge number\n', '     **/\n', '    function getChallengeNumber() public view returns (bytes32);\n', '\n', '    /*\n', '     * Returns the mining difficulty. The number of digits that the digest of the PoW solution requires which \n', '     * typically auto adjusts during reward generation.\n', '     **/\n', '    function getMiningDifficulty() public view returns (uint);\n', '\n', '    /*\n', '     * Returns the mining target\n', '     **/\n', '    function getMiningTarget() public view returns (uint);\n', '\n', '    /*\n', '     * Return the current reward amount. Depending on the algorithm, typically rewards are divided every reward era \n', '     * as tokens are mined to provide scarcity\n', '     **/\n', '    function getMiningReward() public view returns (uint);\n', '    \n', '    /*\n', '     * Upon successful verification and reward the mint method dispatches a Mint Event indicating the reward address, \n', '     * the reward amount, the epoch count and newest challenge number.\n', '     **/\n', '    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\n', '\n', '}\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and an\n', '// initial fixed supply\n', '// ----------------------------------------------------------------------------\n', 'contract _0xCatetherToken is ERC20Interface, EIP918Interface, Owned {\n', '    using SafeMath for uint;\n', '    using ExtendedMath for uint;\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '    uint public latestDifficultyPeriodStarted;\n', "    uint public epochCount;//number of 'blocks' mined\n", '    //a little number\n', '    uint public  _MINIMUM_TARGET = 2**16;\n', '    //a big number is easier ; just find a solution that is smaller\n', '    //uint public  _MAXIMUM_TARGET = 2**224;  bitcoin uses 224\n', '    uint public  _MAXIMUM_TARGET = 2**224;\n', '    uint public miningTarget;\n', '    bytes32 public challengeNumber;   //generate a new one when a new reward is minted\n', '    address public lastRewardTo;\n', '    uint public lastRewardAmount;\n', '    uint public lastRewardEthBlockNumber;\n', '    // a bunch of maps to know where this is going (pun intended)\n', '    \n', '    mapping(bytes32 => bytes32) public solutionForChallenge;\n', '    mapping(uint => uint) public targetForEpoch;\n', '    mapping(uint => uint) public timeStampForEpoch;\n', '    mapping(address => uint) balances;\n', '    mapping(address => address) donationsTo;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    event Donation(address donation);\n', '    event DonationAddressOf(address donator, address donnationAddress);\n', '    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor() public{\n', '        symbol = "0xCATE";\n', '        name = "0xCatether Token";\n', '        \n', '        decimals = 4;\n', '        epochCount = 0;\n', '        _totalSupply = 1337000000*10**uint(decimals); \n', '        \n', '        targetForEpoch[epochCount] = _MAXIMUM_TARGET;\n', '        challengeNumber = "GENESIS_BLOCK";\n', '        solutionForChallenge[challengeNumber] = "42"; // ahah yes\n', '        timeStampForEpoch[epochCount] = block.timestamp;\n', '        latestDifficultyPeriodStarted = block.number;\n', '        \n', '        epochCount = epochCount.add(1);\n', '        targetForEpoch[epochCount] = _MAXIMUM_TARGET;\n', '        miningTarget = _MAXIMUM_TARGET;\n', '        \n', '        balances[owner] = _totalSupply;\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '    }\n', '\n', '    function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success) {\n', "        //the PoW must contain work that includes a recent ethereum block hash (challenge number) and the msg.sender's address to prevent MITM attacks\n", '        bytes32 digest =  keccak256(challengeNumber, msg.sender, nonce );\n', '        //the challenge digest must match the expected\n', '        if (digest != challenge_digest) revert();\n', '        //the digest must be smaller than the target\n', '        if(uint256(digest) > miningTarget) revert();\n', '        //only allow one reward for each challenge\n', '        bytes32 solution = solutionForChallenge[challenge_digest];\n', '        solutionForChallenge[challengeNumber] = digest;\n', '        if(solution != 0x0) revert();  //prevent the same answer from awarding twice\n', '        uint reward_amount = getMiningReward();\n', '        balances[msg.sender] = balances[msg.sender].add(reward_amount);\n', '        _totalSupply = _totalSupply.add(reward_amount);\n', '        //set readonly diagnostics data\n', '        lastRewardTo = msg.sender;\n', '        lastRewardAmount = reward_amount;\n', '        lastRewardEthBlockNumber = block.number;\n', '        _startNewMiningEpoch();\n', '        emit Mint(msg.sender, reward_amount, epochCount, challengeNumber );\n', '       return true;\n', '    }\n', '\n', "    //a new 'block' to be mined\n", '    function _startNewMiningEpoch() internal {\n', '        \n', '        timeStampForEpoch[epochCount] = block.timestamp;\n', '        epochCount = epochCount.add(1);\n', '    \n', '      //Difficulty adjustment following the DigiChieldv3 implementation (Tempered-SMA)\n', '      // Allows more thorough protection against multi-pool hash attacks\n', '      // https://github.com/zawy12/difficulty-algorithms/issues/9\n', '        miningTarget = _reAdjustDifficulty(epochCount);\n', '      //make the latest ethereum block hash a part of the next challenge for PoW to prevent pre-mining future blocks\n', '      //do this last since this is a protection mechanism in the mint() function\n', '      challengeNumber = blockhash(block.number.sub(1));\n', '    }\n', '\n', '    //https://github.com/zawy12/difficulty-algorithms/issues/21\n', '    //readjust the target via a tempered EMA\n', '    function _reAdjustDifficulty(uint epoch) internal returns (uint) {\n', '    \n', "        uint timeTarget = 300;  // We want miners to spend 5 minutes to mine each 'block'\n", '        uint N = 6180;          //N = 1000*n, ratio between timeTarget and windowTime (31-ish minutes)\n', "                                // (Ethereum doesn't handle floating point numbers very well)\n", '        uint elapsedTime = timeStampForEpoch[epoch.sub(1)].sub(timeStampForEpoch[epoch.sub(2)]); // will revert if current timestamp is smaller than the previous one\n', '        targetForEpoch[epoch] = (targetForEpoch[epoch.sub(1)].mul(10000)).div( N.mul(3920).div(N.sub(1000).add(elapsedTime.mul(1042).div(timeTarget))).add(N));\n', "        //              newTarget   =   Tampered EMA-retarget on the last 6 blocks (a bit more, it's an approximation)\n", "\t// \t\t\t\tAlso, there's an adjust factor, in order to correct the delays induced by the time it takes for transactions to confirm\n", '\t//\t\t\t\tDifficulty is adjusted to the time it takes to produce a valid hash. Here, if we set it to take 300 seconds, it will actually take \n', '\t//\t\t\t\t300 seconds + TxConfirmTime to validate that block. So, we wad a little % to correct that lag time.\n', "\t//\t\t\t\tOnce Ethereum scales, it will actually make block times go a tad faster. There's no perfect answer to this problem at the moment\n", '        latestDifficultyPeriodStarted = block.number;\n', '        return targetForEpoch[epoch];\n', '    }\n', '\n', '    //this is a recent ethereum block hash, used to prevent pre-mining future blocks\n', '    function getChallengeNumber() public constant returns (bytes32) {\n', '        return challengeNumber;\n', '    }\n', '\n', '    //the number of zeroes the digest of the PoW solution requires.  Auto adjusts\n', '     function getMiningDifficulty() public constant returns (uint) {\n', '        return _MAXIMUM_TARGET.div(targetForEpoch[epochCount]);\n', '    }\n', '\n', '    function getMiningTarget() public constant returns (uint) {\n', '       return targetForEpoch[epochCount];\n', '    }\n', '\n', "    //There's no limit to the coin supply\n", "    //reward follows more or less the same emmission rate as Dogecoins'. 5 minutes per block / 105120 block in one year (roughly)\n", '    function getMiningReward() public constant returns (uint) {\n', '        bytes32 digest = solutionForChallenge[challengeNumber];\n', "        if(epochCount > 160000) return (50000   * 10**uint(decimals) );                                   //  14.4 M/day / ~ 1.0B Tokens in 20'000 blocks (coin supply @100'000th block ~ 150 Billions)\n", "        if(epochCount > 140000) return (75000   * 10**uint(decimals) );                                   //  21.6 M/day / ~ 1.5B Tokens in 20'000 blocks (coin supply @100'000th block ~ 149 Billions)\n", "        if(epochCount > 120000) return (125000  * 10**uint(decimals) );                                  //  36.0 M/day / ~ 2.5B Tokens in 20'000 blocks (coin supply @100'000th block ~ 146 Billions)\n", "        if(epochCount > 100000) return (250000  * 10**uint(decimals) );                                  //  72.0 M/day / ~ 5.0B Tokens in 20'000 blocks (coin supply @100'000th block ~ 141 Billions) (~ 1 year elapsed)\n", "        if(epochCount > 80000) return  (500000  * 10**uint(decimals) );                                   // 144.0 M/day / ~10.0B Tokens in 20'000 blocks (coin supply @ 80'000th block ~ 131 Billions)\n", "        if(epochCount > 60000) return  (1000000 * 10**uint(decimals) );                                  // 288.0 M/day / ~20.0B Tokens in 20'000 blocks (coin supply @ 60'000th block ~ 111 Billions)\n", "        if(epochCount > 40000) return  ((uint256(keccak256(digest)) % 2500000) * 10**uint(decimals) );   // 360.0 M/day / ~25.0B Tokens in 20'000 blocks (coin supply @ 40'000th block ~  86 Billions)\n", "        if(epochCount > 20000) return  ((uint256(keccak256(digest)) % 3500000) * 10**uint(decimals) );   // 504.0 M/day / ~35.0B Tokens in 20'000 blocks (coin supply @ 20'000th block ~  51 Billions)\n", "                               return  ((uint256(keccak256(digest)) % 5000000) * 10**uint(decimals) );                         // 720.0 M/day / ~50.0B Tokens in 20'000 blocks \n", '    }\n', '\n', "    //help debug mining software (even though challenge_digest isn't used, this function is constant and helps troubleshooting mining issues)\n", '    function getMintDigest(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number) public view returns (bytes32 digesttest) {\n', '        bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\n', '        return digest;\n', '    }\n', '\n', '    //help debug mining software\n', '    function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns (bool success) {\n', '      bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\n', '      if(uint256(digest) > testTarget) revert();\n', '      return (digest == challenge_digest);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply.sub(balances[address(0)]);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '    \n', '    function donationTo(address tokenOwner) public constant returns (address donationAddress) {\n', '        return donationsTo[tokenOwner];\n', '    }\n', '    \n', '    function changeDonation(address donationAddress) public returns (bool success) {\n', '        donationsTo[msg.sender] = donationAddress;\n', '        \n', '        emit DonationAddressOf(msg.sender , donationAddress); \n', '        return true;\n', '    \n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to `to` account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        \n', '        address donation = donationsTo[msg.sender];\n', '        balances[msg.sender] = (balances[msg.sender].sub(tokens)).add(5000); // 0.5 CATE for the sender\n', '        \n', '        balances[to] = balances[to].add(tokens);\n', "        balances[donation] = balances[donation].add(5000); // 0.5 CATE for the sender's donation address\n", '        \n', '        emit Transfer(msg.sender, to, tokens);\n', '        emit Donation(donation);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function transferAndDonateTo(address to, uint tokens, address donation) public returns (bool success) {\n', '        \n', '        balances[msg.sender] = (balances[msg.sender].sub(tokens)).add(5000); // 0.5 CATE for the sender\n', '        balances[to] = balances[to].add(tokens);\n', "        balances[donation] = balances[donation].add(5000); // 0.5 CATE for the sender's specified donation address\n", '        emit Transfer(msg.sender, to, tokens);\n', '        emit Donation(donation);\n', '        return true;\n', '    }\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account\n", '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces\n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    //\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        \n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', "        balances[donationsTo[from]] = balances[donationsTo[from]].add(5000);     // 0.5 CATE for the sender's donation address\n", '        balances[donationsTo[msg.sender]] = balances[donationsTo[msg.sender]].add(5000); // 0.5 CATE for the sender\n', '        emit Transfer(from, to, tokens);\n', '        emit Donation(donationsTo[from]);\n', '        emit Donation(donationsTo[msg.sender]);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account. The `spender` contract function\n", '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Don't accept ETH\n", '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        revert();\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']
