['pragma solidity ^0.4.22;\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract DiscordPool is Ownable {\n', '    uint public raised;\n', '    bool public active = true;\n', '    mapping(address => uint) public balances;\n', '    event Deposit(address indexed beneficiary, uint value);\n', '    event Withdraw(address indexed beneficiary, uint value);\n', '\n', '    function () external payable whenActive {\n', '        raised += msg.value;\n', '        balances[msg.sender] += msg.value;\n', '        emit Deposit(msg.sender, msg.value);\n', '    }\n', '    \n', '    function finalize() external onlyOwner {\n', '        active = false;\n', '    }\n', '    \n', '    function withdraw(address beneficiary) external onlyOwner whenEnded {\n', '        uint balance = address(this).balance;\n', '        beneficiary.transfer(balance);\n', '        emit Withdraw(beneficiary, balance);\n', '    }\n', '\n', '    modifier whenEnded() {\n', '        require(!active);\n', '        _;\n', '    }\n', '    \n', '    modifier whenActive() {\n', '        require(active);\n', '        _;\n', '    }\n', '}']
['pragma solidity ^0.4.22;\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract DiscordPool is Ownable {\n', '    uint public raised;\n', '    bool public active = true;\n', '    mapping(address => uint) public balances;\n', '    event Deposit(address indexed beneficiary, uint value);\n', '    event Withdraw(address indexed beneficiary, uint value);\n', '\n', '    function () external payable whenActive {\n', '        raised += msg.value;\n', '        balances[msg.sender] += msg.value;\n', '        emit Deposit(msg.sender, msg.value);\n', '    }\n', '    \n', '    function finalize() external onlyOwner {\n', '        active = false;\n', '    }\n', '    \n', '    function withdraw(address beneficiary) external onlyOwner whenEnded {\n', '        uint balance = address(this).balance;\n', '        beneficiary.transfer(balance);\n', '        emit Withdraw(beneficiary, balance);\n', '    }\n', '\n', '    modifier whenEnded() {\n', '        require(!active);\n', '        _;\n', '    }\n', '    \n', '    modifier whenActive() {\n', '        require(active);\n', '        _;\n', '    }\n', '}']
