['pragma solidity ^0.4.25;\n', '\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a / b;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'interface TokenOLD {\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function transferFrom(address from, address to, uint tokens) external returns (bool success);\n', '}\n', '\n', 'interface TokenNEW {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '}\n', '\n', 'contract ClaimSPTI{\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    TokenNEW public newTokenReward;\n', '    TokenOLD  public oldToken;\n', '    address public creator;\n', '    address public owner = 0x1Ab98C0833e034b1E81F4F0282914C615d795299;\n', '    uint256 public startDate;\n', '    uint256 public endDate;\n', '\n', '\n', '    modifier isCreator() {\n', '        require(msg.sender == creator);\n', '        _;\n', '    }\n', '\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '    constructor() public {\n', '        startDate = 1538554875;\n', '        endDate = startDate + 30 days;\n', '        creator = msg.sender;\n', '        newTokenReward = TokenNEW(0xc91d83955486e5261528d1acc1956529d2fe282b); //Instantiate the new reward\n', '        oldToken = TokenOLD(0xa673802792379714201ebc5f586c3a44b0248681); //Instantiate old token to be replaced\n', '    }\n', '    \n', '    function() public payable {\n', '        \n', '        require(now > startDate);\n', '        require(now < endDate);\n', '        require(msg.value == 0); // Only 0 ether accepted, This is not an IC Oh!\n', '        uint oldSptiUserBal;\n', '        oldSptiUserBal = getBalance(msg.sender); //Get Old SPTI balance\n', '        require(oldSptiUserBal > 0); // Make sure claimant actually possesses Old SPTI\n', '        require(oldToken.transferFrom(msg.sender, 0xceC74106a23329745b07f6eC5e1E39803b3fF31F, oldSptiUserBal));\n', '        \n', '        //If all of the above happens accordingly, go ahead and release new token\n', '        //to old token holders\n', '        uint256 amount = oldSptiUserBal.div(8);\n', '        newTokenReward.transfer(msg.sender, amount);\n', '        emit FundTransfer(msg.sender, amount, true);\n', '\n', '    }\n', '    \n', '    function getBalance(address userAddress) public view returns (uint256){\n', '        uint bal = oldToken.balanceOf(userAddress);\n', '        return bal;\n', '    }\n', '    \n', '    function transferToken(address to, uint256 value) isCreator public {\n', '        newTokenReward.transfer(to, value);      \n', '    }\n', '\n', '    function kill() isCreator public {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.25;\n', '\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a / b;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'interface TokenOLD {\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function transferFrom(address from, address to, uint tokens) external returns (bool success);\n', '}\n', '\n', 'interface TokenNEW {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '}\n', '\n', 'contract ClaimSPTI{\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    TokenNEW public newTokenReward;\n', '    TokenOLD  public oldToken;\n', '    address public creator;\n', '    address public owner = 0x1Ab98C0833e034b1E81F4F0282914C615d795299;\n', '    uint256 public startDate;\n', '    uint256 public endDate;\n', '\n', '\n', '    modifier isCreator() {\n', '        require(msg.sender == creator);\n', '        _;\n', '    }\n', '\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '    constructor() public {\n', '        startDate = 1538554875;\n', '        endDate = startDate + 30 days;\n', '        creator = msg.sender;\n', '        newTokenReward = TokenNEW(0xc91d83955486e5261528d1acc1956529d2fe282b); //Instantiate the new reward\n', '        oldToken = TokenOLD(0xa673802792379714201ebc5f586c3a44b0248681); //Instantiate old token to be replaced\n', '    }\n', '    \n', '    function() public payable {\n', '        \n', '        require(now > startDate);\n', '        require(now < endDate);\n', '        require(msg.value == 0); // Only 0 ether accepted, This is not an IC Oh!\n', '        uint oldSptiUserBal;\n', '        oldSptiUserBal = getBalance(msg.sender); //Get Old SPTI balance\n', '        require(oldSptiUserBal > 0); // Make sure claimant actually possesses Old SPTI\n', '        require(oldToken.transferFrom(msg.sender, 0xceC74106a23329745b07f6eC5e1E39803b3fF31F, oldSptiUserBal));\n', '        \n', '        //If all of the above happens accordingly, go ahead and release new token\n', '        //to old token holders\n', '        uint256 amount = oldSptiUserBal.div(8);\n', '        newTokenReward.transfer(msg.sender, amount);\n', '        emit FundTransfer(msg.sender, amount, true);\n', '\n', '    }\n', '    \n', '    function getBalance(address userAddress) public view returns (uint256){\n', '        uint bal = oldToken.balanceOf(userAddress);\n', '        return bal;\n', '    }\n', '    \n', '    function transferToken(address to, uint256 value) isCreator public {\n', '        newTokenReward.transfer(to, value);      \n', '    }\n', '\n', '    function kill() isCreator public {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '}']
