['// 0.4.21+commit.dfe3193c.Emscripten.clang\n', 'pragma solidity ^0.4.21;\n', '\n', '// we assume ERC20 or compatible token with most basic imaginable transfer function\n', 'interface ERC20 {\n', '  function transfer( address to, uint256 value ) external;\n', '}\n', '\n', 'contract owned {\n', '  address public owner;\n', '\n', '  function owned() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function changeOwner( address _miner ) public onlyOwner {\n', '    owner = _miner;\n', '  }\n', '\n', '  modifier onlyOwner {\n', '    require (msg.sender == owner);\n', '    _;\n', '  }\n', '}\n', '\n', '//\n', '// NOTE: this Airdropper becomes msg.sender for the token transfer and must\n', '//       already be the holder of enough tokens\n', '//\n', 'contract Airdropper is owned {\n', '\n', '  // NOTE: caller responsible to check ethstats.net for block size limit\n', '  function airdrop( address tokAddr,\n', '                    address[] dests,\n', '                    uint[] quantities ) public onlyOwner returns (uint) {\n', '\n', '    for (uint ii = 0; ii < dests.length; ii++) {\n', '      ERC20(tokAddr).transfer( dests[ii], quantities[ii] );\n', '    }\n', '\n', '    return ii;\n', '  }\n', '}']
['// 0.4.21+commit.dfe3193c.Emscripten.clang\n', 'pragma solidity ^0.4.21;\n', '\n', '// we assume ERC20 or compatible token with most basic imaginable transfer function\n', 'interface ERC20 {\n', '  function transfer( address to, uint256 value ) external;\n', '}\n', '\n', 'contract owned {\n', '  address public owner;\n', '\n', '  function owned() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function changeOwner( address _miner ) public onlyOwner {\n', '    owner = _miner;\n', '  }\n', '\n', '  modifier onlyOwner {\n', '    require (msg.sender == owner);\n', '    _;\n', '  }\n', '}\n', '\n', '//\n', '// NOTE: this Airdropper becomes msg.sender for the token transfer and must\n', '//       already be the holder of enough tokens\n', '//\n', 'contract Airdropper is owned {\n', '\n', '  // NOTE: caller responsible to check ethstats.net for block size limit\n', '  function airdrop( address tokAddr,\n', '                    address[] dests,\n', '                    uint[] quantities ) public onlyOwner returns (uint) {\n', '\n', '    for (uint ii = 0; ii < dests.length; ii++) {\n', '      ERC20(tokAddr).transfer( dests[ii], quantities[ii] );\n', '    }\n', '\n', '    return ii;\n', '  }\n', '}']
