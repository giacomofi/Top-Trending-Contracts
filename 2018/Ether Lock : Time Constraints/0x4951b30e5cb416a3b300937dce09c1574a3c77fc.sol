['pragma solidity 0.4.20;\n', '\n', '/**\n', ' * @author Denver Brittain\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '   * @dev transfer token for a specified address\n', '   * @param _to The address to transfer to.\n', '   * @param _value The amount to be transferred.\n', '   */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the balance of the specified address.\n', '   * @param _owner The address to query the the balance of.\n', '   * @return An uint256 representing the amount owned by the passed address.\n', '   */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title StandardCrowdsale \n', ' * @dev StandardCrowdsale is a base contract for managing a token crowdsale.\n', ' * This crowdsale has been modified to contain a presale start and end time \n', ' * with presale bonuses and an ongoing ICO that is not complete until all tokens\n', ' * have been sold and transferred from the holding contract.\n', ' * @dev from Crowdsale by Zepellin with a few differences, the most important of \n', ' * which are the tiered presale pricing structure, presale start \n', ' * and conclusion times, and the ongoing ICO."\n', ' */\n', 'contract StandardCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    // our token being sold\n', '    StandardToken public token; \n', '\n', '    // presale has a start and end time, ICO only has a start time\n', '    uint256 public icoStartTime;\n', '    uint256 public presaleStartTime;\n', '    uint256 public presaleEndTime;\n', '\n', '    // funding is collected here\n', '    address public wallet;\n', '\n', '    // the number of tokens/wei distributed to a buyer depends on a number of factors\n', '    // if the presale is active, the number of tokens a buyer receives per wei depends \n', '    // on the amount of wei sent: the tiered pricing structure\n', '    // if the ICO is active, the buyer receives a fixed number of tokens/wei at the icoRate\n', '    uint256 public icoRate;\n', '    uint256 public tier1Rate;\n', '    uint256 public tier2Rate;\n', '    uint256 public tier3Rate;\n', '    uint256 public tier4Rate;\n', '\n', '\n', '    // total funds raised in wei\n', '    uint256 public weiRaised;\n', '\n', '    /**\n', '     * event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param value in wei paid for purchase\n', '     * @param amount (number) of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\n', '\n', '    // modified standard crowdsale must be supplied presale and ico tiers for token purchase rates\n', '    function StandardCrowdsale(\n', '        uint256 _icoStartTime,  \n', '        uint256 _presaleStartTime,\n', '        uint256 _presaleEndTime,\n', '        uint256 _icoRate, \n', '        uint256 _tier1Rate,\n', '        uint256 _tier2Rate,\n', '        uint256 _tier3Rate,\n', '        uint256 _tier4Rate,\n', '        address _wallet) {\n', '\n', '        require(_icoStartTime >= now);\n', '        require(_icoRate > 0);\n', '        require(_wallet != 0x0);\n', '\n', '        icoStartTime = _icoStartTime;\n', '        presaleStartTime = _presaleStartTime;\n', '        presaleEndTime = _presaleEndTime;\n', '        tier1Rate = _tier1Rate;\n', '        tier2Rate = _tier2Rate;\n', '        tier3Rate = _tier3Rate;\n', '        tier4Rate = _tier4Rate;\n', '\n', '        icoRate = _icoRate;\n', '        wallet = _wallet;\n', '\n', '        token = createTokenContract(); \n', '    }\n', '\n', '    function createTokenContract() internal returns(StandardToken) {\n', '        return new StandardToken();\n', '    }\n', '\n', '    // buyers may purchase tokens through fallback function\n', '    // if registered, simply send wei to contract during active presale\n', '    // or ICO times to receive tokens\n', '    function () payable {\n', '        buyTokens();\n', '    }\n', '\n', '    // low level token purchase function\n', '    function buyTokens() public payable {\n', '\n', '        // purhcase must occur during either ICO or presale\n', '        require(validPurchase()); \n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        // calculate token amount to be sent\n', '        // set to ICO values and update for presale bonuses if necessary\n', '        // accept a maximum of 600 ether during presale\n', '        uint256 tokens = weiAmount.mul(icoRate);\n', '\n', '        // if presale is active, confirm that purchase does not go over presale \n', '        // funding cap and calculate presale tokens to be transferred\n', '        if ((now >= presaleStartTime && now < presaleEndTime) && weiRaised.add(weiAmount) <= 600 ether) {        \n', '            if (weiAmount < 2 ether) \n', '                tokens = weiAmount.mul(tier1Rate);\n', '            if (weiAmount >= 2 ether && weiAmount < 5 ether) \n', '                tokens = weiAmount.mul(tier2Rate);\n', '            if (weiAmount >= 5 ether && weiAmount < 10 ether)\n', '                tokens = weiAmount.mul(tier3Rate);\n', '            if (weiAmount >= 10 ether)\n', '                tokens = weiAmount.mul(tier4Rate);\n', '        } \n', '\n', '        // update funds raised by new purchase\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        require(token.transfer(msg.sender, tokens));\n', '        TokenPurchase(msg.sender, weiAmount, tokens);\n', '\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '    // @return true if the transaction can buy tokens from presale or ICO, includes funding cap check \n', '    function validPurchase() internal returns(bool) {\n', '        bool withinPresalePeriod = now >= presaleStartTime;\n', '        bool withinICOPeriod = now >= icoStartTime;\n', '        bool nonZeroPurchase = msg.value != 0;\n', '        return (withinPresalePeriod && nonZeroPurchase && weiRaised <= 600 ether) || (withinICOPeriod && nonZeroPurchase && weiRaised <= 3000 ether);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title CappedCrowdsale\n', ' * @dev Extension of Crowdsale with a max amount of funds raised\n', ' */\n', 'contract CappedCrowdsale is StandardCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedCrowdsale(uint256 _cap) {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  // overriding Crowdsale#validPurchase to add extra cap logic\n', '  // @return true if investors can buy at the moment\n', '  function validPurchase() internal returns (bool) {\n', '    bool withinCap = weiRaised.add(msg.value) <= cap;\n', '    return super.validPurchase() && withinCap;\n', '  }\n', '\n', '  // overriding Crowdsale#hasEnded to add cap logic\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    return capReached;\n', '  }\n', '}\n', '\n', '/** \n', ' * @title WhitelistedCrowdsale\n', ' * @dev WhitelistedCrowdsale is a contract for managing a \n', ' * token sale with a clearly defined whitelist of addresses \n', ' * who may purchase tokens. \n', ' * @dev WhitelistedCrowdsale based on RequestNetwork: https://github.com/RequestNetwork/RequestTokenSale \n', '*/ \n', 'contract WhitelistedCrowdsale is StandardCrowdsale, Ownable {\n', '    \n', '    mapping(address=>bool) public registered;\n', '\n', '    event RegistrationStatusChanged(address target, bool isRegistered);\n', '\n', '    function changeRegistrationStatus(address target, bool isRegistered) public onlyOwner {\n', '        registered[target] = isRegistered;\n', '        RegistrationStatusChanged(target, isRegistered);\n', '    }\n', '\n', '    function changeRegistrationStatuses(address[] targets, bool isRegistered) public onlyOwner {\n', '        for (uint i = 0; i < targets.length; i++) {\n', '            changeRegistrationStatus(targets[i], isRegistered);\n', '        }\n', '    }\n', '\n', '    function validPurchase() internal returns (bool) {\n', '        return super.validPurchase() && registered[msg.sender];\n', '    }\n', '}\n', '\n', '/** \n', ' * @dev ApolloCoinToken definition. This is a very standard token definition that \n', ' * contains a few additional features to the typical ERC20 token including a timelock,\n', ' * and a valid transfer destination check\n', '*/\n', 'contract ApolloCoinToken is StandardToken, Ownable {\n', '    string  public  constant name = "ApolloCoin";\n', '    string  public  constant symbol = "APC";\n', '    uint8   public  constant decimals = 18;\n', '\n', '    uint    public  transferableStartTime;\n', '\n', '    address public  tokenSaleContract;\n', '    address public  earlyInvestorWallet;\n', '\n', '\n', '    modifier onlyWhenTransferEnabled() {\n', '        if ( now <= transferableStartTime ) {\n', '            require(msg.sender == tokenSaleContract || msg.sender == earlyInvestorWallet || msg.sender == owner);\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier validDestination(address to) {\n', '        require(to != address(this));\n', '        _;\n', '    }\n', '\n', '    function ApolloCoinToken(uint tokenTotalAmount, uint _transferableStartTime, address _admin, address _earlyInvestorWallet) {\n', '        \n', '       // Mint total supply and permanently disable minting\n', '       totalSupply = tokenTotalAmount * (10 ** uint256(decimals));\n', '\n', '        balances[msg.sender] = totalSupply;\n', '        Transfer(address(0x0), msg.sender, totalSupply);\n', '\n', '        transferableStartTime = _transferableStartTime;     // tokens may only be transferred after this time\n', '        tokenSaleContract = msg.sender;\n', '        earlyInvestorWallet = _earlyInvestorWallet;\n', '\n', '        transferOwnership(_admin); \n', '    }\n', '\n', '    function transfer(address _to, uint _value) public validDestination(_to) onlyWhenTransferEnabled returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public validDestination(_to) onlyWhenTransferEnabled returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    event Burn(address indexed _burner, uint _value);\n', '\n', '    /**\n', '     * @dev burn tokens\n', '     * @param _value The amount to be burned.\n', '     * @return always true (necessary in case of override)\n', '     */\n', '    function burn(uint _value) public onlyWhenTransferEnabled returns (bool) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(msg.sender, _value);\n', '        Transfer(msg.sender, address(0x0), _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev burn tokens on behalf of someone\n', '     * @param _from The address of the owner of the token\n', '     * @param _value The amount to be burned\n', '     * @return always true (necessary in case of override)\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public onlyWhenTransferEnabled returns(bool) {\n', '        assert(transferFrom(_from, msg.sender, _value));\n', '        return burn(_value);\n', '    }\n', '\n', '    /**\n', '     * @dev transfer to owner any tokens sent here by mistake \n', '     * @param token The address of the token to transfer\n', '     * @param amount The amount to be transfered\n', '     */\n', '    function emergencyERC20Drain(ERC20 token, uint amount ) public onlyOwner {\n', '        token.transfer(owner, amount);\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev ApolloCoinTokenSale contract to define the transferrable start time, ICO hard cap, \n', ' * tiered presale bonuses, and distribution of tokens to devs, early investors, and ApolloCoin company wallets.\n', '*/\n', 'contract ApolloCoinTokenSale is Ownable, CappedCrowdsale, WhitelistedCrowdsale {\n', '   \n', '    // hard cap on total ether collected \n', '    uint private constant HARD_CAP = 3000 ether;\n', '\n', '    // total supply cap\n', '    uint public constant TOTAL_APC_SUPPLY = 21000000;\n', '\n', '    // ICO rate definition\n', '    // buyers receive 900 APC per ETH sent\n', '    uint private constant ICO_RATE = 900;\n', '\n', '    // presale rate definitions \n', '    uint private constant TIER1_RATE = 1080;\n', '    uint private constant TIER2_RATE = 1440;\n', '    uint private constant TIER3_RATE = 1620;\n', '    uint private constant TIER4_RATE = 1800; \n', '\n', '    // Tokens initialy distributed for the team (20%)\n', '    address public constant TEAM_WALLET = 0xd55de4cdade91f8b3d0ad44e5bc0074840bcf287;\n', '    uint public constant TEAM_AMOUNT = 4200000e18;\n', '\n', '    // Tokens initialy distributed to early investors (35%)\n', '    address public constant EARLY_INVESTOR_WALLET = 0x67e84a30d6c33f90e9aef0b9147455f4c8d85208;\n', '    uint public constant EARLY_INVESTOR_AMOUNT = 7350000e18;\n', '\n', '    // Tokens initialy distributed to the company (30%)\n', '    // wallet also used to gather the ether of the token sale\n', '    address private constant APOLLOCOIN_COMPANY_WALLET = 0x129c3e7ac8e80511d50a77d757bb040a1132f59c;\n', '    uint public constant APOLLOCOIN_COMPANY_AMOUNT = 6300000e18;\n', '    \n', '    // tokens cannot be sent for 10 days following the start of the presale\n', '    uint public constant NON_TRANSFERABLE_TIME = 10 days;    \n', '\n', '    function ApolloCoinTokenSale(uint256 _icoStartTime, uint256 _presaleStartTime, uint256 _presaleEndTime) WhitelistedCrowdsale() CappedCrowdsale(HARD_CAP) StandardCrowdsale(_icoStartTime, _presaleStartTime, _presaleEndTime, ICO_RATE, TIER1_RATE, TIER2_RATE, TIER3_RATE, TIER4_RATE, APOLLOCOIN_COMPANY_WALLET) {\n', '        token.transfer(TEAM_WALLET, TEAM_AMOUNT);\n', '\n', '        token.transfer(EARLY_INVESTOR_WALLET, EARLY_INVESTOR_AMOUNT);\n', '\n', '        token.transfer(APOLLOCOIN_COMPANY_WALLET, APOLLOCOIN_COMPANY_AMOUNT);\n', '    }\n', '\n', '    function createTokenContract () internal returns(StandardToken) {\n', '        return new ApolloCoinToken(TOTAL_APC_SUPPLY, NON_TRANSFERABLE_TIME, APOLLOCOIN_COMPANY_WALLET, EARLY_INVESTOR_WALLET);\n', '    }\n', '\n', '    function drainRemainingToken () public onlyOwner {\n', '        require(hasEnded());\n', '        token.transfer(APOLLOCOIN_COMPANY_WALLET, token.balanceOf(this));\n', '    }\n', '  \n', '}']