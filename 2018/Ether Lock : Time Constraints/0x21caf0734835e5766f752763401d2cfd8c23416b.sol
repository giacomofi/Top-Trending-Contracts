['pragma solidity 0.4.19;\n', '\n', 'contract ERC20 {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '  function transfer(address to, uint value) returns (bool ok);\n', '  function transferFrom(address from, address to, uint value) returns (bool ok);\n', '  function approve(address spender, uint value) returns (bool ok);\n', '  function mintToken(address to, uint256 value) returns (uint256);\n', '  function changeTransfer(bool allowed);\n', '}\n', '\n', '\n', 'contract Sale {\n', '\n', '    uint256 public maxMintable;\n', '    uint256 public totalMinted;\n', '    uint public endBlock;\n', '    uint public startBlock;\n', '    uint public exchangeRate;\n', '    bool public isFunding;\n', '    ERC20 public Token;\n', '    address public ETHWallet;\n', '    uint256 public heldTotal;\n', '\n', '    bool private configSet;\n', '    address public creator;\n', '\n', '    mapping (address => uint256) public heldTokens;\n', '    mapping (address => uint) public heldTimeline;\n', '\n', '    event Contribution(address from, uint256 amount);\n', '    event ReleaseTokens(address from, uint256 amount);\n', '\n', '    function Sale() {\n', '        startBlock = block.number;\n', '        maxMintable = 10000000e18; \n', '        ETHWallet = 0x56710010B234A104D7E67dA5765A081eF7f2B4C8; \n', '        isFunding = true;\n', '        creator = 0x0E6EFB81B03ea30Fd7Eac2a416FB5ec943B5cdBA;\n', '        createHeldCoins();\n', '        exchangeRate = 2000; \n', '    }\n', '\n', '    \n', '    \n', '    \n', '    function setup(address TOKEN, uint endBlockTime) {\n', '        require(!configSet);\n', '        Token = ERC20(TOKEN);\n', '        endBlock = endBlockTime;\n', '        configSet = true;\n', '    }\n', '\n', '    function closeSale() external {\n', '      require(msg.sender==creator);\n', '      isFunding = false;\n', '    }\n', '\n', '    \n', '    \n', '    function contribute() external payable {\n', '        require(msg.value>0);\n', '        require(isFunding);\n', '        require(block.number <= endBlock);\n', '        uint256 amount = msg.value * exchangeRate;\n', '        uint256 total = totalMinted + amount;\n', '        require(total<=maxMintable);\n', '        totalMinted = total; \n', '        ETHWallet.transfer(msg.value);\n', '        Token.mintToken(msg.sender, amount);\n', '        Contribution(msg.sender, amount);\n', '    }\n', '    \n', '    \n', '    function() payable public {\n', '        require(msg.value>0);\n', '        require(isFunding);\n', '        require(block.number <= endBlock);\n', '        uint256 amount = msg.value * exchangeRate;\n', '        uint256 total = totalMinted + amount;\n', '        require(total<=maxMintable);\n', '        totalMinted = total; \n', '        ETHWallet.transfer(msg.value);\n', '        Token.mintToken(msg.sender, amount);\n', '        Contribution(msg.sender, amount);\n', '    }\n', '\n', '    \n', '    function updateRate(uint256 rate) external {\n', '        require(msg.sender==creator);\n', '        require(isFunding);\n', '        exchangeRate = rate;\n', '    }\n', '\n', '    \n', '    function changeCreator(address _creator) external {\n', '        require(msg.sender==creator);\n', '        creator = _creator;\n', '    }\n', '\n', '    \n', '    function changeTransferStats(bool _allowed) external {\n', '        require(msg.sender==creator);\n', '        Token.changeTransfer(_allowed);\n', '    }\n', '\n', '    \n', '    \n', '    function createHeldCoins() internal {\n', '        \n', '        createHoldToken(0x44Bb8D9036Db5453219189E0a7262BFe1a69AfEB, 4000000e18); \n', '        \n', '        \n', '    }\n', '\n', '    \n', '    function createHoldToken(address _to, uint256 amount) internal {\n', '        \n', '        heldTokens[_to] = amount;\n', '        heldTimeline[_to] = block.number + 0;\n', '        heldTotal += amount;\n', '        totalMinted += heldTotal;\n', '    }\n', '\n', '    \n', '    function releaseHeldCoins() external {\n', '        uint256 held = heldTokens[msg.sender];\n', '        uint heldBlock = heldTimeline[msg.sender];\n', '        require(!isFunding);\n', '        require(held >= 0);\n', '        require(block.number >= heldBlock);\n', '        heldTokens[msg.sender] = 0;\n', '        heldTimeline[msg.sender] = 0;\n', '        Token.mintToken(msg.sender, held);\n', '        ReleaseTokens(msg.sender, held);\n', '    }\n', '\n', '\n', '}']