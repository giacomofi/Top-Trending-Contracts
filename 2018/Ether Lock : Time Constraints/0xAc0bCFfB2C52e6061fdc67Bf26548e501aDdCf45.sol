['pragma solidity ^0.4.18;\n', '\n', 'contract BCSToken {\n', '    \n', '    function BCSToken() internal {}\n', '    function transfer(address _to, uint256 _value) public {}\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {}\n', '\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract investment{\n', '    using SafeMath for uint;\n', '    \n', '    address public owner;\n', '    mapping (address => uint) private amount;\n', '    mapping (address => uint) private day;\n', '    mapping (address => uint) private dateDeposit;\n', '    mapping (address => uint) private rewardPerYear;\n', '    mapping (address => uint) private outcome;\n', '    \n', '    struct a{\n', '        uint aday;\n', '        uint adateDeposit;\n', '        uint aamount;\n', '    }\n', '    BCSToken dc;\n', '    function investment(address _t) public {\n', '        dc = BCSToken(_t);\n', '        owner = msg.sender;\n', '    }\n', '    function Datenow () public view returns (uint timeNow){\n', '        return block.timestamp;\n', '    }\n', '    \n', '    \n', '    function calculate(address _user) private returns (bool status) {\n', '        uint _amount =amount[_user];\n', '        uint _day =day[_user];\n', '        uint _rewardPerYear = 1000;\n', '\n', '\n', '        if(_day == 90 && _amount >= SafeMath.mul(1000000,10**8)){\n', '            _rewardPerYear = 180;\n', '        }else if(_day == 60 && _amount >= SafeMath.mul(1000000,10**8)){\n', '            _rewardPerYear = 160;\n', '        }else if(_day == 90 && _amount >= SafeMath.mul(800000,10**8)){\n', '            _rewardPerYear = 140;\n', '        }else if(_day == 60 && _amount >= SafeMath.mul(800000,10**8)){\n', '            _rewardPerYear = 120;\n', '        }else if(_day == 90 && _amount >= SafeMath.mul(500000,10**8)){\n', '            _rewardPerYear = 100;\n', '        }else if(_day == 60 && _amount >= SafeMath.mul(500000,10**8)){\n', '            _rewardPerYear = 80;\n', '        }else if(_day == 90 && _amount >= SafeMath.mul(300000,10**8)){\n', '            _rewardPerYear = 60;\n', '        }else if(_day == 60 && _amount >= SafeMath.mul(300000,10**8)){\n', '            _rewardPerYear = 40;\n', '        }else if(_day == 30 && _amount >= SafeMath.mul(50001,10**8)){\n', '            _rewardPerYear = 15;\n', '        }else if(_day == 60 && _amount >= SafeMath.mul(50001,10**8)){ \n', '            _rewardPerYear = 25;\n', '        }else if(_day == 90 && _amount >= SafeMath.mul(50001,10**8)){\n', '            _rewardPerYear = 45;\n', '        }else if(_day == 30 && _amount >= SafeMath.mul(10001,10**8)){\n', '            _rewardPerYear = 5;\n', '        }else if(_day == 60 && _amount >= SafeMath.mul(10001,10**8)){\n', '            _rewardPerYear = 15;\n', '        }else if(_day == 90 && _amount >= SafeMath.mul(10001,10**8)){\n', '            _rewardPerYear = 25;\n', '        }else{\n', '            return false;\n', '        }\n', '        \n', '        rewardPerYear[_user]=_rewardPerYear;\n', '        outcome[_user] = SafeMath.add((SafeMath.div(SafeMath.mul(SafeMath.mul((_amount), rewardPerYear[_user]), _day), 365000)), _amount);\n', '        return true;\n', '    }\n', '    \n', '    function _withdraw(address _user) private returns (bool result){\n', '        \n', '        require(timeLeft(_user) == 0);\n', '        dc.transfer(_user, outcome[_user]);\n', '        amount[_user] = 0;\n', '        day[_user] = 0;\n', '        dateDeposit[_user] = 0;\n', '        rewardPerYear[_user] = 0;\n', '        outcome[_user] = 0;\n', '        return true;\n', '    }\n', '    \n', '    function timeLeft(address _user) view private returns (uint result){\n', '        \n', '        uint temp = SafeMath.add(SafeMath.mul(SafeMath.mul(SafeMath.mul(60,60),24),day[_user]),dateDeposit[_user]); // for mainnet (day-month)\n', '        if(now >= temp){\n', '            return 0;\n', '        }else{\n', '            return SafeMath.sub(temp,now);\n', '        }\n', '    }\n', '    \n', '    function deposit(uint _amount, uint _day) public returns (bool result){\n', '        require(amount[msg.sender]==0);\n', '        require(( _day == 90 || _day == 60 || _day == 30));\n', '        require(_amount >= SafeMath.mul(10001,10**8));\n', '        dc.transferFrom(msg.sender, this, _amount);\n', '        amount[msg.sender] = _amount;\n', '        day[msg.sender] = _day;\n', '        dateDeposit[msg.sender] = now;\n', '        calculate(msg.sender);\n', '        return true;\n', '    }\n', '    function withdraw(address _user) public returns (bool result) {\n', '        require(owner == msg.sender);\n', '        return _withdraw(_user);\n', '        \n', '    }\n', '    \n', '    function withdraw() public returns (bool result){\n', '        return _withdraw(msg.sender);\n', '    }\n', '    \n', '    function info(address _user) public view returns (uint principle, uint secondLeft, uint annualized, uint returnInvestment, uint packetDay, uint timestampDeposit){\n', '        return (amount[_user],timeLeft(_user),rewardPerYear[_user],outcome[_user],day[_user],dateDeposit[_user] );\n', '    }\n', '\n', '}']