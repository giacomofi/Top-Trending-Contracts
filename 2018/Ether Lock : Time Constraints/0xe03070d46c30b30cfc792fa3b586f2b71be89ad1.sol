['pragma solidity ^0.4.21;\n', '\n', 'interface itoken {\n', '    function freezeAccount(address _target, bool _freeze) external;\n', '    function freezeAccountPartialy(address _target, uint256 _value) external;\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n', '    function balanceOf(address _owner) external view returns (uint256 balance);\n', '    // function transferOwnership(address newOwner) external;\n', '    function allowance(address _owner, address _spender) external view returns (uint256);\n', '    function frozenAccount(address _account) external view returns (bool);\n', '    function frozenAmount(address _account) external view returns (uint256);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', 'contract OwnerContract is Claimable {\n', '    Claimable public ownedContract;\n', '    address internal origOwner;\n', '\n', '    /**\n', '     * @dev bind a contract as its owner\n', '     *\n', '     * @param _contract the contract address that will be binded by this Owner Contract\n', '     */\n', '    function bindContract(address _contract) onlyOwner public returns (bool) {\n', '        require(_contract != address(0));\n', '        ownedContract = Claimable(_contract);\n', '        origOwner = ownedContract.owner();\n', '\n', '        // take ownership of the owned contract\n', '        ownedContract.claimOwnership();\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev change the owner of the contract from this contract address to the original one.\n', '     *\n', '     */\n', '    function transferOwnershipBack() onlyOwner public {\n', '        ownedContract.transferOwnership(origOwner);\n', '        ownedContract = Claimable(address(0));\n', '        origOwner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev change the owner of the contract from this contract address to another one.\n', '     *\n', '     * @param _nextOwner the contract address that will be next Owner of the original Contract\n', '     */\n', '    function changeOwnershipto(address _nextOwner)  onlyOwner public {\n', '        ownedContract.transferOwnership(_nextOwner);\n', '        ownedContract = Claimable(address(0));\n', '        origOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract ReleaseToken is OwnerContract {\n', '    using SafeMath for uint256;\n', '\n', '    // record lock time period and related token amount\n', '    struct TimeRec {\n', '        uint256 amount;\n', '        uint256 remain;\n', '        uint256 endTime;\n', '        uint256 releasePeriodEndTime;\n', '    }\n', '\n', '    itoken internal owned;\n', '\n', '    address[] public frozenAccounts;\n', '    mapping (address => TimeRec[]) frozenTimes;\n', '    // mapping (address => uint256) releasedAmounts;\n', '    mapping (address => uint256) preReleaseAmounts;\n', '\n', '    event ReleaseFunds(address _target, uint256 _amount);\n', '\n', '    /**\n', '     * @dev bind a contract as its owner\n', '     *\n', '     * @param _contract the contract address that will be binded by this Owner Contract\n', '     */\n', '    function bindContract(address _contract) onlyOwner public returns (bool) {\n', '        require(_contract != address(0));\n', '        owned = itoken(_contract);\n', '        return super.bindContract(_contract);\n', '    }\n', '\n', '    /**\n', '     * @dev remove an account from the frozen accounts list\n', '     *\n', '     * @param _ind the index of the account in the list\n', '     */\n', '    function removeAccount(uint _ind) internal returns (bool) {\n', '        require(_ind < frozenAccounts.length);\n', '\n', '        uint256 i = _ind;\n', '        while (i < frozenAccounts.length.sub(1)) {\n', '            frozenAccounts[i] = frozenAccounts[i.add(1)];\n', '            i = i.add(1);\n', '        }\n', '\n', '        delete frozenAccounts[frozenAccounts.length.sub(1)];\n', '        frozenAccounts.length = frozenAccounts.length.sub(1);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev remove a time records from the time records list of one account\n', '     *\n', '     * @param _target the account that holds a list of time records which record the freeze period\n', '     */\n', '    function removeLockedTime(address _target, uint _ind) internal returns (bool) {\n', '        require(_target != address(0));\n', '\n', '        TimeRec[] storage lockedTimes = frozenTimes[_target];\n', '        require(_ind < lockedTimes.length);\n', '\n', '        uint256 i = _ind;\n', '        while (i < lockedTimes.length.sub(1)) {\n', '            lockedTimes[i] = lockedTimes[i.add(1)];\n', '            i = i.add(1);\n', '        }\n', '\n', '        delete lockedTimes[lockedTimes.length.sub(1)];\n', '        lockedTimes.length = lockedTimes.length.sub(1);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev get total remain locked tokens of an account\n', '     *\n', '     * @param _account the owner of some amount of tokens\n', '     */\n', '    function getRemainLockedOf(address _account) public view returns (uint256) {\n', '        require(_account != address(0));\n', '\n', '        uint256 totalRemain = 0;\n', '        uint256 len = frozenAccounts.length;\n', '        uint256 i = 0;\n', '        while (i < len) {\n', '            address frozenAddr = frozenAccounts[i];\n', '            if (frozenAddr == _account) {\n', '                uint256 timeRecLen = frozenTimes[frozenAddr].length;\n', '                uint256 j = 0;\n', '                while (j < timeRecLen) {\n', '                    TimeRec storage timePair = frozenTimes[frozenAddr][j];\n', '                    totalRemain = totalRemain.add(timePair.remain);\n', '\n', '                    j = j.add(1);\n', '                }\n', '            }\n', '\n', '            i = i.add(1);\n', '        }\n', '\n', '        return totalRemain;\n', '    }\n', '\n', '    /**\n', '     * judge whether we need to release some of the locked token\n', '     *\n', '     */\n', '    function needRelease() public view returns (bool) {\n', '        uint256 len = frozenAccounts.length;\n', '        uint256 i = 0;\n', '        while (i < len) {\n', '            address frozenAddr = frozenAccounts[i];\n', '            uint256 timeRecLen = frozenTimes[frozenAddr].length;\n', '            uint256 j = 0;\n', '            while (j < timeRecLen) {\n', '                TimeRec storage timePair = frozenTimes[frozenAddr][j];\n', '                if (now >= timePair.endTime) {\n', '                    return true;\n', '                }\n', '\n', '                j = j.add(1);\n', '            }\n', '\n', '            i = i.add(1);\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev freeze the amount of tokens of an account\n', '     *\n', '     * @param _target the owner of some amount of tokens\n', '     * @param _value the amount of the tokens\n', '     * @param _frozenEndTime the end time of the lock period, unit is second\n', '     * @param _releasePeriod the locking period, unit is second\n', '     */\n', '    function freeze(address _target, uint256 _value, uint256 _frozenEndTime, uint256 _releasePeriod) onlyOwner public returns (bool) {\n', '        //require(_tokenAddr != address(0));\n', '        require(_target != address(0));\n', '        require(_value > 0);\n', '        require(_frozenEndTime > 0);\n', '\n', '        uint256 len = frozenAccounts.length;\n', '\n', '        uint256 i = 0;\n', '        for (; i < len; i = i.add(1)) {\n', '            if (frozenAccounts[i] == _target) {\n', '                break;\n', '            }\n', '        }\n', '\n', '        if (i >= len) {\n', '            frozenAccounts.push(_target); // add new account\n', '        }\n', '\n', '        // each time the new locked time will be added to the backend\n', '        frozenTimes[_target].push(TimeRec(_value, _value, _frozenEndTime, _frozenEndTime.add(_releasePeriod)));\n', '        if (owned.frozenAccount(_target)) {\n', '            uint256 preFrozenAmount = owned.frozenAmount(_target);\n', '            owned.freezeAccountPartialy(_target, _value.add(preFrozenAmount));\n', '        } else {\n', '            owned.freezeAccountPartialy(_target, _value);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev transfer an amount of tokens to an account, and then freeze the tokens\n', '     *\n', '     * @param _target the account address that will hold an amount of the tokens\n', '     * @param _value the amount of the tokens which has been transferred\n', '     * @param _frozenEndTime the end time of the lock period, unit is second\n', '     * @param _releasePeriod the locking period, unit is second\n', '     */\n', '    function transferAndFreeze(address _target, uint256 _value, uint256 _frozenEndTime, uint256 _releasePeriod) onlyOwner public returns (bool) {\n', '        //require(_tokenOwner != address(0));\n', '        require(_target != address(0));\n', '        require(_value > 0);\n', '        require(_frozenEndTime > 0);\n', '\n', '        // check firstly that the allowance of this contract has been set\n', '        require(owned.allowance(msg.sender, this) > 0);\n', '\n', '        // now we need transfer the funds before freeze them\n', '        require(owned.transferFrom(msg.sender, _target, _value));\n', '\n', '        // freeze the account after transfering funds\n', '        if (!freeze(_target, _value, _frozenEndTime, _releasePeriod)) {\n', '            return false;\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * release the token which are locked for once and will be total released at once\n', '     * after the end point of the lock period\n', '     */\n', '    function releaseAllOnceLock() onlyOwner public returns (bool) {\n', '        //require(_tokenAddr != address(0));\n', '\n', '        uint256 len = frozenAccounts.length;\n', '        uint256 i = 0;\n', '        while (i < len) {\n', '            address target = frozenAccounts[i];\n', '            if (frozenTimes[target].length == 1 && frozenTimes[target][0].endTime == frozenTimes[target][0].releasePeriodEndTime && frozenTimes[target][0].endTime > 0 && now >= frozenTimes[target][0].endTime) {\n', '                uint256 releasedAmount = frozenTimes[target][0].amount;\n', '\n', '                // remove current release period time record\n', '                if (!removeLockedTime(target, 0)) {\n', '                    return false;\n', '                }\n', '\n', '                // remove the froze account\n', '                if (!removeAccount(i)) {\n', '                    return false;\n', '                }\n', '\n', '                uint256 preFrozenAmount = owned.frozenAmount(target);\n', '                if (preFrozenAmount > releasedAmount) {\n', '                    owned.freezeAccountPartialy(target, preFrozenAmount.sub(releasedAmount));\n', '                } else {\n', '                    owned.freezeAccount(target, false);\n', '                }\n', '\n', '                ReleaseFunds(target, releasedAmount);\n', '                len = len.sub(1);\n', '            } else {\n', '                // no account has been removed\n', '                i = i.add(1);\n', '            }\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev release the locked tokens owned by an account, which only have only one locked time\n', '     * and don&#39;t have release stage.\n', '     *\n', '     * @param _target the account address that hold an amount of locked tokens\n', '     */\n', '    function releaseAccount(address _target) onlyOwner public returns (bool) {\n', '        //require(_tokenAddr != address(0));\n', '        require(_target != address(0));\n', '\n', '        uint256 len = frozenAccounts.length;\n', '        uint256 i = 0;\n', '        while (i < len) {\n', '            address destAddr = frozenAccounts[i];\n', '            if (destAddr == _target) {\n', '                if (frozenTimes[destAddr].length == 1 && frozenTimes[destAddr][0].endTime == frozenTimes[destAddr][0].releasePeriodEndTime && frozenTimes[destAddr][0].endTime > 0 && now >= frozenTimes[destAddr][0].endTime) {\n', '                    uint256 releasedAmount = frozenTimes[destAddr][0].amount;\n', '\n', '                    // remove current release period time record\n', '                    if (!removeLockedTime(destAddr, 0)) {\n', '                        return false;\n', '                    }\n', '\n', '                    // remove the froze account\n', '                    if (!removeAccount(i)) {\n', '                        return false;\n', '                    }\n', '\n', '                    uint256 preFrozenAmount = owned.frozenAmount(destAddr);\n', '                    if (preFrozenAmount > releasedAmount) {\n', '                        owned.freezeAccountPartialy(destAddr, preFrozenAmount.sub(releasedAmount));\n', '                    } else {\n', '                        owned.freezeAccount(destAddr, false);\n', '                    }\n', '\n', '                    ReleaseFunds(destAddr, releasedAmount);\n', '                }\n', '\n', '                // if the account are not locked for once, we will do nothing here\n', '                return true;\n', '            }\n', '\n', '            i = i.add(1);\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev release the locked tokens owned by an account with several stages\n', '     * this need the contract get approval from the account by call approve() in the token contract\n', '     *\n', '     * @param _target the account address that hold an amount of locked tokens\n', '     */\n', '    function releaseWithStage(address _target/*, address _dest*/) onlyOwner public returns (bool) {\n', '        //require(_tokenaddr != address(0));\n', '        require(_target != address(0));\n', '        // require(_dest != address(0));\n', '        // require(_value > 0);\n', '\n', '        // check firstly that the allowance of this contract from _target account has been set\n', '        // require(owned.allowance(_target, this) > 0);\n', '\n', '        uint256 len = frozenAccounts.length;\n', '        uint256 i = 0;\n', '        while (i < len) {\n', '            // firstly find the target address\n', '            address frozenAddr = frozenAccounts[i];\n', '            if (frozenAddr == _target) {\n', '                uint256 timeRecLen = frozenTimes[frozenAddr].length;\n', '\n', '                bool released = false;\n', '                uint256 nowTime = now;\n', '                for (uint256 j = 0; j < timeRecLen; released = false) {\n', '                    // iterate every time records to caculate how many tokens need to be released.\n', '                    TimeRec storage timePair = frozenTimes[frozenAddr][j];\n', '                    if (nowTime > timePair.endTime && timePair.endTime > 0 && timePair.releasePeriodEndTime > timePair.endTime) {\n', '                        uint256 lastReleased = timePair.amount.sub(timePair.remain);\n', '                        uint256 value = (timePair.amount * nowTime.sub(timePair.endTime) / timePair.releasePeriodEndTime.sub(timePair.endTime)).sub(lastReleased);\n', '                        if (value > timePair.remain) {\n', '                            value = timePair.remain;\n', '                        }\n', '\n', '                        // timePair.endTime = nowTime;\n', '                        timePair.remain = timePair.remain.sub(value);\n', '                        ReleaseFunds(frozenAddr, value);\n', '                        preReleaseAmounts[frozenAddr] = preReleaseAmounts[frozenAddr].add(value);\n', '                        if (timePair.remain < 1e8) {\n', '                            if (!removeLockedTime(frozenAddr, j)) {\n', '                                return false;\n', '                            }\n', '                            released = true;\n', '                            timeRecLen = timeRecLen.sub(1);\n', '                        }\n', '                    } else if (nowTime >= timePair.endTime && timePair.endTime > 0 && timePair.releasePeriodEndTime == timePair.endTime) {\n', '                        timePair.remain = 0;\n', '                        ReleaseFunds(frozenAddr, timePair.amount);\n', '                        preReleaseAmounts[frozenAddr] = preReleaseAmounts[frozenAddr].add(timePair.amount);\n', '                        if (!removeLockedTime(frozenAddr, j)) {\n', '                            return false;\n', '                        }\n', '                        released = true;\n', '                        timeRecLen = timeRecLen.sub(1);\n', '                    }\n', '\n', '                    if (!released) {\n', '                        j = j.add(1);\n', '                    }\n', '                }\n', '\n', '                // we got some amount need to be released\n', '                if (preReleaseAmounts[frozenAddr] > 0) {\n', '                    uint256 preReleasedAmount = preReleaseAmounts[frozenAddr];\n', '                    uint256 preFrozenAmount = owned.frozenAmount(frozenAddr);\n', '\n', '                    // set the pre-release amount to 0 for next time\n', '                    preReleaseAmounts[frozenAddr] = 0;\n', '                    if (preFrozenAmount > preReleasedAmount) {\n', '                        owned.freezeAccountPartialy(frozenAddr, preFrozenAmount.sub(preReleasedAmount));\n', '                    } else {\n', '                        owned.freezeAccount(frozenAddr, false);\n', '                    }\n', '                    // if (!owned.transferFrom(_target, _dest, preReleaseAmounts[frozenAddr])) {\n', '                    //     return false;\n', '                    // }\n', '                }\n', '\n', '                // if all the frozen amounts had been released, then unlock the account finally\n', '                if (frozenTimes[frozenAddr].length == 0) {\n', '                    if (!removeAccount(i)) {\n', '                        return false;\n', '                    }\n', '                } /*else {\n', '                    // still has some tokens need to be released in future\n', '                    owned.freezeAccount(frozenAddr, true);\n', '                }*/\n', '\n', '                return true;\n', '            }\n', '\n', '            i = i.add(1);\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev set the new endtime of the released time of an account\n', '     *\n', '     * @param _target the owner of some amount of tokens\n', '     * @param _oldEndTime the original endtime for the lock period\n', '     * @param _newEndTime the new endtime for the lock period\n', '     */\n', '    function setNewEndtime(address _target, uint256 _oldEndTime, uint256 _newEndTime) onlyOwner public returns (bool) {\n', '        require(_target != address(0));\n', '        require(_oldEndTime > 0 && _newEndTime > 0);\n', '\n', '        uint256 len = frozenAccounts.length;\n', '        uint256 i = 0;\n', '        while (i < len) {\n', '            address frozenAddr = frozenAccounts[i];\n', '            if (frozenAddr == _target) {\n', '                uint256 timeRecLen = frozenTimes[frozenAddr].length;\n', '                uint256 j = 0;\n', '                while (j < timeRecLen) {\n', '                    TimeRec storage timePair = frozenTimes[frozenAddr][j];\n', '                    if (_oldEndTime == timePair.endTime) {\n', '                        uint256 duration = timePair.releasePeriodEndTime.sub(timePair.endTime);\n', '                        timePair.endTime = _newEndTime;\n', '                        timePair.releasePeriodEndTime = timePair.endTime.add(duration);\n', '\n', '                        return true;\n', '                    }\n', '\n', '                    j = j.add(1);\n', '                }\n', '\n', '                return false;\n', '            }\n', '\n', '            i = i.add(1);\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev set the new released period length of an account\n', '     *\n', '     * @param _target the owner of some amount of tokens\n', '     * @param _origEndTime the original endtime for the lock period\n', '     * @param _duration the new releasing period\n', '     */\n', '    function setNewReleasePeriod(address _target, uint256 _origEndTime, uint256 _duration) onlyOwner public returns (bool) {\n', '        require(_target != address(0));\n', '        require(_origEndTime > 0 && _duration > 0);\n', '\n', '        uint256 len = frozenAccounts.length;\n', '        uint256 i = 0;\n', '        while (i < len) {\n', '            address frozenAddr = frozenAccounts[i];\n', '            if (frozenAddr == _target) {\n', '                uint256 timeRecLen = frozenTimes[frozenAddr].length;\n', '                uint256 j = 0;\n', '                while (j < timeRecLen) {\n', '                    TimeRec storage timePair = frozenTimes[frozenAddr][j];\n', '                    if (_origEndTime == timePair.endTime) {\n', '                        timePair.releasePeriodEndTime = _origEndTime.add(_duration);\n', '                        return true;\n', '                    }\n', '\n', '                    j = j.add(1);\n', '                }\n', '\n', '                return false;\n', '            }\n', '\n', '            i = i.add(1);\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev get the locked stages of an account\n', '     *\n', '     * @param _target the owner of some amount of tokens\n', '     */\n', '    function getLockedStages(address _target) public view returns (uint) {\n', '        require(_target != address(0));\n', '\n', '        uint256 len = frozenAccounts.length;\n', '        uint256 i = 0;\n', '        while (i < len) {\n', '            address frozenAddr = frozenAccounts[i];\n', '            if (frozenAddr == _target) {\n', '                return frozenTimes[frozenAddr].length;\n', '            }\n', '\n', '            i = i.add(1);\n', '        }\n', '\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '     * @dev get the endtime of the locked stages of an account\n', '     *\n', '     * @param _target the owner of some amount of tokens\n', '     * @param _num the stage number of the releasing period\n', '     */\n', '    function getEndTimeOfStage(address _target, uint _num) public view returns (uint256) {\n', '        require(_target != address(0));\n', '\n', '        uint256 len = frozenAccounts.length;\n', '        uint256 i = 0;\n', '        while (i < len) {\n', '            address frozenAddr = frozenAccounts[i];\n', '            if (frozenAddr == _target) {\n', '                TimeRec storage timePair = frozenTimes[frozenAddr][_num];\n', '                return timePair.endTime;\n', '            }\n', '\n', '            i = i.add(1);\n', '        }\n', '\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '     * @dev get the remain unrleased tokens of the locked stages of an account\n', '     *\n', '     * @param _target the owner of some amount of tokens\n', '     * @param _num the stage number of the releasing period\n', '     */\n', '    function getRemainOfStage(address _target, uint _num) public view returns (uint256) {\n', '        require(_target != address(0));\n', '\n', '        uint256 len = frozenAccounts.length;\n', '        uint256 i = 0;\n', '        while (i < len) {\n', '            address frozenAddr = frozenAccounts[i];\n', '            if (frozenAddr == _target) {\n', '                TimeRec storage timePair = frozenTimes[frozenAddr][_num];\n', '                return timePair.remain;\n', '            }\n', '\n', '            i = i.add(1);\n', '        }\n', '\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '     * @dev get the remain releasing period of an account\n', '     *\n', '     * @param _target the owner of some amount of tokens\n', '     * @param _num the stage number of the releasing period\n', '     */\n', '    function getRemainReleaseTimeOfStage(address _target, uint _num) public view returns (uint256) {\n', '        require(_target != address(0));\n', '\n', '        uint256 len = frozenAccounts.length;\n', '        uint256 i = 0;\n', '        while (i < len) {\n', '            address frozenAddr = frozenAccounts[i];\n', '            if (frozenAddr == _target) {\n', '                TimeRec storage timePair = frozenTimes[frozenAddr][_num];\n', '                uint256 nowTime = now;\n', '                if (timePair.releasePeriodEndTime == timePair.endTime || nowTime <= timePair.endTime ) {\n', '                    return (timePair.releasePeriodEndTime.sub(timePair.endTime));\n', '                }\n', '\n', '                if (timePair.releasePeriodEndTime < nowTime) {\n', '                    return 0;\n', '                }\n', '\n', '                return (timePair.releasePeriodEndTime.sub(nowTime));\n', '            }\n', '\n', '            i = i.add(1);\n', '        }\n', '\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '     * @dev release the locked tokens owned by a number of accounts\n', '     *\n', '     * @param _targets the accounts list that hold an amount of locked tokens\n', '     */\n', '    function releaseMultiAccounts(address[] _targets) onlyOwner public returns (bool) {\n', '        //require(_tokenAddr != address(0));\n', '        require(_targets.length != 0);\n', '\n', '        bool res = false;\n', '        uint256 i = 0;\n', '        while (i < _targets.length) {\n', '            res = releaseAccount(_targets[i]) || res;\n', '            i = i.add(1);\n', '        }\n', '\n', '        return res;\n', '    }\n', '\n', '    /**\n', '     * @dev release the locked tokens owned by an account\n', '     *\n', '     * @param _targets the account addresses list that hold amounts of locked tokens\n', '     */\n', '    function releaseMultiWithStage(address[] _targets) onlyOwner public returns (bool) {\n', '        require(_targets.length != 0);\n', '\n', '        bool res = false;\n', '        uint256 i = 0;\n', '        while (i < _targets.length) {\n', '            require(_targets[i] != address(0));\n', '\n', '            res = releaseWithStage(_targets[i]) || res; // as long as there is one true transaction, then the result will be true\n', '            i = i.add(1);\n', '        }\n', '\n', '        return res;\n', '    }\n', '\n', '     /**\n', '     * @dev freeze multiple of the accounts\n', '     *\n', '     * @param _targets the owners of some amount of tokens\n', '     * @param _values the amounts of the tokens\n', '     * @param _frozenEndTimes the list of the end time of the lock period, unit is second\n', '     * @param _releasePeriods the list of the locking period, unit is second\n', '     */\n', '    function freezeMulti(address[] _targets, uint256[] _values, uint256[] _frozenEndTimes, uint256[] _releasePeriods) onlyOwner public returns (bool) {\n', '        require(_targets.length != 0);\n', '        require(_values.length != 0);\n', '        require(_frozenEndTimes.length != 0);\n', '        require(_releasePeriods.length != 0);\n', '        require(_targets.length == _values.length && _values.length == _frozenEndTimes.length && _frozenEndTimes.length == _releasePeriods.length);\n', '\n', '        bool res = true;\n', '        for (uint256 i = 0; i < _targets.length; i = i.add(1)) {\n', '            require(_targets[i] != address(0));\n', '            res = freeze(_targets[i], _values[i], _frozenEndTimes[i], _releasePeriods[i]) && res;\n', '        }\n', '\n', '        return res;\n', '    }\n', '\n', '    /**\n', '     * @dev transfer a list of amounts of tokens to a list of accounts, and then freeze the tokens\n', '     *\n', '     * @param _targets the account addresses that will hold a list of amounts of the tokens\n', '     * @param _values the amounts of the tokens which have been transferred\n', '     * @param _frozenEndTimes the end time list of the locked periods, unit is second\n', '     * @param _releasePeriods the list of locking periods, unit is second\n', '     */\n', '    function transferAndFreezeMulti(address[] _targets, uint256[] _values, uint256[] _frozenEndTimes, uint256[] _releasePeriods) onlyOwner public returns (bool) {\n', '        require(_targets.length != 0);\n', '        require(_values.length != 0);\n', '        require(_frozenEndTimes.length != 0);\n', '        require(_releasePeriods.length != 0);\n', '        require(_targets.length == _values.length && _values.length == _frozenEndTimes.length && _frozenEndTimes.length == _releasePeriods.length);\n', '\n', '        bool res = true;\n', '        for (uint256 i = 0; i < _targets.length; i = i.add(1)) {\n', '            require(_targets[i] != address(0));\n', '            res = transferAndFreeze(_targets[i], _values[i], _frozenEndTimes[i], _releasePeriods[i]) && res;\n', '        }\n', '\n', '        return res;\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'interface itoken {\n', '    function freezeAccount(address _target, bool _freeze) external;\n', '    function freezeAccountPartialy(address _target, uint256 _value) external;\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n', '    function balanceOf(address _owner) external view returns (uint256 balance);\n', '    // function transferOwnership(address newOwner) external;\n', '    function allowance(address _owner, address _spender) external view returns (uint256);\n', '    function frozenAccount(address _account) external view returns (bool);\n', '    function frozenAmount(address _account) external view returns (uint256);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', 'contract OwnerContract is Claimable {\n', '    Claimable public ownedContract;\n', '    address internal origOwner;\n', '\n', '    /**\n', '     * @dev bind a contract as its owner\n', '     *\n', '     * @param _contract the contract address that will be binded by this Owner Contract\n', '     */\n', '    function bindContract(address _contract) onlyOwner public returns (bool) {\n', '        require(_contract != address(0));\n', '        ownedContract = Claimable(_contract);\n', '        origOwner = ownedContract.owner();\n', '\n', '        // take ownership of the owned contract\n', '        ownedContract.claimOwnership();\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev change the owner of the contract from this contract address to the original one.\n', '     *\n', '     */\n', '    function transferOwnershipBack() onlyOwner public {\n', '        ownedContract.transferOwnership(origOwner);\n', '        ownedContract = Claimable(address(0));\n', '        origOwner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev change the owner of the contract from this contract address to another one.\n', '     *\n', '     * @param _nextOwner the contract address that will be next Owner of the original Contract\n', '     */\n', '    function changeOwnershipto(address _nextOwner)  onlyOwner public {\n', '        ownedContract.transferOwnership(_nextOwner);\n', '        ownedContract = Claimable(address(0));\n', '        origOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract ReleaseToken is OwnerContract {\n', '    using SafeMath for uint256;\n', '\n', '    // record lock time period and related token amount\n', '    struct TimeRec {\n', '        uint256 amount;\n', '        uint256 remain;\n', '        uint256 endTime;\n', '        uint256 releasePeriodEndTime;\n', '    }\n', '\n', '    itoken internal owned;\n', '\n', '    address[] public frozenAccounts;\n', '    mapping (address => TimeRec[]) frozenTimes;\n', '    // mapping (address => uint256) releasedAmounts;\n', '    mapping (address => uint256) preReleaseAmounts;\n', '\n', '    event ReleaseFunds(address _target, uint256 _amount);\n', '\n', '    /**\n', '     * @dev bind a contract as its owner\n', '     *\n', '     * @param _contract the contract address that will be binded by this Owner Contract\n', '     */\n', '    function bindContract(address _contract) onlyOwner public returns (bool) {\n', '        require(_contract != address(0));\n', '        owned = itoken(_contract);\n', '        return super.bindContract(_contract);\n', '    }\n', '\n', '    /**\n', '     * @dev remove an account from the frozen accounts list\n', '     *\n', '     * @param _ind the index of the account in the list\n', '     */\n', '    function removeAccount(uint _ind) internal returns (bool) {\n', '        require(_ind < frozenAccounts.length);\n', '\n', '        uint256 i = _ind;\n', '        while (i < frozenAccounts.length.sub(1)) {\n', '            frozenAccounts[i] = frozenAccounts[i.add(1)];\n', '            i = i.add(1);\n', '        }\n', '\n', '        delete frozenAccounts[frozenAccounts.length.sub(1)];\n', '        frozenAccounts.length = frozenAccounts.length.sub(1);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev remove a time records from the time records list of one account\n', '     *\n', '     * @param _target the account that holds a list of time records which record the freeze period\n', '     */\n', '    function removeLockedTime(address _target, uint _ind) internal returns (bool) {\n', '        require(_target != address(0));\n', '\n', '        TimeRec[] storage lockedTimes = frozenTimes[_target];\n', '        require(_ind < lockedTimes.length);\n', '\n', '        uint256 i = _ind;\n', '        while (i < lockedTimes.length.sub(1)) {\n', '            lockedTimes[i] = lockedTimes[i.add(1)];\n', '            i = i.add(1);\n', '        }\n', '\n', '        delete lockedTimes[lockedTimes.length.sub(1)];\n', '        lockedTimes.length = lockedTimes.length.sub(1);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev get total remain locked tokens of an account\n', '     *\n', '     * @param _account the owner of some amount of tokens\n', '     */\n', '    function getRemainLockedOf(address _account) public view returns (uint256) {\n', '        require(_account != address(0));\n', '\n', '        uint256 totalRemain = 0;\n', '        uint256 len = frozenAccounts.length;\n', '        uint256 i = 0;\n', '        while (i < len) {\n', '            address frozenAddr = frozenAccounts[i];\n', '            if (frozenAddr == _account) {\n', '                uint256 timeRecLen = frozenTimes[frozenAddr].length;\n', '                uint256 j = 0;\n', '                while (j < timeRecLen) {\n', '                    TimeRec storage timePair = frozenTimes[frozenAddr][j];\n', '                    totalRemain = totalRemain.add(timePair.remain);\n', '\n', '                    j = j.add(1);\n', '                }\n', '            }\n', '\n', '            i = i.add(1);\n', '        }\n', '\n', '        return totalRemain;\n', '    }\n', '\n', '    /**\n', '     * judge whether we need to release some of the locked token\n', '     *\n', '     */\n', '    function needRelease() public view returns (bool) {\n', '        uint256 len = frozenAccounts.length;\n', '        uint256 i = 0;\n', '        while (i < len) {\n', '            address frozenAddr = frozenAccounts[i];\n', '            uint256 timeRecLen = frozenTimes[frozenAddr].length;\n', '            uint256 j = 0;\n', '            while (j < timeRecLen) {\n', '                TimeRec storage timePair = frozenTimes[frozenAddr][j];\n', '                if (now >= timePair.endTime) {\n', '                    return true;\n', '                }\n', '\n', '                j = j.add(1);\n', '            }\n', '\n', '            i = i.add(1);\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev freeze the amount of tokens of an account\n', '     *\n', '     * @param _target the owner of some amount of tokens\n', '     * @param _value the amount of the tokens\n', '     * @param _frozenEndTime the end time of the lock period, unit is second\n', '     * @param _releasePeriod the locking period, unit is second\n', '     */\n', '    function freeze(address _target, uint256 _value, uint256 _frozenEndTime, uint256 _releasePeriod) onlyOwner public returns (bool) {\n', '        //require(_tokenAddr != address(0));\n', '        require(_target != address(0));\n', '        require(_value > 0);\n', '        require(_frozenEndTime > 0);\n', '\n', '        uint256 len = frozenAccounts.length;\n', '\n', '        uint256 i = 0;\n', '        for (; i < len; i = i.add(1)) {\n', '            if (frozenAccounts[i] == _target) {\n', '                break;\n', '            }\n', '        }\n', '\n', '        if (i >= len) {\n', '            frozenAccounts.push(_target); // add new account\n', '        }\n', '\n', '        // each time the new locked time will be added to the backend\n', '        frozenTimes[_target].push(TimeRec(_value, _value, _frozenEndTime, _frozenEndTime.add(_releasePeriod)));\n', '        if (owned.frozenAccount(_target)) {\n', '            uint256 preFrozenAmount = owned.frozenAmount(_target);\n', '            owned.freezeAccountPartialy(_target, _value.add(preFrozenAmount));\n', '        } else {\n', '            owned.freezeAccountPartialy(_target, _value);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev transfer an amount of tokens to an account, and then freeze the tokens\n', '     *\n', '     * @param _target the account address that will hold an amount of the tokens\n', '     * @param _value the amount of the tokens which has been transferred\n', '     * @param _frozenEndTime the end time of the lock period, unit is second\n', '     * @param _releasePeriod the locking period, unit is second\n', '     */\n', '    function transferAndFreeze(address _target, uint256 _value, uint256 _frozenEndTime, uint256 _releasePeriod) onlyOwner public returns (bool) {\n', '        //require(_tokenOwner != address(0));\n', '        require(_target != address(0));\n', '        require(_value > 0);\n', '        require(_frozenEndTime > 0);\n', '\n', '        // check firstly that the allowance of this contract has been set\n', '        require(owned.allowance(msg.sender, this) > 0);\n', '\n', '        // now we need transfer the funds before freeze them\n', '        require(owned.transferFrom(msg.sender, _target, _value));\n', '\n', '        // freeze the account after transfering funds\n', '        if (!freeze(_target, _value, _frozenEndTime, _releasePeriod)) {\n', '            return false;\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * release the token which are locked for once and will be total released at once\n', '     * after the end point of the lock period\n', '     */\n', '    function releaseAllOnceLock() onlyOwner public returns (bool) {\n', '        //require(_tokenAddr != address(0));\n', '\n', '        uint256 len = frozenAccounts.length;\n', '        uint256 i = 0;\n', '        while (i < len) {\n', '            address target = frozenAccounts[i];\n', '            if (frozenTimes[target].length == 1 && frozenTimes[target][0].endTime == frozenTimes[target][0].releasePeriodEndTime && frozenTimes[target][0].endTime > 0 && now >= frozenTimes[target][0].endTime) {\n', '                uint256 releasedAmount = frozenTimes[target][0].amount;\n', '\n', '                // remove current release period time record\n', '                if (!removeLockedTime(target, 0)) {\n', '                    return false;\n', '                }\n', '\n', '                // remove the froze account\n', '                if (!removeAccount(i)) {\n', '                    return false;\n', '                }\n', '\n', '                uint256 preFrozenAmount = owned.frozenAmount(target);\n', '                if (preFrozenAmount > releasedAmount) {\n', '                    owned.freezeAccountPartialy(target, preFrozenAmount.sub(releasedAmount));\n', '                } else {\n', '                    owned.freezeAccount(target, false);\n', '                }\n', '\n', '                ReleaseFunds(target, releasedAmount);\n', '                len = len.sub(1);\n', '            } else {\n', '                // no account has been removed\n', '                i = i.add(1);\n', '            }\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev release the locked tokens owned by an account, which only have only one locked time\n', "     * and don't have release stage.\n", '     *\n', '     * @param _target the account address that hold an amount of locked tokens\n', '     */\n', '    function releaseAccount(address _target) onlyOwner public returns (bool) {\n', '        //require(_tokenAddr != address(0));\n', '        require(_target != address(0));\n', '\n', '        uint256 len = frozenAccounts.length;\n', '        uint256 i = 0;\n', '        while (i < len) {\n', '            address destAddr = frozenAccounts[i];\n', '            if (destAddr == _target) {\n', '                if (frozenTimes[destAddr].length == 1 && frozenTimes[destAddr][0].endTime == frozenTimes[destAddr][0].releasePeriodEndTime && frozenTimes[destAddr][0].endTime > 0 && now >= frozenTimes[destAddr][0].endTime) {\n', '                    uint256 releasedAmount = frozenTimes[destAddr][0].amount;\n', '\n', '                    // remove current release period time record\n', '                    if (!removeLockedTime(destAddr, 0)) {\n', '                        return false;\n', '                    }\n', '\n', '                    // remove the froze account\n', '                    if (!removeAccount(i)) {\n', '                        return false;\n', '                    }\n', '\n', '                    uint256 preFrozenAmount = owned.frozenAmount(destAddr);\n', '                    if (preFrozenAmount > releasedAmount) {\n', '                        owned.freezeAccountPartialy(destAddr, preFrozenAmount.sub(releasedAmount));\n', '                    } else {\n', '                        owned.freezeAccount(destAddr, false);\n', '                    }\n', '\n', '                    ReleaseFunds(destAddr, releasedAmount);\n', '                }\n', '\n', '                // if the account are not locked for once, we will do nothing here\n', '                return true;\n', '            }\n', '\n', '            i = i.add(1);\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev release the locked tokens owned by an account with several stages\n', '     * this need the contract get approval from the account by call approve() in the token contract\n', '     *\n', '     * @param _target the account address that hold an amount of locked tokens\n', '     */\n', '    function releaseWithStage(address _target/*, address _dest*/) onlyOwner public returns (bool) {\n', '        //require(_tokenaddr != address(0));\n', '        require(_target != address(0));\n', '        // require(_dest != address(0));\n', '        // require(_value > 0);\n', '\n', '        // check firstly that the allowance of this contract from _target account has been set\n', '        // require(owned.allowance(_target, this) > 0);\n', '\n', '        uint256 len = frozenAccounts.length;\n', '        uint256 i = 0;\n', '        while (i < len) {\n', '            // firstly find the target address\n', '            address frozenAddr = frozenAccounts[i];\n', '            if (frozenAddr == _target) {\n', '                uint256 timeRecLen = frozenTimes[frozenAddr].length;\n', '\n', '                bool released = false;\n', '                uint256 nowTime = now;\n', '                for (uint256 j = 0; j < timeRecLen; released = false) {\n', '                    // iterate every time records to caculate how many tokens need to be released.\n', '                    TimeRec storage timePair = frozenTimes[frozenAddr][j];\n', '                    if (nowTime > timePair.endTime && timePair.endTime > 0 && timePair.releasePeriodEndTime > timePair.endTime) {\n', '                        uint256 lastReleased = timePair.amount.sub(timePair.remain);\n', '                        uint256 value = (timePair.amount * nowTime.sub(timePair.endTime) / timePair.releasePeriodEndTime.sub(timePair.endTime)).sub(lastReleased);\n', '                        if (value > timePair.remain) {\n', '                            value = timePair.remain;\n', '                        }\n', '\n', '                        // timePair.endTime = nowTime;\n', '                        timePair.remain = timePair.remain.sub(value);\n', '                        ReleaseFunds(frozenAddr, value);\n', '                        preReleaseAmounts[frozenAddr] = preReleaseAmounts[frozenAddr].add(value);\n', '                        if (timePair.remain < 1e8) {\n', '                            if (!removeLockedTime(frozenAddr, j)) {\n', '                                return false;\n', '                            }\n', '                            released = true;\n', '                            timeRecLen = timeRecLen.sub(1);\n', '                        }\n', '                    } else if (nowTime >= timePair.endTime && timePair.endTime > 0 && timePair.releasePeriodEndTime == timePair.endTime) {\n', '                        timePair.remain = 0;\n', '                        ReleaseFunds(frozenAddr, timePair.amount);\n', '                        preReleaseAmounts[frozenAddr] = preReleaseAmounts[frozenAddr].add(timePair.amount);\n', '                        if (!removeLockedTime(frozenAddr, j)) {\n', '                            return false;\n', '                        }\n', '                        released = true;\n', '                        timeRecLen = timeRecLen.sub(1);\n', '                    }\n', '\n', '                    if (!released) {\n', '                        j = j.add(1);\n', '                    }\n', '                }\n', '\n', '                // we got some amount need to be released\n', '                if (preReleaseAmounts[frozenAddr] > 0) {\n', '                    uint256 preReleasedAmount = preReleaseAmounts[frozenAddr];\n', '                    uint256 preFrozenAmount = owned.frozenAmount(frozenAddr);\n', '\n', '                    // set the pre-release amount to 0 for next time\n', '                    preReleaseAmounts[frozenAddr] = 0;\n', '                    if (preFrozenAmount > preReleasedAmount) {\n', '                        owned.freezeAccountPartialy(frozenAddr, preFrozenAmount.sub(preReleasedAmount));\n', '                    } else {\n', '                        owned.freezeAccount(frozenAddr, false);\n', '                    }\n', '                    // if (!owned.transferFrom(_target, _dest, preReleaseAmounts[frozenAddr])) {\n', '                    //     return false;\n', '                    // }\n', '                }\n', '\n', '                // if all the frozen amounts had been released, then unlock the account finally\n', '                if (frozenTimes[frozenAddr].length == 0) {\n', '                    if (!removeAccount(i)) {\n', '                        return false;\n', '                    }\n', '                } /*else {\n', '                    // still has some tokens need to be released in future\n', '                    owned.freezeAccount(frozenAddr, true);\n', '                }*/\n', '\n', '                return true;\n', '            }\n', '\n', '            i = i.add(1);\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev set the new endtime of the released time of an account\n', '     *\n', '     * @param _target the owner of some amount of tokens\n', '     * @param _oldEndTime the original endtime for the lock period\n', '     * @param _newEndTime the new endtime for the lock period\n', '     */\n', '    function setNewEndtime(address _target, uint256 _oldEndTime, uint256 _newEndTime) onlyOwner public returns (bool) {\n', '        require(_target != address(0));\n', '        require(_oldEndTime > 0 && _newEndTime > 0);\n', '\n', '        uint256 len = frozenAccounts.length;\n', '        uint256 i = 0;\n', '        while (i < len) {\n', '            address frozenAddr = frozenAccounts[i];\n', '            if (frozenAddr == _target) {\n', '                uint256 timeRecLen = frozenTimes[frozenAddr].length;\n', '                uint256 j = 0;\n', '                while (j < timeRecLen) {\n', '                    TimeRec storage timePair = frozenTimes[frozenAddr][j];\n', '                    if (_oldEndTime == timePair.endTime) {\n', '                        uint256 duration = timePair.releasePeriodEndTime.sub(timePair.endTime);\n', '                        timePair.endTime = _newEndTime;\n', '                        timePair.releasePeriodEndTime = timePair.endTime.add(duration);\n', '\n', '                        return true;\n', '                    }\n', '\n', '                    j = j.add(1);\n', '                }\n', '\n', '                return false;\n', '            }\n', '\n', '            i = i.add(1);\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev set the new released period length of an account\n', '     *\n', '     * @param _target the owner of some amount of tokens\n', '     * @param _origEndTime the original endtime for the lock period\n', '     * @param _duration the new releasing period\n', '     */\n', '    function setNewReleasePeriod(address _target, uint256 _origEndTime, uint256 _duration) onlyOwner public returns (bool) {\n', '        require(_target != address(0));\n', '        require(_origEndTime > 0 && _duration > 0);\n', '\n', '        uint256 len = frozenAccounts.length;\n', '        uint256 i = 0;\n', '        while (i < len) {\n', '            address frozenAddr = frozenAccounts[i];\n', '            if (frozenAddr == _target) {\n', '                uint256 timeRecLen = frozenTimes[frozenAddr].length;\n', '                uint256 j = 0;\n', '                while (j < timeRecLen) {\n', '                    TimeRec storage timePair = frozenTimes[frozenAddr][j];\n', '                    if (_origEndTime == timePair.endTime) {\n', '                        timePair.releasePeriodEndTime = _origEndTime.add(_duration);\n', '                        return true;\n', '                    }\n', '\n', '                    j = j.add(1);\n', '                }\n', '\n', '                return false;\n', '            }\n', '\n', '            i = i.add(1);\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev get the locked stages of an account\n', '     *\n', '     * @param _target the owner of some amount of tokens\n', '     */\n', '    function getLockedStages(address _target) public view returns (uint) {\n', '        require(_target != address(0));\n', '\n', '        uint256 len = frozenAccounts.length;\n', '        uint256 i = 0;\n', '        while (i < len) {\n', '            address frozenAddr = frozenAccounts[i];\n', '            if (frozenAddr == _target) {\n', '                return frozenTimes[frozenAddr].length;\n', '            }\n', '\n', '            i = i.add(1);\n', '        }\n', '\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '     * @dev get the endtime of the locked stages of an account\n', '     *\n', '     * @param _target the owner of some amount of tokens\n', '     * @param _num the stage number of the releasing period\n', '     */\n', '    function getEndTimeOfStage(address _target, uint _num) public view returns (uint256) {\n', '        require(_target != address(0));\n', '\n', '        uint256 len = frozenAccounts.length;\n', '        uint256 i = 0;\n', '        while (i < len) {\n', '            address frozenAddr = frozenAccounts[i];\n', '            if (frozenAddr == _target) {\n', '                TimeRec storage timePair = frozenTimes[frozenAddr][_num];\n', '                return timePair.endTime;\n', '            }\n', '\n', '            i = i.add(1);\n', '        }\n', '\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '     * @dev get the remain unrleased tokens of the locked stages of an account\n', '     *\n', '     * @param _target the owner of some amount of tokens\n', '     * @param _num the stage number of the releasing period\n', '     */\n', '    function getRemainOfStage(address _target, uint _num) public view returns (uint256) {\n', '        require(_target != address(0));\n', '\n', '        uint256 len = frozenAccounts.length;\n', '        uint256 i = 0;\n', '        while (i < len) {\n', '            address frozenAddr = frozenAccounts[i];\n', '            if (frozenAddr == _target) {\n', '                TimeRec storage timePair = frozenTimes[frozenAddr][_num];\n', '                return timePair.remain;\n', '            }\n', '\n', '            i = i.add(1);\n', '        }\n', '\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '     * @dev get the remain releasing period of an account\n', '     *\n', '     * @param _target the owner of some amount of tokens\n', '     * @param _num the stage number of the releasing period\n', '     */\n', '    function getRemainReleaseTimeOfStage(address _target, uint _num) public view returns (uint256) {\n', '        require(_target != address(0));\n', '\n', '        uint256 len = frozenAccounts.length;\n', '        uint256 i = 0;\n', '        while (i < len) {\n', '            address frozenAddr = frozenAccounts[i];\n', '            if (frozenAddr == _target) {\n', '                TimeRec storage timePair = frozenTimes[frozenAddr][_num];\n', '                uint256 nowTime = now;\n', '                if (timePair.releasePeriodEndTime == timePair.endTime || nowTime <= timePair.endTime ) {\n', '                    return (timePair.releasePeriodEndTime.sub(timePair.endTime));\n', '                }\n', '\n', '                if (timePair.releasePeriodEndTime < nowTime) {\n', '                    return 0;\n', '                }\n', '\n', '                return (timePair.releasePeriodEndTime.sub(nowTime));\n', '            }\n', '\n', '            i = i.add(1);\n', '        }\n', '\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '     * @dev release the locked tokens owned by a number of accounts\n', '     *\n', '     * @param _targets the accounts list that hold an amount of locked tokens\n', '     */\n', '    function releaseMultiAccounts(address[] _targets) onlyOwner public returns (bool) {\n', '        //require(_tokenAddr != address(0));\n', '        require(_targets.length != 0);\n', '\n', '        bool res = false;\n', '        uint256 i = 0;\n', '        while (i < _targets.length) {\n', '            res = releaseAccount(_targets[i]) || res;\n', '            i = i.add(1);\n', '        }\n', '\n', '        return res;\n', '    }\n', '\n', '    /**\n', '     * @dev release the locked tokens owned by an account\n', '     *\n', '     * @param _targets the account addresses list that hold amounts of locked tokens\n', '     */\n', '    function releaseMultiWithStage(address[] _targets) onlyOwner public returns (bool) {\n', '        require(_targets.length != 0);\n', '\n', '        bool res = false;\n', '        uint256 i = 0;\n', '        while (i < _targets.length) {\n', '            require(_targets[i] != address(0));\n', '\n', '            res = releaseWithStage(_targets[i]) || res; // as long as there is one true transaction, then the result will be true\n', '            i = i.add(1);\n', '        }\n', '\n', '        return res;\n', '    }\n', '\n', '     /**\n', '     * @dev freeze multiple of the accounts\n', '     *\n', '     * @param _targets the owners of some amount of tokens\n', '     * @param _values the amounts of the tokens\n', '     * @param _frozenEndTimes the list of the end time of the lock period, unit is second\n', '     * @param _releasePeriods the list of the locking period, unit is second\n', '     */\n', '    function freezeMulti(address[] _targets, uint256[] _values, uint256[] _frozenEndTimes, uint256[] _releasePeriods) onlyOwner public returns (bool) {\n', '        require(_targets.length != 0);\n', '        require(_values.length != 0);\n', '        require(_frozenEndTimes.length != 0);\n', '        require(_releasePeriods.length != 0);\n', '        require(_targets.length == _values.length && _values.length == _frozenEndTimes.length && _frozenEndTimes.length == _releasePeriods.length);\n', '\n', '        bool res = true;\n', '        for (uint256 i = 0; i < _targets.length; i = i.add(1)) {\n', '            require(_targets[i] != address(0));\n', '            res = freeze(_targets[i], _values[i], _frozenEndTimes[i], _releasePeriods[i]) && res;\n', '        }\n', '\n', '        return res;\n', '    }\n', '\n', '    /**\n', '     * @dev transfer a list of amounts of tokens to a list of accounts, and then freeze the tokens\n', '     *\n', '     * @param _targets the account addresses that will hold a list of amounts of the tokens\n', '     * @param _values the amounts of the tokens which have been transferred\n', '     * @param _frozenEndTimes the end time list of the locked periods, unit is second\n', '     * @param _releasePeriods the list of locking periods, unit is second\n', '     */\n', '    function transferAndFreezeMulti(address[] _targets, uint256[] _values, uint256[] _frozenEndTimes, uint256[] _releasePeriods) onlyOwner public returns (bool) {\n', '        require(_targets.length != 0);\n', '        require(_values.length != 0);\n', '        require(_frozenEndTimes.length != 0);\n', '        require(_releasePeriods.length != 0);\n', '        require(_targets.length == _values.length && _values.length == _frozenEndTimes.length && _frozenEndTimes.length == _releasePeriods.length);\n', '\n', '        bool res = true;\n', '        for (uint256 i = 0; i < _targets.length; i = i.add(1)) {\n', '            require(_targets[i] != address(0));\n', '            res = transferAndFreeze(_targets[i], _values[i], _frozenEndTimes[i], _releasePeriods[i]) && res;\n', '        }\n', '\n', '        return res;\n', '    }\n', '}']
