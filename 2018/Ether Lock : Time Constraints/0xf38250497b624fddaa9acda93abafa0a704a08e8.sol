['pragma solidity ^0.4.23;\n', '\n', 'contract BasicAccessControl {\n', '    address public owner;\n', '    // address[] public moderators;\n', '    uint16 public totalModerators = 0;\n', '    mapping (address => bool) public moderators;\n', '    bool public isMaintaining = false;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyModerators() {\n', '        require(msg.sender == owner || moderators[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '    modifier isActive {\n', '        require(!isMaintaining);\n', '        _;\n', '    }\n', '\n', '    function ChangeOwner(address _newOwner) onlyOwner public {\n', '        if (_newOwner != address(0)) {\n', '            owner = _newOwner;\n', '        }\n', '    }\n', '\n', '\n', '    function AddModerator(address _newModerator) onlyOwner public {\n', '        if (moderators[_newModerator] == false) {\n', '            moderators[_newModerator] = true;\n', '            totalModerators += 1;\n', '        }\n', '    }\n', '    \n', '    function RemoveModerator(address _oldModerator) onlyOwner public {\n', '        if (moderators[_oldModerator] == true) {\n', '            moderators[_oldModerator] = false;\n', '            totalModerators -= 1;\n', '        }\n', '    }\n', '\n', '    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\n', '        isMaintaining = _isMaintaining;\n', '    }\n', '}\n', '\n', 'contract EtheremonAdventurePresale {\n', '    function getBidBySiteIndex(uint8 _siteId, uint _index) constant external returns(address bidder, uint32 bidId, uint8 siteId, uint amount, uint time);\n', '}\n', '\n', 'interface EtheremonAdventureItem {\n', '    function spawnSite(uint _classId, uint _tokenId, address _owner) external;\n', '}\n', '\n', 'contract EtheremonAdventureClaim is BasicAccessControl {\n', '    uint constant public MAX_SITE_ID = 108;\n', '    uint constant public MIN_SITE_ID = 1;\n', '    \n', '    struct BiddingInfo {\n', '        address bidder;\n', '        uint32 bidId;\n', '        uint amount;\n', '        uint time;\n', '        uint8 siteId;\n', '    }\n', '    \n', '    mapping(uint32 => uint) public bidTokens;\n', '    \n', '    address public adventureItem;\n', '    address public adventurePresale;\n', '    \n', '    modifier requireAdventureItem {\n', '        require(adventureItem != address(0));\n', '        _;        \n', '    }\n', '    \n', '    modifier requireAdventurePresale {\n', '        require(adventurePresale != address(0));\n', '        _;        \n', '    }\n', '    \n', '    constructor(address _adventureItem, address _adventurePresale) public {\n', '        adventureItem = _adventureItem;\n', '        adventurePresale = _adventurePresale;\n', '    }\n', '    \n', '    function setContract(address _adventureItem, address _adventurePresale) onlyOwner public {\n', '        adventureItem = _adventureItem;\n', '        adventurePresale = _adventurePresale;\n', '    }\n', '    \n', '    function claimSiteToken(uint8 _siteId, uint _index) isActive requireAdventureItem requireAdventurePresale public {\n', '        if (_siteId < MIN_SITE_ID || _siteId > MAX_SITE_ID || _index > 10) revert();\n', '        BiddingInfo memory bidInfo;\n', '        (bidInfo.bidder, bidInfo.bidId, bidInfo.siteId, bidInfo.amount, bidInfo.time) = EtheremonAdventurePresale(adventurePresale).getBidBySiteIndex(_siteId, _index);\n', '        if (bidInfo.bidId == 0 || bidTokens[bidInfo.bidId] > 0) revert();\n', '        uint tokenId = (_siteId - 1) * 10 + _index + 1;\n', '        bidTokens[bidInfo.bidId] = tokenId;\n', '        EtheremonAdventureItem(adventureItem).spawnSite(_siteId, tokenId, bidInfo.bidder);\n', '    }\n', '    \n', '    function getTokenByBid(uint32 _bidId) constant public returns(uint) {\n', '        return bidTokens[_bidId];\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', 'contract BasicAccessControl {\n', '    address public owner;\n', '    // address[] public moderators;\n', '    uint16 public totalModerators = 0;\n', '    mapping (address => bool) public moderators;\n', '    bool public isMaintaining = false;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyModerators() {\n', '        require(msg.sender == owner || moderators[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '    modifier isActive {\n', '        require(!isMaintaining);\n', '        _;\n', '    }\n', '\n', '    function ChangeOwner(address _newOwner) onlyOwner public {\n', '        if (_newOwner != address(0)) {\n', '            owner = _newOwner;\n', '        }\n', '    }\n', '\n', '\n', '    function AddModerator(address _newModerator) onlyOwner public {\n', '        if (moderators[_newModerator] == false) {\n', '            moderators[_newModerator] = true;\n', '            totalModerators += 1;\n', '        }\n', '    }\n', '    \n', '    function RemoveModerator(address _oldModerator) onlyOwner public {\n', '        if (moderators[_oldModerator] == true) {\n', '            moderators[_oldModerator] = false;\n', '            totalModerators -= 1;\n', '        }\n', '    }\n', '\n', '    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\n', '        isMaintaining = _isMaintaining;\n', '    }\n', '}\n', '\n', 'contract EtheremonAdventurePresale {\n', '    function getBidBySiteIndex(uint8 _siteId, uint _index) constant external returns(address bidder, uint32 bidId, uint8 siteId, uint amount, uint time);\n', '}\n', '\n', 'interface EtheremonAdventureItem {\n', '    function spawnSite(uint _classId, uint _tokenId, address _owner) external;\n', '}\n', '\n', 'contract EtheremonAdventureClaim is BasicAccessControl {\n', '    uint constant public MAX_SITE_ID = 108;\n', '    uint constant public MIN_SITE_ID = 1;\n', '    \n', '    struct BiddingInfo {\n', '        address bidder;\n', '        uint32 bidId;\n', '        uint amount;\n', '        uint time;\n', '        uint8 siteId;\n', '    }\n', '    \n', '    mapping(uint32 => uint) public bidTokens;\n', '    \n', '    address public adventureItem;\n', '    address public adventurePresale;\n', '    \n', '    modifier requireAdventureItem {\n', '        require(adventureItem != address(0));\n', '        _;        \n', '    }\n', '    \n', '    modifier requireAdventurePresale {\n', '        require(adventurePresale != address(0));\n', '        _;        \n', '    }\n', '    \n', '    constructor(address _adventureItem, address _adventurePresale) public {\n', '        adventureItem = _adventureItem;\n', '        adventurePresale = _adventurePresale;\n', '    }\n', '    \n', '    function setContract(address _adventureItem, address _adventurePresale) onlyOwner public {\n', '        adventureItem = _adventureItem;\n', '        adventurePresale = _adventurePresale;\n', '    }\n', '    \n', '    function claimSiteToken(uint8 _siteId, uint _index) isActive requireAdventureItem requireAdventurePresale public {\n', '        if (_siteId < MIN_SITE_ID || _siteId > MAX_SITE_ID || _index > 10) revert();\n', '        BiddingInfo memory bidInfo;\n', '        (bidInfo.bidder, bidInfo.bidId, bidInfo.siteId, bidInfo.amount, bidInfo.time) = EtheremonAdventurePresale(adventurePresale).getBidBySiteIndex(_siteId, _index);\n', '        if (bidInfo.bidId == 0 || bidTokens[bidInfo.bidId] > 0) revert();\n', '        uint tokenId = (_siteId - 1) * 10 + _index + 1;\n', '        bidTokens[bidInfo.bidId] = tokenId;\n', '        EtheremonAdventureItem(adventureItem).spawnSite(_siteId, tokenId, bidInfo.bidder);\n', '    }\n', '    \n', '    function getTokenByBid(uint32 _bidId) constant public returns(uint) {\n', '        return bidTokens[_bidId];\n', '    }\n', '}']
