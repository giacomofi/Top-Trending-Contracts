['pragma solidity ^0.4.23;\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', '// &#39;0xCatether Token&#39; contract\n', '\n', '// Mineable ERC20 Token using Proof Of Work\n', '\n', '//\n', '\n', '// Symbol      : 0xCATE\n', '\n', '// Name        : 0xCatether Token\n', '\n', '// Total supply: No Limit\n', '\n', '// Decimals    : 8\n', '\n', '//\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', '// Safe maths\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', 'library SafeMath {\n', '\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '\n', '        c = a + b;\n', '\n', '        require(c >= a);\n', '\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '\n', '        require(b <= a);\n', '\n', '        c = a - b;\n', '\n', '    }\n', '\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '\n', '        c = a * b;\n', '\n', '        require(a == 0 || c / a == b);\n', '\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '\n', '        require(b > 0);\n', '\n', '        c = a / b;\n', '\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', 'library ExtendedMath {\n', '\n', '\n', '    //return the smaller of the two inputs (a or b)\n', '    function limitLessThan(uint a, uint b) internal pure returns (uint c) {\n', '\n', '        if(a > b) return b;\n', '\n', '        return a;\n', '\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', '// ERC Token Standard #20 Interface\n', '\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract ERC20Interface {\n', '\n', '    function totalSupply() public constant returns (uint);\n', '\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '\n', '}\n', '\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', '// Contract function to receive approval and execute function in one call\n', '\n', '//\n', '\n', '// Borrowed from MiniMeToken\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract ApproveAndCallFallBack {\n', '\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '\n', '}\n', '\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', '// Owned contract\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract Owned {\n', '\n', '    address public owner;\n', '\n', '    address public newOwner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '\n', '    constructor() public {\n', '\n', '        owner = msg.sender;\n', '\n', '    }\n', '\n', '\n', '    modifier onlyOwner {\n', '\n', '        require(msg.sender == owner);\n', '\n', '        _;\n', '\n', '    }\n', '\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '\n', '        newOwner = _newOwner;\n', '\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '\n', '        require(msg.sender == newOwner);\n', '\n', '        emit OwnershipTransferred(owner, newOwner);\n', '\n', '        owner = newOwner;\n', '\n', '        newOwner = address(0);\n', '\n', '    }\n', '\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', '// ERC20 Token, with the addition of symbol, name and decimals and an\n', '\n', '// initial fixed supply\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract _0xCatetherToken is ERC20Interface, Owned {\n', '\n', '    using SafeMath for uint;\n', '    using ExtendedMath for uint;\n', '\n', '\n', '    string public symbol;\n', '\n', '    string public  name;\n', '\n', '    uint8 public decimals;\n', '\n', '    uint public _totalSupply;\n', '\n', '\n', '\n', '    uint public latestDifficultyPeriodStarted;\n', '\n', '\n', '    uint public epochCount;//number of &#39;blocks&#39; mined\n', '\n', '    //a little number\n', '    uint public  _MINIMUM_TARGET = 2**16;\n', '\n', '\n', '    //a big number is easier ; just find a solution that is smaller\n', '    //uint public  _MAXIMUM_TARGET = 2**224;  bitcoin uses 224\n', '    uint public  _MAXIMUM_TARGET = 2**224;\n', '\n', '\n', '    uint public miningTarget;\n', '\n', '    bytes32 public challengeNumber;   //generate a new one when a new reward is minted\n', '\n', '\n', '    address public lastRewardTo;\n', '    uint public lastRewardAmount;\n', '    uint public lastRewardEthBlockNumber;\n', '\n', '    // a bunch of maps to know where this is going (pun intended)\n', '    \n', '    mapping(bytes32 => bytes32) public solutionForChallenge;\n', '    mapping(uint => uint) public timeStampForEpoch;\n', '    mapping(uint => uint) public targetForEpoch;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => address) donationsTo;\n', '\n', '\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    event Donation(address donation);\n', '    event DonationAddressOf(address donator, address donnationAddress);\n', '    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    // Constructor\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    constructor() public{\n', '\n', '        symbol = "0xCATE";\n', '\n', '        name = "0xCatether Token";\n', '\n', '        decimals = 8;\n', '        epochCount = 0;\n', '        _totalSupply = 0;\n', '\n', '        miningTarget = _MAXIMUM_TARGET;\n', '        challengeNumber = "GENESIS_BLOCK";\n', '        solutionForChallenge[challengeNumber] = "Yes, this is the Genesis block.";\n', '\n', '        latestDifficultyPeriodStarted = block.number;\n', '\n', '        _startNewMiningEpoch();\n', '\n', '\n', '        //The owner gets nothing! You must mine this ERC20 token\n', '        //balances[owner] = _totalSupply;\n', '        //Transfer(address(0), owner, _totalSupply);\n', '    }\n', '\n', '\n', '\n', '\n', '        function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success) {\n', '\n', '\n', '            //the PoW must contain work that includes a recent ethereum block hash (challenge number) and the msg.sender&#39;s address to prevent MITM attacks\n', '            bytes32 digest =  keccak256(challengeNumber, msg.sender, nonce );\n', '\n', '            //the challenge digest must match the expected\n', '            if (digest != challenge_digest) revert();\n', '\n', '            //the digest must be smaller than the target\n', '            if(uint256(digest) > miningTarget) revert();\n', '\n', '\n', '            //only allow one reward for each challenge\n', '             bytes32 solution = solutionForChallenge[challengeNumber];\n', '             solutionForChallenge[challengeNumber] = digest;\n', '             if(solution != 0x0) revert();  //prevent the same answer from awarding twice\n', '\n', '\n', '            uint reward_amount = getMiningReward(digest);\n', '\n', '            balances[msg.sender] = balances[msg.sender].add(reward_amount);\n', '\n', '            _totalSupply = _totalSupply.add(reward_amount);\n', '\n', '            //set readonly diagnostics data\n', '            lastRewardTo = msg.sender;\n', '            lastRewardAmount = reward_amount;\n', '            lastRewardEthBlockNumber = block.number;\n', '\n', '             _startNewMiningEpoch();\n', '\n', '              emit Mint(msg.sender, reward_amount, epochCount, challengeNumber );\n', '\n', '           return true;\n', '\n', '        }\n', '\n', '\n', '    //a new &#39;block&#39; to be mined\n', '    function _startNewMiningEpoch() internal {\n', '        \n', '        targetForEpoch[epochCount] = miningTarget;\n', '        timeStampForEpoch[epochCount] = block.timestamp;\n', '        epochCount = epochCount.add(1);\n', '    \n', '      //Difficulty adjustment following the DigiChieldv3 implementation (Tempered-SMA)\n', '      // Allows more thorough protection against multi-pool hash attacks\n', '      // https://github.com/zawy12/difficulty-algorithms/issues/9\n', '        _reAdjustDifficulty();\n', '\n', '\n', '      //make the latest ethereum block hash a part of the next challenge for PoW to prevent pre-mining future blocks\n', '      //do this last since this is a protection mechanism in the mint() function\n', '      challengeNumber = blockhash(block.number - 1);\n', '\n', '    }\n', '\n', '\n', '\n', '\n', '    //https://github.com/zawy12/difficulty-algorithms/issues/9\n', '    //readjust the target via a tempered SMA\n', '    function _reAdjustDifficulty() internal {\n', '        \n', '        //we want miners to spend 1 minutes to mine each &#39;block&#39;\n', '        //for that, we need to approximate as closely as possible the current difficulty, by averaging the 28 last difficulties,\n', '        // compared to the average time it took to mine each block.\n', '        // also, since we can&#39;t really do that if we don&#39;t even have 28 mined blocks, difficulty will not move until we reach that number.\n', '        \n', '        uint timeTarget = 188; // roughly equals to Pi number. (There&#39;s also Phi somewhere below)\n', '        \n', '        if(epochCount>28) {\n', '            // counter, difficulty-sum, solve-time-sum, solve-time\n', '            uint i = 0;\n', '            uint sumD = 0;\n', '            uint sumST = 0;  // the first calculation of the timestamp difference can be negative, but it&#39;s not that bad (see below)\n', '            uint solvetime;\n', '            \n', '            for(i=epochCount.sub(28); i<epochCount; i++){\n', '                sumD = sumD.add(targetForEpoch[i]);\n', '                solvetime = timeStampForEpoch[i] - timeStampForEpoch[i-1];\n', '                if (solvetime > timeTarget.mul(7)) {solvetime = timeTarget.mul(7); }\n', '                //if (solvetime < timeTarget.mul(-6)) {solvetime = timeTarget.mul(-6); }    Ethereum EVM doesn&#39;t allow for a timestamp that make time go "backwards" anyway, so, we&#39;re good\n', '                sumST += solvetime;                                                   //    (block.timestamp is an uint256 => negative = very very long time, thus rejected by the network)\n', '                // we don&#39;t use safeAdd because in sore rare cases, it can underflow. However, the EVM structure WILL make it overflow right after, thus giving a correct SumST after a few loops\n', '            }\n', '            sumST = sumST.mul(10000).div(2523).add(1260); // 1260 seconds is a 75% weighing on what should be the actual time to mine 28 blocks.\n', '            miningTarget = sumD.mul(60).div(sumST); //We add it to the actual time it took with a weighted average (tempering)\n', '        }\n', '        \n', '        latestDifficultyPeriodStarted = block.number;\n', '\n', '        if(miningTarget < _MINIMUM_TARGET) //very difficult\n', '        {\n', '          miningTarget = _MINIMUM_TARGET;\n', '        }\n', '\n', '        if(miningTarget > _MAXIMUM_TARGET) //very easy\n', '        {\n', '          miningTarget = _MAXIMUM_TARGET;\n', '        }\n', '        targetForEpoch[epochCount] = miningTarget;\n', '    }\n', '\n', '\n', '    //this is a recent ethereum block hash, used to prevent pre-mining future blocks\n', '    function getChallengeNumber() public constant returns (bytes32) {\n', '        return challengeNumber;\n', '    }\n', '\n', '    //the number of zeroes the digest of the PoW solution requires.  Auto adjusts\n', '     function getMiningDifficulty() public constant returns (uint) {\n', '        return _MAXIMUM_TARGET.div(miningTarget);\n', '    }\n', '\n', '    function getMiningTarget() public constant returns (uint) {\n', '       return miningTarget;\n', '   }\n', '\n', '\n', '\n', '    //There&#39;s no limit to the coin supply\n', '    //reward follows the same emmission rate as Dogecoins&#39;\n', '    function getMiningReward(bytes32 digest) public constant returns (uint) {\n', '        \n', '        if(epochCount > 600000) return (30000 * 10**uint(decimals) );\n', '        if(epochCount > 500000) return (46875 * 10**uint(decimals) );\n', '        if(epochCount > 400000) return (93750 * 10**uint(decimals) );\n', '        if(epochCount > 300000) return (187500 * 10**uint(decimals) );\n', '        if(epochCount > 200000) return (375000 * 10**uint(decimals) );\n', '        if(epochCount > 145000) return (500000 * 10**uint(decimals) );\n', '        if(epochCount > 100000) return ((uint256(keccak256(digest, blockhash(block.number - 2))) % 1500000) * 10**uint(decimals) );\n', '        return ( (uint256(keccak256(digest, blockhash(block.number - 2))) % 3000000) * 10**uint(decimals) );\n', '\n', '    }\n', '\n', '    //help debug mining software (even though challenge_digest isn&#39;t used, this function is constant and helps troubleshooting mining issues)\n', '    function getMintDigest(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number) public view returns (bytes32 digesttest) {\n', '\n', '        bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\n', '\n', '        return digest;\n', '\n', '      }\n', '\n', '        //help debug mining software\n', '      function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns (bool success) {\n', '\n', '          bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\n', '\n', '          if(uint256(digest) > testTarget) revert();\n', '\n', '          return (digest == challenge_digest);\n', '\n', '        }\n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    // Total supply\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    function totalSupply() public constant returns (uint) {\n', '\n', '        return _totalSupply  - balances[address(0)];\n', '\n', '    }\n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    // Get the token balance for account `tokenOwner`\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '\n', '        return balances[tokenOwner];\n', '\n', '    }\n', '    \n', '    function donationTo(address tokenOwner) public constant returns (address donationAddress) {\n', '\n', '        return donationsTo[tokenOwner];\n', '\n', '    }\n', '    \n', '    function changeDonation(address donationAddress) public returns (bool success) {\n', '\n', '        donationsTo[msg.sender] = donationAddress;\n', '        \n', '        emit DonationAddressOf(msg.sender , donationAddress); \n', '        return true;\n', '    \n', '    }\n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    // Transfer the balance from token owner&#39;s account to `to` account\n', '\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '\n', '    // - 0 value transfers are allowed\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        \n', '        address donation = donationsTo[msg.sender];\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        \n', '        balances[to] = balances[to].add(tokens);\n', '        balances[donation] = balances[donation].add(161803400);\n', '        \n', '        emit Transfer(msg.sender, to, tokens);\n', '        emit Donation(donation);\n', '        \n', '        return true;\n', '\n', '    }\n', '    \n', '    function transferAndDonateTo(address to, uint tokens, address donation) public returns (bool success) {\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '\n', '        balances[to] = balances[to].add(tokens);\n', '        balances[donation] = balances[donation].add(161803400);\n', '\n', '        emit Transfer(msg.sender, to, tokens);\n', '        emit Donation(donation);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '\n', '    // from the token owner&#39;s account\n', '\n', '    //\n', '\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '\n', '    // recommends that there are no checks for the approval double-spend attack\n', '\n', '    // as this should be implemented in user interfaces\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '\n', '        allowed[msg.sender][spender] = tokens;\n', '\n', '        emit Approval(msg.sender, spender, tokens);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '\n', '    //\n', '\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '\n', '    // for spending from the `from` account and\n', '\n', '    // - From account must have sufficient balance to transfer\n', '\n', '    // - Spender must have sufficient allowance to transfer\n', '\n', '    // - 0 value transfers are allowed\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        \n', '        address donation = donationsTo[from];\n', '        balances[from] = balances[from].sub(tokens);\n', '\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '\n', '        balances[to] = balances[to].add(tokens);\n', '        balances[donation] = balances[donation].add(161803400);\n', '\n', '        emit Transfer(from, to, tokens);\n', '        emit Donation(donation);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    // Returns the amount of tokens approved by the owner that can be\n', '\n', '    // transferred to the spender&#39;s account\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '\n', '        return allowed[tokenOwner][spender];\n', '\n', '    }\n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '\n', '    // from the token owner&#39;s account. The `spender` contract function\n', '\n', '    // `receiveApproval(...)` is then executed\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '\n', '        allowed[msg.sender][spender] = tokens;\n', '\n', '        emit Approval(msg.sender, spender, tokens);\n', '\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    // Don&#39;t accept ETH\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    function () public payable {\n', '\n', '        revert();\n', '\n', '    }\n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', "// '0xCatether Token' contract\n", '\n', '// Mineable ERC20 Token using Proof Of Work\n', '\n', '//\n', '\n', '// Symbol      : 0xCATE\n', '\n', '// Name        : 0xCatether Token\n', '\n', '// Total supply: No Limit\n', '\n', '// Decimals    : 8\n', '\n', '//\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', '// Safe maths\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', 'library SafeMath {\n', '\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '\n', '        c = a + b;\n', '\n', '        require(c >= a);\n', '\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '\n', '        require(b <= a);\n', '\n', '        c = a - b;\n', '\n', '    }\n', '\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '\n', '        c = a * b;\n', '\n', '        require(a == 0 || c / a == b);\n', '\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '\n', '        require(b > 0);\n', '\n', '        c = a / b;\n', '\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', 'library ExtendedMath {\n', '\n', '\n', '    //return the smaller of the two inputs (a or b)\n', '    function limitLessThan(uint a, uint b) internal pure returns (uint c) {\n', '\n', '        if(a > b) return b;\n', '\n', '        return a;\n', '\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', '// ERC Token Standard #20 Interface\n', '\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract ERC20Interface {\n', '\n', '    function totalSupply() public constant returns (uint);\n', '\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '\n', '}\n', '\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', '// Contract function to receive approval and execute function in one call\n', '\n', '//\n', '\n', '// Borrowed from MiniMeToken\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract ApproveAndCallFallBack {\n', '\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '\n', '}\n', '\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', '// Owned contract\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract Owned {\n', '\n', '    address public owner;\n', '\n', '    address public newOwner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '\n', '    constructor() public {\n', '\n', '        owner = msg.sender;\n', '\n', '    }\n', '\n', '\n', '    modifier onlyOwner {\n', '\n', '        require(msg.sender == owner);\n', '\n', '        _;\n', '\n', '    }\n', '\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '\n', '        newOwner = _newOwner;\n', '\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '\n', '        require(msg.sender == newOwner);\n', '\n', '        emit OwnershipTransferred(owner, newOwner);\n', '\n', '        owner = newOwner;\n', '\n', '        newOwner = address(0);\n', '\n', '    }\n', '\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', '// ERC20 Token, with the addition of symbol, name and decimals and an\n', '\n', '// initial fixed supply\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract _0xCatetherToken is ERC20Interface, Owned {\n', '\n', '    using SafeMath for uint;\n', '    using ExtendedMath for uint;\n', '\n', '\n', '    string public symbol;\n', '\n', '    string public  name;\n', '\n', '    uint8 public decimals;\n', '\n', '    uint public _totalSupply;\n', '\n', '\n', '\n', '    uint public latestDifficultyPeriodStarted;\n', '\n', '\n', "    uint public epochCount;//number of 'blocks' mined\n", '\n', '    //a little number\n', '    uint public  _MINIMUM_TARGET = 2**16;\n', '\n', '\n', '    //a big number is easier ; just find a solution that is smaller\n', '    //uint public  _MAXIMUM_TARGET = 2**224;  bitcoin uses 224\n', '    uint public  _MAXIMUM_TARGET = 2**224;\n', '\n', '\n', '    uint public miningTarget;\n', '\n', '    bytes32 public challengeNumber;   //generate a new one when a new reward is minted\n', '\n', '\n', '    address public lastRewardTo;\n', '    uint public lastRewardAmount;\n', '    uint public lastRewardEthBlockNumber;\n', '\n', '    // a bunch of maps to know where this is going (pun intended)\n', '    \n', '    mapping(bytes32 => bytes32) public solutionForChallenge;\n', '    mapping(uint => uint) public timeStampForEpoch;\n', '    mapping(uint => uint) public targetForEpoch;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => address) donationsTo;\n', '\n', '\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    event Donation(address donation);\n', '    event DonationAddressOf(address donator, address donnationAddress);\n', '    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    // Constructor\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    constructor() public{\n', '\n', '        symbol = "0xCATE";\n', '\n', '        name = "0xCatether Token";\n', '\n', '        decimals = 8;\n', '        epochCount = 0;\n', '        _totalSupply = 0;\n', '\n', '        miningTarget = _MAXIMUM_TARGET;\n', '        challengeNumber = "GENESIS_BLOCK";\n', '        solutionForChallenge[challengeNumber] = "Yes, this is the Genesis block.";\n', '\n', '        latestDifficultyPeriodStarted = block.number;\n', '\n', '        _startNewMiningEpoch();\n', '\n', '\n', '        //The owner gets nothing! You must mine this ERC20 token\n', '        //balances[owner] = _totalSupply;\n', '        //Transfer(address(0), owner, _totalSupply);\n', '    }\n', '\n', '\n', '\n', '\n', '        function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success) {\n', '\n', '\n', "            //the PoW must contain work that includes a recent ethereum block hash (challenge number) and the msg.sender's address to prevent MITM attacks\n", '            bytes32 digest =  keccak256(challengeNumber, msg.sender, nonce );\n', '\n', '            //the challenge digest must match the expected\n', '            if (digest != challenge_digest) revert();\n', '\n', '            //the digest must be smaller than the target\n', '            if(uint256(digest) > miningTarget) revert();\n', '\n', '\n', '            //only allow one reward for each challenge\n', '             bytes32 solution = solutionForChallenge[challengeNumber];\n', '             solutionForChallenge[challengeNumber] = digest;\n', '             if(solution != 0x0) revert();  //prevent the same answer from awarding twice\n', '\n', '\n', '            uint reward_amount = getMiningReward(digest);\n', '\n', '            balances[msg.sender] = balances[msg.sender].add(reward_amount);\n', '\n', '            _totalSupply = _totalSupply.add(reward_amount);\n', '\n', '            //set readonly diagnostics data\n', '            lastRewardTo = msg.sender;\n', '            lastRewardAmount = reward_amount;\n', '            lastRewardEthBlockNumber = block.number;\n', '\n', '             _startNewMiningEpoch();\n', '\n', '              emit Mint(msg.sender, reward_amount, epochCount, challengeNumber );\n', '\n', '           return true;\n', '\n', '        }\n', '\n', '\n', "    //a new 'block' to be mined\n", '    function _startNewMiningEpoch() internal {\n', '        \n', '        targetForEpoch[epochCount] = miningTarget;\n', '        timeStampForEpoch[epochCount] = block.timestamp;\n', '        epochCount = epochCount.add(1);\n', '    \n', '      //Difficulty adjustment following the DigiChieldv3 implementation (Tempered-SMA)\n', '      // Allows more thorough protection against multi-pool hash attacks\n', '      // https://github.com/zawy12/difficulty-algorithms/issues/9\n', '        _reAdjustDifficulty();\n', '\n', '\n', '      //make the latest ethereum block hash a part of the next challenge for PoW to prevent pre-mining future blocks\n', '      //do this last since this is a protection mechanism in the mint() function\n', '      challengeNumber = blockhash(block.number - 1);\n', '\n', '    }\n', '\n', '\n', '\n', '\n', '    //https://github.com/zawy12/difficulty-algorithms/issues/9\n', '    //readjust the target via a tempered SMA\n', '    function _reAdjustDifficulty() internal {\n', '        \n', "        //we want miners to spend 1 minutes to mine each 'block'\n", '        //for that, we need to approximate as closely as possible the current difficulty, by averaging the 28 last difficulties,\n', '        // compared to the average time it took to mine each block.\n', "        // also, since we can't really do that if we don't even have 28 mined blocks, difficulty will not move until we reach that number.\n", '        \n', "        uint timeTarget = 188; // roughly equals to Pi number. (There's also Phi somewhere below)\n", '        \n', '        if(epochCount>28) {\n', '            // counter, difficulty-sum, solve-time-sum, solve-time\n', '            uint i = 0;\n', '            uint sumD = 0;\n', "            uint sumST = 0;  // the first calculation of the timestamp difference can be negative, but it's not that bad (see below)\n", '            uint solvetime;\n', '            \n', '            for(i=epochCount.sub(28); i<epochCount; i++){\n', '                sumD = sumD.add(targetForEpoch[i]);\n', '                solvetime = timeStampForEpoch[i] - timeStampForEpoch[i-1];\n', '                if (solvetime > timeTarget.mul(7)) {solvetime = timeTarget.mul(7); }\n', '                //if (solvetime < timeTarget.mul(-6)) {solvetime = timeTarget.mul(-6); }    Ethereum EVM doesn\'t allow for a timestamp that make time go "backwards" anyway, so, we\'re good\n', '                sumST += solvetime;                                                   //    (block.timestamp is an uint256 => negative = very very long time, thus rejected by the network)\n', "                // we don't use safeAdd because in sore rare cases, it can underflow. However, the EVM structure WILL make it overflow right after, thus giving a correct SumST after a few loops\n", '            }\n', '            sumST = sumST.mul(10000).div(2523).add(1260); // 1260 seconds is a 75% weighing on what should be the actual time to mine 28 blocks.\n', '            miningTarget = sumD.mul(60).div(sumST); //We add it to the actual time it took with a weighted average (tempering)\n', '        }\n', '        \n', '        latestDifficultyPeriodStarted = block.number;\n', '\n', '        if(miningTarget < _MINIMUM_TARGET) //very difficult\n', '        {\n', '          miningTarget = _MINIMUM_TARGET;\n', '        }\n', '\n', '        if(miningTarget > _MAXIMUM_TARGET) //very easy\n', '        {\n', '          miningTarget = _MAXIMUM_TARGET;\n', '        }\n', '        targetForEpoch[epochCount] = miningTarget;\n', '    }\n', '\n', '\n', '    //this is a recent ethereum block hash, used to prevent pre-mining future blocks\n', '    function getChallengeNumber() public constant returns (bytes32) {\n', '        return challengeNumber;\n', '    }\n', '\n', '    //the number of zeroes the digest of the PoW solution requires.  Auto adjusts\n', '     function getMiningDifficulty() public constant returns (uint) {\n', '        return _MAXIMUM_TARGET.div(miningTarget);\n', '    }\n', '\n', '    function getMiningTarget() public constant returns (uint) {\n', '       return miningTarget;\n', '   }\n', '\n', '\n', '\n', "    //There's no limit to the coin supply\n", "    //reward follows the same emmission rate as Dogecoins'\n", '    function getMiningReward(bytes32 digest) public constant returns (uint) {\n', '        \n', '        if(epochCount > 600000) return (30000 * 10**uint(decimals) );\n', '        if(epochCount > 500000) return (46875 * 10**uint(decimals) );\n', '        if(epochCount > 400000) return (93750 * 10**uint(decimals) );\n', '        if(epochCount > 300000) return (187500 * 10**uint(decimals) );\n', '        if(epochCount > 200000) return (375000 * 10**uint(decimals) );\n', '        if(epochCount > 145000) return (500000 * 10**uint(decimals) );\n', '        if(epochCount > 100000) return ((uint256(keccak256(digest, blockhash(block.number - 2))) % 1500000) * 10**uint(decimals) );\n', '        return ( (uint256(keccak256(digest, blockhash(block.number - 2))) % 3000000) * 10**uint(decimals) );\n', '\n', '    }\n', '\n', "    //help debug mining software (even though challenge_digest isn't used, this function is constant and helps troubleshooting mining issues)\n", '    function getMintDigest(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number) public view returns (bytes32 digesttest) {\n', '\n', '        bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\n', '\n', '        return digest;\n', '\n', '      }\n', '\n', '        //help debug mining software\n', '      function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns (bool success) {\n', '\n', '          bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\n', '\n', '          if(uint256(digest) > testTarget) revert();\n', '\n', '          return (digest == challenge_digest);\n', '\n', '        }\n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    // Total supply\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    function totalSupply() public constant returns (uint) {\n', '\n', '        return _totalSupply  - balances[address(0)];\n', '\n', '    }\n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    // Get the token balance for account `tokenOwner`\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '\n', '        return balances[tokenOwner];\n', '\n', '    }\n', '    \n', '    function donationTo(address tokenOwner) public constant returns (address donationAddress) {\n', '\n', '        return donationsTo[tokenOwner];\n', '\n', '    }\n', '    \n', '    function changeDonation(address donationAddress) public returns (bool success) {\n', '\n', '        donationsTo[msg.sender] = donationAddress;\n', '        \n', '        emit DonationAddressOf(msg.sender , donationAddress); \n', '        return true;\n', '    \n', '    }\n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', "    // Transfer the balance from token owner's account to `to` account\n", '\n', "    // - Owner's account must have sufficient balance to transfer\n", '\n', '    // - 0 value transfers are allowed\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        \n', '        address donation = donationsTo[msg.sender];\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        \n', '        balances[to] = balances[to].add(tokens);\n', '        balances[donation] = balances[donation].add(161803400);\n', '        \n', '        emit Transfer(msg.sender, to, tokens);\n', '        emit Donation(donation);\n', '        \n', '        return true;\n', '\n', '    }\n', '    \n', '    function transferAndDonateTo(address to, uint tokens, address donation) public returns (bool success) {\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '\n', '        balances[to] = balances[to].add(tokens);\n', '        balances[donation] = balances[donation].add(161803400);\n', '\n', '        emit Transfer(msg.sender, to, tokens);\n', '        emit Donation(donation);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '\n', "    // from the token owner's account\n", '\n', '    //\n', '\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '\n', '    // recommends that there are no checks for the approval double-spend attack\n', '\n', '    // as this should be implemented in user interfaces\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '\n', '        allowed[msg.sender][spender] = tokens;\n', '\n', '        emit Approval(msg.sender, spender, tokens);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '\n', '    //\n', '\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '\n', '    // for spending from the `from` account and\n', '\n', '    // - From account must have sufficient balance to transfer\n', '\n', '    // - Spender must have sufficient allowance to transfer\n', '\n', '    // - 0 value transfers are allowed\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        \n', '        address donation = donationsTo[from];\n', '        balances[from] = balances[from].sub(tokens);\n', '\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '\n', '        balances[to] = balances[to].add(tokens);\n', '        balances[donation] = balances[donation].add(161803400);\n', '\n', '        emit Transfer(from, to, tokens);\n', '        emit Donation(donation);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    // Returns the amount of tokens approved by the owner that can be\n', '\n', "    // transferred to the spender's account\n", '\n', '    // ------------------------------------------------------------------------\n', '\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '\n', '        return allowed[tokenOwner][spender];\n', '\n', '    }\n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '\n', "    // from the token owner's account. The `spender` contract function\n", '\n', '    // `receiveApproval(...)` is then executed\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '\n', '        allowed[msg.sender][spender] = tokens;\n', '\n', '        emit Approval(msg.sender, spender, tokens);\n', '\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', "    // Don't accept ETH\n", '\n', '    // ------------------------------------------------------------------------\n', '\n', '    function () public payable {\n', '\n', '        revert();\n', '\n', '    }\n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '\n', '    }\n', '\n', '}']
