['pragma solidity ^0.4.23;\n', '\n', 'interface ApproveAndCallFallBack {\n', '    function receiveApproval(\n', '        address from,\n', '        uint256 _amount,\n', '        address _token,\n', '        bytes _data\n', '    ) external;\n', '}\n', '\n', '\n', 'contract Controlled {\n', '    /// @notice The address of the controller is the only address that can call\n', '    ///  a function with this modifier\n', '    modifier onlyController { \n', '        require(msg.sender == controller); \n', '        _; \n', '    }\n', '\n', '    address public controller;\n', '\n', '    constructor() internal { \n', '        controller = msg.sender; \n', '    }\n', '\n', '    /// @notice Changes the controller of the contract\n', '    /// @param _newController The new controller of the contract\n', '    function changeController(address _newController) public onlyController {\n', '        controller = _newController;\n', '    }\n', '}\n', '\n', '\n', '/*\n', '* Used to proxy function calls to the RLPReader for testing\n', '*/\n', '/*\n', '* @author Hamdi Allam hamdi.a<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="5c30303d31656b1c3b313d3530723f3331">[email&#160;protected]</a>\n', '* Please reach our for any questions/concerns\n', '*/\n', '\n', '\n', 'library RLPReader {\n', '    uint8 constant STRING_SHORT_START = 0x80;\n', '    uint8 constant STRING_LONG_START  = 0xb8;\n', '    uint8 constant LIST_SHORT_START   = 0xc0;\n', '    uint8 constant LIST_LONG_START    = 0xf8;\n', '\n', '    uint8 constant WORD_SIZE = 32;\n', '\n', '    struct RLPItem {\n', '        uint len;\n', '        uint memPtr;\n', '    }\n', '\n', '    /*\n', '    * @param item RLP encoded bytes\n', '    */\n', '    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\n', '        if (item.length == 0) \n', '            return RLPItem(0, 0);\n', '\n', '        uint memPtr;\n', '        assembly {\n', '            memPtr := add(item, 0x20)\n', '        }\n', '\n', '        return RLPItem(item.length, memPtr);\n', '    }\n', '\n', '    /*\n', '    * @param item RLP encoded list in bytes\n', '    */\n', '    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory result) {\n', '        require(isList(item));\n', '\n', '        uint items = numItems(item);\n', '        result = new RLPItem[](items);\n', '\n', '        uint memPtr = item.memPtr + _payloadOffset(item.memPtr);\n', '        uint dataLen;\n', '        for (uint i = 0; i < items; i++) {\n', '            dataLen = _itemLength(memPtr);\n', '            result[i] = RLPItem(dataLen, memPtr); \n', '            memPtr = memPtr + dataLen;\n', '        }\n', '    }\n', '\n', '    /*\n', '    * Helpers\n', '    */\n', '\n', '    // @return indicator whether encoded payload is a list. negate this function call for isData.\n', '    function isList(RLPItem memory item) internal pure returns (bool) {\n', '        uint8 byte0;\n', '        uint memPtr = item.memPtr;\n', '        assembly {\n', '            byte0 := byte(0, mload(memPtr))\n', '        }\n', '\n', '        if (byte0 < LIST_SHORT_START)\n', '            return false;\n', '        return true;\n', '    }\n', '\n', '    // @return number of payload items inside an encoded list.\n', '    function numItems(RLPItem memory item) internal pure returns (uint) {\n', '        uint count = 0;\n', '        uint currPtr = item.memPtr + _payloadOffset(item.memPtr);\n', '        uint endPtr = item.memPtr + item.len;\n', '        while (currPtr < endPtr) {\n', '           currPtr = currPtr + _itemLength(currPtr); // skip over an item\n', '           count++;\n', '        }\n', '\n', '        return count;\n', '    }\n', '\n', '    // @return entire rlp item byte length\n', '    function _itemLength(uint memPtr) internal pure returns (uint len) {\n', '        uint byte0;\n', '        assembly {\n', '            byte0 := byte(0, mload(memPtr))\n', '        }\n', '\n', '        if (byte0 < STRING_SHORT_START)\n', '            return 1;\n', '        \n', '        else if (byte0 < STRING_LONG_START)\n', '            return byte0 - STRING_SHORT_START + 1;\n', '\n', '        else if (byte0 < LIST_SHORT_START) {\n', '            assembly {\n', '                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\n', '                memPtr := add(memPtr, 1) // skip over the first byte\n', '                \n', '                /* 32 byte word size */\n', '                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\n', '                len := add(dataLen, add(byteLen, 1))\n', '            }\n', '        }\n', '\n', '        else if (byte0 < LIST_LONG_START) {\n', '            return byte0 - LIST_SHORT_START + 1;\n', '        } \n', '\n', '        else {\n', '            assembly {\n', '                let byteLen := sub(byte0, 0xf7)\n', '                memPtr := add(memPtr, 1)\n', '\n', '                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\n', '                len := add(dataLen, add(byteLen, 1))\n', '            }\n', '        }\n', '    }\n', '\n', '    // @return number of bytes until the data\n', '    function _payloadOffset(uint memPtr) internal pure returns (uint) {\n', '        uint byte0;\n', '        assembly {\n', '            byte0 := byte(0, mload(memPtr))\n', '        }\n', '\n', '        if (byte0 < STRING_SHORT_START) \n', '            return 0;\n', '        else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START))\n', '            return 1;\n', '        else if (byte0 < LIST_SHORT_START)  // being explicit\n', '            return byte0 - (STRING_LONG_START - 1) + 1;\n', '        else\n', '            return byte0 - (LIST_LONG_START - 1) + 1;\n', '    }\n', '\n', '    /** RLPItem conversions into data types **/\n', '\n', '    function toBoolean(RLPItem memory item) internal pure returns (bool) {\n', '        require(item.len == 1, "Invalid RLPItem. Booleans are encoded in 1 byte");\n', '        uint result;\n', '        uint memPtr = item.memPtr;\n', '        assembly {\n', '            result := byte(0, mload(memPtr))\n', '        }\n', '\n', '        return result == 0 ? false : true;\n', '    }\n', '\n', '    function toAddress(RLPItem memory item) internal pure returns (address) {\n', '        // 1 byte for the length prefix according to RLP spec\n', '        require(item.len == 21, "Invalid RLPItem. Addresses are encoded in 20 bytes");\n', '        \n', '        uint memPtr = item.memPtr + 1; // skip the length prefix\n', '        uint addr;\n', '        assembly {\n', '            addr := div(mload(memPtr), exp(256, 12)) // right shift 12 bytes. we want the most significant 20 bytes\n', '        }\n', '        \n', '        return address(addr);\n', '    }\n', '\n', '    function toUint(RLPItem memory item) internal pure returns (uint) {\n', '        uint offset = _payloadOffset(item.memPtr);\n', '        uint len = item.len - offset;\n', '        uint memPtr = item.memPtr + offset;\n', '\n', '        uint result;\n', '        assembly {\n', '            result := div(mload(memPtr), exp(256, sub(32, len))) // shift to the correct location\n', '        }\n', '\n', '        return result;\n', '    }\n', '\n', '    function toBytes(RLPItem memory item) internal pure returns (bytes) {\n', '        uint offset = _payloadOffset(item.memPtr);\n', '        uint len = item.len - offset; // data length\n', '        bytes memory result = new bytes(len);\n', '\n', '        uint destPtr;\n', '        assembly {\n', '            destPtr := add(0x20, result)\n', '        }\n', '\n', '        copy(item.memPtr + offset, destPtr, len);\n', '        return result;\n', '    }\n', '\n', '\n', '    /*\n', '    * @param src Pointer to source\n', '    * @param dest Pointer to destination\n', '    * @param len Amount of memory to copy from the source\n', '    */\n', '    function copy(uint src, uint dest, uint len) internal pure {\n', '        // copy as many word sizes as possible\n', '        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\n', '            assembly {\n', '                mstore(dest, mload(src))\n', '            }\n', '\n', '            src += WORD_SIZE;\n', '            dest += WORD_SIZE;\n', '        }\n', '\n', '        // left over bytes\n', '        uint mask = 256 ** (WORD_SIZE - len) - 1;\n', '        assembly {\n', '            let srcpart := and(mload(src), not(mask)) // zero out src\n', '            let destpart := and(mload(dest), mask) // retrieve the bytes\n', '            mstore(dest, or(destpart, srcpart))\n', '        }\n', '    }\n', '}\n', '\n', 'contract RLPHelper {\n', '    using RLPReader for bytes;\n', '    using RLPReader for uint;\n', '    using RLPReader for RLPReader.RLPItem;\n', '\n', '    function isList(bytes memory item) public pure returns (bool) {\n', '        RLPReader.RLPItem memory rlpItem = item.toRlpItem();\n', '        return rlpItem.isList();\n', '    }\n', '\n', '    function itemLength(bytes memory item) public pure returns (uint) {\n', '        uint memPtr;\n', '        assembly {\n', '            memPtr := add(0x20, item)\n', '        }\n', '\n', '        return memPtr._itemLength();\n', '    }\n', '\n', '    function numItems(bytes memory item) public pure returns (uint) {\n', '        RLPReader.RLPItem memory rlpItem = item.toRlpItem();\n', '        return rlpItem.numItems();\n', '    }\n', '\n', '    function toBytes(bytes memory item) public pure returns (bytes) {\n', '        RLPReader.RLPItem memory rlpItem = item.toRlpItem();\n', '        return rlpItem.toBytes();\n', '    }\n', '\n', '    function toUint(bytes memory item) public pure returns (uint) {\n', '        RLPReader.RLPItem memory rlpItem = item.toRlpItem();\n', '        return rlpItem.toUint();\n', '    }\n', '\n', '    function toAddress(bytes memory item) public pure returns (address) {\n', '        RLPReader.RLPItem memory rlpItem = item.toRlpItem();\n', '        return rlpItem.toAddress();\n', '    }\n', '\n', '    function toBoolean(bytes memory item) public pure returns (bool) {\n', '        RLPReader.RLPItem memory rlpItem = item.toRlpItem();\n', '        return rlpItem.toBoolean();\n', '    }\n', '\n', '    function bytesToString(bytes memory item) public pure returns (string) {\n', '        RLPReader.RLPItem memory rlpItem = item.toRlpItem();\n', '        return string(rlpItem.toBytes());\n', '    }\n', '\n', '    /* custom destructuring */\n', '    /*function customDestructure(bytes memory item) public pure returns (address, bool, uint) {\n', '        // first three elements follow the return types in order. Ignore the rest\n', '        RLPReader.RLPItem[] memory items = item.toRlpItem().toList();\n', '        return (items[0].toAddress(), items[1].toBoolean(), items[2].toUint());\n', '    }\n', '\n', '    function customNestedDestructure(bytes memory item) public pure returns (address, uint) {\n', '        RLPReader.RLPItem[] memory items = item.toRlpItem().toList();\n', '        items = items[0].toList();\n', '        return (items[0].toAddress(), items[1].toUint());\n', '    }*/\n', '\n', '\n', '    //======================================\n', '\n', '    function pollTitle(bytes memory item) public pure returns (string) {\n', '        RLPReader.RLPItem[] memory items = item.toRlpItem().toList();\n', '        return string(items[0].toBytes());\n', '    }\n', '\n', '    function pollBallot(bytes memory item, uint ballotNum) public pure returns (string) {\n', '        RLPReader.RLPItem[] memory items = item.toRlpItem().toList();\n', '        items = items[1].toList();\n', '        return string(items[ballotNum].toBytes());\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '/*\n', '    Copyright 2016, Jordi Baylina\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', ' */\n', '/**\n', ' * @title MiniMeToken Contract\n', ' * @author Jordi Baylina\n', ' * @dev This token contract&#39;s goal is to make it easy for anyone to clone this\n', ' *  token using the token distribution at a given block, this will allow DAO&#39;s\n', ' *  and DApps to upgrade their features in a decentralized manner without\n', ' *  affecting the original token\n', ' * @dev It is ERC20 compliant, but still needs to under go further testing.\n', ' */\n', '\n', '\n', '\n', '/**\n', ' * @dev The token controller contract must implement these functions\n', ' */\n', 'interface TokenController {\n', '    /**\n', '     * @notice Called when `_owner` sends ether to the MiniMe Token contract\n', '     * @param _owner The address that sent the ether to create tokens\n', '     * @return True if the ether is accepted, false if it throws\n', '     */\n', '    function proxyPayment(address _owner) external payable returns(bool);\n', '\n', '    /**\n', '     * @notice Notifies the controller about a token transfer allowing the\n', '     *  controller to react if desired\n', '     * @param _from The origin of the transfer\n', '     * @param _to The destination of the transfer\n', '     * @param _amount The amount of the transfer\n', '     * @return False if the controller does not authorize the transfer\n', '     */\n', '    function onTransfer(address _from, address _to, uint _amount) external returns(bool);\n', '\n', '    /**\n', '     * @notice Notifies the controller about an approval allowing the\n', '     *  controller to react if desired\n', '     * @param _owner The address that calls `approve()`\n', '     * @param _spender The spender in the `approve()` call\n', '     * @param _amount The amount in the `approve()` call\n', '     * @return False if the controller does not authorize the approval\n', '     */\n', '    function onApprove(address _owner, address _spender, uint _amount) external\n', '        returns(bool);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '// Abstract contract for the full ERC 20 Token standard\n', '// https://github.com/ethereum/EIPs/issues/20\n', '\n', 'interface ERC20Token {\n', '\n', '    /**\n', '     * @notice send `_value` token to `_to` from `msg.sender`\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount of token to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     */\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '\n', '    /**\n', '     * @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @param _value The amount of tokens to be approved for transfer\n', '     * @return Whether the approval was successful or not\n', '     */\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '\n', '    /**\n', '     * @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount of token to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n', '\n', '    /**\n', '     * @param _owner The address from which the balance will be retrieved\n', '     * @return The balance\n', '     */\n', '    function balanceOf(address _owner) external view returns (uint256 balance);\n', '\n', '    /**\n', '     * @param _owner The address of the account owning tokens\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @return Amount of remaining tokens allowed to spent\n', '     */\n', '    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n', '\n', '    /**\n', '     * @notice return total supply of tokens\n', '     */\n', '    function totalSupply() external view returns (uint256 supply);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', 'contract MiniMeTokenInterface is ERC20Token {\n', '\n', '    /**\n', '     * @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n', '     *  its behalf, and then a function is triggered in the contract that is\n', '     *  being approved, `_spender`. This allows users to use their tokens to\n', '     *  interact with contracts in one function call instead of two\n', '     * @param _spender The address of the contract able to transfer the tokens\n', '     * @param _amount The amount of tokens to be approved for transfer\n', '     * @return True if the function call was successful\n', '     */\n', '    function approveAndCall(\n', '        address _spender,\n', '        uint256 _amount,\n', '        bytes _extraData\n', '    ) \n', '        external \n', '        returns (bool success);\n', '\n', '    /**    \n', '     * @notice Creates a new clone token with the initial distribution being\n', '     *  this token at `_snapshotBlock`\n', '     * @param _cloneTokenName Name of the clone token\n', '     * @param _cloneDecimalUnits Number of decimals of the smallest unit\n', '     * @param _cloneTokenSymbol Symbol of the clone token\n', '     * @param _snapshotBlock Block when the distribution of the parent token is\n', '     *  copied to set the initial distribution of the new clone token;\n', '     *  if the block is zero than the actual block, the current block is used\n', '     * @param _transfersEnabled True if transfers are allowed in the clone\n', '     * @return The address of the new MiniMeToken Contract\n', '     */\n', '    function createCloneToken(\n', '        string _cloneTokenName,\n', '        uint8 _cloneDecimalUnits,\n', '        string _cloneTokenSymbol,\n', '        uint _snapshotBlock,\n', '        bool _transfersEnabled\n', '    ) \n', '        public\n', '        returns(address);\n', '\n', '    /**    \n', '     * @notice Generates `_amount` tokens that are assigned to `_owner`\n', '     * @param _owner The address that will be assigned the new tokens\n', '     * @param _amount The quantity of tokens generated\n', '     * @return True if the tokens are generated correctly\n', '     */\n', '    function generateTokens(\n', '        address _owner,\n', '        uint _amount\n', '    )\n', '        public\n', '        returns (bool);\n', '\n', '    /**\n', '     * @notice Burns `_amount` tokens from `_owner`\n', '     * @param _owner The address that will lose the tokens\n', '     * @param _amount The quantity of tokens to burn\n', '     * @return True if the tokens are burned correctly\n', '     */\n', '    function destroyTokens(\n', '        address _owner,\n', '        uint _amount\n', '    ) \n', '        public\n', '        returns (bool);\n', '\n', '    /**        \n', '     * @notice Enables token holders to transfer their tokens freely if true\n', '     * @param _transfersEnabled True if transfers are allowed in the clone\n', '     */\n', '    function enableTransfers(bool _transfersEnabled) public;\n', '\n', '    /**    \n', '     * @notice This method can be used by the controller to extract mistakenly\n', '     *  sent tokens to this contract.\n', '     * @param _token The address of the token contract that you want to recover\n', '     *  set to 0 in case you want to extract ether.\n', '     */\n', '    function claimTokens(address _token) public;\n', '\n', '    /**\n', '     * @dev Queries the balance of `_owner` at a specific `_blockNumber`\n', '     * @param _owner The address from which the balance will be retrieved\n', '     * @param _blockNumber The block number when the balance is queried\n', '     * @return The balance at `_blockNumber`\n', '     */\n', '    function balanceOfAt(\n', '        address _owner,\n', '        uint _blockNumber\n', '    ) \n', '        public\n', '        constant\n', '        returns (uint);\n', '\n', '    /**\n', '     * @notice Total amount of tokens at a specific `_blockNumber`.\n', '     * @param _blockNumber The block number when the totalSupply is queried\n', '     * @return The total amount of tokens at `_blockNumber`\n', '     */\n', '    function totalSupplyAt(uint _blockNumber) public view returns(uint);\n', '\n', '}\n', '\n', '\n', '\n', '\n', '////////////////\n', '// MiniMeTokenFactory\n', '////////////////\n', '\n', '/**\n', ' * @dev This contract is used to generate clone contracts from a contract.\n', ' *  In solidity this is the way to create a contract from a contract of the\n', ' *  same class\n', ' */\n', 'contract MiniMeTokenFactory {\n', '\n', '    /**\n', '     * @notice Update the DApp by creating a new token with new functionalities\n', '     *  the msg.sender becomes the controller of this clone token\n', '     * @param _parentToken Address of the token being cloned\n', '     * @param _snapshotBlock Block of the parent token that will\n', '     *  determine the initial distribution of the clone token\n', '     * @param _tokenName Name of the new token\n', '     * @param _decimalUnits Number of decimals of the new token\n', '     * @param _tokenSymbol Token Symbol for the new token\n', '     * @param _transfersEnabled If true, tokens will be able to be transferred\n', '     * @return The address of the new token contract\n', '     */\n', '    function createCloneToken(\n', '        address _parentToken,\n', '        uint _snapshotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) public returns (MiniMeToken) {\n', '        MiniMeToken newToken = new MiniMeToken(\n', '            this,\n', '            _parentToken,\n', '            _snapshotBlock,\n', '            _tokenName,\n', '            _decimalUnits,\n', '            _tokenSymbol,\n', '            _transfersEnabled\n', '            );\n', '\n', '        newToken.changeController(msg.sender);\n', '        return newToken;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev The actual token contract, the default controller is the msg.sender\n', ' *  that deploys the contract, so usually this token will be deployed by a\n', ' *  token controller contract, which Giveth will call a "Campaign"\n', ' */\n', 'contract MiniMeToken is MiniMeTokenInterface, Controlled {\n', '\n', '    string public name;                //The Token&#39;s name: e.g. DigixDAO Tokens\n', '    uint8 public decimals;             //Number of decimals of the smallest unit\n', '    string public symbol;              //An identifier: e.g. REP\n', '    string public version = "MMT_0.1"; //An arbitrary versioning scheme\n', '\n', '    /**\n', '     * @dev `Checkpoint` is the structure that attaches a block number to a\n', '     *  given value, the block number attached is the one that last changed the\n', '     *  value\n', '     */\n', '    struct Checkpoint {\n', '\n', '        // `fromBlock` is the block number that the value was generated from\n', '        uint128 fromBlock;\n', '\n', '        // `value` is the amount of tokens at a specific block number\n', '        uint128 value;\n', '    }\n', '\n', '    // `parentToken` is the Token address that was cloned to produce this token;\n', '    //  it will be 0x0 for a token that was not cloned\n', '    MiniMeToken public parentToken;\n', '\n', '    // `parentSnapShotBlock` is the block number from the Parent Token that was\n', '    //  used to determine the initial distribution of the Clone Token\n', '    uint public parentSnapShotBlock;\n', '\n', '    // `creationBlock` is the block number that the Clone Token was created\n', '    uint public creationBlock;\n', '\n', '    // `balances` is the map that tracks the balance of each address, in this\n', '    //  contract when the balance changes the block number that the change\n', '    //  occurred is also included in the map \n', '    mapping (address => Checkpoint[]) balances;\n', '\n', '    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    // Tracks the history of the `totalSupply` of the token\n', '    Checkpoint[] totalSupplyHistory;\n', '\n', '    // Flag that determines if the token is transferable or not.\n', '    bool public transfersEnabled;\n', '\n', '    // The factory used to create new clone tokens\n', '    MiniMeTokenFactory public tokenFactory;\n', '\n', '////////////////\n', '// Constructor\n', '////////////////\n', '\n', '    /** \n', '     * @notice Constructor to create a MiniMeToken\n', '     * @param _tokenFactory The address of the MiniMeTokenFactory contract that\n', '     *  will create the Clone token contracts, the token factory needs to be\n', '     *  deployed first\n', '     * @param _parentToken Address of the parent token, set to 0x0 if it is a\n', '     *  new token\n', '     * @param _parentSnapShotBlock Block of the parent token that will\n', '     *  determine the initial distribution of the clone token, set to 0 if it\n', '     *  is a new token\n', '     * @param _tokenName Name of the new token\n', '     * @param _decimalUnits Number of decimals of the new token\n', '     * @param _tokenSymbol Token Symbol for the new token\n', '     * @param _transfersEnabled If true, tokens will be able to be transferred\n', '     */\n', '    constructor(\n', '        address _tokenFactory,\n', '        address _parentToken,\n', '        uint _parentSnapShotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) \n', '        public\n', '    {\n', '        require(_tokenFactory != address(0)); //if not set, clone feature will not work properly\n', '        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n', '        name = _tokenName;                                 // Set the name\n', '        decimals = _decimalUnits;                          // Set the decimals\n', '        symbol = _tokenSymbol;                             // Set the symbol\n', '        parentToken = MiniMeToken(_parentToken);\n', '        parentSnapShotBlock = _parentSnapShotBlock;\n', '        transfersEnabled = _transfersEnabled;\n', '        creationBlock = block.number;\n', '    }\n', '\n', '\n', '///////////////////\n', '// ERC20 Methods\n', '///////////////////\n', '\n', '    /**\n', '     * @notice Send `_amount` tokens to `_to` from `msg.sender`\n', '     * @param _to The address of the recipient\n', '     * @param _amount The amount of tokens to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     */\n', '    function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '        require(transfersEnabled);\n', '        return doTransfer(msg.sender, _to, _amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n', '     *  is approved by `_from`\n', '     * @param _from The address holding the tokens being transferred\n', '     * @param _to The address of the recipient\n', '     * @param _amount The amount of tokens to be transferred\n', '     * @return True if the transfer was successful\n', '     */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) \n', '        public \n', '        returns (bool success)\n', '    {\n', '\n', '        // The controller of this contract can move tokens around at will,\n', '        //  this is important to recognize! Confirm that you trust the\n', '        //  controller of this contract, which in most situations should be\n', '        //  another open source smart contract or 0x0\n', '        if (msg.sender != controller) {\n', '            require(transfersEnabled);\n', '\n', '            // The standard ERC 20 transferFrom functionality\n', '            if (allowed[_from][msg.sender] < _amount) { \n', '                return false;\n', '            }\n', '            allowed[_from][msg.sender] -= _amount;\n', '        }\n', '        return doTransfer(_from, _to, _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev This is the actual transfer function in the token contract, it can\n', '     *  only be called by other functions in this contract.\n', '     * @param _from The address holding the tokens being transferred\n', '     * @param _to The address of the recipient\n', '     * @param _amount The amount of tokens to be transferred\n', '     * @return True if the transfer was successful\n', '     */\n', '    function doTransfer(\n', '        address _from,\n', '        address _to,\n', '        uint _amount\n', '    ) \n', '        internal\n', '        returns(bool)\n', '    {\n', '\n', '        if (_amount == 0) {\n', '            return true;\n', '        }\n', '\n', '        require(parentSnapShotBlock < block.number);\n', '\n', '        // Do not allow transfer to 0x0 or the token contract itself\n', '        require((_to != 0) && (_to != address(this)));\n', '\n', '        // If the amount being transfered is more than the balance of the\n', '        //  account the transfer returns false\n', '        uint256 previousBalanceFrom = balanceOfAt(_from, block.number);\n', '        if (previousBalanceFrom < _amount) {\n', '            return false;\n', '        }\n', '\n', '        // Alerts the token controller of the transfer\n', '        if (isContract(controller)) {\n', '            require(TokenController(controller).onTransfer(_from, _to, _amount));\n', '        }\n', '\n', '        // First update the balance array with the new value for the address\n', '        //  sending the tokens\n', '        updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n', '\n', '        // Then update the balance array with the new value for the address\n', '        //  receiving the tokens\n', '        uint256 previousBalanceTo = balanceOfAt(_to, block.number);\n', '        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n', '        updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n', '\n', '        // An event to make the transfer easy to find on the blockchain\n', '        emit Transfer(_from, _to, _amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function doApprove(\n', '        address _from,\n', '        address _spender,\n', '        uint256 _amount\n', '    )\n', '        internal \n', '        returns (bool)\n', '    {\n', '        require(transfersEnabled);\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_amount == 0) || (allowed[_from][_spender] == 0));\n', '\n', '        // Alerts the token controller of the approve function call\n', '        if (isContract(controller)) {\n', '            require(TokenController(controller).onApprove(_from, _spender, _amount));\n', '        }\n', '\n', '        allowed[_from][_spender] = _amount;\n', '        emit Approval(_from, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @param _owner The address that&#39;s balance is being requested\n', '     * @return The balance of `_owner` at the current block\n', '     */\n', '    function balanceOf(address _owner) external view returns (uint256 balance) {\n', '        return balanceOfAt(_owner, block.number);\n', '    }\n', '\n', '    /**\n', '     * @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n', '     *  its behalf. This is a modified version of the ERC20 approve function\n', '     *  to be a little bit safer\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @param _amount The amount of tokens to be approved for transfer\n', '     * @return True if the approval was successful\n', '     */\n', '    function approve(address _spender, uint256 _amount) external returns (bool success) {\n', '        doApprove(msg.sender, _spender, _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev This function makes it easy to read the `allowed[]` map\n', '     * @param _owner The address of the account that owns the token\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @return Amount of remaining tokens of _owner that _spender is allowed\n', '     *  to spend\n', '     */\n', '    function allowance(\n', '        address _owner,\n', '        address _spender\n', '    ) \n', '        external\n', '        view\n', '        returns (uint256 remaining)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    /**\n', '     * @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n', '     *  its behalf, and then a function is triggered in the contract that is\n', '     *  being approved, `_spender`. This allows users to use their tokens to\n', '     *  interact with contracts in one function call instead of two\n', '     * @param _spender The address of the contract able to transfer the tokens\n', '     * @param _amount The amount of tokens to be approved for transfer\n', '     * @return True if the function call was successful\n', '     */\n', '    function approveAndCall(\n', '        address _spender,\n', '        uint256 _amount,\n', '        bytes _extraData\n', '    ) \n', '        external \n', '        returns (bool success)\n', '    {\n', '        require(doApprove(msg.sender, _spender, _amount));\n', '\n', '        ApproveAndCallFallBack(_spender).receiveApproval(\n', '            msg.sender,\n', '            _amount,\n', '            this,\n', '            _extraData\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev This function makes it easy to get the total number of tokens\n', '     * @return The total number of tokens\n', '     */\n', '    function totalSupply() external view returns (uint) {\n', '        return totalSupplyAt(block.number);\n', '    }\n', '\n', '\n', '////////////////\n', '// Query balance and totalSupply in History\n', '////////////////\n', '\n', '    /**\n', '     * @dev Queries the balance of `_owner` at a specific `_blockNumber`\n', '     * @param _owner The address from which the balance will be retrieved\n', '     * @param _blockNumber The block number when the balance is queried\n', '     * @return The balance at `_blockNumber`\n', '     */\n', '    function balanceOfAt(\n', '        address _owner,\n', '        uint _blockNumber\n', '    ) \n', '        public\n', '        view\n', '        returns (uint) \n', '    {\n', '\n', '        // These next few lines are used when the balance of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.balanceOfAt` be queried at the\n', '        //  genesis block for that token as this contains initial balance of\n', '        //  this token\n', '        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != 0) {\n', '                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                // Has no parent\n', '                return 0;\n', '            }\n', '\n', '        // This will return the expected balance during normal situations\n', '        } else {\n', '            return getValueAt(balances[_owner], _blockNumber);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Total amount of tokens at a specific `_blockNumber`.\n', '     * @param _blockNumber The block number when the totalSupply is queried\n', '     * @return The total amount of tokens at `_blockNumber`\n', '     */\n', '    function totalSupplyAt(uint _blockNumber) public view returns(uint) {\n', '\n', '        // These next few lines are used when the totalSupply of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.totalSupplyAt` be queried at the\n', '        //  genesis block for this token as that contains totalSupply of this\n', '        //  token at this block number.\n', '        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != 0) {\n', '                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                return 0;\n', '            }\n', '\n', '        // This will return the expected totalSupply during normal situations\n', '        } else {\n', '            return getValueAt(totalSupplyHistory, _blockNumber);\n', '        }\n', '    }\n', '\n', '////////////////\n', '// Clone Token Method\n', '////////////////\n', '\n', '    /**\n', '     * @notice Creates a new clone token with the initial distribution being\n', '     *  this token at `_snapshotBlock`\n', '     * @param _cloneTokenName Name of the clone token\n', '     * @param _cloneDecimalUnits Number of decimals of the smallest unit\n', '     * @param _cloneTokenSymbol Symbol of the clone token\n', '     * @param _snapshotBlock Block when the distribution of the parent token is\n', '     *  copied to set the initial distribution of the new clone token;\n', '     *  if the block is zero than the actual block, the current block is used\n', '     * @param _transfersEnabled True if transfers are allowed in the clone\n', '     * @return The address of the new MiniMeToken Contract\n', '     */\n', '    function createCloneToken(\n', '        string _cloneTokenName,\n', '        uint8 _cloneDecimalUnits,\n', '        string _cloneTokenSymbol,\n', '        uint _snapshotBlock,\n', '        bool _transfersEnabled\n', '        ) \n', '            public\n', '            returns(address)\n', '        {\n', '        uint snapshotBlock = _snapshotBlock;\n', '        if (snapshotBlock == 0) {\n', '            snapshotBlock = block.number;\n', '        }\n', '        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n', '            this,\n', '            snapshotBlock,\n', '            _cloneTokenName,\n', '            _cloneDecimalUnits,\n', '            _cloneTokenSymbol,\n', '            _transfersEnabled\n', '            );\n', '\n', '        cloneToken.changeController(msg.sender);\n', '\n', '        // An event to make the token easy to find on the blockchain\n', '        emit NewCloneToken(address(cloneToken), snapshotBlock);\n', '        return address(cloneToken);\n', '    }\n', '\n', '////////////////\n', '// Generate and destroy tokens\n', '////////////////\n', '    \n', '    /**\n', '     * @notice Generates `_amount` tokens that are assigned to `_owner`\n', '     * @param _owner The address that will be assigned the new tokens\n', '     * @param _amount The quantity of tokens generated\n', '     * @return True if the tokens are generated correctly\n', '     */\n', '    function generateTokens(\n', '        address _owner,\n', '        uint _amount\n', '    )\n', '        public\n', '        onlyController\n', '        returns (bool)\n', '    {\n', '        uint curTotalSupply = totalSupplyAt(block.number);\n', '        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n', '        uint previousBalanceTo = balanceOfAt(_owner, block.number);\n', '        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n', '        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n', '        emit Transfer(0, _owner, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Burns `_amount` tokens from `_owner`\n', '     * @param _owner The address that will lose the tokens\n', '     * @param _amount The quantity of tokens to burn\n', '     * @return True if the tokens are burned correctly\n', '     */\n', '    function destroyTokens(\n', '        address _owner,\n', '        uint _amount\n', '    ) \n', '        public\n', '        onlyController\n', '        returns (bool)\n', '    {\n', '        uint curTotalSupply = totalSupplyAt(block.number);\n', '        require(curTotalSupply >= _amount);\n', '        uint previousBalanceFrom = balanceOfAt(_owner, block.number);\n', '        require(previousBalanceFrom >= _amount);\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n', '        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n', '        emit Transfer(_owner, 0, _amount);\n', '        return true;\n', '    }\n', '\n', '////////////////\n', '// Enable tokens transfers\n', '////////////////\n', '\n', '    /**\n', '     * @notice Enables token holders to transfer their tokens freely if true\n', '     * @param _transfersEnabled True if transfers are allowed in the clone\n', '     */\n', '    function enableTransfers(bool _transfersEnabled) public onlyController {\n', '        transfersEnabled = _transfersEnabled;\n', '    }\n', '\n', '////////////////\n', '// Internal helper functions to query and set a value in a snapshot array\n', '////////////////\n', '\n', '    /**\n', '     * @dev `getValueAt` retrieves the number of tokens at a given block number\n', '     * @param checkpoints The history of values being queried\n', '     * @param _block The block number to retrieve the value at\n', '     * @return The number of tokens being queried\n', '     */\n', '    function getValueAt(\n', '        Checkpoint[] storage checkpoints,\n', '        uint _block\n', '    ) \n', '        view\n', '        internal\n', '        returns (uint)\n', '    {\n', '        if (checkpoints.length == 0) {\n', '            return 0;\n', '        }\n', '\n', '        // Shortcut for the actual value\n', '        if (_block >= checkpoints[checkpoints.length-1].fromBlock) {\n', '            return checkpoints[checkpoints.length-1].value;\n', '        }\n', '        if (_block < checkpoints[0].fromBlock) {\n', '            return 0;\n', '        }\n', '\n', '        // Binary search of the value in the array\n', '        uint min = 0;\n', '        uint max = checkpoints.length-1;\n', '        while (max > min) {\n', '            uint mid = (max + min + 1) / 2;\n', '            if (checkpoints[mid].fromBlock<=_block) {\n', '                min = mid;\n', '            } else {\n', '                max = mid-1;\n', '            }\n', '        }\n', '        return checkpoints[min].value;\n', '    }\n', '\n', '    /**\n', '     * @dev `updateValueAtNow` used to update the `balances` map and the\n', '     *  `totalSupplyHistory`\n', '     * @param checkpoints The history of data being updated\n', '     * @param _value The new number of tokens\n', '     */\n', '    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\n', '        if (\n', '            (checkpoints.length == 0) ||\n', '            (checkpoints[checkpoints.length - 1].fromBlock < block.number)) \n', '        {\n', '            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\n', '            newCheckPoint.fromBlock = uint128(block.number);\n', '            newCheckPoint.value = uint128(_value);\n', '        } else {\n', '            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\n', '            oldCheckPoint.value = uint128(_value);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to determine if an address is a contract\n', '     * @param _addr The address being queried\n', '     * @return True if `_addr` is a contract\n', '     */\n', '    function isContract(address _addr) internal view returns(bool) {\n', '        uint size;\n', '        if (_addr == 0) {\n', '            return false;\n', '        }    \n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Helper function to return a min betwen the two uints\n', '     */\n', '    function min(uint a, uint b) internal returns (uint) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @notice The fallback function: If the contract&#39;s controller has not been\n', '     *  set to 0, then the `proxyPayment` method is called which relays the\n', '     *  ether and creates tokens as described in the token controller contract\n', '     */\n', '    function () public payable {\n', '        require(isContract(controller));\n', '        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n', '    }\n', '\n', '//////////\n', '// Safety Methods\n', '//////////\n', '\n', '    /**\n', '     * @notice This method can be used by the controller to extract mistakenly\n', '     *  sent tokens to this contract.\n', '     * @param _token The address of the token contract that you want to recover\n', '     *  set to 0 in case you want to extract ether.\n', '     */\n', '    function claimTokens(address _token) public onlyController {\n', '        if (_token == 0x0) {\n', '            controller.transfer(address(this).balance);\n', '            return;\n', '        }\n', '\n', '        MiniMeToken token = MiniMeToken(_token);\n', '        uint balance = token.balanceOf(address(this));\n', '        token.transfer(controller, balance);\n', '        emit ClaimedTokens(_token, controller, balance);\n', '    }\n', '\n', '////////////////\n', '// Events\n', '////////////////\n', '    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n', '    event NewCloneToken(address indexed _cloneToken, uint snapshotBlock);\n', '    event Approval(\n', '        address indexed _owner,\n', '        address indexed _spender,\n', '        uint256 _amount\n', '    );\n', '\n', '}\n', '\n', '\n', '\n', 'contract PollManager is Controlled {\n', '\n', '    struct Poll {\n', '        uint startBlock;\n', '        uint endBlock;\n', '        bool canceled;\n', '        uint voters;\n', '        bytes description;\n', '        uint8 numBallots;\n', '        mapping(uint8 => mapping(address => uint)) ballots;\n', '        mapping(uint8 => uint) qvResults;\n', '        mapping(uint8 => uint) results;\n', '        address author;\n', '    }\n', '\n', '    Poll[] _polls;\n', '\n', '    MiniMeToken public token;\n', '\n', '    RLPHelper public rlpHelper;\n', '\n', '    /// @notice Contract constructor\n', '    /// @param _token Address of the token used for governance\n', '    constructor(address _token) \n', '        public {\n', '        token = MiniMeToken(_token);\n', '        rlpHelper = new RLPHelper();\n', '    }\n', '\n', '    /// @notice Only allow addresses that have > 0 SNT to perform an operation\n', '    modifier onlySNTHolder {\n', '        require(token.balanceOf(msg.sender) > 0, "SNT Balance is required to perform this operation"); \n', '        _; \n', '    }\n', '\n', '    /// @notice Create a Poll and enable it immediatly\n', '    /// @param _endBlock Block where the poll ends\n', '    /// @param _description RLP encoded: [poll_title, [poll_ballots]]\n', '    /// @param _numBallots Number of ballots\n', '    function addPoll(\n', '        uint _endBlock,\n', '        bytes _description,\n', '        uint8 _numBallots)\n', '        public\n', '        onlySNTHolder\n', '        returns (uint _idPoll)\n', '    {\n', '        _idPoll = addPoll(block.number, _endBlock, _description, _numBallots);\n', '    }\n', '\n', '    /// @notice Create a Poll\n', '    /// @param _startBlock Block where the poll starts\n', '    /// @param _endBlock Block where the poll ends\n', '    /// @param _description RLP encoded: [poll_title, [poll_ballots]]\n', '    /// @param _numBallots Number of ballots\n', '    function addPoll(\n', '        uint _startBlock,\n', '        uint _endBlock,\n', '        bytes _description,\n', '        uint8 _numBallots)\n', '        public\n', '        onlySNTHolder\n', '        returns (uint _idPoll)\n', '    {\n', '        require(_endBlock > block.number, "End block must be greater than current block");\n', '        require(_startBlock >= block.number && _startBlock < _endBlock, "Start block must not be in the past, and should be less than the end block" );\n', '        require(_numBallots <= 15, "Only a max of 15 ballots are allowed");\n', '\n', '        _idPoll = _polls.length;\n', '        _polls.length ++;\n', '\n', '        Poll storage p = _polls[_idPoll];\n', '        p.startBlock = _startBlock;\n', '        p.endBlock = _endBlock;\n', '        p.voters = 0;\n', '        p.numBallots = _numBallots;\n', '        p.description = _description;\n', '        p.author = msg.sender;\n', '\n', '        emit PollCreated(_idPoll); \n', '    }\n', '\n', '    /// @notice Update poll description (title or ballots) as long as it hasn&#39;t started\n', '    /// @param _idPoll Poll to update\n', '    /// @param _description RLP encoded: [poll_title, [poll_ballots]]\n', '    /// @param _numBallots Number of ballots\n', '    function updatePollDescription(\n', '        uint _idPoll, \n', '        bytes _description,\n', '        uint8 _numBallots)\n', '        public\n', '    {\n', '        require(_idPoll < _polls.length, "Invalid _idPoll");\n', '        require(_numBallots <= 15, "Only a max of 15 ballots are allowed");\n', '\n', '        Poll storage p = _polls[_idPoll];\n', '        require(p.startBlock > block.number, "You cannot modify an active poll");\n', '        require(p.author == msg.sender || msg.sender == controller, "Only the owner/controller can modify the poll");\n', '\n', '        p.numBallots = _numBallots;\n', '        p.description = _description;\n', '        p.author = msg.sender;\n', '    }\n', '\n', '    /// @notice Cancel an existing poll\n', '    /// @dev Can only be done by the controller (which should be a Multisig/DAO) at any time, or by the owner if the poll hasn&#39;t started\n', '    /// @param _idPoll Poll to cancel\n', '    function cancelPoll(uint _idPoll) \n', '        public {\n', '        require(_idPoll < _polls.length, "Invalid _idPoll");\n', '\n', '        Poll storage p = _polls[_idPoll];\n', '        \n', '        require(!p.canceled, "Poll has been canceled already");\n', '        require(p.endBlock > block.number, "Only active polls can be canceled");\n', '\n', '        if(p.startBlock < block.number){\n', '            require(msg.sender == controller, "Only the controller can cancel the poll");\n', '        } else {\n', '            require(p.author == msg.sender, "Only the owner can cancel the poll");\n', '        }\n', '\n', '        p.canceled = true;\n', '\n', '        emit PollCanceled(_idPoll);\n', '    }\n', '\n', '    /// @notice Determine if user can bote for a poll\n', '    /// @param _idPoll Id of the poll\n', '    /// @return bool Can vote or not\n', '    function canVote(uint _idPoll) \n', '        public \n', '        view \n', '        returns(bool)\n', '    {\n', '        if(_idPoll >= _polls.length) return false;\n', '\n', '        Poll storage p = _polls[_idPoll];\n', '        uint balance = token.balanceOfAt(msg.sender, p.startBlock);\n', '        return block.number >= p.startBlock && block.number < p.endBlock && !p.canceled && balance != 0;\n', '    }\n', '    \n', '    /// @notice Calculate square root of a uint (It has some precision loss)\n', '    /// @param x Number to calculate the square root\n', '    /// @return Square root of x\n', '    function sqrt(uint256 x) public pure returns (uint256 y) {\n', '        uint256 z = (x + 1) / 2;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '\n', '    /// @notice Vote for a poll\n', '    /// @param _idPoll Poll to vote\n', '    /// @param _ballots array of (number of ballots the poll has) elements, and their sum must be less or equal to the balance at the block start\n', '    function vote(uint _idPoll, uint[] _ballots) public {\n', '        require(_idPoll < _polls.length, "Invalid _idPoll");\n', '\n', '        Poll storage p = _polls[_idPoll];\n', '\n', '        require(block.number >= p.startBlock && block.number < p.endBlock && !p.canceled, "Poll is inactive");\n', '        require(_ballots.length == p.numBallots, "Number of ballots is incorrect");\n', '\n', '        unvote(_idPoll);\n', '\n', '        uint amount = token.balanceOfAt(msg.sender, p.startBlock);\n', '        require(amount != 0, "No SNT balance available at start block of poll");\n', '\n', '        p.voters++;\n', '\n', '        uint totalBallots = 0;\n', '        for(uint8 i = 0; i < _ballots.length; i++){\n', '            totalBallots += _ballots[i];\n', '\n', '            p.ballots[i][msg.sender] = _ballots[i];\n', '\n', '            if(_ballots[i] != 0){\n', '                p.qvResults[i] += sqrt(_ballots[i] / 1 ether);\n', '                p.results[i] += _ballots[i];\n', '            }\n', '        }\n', '\n', '        require(totalBallots <= amount, "Total ballots must be less than the SNT balance at poll start block");\n', '\n', '        emit Vote(_idPoll, msg.sender, _ballots);\n', '    }\n', '\n', '    /// @notice Cancel or reset a vote\n', '    /// @param _idPoll Poll \n', '    function unvote(uint _idPoll) public {\n', '        require(_idPoll < _polls.length, "Invalid _idPoll");\n', '\n', '        Poll storage p = _polls[_idPoll];\n', '        \n', '        require(block.number >= p.startBlock && block.number < p.endBlock && !p.canceled, "Poll is inactive");\n', '\n', '        if(p.voters == 0) return;\n', '\n', '        p.voters--;\n', '\n', '        for(uint8 i = 0; i < p.numBallots; i++){\n', '            uint ballotAmount = p.ballots[i][msg.sender];\n', '\n', '            p.ballots[i][msg.sender] = 0;\n', '\n', '            if(ballotAmount != 0){\n', '                p.qvResults[i] -= sqrt(ballotAmount / 1 ether);\n', '                p.results[i] -= ballotAmount;\n', '            }\n', '        }\n', '\n', '        emit Unvote(_idPoll, msg.sender);\n', '    }\n', '\n', '    // Constant Helper Function\n', '\n', '    /// @notice Get number of polls\n', '    /// @return Num of polls\n', '    function nPolls()\n', '        public\n', '        view \n', '        returns(uint)\n', '    {\n', '        return _polls.length;\n', '    }\n', '\n', '    /// @notice Get Poll info\n', '    /// @param _idPoll Poll \n', '    function poll(uint _idPoll)\n', '        public \n', '        view \n', '        returns(\n', '        uint _startBlock,\n', '        uint _endBlock,\n', '        bool _canVote,\n', '        bool _canceled,\n', '        bytes _description,\n', '        uint8 _numBallots,\n', '        bool _finalized,\n', '        uint _voters,\n', '        address _author,\n', '        uint[15] _tokenTotal,\n', '        uint[15] _quadraticVotes\n', '    )\n', '    {\n', '        require(_idPoll < _polls.length, "Invalid _idPoll");\n', '\n', '        Poll storage p = _polls[_idPoll];\n', '\n', '        _startBlock = p.startBlock;\n', '        _endBlock = p.endBlock;\n', '        _canceled = p.canceled;\n', '        _canVote = canVote(_idPoll);\n', '        _description = p.description;\n', '        _numBallots = p.numBallots;\n', '        _author = p.author;\n', '        _finalized = (!p.canceled) && (block.number >= _endBlock);\n', '        _voters = p.voters;\n', '\n', '        for(uint8 i = 0; i < p.numBallots; i++){\n', '            _tokenTotal[i] = p.results[i];\n', '            _quadraticVotes[i] = p.qvResults[i];\n', '        }\n', '    }\n', '\n', '    /// @notice Decode poll title\n', '    /// @param _idPoll Poll\n', '    /// @return string with the poll title\n', '    function pollTitle(uint _idPoll) public view returns (string){\n', '        require(_idPoll < _polls.length, "Invalid _idPoll");\n', '        Poll memory p = _polls[_idPoll];\n', '\n', '        return rlpHelper.pollTitle(p.description);\n', '    }\n', '\n', '    /// @notice Decode poll ballot\n', '    /// @param _idPoll Poll\n', '    /// @param _ballot Index (0-based) of the ballot to decode\n', '    /// @return string with the ballot text\n', '    function pollBallot(uint _idPoll, uint _ballot) public view returns (string){\n', '        require(_idPoll < _polls.length, "Invalid _idPoll");\n', '        Poll memory p = _polls[_idPoll];\n', '\n', '        return rlpHelper.pollBallot(p.description, _ballot);\n', '    }\n', '\n', '    /// @notice Get votes for poll/ballot\n', '    /// @param _idPoll Poll\n', '    /// @param _voter Address of the voter\n', '    function getVote(uint _idPoll, address _voter) \n', '        public \n', '        view \n', '        returns (uint[15] votes){\n', '        require(_idPoll < _polls.length, "Invalid _idPoll");\n', '        Poll storage p = _polls[_idPoll];\n', '        for(uint8 i = 0; i < p.numBallots; i++){\n', '            votes[i] = p.ballots[i][_voter];\n', '        }\n', '        return votes;\n', '    }\n', '\n', '    event Vote(uint indexed idPoll, address indexed _voter, uint[] ballots);\n', '    event Unvote(uint indexed idPoll, address indexed _voter);\n', '    event PollCanceled(uint indexed idPoll);\n', '    event PollCreated(uint indexed idPoll);\n', '}']
['pragma solidity ^0.4.23;\n', '\n', 'interface ApproveAndCallFallBack {\n', '    function receiveApproval(\n', '        address from,\n', '        uint256 _amount,\n', '        address _token,\n', '        bytes _data\n', '    ) external;\n', '}\n', '\n', '\n', 'contract Controlled {\n', '    /// @notice The address of the controller is the only address that can call\n', '    ///  a function with this modifier\n', '    modifier onlyController { \n', '        require(msg.sender == controller); \n', '        _; \n', '    }\n', '\n', '    address public controller;\n', '\n', '    constructor() internal { \n', '        controller = msg.sender; \n', '    }\n', '\n', '    /// @notice Changes the controller of the contract\n', '    /// @param _newController The new controller of the contract\n', '    function changeController(address _newController) public onlyController {\n', '        controller = _newController;\n', '    }\n', '}\n', '\n', '\n', '/*\n', '* Used to proxy function calls to the RLPReader for testing\n', '*/\n', '/*\n', '* @author Hamdi Allam hamdi.allam97@gmail.com\n', '* Please reach our for any questions/concerns\n', '*/\n', '\n', '\n', 'library RLPReader {\n', '    uint8 constant STRING_SHORT_START = 0x80;\n', '    uint8 constant STRING_LONG_START  = 0xb8;\n', '    uint8 constant LIST_SHORT_START   = 0xc0;\n', '    uint8 constant LIST_LONG_START    = 0xf8;\n', '\n', '    uint8 constant WORD_SIZE = 32;\n', '\n', '    struct RLPItem {\n', '        uint len;\n', '        uint memPtr;\n', '    }\n', '\n', '    /*\n', '    * @param item RLP encoded bytes\n', '    */\n', '    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\n', '        if (item.length == 0) \n', '            return RLPItem(0, 0);\n', '\n', '        uint memPtr;\n', '        assembly {\n', '            memPtr := add(item, 0x20)\n', '        }\n', '\n', '        return RLPItem(item.length, memPtr);\n', '    }\n', '\n', '    /*\n', '    * @param item RLP encoded list in bytes\n', '    */\n', '    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory result) {\n', '        require(isList(item));\n', '\n', '        uint items = numItems(item);\n', '        result = new RLPItem[](items);\n', '\n', '        uint memPtr = item.memPtr + _payloadOffset(item.memPtr);\n', '        uint dataLen;\n', '        for (uint i = 0; i < items; i++) {\n', '            dataLen = _itemLength(memPtr);\n', '            result[i] = RLPItem(dataLen, memPtr); \n', '            memPtr = memPtr + dataLen;\n', '        }\n', '    }\n', '\n', '    /*\n', '    * Helpers\n', '    */\n', '\n', '    // @return indicator whether encoded payload is a list. negate this function call for isData.\n', '    function isList(RLPItem memory item) internal pure returns (bool) {\n', '        uint8 byte0;\n', '        uint memPtr = item.memPtr;\n', '        assembly {\n', '            byte0 := byte(0, mload(memPtr))\n', '        }\n', '\n', '        if (byte0 < LIST_SHORT_START)\n', '            return false;\n', '        return true;\n', '    }\n', '\n', '    // @return number of payload items inside an encoded list.\n', '    function numItems(RLPItem memory item) internal pure returns (uint) {\n', '        uint count = 0;\n', '        uint currPtr = item.memPtr + _payloadOffset(item.memPtr);\n', '        uint endPtr = item.memPtr + item.len;\n', '        while (currPtr < endPtr) {\n', '           currPtr = currPtr + _itemLength(currPtr); // skip over an item\n', '           count++;\n', '        }\n', '\n', '        return count;\n', '    }\n', '\n', '    // @return entire rlp item byte length\n', '    function _itemLength(uint memPtr) internal pure returns (uint len) {\n', '        uint byte0;\n', '        assembly {\n', '            byte0 := byte(0, mload(memPtr))\n', '        }\n', '\n', '        if (byte0 < STRING_SHORT_START)\n', '            return 1;\n', '        \n', '        else if (byte0 < STRING_LONG_START)\n', '            return byte0 - STRING_SHORT_START + 1;\n', '\n', '        else if (byte0 < LIST_SHORT_START) {\n', '            assembly {\n', '                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\n', '                memPtr := add(memPtr, 1) // skip over the first byte\n', '                \n', '                /* 32 byte word size */\n', '                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\n', '                len := add(dataLen, add(byteLen, 1))\n', '            }\n', '        }\n', '\n', '        else if (byte0 < LIST_LONG_START) {\n', '            return byte0 - LIST_SHORT_START + 1;\n', '        } \n', '\n', '        else {\n', '            assembly {\n', '                let byteLen := sub(byte0, 0xf7)\n', '                memPtr := add(memPtr, 1)\n', '\n', '                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\n', '                len := add(dataLen, add(byteLen, 1))\n', '            }\n', '        }\n', '    }\n', '\n', '    // @return number of bytes until the data\n', '    function _payloadOffset(uint memPtr) internal pure returns (uint) {\n', '        uint byte0;\n', '        assembly {\n', '            byte0 := byte(0, mload(memPtr))\n', '        }\n', '\n', '        if (byte0 < STRING_SHORT_START) \n', '            return 0;\n', '        else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START))\n', '            return 1;\n', '        else if (byte0 < LIST_SHORT_START)  // being explicit\n', '            return byte0 - (STRING_LONG_START - 1) + 1;\n', '        else\n', '            return byte0 - (LIST_LONG_START - 1) + 1;\n', '    }\n', '\n', '    /** RLPItem conversions into data types **/\n', '\n', '    function toBoolean(RLPItem memory item) internal pure returns (bool) {\n', '        require(item.len == 1, "Invalid RLPItem. Booleans are encoded in 1 byte");\n', '        uint result;\n', '        uint memPtr = item.memPtr;\n', '        assembly {\n', '            result := byte(0, mload(memPtr))\n', '        }\n', '\n', '        return result == 0 ? false : true;\n', '    }\n', '\n', '    function toAddress(RLPItem memory item) internal pure returns (address) {\n', '        // 1 byte for the length prefix according to RLP spec\n', '        require(item.len == 21, "Invalid RLPItem. Addresses are encoded in 20 bytes");\n', '        \n', '        uint memPtr = item.memPtr + 1; // skip the length prefix\n', '        uint addr;\n', '        assembly {\n', '            addr := div(mload(memPtr), exp(256, 12)) // right shift 12 bytes. we want the most significant 20 bytes\n', '        }\n', '        \n', '        return address(addr);\n', '    }\n', '\n', '    function toUint(RLPItem memory item) internal pure returns (uint) {\n', '        uint offset = _payloadOffset(item.memPtr);\n', '        uint len = item.len - offset;\n', '        uint memPtr = item.memPtr + offset;\n', '\n', '        uint result;\n', '        assembly {\n', '            result := div(mload(memPtr), exp(256, sub(32, len))) // shift to the correct location\n', '        }\n', '\n', '        return result;\n', '    }\n', '\n', '    function toBytes(RLPItem memory item) internal pure returns (bytes) {\n', '        uint offset = _payloadOffset(item.memPtr);\n', '        uint len = item.len - offset; // data length\n', '        bytes memory result = new bytes(len);\n', '\n', '        uint destPtr;\n', '        assembly {\n', '            destPtr := add(0x20, result)\n', '        }\n', '\n', '        copy(item.memPtr + offset, destPtr, len);\n', '        return result;\n', '    }\n', '\n', '\n', '    /*\n', '    * @param src Pointer to source\n', '    * @param dest Pointer to destination\n', '    * @param len Amount of memory to copy from the source\n', '    */\n', '    function copy(uint src, uint dest, uint len) internal pure {\n', '        // copy as many word sizes as possible\n', '        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\n', '            assembly {\n', '                mstore(dest, mload(src))\n', '            }\n', '\n', '            src += WORD_SIZE;\n', '            dest += WORD_SIZE;\n', '        }\n', '\n', '        // left over bytes\n', '        uint mask = 256 ** (WORD_SIZE - len) - 1;\n', '        assembly {\n', '            let srcpart := and(mload(src), not(mask)) // zero out src\n', '            let destpart := and(mload(dest), mask) // retrieve the bytes\n', '            mstore(dest, or(destpart, srcpart))\n', '        }\n', '    }\n', '}\n', '\n', 'contract RLPHelper {\n', '    using RLPReader for bytes;\n', '    using RLPReader for uint;\n', '    using RLPReader for RLPReader.RLPItem;\n', '\n', '    function isList(bytes memory item) public pure returns (bool) {\n', '        RLPReader.RLPItem memory rlpItem = item.toRlpItem();\n', '        return rlpItem.isList();\n', '    }\n', '\n', '    function itemLength(bytes memory item) public pure returns (uint) {\n', '        uint memPtr;\n', '        assembly {\n', '            memPtr := add(0x20, item)\n', '        }\n', '\n', '        return memPtr._itemLength();\n', '    }\n', '\n', '    function numItems(bytes memory item) public pure returns (uint) {\n', '        RLPReader.RLPItem memory rlpItem = item.toRlpItem();\n', '        return rlpItem.numItems();\n', '    }\n', '\n', '    function toBytes(bytes memory item) public pure returns (bytes) {\n', '        RLPReader.RLPItem memory rlpItem = item.toRlpItem();\n', '        return rlpItem.toBytes();\n', '    }\n', '\n', '    function toUint(bytes memory item) public pure returns (uint) {\n', '        RLPReader.RLPItem memory rlpItem = item.toRlpItem();\n', '        return rlpItem.toUint();\n', '    }\n', '\n', '    function toAddress(bytes memory item) public pure returns (address) {\n', '        RLPReader.RLPItem memory rlpItem = item.toRlpItem();\n', '        return rlpItem.toAddress();\n', '    }\n', '\n', '    function toBoolean(bytes memory item) public pure returns (bool) {\n', '        RLPReader.RLPItem memory rlpItem = item.toRlpItem();\n', '        return rlpItem.toBoolean();\n', '    }\n', '\n', '    function bytesToString(bytes memory item) public pure returns (string) {\n', '        RLPReader.RLPItem memory rlpItem = item.toRlpItem();\n', '        return string(rlpItem.toBytes());\n', '    }\n', '\n', '    /* custom destructuring */\n', '    /*function customDestructure(bytes memory item) public pure returns (address, bool, uint) {\n', '        // first three elements follow the return types in order. Ignore the rest\n', '        RLPReader.RLPItem[] memory items = item.toRlpItem().toList();\n', '        return (items[0].toAddress(), items[1].toBoolean(), items[2].toUint());\n', '    }\n', '\n', '    function customNestedDestructure(bytes memory item) public pure returns (address, uint) {\n', '        RLPReader.RLPItem[] memory items = item.toRlpItem().toList();\n', '        items = items[0].toList();\n', '        return (items[0].toAddress(), items[1].toUint());\n', '    }*/\n', '\n', '\n', '    //======================================\n', '\n', '    function pollTitle(bytes memory item) public pure returns (string) {\n', '        RLPReader.RLPItem[] memory items = item.toRlpItem().toList();\n', '        return string(items[0].toBytes());\n', '    }\n', '\n', '    function pollBallot(bytes memory item, uint ballotNum) public pure returns (string) {\n', '        RLPReader.RLPItem[] memory items = item.toRlpItem().toList();\n', '        items = items[1].toList();\n', '        return string(items[ballotNum].toBytes());\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '/*\n', '    Copyright 2016, Jordi Baylina\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', ' */\n', '/**\n', ' * @title MiniMeToken Contract\n', ' * @author Jordi Baylina\n', " * @dev This token contract's goal is to make it easy for anyone to clone this\n", " *  token using the token distribution at a given block, this will allow DAO's\n", ' *  and DApps to upgrade their features in a decentralized manner without\n', ' *  affecting the original token\n', ' * @dev It is ERC20 compliant, but still needs to under go further testing.\n', ' */\n', '\n', '\n', '\n', '/**\n', ' * @dev The token controller contract must implement these functions\n', ' */\n', 'interface TokenController {\n', '    /**\n', '     * @notice Called when `_owner` sends ether to the MiniMe Token contract\n', '     * @param _owner The address that sent the ether to create tokens\n', '     * @return True if the ether is accepted, false if it throws\n', '     */\n', '    function proxyPayment(address _owner) external payable returns(bool);\n', '\n', '    /**\n', '     * @notice Notifies the controller about a token transfer allowing the\n', '     *  controller to react if desired\n', '     * @param _from The origin of the transfer\n', '     * @param _to The destination of the transfer\n', '     * @param _amount The amount of the transfer\n', '     * @return False if the controller does not authorize the transfer\n', '     */\n', '    function onTransfer(address _from, address _to, uint _amount) external returns(bool);\n', '\n', '    /**\n', '     * @notice Notifies the controller about an approval allowing the\n', '     *  controller to react if desired\n', '     * @param _owner The address that calls `approve()`\n', '     * @param _spender The spender in the `approve()` call\n', '     * @param _amount The amount in the `approve()` call\n', '     * @return False if the controller does not authorize the approval\n', '     */\n', '    function onApprove(address _owner, address _spender, uint _amount) external\n', '        returns(bool);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '// Abstract contract for the full ERC 20 Token standard\n', '// https://github.com/ethereum/EIPs/issues/20\n', '\n', 'interface ERC20Token {\n', '\n', '    /**\n', '     * @notice send `_value` token to `_to` from `msg.sender`\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount of token to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     */\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '\n', '    /**\n', '     * @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @param _value The amount of tokens to be approved for transfer\n', '     * @return Whether the approval was successful or not\n', '     */\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '\n', '    /**\n', '     * @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount of token to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n', '\n', '    /**\n', '     * @param _owner The address from which the balance will be retrieved\n', '     * @return The balance\n', '     */\n', '    function balanceOf(address _owner) external view returns (uint256 balance);\n', '\n', '    /**\n', '     * @param _owner The address of the account owning tokens\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @return Amount of remaining tokens allowed to spent\n', '     */\n', '    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n', '\n', '    /**\n', '     * @notice return total supply of tokens\n', '     */\n', '    function totalSupply() external view returns (uint256 supply);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', 'contract MiniMeTokenInterface is ERC20Token {\n', '\n', '    /**\n', '     * @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n', '     *  its behalf, and then a function is triggered in the contract that is\n', '     *  being approved, `_spender`. This allows users to use their tokens to\n', '     *  interact with contracts in one function call instead of two\n', '     * @param _spender The address of the contract able to transfer the tokens\n', '     * @param _amount The amount of tokens to be approved for transfer\n', '     * @return True if the function call was successful\n', '     */\n', '    function approveAndCall(\n', '        address _spender,\n', '        uint256 _amount,\n', '        bytes _extraData\n', '    ) \n', '        external \n', '        returns (bool success);\n', '\n', '    /**    \n', '     * @notice Creates a new clone token with the initial distribution being\n', '     *  this token at `_snapshotBlock`\n', '     * @param _cloneTokenName Name of the clone token\n', '     * @param _cloneDecimalUnits Number of decimals of the smallest unit\n', '     * @param _cloneTokenSymbol Symbol of the clone token\n', '     * @param _snapshotBlock Block when the distribution of the parent token is\n', '     *  copied to set the initial distribution of the new clone token;\n', '     *  if the block is zero than the actual block, the current block is used\n', '     * @param _transfersEnabled True if transfers are allowed in the clone\n', '     * @return The address of the new MiniMeToken Contract\n', '     */\n', '    function createCloneToken(\n', '        string _cloneTokenName,\n', '        uint8 _cloneDecimalUnits,\n', '        string _cloneTokenSymbol,\n', '        uint _snapshotBlock,\n', '        bool _transfersEnabled\n', '    ) \n', '        public\n', '        returns(address);\n', '\n', '    /**    \n', '     * @notice Generates `_amount` tokens that are assigned to `_owner`\n', '     * @param _owner The address that will be assigned the new tokens\n', '     * @param _amount The quantity of tokens generated\n', '     * @return True if the tokens are generated correctly\n', '     */\n', '    function generateTokens(\n', '        address _owner,\n', '        uint _amount\n', '    )\n', '        public\n', '        returns (bool);\n', '\n', '    /**\n', '     * @notice Burns `_amount` tokens from `_owner`\n', '     * @param _owner The address that will lose the tokens\n', '     * @param _amount The quantity of tokens to burn\n', '     * @return True if the tokens are burned correctly\n', '     */\n', '    function destroyTokens(\n', '        address _owner,\n', '        uint _amount\n', '    ) \n', '        public\n', '        returns (bool);\n', '\n', '    /**        \n', '     * @notice Enables token holders to transfer their tokens freely if true\n', '     * @param _transfersEnabled True if transfers are allowed in the clone\n', '     */\n', '    function enableTransfers(bool _transfersEnabled) public;\n', '\n', '    /**    \n', '     * @notice This method can be used by the controller to extract mistakenly\n', '     *  sent tokens to this contract.\n', '     * @param _token The address of the token contract that you want to recover\n', '     *  set to 0 in case you want to extract ether.\n', '     */\n', '    function claimTokens(address _token) public;\n', '\n', '    /**\n', '     * @dev Queries the balance of `_owner` at a specific `_blockNumber`\n', '     * @param _owner The address from which the balance will be retrieved\n', '     * @param _blockNumber The block number when the balance is queried\n', '     * @return The balance at `_blockNumber`\n', '     */\n', '    function balanceOfAt(\n', '        address _owner,\n', '        uint _blockNumber\n', '    ) \n', '        public\n', '        constant\n', '        returns (uint);\n', '\n', '    /**\n', '     * @notice Total amount of tokens at a specific `_blockNumber`.\n', '     * @param _blockNumber The block number when the totalSupply is queried\n', '     * @return The total amount of tokens at `_blockNumber`\n', '     */\n', '    function totalSupplyAt(uint _blockNumber) public view returns(uint);\n', '\n', '}\n', '\n', '\n', '\n', '\n', '////////////////\n', '// MiniMeTokenFactory\n', '////////////////\n', '\n', '/**\n', ' * @dev This contract is used to generate clone contracts from a contract.\n', ' *  In solidity this is the way to create a contract from a contract of the\n', ' *  same class\n', ' */\n', 'contract MiniMeTokenFactory {\n', '\n', '    /**\n', '     * @notice Update the DApp by creating a new token with new functionalities\n', '     *  the msg.sender becomes the controller of this clone token\n', '     * @param _parentToken Address of the token being cloned\n', '     * @param _snapshotBlock Block of the parent token that will\n', '     *  determine the initial distribution of the clone token\n', '     * @param _tokenName Name of the new token\n', '     * @param _decimalUnits Number of decimals of the new token\n', '     * @param _tokenSymbol Token Symbol for the new token\n', '     * @param _transfersEnabled If true, tokens will be able to be transferred\n', '     * @return The address of the new token contract\n', '     */\n', '    function createCloneToken(\n', '        address _parentToken,\n', '        uint _snapshotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) public returns (MiniMeToken) {\n', '        MiniMeToken newToken = new MiniMeToken(\n', '            this,\n', '            _parentToken,\n', '            _snapshotBlock,\n', '            _tokenName,\n', '            _decimalUnits,\n', '            _tokenSymbol,\n', '            _transfersEnabled\n', '            );\n', '\n', '        newToken.changeController(msg.sender);\n', '        return newToken;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev The actual token contract, the default controller is the msg.sender\n', ' *  that deploys the contract, so usually this token will be deployed by a\n', ' *  token controller contract, which Giveth will call a "Campaign"\n', ' */\n', 'contract MiniMeToken is MiniMeTokenInterface, Controlled {\n', '\n', "    string public name;                //The Token's name: e.g. DigixDAO Tokens\n", '    uint8 public decimals;             //Number of decimals of the smallest unit\n', '    string public symbol;              //An identifier: e.g. REP\n', '    string public version = "MMT_0.1"; //An arbitrary versioning scheme\n', '\n', '    /**\n', '     * @dev `Checkpoint` is the structure that attaches a block number to a\n', '     *  given value, the block number attached is the one that last changed the\n', '     *  value\n', '     */\n', '    struct Checkpoint {\n', '\n', '        // `fromBlock` is the block number that the value was generated from\n', '        uint128 fromBlock;\n', '\n', '        // `value` is the amount of tokens at a specific block number\n', '        uint128 value;\n', '    }\n', '\n', '    // `parentToken` is the Token address that was cloned to produce this token;\n', '    //  it will be 0x0 for a token that was not cloned\n', '    MiniMeToken public parentToken;\n', '\n', '    // `parentSnapShotBlock` is the block number from the Parent Token that was\n', '    //  used to determine the initial distribution of the Clone Token\n', '    uint public parentSnapShotBlock;\n', '\n', '    // `creationBlock` is the block number that the Clone Token was created\n', '    uint public creationBlock;\n', '\n', '    // `balances` is the map that tracks the balance of each address, in this\n', '    //  contract when the balance changes the block number that the change\n', '    //  occurred is also included in the map \n', '    mapping (address => Checkpoint[]) balances;\n', '\n', '    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    // Tracks the history of the `totalSupply` of the token\n', '    Checkpoint[] totalSupplyHistory;\n', '\n', '    // Flag that determines if the token is transferable or not.\n', '    bool public transfersEnabled;\n', '\n', '    // The factory used to create new clone tokens\n', '    MiniMeTokenFactory public tokenFactory;\n', '\n', '////////////////\n', '// Constructor\n', '////////////////\n', '\n', '    /** \n', '     * @notice Constructor to create a MiniMeToken\n', '     * @param _tokenFactory The address of the MiniMeTokenFactory contract that\n', '     *  will create the Clone token contracts, the token factory needs to be\n', '     *  deployed first\n', '     * @param _parentToken Address of the parent token, set to 0x0 if it is a\n', '     *  new token\n', '     * @param _parentSnapShotBlock Block of the parent token that will\n', '     *  determine the initial distribution of the clone token, set to 0 if it\n', '     *  is a new token\n', '     * @param _tokenName Name of the new token\n', '     * @param _decimalUnits Number of decimals of the new token\n', '     * @param _tokenSymbol Token Symbol for the new token\n', '     * @param _transfersEnabled If true, tokens will be able to be transferred\n', '     */\n', '    constructor(\n', '        address _tokenFactory,\n', '        address _parentToken,\n', '        uint _parentSnapShotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) \n', '        public\n', '    {\n', '        require(_tokenFactory != address(0)); //if not set, clone feature will not work properly\n', '        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n', '        name = _tokenName;                                 // Set the name\n', '        decimals = _decimalUnits;                          // Set the decimals\n', '        symbol = _tokenSymbol;                             // Set the symbol\n', '        parentToken = MiniMeToken(_parentToken);\n', '        parentSnapShotBlock = _parentSnapShotBlock;\n', '        transfersEnabled = _transfersEnabled;\n', '        creationBlock = block.number;\n', '    }\n', '\n', '\n', '///////////////////\n', '// ERC20 Methods\n', '///////////////////\n', '\n', '    /**\n', '     * @notice Send `_amount` tokens to `_to` from `msg.sender`\n', '     * @param _to The address of the recipient\n', '     * @param _amount The amount of tokens to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     */\n', '    function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '        require(transfersEnabled);\n', '        return doTransfer(msg.sender, _to, _amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n', '     *  is approved by `_from`\n', '     * @param _from The address holding the tokens being transferred\n', '     * @param _to The address of the recipient\n', '     * @param _amount The amount of tokens to be transferred\n', '     * @return True if the transfer was successful\n', '     */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) \n', '        public \n', '        returns (bool success)\n', '    {\n', '\n', '        // The controller of this contract can move tokens around at will,\n', '        //  this is important to recognize! Confirm that you trust the\n', '        //  controller of this contract, which in most situations should be\n', '        //  another open source smart contract or 0x0\n', '        if (msg.sender != controller) {\n', '            require(transfersEnabled);\n', '\n', '            // The standard ERC 20 transferFrom functionality\n', '            if (allowed[_from][msg.sender] < _amount) { \n', '                return false;\n', '            }\n', '            allowed[_from][msg.sender] -= _amount;\n', '        }\n', '        return doTransfer(_from, _to, _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev This is the actual transfer function in the token contract, it can\n', '     *  only be called by other functions in this contract.\n', '     * @param _from The address holding the tokens being transferred\n', '     * @param _to The address of the recipient\n', '     * @param _amount The amount of tokens to be transferred\n', '     * @return True if the transfer was successful\n', '     */\n', '    function doTransfer(\n', '        address _from,\n', '        address _to,\n', '        uint _amount\n', '    ) \n', '        internal\n', '        returns(bool)\n', '    {\n', '\n', '        if (_amount == 0) {\n', '            return true;\n', '        }\n', '\n', '        require(parentSnapShotBlock < block.number);\n', '\n', '        // Do not allow transfer to 0x0 or the token contract itself\n', '        require((_to != 0) && (_to != address(this)));\n', '\n', '        // If the amount being transfered is more than the balance of the\n', '        //  account the transfer returns false\n', '        uint256 previousBalanceFrom = balanceOfAt(_from, block.number);\n', '        if (previousBalanceFrom < _amount) {\n', '            return false;\n', '        }\n', '\n', '        // Alerts the token controller of the transfer\n', '        if (isContract(controller)) {\n', '            require(TokenController(controller).onTransfer(_from, _to, _amount));\n', '        }\n', '\n', '        // First update the balance array with the new value for the address\n', '        //  sending the tokens\n', '        updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n', '\n', '        // Then update the balance array with the new value for the address\n', '        //  receiving the tokens\n', '        uint256 previousBalanceTo = balanceOfAt(_to, block.number);\n', '        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n', '        updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n', '\n', '        // An event to make the transfer easy to find on the blockchain\n', '        emit Transfer(_from, _to, _amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function doApprove(\n', '        address _from,\n', '        address _spender,\n', '        uint256 _amount\n', '    )\n', '        internal \n', '        returns (bool)\n', '    {\n', '        require(transfersEnabled);\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_amount == 0) || (allowed[_from][_spender] == 0));\n', '\n', '        // Alerts the token controller of the approve function call\n', '        if (isContract(controller)) {\n', '            require(TokenController(controller).onApprove(_from, _spender, _amount));\n', '        }\n', '\n', '        allowed[_from][_spender] = _amount;\n', '        emit Approval(_from, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', "     * @param _owner The address that's balance is being requested\n", '     * @return The balance of `_owner` at the current block\n', '     */\n', '    function balanceOf(address _owner) external view returns (uint256 balance) {\n', '        return balanceOfAt(_owner, block.number);\n', '    }\n', '\n', '    /**\n', '     * @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n', '     *  its behalf. This is a modified version of the ERC20 approve function\n', '     *  to be a little bit safer\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @param _amount The amount of tokens to be approved for transfer\n', '     * @return True if the approval was successful\n', '     */\n', '    function approve(address _spender, uint256 _amount) external returns (bool success) {\n', '        doApprove(msg.sender, _spender, _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev This function makes it easy to read the `allowed[]` map\n', '     * @param _owner The address of the account that owns the token\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @return Amount of remaining tokens of _owner that _spender is allowed\n', '     *  to spend\n', '     */\n', '    function allowance(\n', '        address _owner,\n', '        address _spender\n', '    ) \n', '        external\n', '        view\n', '        returns (uint256 remaining)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    /**\n', '     * @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n', '     *  its behalf, and then a function is triggered in the contract that is\n', '     *  being approved, `_spender`. This allows users to use their tokens to\n', '     *  interact with contracts in one function call instead of two\n', '     * @param _spender The address of the contract able to transfer the tokens\n', '     * @param _amount The amount of tokens to be approved for transfer\n', '     * @return True if the function call was successful\n', '     */\n', '    function approveAndCall(\n', '        address _spender,\n', '        uint256 _amount,\n', '        bytes _extraData\n', '    ) \n', '        external \n', '        returns (bool success)\n', '    {\n', '        require(doApprove(msg.sender, _spender, _amount));\n', '\n', '        ApproveAndCallFallBack(_spender).receiveApproval(\n', '            msg.sender,\n', '            _amount,\n', '            this,\n', '            _extraData\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev This function makes it easy to get the total number of tokens\n', '     * @return The total number of tokens\n', '     */\n', '    function totalSupply() external view returns (uint) {\n', '        return totalSupplyAt(block.number);\n', '    }\n', '\n', '\n', '////////////////\n', '// Query balance and totalSupply in History\n', '////////////////\n', '\n', '    /**\n', '     * @dev Queries the balance of `_owner` at a specific `_blockNumber`\n', '     * @param _owner The address from which the balance will be retrieved\n', '     * @param _blockNumber The block number when the balance is queried\n', '     * @return The balance at `_blockNumber`\n', '     */\n', '    function balanceOfAt(\n', '        address _owner,\n', '        uint _blockNumber\n', '    ) \n', '        public\n', '        view\n', '        returns (uint) \n', '    {\n', '\n', '        // These next few lines are used when the balance of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.balanceOfAt` be queried at the\n', '        //  genesis block for that token as this contains initial balance of\n', '        //  this token\n', '        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != 0) {\n', '                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                // Has no parent\n', '                return 0;\n', '            }\n', '\n', '        // This will return the expected balance during normal situations\n', '        } else {\n', '            return getValueAt(balances[_owner], _blockNumber);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Total amount of tokens at a specific `_blockNumber`.\n', '     * @param _blockNumber The block number when the totalSupply is queried\n', '     * @return The total amount of tokens at `_blockNumber`\n', '     */\n', '    function totalSupplyAt(uint _blockNumber) public view returns(uint) {\n', '\n', '        // These next few lines are used when the totalSupply of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.totalSupplyAt` be queried at the\n', '        //  genesis block for this token as that contains totalSupply of this\n', '        //  token at this block number.\n', '        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != 0) {\n', '                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                return 0;\n', '            }\n', '\n', '        // This will return the expected totalSupply during normal situations\n', '        } else {\n', '            return getValueAt(totalSupplyHistory, _blockNumber);\n', '        }\n', '    }\n', '\n', '////////////////\n', '// Clone Token Method\n', '////////////////\n', '\n', '    /**\n', '     * @notice Creates a new clone token with the initial distribution being\n', '     *  this token at `_snapshotBlock`\n', '     * @param _cloneTokenName Name of the clone token\n', '     * @param _cloneDecimalUnits Number of decimals of the smallest unit\n', '     * @param _cloneTokenSymbol Symbol of the clone token\n', '     * @param _snapshotBlock Block when the distribution of the parent token is\n', '     *  copied to set the initial distribution of the new clone token;\n', '     *  if the block is zero than the actual block, the current block is used\n', '     * @param _transfersEnabled True if transfers are allowed in the clone\n', '     * @return The address of the new MiniMeToken Contract\n', '     */\n', '    function createCloneToken(\n', '        string _cloneTokenName,\n', '        uint8 _cloneDecimalUnits,\n', '        string _cloneTokenSymbol,\n', '        uint _snapshotBlock,\n', '        bool _transfersEnabled\n', '        ) \n', '            public\n', '            returns(address)\n', '        {\n', '        uint snapshotBlock = _snapshotBlock;\n', '        if (snapshotBlock == 0) {\n', '            snapshotBlock = block.number;\n', '        }\n', '        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n', '            this,\n', '            snapshotBlock,\n', '            _cloneTokenName,\n', '            _cloneDecimalUnits,\n', '            _cloneTokenSymbol,\n', '            _transfersEnabled\n', '            );\n', '\n', '        cloneToken.changeController(msg.sender);\n', '\n', '        // An event to make the token easy to find on the blockchain\n', '        emit NewCloneToken(address(cloneToken), snapshotBlock);\n', '        return address(cloneToken);\n', '    }\n', '\n', '////////////////\n', '// Generate and destroy tokens\n', '////////////////\n', '    \n', '    /**\n', '     * @notice Generates `_amount` tokens that are assigned to `_owner`\n', '     * @param _owner The address that will be assigned the new tokens\n', '     * @param _amount The quantity of tokens generated\n', '     * @return True if the tokens are generated correctly\n', '     */\n', '    function generateTokens(\n', '        address _owner,\n', '        uint _amount\n', '    )\n', '        public\n', '        onlyController\n', '        returns (bool)\n', '    {\n', '        uint curTotalSupply = totalSupplyAt(block.number);\n', '        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n', '        uint previousBalanceTo = balanceOfAt(_owner, block.number);\n', '        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n', '        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n', '        emit Transfer(0, _owner, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Burns `_amount` tokens from `_owner`\n', '     * @param _owner The address that will lose the tokens\n', '     * @param _amount The quantity of tokens to burn\n', '     * @return True if the tokens are burned correctly\n', '     */\n', '    function destroyTokens(\n', '        address _owner,\n', '        uint _amount\n', '    ) \n', '        public\n', '        onlyController\n', '        returns (bool)\n', '    {\n', '        uint curTotalSupply = totalSupplyAt(block.number);\n', '        require(curTotalSupply >= _amount);\n', '        uint previousBalanceFrom = balanceOfAt(_owner, block.number);\n', '        require(previousBalanceFrom >= _amount);\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n', '        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n', '        emit Transfer(_owner, 0, _amount);\n', '        return true;\n', '    }\n', '\n', '////////////////\n', '// Enable tokens transfers\n', '////////////////\n', '\n', '    /**\n', '     * @notice Enables token holders to transfer their tokens freely if true\n', '     * @param _transfersEnabled True if transfers are allowed in the clone\n', '     */\n', '    function enableTransfers(bool _transfersEnabled) public onlyController {\n', '        transfersEnabled = _transfersEnabled;\n', '    }\n', '\n', '////////////////\n', '// Internal helper functions to query and set a value in a snapshot array\n', '////////////////\n', '\n', '    /**\n', '     * @dev `getValueAt` retrieves the number of tokens at a given block number\n', '     * @param checkpoints The history of values being queried\n', '     * @param _block The block number to retrieve the value at\n', '     * @return The number of tokens being queried\n', '     */\n', '    function getValueAt(\n', '        Checkpoint[] storage checkpoints,\n', '        uint _block\n', '    ) \n', '        view\n', '        internal\n', '        returns (uint)\n', '    {\n', '        if (checkpoints.length == 0) {\n', '            return 0;\n', '        }\n', '\n', '        // Shortcut for the actual value\n', '        if (_block >= checkpoints[checkpoints.length-1].fromBlock) {\n', '            return checkpoints[checkpoints.length-1].value;\n', '        }\n', '        if (_block < checkpoints[0].fromBlock) {\n', '            return 0;\n', '        }\n', '\n', '        // Binary search of the value in the array\n', '        uint min = 0;\n', '        uint max = checkpoints.length-1;\n', '        while (max > min) {\n', '            uint mid = (max + min + 1) / 2;\n', '            if (checkpoints[mid].fromBlock<=_block) {\n', '                min = mid;\n', '            } else {\n', '                max = mid-1;\n', '            }\n', '        }\n', '        return checkpoints[min].value;\n', '    }\n', '\n', '    /**\n', '     * @dev `updateValueAtNow` used to update the `balances` map and the\n', '     *  `totalSupplyHistory`\n', '     * @param checkpoints The history of data being updated\n', '     * @param _value The new number of tokens\n', '     */\n', '    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\n', '        if (\n', '            (checkpoints.length == 0) ||\n', '            (checkpoints[checkpoints.length - 1].fromBlock < block.number)) \n', '        {\n', '            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\n', '            newCheckPoint.fromBlock = uint128(block.number);\n', '            newCheckPoint.value = uint128(_value);\n', '        } else {\n', '            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\n', '            oldCheckPoint.value = uint128(_value);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to determine if an address is a contract\n', '     * @param _addr The address being queried\n', '     * @return True if `_addr` is a contract\n', '     */\n', '    function isContract(address _addr) internal view returns(bool) {\n', '        uint size;\n', '        if (_addr == 0) {\n', '            return false;\n', '        }    \n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Helper function to return a min betwen the two uints\n', '     */\n', '    function min(uint a, uint b) internal returns (uint) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', "     * @notice The fallback function: If the contract's controller has not been\n", '     *  set to 0, then the `proxyPayment` method is called which relays the\n', '     *  ether and creates tokens as described in the token controller contract\n', '     */\n', '    function () public payable {\n', '        require(isContract(controller));\n', '        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n', '    }\n', '\n', '//////////\n', '// Safety Methods\n', '//////////\n', '\n', '    /**\n', '     * @notice This method can be used by the controller to extract mistakenly\n', '     *  sent tokens to this contract.\n', '     * @param _token The address of the token contract that you want to recover\n', '     *  set to 0 in case you want to extract ether.\n', '     */\n', '    function claimTokens(address _token) public onlyController {\n', '        if (_token == 0x0) {\n', '            controller.transfer(address(this).balance);\n', '            return;\n', '        }\n', '\n', '        MiniMeToken token = MiniMeToken(_token);\n', '        uint balance = token.balanceOf(address(this));\n', '        token.transfer(controller, balance);\n', '        emit ClaimedTokens(_token, controller, balance);\n', '    }\n', '\n', '////////////////\n', '// Events\n', '////////////////\n', '    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n', '    event NewCloneToken(address indexed _cloneToken, uint snapshotBlock);\n', '    event Approval(\n', '        address indexed _owner,\n', '        address indexed _spender,\n', '        uint256 _amount\n', '    );\n', '\n', '}\n', '\n', '\n', '\n', 'contract PollManager is Controlled {\n', '\n', '    struct Poll {\n', '        uint startBlock;\n', '        uint endBlock;\n', '        bool canceled;\n', '        uint voters;\n', '        bytes description;\n', '        uint8 numBallots;\n', '        mapping(uint8 => mapping(address => uint)) ballots;\n', '        mapping(uint8 => uint) qvResults;\n', '        mapping(uint8 => uint) results;\n', '        address author;\n', '    }\n', '\n', '    Poll[] _polls;\n', '\n', '    MiniMeToken public token;\n', '\n', '    RLPHelper public rlpHelper;\n', '\n', '    /// @notice Contract constructor\n', '    /// @param _token Address of the token used for governance\n', '    constructor(address _token) \n', '        public {\n', '        token = MiniMeToken(_token);\n', '        rlpHelper = new RLPHelper();\n', '    }\n', '\n', '    /// @notice Only allow addresses that have > 0 SNT to perform an operation\n', '    modifier onlySNTHolder {\n', '        require(token.balanceOf(msg.sender) > 0, "SNT Balance is required to perform this operation"); \n', '        _; \n', '    }\n', '\n', '    /// @notice Create a Poll and enable it immediatly\n', '    /// @param _endBlock Block where the poll ends\n', '    /// @param _description RLP encoded: [poll_title, [poll_ballots]]\n', '    /// @param _numBallots Number of ballots\n', '    function addPoll(\n', '        uint _endBlock,\n', '        bytes _description,\n', '        uint8 _numBallots)\n', '        public\n', '        onlySNTHolder\n', '        returns (uint _idPoll)\n', '    {\n', '        _idPoll = addPoll(block.number, _endBlock, _description, _numBallots);\n', '    }\n', '\n', '    /// @notice Create a Poll\n', '    /// @param _startBlock Block where the poll starts\n', '    /// @param _endBlock Block where the poll ends\n', '    /// @param _description RLP encoded: [poll_title, [poll_ballots]]\n', '    /// @param _numBallots Number of ballots\n', '    function addPoll(\n', '        uint _startBlock,\n', '        uint _endBlock,\n', '        bytes _description,\n', '        uint8 _numBallots)\n', '        public\n', '        onlySNTHolder\n', '        returns (uint _idPoll)\n', '    {\n', '        require(_endBlock > block.number, "End block must be greater than current block");\n', '        require(_startBlock >= block.number && _startBlock < _endBlock, "Start block must not be in the past, and should be less than the end block" );\n', '        require(_numBallots <= 15, "Only a max of 15 ballots are allowed");\n', '\n', '        _idPoll = _polls.length;\n', '        _polls.length ++;\n', '\n', '        Poll storage p = _polls[_idPoll];\n', '        p.startBlock = _startBlock;\n', '        p.endBlock = _endBlock;\n', '        p.voters = 0;\n', '        p.numBallots = _numBallots;\n', '        p.description = _description;\n', '        p.author = msg.sender;\n', '\n', '        emit PollCreated(_idPoll); \n', '    }\n', '\n', "    /// @notice Update poll description (title or ballots) as long as it hasn't started\n", '    /// @param _idPoll Poll to update\n', '    /// @param _description RLP encoded: [poll_title, [poll_ballots]]\n', '    /// @param _numBallots Number of ballots\n', '    function updatePollDescription(\n', '        uint _idPoll, \n', '        bytes _description,\n', '        uint8 _numBallots)\n', '        public\n', '    {\n', '        require(_idPoll < _polls.length, "Invalid _idPoll");\n', '        require(_numBallots <= 15, "Only a max of 15 ballots are allowed");\n', '\n', '        Poll storage p = _polls[_idPoll];\n', '        require(p.startBlock > block.number, "You cannot modify an active poll");\n', '        require(p.author == msg.sender || msg.sender == controller, "Only the owner/controller can modify the poll");\n', '\n', '        p.numBallots = _numBallots;\n', '        p.description = _description;\n', '        p.author = msg.sender;\n', '    }\n', '\n', '    /// @notice Cancel an existing poll\n', "    /// @dev Can only be done by the controller (which should be a Multisig/DAO) at any time, or by the owner if the poll hasn't started\n", '    /// @param _idPoll Poll to cancel\n', '    function cancelPoll(uint _idPoll) \n', '        public {\n', '        require(_idPoll < _polls.length, "Invalid _idPoll");\n', '\n', '        Poll storage p = _polls[_idPoll];\n', '        \n', '        require(!p.canceled, "Poll has been canceled already");\n', '        require(p.endBlock > block.number, "Only active polls can be canceled");\n', '\n', '        if(p.startBlock < block.number){\n', '            require(msg.sender == controller, "Only the controller can cancel the poll");\n', '        } else {\n', '            require(p.author == msg.sender, "Only the owner can cancel the poll");\n', '        }\n', '\n', '        p.canceled = true;\n', '\n', '        emit PollCanceled(_idPoll);\n', '    }\n', '\n', '    /// @notice Determine if user can bote for a poll\n', '    /// @param _idPoll Id of the poll\n', '    /// @return bool Can vote or not\n', '    function canVote(uint _idPoll) \n', '        public \n', '        view \n', '        returns(bool)\n', '    {\n', '        if(_idPoll >= _polls.length) return false;\n', '\n', '        Poll storage p = _polls[_idPoll];\n', '        uint balance = token.balanceOfAt(msg.sender, p.startBlock);\n', '        return block.number >= p.startBlock && block.number < p.endBlock && !p.canceled && balance != 0;\n', '    }\n', '    \n', '    /// @notice Calculate square root of a uint (It has some precision loss)\n', '    /// @param x Number to calculate the square root\n', '    /// @return Square root of x\n', '    function sqrt(uint256 x) public pure returns (uint256 y) {\n', '        uint256 z = (x + 1) / 2;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '\n', '    /// @notice Vote for a poll\n', '    /// @param _idPoll Poll to vote\n', '    /// @param _ballots array of (number of ballots the poll has) elements, and their sum must be less or equal to the balance at the block start\n', '    function vote(uint _idPoll, uint[] _ballots) public {\n', '        require(_idPoll < _polls.length, "Invalid _idPoll");\n', '\n', '        Poll storage p = _polls[_idPoll];\n', '\n', '        require(block.number >= p.startBlock && block.number < p.endBlock && !p.canceled, "Poll is inactive");\n', '        require(_ballots.length == p.numBallots, "Number of ballots is incorrect");\n', '\n', '        unvote(_idPoll);\n', '\n', '        uint amount = token.balanceOfAt(msg.sender, p.startBlock);\n', '        require(amount != 0, "No SNT balance available at start block of poll");\n', '\n', '        p.voters++;\n', '\n', '        uint totalBallots = 0;\n', '        for(uint8 i = 0; i < _ballots.length; i++){\n', '            totalBallots += _ballots[i];\n', '\n', '            p.ballots[i][msg.sender] = _ballots[i];\n', '\n', '            if(_ballots[i] != 0){\n', '                p.qvResults[i] += sqrt(_ballots[i] / 1 ether);\n', '                p.results[i] += _ballots[i];\n', '            }\n', '        }\n', '\n', '        require(totalBallots <= amount, "Total ballots must be less than the SNT balance at poll start block");\n', '\n', '        emit Vote(_idPoll, msg.sender, _ballots);\n', '    }\n', '\n', '    /// @notice Cancel or reset a vote\n', '    /// @param _idPoll Poll \n', '    function unvote(uint _idPoll) public {\n', '        require(_idPoll < _polls.length, "Invalid _idPoll");\n', '\n', '        Poll storage p = _polls[_idPoll];\n', '        \n', '        require(block.number >= p.startBlock && block.number < p.endBlock && !p.canceled, "Poll is inactive");\n', '\n', '        if(p.voters == 0) return;\n', '\n', '        p.voters--;\n', '\n', '        for(uint8 i = 0; i < p.numBallots; i++){\n', '            uint ballotAmount = p.ballots[i][msg.sender];\n', '\n', '            p.ballots[i][msg.sender] = 0;\n', '\n', '            if(ballotAmount != 0){\n', '                p.qvResults[i] -= sqrt(ballotAmount / 1 ether);\n', '                p.results[i] -= ballotAmount;\n', '            }\n', '        }\n', '\n', '        emit Unvote(_idPoll, msg.sender);\n', '    }\n', '\n', '    // Constant Helper Function\n', '\n', '    /// @notice Get number of polls\n', '    /// @return Num of polls\n', '    function nPolls()\n', '        public\n', '        view \n', '        returns(uint)\n', '    {\n', '        return _polls.length;\n', '    }\n', '\n', '    /// @notice Get Poll info\n', '    /// @param _idPoll Poll \n', '    function poll(uint _idPoll)\n', '        public \n', '        view \n', '        returns(\n', '        uint _startBlock,\n', '        uint _endBlock,\n', '        bool _canVote,\n', '        bool _canceled,\n', '        bytes _description,\n', '        uint8 _numBallots,\n', '        bool _finalized,\n', '        uint _voters,\n', '        address _author,\n', '        uint[15] _tokenTotal,\n', '        uint[15] _quadraticVotes\n', '    )\n', '    {\n', '        require(_idPoll < _polls.length, "Invalid _idPoll");\n', '\n', '        Poll storage p = _polls[_idPoll];\n', '\n', '        _startBlock = p.startBlock;\n', '        _endBlock = p.endBlock;\n', '        _canceled = p.canceled;\n', '        _canVote = canVote(_idPoll);\n', '        _description = p.description;\n', '        _numBallots = p.numBallots;\n', '        _author = p.author;\n', '        _finalized = (!p.canceled) && (block.number >= _endBlock);\n', '        _voters = p.voters;\n', '\n', '        for(uint8 i = 0; i < p.numBallots; i++){\n', '            _tokenTotal[i] = p.results[i];\n', '            _quadraticVotes[i] = p.qvResults[i];\n', '        }\n', '    }\n', '\n', '    /// @notice Decode poll title\n', '    /// @param _idPoll Poll\n', '    /// @return string with the poll title\n', '    function pollTitle(uint _idPoll) public view returns (string){\n', '        require(_idPoll < _polls.length, "Invalid _idPoll");\n', '        Poll memory p = _polls[_idPoll];\n', '\n', '        return rlpHelper.pollTitle(p.description);\n', '    }\n', '\n', '    /// @notice Decode poll ballot\n', '    /// @param _idPoll Poll\n', '    /// @param _ballot Index (0-based) of the ballot to decode\n', '    /// @return string with the ballot text\n', '    function pollBallot(uint _idPoll, uint _ballot) public view returns (string){\n', '        require(_idPoll < _polls.length, "Invalid _idPoll");\n', '        Poll memory p = _polls[_idPoll];\n', '\n', '        return rlpHelper.pollBallot(p.description, _ballot);\n', '    }\n', '\n', '    /// @notice Get votes for poll/ballot\n', '    /// @param _idPoll Poll\n', '    /// @param _voter Address of the voter\n', '    function getVote(uint _idPoll, address _voter) \n', '        public \n', '        view \n', '        returns (uint[15] votes){\n', '        require(_idPoll < _polls.length, "Invalid _idPoll");\n', '        Poll storage p = _polls[_idPoll];\n', '        for(uint8 i = 0; i < p.numBallots; i++){\n', '            votes[i] = p.ballots[i][_voter];\n', '        }\n', '        return votes;\n', '    }\n', '\n', '    event Vote(uint indexed idPoll, address indexed _voter, uint[] ballots);\n', '    event Unvote(uint indexed idPoll, address indexed _voter);\n', '    event PollCanceled(uint indexed idPoll);\n', '    event PollCreated(uint indexed idPoll);\n', '}']
