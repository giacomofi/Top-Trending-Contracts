['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', ' //We have to specify what version of the compiler this code will use\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract QIUToken is StandardToken,Ownable {\n', '    string public name = &#39;QIUToken&#39;;\n', '    string public symbol = &#39;QIU&#39;;\n', '    uint8 public decimals = 0;\n', '    uint public INITIAL_SUPPLY = 5000000000;\n', '    uint public eth2qiuRate = 10000;\n', '\n', '    function() public payable { } // make this contract to receive ethers\n', '\n', '    function QIUToken() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[owner] = INITIAL_SUPPLY / 10;\n', '        balances[this] = INITIAL_SUPPLY - balances[owner];\n', '    }\n', '\n', '    function getOwner() public view returns (address) {\n', '        return owner;\n', '    }  \n', '    \n', '    /**\n', '    * @dev Transfer tokens from one address to another, only owner can do this super-user operate\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function ownerTransferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(tx.origin == owner); // only the owner can call the method.\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '      /**\n', '    * @dev transfer token for a specified address,but different from transfer is replace msg.sender with tx.origin\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function originTransfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[tx.origin]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[tx.origin] = balances[tx.origin].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(tx.origin, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    event ExchangeForETH(address fromAddr,address to,uint qiuAmount,uint ethAmount);\n', '    function exchangeForETH(uint qiuAmount) public returns (bool){\n', '        uint ethAmount = qiuAmount * 1000000000000000000 / eth2qiuRate; // only accept multiple of 100\n', '        require(this.balance >= ethAmount);\n', '        balances[this] = balances[this].add(qiuAmount);\n', '        balances[msg.sender] = balances[msg.sender].sub(qiuAmount);\n', '        msg.sender.transfer(ethAmount);\n', '        ExchangeForETH(this,msg.sender,qiuAmount,ethAmount);\n', '        return true;\n', '    }\n', '\n', '    event ExchangeForQIU(address fromAddr,address to,uint qiuAmount,uint ethAmount);\n', '    function exchangeForQIU() payable public returns (bool){\n', '        uint qiuAmount = msg.value * eth2qiuRate / 1000000000000000000;\n', '        require(qiuAmount <= balances[this]);\n', '        balances[this] = balances[this].sub(qiuAmount);\n', '        balances[msg.sender] = balances[msg.sender].add(qiuAmount);\n', '        ExchangeForQIU(this,msg.sender,qiuAmount,msg.value);\n', '        return true;\n', '    }\n', '\n', '    /*\n', '    // transfer out method\n', '    function ownerETHCashout(address account) public onlyOwner {\n', '        account.transfer(this.balance);\n', '    }*/\n', '    function getETHBalance() public view returns (uint) {\n', '        return this.balance; // balance is "inherited" from the address type\n', '    }\n', '}\n', '\n', 'contract SoccerGamblingV_QIU is Ownable {\n', '\n', '    using SafeMath for uint;\n', '\n', '    struct BettingInfo {\n', '        uint id;\n', '        address bettingOwner;\n', '        bool buyHome;\n', '        bool buyAway;\n', '        bool buyDraw;\n', '        uint bettingAmount;\n', '    }\n', '    \n', '    struct GamblingPartyInfo {\n', '        uint id;\n', '        address dealerAddress; // The address of the inital founder\n', '        uint homePayRate;\n', '        uint awayPayRate;\n', '        uint drawPayRate;\n', '        uint payRateScale;\n', '        uint bonusPool; // count by wei\n', '        uint baseBonusPool;\n', '        int finalScoreHome;\n', '        int finalScoreAway;\n', '        bool isEnded;\n', '        bool isLockedForBet;\n', '        BettingInfo[] bettingsInfo;\n', '    }\n', '\n', '    mapping (uint => GamblingPartyInfo) public gamblingPartiesInfo;\n', '    mapping (uint => uint[]) public matchId2PartyId;\n', '    uint private _nextGamblingPartyId;\n', '    uint private _nextBettingInfoId;\n', '    QIUToken public _internalToken;\n', '\n', '    uint private _commissionNumber;\n', '    uint private _commissionScale;\n', '    \n', '\n', '    function SoccerGamblingV_QIU(QIUToken _tokenAddress) public {\n', '        _nextGamblingPartyId = 0;\n', '        _nextBettingInfoId = 0;\n', '        _internalToken = _tokenAddress;\n', '        _commissionNumber = 2;\n', '        _commissionScale = 100;\n', '    }\n', '\n', '    function modifyCommission(uint number,uint scale) public onlyOwner returns(bool){\n', '        _commissionNumber = number;\n', '        _commissionScale = scale;\n', '        return true;\n', '    }\n', '\n', '    function _availableBetting(uint gamblingPartyId,uint8 buySide,uint bettingAmount) private view returns(bool) {\n', '        GamblingPartyInfo storage gpInfo = gamblingPartiesInfo[gamblingPartyId];\n', '        uint losePay = 0;\n', '        if (buySide==0)\n', '            losePay = losePay.add((gpInfo.homePayRate.mul(bettingAmount)).div(gpInfo.payRateScale));\n', '        else if (buySide==1)\n', '            losePay = losePay.add((gpInfo.awayPayRate.mul(bettingAmount)).div(gpInfo.payRateScale));\n', '        else if (buySide==2)\n', '            losePay = losePay.add((gpInfo.drawPayRate.mul(bettingAmount)).div(gpInfo.payRateScale));\n', '        uint mostPay = 0;\n', '        for (uint idx = 0; idx<gpInfo.bettingsInfo.length; idx++) {\n', '            BettingInfo storage bInfo = gpInfo.bettingsInfo[idx];\n', '            if (bInfo.buyHome && (buySide==0))\n', '                mostPay = mostPay.add((gpInfo.homePayRate.mul(bInfo.bettingAmount)).div(gpInfo.payRateScale));\n', '            else if (bInfo.buyAway && (buySide==1))\n', '                mostPay = mostPay.add((gpInfo.awayPayRate.mul(bInfo.bettingAmount)).div(gpInfo.payRateScale));\n', '            else if (bInfo.buyDraw && (buySide==2))\n', '                mostPay = mostPay.add((gpInfo.drawPayRate.mul(bInfo.bettingAmount)).div(gpInfo.payRateScale));\n', '        }\n', '        if (mostPay + losePay > gpInfo.bonusPool)\n', '            return false;\n', '        else \n', '            return true;\n', '    }\n', '\n', '    event NewBettingSucceed(address fromAddr,uint newBettingInfoId);\n', '    function betting(uint gamblingPartyId,uint8 buySide,uint bettingAmount) public {\n', '        require(bettingAmount > 0);\n', '        require(_internalToken.balanceOf(msg.sender) >= bettingAmount);\n', '        GamblingPartyInfo storage gpInfo = gamblingPartiesInfo[gamblingPartyId];\n', '        require(gpInfo.isEnded == false);\n', '        require(gpInfo.isLockedForBet == false);\n', '        require(_availableBetting(gamblingPartyId, buySide, bettingAmount));\n', '        BettingInfo memory bInfo;\n', '        bInfo.id = _nextBettingInfoId;\n', '        bInfo.bettingOwner = msg.sender;\n', '        bInfo.buyHome = false;\n', '        bInfo.buyAway = false;\n', '        bInfo.buyDraw = false;\n', '        bInfo.bettingAmount = bettingAmount;\n', '        if (buySide == 0)\n', '            bInfo.buyHome = true;\n', '        if (buySide == 1)\n', '            bInfo.buyAway = true;\n', '        if (buySide == 2)\n', '            bInfo.buyDraw = true;\n', '        _internalToken.originTransfer(this,bettingAmount);\n', '        gpInfo.bettingsInfo.push(bInfo);\n', '        _nextBettingInfoId++;\n', '        gpInfo.bonusPool = gpInfo.bonusPool.add(bettingAmount);\n', '        NewBettingSucceed(msg.sender,bInfo.id);\n', '    }\n', '\n', '    function remainingBettingFor(uint gamblingPartyId) public view returns\n', '        (uint remainingAmountHome,\n', '         uint remainingAmountAway,\n', '         uint remainingAmountDraw\n', '        ) {\n', '        for (uint8 buySide = 0;buySide<3;buySide++){\n', '            GamblingPartyInfo storage gpInfo = gamblingPartiesInfo[gamblingPartyId];\n', '            uint bonusPool = gpInfo.bonusPool;\n', '            for (uint idx = 0; idx<gpInfo.bettingsInfo.length; idx++) {\n', '                BettingInfo storage bInfo = gpInfo.bettingsInfo[idx];\n', '                if (bInfo.buyHome && (buySide==0))\n', '                    bonusPool = bonusPool.sub((gpInfo.homePayRate.mul(bInfo.bettingAmount)).div(gpInfo.payRateScale));\n', '                else if (bInfo.buyAway && (buySide==1))\n', '                    bonusPool = bonusPool.sub((gpInfo.awayPayRate.mul(bInfo.bettingAmount)).div(gpInfo.payRateScale));\n', '                else if (bInfo.buyDraw && (buySide==2))\n', '                    bonusPool = bonusPool.sub((gpInfo.drawPayRate.mul(bInfo.bettingAmount)).div(gpInfo.payRateScale));\n', '            }\n', '            if (buySide == 0)\n', '                remainingAmountHome = (bonusPool.mul(gpInfo.payRateScale)).div(gpInfo.homePayRate);\n', '            else if (buySide == 1)\n', '                remainingAmountAway = (bonusPool.mul(gpInfo.payRateScale)).div(gpInfo.awayPayRate);\n', '            else if (buySide == 2)\n', '                remainingAmountDraw = (bonusPool.mul(gpInfo.payRateScale)).div(gpInfo.drawPayRate);\n', '        }\n', '    }\n', '\n', '    event MatchAllGPsLock(address fromAddr,uint matchId,bool isLocked);\n', '    function lockUnlockMatchGPForBetting(uint matchId,bool lock) public {\n', '        uint[] storage gamblingPartyIds = matchId2PartyId[matchId];\n', '        for (uint idx = 0;idx < gamblingPartyIds.length;idx++) {\n', '            lockUnlockGamblingPartyForBetting(gamblingPartyIds[idx],lock);\n', '        }\n', '        MatchAllGPsLock(msg.sender,matchId,lock);        \n', '    }\n', '\n', '    function lockUnlockGamblingPartyForBetting(uint gamblingPartyId,bool lock) public onlyOwner {\n', '        GamblingPartyInfo storage gpInfo = gamblingPartiesInfo[gamblingPartyId];\n', '        gpInfo.isLockedForBet = lock;\n', '    }\n', '\n', '    function getGamblingPartyInfo(uint gamblingPartyId) public view returns (uint gpId,\n', '                                                                            address dealerAddress,\n', '                                                                            uint homePayRate,\n', '                                                                            uint awayPayRate,\n', '                                                                            uint drawPayRate,\n', '                                                                            uint payRateScale,\n', '                                                                            uint bonusPool,\n', '                                                                            int finalScoreHome,\n', '                                                                            int finalScoreAway,\n', '                                                                            bool isEnded) \n', '    {\n', '\n', '        GamblingPartyInfo storage gpInfo = gamblingPartiesInfo[gamblingPartyId];\n', '        gpId = gpInfo.id;\n', '        dealerAddress = gpInfo.dealerAddress; // The address of the inital founder\n', '        homePayRate = gpInfo.homePayRate;\n', '        awayPayRate = gpInfo.awayPayRate;\n', '        drawPayRate = gpInfo.drawPayRate;\n', '        payRateScale = gpInfo.payRateScale;\n', '        bonusPool = gpInfo.bonusPool; // count by wei\n', '        finalScoreHome = gpInfo.finalScoreHome;\n', '        finalScoreAway = gpInfo.finalScoreAway;\n', '        isEnded = gpInfo.isEnded;\n', '    }\n', '\n', '    //in this function, I removed the extra return value to fix the compiler exception caused by solidity limitation \n', '    //exception is: CompilerError: Stack too deep, try removing local variables.\n', '    //to get the extra value for the gambingParty , need to invoke the method getGamblingPartyInfo\n', '    function getGamblingPartySummarizeInfo(uint gamblingPartyId) public view returns(\n', '        uint gpId,\n', '        //uint salesAmount,\n', '        uint homeSalesAmount,\n', '        int  homeSalesEarnings,\n', '        uint awaySalesAmount,\n', '        int  awaySalesEarnings,\n', '        uint drawSalesAmount,\n', '        int  drawSalesEarnings,\n', '        int  dealerEarnings,\n', '        uint baseBonusPool\n', '    ){\n', '        GamblingPartyInfo storage gpInfo = gamblingPartiesInfo[gamblingPartyId];\n', '        gpId = gpInfo.id;\n', '        baseBonusPool = gpInfo.baseBonusPool;\n', '        for (uint idx = 0; idx < gpInfo.bettingsInfo.length; idx++) {\n', '            BettingInfo storage bInfo = gpInfo.bettingsInfo[idx];\n', '            if (bInfo.buyHome){\n', '                homeSalesAmount += bInfo.bettingAmount;\n', '                if (gpInfo.isEnded && (gpInfo.finalScoreHome > gpInfo.finalScoreAway)){\n', '                    homeSalesEarnings = homeSalesEarnings - int(bInfo.bettingAmount*gpInfo.homePayRate/gpInfo.payRateScale);\n', '                }else\n', '                    homeSalesEarnings += int(bInfo.bettingAmount);\n', '            } else if (bInfo.buyAway){\n', '                awaySalesAmount += bInfo.bettingAmount;\n', '                if (gpInfo.isEnded && (gpInfo.finalScoreHome < gpInfo.finalScoreAway)){\n', '                    awaySalesEarnings = awaySalesEarnings - int(bInfo.bettingAmount*gpInfo.awayPayRate/gpInfo.payRateScale);\n', '                }else\n', '                    awaySalesEarnings += int(bInfo.bettingAmount);\n', '            } else if (bInfo.buyDraw){\n', '                drawSalesAmount += bInfo.bettingAmount;\n', '                if (gpInfo.isEnded && (gpInfo.finalScoreHome == gpInfo.finalScoreAway)){\n', '                    drawSalesEarnings = drawSalesEarnings - int(bInfo.bettingAmount*gpInfo.drawPayRate/gpInfo.payRateScale);\n', '                }else\n', '                    drawSalesEarnings += int(bInfo.bettingAmount);\n', '            }\n', '        }\n', '        int commission;    \n', '        if(gpInfo.isEnded){\n', '            dealerEarnings = int(gpInfo.bonusPool);\n', '        }else{\n', '            dealerEarnings = int(gpInfo.bonusPool);\n', '            return;\n', '        }\n', '        if (homeSalesEarnings > 0){\n', '            commission = homeSalesEarnings * int(_commissionNumber) / int(_commissionScale);\n', '            homeSalesEarnings -= commission;\n', '        }\n', '        if (awaySalesEarnings > 0){\n', '            commission = awaySalesEarnings * int(_commissionNumber) / int(_commissionScale);\n', '            awaySalesEarnings -= commission;\n', '        }\n', '        if (drawSalesEarnings > 0){\n', '            commission = drawSalesEarnings * int(_commissionNumber) / int(_commissionScale);\n', '            drawSalesEarnings -= commission;\n', '        }\n', '        if (homeSalesEarnings < 0)\n', '            dealerEarnings = int(gpInfo.bonusPool) + homeSalesEarnings;\n', '        if (awaySalesEarnings < 0)\n', '            dealerEarnings = int(gpInfo.bonusPool) + awaySalesEarnings;\n', '        if (drawSalesEarnings < 0)\n', '            dealerEarnings = int(gpInfo.bonusPool) + drawSalesEarnings;\n', '        commission = dealerEarnings * int(_commissionNumber) / int(_commissionScale);\n', '        dealerEarnings -= commission;\n', '    }\n', '\n', '    function getMatchSummarizeInfo(uint matchId) public view returns (\n', '                                                            uint mSalesAmount,\n', '                                                            uint mHomeSalesAmount,\n', '                                                            uint mAwaySalesAmount,\n', '                                                            uint mDrawSalesAmount,\n', '                                                            int mDealerEarnings,\n', '                                                            uint mBaseBonusPool\n', '                                                        )\n', '    {\n', '        for (uint idx = 0; idx<matchId2PartyId[matchId].length; idx++) {\n', '            uint gamblingPartyId = matchId2PartyId[matchId][idx];\n', '            var (,homeSalesAmount,,awaySalesAmount,,drawSalesAmount,,dealerEarnings,baseBonusPool) = getGamblingPartySummarizeInfo(gamblingPartyId);\n', '            mHomeSalesAmount += homeSalesAmount;\n', '            mAwaySalesAmount += awaySalesAmount;\n', '            mDrawSalesAmount += drawSalesAmount;\n', '            mSalesAmount += homeSalesAmount + awaySalesAmount + drawSalesAmount;\n', '            mDealerEarnings += dealerEarnings;\n', '            mBaseBonusPool = baseBonusPool;\n', '        }\n', '    }\n', '\n', '    function getSumOfGamblingPartiesBonusPool(uint matchId) public view returns (uint) {\n', '        uint sum = 0;\n', '        for (uint idx = 0; idx<matchId2PartyId[matchId].length; idx++) {\n', '            uint gamblingPartyId = matchId2PartyId[matchId][idx];\n', '            GamblingPartyInfo storage gpInfo = gamblingPartiesInfo[gamblingPartyId];\n', '            sum += gpInfo.bonusPool;\n', '        }\n', '        return sum;\n', '    }\n', '\n', '    function getWinLoseAmountByBettingOwnerInGamblingParty(uint gamblingPartyId,address bettingOwner) public view returns (int) {\n', '        int winLose = 0;\n', '        GamblingPartyInfo storage gpInfo = gamblingPartiesInfo[gamblingPartyId];\n', '        require(gpInfo.isEnded);\n', '        for (uint idx = 0; idx < gpInfo.bettingsInfo.length; idx++) {\n', '            BettingInfo storage bInfo = gpInfo.bettingsInfo[idx];\n', '            if (bInfo.bettingOwner == bettingOwner) {\n', '                if ((gpInfo.finalScoreHome > gpInfo.finalScoreAway) && (bInfo.buyHome)) {\n', '                    winLose += int(gpInfo.homePayRate * bInfo.bettingAmount / gpInfo.payRateScale);\n', '                } else if ((gpInfo.finalScoreHome < gpInfo.finalScoreAway) && (bInfo.buyAway)) {\n', '                    winLose += int(gpInfo.awayPayRate * bInfo.bettingAmount / gpInfo.payRateScale);\n', '                } else if ((gpInfo.finalScoreHome == gpInfo.finalScoreAway) && (bInfo.buyDraw)) {\n', '                    winLose += int(gpInfo.drawPayRate * bInfo.bettingAmount / gpInfo.payRateScale);\n', '                } else {\n', '                    winLose -= int(bInfo.bettingAmount);\n', '                }\n', '            }\n', '        }   \n', '        if (winLose > 0){\n', '            int commission = winLose * int(_commissionNumber) / int(_commissionScale);\n', '            winLose -= commission;\n', '        }\n', '        return winLose;\n', '    }\n', '\n', '    function getWinLoseAmountByBettingIdInGamblingParty(uint gamblingPartyId,uint bettingId) public view returns (int) {\n', '        int winLose = 0;\n', '        GamblingPartyInfo storage gpInfo = gamblingPartiesInfo[gamblingPartyId];\n', '        require(gpInfo.isEnded);\n', '        for (uint idx = 0; idx < gpInfo.bettingsInfo.length; idx++) {\n', '            BettingInfo storage bInfo = gpInfo.bettingsInfo[idx];\n', '            if (bInfo.id == bettingId) {\n', '                if ((gpInfo.finalScoreHome > gpInfo.finalScoreAway) && (bInfo.buyHome)) {\n', '                    winLose += int(gpInfo.homePayRate * bInfo.bettingAmount / gpInfo.payRateScale);\n', '                } else if ((gpInfo.finalScoreHome < gpInfo.finalScoreAway) && (bInfo.buyAway)) {\n', '                    winLose += int(gpInfo.awayPayRate * bInfo.bettingAmount / gpInfo.payRateScale);\n', '                } else if ((gpInfo.finalScoreHome == gpInfo.finalScoreAway) && (bInfo.buyDraw)) {\n', '                    winLose += int(gpInfo.drawPayRate * bInfo.bettingAmount / gpInfo.payRateScale);\n', '                } else {\n', '                    winLose -= int(bInfo.bettingAmount);\n', '                }\n', '                break;\n', '            }\n', '        }   \n', '        if (winLose > 0){\n', '            int commission = winLose * int(_commissionNumber) / int(_commissionScale);\n', '            winLose -= commission;\n', '        }\n', '        return winLose;\n', '    }\n', '\n', '    event NewGamblingPartyFounded(address fromAddr,uint newGPId);\n', '    function foundNewGamblingParty(\n', '        uint matchId,\n', '        uint homePayRate,\n', '        uint awayPayRate,\n', '        uint drawPayRate,\n', '        uint payRateScale,\n', '        uint basePool\n', '        ) public\n', '        {\n', '        address sender = msg.sender;\n', '        require(basePool > 0);\n', '        require(_internalToken.balanceOf(sender) >= basePool);\n', '        uint newId = _nextGamblingPartyId;\n', '        gamblingPartiesInfo[newId].id = newId;\n', '        gamblingPartiesInfo[newId].dealerAddress = sender;\n', '        gamblingPartiesInfo[newId].homePayRate = homePayRate;\n', '        gamblingPartiesInfo[newId].awayPayRate = awayPayRate;\n', '        gamblingPartiesInfo[newId].drawPayRate = drawPayRate;\n', '        gamblingPartiesInfo[newId].payRateScale = payRateScale;\n', '        gamblingPartiesInfo[newId].bonusPool = basePool;\n', '        gamblingPartiesInfo[newId].baseBonusPool = basePool;\n', '        gamblingPartiesInfo[newId].finalScoreHome = -1;\n', '        gamblingPartiesInfo[newId].finalScoreAway = -1;\n', '        gamblingPartiesInfo[newId].isEnded = false;\n', '        gamblingPartiesInfo[newId].isLockedForBet = false;\n', '        _internalToken.originTransfer(this,basePool);\n', '        matchId2PartyId[matchId].push(gamblingPartiesInfo[newId].id);\n', '        _nextGamblingPartyId++;\n', '        NewGamblingPartyFounded(sender,newId);//fire event\n', '    }\n', '\n', '    event MatchAllGPsEnded(address fromAddr,uint matchId);\n', '    function endMatch(uint matchId,int homeScore,int awayScore) public {\n', '        uint[] storage gamblingPartyIds = matchId2PartyId[matchId];\n', '        for (uint idx = 0;idx < gamblingPartyIds.length;idx++) {\n', '            endGamblingParty(gamblingPartyIds[idx],homeScore,awayScore);\n', '        }\n', '        MatchAllGPsEnded(msg.sender,matchId);        \n', '    }\n', '\n', '    event GamblingPartyEnded(address fromAddr,uint gamblingPartyId);\n', '    function endGamblingParty(uint gamblingPartyId,int homeScore,int awayScore) public onlyOwner {\n', '        GamblingPartyInfo storage gpInfo = gamblingPartiesInfo[gamblingPartyId];\n', '        require(!gpInfo.isEnded);\n', '        gpInfo.finalScoreHome = homeScore;\n', '        gpInfo.finalScoreAway = awayScore;\n', '        gpInfo.isEnded = true;\n', '        int flag = -1;\n', '        if (homeScore > awayScore)\n', '            flag = 0;\n', '        else if (homeScore < awayScore)\n', '            flag = 1;\n', '        else\n', '            flag = 2;\n', '        uint commission; // variable for commission caculation.\n', '        uint bonusPool = gpInfo.bonusPool;\n', '        for (uint idx = 0; idx < gpInfo.bettingsInfo.length; idx++) {\n', '            BettingInfo storage bInfo = gpInfo.bettingsInfo[idx];\n', '            uint transferAmount = 0;\n', '            if (flag == 0 && bInfo.buyHome)\n', '                transferAmount = (gpInfo.homePayRate.mul(bInfo.bettingAmount)).div(gpInfo.payRateScale);\n', '            if (flag == 1 && bInfo.buyAway)\n', '                transferAmount = (gpInfo.awayPayRate.mul(bInfo.bettingAmount)).div(gpInfo.payRateScale);\n', '            if (flag == 2 && bInfo.buyDraw)\n', '                transferAmount = (gpInfo.drawPayRate.mul(bInfo.bettingAmount)).div(gpInfo.payRateScale);\n', '            if (transferAmount != 0) {\n', '                bonusPool = bonusPool.sub(transferAmount);\n', '                commission = (transferAmount.mul(_commissionNumber)).div(_commissionScale);\n', '                transferAmount = transferAmount.sub(commission);\n', '                _internalToken.ownerTransferFrom(this,bInfo.bettingOwner,transferAmount);\n', '                _internalToken.ownerTransferFrom(this,owner,commission);\n', '            }\n', '        }    \n', '        if (bonusPool > 0) {\n', '            uint amount = bonusPool;\n', '            // subs the commission\n', '            commission = (amount.mul(_commissionNumber)).div(_commissionScale);\n', '            amount = amount.sub(commission);\n', '            _internalToken.ownerTransferFrom(this,gpInfo.dealerAddress,amount);\n', '            _internalToken.ownerTransferFrom(this,owner,commission);\n', '        }\n', '        GamblingPartyEnded(msg.sender,gpInfo.id);\n', '    }\n', '\n', '    function getETHBalance() public view returns (uint) {\n', '        return this.balance; // balance is "inherited" from the address type\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', ' //We have to specify what version of the compiler this code will use\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract QIUToken is StandardToken,Ownable {\n', "    string public name = 'QIUToken';\n", "    string public symbol = 'QIU';\n", '    uint8 public decimals = 0;\n', '    uint public INITIAL_SUPPLY = 5000000000;\n', '    uint public eth2qiuRate = 10000;\n', '\n', '    function() public payable { } // make this contract to receive ethers\n', '\n', '    function QIUToken() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[owner] = INITIAL_SUPPLY / 10;\n', '        balances[this] = INITIAL_SUPPLY - balances[owner];\n', '    }\n', '\n', '    function getOwner() public view returns (address) {\n', '        return owner;\n', '    }  \n', '    \n', '    /**\n', '    * @dev Transfer tokens from one address to another, only owner can do this super-user operate\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function ownerTransferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(tx.origin == owner); // only the owner can call the method.\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '      /**\n', '    * @dev transfer token for a specified address,but different from transfer is replace msg.sender with tx.origin\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function originTransfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[tx.origin]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[tx.origin] = balances[tx.origin].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(tx.origin, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    event ExchangeForETH(address fromAddr,address to,uint qiuAmount,uint ethAmount);\n', '    function exchangeForETH(uint qiuAmount) public returns (bool){\n', '        uint ethAmount = qiuAmount * 1000000000000000000 / eth2qiuRate; // only accept multiple of 100\n', '        require(this.balance >= ethAmount);\n', '        balances[this] = balances[this].add(qiuAmount);\n', '        balances[msg.sender] = balances[msg.sender].sub(qiuAmount);\n', '        msg.sender.transfer(ethAmount);\n', '        ExchangeForETH(this,msg.sender,qiuAmount,ethAmount);\n', '        return true;\n', '    }\n', '\n', '    event ExchangeForQIU(address fromAddr,address to,uint qiuAmount,uint ethAmount);\n', '    function exchangeForQIU() payable public returns (bool){\n', '        uint qiuAmount = msg.value * eth2qiuRate / 1000000000000000000;\n', '        require(qiuAmount <= balances[this]);\n', '        balances[this] = balances[this].sub(qiuAmount);\n', '        balances[msg.sender] = balances[msg.sender].add(qiuAmount);\n', '        ExchangeForQIU(this,msg.sender,qiuAmount,msg.value);\n', '        return true;\n', '    }\n', '\n', '    /*\n', '    // transfer out method\n', '    function ownerETHCashout(address account) public onlyOwner {\n', '        account.transfer(this.balance);\n', '    }*/\n', '    function getETHBalance() public view returns (uint) {\n', '        return this.balance; // balance is "inherited" from the address type\n', '    }\n', '}\n', '\n', 'contract SoccerGamblingV_QIU is Ownable {\n', '\n', '    using SafeMath for uint;\n', '\n', '    struct BettingInfo {\n', '        uint id;\n', '        address bettingOwner;\n', '        bool buyHome;\n', '        bool buyAway;\n', '        bool buyDraw;\n', '        uint bettingAmount;\n', '    }\n', '    \n', '    struct GamblingPartyInfo {\n', '        uint id;\n', '        address dealerAddress; // The address of the inital founder\n', '        uint homePayRate;\n', '        uint awayPayRate;\n', '        uint drawPayRate;\n', '        uint payRateScale;\n', '        uint bonusPool; // count by wei\n', '        uint baseBonusPool;\n', '        int finalScoreHome;\n', '        int finalScoreAway;\n', '        bool isEnded;\n', '        bool isLockedForBet;\n', '        BettingInfo[] bettingsInfo;\n', '    }\n', '\n', '    mapping (uint => GamblingPartyInfo) public gamblingPartiesInfo;\n', '    mapping (uint => uint[]) public matchId2PartyId;\n', '    uint private _nextGamblingPartyId;\n', '    uint private _nextBettingInfoId;\n', '    QIUToken public _internalToken;\n', '\n', '    uint private _commissionNumber;\n', '    uint private _commissionScale;\n', '    \n', '\n', '    function SoccerGamblingV_QIU(QIUToken _tokenAddress) public {\n', '        _nextGamblingPartyId = 0;\n', '        _nextBettingInfoId = 0;\n', '        _internalToken = _tokenAddress;\n', '        _commissionNumber = 2;\n', '        _commissionScale = 100;\n', '    }\n', '\n', '    function modifyCommission(uint number,uint scale) public onlyOwner returns(bool){\n', '        _commissionNumber = number;\n', '        _commissionScale = scale;\n', '        return true;\n', '    }\n', '\n', '    function _availableBetting(uint gamblingPartyId,uint8 buySide,uint bettingAmount) private view returns(bool) {\n', '        GamblingPartyInfo storage gpInfo = gamblingPartiesInfo[gamblingPartyId];\n', '        uint losePay = 0;\n', '        if (buySide==0)\n', '            losePay = losePay.add((gpInfo.homePayRate.mul(bettingAmount)).div(gpInfo.payRateScale));\n', '        else if (buySide==1)\n', '            losePay = losePay.add((gpInfo.awayPayRate.mul(bettingAmount)).div(gpInfo.payRateScale));\n', '        else if (buySide==2)\n', '            losePay = losePay.add((gpInfo.drawPayRate.mul(bettingAmount)).div(gpInfo.payRateScale));\n', '        uint mostPay = 0;\n', '        for (uint idx = 0; idx<gpInfo.bettingsInfo.length; idx++) {\n', '            BettingInfo storage bInfo = gpInfo.bettingsInfo[idx];\n', '            if (bInfo.buyHome && (buySide==0))\n', '                mostPay = mostPay.add((gpInfo.homePayRate.mul(bInfo.bettingAmount)).div(gpInfo.payRateScale));\n', '            else if (bInfo.buyAway && (buySide==1))\n', '                mostPay = mostPay.add((gpInfo.awayPayRate.mul(bInfo.bettingAmount)).div(gpInfo.payRateScale));\n', '            else if (bInfo.buyDraw && (buySide==2))\n', '                mostPay = mostPay.add((gpInfo.drawPayRate.mul(bInfo.bettingAmount)).div(gpInfo.payRateScale));\n', '        }\n', '        if (mostPay + losePay > gpInfo.bonusPool)\n', '            return false;\n', '        else \n', '            return true;\n', '    }\n', '\n', '    event NewBettingSucceed(address fromAddr,uint newBettingInfoId);\n', '    function betting(uint gamblingPartyId,uint8 buySide,uint bettingAmount) public {\n', '        require(bettingAmount > 0);\n', '        require(_internalToken.balanceOf(msg.sender) >= bettingAmount);\n', '        GamblingPartyInfo storage gpInfo = gamblingPartiesInfo[gamblingPartyId];\n', '        require(gpInfo.isEnded == false);\n', '        require(gpInfo.isLockedForBet == false);\n', '        require(_availableBetting(gamblingPartyId, buySide, bettingAmount));\n', '        BettingInfo memory bInfo;\n', '        bInfo.id = _nextBettingInfoId;\n', '        bInfo.bettingOwner = msg.sender;\n', '        bInfo.buyHome = false;\n', '        bInfo.buyAway = false;\n', '        bInfo.buyDraw = false;\n', '        bInfo.bettingAmount = bettingAmount;\n', '        if (buySide == 0)\n', '            bInfo.buyHome = true;\n', '        if (buySide == 1)\n', '            bInfo.buyAway = true;\n', '        if (buySide == 2)\n', '            bInfo.buyDraw = true;\n', '        _internalToken.originTransfer(this,bettingAmount);\n', '        gpInfo.bettingsInfo.push(bInfo);\n', '        _nextBettingInfoId++;\n', '        gpInfo.bonusPool = gpInfo.bonusPool.add(bettingAmount);\n', '        NewBettingSucceed(msg.sender,bInfo.id);\n', '    }\n', '\n', '    function remainingBettingFor(uint gamblingPartyId) public view returns\n', '        (uint remainingAmountHome,\n', '         uint remainingAmountAway,\n', '         uint remainingAmountDraw\n', '        ) {\n', '        for (uint8 buySide = 0;buySide<3;buySide++){\n', '            GamblingPartyInfo storage gpInfo = gamblingPartiesInfo[gamblingPartyId];\n', '            uint bonusPool = gpInfo.bonusPool;\n', '            for (uint idx = 0; idx<gpInfo.bettingsInfo.length; idx++) {\n', '                BettingInfo storage bInfo = gpInfo.bettingsInfo[idx];\n', '                if (bInfo.buyHome && (buySide==0))\n', '                    bonusPool = bonusPool.sub((gpInfo.homePayRate.mul(bInfo.bettingAmount)).div(gpInfo.payRateScale));\n', '                else if (bInfo.buyAway && (buySide==1))\n', '                    bonusPool = bonusPool.sub((gpInfo.awayPayRate.mul(bInfo.bettingAmount)).div(gpInfo.payRateScale));\n', '                else if (bInfo.buyDraw && (buySide==2))\n', '                    bonusPool = bonusPool.sub((gpInfo.drawPayRate.mul(bInfo.bettingAmount)).div(gpInfo.payRateScale));\n', '            }\n', '            if (buySide == 0)\n', '                remainingAmountHome = (bonusPool.mul(gpInfo.payRateScale)).div(gpInfo.homePayRate);\n', '            else if (buySide == 1)\n', '                remainingAmountAway = (bonusPool.mul(gpInfo.payRateScale)).div(gpInfo.awayPayRate);\n', '            else if (buySide == 2)\n', '                remainingAmountDraw = (bonusPool.mul(gpInfo.payRateScale)).div(gpInfo.drawPayRate);\n', '        }\n', '    }\n', '\n', '    event MatchAllGPsLock(address fromAddr,uint matchId,bool isLocked);\n', '    function lockUnlockMatchGPForBetting(uint matchId,bool lock) public {\n', '        uint[] storage gamblingPartyIds = matchId2PartyId[matchId];\n', '        for (uint idx = 0;idx < gamblingPartyIds.length;idx++) {\n', '            lockUnlockGamblingPartyForBetting(gamblingPartyIds[idx],lock);\n', '        }\n', '        MatchAllGPsLock(msg.sender,matchId,lock);        \n', '    }\n', '\n', '    function lockUnlockGamblingPartyForBetting(uint gamblingPartyId,bool lock) public onlyOwner {\n', '        GamblingPartyInfo storage gpInfo = gamblingPartiesInfo[gamblingPartyId];\n', '        gpInfo.isLockedForBet = lock;\n', '    }\n', '\n', '    function getGamblingPartyInfo(uint gamblingPartyId) public view returns (uint gpId,\n', '                                                                            address dealerAddress,\n', '                                                                            uint homePayRate,\n', '                                                                            uint awayPayRate,\n', '                                                                            uint drawPayRate,\n', '                                                                            uint payRateScale,\n', '                                                                            uint bonusPool,\n', '                                                                            int finalScoreHome,\n', '                                                                            int finalScoreAway,\n', '                                                                            bool isEnded) \n', '    {\n', '\n', '        GamblingPartyInfo storage gpInfo = gamblingPartiesInfo[gamblingPartyId];\n', '        gpId = gpInfo.id;\n', '        dealerAddress = gpInfo.dealerAddress; // The address of the inital founder\n', '        homePayRate = gpInfo.homePayRate;\n', '        awayPayRate = gpInfo.awayPayRate;\n', '        drawPayRate = gpInfo.drawPayRate;\n', '        payRateScale = gpInfo.payRateScale;\n', '        bonusPool = gpInfo.bonusPool; // count by wei\n', '        finalScoreHome = gpInfo.finalScoreHome;\n', '        finalScoreAway = gpInfo.finalScoreAway;\n', '        isEnded = gpInfo.isEnded;\n', '    }\n', '\n', '    //in this function, I removed the extra return value to fix the compiler exception caused by solidity limitation \n', '    //exception is: CompilerError: Stack too deep, try removing local variables.\n', '    //to get the extra value for the gambingParty , need to invoke the method getGamblingPartyInfo\n', '    function getGamblingPartySummarizeInfo(uint gamblingPartyId) public view returns(\n', '        uint gpId,\n', '        //uint salesAmount,\n', '        uint homeSalesAmount,\n', '        int  homeSalesEarnings,\n', '        uint awaySalesAmount,\n', '        int  awaySalesEarnings,\n', '        uint drawSalesAmount,\n', '        int  drawSalesEarnings,\n', '        int  dealerEarnings,\n', '        uint baseBonusPool\n', '    ){\n', '        GamblingPartyInfo storage gpInfo = gamblingPartiesInfo[gamblingPartyId];\n', '        gpId = gpInfo.id;\n', '        baseBonusPool = gpInfo.baseBonusPool;\n', '        for (uint idx = 0; idx < gpInfo.bettingsInfo.length; idx++) {\n', '            BettingInfo storage bInfo = gpInfo.bettingsInfo[idx];\n', '            if (bInfo.buyHome){\n', '                homeSalesAmount += bInfo.bettingAmount;\n', '                if (gpInfo.isEnded && (gpInfo.finalScoreHome > gpInfo.finalScoreAway)){\n', '                    homeSalesEarnings = homeSalesEarnings - int(bInfo.bettingAmount*gpInfo.homePayRate/gpInfo.payRateScale);\n', '                }else\n', '                    homeSalesEarnings += int(bInfo.bettingAmount);\n', '            } else if (bInfo.buyAway){\n', '                awaySalesAmount += bInfo.bettingAmount;\n', '                if (gpInfo.isEnded && (gpInfo.finalScoreHome < gpInfo.finalScoreAway)){\n', '                    awaySalesEarnings = awaySalesEarnings - int(bInfo.bettingAmount*gpInfo.awayPayRate/gpInfo.payRateScale);\n', '                }else\n', '                    awaySalesEarnings += int(bInfo.bettingAmount);\n', '            } else if (bInfo.buyDraw){\n', '                drawSalesAmount += bInfo.bettingAmount;\n', '                if (gpInfo.isEnded && (gpInfo.finalScoreHome == gpInfo.finalScoreAway)){\n', '                    drawSalesEarnings = drawSalesEarnings - int(bInfo.bettingAmount*gpInfo.drawPayRate/gpInfo.payRateScale);\n', '                }else\n', '                    drawSalesEarnings += int(bInfo.bettingAmount);\n', '            }\n', '        }\n', '        int commission;    \n', '        if(gpInfo.isEnded){\n', '            dealerEarnings = int(gpInfo.bonusPool);\n', '        }else{\n', '            dealerEarnings = int(gpInfo.bonusPool);\n', '            return;\n', '        }\n', '        if (homeSalesEarnings > 0){\n', '            commission = homeSalesEarnings * int(_commissionNumber) / int(_commissionScale);\n', '            homeSalesEarnings -= commission;\n', '        }\n', '        if (awaySalesEarnings > 0){\n', '            commission = awaySalesEarnings * int(_commissionNumber) / int(_commissionScale);\n', '            awaySalesEarnings -= commission;\n', '        }\n', '        if (drawSalesEarnings > 0){\n', '            commission = drawSalesEarnings * int(_commissionNumber) / int(_commissionScale);\n', '            drawSalesEarnings -= commission;\n', '        }\n', '        if (homeSalesEarnings < 0)\n', '            dealerEarnings = int(gpInfo.bonusPool) + homeSalesEarnings;\n', '        if (awaySalesEarnings < 0)\n', '            dealerEarnings = int(gpInfo.bonusPool) + awaySalesEarnings;\n', '        if (drawSalesEarnings < 0)\n', '            dealerEarnings = int(gpInfo.bonusPool) + drawSalesEarnings;\n', '        commission = dealerEarnings * int(_commissionNumber) / int(_commissionScale);\n', '        dealerEarnings -= commission;\n', '    }\n', '\n', '    function getMatchSummarizeInfo(uint matchId) public view returns (\n', '                                                            uint mSalesAmount,\n', '                                                            uint mHomeSalesAmount,\n', '                                                            uint mAwaySalesAmount,\n', '                                                            uint mDrawSalesAmount,\n', '                                                            int mDealerEarnings,\n', '                                                            uint mBaseBonusPool\n', '                                                        )\n', '    {\n', '        for (uint idx = 0; idx<matchId2PartyId[matchId].length; idx++) {\n', '            uint gamblingPartyId = matchId2PartyId[matchId][idx];\n', '            var (,homeSalesAmount,,awaySalesAmount,,drawSalesAmount,,dealerEarnings,baseBonusPool) = getGamblingPartySummarizeInfo(gamblingPartyId);\n', '            mHomeSalesAmount += homeSalesAmount;\n', '            mAwaySalesAmount += awaySalesAmount;\n', '            mDrawSalesAmount += drawSalesAmount;\n', '            mSalesAmount += homeSalesAmount + awaySalesAmount + drawSalesAmount;\n', '            mDealerEarnings += dealerEarnings;\n', '            mBaseBonusPool = baseBonusPool;\n', '        }\n', '    }\n', '\n', '    function getSumOfGamblingPartiesBonusPool(uint matchId) public view returns (uint) {\n', '        uint sum = 0;\n', '        for (uint idx = 0; idx<matchId2PartyId[matchId].length; idx++) {\n', '            uint gamblingPartyId = matchId2PartyId[matchId][idx];\n', '            GamblingPartyInfo storage gpInfo = gamblingPartiesInfo[gamblingPartyId];\n', '            sum += gpInfo.bonusPool;\n', '        }\n', '        return sum;\n', '    }\n', '\n', '    function getWinLoseAmountByBettingOwnerInGamblingParty(uint gamblingPartyId,address bettingOwner) public view returns (int) {\n', '        int winLose = 0;\n', '        GamblingPartyInfo storage gpInfo = gamblingPartiesInfo[gamblingPartyId];\n', '        require(gpInfo.isEnded);\n', '        for (uint idx = 0; idx < gpInfo.bettingsInfo.length; idx++) {\n', '            BettingInfo storage bInfo = gpInfo.bettingsInfo[idx];\n', '            if (bInfo.bettingOwner == bettingOwner) {\n', '                if ((gpInfo.finalScoreHome > gpInfo.finalScoreAway) && (bInfo.buyHome)) {\n', '                    winLose += int(gpInfo.homePayRate * bInfo.bettingAmount / gpInfo.payRateScale);\n', '                } else if ((gpInfo.finalScoreHome < gpInfo.finalScoreAway) && (bInfo.buyAway)) {\n', '                    winLose += int(gpInfo.awayPayRate * bInfo.bettingAmount / gpInfo.payRateScale);\n', '                } else if ((gpInfo.finalScoreHome == gpInfo.finalScoreAway) && (bInfo.buyDraw)) {\n', '                    winLose += int(gpInfo.drawPayRate * bInfo.bettingAmount / gpInfo.payRateScale);\n', '                } else {\n', '                    winLose -= int(bInfo.bettingAmount);\n', '                }\n', '            }\n', '        }   \n', '        if (winLose > 0){\n', '            int commission = winLose * int(_commissionNumber) / int(_commissionScale);\n', '            winLose -= commission;\n', '        }\n', '        return winLose;\n', '    }\n', '\n', '    function getWinLoseAmountByBettingIdInGamblingParty(uint gamblingPartyId,uint bettingId) public view returns (int) {\n', '        int winLose = 0;\n', '        GamblingPartyInfo storage gpInfo = gamblingPartiesInfo[gamblingPartyId];\n', '        require(gpInfo.isEnded);\n', '        for (uint idx = 0; idx < gpInfo.bettingsInfo.length; idx++) {\n', '            BettingInfo storage bInfo = gpInfo.bettingsInfo[idx];\n', '            if (bInfo.id == bettingId) {\n', '                if ((gpInfo.finalScoreHome > gpInfo.finalScoreAway) && (bInfo.buyHome)) {\n', '                    winLose += int(gpInfo.homePayRate * bInfo.bettingAmount / gpInfo.payRateScale);\n', '                } else if ((gpInfo.finalScoreHome < gpInfo.finalScoreAway) && (bInfo.buyAway)) {\n', '                    winLose += int(gpInfo.awayPayRate * bInfo.bettingAmount / gpInfo.payRateScale);\n', '                } else if ((gpInfo.finalScoreHome == gpInfo.finalScoreAway) && (bInfo.buyDraw)) {\n', '                    winLose += int(gpInfo.drawPayRate * bInfo.bettingAmount / gpInfo.payRateScale);\n', '                } else {\n', '                    winLose -= int(bInfo.bettingAmount);\n', '                }\n', '                break;\n', '            }\n', '        }   \n', '        if (winLose > 0){\n', '            int commission = winLose * int(_commissionNumber) / int(_commissionScale);\n', '            winLose -= commission;\n', '        }\n', '        return winLose;\n', '    }\n', '\n', '    event NewGamblingPartyFounded(address fromAddr,uint newGPId);\n', '    function foundNewGamblingParty(\n', '        uint matchId,\n', '        uint homePayRate,\n', '        uint awayPayRate,\n', '        uint drawPayRate,\n', '        uint payRateScale,\n', '        uint basePool\n', '        ) public\n', '        {\n', '        address sender = msg.sender;\n', '        require(basePool > 0);\n', '        require(_internalToken.balanceOf(sender) >= basePool);\n', '        uint newId = _nextGamblingPartyId;\n', '        gamblingPartiesInfo[newId].id = newId;\n', '        gamblingPartiesInfo[newId].dealerAddress = sender;\n', '        gamblingPartiesInfo[newId].homePayRate = homePayRate;\n', '        gamblingPartiesInfo[newId].awayPayRate = awayPayRate;\n', '        gamblingPartiesInfo[newId].drawPayRate = drawPayRate;\n', '        gamblingPartiesInfo[newId].payRateScale = payRateScale;\n', '        gamblingPartiesInfo[newId].bonusPool = basePool;\n', '        gamblingPartiesInfo[newId].baseBonusPool = basePool;\n', '        gamblingPartiesInfo[newId].finalScoreHome = -1;\n', '        gamblingPartiesInfo[newId].finalScoreAway = -1;\n', '        gamblingPartiesInfo[newId].isEnded = false;\n', '        gamblingPartiesInfo[newId].isLockedForBet = false;\n', '        _internalToken.originTransfer(this,basePool);\n', '        matchId2PartyId[matchId].push(gamblingPartiesInfo[newId].id);\n', '        _nextGamblingPartyId++;\n', '        NewGamblingPartyFounded(sender,newId);//fire event\n', '    }\n', '\n', '    event MatchAllGPsEnded(address fromAddr,uint matchId);\n', '    function endMatch(uint matchId,int homeScore,int awayScore) public {\n', '        uint[] storage gamblingPartyIds = matchId2PartyId[matchId];\n', '        for (uint idx = 0;idx < gamblingPartyIds.length;idx++) {\n', '            endGamblingParty(gamblingPartyIds[idx],homeScore,awayScore);\n', '        }\n', '        MatchAllGPsEnded(msg.sender,matchId);        \n', '    }\n', '\n', '    event GamblingPartyEnded(address fromAddr,uint gamblingPartyId);\n', '    function endGamblingParty(uint gamblingPartyId,int homeScore,int awayScore) public onlyOwner {\n', '        GamblingPartyInfo storage gpInfo = gamblingPartiesInfo[gamblingPartyId];\n', '        require(!gpInfo.isEnded);\n', '        gpInfo.finalScoreHome = homeScore;\n', '        gpInfo.finalScoreAway = awayScore;\n', '        gpInfo.isEnded = true;\n', '        int flag = -1;\n', '        if (homeScore > awayScore)\n', '            flag = 0;\n', '        else if (homeScore < awayScore)\n', '            flag = 1;\n', '        else\n', '            flag = 2;\n', '        uint commission; // variable for commission caculation.\n', '        uint bonusPool = gpInfo.bonusPool;\n', '        for (uint idx = 0; idx < gpInfo.bettingsInfo.length; idx++) {\n', '            BettingInfo storage bInfo = gpInfo.bettingsInfo[idx];\n', '            uint transferAmount = 0;\n', '            if (flag == 0 && bInfo.buyHome)\n', '                transferAmount = (gpInfo.homePayRate.mul(bInfo.bettingAmount)).div(gpInfo.payRateScale);\n', '            if (flag == 1 && bInfo.buyAway)\n', '                transferAmount = (gpInfo.awayPayRate.mul(bInfo.bettingAmount)).div(gpInfo.payRateScale);\n', '            if (flag == 2 && bInfo.buyDraw)\n', '                transferAmount = (gpInfo.drawPayRate.mul(bInfo.bettingAmount)).div(gpInfo.payRateScale);\n', '            if (transferAmount != 0) {\n', '                bonusPool = bonusPool.sub(transferAmount);\n', '                commission = (transferAmount.mul(_commissionNumber)).div(_commissionScale);\n', '                transferAmount = transferAmount.sub(commission);\n', '                _internalToken.ownerTransferFrom(this,bInfo.bettingOwner,transferAmount);\n', '                _internalToken.ownerTransferFrom(this,owner,commission);\n', '            }\n', '        }    \n', '        if (bonusPool > 0) {\n', '            uint amount = bonusPool;\n', '            // subs the commission\n', '            commission = (amount.mul(_commissionNumber)).div(_commissionScale);\n', '            amount = amount.sub(commission);\n', '            _internalToken.ownerTransferFrom(this,gpInfo.dealerAddress,amount);\n', '            _internalToken.ownerTransferFrom(this,owner,commission);\n', '        }\n', '        GamblingPartyEnded(msg.sender,gpInfo.id);\n', '    }\n', '\n', '    function getETHBalance() public view returns (uint) {\n', '        return this.balance; // balance is "inherited" from the address type\n', '    }\n', '}']
