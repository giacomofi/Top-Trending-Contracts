['pragma solidity ^0.4.11;\n', '\n', '\n', 'library SafeMath {\n', '    \n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract SKWToken {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    string public name = "SKW";      //  token name\n', '    \n', '    string public symbol = "SKW";           //  token symbol\n', '    \n', '    uint256 public decimals = 8;            //  token digit\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    \n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    \n', '    mapping (address => uint256) public frozenBalances;\n', '    \n', '    mapping (address => uint256) public initTimes;\n', '    \n', '    mapping (address => uint) public initTypes;\n', '    \n', '    uint256 public totalSupply = 0;\n', '\n', '    uint256 constant valueFounder = 5000000000000000000;\n', '    \n', '    address owner = 0x0;\n', '    \n', '    address operator = 0x0;\n', '\n', '    modifier isOwner {\n', '        assert(owner == msg.sender);\n', '        _;\n', '    }\n', '    \n', '    modifier isOperator {\n', '        assert(operator == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier validAddress {\n', '        assert(0x0 != msg.sender);\n', '        _;\n', '    }\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        operator = msg.sender;\n', '        totalSupply = valueFounder;\n', '        balanceOf[msg.sender] = valueFounder;\n', '        emit Transfer(0x0, msg.sender, valueFounder);\n', '    }\n', '    \n', '    function _transfer(address _from, address _to, uint256 _value) private {\n', '        require(_to != 0x0);\n', '        require(canTransferBalance(_from) >= _value);\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) validAddress public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) validAddress public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) validAddress public returns (bool success) {\n', '        require(canTransferBalance(msg.sender) >= _value);\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function burn(uint256 _value) validAddress public  returns (bool success) {\n', '        require(canTransferBalance(msg.sender) >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);            // Subtract from the sender\n', '        totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        emit Transfer(msg.sender, 0x0, _value);\n', '        return true;\n', '    }\n', '\n', '    function initTransferArr(address[] _arr_addr, uint256[] _arr_value,uint[] _arr_initType) validAddress isOperator public returns (bool success) {\n', '        require(_arr_addr.length == _arr_value.length && _arr_value.length == _arr_initType.length);\n', '        require(_arr_addr.length > 0 && _arr_addr.length < 100);\n', '        for (uint i = 0; i < _arr_addr.length ; ++i) {\n', '            initTransfer(_arr_addr[i],_arr_value[i],_arr_initType[i]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function initTransfer(address _to, uint256 _value, uint _initType) validAddress isOperator public returns (bool success) {\n', '        require(_initType == 0x1 || _initType == 0x2);\n', '        require(initTypes[_to]==0x0);\n', '        frozenBalances[_to] = _value;\n', '        initTimes[_to] = now;\n', '        initTypes[_to] = _initType;\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function canTransferBalance(address addr) public view returns (uint256){\n', '        if(initTypes[addr]==0x0){\n', '            return balanceOf[addr];\n', '        }else{\n', '            uint256 s = now.sub(initTimes[addr]);\n', '            if(initTypes[addr]==0x1){\n', '                if(s >= 513 days){\n', '                    return balanceOf[addr];    \n', '                }else if(s >= 183 days){\n', '                    return balanceOf[addr].sub(frozenBalances[addr]).add(frozenBalances[addr].div(12).mul((s.sub(183 days).div(30 days) + 1)));\n', '                }else{\n', '                    return balanceOf[addr].sub(frozenBalances[addr]);\n', '                }\n', '            }else if(initTypes[addr]==0x2){\n', '                if(s >= 243 days){\n', '                    return balanceOf[addr];    \n', '                }else if(s >= 93 days){\n', '                    return balanceOf[addr].sub(frozenBalances[addr]).add(frozenBalances[addr].div(6).mul((s.sub(93 days).div(30 days) + 1)));\n', '                }else{\n', '                    return balanceOf[addr].sub(frozenBalances[addr]);\n', '                }\n', '            }else{\n', '                return 0;\n', '            }\n', '        }\n', '    }\n', '    \n', '    function setOperator(address addr) validAddress isOwner public {\n', '        operator = addr;\n', '    }\n', '    \n', '}']
['pragma solidity ^0.4.11;\n', '\n', '\n', 'library SafeMath {\n', '    \n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract SKWToken {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    string public name = "SKW";      //  token name\n', '    \n', '    string public symbol = "SKW";           //  token symbol\n', '    \n', '    uint256 public decimals = 8;            //  token digit\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    \n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    \n', '    mapping (address => uint256) public frozenBalances;\n', '    \n', '    mapping (address => uint256) public initTimes;\n', '    \n', '    mapping (address => uint) public initTypes;\n', '    \n', '    uint256 public totalSupply = 0;\n', '\n', '    uint256 constant valueFounder = 5000000000000000000;\n', '    \n', '    address owner = 0x0;\n', '    \n', '    address operator = 0x0;\n', '\n', '    modifier isOwner {\n', '        assert(owner == msg.sender);\n', '        _;\n', '    }\n', '    \n', '    modifier isOperator {\n', '        assert(operator == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier validAddress {\n', '        assert(0x0 != msg.sender);\n', '        _;\n', '    }\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        operator = msg.sender;\n', '        totalSupply = valueFounder;\n', '        balanceOf[msg.sender] = valueFounder;\n', '        emit Transfer(0x0, msg.sender, valueFounder);\n', '    }\n', '    \n', '    function _transfer(address _from, address _to, uint256 _value) private {\n', '        require(_to != 0x0);\n', '        require(canTransferBalance(_from) >= _value);\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) validAddress public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) validAddress public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) validAddress public returns (bool success) {\n', '        require(canTransferBalance(msg.sender) >= _value);\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function burn(uint256 _value) validAddress public  returns (bool success) {\n', '        require(canTransferBalance(msg.sender) >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);            // Subtract from the sender\n', '        totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        emit Transfer(msg.sender, 0x0, _value);\n', '        return true;\n', '    }\n', '\n', '    function initTransferArr(address[] _arr_addr, uint256[] _arr_value,uint[] _arr_initType) validAddress isOperator public returns (bool success) {\n', '        require(_arr_addr.length == _arr_value.length && _arr_value.length == _arr_initType.length);\n', '        require(_arr_addr.length > 0 && _arr_addr.length < 100);\n', '        for (uint i = 0; i < _arr_addr.length ; ++i) {\n', '            initTransfer(_arr_addr[i],_arr_value[i],_arr_initType[i]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function initTransfer(address _to, uint256 _value, uint _initType) validAddress isOperator public returns (bool success) {\n', '        require(_initType == 0x1 || _initType == 0x2);\n', '        require(initTypes[_to]==0x0);\n', '        frozenBalances[_to] = _value;\n', '        initTimes[_to] = now;\n', '        initTypes[_to] = _initType;\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function canTransferBalance(address addr) public view returns (uint256){\n', '        if(initTypes[addr]==0x0){\n', '            return balanceOf[addr];\n', '        }else{\n', '            uint256 s = now.sub(initTimes[addr]);\n', '            if(initTypes[addr]==0x1){\n', '                if(s >= 513 days){\n', '                    return balanceOf[addr];    \n', '                }else if(s >= 183 days){\n', '                    return balanceOf[addr].sub(frozenBalances[addr]).add(frozenBalances[addr].div(12).mul((s.sub(183 days).div(30 days) + 1)));\n', '                }else{\n', '                    return balanceOf[addr].sub(frozenBalances[addr]);\n', '                }\n', '            }else if(initTypes[addr]==0x2){\n', '                if(s >= 243 days){\n', '                    return balanceOf[addr];    \n', '                }else if(s >= 93 days){\n', '                    return balanceOf[addr].sub(frozenBalances[addr]).add(frozenBalances[addr].div(6).mul((s.sub(93 days).div(30 days) + 1)));\n', '                }else{\n', '                    return balanceOf[addr].sub(frozenBalances[addr]);\n', '                }\n', '            }else{\n', '                return 0;\n', '            }\n', '        }\n', '    }\n', '    \n', '    function setOperator(address addr) validAddress isOwner public {\n', '        operator = addr;\n', '    }\n', '    \n', '}']
