['pragma solidity 0.4.24;\n', '\n', 'library SafeMath {\n', '\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a && c >= b);\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '    function totalSupply() public constant returns (uint);\n', '\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract Extent {\n', '    using SafeMath for uint;\n', '\n', '    address public admin; //the admin address\n', '    mapping(address => bool) private canClaimTokens;\n', '    mapping(address => uint) public tokens; //mapping of token addresses to mapping of account balances (token=0 means Ether)\n', '    mapping(address => uint) public claimableAmount; //mapping of token addresses to max amount to claim\n', '\n', '    event Deposit(address token, address user, uint amount, uint balance);\n', '    event Withdraw(address token, address user, uint amount, uint balance);\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    modifier onlyWhitelisted(address address_) {\n', '        require(canClaimTokens[address_]);\n', '        _;\n', '    }\n', '\n', '    constructor(address admin_) public {\n', '        admin = admin_;\n', '    }\n', '\n', '    function() public payable {\n', '        revert("Cannot send ETH directly to the Contract");\n', '    }\n', '\n', '    function changeAdmin(address admin_) public onlyAdmin {\n', '        admin = admin_;\n', '    }\n', '\n', '    function addToWhitelist(address address_) public onlyAdmin {\n', '        canClaimTokens[address_] = true;\n', '    }\n', '\n', '    function addToWhitelistBulk(address[] addresses_) public onlyAdmin {\n', '        for (uint i = 0; i < addresses_.length; i++) {\n', '            canClaimTokens[addresses_[i]] = true;\n', '        }\n', '    }\n', '\n', '    function setAmountToClaim(address token, uint amount) public onlyAdmin {\n', '        claimableAmount[token] = amount;\n', '    }\n', '\n', '    function depositToken(address token, uint amount) public onlyAdmin {\n', '        //remember to call ERC20Token(address).approve(this, amount) or this contract will not be able to do the transfer on your behalf.\n', '        if (token == 0) revert("Cannot deposit ETH with depositToken method");\n', '        if (!ERC20(token).transferFrom(msg.sender, this, amount)) revert("You didn&#39;t call approve method on Token contract");\n', '        tokens[token] += amount;\n', '        emit Deposit(token, msg.sender, amount, tokens[token]);\n', '    }\n', '\n', '    function claimTokens(address token) public onlyWhitelisted(msg.sender) {\n', '        if (token == 0) revert("Cannot withdraw ETH with withdrawToken method");\n', '        if (tokens[token] < claimableAmount[token]) revert("Not enough tokens to claim");\n', '        tokens[token] -= claimableAmount[token];\n', '        canClaimTokens[msg.sender] = false;\n', '        if (!ERC20(token).transfer(msg.sender, claimableAmount[token])) revert("Error while transfering tokens");\n', '        emit Withdraw(token, msg.sender, claimableAmount[token], tokens[token]);\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', 'library SafeMath {\n', '\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a && c >= b);\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '    function totalSupply() public constant returns (uint);\n', '\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract Extent {\n', '    using SafeMath for uint;\n', '\n', '    address public admin; //the admin address\n', '    mapping(address => bool) private canClaimTokens;\n', '    mapping(address => uint) public tokens; //mapping of token addresses to mapping of account balances (token=0 means Ether)\n', '    mapping(address => uint) public claimableAmount; //mapping of token addresses to max amount to claim\n', '\n', '    event Deposit(address token, address user, uint amount, uint balance);\n', '    event Withdraw(address token, address user, uint amount, uint balance);\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    modifier onlyWhitelisted(address address_) {\n', '        require(canClaimTokens[address_]);\n', '        _;\n', '    }\n', '\n', '    constructor(address admin_) public {\n', '        admin = admin_;\n', '    }\n', '\n', '    function() public payable {\n', '        revert("Cannot send ETH directly to the Contract");\n', '    }\n', '\n', '    function changeAdmin(address admin_) public onlyAdmin {\n', '        admin = admin_;\n', '    }\n', '\n', '    function addToWhitelist(address address_) public onlyAdmin {\n', '        canClaimTokens[address_] = true;\n', '    }\n', '\n', '    function addToWhitelistBulk(address[] addresses_) public onlyAdmin {\n', '        for (uint i = 0; i < addresses_.length; i++) {\n', '            canClaimTokens[addresses_[i]] = true;\n', '        }\n', '    }\n', '\n', '    function setAmountToClaim(address token, uint amount) public onlyAdmin {\n', '        claimableAmount[token] = amount;\n', '    }\n', '\n', '    function depositToken(address token, uint amount) public onlyAdmin {\n', '        //remember to call ERC20Token(address).approve(this, amount) or this contract will not be able to do the transfer on your behalf.\n', '        if (token == 0) revert("Cannot deposit ETH with depositToken method");\n', '        if (!ERC20(token).transferFrom(msg.sender, this, amount)) revert("You didn\'t call approve method on Token contract");\n', '        tokens[token] += amount;\n', '        emit Deposit(token, msg.sender, amount, tokens[token]);\n', '    }\n', '\n', '    function claimTokens(address token) public onlyWhitelisted(msg.sender) {\n', '        if (token == 0) revert("Cannot withdraw ETH with withdrawToken method");\n', '        if (tokens[token] < claimableAmount[token]) revert("Not enough tokens to claim");\n', '        tokens[token] -= claimableAmount[token];\n', '        canClaimTokens[msg.sender] = false;\n', '        if (!ERC20(token).transfer(msg.sender, claimableAmount[token])) revert("Error while transfering tokens");\n', '        emit Withdraw(token, msg.sender, claimableAmount[token], tokens[token]);\n', '    }\n', '}']
