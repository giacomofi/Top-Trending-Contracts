['pragma solidity ^0.4.13;\n', '\n', 'contract Math {\n', '  function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '    assert((z = x + y) >= x);\n', '  }\n', '\n', '  function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '    assert((z = x - y) <= x);\n', '  }\n', '\n', '  function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '    assert((z = x * y) >= x);\n', '  }\n', '\n', '  function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '    z = x / y;\n', '  }\n', '}\n', '\n', 'contract Token {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address _owner) public constant returns (uint256 balance);\n', '  function transfer(address _to, uint256 _value) public returns (bool success);\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '  function approve(address _spender, uint256 _value) public returns (bool success);\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/*  ERC 20 token */\n', 'contract ERC20 is Token {\n', '\n', '  function name() public pure returns (string) { name; }\n', '  function symbol() public pure returns (string) { symbol; }\n', '  function decimals() public pure returns (uint8) { decimals; }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool success) {\n', '    if (balances[msg.sender] >= _value && _value > 0) {\n', '      balances[msg.sender] -= _value;\n', '      balances[_to] += _value;\n', '      Transfer(msg.sender, _to, _value);\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '      balances[_to] += _value;\n', '      balances[_from] -= _value;\n', '      allowed[_from][msg.sender] -= _value;\n', '      Transfer(_from, _to, _value);\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  mapping (address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract owned {\n', '  address public owner;\n', '\n', '  function owned() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract EPCToken is ERC20, Math, owned {\n', '  // metadata\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals = 18;\n', '  string public version;\n', '\n', '  // events\n', '  event Reward(address indexed _to, uint256 _value);\n', '  event MintToken(address indexed _to, uint256 _value);\n', '  event Burn(address indexed _to, uint256 _value);\n', '\n', '  // constructor\n', '  function EPCToken(\n', '   string _name,\n', '   string _symbol,\n', '   string _version\n', '  ) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    version = _version;\n', '  }\n', '\n', '  /*\n', '   * mint token\n', '   */\n', '  function mintToken(address target, uint256 mintedAmount) public onlyOwner {\n', '    balances[target] += mintedAmount;\n', '    totalSupply += mintedAmount;\n', '    MintToken(target, mintedAmount);\n', '  }\n', '\n', '  /*\n', '   * burn the tokens, cant never get back\n', '   */\n', '  function burn(uint256 amount) public returns (bool success) {\n', '    require(balances[msg.sender] >= amount);\n', '    balances[msg.sender] -= amount;\n', '    totalSupply -= amount;\n', '    Burn(msg.sender, amount);\n', '    return true;\n', '  }\n', '\n', '  /*\n', '   * reward token\n', '   */\n', '  function reward(address target, uint256 amount) public onlyOwner {\n', '    balances[target] += amount;\n', '    Reward(target, amount);\n', '  }\n', '\n', '  /*\n', '   * kill the contract from the blockchain\n', '   * and send the balance to the owner\n', '   */\n', '  function kill() public onlyOwner {\n', '    selfdestruct(owner);\n', '  }\n', '}\n', '\n', 'contract EPCSale is Math, owned {\n', '  EPCToken public epc;\n', '  uint256 public constant decimals = 18;\n', '  // crowdsale parameters\n', '  bool public isFinalized;  // switched to true in operational state\n', '  uint256 public fundingStartBlock;\n', '  uint256 public fundingEndBlock;\n', '  uint256 public funded;\n', '  uint256 public constant totalCap = 250 * (10**6) * 10**decimals; // 250m epc\n', '\n', '  // constructor\n', '  function EPCSale(\n', '   EPCToken _epc,\n', '   uint256 _fundingStartBlock,\n', '   uint256 _fundingEndBlock\n', '  )\n', '  public {\n', '    isFinalized = false; //controls pre through crowdsale state\n', '    epc = EPCToken(_epc);\n', '    fundingStartBlock = _fundingStartBlock;\n', '    fundingEndBlock = _fundingEndBlock;\n', '  }\n', '\n', '  /*\n', '   * crowdsale\n', '   */\n', '  function crowdSale() public payable {\n', '    require(!isFinalized);\n', '    assert(block.number >= fundingStartBlock);\n', '    assert(block.number <= fundingEndBlock);\n', '    require(msg.value > 0);\n', '    uint256 tokens = mul(msg.value, exchangeRate()); // check that we&#39;re not over totals\n', '    funded = add(funded, tokens);\n', '    assert(funded <= totalCap);\n', '    assert(epc.transfer(msg.sender, tokens));\n', '  }\n', '\n', '  /*\n', '   * caculate the crowdsale rate per eth\n', '   */\n', '  function exchangeRate() public constant returns(uint256) {\n', '    if (block.number<=fundingStartBlock+43200) return 10000; // early price\n', '    if (block.number<=fundingStartBlock+2*43200) return 8000; // crowdsale price\n', '    return 7000; // default price\n', '  }\n', '\n', '  /*\n', '   * unit test for crowdsale exchange rate\n', '   */\n', '  function testExchangeRate(uint blockNumber) public constant returns(uint256) {\n', '    if (blockNumber <= fundingStartBlock+43200) return 10000; // early price\n', '    if (blockNumber <= fundingStartBlock+2*43200) return 8000; // crowdsale price\n', '    return 7000; // default price\n', '  }\n', '\n', '  /*\n', '   * unit test for calculate funded amount\n', '   */\n', '  function testFunded(uint256 amount) public constant returns(uint256) {\n', '    uint256 tokens = mul(amount, exchangeRate());\n', '    return add(funded, tokens);\n', '  }\n', '\n', '  /*\n', '   * unamed function for crowdsale\n', '   */\n', '  function () public payable {\n', '    crowdSale();\n', '  }\n', '\n', '  /*\n', '   * withrawal the crowd eth\n', '   */\n', '  function withdrawal() public onlyOwner {\n', '    msg.sender.transfer(this.balance);\n', '  }\n', '\n', '  /*\n', '   * stop the crowdsale\n', '   */\n', '  function stop() public onlyOwner {\n', '    isFinalized = true;\n', '  }\n', '\n', '  /*\n', '   * start the crowdsale\n', '   */\n', '  function start() public onlyOwner {\n', '    isFinalized = false;\n', '  }\n', '\n', '  /*\n', '   * retrieve tokens from the contract\n', '   */\n', '  function retrieveTokens(uint256 amount) public onlyOwner {\n', '    assert(epc.transfer(owner, amount));\n', '  }\n', '\n', '  /*\n', '   * kill the contract from the blockchain\n', '   * and retrieve the tokens and balance to the owner\n', '   */\n', '  function kill() public onlyOwner {\n', '    epc.transfer(owner, epc.balanceOf(this));\n', '    selfdestruct(owner);\n', '  }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'contract Math {\n', '  function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '    assert((z = x + y) >= x);\n', '  }\n', '\n', '  function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '    assert((z = x - y) <= x);\n', '  }\n', '\n', '  function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '    assert((z = x * y) >= x);\n', '  }\n', '\n', '  function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '    z = x / y;\n', '  }\n', '}\n', '\n', 'contract Token {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address _owner) public constant returns (uint256 balance);\n', '  function transfer(address _to, uint256 _value) public returns (bool success);\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '  function approve(address _spender, uint256 _value) public returns (bool success);\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/*  ERC 20 token */\n', 'contract ERC20 is Token {\n', '\n', '  function name() public pure returns (string) { name; }\n', '  function symbol() public pure returns (string) { symbol; }\n', '  function decimals() public pure returns (uint8) { decimals; }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool success) {\n', '    if (balances[msg.sender] >= _value && _value > 0) {\n', '      balances[msg.sender] -= _value;\n', '      balances[_to] += _value;\n', '      Transfer(msg.sender, _to, _value);\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '      balances[_to] += _value;\n', '      balances[_from] -= _value;\n', '      allowed[_from][msg.sender] -= _value;\n', '      Transfer(_from, _to, _value);\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  mapping (address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract owned {\n', '  address public owner;\n', '\n', '  function owned() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract EPCToken is ERC20, Math, owned {\n', '  // metadata\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals = 18;\n', '  string public version;\n', '\n', '  // events\n', '  event Reward(address indexed _to, uint256 _value);\n', '  event MintToken(address indexed _to, uint256 _value);\n', '  event Burn(address indexed _to, uint256 _value);\n', '\n', '  // constructor\n', '  function EPCToken(\n', '   string _name,\n', '   string _symbol,\n', '   string _version\n', '  ) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    version = _version;\n', '  }\n', '\n', '  /*\n', '   * mint token\n', '   */\n', '  function mintToken(address target, uint256 mintedAmount) public onlyOwner {\n', '    balances[target] += mintedAmount;\n', '    totalSupply += mintedAmount;\n', '    MintToken(target, mintedAmount);\n', '  }\n', '\n', '  /*\n', '   * burn the tokens, cant never get back\n', '   */\n', '  function burn(uint256 amount) public returns (bool success) {\n', '    require(balances[msg.sender] >= amount);\n', '    balances[msg.sender] -= amount;\n', '    totalSupply -= amount;\n', '    Burn(msg.sender, amount);\n', '    return true;\n', '  }\n', '\n', '  /*\n', '   * reward token\n', '   */\n', '  function reward(address target, uint256 amount) public onlyOwner {\n', '    balances[target] += amount;\n', '    Reward(target, amount);\n', '  }\n', '\n', '  /*\n', '   * kill the contract from the blockchain\n', '   * and send the balance to the owner\n', '   */\n', '  function kill() public onlyOwner {\n', '    selfdestruct(owner);\n', '  }\n', '}\n', '\n', 'contract EPCSale is Math, owned {\n', '  EPCToken public epc;\n', '  uint256 public constant decimals = 18;\n', '  // crowdsale parameters\n', '  bool public isFinalized;  // switched to true in operational state\n', '  uint256 public fundingStartBlock;\n', '  uint256 public fundingEndBlock;\n', '  uint256 public funded;\n', '  uint256 public constant totalCap = 250 * (10**6) * 10**decimals; // 250m epc\n', '\n', '  // constructor\n', '  function EPCSale(\n', '   EPCToken _epc,\n', '   uint256 _fundingStartBlock,\n', '   uint256 _fundingEndBlock\n', '  )\n', '  public {\n', '    isFinalized = false; //controls pre through crowdsale state\n', '    epc = EPCToken(_epc);\n', '    fundingStartBlock = _fundingStartBlock;\n', '    fundingEndBlock = _fundingEndBlock;\n', '  }\n', '\n', '  /*\n', '   * crowdsale\n', '   */\n', '  function crowdSale() public payable {\n', '    require(!isFinalized);\n', '    assert(block.number >= fundingStartBlock);\n', '    assert(block.number <= fundingEndBlock);\n', '    require(msg.value > 0);\n', "    uint256 tokens = mul(msg.value, exchangeRate()); // check that we're not over totals\n", '    funded = add(funded, tokens);\n', '    assert(funded <= totalCap);\n', '    assert(epc.transfer(msg.sender, tokens));\n', '  }\n', '\n', '  /*\n', '   * caculate the crowdsale rate per eth\n', '   */\n', '  function exchangeRate() public constant returns(uint256) {\n', '    if (block.number<=fundingStartBlock+43200) return 10000; // early price\n', '    if (block.number<=fundingStartBlock+2*43200) return 8000; // crowdsale price\n', '    return 7000; // default price\n', '  }\n', '\n', '  /*\n', '   * unit test for crowdsale exchange rate\n', '   */\n', '  function testExchangeRate(uint blockNumber) public constant returns(uint256) {\n', '    if (blockNumber <= fundingStartBlock+43200) return 10000; // early price\n', '    if (blockNumber <= fundingStartBlock+2*43200) return 8000; // crowdsale price\n', '    return 7000; // default price\n', '  }\n', '\n', '  /*\n', '   * unit test for calculate funded amount\n', '   */\n', '  function testFunded(uint256 amount) public constant returns(uint256) {\n', '    uint256 tokens = mul(amount, exchangeRate());\n', '    return add(funded, tokens);\n', '  }\n', '\n', '  /*\n', '   * unamed function for crowdsale\n', '   */\n', '  function () public payable {\n', '    crowdSale();\n', '  }\n', '\n', '  /*\n', '   * withrawal the crowd eth\n', '   */\n', '  function withdrawal() public onlyOwner {\n', '    msg.sender.transfer(this.balance);\n', '  }\n', '\n', '  /*\n', '   * stop the crowdsale\n', '   */\n', '  function stop() public onlyOwner {\n', '    isFinalized = true;\n', '  }\n', '\n', '  /*\n', '   * start the crowdsale\n', '   */\n', '  function start() public onlyOwner {\n', '    isFinalized = false;\n', '  }\n', '\n', '  /*\n', '   * retrieve tokens from the contract\n', '   */\n', '  function retrieveTokens(uint256 amount) public onlyOwner {\n', '    assert(epc.transfer(owner, amount));\n', '  }\n', '\n', '  /*\n', '   * kill the contract from the blockchain\n', '   * and retrieve the tokens and balance to the owner\n', '   */\n', '  function kill() public onlyOwner {\n', '    epc.transfer(owner, epc.balanceOf(this));\n', '    selfdestruct(owner);\n', '  }\n', '}']
