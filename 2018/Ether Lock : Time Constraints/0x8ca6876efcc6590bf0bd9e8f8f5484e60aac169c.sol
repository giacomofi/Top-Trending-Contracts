['pragma solidity ^0.4.24;\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', 'contract SEcoinAbstract {function unlock() public;}\n', '\n', 'contract SECrowdsale {\n', '        \n', '        using SafeMath for uint256;\n', '        \n', '        // The token being sold\n', '        address constant public SEcoin = 0xe45b7cd82ac0f3f6cfc9ecd165b79d6f87ed2875;//"SEcoin address"\n', '        \n', '        // start and end timestamps where investments are allowed (both inclusive)\n', '        uint256 public startTime;\n', '        uint256 public endTime;\n', '          \n', '        // address where funds are collected\n', '        address public SEcoinWallet = 0x5C737AdC09a0cFA1C9b83E199971a677163ddd07;//"SEcoin all token inside & ICO ether";\n', '        address public SEcoinsetWallet = 0x52873e9191f21a26ddc8b65e5dddbac6b73b69e8;//"control SEcoin SmartContract address"\n', '          \n', '        // how many token units a buyer gets per wei\n', '        uint256 public rate = 6000;//"ICO start rate"\n', '        \n', '        // amount of raised money in wei\n', '        uint256 public weiRaised;\n', '        uint256 public weiSold;\n', '          \n', '        //storage address and amount\n', '        address public SEcoinbuyer;\n', '        address[] public SEcoinbuyerevent;\n', '        uint256[] public SEcoinAmountsevent;\n', '        uint256[] public SEcoinmonth;\n', '        uint public firstbuy;\n', '        uint SEcoinAmounts ;\n', '        uint SEcoinAmountssend;\n', '\n', '          \n', '        mapping(address => uint) public icobuyer;\n', '        mapping(address => uint) public icobuyer2;\n', '          \n', '        event TokenPurchase(address indexed purchaser, address indexed SEcoinbuyer, uint256 value, uint256 amount,uint SEcoinAmountssend);\n', '        \n', '     // fallback function can be used to buy tokens\n', '    function () external payable {buyTokens(msg.sender);}\n', '      \n', '    //check buyer\n', '    function buyer(address SEcoinbuyer) internal{\n', '          \n', '        if(icobuyer[msg.sender]==0){\n', '            icobuyer[msg.sender] = firstbuy;\n', '            icobuyer2[msg.sender] = firstbuy;\n', '            firstbuy++;\n', '            //event buyer \n', '            SEcoinbuyerevent.push(SEcoinbuyer);\n', '            SEcoinAmountsevent.push(SEcoinAmounts);\n', '            SEcoinmonth.push(0);\n', '    \n', '        }else if(icobuyer[msg.sender]!=0){\n', '            uint i = icobuyer2[msg.sender];\n', '            SEcoinAmountsevent[i]=SEcoinAmountsevent[i]+SEcoinAmounts;\n', '            icobuyer2[msg.sender]=icobuyer[msg.sender];}\n', '        }\n', '    \n', '      // low level token purchase function\n', '    function buyTokens(address SEcoinbuyer) public payable {\n', '        require(SEcoinbuyer != address(0x0));\n', '        require(selltime());\n', '        require(msg.value>=1*1e16 && msg.value<=200*1e18);\n', '        \n', '        // calculate token amount to be created\n', '        SEcoinAmounts = calculateObtainedSEcoin(msg.value);\n', '        SEcoinAmountssend= calculateObtainedSEcoinsend(SEcoinAmounts);\n', '        \n', '        // update state\n', '        weiRaised = weiRaised.add(msg.value);\n', '        weiSold = weiSold.add(SEcoinAmounts);\n', '            \n', '        //sendtoken\n', '        require(ERC20Basic(SEcoin).transfer(SEcoinbuyer, SEcoinAmountssend));\n', '            \n', '        //call function\n', '        buyer(msg.sender);\n', '        checkRate();\n', '        forwardFunds();\n', '            \n', '        //write event \n', '        emit TokenPurchase(msg.sender, SEcoinbuyer, msg.value, SEcoinAmounts,SEcoinAmountssend);\n', '    }\n', '    \n', '    // send ether to the fund collection wallet\n', '    // override to create custom fund forwarding mechanisms\n', '    function forwardFunds() internal {\n', '        SEcoinWallet.transfer(msg.value);\n', '    }\n', '    //calculate Amount\n', '    function calculateObtainedSEcoin(uint256 amountEtherInWei) public view returns (uint256) {\n', '        checkRate();\n', '        return amountEtherInWei.mul(rate);\n', '    }\n', '    function calculateObtainedSEcoinsend (uint SEcoinAmounts)public view returns (uint){\n', '        return SEcoinAmounts.div(10);\n', '    }\n', '    \n', '    // return true if the transaction can buy tokens\n', '    function selltime() internal view returns (bool) {\n', '        bool withinPeriod = now >= startTime && now <= endTime;\n', '        return withinPeriod;\n', '    }\n', '    \n', '    // return true if crowdsale event has ended\n', '    function hasEnded() public view returns (bool) {\n', '        bool isEnd = now > endTime || weiRaised >= 299600000*1e18;//ico max token\n', '        return isEnd;\n', '    }\n', '    \n', '    //releaseSEcoin only admin \n', '    function releaseSEcoin() public returns (bool) {\n', '        require (msg.sender == SEcoinsetWallet);\n', '        require (hasEnded() && startTime != 0);\n', '        SEcoinAbstract(SEcoin).unlock();\n', '    }\n', '    \n', '    //getunselltoken only admin\n', '    function getunselltoken()public returns(bool){\n', '        require (msg.sender == SEcoinsetWallet);\n', '        require (hasEnded() && startTime != 0);\n', '        uint256 remainedSEcoin = ERC20Basic(SEcoin).balanceOf(this)-weiSold;\n', '        ERC20Basic(SEcoin).transfer(SEcoinWallet, remainedSEcoin);    \n', '    }\n', '    \n', '    //backup\n', '    function getunselltokenB()public returns(bool){\n', '        require (msg.sender == SEcoinsetWallet);\n', '        require (hasEnded() && startTime != 0);\n', '        uint256 remainedSEcoin = ERC20Basic(SEcoin).balanceOf(this);\n', '        ERC20Basic(SEcoin).transfer(SEcoinWallet, remainedSEcoin);    \n', '    }\n', '    \n', '    // be sure to get the token ownerships\n', '    function start() public returns (bool) {\n', '        require (msg.sender == SEcoinsetWallet);\n', '        require (firstbuy==0);\n', '        startTime = 1541001600;//startTime\n', '        endTime = 1543593599;//endTime\n', '        SEcoinbuyerevent.push(SEcoinbuyer);\n', '        SEcoinAmountsevent.push(SEcoinAmounts);\n', '        SEcoinmonth.push(0);\n', '        firstbuy=1;\n', '    }\n', '    \n', '    //Change setting Wallet\n', '    function changeSEcoinWallet(address _SEcoinsetWallet) public returns (bool) {\n', '        require (msg.sender == SEcoinsetWallet);\n', '        SEcoinsetWallet = _SEcoinsetWallet;\n', '    }\n', '      \n', '    //ckeckRate\n', '    function checkRate() public returns (bool) {\n', '        if (now>=startTime && now< 1541433599){\n', '            rate = 6000;//section one\n', '        }else if (now >= 1541433599 && now < 1542297599) {\n', '            rate = 5000;//section two\n', '        }else if (now >= 1542297599 && now < 1543161599) {\n', '            rate = 4000;//section three\n', '        }else if (now >= 1543161599)  {\n', '            rate = 3500;//section four\n', '        }\n', '    }\n', '      \n', '    //get ICOtoken in everyMonth\n', '    function getICOtoken(uint number)public returns(string){\n', '        require(SEcoinbuyerevent[number] == msg.sender);\n', '        require(now>=1543593600&&now<=1567267199);\n', '        uint  _month;\n', '        \n', '        //December 2018 two\n', '        if(now>=1543593600 && now<=1546271999 && SEcoinmonth[number]==0){\n', '            require(SEcoinmonth[number]==0);\n', '            ERC20Basic(SEcoin).transfer(SEcoinbuyerevent[number], SEcoinAmountsevent[number].div(10));\n', '            SEcoinmonth[number]=1;\n', '        }\n', '        \n', '        //February January 2019 three\n', '        else if(now>=1546272000 && now<=1548950399 && SEcoinmonth[number]<=1){\n', '            if(SEcoinmonth[number]==1){\n', '            ERC20Basic(SEcoin).transfer(SEcoinbuyerevent[number], SEcoinAmountsevent[number].div(10));\n', '            SEcoinmonth[number]=2;\n', '            }else if(SEcoinmonth[number]<1){\n', '            _month = 2-SEcoinmonth[number];\n', '            ERC20Basic(SEcoin).transfer(SEcoinbuyerevent[number], (SEcoinAmountsevent[number].div(10))*_month); \n', '            SEcoinmonth[number]=2;}\n', '        }\n', '        \n', '        //February 2019 four\n', '        else if(now>=1548950400 && now<=1551369599 && SEcoinmonth[number]<=2){\n', '            if(SEcoinmonth[number]==2){\n', '            ERC20Basic(SEcoin).transfer(SEcoinbuyerevent[number], SEcoinAmountsevent[number].div(10));\n', '            SEcoinmonth[number]=3;\n', '            }else if(SEcoinmonth[number]<2){\n', '            _month = 3-SEcoinmonth[number];\n', '            ERC20Basic(SEcoin).transfer(SEcoinbuyerevent[number], (SEcoinAmountsevent[number].div(10))*_month); \n', '            SEcoinmonth[number]=3;}\n', '        }\n', '        \n', '        //March 2019 five\n', '        else if(now>=1551369600 && now<=1554047999 && SEcoinmonth[number]<=3){\n', '            if(SEcoinmonth[number]==3){\n', '            ERC20Basic(SEcoin).transfer(SEcoinbuyerevent[number], SEcoinAmountsevent[number].div(10));\n', '            SEcoinmonth[number]=4;\n', '            }else if(SEcoinmonth[number]<3){\n', '            _month = 4-SEcoinmonth[number];\n', '            ERC20Basic(SEcoin).transfer(SEcoinbuyerevent[number], (SEcoinAmountsevent[number].div(10))*_month); \n', '            SEcoinmonth[number]=4;}\n', '        }\n', '        \n', '        //April 2019 six\n', '        else if(now>=1554048000 && now<=1556639999 && SEcoinmonth[number]<=4){\n', '            if(SEcoinmonth[number]==4){\n', '            ERC20Basic(SEcoin).transfer(SEcoinbuyerevent[number], SEcoinAmountsevent[number].div(10));\n', '            SEcoinmonth[number]=5;\n', '            }else if(SEcoinmonth[number]<4){\n', '            _month = 5-SEcoinmonth[number];\n', '            ERC20Basic(SEcoin).transfer(SEcoinbuyerevent[number], (SEcoinAmountsevent[number].div(10))*_month); \n', '           SEcoinmonth[number]=5;}\n', '        }\n', '        \n', '        //May 2019 seven\n', '        else if(now>=1556640000 && now<=1559318399 && SEcoinmonth[number]<=5){\n', '            if(SEcoinmonth[number]==5){\n', '            ERC20Basic(SEcoin).transfer(SEcoinbuyerevent[number], SEcoinAmountsevent[number].div(10));\n', '            SEcoinmonth[number]=6;\n', '            }else if(SEcoinmonth[number]<5){\n', '            _month = 6-SEcoinmonth[number];\n', '            ERC20Basic(SEcoin).transfer(SEcoinbuyerevent[number], (SEcoinAmountsevent[number].div(10))*_month); \n', '            SEcoinmonth[number]=6;}\n', '        }\n', '        \n', '        //June 2019 eight\n', '        else if(now>=1559318400 && now<=1561910399 && SEcoinmonth[number]<=6){\n', '            if(SEcoinmonth[number]==6){\n', '            ERC20Basic(SEcoin).transfer(SEcoinbuyerevent[number], SEcoinAmountsevent[number].div(10));\n', '            SEcoinmonth[number]=7;\n', '            }else if(SEcoinmonth[number]<6){\n', '            _month = 7-SEcoinmonth[number];\n', '            ERC20Basic(SEcoin).transfer(SEcoinbuyerevent[number], (SEcoinAmountsevent[number].div(10))*_month); \n', '            SEcoinmonth[number]=7;}\n', '        }\n', '        \n', '        //July 2019 nine August\n', '        else if(now>=1561910400 && now<=1564588799 && SEcoinmonth[number]<=7){\n', '            if(SEcoinmonth[number]==7){\n', '            ERC20Basic(SEcoin).transfer(SEcoinbuyerevent[number], SEcoinAmountsevent[number].div(10));\n', '            SEcoinmonth[number]=8;\n', '            }else if(SEcoinmonth[number]<7){\n', '            _month = 8-SEcoinmonth[number];\n', '            ERC20Basic(SEcoin).transfer(SEcoinbuyerevent[number], (SEcoinAmountsevent[number].div(10))*_month); \n', '            SEcoinmonth[number]=8;}\n', '        }\n', '            \n', '        //August 2019 ten\n', '        else if(now>=1564588800 && now<=1567267199 && SEcoinmonth[number]<=8){\n', '            if(SEcoinmonth[number]==8){\n', '            ERC20Basic(SEcoin).transfer(SEcoinbuyerevent[number], SEcoinAmountsevent[number].div(10));\n', '            SEcoinmonth[number]=9;\n', '            }else if(SEcoinmonth[number]<8){\n', '            _month = 9-SEcoinmonth[number];\n', '            ERC20Basic(SEcoin).transfer(SEcoinbuyerevent[number], (SEcoinAmountsevent[number].div(10))*_month); \n', '            SEcoinmonth[number]=9;}\n', '        }    \n', '        \n', '        //get all token\n', '        else if(now<1543593600 || now>1567267199 || SEcoinmonth[number]>=9){\n', '            revert("Get all tokens or endtime");\n', '        }\n', '    }\n', '}']