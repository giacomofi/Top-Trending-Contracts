['pragma solidity ^0.4.7;\n', 'contract MobaBase {\n', '    address public owner = 0x0;\n', '    bool public isLock = false;\n', '    constructor ()  public  {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    event transferToOwnerEvent(uint256 price);\n', '    \n', '    modifier onlyOwner {\n', '        require(msg.sender == owner,"only owner can call this function");\n', '        _;\n', '    }\n', '    \n', '    modifier notLock {\n', '        require(isLock == false,"contract current is lock status");\n', '        _;\n', '    }\n', '    \n', '    modifier msgSendFilter() {\n', '        address addr = msg.sender;\n', '        uint size;\n', '        assembly { size := extcodesize(addr) }\n', '        require(size <= 0,"address must is not contract");\n', '        require(msg.sender == tx.origin, "msg.sender must equipt tx.origin");\n', '        _;\n', '    }\n', '    \n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '    \n', '    function transferToOwner()    \n', '    onlyOwner \n', '    msgSendFilter \n', '    public {\n', '        uint256 totalBalace = address(this).balance;\n', '        owner.transfer(totalBalace);\n', '        emit transferToOwnerEvent(totalBalace);\n', '    }\n', '    \n', '    function updateLock(bool b) onlyOwner public {\n', '        \n', '        require(isLock != b," updateLock new status == old status");\n', '        isLock = b;\n', '    }\n', '    \n', '   \n', '}\n', '\n', '\n', 'contract IRandomUtil{\n', '     function getBaseRandom() public view returns (bytes32);\n', '     function addContractAddr() public;\n', '}\n', '\n', 'contract BRRandom {\n', '    \n', '    IRandomUtil private baseRandom;\n', '    address internal mainnet_random_addr = 0x31E0d4b2d086e8Bfc25A10bE133dEc09cb5284d2;\n', '    \n', '    function initRandom (address addr) internal  {\n', '        \n', '        require(baseRandom == address(0x0),"BRRandom has been init!");\n', '        baseRandom = IRandomUtil(addr);\n', '        baseRandom.addContractAddr();\n', '        require(getBaseRandom() != 0,"random init has error");\n', '    }\n', '    \n', '    function getBaseRandom() public view returns (bytes32) {\n', '         return baseRandom.getBaseRandom();\n', '     }\n', '}\n', '\n', '///////////////////////////////////////////////yaoq邀请///////////////////////////\n', '\n', 'contract IInviteData{\n', '    \n', '    function GetAddressByName(bytes32 name) public view returns (address);\n', '}\n', 'contract BRInvite{\n', '    \n', '    uint private inviteRate = 10;\n', '    IInviteData public mInviteData;\n', '\n', '    address internal mainnet_invite_addr = 0x008796E9e3b15869D444B8AabdA0d3ea7eEafDEa96;\n', '    \n', '    function initInviteAddr (address addr,uint rate) internal  {\n', '        \n', '        require(mInviteData == address(0x0),"BRInvite has been init!");\n', '        mInviteData = IInviteData(addr);\n', '        inviteRate  = rate;\n', '    }\n', '    \n', '    function GetAddressByName(bytes32 name) public view returns (address) {\n', '         return mInviteData.GetAddressByName(name);\n', '    }\n', '    \n', '    \n', '   function getInviteRate() public view returns (uint) {\n', '       return inviteRate;\n', '   }\n', '}\n', 'contract IConfigData {\n', '   function getPrice() public view returns (uint256);\n', '   function getWinRate(uint8 winCount) public pure returns (uint);\n', '   function getOverRate(uint8 winCount) public pure returns (uint);\n', '   function getPumpRate() public view returns(uint8);\n', '   function getBaseRandom() public returns (bytes32);\n', '   function GetAddressByName(bytes32 name) public view returns (address);\n', '   function getInviteRate() public view returns (uint);\n', '   function loseHandler(address addr,uint8 wincount) public ;\n', '}\n', '\n', 'contract IERC20Token {\n', '    function name() public view returns (string) ;\n', '    function symbol() public view returns (string); \n', '    function decimals() public view returns (uint8); \n', '    function totalSupply() public view returns (uint256); \n', '    function balanceOf(address _owner) public view returns (uint256);\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '}\n', '\n', 'contract ConvertUtil{\n', '    \n', '     function bytesToUint(bytes b) internal pure returns (uint256){\n', '        uint256 number;\n', '        for(uint i=0;i<b.length;i++){\n', '            number = number + uint(b[i])*(2**(8*(b.length-(i+1))));\n', '        }\n', '        return number;\n', '    }\n', '    \n', '   function slice(bytes memory data,uint start,uint len) internal pure returns(bytes){\n', '      bytes memory b=new bytes(len);\n', '      for(uint i=0;i<len;i++){\n', '          b[i]=data[i+start];\n', '      }\n', '      return b;\n', '  }\n', '    \n', '    function stringToBytes32( bytes source) internal pure returns (bytes32 result) {\n', '  \n', '        if (source.length == 0) {\n', '            return 0x0;\n', '        }\n', '    \n', '        assembly {\n', '            result := mload(add(source, 32))\n', '        }\n', '    }\n', '    \n', '    function isNotContract(address addr) internal view returns (bool) {\n', '        \n', '        uint size;\n', '        assembly { size := extcodesize(addr) }\n', '        require(size <= 0,"address must is not contract");\n', '        \n', '        if(size <= 0)\n', '            return true;\n', '        return false;\n', '    }\n', '}\n', '\n', 'contract BRBasketballTokenControl is MobaBase,ConvertUtil{\n', '    \n', '    Winner public mWinner;\n', '\n', '    uint gameIndex;\n', '    IConfigData public mNewConfig;\n', '    IConfigData public mConfig = IConfigData(0x00e04c5271ee336cc7b499a2765a752f3f99e65fee);\n', '    IERC20Token public token  =  IERC20Token(0x007a6eBE5Cc20DA8655640fC1112522367569F2114);\n', '\n', '    constructor(address config,address tokenAddr) public {\n', '        mConfig = IConfigData(config);\n', '        if(token != address(0)){\n', '            token   = IERC20Token(tokenAddr);\n', '        }\n', '        startNewGame();\n', '    }\n', '    event pkEvent(address winAddr,address pkAddr,bytes32 pkInviteName,uint winRate,uint overRate,uint curWinRate,uint curOverRate,bool pkIsWin,uint256 price);\n', '    event gameOverEvent(uint gameIndex,address winAddr,uint256 price,uint256 totalBalace);\n', '    struct Winner {\n', '        uint8 num;\n', '        uint8 winCount;\n', '        address addr;\n', '    }\n', '    \n', '    function updateConfig(address newAddr)\n', '    onlyOwner \n', '    public{\n', '        mNewConfig = IConfigData(newAddr);\n', '    }\n', '    \n', '\n', '    \n', '    ////////////////////////////////////////////////////////\n', '    // handle logic gate after receive Token\n', '    ////////////////////////////////////////////////////////\n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public {\n', '       \n', '        IERC20Token t = IERC20Token(_token);\n', '        require(_token == address(token),"token is error" );\n', '        require(_from == tx.origin,  "token from must equal tx.origin");\n', '        require(isNotContract(_from),"token from  is not Contract");\n', '        require(_value ==  mConfig.getPrice(),"value is error" );\n', '        require(t.transferFrom(_from, this, _value),"transferFrom has error");\n', '\n', '        bytes memory inviteBytes = slice(_extraData,0,_extraData.length-1);\n', '        bytes memory numBytes = slice(_extraData,_extraData.length-1,1);\n', '        uint8  num = uint8(bytesToUint(numBytes));\n', '        bytes32 inviteName = stringToBytes32(inviteBytes);\n', '        PK(_from,num,inviteName);\n', '    }\n', '    \n', '    \n', '\n', '    function PK(address pkAddr,uint8 num,bytes32 name) \n', '    notLock\n', '    private  {\n', '        \n', '        uint winRate  = mConfig.getWinRate(mWinner.winCount);\n', '\n', '        uint curWinRate ; uint curOverRate;\n', '        (curWinRate,curOverRate) = getRandom(100);\n', '        \n', '        inviteHandler(name);\n', '        address oldWinAddr = mWinner.addr;\n', '        if(mWinner.addr == address(0) ) {\n', '            mWinner = Winner(num,0,pkAddr);\n', '        }\n', '        else if( winRate < curWinRate ) {\n', '            mWinner = Winner(num,1,pkAddr);\n', '        }\n', '        else{\n', '       \n', '            mWinner.winCount = mWinner.winCount + 1;\n', '        }\n', '        bool pkIsWin = (pkAddr == mWinner.addr);\n', '        uint overRate = mConfig.getOverRate(mWinner.winCount);\n', '        emit pkEvent(mWinner.addr,pkAddr,name, winRate, overRate, curWinRate, curOverRate,pkIsWin, mConfig.getPrice());\n', '        if(oldWinAddr != address(0) && curOverRate < overRate  ) {\n', '        \n', '          require(mWinner.addr != address(0),"Winner.addr is null");\n', '          \n', '          uint pumpRate = mConfig.getPumpRate();\n', '          uint totalBalace = token.balanceOf(address(this));\n', '          \n', '          uint giveToOwn   = totalBalace * pumpRate / 100;\n', '          uint giveToActor = totalBalace - giveToOwn;\n', '          \n', '          token.transfer(owner,giveToOwn);\n', '          token.transfer(mWinner.addr,giveToActor);\n', '            \n', '         emit gameOverEvent(gameIndex, mWinner.addr,mConfig.getPrice(),giveToActor);\n', '          startNewGame();\n', '        }\n', '    }\n', '    \n', '    function startNewGame() private {\n', '        \n', '        gameIndex++;\n', '        mWinner = Winner(0,1,address(0));\n', '        if(mNewConfig != address(0) && mNewConfig != mConfig){\n', '            mConfig = mNewConfig;\n', '        }\n', '    }\n', '    \n', '    function inviteHandler(bytes32 inviteName) private {\n', '        \n', '        if(mConfig == address(0)) {\n', '          return ;\n', '        }\n', '        if( mConfig.getInviteRate() <= 0 ){\n', '            return;\n', '        }\n', '        address inviteAddr = mConfig.GetAddressByName(inviteName);\n', '        if(inviteAddr != address(0)) {\n', '           uint giveToToken   = mConfig.getPrice() * mConfig.getInviteRate() / 100;\n', '           token.transfer(inviteAddr,giveToToken);\n', '        }\n', '    }\n', '    function getRandom(uint maxNum) private returns(uint,uint) {\n', '     \n', '        bytes32 curRandom = mConfig.getBaseRandom();\n', '        \n', '        curRandom = keccak256(abi.encodePacked(tx.origin,now,tx.gasprice,curRandom,block.timestamp ,block.number, block.difficulty,((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)) ));\n', '\n', '        uint value1 = (uint(curRandom) % maxNum);\n', '        curRandom  = keccak256(abi.encodePacked(tx.origin,now,tx.gasprice,curRandom,value1,block.timestamp ,block.number, block.difficulty,((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)) ));\n', '        uint value2 = (uint(curRandom) % maxNum);\n', '       \n', '        return (value1,value2);\n', '    }\n', '    \n', '    function getGameInfo() public view returns (uint index,uint price,uint256 balace, \n', '                                          uint winNum,uint winCount,address WinAddr,uint winRate,uint winOverRate,\n', '                                          uint pkOverRate\n', '                                          ){\n', '        uint curbalace    =  token.balanceOf(address(this));\n', '        uint winnernum   = mWinner.num;\n', '        uint winnercount = mWinner.winCount;\n', '        address winneraddr  = mWinner.addr;\n', '        uint curWinRate  = mConfig.getWinRate(mWinner.winCount);\n', '        uint curOverRate = mConfig.getOverRate(mWinner.winCount);\n', '        uint curPkOverRate= mConfig.getOverRate(1);\n', '        return (gameIndex, mConfig.getPrice(), curbalace,\n', '                winnernum,winnercount,winneraddr,curWinRate,curOverRate,\n', '                curPkOverRate);\n', '    }\n', '    function () payable public {\n', '        require(msg.value == 0 );\n', '    }\n', '}']