['pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract TokenInterface {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function getMaxTotalSupply() public view returns (uint256);\n', '    function mint(address _to, uint256 _amount) public returns (bool);\n', '    function transfer(address _to, uint256 _amount) public returns (bool);\n', '\n', '    function allowance(\n', '        address _who,\n', '        address _spender\n', '    )\n', '        public\n', '        view\n', '        returns (uint256);\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '        public\n', '        returns (bool);\n', '}\n', '\n', '\n', 'contract MiningTokenInterface {\n', '    function multiMint(address _to, uint256 _amount) external;\n', '    function getTokenTime(uint256 _tokenId) external returns(uint256);\n', '    function mint(address _to, uint256 _id) external;\n', '    function ownerOf(uint256 _tokenId) public view returns (address);\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _owner) public view returns (uint256 _balance);\n', '    function tokenByIndex(uint256 _index) public view returns (uint256);\n', '\n', '    function arrayOfTokensByAddress(address _holder)\n', '        public\n', '        view\n', '        returns(uint256[]);\n', '\n', '    function getTokensCount(address _owner) public returns(uint256);\n', '\n', '    function tokenOfOwnerByIndex(\n', '        address _owner,\n', '        uint256 _index\n', '    )\n', '        public\n', '        view\n', '        returns (uint256 _tokenId);\n', '}\n', '\n', '\n', 'contract Management {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public startPriceForHLPMT = 10000;\n', '    uint256 public maxHLPMTMarkup = 40000;\n', '    uint256 public stepForPrice = 1000;\n', '\n', '    uint256 public startTime;\n', '    uint256 public lastMiningTime;\n', '\n', '    // default value\n', '    uint256 public decimals = 18;\n', '\n', '    TokenInterface public token;\n', '    MiningTokenInterface public miningToken;\n', '\n', '    address public dao;\n', '    address public fund;\n', '    address public owner;\n', '\n', '    // num of mining times\n', '    uint256 public numOfMiningTimes;\n', '\n', '    mapping(address => uint256) public payments;\n', '    mapping(address => uint256) public paymentsTimestamps;\n', '\n', '    // mining time => mining reward\n', '    mapping(uint256 => uint256) internal miningReward;\n', '\n', '    // id mining token => getting reward last mining\n', '    mapping(uint256 => uint256) internal lastGettingReward;\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyDao() {\n', '        require(msg.sender == dao);\n', '        _;\n', '    }\n', '\n', '    constructor(\n', '        address _token,\n', '        address _miningToken,\n', '        address _dao,\n', '        address _fund\n', '    )\n', '        public\n', '    {\n', '        require(_token != address(0));\n', '        require(_miningToken != address(0));\n', '        require(_dao != address(0));\n', '        require(_fund != address(0));\n', '\n', '        startTime = now;\n', '        lastMiningTime = startTime - (startTime % (1 days)) - 1 days;\n', '        owner = msg.sender;\n', '\n', '        token = TokenInterface(_token);\n', '        miningToken = MiningTokenInterface(_miningToken);\n', '        dao = _dao;\n', '        fund = _fund;\n', '    }\n', '\n', '    /**\n', '     * @dev Exchanges the HLT tokens to HLPMT tokens. Works up to 48 HLPMT\n', '     * tokens at one-time buying. Should call after approving HLT tokens to\n', '     * manager address.\n', '     */\n', '    function buyHLPMT() external {\n', '\n', '        uint256 _currentTime = now;\n', '        uint256 _allowed = token.allowance(msg.sender, address(this));\n', '        uint256 _currentPrice = getPrice(_currentTime);\n', '        require(_allowed >= _currentPrice);\n', '\n', '        //remove the remainder\n', '        uint256 _hlpmtAmount = _allowed.div(_currentPrice);\n', '        _allowed = _hlpmtAmount.mul(_currentPrice);\n', '\n', '        require(token.transferFrom(msg.sender, fund, _allowed));\n', '\n', '        for (uint256 i = 0; i < _hlpmtAmount; i++) {\n', '            uint256 _id = miningToken.totalSupply();\n', '            miningToken.mint(msg.sender, _id);\n', '            lastGettingReward[_id] = numOfMiningTimes;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Produces the mining process and sends reward to dao and fund.\n', '     */\n', '    function mining() external {\n', '\n', '        uint256 _currentTime = now;\n', '        require(_currentTime > _getEndOfLastMiningDay());\n', '\n', '\n', '        uint256 _missedDays = (_currentTime - lastMiningTime) / (1 days);\n', '\n', '        updateLastMiningTime(_currentTime);\n', '\n', '        for (uint256 i = 0; i < _missedDays; i++) {\n', '            // 0.1% daily from remaining unmined tokens.\n', '            uint256 _dailyTokens = token.getMaxTotalSupply().sub(token.totalSupply()).div(1000);\n', '\n', '            uint256 _tokensToDao = _dailyTokens.mul(3).div(10); // 30 percent\n', '            token.mint(dao, _tokensToDao);\n', '\n', '            uint256 _tokensToFund = _dailyTokens.mul(3).div(10); // 30 percent\n', '            token.mint(fund, _tokensToFund);\n', '\n', '            uint256 _miningTokenSupply = miningToken.totalSupply();\n', '            uint256 _tokensToMiners = _dailyTokens.mul(4).div(10); // 40 percent\n', '            uint256 _tokensPerMiningToken = _tokensToMiners.div(_miningTokenSupply);\n', '\n', '            miningReward[++numOfMiningTimes] = _tokensPerMiningToken;\n', '\n', '            token.mint(address(this), _tokensToMiners);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Sends the daily mining reward to HLPMT holder.\n', '     */\n', '    function getReward(uint256[] tokensForReward) external {\n', '        uint256 _rewardAmount = 0;\n', '        for (uint256 i = 0; i < tokensForReward.length; i++) {\n', '            if (\n', '                msg.sender == miningToken.ownerOf(tokensForReward[i]) &&\n', '                numOfMiningTimes > getLastRewardTime(tokensForReward[i])\n', '            ) {\n', '                _rewardAmount += _calculateReward(tokensForReward[i]);\n', '                setLastRewardTime(tokensForReward[i], numOfMiningTimes);\n', '            }\n', '        }\n', '\n', '        require(_rewardAmount > 0);\n', '        token.transfer(msg.sender, _rewardAmount);\n', '    }\n', '\n', '    function checkReward(uint256[] tokensForReward) external view returns (uint256) {\n', '        uint256 reward = 0;\n', '\n', '        for (uint256 i = 0; i < tokensForReward.length; i++) {\n', '            if (numOfMiningTimes > getLastRewardTime(tokensForReward[i])) {\n', '                reward += _calculateReward(tokensForReward[i]);\n', '            }\n', '        }\n', '\n', '        return reward;\n', '    }\n', '\n', '    /**\n', '     * @param _tokenId token id\n', '     * @return timestamp of token creation\n', '     */\n', '    function getLastRewardTime(uint256 _tokenId) public view returns(uint256) {\n', '        return lastGettingReward[_tokenId];\n', '    }\n', '\n', '    /**\n', '    * @dev Sends the daily mining reward to HLPMT holder.\n', '    */\n', '    function sendReward(uint256[] tokensForReward) public onlyOwner {\n', '        for (uint256 i = 0; i < tokensForReward.length; i++) {\n', '            if (numOfMiningTimes > getLastRewardTime(tokensForReward[i])) {\n', '                uint256 reward = _calculateReward(tokensForReward[i]);\n', '                setLastRewardTime(tokensForReward[i], numOfMiningTimes);\n', '                token.transfer(miningToken.ownerOf(tokensForReward[i]), reward);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the HLPMT token amount of holder.\n', '     */\n', '    function miningTokensOf(address holder) public view returns (uint256[]) {\n', '        return miningToken.arrayOfTokensByAddress(holder);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets the DAO address\n', '     * @param _dao DAO address.\n', '     */\n', '    function setDao(address _dao) public onlyOwner {\n', '        require(_dao != address(0));\n', '        dao = _dao;\n', '    }\n', '\n', '    /**\n', '     * @dev Sets the fund address\n', '     * @param _fund Fund address.\n', '     */\n', '    function setFund(address _fund) public onlyOwner {\n', '        require(_fund != address(0));\n', '        fund = _fund;\n', '    }\n', '\n', '    /**\n', '     * @dev Sets the token address\n', '     * @param _token Token address.\n', '     */\n', '    function setToken(address _token) public onlyOwner {\n', '        require(_token != address(0));\n', '        token = TokenInterface(_token);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets the mining token address\n', '     * @param _miningToken Mining token address.\n', '     */\n', '    function setMiningToken(address _miningToken) public onlyOwner {\n', '        require(_miningToken != address(0));\n', '        miningToken = MiningTokenInterface(_miningToken);\n', '    }\n', '\n', '    /**\n', '     * @return uint256 the current HLPMT token price in HLT (without decimals).\n', '     */\n', '    function getPrice(uint256 _timestamp) public view returns(uint256) {\n', '        uint256 _raising = _timestamp.sub(startTime).div(30 days);\n', '        _raising = _raising.mul(stepForPrice);\n', '        if (_raising > maxHLPMTMarkup) _raising = maxHLPMTMarkup;\n', '        return (startPriceForHLPMT + _raising) * 10 ** 18;\n', '    }\n', '\n', '    /**\n', '     * @param _numOfMiningTime is time\n', '     * @return getting token reward\n', '     */\n', '    function getMiningReward(uint256 _numOfMiningTime) public view returns (uint256) {\n', '        return miningReward[_numOfMiningTime];\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the calculated reward amount.\n', '     */\n', '    function _calculateReward(uint256 tokenID)\n', '        internal\n', '        view\n', '        returns (uint256 reward)\n', '    {\n', '        for (uint256 i = getLastRewardTime(tokenID) + 1; i <= numOfMiningTimes; i++) {\n', '            reward += miningReward[i];\n', '        }\n', '        return reward;\n', '    }\n', '\n', '    /**\n', '     * @dev set last getting token reward time\n', '     */\n', '    function setLastRewardTime(uint256 _tokenId, uint256 _num) internal {\n', '        lastGettingReward[_tokenId] = _num;\n', '    }\n', '\n', '    /**\n', '     * @dev set last getting token reward time\n', '     */\n', '    function updateLastMiningTime(uint256 _currentTime) internal {\n', '        lastMiningTime = _currentTime - _currentTime % (1 days);\n', '    }\n', '\n', '    /**\n', '     * @return uint256 the unix timestamp of the end of the last mining day.\n', '     */\n', '    function _getEndOfLastMiningDay() internal view returns(uint256) {\n', '        return lastMiningTime + 1 days;\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw accumulated balance, called by payee.\n', '     */\n', '    function withdrawPayments() public {\n', '        address payee = msg.sender;\n', '        uint256 payment = payments[payee];\n', '        uint256 timestamp = paymentsTimestamps[payee];\n', '\n', '        require(payment != 0);\n', '        require(now >= timestamp);\n', '\n', '        payments[payee] = 0;\n', '\n', '        require(token.transfer(msg.sender, payment));\n', '    }\n', '\n', '    /**\n', '     * @dev Called by the payer to store the sent _amount as credit to be pulled.\n', '     * @param _dest The destination address of the funds.\n', '     * @param _amount The amount to transfer.\n', '     */\n', '    function asyncSend(address _dest, uint256 _amount, uint256 _timestamp) external onlyDao {\n', '        payments[_dest] = payments[_dest].add(_amount);\n', '        paymentsTimestamps[_dest] = _timestamp;\n', '        require(token.transferFrom(dao, address(this), _amount));\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract TokenInterface {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function getMaxTotalSupply() public view returns (uint256);\n', '    function mint(address _to, uint256 _amount) public returns (bool);\n', '    function transfer(address _to, uint256 _amount) public returns (bool);\n', '\n', '    function allowance(\n', '        address _who,\n', '        address _spender\n', '    )\n', '        public\n', '        view\n', '        returns (uint256);\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '        public\n', '        returns (bool);\n', '}\n', '\n', '\n', 'contract MiningTokenInterface {\n', '    function multiMint(address _to, uint256 _amount) external;\n', '    function getTokenTime(uint256 _tokenId) external returns(uint256);\n', '    function mint(address _to, uint256 _id) external;\n', '    function ownerOf(uint256 _tokenId) public view returns (address);\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _owner) public view returns (uint256 _balance);\n', '    function tokenByIndex(uint256 _index) public view returns (uint256);\n', '\n', '    function arrayOfTokensByAddress(address _holder)\n', '        public\n', '        view\n', '        returns(uint256[]);\n', '\n', '    function getTokensCount(address _owner) public returns(uint256);\n', '\n', '    function tokenOfOwnerByIndex(\n', '        address _owner,\n', '        uint256 _index\n', '    )\n', '        public\n', '        view\n', '        returns (uint256 _tokenId);\n', '}\n', '\n', '\n', 'contract Management {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public startPriceForHLPMT = 10000;\n', '    uint256 public maxHLPMTMarkup = 40000;\n', '    uint256 public stepForPrice = 1000;\n', '\n', '    uint256 public startTime;\n', '    uint256 public lastMiningTime;\n', '\n', '    // default value\n', '    uint256 public decimals = 18;\n', '\n', '    TokenInterface public token;\n', '    MiningTokenInterface public miningToken;\n', '\n', '    address public dao;\n', '    address public fund;\n', '    address public owner;\n', '\n', '    // num of mining times\n', '    uint256 public numOfMiningTimes;\n', '\n', '    mapping(address => uint256) public payments;\n', '    mapping(address => uint256) public paymentsTimestamps;\n', '\n', '    // mining time => mining reward\n', '    mapping(uint256 => uint256) internal miningReward;\n', '\n', '    // id mining token => getting reward last mining\n', '    mapping(uint256 => uint256) internal lastGettingReward;\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyDao() {\n', '        require(msg.sender == dao);\n', '        _;\n', '    }\n', '\n', '    constructor(\n', '        address _token,\n', '        address _miningToken,\n', '        address _dao,\n', '        address _fund\n', '    )\n', '        public\n', '    {\n', '        require(_token != address(0));\n', '        require(_miningToken != address(0));\n', '        require(_dao != address(0));\n', '        require(_fund != address(0));\n', '\n', '        startTime = now;\n', '        lastMiningTime = startTime - (startTime % (1 days)) - 1 days;\n', '        owner = msg.sender;\n', '\n', '        token = TokenInterface(_token);\n', '        miningToken = MiningTokenInterface(_miningToken);\n', '        dao = _dao;\n', '        fund = _fund;\n', '    }\n', '\n', '    /**\n', '     * @dev Exchanges the HLT tokens to HLPMT tokens. Works up to 48 HLPMT\n', '     * tokens at one-time buying. Should call after approving HLT tokens to\n', '     * manager address.\n', '     */\n', '    function buyHLPMT() external {\n', '\n', '        uint256 _currentTime = now;\n', '        uint256 _allowed = token.allowance(msg.sender, address(this));\n', '        uint256 _currentPrice = getPrice(_currentTime);\n', '        require(_allowed >= _currentPrice);\n', '\n', '        //remove the remainder\n', '        uint256 _hlpmtAmount = _allowed.div(_currentPrice);\n', '        _allowed = _hlpmtAmount.mul(_currentPrice);\n', '\n', '        require(token.transferFrom(msg.sender, fund, _allowed));\n', '\n', '        for (uint256 i = 0; i < _hlpmtAmount; i++) {\n', '            uint256 _id = miningToken.totalSupply();\n', '            miningToken.mint(msg.sender, _id);\n', '            lastGettingReward[_id] = numOfMiningTimes;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Produces the mining process and sends reward to dao and fund.\n', '     */\n', '    function mining() external {\n', '\n', '        uint256 _currentTime = now;\n', '        require(_currentTime > _getEndOfLastMiningDay());\n', '\n', '\n', '        uint256 _missedDays = (_currentTime - lastMiningTime) / (1 days);\n', '\n', '        updateLastMiningTime(_currentTime);\n', '\n', '        for (uint256 i = 0; i < _missedDays; i++) {\n', '            // 0.1% daily from remaining unmined tokens.\n', '            uint256 _dailyTokens = token.getMaxTotalSupply().sub(token.totalSupply()).div(1000);\n', '\n', '            uint256 _tokensToDao = _dailyTokens.mul(3).div(10); // 30 percent\n', '            token.mint(dao, _tokensToDao);\n', '\n', '            uint256 _tokensToFund = _dailyTokens.mul(3).div(10); // 30 percent\n', '            token.mint(fund, _tokensToFund);\n', '\n', '            uint256 _miningTokenSupply = miningToken.totalSupply();\n', '            uint256 _tokensToMiners = _dailyTokens.mul(4).div(10); // 40 percent\n', '            uint256 _tokensPerMiningToken = _tokensToMiners.div(_miningTokenSupply);\n', '\n', '            miningReward[++numOfMiningTimes] = _tokensPerMiningToken;\n', '\n', '            token.mint(address(this), _tokensToMiners);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Sends the daily mining reward to HLPMT holder.\n', '     */\n', '    function getReward(uint256[] tokensForReward) external {\n', '        uint256 _rewardAmount = 0;\n', '        for (uint256 i = 0; i < tokensForReward.length; i++) {\n', '            if (\n', '                msg.sender == miningToken.ownerOf(tokensForReward[i]) &&\n', '                numOfMiningTimes > getLastRewardTime(tokensForReward[i])\n', '            ) {\n', '                _rewardAmount += _calculateReward(tokensForReward[i]);\n', '                setLastRewardTime(tokensForReward[i], numOfMiningTimes);\n', '            }\n', '        }\n', '\n', '        require(_rewardAmount > 0);\n', '        token.transfer(msg.sender, _rewardAmount);\n', '    }\n', '\n', '    function checkReward(uint256[] tokensForReward) external view returns (uint256) {\n', '        uint256 reward = 0;\n', '\n', '        for (uint256 i = 0; i < tokensForReward.length; i++) {\n', '            if (numOfMiningTimes > getLastRewardTime(tokensForReward[i])) {\n', '                reward += _calculateReward(tokensForReward[i]);\n', '            }\n', '        }\n', '\n', '        return reward;\n', '    }\n', '\n', '    /**\n', '     * @param _tokenId token id\n', '     * @return timestamp of token creation\n', '     */\n', '    function getLastRewardTime(uint256 _tokenId) public view returns(uint256) {\n', '        return lastGettingReward[_tokenId];\n', '    }\n', '\n', '    /**\n', '    * @dev Sends the daily mining reward to HLPMT holder.\n', '    */\n', '    function sendReward(uint256[] tokensForReward) public onlyOwner {\n', '        for (uint256 i = 0; i < tokensForReward.length; i++) {\n', '            if (numOfMiningTimes > getLastRewardTime(tokensForReward[i])) {\n', '                uint256 reward = _calculateReward(tokensForReward[i]);\n', '                setLastRewardTime(tokensForReward[i], numOfMiningTimes);\n', '                token.transfer(miningToken.ownerOf(tokensForReward[i]), reward);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the HLPMT token amount of holder.\n', '     */\n', '    function miningTokensOf(address holder) public view returns (uint256[]) {\n', '        return miningToken.arrayOfTokensByAddress(holder);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets the DAO address\n', '     * @param _dao DAO address.\n', '     */\n', '    function setDao(address _dao) public onlyOwner {\n', '        require(_dao != address(0));\n', '        dao = _dao;\n', '    }\n', '\n', '    /**\n', '     * @dev Sets the fund address\n', '     * @param _fund Fund address.\n', '     */\n', '    function setFund(address _fund) public onlyOwner {\n', '        require(_fund != address(0));\n', '        fund = _fund;\n', '    }\n', '\n', '    /**\n', '     * @dev Sets the token address\n', '     * @param _token Token address.\n', '     */\n', '    function setToken(address _token) public onlyOwner {\n', '        require(_token != address(0));\n', '        token = TokenInterface(_token);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets the mining token address\n', '     * @param _miningToken Mining token address.\n', '     */\n', '    function setMiningToken(address _miningToken) public onlyOwner {\n', '        require(_miningToken != address(0));\n', '        miningToken = MiningTokenInterface(_miningToken);\n', '    }\n', '\n', '    /**\n', '     * @return uint256 the current HLPMT token price in HLT (without decimals).\n', '     */\n', '    function getPrice(uint256 _timestamp) public view returns(uint256) {\n', '        uint256 _raising = _timestamp.sub(startTime).div(30 days);\n', '        _raising = _raising.mul(stepForPrice);\n', '        if (_raising > maxHLPMTMarkup) _raising = maxHLPMTMarkup;\n', '        return (startPriceForHLPMT + _raising) * 10 ** 18;\n', '    }\n', '\n', '    /**\n', '     * @param _numOfMiningTime is time\n', '     * @return getting token reward\n', '     */\n', '    function getMiningReward(uint256 _numOfMiningTime) public view returns (uint256) {\n', '        return miningReward[_numOfMiningTime];\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the calculated reward amount.\n', '     */\n', '    function _calculateReward(uint256 tokenID)\n', '        internal\n', '        view\n', '        returns (uint256 reward)\n', '    {\n', '        for (uint256 i = getLastRewardTime(tokenID) + 1; i <= numOfMiningTimes; i++) {\n', '            reward += miningReward[i];\n', '        }\n', '        return reward;\n', '    }\n', '\n', '    /**\n', '     * @dev set last getting token reward time\n', '     */\n', '    function setLastRewardTime(uint256 _tokenId, uint256 _num) internal {\n', '        lastGettingReward[_tokenId] = _num;\n', '    }\n', '\n', '    /**\n', '     * @dev set last getting token reward time\n', '     */\n', '    function updateLastMiningTime(uint256 _currentTime) internal {\n', '        lastMiningTime = _currentTime - _currentTime % (1 days);\n', '    }\n', '\n', '    /**\n', '     * @return uint256 the unix timestamp of the end of the last mining day.\n', '     */\n', '    function _getEndOfLastMiningDay() internal view returns(uint256) {\n', '        return lastMiningTime + 1 days;\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw accumulated balance, called by payee.\n', '     */\n', '    function withdrawPayments() public {\n', '        address payee = msg.sender;\n', '        uint256 payment = payments[payee];\n', '        uint256 timestamp = paymentsTimestamps[payee];\n', '\n', '        require(payment != 0);\n', '        require(now >= timestamp);\n', '\n', '        payments[payee] = 0;\n', '\n', '        require(token.transfer(msg.sender, payment));\n', '    }\n', '\n', '    /**\n', '     * @dev Called by the payer to store the sent _amount as credit to be pulled.\n', '     * @param _dest The destination address of the funds.\n', '     * @param _amount The amount to transfer.\n', '     */\n', '    function asyncSend(address _dest, uint256 _amount, uint256 _timestamp) external onlyDao {\n', '        payments[_dest] = payments[_dest].add(_amount);\n', '        paymentsTimestamps[_dest] = _timestamp;\n', '        require(token.transferFrom(dao, address(this), _amount));\n', '    }\n', '}']
