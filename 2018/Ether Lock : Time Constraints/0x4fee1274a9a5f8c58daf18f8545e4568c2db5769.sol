['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor () public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract EtherLife is Ownable\n', '{   \n', '    using SafeMath for uint;\n', '    \n', '    struct deposit {\n', '        uint time;\n', '        uint value;\n', '        uint timeOfLastWithdraw;\n', '    }\n', '    \n', '    mapping(address => deposit) public deposits;\n', '    mapping(address => address) public parents;\n', '    address[] public investors;\n', '    \n', '    uint public constant withdrawPeriod = 1 days;\n', '    \n', '    uint public constant minDepositSum = 100 finney; // 0.1 ether;\n', '    \n', '    event Deposit(address indexed from, uint256 value);\n', '    event Withdraw(address indexed from, uint256 value);\n', '    event ReferrerBonus(address indexed from, address indexed to, uint8 level, uint256 value);\n', '    \n', '    \n', '    modifier checkSender() \n', '    {\n', '        require(msg.sender != address(0));\n', '        _;\n', '    }\n', '\n', '    \n', '    function bytesToAddress(bytes source) internal pure returns(address parsedAddress) \n', '    {\n', '        assembly {\n', '            parsedAddress := mload(add(source,0x14))\n', '        }\n', '        return parsedAddress;\n', '    }\n', '\n', '    function () checkSender public payable \n', '    {\n', '        if(msg.value == 0)\n', '        {\n', '            withdraw();\n', '            return;\n', '        }\n', '        \n', '        require(msg.value >= minDepositSum);\n', '        \n', '        checkReferrer(msg.sender);\n', '        \n', '        payFee(msg.value);\n', '        addDeposit(msg.sender, msg.value);\n', '        \n', '        emit Deposit(msg.sender, msg.value);\n', '        \n', '        payRewards(msg.sender, msg.value);\n', '    }\n', '    \n', '    function getInvestorsLength() public view returns (uint)\n', '    {\n', '        return investors.length;\n', '    }\n', '    \n', '    function getParents(address investorAddress) public view returns (address[])\n', '    {\n', '        address[] memory refLevels = new address[](5);\n', '        address current = investorAddress;\n', '        \n', '        for(uint8 i = 0; i < 5; i++)\n', '        {\n', '             current = parents[current];\n', '             if(current == address(0)) break;\n', '             refLevels[i] = current;\n', '        }\n', '        \n', '        return refLevels;\n', '    }\n', '    \n', '    function calculateRewardForLevel(uint8 level, uint value) public pure returns (uint)\n', '    {\n', '        if(level == 1) return value.div(50);           // 2%\n', '        if(level == 2) return value.div(100);          // 1%\n', '        if(level == 3) return value.div(200);          // 0.5%\n', '        if(level == 4) return value.div(400);          // 0.25%\n', '        if(level == 5) return value.div(400);          // 0.25%\n', '        \n', '        return 0;\n', '    }\n', '    \n', '    function calculatWithdrawForPeriod(uint8 period, uint depositValue, uint periodsCount) public pure returns (uint)\n', '    {\n', '        if(period == 1)\n', '        {\n', '            return depositValue.div(25).mul(periodsCount);          // 4%\n', '        }\n', '        else if(period == 2)\n', '        {\n', '            return depositValue.mul(3).div(100).mul(periodsCount);  // 3%\n', '        }\n', '        else if(period == 3)\n', '        {\n', '            return depositValue.div(50).mul(periodsCount);          // 2%\n', '        }\n', '        else if(period == 4)\n', '        {\n', '            return depositValue.div(100).mul(periodsCount);         // 1%\n', '        }\n', '        else if(period == 5)\n', '        {\n', '            return depositValue.div(200).mul(periodsCount);         // 0.5%\n', '        }\n', '        \n', '        return 0;\n', '    }\n', '    \n', '    function calculateWithdraw(uint currentTime, uint depositTime, uint depositValue, uint timeOfLastWithdraw) public pure returns (uint)\n', '    {\n', '        if(currentTime - timeOfLastWithdraw < withdrawPeriod)\n', '        {\n', '            return 0;\n', '        }\n', '        \n', '        uint timeEndOfPeriod1 = depositTime + 30 days;\n', '        uint timeEndOfPeriod2 = depositTime + 60 days;\n', '        uint timeEndOfPeriod3 = depositTime + 90 days;\n', '        uint timeEndOfPeriod4 = depositTime + 120 days;\n', '        \n', '\n', '        uint sum = 0;\n', '        uint timeEnd = 0;\n', '        uint periodsCount = 0;\n', '            \n', '        if(timeOfLastWithdraw < timeEndOfPeriod1)\n', '        {\n', '            timeEnd = currentTime > timeEndOfPeriod1 ? timeEndOfPeriod1 : currentTime;\n', '            (periodsCount, timeOfLastWithdraw) = calculatePeriodsCountAndNewTime(timeOfLastWithdraw, timeEnd);\n', '            sum = calculatWithdrawForPeriod(1, depositValue, periodsCount);\n', '        }\n', '        \n', '        if(timeOfLastWithdraw < timeEndOfPeriod2)\n', '        {\n', '            timeEnd = currentTime > timeEndOfPeriod2 ? timeEndOfPeriod2 : currentTime;\n', '            (periodsCount, timeOfLastWithdraw) = calculatePeriodsCountAndNewTime(timeOfLastWithdraw, timeEnd);\n', '            sum = sum.add(calculatWithdrawForPeriod(2, depositValue, periodsCount));\n', '        }\n', '        \n', '        if(timeOfLastWithdraw < timeEndOfPeriod3)\n', '        {\n', '            timeEnd = currentTime > timeEndOfPeriod3 ? timeEndOfPeriod3 : currentTime;\n', '            (periodsCount, timeOfLastWithdraw) = calculatePeriodsCountAndNewTime(timeOfLastWithdraw, timeEnd);\n', '            sum = sum.add(calculatWithdrawForPeriod(3, depositValue, periodsCount));\n', '        }\n', '        \n', '        if(timeOfLastWithdraw < timeEndOfPeriod4)\n', '        {\n', '            timeEnd = currentTime > timeEndOfPeriod4 ? timeEndOfPeriod4 : currentTime;\n', '            (periodsCount, timeOfLastWithdraw) = calculatePeriodsCountAndNewTime(timeOfLastWithdraw, timeEnd);\n', '            sum = sum.add(calculatWithdrawForPeriod(4, depositValue, periodsCount));\n', '        }\n', '        \n', '        if(timeOfLastWithdraw >= timeEndOfPeriod4)\n', '        {\n', '            timeEnd = currentTime;\n', '            (periodsCount, timeOfLastWithdraw) = calculatePeriodsCountAndNewTime(timeOfLastWithdraw, timeEnd);\n', '            sum = sum.add(calculatWithdrawForPeriod(5, depositValue, periodsCount));\n', '        }\n', '         \n', '        return sum;\n', '    }\n', '    \n', '    function checkReferrer(address investorAddress) internal\n', '    {\n', '        if(deposits[investorAddress].value == 0 && msg.data.length == 20)\n', '        {\n', '            address referrerAddress = bytesToAddress(bytes(msg.data));\n', '            require(referrerAddress != investorAddress);     \n', '            require(deposits[referrerAddress].value > 0);        \n', '            \n', '            parents[investorAddress] = referrerAddress;\n', '            investors.push(investorAddress);\n', '        }\n', '    }\n', '    \n', '    function payRewards(address investorAddress, uint depositValue) internal\n', '    {   \n', '        address[] memory parentAddresses = getParents(investorAddress);\n', '        for(uint8 i = 0; i < parentAddresses.length; i++)\n', '        {\n', '            address parent = parentAddresses[i];\n', '            if(parent == address(0)) break;\n', '            \n', '            uint rewardValue = calculateRewardForLevel(i + 1, depositValue);\n', '            parent.transfer(rewardValue);\n', '            \n', '            emit ReferrerBonus(investorAddress, parent, i + 1, rewardValue);\n', '        }\n', '    }\n', '    \n', '    function addDeposit(address investorAddress, uint weiAmount) internal\n', '    {   \n', '        if(deposits[investorAddress].value == 0)\n', '        {\n', '            deposits[investorAddress].time = now;\n', '            deposits[investorAddress].timeOfLastWithdraw = now;\n', '            deposits[investorAddress].value = weiAmount;\n', '        }\n', '        else\n', '        {\n', '            if(now - deposits[investorAddress].timeOfLastWithdraw >= withdrawPeriod)\n', '            {\n', '                payWithdraw(investorAddress);\n', '            }\n', '            \n', '            deposits[investorAddress].value = deposits[investorAddress].value.add(weiAmount);\n', '            deposits[investorAddress].timeOfLastWithdraw = now;\n', '        }\n', '    }\n', '    \n', '    function payFee(uint weiAmount) internal\n', '    {\n', '        uint fee = weiAmount.mul(16).div(100); // 16%\n', '        owner.transfer(fee);\n', '    }\n', '    \n', '    function calculateNewTime(uint startTime, uint endTime) public pure returns (uint) \n', '    {\n', '        uint periodsCount = endTime.sub(startTime).div(withdrawPeriod);\n', '        return startTime.add(withdrawPeriod.mul(periodsCount));\n', '    }\n', '    \n', '    function calculatePeriodsCountAndNewTime(uint startTime, uint endTime) public pure returns (uint, uint) \n', '    {\n', '        uint periodsCount = endTime.sub(startTime).div(withdrawPeriod);\n', '        uint newTime = startTime.add(withdrawPeriod.mul(periodsCount));\n', '        return (periodsCount, newTime);\n', '    }\n', '    \n', '    function payWithdraw(address to) internal\n', '    {\n', '        require(deposits[to].value > 0);\n', '        \n', '        uint sum = calculateWithdraw(now, deposits[to].time, deposits[to].value, deposits[to].timeOfLastWithdraw);\n', '        require(sum > 0);\n', '        \n', '        deposits[to].timeOfLastWithdraw = calculateNewTime(deposits[to].time, now);\n', '        \n', '        to.transfer(sum);\n', '        emit Withdraw(to, sum);\n', '    }\n', '    \n', '    \n', '    function withdraw() checkSender public returns (bool)\n', '    {\n', '        payWithdraw(msg.sender);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    function batchWithdraw(address[] to) onlyOwner public \n', '    {\n', '        for(uint i = 0; i < to.length; i++)\n', '        {\n', '            payWithdraw(to[i]);\n', '        }\n', '    }\n', '    \n', '    function batchWithdraw(uint startIndex, uint length) onlyOwner public \n', '    {\n', '        for(uint i = startIndex; i < length; i++)\n', '        {\n', '            payWithdraw(investors[i]);\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor () public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract EtherLife is Ownable\n', '{   \n', '    using SafeMath for uint;\n', '    \n', '    struct deposit {\n', '        uint time;\n', '        uint value;\n', '        uint timeOfLastWithdraw;\n', '    }\n', '    \n', '    mapping(address => deposit) public deposits;\n', '    mapping(address => address) public parents;\n', '    address[] public investors;\n', '    \n', '    uint public constant withdrawPeriod = 1 days;\n', '    \n', '    uint public constant minDepositSum = 100 finney; // 0.1 ether;\n', '    \n', '    event Deposit(address indexed from, uint256 value);\n', '    event Withdraw(address indexed from, uint256 value);\n', '    event ReferrerBonus(address indexed from, address indexed to, uint8 level, uint256 value);\n', '    \n', '    \n', '    modifier checkSender() \n', '    {\n', '        require(msg.sender != address(0));\n', '        _;\n', '    }\n', '\n', '    \n', '    function bytesToAddress(bytes source) internal pure returns(address parsedAddress) \n', '    {\n', '        assembly {\n', '            parsedAddress := mload(add(source,0x14))\n', '        }\n', '        return parsedAddress;\n', '    }\n', '\n', '    function () checkSender public payable \n', '    {\n', '        if(msg.value == 0)\n', '        {\n', '            withdraw();\n', '            return;\n', '        }\n', '        \n', '        require(msg.value >= minDepositSum);\n', '        \n', '        checkReferrer(msg.sender);\n', '        \n', '        payFee(msg.value);\n', '        addDeposit(msg.sender, msg.value);\n', '        \n', '        emit Deposit(msg.sender, msg.value);\n', '        \n', '        payRewards(msg.sender, msg.value);\n', '    }\n', '    \n', '    function getInvestorsLength() public view returns (uint)\n', '    {\n', '        return investors.length;\n', '    }\n', '    \n', '    function getParents(address investorAddress) public view returns (address[])\n', '    {\n', '        address[] memory refLevels = new address[](5);\n', '        address current = investorAddress;\n', '        \n', '        for(uint8 i = 0; i < 5; i++)\n', '        {\n', '             current = parents[current];\n', '             if(current == address(0)) break;\n', '             refLevels[i] = current;\n', '        }\n', '        \n', '        return refLevels;\n', '    }\n', '    \n', '    function calculateRewardForLevel(uint8 level, uint value) public pure returns (uint)\n', '    {\n', '        if(level == 1) return value.div(50);           // 2%\n', '        if(level == 2) return value.div(100);          // 1%\n', '        if(level == 3) return value.div(200);          // 0.5%\n', '        if(level == 4) return value.div(400);          // 0.25%\n', '        if(level == 5) return value.div(400);          // 0.25%\n', '        \n', '        return 0;\n', '    }\n', '    \n', '    function calculatWithdrawForPeriod(uint8 period, uint depositValue, uint periodsCount) public pure returns (uint)\n', '    {\n', '        if(period == 1)\n', '        {\n', '            return depositValue.div(25).mul(periodsCount);          // 4%\n', '        }\n', '        else if(period == 2)\n', '        {\n', '            return depositValue.mul(3).div(100).mul(periodsCount);  // 3%\n', '        }\n', '        else if(period == 3)\n', '        {\n', '            return depositValue.div(50).mul(periodsCount);          // 2%\n', '        }\n', '        else if(period == 4)\n', '        {\n', '            return depositValue.div(100).mul(periodsCount);         // 1%\n', '        }\n', '        else if(period == 5)\n', '        {\n', '            return depositValue.div(200).mul(periodsCount);         // 0.5%\n', '        }\n', '        \n', '        return 0;\n', '    }\n', '    \n', '    function calculateWithdraw(uint currentTime, uint depositTime, uint depositValue, uint timeOfLastWithdraw) public pure returns (uint)\n', '    {\n', '        if(currentTime - timeOfLastWithdraw < withdrawPeriod)\n', '        {\n', '            return 0;\n', '        }\n', '        \n', '        uint timeEndOfPeriod1 = depositTime + 30 days;\n', '        uint timeEndOfPeriod2 = depositTime + 60 days;\n', '        uint timeEndOfPeriod3 = depositTime + 90 days;\n', '        uint timeEndOfPeriod4 = depositTime + 120 days;\n', '        \n', '\n', '        uint sum = 0;\n', '        uint timeEnd = 0;\n', '        uint periodsCount = 0;\n', '            \n', '        if(timeOfLastWithdraw < timeEndOfPeriod1)\n', '        {\n', '            timeEnd = currentTime > timeEndOfPeriod1 ? timeEndOfPeriod1 : currentTime;\n', '            (periodsCount, timeOfLastWithdraw) = calculatePeriodsCountAndNewTime(timeOfLastWithdraw, timeEnd);\n', '            sum = calculatWithdrawForPeriod(1, depositValue, periodsCount);\n', '        }\n', '        \n', '        if(timeOfLastWithdraw < timeEndOfPeriod2)\n', '        {\n', '            timeEnd = currentTime > timeEndOfPeriod2 ? timeEndOfPeriod2 : currentTime;\n', '            (periodsCount, timeOfLastWithdraw) = calculatePeriodsCountAndNewTime(timeOfLastWithdraw, timeEnd);\n', '            sum = sum.add(calculatWithdrawForPeriod(2, depositValue, periodsCount));\n', '        }\n', '        \n', '        if(timeOfLastWithdraw < timeEndOfPeriod3)\n', '        {\n', '            timeEnd = currentTime > timeEndOfPeriod3 ? timeEndOfPeriod3 : currentTime;\n', '            (periodsCount, timeOfLastWithdraw) = calculatePeriodsCountAndNewTime(timeOfLastWithdraw, timeEnd);\n', '            sum = sum.add(calculatWithdrawForPeriod(3, depositValue, periodsCount));\n', '        }\n', '        \n', '        if(timeOfLastWithdraw < timeEndOfPeriod4)\n', '        {\n', '            timeEnd = currentTime > timeEndOfPeriod4 ? timeEndOfPeriod4 : currentTime;\n', '            (periodsCount, timeOfLastWithdraw) = calculatePeriodsCountAndNewTime(timeOfLastWithdraw, timeEnd);\n', '            sum = sum.add(calculatWithdrawForPeriod(4, depositValue, periodsCount));\n', '        }\n', '        \n', '        if(timeOfLastWithdraw >= timeEndOfPeriod4)\n', '        {\n', '            timeEnd = currentTime;\n', '            (periodsCount, timeOfLastWithdraw) = calculatePeriodsCountAndNewTime(timeOfLastWithdraw, timeEnd);\n', '            sum = sum.add(calculatWithdrawForPeriod(5, depositValue, periodsCount));\n', '        }\n', '         \n', '        return sum;\n', '    }\n', '    \n', '    function checkReferrer(address investorAddress) internal\n', '    {\n', '        if(deposits[investorAddress].value == 0 && msg.data.length == 20)\n', '        {\n', '            address referrerAddress = bytesToAddress(bytes(msg.data));\n', '            require(referrerAddress != investorAddress);     \n', '            require(deposits[referrerAddress].value > 0);        \n', '            \n', '            parents[investorAddress] = referrerAddress;\n', '            investors.push(investorAddress);\n', '        }\n', '    }\n', '    \n', '    function payRewards(address investorAddress, uint depositValue) internal\n', '    {   \n', '        address[] memory parentAddresses = getParents(investorAddress);\n', '        for(uint8 i = 0; i < parentAddresses.length; i++)\n', '        {\n', '            address parent = parentAddresses[i];\n', '            if(parent == address(0)) break;\n', '            \n', '            uint rewardValue = calculateRewardForLevel(i + 1, depositValue);\n', '            parent.transfer(rewardValue);\n', '            \n', '            emit ReferrerBonus(investorAddress, parent, i + 1, rewardValue);\n', '        }\n', '    }\n', '    \n', '    function addDeposit(address investorAddress, uint weiAmount) internal\n', '    {   \n', '        if(deposits[investorAddress].value == 0)\n', '        {\n', '            deposits[investorAddress].time = now;\n', '            deposits[investorAddress].timeOfLastWithdraw = now;\n', '            deposits[investorAddress].value = weiAmount;\n', '        }\n', '        else\n', '        {\n', '            if(now - deposits[investorAddress].timeOfLastWithdraw >= withdrawPeriod)\n', '            {\n', '                payWithdraw(investorAddress);\n', '            }\n', '            \n', '            deposits[investorAddress].value = deposits[investorAddress].value.add(weiAmount);\n', '            deposits[investorAddress].timeOfLastWithdraw = now;\n', '        }\n', '    }\n', '    \n', '    function payFee(uint weiAmount) internal\n', '    {\n', '        uint fee = weiAmount.mul(16).div(100); // 16%\n', '        owner.transfer(fee);\n', '    }\n', '    \n', '    function calculateNewTime(uint startTime, uint endTime) public pure returns (uint) \n', '    {\n', '        uint periodsCount = endTime.sub(startTime).div(withdrawPeriod);\n', '        return startTime.add(withdrawPeriod.mul(periodsCount));\n', '    }\n', '    \n', '    function calculatePeriodsCountAndNewTime(uint startTime, uint endTime) public pure returns (uint, uint) \n', '    {\n', '        uint periodsCount = endTime.sub(startTime).div(withdrawPeriod);\n', '        uint newTime = startTime.add(withdrawPeriod.mul(periodsCount));\n', '        return (periodsCount, newTime);\n', '    }\n', '    \n', '    function payWithdraw(address to) internal\n', '    {\n', '        require(deposits[to].value > 0);\n', '        \n', '        uint sum = calculateWithdraw(now, deposits[to].time, deposits[to].value, deposits[to].timeOfLastWithdraw);\n', '        require(sum > 0);\n', '        \n', '        deposits[to].timeOfLastWithdraw = calculateNewTime(deposits[to].time, now);\n', '        \n', '        to.transfer(sum);\n', '        emit Withdraw(to, sum);\n', '    }\n', '    \n', '    \n', '    function withdraw() checkSender public returns (bool)\n', '    {\n', '        payWithdraw(msg.sender);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    function batchWithdraw(address[] to) onlyOwner public \n', '    {\n', '        for(uint i = 0; i < to.length; i++)\n', '        {\n', '            payWithdraw(to[i]);\n', '        }\n', '    }\n', '    \n', '    function batchWithdraw(uint startIndex, uint length) onlyOwner public \n', '    {\n', '        for(uint i = startIndex; i < length; i++)\n', '        {\n', '            payWithdraw(investors[i]);\n', '        }\n', '    }\n', '}']
