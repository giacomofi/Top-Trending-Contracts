['pragma solidity 0.4.15;\n', '\n', '// visit https://KickTheCoin.com\n', 'contract KickTheCoin {\n', '    address houseAddress;\n', '    address creator;\n', '    address owner;\n', '    address airDroper;\n', '\n', '    address lastPlayerToKickTheCoin;\n', '\n', '    uint kickerCount;\n', '\n', '    address firstKicker;\n', '    address secondKicker;\n', '\n', '    uint costToKickTheCoin;\n', '    uint numberOfBlocksPerKick;\n', '    uint targetBlockNumber;\n', '\n', '    // set to true when game contract should stop new games from starting\n', '    bool isSundown;\n', '    // The blocknumber at which the current sundown grace period will end\n', '    uint sundownGraceTargetBlock;\n', '\n', '    // The index is incremented on each new game (via initGame)\n', '    uint gameIndex;\n', '\n', '    uint currentValue;\n', '\n', '    mapping(address => uint) shares;\n', '\n', '    event LatestKicker(uint curGameIndex, address kicker, uint curVal, uint targetBlockNum);\n', '    event FirstKicker(uint curGameIndex, address kicker, uint curVal);\n', '    event SecondKicker(uint curGameIndex, address kicker, uint curVal);\n', '    event Withdraw(address kicker, uint curVal);\n', '    event Winner(uint curGameIndex, address winner, uint curVal);\n', '\n', '    modifier onlyBy(address _account)\n', '    {\n', '        require(msg.sender == _account);\n', '        _;\n', '    }\n', '\n', '    modifier onlyByOwnerAndOnlyIfGameIsNotActive() {\n', '        require(msg.sender == owner && !isGameActive());\n', '        _;\n', '    }\n', '\n', '    modifier onlyDuringNormalOperations() {\n', '        require(!isSundown);\n', '        _;\n', '    }\n', '\n', '    function KickTheCoin()\n', '    public\n', '    payable\n', '    {\n', '        creator = msg.sender;\n', '        owner = creator;\n', '        houseAddress = creator;\n', '        airDroper = creator;\n', '        gameIndex = 0;\n', '        isSundown = false;\n', '        costToKickTheCoin = 0.17 ether;\n', '        numberOfBlocksPerKick = 5;\n', '        initGame();\n', '    }\n', '\n', '    function()\n', '    public\n', '    payable\n', '    {\n', '        kickTheCoin();\n', '    }\n', '\n', '    function kickTheCoin()\n', '    public\n', '    payable\n', '    onlyDuringNormalOperations()\n', '    {\n', '        require(msg.value == costToKickTheCoin);\n', '\n', '        if (hasWinner()) {\n', '            storeWinnerShare();\n', '            initGame();\n', '        }\n', '\n', '        kickerCount += 1;\n', '        processKick();\n', '        lastPlayerToKickTheCoin = msg.sender;\n', '        targetBlockNumber = block.number + numberOfBlocksPerKick;\n', '\n', '        LatestKicker(gameIndex, msg.sender, currentValue, targetBlockNumber);\n', '    }\n', '\n', '    function withdrawShares()\n', '    public\n', '    {\n', '        if (hasWinner()) {\n', '            storeWinnerShare();\n', '            initGame();\n', '        }\n', '        pullShares(msg.sender);\n', '    }\n', '\n', '    function checkShares(address shareHolder)\n', '    public\n', '    constant\n', '    returns (uint)\n', '    {\n', '        return shares[shareHolder];\n', '    }\n', '\n', '    function isGameActive()\n', '    public\n', '    constant\n', '    returns (bool)\n', '    {\n', '        return targetBlockNumber >= block.number;\n', '    }\n', '\n', '    function hasWinner()\n', '    public\n', '    constant\n', '    returns (bool)\n', '    {\n', '        return currentValue > 0 && !isGameActive();\n', '    }\n', '\n', '    function getCurrentValue()\n', '    public\n', '    constant\n', '    returns (uint)\n', '    {\n', '        if (isGameActive()) {\n', '            return currentValue;\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '    function getLastKicker()\n', '    public\n', '    constant\n', '    returns (address)\n', '    {\n', '        if (isGameActive()) {\n', '            return lastPlayerToKickTheCoin;\n', '        } else {\n', '            return address(0);\n', '        }\n', '    }\n', '\n', '    function pullShares(address shareHolder)\n', '    public\n', '    {\n', '        var share = shares[shareHolder];\n', '        if (share == 0) {\n', '            return;\n', '        }\n', '\n', '        shares[shareHolder] = 0;\n', '        shareHolder.transfer(share);\n', '        Withdraw(shareHolder, share);\n', '    }\n', '\n', '    function airDrop(address player)\n', '    public\n', '    payable\n', '    onlyBy(airDroper)\n', '    {\n', '        player.transfer(1);\n', '        if (msg.value > 1) {\n', '            msg.sender.transfer(msg.value - 1);\n', '        }\n', '    }\n', '\n', '    function getTargetBlockNumber()\n', '    public\n', '    constant\n', '    returns (uint)\n', '    {\n', '        return targetBlockNumber;\n', '    }\n', '\n', '    function getBlocksLeftInCurrentKick()\n', '    public\n', '    constant\n', '    returns (uint)\n', '    {\n', '        if (targetBlockNumber < block.number) {\n', '            return 0;\n', '        }\n', '        return targetBlockNumber - block.number;\n', '    }\n', '\n', '    function getNumberOfBlocksPerKick()\n', '    public\n', '    constant\n', '    returns (uint)\n', '    {\n', '        return numberOfBlocksPerKick;\n', '    }\n', '\n', '    function getCostToKick()\n', '    public\n', '    constant\n', '    returns (uint)\n', '    {\n', '        return costToKickTheCoin;\n', '    }\n', '\n', '    function getCurrentBlockNumber()\n', '    public\n', '    constant\n', '    returns (uint)\n', '    {\n', '        return block.number;\n', '    }\n', '\n', '    function getGameIndex()\n', '    public\n', '    constant\n', '    returns (uint)\n', '    {\n', '        return gameIndex;\n', '    }\n', '\n', '    function changeOwner(address _newOwner)\n', '    public\n', '    onlyBy(owner)\n', '    {\n', '        owner = _newOwner;\n', '    }\n', '\n', '    function changeHouseAddress(address _newHouseAddress)\n', '    public\n', '    onlyBy(owner)\n', '    {\n', '        houseAddress = _newHouseAddress;\n', '    }\n', '\n', '    function changeAirDroper(address _airDroper)\n', '    public\n', '    onlyBy(owner)\n', '    {\n', '        airDroper = _airDroper;\n', '    }\n', '\n', '    function changeGameParameters(uint _costToKickTheCoin, uint _numberOfBlocksPerKick)\n', '    public\n', '    onlyByOwnerAndOnlyIfGameIsNotActive()\n', '    {\n', '        costToKickTheCoin = _costToKickTheCoin;\n', '        numberOfBlocksPerKick = _numberOfBlocksPerKick;\n', '    }\n', '\n', '    function sundown()\n', '    public\n', '    onlyByOwnerAndOnlyIfGameIsNotActive()\n', '    {\n', '        isSundown = true;\n', '        sundownGraceTargetBlock = block.number + 100000;\n', '    }\n', '\n', '    function gameIsSundown()\n', '    public\n', '    constant\n', '    returns (bool)\n', '    {\n', '        return isSundown;\n', '    }\n', '\n', '    function getSundownGraceTargetBlock()\n', '    public\n', '    constant\n', '    returns (uint)\n', '    {\n', '        return sundownGraceTargetBlock;\n', '    }\n', '\n', '    function sunrise()\n', '    public\n', '    onlyByOwnerAndOnlyIfGameIsNotActive()\n', '    {\n', '        isSundown = false;\n', '        sundownGraceTargetBlock = 0;\n', '    }\n', '\n', '    function clear()\n', '    public\n', '    {\n', '        if (isSundown &&\n', '        sundownGraceTargetBlock != 0 &&\n', '        sundownGraceTargetBlock < block.number) {\n', '            houseAddress.transfer(this.balance);\n', '        }\n', '    }\n', '\n', '    function initGame()\n', '    private\n', '    {\n', '        gameIndex += 1;\n', '        targetBlockNumber = 0;\n', '        currentValue = 0;\n', '        kickerCount = 0;\n', '        firstKicker = address(0);\n', '        secondKicker = address(0);\n', '        lastPlayerToKickTheCoin = address(0);\n', '    }\n', '\n', '    function storeWinnerShare()\n', '    private\n', '    {\n', '        var share = currentValue;\n', '        currentValue = 0;\n', '        shares[lastPlayerToKickTheCoin] += share;\n', '        if (share > 0) {\n', '            Winner(gameIndex, lastPlayerToKickTheCoin, share);\n', '        }\n', '    }\n', '\n', '    function setShares()\n', '    private\n', '    {\n', '        // 1.0% commission to the house\n', '        shares[houseAddress] += (msg.value * 10)/1000;\n', '        // 2.5% commission to first kicker\n', '        shares[firstKicker] += (msg.value * 25)/1000;\n', '        // 1.5% commission to second kicker\n', '        shares[secondKicker] += (msg.value * 15)/1000;\n', '    }\n', '\n', '    function processKick()\n', '    private\n', '    {\n', '        if (kickerCount == 1) {\n', '            currentValue = msg.value; // no commission on first kick\n', '            firstKicker = msg.sender;\n', '            FirstKicker(gameIndex, msg.sender, currentValue);\n', '        } else if (kickerCount == 2) {\n', '            currentValue += msg.value; // no commission on second kick\n', '            secondKicker = msg.sender;\n', '            SecondKicker(gameIndex, msg.sender, currentValue);\n', '        } else {\n', '            // 5% is used. 2.5% for first kicker, 1.5% for second, 1% for house\n', '            // leaving 95% for the winner\n', '            currentValue += (msg.value * 950)/1000;\n', '            setShares();\n', '        }\n', '    }\n', '}']