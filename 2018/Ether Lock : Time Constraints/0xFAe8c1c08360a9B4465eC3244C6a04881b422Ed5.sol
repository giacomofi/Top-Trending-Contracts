['pragma solidity ^0.4.21;\n', 'interface SisterToken {function _buy(address _for)external payable;function testConnection() external;}\n', 'contract owned {\n', '    address public owner;\n', '    event Log(string s);\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '    function isOwner()public{\n', '        if(msg.sender==owner)emit Log("Owner");\n', '        else{\n', '            emit Log("Not Owner");\n', '        }\n', '    }\n', '}\n', 'contract Crowdsale is owned {\n', '    address public Nplay;\n', '    address public Eplay;\n', '    function Crowdsale() public payable{\n', '    }\n', '    function () public payable{\n', '        buy();\n', '    }\n', '    function setEplay(address newSS)public onlyOwner{\n', '        Eplay= newSS;\n', '    }\n', '    function setNplay(address newSS)public onlyOwner {\n', '        Nplay= newSS;\n', '    }\n', '    function buy()public payable{\n', '        SisterToken E = SisterToken(Eplay);\n', '        SisterToken N = SisterToken(Nplay);\n', '        E._buy.value(msg.value/2)(msg.sender);\n', '        N._buy.value(msg.value/2)(msg.sender);\n', '    }\n', '    function connectTest() public payable{\n', '        SisterToken S = SisterToken(Eplay);\n', '        SisterToken N = SisterToken(Nplay);\n', '        S.testConnection();\n', '        N.testConnection();\n', '    }\n', '}']