['contract DSNote {\n', '    event LogNote(\n', '        bytes4   indexed  sig,\n', '        address  indexed  guy,\n', '        bytes32  indexed  foo,\n', '        bytes32  indexed  bar,\n', '\tuint\t \t  wad,\n', '        bytes             fax\n', '    ) anonymous;\n', '\n', '    modifier note {\n', '        bytes32 foo;\n', '        bytes32 bar;\n', '\n', '        assembly {\n', '            foo := calldataload(4)\n', '            bar := calldataload(36)\n', '        }\n', '\n', '        LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n', '\n', '        _;\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '    function totalSupply() constant returns (uint supply);\n', '    function balanceOf( address who ) constant returns (uint value);\n', '    function allowance( address owner, address spender ) constant returns (uint _allowance);\n', '\n', '    function transfer( address to, uint value) returns (bool ok);\n', '    function transferFrom( address from, address to, uint value) returns (bool ok);\n', '    function approve( address spender, uint value ) returns (bool ok);\n', '\n', '    event Transfer( address indexed from, address indexed to, uint value);\n', '    event Approval( address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract DSAuthority {\n', '    function canCall(\n', '        address src, address dst, bytes4 sig\n', '    ) constant returns (bool);\n', '}\n', '\n', 'contract DSAuthEvents {\n', '    event LogSetAuthority (address indexed authority);\n', '    event LogSetOwner     (address indexed owner);\n', '}\n', '\n', 'contract DSAuth is DSAuthEvents {\n', '    DSAuthority  public  authority;\n', '    address      public  owner;\n', '\n', '    function DSAuth() {\n', '        owner = msg.sender;\n', '        LogSetOwner(msg.sender);\n', '    }\n', '\n', '    function setOwner(address owner_)\n', '        auth\n', '    {\n', '        owner = owner_;\n', '        LogSetOwner(owner);\n', '    }\n', '\n', '    function setAuthority(DSAuthority authority_)\n', '        auth\n', '    {\n', '        authority = authority_;\n', '        LogSetAuthority(authority);\n', '    }\n', '\n', '    modifier auth {\n', '        assert(isAuthorized(msg.sender, msg.sig));\n', '        _;\n', '    }\n', '\n', '    modifier authorized(bytes4 sig) {\n', '        assert(isAuthorized(msg.sender, sig));\n', '        _;\n', '    }\n', '\n', '    function isAuthorized(address src, bytes4 sig) internal returns (bool) {\n', '        if (src == address(this)) {\n', '            return true;\n', '        } else if (src == owner) {\n', '            return true;\n', '        } else if (authority == DSAuthority(0)) {\n', '            return false;\n', '        } else {\n', '            return authority.canCall(src, this, sig);\n', '        }\n', '    }\n', '\n', '    function assert(bool x) internal {\n', '        if (!x) throw;\n', '    }\n', '}\n', '\n', 'contract DSExec {\n', '    function tryExec( address target, bytes calldata, uint value)\n', '             internal\n', '             returns (bool call_ret)\n', '    {\n', '        return target.call.value(value)(calldata);\n', '    }\n', '    function exec( address target, bytes calldata, uint value)\n', '             internal\n', '    {\n', '        if(!tryExec(target, calldata, value)) {\n', '            throw;\n', '        }\n', '    }\n', '\n', '    // Convenience aliases\n', '    function exec( address t, bytes c )\n', '        internal\n', '    {\n', '        exec(t, c, 0);\n', '    }\n', '    function exec( address t, uint256 v )\n', '        internal\n', '    {\n', '        bytes memory c; exec(t, c, v);\n', '    }\n', '    function tryExec( address t, bytes c )\n', '        internal\n', '        returns (bool)\n', '    {\n', '        return tryExec(t, c, 0);\n', '    }\n', '    function tryExec( address t, uint256 v )\n', '        internal\n', '        returns (bool)\n', '    {\n', '        bytes memory c; return tryExec(t, c, v);\n', '    }\n', '}\n', '\n', 'contract DSMath {\n', '    \n', '    /*\n', '    standard uint256 functions\n', '     */\n', '\n', '    function add(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x + y) >= x);\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x - y) <= x);\n', '    }\n', '\n', '    function mul(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x * y) >= x);\n', '    }\n', '\n', '    function div(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        z = x / y;\n', '    }\n', '\n', '    function min(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function max(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    /*\n', '    uint128 functions (h is for half)\n', '     */\n', '\n', '\n', '    function hadd(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        assert((z = x + y) >= x);\n', '    }\n', '\n', '    function hsub(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        assert((z = x - y) <= x);\n', '    }\n', '\n', '    function hmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        assert((z = x * y) >= x);\n', '    }\n', '\n', '    function hdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = x / y;\n', '    }\n', '\n', '    function hmin(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function hmax(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '\n', '    /*\n', '    int256 functions\n', '     */\n', '\n', '    function imin(int256 x, int256 y) constant internal returns (int256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function imax(int256 x, int256 y) constant internal returns (int256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    /*\n', '    WAD math\n', '     */\n', '\n', '    uint128 constant WAD = 10 ** 18;\n', '\n', '    function wadd(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hadd(x, y);\n', '    }\n', '\n', '    function wsub(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hsub(x, y);\n', '    }\n', '\n', '    function wmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * y + WAD / 2) / WAD);\n', '    }\n', '\n', '    function wdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * WAD + y / 2) / y);\n', '    }\n', '\n', '    function wmin(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmin(x, y);\n', '    }\n', '    function wmax(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmax(x, y);\n', '    }\n', '\n', '    /*\n', '    RAY math\n', '     */\n', '\n', '    uint128 constant RAY = 10 ** 27;\n', '\n', '    function radd(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hadd(x, y);\n', '    }\n', '\n', '    function rsub(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hsub(x, y);\n', '    }\n', '\n', '    function rmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * y + RAY / 2) / RAY);\n', '    }\n', '\n', '    function rdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * RAY + y / 2) / y);\n', '    }\n', '\n', '    function rpow(uint128 x, uint64 n) constant internal returns (uint128 z) {\n', '        // This famous algorithm is called "exponentiation by squaring"\n', '        // and calculates x^n with x as fixed-point and n as regular unsigned.\n', '        //\n', '        // It&#39;s O(log n), instead of O(n) for naive repeated multiplication.\n', '        //\n', '        // These facts are why it works:\n', '        //\n', '        //  If n is even, then x^n = (x^2)^(n/2).\n', '        //  If n is odd,  then x^n = x * x^(n-1),\n', '        //   and applying the equation for even x gives\n', '        //    x^n = x * (x^2)^((n-1) / 2).\n', '        //\n', '        //  Also, EVM division is flooring and\n', '        //    floor[(n-1) / 2] = floor[n / 2].\n', '\n', '        z = n % 2 != 0 ? x : RAY;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            x = rmul(x, x);\n', '\n', '            if (n % 2 != 0) {\n', '                z = rmul(z, x);\n', '            }\n', '        }\n', '    }\n', '\n', '    function rmin(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmin(x, y);\n', '    }\n', '    function rmax(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmax(x, y);\n', '    }\n', '\n', '    function cast(uint256 x) constant internal returns (uint128 z) {\n', '        assert((z = uint128(x)) == x);\n', '    }\n', '\n', '}\n', '\n', 'contract DSStop is DSAuth, DSNote {\n', '\n', '    bool public stopped;\n', '\n', '    modifier stoppable {\n', '        assert (!stopped);\n', '        _;\n', '    }\n', '    function stop() auth note {\n', '        stopped = true;\n', '    }\n', '    function start() auth note {\n', '        stopped = false;\n', '    }\n', '\n', '}\n', '\n', 'contract DSTokenBase is ERC20, DSMath {\n', '    uint256                                            _supply;\n', '    mapping (address => uint256)                       _balances;\n', '    mapping (address => mapping (address => uint256))  _approvals;\n', '    \n', '    function DSTokenBase(uint256 supply) {\n', '        _balances[msg.sender] = supply;\n', '        _supply = supply;\n', '    }\n', '    \n', '    function totalSupply() constant returns (uint256) {\n', '        return _supply;\n', '    }\n', '    function balanceOf(address src) constant returns (uint256) {\n', '        return _balances[src];\n', '    }\n', '    function allowance(address src, address guy) constant returns (uint256) {\n', '        return _approvals[src][guy];\n', '    }\n', '    \n', '    function transfer(address dst, uint wad) returns (bool) {\n', '        assert(_balances[msg.sender] >= wad);\n', '        \n', '        _balances[msg.sender] = sub(_balances[msg.sender], wad);\n', '        _balances[dst] = add(_balances[dst], wad);\n', '        \n', '        Transfer(msg.sender, dst, wad);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address src, address dst, uint wad) returns (bool) {\n', '        assert(_balances[src] >= wad);\n', '        assert(_approvals[src][msg.sender] >= wad);\n', '        \n', '        _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n', '        _balances[src] = sub(_balances[src], wad);\n', '        _balances[dst] = add(_balances[dst], wad);\n', '        \n', '        Transfer(src, dst, wad);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function approve(address guy, uint256 wad) returns (bool) {\n', '        _approvals[msg.sender][guy] = wad;\n', '        \n', '        Approval(msg.sender, guy, wad);\n', '        \n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract DSToken is DSTokenBase(0), DSStop {\n', '\n', '    bytes32  public  symbol;\n', '    uint256  public  decimals = 18; // standard token precision. override to customize\n', '\n', '    function DSToken(bytes32 symbol_) {\n', '        symbol = symbol_;\n', '    }\n', '\n', '    function transfer(address dst, uint wad) stoppable note returns (bool) {\n', '        return super.transfer(dst, wad);\n', '    }\n', '    function transferFrom(\n', '        address src, address dst, uint wad\n', '    ) stoppable note returns (bool) {\n', '        return super.transferFrom(src, dst, wad);\n', '    }\n', '    function approve(address guy, uint wad) stoppable note returns (bool) {\n', '        return super.approve(guy, wad);\n', '    }\n', '\n', '    function push(address dst, uint128 wad) returns (bool) {\n', '        return transfer(dst, wad);\n', '    }\n', '    function pull(address src, uint128 wad) returns (bool) {\n', '        return transferFrom(src, msg.sender, wad);\n', '    }\n', '\n', '    function mint(uint128 wad) auth stoppable note {\n', '        _balances[msg.sender] = add(_balances[msg.sender], wad);\n', '        _supply = add(_supply, wad);\n', '    }\n', '    function burn(uint128 wad) auth stoppable note {\n', '        _balances[msg.sender] = sub(_balances[msg.sender], wad);\n', '        _supply = sub(_supply, wad);\n', '    }\n', '\n', '    // Optional token name\n', '\n', '    bytes32   public  name = "";\n', '    \n', '    function setName(bytes32 name_) auth {\n', '        name = name_;\n', '    }\n', '\n', '}\n', '\n', 'contract LNCHSale is DSAuth, DSExec, DSMath {\n', '    DSToken  public  LNCH;                  // The LNCH token itself\n', '    uint128  public  totalSupply;          // Total LNCH amount created\n', '    uint128  public  foundersAllocation;   // Amount given to founders\n', '    string   public  foundersKey;          // Public key of founders\n', '    uint128  public  partnersAllocation;   // Amount given to partners\n', '    string   public  partnersKey;          // Public key of partners\n', '    uint128  public  consultantsAllocation;   // Amount given to consultants\n', '    string   public  consultantsKey;          // Public key of consultants\n', '    uint128  public  advisorsAllocation;   // Amount given to advisors\n', '    string   public  advisorsKey;          // Public key of advisors\n', '    uint128  public  developersAllocation;   // Amount given to developers\n', '    string   public  developersKey;          // Public key of developers\n', '\n', '    uint     public  openTime;             // Time of window 0 opening\n', '    uint     public  createFirstDay;       // Tokens sold in window 0\n', '\n', '    uint     public  startTime;            // Time of window 1 opening\n', '    uint     public  numberOfDays;         // Number of windows after 0\n', '    uint     public  createPerDay;         // Tokens sold in each window\n', '\n', '    mapping (uint => uint)                       public  dailyTotals;\n', '    mapping (uint => mapping (address => uint))  public  userBuys;\n', '    mapping (uint => mapping (address => bool))  public  claimed;\n', '    mapping (address => string)                  public  keys;\n', '\n', '    event LogBuy      (uint window, address user, uint amount);\n', '    event LogClaim    (uint window, address user, uint amount);\n', '    event LogRegister (address user, string key);\n', '    event LogCollect  (uint amount);\n', '    event LogFreeze   ();\n', '\n', 'function LNCHSale(\n', '        uint     _numberOfDays,\n', '        uint128  _totalSupply,\n', '        uint     _openTime,\n', '        uint     _startTime,\n', '        uint128  _foundersAllocation,\n', '        string   _foundersKey,\n', '        uint128  _partnersAllocation,\n', '        string   _partnersKey,\n', '        uint128  _consultantsAllocation,\n', '        string   _consultantsKey,\n', '        uint128  _advisorsAllocation,\n', '        string   _advisorsKey,\n', '        uint128  _developersAllocation,\n', '        string   _developersKey\n', '    ) {\n', '        numberOfDays          = _numberOfDays;\n', '        totalSupply           = _totalSupply;\n', '        openTime              = _openTime;\n', '        startTime             = _startTime;\n', '        foundersAllocation    = _foundersAllocation;\n', '        foundersKey           = _foundersKey;\n', '        partnersAllocation    = _partnersAllocation;\n', '        partnersKey           = _partnersKey;\n', '        consultantsAllocation = _consultantsAllocation;\n', '        consultantsKey        = _consultantsKey;\n', '        advisorsAllocation    = _advisorsAllocation;\n', '        advisorsKey           = _advisorsKey;\n', '        developersAllocation  = _developersAllocation;\n', '        developersKey         = _developersKey;\n', '\n', '        createFirstDay = wmul(totalSupply, 0.25 ether);\n', '        createPerDay = div(\n', '            createFirstDay,\n', '            numberOfDays\n', '        );\n', '\n', '        assert(numberOfDays > 0);\n', '        assert(totalSupply > foundersAllocation);\n', '        assert(totalSupply > partnersAllocation);\n', '        assert(totalSupply > consultantsAllocation);\n', '        assert(totalSupply > advisorsAllocation);\n', '        assert(totalSupply > developersAllocation);\n', '        assert(openTime < startTime);\n', '    }\n', '\n', '    function digitToNumber(uint8 b) constant returns (uint8) {\n', '      if ( b <= 57 )\n', '\treturn b-48 ;\n', '      if ( b <= 70 )\n', '\treturn b-65+10 ;\n', '      return b-97+10 ;\n', '    }\t    \n', '\n', '    function stringToAddress(string __address) constant returns (address) {\n', '      bytes memory _address = bytes(__address) ;\n', '      uint160 m = 0;\n', '      uint160 b = 0;\n', '      \n', '      for (uint8 i = 2; i < 42; i++) {\n', '\tm *= 16;\n', '\tb = uint160(digitToNumber(uint8(_address[i])));\n', '\tm += (b);\n', '      }\n', '      \n', '      return address(m);\n', '    }\n', ' \n', '    function initialize(DSToken lnch) auth {\n', '        address addr ;\n', '        assert(address(LNCH) == address(0));\n', '        assert(lnch.owner() == address(this));\n', '        assert(lnch.authority() == DSAuthority(0));\n', '        assert(lnch.totalSupply() == 0);\n', '\n', '        LNCH = lnch;\n', '        LNCH.mint(totalSupply);\n', '\n', '\taddr = stringToAddress(foundersKey) ;\n', '        LNCH.push(addr, foundersAllocation);\n', '\tkeys[addr] = foundersKey;\n', '        LogRegister(addr, foundersKey);\n', '\n', '\taddr = stringToAddress(partnersKey) ;\n', '        LNCH.push(addr, partnersAllocation);\n', '\tkeys[addr] = partnersKey;\n', '        LogRegister(addr, partnersKey);\n', '\n', '\taddr = stringToAddress(consultantsKey) ;\n', '        LNCH.push(addr, consultantsAllocation);\n', '\tkeys[addr] = consultantsKey;\n', '        LogRegister(addr, consultantsKey);\n', '\n', '\taddr = stringToAddress(advisorsKey) ;\n', '        LNCH.push(addr, advisorsAllocation);\n', '\tkeys[addr] = advisorsKey;\n', '        LogRegister(addr, advisorsKey);\n', '        \n', '    addr = stringToAddress(developersKey) ;\n', '        LNCH.push(addr, developersAllocation);\n', '\tkeys[addr] = developersKey;\n', '        LogRegister(addr, developersKey);\n', '\t\n', '    }\n', '\n', '    function time() constant returns (uint) {\n', '        return block.timestamp;\n', '    }\n', '\n', '    function today() constant returns (uint) {\n', '        return dayFor(time());\n', '    }\n', '\n', '    // Each window is 23 hours long so that end-of-window rotates\n', '    // around the clock for all timezones.\n', '    function dayFor(uint timestamp) constant returns (uint) {\n', '        return timestamp < startTime\n', '            ? 0\n', '            : sub(timestamp, startTime) / 23 hours + 1;\n', '    }\n', '\n', '    function createOnDay(uint day) constant returns (uint) {\n', '        return day == 0 ? createFirstDay : createPerDay;\n', '    }\n', '\n', '    // This method provides the buyer some protections regarding which\n', '    // day the buy order is submitted and the maximum price prior to\n', '    // applying this payment that will be allowed.\n', '    function buyWithLimit(uint day, uint limit) payable {\n', '        assert(time() >= openTime && today() <= numberOfDays);\n', '        assert(msg.value >= 0.01 ether);\n', '\n', '        assert(day >= today());\n', '        assert(day <= numberOfDays);\n', '\n', '        userBuys[day][msg.sender] += msg.value;\n', '        dailyTotals[day] += msg.value;\n', '\n', '        if (limit != 0) {\n', '            assert(dailyTotals[day] <= limit);\n', '        }\n', '\n', '        LogBuy(day, msg.sender, msg.value);\n', '    }\n', '\n', '    function buy() payable {\n', '       buyWithLimit(today(), 0);\n', '    }\n', '\n', '    function () payable {\n', '       buy();\n', '    }\n', '\n', '    function claim(uint day) {\n', '        assert(today() > day);\n', '\n', '        if (claimed[day][msg.sender] || dailyTotals[day] == 0) {\n', '            return;\n', '        }\n', '\n', '        // This will have small rounding errors, but the token is\n', '        // going to be truncated to 8 decimal places or less anyway\n', '        // when launched on its own chain.\n', '\n', '        var dailyTotal = cast(dailyTotals[day]);\n', '        var userTotal  = cast(userBuys[day][msg.sender]);\n', '        var price      = wdiv(cast(createOnDay(day)), dailyTotal);\n', '        var reward     = wmul(price, userTotal);\n', '\n', '        claimed[day][msg.sender] = true;\n', '        LNCH.push(msg.sender, reward);\n', '\n', '        LogClaim(day, msg.sender, reward);\n', '    }\n', '\n', '    function claimAll() {\n', '        for (uint i = 0; i < today(); i++) {\n', '            claim(i);\n', '        }\n', '    }\n', '\n', '    // Value should be a public key.  Read full key import policy.\n', '    // Manually registering requires a base58\n', '    // encoded using the LNCH public key format.\n', '    function register(string key) {\n', '        assert(today() <=  numberOfDays + 1);\n', '        assert(bytes(key).length <= 64);\n', '\n', '        keys[msg.sender] = key;\n', '\n', '        LogRegister(msg.sender, key);\n', '    }\n', '\n', '    // Crowdsale owners can collect ETH any number of times\n', '    function collect() auth {\n', '        assert(today() > 0); // Prevent recycling during window 0\n', '        exec(msg.sender, this.balance);\n', '        LogCollect(this.balance);\n', '    }\n', '\n', '    // Anyone can freeze the token 1 day after the sale ends\n', '    function freeze() {\n', '        assert(today() > numberOfDays + 1);\n', '        LNCH.stop();\n', '        LogFreeze();\n', '    }\n', '}']
['contract DSNote {\n', '    event LogNote(\n', '        bytes4   indexed  sig,\n', '        address  indexed  guy,\n', '        bytes32  indexed  foo,\n', '        bytes32  indexed  bar,\n', '\tuint\t \t  wad,\n', '        bytes             fax\n', '    ) anonymous;\n', '\n', '    modifier note {\n', '        bytes32 foo;\n', '        bytes32 bar;\n', '\n', '        assembly {\n', '            foo := calldataload(4)\n', '            bar := calldataload(36)\n', '        }\n', '\n', '        LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n', '\n', '        _;\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '    function totalSupply() constant returns (uint supply);\n', '    function balanceOf( address who ) constant returns (uint value);\n', '    function allowance( address owner, address spender ) constant returns (uint _allowance);\n', '\n', '    function transfer( address to, uint value) returns (bool ok);\n', '    function transferFrom( address from, address to, uint value) returns (bool ok);\n', '    function approve( address spender, uint value ) returns (bool ok);\n', '\n', '    event Transfer( address indexed from, address indexed to, uint value);\n', '    event Approval( address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract DSAuthority {\n', '    function canCall(\n', '        address src, address dst, bytes4 sig\n', '    ) constant returns (bool);\n', '}\n', '\n', 'contract DSAuthEvents {\n', '    event LogSetAuthority (address indexed authority);\n', '    event LogSetOwner     (address indexed owner);\n', '}\n', '\n', 'contract DSAuth is DSAuthEvents {\n', '    DSAuthority  public  authority;\n', '    address      public  owner;\n', '\n', '    function DSAuth() {\n', '        owner = msg.sender;\n', '        LogSetOwner(msg.sender);\n', '    }\n', '\n', '    function setOwner(address owner_)\n', '        auth\n', '    {\n', '        owner = owner_;\n', '        LogSetOwner(owner);\n', '    }\n', '\n', '    function setAuthority(DSAuthority authority_)\n', '        auth\n', '    {\n', '        authority = authority_;\n', '        LogSetAuthority(authority);\n', '    }\n', '\n', '    modifier auth {\n', '        assert(isAuthorized(msg.sender, msg.sig));\n', '        _;\n', '    }\n', '\n', '    modifier authorized(bytes4 sig) {\n', '        assert(isAuthorized(msg.sender, sig));\n', '        _;\n', '    }\n', '\n', '    function isAuthorized(address src, bytes4 sig) internal returns (bool) {\n', '        if (src == address(this)) {\n', '            return true;\n', '        } else if (src == owner) {\n', '            return true;\n', '        } else if (authority == DSAuthority(0)) {\n', '            return false;\n', '        } else {\n', '            return authority.canCall(src, this, sig);\n', '        }\n', '    }\n', '\n', '    function assert(bool x) internal {\n', '        if (!x) throw;\n', '    }\n', '}\n', '\n', 'contract DSExec {\n', '    function tryExec( address target, bytes calldata, uint value)\n', '             internal\n', '             returns (bool call_ret)\n', '    {\n', '        return target.call.value(value)(calldata);\n', '    }\n', '    function exec( address target, bytes calldata, uint value)\n', '             internal\n', '    {\n', '        if(!tryExec(target, calldata, value)) {\n', '            throw;\n', '        }\n', '    }\n', '\n', '    // Convenience aliases\n', '    function exec( address t, bytes c )\n', '        internal\n', '    {\n', '        exec(t, c, 0);\n', '    }\n', '    function exec( address t, uint256 v )\n', '        internal\n', '    {\n', '        bytes memory c; exec(t, c, v);\n', '    }\n', '    function tryExec( address t, bytes c )\n', '        internal\n', '        returns (bool)\n', '    {\n', '        return tryExec(t, c, 0);\n', '    }\n', '    function tryExec( address t, uint256 v )\n', '        internal\n', '        returns (bool)\n', '    {\n', '        bytes memory c; return tryExec(t, c, v);\n', '    }\n', '}\n', '\n', 'contract DSMath {\n', '    \n', '    /*\n', '    standard uint256 functions\n', '     */\n', '\n', '    function add(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x + y) >= x);\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x - y) <= x);\n', '    }\n', '\n', '    function mul(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x * y) >= x);\n', '    }\n', '\n', '    function div(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        z = x / y;\n', '    }\n', '\n', '    function min(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function max(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    /*\n', '    uint128 functions (h is for half)\n', '     */\n', '\n', '\n', '    function hadd(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        assert((z = x + y) >= x);\n', '    }\n', '\n', '    function hsub(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        assert((z = x - y) <= x);\n', '    }\n', '\n', '    function hmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        assert((z = x * y) >= x);\n', '    }\n', '\n', '    function hdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = x / y;\n', '    }\n', '\n', '    function hmin(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function hmax(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '\n', '    /*\n', '    int256 functions\n', '     */\n', '\n', '    function imin(int256 x, int256 y) constant internal returns (int256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function imax(int256 x, int256 y) constant internal returns (int256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    /*\n', '    WAD math\n', '     */\n', '\n', '    uint128 constant WAD = 10 ** 18;\n', '\n', '    function wadd(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hadd(x, y);\n', '    }\n', '\n', '    function wsub(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hsub(x, y);\n', '    }\n', '\n', '    function wmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * y + WAD / 2) / WAD);\n', '    }\n', '\n', '    function wdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * WAD + y / 2) / y);\n', '    }\n', '\n', '    function wmin(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmin(x, y);\n', '    }\n', '    function wmax(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmax(x, y);\n', '    }\n', '\n', '    /*\n', '    RAY math\n', '     */\n', '\n', '    uint128 constant RAY = 10 ** 27;\n', '\n', '    function radd(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hadd(x, y);\n', '    }\n', '\n', '    function rsub(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hsub(x, y);\n', '    }\n', '\n', '    function rmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * y + RAY / 2) / RAY);\n', '    }\n', '\n', '    function rdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * RAY + y / 2) / y);\n', '    }\n', '\n', '    function rpow(uint128 x, uint64 n) constant internal returns (uint128 z) {\n', '        // This famous algorithm is called "exponentiation by squaring"\n', '        // and calculates x^n with x as fixed-point and n as regular unsigned.\n', '        //\n', "        // It's O(log n), instead of O(n) for naive repeated multiplication.\n", '        //\n', '        // These facts are why it works:\n', '        //\n', '        //  If n is even, then x^n = (x^2)^(n/2).\n', '        //  If n is odd,  then x^n = x * x^(n-1),\n', '        //   and applying the equation for even x gives\n', '        //    x^n = x * (x^2)^((n-1) / 2).\n', '        //\n', '        //  Also, EVM division is flooring and\n', '        //    floor[(n-1) / 2] = floor[n / 2].\n', '\n', '        z = n % 2 != 0 ? x : RAY;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            x = rmul(x, x);\n', '\n', '            if (n % 2 != 0) {\n', '                z = rmul(z, x);\n', '            }\n', '        }\n', '    }\n', '\n', '    function rmin(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmin(x, y);\n', '    }\n', '    function rmax(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmax(x, y);\n', '    }\n', '\n', '    function cast(uint256 x) constant internal returns (uint128 z) {\n', '        assert((z = uint128(x)) == x);\n', '    }\n', '\n', '}\n', '\n', 'contract DSStop is DSAuth, DSNote {\n', '\n', '    bool public stopped;\n', '\n', '    modifier stoppable {\n', '        assert (!stopped);\n', '        _;\n', '    }\n', '    function stop() auth note {\n', '        stopped = true;\n', '    }\n', '    function start() auth note {\n', '        stopped = false;\n', '    }\n', '\n', '}\n', '\n', 'contract DSTokenBase is ERC20, DSMath {\n', '    uint256                                            _supply;\n', '    mapping (address => uint256)                       _balances;\n', '    mapping (address => mapping (address => uint256))  _approvals;\n', '    \n', '    function DSTokenBase(uint256 supply) {\n', '        _balances[msg.sender] = supply;\n', '        _supply = supply;\n', '    }\n', '    \n', '    function totalSupply() constant returns (uint256) {\n', '        return _supply;\n', '    }\n', '    function balanceOf(address src) constant returns (uint256) {\n', '        return _balances[src];\n', '    }\n', '    function allowance(address src, address guy) constant returns (uint256) {\n', '        return _approvals[src][guy];\n', '    }\n', '    \n', '    function transfer(address dst, uint wad) returns (bool) {\n', '        assert(_balances[msg.sender] >= wad);\n', '        \n', '        _balances[msg.sender] = sub(_balances[msg.sender], wad);\n', '        _balances[dst] = add(_balances[dst], wad);\n', '        \n', '        Transfer(msg.sender, dst, wad);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address src, address dst, uint wad) returns (bool) {\n', '        assert(_balances[src] >= wad);\n', '        assert(_approvals[src][msg.sender] >= wad);\n', '        \n', '        _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n', '        _balances[src] = sub(_balances[src], wad);\n', '        _balances[dst] = add(_balances[dst], wad);\n', '        \n', '        Transfer(src, dst, wad);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function approve(address guy, uint256 wad) returns (bool) {\n', '        _approvals[msg.sender][guy] = wad;\n', '        \n', '        Approval(msg.sender, guy, wad);\n', '        \n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract DSToken is DSTokenBase(0), DSStop {\n', '\n', '    bytes32  public  symbol;\n', '    uint256  public  decimals = 18; // standard token precision. override to customize\n', '\n', '    function DSToken(bytes32 symbol_) {\n', '        symbol = symbol_;\n', '    }\n', '\n', '    function transfer(address dst, uint wad) stoppable note returns (bool) {\n', '        return super.transfer(dst, wad);\n', '    }\n', '    function transferFrom(\n', '        address src, address dst, uint wad\n', '    ) stoppable note returns (bool) {\n', '        return super.transferFrom(src, dst, wad);\n', '    }\n', '    function approve(address guy, uint wad) stoppable note returns (bool) {\n', '        return super.approve(guy, wad);\n', '    }\n', '\n', '    function push(address dst, uint128 wad) returns (bool) {\n', '        return transfer(dst, wad);\n', '    }\n', '    function pull(address src, uint128 wad) returns (bool) {\n', '        return transferFrom(src, msg.sender, wad);\n', '    }\n', '\n', '    function mint(uint128 wad) auth stoppable note {\n', '        _balances[msg.sender] = add(_balances[msg.sender], wad);\n', '        _supply = add(_supply, wad);\n', '    }\n', '    function burn(uint128 wad) auth stoppable note {\n', '        _balances[msg.sender] = sub(_balances[msg.sender], wad);\n', '        _supply = sub(_supply, wad);\n', '    }\n', '\n', '    // Optional token name\n', '\n', '    bytes32   public  name = "";\n', '    \n', '    function setName(bytes32 name_) auth {\n', '        name = name_;\n', '    }\n', '\n', '}\n', '\n', 'contract LNCHSale is DSAuth, DSExec, DSMath {\n', '    DSToken  public  LNCH;                  // The LNCH token itself\n', '    uint128  public  totalSupply;          // Total LNCH amount created\n', '    uint128  public  foundersAllocation;   // Amount given to founders\n', '    string   public  foundersKey;          // Public key of founders\n', '    uint128  public  partnersAllocation;   // Amount given to partners\n', '    string   public  partnersKey;          // Public key of partners\n', '    uint128  public  consultantsAllocation;   // Amount given to consultants\n', '    string   public  consultantsKey;          // Public key of consultants\n', '    uint128  public  advisorsAllocation;   // Amount given to advisors\n', '    string   public  advisorsKey;          // Public key of advisors\n', '    uint128  public  developersAllocation;   // Amount given to developers\n', '    string   public  developersKey;          // Public key of developers\n', '\n', '    uint     public  openTime;             // Time of window 0 opening\n', '    uint     public  createFirstDay;       // Tokens sold in window 0\n', '\n', '    uint     public  startTime;            // Time of window 1 opening\n', '    uint     public  numberOfDays;         // Number of windows after 0\n', '    uint     public  createPerDay;         // Tokens sold in each window\n', '\n', '    mapping (uint => uint)                       public  dailyTotals;\n', '    mapping (uint => mapping (address => uint))  public  userBuys;\n', '    mapping (uint => mapping (address => bool))  public  claimed;\n', '    mapping (address => string)                  public  keys;\n', '\n', '    event LogBuy      (uint window, address user, uint amount);\n', '    event LogClaim    (uint window, address user, uint amount);\n', '    event LogRegister (address user, string key);\n', '    event LogCollect  (uint amount);\n', '    event LogFreeze   ();\n', '\n', 'function LNCHSale(\n', '        uint     _numberOfDays,\n', '        uint128  _totalSupply,\n', '        uint     _openTime,\n', '        uint     _startTime,\n', '        uint128  _foundersAllocation,\n', '        string   _foundersKey,\n', '        uint128  _partnersAllocation,\n', '        string   _partnersKey,\n', '        uint128  _consultantsAllocation,\n', '        string   _consultantsKey,\n', '        uint128  _advisorsAllocation,\n', '        string   _advisorsKey,\n', '        uint128  _developersAllocation,\n', '        string   _developersKey\n', '    ) {\n', '        numberOfDays          = _numberOfDays;\n', '        totalSupply           = _totalSupply;\n', '        openTime              = _openTime;\n', '        startTime             = _startTime;\n', '        foundersAllocation    = _foundersAllocation;\n', '        foundersKey           = _foundersKey;\n', '        partnersAllocation    = _partnersAllocation;\n', '        partnersKey           = _partnersKey;\n', '        consultantsAllocation = _consultantsAllocation;\n', '        consultantsKey        = _consultantsKey;\n', '        advisorsAllocation    = _advisorsAllocation;\n', '        advisorsKey           = _advisorsKey;\n', '        developersAllocation  = _developersAllocation;\n', '        developersKey         = _developersKey;\n', '\n', '        createFirstDay = wmul(totalSupply, 0.25 ether);\n', '        createPerDay = div(\n', '            createFirstDay,\n', '            numberOfDays\n', '        );\n', '\n', '        assert(numberOfDays > 0);\n', '        assert(totalSupply > foundersAllocation);\n', '        assert(totalSupply > partnersAllocation);\n', '        assert(totalSupply > consultantsAllocation);\n', '        assert(totalSupply > advisorsAllocation);\n', '        assert(totalSupply > developersAllocation);\n', '        assert(openTime < startTime);\n', '    }\n', '\n', '    function digitToNumber(uint8 b) constant returns (uint8) {\n', '      if ( b <= 57 )\n', '\treturn b-48 ;\n', '      if ( b <= 70 )\n', '\treturn b-65+10 ;\n', '      return b-97+10 ;\n', '    }\t    \n', '\n', '    function stringToAddress(string __address) constant returns (address) {\n', '      bytes memory _address = bytes(__address) ;\n', '      uint160 m = 0;\n', '      uint160 b = 0;\n', '      \n', '      for (uint8 i = 2; i < 42; i++) {\n', '\tm *= 16;\n', '\tb = uint160(digitToNumber(uint8(_address[i])));\n', '\tm += (b);\n', '      }\n', '      \n', '      return address(m);\n', '    }\n', ' \n', '    function initialize(DSToken lnch) auth {\n', '        address addr ;\n', '        assert(address(LNCH) == address(0));\n', '        assert(lnch.owner() == address(this));\n', '        assert(lnch.authority() == DSAuthority(0));\n', '        assert(lnch.totalSupply() == 0);\n', '\n', '        LNCH = lnch;\n', '        LNCH.mint(totalSupply);\n', '\n', '\taddr = stringToAddress(foundersKey) ;\n', '        LNCH.push(addr, foundersAllocation);\n', '\tkeys[addr] = foundersKey;\n', '        LogRegister(addr, foundersKey);\n', '\n', '\taddr = stringToAddress(partnersKey) ;\n', '        LNCH.push(addr, partnersAllocation);\n', '\tkeys[addr] = partnersKey;\n', '        LogRegister(addr, partnersKey);\n', '\n', '\taddr = stringToAddress(consultantsKey) ;\n', '        LNCH.push(addr, consultantsAllocation);\n', '\tkeys[addr] = consultantsKey;\n', '        LogRegister(addr, consultantsKey);\n', '\n', '\taddr = stringToAddress(advisorsKey) ;\n', '        LNCH.push(addr, advisorsAllocation);\n', '\tkeys[addr] = advisorsKey;\n', '        LogRegister(addr, advisorsKey);\n', '        \n', '    addr = stringToAddress(developersKey) ;\n', '        LNCH.push(addr, developersAllocation);\n', '\tkeys[addr] = developersKey;\n', '        LogRegister(addr, developersKey);\n', '\t\n', '    }\n', '\n', '    function time() constant returns (uint) {\n', '        return block.timestamp;\n', '    }\n', '\n', '    function today() constant returns (uint) {\n', '        return dayFor(time());\n', '    }\n', '\n', '    // Each window is 23 hours long so that end-of-window rotates\n', '    // around the clock for all timezones.\n', '    function dayFor(uint timestamp) constant returns (uint) {\n', '        return timestamp < startTime\n', '            ? 0\n', '            : sub(timestamp, startTime) / 23 hours + 1;\n', '    }\n', '\n', '    function createOnDay(uint day) constant returns (uint) {\n', '        return day == 0 ? createFirstDay : createPerDay;\n', '    }\n', '\n', '    // This method provides the buyer some protections regarding which\n', '    // day the buy order is submitted and the maximum price prior to\n', '    // applying this payment that will be allowed.\n', '    function buyWithLimit(uint day, uint limit) payable {\n', '        assert(time() >= openTime && today() <= numberOfDays);\n', '        assert(msg.value >= 0.01 ether);\n', '\n', '        assert(day >= today());\n', '        assert(day <= numberOfDays);\n', '\n', '        userBuys[day][msg.sender] += msg.value;\n', '        dailyTotals[day] += msg.value;\n', '\n', '        if (limit != 0) {\n', '            assert(dailyTotals[day] <= limit);\n', '        }\n', '\n', '        LogBuy(day, msg.sender, msg.value);\n', '    }\n', '\n', '    function buy() payable {\n', '       buyWithLimit(today(), 0);\n', '    }\n', '\n', '    function () payable {\n', '       buy();\n', '    }\n', '\n', '    function claim(uint day) {\n', '        assert(today() > day);\n', '\n', '        if (claimed[day][msg.sender] || dailyTotals[day] == 0) {\n', '            return;\n', '        }\n', '\n', '        // This will have small rounding errors, but the token is\n', '        // going to be truncated to 8 decimal places or less anyway\n', '        // when launched on its own chain.\n', '\n', '        var dailyTotal = cast(dailyTotals[day]);\n', '        var userTotal  = cast(userBuys[day][msg.sender]);\n', '        var price      = wdiv(cast(createOnDay(day)), dailyTotal);\n', '        var reward     = wmul(price, userTotal);\n', '\n', '        claimed[day][msg.sender] = true;\n', '        LNCH.push(msg.sender, reward);\n', '\n', '        LogClaim(day, msg.sender, reward);\n', '    }\n', '\n', '    function claimAll() {\n', '        for (uint i = 0; i < today(); i++) {\n', '            claim(i);\n', '        }\n', '    }\n', '\n', '    // Value should be a public key.  Read full key import policy.\n', '    // Manually registering requires a base58\n', '    // encoded using the LNCH public key format.\n', '    function register(string key) {\n', '        assert(today() <=  numberOfDays + 1);\n', '        assert(bytes(key).length <= 64);\n', '\n', '        keys[msg.sender] = key;\n', '\n', '        LogRegister(msg.sender, key);\n', '    }\n', '\n', '    // Crowdsale owners can collect ETH any number of times\n', '    function collect() auth {\n', '        assert(today() > 0); // Prevent recycling during window 0\n', '        exec(msg.sender, this.balance);\n', '        LogCollect(this.balance);\n', '    }\n', '\n', '    // Anyone can freeze the token 1 day after the sale ends\n', '    function freeze() {\n', '        assert(today() > numberOfDays + 1);\n', '        LNCH.stop();\n', '        LogFreeze();\n', '    }\n', '}']
