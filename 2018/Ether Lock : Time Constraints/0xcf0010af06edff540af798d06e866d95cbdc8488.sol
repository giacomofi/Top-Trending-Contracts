['pragma solidity ^0.4.21;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract UnicornManagementInterface {\n', '\n', '    function ownerAddress() external view returns (address);\n', '    function managerAddress() external view returns (address);\n', '    function communityAddress() external view returns (address);\n', '    function dividendManagerAddress() external view returns (address);\n', '    function walletAddress() external view returns (address);\n', '    function blackBoxAddress() external view returns (address);\n', '    function unicornBreedingAddress() external view returns (address);\n', '    function geneLabAddress() external view returns (address);\n', '    function unicornTokenAddress() external view returns (address);\n', '    function candyToken() external view returns (address);\n', '    function candyPowerToken() external view returns (address);\n', '\n', '    function createDividendPercent() external view returns (uint);\n', '    function sellDividendPercent() external view returns (uint);\n', '    function subFreezingPrice() external view returns (uint);\n', '    function subFreezingTime() external view returns (uint64);\n', '    function subTourFreezingPrice() external view returns (uint);\n', '    function subTourFreezingTime() external view returns (uint64);\n', '    function createUnicornPrice() external view returns (uint);\n', '    function createUnicornPriceInCandy() external view returns (uint);\n', '    function oraclizeFee() external view returns (uint);\n', '\n', '    function paused() external view returns (bool);\n', '    //    function locked() external view returns (bool);\n', '\n', '    function isTournament(address _tournamentAddress) external view returns (bool);\n', '\n', '    function getCreateUnicornFullPrice() external view returns (uint);\n', '    function getHybridizationFullPrice(uint _price) external view returns (uint);\n', '    function getSellUnicornFullPrice(uint _price) external view returns (uint);\n', '    function getCreateUnicornFullPriceInCandy() external view returns (uint);\n', '\n', '\n', '    //service\n', '    function registerInit(address _contract) external;\n', '\n', '}\n', '\n', 'contract UnicornAccessControl {\n', '\n', '    UnicornManagementInterface public unicornManagement;\n', '\n', '    function UnicornAccessControl(address _unicornManagementAddress) public {\n', '        unicornManagement = UnicornManagementInterface(_unicornManagementAddress);\n', '        unicornManagement.registerInit(this);\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == unicornManagement.ownerAddress());\n', '        _;\n', '    }\n', '\n', '    modifier onlyManager() {\n', '        require(msg.sender == unicornManagement.managerAddress());\n', '        _;\n', '    }\n', '\n', '    modifier onlyCommunity() {\n', '        require(msg.sender == unicornManagement.communityAddress());\n', '        _;\n', '    }\n', '\n', '    modifier onlyTournament() {\n', '        require(unicornManagement.isTournament(msg.sender));\n', '        _;\n', '    }\n', '\n', '    modifier whenNotPaused() {\n', '        require(!unicornManagement.paused());\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused {\n', '        require(unicornManagement.paused());\n', '        _;\n', '    }\n', '\n', '\n', '    modifier onlyManagement() {\n', '        require(msg.sender == address(unicornManagement));\n', '        _;\n', '    }\n', '\n', '    modifier onlyBreeding() {\n', '        require(msg.sender == unicornManagement.unicornBreedingAddress());\n', '        _;\n', '    }\n', '\n', '    modifier onlyGeneLab() {\n', '        require(msg.sender == unicornManagement.geneLabAddress());\n', '        _;\n', '    }\n', '\n', '    modifier onlyBlackBox() {\n', '        require(msg.sender == unicornManagement.blackBoxAddress());\n', '        _;\n', '    }\n', '\n', '    modifier onlyUnicornToken() {\n', '        require(msg.sender == unicornManagement.unicornTokenAddress());\n', '        _;\n', '    }\n', '\n', '    function isGamePaused() external view returns (bool) {\n', '        return unicornManagement.paused();\n', '    }\n', '}\n', '\n', 'contract UnicornBreedingInterface {\n', '    function deleteOffer(uint _unicornId) external;\n', '    function deleteHybridization(uint _unicornId) external;\n', '}\n', '\n', '\n', 'contract UnicornBase is UnicornAccessControl {\n', '    using SafeMath for uint;\n', '    UnicornBreedingInterface public unicornBreeding; //set on deploy\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 unicornId);\n', '    event Approval(address indexed owner, address indexed approved, uint256 unicornId);\n', '    event UnicornGeneSet(uint indexed unicornId);\n', '    event UnicornGeneUpdate(uint indexed unicornId);\n', '    event UnicornFreezingTimeSet(uint indexed unicornId, uint time);\n', '    event UnicornTourFreezingTimeSet(uint indexed unicornId, uint time);\n', '\n', '\n', '    struct Unicorn {\n', '        bytes gene;\n', '        uint64 birthTime;\n', '        uint64 freezingEndTime;\n', '        uint64 freezingTourEndTime;\n', '        string name;\n', '    }\n', '\n', '    uint8 maxFreezingIndex = 7;\n', '    uint32[8] internal freezing = [\n', '    uint32(1 hours),    //1 hour\n', '    uint32(2 hours),    //2 - 4 hours\n', '    uint32(8 hours),    //8 - 12 hours\n', '    uint32(16 hours),   //16 - 24 hours\n', '    uint32(36 hours),   //36 - 48 hours\n', '    uint32(72 hours),   //72 - 96 hours\n', '    uint32(120 hours),  //120 - 144 hours\n', '    uint32(168 hours)   //168 hours\n', '    ];\n', '\n', '    //count for random plus from 0 to ..\n', '    uint32[8] internal freezingPlusCount = [\n', '    0, 3, 5, 9, 13, 25, 25, 0\n', '    ];\n', '\n', '    // Total amount of unicorns\n', '    uint256 private totalUnicorns;\n', '\n', '    // Incremental counter of unicorns Id\n', '    uint256 private lastUnicornId;\n', '\n', '    //Mapping from unicorn ID to Unicorn struct\n', '    mapping(uint256 => Unicorn) public unicorns;\n', '\n', '    // Mapping from unicorn ID to owner\n', '    mapping(uint256 => address) private unicornOwner;\n', '\n', '    // Mapping from unicorn ID to approved address\n', '    mapping(uint256 => address) private unicornApprovals;\n', '\n', '    // Mapping from owner to list of owned unicorn IDs\n', '    mapping(address => uint256[]) private ownedUnicorns;\n', '\n', '    // Mapping from unicorn ID to index of the owner unicorns list\n', '    // т.е. ID уникорна => порядковый номер в списке владельца\n', '    mapping(uint256 => uint256) private ownedUnicornsIndex;\n', '\n', '    // Mapping from unicorn ID to approval for GeneLab\n', '    mapping(uint256 => bool) private unicornApprovalsForGeneLab;\n', '\n', '    modifier onlyOwnerOf(uint256 _unicornId) {\n', '        require(owns(msg.sender, _unicornId));\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the owner of the specified unicorn ID\n', '    * @param _unicornId uint256 ID of the unicorn to query the owner of\n', '    * @return owner address currently marked as the owner of the given unicorn ID\n', '    */\n', '    function ownerOf(uint256 _unicornId) public view returns (address) {\n', '        return unicornOwner[_unicornId];\n', '        //        address owner = unicornOwner[_unicornId];\n', '        //        require(owner != address(0));\n', '        //        return owner;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalUnicorns;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address\n', '    * @param _owner address to query the balance of\n', '    * @return uint256 representing the amount owned by the passed address\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return ownedUnicorns[_owner].length;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the list of unicorns owned by a given address\n', '    * @param _owner address to query the unicorns of\n', '    * @return uint256[] representing the list of unicorns owned by the passed address\n', '    */\n', '    function unicornsOf(address _owner) public view returns (uint256[]) {\n', '        return ownedUnicorns[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the approved address to take ownership of a given unicorn ID\n', '    * @param _unicornId uint256 ID of the unicorn to query the approval of\n', '    * @return address currently approved to take ownership of the given unicorn ID\n', '    */\n', '    function approvedFor(uint256 _unicornId) public view returns (address) {\n', '        return unicornApprovals[_unicornId];\n', '    }\n', '\n', '    /**\n', '    * @dev Tells whether the msg.sender is approved for the given unicorn ID or not\n', '    * This function is not private so it can be extended in further implementations like the operatable ERC721\n', '    * @param _owner address of the owner to query the approval of\n', '    * @param _unicornId uint256 ID of the unicorn to query the approval of\n', '    * @return bool whether the msg.sender is approved for the given unicorn ID or not\n', '    */\n', '    function allowance(address _owner, uint256 _unicornId) public view returns (bool) {\n', '        return approvedFor(_unicornId) == _owner;\n', '    }\n', '\n', '    /**\n', '    * @dev Approves another address to claim for the ownership of the given unicorn ID\n', '    * @param _to address to be approved for the given unicorn ID\n', '    * @param _unicornId uint256 ID of the unicorn to be approved\n', '    */\n', '    function approve(address _to, uint256 _unicornId) public onlyOwnerOf(_unicornId) {\n', '        //модификатор onlyOwnerOf гарантирует, что owner = msg.sender\n', '        //        address owner = ownerOf(_unicornId);\n', '        require(_to != msg.sender);\n', '        if (approvedFor(_unicornId) != address(0) || _to != address(0)) {\n', '            unicornApprovals[_unicornId] = _to;\n', '            emit Approval(msg.sender, _to, _unicornId);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Claims the ownership of a given unicorn ID\n', '    * @param _unicornId uint256 ID of the unicorn being claimed by the msg.sender\n', '    */\n', '    function takeOwnership(uint256 _unicornId) public {\n', '        require(allowance(msg.sender, _unicornId));\n', '        clearApprovalAndTransfer(ownerOf(_unicornId), msg.sender, _unicornId);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfers the ownership of a given unicorn ID to another address\n', '    * @param _to address to receive the ownership of the given unicorn ID\n', '    * @param _unicornId uint256 ID of the unicorn to be transferred\n', '    */\n', '    function transfer(address _to, uint256 _unicornId) public onlyOwnerOf(_unicornId) {\n', '        clearApprovalAndTransfer(msg.sender, _to, _unicornId);\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Internal function to clear current approval and transfer the ownership of a given unicorn ID\n', '    * @param _from address which you want to send unicorns from\n', '    * @param _to address which you want to transfer the unicorn to\n', '    * @param _unicornId uint256 ID of the unicorn to be transferred\n', '    */\n', '    function clearApprovalAndTransfer(address _from, address _to, uint256 _unicornId) internal {\n', '        require(owns(_from, _unicornId));\n', '        require(_to != address(0));\n', '        require(_to != ownerOf(_unicornId));\n', '\n', '        clearApproval(_from, _unicornId);\n', '        removeUnicorn(_from, _unicornId);\n', '        addUnicorn(_to, _unicornId);\n', '        emit Transfer(_from, _to, _unicornId);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to clear current approval of a given unicorn ID\n', '    * @param _unicornId uint256 ID of the unicorn to be transferred\n', '    */\n', '    function clearApproval(address _owner, uint256 _unicornId) private {\n', '        require(owns(_owner, _unicornId));\n', '        unicornApprovals[_unicornId] = 0;\n', '        emit Approval(_owner, 0, _unicornId);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to add a unicorn ID to the list of a given address\n', '    * @param _to address representing the new owner of the given unicorn ID\n', '    * @param _unicornId uint256 ID of the unicorn to be added to the unicorns list of the given address\n', '    */\n', '    function addUnicorn(address _to, uint256 _unicornId) private {\n', '        require(unicornOwner[_unicornId] == address(0));\n', '        unicornOwner[_unicornId] = _to;\n', '        //        uint256 length = balanceOf(_to);\n', '        uint256 length = ownedUnicorns[_to].length;\n', '        ownedUnicorns[_to].push(_unicornId);\n', '        ownedUnicornsIndex[_unicornId] = length;\n', '        totalUnicorns = totalUnicorns.add(1);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to remove a unicorn ID from the list of a given address\n', '    * @param _from address representing the previous owner of the given unicorn ID\n', '    * @param _unicornId uint256 ID of the unicorn to be removed from the unicorns list of the given address\n', '    */\n', '    function removeUnicorn(address _from, uint256 _unicornId) private {\n', '        require(owns(_from, _unicornId));\n', '\n', '        uint256 unicornIndex = ownedUnicornsIndex[_unicornId];\n', '        //        uint256 lastUnicornIndex = balanceOf(_from).sub(1);\n', '        uint256 lastUnicornIndex = ownedUnicorns[_from].length.sub(1);\n', '        uint256 lastUnicorn = ownedUnicorns[_from][lastUnicornIndex];\n', '\n', '        unicornOwner[_unicornId] = 0;\n', '        ownedUnicorns[_from][unicornIndex] = lastUnicorn;\n', '        ownedUnicorns[_from][lastUnicornIndex] = 0;\n', '        // Note that this will handle single-element arrays. In that case, both unicornIndex and lastUnicornIndex are going to\n', '        // be zero. Then we can make sure that we will remove _unicornId from the ownedUnicorns list since we are first swapping\n', '        // the lastUnicorn to the first position, and then dropping the element placed in the last position of the list\n', '\n', '        ownedUnicorns[_from].length--;\n', '        ownedUnicornsIndex[_unicornId] = 0;\n', '        ownedUnicornsIndex[lastUnicorn] = unicornIndex;\n', '        totalUnicorns = totalUnicorns.sub(1);\n', '\n', '        //deleting sale offer, if exists\n', '        //TODO check if contract exists?\n', '        //        if (address(unicornBreeding) != address(0)) {\n', '        unicornBreeding.deleteOffer(_unicornId);\n', '        unicornBreeding.deleteHybridization(_unicornId);\n', '        //        }\n', '    }\n', '\n', '    //specific\n', '    //    function burnUnicorn(uint256 _unicornId) onlyOwnerOf(_unicornId) public  {\n', '    //        if (approvedFor(_unicornId) != 0) {\n', '    //            clearApproval(msg.sender, _unicornId);\n', '    //        }\n', '    //        removeUnicorn(msg.sender, _unicornId);\n', '    //        //destroy unicorn data\n', '    //        delete unicorns[_unicornId];\n', '    //        emit Transfer(msg.sender, 0x0, _unicornId);\n', '    //    }\n', '\n', '\n', '    function createUnicorn(address _owner) onlyBreeding external returns (uint) {\n', '        require(_owner != address(0));\n', '        uint256 _unicornId = lastUnicornId++;\n', '        addUnicorn(_owner, _unicornId);\n', '        //store new unicorn data\n', '        unicorns[_unicornId] = Unicorn({\n', '            gene : new bytes(0),\n', '            birthTime : uint64(now),\n', '            freezingEndTime : 0,\n', '            freezingTourEndTime: 0,\n', '            name: &#39;&#39;\n', '            });\n', '        emit Transfer(0x0, _owner, _unicornId);\n', '        return _unicornId;\n', '    }\n', '\n', '\n', '    function owns(address _claimant, uint256 _unicornId) public view returns (bool) {\n', '        return ownerOf(_unicornId) == _claimant && ownerOf(_unicornId) != address(0);\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _unicornId) public {\n', '        require(_to != address(this));\n', '        require(allowance(msg.sender, _unicornId));\n', '        clearApprovalAndTransfer(_from, _to, _unicornId);\n', '    }\n', '\n', '\n', '    function fromHexChar(uint8 _c) internal pure returns (uint8) {\n', '        return _c - (_c < 58 ? 48 : (_c < 97 ? 55 : 87));\n', '    }\n', '\n', '\n', '    function getUnicornGenByte(uint _unicornId, uint _byteNo) public view returns (uint8) {\n', '        uint n = _byteNo << 1; // = _byteNo * 2\n', '        //        require(unicorns[_unicornId].gene.length >= n + 1);\n', '        if (unicorns[_unicornId].gene.length < n + 1) {\n', '            return 0;\n', '        }\n', '        return fromHexChar(uint8(unicorns[_unicornId].gene[n])) << 4 | fromHexChar(uint8(unicorns[_unicornId].gene[n + 1]));\n', '    }\n', '\n', '\n', '    function setName(uint256 _unicornId, string _name ) public onlyOwnerOf(_unicornId) returns (bool) {\n', '        bytes memory tmp = bytes(unicorns[_unicornId].name);\n', '        require(tmp.length == 0);\n', '\n', '        unicorns[_unicornId].name = _name;\n', '        return true;\n', '    }\n', '\n', '\n', '    function getGen(uint _unicornId) external view returns (bytes){\n', '        return unicorns[_unicornId].gene;\n', '    }\n', '\n', '    function setGene(uint _unicornId, bytes _gene) onlyBlackBox external  {\n', '        if (unicorns[_unicornId].gene.length == 0) {\n', '            unicorns[_unicornId].gene = _gene;\n', '            emit UnicornGeneSet(_unicornId);\n', '        }\n', '    }\n', '\n', '    function updateGene(uint _unicornId, bytes _gene) onlyGeneLab public {\n', '        require(unicornApprovalsForGeneLab[_unicornId]);\n', '        delete unicornApprovalsForGeneLab[_unicornId];\n', '        unicorns[_unicornId].gene = _gene;\n', '        emit UnicornGeneUpdate(_unicornId);\n', '    }\n', '\n', '    function approveForGeneLab(uint256 _unicornId) public onlyOwnerOf(_unicornId) {\n', '        unicornApprovalsForGeneLab[_unicornId] = true;\n', '    }\n', '\n', '    function clearApprovalForGeneLab(uint256 _unicornId) public onlyOwnerOf(_unicornId) {\n', '        delete unicornApprovalsForGeneLab[_unicornId];\n', '    }\n', '\n', '    //transfer by market\n', '    function marketTransfer(address _from, address _to, uint256 _unicornId) onlyBreeding external {\n', '        clearApprovalAndTransfer(_from, _to, _unicornId);\n', '    }\n', '\n', '    function plusFreezingTime(uint _unicornId) onlyBreeding external  {\n', '        unicorns[_unicornId].freezingEndTime = uint64(_getFreezeTime(getUnicornGenByte(_unicornId, 163)) + now);\n', '        emit UnicornFreezingTimeSet(_unicornId, unicorns[_unicornId].freezingEndTime);\n', '    }\n', '\n', '    function plusTourFreezingTime(uint _unicornId) onlyBreeding external {\n', '        unicorns[_unicornId].freezingTourEndTime = uint64(_getFreezeTime(getUnicornGenByte(_unicornId, 168)) + now);\n', '        emit UnicornTourFreezingTimeSet(_unicornId, unicorns[_unicornId].freezingTourEndTime);\n', '    }\n', '\n', '    function _getFreezeTime(uint8 freezingIndex) internal view returns (uint time) {\n', '        freezingIndex %= maxFreezingIndex;\n', '        time = freezing[freezingIndex];\n', '        if (freezingPlusCount[freezingIndex] != 0) {\n', '            time += (uint(block.blockhash(block.number - 1)) % freezingPlusCount[freezingIndex]) * 1 hours;\n', '        }\n', '    }\n', '\n', '\n', '    //change freezing time for candy\n', '    function minusFreezingTime(uint _unicornId, uint64 _time) onlyBreeding public {\n', '        //не минусуем на уже размороженных конях\n', '        require(unicorns[_unicornId].freezingEndTime > now);\n', '        //не используем safeMath, т.к. subFreezingTime в теории не должен быть больше now %)\n', '        unicorns[_unicornId].freezingEndTime -= _time;\n', '    }\n', '\n', '    //change tour freezing time for candy\n', '    function minusTourFreezingTime(uint _unicornId, uint64 _time) onlyBreeding public {\n', '        //не минусуем на уже размороженных конях\n', '        require(unicorns[_unicornId].freezingTourEndTime > now);\n', '        //не используем safeMath, т.к. subTourFreezingTime в теории не должен быть больше now %)\n', '        unicorns[_unicornId].freezingTourEndTime -= _time;\n', '    }\n', '\n', '    function isUnfreezed(uint _unicornId) public view returns (bool) {\n', '        return (unicorns[_unicornId].birthTime > 0 && unicorns[_unicornId].freezingEndTime <= uint64(now));\n', '    }\n', '\n', '    function isTourUnfreezed(uint _unicornId) public view returns (bool) {\n', '        return (unicorns[_unicornId].birthTime > 0 && unicorns[_unicornId].freezingTourEndTime <= uint64(now));\n', '    }\n', '\n', '}\n', '\n', 'contract UnicornToken is UnicornBase {\n', '    string public constant name = "UnicornGO";\n', '    string public constant symbol = "UNG";\n', '\n', '    function UnicornToken(address _unicornManagementAddress) UnicornAccessControl(_unicornManagementAddress) public {\n', '\n', '    }\n', '\n', '    function init() onlyManagement whenPaused external {\n', '        unicornBreeding = UnicornBreedingInterface(unicornManagement.unicornBreedingAddress());\n', '    }\n', '\n', '    function() public {\n', '\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract UnicornManagementInterface {\n', '\n', '    function ownerAddress() external view returns (address);\n', '    function managerAddress() external view returns (address);\n', '    function communityAddress() external view returns (address);\n', '    function dividendManagerAddress() external view returns (address);\n', '    function walletAddress() external view returns (address);\n', '    function blackBoxAddress() external view returns (address);\n', '    function unicornBreedingAddress() external view returns (address);\n', '    function geneLabAddress() external view returns (address);\n', '    function unicornTokenAddress() external view returns (address);\n', '    function candyToken() external view returns (address);\n', '    function candyPowerToken() external view returns (address);\n', '\n', '    function createDividendPercent() external view returns (uint);\n', '    function sellDividendPercent() external view returns (uint);\n', '    function subFreezingPrice() external view returns (uint);\n', '    function subFreezingTime() external view returns (uint64);\n', '    function subTourFreezingPrice() external view returns (uint);\n', '    function subTourFreezingTime() external view returns (uint64);\n', '    function createUnicornPrice() external view returns (uint);\n', '    function createUnicornPriceInCandy() external view returns (uint);\n', '    function oraclizeFee() external view returns (uint);\n', '\n', '    function paused() external view returns (bool);\n', '    //    function locked() external view returns (bool);\n', '\n', '    function isTournament(address _tournamentAddress) external view returns (bool);\n', '\n', '    function getCreateUnicornFullPrice() external view returns (uint);\n', '    function getHybridizationFullPrice(uint _price) external view returns (uint);\n', '    function getSellUnicornFullPrice(uint _price) external view returns (uint);\n', '    function getCreateUnicornFullPriceInCandy() external view returns (uint);\n', '\n', '\n', '    //service\n', '    function registerInit(address _contract) external;\n', '\n', '}\n', '\n', 'contract UnicornAccessControl {\n', '\n', '    UnicornManagementInterface public unicornManagement;\n', '\n', '    function UnicornAccessControl(address _unicornManagementAddress) public {\n', '        unicornManagement = UnicornManagementInterface(_unicornManagementAddress);\n', '        unicornManagement.registerInit(this);\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == unicornManagement.ownerAddress());\n', '        _;\n', '    }\n', '\n', '    modifier onlyManager() {\n', '        require(msg.sender == unicornManagement.managerAddress());\n', '        _;\n', '    }\n', '\n', '    modifier onlyCommunity() {\n', '        require(msg.sender == unicornManagement.communityAddress());\n', '        _;\n', '    }\n', '\n', '    modifier onlyTournament() {\n', '        require(unicornManagement.isTournament(msg.sender));\n', '        _;\n', '    }\n', '\n', '    modifier whenNotPaused() {\n', '        require(!unicornManagement.paused());\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused {\n', '        require(unicornManagement.paused());\n', '        _;\n', '    }\n', '\n', '\n', '    modifier onlyManagement() {\n', '        require(msg.sender == address(unicornManagement));\n', '        _;\n', '    }\n', '\n', '    modifier onlyBreeding() {\n', '        require(msg.sender == unicornManagement.unicornBreedingAddress());\n', '        _;\n', '    }\n', '\n', '    modifier onlyGeneLab() {\n', '        require(msg.sender == unicornManagement.geneLabAddress());\n', '        _;\n', '    }\n', '\n', '    modifier onlyBlackBox() {\n', '        require(msg.sender == unicornManagement.blackBoxAddress());\n', '        _;\n', '    }\n', '\n', '    modifier onlyUnicornToken() {\n', '        require(msg.sender == unicornManagement.unicornTokenAddress());\n', '        _;\n', '    }\n', '\n', '    function isGamePaused() external view returns (bool) {\n', '        return unicornManagement.paused();\n', '    }\n', '}\n', '\n', 'contract UnicornBreedingInterface {\n', '    function deleteOffer(uint _unicornId) external;\n', '    function deleteHybridization(uint _unicornId) external;\n', '}\n', '\n', '\n', 'contract UnicornBase is UnicornAccessControl {\n', '    using SafeMath for uint;\n', '    UnicornBreedingInterface public unicornBreeding; //set on deploy\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 unicornId);\n', '    event Approval(address indexed owner, address indexed approved, uint256 unicornId);\n', '    event UnicornGeneSet(uint indexed unicornId);\n', '    event UnicornGeneUpdate(uint indexed unicornId);\n', '    event UnicornFreezingTimeSet(uint indexed unicornId, uint time);\n', '    event UnicornTourFreezingTimeSet(uint indexed unicornId, uint time);\n', '\n', '\n', '    struct Unicorn {\n', '        bytes gene;\n', '        uint64 birthTime;\n', '        uint64 freezingEndTime;\n', '        uint64 freezingTourEndTime;\n', '        string name;\n', '    }\n', '\n', '    uint8 maxFreezingIndex = 7;\n', '    uint32[8] internal freezing = [\n', '    uint32(1 hours),    //1 hour\n', '    uint32(2 hours),    //2 - 4 hours\n', '    uint32(8 hours),    //8 - 12 hours\n', '    uint32(16 hours),   //16 - 24 hours\n', '    uint32(36 hours),   //36 - 48 hours\n', '    uint32(72 hours),   //72 - 96 hours\n', '    uint32(120 hours),  //120 - 144 hours\n', '    uint32(168 hours)   //168 hours\n', '    ];\n', '\n', '    //count for random plus from 0 to ..\n', '    uint32[8] internal freezingPlusCount = [\n', '    0, 3, 5, 9, 13, 25, 25, 0\n', '    ];\n', '\n', '    // Total amount of unicorns\n', '    uint256 private totalUnicorns;\n', '\n', '    // Incremental counter of unicorns Id\n', '    uint256 private lastUnicornId;\n', '\n', '    //Mapping from unicorn ID to Unicorn struct\n', '    mapping(uint256 => Unicorn) public unicorns;\n', '\n', '    // Mapping from unicorn ID to owner\n', '    mapping(uint256 => address) private unicornOwner;\n', '\n', '    // Mapping from unicorn ID to approved address\n', '    mapping(uint256 => address) private unicornApprovals;\n', '\n', '    // Mapping from owner to list of owned unicorn IDs\n', '    mapping(address => uint256[]) private ownedUnicorns;\n', '\n', '    // Mapping from unicorn ID to index of the owner unicorns list\n', '    // т.е. ID уникорна => порядковый номер в списке владельца\n', '    mapping(uint256 => uint256) private ownedUnicornsIndex;\n', '\n', '    // Mapping from unicorn ID to approval for GeneLab\n', '    mapping(uint256 => bool) private unicornApprovalsForGeneLab;\n', '\n', '    modifier onlyOwnerOf(uint256 _unicornId) {\n', '        require(owns(msg.sender, _unicornId));\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the owner of the specified unicorn ID\n', '    * @param _unicornId uint256 ID of the unicorn to query the owner of\n', '    * @return owner address currently marked as the owner of the given unicorn ID\n', '    */\n', '    function ownerOf(uint256 _unicornId) public view returns (address) {\n', '        return unicornOwner[_unicornId];\n', '        //        address owner = unicornOwner[_unicornId];\n', '        //        require(owner != address(0));\n', '        //        return owner;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalUnicorns;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address\n', '    * @param _owner address to query the balance of\n', '    * @return uint256 representing the amount owned by the passed address\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return ownedUnicorns[_owner].length;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the list of unicorns owned by a given address\n', '    * @param _owner address to query the unicorns of\n', '    * @return uint256[] representing the list of unicorns owned by the passed address\n', '    */\n', '    function unicornsOf(address _owner) public view returns (uint256[]) {\n', '        return ownedUnicorns[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the approved address to take ownership of a given unicorn ID\n', '    * @param _unicornId uint256 ID of the unicorn to query the approval of\n', '    * @return address currently approved to take ownership of the given unicorn ID\n', '    */\n', '    function approvedFor(uint256 _unicornId) public view returns (address) {\n', '        return unicornApprovals[_unicornId];\n', '    }\n', '\n', '    /**\n', '    * @dev Tells whether the msg.sender is approved for the given unicorn ID or not\n', '    * This function is not private so it can be extended in further implementations like the operatable ERC721\n', '    * @param _owner address of the owner to query the approval of\n', '    * @param _unicornId uint256 ID of the unicorn to query the approval of\n', '    * @return bool whether the msg.sender is approved for the given unicorn ID or not\n', '    */\n', '    function allowance(address _owner, uint256 _unicornId) public view returns (bool) {\n', '        return approvedFor(_unicornId) == _owner;\n', '    }\n', '\n', '    /**\n', '    * @dev Approves another address to claim for the ownership of the given unicorn ID\n', '    * @param _to address to be approved for the given unicorn ID\n', '    * @param _unicornId uint256 ID of the unicorn to be approved\n', '    */\n', '    function approve(address _to, uint256 _unicornId) public onlyOwnerOf(_unicornId) {\n', '        //модификатор onlyOwnerOf гарантирует, что owner = msg.sender\n', '        //        address owner = ownerOf(_unicornId);\n', '        require(_to != msg.sender);\n', '        if (approvedFor(_unicornId) != address(0) || _to != address(0)) {\n', '            unicornApprovals[_unicornId] = _to;\n', '            emit Approval(msg.sender, _to, _unicornId);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Claims the ownership of a given unicorn ID\n', '    * @param _unicornId uint256 ID of the unicorn being claimed by the msg.sender\n', '    */\n', '    function takeOwnership(uint256 _unicornId) public {\n', '        require(allowance(msg.sender, _unicornId));\n', '        clearApprovalAndTransfer(ownerOf(_unicornId), msg.sender, _unicornId);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfers the ownership of a given unicorn ID to another address\n', '    * @param _to address to receive the ownership of the given unicorn ID\n', '    * @param _unicornId uint256 ID of the unicorn to be transferred\n', '    */\n', '    function transfer(address _to, uint256 _unicornId) public onlyOwnerOf(_unicornId) {\n', '        clearApprovalAndTransfer(msg.sender, _to, _unicornId);\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Internal function to clear current approval and transfer the ownership of a given unicorn ID\n', '    * @param _from address which you want to send unicorns from\n', '    * @param _to address which you want to transfer the unicorn to\n', '    * @param _unicornId uint256 ID of the unicorn to be transferred\n', '    */\n', '    function clearApprovalAndTransfer(address _from, address _to, uint256 _unicornId) internal {\n', '        require(owns(_from, _unicornId));\n', '        require(_to != address(0));\n', '        require(_to != ownerOf(_unicornId));\n', '\n', '        clearApproval(_from, _unicornId);\n', '        removeUnicorn(_from, _unicornId);\n', '        addUnicorn(_to, _unicornId);\n', '        emit Transfer(_from, _to, _unicornId);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to clear current approval of a given unicorn ID\n', '    * @param _unicornId uint256 ID of the unicorn to be transferred\n', '    */\n', '    function clearApproval(address _owner, uint256 _unicornId) private {\n', '        require(owns(_owner, _unicornId));\n', '        unicornApprovals[_unicornId] = 0;\n', '        emit Approval(_owner, 0, _unicornId);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to add a unicorn ID to the list of a given address\n', '    * @param _to address representing the new owner of the given unicorn ID\n', '    * @param _unicornId uint256 ID of the unicorn to be added to the unicorns list of the given address\n', '    */\n', '    function addUnicorn(address _to, uint256 _unicornId) private {\n', '        require(unicornOwner[_unicornId] == address(0));\n', '        unicornOwner[_unicornId] = _to;\n', '        //        uint256 length = balanceOf(_to);\n', '        uint256 length = ownedUnicorns[_to].length;\n', '        ownedUnicorns[_to].push(_unicornId);\n', '        ownedUnicornsIndex[_unicornId] = length;\n', '        totalUnicorns = totalUnicorns.add(1);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to remove a unicorn ID from the list of a given address\n', '    * @param _from address representing the previous owner of the given unicorn ID\n', '    * @param _unicornId uint256 ID of the unicorn to be removed from the unicorns list of the given address\n', '    */\n', '    function removeUnicorn(address _from, uint256 _unicornId) private {\n', '        require(owns(_from, _unicornId));\n', '\n', '        uint256 unicornIndex = ownedUnicornsIndex[_unicornId];\n', '        //        uint256 lastUnicornIndex = balanceOf(_from).sub(1);\n', '        uint256 lastUnicornIndex = ownedUnicorns[_from].length.sub(1);\n', '        uint256 lastUnicorn = ownedUnicorns[_from][lastUnicornIndex];\n', '\n', '        unicornOwner[_unicornId] = 0;\n', '        ownedUnicorns[_from][unicornIndex] = lastUnicorn;\n', '        ownedUnicorns[_from][lastUnicornIndex] = 0;\n', '        // Note that this will handle single-element arrays. In that case, both unicornIndex and lastUnicornIndex are going to\n', '        // be zero. Then we can make sure that we will remove _unicornId from the ownedUnicorns list since we are first swapping\n', '        // the lastUnicorn to the first position, and then dropping the element placed in the last position of the list\n', '\n', '        ownedUnicorns[_from].length--;\n', '        ownedUnicornsIndex[_unicornId] = 0;\n', '        ownedUnicornsIndex[lastUnicorn] = unicornIndex;\n', '        totalUnicorns = totalUnicorns.sub(1);\n', '\n', '        //deleting sale offer, if exists\n', '        //TODO check if contract exists?\n', '        //        if (address(unicornBreeding) != address(0)) {\n', '        unicornBreeding.deleteOffer(_unicornId);\n', '        unicornBreeding.deleteHybridization(_unicornId);\n', '        //        }\n', '    }\n', '\n', '    //specific\n', '    //    function burnUnicorn(uint256 _unicornId) onlyOwnerOf(_unicornId) public  {\n', '    //        if (approvedFor(_unicornId) != 0) {\n', '    //            clearApproval(msg.sender, _unicornId);\n', '    //        }\n', '    //        removeUnicorn(msg.sender, _unicornId);\n', '    //        //destroy unicorn data\n', '    //        delete unicorns[_unicornId];\n', '    //        emit Transfer(msg.sender, 0x0, _unicornId);\n', '    //    }\n', '\n', '\n', '    function createUnicorn(address _owner) onlyBreeding external returns (uint) {\n', '        require(_owner != address(0));\n', '        uint256 _unicornId = lastUnicornId++;\n', '        addUnicorn(_owner, _unicornId);\n', '        //store new unicorn data\n', '        unicorns[_unicornId] = Unicorn({\n', '            gene : new bytes(0),\n', '            birthTime : uint64(now),\n', '            freezingEndTime : 0,\n', '            freezingTourEndTime: 0,\n', "            name: ''\n", '            });\n', '        emit Transfer(0x0, _owner, _unicornId);\n', '        return _unicornId;\n', '    }\n', '\n', '\n', '    function owns(address _claimant, uint256 _unicornId) public view returns (bool) {\n', '        return ownerOf(_unicornId) == _claimant && ownerOf(_unicornId) != address(0);\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _unicornId) public {\n', '        require(_to != address(this));\n', '        require(allowance(msg.sender, _unicornId));\n', '        clearApprovalAndTransfer(_from, _to, _unicornId);\n', '    }\n', '\n', '\n', '    function fromHexChar(uint8 _c) internal pure returns (uint8) {\n', '        return _c - (_c < 58 ? 48 : (_c < 97 ? 55 : 87));\n', '    }\n', '\n', '\n', '    function getUnicornGenByte(uint _unicornId, uint _byteNo) public view returns (uint8) {\n', '        uint n = _byteNo << 1; // = _byteNo * 2\n', '        //        require(unicorns[_unicornId].gene.length >= n + 1);\n', '        if (unicorns[_unicornId].gene.length < n + 1) {\n', '            return 0;\n', '        }\n', '        return fromHexChar(uint8(unicorns[_unicornId].gene[n])) << 4 | fromHexChar(uint8(unicorns[_unicornId].gene[n + 1]));\n', '    }\n', '\n', '\n', '    function setName(uint256 _unicornId, string _name ) public onlyOwnerOf(_unicornId) returns (bool) {\n', '        bytes memory tmp = bytes(unicorns[_unicornId].name);\n', '        require(tmp.length == 0);\n', '\n', '        unicorns[_unicornId].name = _name;\n', '        return true;\n', '    }\n', '\n', '\n', '    function getGen(uint _unicornId) external view returns (bytes){\n', '        return unicorns[_unicornId].gene;\n', '    }\n', '\n', '    function setGene(uint _unicornId, bytes _gene) onlyBlackBox external  {\n', '        if (unicorns[_unicornId].gene.length == 0) {\n', '            unicorns[_unicornId].gene = _gene;\n', '            emit UnicornGeneSet(_unicornId);\n', '        }\n', '    }\n', '\n', '    function updateGene(uint _unicornId, bytes _gene) onlyGeneLab public {\n', '        require(unicornApprovalsForGeneLab[_unicornId]);\n', '        delete unicornApprovalsForGeneLab[_unicornId];\n', '        unicorns[_unicornId].gene = _gene;\n', '        emit UnicornGeneUpdate(_unicornId);\n', '    }\n', '\n', '    function approveForGeneLab(uint256 _unicornId) public onlyOwnerOf(_unicornId) {\n', '        unicornApprovalsForGeneLab[_unicornId] = true;\n', '    }\n', '\n', '    function clearApprovalForGeneLab(uint256 _unicornId) public onlyOwnerOf(_unicornId) {\n', '        delete unicornApprovalsForGeneLab[_unicornId];\n', '    }\n', '\n', '    //transfer by market\n', '    function marketTransfer(address _from, address _to, uint256 _unicornId) onlyBreeding external {\n', '        clearApprovalAndTransfer(_from, _to, _unicornId);\n', '    }\n', '\n', '    function plusFreezingTime(uint _unicornId) onlyBreeding external  {\n', '        unicorns[_unicornId].freezingEndTime = uint64(_getFreezeTime(getUnicornGenByte(_unicornId, 163)) + now);\n', '        emit UnicornFreezingTimeSet(_unicornId, unicorns[_unicornId].freezingEndTime);\n', '    }\n', '\n', '    function plusTourFreezingTime(uint _unicornId) onlyBreeding external {\n', '        unicorns[_unicornId].freezingTourEndTime = uint64(_getFreezeTime(getUnicornGenByte(_unicornId, 168)) + now);\n', '        emit UnicornTourFreezingTimeSet(_unicornId, unicorns[_unicornId].freezingTourEndTime);\n', '    }\n', '\n', '    function _getFreezeTime(uint8 freezingIndex) internal view returns (uint time) {\n', '        freezingIndex %= maxFreezingIndex;\n', '        time = freezing[freezingIndex];\n', '        if (freezingPlusCount[freezingIndex] != 0) {\n', '            time += (uint(block.blockhash(block.number - 1)) % freezingPlusCount[freezingIndex]) * 1 hours;\n', '        }\n', '    }\n', '\n', '\n', '    //change freezing time for candy\n', '    function minusFreezingTime(uint _unicornId, uint64 _time) onlyBreeding public {\n', '        //не минусуем на уже размороженных конях\n', '        require(unicorns[_unicornId].freezingEndTime > now);\n', '        //не используем safeMath, т.к. subFreezingTime в теории не должен быть больше now %)\n', '        unicorns[_unicornId].freezingEndTime -= _time;\n', '    }\n', '\n', '    //change tour freezing time for candy\n', '    function minusTourFreezingTime(uint _unicornId, uint64 _time) onlyBreeding public {\n', '        //не минусуем на уже размороженных конях\n', '        require(unicorns[_unicornId].freezingTourEndTime > now);\n', '        //не используем safeMath, т.к. subTourFreezingTime в теории не должен быть больше now %)\n', '        unicorns[_unicornId].freezingTourEndTime -= _time;\n', '    }\n', '\n', '    function isUnfreezed(uint _unicornId) public view returns (bool) {\n', '        return (unicorns[_unicornId].birthTime > 0 && unicorns[_unicornId].freezingEndTime <= uint64(now));\n', '    }\n', '\n', '    function isTourUnfreezed(uint _unicornId) public view returns (bool) {\n', '        return (unicorns[_unicornId].birthTime > 0 && unicorns[_unicornId].freezingTourEndTime <= uint64(now));\n', '    }\n', '\n', '}\n', '\n', 'contract UnicornToken is UnicornBase {\n', '    string public constant name = "UnicornGO";\n', '    string public constant symbol = "UNG";\n', '\n', '    function UnicornToken(address _unicornManagementAddress) UnicornAccessControl(_unicornManagementAddress) public {\n', '\n', '    }\n', '\n', '    function init() onlyManagement whenPaused external {\n', '        unicornBreeding = UnicornBreedingInterface(unicornManagement.unicornBreedingAddress());\n', '    }\n', '\n', '    function() public {\n', '\n', '    }\n', '}']
