['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ReferTokenERC20Basic is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) depositBalances;\n', '    mapping(address => uint256) rewardBalances;\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= rewardBalances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw an error if there is not enough balance.\n', '        rewardBalances[msg.sender] = rewardBalances[msg.sender].sub(_value);\n', '        rewardBalances[_to] = rewardBalances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return rewardBalances[_owner];\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract MintableToken is Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() onlyOwner canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract PackageContract is ReferTokenERC20Basic, MintableToken {\n', '    uint constant daysPerMonth = 30;\n', '    mapping(uint => mapping(string => uint256)) internal packageType;\n', '\n', '    struct Package {\n', '        uint256 since;\n', '        uint256 tokenValue;\n', '        uint256 kindOf;\n', '    }\n', '\n', '    mapping(address => Package) internal userPackages;\n', '\n', '    function PackageContract() public {\n', '        packageType[2][&#39;fee&#39;] = 30;\n', '        packageType[2][&#39;reward&#39;] = 20;\n', '        packageType[4][&#39;fee&#39;] = 35;\n', '        packageType[4][&#39;reward&#39;] = 25;\n', '    }\n', '\n', '    function depositMint(address _to, uint256 _amount, uint _kindOfPackage) canMint internal returns (bool) {\n', '        return depositMintSince(_to, _amount, _kindOfPackage, now);\n', '    }\n', '\n', '    function depositMintSince(address _to, uint256 _amount, uint _kindOfPackage, uint since) canMint internal returns (bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        Package memory pac;\n', '        pac = Package({since : since, tokenValue : _amount, kindOf : _kindOfPackage});\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '        userPackages[_to] = pac;\n', '        return true;\n', '    }\n', '\n', '    function depositBalanceOf(address _owner) public view returns (uint256 balance) {\n', '        return userPackages[_owner].tokenValue;\n', '    }\n', '\n', '    function getKindOfPackage(address _owner) public view returns (uint256) {\n', '        return userPackages[_owner].kindOf;\n', '    }\n', '\n', '}\n', '\n', 'contract ColdWalletToken is PackageContract {\n', '    address internal coldWalletAddress;\n', '    uint internal percentageCW = 30;\n', '\n', '    event CWStorageTransferred(address indexed previousCWAddress, address indexed newCWAddress);\n', '    event CWPercentageChanged(uint previousPCW, uint newPCW);\n', '\n', '    function setColdWalletAddress(address _newCWAddress) onlyOwner public {\n', '        require(_newCWAddress != coldWalletAddress && _newCWAddress != address(0));\n', '        CWStorageTransferred(coldWalletAddress, _newCWAddress);\n', '        coldWalletAddress = _newCWAddress;\n', '    }\n', '\n', '    function getColdWalletAddress() onlyOwner public view returns (address) {\n', '        return coldWalletAddress;\n', '    }\n', '\n', '    function setPercentageCW(uint _newPCW) onlyOwner public {\n', '        require(_newPCW != percentageCW && _newPCW < 100);\n', '        CWPercentageChanged(percentageCW, _newPCW);\n', '        percentageCW = _newPCW;\n', '    }\n', '\n', '    function getPercentageCW() onlyOwner public view returns (uint) {\n', '        return percentageCW;\n', '    }\n', '\n', '    function saveToCW() onlyOwner public {\n', '        coldWalletAddress.transfer(this.balance.mul(percentageCW).div(100));\n', '    }\n', '}\n', '\n', 'contract StatusContract is Ownable {\n', '\n', '    mapping(uint => mapping(string => uint[])) internal statusRewardsMap;\n', '    mapping(address => uint) internal statuses;\n', '\n', '    event StatusChanged(address participant, uint newStatus);\n', '\n', '    function StatusContract() public {\n', '        statusRewardsMap[1][&#39;deposit&#39;] = [3, 2, 1];\n', '        statusRewardsMap[1][&#39;refReward&#39;] = [3, 1, 1];\n', '\n', '        statusRewardsMap[2][&#39;deposit&#39;] = [7, 3, 1];\n', '        statusRewardsMap[2][&#39;refReward&#39;] = [5, 3, 1];\n', '\n', '        statusRewardsMap[3][&#39;deposit&#39;] = [10, 3, 1, 1, 1];\n', '        statusRewardsMap[3][&#39;refReward&#39;] = [7, 3, 3, 1, 1];\n', '\n', '        statusRewardsMap[4][&#39;deposit&#39;] = [10, 5, 3, 3, 1];\n', '        statusRewardsMap[4][&#39;refReward&#39;] = [10, 5, 3, 3, 3];\n', '\n', '        statusRewardsMap[5][&#39;deposit&#39;] = [12, 5, 3, 3, 3];\n', '        statusRewardsMap[5][&#39;refReward&#39;] = [10, 7, 5, 3, 3];\n', '    }\n', '\n', '    function getStatusOf(address participant) public view returns (uint) {\n', '        return statuses[participant];\n', '    }\n', '\n', '    function setStatus(address participant, uint8 status) public onlyOwner returns (bool) {\n', '        return setStatusInternal(participant, status);\n', '    }\n', '\n', '    function setStatusInternal(address participant, uint8 status) internal returns (bool) {\n', '        require(statuses[participant] != status && status > 0 && status <= 5);\n', '        statuses[participant] = status;\n', '        StatusChanged(participant, status);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract ReferTreeContract is Ownable {\n', '    mapping(address => address) public referTree;\n', '\n', '    event TreeStructChanged(address sender, address parentSender);\n', '\n', '    function checkTreeStructure(address sender, address parentSender) onlyOwner public {\n', '        setTreeStructure(sender, parentSender);\n', '    }\n', '\n', '    function setTreeStructure(address sender, address parentSender) internal {\n', '        require(referTree[sender] == 0x0);\n', '        require(sender != parentSender);\n', '        referTree[sender] = parentSender;\n', '        TreeStructChanged(sender, parentSender);\n', '    }\n', '}\n', '\n', 'contract ReferToken is ColdWalletToken, StatusContract, ReferTreeContract {\n', '    string public constant name = "EtherState";\n', '    string public constant symbol = "ETHS";\n', '    uint256 public constant decimals = 18;\n', '    uint256 public totalSupply = 0;\n', '\n', '    uint256 public constant hardCap = 10000000 * 1 ether;\n', '    mapping(address => uint256) private lastPayoutAddress;\n', '    uint private rate = 100;\n', '    uint public constant depth = 5;\n', '\n', '    event RateChanged(uint previousRate, uint newRate);\n', '    event DataReceived(bytes data);\n', '    event RefererAddressReceived(address referer);\n', '\n', '    function depositMintAndPay(address _to, uint256 _amount, uint _kindOfPackage) canMint private returns (bool) {\n', '        require(userPackages[_to].since == 0);\n', '        _amount = _amount.mul(rate);\n', '        if (depositMint(_to, _amount, _kindOfPackage)) {\n', '            payToReferer(_to, _amount, &#39;deposit&#39;);\n', '            lastPayoutAddress[_to] = now;\n', '        }\n', '    }\n', '\n', '    function rewardMint(address _to, uint256 _amount) private returns (bool) {\n', '        rewardBalances[_to] = rewardBalances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function payToReferer(address sender, uint256 _amount, string _key) private {\n', '        address currentReferral = sender;\n', '        uint currentStatus = 0;\n', '        uint256 refValue = 0;\n', '\n', '        for (uint level = 0; level < depth; ++level) {\n', '            currentReferral = referTree[currentReferral];\n', '            if (currentReferral == 0x0) {\n', '                break;\n', '            }\n', '            currentStatus = statuses[currentReferral];\n', '            if (currentStatus < 3 && level >= 3) {\n', '                continue;\n', '            }\n', '            refValue = _amount.mul(statusRewardsMap[currentStatus][_key][level]).div(100);\n', '            rewardMint(currentReferral, refValue);\n', '        }\n', '    }\n', '\n', '    function AddressDailyReward(address rewarded) public {\n', '        require(lastPayoutAddress[rewarded] != 0 && (now - lastPayoutAddress[rewarded]).div(1 days) > 0);\n', '        uint256 n = (now - lastPayoutAddress[rewarded]).div(1 days);\n', '        uint256 refValue = 0;\n', '\n', '        if (userPackages[rewarded].kindOf != 0) {\n', '            refValue = userPackages[rewarded].tokenValue.mul(n).mul(packageType[userPackages[rewarded].kindOf][&#39;reward&#39;]).div(30).div(100);\n', '            rewardMint(rewarded, refValue);\n', '            payToReferer(rewarded, userPackages[rewarded].tokenValue, &#39;refReward&#39;);\n', '        }\n', '        if (n > 0) {\n', '            lastPayoutAddress[rewarded] = now;\n', '        }\n', '    }\n', '\n', '    function() external payable {\n', '        require(totalSupply < hardCap);\n', '        coldWalletAddress.transfer(msg.value.mul(percentageCW).div(100));\n', '        bytes memory data = bytes(msg.data);\n', '        DataReceived(data);\n', '        address referer = getRefererAddress(data);\n', '        RefererAddressReceived(referer);\n', '        setTreeStructure(msg.sender, referer);\n', '        setStatusInternal(msg.sender, 1);\n', '        uint8 kind = getReferralPackageKind(data);\n', '        depositMintAndPay(msg.sender, msg.value, kind);\n', '    }\n', '\n', '    function getRefererAddress(bytes data) private pure returns (address) {\n', '        if (data.length == 1 || data.length == 0) {\n', '            return address(0);\n', '        }\n', '        uint256 referer_address;\n', '        uint256 factor = 1;\n', '        for (uint i = 20; i > 0; i--) {\n', '            referer_address += uint8(data[i - 1]) * factor;\n', '            factor = factor * 256;\n', '        }\n', '        return address(referer_address);\n', '    }\n', '\n', '    function getReferralPackageKind(bytes data) private pure returns (uint8) {\n', '        if (data.length == 0) {\n', '            return 4;\n', '        }\n', '        if (data.length == 1) {\n', '            return uint8(data[0]);\n', '        }\n', '        return uint8(data[20]);\n', '    }\n', '\n', '    function withdraw() public {\n', '        require(userPackages[msg.sender].tokenValue != 0);\n', '        uint256 withdrawValue = userPackages[msg.sender].tokenValue.div(rate);\n', '        uint256 dateDiff = now - userPackages[msg.sender].since;\n', '        if (dateDiff < userPackages[msg.sender].kindOf.mul(30 days)) {\n', '            uint256 fee = withdrawValue.mul(packageType[userPackages[msg.sender].kindOf][&#39;fee&#39;]).div(100);\n', '            withdrawValue = withdrawValue.sub(fee);\n', '            coldWalletAddress.transfer(fee);\n', '            userPackages[msg.sender].tokenValue = 0;\n', '        }\n', '        msg.sender.transfer(withdrawValue);\n', '    }\n', '\n', '    function createRawDeposit(address sender, uint256 _value, uint d, uint since) onlyOwner public {\n', '        depositMintSince(sender, _value, d, since);\n', '    }\n', '\n', '    function createDeposit(address sender, uint256 _value, uint d) onlyOwner public {\n', '        depositMintAndPay(sender, _value, d);\n', '    }\n', '\n', '    function setRate(uint _newRate) onlyOwner public {\n', '        require(_newRate != rate && _newRate > 0);\n', '        RateChanged(rate, _newRate);\n', '        rate = _newRate;\n', '    }\n', '\n', '    function getRate() public view returns (uint) {\n', '        return rate;\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ReferTokenERC20Basic is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) depositBalances;\n', '    mapping(address => uint256) rewardBalances;\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= rewardBalances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw an error if there is not enough balance.\n', '        rewardBalances[msg.sender] = rewardBalances[msg.sender].sub(_value);\n', '        rewardBalances[_to] = rewardBalances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return rewardBalances[_owner];\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract MintableToken is Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() onlyOwner canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract PackageContract is ReferTokenERC20Basic, MintableToken {\n', '    uint constant daysPerMonth = 30;\n', '    mapping(uint => mapping(string => uint256)) internal packageType;\n', '\n', '    struct Package {\n', '        uint256 since;\n', '        uint256 tokenValue;\n', '        uint256 kindOf;\n', '    }\n', '\n', '    mapping(address => Package) internal userPackages;\n', '\n', '    function PackageContract() public {\n', "        packageType[2]['fee'] = 30;\n", "        packageType[2]['reward'] = 20;\n", "        packageType[4]['fee'] = 35;\n", "        packageType[4]['reward'] = 25;\n", '    }\n', '\n', '    function depositMint(address _to, uint256 _amount, uint _kindOfPackage) canMint internal returns (bool) {\n', '        return depositMintSince(_to, _amount, _kindOfPackage, now);\n', '    }\n', '\n', '    function depositMintSince(address _to, uint256 _amount, uint _kindOfPackage, uint since) canMint internal returns (bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        Package memory pac;\n', '        pac = Package({since : since, tokenValue : _amount, kindOf : _kindOfPackage});\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '        userPackages[_to] = pac;\n', '        return true;\n', '    }\n', '\n', '    function depositBalanceOf(address _owner) public view returns (uint256 balance) {\n', '        return userPackages[_owner].tokenValue;\n', '    }\n', '\n', '    function getKindOfPackage(address _owner) public view returns (uint256) {\n', '        return userPackages[_owner].kindOf;\n', '    }\n', '\n', '}\n', '\n', 'contract ColdWalletToken is PackageContract {\n', '    address internal coldWalletAddress;\n', '    uint internal percentageCW = 30;\n', '\n', '    event CWStorageTransferred(address indexed previousCWAddress, address indexed newCWAddress);\n', '    event CWPercentageChanged(uint previousPCW, uint newPCW);\n', '\n', '    function setColdWalletAddress(address _newCWAddress) onlyOwner public {\n', '        require(_newCWAddress != coldWalletAddress && _newCWAddress != address(0));\n', '        CWStorageTransferred(coldWalletAddress, _newCWAddress);\n', '        coldWalletAddress = _newCWAddress;\n', '    }\n', '\n', '    function getColdWalletAddress() onlyOwner public view returns (address) {\n', '        return coldWalletAddress;\n', '    }\n', '\n', '    function setPercentageCW(uint _newPCW) onlyOwner public {\n', '        require(_newPCW != percentageCW && _newPCW < 100);\n', '        CWPercentageChanged(percentageCW, _newPCW);\n', '        percentageCW = _newPCW;\n', '    }\n', '\n', '    function getPercentageCW() onlyOwner public view returns (uint) {\n', '        return percentageCW;\n', '    }\n', '\n', '    function saveToCW() onlyOwner public {\n', '        coldWalletAddress.transfer(this.balance.mul(percentageCW).div(100));\n', '    }\n', '}\n', '\n', 'contract StatusContract is Ownable {\n', '\n', '    mapping(uint => mapping(string => uint[])) internal statusRewardsMap;\n', '    mapping(address => uint) internal statuses;\n', '\n', '    event StatusChanged(address participant, uint newStatus);\n', '\n', '    function StatusContract() public {\n', "        statusRewardsMap[1]['deposit'] = [3, 2, 1];\n", "        statusRewardsMap[1]['refReward'] = [3, 1, 1];\n", '\n', "        statusRewardsMap[2]['deposit'] = [7, 3, 1];\n", "        statusRewardsMap[2]['refReward'] = [5, 3, 1];\n", '\n', "        statusRewardsMap[3]['deposit'] = [10, 3, 1, 1, 1];\n", "        statusRewardsMap[3]['refReward'] = [7, 3, 3, 1, 1];\n", '\n', "        statusRewardsMap[4]['deposit'] = [10, 5, 3, 3, 1];\n", "        statusRewardsMap[4]['refReward'] = [10, 5, 3, 3, 3];\n", '\n', "        statusRewardsMap[5]['deposit'] = [12, 5, 3, 3, 3];\n", "        statusRewardsMap[5]['refReward'] = [10, 7, 5, 3, 3];\n", '    }\n', '\n', '    function getStatusOf(address participant) public view returns (uint) {\n', '        return statuses[participant];\n', '    }\n', '\n', '    function setStatus(address participant, uint8 status) public onlyOwner returns (bool) {\n', '        return setStatusInternal(participant, status);\n', '    }\n', '\n', '    function setStatusInternal(address participant, uint8 status) internal returns (bool) {\n', '        require(statuses[participant] != status && status > 0 && status <= 5);\n', '        statuses[participant] = status;\n', '        StatusChanged(participant, status);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract ReferTreeContract is Ownable {\n', '    mapping(address => address) public referTree;\n', '\n', '    event TreeStructChanged(address sender, address parentSender);\n', '\n', '    function checkTreeStructure(address sender, address parentSender) onlyOwner public {\n', '        setTreeStructure(sender, parentSender);\n', '    }\n', '\n', '    function setTreeStructure(address sender, address parentSender) internal {\n', '        require(referTree[sender] == 0x0);\n', '        require(sender != parentSender);\n', '        referTree[sender] = parentSender;\n', '        TreeStructChanged(sender, parentSender);\n', '    }\n', '}\n', '\n', 'contract ReferToken is ColdWalletToken, StatusContract, ReferTreeContract {\n', '    string public constant name = "EtherState";\n', '    string public constant symbol = "ETHS";\n', '    uint256 public constant decimals = 18;\n', '    uint256 public totalSupply = 0;\n', '\n', '    uint256 public constant hardCap = 10000000 * 1 ether;\n', '    mapping(address => uint256) private lastPayoutAddress;\n', '    uint private rate = 100;\n', '    uint public constant depth = 5;\n', '\n', '    event RateChanged(uint previousRate, uint newRate);\n', '    event DataReceived(bytes data);\n', '    event RefererAddressReceived(address referer);\n', '\n', '    function depositMintAndPay(address _to, uint256 _amount, uint _kindOfPackage) canMint private returns (bool) {\n', '        require(userPackages[_to].since == 0);\n', '        _amount = _amount.mul(rate);\n', '        if (depositMint(_to, _amount, _kindOfPackage)) {\n', "            payToReferer(_to, _amount, 'deposit');\n", '            lastPayoutAddress[_to] = now;\n', '        }\n', '    }\n', '\n', '    function rewardMint(address _to, uint256 _amount) private returns (bool) {\n', '        rewardBalances[_to] = rewardBalances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function payToReferer(address sender, uint256 _amount, string _key) private {\n', '        address currentReferral = sender;\n', '        uint currentStatus = 0;\n', '        uint256 refValue = 0;\n', '\n', '        for (uint level = 0; level < depth; ++level) {\n', '            currentReferral = referTree[currentReferral];\n', '            if (currentReferral == 0x0) {\n', '                break;\n', '            }\n', '            currentStatus = statuses[currentReferral];\n', '            if (currentStatus < 3 && level >= 3) {\n', '                continue;\n', '            }\n', '            refValue = _amount.mul(statusRewardsMap[currentStatus][_key][level]).div(100);\n', '            rewardMint(currentReferral, refValue);\n', '        }\n', '    }\n', '\n', '    function AddressDailyReward(address rewarded) public {\n', '        require(lastPayoutAddress[rewarded] != 0 && (now - lastPayoutAddress[rewarded]).div(1 days) > 0);\n', '        uint256 n = (now - lastPayoutAddress[rewarded]).div(1 days);\n', '        uint256 refValue = 0;\n', '\n', '        if (userPackages[rewarded].kindOf != 0) {\n', "            refValue = userPackages[rewarded].tokenValue.mul(n).mul(packageType[userPackages[rewarded].kindOf]['reward']).div(30).div(100);\n", '            rewardMint(rewarded, refValue);\n', "            payToReferer(rewarded, userPackages[rewarded].tokenValue, 'refReward');\n", '        }\n', '        if (n > 0) {\n', '            lastPayoutAddress[rewarded] = now;\n', '        }\n', '    }\n', '\n', '    function() external payable {\n', '        require(totalSupply < hardCap);\n', '        coldWalletAddress.transfer(msg.value.mul(percentageCW).div(100));\n', '        bytes memory data = bytes(msg.data);\n', '        DataReceived(data);\n', '        address referer = getRefererAddress(data);\n', '        RefererAddressReceived(referer);\n', '        setTreeStructure(msg.sender, referer);\n', '        setStatusInternal(msg.sender, 1);\n', '        uint8 kind = getReferralPackageKind(data);\n', '        depositMintAndPay(msg.sender, msg.value, kind);\n', '    }\n', '\n', '    function getRefererAddress(bytes data) private pure returns (address) {\n', '        if (data.length == 1 || data.length == 0) {\n', '            return address(0);\n', '        }\n', '        uint256 referer_address;\n', '        uint256 factor = 1;\n', '        for (uint i = 20; i > 0; i--) {\n', '            referer_address += uint8(data[i - 1]) * factor;\n', '            factor = factor * 256;\n', '        }\n', '        return address(referer_address);\n', '    }\n', '\n', '    function getReferralPackageKind(bytes data) private pure returns (uint8) {\n', '        if (data.length == 0) {\n', '            return 4;\n', '        }\n', '        if (data.length == 1) {\n', '            return uint8(data[0]);\n', '        }\n', '        return uint8(data[20]);\n', '    }\n', '\n', '    function withdraw() public {\n', '        require(userPackages[msg.sender].tokenValue != 0);\n', '        uint256 withdrawValue = userPackages[msg.sender].tokenValue.div(rate);\n', '        uint256 dateDiff = now - userPackages[msg.sender].since;\n', '        if (dateDiff < userPackages[msg.sender].kindOf.mul(30 days)) {\n', "            uint256 fee = withdrawValue.mul(packageType[userPackages[msg.sender].kindOf]['fee']).div(100);\n", '            withdrawValue = withdrawValue.sub(fee);\n', '            coldWalletAddress.transfer(fee);\n', '            userPackages[msg.sender].tokenValue = 0;\n', '        }\n', '        msg.sender.transfer(withdrawValue);\n', '    }\n', '\n', '    function createRawDeposit(address sender, uint256 _value, uint d, uint since) onlyOwner public {\n', '        depositMintSince(sender, _value, d, since);\n', '    }\n', '\n', '    function createDeposit(address sender, uint256 _value, uint d) onlyOwner public {\n', '        depositMintAndPay(sender, _value, d);\n', '    }\n', '\n', '    function setRate(uint _newRate) onlyOwner public {\n', '        require(_newRate != rate && _newRate > 0);\n', '        RateChanged(rate, _newRate);\n', '        rate = _newRate;\n', '    }\n', '\n', '    function getRate() public view returns (uint) {\n', '        return rate;\n', '    }\n', '}']
