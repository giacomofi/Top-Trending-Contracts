['pragma solidity ^0.4.11;\n', '\n', 'contract Certificate {\n', '  struct Subject {\n', '    uint id;            \n', '    address validate_hash; \n', '    uint birthday;      \n', '    string fullname;   \n', '    uint8 gender;       \n', '    uint dt_sign;       \n', '    uint dt_cancel;    \n', '  }\n', '  uint8 type_id;   \n', '  uint dt_create; \n', '  address[] subjects_addr; \n', '  mapping (address => Subject) subjects;\n', '  address _owner;       \n', '\n', '  function Certificate(uint8 _type_id, uint _dt_create, address[] _subjects_addr) public {\n', '    type_id = _type_id;\n', '    dt_create = _dt_create;\n', '    subjects_addr = _subjects_addr;\n', '    _owner = msg.sender;\n', '  }\n', '\n', '  modifier restricted_to_subject {\n', '      bool allowed = false;\n', '      for(uint i = 0; i < subjects_addr.length; i++) {\n', '        if (msg.sender == subjects_addr[i]) {\n', '          allowed = true;\n', '          break;\n', '        }\n', '      }\n', '      if (subjects[msg.sender].dt_sign != 0 || allowed == false) {\n', '        revert();\n', '      }\n', '      _;\n', '  }\n', '\n', '  function Sign(uint _id, address _validate_hash, uint _birthday, uint8 _gender, uint _dt_sign, string _fullname) public restricted_to_subject payable {\n', '    subjects[msg.sender] = Subject(_id, _validate_hash, _birthday, _fullname, _gender, _dt_sign, 0);\n', '    if(msg.value != 0)\n', '      _owner.transfer(msg.value);\n', '  }\n', '\n', '  function getSubject(uint index) public constant returns (uint _id, address _validate_hash, uint _birthday, string _fullname, uint8 _gender, uint _dt_sign, uint _dt_cancel) {\n', '    _id = subjects[subjects_addr[index]].id;\n', '    _validate_hash = subjects[subjects_addr[index]].validate_hash;\n', '    _birthday = subjects[subjects_addr[index]].birthday;\n', '    _fullname = subjects[subjects_addr[index]].fullname;\n', '    _gender = subjects[subjects_addr[index]].gender;\n', '    _dt_sign = subjects[subjects_addr[index]].dt_sign;\n', '    _dt_cancel = subjects[subjects_addr[index]].dt_cancel;\n', '  }\n', '\n', '  function getCertificate() public constant returns (uint8 _type_id, uint _dt_create, uint _subjects_count) {\n', '    _type_id = type_id;\n', '    _dt_create = dt_create;\n', '    _subjects_count = subjects_addr.length;\n', '  }\n', '}']