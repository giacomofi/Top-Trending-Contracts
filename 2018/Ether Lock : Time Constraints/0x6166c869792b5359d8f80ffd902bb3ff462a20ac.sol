['pragma solidity 0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', '\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Whitelist\n', ' * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\n', ' * @dev This simplifies the implementation of "user permissions".\n', ' */\n', 'contract Whitelist is Ownable {\n', '  mapping(address => bool) public whitelist;\n', '\n', '  event WhitelistedAddressAdded(address addr);\n', '  event WhitelistedAddressRemoved(address addr);\n', '\n', '  /**\n', '   * @dev Throws if called by any account that&#39;s not whitelisted.\n', '   */\n', '  modifier onlyWhitelisted() {\n', '    require(whitelist[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev add an address to the whitelist\n', '   * @param addr address\n', '   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n', '   */\n', '  function addAddressToWhitelist(address addr) onlyOwner public returns(bool success) {\n', '    if (!whitelist[addr]) {\n', '      whitelist[addr] = true;\n', '      WhitelistedAddressAdded(addr);\n', '      success = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev add addresses to the whitelist\n', '   * @param addrs addresses\n', '   * @return true if at least one address was added to the whitelist,\n', '   * false if all addresses were already in the whitelist\n', '   */\n', '  function addAddressesToWhitelist(address[] addrs) onlyOwner public returns(bool success) {\n', '    for (uint256 i = 0; i < addrs.length; i++) {\n', '      if (addAddressToWhitelist(addrs[i])) {\n', '        success = true;\n', '      }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address from the whitelist\n', '   * @param addr address\n', '   * @return true if the address was removed from the whitelist,\n', '   * false if the address wasn&#39;t in the whitelist in the first place\n', '   */\n', '  function removeAddressFromWhitelist(address addr) onlyOwner public returns(bool success) {\n', '    if (whitelist[addr]) {\n', '      whitelist[addr] = false;\n', '      WhitelistedAddressRemoved(addr);\n', '      success = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev remove addresses from the whitelist\n', '   * @param addrs addresses\n', '   * @return true if at least one address was removed from the whitelist,\n', '   * false if all addresses weren&#39;t in the whitelist in the first place\n', '   */\n', '  function removeAddressesFromWhitelist(address[] addrs) onlyOwner public returns(bool success) {\n', '    for (uint256 i = 0; i < addrs.length; i++) {\n', '      if (removeAddressFromWhitelist(addrs[i])) {\n', '        success = true;\n', '      }\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract Presale is Whitelist {\n', '\n', '  using SafeMath for uint256;\n', '  uint256 private weiRaised;\n', '  uint256 private startTime;\n', '  uint256 private endTime;\n', '  uint256 private rate;\n', '\n', '  uint256 private cap;\n', '\n', '  function Presale(uint256 _startTime, uint256 duration, uint256 _rate, uint256 _cap) public {\n', '    require(_rate > 0);\n', '    require(_cap > 0);\n', '    require(_startTime >= now);\n', '    require(duration > 0);\n', '\n', '    rate = _rate;\n', '    cap = _cap;\n', '    startTime = _startTime;\n', '    endTime = startTime + duration * 1 days;\n', '    weiRaised = 0;\n', '  }\n', '\n', '  function totalWei() public constant returns(uint256) {\n', '    return weiRaised;\n', '  }\n', '\n', '  function capRemaining() public constant returns(uint256) {\n', '    return cap.sub(weiRaised);\n', '  }\n', '\n', '  function totalCap() public constant returns(uint256) {\n', '    return cap;\n', '  }\n', '\n', '  function buyTokens(address purchaser, uint256 value) internal returns(uint256) {\n', '    require(validPurchase(value));\n', '    uint256 tokens = rate.mul(value);\n', '    weiRaised = weiRaised.add(value);\n', '    return tokens;\n', '  }\n', '\n', '  function hasEnded() internal constant returns(bool) {\n', '    return now > endTime || weiRaised >= cap;\n', '  }\n', '\n', '  function hasStarted() internal constant returns(bool) {\n', '    return now > startTime;\n', '  }\n', '\n', '  function validPurchase(uint256 value) internal view returns (bool) {\n', '    bool withinCap = weiRaised.add(value) <= cap;\n', '    return withinCap && withinPeriod();\n', '  }\n', '\n', '  function presaleRate() public view returns(uint256) {\n', '    return rate;\n', '  }\n', '\n', '  function withinPeriod () private constant returns(bool) {\n', '    return now >= startTime && now <= endTime;\n', '  }\n', '\n', '  function increasePresaleEndTime(uint _days) public onlyWhitelisted {\n', '    endTime = endTime + _days * 1 days;\n', '  }\n', '\n', '  function getPresaleEndTime() public constant returns(uint) {\n', '    return endTime;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens\n', ' * @author SylTi\n', ' * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n', ' * This will prevent any accidental loss of tokens.\n', ' */\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.safeTransfer(owner, balance);\n', '  }\n', '\n', '}\n', '\n', '/// @title Vesting trustee contract for erc20 token.\n', 'contract VestingTrustee is Ownable, CanReclaimToken {\n', '    using SafeMath for uint256;\n', '\n', '    // erc20 token contract.\n', '    ERC20 public token;\n', '\n', '    // Vesting grant for a speicifc holder.\n', '    struct Grant {\n', '        uint256 value;\n', '        uint256 start;\n', '        uint256 cliff;\n', '        uint256 end;\n', '        uint256 installmentLength; // In seconds.\n', '        uint256 transferred;\n', '        bool revokable;\n', '        uint256 prevested;\n', '        uint256 vestingPercentage;\n', '    }\n', '\n', '    // Holder to grant information mapping.\n', '    mapping (address => Grant) public grants;\n', '\n', '    // Total tokens available for vesting.\n', '    uint256 public totalVesting;\n', '\n', '    event NewGrant(address indexed _from, address indexed _to, uint256 _value);\n', '    event TokensUnlocked(address indexed _to, uint256 _value);\n', '    event GrantRevoked(address indexed _holder, uint256 _refund);\n', '\n', '    /// @dev Constructor that initializes the address of the  token contract.\n', '    /// @param _token erc20 The address of the previously deployed token contract.\n', '    function VestingTrustee(address _token) {\n', '        require(_token != address(0));\n', '\n', '        token = ERC20(_token);\n', '    }\n', '\n', '    /// @dev Grant tokens to a specified address.\n', '    /// @param _to address The holder address.\n', '    /// @param _value uint256 The amount of tokens to be granted.\n', '    /// @param _start uint256 The beginning of the vesting period.\n', '    /// @param _cliff uint256 Duration of the cliff period (when the first installment is made).\n', '    /// @param _end uint256 The end of the vesting period.\n', '    /// @param _installmentLength uint256 The length of each vesting installment (in seconds).\n', '    /// @param _revokable bool Whether the grant is revokable or not.\n', '    function grant(address _to, uint256 _value, uint256 _start, uint256 _cliff, uint256 _end,\n', '        uint256 _installmentLength, uint256 vestingPercentage, uint256 prevested, bool _revokable)\n', '        external onlyOwner {\n', '\n', '        require(_to != address(0));\n', '        require(_to != address(this)); // Don&#39;t allow holder to be this contract.\n', '        require(_value > 0);\n', '        require(_value.sub(prevested) > 0);\n', '        require(vestingPercentage > 0);\n', '\n', '        // Require that every holder can be granted tokens only once.\n', '        require(grants[_to].value == 0);\n', '\n', '        // Require for time ranges to be consistent and valid.\n', '        require(_start <= _cliff && _cliff <= _end);\n', '\n', '        // Require installment length to be valid and no longer than (end - start).\n', '        require(_installmentLength > 0 && _installmentLength <= _end.sub(_start));\n', '\n', '        // Grant must not exceed the total amount of tokens currently available for vesting.\n', '        require(totalVesting.add(_value.sub(prevested)) <= token.balanceOf(address(this)));\n', '\n', '        // Assign a new grant.\n', '        grants[_to] = Grant({\n', '            value: _value,\n', '            start: _start,\n', '            cliff: _cliff,\n', '            end: _end,\n', '            installmentLength: _installmentLength,\n', '            transferred: prevested,\n', '            revokable: _revokable,\n', '            prevested: prevested,\n', '            vestingPercentage: vestingPercentage\n', '        });\n', '\n', '        totalVesting = totalVesting.add(_value.sub(prevested));\n', '        NewGrant(msg.sender, _to, _value);\n', '    }\n', '\n', '    /// @dev Revoke the grant of tokens of a specifed address.\n', '    /// @param _holder The address which will have its tokens revoked.\n', '    function revoke(address _holder) public onlyOwner {\n', '        Grant memory grant = grants[_holder];\n', '\n', '        // Grant must be revokable.\n', '        require(grant.revokable);\n', '\n', '        // Calculate amount of remaining tokens that are still available to be\n', '        // returned to owner.\n', '        uint256 refund = grant.value.sub(grant.transferred);\n', '\n', '        // Remove grant information.\n', '        delete grants[_holder];\n', '\n', '        // Update total vesting amount and transfer previously calculated tokens to owner.\n', '        totalVesting = totalVesting.sub(refund);\n', '        token.transfer(msg.sender, refund);\n', '\n', '        GrantRevoked(_holder, refund);\n', '    }\n', '\n', '    /// @dev Calculate the total amount of vested tokens of a holder at a given time.\n', '    /// @param _holder address The address of the holder.\n', '    /// @param _time uint256 The specific time to calculate against.\n', '    /// @return a uint256 Representing a holder&#39;s total amount of vested tokens.\n', '    function vestedTokens(address _holder, uint256 _time) external constant returns (uint256) {\n', '        Grant memory grant = grants[_holder];\n', '        if (grant.value == 0) {\n', '            return 0;\n', '        }\n', '\n', '        return calculateVestedTokens(grant, _time);\n', '    }\n', '\n', '    /// @dev Calculate amount of vested tokens at a specifc time.\n', '    /// @param _grant Grant The vesting grant.\n', '    /// @param _time uint256 The time to be checked\n', '    /// @return a uint256 Representing the amount of vested tokens of a specific grant.\n', '    function calculateVestedTokens(Grant _grant, uint256 _time) private constant returns (uint256) {\n', '        // If we&#39;re before the cliff, then nothing is vested.\n', '        if (_time < _grant.cliff) {\n', '            return _grant.prevested;\n', '        }\n', '\n', '        // If we&#39;re after the end of the vesting period - everything is vested;\n', '        if (_time >= _grant.end) {\n', '            return _grant.value;\n', '        }\n', '\n', '        // Calculate amount of installments past until now.\n', '        uint256 installmentsPast = _time.sub(_grant.cliff).div(_grant.installmentLength) + 1;\n', '\n', '\n', '        // Calculate and return installments that have passed according to vesting days that have passed.\n', '        return _grant.prevested.add(_grant.value.mul(installmentsPast.mul(_grant.vestingPercentage)).div(100));\n', '    }\n', '\n', '    /// @dev Unlock vested tokens and transfer them to their holder.\n', '    /// @return a uint256 Representing the amount of vested tokens transferred to their holder.\n', '    function unlockVestedTokens() external {\n', '        Grant storage grant = grants[msg.sender];\n', '\n', '        // Require that there will be funds left in grant to tranfser to holder.\n', '        require(grant.value != 0);\n', '\n', '        // Get the total amount of vested tokens, acccording to grant.\n', '        uint256 vested = calculateVestedTokens(grant, now);\n', '        if (vested == 0) {\n', '            revert();\n', '        }\n', '\n', '        // Make sure the holder doesn&#39;t transfer more than what he already has.\n', '        uint256 transferable = vested.sub(grant.transferred);\n', '        if (transferable == 0) {\n', '            revert();\n', '        }\n', '\n', '        grant.transferred = grant.transferred.add(transferable);\n', '        totalVesting = totalVesting.sub(transferable);\n', '        token.transfer(msg.sender, transferable);\n', '        TokensUnlocked(msg.sender, transferable);\n', '    }\n', '\n', '    function reclaimEther() external onlyOwner {\n', '      assert(owner.send(this.balance));\n', '    }\n', '}\n', '\n', 'contract Controlled {\n', '    /// @notice The address of the controller is the only address that can call\n', '    ///  a function with this modifier\n', '    modifier onlyController { require(msg.sender == controller); _; }\n', '\n', '    address public controller;\n', '\n', '    function Controlled() public { controller = msg.sender;}\n', '\n', '    /// @notice Changes the controller of the contract\n', '    /// @param _newController The new controller of the contract\n', '    function changeController(address _newController) public onlyController {\n', '        controller = _newController;\n', '    }\n', '}\n', '\n', '/// @dev The token controller contract must implement these functions\n', 'contract TokenController {\n', '    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n', '    /// @param _owner The address that sent the ether to create tokens\n', '    /// @return True if the ether is accepted, false if it throws\n', '    function proxyPayment(address _owner) public payable returns(bool);\n', '\n', '    /// @notice Notifies the controller about a token transfer allowing the\n', '    ///  controller to react if desired\n', '    /// @param _from The origin of the transfer\n', '    /// @param _to The destination of the transfer\n', '    /// @param _amount The amount of the transfer\n', '    /// @return False if the controller does not authorize the transfer\n', '    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\n', '\n', '    /// @notice Notifies the controller about an approval allowing the\n', '    ///  controller to react if desired\n', '    /// @param _owner The address that calls `approve()`\n', '    /// @param _spender The spender in the `approve()` call\n', '    /// @param _amount The amount in the `approve()` call\n', '    /// @return False if the controller does not authorize the approval\n', '    function onApprove(address _owner, address _spender, uint _amount) public\n', '        returns(bool);\n', '}\n', '\n', '/*\n', '    Copyright 2016, Jordi Baylina\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', ' */\n', '\n', '/// @title MiniMeToken Contract\n', '/// @author Jordi Baylina\n', '/// @dev This token contract&#39;s goal is to make it easy for anyone to clone this\n', '///  token using the token distribution at a given block, this will allow DAO&#39;s\n', '///  and DApps to upgrade their features in a decentralized manner without\n', '///  affecting the original token\n', '/// @dev It is ERC20 compliant, but still needs to under go further testing.\n', '\n', '\n', '\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 _amount, address _token, bytes _data) public;\n', '}\n', '\n', '/// @dev The actual token contract, the default controller is the msg.sender\n', '///  that deploys the contract, so usually this token will be deployed by a\n', '///  token controller contract, which Giveth will call a "Campaign"\n', 'contract MiniMeToken is Controlled {\n', '\n', '    string public name;                //The Token&#39;s name: e.g. DigixDAO Tokens\n', '    uint8 public decimals;             //Number of decimals of the smallest unit\n', '    string public symbol;              //An identifier: e.g. REP\n', '    string public version = &#39;MMT_0.2&#39;; //An arbitrary versioning scheme\n', '\n', '\n', '    /// @dev `Checkpoint` is the structure that attaches a block number to a\n', '    ///  given value, the block number attached is the one that last changed the\n', '    ///  value\n', '    struct  Checkpoint {\n', '\n', '        // `fromBlock` is the block number that the value was generated from\n', '        uint128 fromBlock;\n', '\n', '        // `value` is the amount of tokens at a specific block number\n', '        uint128 value;\n', '    }\n', '\n', '    // `parentToken` is the Token address that was cloned to produce this token;\n', '    //  it will be 0x0 for a token that was not cloned\n', '    MiniMeToken public parentToken;\n', '\n', '    // `parentSnapShotBlock` is the block number from the Parent Token that was\n', '    //  used to determine the initial distribution of the Clone Token\n', '    uint public parentSnapShotBlock;\n', '\n', '    // `creationBlock` is the block number that the Clone Token was created\n', '    uint public creationBlock;\n', '\n', '    // `balances` is the map that tracks the balance of each address, in this\n', '    //  contract when the balance changes the block number that the change\n', '    //  occurred is also included in the map\n', '    mapping (address => Checkpoint[]) balances;\n', '\n', '    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    // Tracks the history of the `totalSupply` of the token\n', '    Checkpoint[] totalSupplyHistory;\n', '\n', '    // Flag that determines if the token is transferable or not.\n', '    bool public transfersEnabled;\n', '\n', '    // The factory used to create new clone tokens\n', '    MiniMeTokenFactory public tokenFactory;\n', '\n', '////////////////\n', '// Constructor\n', '////////////////\n', '\n', '    /// @notice Constructor to create a MiniMeToken\n', '    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n', '    ///  will create the Clone token contracts, the token factory needs to be\n', '    ///  deployed first\n', '    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n', '    ///  new token\n', '    /// @param _parentSnapShotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token, set to 0 if it\n', '    ///  is a new token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    function MiniMeToken(\n', '        address _tokenFactory,\n', '        address _parentToken,\n', '        uint _parentSnapShotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) public {\n', '        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n', '        name = _tokenName;                                 // Set the name\n', '        decimals = _decimalUnits;                          // Set the decimals\n', '        symbol = _tokenSymbol;                             // Set the symbol\n', '        parentToken = MiniMeToken(_parentToken);\n', '        parentSnapShotBlock = _parentSnapShotBlock;\n', '        transfersEnabled = _transfersEnabled;\n', '        creationBlock = block.number;\n', '    }\n', '\n', '\n', '///////////////////\n', '// ERC20 Methods\n', '///////////////////\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '        require(transfersEnabled);\n', '        doTransfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n', '    ///  is approved by `_from`\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function transferFrom(address _from, address _to, uint256 _amount\n', '    ) public returns (bool success) {\n', '\n', '        // The controller of this contract can move tokens around at will,\n', '        //  this is important to recognize! Confirm that you trust the\n', '        //  controller of this contract, which in most situations should be\n', '        //  another open source smart contract or 0x0\n', '        if (msg.sender != controller) {\n', '            require(transfersEnabled);\n', '\n', '            // The standard ERC 20 transferFrom functionality\n', '            require(allowed[_from][msg.sender] >= _amount);\n', '            allowed[_from][msg.sender] -= _amount;\n', '        }\n', '        doTransfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /// @dev This is the actual transfer function in the token contract, it can\n', '    ///  only be called by other functions in this contract.\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function doTransfer(address _from, address _to, uint _amount\n', '    ) internal {\n', '\n', '           if (_amount == 0) {\n', '               Transfer(_from, _to, _amount);    // Follow the spec to louch the event when transfer 0\n', '               return;\n', '           }\n', '\n', '           require(parentSnapShotBlock < block.number);\n', '\n', '           // Do not allow transfer to 0x0 or the token contract itself\n', '           require((_to != 0) && (_to != address(this)));\n', '\n', '           // If the amount being transfered is more than the balance of the\n', '           //  account the transfer throws\n', '           var previousBalanceFrom = balanceOfAt(_from, block.number);\n', '\n', '           require(previousBalanceFrom >= _amount);\n', '\n', '           // Alerts the token controller of the transfer\n', '           if (isContract(controller)) {\n', '               require(TokenController(controller).onTransfer(_from, _to, _amount));\n', '           }\n', '\n', '           // First update the balance array with the new value for the address\n', '           //  sending the tokens\n', '           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n', '\n', '           // Then update the balance array with the new value for the address\n', '           //  receiving the tokens\n', '           var previousBalanceTo = balanceOfAt(_to, block.number);\n', '           require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n', '           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n', '\n', '           // An event to make the transfer easy to find on the blockchain\n', '           Transfer(_from, _to, _amount);\n', '\n', '    }\n', '\n', '    /// @param _owner The address that&#39;s balance is being requested\n', '    /// @return The balance of `_owner` at the current block\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balanceOfAt(_owner, block.number);\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n', '    ///  its behalf. This is a modified version of the ERC20 approve function\n', '    ///  to be a little bit safer\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the approval was successful\n', '    function approve(address _spender, uint256 _amount) public returns (bool success) {\n', '        require(transfersEnabled);\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        // Alerts the token controller of the approve function call\n', '        if (isContract(controller)) {\n', '            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n', '        }\n', '\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to read the `allowed[]` map\n', '    /// @param _owner The address of the account that owns the token\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens of _owner that _spender is allowed\n', '    ///  to spend\n', '    function allowance(address _owner, address _spender\n', '    ) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n', '    ///  its behalf, and then a function is triggered in the contract that is\n', '    ///  being approved, `_spender`. This allows users to use their tokens to\n', '    ///  interact with contracts in one function call instead of two\n', '    /// @param _spender The address of the contract able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the function call was successful\n', '    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n', '    ) public returns (bool success) {\n', '        require(approve(_spender, _amount));\n', '\n', '        ApproveAndCallFallBack(_spender).receiveApproval(\n', '            msg.sender,\n', '            _amount,\n', '            this,\n', '            _extraData\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to get the total number of tokens\n', '    /// @return The total number of tokens\n', '    function totalSupply() public constant returns (uint) {\n', '        return totalSupplyAt(block.number);\n', '    }\n', '\n', '\n', '////////////////\n', '// Query balance and totalSupply in History\n', '////////////////\n', '\n', '    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @param _blockNumber The block number when the balance is queried\n', '    /// @return The balance at `_blockNumber`\n', '    function balanceOfAt(address _owner, uint _blockNumber) public constant\n', '        returns (uint) {\n', '\n', '        // These next few lines are used when the balance of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.balanceOfAt` be queried at the\n', '        //  genesis block for that token as this contains initial balance of\n', '        //  this token\n', '        if ((balances[_owner].length == 0)\n', '            || (balances[_owner][0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != 0) {\n', '                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                // Has no parent\n', '                return 0;\n', '            }\n', '\n', '        // This will return the expected balance during normal situations\n', '        } else {\n', '            return getValueAt(balances[_owner], _blockNumber);\n', '        }\n', '    }\n', '\n', '    /// @notice Total amount of tokens at a specific `_blockNumber`.\n', '    /// @param _blockNumber The block number when the totalSupply is queried\n', '    /// @return The total amount of tokens at `_blockNumber`\n', '    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\n', '\n', '        // These next few lines are used when the totalSupply of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.totalSupplyAt` be queried at the\n', '        //  genesis block for this token as that contains totalSupply of this\n', '        //  token at this block number.\n', '        if ((totalSupplyHistory.length == 0)\n', '            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != 0) {\n', '                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                return 0;\n', '            }\n', '\n', '        // This will return the expected totalSupply during normal situations\n', '        } else {\n', '            return getValueAt(totalSupplyHistory, _blockNumber);\n', '        }\n', '    }\n', '\n', '////////////////\n', '// Clone Token Method\n', '////////////////\n', '\n', '    /// @notice Creates a new clone token with the initial distribution being\n', '    ///  this token at `_snapshotBlock`\n', '    /// @param _cloneTokenName Name of the clone token\n', '    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\n', '    /// @param _cloneTokenSymbol Symbol of the clone token\n', '    /// @param _snapshotBlock Block when the distribution of the parent token is\n', '    ///  copied to set the initial distribution of the new clone token;\n', '    ///  if the block is zero than the actual block, the current block is used\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    /// @return The address of the new MiniMeToken Contract\n', '    function createCloneToken(\n', '        string _cloneTokenName,\n', '        uint8 _cloneDecimalUnits,\n', '        string _cloneTokenSymbol,\n', '        uint _snapshotBlock,\n', '        bool _transfersEnabled\n', '        ) public returns(address) {\n', '        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n', '        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n', '            this,\n', '            _snapshotBlock,\n', '            _cloneTokenName,\n', '            _cloneDecimalUnits,\n', '            _cloneTokenSymbol,\n', '            _transfersEnabled\n', '            );\n', '\n', '        cloneToken.changeController(msg.sender);\n', '\n', '        // An event to make the token easy to find on the blockchain\n', '        NewCloneToken(address(cloneToken), _snapshotBlock);\n', '        return address(cloneToken);\n', '    }\n', '\n', '////////////////\n', '// Generate and destroy tokens\n', '////////////////\n', '\n', '    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n', '    /// @param _owner The address that will be assigned the new tokens\n', '    /// @param _amount The quantity of tokens generated\n', '    /// @return True if the tokens are generated correctly\n', '    function generateTokens(address _owner, uint _amount\n', '    ) public onlyController returns (bool) {\n', '        uint curTotalSupply = totalSupply();\n', '        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n', '        uint previousBalanceTo = balanceOf(_owner);\n', '        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n', '        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n', '        Transfer(0, _owner, _amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    /// @notice Burns `_amount` tokens from `_owner`\n', '    /// @param _owner The address that will lose the tokens\n', '    /// @param _amount The quantity of tokens to burn\n', '    /// @return True if the tokens are burned correctly\n', '    function destroyTokens(address _owner, uint _amount\n', '    ) onlyController public returns (bool) {\n', '        uint curTotalSupply = totalSupply();\n', '        require(curTotalSupply >= _amount);\n', '        uint previousBalanceFrom = balanceOf(_owner);\n', '        require(previousBalanceFrom >= _amount);\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n', '        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n', '        Transfer(_owner, 0, _amount);\n', '        return true;\n', '    }\n', '\n', '////////////////\n', '// Enable tokens transfers\n', '////////////////\n', '\n', '\n', '    /// @notice Enables token holders to transfer their tokens freely if true\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    function enableTransfers(bool _transfersEnabled) public onlyController {\n', '        transfersEnabled = _transfersEnabled;\n', '    }\n', '\n', '////////////////\n', '// Internal helper functions to query and set a value in a snapshot array\n', '////////////////\n', '\n', '    /// @dev `getValueAt` retrieves the number of tokens at a given block number\n', '    /// @param checkpoints The history of values being queried\n', '    /// @param _block The block number to retrieve the value at\n', '    /// @return The number of tokens being queried\n', '    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n', '    ) constant internal returns (uint) {\n', '        if (checkpoints.length == 0) return 0;\n', '\n', '        // Shortcut for the actual value\n', '        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n', '            return checkpoints[checkpoints.length-1].value;\n', '        if (_block < checkpoints[0].fromBlock) return 0;\n', '\n', '        // Binary search of the value in the array\n', '        uint min = 0;\n', '        uint max = checkpoints.length-1;\n', '        while (max > min) {\n', '            uint mid = (max + min + 1)/ 2;\n', '            if (checkpoints[mid].fromBlock<=_block) {\n', '                min = mid;\n', '            } else {\n', '                max = mid-1;\n', '            }\n', '        }\n', '        return checkpoints[min].value;\n', '    }\n', '\n', '    /// @dev `updateValueAtNow` used to update the `balances` map and the\n', '    ///  `totalSupplyHistory`\n', '    /// @param checkpoints The history of data being updated\n', '    /// @param _value The new number of tokens\n', '    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n', '    ) internal  {\n', '        if ((checkpoints.length == 0)\n', '        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\n', '               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n', '               newCheckPoint.fromBlock =  uint128(block.number);\n', '               newCheckPoint.value = uint128(_value);\n', '           } else {\n', '               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\n', '               oldCheckPoint.value = uint128(_value);\n', '           }\n', '    }\n', '\n', '    /// @dev Internal function to determine if an address is a contract\n', '    /// @param _addr The address being queried\n', '    /// @return True if `_addr` is a contract\n', '    function isContract(address _addr) constant internal returns(bool) {\n', '        uint size;\n', '        if (_addr == 0) return false;\n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '        return size>0;\n', '    }\n', '\n', '    /// @dev Helper function to return a min betwen the two uints\n', '    function min(uint a, uint b) pure internal returns (uint) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /// @notice The fallback function: If the contract&#39;s controller has not been\n', '    ///  set to 0, then the `proxyPayment` method is called which relays the\n', '    ///  ether and creates tokens as described in the token controller contract\n', '    function () public payable {\n', '        require(isContract(controller));\n', '        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n', '    }\n', '\n', '//////////\n', '// Safety Methods\n', '//////////\n', '\n', '    /// @notice This method can be used by the controller to extract mistakenly\n', '    ///  sent tokens to this contract.\n', '    /// @param _token The address of the token contract that you want to recover\n', '    ///  set to 0 in case you want to extract ether.\n', '    function claimTokens(address _token) public onlyController {\n', '        if (_token == 0x0) {\n', '            controller.transfer(this.balance);\n', '            return;\n', '        }\n', '\n', '        MiniMeToken token = MiniMeToken(_token);\n', '        uint balance = token.balanceOf(this);\n', '        token.transfer(controller, balance);\n', '        ClaimedTokens(_token, controller, balance);\n', '    }\n', '\n', '////////////////\n', '// Events\n', '////////////////\n', '    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n', '    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n', '    event Approval(\n', '        address indexed _owner,\n', '        address indexed _spender,\n', '        uint256 _amount\n', '        );\n', '\n', '}\n', '\n', '\n', '////////////////\n', '// MiniMeTokenFactory\n', '////////////////\n', '\n', '/// @dev This contract is used to generate clone contracts from a contract.\n', '///  In solidity this is the way to create a contract from a contract of the\n', '///  same class\n', 'contract MiniMeTokenFactory {\n', '\n', '    /// @notice Update the DApp by creating a new token with new functionalities\n', '    ///  the msg.sender becomes the controller of this clone token\n', '    /// @param _parentToken Address of the token being cloned\n', '    /// @param _snapshotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    /// @return The address of the new token contract\n', '    function createCloneToken(\n', '        address _parentToken,\n', '        uint _snapshotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) public returns (MiniMeToken) {\n', '        MiniMeToken newToken = new MiniMeToken(\n', '            this,\n', '            _parentToken,\n', '            _snapshotBlock,\n', '            _tokenName,\n', '            _decimalUnits,\n', '            _tokenSymbol,\n', '            _transfersEnabled\n', '            );\n', '\n', '        newToken.changeController(msg.sender);\n', '        return newToken;\n', '    }\n', '}\n', '\n', 'contract Crowdsale is Presale, Pausable, CanReclaimToken {\n', '\n', '  using SafeMath for uint256;\n', '  address public whitelistAddress;\n', '  address public wallet; //wallet where the funds collected are transfered\n', '  MiniMeToken public token; //ERC20 Token\n', '  uint256 private weiRaised = 0; //WeiRaised during the public Sale\n', '  uint256 private cap = 0; //Cap of the public Sale in Wei\n', '  bool private publicSaleInitialized = false;\n', '  bool private finalized = false;\n', '  uint256 private tokensSold = 0; //tokens sold during the entire sale\n', '  uint256 private startTime; //start time of the public sale initialized after the presale is over\n', '  uint256 private endTime; //endtime of the public sale\n', '  uint256 public maxTokens;\n', '  mapping(address => uint256) public contributions; //contributions of each investor\n', '  mapping(address => uint256) public investorCaps; //for whitelisting\n', '  address[] public investors; //investor list who participate in the ICO\n', '  address[] public founders; //list of founders\n', '  address[] public advisors; //list of advisors\n', '  VestingTrustee public trustee;\n', '  address public reserveWallet; //reserveWallet where the unsold tokens will be sent to\n', '\n', '  //Rate for each tier (no of tokens for 1 ETH)\n', '  //Max wei for each tier\n', '  struct Tier {\n', '    uint256 rate;\n', '    uint256 max;\n', '  }\n', '\n', '  uint public privateSaleTokensAvailable;\n', '  uint public privateSaleTokensSold = 0;\n', '  uint public publicTokensAvailable;\n', '\n', '  uint8 public totalTiers = 0; //total Tiers in the public sale\n', '  bool public tiersInitialized = false;\n', '  uint256 public maxTiers = 6; //max tiers that can be in the publicsale\n', '  Tier[6] public tiers; //array of tiers\n', '\n', '  event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\n', '  enum Stage { Preparing, Presale, PresaleFinished, PublicSale, Success, Finalized }\n', '\n', '  function Crowdsale(\n', '    uint256 _presaleStartTime, //presale start time\n', '    uint256 _presaleDuration, //presale duration in days\n', '    uint256 _presaleRate, // presale rate. ie No of tokens per 1 ETH\n', '    uint256 _presaleCap, // max wei that can raised\n', '    address erc20Token, // Token used for the crowdsale\n', '    address _wallet,\n', '    uint8 _tiers,\n', '    uint256 _cap,\n', '    address _reserveWallet)\n', '    public\n', '    Presale(_presaleStartTime, _presaleDuration, _presaleRate, _presaleCap)\n', '    {\n', '      require(_wallet != address(0));\n', '      require(erc20Token != address(0));\n', '      require(_tiers > 0 && _tiers <= maxTiers);\n', '      require(_cap > 0);\n', '      require(_reserveWallet != address(0));\n', '      token = MiniMeToken(erc20Token);\n', '      wallet = _wallet;\n', '      totalTiers = _tiers;\n', '      cap = _cap;\n', '      reserveWallet = _reserveWallet;\n', '      trustee = new VestingTrustee(erc20Token);\n', '      maxTokens = 1000000000 * (10 ** 18); // 1 B tokens\n', '      tokensSold = token.totalSupply();\n', '      privateSaleTokensAvailable = maxTokens.mul(22).div(100);\n', '      publicTokensAvailable = maxTokens.mul(28).div(100);\n', '      super.addAddressToWhitelist(msg.sender);\n', '    }\n', '\n', '  function() public payable {\n', '    buyTokens(msg.sender, msg.value);\n', '  }\n', '\n', '  function getStage() public constant returns(Stage) {\n', '    if (finalized) return Stage.Finalized;\n', '    if (!tiersInitialized || !Presale.hasStarted()) return Stage.Preparing;\n', '    if (!Presale.hasEnded()) return Stage.Presale;\n', '    if (Presale.hasEnded() && !hasStarted()) return Stage.PresaleFinished;\n', '    if (!hasEnded()) return Stage.PublicSale;\n', '    if (hasEnded()) return Stage.Success;\n', '    return Stage.Preparing;\n', '  }\n', '\n', '  modifier inStage(Stage _stage) {\n', '    require(getStage() == _stage);\n', '    _;\n', '  }\n', '\n', '  // rates for each tier and total wei in that tiers\n', '  // they are added up together\n', '  function initTiers(uint256[] rates, uint256[] totalWeis) public onlyWhitelisted returns(uint256) {\n', '    require(token.controller() == address(this));\n', '    require(!tiersInitialized);\n', '    require(rates.length == totalTiers && rates.length == totalWeis.length);\n', '    uint256 tierMax = 0;\n', '\n', '    for (uint8 i=0; i < totalTiers; i++) {\n', '\n', '      require(totalWeis[i] > 0 && rates[i] > 0);\n', '\n', '      tierMax = tierMax.add(totalWeis[i]);\n', '      tiers[i] = Tier({\n', '        rate: rates[i],\n', '        max: tierMax\n', '      });\n', '    }\n', '\n', '    require(tierMax == cap);\n', '    tiersInitialized = true;\n', '    return tierMax;\n', '  }\n', '\n', '  // function for whitelisting investors with caps\n', '  function setCapForParticipants(address[] participants, uint256[] caps) onlyWhitelisted public  {\n', '    require(participants.length <= 50 && participants.length == caps.length);\n', '    for (uint8 i=0; i < participants.length; i++) {\n', '      investorCaps[participants[i]] = caps[i];\n', '    }\n', '  }\n', '\n', '\n', '  function addGrant(address assignee, uint256 value, bool isFounder) public onlyWhitelisted whenNotPaused {\n', '    require(value > 0);\n', '    require(assignee != address(0));\n', '    uint256 start;\n', '    uint256 cliff;\n', '    uint256 vestingPercentage;\n', '    uint256 initialTokens;\n', '    if(isFounder) {\n', '      start = now;\n', '      cliff = start + 12*30 days; //12 months\n', '      vestingPercentage = 20; //20%\n', '      founders.push(assignee);\n', '    }\n', '    else {\n', '      // for advisors\n', '      // transfer 10% of the tokens at start\n', '      initialTokens = value.mul(10).div(100);\n', '      transferTokens(assignee, initialTokens);\n', '      start = now;\n', '      cliff = start + 6*30 days;  //6 months\n', '      vestingPercentage = 15; //15% for each installments\n', '      advisors.push(assignee);\n', '    }\n', '\n', '    uint256 end = now + 3 * 1 years; //3 years\n', '    uint256 installmentLength = 6 * 30 days; // 6 month installments\n', '    bool revokable = true;\n', '    transferTokens(trustee, value.sub(initialTokens));\n', '    trustee.grant(assignee, value, start, cliff, end, installmentLength, vestingPercentage, initialTokens, revokable);\n', '  }\n', '\n', '  // called by the owner to close the crowdsale\n', '  function finalize() public onlyWhitelisted inStage(Stage.Success) {\n', '    require(!finalized);\n', '    //trustee&#39;s ownership is transfered from the crowdsale to owner of the contract\n', '    trustee.transferOwnership(msg.sender);\n', '    //enable token transfer\n', '    token.enableTransfers(true);\n', '    //generate the unsold tokens to the reserve\n', '    uint256 unsold = maxTokens.sub(token.totalSupply());\n', '    transferTokens(reserveWallet, unsold);\n', '\n', '    // change the token&#39;s controller to a zero Address so that it cannot\n', '    // generate or destroy tokens\n', '    token.changeController(0x0);\n', '    finalized = true;\n', '  }\n', '\n', '  //start the public sale manually after the presale is over, duration is in days\n', '  function startPublicSale(uint _startTime, uint _duration) public onlyWhitelisted inStage(Stage.PresaleFinished) {\n', '    require(_startTime >= now);\n', '    require(_duration > 0);\n', '    startTime = _startTime;\n', '    endTime = _startTime + _duration * 1 days;\n', '    publicSaleInitialized = true;\n', '  }\n', '\n', '  // total wei raised in the presale and public sale\n', '  function totalWei() public constant returns(uint256) {\n', '    uint256 presaleWei = super.totalWei();\n', '    return presaleWei.add(weiRaised);\n', '  }\n', '\n', '  function totalPublicSaleWei() public constant returns(uint256) {\n', '    return weiRaised;\n', '  }\n', '  // total cap of the presale and public sale\n', '  function totalCap() public constant returns(uint256) {\n', '    uint256 presaleCap = super.totalCap();\n', '    return presaleCap.add(cap);\n', '  }\n', '\n', '  // Total tokens sold duing the presale and public sale.\n', '  // Total tokens has to divided by 10^18\n', '  function totalTokens() public constant returns(uint256) {\n', '    return tokensSold;\n', '  }\n', '\n', '  // MAIN BUYING Function\n', '  function buyTokens(address purchaser, uint256 value) internal  whenNotPaused returns(uint256) {\n', '    require(value > 0);\n', '    Stage stage = getStage();\n', '    require(stage == Stage.Presale || stage == Stage.PublicSale);\n', '\n', '    //the purchase amount cannot be more than the whitelisted cap\n', '    uint256 purchaseAmount = Math.min256(value, investorCaps[purchaser].sub(contributions[purchaser]));\n', '    require(purchaseAmount > 0);\n', '    uint256 numTokens;\n', '\n', '    //call the presale contract\n', '    if (stage == Stage.Presale) {\n', '      if (Presale.totalWei().add(purchaseAmount) > Presale.totalCap()) {\n', '        purchaseAmount = Presale.capRemaining();\n', '      }\n', '      numTokens = Presale.buyTokens(purchaser, purchaseAmount);\n', '    } else if (stage == Stage.PublicSale) {\n', '\n', '      uint totalWei = weiRaised.add(purchaseAmount);\n', '      uint8 currentTier = getTier(weiRaised); //get current tier\n', '      if (totalWei >= cap) { // will TOTAL_CAP(HARD_CAP) of the public sale be reached ?\n', '        totalWei = cap;\n', '        //purchase amount can be only be (CAP - WeiRaised)\n', '        purchaseAmount = cap.sub(weiRaised);\n', '      }\n', '\n', '      // if the totalWei( weiRaised + msg.value) fits within current cap\n', '      // number of tokens would be rate * purchaseAmount\n', '      if (totalWei <= tiers[currentTier].max) {\n', '        numTokens = purchaseAmount.mul(tiers[currentTier].rate);\n', '      } else {\n', '        //wei remaining in the current tier\n', '        uint remaining = tiers[currentTier].max.sub(weiRaised);\n', '        numTokens = remaining.mul(tiers[currentTier].rate);\n', '\n', '        //wei in the next tier\n', '        uint256 excess = totalWei.sub(tiers[currentTier].max);\n', '        //number of tokens  = wei remaining in the next tier * rate of the next tier\n', '        numTokens = numTokens.add(excess.mul(tiers[currentTier + 1].rate));\n', '      }\n', '\n', '      // update the total raised so far\n', '      weiRaised = weiRaised.add(purchaseAmount);\n', '    }\n', '\n', '    // total tokens sold in the entire sale\n', '    require(tokensSold.add(numTokens) <= publicTokensAvailable);\n', '    tokensSold = tokensSold.add(numTokens);\n', '\n', '    // forward funds to the wallet\n', '    forwardFunds(purchaser, purchaseAmount);\n', '    // transfer the tokens to the purchaser\n', '    transferTokens(purchaser, numTokens);\n', '\n', '    // return the remaining unused wei back\n', '    if (value.sub(purchaseAmount) > 0) {\n', '      msg.sender.transfer(value.sub(purchaseAmount));\n', '    }\n', '\n', '    //event\n', '    TokenPurchase(purchaser, numTokens, purchaseAmount);\n', '\n', '    return numTokens;\n', '  }\n', '\n', '\n', '\n', '  function forwardFunds(address purchaser, uint256 value) internal {\n', '    //add contribution to the purchaser\n', '    contributions[purchaser] = contributions[purchaser].add(value);\n', '    wallet.transfer(value);\n', '  }\n', '\n', '  function changeEndTime(uint _endTime) public onlyWhitelisted {\n', '    endTime = _endTime;\n', '  }\n', '\n', '  function changeFundsWallet(address _newWallet) public onlyWhitelisted {\n', '    require(_newWallet != address(0));\n', '    wallet = _newWallet;\n', '  }\n', '\n', '  function changeTokenController() onlyWhitelisted public {\n', '    token.changeController(msg.sender);\n', '  }\n', '\n', '  function changeTrusteeOwner() onlyWhitelisted public {\n', '    trustee.transferOwnership(msg.sender);\n', '  }\n', '  function changeReserveWallet(address _reserve) public onlyWhitelisted {\n', '    require(_reserve != address(0));\n', '    reserveWallet = _reserve;\n', '  }\n', '\n', '  function setWhitelistAddress(address _whitelist) public onlyWhitelisted {\n', '    require(_whitelist != address(0));\n', '    whitelistAddress = _whitelist;\n', '  }\n', '\n', '  function transferTokens(address to, uint256 value) internal {\n', '    uint totalSupply = token.totalSupply();\n', '    require(totalSupply.add(value) <= maxTokens);\n', '    token.generateTokens(to, value);\n', '  }\n', '\n', '  function sendPrivateSaleTokens(address to, uint256 value) public whenNotPaused onlyWhitelisted {\n', '    require(privateSaleTokensSold.add(value) <= privateSaleTokensAvailable);\n', '    privateSaleTokensSold = privateSaleTokensSold.add(value);\n', '    transferTokens(to, value);\n', '  }\n', '\n', '  function hasEnded() internal constant returns(bool) {\n', '    return now > endTime || weiRaised >= cap;\n', '  }\n', '\n', '  function hasStarted() internal constant returns(bool) {\n', '    return publicSaleInitialized && now >= startTime;\n', '  }\n', '\n', '  function getTier(uint256 _weiRaised) internal constant returns(uint8) {\n', '    for (uint8 i = 0; i < totalTiers; i++) {\n', '      if (_weiRaised < tiers[i].max) {\n', '        return i;\n', '      }\n', '    }\n', '    //wont reach but for safety\n', '    return totalTiers + 1;\n', '  }\n', '\n', '\n', '\n', '  function getCurrentTier() public constant returns(uint8) {\n', '    return getTier(weiRaised);\n', '  }\n', '\n', '\n', '  // functions for the mini me token\n', '  function proxyPayment(address _owner) public payable returns(bool) {\n', '    return true;\n', '  }\n', '\n', '  function onApprove(address _owner, address _spender, uint _amount) public returns(bool) {\n', '    return true;\n', '  }\n', '\n', '  function onTransfer(address _from, address _to, uint _amount) public returns(bool) {\n', '    return true;\n', '  }\n', '\n', '  function getTokenSaleTime() public constant returns(uint256, uint256) {\n', '    return (startTime, endTime);\n', '  }\n', '}']
['pragma solidity 0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', '\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Whitelist\n', ' * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\n', ' * @dev This simplifies the implementation of "user permissions".\n', ' */\n', 'contract Whitelist is Ownable {\n', '  mapping(address => bool) public whitelist;\n', '\n', '  event WhitelistedAddressAdded(address addr);\n', '  event WhitelistedAddressRemoved(address addr);\n', '\n', '  /**\n', "   * @dev Throws if called by any account that's not whitelisted.\n", '   */\n', '  modifier onlyWhitelisted() {\n', '    require(whitelist[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev add an address to the whitelist\n', '   * @param addr address\n', '   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n', '   */\n', '  function addAddressToWhitelist(address addr) onlyOwner public returns(bool success) {\n', '    if (!whitelist[addr]) {\n', '      whitelist[addr] = true;\n', '      WhitelistedAddressAdded(addr);\n', '      success = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev add addresses to the whitelist\n', '   * @param addrs addresses\n', '   * @return true if at least one address was added to the whitelist,\n', '   * false if all addresses were already in the whitelist\n', '   */\n', '  function addAddressesToWhitelist(address[] addrs) onlyOwner public returns(bool success) {\n', '    for (uint256 i = 0; i < addrs.length; i++) {\n', '      if (addAddressToWhitelist(addrs[i])) {\n', '        success = true;\n', '      }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address from the whitelist\n', '   * @param addr address\n', '   * @return true if the address was removed from the whitelist,\n', "   * false if the address wasn't in the whitelist in the first place\n", '   */\n', '  function removeAddressFromWhitelist(address addr) onlyOwner public returns(bool success) {\n', '    if (whitelist[addr]) {\n', '      whitelist[addr] = false;\n', '      WhitelistedAddressRemoved(addr);\n', '      success = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev remove addresses from the whitelist\n', '   * @param addrs addresses\n', '   * @return true if at least one address was removed from the whitelist,\n', "   * false if all addresses weren't in the whitelist in the first place\n", '   */\n', '  function removeAddressesFromWhitelist(address[] addrs) onlyOwner public returns(bool success) {\n', '    for (uint256 i = 0; i < addrs.length; i++) {\n', '      if (removeAddressFromWhitelist(addrs[i])) {\n', '        success = true;\n', '      }\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract Presale is Whitelist {\n', '\n', '  using SafeMath for uint256;\n', '  uint256 private weiRaised;\n', '  uint256 private startTime;\n', '  uint256 private endTime;\n', '  uint256 private rate;\n', '\n', '  uint256 private cap;\n', '\n', '  function Presale(uint256 _startTime, uint256 duration, uint256 _rate, uint256 _cap) public {\n', '    require(_rate > 0);\n', '    require(_cap > 0);\n', '    require(_startTime >= now);\n', '    require(duration > 0);\n', '\n', '    rate = _rate;\n', '    cap = _cap;\n', '    startTime = _startTime;\n', '    endTime = startTime + duration * 1 days;\n', '    weiRaised = 0;\n', '  }\n', '\n', '  function totalWei() public constant returns(uint256) {\n', '    return weiRaised;\n', '  }\n', '\n', '  function capRemaining() public constant returns(uint256) {\n', '    return cap.sub(weiRaised);\n', '  }\n', '\n', '  function totalCap() public constant returns(uint256) {\n', '    return cap;\n', '  }\n', '\n', '  function buyTokens(address purchaser, uint256 value) internal returns(uint256) {\n', '    require(validPurchase(value));\n', '    uint256 tokens = rate.mul(value);\n', '    weiRaised = weiRaised.add(value);\n', '    return tokens;\n', '  }\n', '\n', '  function hasEnded() internal constant returns(bool) {\n', '    return now > endTime || weiRaised >= cap;\n', '  }\n', '\n', '  function hasStarted() internal constant returns(bool) {\n', '    return now > startTime;\n', '  }\n', '\n', '  function validPurchase(uint256 value) internal view returns (bool) {\n', '    bool withinCap = weiRaised.add(value) <= cap;\n', '    return withinCap && withinPeriod();\n', '  }\n', '\n', '  function presaleRate() public view returns(uint256) {\n', '    return rate;\n', '  }\n', '\n', '  function withinPeriod () private constant returns(bool) {\n', '    return now >= startTime && now <= endTime;\n', '  }\n', '\n', '  function increasePresaleEndTime(uint _days) public onlyWhitelisted {\n', '    endTime = endTime + _days * 1 days;\n', '  }\n', '\n', '  function getPresaleEndTime() public constant returns(uint) {\n', '    return endTime;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens\n', ' * @author SylTi\n', ' * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n', ' * This will prevent any accidental loss of tokens.\n', ' */\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.safeTransfer(owner, balance);\n', '  }\n', '\n', '}\n', '\n', '/// @title Vesting trustee contract for erc20 token.\n', 'contract VestingTrustee is Ownable, CanReclaimToken {\n', '    using SafeMath for uint256;\n', '\n', '    // erc20 token contract.\n', '    ERC20 public token;\n', '\n', '    // Vesting grant for a speicifc holder.\n', '    struct Grant {\n', '        uint256 value;\n', '        uint256 start;\n', '        uint256 cliff;\n', '        uint256 end;\n', '        uint256 installmentLength; // In seconds.\n', '        uint256 transferred;\n', '        bool revokable;\n', '        uint256 prevested;\n', '        uint256 vestingPercentage;\n', '    }\n', '\n', '    // Holder to grant information mapping.\n', '    mapping (address => Grant) public grants;\n', '\n', '    // Total tokens available for vesting.\n', '    uint256 public totalVesting;\n', '\n', '    event NewGrant(address indexed _from, address indexed _to, uint256 _value);\n', '    event TokensUnlocked(address indexed _to, uint256 _value);\n', '    event GrantRevoked(address indexed _holder, uint256 _refund);\n', '\n', '    /// @dev Constructor that initializes the address of the  token contract.\n', '    /// @param _token erc20 The address of the previously deployed token contract.\n', '    function VestingTrustee(address _token) {\n', '        require(_token != address(0));\n', '\n', '        token = ERC20(_token);\n', '    }\n', '\n', '    /// @dev Grant tokens to a specified address.\n', '    /// @param _to address The holder address.\n', '    /// @param _value uint256 The amount of tokens to be granted.\n', '    /// @param _start uint256 The beginning of the vesting period.\n', '    /// @param _cliff uint256 Duration of the cliff period (when the first installment is made).\n', '    /// @param _end uint256 The end of the vesting period.\n', '    /// @param _installmentLength uint256 The length of each vesting installment (in seconds).\n', '    /// @param _revokable bool Whether the grant is revokable or not.\n', '    function grant(address _to, uint256 _value, uint256 _start, uint256 _cliff, uint256 _end,\n', '        uint256 _installmentLength, uint256 vestingPercentage, uint256 prevested, bool _revokable)\n', '        external onlyOwner {\n', '\n', '        require(_to != address(0));\n', "        require(_to != address(this)); // Don't allow holder to be this contract.\n", '        require(_value > 0);\n', '        require(_value.sub(prevested) > 0);\n', '        require(vestingPercentage > 0);\n', '\n', '        // Require that every holder can be granted tokens only once.\n', '        require(grants[_to].value == 0);\n', '\n', '        // Require for time ranges to be consistent and valid.\n', '        require(_start <= _cliff && _cliff <= _end);\n', '\n', '        // Require installment length to be valid and no longer than (end - start).\n', '        require(_installmentLength > 0 && _installmentLength <= _end.sub(_start));\n', '\n', '        // Grant must not exceed the total amount of tokens currently available for vesting.\n', '        require(totalVesting.add(_value.sub(prevested)) <= token.balanceOf(address(this)));\n', '\n', '        // Assign a new grant.\n', '        grants[_to] = Grant({\n', '            value: _value,\n', '            start: _start,\n', '            cliff: _cliff,\n', '            end: _end,\n', '            installmentLength: _installmentLength,\n', '            transferred: prevested,\n', '            revokable: _revokable,\n', '            prevested: prevested,\n', '            vestingPercentage: vestingPercentage\n', '        });\n', '\n', '        totalVesting = totalVesting.add(_value.sub(prevested));\n', '        NewGrant(msg.sender, _to, _value);\n', '    }\n', '\n', '    /// @dev Revoke the grant of tokens of a specifed address.\n', '    /// @param _holder The address which will have its tokens revoked.\n', '    function revoke(address _holder) public onlyOwner {\n', '        Grant memory grant = grants[_holder];\n', '\n', '        // Grant must be revokable.\n', '        require(grant.revokable);\n', '\n', '        // Calculate amount of remaining tokens that are still available to be\n', '        // returned to owner.\n', '        uint256 refund = grant.value.sub(grant.transferred);\n', '\n', '        // Remove grant information.\n', '        delete grants[_holder];\n', '\n', '        // Update total vesting amount and transfer previously calculated tokens to owner.\n', '        totalVesting = totalVesting.sub(refund);\n', '        token.transfer(msg.sender, refund);\n', '\n', '        GrantRevoked(_holder, refund);\n', '    }\n', '\n', '    /// @dev Calculate the total amount of vested tokens of a holder at a given time.\n', '    /// @param _holder address The address of the holder.\n', '    /// @param _time uint256 The specific time to calculate against.\n', "    /// @return a uint256 Representing a holder's total amount of vested tokens.\n", '    function vestedTokens(address _holder, uint256 _time) external constant returns (uint256) {\n', '        Grant memory grant = grants[_holder];\n', '        if (grant.value == 0) {\n', '            return 0;\n', '        }\n', '\n', '        return calculateVestedTokens(grant, _time);\n', '    }\n', '\n', '    /// @dev Calculate amount of vested tokens at a specifc time.\n', '    /// @param _grant Grant The vesting grant.\n', '    /// @param _time uint256 The time to be checked\n', '    /// @return a uint256 Representing the amount of vested tokens of a specific grant.\n', '    function calculateVestedTokens(Grant _grant, uint256 _time) private constant returns (uint256) {\n', "        // If we're before the cliff, then nothing is vested.\n", '        if (_time < _grant.cliff) {\n', '            return _grant.prevested;\n', '        }\n', '\n', "        // If we're after the end of the vesting period - everything is vested;\n", '        if (_time >= _grant.end) {\n', '            return _grant.value;\n', '        }\n', '\n', '        // Calculate amount of installments past until now.\n', '        uint256 installmentsPast = _time.sub(_grant.cliff).div(_grant.installmentLength) + 1;\n', '\n', '\n', '        // Calculate and return installments that have passed according to vesting days that have passed.\n', '        return _grant.prevested.add(_grant.value.mul(installmentsPast.mul(_grant.vestingPercentage)).div(100));\n', '    }\n', '\n', '    /// @dev Unlock vested tokens and transfer them to their holder.\n', '    /// @return a uint256 Representing the amount of vested tokens transferred to their holder.\n', '    function unlockVestedTokens() external {\n', '        Grant storage grant = grants[msg.sender];\n', '\n', '        // Require that there will be funds left in grant to tranfser to holder.\n', '        require(grant.value != 0);\n', '\n', '        // Get the total amount of vested tokens, acccording to grant.\n', '        uint256 vested = calculateVestedTokens(grant, now);\n', '        if (vested == 0) {\n', '            revert();\n', '        }\n', '\n', "        // Make sure the holder doesn't transfer more than what he already has.\n", '        uint256 transferable = vested.sub(grant.transferred);\n', '        if (transferable == 0) {\n', '            revert();\n', '        }\n', '\n', '        grant.transferred = grant.transferred.add(transferable);\n', '        totalVesting = totalVesting.sub(transferable);\n', '        token.transfer(msg.sender, transferable);\n', '        TokensUnlocked(msg.sender, transferable);\n', '    }\n', '\n', '    function reclaimEther() external onlyOwner {\n', '      assert(owner.send(this.balance));\n', '    }\n', '}\n', '\n', 'contract Controlled {\n', '    /// @notice The address of the controller is the only address that can call\n', '    ///  a function with this modifier\n', '    modifier onlyController { require(msg.sender == controller); _; }\n', '\n', '    address public controller;\n', '\n', '    function Controlled() public { controller = msg.sender;}\n', '\n', '    /// @notice Changes the controller of the contract\n', '    /// @param _newController The new controller of the contract\n', '    function changeController(address _newController) public onlyController {\n', '        controller = _newController;\n', '    }\n', '}\n', '\n', '/// @dev The token controller contract must implement these functions\n', 'contract TokenController {\n', '    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n', '    /// @param _owner The address that sent the ether to create tokens\n', '    /// @return True if the ether is accepted, false if it throws\n', '    function proxyPayment(address _owner) public payable returns(bool);\n', '\n', '    /// @notice Notifies the controller about a token transfer allowing the\n', '    ///  controller to react if desired\n', '    /// @param _from The origin of the transfer\n', '    /// @param _to The destination of the transfer\n', '    /// @param _amount The amount of the transfer\n', '    /// @return False if the controller does not authorize the transfer\n', '    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\n', '\n', '    /// @notice Notifies the controller about an approval allowing the\n', '    ///  controller to react if desired\n', '    /// @param _owner The address that calls `approve()`\n', '    /// @param _spender The spender in the `approve()` call\n', '    /// @param _amount The amount in the `approve()` call\n', '    /// @return False if the controller does not authorize the approval\n', '    function onApprove(address _owner, address _spender, uint _amount) public\n', '        returns(bool);\n', '}\n', '\n', '/*\n', '    Copyright 2016, Jordi Baylina\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', ' */\n', '\n', '/// @title MiniMeToken Contract\n', '/// @author Jordi Baylina\n', "/// @dev This token contract's goal is to make it easy for anyone to clone this\n", "///  token using the token distribution at a given block, this will allow DAO's\n", '///  and DApps to upgrade their features in a decentralized manner without\n', '///  affecting the original token\n', '/// @dev It is ERC20 compliant, but still needs to under go further testing.\n', '\n', '\n', '\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 _amount, address _token, bytes _data) public;\n', '}\n', '\n', '/// @dev The actual token contract, the default controller is the msg.sender\n', '///  that deploys the contract, so usually this token will be deployed by a\n', '///  token controller contract, which Giveth will call a "Campaign"\n', 'contract MiniMeToken is Controlled {\n', '\n', "    string public name;                //The Token's name: e.g. DigixDAO Tokens\n", '    uint8 public decimals;             //Number of decimals of the smallest unit\n', '    string public symbol;              //An identifier: e.g. REP\n', "    string public version = 'MMT_0.2'; //An arbitrary versioning scheme\n", '\n', '\n', '    /// @dev `Checkpoint` is the structure that attaches a block number to a\n', '    ///  given value, the block number attached is the one that last changed the\n', '    ///  value\n', '    struct  Checkpoint {\n', '\n', '        // `fromBlock` is the block number that the value was generated from\n', '        uint128 fromBlock;\n', '\n', '        // `value` is the amount of tokens at a specific block number\n', '        uint128 value;\n', '    }\n', '\n', '    // `parentToken` is the Token address that was cloned to produce this token;\n', '    //  it will be 0x0 for a token that was not cloned\n', '    MiniMeToken public parentToken;\n', '\n', '    // `parentSnapShotBlock` is the block number from the Parent Token that was\n', '    //  used to determine the initial distribution of the Clone Token\n', '    uint public parentSnapShotBlock;\n', '\n', '    // `creationBlock` is the block number that the Clone Token was created\n', '    uint public creationBlock;\n', '\n', '    // `balances` is the map that tracks the balance of each address, in this\n', '    //  contract when the balance changes the block number that the change\n', '    //  occurred is also included in the map\n', '    mapping (address => Checkpoint[]) balances;\n', '\n', '    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    // Tracks the history of the `totalSupply` of the token\n', '    Checkpoint[] totalSupplyHistory;\n', '\n', '    // Flag that determines if the token is transferable or not.\n', '    bool public transfersEnabled;\n', '\n', '    // The factory used to create new clone tokens\n', '    MiniMeTokenFactory public tokenFactory;\n', '\n', '////////////////\n', '// Constructor\n', '////////////////\n', '\n', '    /// @notice Constructor to create a MiniMeToken\n', '    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n', '    ///  will create the Clone token contracts, the token factory needs to be\n', '    ///  deployed first\n', '    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n', '    ///  new token\n', '    /// @param _parentSnapShotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token, set to 0 if it\n', '    ///  is a new token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    function MiniMeToken(\n', '        address _tokenFactory,\n', '        address _parentToken,\n', '        uint _parentSnapShotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) public {\n', '        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n', '        name = _tokenName;                                 // Set the name\n', '        decimals = _decimalUnits;                          // Set the decimals\n', '        symbol = _tokenSymbol;                             // Set the symbol\n', '        parentToken = MiniMeToken(_parentToken);\n', '        parentSnapShotBlock = _parentSnapShotBlock;\n', '        transfersEnabled = _transfersEnabled;\n', '        creationBlock = block.number;\n', '    }\n', '\n', '\n', '///////////////////\n', '// ERC20 Methods\n', '///////////////////\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '        require(transfersEnabled);\n', '        doTransfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n', '    ///  is approved by `_from`\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function transferFrom(address _from, address _to, uint256 _amount\n', '    ) public returns (bool success) {\n', '\n', '        // The controller of this contract can move tokens around at will,\n', '        //  this is important to recognize! Confirm that you trust the\n', '        //  controller of this contract, which in most situations should be\n', '        //  another open source smart contract or 0x0\n', '        if (msg.sender != controller) {\n', '            require(transfersEnabled);\n', '\n', '            // The standard ERC 20 transferFrom functionality\n', '            require(allowed[_from][msg.sender] >= _amount);\n', '            allowed[_from][msg.sender] -= _amount;\n', '        }\n', '        doTransfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /// @dev This is the actual transfer function in the token contract, it can\n', '    ///  only be called by other functions in this contract.\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function doTransfer(address _from, address _to, uint _amount\n', '    ) internal {\n', '\n', '           if (_amount == 0) {\n', '               Transfer(_from, _to, _amount);    // Follow the spec to louch the event when transfer 0\n', '               return;\n', '           }\n', '\n', '           require(parentSnapShotBlock < block.number);\n', '\n', '           // Do not allow transfer to 0x0 or the token contract itself\n', '           require((_to != 0) && (_to != address(this)));\n', '\n', '           // If the amount being transfered is more than the balance of the\n', '           //  account the transfer throws\n', '           var previousBalanceFrom = balanceOfAt(_from, block.number);\n', '\n', '           require(previousBalanceFrom >= _amount);\n', '\n', '           // Alerts the token controller of the transfer\n', '           if (isContract(controller)) {\n', '               require(TokenController(controller).onTransfer(_from, _to, _amount));\n', '           }\n', '\n', '           // First update the balance array with the new value for the address\n', '           //  sending the tokens\n', '           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n', '\n', '           // Then update the balance array with the new value for the address\n', '           //  receiving the tokens\n', '           var previousBalanceTo = balanceOfAt(_to, block.number);\n', '           require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n', '           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n', '\n', '           // An event to make the transfer easy to find on the blockchain\n', '           Transfer(_from, _to, _amount);\n', '\n', '    }\n', '\n', "    /// @param _owner The address that's balance is being requested\n", '    /// @return The balance of `_owner` at the current block\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balanceOfAt(_owner, block.number);\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n', '    ///  its behalf. This is a modified version of the ERC20 approve function\n', '    ///  to be a little bit safer\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the approval was successful\n', '    function approve(address _spender, uint256 _amount) public returns (bool success) {\n', '        require(transfersEnabled);\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        // Alerts the token controller of the approve function call\n', '        if (isContract(controller)) {\n', '            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n', '        }\n', '\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to read the `allowed[]` map\n', '    /// @param _owner The address of the account that owns the token\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens of _owner that _spender is allowed\n', '    ///  to spend\n', '    function allowance(address _owner, address _spender\n', '    ) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n', '    ///  its behalf, and then a function is triggered in the contract that is\n', '    ///  being approved, `_spender`. This allows users to use their tokens to\n', '    ///  interact with contracts in one function call instead of two\n', '    /// @param _spender The address of the contract able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the function call was successful\n', '    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n', '    ) public returns (bool success) {\n', '        require(approve(_spender, _amount));\n', '\n', '        ApproveAndCallFallBack(_spender).receiveApproval(\n', '            msg.sender,\n', '            _amount,\n', '            this,\n', '            _extraData\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to get the total number of tokens\n', '    /// @return The total number of tokens\n', '    function totalSupply() public constant returns (uint) {\n', '        return totalSupplyAt(block.number);\n', '    }\n', '\n', '\n', '////////////////\n', '// Query balance and totalSupply in History\n', '////////////////\n', '\n', '    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @param _blockNumber The block number when the balance is queried\n', '    /// @return The balance at `_blockNumber`\n', '    function balanceOfAt(address _owner, uint _blockNumber) public constant\n', '        returns (uint) {\n', '\n', '        // These next few lines are used when the balance of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.balanceOfAt` be queried at the\n', '        //  genesis block for that token as this contains initial balance of\n', '        //  this token\n', '        if ((balances[_owner].length == 0)\n', '            || (balances[_owner][0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != 0) {\n', '                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                // Has no parent\n', '                return 0;\n', '            }\n', '\n', '        // This will return the expected balance during normal situations\n', '        } else {\n', '            return getValueAt(balances[_owner], _blockNumber);\n', '        }\n', '    }\n', '\n', '    /// @notice Total amount of tokens at a specific `_blockNumber`.\n', '    /// @param _blockNumber The block number when the totalSupply is queried\n', '    /// @return The total amount of tokens at `_blockNumber`\n', '    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\n', '\n', '        // These next few lines are used when the totalSupply of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.totalSupplyAt` be queried at the\n', '        //  genesis block for this token as that contains totalSupply of this\n', '        //  token at this block number.\n', '        if ((totalSupplyHistory.length == 0)\n', '            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != 0) {\n', '                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                return 0;\n', '            }\n', '\n', '        // This will return the expected totalSupply during normal situations\n', '        } else {\n', '            return getValueAt(totalSupplyHistory, _blockNumber);\n', '        }\n', '    }\n', '\n', '////////////////\n', '// Clone Token Method\n', '////////////////\n', '\n', '    /// @notice Creates a new clone token with the initial distribution being\n', '    ///  this token at `_snapshotBlock`\n', '    /// @param _cloneTokenName Name of the clone token\n', '    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\n', '    /// @param _cloneTokenSymbol Symbol of the clone token\n', '    /// @param _snapshotBlock Block when the distribution of the parent token is\n', '    ///  copied to set the initial distribution of the new clone token;\n', '    ///  if the block is zero than the actual block, the current block is used\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    /// @return The address of the new MiniMeToken Contract\n', '    function createCloneToken(\n', '        string _cloneTokenName,\n', '        uint8 _cloneDecimalUnits,\n', '        string _cloneTokenSymbol,\n', '        uint _snapshotBlock,\n', '        bool _transfersEnabled\n', '        ) public returns(address) {\n', '        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n', '        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n', '            this,\n', '            _snapshotBlock,\n', '            _cloneTokenName,\n', '            _cloneDecimalUnits,\n', '            _cloneTokenSymbol,\n', '            _transfersEnabled\n', '            );\n', '\n', '        cloneToken.changeController(msg.sender);\n', '\n', '        // An event to make the token easy to find on the blockchain\n', '        NewCloneToken(address(cloneToken), _snapshotBlock);\n', '        return address(cloneToken);\n', '    }\n', '\n', '////////////////\n', '// Generate and destroy tokens\n', '////////////////\n', '\n', '    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n', '    /// @param _owner The address that will be assigned the new tokens\n', '    /// @param _amount The quantity of tokens generated\n', '    /// @return True if the tokens are generated correctly\n', '    function generateTokens(address _owner, uint _amount\n', '    ) public onlyController returns (bool) {\n', '        uint curTotalSupply = totalSupply();\n', '        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n', '        uint previousBalanceTo = balanceOf(_owner);\n', '        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n', '        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n', '        Transfer(0, _owner, _amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    /// @notice Burns `_amount` tokens from `_owner`\n', '    /// @param _owner The address that will lose the tokens\n', '    /// @param _amount The quantity of tokens to burn\n', '    /// @return True if the tokens are burned correctly\n', '    function destroyTokens(address _owner, uint _amount\n', '    ) onlyController public returns (bool) {\n', '        uint curTotalSupply = totalSupply();\n', '        require(curTotalSupply >= _amount);\n', '        uint previousBalanceFrom = balanceOf(_owner);\n', '        require(previousBalanceFrom >= _amount);\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n', '        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n', '        Transfer(_owner, 0, _amount);\n', '        return true;\n', '    }\n', '\n', '////////////////\n', '// Enable tokens transfers\n', '////////////////\n', '\n', '\n', '    /// @notice Enables token holders to transfer their tokens freely if true\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    function enableTransfers(bool _transfersEnabled) public onlyController {\n', '        transfersEnabled = _transfersEnabled;\n', '    }\n', '\n', '////////////////\n', '// Internal helper functions to query and set a value in a snapshot array\n', '////////////////\n', '\n', '    /// @dev `getValueAt` retrieves the number of tokens at a given block number\n', '    /// @param checkpoints The history of values being queried\n', '    /// @param _block The block number to retrieve the value at\n', '    /// @return The number of tokens being queried\n', '    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n', '    ) constant internal returns (uint) {\n', '        if (checkpoints.length == 0) return 0;\n', '\n', '        // Shortcut for the actual value\n', '        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n', '            return checkpoints[checkpoints.length-1].value;\n', '        if (_block < checkpoints[0].fromBlock) return 0;\n', '\n', '        // Binary search of the value in the array\n', '        uint min = 0;\n', '        uint max = checkpoints.length-1;\n', '        while (max > min) {\n', '            uint mid = (max + min + 1)/ 2;\n', '            if (checkpoints[mid].fromBlock<=_block) {\n', '                min = mid;\n', '            } else {\n', '                max = mid-1;\n', '            }\n', '        }\n', '        return checkpoints[min].value;\n', '    }\n', '\n', '    /// @dev `updateValueAtNow` used to update the `balances` map and the\n', '    ///  `totalSupplyHistory`\n', '    /// @param checkpoints The history of data being updated\n', '    /// @param _value The new number of tokens\n', '    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n', '    ) internal  {\n', '        if ((checkpoints.length == 0)\n', '        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\n', '               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n', '               newCheckPoint.fromBlock =  uint128(block.number);\n', '               newCheckPoint.value = uint128(_value);\n', '           } else {\n', '               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\n', '               oldCheckPoint.value = uint128(_value);\n', '           }\n', '    }\n', '\n', '    /// @dev Internal function to determine if an address is a contract\n', '    /// @param _addr The address being queried\n', '    /// @return True if `_addr` is a contract\n', '    function isContract(address _addr) constant internal returns(bool) {\n', '        uint size;\n', '        if (_addr == 0) return false;\n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '        return size>0;\n', '    }\n', '\n', '    /// @dev Helper function to return a min betwen the two uints\n', '    function min(uint a, uint b) pure internal returns (uint) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', "    /// @notice The fallback function: If the contract's controller has not been\n", '    ///  set to 0, then the `proxyPayment` method is called which relays the\n', '    ///  ether and creates tokens as described in the token controller contract\n', '    function () public payable {\n', '        require(isContract(controller));\n', '        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n', '    }\n', '\n', '//////////\n', '// Safety Methods\n', '//////////\n', '\n', '    /// @notice This method can be used by the controller to extract mistakenly\n', '    ///  sent tokens to this contract.\n', '    /// @param _token The address of the token contract that you want to recover\n', '    ///  set to 0 in case you want to extract ether.\n', '    function claimTokens(address _token) public onlyController {\n', '        if (_token == 0x0) {\n', '            controller.transfer(this.balance);\n', '            return;\n', '        }\n', '\n', '        MiniMeToken token = MiniMeToken(_token);\n', '        uint balance = token.balanceOf(this);\n', '        token.transfer(controller, balance);\n', '        ClaimedTokens(_token, controller, balance);\n', '    }\n', '\n', '////////////////\n', '// Events\n', '////////////////\n', '    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n', '    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n', '    event Approval(\n', '        address indexed _owner,\n', '        address indexed _spender,\n', '        uint256 _amount\n', '        );\n', '\n', '}\n', '\n', '\n', '////////////////\n', '// MiniMeTokenFactory\n', '////////////////\n', '\n', '/// @dev This contract is used to generate clone contracts from a contract.\n', '///  In solidity this is the way to create a contract from a contract of the\n', '///  same class\n', 'contract MiniMeTokenFactory {\n', '\n', '    /// @notice Update the DApp by creating a new token with new functionalities\n', '    ///  the msg.sender becomes the controller of this clone token\n', '    /// @param _parentToken Address of the token being cloned\n', '    /// @param _snapshotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    /// @return The address of the new token contract\n', '    function createCloneToken(\n', '        address _parentToken,\n', '        uint _snapshotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) public returns (MiniMeToken) {\n', '        MiniMeToken newToken = new MiniMeToken(\n', '            this,\n', '            _parentToken,\n', '            _snapshotBlock,\n', '            _tokenName,\n', '            _decimalUnits,\n', '            _tokenSymbol,\n', '            _transfersEnabled\n', '            );\n', '\n', '        newToken.changeController(msg.sender);\n', '        return newToken;\n', '    }\n', '}\n', '\n', 'contract Crowdsale is Presale, Pausable, CanReclaimToken {\n', '\n', '  using SafeMath for uint256;\n', '  address public whitelistAddress;\n', '  address public wallet; //wallet where the funds collected are transfered\n', '  MiniMeToken public token; //ERC20 Token\n', '  uint256 private weiRaised = 0; //WeiRaised during the public Sale\n', '  uint256 private cap = 0; //Cap of the public Sale in Wei\n', '  bool private publicSaleInitialized = false;\n', '  bool private finalized = false;\n', '  uint256 private tokensSold = 0; //tokens sold during the entire sale\n', '  uint256 private startTime; //start time of the public sale initialized after the presale is over\n', '  uint256 private endTime; //endtime of the public sale\n', '  uint256 public maxTokens;\n', '  mapping(address => uint256) public contributions; //contributions of each investor\n', '  mapping(address => uint256) public investorCaps; //for whitelisting\n', '  address[] public investors; //investor list who participate in the ICO\n', '  address[] public founders; //list of founders\n', '  address[] public advisors; //list of advisors\n', '  VestingTrustee public trustee;\n', '  address public reserveWallet; //reserveWallet where the unsold tokens will be sent to\n', '\n', '  //Rate for each tier (no of tokens for 1 ETH)\n', '  //Max wei for each tier\n', '  struct Tier {\n', '    uint256 rate;\n', '    uint256 max;\n', '  }\n', '\n', '  uint public privateSaleTokensAvailable;\n', '  uint public privateSaleTokensSold = 0;\n', '  uint public publicTokensAvailable;\n', '\n', '  uint8 public totalTiers = 0; //total Tiers in the public sale\n', '  bool public tiersInitialized = false;\n', '  uint256 public maxTiers = 6; //max tiers that can be in the publicsale\n', '  Tier[6] public tiers; //array of tiers\n', '\n', '  event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\n', '  enum Stage { Preparing, Presale, PresaleFinished, PublicSale, Success, Finalized }\n', '\n', '  function Crowdsale(\n', '    uint256 _presaleStartTime, //presale start time\n', '    uint256 _presaleDuration, //presale duration in days\n', '    uint256 _presaleRate, // presale rate. ie No of tokens per 1 ETH\n', '    uint256 _presaleCap, // max wei that can raised\n', '    address erc20Token, // Token used for the crowdsale\n', '    address _wallet,\n', '    uint8 _tiers,\n', '    uint256 _cap,\n', '    address _reserveWallet)\n', '    public\n', '    Presale(_presaleStartTime, _presaleDuration, _presaleRate, _presaleCap)\n', '    {\n', '      require(_wallet != address(0));\n', '      require(erc20Token != address(0));\n', '      require(_tiers > 0 && _tiers <= maxTiers);\n', '      require(_cap > 0);\n', '      require(_reserveWallet != address(0));\n', '      token = MiniMeToken(erc20Token);\n', '      wallet = _wallet;\n', '      totalTiers = _tiers;\n', '      cap = _cap;\n', '      reserveWallet = _reserveWallet;\n', '      trustee = new VestingTrustee(erc20Token);\n', '      maxTokens = 1000000000 * (10 ** 18); // 1 B tokens\n', '      tokensSold = token.totalSupply();\n', '      privateSaleTokensAvailable = maxTokens.mul(22).div(100);\n', '      publicTokensAvailable = maxTokens.mul(28).div(100);\n', '      super.addAddressToWhitelist(msg.sender);\n', '    }\n', '\n', '  function() public payable {\n', '    buyTokens(msg.sender, msg.value);\n', '  }\n', '\n', '  function getStage() public constant returns(Stage) {\n', '    if (finalized) return Stage.Finalized;\n', '    if (!tiersInitialized || !Presale.hasStarted()) return Stage.Preparing;\n', '    if (!Presale.hasEnded()) return Stage.Presale;\n', '    if (Presale.hasEnded() && !hasStarted()) return Stage.PresaleFinished;\n', '    if (!hasEnded()) return Stage.PublicSale;\n', '    if (hasEnded()) return Stage.Success;\n', '    return Stage.Preparing;\n', '  }\n', '\n', '  modifier inStage(Stage _stage) {\n', '    require(getStage() == _stage);\n', '    _;\n', '  }\n', '\n', '  // rates for each tier and total wei in that tiers\n', '  // they are added up together\n', '  function initTiers(uint256[] rates, uint256[] totalWeis) public onlyWhitelisted returns(uint256) {\n', '    require(token.controller() == address(this));\n', '    require(!tiersInitialized);\n', '    require(rates.length == totalTiers && rates.length == totalWeis.length);\n', '    uint256 tierMax = 0;\n', '\n', '    for (uint8 i=0; i < totalTiers; i++) {\n', '\n', '      require(totalWeis[i] > 0 && rates[i] > 0);\n', '\n', '      tierMax = tierMax.add(totalWeis[i]);\n', '      tiers[i] = Tier({\n', '        rate: rates[i],\n', '        max: tierMax\n', '      });\n', '    }\n', '\n', '    require(tierMax == cap);\n', '    tiersInitialized = true;\n', '    return tierMax;\n', '  }\n', '\n', '  // function for whitelisting investors with caps\n', '  function setCapForParticipants(address[] participants, uint256[] caps) onlyWhitelisted public  {\n', '    require(participants.length <= 50 && participants.length == caps.length);\n', '    for (uint8 i=0; i < participants.length; i++) {\n', '      investorCaps[participants[i]] = caps[i];\n', '    }\n', '  }\n', '\n', '\n', '  function addGrant(address assignee, uint256 value, bool isFounder) public onlyWhitelisted whenNotPaused {\n', '    require(value > 0);\n', '    require(assignee != address(0));\n', '    uint256 start;\n', '    uint256 cliff;\n', '    uint256 vestingPercentage;\n', '    uint256 initialTokens;\n', '    if(isFounder) {\n', '      start = now;\n', '      cliff = start + 12*30 days; //12 months\n', '      vestingPercentage = 20; //20%\n', '      founders.push(assignee);\n', '    }\n', '    else {\n', '      // for advisors\n', '      // transfer 10% of the tokens at start\n', '      initialTokens = value.mul(10).div(100);\n', '      transferTokens(assignee, initialTokens);\n', '      start = now;\n', '      cliff = start + 6*30 days;  //6 months\n', '      vestingPercentage = 15; //15% for each installments\n', '      advisors.push(assignee);\n', '    }\n', '\n', '    uint256 end = now + 3 * 1 years; //3 years\n', '    uint256 installmentLength = 6 * 30 days; // 6 month installments\n', '    bool revokable = true;\n', '    transferTokens(trustee, value.sub(initialTokens));\n', '    trustee.grant(assignee, value, start, cliff, end, installmentLength, vestingPercentage, initialTokens, revokable);\n', '  }\n', '\n', '  // called by the owner to close the crowdsale\n', '  function finalize() public onlyWhitelisted inStage(Stage.Success) {\n', '    require(!finalized);\n', "    //trustee's ownership is transfered from the crowdsale to owner of the contract\n", '    trustee.transferOwnership(msg.sender);\n', '    //enable token transfer\n', '    token.enableTransfers(true);\n', '    //generate the unsold tokens to the reserve\n', '    uint256 unsold = maxTokens.sub(token.totalSupply());\n', '    transferTokens(reserveWallet, unsold);\n', '\n', "    // change the token's controller to a zero Address so that it cannot\n", '    // generate or destroy tokens\n', '    token.changeController(0x0);\n', '    finalized = true;\n', '  }\n', '\n', '  //start the public sale manually after the presale is over, duration is in days\n', '  function startPublicSale(uint _startTime, uint _duration) public onlyWhitelisted inStage(Stage.PresaleFinished) {\n', '    require(_startTime >= now);\n', '    require(_duration > 0);\n', '    startTime = _startTime;\n', '    endTime = _startTime + _duration * 1 days;\n', '    publicSaleInitialized = true;\n', '  }\n', '\n', '  // total wei raised in the presale and public sale\n', '  function totalWei() public constant returns(uint256) {\n', '    uint256 presaleWei = super.totalWei();\n', '    return presaleWei.add(weiRaised);\n', '  }\n', '\n', '  function totalPublicSaleWei() public constant returns(uint256) {\n', '    return weiRaised;\n', '  }\n', '  // total cap of the presale and public sale\n', '  function totalCap() public constant returns(uint256) {\n', '    uint256 presaleCap = super.totalCap();\n', '    return presaleCap.add(cap);\n', '  }\n', '\n', '  // Total tokens sold duing the presale and public sale.\n', '  // Total tokens has to divided by 10^18\n', '  function totalTokens() public constant returns(uint256) {\n', '    return tokensSold;\n', '  }\n', '\n', '  // MAIN BUYING Function\n', '  function buyTokens(address purchaser, uint256 value) internal  whenNotPaused returns(uint256) {\n', '    require(value > 0);\n', '    Stage stage = getStage();\n', '    require(stage == Stage.Presale || stage == Stage.PublicSale);\n', '\n', '    //the purchase amount cannot be more than the whitelisted cap\n', '    uint256 purchaseAmount = Math.min256(value, investorCaps[purchaser].sub(contributions[purchaser]));\n', '    require(purchaseAmount > 0);\n', '    uint256 numTokens;\n', '\n', '    //call the presale contract\n', '    if (stage == Stage.Presale) {\n', '      if (Presale.totalWei().add(purchaseAmount) > Presale.totalCap()) {\n', '        purchaseAmount = Presale.capRemaining();\n', '      }\n', '      numTokens = Presale.buyTokens(purchaser, purchaseAmount);\n', '    } else if (stage == Stage.PublicSale) {\n', '\n', '      uint totalWei = weiRaised.add(purchaseAmount);\n', '      uint8 currentTier = getTier(weiRaised); //get current tier\n', '      if (totalWei >= cap) { // will TOTAL_CAP(HARD_CAP) of the public sale be reached ?\n', '        totalWei = cap;\n', '        //purchase amount can be only be (CAP - WeiRaised)\n', '        purchaseAmount = cap.sub(weiRaised);\n', '      }\n', '\n', '      // if the totalWei( weiRaised + msg.value) fits within current cap\n', '      // number of tokens would be rate * purchaseAmount\n', '      if (totalWei <= tiers[currentTier].max) {\n', '        numTokens = purchaseAmount.mul(tiers[currentTier].rate);\n', '      } else {\n', '        //wei remaining in the current tier\n', '        uint remaining = tiers[currentTier].max.sub(weiRaised);\n', '        numTokens = remaining.mul(tiers[currentTier].rate);\n', '\n', '        //wei in the next tier\n', '        uint256 excess = totalWei.sub(tiers[currentTier].max);\n', '        //number of tokens  = wei remaining in the next tier * rate of the next tier\n', '        numTokens = numTokens.add(excess.mul(tiers[currentTier + 1].rate));\n', '      }\n', '\n', '      // update the total raised so far\n', '      weiRaised = weiRaised.add(purchaseAmount);\n', '    }\n', '\n', '    // total tokens sold in the entire sale\n', '    require(tokensSold.add(numTokens) <= publicTokensAvailable);\n', '    tokensSold = tokensSold.add(numTokens);\n', '\n', '    // forward funds to the wallet\n', '    forwardFunds(purchaser, purchaseAmount);\n', '    // transfer the tokens to the purchaser\n', '    transferTokens(purchaser, numTokens);\n', '\n', '    // return the remaining unused wei back\n', '    if (value.sub(purchaseAmount) > 0) {\n', '      msg.sender.transfer(value.sub(purchaseAmount));\n', '    }\n', '\n', '    //event\n', '    TokenPurchase(purchaser, numTokens, purchaseAmount);\n', '\n', '    return numTokens;\n', '  }\n', '\n', '\n', '\n', '  function forwardFunds(address purchaser, uint256 value) internal {\n', '    //add contribution to the purchaser\n', '    contributions[purchaser] = contributions[purchaser].add(value);\n', '    wallet.transfer(value);\n', '  }\n', '\n', '  function changeEndTime(uint _endTime) public onlyWhitelisted {\n', '    endTime = _endTime;\n', '  }\n', '\n', '  function changeFundsWallet(address _newWallet) public onlyWhitelisted {\n', '    require(_newWallet != address(0));\n', '    wallet = _newWallet;\n', '  }\n', '\n', '  function changeTokenController() onlyWhitelisted public {\n', '    token.changeController(msg.sender);\n', '  }\n', '\n', '  function changeTrusteeOwner() onlyWhitelisted public {\n', '    trustee.transferOwnership(msg.sender);\n', '  }\n', '  function changeReserveWallet(address _reserve) public onlyWhitelisted {\n', '    require(_reserve != address(0));\n', '    reserveWallet = _reserve;\n', '  }\n', '\n', '  function setWhitelistAddress(address _whitelist) public onlyWhitelisted {\n', '    require(_whitelist != address(0));\n', '    whitelistAddress = _whitelist;\n', '  }\n', '\n', '  function transferTokens(address to, uint256 value) internal {\n', '    uint totalSupply = token.totalSupply();\n', '    require(totalSupply.add(value) <= maxTokens);\n', '    token.generateTokens(to, value);\n', '  }\n', '\n', '  function sendPrivateSaleTokens(address to, uint256 value) public whenNotPaused onlyWhitelisted {\n', '    require(privateSaleTokensSold.add(value) <= privateSaleTokensAvailable);\n', '    privateSaleTokensSold = privateSaleTokensSold.add(value);\n', '    transferTokens(to, value);\n', '  }\n', '\n', '  function hasEnded() internal constant returns(bool) {\n', '    return now > endTime || weiRaised >= cap;\n', '  }\n', '\n', '  function hasStarted() internal constant returns(bool) {\n', '    return publicSaleInitialized && now >= startTime;\n', '  }\n', '\n', '  function getTier(uint256 _weiRaised) internal constant returns(uint8) {\n', '    for (uint8 i = 0; i < totalTiers; i++) {\n', '      if (_weiRaised < tiers[i].max) {\n', '        return i;\n', '      }\n', '    }\n', '    //wont reach but for safety\n', '    return totalTiers + 1;\n', '  }\n', '\n', '\n', '\n', '  function getCurrentTier() public constant returns(uint8) {\n', '    return getTier(weiRaised);\n', '  }\n', '\n', '\n', '  // functions for the mini me token\n', '  function proxyPayment(address _owner) public payable returns(bool) {\n', '    return true;\n', '  }\n', '\n', '  function onApprove(address _owner, address _spender, uint _amount) public returns(bool) {\n', '    return true;\n', '  }\n', '\n', '  function onTransfer(address _from, address _to, uint _amount) public returns(bool) {\n', '    return true;\n', '  }\n', '\n', '  function getTokenSaleTime() public constant returns(uint256, uint256) {\n', '    return (startTime, endTime);\n', '  }\n', '}']
