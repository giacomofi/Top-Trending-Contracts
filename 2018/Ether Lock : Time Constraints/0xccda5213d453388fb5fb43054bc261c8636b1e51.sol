['pragma solidity ^0.4.25;\n', '\n', '//2018.12.03\n', '\n', '/////設定管理者/////\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    constructor() public{\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyOwner{\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns(bool);\n', '}\n', '\n', '/////遊戲合約/////\n', '\n', 'contract game is owned{\n', '\n', '//初始設定\n', '    \n', '    bool public stop = false;\n', '    \n', '    address public tokenAddress_GIC = 0x340e85491c5F581360811d0cE5CC7476c72900Ba;\n', '    address public tokenAddress_Arina = 0xE6987CD613Dfda0995A95b3E6acBAbECecd41376;\n', '    \n', '    address public address_A = 0xcC22f3Bd8c684463c0Ed6659a001AA62e0a7A146;\n', '    address public address_B = 0xb0D63Fcfb2101C8a1B9b2f0Ff96A13CfEA1A2E65;\n', '\n', '    mapping (address => uint) readyTime;\n', '    uint public airdrop_GIC = 25*10**18 ;  //酷紅幣為18位小數\n', '    uint public airdrop_Arina = 500*10**8 ;  //Arina幣為6位小數\n', '    \n', '    uint public total_airdrop_GIC = 21000000*10**18; //酷紅幣發送上限為2100萬顆 (小數點18位)\n', '    uint public total_airdrop_Arina = 84000000*10**8; //Arina發送上限為8400萬顆 (小數點6位)\n', '    \n', '    uint public sent_times = 0; //發送次數(初始為零)\n', '    uint public sent_limit = total_airdrop_GIC/airdrop_GIC; //發送幣上限次數\n', '\n', '    uint public cooldown = 600;  //////冷卻時間(秒)600秒\n', '    uint24 public Probability = 1000000;  /////中獎機率1/1000000\n', '    \n', '    uint random_source = uint(keccak256(msg.sender, block.difficulty, now));\n', '    \n', '    event Play_game(address indexed from, uint8 player, uint8 comp, uint8 record);\n', '    //紀錄遊戲結果\n', '    event Random(address indexed from, uint24 random_player, uint24 random_lottery);\n', '    //記錄兩個亂數\n', '    \n', '\n', '//管理權限\n', '    \n', '\n', '    function stop_game()onlyOwner public{\n', '        stop = true ;\n', '    }\n', '    \n', '    function start_game()onlyOwner public{\n', '        stop = false ;\n', '    }\n', '\n', '    function set_address_GIC(address new_address)onlyOwner public{\n', '        tokenAddress_GIC = new_address;\n', '    }\n', '    \n', '    function set_address_Arina(address new_address)onlyOwner public{\n', '        tokenAddress_Arina = new_address;\n', '    }\n', '    \n', '    function set_address_A(address new_address)onlyOwner public{\n', '        address_A = new_address;\n', '    }\n', '    \n', '    function set_address_B(address new_address)onlyOwner public{\n', '        address_B = new_address;\n', '    }\n', '\n', '    function set_cooldown(uint new_cooldown)onlyOwner public{\n', '        cooldown = new_cooldown;\n', '    }\n', '\n', '    function withdraw_GIC(uint _amount)onlyOwner public{\n', '        require(ERC20Basic(tokenAddress_GIC).transfer(owner, _amount*10**18));\n', '    }\n', '    \n', '    function withdraw_Arina(uint _amount)onlyOwner public{\n', '        require(ERC20Basic(tokenAddress_Arina).transfer(owner, _amount*10**8));\n', '    }\n', '    \n', '    function withdraw_eth()onlyOwner public{\n', '        owner.transfer(address(this).balance);\n', '    }\n', '\n', '//來猜拳!!!\n', '    function () payable public{\n', '        if (msg.value == 0){\n', '        play_game(0);\n', '        }\n', '    }\n', '\n', '    function play_paper()public{\n', '        play_game(0);\n', '    }\n', '\n', '    function play_scissors()public{\n', '        play_game(1);\n', '    }\n', '\n', '    function play_stone()public{\n', '        play_game(2);\n', '    }\n', '\n', '    function play_game(uint8 player) internal{\n', '        require(stop == false);\n', '        \n', '        require(readyTime[msg.sender] < block.timestamp);\n', '        require(player <= 2);\n', '        \n', '        require(sent_times <= sent_limit);\n', '        //檢查遊戲次數未小於限制次數\n', '        \n', '        random_source += 1;\n', '\n', '        uint8 comp=uint8(uint(keccak256(random_source, block.difficulty, block.timestamp))%3);\n', '        uint8 result = compare(player, comp);\n', '        \n', '\n', '        if (result == 2){ //玩家贏\n', '            sent_times +=1 ;\n', '            require(ERC20Basic(tokenAddress_GIC).transfer(msg.sender, airdrop_GIC));\n', '            \n', '            (uint _player_amount,uint addressA_amount, uint addressB_amount)\n', '             = Arina_amount();\n', '             \n', '            require(ERC20Basic(tokenAddress_Arina).transfer(msg.sender, _player_amount));\n', '            require(ERC20Basic(tokenAddress_Arina).transfer(address_A , addressA_amount));\n', '            require(ERC20Basic(tokenAddress_Arina).transfer(address_B, addressB_amount));\n', '        }\n', '        \n', '        else if(result == 1){ //平手\n', '        }\n', '        \n', '        else if(result == 0){ //玩家輸\n', '            readyTime[msg.sender] = block.timestamp + cooldown;\n', '        }\n', '        \n', '        else revert();\n', '        \n', '        uint bal = ERC20Basic(tokenAddress_GIC).balanceOf(this) + ERC20Basic(tokenAddress_Arina).balanceOf(this);\n', '        \n', '        uint24 random_player = uint24(keccak256(msg.sender, now, random_source))%Probability;\n', '        uint24 random_lottery = uint24(keccak256(random_source, block.difficulty, bal))%Probability;\n', '        \n', '        emit Play_game(msg.sender, player, comp, result);\n', '        emit Random(msg.sender, random_player, random_lottery);\n', '        \n', '        //0-999999的亂數\n', '        \n', '        if (random_player == random_lottery){\n', '            uint8 _level = level_judgment(msg.sender);\n', '            uint _eth = eth_amount_judgment(_level);\n', '            if (address(this).balance >= _eth){\n', '                msg.sender.transfer(_eth);\n', '            }\n', '            else{\n', '                msg.sender.transfer(address(this).balance);\n', '            }\n', '            \n', '            //中獎的話傳送eth\n', '        }\n', '        \n', '    }\n', '\n', '//判斷用function\n', '\n', '    function compare(uint8 _player,uint _comp) pure internal returns(uint8 result){\n', '        // input     0 => 布   1 => 剪刀   2 => 石頭\n', '        // output    0 => 輸   1 => 平手   2 => 贏\n', '        uint8 _result;\n', '\n', '        if (_player==0 && _comp==2){  //布贏石頭 (玩家贏)\n', '            _result = 2;\n', '        }\n', '\n', '        else if(_player==2 && _comp==0){ //石頭輸布(玩家輸)\n', '            _result = 0;\n', '        }\n', '\n', '        else if(_player == _comp){ //平手\n', '            _result = 1;\n', '        }\n', '\n', '        else{\n', '            if (_player > _comp){ //玩家贏 (玩家贏)\n', '                _result = 2;\n', '            }\n', '            else{ //玩家輸\n', '                _result = 0;\n', '            }\n', '        }\n', '        return _result;\n', '    }\n', '\n', '\n', '    function Arina_judgment() view public returns(uint _amount){\n', '        uint Arina_totBalance = ERC20Basic(tokenAddress_Arina).balanceOf(this);\n', '        if (Arina_totBalance >= total_airdrop_Arina/2){\n', '            return airdrop_Arina;\n', '        }\n', '        else if(total_airdrop_Arina/2 > Arina_totBalance\n', '        && Arina_totBalance >= total_airdrop_Arina/4){\n', '            return airdrop_Arina/2;\n', '        }\n', '        else if(total_airdrop_Arina/4 > Arina_totBalance\n', '        && Arina_totBalance >= total_airdrop_Arina/8){\n', '            return airdrop_Arina/4;\n', '        }\n', '        else if(total_airdrop_Arina/8 > Arina_totBalance\n', '        && Arina_totBalance >= total_airdrop_Arina/16){\n', '            return airdrop_Arina/8;\n', '        }\n', '        else if(total_airdrop_Arina/16 > Arina_totBalance\n', '        && Arina_totBalance >= total_airdrop_Arina/32){\n', '            return airdrop_Arina/16;\n', '        }\n', '        else if(total_airdrop_Arina/32 > Arina_totBalance\n', '        && Arina_totBalance >= total_airdrop_Arina/64){\n', '            return airdrop_Arina/32;\n', '        }\n', '        else if(total_airdrop_Arina/64 > Arina_totBalance\n', '        && Arina_totBalance >= total_airdrop_Arina/128){\n', '            return airdrop_Arina/64;\n', '        }\n', '        else if(total_airdrop_Arina/128 > Arina_totBalance\n', '        && Arina_totBalance >= total_airdrop_Arina/256){\n', '            return airdrop_Arina/128;\n', '        }\n', '        else if(total_airdrop_Arina/256 > Arina_totBalance\n', '        && Arina_totBalance >= total_airdrop_Arina/512){\n', '            return airdrop_Arina/256;\n', '        }\n', '        else if(total_airdrop_Arina/512 > Arina_totBalance){\n', '            return airdrop_Arina/512;\n', '        }\n', '        else revert();\n', '    }\n', '    \n', '    function level_judgment(address _address) view public returns(uint8 _level){\n', '        uint GIC_balance = ERC20Basic(tokenAddress_GIC).balanceOf(_address);\n', '        if (GIC_balance <= 1000*10**18){\n', '            return 1;\n', '        }\n', '        else if(1000*10**18 < GIC_balance && GIC_balance <=10000*10**18){\n', '            return 2;\n', '        }\n', '        else if(10000*10**18 < GIC_balance && GIC_balance <=100000*10**18){\n', '            return 3;\n', '        }\n', '        else if(100000*10**18 < GIC_balance && GIC_balance <=500000*10**18){\n', '            return 4;\n', '        }\n', '        else if(500000*10**18 < GIC_balance){\n', '            return 5;\n', '        }\n', '        else revert();\n', '    }\n', '    \n', '    function eth_amount_judgment(uint8 _level) pure public returns(uint _eth){\n', '        if (_level == 1){\n', '            return 1 ether;\n', '        }\n', '        else if (_level == 2){\n', '            return 3 ether;\n', '        }\n', '        else if (_level == 3){\n', '            return 5 ether;\n', '        }\n', '        else if (_level == 4){\n', '            return 10 ether;\n', '        }\n', '        else if (_level == 5){\n', '            return 20 ether;\n', '        }\n', '        else revert();\n', '    }\n', '    \n', '    function Arina_amount_judgment(uint8 _level, uint _Arina) \n', '    pure public returns(uint _player, uint _addressA, uint _addressB){\n', '        if (_level == 1){\n', '            return (_Arina*5/10, _Arina*1/10, _Arina*4/10);\n', '        }\n', '        else if (_level == 2){\n', '            return (_Arina*6/10, _Arina*1/10, _Arina*3/10);\n', '        }\n', '        else if (_level == 3){\n', '            return (_Arina*7/10, _Arina*1/10, _Arina*2/10);\n', '        }\n', '        else if (_level == 4){\n', '            return (_Arina*8/10, _Arina*1/10, _Arina*1/10);\n', '        }\n', '        else if (_level == 5){\n', '            return (_Arina*9/10, _Arina*1/10, 0);\n', '        }\n', '        else revert();\n', '    }\n', '    \n', '    function Arina_amount() view public returns(uint _player, uint _addressA, uint _addressB){\n', '        uint8 _level = level_judgment(msg.sender);\n', '        uint _amount = Arina_judgment();\n', '        return Arina_amount_judgment(_level, _amount);\n', '    }\n', '    \n', '    function Arina_balance() view public returns(uint _balance){\n', '        return ERC20Basic(tokenAddress_Arina).balanceOf(this);\n', '    }\n', '\n', '\n', '//查詢\n', '    \n', '    function view_readyTime(address _address) view public returns(uint _readyTime){\n', '        if (block.timestamp >= readyTime[_address]){\n', '            return 0 ;\n', '        }\n', '        else{\n', '            return readyTime[_address] - block.timestamp ;\n', '        }\n', '    }\n', '    function self_readyTime() view public returns(uint _readyTime){\n', '        return view_readyTime(msg.sender);\n', '    }\n', '\n', '}']