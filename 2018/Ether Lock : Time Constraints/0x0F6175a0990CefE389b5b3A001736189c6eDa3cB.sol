['pragma solidity ^0.4.13;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev 本可拥有合同业主地址，并提供基本的权限控制功能，简化了用户的权限执行”。\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Destructible\n', ' * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n', ' */\n', 'contract Destructible is Ownable {\n', '\n', '  function Destructible() payable { }\n', '\n', '  /**\n', '   * @dev Transfers the current balance to the owner and terminates the contract.\n', '   */\n', '  function destroy() onlyOwner {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  function destroyAndSend(address _recipient) onlyOwner {\n', '    selfdestruct(_recipient);\n', '  }\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/**\n', ' * @title PullPayment\n', ' * @dev Base contract supporting async send for pull payments. Inherit from this\n', ' * contract and use asyncSend instead of send.\n', ' */\n', 'contract PullPayment {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) public payments;\n', '  uint256 public totalPayments;\n', '\n', '  /**\n', '  * @dev Called by the payer to store the sent amount as credit to be pulled.\n', '  * @param dest The destination address of the funds.\n', '  * @param amount The amount to transfer.\n', '  */\n', '  function asyncSend(address dest, uint256 amount) internal {\n', '    payments[dest] = payments[dest].add(amount);\n', '    totalPayments = totalPayments.add(amount);\n', '  }\n', '\n', '  /**\n', '  * @dev withdraw accumulated balance, called by payee.\n', '  */\n', '  function withdrawPayments() {\n', '    address payee = msg.sender;\n', '    uint256 payment = payments[payee];\n', '\n', '    require(payment != 0);\n', '    require(this.balance >= payment);\n', '\n', '    totalPayments = totalPayments.sub(payment);\n', '    payments[payee] = 0;\n', '\n', '    assert(payee.send(payment));\n', '  }\n', '}\n', '\n', 'contract Generatable{\n', '    function generate(\n', '        address token,\n', '        address contractOwner,\n', '        uint256 cycle\n', '    ) public returns(address);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '  function decimals() public view returns (uint8);  //代币单位\n', '  function totalSupply() public view returns (uint256);\n', '\n', '  function balanceOf(address _who) public view returns (uint256);\n', '\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(\n', '    ERC20 _token,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transfer(_to, _value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 _token,\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transferFrom(_from, _to, _value));\n', '  }\n', '\n', '  function safeApprove(\n', '    ERC20 _token,\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.approve(_spender, _value));\n', '  }\n', '}\n', '\n', '\n', 'contract ContractFactory is Destructible,PullPayment{\n', '    using SafeERC20 for ERC20;\n', '    uint256 public diviRate;\n', '    uint256 public developerTemplateAmountLimit;\n', '    address public platformWithdrawAccount;\n', '\n', '\n', '\tstruct userContract{\n', '\t\tuint256 templateId;\n', '\t\tuint256 orderid;\n', '\t\taddress contractAddress;\n', '\t\tuint256 incomeDistribution;\n', '\t\tuint256 creattime;\n', '\t\tuint256 endtime;\n', '\t}\n', '\n', '\tstruct contractTemplate{\n', '\t\tstring templateName;\n', '\t\taddress contractGeneratorAddress;\n', '\t\tstring abiStr;\n', '\t\tuint256 startTime;\n', '\t\tuint256 endTime;\n', '\t\tuint256 startUp;\n', '\t\tuint256 profit;\n', '\t\tuint256 quota;\n', '\t\tuint256 cycle;\n', '\t\taddress token;\n', '\t}\n', '\n', '    mapping(address => userContract[]) public userContractsMap;\n', '    mapping(uint256 => contractTemplate) public contractTemplateAddresses;\n', '    mapping(uint256 => uint256) public skipMap;\n', '\n', '    event ContractCreated(address indexed creator,uint256 templateId,uint256 orderid,address contractAddress);\n', '    event ContractTemplatePublished(uint256 indexed templateId,address  creator,string templateName,address contractGeneratorAddress);\n', '    event Log(address data);\n', '    event yeLog(uint256 balanceof);\n', '    function ContractFactory(){\n', '        //0~10\n', '        diviRate=5;\n', '        platformWithdrawAccount=0xc645eadc9188cb0bad4e603f78ff171dabc1b18b;\n', '        developerTemplateAmountLimit=500000000000000000;\n', '    }\n', '\n', '    function generateContract(uint256 templateId,uint256 orderid) public returns(address){\n', '\n', '        //根据支付金额找到相应模板\n', '        contractTemplate storage ct = contractTemplateAddresses[templateId];\n', '        if(ct.contractGeneratorAddress!=0x0){\n', '            address contractTemplateAddress = ct.contractGeneratorAddress;\n', '            string templateName = ct.templateName;\n', '            require(block.timestamp >= ct.startTime);\n', '            require(block.timestamp <= ct.endTime);\n', '            //找到相应生成器并生产目标合约\n', '            Generatable generator = Generatable(contractTemplateAddress);\n', '            address target = generator.generate(ct.token,msg.sender,ct.cycle);\n', '            //记录用户合约\n', '            userContract[] storage userContracts = userContractsMap[msg.sender];\n', '            userContracts.push(userContract(templateId,orderid,target,1,now,now.add(uint256(1 days))));\n', '            ContractCreated(msg.sender,templateId,orderid,target);\n', '            return target;\n', '        }else{\n', '            revert();\n', '        }\n', '    }\n', '\n', '    function returnOfIncome(address user,uint256 _index) public{\n', '        require(msg.sender == user);\n', '        userContract[] storage ucs = userContractsMap[user];\n', '        if(ucs[_index].contractAddress!=0x0 && ucs[_index].incomeDistribution == 1){\n', '            contractTemplate storage ct = contractTemplateAddresses[ucs[_index].templateId];\n', '            if(ct.contractGeneratorAddress!=0x0){\n', '                //如果大于激活时间1天将不能分红\n', '                if(now > ucs[_index].creattime.add(uint256(1 days))){\n', '                     revert();\n', '                }\n', '\n', '                ERC20 token = ERC20(ct.token);\n', '                uint256 balanceof = token.balanceOf(ucs[_index].contractAddress);\n', '\n', '               uint8 decimals = token.decimals();\n', '                //需要大于起投价\n', '                if(balanceof < ct.startUp) revert();\n', '                //大于限额的按限额上线计算收益\n', '                uint256 investment = 0;\n', '                if(balanceof > ct.quota.mul(10**decimals)){\n', '                    investment = ct.quota.mul(10**decimals);\n', '                } else {\n', '                    investment = balanceof;\n', '                }\n', '\n', '                //需要转给子合约的收益\n', '                uint256 income = ct.profit.mul(ct.cycle).mul(investment).div(36000);\n', '\n', '\n', '                if(!token.transfer(ucs[_index].contractAddress,income)){\n', '        \t\t\trevert();\n', '        \t\t} else {\n', '        \t\t    ucs[_index].incomeDistribution = 2;\n', '        \t\t}\n', '            }else{\n', '                revert();\n', '            }\n', '        }else{\n', '            revert();\n', '        }\n', '    }\n', '\n', '    /**\n', '    *生成器实现Generatable接口,并且合约实现了ownerable接口，都可以通过此函数上传（TODO：如何校验？）\n', '    * @param templateId   模版Id\n', '    * @param _templateName   模版名称\n', '    * @param _contractGeneratorAddress   模版名称模版名称莫\n', '    * @param _abiStr   abi接口\n', '    * @param _startTime  开始时间\n', '    * @param _endTime   结束时间\n', '    * @param _profit  收益\n', '    * @param _startUp 起投\n', '    * @param _quota   限额\n', '    * @param _cycle   周期\n', '    * @param _token   代币合约\n', '    */\n', '    function publishContractTemplate(\n', '        uint256 templateId,\n', '        string _templateName,\n', '        address _contractGeneratorAddress,\n', '        string _abiStr,\n', '        uint256 _startTime,\n', '        uint256 _endTime,\n', '        uint256 _profit,\n', '        uint256 _startUp,\n', '        uint256 _quota,\n', '        uint256 _cycle,\n', '        address _token\n', '    )\n', '        public\n', '    {\n', '         //非owner，不允许发布模板\n', '         if(msg.sender!=owner){\n', '            revert();\n', '         }\n', '\n', '         contractTemplate storage ct = contractTemplateAddresses[templateId];\n', '         if(ct.contractGeneratorAddress!=0x0){\n', '            revert();\n', '         }else{\n', '\n', '            ct.templateName = _templateName;\n', '            ct.contractGeneratorAddress = _contractGeneratorAddress;\n', '            ct.abiStr = _abiStr;\n', '            ct.startTime = _startTime;\n', '            ct.endTime = _endTime;\n', '            ct.startUp = _startUp;\n', '            ct.profit = _profit;\n', '            ct.quota = _quota;\n', '            ct.cycle = _cycle;\n', '            ct.token = _token;\n', '            ContractTemplatePublished(templateId,msg.sender,_templateName,_contractGeneratorAddress);\n', '         }\n', '    }\n', '\n', '    function queryPublishedContractTemplate(\n', '        uint256 templateId\n', '    )\n', '        public\n', '        constant\n', '    returns(\n', '        string,\n', '        address,\n', '        string,\n', '        uint256,\n', '        uint256,\n', '        uint256,\n', '        uint256,\n', '        uint256,\n', '        uint256,\n', '        address\n', '    ) {\n', '        contractTemplate storage ct = contractTemplateAddresses[templateId];\n', '        if(ct.contractGeneratorAddress!=0x0){\n', '            return (\n', '                ct.templateName,\n', '                ct.contractGeneratorAddress,\n', '                ct.abiStr,\n', '                ct.startTime,\n', '                ct.endTime,\n', '                ct.profit,\n', '                ct.startUp,\n', '                ct.quota,\n', '                ct.cycle,\n', '                ct.token\n', '            );\n', '        }else{\n', '            return (&#39;&#39;,0x0,&#39;&#39;,0,0,0,0,0,0,0x0);\n', '        }\n', '    }\n', '\n', '\n', '    function queryUserContract(address user,uint256 _index) public constant returns(\n', '        uint256,\n', '        uint256,\n', '        address,\n', '        uint256,\n', '        uint256,\n', '        uint256\n', '    ){\n', '        require(msg.sender == user);\n', '        userContract[] storage ucs = userContractsMap[user];\n', '        contractTemplate storage ct = contractTemplateAddresses[ucs[_index].templateId];\n', '        ERC20 tokens = ERC20(ct.token);\n', '        uint256 balanceofs = tokens.balanceOf(ucs[_index].contractAddress);\n', '        return (\n', '            ucs[_index].templateId,\n', '            ucs[_index].orderid,\n', '            ucs[_index].contractAddress,\n', '            ucs[_index].incomeDistribution,\n', '            ucs[_index].endtime,\n', '            balanceofs\n', '        );\n', '    }\n', '\n', '    function queryUserContractCount(address user) public constant returns (uint256){\n', '        require(msg.sender == user);\n', '        userContract[] storage ucs = userContractsMap[user];\n', '        return ucs.length;\n', '    }\n', '\n', '    function changeDiviRate(uint256 _diviRate) external onlyOwner(){\n', '        diviRate=_diviRate;\n', '    }\n', '\n', '    function changePlatformWithdrawAccount(address _platformWithdrawAccount) external onlyOwner(){\n', '        platformWithdrawAccount=_platformWithdrawAccount;\n', '    }\n', '\n', '    function changeDeveloperTemplateAmountLimit(uint256 _developerTemplateAmountLimit) external onlyOwner(){\n', '        developerTemplateAmountLimit=_developerTemplateAmountLimit;\n', '    }\n', '    function addSkipPrice(uint256 price) external onlyOwner(){\n', '        skipMap[price]=1;\n', '    }\n', '\n', '    function removeSkipPrice(uint256 price) external onlyOwner(){\n', '        skipMap[price]=0;\n', '    }\n', '}']