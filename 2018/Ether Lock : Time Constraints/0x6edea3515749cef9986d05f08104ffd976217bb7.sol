['pragma solidity ^0.4.25;\n', '\n', '/**\n', '\n', '  EN:\n', '  Multiplier contract: returns 110-120% of each investment!\n', '\n', '  Automatic payouts!\n', '  No bugs, no backdoors, NO OWNER - fully automatic!\n', '  Made and checked by professionals!\n', '\n', '  1. Send any sum to smart contract address\n', '     - sum from 0.01 ETH\n', '     - min 280000 gas limit\n', '     - you are added to a queue\n', '  2. Wait a little bit\n', '  3. ...\n', '  4. PROFIT! You have got 110-120%\n', '\n', '  How is that?\n', '  1. The first investor in the queue (you will become the\n', '     first in some time) receives next investments until\n', '     it become 110-120% of his initial investment.\n', '  2. You will receive payments in several parts or all at once\n', '  3. Once you receive 110-120% of your initial investment you are\n', '     removed from the queue.\n', '  4. You can make only one active deposit\n', '  5. The balance of this contract should normally be 0 because\n', '     all the money are immediately go to payouts\n', '\n', '\n', '     So the last pays to the first (or to several first ones\n', '     if the deposit big enough) and the investors paid 110-120% are removed from the queue\n', '\n', '                new investor --|               brand new investor --|\n', '                 investor5     |                 new investor       |\n', '                 investor4     |     =======>      investor5        |\n', '                 investor3     |                   investor4        |\n', '    (part. paid) investor2    <|                   investor3        |\n', '    (fully paid) investor1   <-|                   investor2   <----|  (pay until 110-120%)\n', '\n', '    ==> Limits: <==\n', '\n', '    Total invested: up to 20ETH\n', '    Multiplier: 120%\n', '    Maximum deposit: 1ETH\n', '\n', '    Total invested: from 20 to 50ETH\n', '    Multiplier: 117%\n', '    Maximum deposit: 1.2ETH\n', '\n', '    Total invested: from 50 to 100ETH\n', '    Multiplier: 115%\n', '    Maximum deposit: 1.4ETH\n', '\n', '    Total invested: from 100 to 200ETH\n', '    Multiplier: 113%\n', '    Maximum deposit: 1.7ETH\n', '\n', '    Total invested: from 200ETH\n', '    Multiplier: 110%\n', '    Maximum deposit: 2ETH\n', '\n', '*/\n', '\n', '\n', '/**\n', '\n', '  RU:\n', '  Контракт Умножитель: возвращает 110-120% от вашего депозита!\n', '\n', '  Автоматические выплаты!\n', '  Без ошибок, дыр, автоматический - для выплат НЕ НУЖНА администрация!\n', '  Создан и проверен профессионалами!\n', '\n', '  1. Пошлите любую ненулевую сумму на адрес контракта\n', '     - сумма от 0.01 ETH\n', '     - gas limit минимум 280000\n', '     - вы встанете в очередь\n', '  2. Немного подождите\n', '  3. ...\n', '  4. PROFIT! Вам пришло 110-120% от вашего депозита.\n', '\n', '  Как это возможно?\n', '  1. Первый инвестор в очереди (вы станете первым очень скоро) получает выплаты от\n', '     новых инвесторов до тех пор, пока не получит 110-120% от своего депозита\n', '  2. Выплаты могут приходить несколькими частями или все сразу\n', '  3. Как только вы получаете 110-120% от вашего депозита, вы удаляетесь из очереди\n', '  4. У вас может быть только один активный вклад\n', '  5. Баланс этого контракта должен обычно быть в районе 0, потому что все поступления\n', '     сразу же направляются на выплаты\n', '\n', '     Таким образом, последние платят первым, и инвесторы, достигшие выплат 110-120% от депозита,\n', '     удаляются из очереди, уступая место остальным\n', '\n', '              новый инвестор --|            совсем новый инвестор --|\n', '                 инвестор5     |                новый инвестор      |\n', '                 инвестор4     |     =======>      инвестор5        |\n', '                 инвестор3     |                   инвестор4        |\n', ' (част. выплата) инвестор2    <|                   инвестор3        |\n', '(полная выплата) инвестор1   <-|                   инвестор2   <----|  (доплата до 110-120%)\n', '\n', '    ==> Лимиты: <==\n', '\n', '    Всего инвестировано: до 20ETH\n', '    Профит: 120%\n', '    Максимальный вклад: 1ETH\n', '\n', '    Всего инвестировано: от 20 до 50ETH\n', '    Профит: 117%\n', '    Максимальный вклад: 1.2ETH\n', '\n', '    Всего инвестировано: от 50 до 100ETH\n', '    Профит: 115%\n', '    Максимальный вклад: 1.4ETH\n', '\n', '    Всего инвестировано: от 100 до 200ETH\n', '    Профит: 113%\n', '    Максимальный вклад: 1.7ETH\n', '\n', '    Всего инвестировано: более 200ETH\n', '    Профит: 110%\n', '    Максимальный вклад: 2ETH\n', '\n', '*/\n', 'contract BestMultiplierV3 {\n', '\n', '    //The deposit structure holds all the info about the deposit made\n', '    struct Deposit {\n', '        address depositor; // The depositor address\n', '        uint deposit;   // The deposit amount\n', '        uint payout; // Amount already paid\n', '    }\n', '\n', '    Deposit[] public queue;  // The queue\n', '    mapping (address => uint) public depositNumber; // investor deposit index\n', '    uint public currentReceiverIndex; // The index of the depositor in the queue\n', '    uint public totalInvested; // Total invested amount\n', '\n', '    address public support = msg.sender;\n', '    uint public amountForSupport;\n', '\n', '    //This function receives all the deposits\n', '    //stores them and make immediate payouts\n', '    function () public payable {\n', '        require(block.number >= 6611804);\n', '\n', '        if(msg.value > 0){\n', '\n', '            require(gasleft() >= 250000); // We need gas to process queue\n', '            require(msg.value >= 0.01 ether && msg.value <= calcMaxDeposit()); // Too small and too big deposits are not accepted\n', '            require(depositNumber[msg.sender] == 0); // Investor should not already be in the queue\n', '\n', '            // Add the investor into the queue\n', '            queue.push( Deposit(msg.sender, msg.value, 0) );\n', '            depositNumber[msg.sender] = queue.length;\n', '\n', '            totalInvested += msg.value;\n', '\n', '            // In total, no more than 10 ETH can be sent to support the project\n', '            if (amountForSupport < 10 ether) {\n', '                uint fee = msg.value / 5;\n', '                amountForSupport += fee;\n', '                support.transfer(fee);\n', '            }\n', '\n', '            // Pay to first investors in line\n', '            pay();\n', '\n', '        }\n', '    }\n', '\n', '    // Used to pay to current investors\n', '    // Each new transaction processes 1 - 4+ investors in the head of queue\n', '    // depending on balance and gas left\n', '    function pay() internal {\n', '\n', '        uint money = address(this).balance;\n', '        uint multiplier = calcMultiplier();\n', '\n', '        // We will do cycle on the queue\n', '        for (uint i = 0; i < queue.length; i++){\n', '\n', '            uint idx = currentReceiverIndex + i;  //get the index of the currently first investor\n', '\n', '            Deposit storage dep = queue[idx]; // get the info of the first investor\n', '\n', '            uint totalPayout = dep.deposit * multiplier / 100;\n', '            uint leftPayout;\n', '\n', '            if (totalPayout > dep.payout) {\n', '                leftPayout = totalPayout - dep.payout;\n', '            }\n', '\n', '            if (money >= leftPayout) { //If we have enough money on the contract to fully pay to investor\n', '\n', '                if (leftPayout > 0) {\n', '                    dep.depositor.send(leftPayout); // Send money to him\n', '                    money -= leftPayout;\n', '                }\n', '\n', '                // this investor is fully paid, so remove him\n', '                depositNumber[dep.depositor] = 0;\n', '                delete queue[idx];\n', '\n', '            } else{\n', '\n', "                // Here we don't have enough money so partially pay to investor\n", '                dep.depositor.send(money); // Send to him everything we have\n', '                dep.payout += money;       // Update the payout amount\n', '                break;                     // Exit cycle\n', '\n', '            }\n', '\n', '            if (gasleft() <= 55000) {         // Check the gas left. If it is low, exit the cycle\n', '                break;                       // The next investor will process the line further\n', '            }\n', '        }\n', '\n', '        currentReceiverIndex += i; //Update the index of the current first investor\n', '    }\n', '\n', '    // Get current queue size\n', '    function getQueueLength() public view returns (uint) {\n', '        return queue.length - currentReceiverIndex;\n', '    }\n', '\n', '    // Get max deposit for your investment\n', '    function calcMaxDeposit() public view returns (uint) {\n', '\n', '        if (totalInvested <= 20 ether) {\n', '            return 1 ether;\n', '        } else if (totalInvested <= 50 ether) {\n', '            return 1.2 ether;\n', '        } else if (totalInvested <= 100 ether) {\n', '            return 1.4 ether;\n', '        } else if (totalInvested <= 200 ether) {\n', '            return 1.7 ether;\n', '        } else {\n', '            return 2 ether;\n', '        }\n', '\n', '    }\n', '\n', '    // How many percent for your deposit to be multiplied at now\n', '    function calcMultiplier() public view returns (uint) {\n', '\n', '        if (totalInvested <= 20 ether) {\n', '            return 120;\n', '        } else if (totalInvested <= 50 ether) {\n', '            return 117;\n', '        } else if (totalInvested <= 100 ether) {\n', '            return 115;\n', '        } else if (totalInvested <= 200 ether) {\n', '            return 113;\n', '        } else {\n', '            return 110;\n', '        }\n', '\n', '    }\n', '\n', '}']