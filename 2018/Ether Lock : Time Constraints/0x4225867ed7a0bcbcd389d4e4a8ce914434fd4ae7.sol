['pragma solidity ^0.4.21;\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'library SafeERC20 {\n', '    function safeTransfer(ERC20 token, address to, uint256 value) internal {\n', '        assert(token.transfer(to, value));\n', '    }\n', '    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal{\n', '        assert(token.transferFrom(from, to, value));\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract owned {\n', '    address public owner;\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract TOSLittleHodingContract is owned{\n', '    using SafeERC20 for ERC20;\n', '    using SafeMath for uint;\n', '    string public constant name = "TOSLittleHodingContract";\n', '    uint[6] public releasePercentages = [\n', '        15,  //15%\n', '        35,   //20%\n', '        50,   //15%\n', '        65,   //15%\n', '        80,   //15%\n', '        100   //20%\n', '    ];\n', '\n', '    uint256 public constant HOLDING_START               = 1533916800;  //2018/8/11 0:0:0\n', '    uint256 public constant RELEASE_START               = 1541260800; //2018/11/4 0:0:0\n', '    uint256 public constant RELEASE_INTERVAL            = 30 days; // 30 days\n', '    uint256 public RELEASE_END                          = RELEASE_START.add(RELEASE_INTERVAL.mul(5));\n', '    ERC20 public tosToken = ERC20(0xFb5a551374B656C6e39787B1D3A03fEAb7f3a98E);\n', '    \n', '    mapping (address => uint256) public lockBalanceOf; /// reward + principal\n', '    mapping (address => uint256) public principalsRecords;\n', '    mapping (address => uint256) public rewards;\n', '    mapping (address => uint256) public released;\n', '\n', '    uint256 public totalLockPrincipal = 0; \n', '    uint256 public totalLockAmount = 0;\n', '\n', '    bool public isReward = false;\n', '\n', '    function TOSLittleHodingContract() public {}\n', '    function lock(uint256 lockAmount) public {\n', '\n', '        require(lockAmount > 1 * 10 ** 18);\n', '        require(now <= HOLDING_START); \n', '\n', '        uint256 reward = lockAmount.mul(20).div(100);\n', '\n', '        require(reward <= (tosToken.balanceOf(this).sub(totalLockAmount)));\n', '        tosToken.safeTransferFrom(msg.sender, this, lockAmount);\n', '\n', '        lockBalanceOf[msg.sender] = lockBalanceOf[msg.sender].add(lockAmount).add(reward);\n', '        principalsRecords[msg.sender] = principalsRecords[msg.sender].add(lockAmount);\n', '        rewards[msg.sender] = rewards[msg.sender].add(reward);\n', '        totalLockPrincipal = totalLockPrincipal.add(lockAmount);\n', '        totalLockAmount = totalLockAmount.add(lockAmount).add(reward);\n', '\n', '        if (totalLockPrincipal >= 5000000 * 10 ** 18) { //10,000,000\n', '            isReward = true;\n', '        }\n', '    }\n', '\n', '    function release() public {\n', '\n', '        if (isReward) {\n', '            _releaseWithReward();\n', '        }\n', '        else {\n', '            _sendBack();\n', '        }\n', '    }\n', '\n', '    function _sendBack() internal {\n', '        require(now > HOLDING_START.add(5 minutes));\n', '        require(principalsRecords[msg.sender] > 0);\n', '        require(lockBalanceOf[msg.sender] > 0);\n', '\n', '        tosToken.safeTransfer(msg.sender, principalsRecords[msg.sender]);\n', '        lockBalanceOf[msg.sender] = 0;\n', '        totalLockPrincipal = totalLockPrincipal.sub(principalsRecords[msg.sender]); \n', '    }\n', '\n', '    function _releaseWithReward() internal {\n', '\n', '        uint256 num = now.sub(RELEASE_START).div(RELEASE_INTERVAL);\n', '\n', '        uint256 releaseAmount = 0;\n', '        if (num >= releasePercentages.length.sub(1)) {\n', '            releaseAmount = lockBalanceOf[msg.sender];\n', '            released[msg.sender] = 100;\n', '        }\n', '        else {\n', '            releaseAmount = principalsRecords[msg.sender].add(rewards[msg.sender]).mul(releasePercentages[num].sub(released[msg.sender])).div(100);\n', '            released[msg.sender] = releasePercentages[num];\n', '        }\n', '\n', '        require(releaseAmount > 0);\n', '        tosToken.safeTransfer(msg.sender, releaseAmount);\n', '        lockBalanceOf[msg.sender] = lockBalanceOf[msg.sender].sub(releaseAmount);\n', '        totalLockAmount = totalLockAmount.sub(releaseAmount);\n', '    }\n', '\n', '    function remainingReward() public onlyOwner {\n', '        require(now > HOLDING_START.sub(5 minutes)); \n', '\n', '        if (isReward) {\n', '            require(tosToken.balanceOf(this) > totalLockAmount);\n', '            tosToken.safeTransfer(owner, tosToken.balanceOf(this).sub(totalLockAmount));\n', '        }\n', '        else {\n', '            require(tosToken.balanceOf(this) > totalLockPrincipal);\n', '            tosToken.safeTransfer(owner, tosToken.balanceOf(this).sub(totalLockPrincipal));\n', '        }\n', '    }\n', '}']