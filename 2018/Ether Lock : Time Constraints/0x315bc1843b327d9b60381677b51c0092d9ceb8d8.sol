['pragma solidity 0.4.24;\n', '\n', '// Basic ICO for ERC20 tokens\n', '\n', 'interface iERC20 {\n', '    function totalSupply() external constant returns (uint256 supply);\n', '    function balanceOf(address owner) external constant returns (uint256 balance);    \n', '    function transfer(address to, uint tokens) external returns (bool success);\n', '}\n', '\n', 'contract MeerkatICO {\n', '    iERC20 token;\n', '    address owner;\n', '    address tokenCo;\n', '    uint rateMe;\n', '    \n', '    modifier ownerOnly() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '   constructor(address mainToken) public {\n', '        token = iERC20(mainToken);\n', '        tokenCo = mainToken;\n', '        owner = msg.sender;\n', '        rateMe = 0;\n', '    }\n', '\n', '    function withdrawETH() public ownerOnly {\n', '        owner.transfer(address(this).balance);\n', '    }\n', '\n', '    function setRate(uint _rateMe) public ownerOnly {\n', '        rateMe = _rateMe;\n', '    }\n', '    \n', '    function CurrentRate() public constant returns (uint rate) {\n', '        return rateMe;\n', '    }\n', '    \n', '    function TokenLinked() public constant returns (address _token, uint _amountLeft) {\n', '        return (tokenCo, (token.balanceOf(address(this)) / 10**18)) ;\n', '    }\n', '    \n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public ownerOnly returns (bool success) {\n', '        return iERC20(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '    function () public payable {\n', '        require( (msg.value >= 100000000000000000) && (rateMe != 0) );\n', '        \n', '        uint value = msg.value * rateMe;\n', '\n', '        require(value/msg.value == rateMe);\n', '        \n', '        token.transfer(msg.sender, value);\n', '        \n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '// Basic ICO for ERC20 tokens\n', '\n', 'interface iERC20 {\n', '    function totalSupply() external constant returns (uint256 supply);\n', '    function balanceOf(address owner) external constant returns (uint256 balance);    \n', '    function transfer(address to, uint tokens) external returns (bool success);\n', '}\n', '\n', 'contract MeerkatICO {\n', '    iERC20 token;\n', '    address owner;\n', '    address tokenCo;\n', '    uint rateMe;\n', '    \n', '    modifier ownerOnly() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '   constructor(address mainToken) public {\n', '        token = iERC20(mainToken);\n', '        tokenCo = mainToken;\n', '        owner = msg.sender;\n', '        rateMe = 0;\n', '    }\n', '\n', '    function withdrawETH() public ownerOnly {\n', '        owner.transfer(address(this).balance);\n', '    }\n', '\n', '    function setRate(uint _rateMe) public ownerOnly {\n', '        rateMe = _rateMe;\n', '    }\n', '    \n', '    function CurrentRate() public constant returns (uint rate) {\n', '        return rateMe;\n', '    }\n', '    \n', '    function TokenLinked() public constant returns (address _token, uint _amountLeft) {\n', '        return (tokenCo, (token.balanceOf(address(this)) / 10**18)) ;\n', '    }\n', '    \n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public ownerOnly returns (bool success) {\n', '        return iERC20(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '    function () public payable {\n', '        require( (msg.value >= 100000000000000000) && (rateMe != 0) );\n', '        \n', '        uint value = msg.value * rateMe;\n', '\n', '        require(value/msg.value == rateMe);\n', '        \n', '        token.transfer(msg.sender, value);\n', '        \n', '    }\n', '}']
