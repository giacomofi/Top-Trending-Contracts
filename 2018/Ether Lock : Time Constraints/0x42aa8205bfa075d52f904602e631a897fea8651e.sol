['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-11\n', '*/\n', '\n', 'pragma solidity ^0.4.25;\n', '\n', '\n', '\n', '/*\n', ' * Hubii Nahmii\n', ' *\n', ' * Compliant with the Hubii Nahmii specification v0.12.\n', ' *\n', ' * Copyright (C) 2017-2018 Hubii AS\n', ' */\n', '\n', '\n', '\n', '/**\n', ' * @title TransferController\n', ' * @notice A base contract to handle transfers of different currency types\n', ' */\n', 'contract TransferController {\n', '    //\n', '    // Events\n', '    // -----------------------------------------------------------------------------------------------------------------\n', '    event CurrencyTransferred(address from, address to, uint256 value,\n', '        address currencyCt, uint256 currencyId);\n', '\n', '    //\n', '    // Functions\n', '    // -----------------------------------------------------------------------------------------------------------------\n', '    function isFungible()\n', '    public\n', '    view\n', '    returns (bool);\n', '\n', '    /// @notice MUST be called with DELEGATECALL\n', '    function receive(address from, address to, uint256 value, address currencyCt, uint256 currencyId)\n', '    public;\n', '\n', '    /// @notice MUST be called with DELEGATECALL\n', '    function approve(address to, uint256 value, address currencyCt, uint256 currencyId)\n', '    public;\n', '\n', '    /// @notice MUST be called with DELEGATECALL\n', '    function dispatch(address from, address to, uint256 value, address currencyCt, uint256 currencyId)\n', '    public;\n', '\n', '    //----------------------------------------\n', '\n', '    function getReceiveSignature()\n', '    public\n', '    pure\n', '    returns (bytes4)\n', '    {\n', '        return bytes4(keccak256("receive(address,address,uint256,address,uint256)"));\n', '    }\n', '\n', '    function getApproveSignature()\n', '    public\n', '    pure\n', '    returns (bytes4)\n', '    {\n', '        return bytes4(keccak256("approve(address,uint256,address,uint256)"));\n', '    }\n', '\n', '    function getDispatchSignature()\n', '    public\n', '    pure\n', '    returns (bytes4)\n', '    {\n', '        return bytes4(keccak256("dispatch(address,address,uint256,address,uint256)"));\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/*\n', ' * Hubii Nahmii\n', ' *\n', ' * Compliant with the Hubii Nahmii specification v0.12.\n', ' *\n', ' * Copyright (C) 2017-2018 Hubii AS\n', ' */\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20TransferController\n', ' * @notice Handles transfers of ERC20 tokens\n', ' */\n', 'contract ERC20TransferController is TransferController {\n', '    //\n', '    // Functions\n', '    // -----------------------------------------------------------------------------------------------------------------\n', '    function isFungible()\n', '    public\n', '    view\n', '    returns (bool)\n', '    {\n', '        return true;\n', '    }\n', '\n', '    /// @notice MUST be called with DELEGATECALL\n', '    function receive(address from, address to, uint256 amount, address currencyCt, uint256 currencyId)\n', '    public\n', '    {\n', '        require(msg.sender != address(0));\n', '        require(amount > 0);\n', '        require(currencyId == 0);\n', '\n', '        require(IERC20(currencyCt).transferFrom(from, to, amount));\n', '\n', '        // Emit event\n', '        emit CurrencyTransferred(from, to, amount, currencyCt, currencyId);\n', '    }\n', '\n', '    /// @notice MUST be called with DELEGATECALL\n', '    function approve(address to, uint256 amount, address currencyCt, uint256 currencyId)\n', '    public\n', '    {\n', '        require(amount > 0);\n', '        require(currencyId == 0);\n', '\n', '        require(IERC20(currencyCt).approve(to, amount));\n', '    }\n', '\n', '    /// @notice MUST be called with DELEGATECALL\n', '    function dispatch(address from, address to, uint256 amount, address currencyCt, uint256 currencyId)\n', '    public\n', '    {\n', '        require(amount > 0);\n', '        require(currencyId == 0);\n', '\n', '        require(IERC20(currencyCt).approve(from, amount));\n', '        require(IERC20(currencyCt).transferFrom(from, to, amount));\n', '\n', '        // Emit event\n', '        emit CurrencyTransferred(from, to, amount, currencyCt, currencyId);\n', '    }\n', '}']