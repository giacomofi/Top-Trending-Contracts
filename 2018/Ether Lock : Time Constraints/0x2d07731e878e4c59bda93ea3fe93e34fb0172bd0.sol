['pragma solidity ^0.4.23;\n', '\n', '/// @title SecretRegistry\n', '/// @notice SecretRegistry contract for registering secrets from Raiden Network\n', '/// clients.\n', 'contract SecretRegistry {\n', '\n', '    string constant public contract_version = "0.4.0";\n', '\n', '    // keccak256(secret) => block number at which the secret was revealed\n', '    mapping(bytes32 => uint256) private secrethash_to_block;\n', '\n', '    event SecretRevealed(bytes32 indexed secrethash, bytes32 secret);\n', '\n', '    /// @notice Registers a hash time lock secret and saves the block number.\n', '    /// This allows the lock to be unlocked after the expiration block.\n', '    /// @param secret The secret used to lock the hash time lock.\n', '    /// @return true if secret was registered, false if the secret was already\n', '    /// registered.\n', '    function registerSecret(bytes32 secret) public returns (bool) {\n', '        bytes32 secrethash = keccak256(abi.encodePacked(secret));\n', '        if (secret == bytes32(0x0) || secrethash_to_block[secrethash] > 0) {\n', '            return false;\n', '        }\n', '        secrethash_to_block[secrethash] = block.number;\n', '        emit SecretRevealed(secrethash, secret);\n', '        return true;\n', '    }\n', '\n', '    /// @notice Registers multiple hash time lock secrets and saves the block\n', '    /// number.\n', '    /// @param secrets The array of secrets to be registered.\n', '    /// @return true if all secrets could be registered, false otherwise.\n', '    function registerSecretBatch(bytes32[] secrets) public returns (bool) {\n', '        bool completeSuccess = true;\n', '        for(uint i = 0; i < secrets.length; i++) {\n', '            if(!registerSecret(secrets[i])) {\n', '                completeSuccess = false;\n', '            }\n', '        }\n', '        return completeSuccess;\n', '    }\n', '\n', '    /// @notice Get the stored block number at which the secret was revealed.\n', '    /// @param secrethash The hash of the registered secret `keccak256(secret)`.\n', '    /// @return The block number at which the secret was revealed.\n', '    function getSecretRevealBlockHeight(bytes32 secrethash) public view returns (uint256) {\n', '        return secrethash_to_block[secrethash];\n', '    }\n', '}\n']