['pragma solidity ^0.4.13;\n', '\n', 'contract BtzReceiver {\n', '    using SafeMath for *;\n', '\n', '    // BTZReceiver state variables\n', '    BtzToken BTZToken;\n', '    address public tokenAddress = 0x0;\n', '    address public owner;\n', '    uint numUsers;\n', '\n', '    // Struct to store user info\n', '    struct UserInfo {\n', '        uint totalDepositAmount;\n', '        uint totalDepositCount;\n', '        uint lastDepositAmount;\n', '        uint lastDepositTime;\n', '    }\n', '\n', '    event DepositReceived(uint indexed _who, uint _value, uint _timestamp);\n', '    event Withdrawal(address indexed _withdrawalAddress, uint _value, uint _timestamp);\n', '\n', '    // mapping of user info indexed by the user ID\n', '    mapping (uint => UserInfo) userInfo;\n', '\n', '    constructor() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function setOwner(address _addr) public onlyOwner {\n', '        owner = _addr;\n', '    }\n', '\n', '    /*\n', '    * @dev Gives admin the ability to update the address of BTZ223\n', '    *\n', '    * @param _tokenAddress The new address of BTZ223\n', '    **/\n', '    function setTokenContractAddress(address _tokenAddress) public onlyOwner {\n', '        tokenAddress = _tokenAddress;\n', '        BTZToken = BtzToken(_tokenAddress);\n', '    }\n', '\n', '    /*\n', '    * @dev Returns the information of a user\n', '    *\n', '    * @param _uid The id of the user whose info to return\n', '    **/\n', '    function userLookup(uint _uid) public view returns (uint, uint, uint, uint){\n', '        return (userInfo[_uid].totalDepositAmount, userInfo[_uid].totalDepositCount, userInfo[_uid].lastDepositAmount, userInfo[_uid].lastDepositTime);\n', '    }\n', '\n', '    /*\n', '    * @dev The function BTZ223 uses to update user info in this contract\n', '    *\n', '    * @param _id The users Bunz Application User ID\n', '    * @param _value The number of tokens to deposit\n', '    **/\n', '    function receiveDeposit(uint _id, uint _value) public {\n', '        require(msg.sender == tokenAddress);\n', '        userInfo[_id].totalDepositAmount = userInfo[_id].totalDepositAmount.add(_value);\n', '        userInfo[_id].totalDepositCount = userInfo[_id].totalDepositCount.add(1);\n', '        userInfo[_id].lastDepositAmount = _value;\n', '        userInfo[_id].lastDepositTime = now;\n', '        emit DepositReceived(_id, _value, now);\n', '    }\n', '\n', '    /*\n', '    * @dev The withdrawal function for admin\n', '    *\n', '    * @param _withdrawalAddr The admins address to withdraw the BTZ223 tokens to\n', '    **/\n', '    function withdrawTokens(address _withdrawalAddr) public onlyOwner{\n', '        uint tokensToWithdraw = BTZToken.balanceOf(this);\n', '        BTZToken.transfer(_withdrawalAddr, tokensToWithdraw);\n', '        emit Withdrawal(_withdrawalAddr, tokensToWithdraw, now);\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '\n', '  function transfer(address to, uint value) returns (bool ok);\n', '  function transferFrom(address from, address to, uint value) returns (bool ok);\n', '  function approve(address spender, uint value) returns (bool ok);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract StandardToken is ERC20 {\n', '  using SafeMath for *;\n', '\n', '  mapping(address => uint) balances;\n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '  function transfer(address _to, uint _value) public returns (bool success) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) public constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint _value) public returns (bool success) {\n', '    require(_value <= balances[msg.sender]);\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', 'contract ERC223 is ERC20 {\n', '  function transfer(address to, uint value, bytes data) returns (bool ok);\n', '  function transferFrom(address from, address to, uint value, bytes data) returns (bool ok);\n', '}\n', '\n', 'contract Standard223Token is ERC223, StandardToken {\n', '  //function that is called when a user or another contract wants to transfer funds\n', '  function transfer(address _to, uint _value, bytes _data) returns (bool success) {\n', '    //filtering if the target is a contract with bytecode inside it\n', '    if (!super.transfer(_to, _value)) throw; // do a normal token transfer\n', '    if (isContract(_to)) return contractFallback(msg.sender, _to, _value, _data);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value, bytes _data) returns (bool success) {\n', '    if (!super.transferFrom(_from, _to, _value)) revert(); // do a normal token transfer\n', '    if (isContract(_to)) return contractFallback(_from, _to, _value, _data);\n', '    return true;\n', '  }\n', '\n', '  function transfer(address _to, uint _value) returns (bool success) {\n', '    return transfer(_to, _value, new bytes(0));\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\n', '    return transferFrom(_from, _to, _value, new bytes(0));\n', '  }\n', '\n', '  //function that is called when transaction target is a contract\n', '  function contractFallback(address _origin, address _to, uint _value, bytes _data) private returns (bool success) {\n', '    ERC223Receiver reciever = ERC223Receiver(_to);\n', '    return reciever.tokenFallback(msg.sender, _origin, _value, _data);\n', '  }\n', '\n', '  //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '  function isContract(address _addr) private returns (bool is_contract) {\n', '    // retrieve the size of the code on target address, this needs assembly\n', '    uint length;\n', '    assembly { length := extcodesize(_addr) }\n', '    return length > 0;\n', '  }\n', '}\n', '\n', 'contract BtzToken is Standard223Token {\n', '  using SafeMath for *;\n', '  address public owner;\n', '\n', '  // BTZ Token parameters\n', '  string public name = "BTZ by Bunz";\n', '  string public symbol = "BTZ";\n', '  uint8 public constant decimals = 18;\n', '  uint256 public constant decimalFactor = 10 ** uint256(decimals);\n', '  uint256 public constant totalSupply = 200000000000 * decimalFactor;\n', '\n', '  // Variables for deposit functionality\n', '  bool public prebridge;\n', '  BtzReceiver receiverContract;\n', '  address public receiverContractAddress = 0x0;\n', '\n', '  event Deposit(address _to, uint _value);\n', '\n', '  /**\n', '  * @dev Constructor function for BTZ creation\n', '  */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '    balances[owner] = totalSupply;\n', '    prebridge = true;\n', '    receiverContract = BtzReceiver(receiverContractAddress);\n', '\n', '    Transfer(address(0), owner, totalSupply);\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '      require(msg.sender == owner);\n', '      _;\n', '  }\n', '\n', '  function setOwner(address _addr) public onlyOwner {\n', '      owner = _addr;\n', '  }\n', '\n', '  /**\n', '  * @dev Gives admin the ability to switch prebridge states.\n', '  *\n', '  */\n', '  function togglePrebrdige() onlyOwner {\n', '      prebridge = !prebridge;\n', '  }\n', '\n', '  /**\n', '  * @dev Gives admin the ability to update the address of reciever contract\n', '  *\n', '  * @param _newAddr The address of the new receiver contract\n', '  */\n', '  function setReceiverContractAddress(address _newAddr) onlyOwner {\n', '      receiverContractAddress = _newAddr;\n', '      receiverContract = BtzReceiver(_newAddr);\n', '  }\n', '\n', '  /**\n', '  * @dev Deposit function for users to send tokens to Bunz Application\n', '  *\n', '  * @param _value A uint representing the amount of BTZ to deposit\n', '  */\n', '  function deposit(uint _id, uint _value) public {\n', '      require(prebridge &&\n', '              balances[msg.sender] >= _value);\n', '      balances[msg.sender] = balances[msg.sender].sub(_value);\n', '      balances[receiverContractAddress] = balances[receiverContractAddress].add(_value);\n', '      emit Transfer(msg.sender, receiverContractAddress, _value);\n', '      receiverContract.receiveDeposit(_id, _value);\n', '  }\n', '}\n', '\n', 'contract ERC223Receiver {\n', '  function tokenFallback(address _sender, address _origin, uint _value, bytes _data) returns (bool ok);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']