['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '}\n', '\n', 'contract VestingToken is StandardToken {\n', '  using SafeMath for uint256;\n', '  mapping(address => uint256) public vested;\n', '  mapping(address => uint256) public released;\n', '  uint256 public totalVested;\n', '  uint256 public vestingStartTime;\n', '  uint256 public vestingStageTime = 2592000; // 30 days\n', '\n', '  function vestedTo (address _address) public view returns (uint256) {\n', '    return vested[_address];\n', '  }\n', '\n', '  function releasedTo (address _address) public view returns (uint256) {\n', '    return released[_address];\n', '  }\n', '\n', '  function getShare () internal view returns (uint8) {\n', '    uint256 elapsedTime = now.sub(vestingStartTime);\n', '    if (elapsedTime > vestingStageTime.mul(3)) return uint8(100);\n', '    if (elapsedTime > vestingStageTime.mul(2)) return uint8(75);\n', '    if (elapsedTime > vestingStageTime) return uint8(50);   \n', '    return uint8(25);\n', '  }\n', '\n', '  function release () public returns (bool) {\n', '    uint8 shareForRelease = getShare(); // in percent\n', '    uint256 tokensForRelease = vested[msg.sender].mul(shareForRelease).div(100);\n', '    tokensForRelease = tokensForRelease.sub(released[msg.sender]);\n', '    require(tokensForRelease > 0);\n', '    released[msg.sender] = released[msg.sender].add(tokensForRelease);\n', '    balances[msg.sender] = balances[msg.sender].add(tokensForRelease);\n', '    totalSupply_ = totalSupply_.add(tokensForRelease);\n', '    emit Release(msg.sender, tokensForRelease);\n', '    return true;\n', '  }\n', '  event Vest(address indexed to, uint256 value);\n', '  event Release(address indexed to, uint256 value);\n', '}\n', '\n', 'contract CrowdsaleToken is VestingToken, Ownable {\n', '  using SafeMath for uint64;\n', '  uint64 public cap = 3170000000;\n', '  uint64 public saleCap = 1866912500;\n', '  uint64 public team = 634000000;\n', '  uint64 public advisors = 317000000;\n', '  uint64 public mlDevelopers = 79250000;\n', '  uint64 public marketing = 87175000;\n', '  uint64 public reserved = 185662500;\n', '  uint64 public basePrice = 18750;\n', '  uint64 public icoPeriodTime = 604800;\n', '  uint256 public sold = 0;\n', '  uint256 public currentIcoPeriodStartDate;\n', '  uint256 public icoEndDate;\n', '  bool public preSaleComplete = false;\n', '\n', '  enum Stages {Pause, PreSale, Ico1, Ico2, Ico3, Ico4, IcoEnd}\n', '  Stages currentStage;\n', '\n', '  mapping(uint8 => uint64) public stageCap;\n', '\n', '  mapping(uint8 => uint256) public stageSupply;\n', '\n', '  constructor() public {\n', '    currentStage = Stages.Pause;\n', '    stageCap[uint8(Stages.PreSale)] = 218750000;\n', '    stageCap[uint8(Stages.Ico1)] = 115200000;\n', '    stageCap[uint8(Stages.Ico2)] = 165312500;\n', '    stageCap[uint8(Stages.Ico3)] = 169400000;\n', '    stageCap[uint8(Stages.Ico4)] = 1198250000;\n', '  }\n', '\n', '  function startPreSale () public onlyOwner returns (bool) {\n', '    require(currentStage == Stages.Pause);\n', '    require(!preSaleComplete);\n', '    currentStage = Stages.PreSale;\n', '    return true;\n', '  }\n', '\n', '  function endPreSale () public onlyOwner returns (bool) {\n', '    require(currentStage == Stages.PreSale);\n', '    currentStage = Stages.Pause;\n', '    preSaleComplete = true;\n', '    return true;\n', '  }\n', '\n', '  function startIco () public onlyOwner returns (bool) {\n', '    require(currentStage == Stages.Pause);\n', '    require(preSaleComplete);\n', '    currentStage = Stages.Ico1;\n', '    currentIcoPeriodStartDate = now;\n', '    return true;\n', '  }\n', '\n', '  function endIco () public onlyOwner returns (bool) {\n', '    if (currentStage != Stages.Ico1 && currentStage != Stages.Ico2 && currentStage != Stages.Ico3 && currentStage != Stages.Ico4) revert();\n', '    currentStage = Stages.IcoEnd;\n', '    icoEndDate = now;\n', '    vestingStartTime = now;\n', '    uint256 unsoldTokens = saleCap.sub(sold);\n', '    balances[address(this)] = unsoldTokens;\n', '    totalSupply_ = totalSupply_.add(unsoldTokens);\n', '    return true;\n', '  }\n', '\n', '  function sendUnsold (address _to, uint256 _value) public onlyOwner {\n', '    require(_value <= balances[address(this)]);\n', '    balances[address(this)] = balances[address(this)].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(address(this), _to, _value);\n', '  }\n', '\n', '  function getReserve () public onlyOwner returns (bool) {\n', '    require(reserved > 0);\n', '    balances[owner] = balances[owner].add(reserved);\n', '    totalSupply_ = totalSupply_.add(reserved);\n', '    emit Transfer(address(this), owner, reserved);\n', '    reserved = 0;\n', '    return true;   \n', '  }\n', '\n', '  function vest2team (address _address) public onlyOwner returns (bool) {\n', '    require(team > 0);\n', '    vested[_address] = vested[_address].add(team);\n', '    totalVested = totalVested.add(team);\n', '    team = 0;\n', '    emit Vest(_address, team);\n', '    return true;   \n', '  }\n', '\n', '  function vest2advisors (address _address) public onlyOwner returns (bool) {\n', '    require(advisors > 0);\n', '    vested[_address] = vested[_address].add(advisors);\n', '    totalVested = totalVested.add(advisors);\n', '    advisors = 0;\n', '    emit Vest(_address, advisors);\n', '    return true;       \n', '  }\n', '\n', '  function send2marketing (address _address) public onlyOwner returns (bool) {\n', '    require(marketing > 0);\n', '    balances[_address] = balances[_address].add(marketing);\n', '    totalSupply_ = totalSupply_.add(marketing);\n', '    emit Transfer(address(this), _address, marketing);\n', '    marketing = 0;\n', '    return true;           \n', '  }\n', '\n', '  function vest2mlDevelopers (address _address) public onlyOwner returns (bool) {\n', '    require(mlDevelopers > 0);\n', '    vested[_address] = vested[_address].add(mlDevelopers);\n', '    totalVested = totalVested.add(mlDevelopers);\n', '    mlDevelopers = 0;\n', '    emit Vest(_address, mlDevelopers);\n', '    return true;           \n', '  }\n', '\n', '  function vest2all (address _address) public onlyOwner returns (bool) {\n', '    if (team > 0) {\n', '      vested[_address] = vested[_address].add(team);\n', '      totalVested = totalVested.add(team);\n', '      team = 0;\n', '      emit Vest(_address, team);      \n', '    }\n', '    if (advisors > 0) {\n', '      vested[_address] = vested[_address].add(advisors);\n', '      totalVested = totalVested.add(advisors);\n', '      advisors = 0;\n', '      emit Vest(_address, advisors);      \n', '    }\n', '    if (mlDevelopers > 0) {\n', '      vested[_address] = vested[_address].add(mlDevelopers);\n', '      totalVested = totalVested.add(mlDevelopers);\n', '      mlDevelopers = 0;\n', '      emit Vest(_address, mlDevelopers);      \n', '    }\n', '    return true;          \n', '  }\n', '\n', '  function getBonuses () internal view returns (uint8) {\n', '    if (currentStage == Stages.PreSale) {\n', '      return 25;\n', '    }\n', '    if (currentStage == Stages.Ico1) {\n', '      return 20;\n', '    }\n', '    if (currentStage == Stages.Ico2) {\n', '      return 15;\n', '    }\n', '    if (currentStage == Stages.Ico3) {\n', '      return 10;\n', '    }\n', '    return 0;\n', '  }\n', '\n', '  function vestTo (address _to, uint256 _value) public onlyOwner returns (bool) {\n', '    require(currentStage != Stages.Pause);\n', '    require(currentStage != Stages.IcoEnd);\n', '    require(_to != address(0));\n', '    stageSupply[uint8(currentStage)] = stageSupply[uint8(currentStage)].add(_value);\n', '    require(stageSupply[uint8(currentStage)] <= stageCap[uint8(currentStage)]);\n', '    vested[_to] = vested[_to].add(_value);\n', '    sold = sold.add(_value);\n', '    totalVested = totalVested.add(_value);\n', '    emit Vest(_to, _value);\n', '    return true;\n', '  }\n', '\n', '  function getTokensAmount (uint256 _wei, address _sender) internal returns (uint256) {\n', '    require(currentStage != Stages.IcoEnd);\n', '    require(currentStage != Stages.Pause);\n', '    uint256 tokens = _wei.mul(basePrice).div(1 ether);\n', '    uint256 extraTokens = 0;\n', '    uint256 stageRemains = 0;\n', '    uint256 stagePrice = 0;\n', '    uint256 stageBonuses = 0;\n', '    uint256 spentWei = 0;\n', '    uint256 change = 0;\n', '    uint8 bonuses = 0;\n', '    if (currentStage == Stages.PreSale) {\n', '      require(_wei >= 100 finney);\n', '      bonuses = getBonuses();\n', '      extraTokens = tokens.mul(bonuses).div(100);\n', '      tokens = tokens.add(extraTokens);\n', '      stageSupply[uint8(currentStage)] = stageSupply[uint8(currentStage)].add(tokens);\n', '      require(stageSupply[uint8(currentStage)] <= stageCap[uint8(currentStage)]);\n', '      return tokens;\n', '    }\n', '    require(_wei >= 1 ether);\n', '    if (currentStage == Stages.Ico4) {\n', '      stageSupply[uint8(currentStage)] = stageSupply[uint8(currentStage)].add(tokens);\n', '      require(stageSupply[uint8(currentStage)] <= stageCap[uint8(currentStage)]);\n', '      return tokens;\n', '    } else {\n', '      if (currentIcoPeriodStartDate.add(icoPeriodTime) < now) nextStage(true);\n', '      bonuses = getBonuses();\n', '      stageRemains = stageCap[uint8(currentStage)].sub(stageSupply[uint8(currentStage)]);\n', '      extraTokens = tokens.mul(bonuses).div(100);\n', '      tokens = tokens.add(extraTokens);\n', '      if (stageRemains > tokens) {\n', '        stageSupply[uint8(currentStage)] = stageSupply[uint8(currentStage)].add(tokens);\n', '        return tokens;\n', '      } else {\n', '        stageBonuses = basePrice.mul(bonuses).div(100);\n', '        stagePrice = basePrice.add(stageBonuses);\n', '        tokens = stageRemains;\n', '        stageSupply[uint8(currentStage)] = stageCap[uint8(currentStage)];\n', '        spentWei = tokens.mul(1 ether).div(stagePrice);\n', '        change = _wei.sub(spentWei);\n', '        nextStage(false);\n', '        _sender.transfer(change);\n', '        return tokens;\n', '      }\n', '    }\n', '  }\n', '\n', '  function nextStage (bool _time) internal returns (bool) {\n', '    if (_time) {\n', '      if (currentStage == Stages.Ico1) {\n', '        if (currentIcoPeriodStartDate.add(icoPeriodTime).mul(3) < now) {\n', '          currentStage = Stages.Ico4;\n', '          currentIcoPeriodStartDate = now;\n', '          return true;\n', '        }\n', '        if (currentIcoPeriodStartDate.add(icoPeriodTime).mul(2) < now) {\n', '          currentStage = Stages.Ico3;\n', '          currentIcoPeriodStartDate = now;\n', '          return true;\n', '        }\n', '        currentStage = Stages.Ico2;\n', '        currentIcoPeriodStartDate = now;\n', '        return true;\n', '      }\n', '      if (currentStage == Stages.Ico2) {\n', '        if (currentIcoPeriodStartDate.add(icoPeriodTime).mul(2) < now) {\n', '          currentStage = Stages.Ico4;\n', '          currentIcoPeriodStartDate = now;\n', '          return true;\n', '        }\n', '        currentStage = Stages.Ico3;\n', '        currentIcoPeriodStartDate = now;\n', '        return true;\n', '      }\n', '      if (currentStage == Stages.Ico3) {\n', '        currentStage = Stages.Ico4;\n', '        currentIcoPeriodStartDate = now;\n', '        return true;\n', '      }\n', '    } else {\n', '      if (currentStage == Stages.Ico1) {\n', '        currentStage = Stages.Ico2;\n', '        currentIcoPeriodStartDate = now;\n', '        return true;      \n', '      }\n', '      if (currentStage == Stages.Ico2) {\n', '        currentStage = Stages.Ico3;\n', '        currentIcoPeriodStartDate = now;\n', '        return true;      \n', '      }\n', '      if (currentStage == Stages.Ico3) {\n', '        currentStage = Stages.Ico4;\n', '        currentIcoPeriodStartDate = now;\n', '        return true;      \n', '      }\n', '    }\n', '  }\n', '\n', '  function () public payable {\n', '    uint256 tokens = getTokensAmount(msg.value, msg.sender);\n', '    vested[msg.sender] = vested[msg.sender].add(tokens);\n', '    sold = sold.add(tokens);\n', '    totalVested = totalVested.add(tokens);\n', '    emit Vest(msg.sender, tokens);\n', '  }\n', '}\n', '\n', 'contract Multisign is Ownable {\n', '  address public address1 = address(0);\n', '  address public address2 = address(0);\n', '  address public address3 = address(0);\n', '  mapping(address => address) public withdrawAddress;\n', '\n', '  function setAddresses (address _address1, address _address2, address _address3) public onlyOwner returns (bool) {\n', '    require(address1 == address(0) && address2 == address(0) && address3 == address(0));\n', '    require(_address1 != address(0) && _address2 != address(0) && _address3 != address(0));\n', '    address1 = _address1;\n', '    address2 = _address2;\n', '    address3 = _address3;\n', '    return true;\n', '  }\n', '\n', '  function signWithdraw (address _address) public returns (bool) {\n', '    assert(msg.sender != address(0));\n', '    require (msg.sender == address1 || msg.sender == address2 || msg.sender == address3);\n', '    require (_address != address(0));\n', '    withdrawAddress[msg.sender] = _address;\n', '    if (withdrawAddress[address1] == withdrawAddress[address2] && withdrawAddress[address1] != address(0)) {\n', '      withdraw(withdrawAddress[address1]);\n', '      return true;\n', '    }\n', '    if (withdrawAddress[address1] == withdrawAddress[address3] && withdrawAddress[address1] != address(0)) {\n', '      withdraw(withdrawAddress[address1]);\n', '      return true;\n', '    }\n', '    if (withdrawAddress[address2] == withdrawAddress[address3] && withdrawAddress[address2] != address(0)) {\n', '      withdraw(withdrawAddress[address2]);\n', '      return true;\n', '    }\n', '    return false;\n', '  }\n', '\n', '  function withdraw (address _address) internal returns (bool) {\n', '    require(address(this).balance > 0);\n', '    withdrawAddress[address1] = address(0);\n', '    withdrawAddress[address2] = address(0);\n', '    withdrawAddress[address3] = address(0);\n', '    _address.transfer(address(this).balance);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract NSD is CrowdsaleToken, Multisign {\n', '  string public constant name = "NeuroSeed";\n', '  string public constant symbol = "NSD";\n', '  uint32 public constant decimals = 0;\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '}\n', '\n', 'contract VestingToken is StandardToken {\n', '  using SafeMath for uint256;\n', '  mapping(address => uint256) public vested;\n', '  mapping(address => uint256) public released;\n', '  uint256 public totalVested;\n', '  uint256 public vestingStartTime;\n', '  uint256 public vestingStageTime = 2592000; // 30 days\n', '\n', '  function vestedTo (address _address) public view returns (uint256) {\n', '    return vested[_address];\n', '  }\n', '\n', '  function releasedTo (address _address) public view returns (uint256) {\n', '    return released[_address];\n', '  }\n', '\n', '  function getShare () internal view returns (uint8) {\n', '    uint256 elapsedTime = now.sub(vestingStartTime);\n', '    if (elapsedTime > vestingStageTime.mul(3)) return uint8(100);\n', '    if (elapsedTime > vestingStageTime.mul(2)) return uint8(75);\n', '    if (elapsedTime > vestingStageTime) return uint8(50);   \n', '    return uint8(25);\n', '  }\n', '\n', '  function release () public returns (bool) {\n', '    uint8 shareForRelease = getShare(); // in percent\n', '    uint256 tokensForRelease = vested[msg.sender].mul(shareForRelease).div(100);\n', '    tokensForRelease = tokensForRelease.sub(released[msg.sender]);\n', '    require(tokensForRelease > 0);\n', '    released[msg.sender] = released[msg.sender].add(tokensForRelease);\n', '    balances[msg.sender] = balances[msg.sender].add(tokensForRelease);\n', '    totalSupply_ = totalSupply_.add(tokensForRelease);\n', '    emit Release(msg.sender, tokensForRelease);\n', '    return true;\n', '  }\n', '  event Vest(address indexed to, uint256 value);\n', '  event Release(address indexed to, uint256 value);\n', '}\n', '\n', 'contract CrowdsaleToken is VestingToken, Ownable {\n', '  using SafeMath for uint64;\n', '  uint64 public cap = 3170000000;\n', '  uint64 public saleCap = 1866912500;\n', '  uint64 public team = 634000000;\n', '  uint64 public advisors = 317000000;\n', '  uint64 public mlDevelopers = 79250000;\n', '  uint64 public marketing = 87175000;\n', '  uint64 public reserved = 185662500;\n', '  uint64 public basePrice = 18750;\n', '  uint64 public icoPeriodTime = 604800;\n', '  uint256 public sold = 0;\n', '  uint256 public currentIcoPeriodStartDate;\n', '  uint256 public icoEndDate;\n', '  bool public preSaleComplete = false;\n', '\n', '  enum Stages {Pause, PreSale, Ico1, Ico2, Ico3, Ico4, IcoEnd}\n', '  Stages currentStage;\n', '\n', '  mapping(uint8 => uint64) public stageCap;\n', '\n', '  mapping(uint8 => uint256) public stageSupply;\n', '\n', '  constructor() public {\n', '    currentStage = Stages.Pause;\n', '    stageCap[uint8(Stages.PreSale)] = 218750000;\n', '    stageCap[uint8(Stages.Ico1)] = 115200000;\n', '    stageCap[uint8(Stages.Ico2)] = 165312500;\n', '    stageCap[uint8(Stages.Ico3)] = 169400000;\n', '    stageCap[uint8(Stages.Ico4)] = 1198250000;\n', '  }\n', '\n', '  function startPreSale () public onlyOwner returns (bool) {\n', '    require(currentStage == Stages.Pause);\n', '    require(!preSaleComplete);\n', '    currentStage = Stages.PreSale;\n', '    return true;\n', '  }\n', '\n', '  function endPreSale () public onlyOwner returns (bool) {\n', '    require(currentStage == Stages.PreSale);\n', '    currentStage = Stages.Pause;\n', '    preSaleComplete = true;\n', '    return true;\n', '  }\n', '\n', '  function startIco () public onlyOwner returns (bool) {\n', '    require(currentStage == Stages.Pause);\n', '    require(preSaleComplete);\n', '    currentStage = Stages.Ico1;\n', '    currentIcoPeriodStartDate = now;\n', '    return true;\n', '  }\n', '\n', '  function endIco () public onlyOwner returns (bool) {\n', '    if (currentStage != Stages.Ico1 && currentStage != Stages.Ico2 && currentStage != Stages.Ico3 && currentStage != Stages.Ico4) revert();\n', '    currentStage = Stages.IcoEnd;\n', '    icoEndDate = now;\n', '    vestingStartTime = now;\n', '    uint256 unsoldTokens = saleCap.sub(sold);\n', '    balances[address(this)] = unsoldTokens;\n', '    totalSupply_ = totalSupply_.add(unsoldTokens);\n', '    return true;\n', '  }\n', '\n', '  function sendUnsold (address _to, uint256 _value) public onlyOwner {\n', '    require(_value <= balances[address(this)]);\n', '    balances[address(this)] = balances[address(this)].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(address(this), _to, _value);\n', '  }\n', '\n', '  function getReserve () public onlyOwner returns (bool) {\n', '    require(reserved > 0);\n', '    balances[owner] = balances[owner].add(reserved);\n', '    totalSupply_ = totalSupply_.add(reserved);\n', '    emit Transfer(address(this), owner, reserved);\n', '    reserved = 0;\n', '    return true;   \n', '  }\n', '\n', '  function vest2team (address _address) public onlyOwner returns (bool) {\n', '    require(team > 0);\n', '    vested[_address] = vested[_address].add(team);\n', '    totalVested = totalVested.add(team);\n', '    team = 0;\n', '    emit Vest(_address, team);\n', '    return true;   \n', '  }\n', '\n', '  function vest2advisors (address _address) public onlyOwner returns (bool) {\n', '    require(advisors > 0);\n', '    vested[_address] = vested[_address].add(advisors);\n', '    totalVested = totalVested.add(advisors);\n', '    advisors = 0;\n', '    emit Vest(_address, advisors);\n', '    return true;       \n', '  }\n', '\n', '  function send2marketing (address _address) public onlyOwner returns (bool) {\n', '    require(marketing > 0);\n', '    balances[_address] = balances[_address].add(marketing);\n', '    totalSupply_ = totalSupply_.add(marketing);\n', '    emit Transfer(address(this), _address, marketing);\n', '    marketing = 0;\n', '    return true;           \n', '  }\n', '\n', '  function vest2mlDevelopers (address _address) public onlyOwner returns (bool) {\n', '    require(mlDevelopers > 0);\n', '    vested[_address] = vested[_address].add(mlDevelopers);\n', '    totalVested = totalVested.add(mlDevelopers);\n', '    mlDevelopers = 0;\n', '    emit Vest(_address, mlDevelopers);\n', '    return true;           \n', '  }\n', '\n', '  function vest2all (address _address) public onlyOwner returns (bool) {\n', '    if (team > 0) {\n', '      vested[_address] = vested[_address].add(team);\n', '      totalVested = totalVested.add(team);\n', '      team = 0;\n', '      emit Vest(_address, team);      \n', '    }\n', '    if (advisors > 0) {\n', '      vested[_address] = vested[_address].add(advisors);\n', '      totalVested = totalVested.add(advisors);\n', '      advisors = 0;\n', '      emit Vest(_address, advisors);      \n', '    }\n', '    if (mlDevelopers > 0) {\n', '      vested[_address] = vested[_address].add(mlDevelopers);\n', '      totalVested = totalVested.add(mlDevelopers);\n', '      mlDevelopers = 0;\n', '      emit Vest(_address, mlDevelopers);      \n', '    }\n', '    return true;          \n', '  }\n', '\n', '  function getBonuses () internal view returns (uint8) {\n', '    if (currentStage == Stages.PreSale) {\n', '      return 25;\n', '    }\n', '    if (currentStage == Stages.Ico1) {\n', '      return 20;\n', '    }\n', '    if (currentStage == Stages.Ico2) {\n', '      return 15;\n', '    }\n', '    if (currentStage == Stages.Ico3) {\n', '      return 10;\n', '    }\n', '    return 0;\n', '  }\n', '\n', '  function vestTo (address _to, uint256 _value) public onlyOwner returns (bool) {\n', '    require(currentStage != Stages.Pause);\n', '    require(currentStage != Stages.IcoEnd);\n', '    require(_to != address(0));\n', '    stageSupply[uint8(currentStage)] = stageSupply[uint8(currentStage)].add(_value);\n', '    require(stageSupply[uint8(currentStage)] <= stageCap[uint8(currentStage)]);\n', '    vested[_to] = vested[_to].add(_value);\n', '    sold = sold.add(_value);\n', '    totalVested = totalVested.add(_value);\n', '    emit Vest(_to, _value);\n', '    return true;\n', '  }\n', '\n', '  function getTokensAmount (uint256 _wei, address _sender) internal returns (uint256) {\n', '    require(currentStage != Stages.IcoEnd);\n', '    require(currentStage != Stages.Pause);\n', '    uint256 tokens = _wei.mul(basePrice).div(1 ether);\n', '    uint256 extraTokens = 0;\n', '    uint256 stageRemains = 0;\n', '    uint256 stagePrice = 0;\n', '    uint256 stageBonuses = 0;\n', '    uint256 spentWei = 0;\n', '    uint256 change = 0;\n', '    uint8 bonuses = 0;\n', '    if (currentStage == Stages.PreSale) {\n', '      require(_wei >= 100 finney);\n', '      bonuses = getBonuses();\n', '      extraTokens = tokens.mul(bonuses).div(100);\n', '      tokens = tokens.add(extraTokens);\n', '      stageSupply[uint8(currentStage)] = stageSupply[uint8(currentStage)].add(tokens);\n', '      require(stageSupply[uint8(currentStage)] <= stageCap[uint8(currentStage)]);\n', '      return tokens;\n', '    }\n', '    require(_wei >= 1 ether);\n', '    if (currentStage == Stages.Ico4) {\n', '      stageSupply[uint8(currentStage)] = stageSupply[uint8(currentStage)].add(tokens);\n', '      require(stageSupply[uint8(currentStage)] <= stageCap[uint8(currentStage)]);\n', '      return tokens;\n', '    } else {\n', '      if (currentIcoPeriodStartDate.add(icoPeriodTime) < now) nextStage(true);\n', '      bonuses = getBonuses();\n', '      stageRemains = stageCap[uint8(currentStage)].sub(stageSupply[uint8(currentStage)]);\n', '      extraTokens = tokens.mul(bonuses).div(100);\n', '      tokens = tokens.add(extraTokens);\n', '      if (stageRemains > tokens) {\n', '        stageSupply[uint8(currentStage)] = stageSupply[uint8(currentStage)].add(tokens);\n', '        return tokens;\n', '      } else {\n', '        stageBonuses = basePrice.mul(bonuses).div(100);\n', '        stagePrice = basePrice.add(stageBonuses);\n', '        tokens = stageRemains;\n', '        stageSupply[uint8(currentStage)] = stageCap[uint8(currentStage)];\n', '        spentWei = tokens.mul(1 ether).div(stagePrice);\n', '        change = _wei.sub(spentWei);\n', '        nextStage(false);\n', '        _sender.transfer(change);\n', '        return tokens;\n', '      }\n', '    }\n', '  }\n', '\n', '  function nextStage (bool _time) internal returns (bool) {\n', '    if (_time) {\n', '      if (currentStage == Stages.Ico1) {\n', '        if (currentIcoPeriodStartDate.add(icoPeriodTime).mul(3) < now) {\n', '          currentStage = Stages.Ico4;\n', '          currentIcoPeriodStartDate = now;\n', '          return true;\n', '        }\n', '        if (currentIcoPeriodStartDate.add(icoPeriodTime).mul(2) < now) {\n', '          currentStage = Stages.Ico3;\n', '          currentIcoPeriodStartDate = now;\n', '          return true;\n', '        }\n', '        currentStage = Stages.Ico2;\n', '        currentIcoPeriodStartDate = now;\n', '        return true;\n', '      }\n', '      if (currentStage == Stages.Ico2) {\n', '        if (currentIcoPeriodStartDate.add(icoPeriodTime).mul(2) < now) {\n', '          currentStage = Stages.Ico4;\n', '          currentIcoPeriodStartDate = now;\n', '          return true;\n', '        }\n', '        currentStage = Stages.Ico3;\n', '        currentIcoPeriodStartDate = now;\n', '        return true;\n', '      }\n', '      if (currentStage == Stages.Ico3) {\n', '        currentStage = Stages.Ico4;\n', '        currentIcoPeriodStartDate = now;\n', '        return true;\n', '      }\n', '    } else {\n', '      if (currentStage == Stages.Ico1) {\n', '        currentStage = Stages.Ico2;\n', '        currentIcoPeriodStartDate = now;\n', '        return true;      \n', '      }\n', '      if (currentStage == Stages.Ico2) {\n', '        currentStage = Stages.Ico3;\n', '        currentIcoPeriodStartDate = now;\n', '        return true;      \n', '      }\n', '      if (currentStage == Stages.Ico3) {\n', '        currentStage = Stages.Ico4;\n', '        currentIcoPeriodStartDate = now;\n', '        return true;      \n', '      }\n', '    }\n', '  }\n', '\n', '  function () public payable {\n', '    uint256 tokens = getTokensAmount(msg.value, msg.sender);\n', '    vested[msg.sender] = vested[msg.sender].add(tokens);\n', '    sold = sold.add(tokens);\n', '    totalVested = totalVested.add(tokens);\n', '    emit Vest(msg.sender, tokens);\n', '  }\n', '}\n', '\n', 'contract Multisign is Ownable {\n', '  address public address1 = address(0);\n', '  address public address2 = address(0);\n', '  address public address3 = address(0);\n', '  mapping(address => address) public withdrawAddress;\n', '\n', '  function setAddresses (address _address1, address _address2, address _address3) public onlyOwner returns (bool) {\n', '    require(address1 == address(0) && address2 == address(0) && address3 == address(0));\n', '    require(_address1 != address(0) && _address2 != address(0) && _address3 != address(0));\n', '    address1 = _address1;\n', '    address2 = _address2;\n', '    address3 = _address3;\n', '    return true;\n', '  }\n', '\n', '  function signWithdraw (address _address) public returns (bool) {\n', '    assert(msg.sender != address(0));\n', '    require (msg.sender == address1 || msg.sender == address2 || msg.sender == address3);\n', '    require (_address != address(0));\n', '    withdrawAddress[msg.sender] = _address;\n', '    if (withdrawAddress[address1] == withdrawAddress[address2] && withdrawAddress[address1] != address(0)) {\n', '      withdraw(withdrawAddress[address1]);\n', '      return true;\n', '    }\n', '    if (withdrawAddress[address1] == withdrawAddress[address3] && withdrawAddress[address1] != address(0)) {\n', '      withdraw(withdrawAddress[address1]);\n', '      return true;\n', '    }\n', '    if (withdrawAddress[address2] == withdrawAddress[address3] && withdrawAddress[address2] != address(0)) {\n', '      withdraw(withdrawAddress[address2]);\n', '      return true;\n', '    }\n', '    return false;\n', '  }\n', '\n', '  function withdraw (address _address) internal returns (bool) {\n', '    require(address(this).balance > 0);\n', '    withdrawAddress[address1] = address(0);\n', '    withdrawAddress[address2] = address(0);\n', '    withdrawAddress[address3] = address(0);\n', '    _address.transfer(address(this).balance);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract NSD is CrowdsaleToken, Multisign {\n', '  string public constant name = "NeuroSeed";\n', '  string public constant symbol = "NSD";\n', '  uint32 public constant decimals = 0;\n', '}']
