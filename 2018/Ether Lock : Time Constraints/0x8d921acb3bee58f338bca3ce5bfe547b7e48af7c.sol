['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', 'contract KcashVesting is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  address public teamWallet;\n', '  address public earlyWallet;\n', '  address public institutionWallet;\n', '  \n', '  uint256 public teamTimeLock = 1000 days;\n', '  uint256 public earlyTimeLock = 5 * 30 days;\n', '  uint256 public institutionTimeLock = 50 * 30 days;\n', '  \n', '  //amount of allocation\n', '  uint256 public teamAllocation = 15 * (10 ** 7) * (10 ** 18);\n', '  uint256 public earlyAllocation = 5 * (10 ** 7) * (10 ** 18);\n', '  uint256 public institutionAllocation = 15 * (10 ** 7) * (10 ** 18);\n', '  \n', '  uint256 public totalAllocation = 35 * (10 ** 7) * (10 ** 18);\n', '  \n', '  uint256 public teamStageSetting = 34;\n', '  uint256 public earlyStageSetting = 5;\n', '  uint256 public institutionStageSetting = 50;\n', '  ERC20Basic public token;\n', '  //token start time\n', '  uint256 public start;\n', '  //lock start time\n', '  uint256 public lockStartTime; \n', '   /** Reserve allocations */\n', '    mapping(address => uint256) public allocations;\n', '    \n', '    mapping(address => uint256) public stageSettings;\n', '    \n', '    mapping(address => uint256) public timeLockDurations;\n', '\n', '    /** How many tokens each reserve wallet has claimed */\n', '    mapping(address => uint256) public releasedAmounts;\n', '    \n', '    modifier onlyReserveWallets {\n', '        require(allocations[msg.sender] > 0);\n', '        _;\n', '    }\n', '    function KcashVesting(ERC20Basic _token,\n', '                          address _teamWallet,\n', '                          address _earlyWallet,\n', '                          address _institutionWallet,\n', '                          uint256 _start,\n', '                          uint256 _lockTime)public{\n', '        require(_start > 0);\n', '        require(_lockTime > 0);\n', '        require(_start.add(_lockTime) > 0);\n', '        require(_teamWallet != address(0));\n', '        require(_earlyWallet != address(0));\n', '        require(_institutionWallet != address(0));\n', '        \n', '        token = _token;\n', '        teamWallet = _teamWallet;\n', '        earlyWallet = _earlyWallet;\n', '        institutionWallet = _institutionWallet;\n', '        start = _start;\n', '        lockStartTime = start.add(_lockTime);\n', '    }\n', '    \n', '    function allocateToken() onlyOwner public{\n', '        require(block.timestamp > lockStartTime);\n', '        //only claim  once\n', '        require(allocations[teamWallet] == 0);\n', '        require(token.balanceOf(address(this)) >= totalAllocation);\n', '        \n', '        allocations[teamWallet] = teamAllocation;\n', '        allocations[earlyWallet] = earlyAllocation;\n', '        allocations[institutionWallet] = institutionAllocation;\n', '        \n', '        stageSettings[teamWallet] = teamStageSetting;\n', '        stageSettings[earlyWallet] = earlyStageSetting;\n', '        stageSettings[institutionWallet] = institutionStageSetting;\n', '        \n', '        timeLockDurations[teamWallet] = teamTimeLock;\n', '        timeLockDurations[earlyWallet] = earlyTimeLock;\n', '        timeLockDurations[institutionWallet] = institutionTimeLock;\n', '    }\n', '    function releaseToken() onlyReserveWallets public{\n', '        uint256 totalUnlocked = unlockAmount();\n', '        require(totalUnlocked <= allocations[msg.sender]);\n', '        require(releasedAmounts[msg.sender] < totalUnlocked);\n', '        uint256 payment = totalUnlocked.sub(releasedAmounts[msg.sender]);\n', '        \n', '        releasedAmounts[msg.sender] = totalUnlocked;\n', '        require(token.transfer(msg.sender, payment));\n', '    }\n', '    function unlockAmount() public view onlyReserveWallets returns(uint256){\n', '        uint256 stage = vestStage();\n', '        uint256 totalUnlocked = stage.mul(allocations[msg.sender]).div(stageSettings[msg.sender]);\n', '        return totalUnlocked;\n', '    }\n', '    \n', '    function vestStage() public view onlyReserveWallets returns(uint256){\n', '        uint256 vestingMonths = timeLockDurations[msg.sender].div(stageSettings[msg.sender]);\n', '        uint256 stage = (block.timestamp.sub(lockStartTime)).div(vestingMonths);\n', '        \n', '        if(stage > stageSettings[msg.sender]){\n', '            stage = stageSettings[msg.sender];\n', '        }\n', '        return stage;\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', 'contract KcashVesting is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  address public teamWallet;\n', '  address public earlyWallet;\n', '  address public institutionWallet;\n', '  \n', '  uint256 public teamTimeLock = 1000 days;\n', '  uint256 public earlyTimeLock = 5 * 30 days;\n', '  uint256 public institutionTimeLock = 50 * 30 days;\n', '  \n', '  //amount of allocation\n', '  uint256 public teamAllocation = 15 * (10 ** 7) * (10 ** 18);\n', '  uint256 public earlyAllocation = 5 * (10 ** 7) * (10 ** 18);\n', '  uint256 public institutionAllocation = 15 * (10 ** 7) * (10 ** 18);\n', '  \n', '  uint256 public totalAllocation = 35 * (10 ** 7) * (10 ** 18);\n', '  \n', '  uint256 public teamStageSetting = 34;\n', '  uint256 public earlyStageSetting = 5;\n', '  uint256 public institutionStageSetting = 50;\n', '  ERC20Basic public token;\n', '  //token start time\n', '  uint256 public start;\n', '  //lock start time\n', '  uint256 public lockStartTime; \n', '   /** Reserve allocations */\n', '    mapping(address => uint256) public allocations;\n', '    \n', '    mapping(address => uint256) public stageSettings;\n', '    \n', '    mapping(address => uint256) public timeLockDurations;\n', '\n', '    /** How many tokens each reserve wallet has claimed */\n', '    mapping(address => uint256) public releasedAmounts;\n', '    \n', '    modifier onlyReserveWallets {\n', '        require(allocations[msg.sender] > 0);\n', '        _;\n', '    }\n', '    function KcashVesting(ERC20Basic _token,\n', '                          address _teamWallet,\n', '                          address _earlyWallet,\n', '                          address _institutionWallet,\n', '                          uint256 _start,\n', '                          uint256 _lockTime)public{\n', '        require(_start > 0);\n', '        require(_lockTime > 0);\n', '        require(_start.add(_lockTime) > 0);\n', '        require(_teamWallet != address(0));\n', '        require(_earlyWallet != address(0));\n', '        require(_institutionWallet != address(0));\n', '        \n', '        token = _token;\n', '        teamWallet = _teamWallet;\n', '        earlyWallet = _earlyWallet;\n', '        institutionWallet = _institutionWallet;\n', '        start = _start;\n', '        lockStartTime = start.add(_lockTime);\n', '    }\n', '    \n', '    function allocateToken() onlyOwner public{\n', '        require(block.timestamp > lockStartTime);\n', '        //only claim  once\n', '        require(allocations[teamWallet] == 0);\n', '        require(token.balanceOf(address(this)) >= totalAllocation);\n', '        \n', '        allocations[teamWallet] = teamAllocation;\n', '        allocations[earlyWallet] = earlyAllocation;\n', '        allocations[institutionWallet] = institutionAllocation;\n', '        \n', '        stageSettings[teamWallet] = teamStageSetting;\n', '        stageSettings[earlyWallet] = earlyStageSetting;\n', '        stageSettings[institutionWallet] = institutionStageSetting;\n', '        \n', '        timeLockDurations[teamWallet] = teamTimeLock;\n', '        timeLockDurations[earlyWallet] = earlyTimeLock;\n', '        timeLockDurations[institutionWallet] = institutionTimeLock;\n', '    }\n', '    function releaseToken() onlyReserveWallets public{\n', '        uint256 totalUnlocked = unlockAmount();\n', '        require(totalUnlocked <= allocations[msg.sender]);\n', '        require(releasedAmounts[msg.sender] < totalUnlocked);\n', '        uint256 payment = totalUnlocked.sub(releasedAmounts[msg.sender]);\n', '        \n', '        releasedAmounts[msg.sender] = totalUnlocked;\n', '        require(token.transfer(msg.sender, payment));\n', '    }\n', '    function unlockAmount() public view onlyReserveWallets returns(uint256){\n', '        uint256 stage = vestStage();\n', '        uint256 totalUnlocked = stage.mul(allocations[msg.sender]).div(stageSettings[msg.sender]);\n', '        return totalUnlocked;\n', '    }\n', '    \n', '    function vestStage() public view onlyReserveWallets returns(uint256){\n', '        uint256 vestingMonths = timeLockDurations[msg.sender].div(stageSettings[msg.sender]);\n', '        uint256 stage = (block.timestamp.sub(lockStartTime)).div(vestingMonths);\n', '        \n', '        if(stage > stageSettings[msg.sender]){\n', '            stage = stageSettings[msg.sender];\n', '        }\n', '        return stage;\n', '    }\n', '}']
