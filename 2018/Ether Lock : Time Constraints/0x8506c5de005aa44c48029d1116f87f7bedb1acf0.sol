['pragma solidity ^0.4.0;\n', '\n', 'contract TimeLapse {\n', '  uint256 public openingTime;\n', '  uint256 public closingTime;\n', '\n', '  uint256 public constructionTime;\n', '\n', '  modifier onlyWhileOpen {\n', '    require(now >= openingTime && now <= closingTime);\n', '    _;\n', '  }\n', '  modifier onlyAfterClosed {\n', '    require(now > closingTime);\n', '    _;\n', '  }\n', '\n', '  constructor(uint256 _openingTime, uint256 _closingTime) public {\n', '    require(_openingTime >= now);\n', '    require(_closingTime >= _openingTime);\n', '\n', '    constructionTime = now;\n', '    openingTime = _openingTime;\n', '    closingTime = _closingTime;\n', '  }\n', '\n', '  function hasClosed() public view returns (bool) {\n', '    return now > closingTime;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Erc20Wallet {\n', '  mapping (address => uint) public tokens; //mapping of token addresses to mapping of account balances (token=0 means Ether)\n', '\n', '  event DepositReceived(address from, uint256 value);\n', '  address token;\n', '\n', '  uint256 public totalDeposited;\n', '\n', '  constructor(address _token) public {\n', '    token = _token;\n', '  }\n', '\n', '  function () public payable {\n', '    revert();\n', '  }\n', '\n', '  function depositToken(uint amount) public {\n', '    //remember to call Token(address).approve(this, amount) or this contract will not be able to do the transfer on your behalf.\n', '    require (ERC20(token).transferFrom(msg.sender, this, amount));\n', '    totalDeposited += amount;\n', '    tokens[msg.sender] += amount;\n', '    emit DepositReceived(msg.sender, amount);\n', '  }\n', '\n', '  function withdrawToken(address payee, uint256 payment) internal{\n', '    totalDeposited -= payment;\n', '    tokens[payee] -= payment;\n', '    require (ERC20(token).transfer(payee, payment));\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title SplitERC20Payment\n', ' * @dev Base contract that supports multiple payees claiming funds sent to this contract\n', ' * according to the proportion they own.\n', ' */\n', 'contract SplitErc20Payment is Erc20Wallet{\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public totalShares = 0;\n', '  uint256 public totalReleased = 0;\n', '\n', '  mapping(address => uint256) public shares;\n', '  mapping(address => uint256) public released;\n', '  address[] public payees;\n', '\n', '  constructor(address _token)\n', '  Erc20Wallet(_token) public{\n', '  }\n', '\n', '  function depositToken(uint amount) public{\n', '    super.depositToken(amount);\n', '    if (shares[msg.sender] == 0)\n', '      addPayee(msg.sender, amount);\n', '    else\n', '      addToPayeeBalance(msg.sender, amount);\n', '  }\n', '  /**\n', '   * @dev Claim your share of the balance.\n', '   */\n', '  function claim() public {\n', '    address payee = msg.sender;\n', '\n', '    require(shares[payee] > 0);\n', '\n', '    uint256 totalReceived = totalDeposited + totalReleased;\n', '    uint256 payment = (totalReceived * shares[payee] / totalShares) - released[payee];\n', '\n', '    require(payment != 0);\n', '    require(totalDeposited >= payment);\n', '\n', '    released[payee] = released[payee] + payment;\n', '    totalReleased = totalReleased + payment;\n', '\n', '    super.withdrawToken(payee, payment);\n', '  }\n', '\n', '  /**\n', '   * @dev Add a new payee to the contract.\n', '   * @param _payee The address of the payee to add.\n', '   * @param _shares The number of shares owned by the payee.\n', '   */\n', '  function addPayee(address _payee, uint256 _shares) internal {\n', '    require(_payee != address(0));\n', '    require(_shares > 0);\n', '    require(shares[_payee] == 0);\n', '\n', '    payees.push(_payee);\n', '    shares[_payee] = _shares;\n', '    totalShares = totalShares.add(_shares);\n', '  }\n', '  /**\n', '   * @dev Add to payee balance\n', '   * @param _payee The address of the payee to add.\n', '   * @param _shares The number of shares to add to the payee.\n', '   */\n', '  function addToPayeeBalance(address _payee, uint256 _shares) internal {\n', '  require(_payee != address(0));\n', '  require(_shares > 0);\n', '  require(shares[_payee] > 0);\n', '\n', '  shares[_payee] += _shares;\n', '  totalShares = totalShares.add(_shares);\n', '  }\n', '}\n', '\n', '\n', 'contract ERC20Vault is TimeLapse, SplitErc20Payment{\n', '  constructor(address _token, uint256 _openingTime, uint256 _closingTime)\n', '  SplitErc20Payment(_token)\n', '  TimeLapse(_openingTime, _closingTime)\n', '  public{\n', '  }\n', '\n', '  function claim() public onlyAfterClosed{\n', '    super.claim();\n', '  }\n', '\n', '  function depositToken(uint amount) public onlyWhileOpen{\n', '    super.depositToken(amount);\n', '  }\n', '}']