['pragma solidity ^0.4.18;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '  mapping(address => uint256) balances;\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', 'contract StandardToken is ERC20, BasicToken {\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract BurnableToken is StandardToken {\n', '  event Burn(address indexed burner, uint256 value);\n', '  function burn(uint256 _value) public {\n', '    require(_value > 0);\n', '    require(_value <= balances[msg.sender]);\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    Burn(burner, _value);\n', '  }\n', '}\n', 'contract SpaceTRUMPLToken is BurnableToken {\n', '  string public constant name = "Space TRUMPL Token";\n', '  string public constant symbol = "TRUMP";\n', '  uint32 public constant decimals = 0;\n', '  uint256 public constant INITIAL_SUPPLY = 38440000;\n', '  function SpaceTRUMPLToken() public {\n', '    totalSupply = INITIAL_SUPPLY;\n', '    balances[msg.sender] = INITIAL_SUPPLY;\n', '  }\n', '}\n', '\n', 'contract Crowdsale is Ownable {\n', '\n', '  using SafeMath for uint;\n', '\n', '  SpaceTRUMPLToken public token = new SpaceTRUMPLToken();\n', '\n', '  address multisig;\n', '  address restricted;\n', '\n', '  uint statusPreSale = 0;\n', '\n', '  uint rate;\n', '  uint minAmount;\n', '\n', '  uint saleStartDate;\n', '  uint saleFinishDate;\n', '\n', '  uint olympStartDate;\n', '  uint olympEndDate;\n', '\n', '  uint percentsTeamTokens;\n', '  uint percentsPreSaleTokens;\n', '  uint percentsBountySecondTokens;\n', '  uint percentsOlympicTokens;\n', '\n', '  uint endCrowdsaleDate;\n', '\n', '  modifier saleIsOn() {\n', '    uint curState = getStatus();\n', '    require(curState != 0 && curState != 5 && curState != 3);\n', '    _;\n', '  }\n', '\n', '  modifier isUnderHardCap() {\n', '    uint _availableTokens = token.balanceOf(this);\n', '    uint _tokens = calculateTokens(msg.value);\n', '    uint _minTokens = holdTokensOnStage();\n', '    require(_availableTokens.sub(_tokens) >= _minTokens);\n', '    _;\n', '  }\n', '\n', '  modifier checkMinAmount() {\n', '    require(msg.value >= minAmount);\n', '    _;\n', '  }\n', '  function Crowdsale() public {\n', '    multisig = 0x19d1858e8E5f959863EF5a04Db54d3CaE1B58730;\n', '    restricted = 0x19d1858e8E5f959863EF5a04Db54d3CaE1B58730;\n', '    minAmount = 0.01 * 1 ether;\n', '    rate = 10000;\n', '    //Pre-ICO Dates:\n', '\n', '    saleStartDate = 1517832000; // 5 February 2018 12:00 UTC START\n', '    saleFinishDate = 1518696000; // 15 February 2018 12:00 UTC END\n', '    //ICO Dates:\n', '    olympStartDate = 1518696060; // 15 February 2018 12:01 UTC START\n', '    olympEndDate = 1521979200; // 25 march  2018 12:00 UTC END\n', '    //Bounty second\n', '    endCrowdsaleDate = 1521979260; // 25 march  2018 12:10 UTC Close Contract\n', '\n', '    percentsTeamTokens = 20;\n', '    percentsBountySecondTokens = 5;\n', '    percentsPreSaleTokens = 30;\n', '    percentsOlympicTokens = 15;\n', '  }\n', '\n', '  function calculateTokens(uint value) internal constant returns (uint) {\n', '    uint tokens = rate.mul(value).div(1 ether);\n', '    if(getStatus() == 1){\n', '      tokens += tokens.div(2);\n', '    }\n', '    return tokens;\n', '  }\n', '\n', '  // 0 - stop\n', '  // 1 - preSale\n', '  // 2 - sale\n', '  // 3 - Bounty First\n', '  // 4 - Olympic games\n', '  // 5 - Bounty Second\n', '  function getStatus() internal constant returns (uint8) {\n', '    if(now > endCrowdsaleDate) {\n', '      return 0;\n', '    } else if(now > olympEndDate && now < endCrowdsaleDate) {\n', '      return 5;\n', '    } else if(now > olympStartDate && now < olympEndDate) {\n', '      return 4;\n', '    } else if(now > saleFinishDate && now < olympStartDate) {\n', '      return 3;\n', '    } else if(now > saleStartDate && now < saleFinishDate) {\n', '      return 2;\n', '    } else if(statusPreSale == 1){\n', '      return 1;\n', '    } else {\n', '      return 0;\n', '    }\n', '  }\n', '\n', '  function holdTokensOnStage() public view returns (uint) {\n', '    uint _totalSupply = token.totalSupply();\n', '    uint _percents = 100;\n', '    uint curState = getStatus();\n', '    if(curState == 5) {\n', '      _percents = percentsTeamTokens;//20\n', '    } else if(curState == 4) {\n', '      _percents = percentsTeamTokens.add(percentsBountySecondTokens);//20+5\n', '    } else if(curState == 3) {\n', '      _percents = percentsTeamTokens.add(percentsBountySecondTokens).add(percentsOlympicTokens);//20+5+15\n', '    } else if(curState == 2) {\n', '      _percents = percentsTeamTokens.add(percentsBountySecondTokens).add(percentsOlympicTokens);//20+5+15\n', '    } else if(curState == 1) {\n', '      _percents = _percents.sub(percentsPreSaleTokens);//70\n', '    }\n', '    return _totalSupply.mul(_percents).div(100);\n', '  }\n', '\n', '  function onBalance() public view returns (uint) {\n', '    return token.balanceOf(this);\n', '  }\n', '\n', '  function availableTokensOnCurrentStage() public view returns (uint) {\n', '    uint _currentHolder = token.balanceOf(this);\n', '    uint _minTokens = holdTokensOnStage();\n', '    return _currentHolder.sub(_minTokens);\n', '  }\n', '\n', '  function getStatusInfo() public view returns (string) {\n', '    uint curState = getStatus();\n', '    if(now > endCrowdsaleDate) {\n', '      return "Crowdsale is over";\n', '    } else if(curState == 5) {\n', '      return "Now Bounty #2 token distribution is active";\n', '    } else if(curState == 4) {\n', '      return "Now Olympic Special (ICO #2) is active";\n', '    } else if(curState == 3) {\n', '      return "Now Bounty #1 token distribution is active";\n', '    } else if(curState == 2) {\n', '      return "Now ICO #1 is active";\n', '    } else if(curState == 1) {\n', '      return "Now Pre-ICO is active";\n', '    } else {\n', '      return "The sale of tokens is stopped";\n', '    }\n', '  }\n', '\n', '  function setStatus(uint8 newStatus) public onlyOwner {\n', '    require(newStatus == 1 || newStatus == 0);\n', '    statusPreSale = newStatus;\n', '  }\n', '\n', '  function burnTokens() public onlyOwner {\n', '    require(now > endCrowdsaleDate);\n', '    uint _totalSupply = token.totalSupply();\n', '    uint _teamTokens = _totalSupply.mul(percentsTeamTokens).div(100);\n', '    token.transfer(restricted, _teamTokens);\n', '    uint _burnTokens = token.balanceOf(this);\n', '    token.burn(_burnTokens);\n', '  }\n', '\n', '  function sendTokens(address to, uint tokens) public onlyOwner {\n', '    uint curState = getStatus();\n', '    require(curState == 5 || curState == 3);\n', '    uint _minTokens = holdTokensOnStage();\n', '    require(token.balanceOf(this).sub(tokens) >=  _minTokens);\n', '    token.transfer(to, tokens);\n', '  }\n', '\n', '  function createTokens() public saleIsOn isUnderHardCap checkMinAmount payable {\n', '    uint tokens = calculateTokens(msg.value);\n', '    multisig.transfer(msg.value);\n', '    token.transfer(msg.sender, tokens);\n', '  }\n', '\n', '  function() external payable {\n', '    createTokens();\n', '  }\n', '}']