['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * SmartEth.co\n', ' * ERC20 Token and ICO smart contracts development, smart contracts audit, ICO websites.\n', ' * contact@smarteth.co\n', ' */\n', '\n', '/**\n', ' * @title SafeMath\n', ' */\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract ZIC_Token is ERC20, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    string public name = "Zinscoin";\n', '    string public symbol = "ZIC";\n', '    uint public decimals = 5;\n', '\n', '    uint public chainStartTime;\n', '    uint public chainStartBlockNumber;\n', '    uint public stakeStartTime;\n', '    uint public stakeMinAge = 10 days; // minimum coin age: 10 Days\n', '    uint public maxMintProofOfStake = 5 * 10 ** uint256(decimals-2); // Anual reward after 50 years: 5%\n', '\n', '    uint public totalSupply;\n', '    uint public maxTotalSupply;\n', '    uint public totalInitialSupply;\n', '\n', '    struct transferInStruct{\n', '    uint128 amount;\n', '    uint64 time;\n', '    }\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '    mapping(address => transferInStruct[]) transferIns;\n', '    \n', '    event Mint(address indexed _address, uint _reward);\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Fix for the ERC20 short address attack.\n', '     */\n', '    modifier onlyPayloadSize(uint size) {\n', '        require(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '\n', '    modifier canPoSMint() {\n', '        require(totalSupply < maxTotalSupply);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        maxTotalSupply = 2100000000 * 10 ** uint256(decimals); // Max supply: 2,100,000,000\n', '        totalInitialSupply = 50000 * 10 ** uint256(decimals); // Initial supply: 50,000\n', '\n', '        chainStartTime = now;\n', '        chainStartBlockNumber = block.number;\n', '\n', '        balances[owner] = totalInitialSupply;\n', '        emit Transfer(0x0, owner, totalInitialSupply);\n', '        totalSupply = totalInitialSupply;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public returns (bool) {\n', '        if(msg.sender == _to) return mint();\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        if(transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\n', '        uint64 _now = uint64(now);\n', '        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),_now));\n', '        transferIns[_to].push(transferInStruct(uint128(_value),_now));\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        if(transferIns[_from].length > 0) delete transferIns[_from];\n', '        uint64 _now = uint64(now);\n', '        transferIns[_from].push(transferInStruct(uint128(balances[_from]),_now));\n', '        transferIns[_to].push(transferInStruct(uint128(_value),_now));\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function mint() canPoSMint public returns (bool) {\n', '        if(balances[msg.sender] <= 0) return false;\n', '        if(transferIns[msg.sender].length <= 0) return false;\n', '\n', '        uint reward = getProofOfStakeReward(msg.sender);\n', '        if(reward <= 0) return false;\n', '\n', '        totalSupply = totalSupply.add(reward);\n', '        balances[msg.sender] = balances[msg.sender].add(reward);\n', '        delete transferIns[msg.sender];\n', '        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),uint64(now)));\n', '\n', '        emit Mint(msg.sender, reward);\n', '        return true;\n', '    }\n', '\n', '    function getBlockNumber() public view returns (uint blockNumber) {\n', '        blockNumber = block.number.sub(chainStartBlockNumber);\n', '    }\n', '\n', '    function coinAge() public constant returns (uint myCoinAge) {\n', '        myCoinAge = getCoinAge(msg.sender,now);\n', '    }\n', '\n', '    function annualInterest() public constant returns(uint interest) {\n', '        uint _now = now;\n', '        interest = maxMintProofOfStake;\n', '        if((_now.sub(stakeStartTime)) <= 30 years) {\n', '            interest = 4 * maxMintProofOfStake; // Anual reward years (0, 30]: 20%\n', '        } else if((_now.sub(stakeStartTime)) > 30 years && (_now.sub(stakeStartTime)) <= 50 years){\n', '            interest = 2 * maxMintProofOfStake; // Anual reward years (30, 50]: 20%\n', '        }\n', '    }\n', '\n', '    function getProofOfStakeReward(address _address) internal returns (uint) {\n', '        require( (now >= stakeStartTime) && (stakeStartTime > 0) );\n', '\n', '        uint _now = now;\n', '        uint _coinAge = getCoinAge(_address, _now);\n', '        if(_coinAge <= 0) return 0;\n', '        \n', '        uint interest = maxMintProofOfStake;\n', '        if((_now.sub(stakeStartTime)) <= 30 years) {\n', '            interest = 4 * maxMintProofOfStake; // Anual reward years (0, 30]: 20%\n', '        } else if((_now.sub(stakeStartTime)) > 30 years && (_now.sub(stakeStartTime)) <= 50 years){\n', '            interest = 2 * maxMintProofOfStake; // Anual reward years (30, 50]: 20%\n', '        }\n', '\n', '        return (_coinAge * interest).div(365 * 10 ** uint256(decimals));\n', '    }\n', '\n', '    function getCoinAge(address _address, uint _now) internal returns (uint _coinAge) {\n', '        if(transferIns[_address].length <= 0) return 0;\n', '\n', '        for (uint i = 0; i < transferIns[_address].length; i++){\n', '            if( _now < uint(transferIns[_address][i].time).add(stakeMinAge) ) continue;\n', '\n', '            uint nCoinSeconds = _now.sub(uint(transferIns[_address][i].time));\n', '\n', '            _coinAge = _coinAge.add(uint(transferIns[_address][i].amount) * nCoinSeconds.div(1 days));\n', '        }\n', '    }\n', '\n', '    function ownerSetStakeStartTime(uint timestamp) public onlyOwner {\n', '        require((stakeStartTime <= 0) && (timestamp >= chainStartTime));\n', '        stakeStartTime = timestamp;\n', '    }\n', '\n', '    function ownerBurnToken(uint _value) public onlyOwner {\n', '        require(_value > 0);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        delete transferIns[msg.sender];\n', '        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),uint64(now)));\n', '\n', '        totalSupply = totalSupply.sub(_value);\n', '        totalInitialSupply = totalInitialSupply.sub(_value);\n', '        maxTotalSupply = maxTotalSupply.sub(_value*10);\n', '\n', '        emit Burn(msg.sender, _value);\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * SmartEth.co\n', ' * ERC20 Token and ICO smart contracts development, smart contracts audit, ICO websites.\n', ' * contact@smarteth.co\n', ' */\n', '\n', '/**\n', ' * @title SafeMath\n', ' */\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract ZIC_Token is ERC20, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    string public name = "Zinscoin";\n', '    string public symbol = "ZIC";\n', '    uint public decimals = 5;\n', '\n', '    uint public chainStartTime;\n', '    uint public chainStartBlockNumber;\n', '    uint public stakeStartTime;\n', '    uint public stakeMinAge = 10 days; // minimum coin age: 10 Days\n', '    uint public maxMintProofOfStake = 5 * 10 ** uint256(decimals-2); // Anual reward after 50 years: 5%\n', '\n', '    uint public totalSupply;\n', '    uint public maxTotalSupply;\n', '    uint public totalInitialSupply;\n', '\n', '    struct transferInStruct{\n', '    uint128 amount;\n', '    uint64 time;\n', '    }\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '    mapping(address => transferInStruct[]) transferIns;\n', '    \n', '    event Mint(address indexed _address, uint _reward);\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Fix for the ERC20 short address attack.\n', '     */\n', '    modifier onlyPayloadSize(uint size) {\n', '        require(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '\n', '    modifier canPoSMint() {\n', '        require(totalSupply < maxTotalSupply);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        maxTotalSupply = 2100000000 * 10 ** uint256(decimals); // Max supply: 2,100,000,000\n', '        totalInitialSupply = 50000 * 10 ** uint256(decimals); // Initial supply: 50,000\n', '\n', '        chainStartTime = now;\n', '        chainStartBlockNumber = block.number;\n', '\n', '        balances[owner] = totalInitialSupply;\n', '        emit Transfer(0x0, owner, totalInitialSupply);\n', '        totalSupply = totalInitialSupply;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public returns (bool) {\n', '        if(msg.sender == _to) return mint();\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        if(transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\n', '        uint64 _now = uint64(now);\n', '        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),_now));\n', '        transferIns[_to].push(transferInStruct(uint128(_value),_now));\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        if(transferIns[_from].length > 0) delete transferIns[_from];\n', '        uint64 _now = uint64(now);\n', '        transferIns[_from].push(transferInStruct(uint128(balances[_from]),_now));\n', '        transferIns[_to].push(transferInStruct(uint128(_value),_now));\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function mint() canPoSMint public returns (bool) {\n', '        if(balances[msg.sender] <= 0) return false;\n', '        if(transferIns[msg.sender].length <= 0) return false;\n', '\n', '        uint reward = getProofOfStakeReward(msg.sender);\n', '        if(reward <= 0) return false;\n', '\n', '        totalSupply = totalSupply.add(reward);\n', '        balances[msg.sender] = balances[msg.sender].add(reward);\n', '        delete transferIns[msg.sender];\n', '        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),uint64(now)));\n', '\n', '        emit Mint(msg.sender, reward);\n', '        return true;\n', '    }\n', '\n', '    function getBlockNumber() public view returns (uint blockNumber) {\n', '        blockNumber = block.number.sub(chainStartBlockNumber);\n', '    }\n', '\n', '    function coinAge() public constant returns (uint myCoinAge) {\n', '        myCoinAge = getCoinAge(msg.sender,now);\n', '    }\n', '\n', '    function annualInterest() public constant returns(uint interest) {\n', '        uint _now = now;\n', '        interest = maxMintProofOfStake;\n', '        if((_now.sub(stakeStartTime)) <= 30 years) {\n', '            interest = 4 * maxMintProofOfStake; // Anual reward years (0, 30]: 20%\n', '        } else if((_now.sub(stakeStartTime)) > 30 years && (_now.sub(stakeStartTime)) <= 50 years){\n', '            interest = 2 * maxMintProofOfStake; // Anual reward years (30, 50]: 20%\n', '        }\n', '    }\n', '\n', '    function getProofOfStakeReward(address _address) internal returns (uint) {\n', '        require( (now >= stakeStartTime) && (stakeStartTime > 0) );\n', '\n', '        uint _now = now;\n', '        uint _coinAge = getCoinAge(_address, _now);\n', '        if(_coinAge <= 0) return 0;\n', '        \n', '        uint interest = maxMintProofOfStake;\n', '        if((_now.sub(stakeStartTime)) <= 30 years) {\n', '            interest = 4 * maxMintProofOfStake; // Anual reward years (0, 30]: 20%\n', '        } else if((_now.sub(stakeStartTime)) > 30 years && (_now.sub(stakeStartTime)) <= 50 years){\n', '            interest = 2 * maxMintProofOfStake; // Anual reward years (30, 50]: 20%\n', '        }\n', '\n', '        return (_coinAge * interest).div(365 * 10 ** uint256(decimals));\n', '    }\n', '\n', '    function getCoinAge(address _address, uint _now) internal returns (uint _coinAge) {\n', '        if(transferIns[_address].length <= 0) return 0;\n', '\n', '        for (uint i = 0; i < transferIns[_address].length; i++){\n', '            if( _now < uint(transferIns[_address][i].time).add(stakeMinAge) ) continue;\n', '\n', '            uint nCoinSeconds = _now.sub(uint(transferIns[_address][i].time));\n', '\n', '            _coinAge = _coinAge.add(uint(transferIns[_address][i].amount) * nCoinSeconds.div(1 days));\n', '        }\n', '    }\n', '\n', '    function ownerSetStakeStartTime(uint timestamp) public onlyOwner {\n', '        require((stakeStartTime <= 0) && (timestamp >= chainStartTime));\n', '        stakeStartTime = timestamp;\n', '    }\n', '\n', '    function ownerBurnToken(uint _value) public onlyOwner {\n', '        require(_value > 0);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        delete transferIns[msg.sender];\n', '        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),uint64(now)));\n', '\n', '        totalSupply = totalSupply.sub(_value);\n', '        totalInitialSupply = totalInitialSupply.sub(_value);\n', '        maxTotalSupply = maxTotalSupply.sub(_value*10);\n', '\n', '        emit Burn(msg.sender, _value);\n', '    }\n', '}']
