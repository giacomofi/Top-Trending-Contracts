['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath\n', '{\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath32\n', ' * @dev SafeMath library implemented for uint32\n', ' */\n', 'library SafeMath32\n', '{\n', '  function mul(uint32 a, uint32 b) internal pure returns (uint32) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint32 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint32 a, uint32 b) internal pure returns (uint32) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint32 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint32 a, uint32 b) internal pure returns (uint32) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint32 a, uint32 b) internal pure returns (uint32) {\n', '    uint32 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath16\n', ' * @dev SafeMath library implemented for uint16\n', ' */\n', 'library SafeMath16\n', '{\n', '  function mul(uint16 a, uint16 b) internal pure returns (uint16) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint16 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint16 a, uint16 b) internal pure returns (uint16) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint16 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint16 a, uint16 b) internal pure returns (uint16) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint16 a, uint16 b) internal pure returns (uint16) {\n', '    uint16 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title DeSocializedAdmin\n', ' * @author Chad R. Banks\n', ' * @dev This contract provides basic authorization control functions.\n', ' */\n', ' \n', '\n', 'contract DeSocializedAdmin\n', '{\n', '    using SafeMath for uint256;\n', '    using SafeMath32 for uint32;\n', '    using SafeMath16 for uint16;\n', '\n', '    mapping (address => uint256) admins;\n', '    mapping (string => uint256) options;\n', '    \n', '    address public feewallet;\n', '    \n', '    event AdminOptionChange(address indexed admin, string option, uint256 value);\n', '    event AdminStatusChange(address indexed admin, uint256 newStatus);\n', '    event AdminWalletChange(address indexed admin, address indexed wallet);\n', '    event AdminWithdrawl(address indexed admin, uint256 amount);\n', '  \n', '    /**\n', '    * @dev The DeSocializedAdmin constructor sets the original values.\n', '    */\n', '    constructor() public\n', '    {\n', '        feewallet = msg.sender;\n', '        admins[msg.sender] = 100;\n', '        options["likefee"] = 1000000000000;     // 0.000001 ETH\n', '        options["dissfee"] = 1000000000000;     // 0.000001 ETH\n', '        options["minefee"] = 10000000000000;    // 0.00001 ETH\n', '        options["regifee"] = 10000000000000000; // 0.01 ETH\n', '    }\n', '  \n', '    /**\n', '    * @dev Throws if called by any address other than an admin.\n', '    */\n', '    modifier onlyAdmin()\n', '    {\n', '        require(admins[msg.sender] >= 1);\n', '        _;\n', '    }\n', '  \n', '    /**\n', '    * @dev Allows the current owner to add/remove another admins status.\n', '    */\n', '    function setAdminStatus(address user, uint status) public onlyAdmin\n', '    {\n', '        require(user != address(0));\n', '        require(status <= admins[msg.sender]);\n', '        require(admins[user] <= admins[msg.sender]);\n', '        admins[user] = status;\n', '        emit AdminStatusChange(user, status);\n', '    }\n', '    \n', '    /**\n', '     * @dev Return the admin status for another address.\n', '     */\n', '    function getAdminStatus(address user) public view returns(uint)\n', '    {\n', '        return admins[user];\n', '    }\n', '    \n', '    /**\n', '     * @dev Change the wallet that funds are stored in.\n', '     */\n', '    function setFeeWallet(address _wallet) public onlyAdmin\n', '    {\n', '        feewallet = _wallet;\n', '        emit AdminWalletChange(msg.sender, _wallet);\n', '    }\n', '    \n', '    /**\n', '     * @dev Change an options value.\n', '     */\n', '    function setOption(string option, uint value) public onlyAdmin\n', '    {\n', '        options[option] = value;\n', '        emit AdminOptionChange(msg.sender, option, value);\n', '    }\n', '    \n', '    /**\n', '     * @dev Returns the option value for a given key.\n', '     */\n', '    function getOption(string option) public view returns(uint)\n', '    {\n', '        return options[option];\n', '    }\n', '    \n', '    /**\n', '     * @dev Returns the eth balance of this wallet\n', '     */\n', '    function getWalletBalance( ) public view returns(uint)\n', '    {\n', '        return address(this).balance;\n', '    }\n', '    \n', '    /**\n', '     * @dev Withdraw funds from this contract.\n', '     */\n', '    function withdrawl(uint amt) external onlyAdmin\n', '    {\n', '        require(amt <= address(this).balance);\n', '        msg.sender.transfer(amt);\n', '        emit AdminWithdrawl(msg.sender, amt);\n', '    }\n', '}\n', 'pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title DeSocializedMain\n', ' * @author Chad R. Banks\n', ' * @dev The DeSocializedMain will hold the basic social media functionality.\n', ' */\n', '\n', '\n', 'contract DeSocializedMain is DeSocializedAdmin\n', '{\n', '    using SafeMath for uint256;\n', '    using SafeMath32 for uint32;\n', '    using SafeMath16 for uint16;\n', '\n', '    struct Block\n', '    {\n', '        address poster;\n', '        string message;\n', '        uint dislikes;\n', '        uint likes;\n', '        uint mined;\n', '        uint id;\n', '    }\n', '\n', '    Block[] public blocks;\n', '    \n', '    mapping (uint => address) public blockToOwner;\n', '    mapping (address => uint) ownerBlockCount;\n', '    \n', '    mapping (string => address) handleToAddress;\n', '    mapping (address => string) public addressToHandle;\n', '    \n', '    event NewBlock(uint pid, address sender);\n', '    event BlockLiked(uint pid, uint value);\n', '    event BlockDisliked(uint pid, uint value);\n', '    event HandleRegistered(address _user, string _handle);\n', '    event AdminHandleRegistered(address _admin, address _user, string _handle);\n', '\n', '    /**\n', '     * @dev saveBlock is how users post new content.\n', '     */\n', '    function saveBlock( string _m ) public payable\n', '    {\n', '        require(msg.value >= options["minefee"]);\n', '        feewallet.transfer(msg.value);\n', '        \n', '        uint id = blocks.push( Block( msg.sender, _m, 0, 0, uint(now), 0 ) ) - 1;\n', '        blocks[id].id = id;\n', '        blockToOwner[id] = msg.sender;\n', '        ownerBlockCount[msg.sender] = ownerBlockCount[msg.sender].add(1);\n', '        \n', '        emit NewBlock(id, msg.sender);\n', '    }\n', '    \n', '    /**\n', '     * @dev Allows a user to like another users block.\n', '     */\n', '    function likeBlock( uint _bid ) public payable\n', '    {\n', '        require(msg.value >= options["likefee"]);\n', '        address owner = blockToOwner[_bid];\n', '        owner.transfer(msg.value);\n', '        \n', '        Block storage b = blocks[_bid];\n', '        b.likes = b.likes.add(1);\n', '        \n', '        emit BlockLiked(_bid, msg.value);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows a user to dislike another users block.\n', '     */\n', '    function dissBlock( uint _bid ) public payable\n', '    {\n', '        require(msg.value >= options["dissfee"]);\n', '        feewallet.transfer(msg.value);\n', '        \n', '        Block storage b = blocks[_bid];\n', '        b.dislikes = b.dislikes.add(1);\n', '        \n', '        emit BlockDisliked(_bid, msg.value);\n', '    }\n', '    \n', '    \n', '    /**\n', '     * @dev This will allow an admin to register a user.\n', '     */\n', '    function registerUser( address _user, string _handle ) public onlyAdmin\n', '    {\n', '        require( handleToAddress[ _handle ] == 0 );\n', '        _verify( _user, _handle );\n', '        \n', '        emit AdminHandleRegistered(msg.sender, _user, _handle);\n', '    }\n', '    \n', '    /**\n', '     * @dev Allows general users to register their handle.\n', '     */\n', '    function register( string _handle ) public payable\n', '    {\n', '        require( handleToAddress[ _handle ] == 0 );\n', '        \n', '        uint fee = options["regifee"];\n', '        require(msg.value >= fee);\n', '        feewallet.transfer(fee);\n', '        \n', '        _verify( msg.sender, _handle );\n', '        \n', '        emit HandleRegistered(msg.sender, _handle);\n', '    }\n', '    \n', '    /**\n', '     * @dev Internal verify function.\n', '     */\n', '    function _verify( address _user, string _handle ) internal\n', '    {\n', '        if( keccak256( abi.encodePacked(addressToHandle[ _user ]) ) != keccak256( abi.encodePacked("") ) )\n', '        {\n', '            handleToAddress[ addressToHandle[ _user ] ] = 0;\n', '        }\n', '        \n', '        addressToHandle[ _user ] = _handle;\n', '        handleToAddress[ _handle ] = _user;\n', '    }\n', '    \n', '    \n', '    /**\n', '     * @dev Get a certain number of blocks in ascending order.\n', '     */\n', '    function getBlocks(uint _bid, uint _len) external view returns(uint[])\n', '    {\n', '        uint[] memory result = new uint[](_len);\n', '        uint counter = 0;\n', '        for (uint i = _bid; i < (_bid+_len); i++)\n', '        {\n', '            if( blockToOwner[i] != 0 )\n', '            {\n', '                result[counter] = i;\n', '                counter++;\n', '            }\n', '        }\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @dev Get a certain number of blocks in descending order.\n', '     */\n', '    function getBlocksDesc(uint _bid, uint _len) external view returns(uint[])\n', '    {\n', '        uint[] memory result = new uint[](_len);\n', '        uint counter = 0;\n', '        \n', '        if(_bid == 0)\n', '        {\n', '            for (uint i = blocks.length; i > (blocks.length-_len); i--)\n', '            {\n', '                if( blockToOwner[i] != 0 && counter < _len )\n', '                {\n', '                    result[counter] = i;\n', '                    counter++;\n', '                }\n', '            }\n', '        }\n', '        else\n', '        {\n', '            for (uint x = _bid; x > (_bid-_len); x--)\n', '            {\n', '                if( blockToOwner[x] != 0 && counter < _len )\n', '                {\n', '                    result[counter] = x;\n', '                    counter++;\n', '                }\n', '            }\n', '        }\n', '        \n', '        return result;\n', '    }\n', '    \n', '    /**\n', '     * @dev Get a certain number of an addresses blocks in ascending order.\n', '     */\n', '    function getBlocksByOwner(uint _bid, uint _len, address _owner) external view returns(uint[])\n', '    {\n', '        uint[] memory result = new uint[](_len);\n', '        uint counter = 0;\n', '        for (uint i = _bid; i < (_bid+_len); i++)\n', '        {\n', '            if (blockToOwner[i] == _owner)\n', '            {\n', '                result[counter] = i;\n', '                counter++;\n', '            }\n', '        }\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @dev Get a certain number of an addresses blocks in descending order.\n', '     */\n', '    function getBlocksByOwnerDesc(uint _bid, uint _len, address _owner) external view returns(uint[])\n', '    {\n', '        uint[] memory result = new uint[](_len);\n', '        uint counter = 0;\n', '        \n', '        if(_bid == 0)\n', '        {\n', '            for (uint i = blocks.length; i > (blocks.length-_len); i--)\n', '            {\n', '                if (blockToOwner[i] == _owner && counter < _len )\n', '                {\n', '                    result[counter] = i;\n', '                    counter++;\n', '                }\n', '            }\n', '        }\n', '        else\n', '        {\n', '            for (uint x = _bid; x > (_bid-_len); x--)\n', '            {\n', '                if (blockToOwner[x] == _owner && counter < _len )\n', '                {\n', '                    result[counter] = x;\n', '                    counter++;\n', '                }\n', '            }\n', '        }\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @dev Get all blocks for a given address.\n', '     */\n', '    function getAllBlocksByOwner(address _owner) external view returns(uint[])\n', '    {\n', '        uint[] memory result = new uint[](ownerBlockCount[_owner]);\n', '        uint counter = 0;\n', '        for (uint i = 0; i < blocks.length; i++)\n', '        {\n', '            if (blockToOwner[i] == _owner)\n', '            {\n', '                result[counter] = i;\n', '                counter++;\n', '            }\n', '        }\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @dev Return the number of owners an address has.\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256 _balance)\n', '    {\n', '        return ownerBlockCount[_owner];\n', '    }\n', '    \n', '    /**\n', '     * @dev Return the address of a blocks owner.\n', '     */\n', '    function ownerOf(uint256 _tokenId) public view returns (address _owner)\n', '    {\n', '        return blockToOwner[_tokenId];\n', '    }\n', '    \n', '    /**\n', '     * @dev Return the address of a blocks owner.\n', '     */\n', '    function getUserPair( address _user ) public view returns (address, string)\n', '    {\n', '        return ( _user, addressToHandle[_user] );\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath\n', '{\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath32\n', ' * @dev SafeMath library implemented for uint32\n', ' */\n', 'library SafeMath32\n', '{\n', '  function mul(uint32 a, uint32 b) internal pure returns (uint32) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint32 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint32 a, uint32 b) internal pure returns (uint32) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint32 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint32 a, uint32 b) internal pure returns (uint32) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint32 a, uint32 b) internal pure returns (uint32) {\n', '    uint32 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath16\n', ' * @dev SafeMath library implemented for uint16\n', ' */\n', 'library SafeMath16\n', '{\n', '  function mul(uint16 a, uint16 b) internal pure returns (uint16) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint16 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint16 a, uint16 b) internal pure returns (uint16) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint16 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint16 a, uint16 b) internal pure returns (uint16) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint16 a, uint16 b) internal pure returns (uint16) {\n', '    uint16 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title DeSocializedAdmin\n', ' * @author Chad R. Banks\n', ' * @dev This contract provides basic authorization control functions.\n', ' */\n', ' \n', '\n', 'contract DeSocializedAdmin\n', '{\n', '    using SafeMath for uint256;\n', '    using SafeMath32 for uint32;\n', '    using SafeMath16 for uint16;\n', '\n', '    mapping (address => uint256) admins;\n', '    mapping (string => uint256) options;\n', '    \n', '    address public feewallet;\n', '    \n', '    event AdminOptionChange(address indexed admin, string option, uint256 value);\n', '    event AdminStatusChange(address indexed admin, uint256 newStatus);\n', '    event AdminWalletChange(address indexed admin, address indexed wallet);\n', '    event AdminWithdrawl(address indexed admin, uint256 amount);\n', '  \n', '    /**\n', '    * @dev The DeSocializedAdmin constructor sets the original values.\n', '    */\n', '    constructor() public\n', '    {\n', '        feewallet = msg.sender;\n', '        admins[msg.sender] = 100;\n', '        options["likefee"] = 1000000000000;     // 0.000001 ETH\n', '        options["dissfee"] = 1000000000000;     // 0.000001 ETH\n', '        options["minefee"] = 10000000000000;    // 0.00001 ETH\n', '        options["regifee"] = 10000000000000000; // 0.01 ETH\n', '    }\n', '  \n', '    /**\n', '    * @dev Throws if called by any address other than an admin.\n', '    */\n', '    modifier onlyAdmin()\n', '    {\n', '        require(admins[msg.sender] >= 1);\n', '        _;\n', '    }\n', '  \n', '    /**\n', '    * @dev Allows the current owner to add/remove another admins status.\n', '    */\n', '    function setAdminStatus(address user, uint status) public onlyAdmin\n', '    {\n', '        require(user != address(0));\n', '        require(status <= admins[msg.sender]);\n', '        require(admins[user] <= admins[msg.sender]);\n', '        admins[user] = status;\n', '        emit AdminStatusChange(user, status);\n', '    }\n', '    \n', '    /**\n', '     * @dev Return the admin status for another address.\n', '     */\n', '    function getAdminStatus(address user) public view returns(uint)\n', '    {\n', '        return admins[user];\n', '    }\n', '    \n', '    /**\n', '     * @dev Change the wallet that funds are stored in.\n', '     */\n', '    function setFeeWallet(address _wallet) public onlyAdmin\n', '    {\n', '        feewallet = _wallet;\n', '        emit AdminWalletChange(msg.sender, _wallet);\n', '    }\n', '    \n', '    /**\n', '     * @dev Change an options value.\n', '     */\n', '    function setOption(string option, uint value) public onlyAdmin\n', '    {\n', '        options[option] = value;\n', '        emit AdminOptionChange(msg.sender, option, value);\n', '    }\n', '    \n', '    /**\n', '     * @dev Returns the option value for a given key.\n', '     */\n', '    function getOption(string option) public view returns(uint)\n', '    {\n', '        return options[option];\n', '    }\n', '    \n', '    /**\n', '     * @dev Returns the eth balance of this wallet\n', '     */\n', '    function getWalletBalance( ) public view returns(uint)\n', '    {\n', '        return address(this).balance;\n', '    }\n', '    \n', '    /**\n', '     * @dev Withdraw funds from this contract.\n', '     */\n', '    function withdrawl(uint amt) external onlyAdmin\n', '    {\n', '        require(amt <= address(this).balance);\n', '        msg.sender.transfer(amt);\n', '        emit AdminWithdrawl(msg.sender, amt);\n', '    }\n', '}\n', 'pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title DeSocializedMain\n', ' * @author Chad R. Banks\n', ' * @dev The DeSocializedMain will hold the basic social media functionality.\n', ' */\n', '\n', '\n', 'contract DeSocializedMain is DeSocializedAdmin\n', '{\n', '    using SafeMath for uint256;\n', '    using SafeMath32 for uint32;\n', '    using SafeMath16 for uint16;\n', '\n', '    struct Block\n', '    {\n', '        address poster;\n', '        string message;\n', '        uint dislikes;\n', '        uint likes;\n', '        uint mined;\n', '        uint id;\n', '    }\n', '\n', '    Block[] public blocks;\n', '    \n', '    mapping (uint => address) public blockToOwner;\n', '    mapping (address => uint) ownerBlockCount;\n', '    \n', '    mapping (string => address) handleToAddress;\n', '    mapping (address => string) public addressToHandle;\n', '    \n', '    event NewBlock(uint pid, address sender);\n', '    event BlockLiked(uint pid, uint value);\n', '    event BlockDisliked(uint pid, uint value);\n', '    event HandleRegistered(address _user, string _handle);\n', '    event AdminHandleRegistered(address _admin, address _user, string _handle);\n', '\n', '    /**\n', '     * @dev saveBlock is how users post new content.\n', '     */\n', '    function saveBlock( string _m ) public payable\n', '    {\n', '        require(msg.value >= options["minefee"]);\n', '        feewallet.transfer(msg.value);\n', '        \n', '        uint id = blocks.push( Block( msg.sender, _m, 0, 0, uint(now), 0 ) ) - 1;\n', '        blocks[id].id = id;\n', '        blockToOwner[id] = msg.sender;\n', '        ownerBlockCount[msg.sender] = ownerBlockCount[msg.sender].add(1);\n', '        \n', '        emit NewBlock(id, msg.sender);\n', '    }\n', '    \n', '    /**\n', '     * @dev Allows a user to like another users block.\n', '     */\n', '    function likeBlock( uint _bid ) public payable\n', '    {\n', '        require(msg.value >= options["likefee"]);\n', '        address owner = blockToOwner[_bid];\n', '        owner.transfer(msg.value);\n', '        \n', '        Block storage b = blocks[_bid];\n', '        b.likes = b.likes.add(1);\n', '        \n', '        emit BlockLiked(_bid, msg.value);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows a user to dislike another users block.\n', '     */\n', '    function dissBlock( uint _bid ) public payable\n', '    {\n', '        require(msg.value >= options["dissfee"]);\n', '        feewallet.transfer(msg.value);\n', '        \n', '        Block storage b = blocks[_bid];\n', '        b.dislikes = b.dislikes.add(1);\n', '        \n', '        emit BlockDisliked(_bid, msg.value);\n', '    }\n', '    \n', '    \n', '    /**\n', '     * @dev This will allow an admin to register a user.\n', '     */\n', '    function registerUser( address _user, string _handle ) public onlyAdmin\n', '    {\n', '        require( handleToAddress[ _handle ] == 0 );\n', '        _verify( _user, _handle );\n', '        \n', '        emit AdminHandleRegistered(msg.sender, _user, _handle);\n', '    }\n', '    \n', '    /**\n', '     * @dev Allows general users to register their handle.\n', '     */\n', '    function register( string _handle ) public payable\n', '    {\n', '        require( handleToAddress[ _handle ] == 0 );\n', '        \n', '        uint fee = options["regifee"];\n', '        require(msg.value >= fee);\n', '        feewallet.transfer(fee);\n', '        \n', '        _verify( msg.sender, _handle );\n', '        \n', '        emit HandleRegistered(msg.sender, _handle);\n', '    }\n', '    \n', '    /**\n', '     * @dev Internal verify function.\n', '     */\n', '    function _verify( address _user, string _handle ) internal\n', '    {\n', '        if( keccak256( abi.encodePacked(addressToHandle[ _user ]) ) != keccak256( abi.encodePacked("") ) )\n', '        {\n', '            handleToAddress[ addressToHandle[ _user ] ] = 0;\n', '        }\n', '        \n', '        addressToHandle[ _user ] = _handle;\n', '        handleToAddress[ _handle ] = _user;\n', '    }\n', '    \n', '    \n', '    /**\n', '     * @dev Get a certain number of blocks in ascending order.\n', '     */\n', '    function getBlocks(uint _bid, uint _len) external view returns(uint[])\n', '    {\n', '        uint[] memory result = new uint[](_len);\n', '        uint counter = 0;\n', '        for (uint i = _bid; i < (_bid+_len); i++)\n', '        {\n', '            if( blockToOwner[i] != 0 )\n', '            {\n', '                result[counter] = i;\n', '                counter++;\n', '            }\n', '        }\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @dev Get a certain number of blocks in descending order.\n', '     */\n', '    function getBlocksDesc(uint _bid, uint _len) external view returns(uint[])\n', '    {\n', '        uint[] memory result = new uint[](_len);\n', '        uint counter = 0;\n', '        \n', '        if(_bid == 0)\n', '        {\n', '            for (uint i = blocks.length; i > (blocks.length-_len); i--)\n', '            {\n', '                if( blockToOwner[i] != 0 && counter < _len )\n', '                {\n', '                    result[counter] = i;\n', '                    counter++;\n', '                }\n', '            }\n', '        }\n', '        else\n', '        {\n', '            for (uint x = _bid; x > (_bid-_len); x--)\n', '            {\n', '                if( blockToOwner[x] != 0 && counter < _len )\n', '                {\n', '                    result[counter] = x;\n', '                    counter++;\n', '                }\n', '            }\n', '        }\n', '        \n', '        return result;\n', '    }\n', '    \n', '    /**\n', '     * @dev Get a certain number of an addresses blocks in ascending order.\n', '     */\n', '    function getBlocksByOwner(uint _bid, uint _len, address _owner) external view returns(uint[])\n', '    {\n', '        uint[] memory result = new uint[](_len);\n', '        uint counter = 0;\n', '        for (uint i = _bid; i < (_bid+_len); i++)\n', '        {\n', '            if (blockToOwner[i] == _owner)\n', '            {\n', '                result[counter] = i;\n', '                counter++;\n', '            }\n', '        }\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @dev Get a certain number of an addresses blocks in descending order.\n', '     */\n', '    function getBlocksByOwnerDesc(uint _bid, uint _len, address _owner) external view returns(uint[])\n', '    {\n', '        uint[] memory result = new uint[](_len);\n', '        uint counter = 0;\n', '        \n', '        if(_bid == 0)\n', '        {\n', '            for (uint i = blocks.length; i > (blocks.length-_len); i--)\n', '            {\n', '                if (blockToOwner[i] == _owner && counter < _len )\n', '                {\n', '                    result[counter] = i;\n', '                    counter++;\n', '                }\n', '            }\n', '        }\n', '        else\n', '        {\n', '            for (uint x = _bid; x > (_bid-_len); x--)\n', '            {\n', '                if (blockToOwner[x] == _owner && counter < _len )\n', '                {\n', '                    result[counter] = x;\n', '                    counter++;\n', '                }\n', '            }\n', '        }\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @dev Get all blocks for a given address.\n', '     */\n', '    function getAllBlocksByOwner(address _owner) external view returns(uint[])\n', '    {\n', '        uint[] memory result = new uint[](ownerBlockCount[_owner]);\n', '        uint counter = 0;\n', '        for (uint i = 0; i < blocks.length; i++)\n', '        {\n', '            if (blockToOwner[i] == _owner)\n', '            {\n', '                result[counter] = i;\n', '                counter++;\n', '            }\n', '        }\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @dev Return the number of owners an address has.\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256 _balance)\n', '    {\n', '        return ownerBlockCount[_owner];\n', '    }\n', '    \n', '    /**\n', '     * @dev Return the address of a blocks owner.\n', '     */\n', '    function ownerOf(uint256 _tokenId) public view returns (address _owner)\n', '    {\n', '        return blockToOwner[_tokenId];\n', '    }\n', '    \n', '    /**\n', '     * @dev Return the address of a blocks owner.\n', '     */\n', '    function getUserPair( address _user ) public view returns (address, string)\n', '    {\n', '        return ( _user, addressToHandle[_user] );\n', '    }\n', '}']
