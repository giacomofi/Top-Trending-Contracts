['pragma solidity 0.4.25;\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    function _validateAddress(address _addr) internal pure {\n', '        require(_addr != address(0), "invalid address");\n', '    }\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "not a contract owner");\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _validateAddress(newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    modifier whenNotPaused() {\n', '        require(!paused, "contract is paused");\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused() {\n', '        require(paused, "contract is not paused");\n', '        _;\n', '    }\n', '\n', '    function pause() public onlyOwner whenNotPaused {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', 'contract Controllable is Ownable {\n', '    mapping(address => bool) controllers;\n', '\n', '    modifier onlyController {\n', '        require(_isController(msg.sender), "no controller rights");\n', '        _;\n', '    }\n', '\n', '    function _isController(address _controller) internal view returns (bool) {\n', '        return controllers[_controller];\n', '    }\n', '\n', '    function _setControllers(address[] _controllers) internal {\n', '        for (uint256 i = 0; i < _controllers.length; i++) {\n', '            _validateAddress(_controllers[i]);\n', '            controllers[_controllers[i]] = true;\n', '        }\n', '    }\n', '}\n', '\n', 'contract Upgradable is Controllable {\n', '    address[] internalDependencies;\n', '    address[] externalDependencies;\n', '\n', '    function getInternalDependencies() public view returns(address[]) {\n', '        return internalDependencies;\n', '    }\n', '\n', '    function getExternalDependencies() public view returns(address[]) {\n', '        return externalDependencies;\n', '    }\n', '\n', '    function setInternalDependencies(address[] _newDependencies) public onlyOwner {\n', '        for (uint256 i = 0; i < _newDependencies.length; i++) {\n', '            _validateAddress(_newDependencies[i]);\n', '        }\n', '        internalDependencies = _newDependencies;\n', '    }\n', '\n', '    function setExternalDependencies(address[] _newDependencies) public onlyOwner {\n', '        externalDependencies = _newDependencies;\n', '        _setControllers(_newDependencies);\n', '    }\n', '}\n', '\n', 'contract HumanOriented {\n', '    modifier onlyHuman() {\n', '        require(msg.sender == tx.origin, "not a human");\n', '        _;\n', '    }\n', '}\n', '\n', '\n', 'contract Events {\n', '    function emitBattleEnded(uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256) external;\n', '    function emitBattleDragonsDetails(uint256, uint8, uint32, uint8, uint32) external;\n', '    function emitBattleHealthAndMana(uint256, uint32, uint32, uint32, uint32, uint32, uint32, uint32, uint32) external;\n', '    function emitBattleSkills(uint256, uint32, uint32, uint32, uint32, uint32, uint32, uint32, uint32, uint32, uint32) external;\n', '    function emitBattleTacticsAndBuffs(uint256, uint8, uint8, uint8, uint8, uint32[5], uint32[5]) external;\n', '    function emitGladiatorBattleEnded(uint256, uint256, address, address, uint256, bool) external;\n', '    function emitGladiatorBattleCreated(uint256, address, uint256, uint256, bool) external;\n', '    function emitGladiatorBattleApplicantAdded(uint256, address, uint256) external;\n', '    function emitGladiatorBattleOpponentSelected(uint256, uint256) external;\n', '    function emitGladiatorBattleCancelled(uint256) external;\n', '    function emitGladiatorBattleBetReturned(uint256, address) external;\n', '    function emitGladiatorBattleOpponentSelectTimeUpdated(uint256, uint256) external;\n', '    function emitGladiatorBattleBlockNumberUpdated(uint256, uint256) external;\n', '    function emitGladiatorBattleSpectatorBetPlaced(uint256, address, bool, uint256, bool) external;\n', '    function emitGladiatorBattleSpectatorBetRemoved(uint256, address) external;\n', '    function emitGladiatorBattleSpectatorRewardPaidOut(uint256, address, uint256, bool) external;\n', '}\n', '\n', 'contract BattleController {\n', '    function startBattle(address, uint256, uint256, uint8[2]) external returns (uint256, uint256, uint256[2]);\n', '    function matchOpponents(uint256) external view returns (uint256[6]);\n', '    function resetDragonBuffs(uint256) external;\n', '}\n', '\n', 'contract Getter {\n', '    function getDragonProfile(uint256) external view returns (bytes32, uint16, uint256, uint8, uint8, uint16, bool, uint32);\n', '    function getDragonTactics(uint256) external view returns (uint8, uint8);\n', '    function getDragonSkills(uint256) external view returns (uint32, uint32, uint32, uint32, uint32);\n', '    function getDragonCurrentHealthAndMana(uint256) external view returns (uint32, uint32, uint8, uint8);\n', '    function getDragonMaxHealthAndMana(uint256) external view returns (uint32, uint32);\n', '    function getDragonBuffs(uint256) external view returns (uint32[5]);\n', '    function getDragonApplicationForGladiatorBattle(uint256) external view returns (uint256, uint8[2], address);\n', '    function getGladiatorBattleParticipants(uint256) external view returns (address, uint256, address, uint256, address, uint256);\n', '}\n', '\n', 'contract GladiatorBattle {\n', '    function create(address, uint256, uint8[2], bool, uint256, uint16, uint256) external returns (uint256);\n', '    function apply(uint256, address, uint256, uint8[2], uint256) external;\n', '    function chooseOpponent(address, uint256, uint256, bytes32) external;\n', '    function autoSelectOpponent(uint256, bytes32) external returns (uint256);\n', '    function start(uint256) external returns (uint256, uint256, uint256, bool);\n', '    function cancel(address, uint256, bytes32) external;\n', '    function returnBet(address, uint256) external;\n', '    function addTimeForOpponentSelect(address, uint256) external returns (uint256);\n', '    function updateBattleBlockNumber(uint256) external returns (uint256);\n', '}\n', '\n', 'contract GladiatorBattleSpectators {\n', '    function placeBet(address, uint256, bool, uint256, uint256) external returns (bool);\n', '    function removeBet(address, uint256) external;\n', '    function requestReward(address, uint256) external returns (uint256, bool);\n', '}\n', '\n', '\n', '\n', 'contract MainBattle is Upgradable, Pausable, HumanOriented {\n', '    BattleController battleController;\n', '    Getter getter;\n', '    GladiatorBattle gladiatorBattle;\n', '    GladiatorBattleSpectators gladiatorBattleSpectators;\n', '    Events events;\n', '\n', '    function matchOpponents(uint256 _id) external view returns (uint256[6]) {\n', '        return battleController.matchOpponents(_id);\n', '    }\n', '\n', '    function battle(\n', '        uint256 _id,\n', '        uint256 _opponentId,\n', '        uint8[2] _tactics\n', '    ) external onlyHuman whenNotPaused {\n', '        uint32 _attackerInitHealth;\n', '        uint32 _attackerInitMana;\n', '        uint32 _opponentInitHealth;\n', '        uint32 _opponentInitMana;\n', '        (_attackerInitHealth, _attackerInitMana, , ) = getter.getDragonCurrentHealthAndMana(_id);\n', '        (_opponentInitHealth, _opponentInitMana, , ) = getter.getDragonCurrentHealthAndMana(_opponentId);\n', '\n', '        uint256 _battleId;\n', '        uint256 _seed;\n', '        uint256[2] memory _winnerLooserIds;\n', '        (\n', '            _battleId,\n', '            _seed,\n', '            _winnerLooserIds\n', '        ) = battleController.startBattle(msg.sender, _id, _opponentId, _tactics);\n', '\n', '        _emitBattleEventsPure(\n', '            _id,\n', '            _opponentId,\n', '            _tactics,\n', '            _winnerLooserIds,\n', '            _battleId,\n', '            _seed,\n', '            _attackerInitHealth,\n', '            _attackerInitMana,\n', '            _opponentInitHealth,\n', '            _opponentInitMana\n', '        );\n', '    }\n', '\n', '    function _emitBattleEventsPure(\n', '        uint256 _id,\n', '        uint256 _opponentId,\n', '        uint8[2] _tactics,\n', '        uint256[2] _winnerLooserIds,\n', '        uint256 _battleId,\n', '        uint256 _seed,\n', '        uint32 _attackerInitHealth,\n', '        uint32 _attackerInitMana,\n', '        uint32 _opponentInitHealth,\n', '        uint32 _opponentInitMana\n', '    ) internal {\n', '        _saveBattleHealthAndMana(\n', '            _battleId,\n', '            _id,\n', '            _opponentId,\n', '            _attackerInitHealth,\n', '            _attackerInitMana,\n', '            _opponentInitHealth,\n', '            _opponentInitMana\n', '        );\n', '        _emitBattleEvents(\n', '            _id,\n', '            _opponentId,\n', '            _tactics,\n', '            [0, 0],\n', '            _winnerLooserIds[0],\n', '            _winnerLooserIds[1],\n', '            _battleId,\n', '            _seed,\n', '            0\n', '        );\n', '    }\n', '\n', '    function _emitBattleEventsForGladiatorBattle(\n', '        uint256 _battleId,\n', '        uint256 _seed,\n', '        uint256 _gladiatorBattleId\n', '    ) internal {\n', '        uint256 _firstDragonId;\n', '        uint256 _secondDragonId;\n', '        uint256 _winnerDragonId;\n', '        (\n', '          , _firstDragonId,\n', '          , _secondDragonId,\n', '          , _winnerDragonId\n', '        ) = getter.getGladiatorBattleParticipants(_gladiatorBattleId);\n', '\n', '        _saveBattleHealthAndManaFull(\n', '            _battleId,\n', '            _firstDragonId,\n', '            _secondDragonId\n', '        );\n', '\n', '        uint8[2] memory _tactics;\n', '        uint8[2] memory _tactics2;\n', '\n', '        ( , _tactics, ) = getter.getDragonApplicationForGladiatorBattle(_firstDragonId);\n', '        ( , _tactics2, ) = getter.getDragonApplicationForGladiatorBattle(_secondDragonId);\n', '\n', '        _emitBattleEvents(\n', '            _firstDragonId,\n', '            _secondDragonId,\n', '            _tactics,\n', '            _tactics2,\n', '            _winnerDragonId,\n', '            _winnerDragonId != _firstDragonId ? _firstDragonId : _secondDragonId,\n', '            _battleId,\n', '            _seed,\n', '            _gladiatorBattleId\n', '        );\n', '    }\n', '\n', '    function _emitBattleEvents(\n', '        uint256 _id,\n', '        uint256 _opponentId,\n', '        uint8[2] _tactics,\n', '        uint8[2] _tactics2,\n', '        uint256 _winnerId,\n', '        uint256 _looserId,\n', '        uint256 _battleId,\n', '        uint256 _seed,\n', '        uint256 _gladiatorBattleId\n', '    ) internal {\n', '        _saveBattleData(\n', '            _battleId,\n', '            _seed,\n', '            _id,\n', '            _winnerId,\n', '            _looserId,\n', '            _gladiatorBattleId\n', '        );\n', '\n', '        _saveBattleDragonsDetails(\n', '            _battleId,\n', '            _id,\n', '            _opponentId\n', '        );\n', '\n', '        _saveBattleSkills(\n', '            _battleId,\n', '            _id,\n', '            _opponentId\n', '        );\n', '        _saveBattleTacticsAndBuffs(\n', '            _battleId,\n', '            _id,\n', '            _opponentId,\n', '            _tactics[0],\n', '            _tactics[1],\n', '            _tactics2[0],\n', '            _tactics2[1]\n', '        );\n', '    }\n', '\n', '    function _saveBattleData(\n', '        uint256 _battleId,\n', '        uint256 _seed,\n', '        uint256 _attackerId,\n', '        uint256 _winnerId,\n', '        uint256 _looserId,\n', '        uint256 _gladiatorBattleId\n', '    ) internal {\n', '\n', '        events.emitBattleEnded(\n', '            _battleId,\n', '            now,\n', '            _seed,\n', '            _attackerId,\n', '            _winnerId,\n', '            _looserId,\n', '            _gladiatorBattleId > 0,\n', '            _gladiatorBattleId\n', '        );\n', '    }\n', '\n', '    function _saveBattleDragonsDetails(\n', '        uint256 _battleId,\n', '        uint256 _winnerId,\n', '        uint256 _looserId\n', '    ) internal {\n', '        uint8 _winnerLevel;\n', '        uint32 _winnerCoolness;\n', '        uint8 _looserLevel;\n', '        uint32 _looserCoolness;\n', '        (, , , _winnerLevel, , , , _winnerCoolness) = getter.getDragonProfile(_winnerId);\n', '        (, , , _looserLevel, , , , _looserCoolness) = getter.getDragonProfile(_looserId);\n', '\n', '        events.emitBattleDragonsDetails(\n', '            _battleId,\n', '            _winnerLevel,\n', '            _winnerCoolness,\n', '            _looserLevel,\n', '            _looserCoolness\n', '        );\n', '    }\n', '\n', '    function _saveBattleHealthAndManaFull(\n', '        uint256 _battleId,\n', '        uint256 _firstId,\n', '        uint256 _secondId\n', '    ) internal {\n', '        uint32 _firstInitHealth;\n', '        uint32 _firstInitMana;\n', '        uint32 _secondInitHealth;\n', '        uint32 _secondInitMana;\n', '\n', '        (_firstInitHealth, _firstInitMana) = getter.getDragonMaxHealthAndMana(_firstId);\n', '        (_secondInitHealth, _secondInitMana) = getter.getDragonMaxHealthAndMana(_secondId);\n', '\n', '        _saveBattleHealthAndMana(\n', '            _battleId,\n', '            _firstId,\n', '            _secondId,\n', '            _firstInitHealth,\n', '            _firstInitMana,\n', '            _secondInitHealth,\n', '            _secondInitMana\n', '        );\n', '    }\n', '\n', '    function _saveBattleHealthAndMana(\n', '        uint256 _battleId,\n', '        uint256 _attackerId,\n', '        uint256 _opponentId,\n', '        uint32 _attackerInitHealth,\n', '        uint32 _attackerInitMana,\n', '        uint32 _opponentInitHealth,\n', '        uint32 _opponentInitMana\n', '    ) internal {\n', '        uint32 _attackerMaxHealth;\n', '        uint32 _attackerMaxMana;\n', '        uint32 _opponentMaxHealth;\n', '        uint32 _opponentMaxMana;\n', '        (_attackerMaxHealth, _attackerMaxMana) = getter.getDragonMaxHealthAndMana(_attackerId);\n', '        (_opponentMaxHealth, _opponentMaxMana) = getter.getDragonMaxHealthAndMana(_opponentId);\n', '\n', '        events.emitBattleHealthAndMana(\n', '            _battleId,\n', '            _attackerMaxHealth,\n', '            _attackerMaxMana,\n', '            _attackerInitHealth,\n', '            _attackerInitMana,\n', '            _opponentMaxHealth,\n', '            _opponentMaxMana,\n', '            _opponentInitHealth,\n', '            _opponentInitMana\n', '        );\n', '    }\n', '\n', '    function _saveBattleSkills(\n', '        uint256 _battleId,\n', '        uint256 _attackerId,\n', '        uint256 _opponentId\n', '    ) internal {\n', '        uint32 _attackerAttack;\n', '        uint32 _attackerDefense;\n', '        uint32 _attackerStamina;\n', '        uint32 _attackerSpeed;\n', '        uint32 _attackerIntelligence;\n', '        uint32 _opponentAttack;\n', '        uint32 _opponentDefense;\n', '        uint32 _opponentStamina;\n', '        uint32 _opponentSpeed;\n', '        uint32 _opponentIntelligence;\n', '\n', '        (\n', '            _attackerAttack,\n', '            _attackerDefense,\n', '            _attackerStamina,\n', '            _attackerSpeed,\n', '            _attackerIntelligence\n', '        ) = getter.getDragonSkills(_attackerId);\n', '        (\n', '            _opponentAttack,\n', '            _opponentDefense,\n', '            _opponentStamina,\n', '            _opponentSpeed,\n', '            _opponentIntelligence\n', '        ) = getter.getDragonSkills(_opponentId);\n', '\n', '        events.emitBattleSkills(\n', '            _battleId,\n', '            _attackerAttack,\n', '            _attackerDefense,\n', '            _attackerStamina,\n', '            _attackerSpeed,\n', '            _attackerIntelligence,\n', '            _opponentAttack,\n', '            _opponentDefense,\n', '            _opponentStamina,\n', '            _opponentSpeed,\n', '            _opponentIntelligence\n', '        );\n', '    }\n', '\n', '    function _saveBattleTacticsAndBuffs(\n', '        uint256 _battleId,\n', '        uint256 _id,\n', '        uint256 _opponentId,\n', '        uint8 _attackerMeleeChance,\n', '        uint8 _attackerAttackChance,\n', '        uint8 _opponentMeleeChance,\n', '        uint8 _opponentAttackChance\n', '    ) internal {\n', '        if (_opponentMeleeChance == 0 || _opponentAttackChance == 0) {\n', '            (\n', '                _opponentMeleeChance,\n', '                _opponentAttackChance\n', '            ) = getter.getDragonTactics(_opponentId);\n', '        }\n', '\n', '        uint32[5] memory _buffs = getter.getDragonBuffs(_id);\n', '        uint32[5] memory _opponentBuffs = getter.getDragonBuffs(_opponentId);\n', '\n', '        battleController.resetDragonBuffs(_id);\n', '        battleController.resetDragonBuffs(_opponentId);\n', '\n', '        events.emitBattleTacticsAndBuffs(\n', '            _battleId,\n', '            _attackerMeleeChance,\n', '            _attackerAttackChance,\n', '            _opponentMeleeChance,\n', '            _opponentAttackChance,\n', '            _buffs,\n', '            _opponentBuffs\n', '        );\n', '    }\n', '\n', '    // GLADIATOR BATTLES\n', '\n', '    function createGladiatorBattle(\n', '        uint256 _dragonId,\n', '        uint8[2] _tactics,\n', '        bool _isGold,\n', '        uint256 _bet,\n', '        uint16 _counter\n', '    ) external payable onlyHuman whenNotPaused {\n', '        address(gladiatorBattle).transfer(msg.value);\n', '        gladiatorBattle.create(msg.sender, _dragonId, _tactics, _isGold, _bet, _counter, msg.value);\n', '    }\n', '\n', '    function applyForGladiatorBattle(\n', '        uint256 _battleId,\n', '        uint256 _dragonId,\n', '        uint8[2] _tactics\n', '    ) external payable onlyHuman whenNotPaused {\n', '        address(gladiatorBattle).transfer(msg.value);\n', '        gladiatorBattle.apply(_battleId, msg.sender, _dragonId, _tactics, msg.value);\n', '    }\n', '\n', '    function chooseOpponentForGladiatorBattle(\n', '        uint256 _battleId,\n', '        uint256 _opponentId,\n', '        bytes32 _applicantsHash\n', '    ) external onlyHuman whenNotPaused {\n', '        gladiatorBattle.chooseOpponent(msg.sender, _battleId, _opponentId, _applicantsHash);\n', '    }\n', '\n', '    function autoSelectOpponentForGladiatorBattle(\n', '        uint256 _battleId,\n', '        bytes32 _applicantsHash\n', '    ) external onlyHuman whenNotPaused {\n', '        gladiatorBattle.autoSelectOpponent(_battleId, _applicantsHash);\n', '    }\n', '\n', '    function _emitGladiatorBattleEnded(\n', '        uint256 _gladiatorBattleId,\n', '        uint256 _battleId,\n', '        address _winner,\n', '        address _looser,\n', '        uint256 _reward,\n', '        bool _isGold\n', '    ) internal {\n', '        events.emitGladiatorBattleEnded(\n', '            _gladiatorBattleId,\n', '            _battleId,\n', '            _winner,\n', '            _looser,\n', '            _reward,\n', '            _isGold\n', '        );\n', '    }\n', '\n', '    function startGladiatorBattle(\n', '        uint256 _gladiatorBattleId\n', '    ) external onlyHuman whenNotPaused returns (uint256) {\n', '        (\n', '            uint256 _seed,\n', '            uint256 _battleId,\n', '            uint256 _reward,\n', '            bool _isGold\n', '        ) = gladiatorBattle.start(_gladiatorBattleId);\n', '\n', '        (\n', '            address _firstUser, ,\n', '            address _secondUser, ,\n', '            address _winner,\n', '            uint256 _winnerId\n', '        ) = getter.getGladiatorBattleParticipants(_gladiatorBattleId);\n', '\n', '        _emitGladiatorBattleEnded(\n', '            _gladiatorBattleId,\n', '            _battleId,\n', '            _winner,\n', '            _winner != _firstUser ? _firstUser : _secondUser,\n', '            _reward,\n', '            _isGold\n', '        );\n', '\n', '        _emitBattleEventsForGladiatorBattle(\n', '            _battleId,\n', '            _seed,\n', '            _gladiatorBattleId\n', '        );\n', '\n', '        return _winnerId;\n', '    }\n', '\n', '    function cancelGladiatorBattle(\n', '        uint256 _battleId,\n', '        bytes32 _applicantsHash\n', '    ) external onlyHuman whenNotPaused {\n', '        gladiatorBattle.cancel(msg.sender, _battleId, _applicantsHash);\n', '    }\n', '\n', '    function returnBetFromGladiatorBattle(uint256 _battleId) external onlyHuman whenNotPaused {\n', '        gladiatorBattle.returnBet(msg.sender, _battleId);\n', '    }\n', '\n', '    function addTimeForOpponentSelectForGladiatorBattle(uint256 _battleId) external onlyHuman whenNotPaused {\n', '        gladiatorBattle.addTimeForOpponentSelect(msg.sender, _battleId);\n', '    }\n', '\n', '    function updateBlockNumberOfGladiatorBattle(uint256 _battleId) external onlyHuman whenNotPaused {\n', '        gladiatorBattle.updateBattleBlockNumber(_battleId);\n', '    }\n', '\n', '    function placeSpectatorBetOnGladiatorBattle(\n', '        uint256 _battleId,\n', '        bool _willCreatorWin,\n', '        uint256 _value\n', '    ) external payable onlyHuman whenNotPaused {\n', '        address(gladiatorBattleSpectators).transfer(msg.value);\n', '        gladiatorBattleSpectators.placeBet(msg.sender, _battleId, _willCreatorWin, _value, msg.value);\n', '    }\n', '\n', '    function removeSpectatorBetFromGladiatorBattle(\n', '        uint256 _battleId\n', '    ) external onlyHuman whenNotPaused {\n', '        gladiatorBattleSpectators.removeBet(msg.sender, _battleId);\n', '    }\n', '\n', '    function requestSpectatorRewardForGladiatorBattle(\n', '        uint256 _battleId\n', '    ) external onlyHuman whenNotPaused {\n', '        gladiatorBattleSpectators.requestReward(msg.sender, _battleId);\n', '    }\n', '\n', '    // UPDATE CONTRACT\n', '\n', '    function setInternalDependencies(address[] _newDependencies) public onlyOwner {\n', '        super.setInternalDependencies(_newDependencies);\n', '\n', '        battleController = BattleController(_newDependencies[0]);\n', '        gladiatorBattle = GladiatorBattle(_newDependencies[1]);\n', '        gladiatorBattleSpectators = GladiatorBattleSpectators(_newDependencies[2]);\n', '        getter = Getter(_newDependencies[3]);\n', '        events = Events(_newDependencies[4]);\n', '    }\n', '}']