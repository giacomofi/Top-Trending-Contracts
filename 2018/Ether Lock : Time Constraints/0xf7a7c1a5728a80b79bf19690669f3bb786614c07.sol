['pragma solidity 0.4.24;\n', '// ----------------------------------------------------------------------------\n', '// &#39;RIPT&#39; token crowdsale contract\n', '//\n', '// Deployed to : 0xef9EcD8a0A2E4b31d80B33E243761f4D93c990a8\n', '// Symbol      : RIPT\n', '// Name        : RiptideCoin\n', '//\n', '// Copyright (c) Riptidecoin.com The MIT Licence.\n', '// Contract crafted by: GDO Infotech Pvt Ltd (https://GDO.co.in) \n', '// ----------------------------------------------------------------------------\n', '   \n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0 uint256 c = a / b;\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract token { function transfer(address receiver, uint amount){  } }\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // uint256 durationInMinutes;\n', '  // address where funds are collected\n', '  address public wallet;\n', '  // token address\n', '  address addressOfTokenUsedAsReward;\n', '\n', '  token tokenReward;\n', '\n', '\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '  uint256 public price = 42000;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale() {\n', '    //You will change this to your wallet where you need the ETH \n', '    wallet = 0x423A3438cF5b954689a85D45B302A5D1F3C763D4;\n', '    // durationInMinutes = _durationInMinutes;\n', '    //Here will come the checksum address we got\n', '    addressOfTokenUsedAsReward = 0xdd007278B667F6bef52fD0a4c23604aA1f96039a;\n', '\n', '\n', '    tokenReward = token(addressOfTokenUsedAsReward);\n', '  }\n', '\n', '  bool started = false;\n', ' /*    \n', '  function startSale(uint256 delay){\n', '    if (msg.sender != wallet || started) throw;\n', '    startTime = now + delay * 1 minutes;\n', '    endTime = startTime + 45 * 24 * 60 * 1 minutes;\n', '    started = true;\n', '  }\n', '*/\n', ' \n', '    function startSale(uint256 Start,uint256 End,uint256 amount) public\n', '    {\n', '     if (msg.sender != wallet || started) throw;\n', '     require(Start < End);\n', '  require(now < Start);\n', '  //require(balanceOf[msg.sender] > amount);\n', '  startTime=Start;\n', '  endTime=End;\n', '  tokenReward.transfer(this,amount);\n', '    }\n', ' function stopSale()  public{\n', '            require(msg.sender == wallet);\n', '            endTime = 0;\n', '        }\n', '  function setPrice(uint256 _price){\n', '    if(msg.sender != wallet) throw;\n', '    price = _price;\n', '  }\n', ' function manualEtherWithdraw() public{\n', '      require(msg.sender == wallet); \n', '   if (!wallet.send(address(this).balance)) {\n', '     throw;\n', '   }\n', '  }\n', '  // fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) payable {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be sent\n', '    uint256 tokens = (weiAmount/\n', '10**10) * price;//weiamount * price \n', '\n', '    //bonus schedule\n', '    // if(now < startTime + 1*7*24*60* 1 minutes){//First week\n', '    //   tokens += (tokens * 60) / 100;//60%\n', '    // }else if(now < startTime + 2*7*24*60* 1 minutes){//Second week\n', '    //   tokens += (tokens * 40) / 100;//40%\n', '    // }else if(now < startTime + 3*7*24*60* 1 minutes){//3rd week\n', '    //   tokens += (tokens * 30) / 100;//30% and so on\n', '    // }else if(now < startTime + 4*7*24*60* 1 minutes){\n', '    //   tokens += (tokens * 20) / 100;\n', '    // }else if(now < startTime + 5*7*24*60* 1 minutes){\n', '    //   tokens += (tokens * 10) / 100;\n', '    // }\n', '    /*\n', '    if(now<startTime+27*24*60* 1 minutes){\n', '      if(weiAmount>=10**18)\n', '        tokens+=(tokens*60)/100;\n', '      else if(weiAmount>=5*10**17)\n', '        tokens+=(tokens*25)/100;\n', '      else if(weiAmount>=4*10**17)\n', '        tokens+=(tokens*20)/100;\n', '      else if(weiAmount>=3*10**17)\n', '        tokens+=(tokens*15)/100;\n', '      else if(weiAmount>=2*10**17)\n', '        tokens+=(tokens*10)/100;\n', '      else if(weiAmount>=10**17)\n', '        tokens+=(tokens*5)/100;\n', '    }\n', '    */\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    tokenReward.transfer(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    // wallet.transfer(msg.value);\n', '    if (!wallet.send(msg.value)) {\n', '      throw;\n', '    }\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '  function withdrawTokens(uint256 _amount) {\n', '    if(msg.sender!=wallet) throw;\n', '    tokenReward.transfer(wallet,_amount);\n', '  }\n', '}']
['pragma solidity 0.4.24;\n', '// ----------------------------------------------------------------------------\n', "// 'RIPT' token crowdsale contract\n", '//\n', '// Deployed to : 0xef9EcD8a0A2E4b31d80B33E243761f4D93c990a8\n', '// Symbol      : RIPT\n', '// Name        : RiptideCoin\n', '//\n', '// Copyright (c) Riptidecoin.com The MIT Licence.\n', '// Contract crafted by: GDO Infotech Pvt Ltd (https://GDO.co.in) \n', '// ----------------------------------------------------------------------------\n', '   \n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0 uint256 c = a / b;\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract token { function transfer(address receiver, uint amount){  } }\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // uint256 durationInMinutes;\n', '  // address where funds are collected\n', '  address public wallet;\n', '  // token address\n', '  address addressOfTokenUsedAsReward;\n', '\n', '  token tokenReward;\n', '\n', '\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '  uint256 public price = 42000;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale() {\n', '    //You will change this to your wallet where you need the ETH \n', '    wallet = 0x423A3438cF5b954689a85D45B302A5D1F3C763D4;\n', '    // durationInMinutes = _durationInMinutes;\n', '    //Here will come the checksum address we got\n', '    addressOfTokenUsedAsReward = 0xdd007278B667F6bef52fD0a4c23604aA1f96039a;\n', '\n', '\n', '    tokenReward = token(addressOfTokenUsedAsReward);\n', '  }\n', '\n', '  bool started = false;\n', ' /*    \n', '  function startSale(uint256 delay){\n', '    if (msg.sender != wallet || started) throw;\n', '    startTime = now + delay * 1 minutes;\n', '    endTime = startTime + 45 * 24 * 60 * 1 minutes;\n', '    started = true;\n', '  }\n', '*/\n', ' \n', '    function startSale(uint256 Start,uint256 End,uint256 amount) public\n', '    {\n', '     if (msg.sender != wallet || started) throw;\n', '     require(Start < End);\n', '  require(now < Start);\n', '  //require(balanceOf[msg.sender] > amount);\n', '  startTime=Start;\n', '  endTime=End;\n', '  tokenReward.transfer(this,amount);\n', '    }\n', ' function stopSale()  public{\n', '            require(msg.sender == wallet);\n', '            endTime = 0;\n', '        }\n', '  function setPrice(uint256 _price){\n', '    if(msg.sender != wallet) throw;\n', '    price = _price;\n', '  }\n', ' function manualEtherWithdraw() public{\n', '      require(msg.sender == wallet); \n', '   if (!wallet.send(address(this).balance)) {\n', '     throw;\n', '   }\n', '  }\n', '  // fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) payable {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be sent\n', '    uint256 tokens = (weiAmount/\n', '10**10) * price;//weiamount * price \n', '\n', '    //bonus schedule\n', '    // if(now < startTime + 1*7*24*60* 1 minutes){//First week\n', '    //   tokens += (tokens * 60) / 100;//60%\n', '    // }else if(now < startTime + 2*7*24*60* 1 minutes){//Second week\n', '    //   tokens += (tokens * 40) / 100;//40%\n', '    // }else if(now < startTime + 3*7*24*60* 1 minutes){//3rd week\n', '    //   tokens += (tokens * 30) / 100;//30% and so on\n', '    // }else if(now < startTime + 4*7*24*60* 1 minutes){\n', '    //   tokens += (tokens * 20) / 100;\n', '    // }else if(now < startTime + 5*7*24*60* 1 minutes){\n', '    //   tokens += (tokens * 10) / 100;\n', '    // }\n', '    /*\n', '    if(now<startTime+27*24*60* 1 minutes){\n', '      if(weiAmount>=10**18)\n', '        tokens+=(tokens*60)/100;\n', '      else if(weiAmount>=5*10**17)\n', '        tokens+=(tokens*25)/100;\n', '      else if(weiAmount>=4*10**17)\n', '        tokens+=(tokens*20)/100;\n', '      else if(weiAmount>=3*10**17)\n', '        tokens+=(tokens*15)/100;\n', '      else if(weiAmount>=2*10**17)\n', '        tokens+=(tokens*10)/100;\n', '      else if(weiAmount>=10**17)\n', '        tokens+=(tokens*5)/100;\n', '    }\n', '    */\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    tokenReward.transfer(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    // wallet.transfer(msg.value);\n', '    if (!wallet.send(msg.value)) {\n', '      throw;\n', '    }\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '  function withdrawTokens(uint256 _amount) {\n', '    if(msg.sender!=wallet) throw;\n', '    tokenReward.transfer(wallet,_amount);\n', '  }\n', '}']
