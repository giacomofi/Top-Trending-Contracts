['pragma solidity ^0.4.23;\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic, Ownable {\n', '  using SafeMath for uint256;\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', 'contract LTE is Ownable, MintableToken {\n', '  using SafeMath for uint256;    \n', '  string public constant name = "LTE";\n', '  string public constant symbol = "LTE";\n', '  uint32 public constant decimals = 18;\n', '  address public addressBounty;\n', '  address public addressAirdrop;\n', '  address public addressTeam;\n', '  address public addressAdvisors;\n', '  address public addressDividendReserve;\n', '  address public addressPrivateSale;\n', '  uint256 public summBounty;\n', '  uint256 public summAirdrop;\n', '  uint256 public summTeam;\n', '  uint256 public summAdvisors;\n', '  uint256 public summDividendReserve;\n', '  uint256 public summPrivateSale;\n', '\n', '  function LTE() public {\n', '    addressBounty = 0xe70D1a8D548aFCdB4B5D162DaF8668E1E97796FB; \n', '    addressAirdrop = 0x024d96Ad09a076A88F0EA716B38EdB36B8A636DD;\n', '    addressTeam = 0xCe1932A41aaC4D8d838a41f2D10E4b154f719Eb1; \n', '    addressAdvisors = 0x9f3D002255B96F39F96961F40FdD2a1C3d40B919; \n', '    addressDividendReserve = 0xB647e8157270cCc5dB202FFa7C5CC80992645Ec7; \n', '    addressPrivateSale = 0x953b3f258f441BC49d0a6f21f41E86E5ab9e6715; \n', '\n', '    // Token distribution\n', '    summBounty = 779600 * (10 ** uint256(decimals));\n', '    summAirdrop = 779600 * (10 ** uint256(decimals));\n', '    summTeam = 9745000 * (10 ** uint256(decimals));\n', '    summAdvisors = 1949000 * (10 ** uint256(decimals));\n', '    summDividendReserve = 12160400 * (10 ** uint256(decimals));\n', '    summPrivateSale = 8000000 * (10 ** uint256(decimals));\n', '\n', '    // Founders and supporters initial Allocations\n', '    mint(addressBounty, summBounty);\n', '    mint(addressAirdrop, summAirdrop);\n', '    mint(addressTeam, summTeam);\n', '    mint(addressAdvisors, summAdvisors);\n', '    mint(addressDividendReserve, summDividendReserve);\n', '    mint(addressPrivateSale, summPrivateSale);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where Contributors can make\n', ' * token Contributions and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive. The contract requires a MintableToken that will be\n', ' * minted as contributions arrive, note that the crowdsale contract\n', ' * must be owner of the token in order to be able to mint it.\n', ' */\n', 'contract Crowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '  LTE public token;\n', '  \n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public   startPreICOStage1;\n', '  uint256 public   endPreICOStage1;\n', '  uint256 public   startPreICOStage2;\n', '  uint256 public   endPreICOStage2;  \n', '  uint256 public   startPreICOStage3;\n', '  uint256 public   endPreICOStage3;   \n', '  uint256 public   startICOStage1;\n', '  uint256 public   endICOStage1;\n', '  uint256 public   startICOStage2;\n', '  uint256 public   endICOStage2; \n', '  \n', '  //token distribution\n', '  // uint256 public maxIco;\n', '  uint256 public  sumPreICO1;\n', '  uint256 public  sumPreICO2;\n', '  uint256 public  sumPreICO3;\n', '  uint256 public  sumICO1;\n', '  uint256 public  sumICO2;\n', '  \n', '  //Hard cap\n', '  uint256 public  sumHardCapPreICO1;\n', '  uint256 public  sumHardCapPreICO2;\n', '  uint256 public  sumHardCapPreICO3;\n', '  uint256 public  sumHardCapICO1;\n', '  uint256 public  sumHardCapICO2;\n', '  \n', '  uint256 public totalSoldTokens;\n', '  //uint256 public minimumContribution;\n', '  // how many token units a Contributor gets per wei\n', '  uint256 public rateIco;  \n', '  // address where funds are collected\n', '  address public wallet;\n', '  \n', '/**\n', '* event for token Procurement logging\n', '* @param contributor who Pledged for the tokens\n', '* @param beneficiary who got the tokens\n', '* @param value weis Contributed for Procurement\n', '* @param amount amount of tokens Procured\n', '*/\n', '  event TokenProcurement(address indexed contributor, address indexed beneficiary, uint256 value, uint256 amount);\n', '  \n', '  function Crowdsale() public {\n', '    \n', '    token = createTokenContract();\n', '    // rate;\n', '    rateIco = 2286;\t\n', '    // start and end timestamps where investments are allowed\n', '    //start/end for stage of ICO\n', '    startPreICOStage1 = 1532908800; // July      30 2018 00:00:00 +0000\n', '    endPreICOStage1   = 1533859200; // August    10 2018 00:00:00 +0000\n', '    startPreICOStage2 = 1533859200; // August    10 2018 00:00:00 +0000\n', '    endPreICOStage2   = 1534723200; // August    20 2018 00:00:00 +0000\n', '    startPreICOStage3 = 1534723200; // August    20 2018 00:00:00 +0000\n', '    endPreICOStage3   = 1535587200; // August    30 2018 00:00:00 +0000\n', '    startICOStage1    = 1535587200; // August    30 2018 00:00:00 +0000\n', '    endICOStage1      = 1536105600; // September 5 2018 00:00:00 +0000\n', '    startICOStage2    = 1536105600; // September 5 2018 00:00:00 +0000\n', '    endICOStage2      = 1536537600; // September 10 2018 00:00:00 +0000    \n', '\n', '    sumHardCapPreICO1 = 3900000 * 1 ether;\n', '    sumHardCapPreICO2 = 5000000 * 1 ether;\n', '    sumHardCapPreICO3 = 5750000 * 1 ether;\n', '    sumHardCapICO1 = 9900000 *  1 ether;\n', '    sumHardCapICO2 = 20000000 * 1 ether;\n', '\n', '    // address where funds are collected\n', '    wallet = 0x6e9f5B0E49A7039bD1d4bdE84e4aF53b8194287d;\n', '  }\n', '\n', '  function setRateIco(uint _rateIco) public onlyOwner  {\n', '    rateIco = _rateIco;\n', '  }   \n', '\n', '  // fallback function can be used to Procure tokens\n', '  function () external payable {\n', '    procureTokens(msg.sender);\n', '  }\n', '  \n', '  function createTokenContract() internal returns (LTE) {\n', '    return new LTE();\n', '  }\n', '\n', '  function getRateIcoWithBonus() public view returns (uint256) {\n', '    uint256 bonus;\n', '    //PreICO   \n', '    if (now >= startPreICOStage1 && now < endPreICOStage1){\n', '      bonus = 30;    \n', '    }     \n', '    if (now >= startPreICOStage2 && now < endPreICOStage2){\n', '      bonus = 25;    \n', '    }        \n', '    if (now >= startPreICOStage3 && now < endPreICOStage3){\n', '      bonus = 15;    \n', '    }\n', '    if (now >= startICOStage1 && now < endICOStage1){\n', '      bonus = 10;    \n', '    }    \n', '    if (now >= startICOStage2 && now < endICOStage2){\n', '      bonus = 0;    \n', '    }      \n', '    return rateIco + rateIco.mul(bonus).div(100);\n', '  }  \n', '  \n', '  function checkHardCap(uint256 _value) public {\n', '    //PreICO   \n', '    if (now >= startPreICOStage1 && now < endPreICOStage1){\n', '      require(_value.add(sumPreICO1) <= sumHardCapPreICO1);\n', '      sumPreICO1 = sumPreICO1.add(_value);\n', '    }     \n', '    if (now >= startPreICOStage2 && now < endPreICOStage2){\n', '      require(_value.add(sumPreICO2) <= sumHardCapPreICO2);\n', '      sumPreICO2 = sumPreICO2.add(_value);  \n', '    }        \n', '    if (now >= startPreICOStage3 && now < endPreICOStage3){\n', '      require(_value.add(sumPreICO3) <= sumHardCapPreICO3);\n', '      sumPreICO3 = sumPreICO3.add(_value);    \n', '    }\n', '    if (now >= startICOStage1 && now < endICOStage1){\n', '      require(_value.add(sumICO1) <= sumHardCapICO1);\n', '      sumICO1 = sumICO1.add(_value);  \n', '    }    \n', '    if (now >= startICOStage2 && now < endICOStage2){\n', '      require(_value.add(sumICO2) <= sumHardCapICO2);\n', '      sumICO2 = sumICO2.add(_value);   \n', '    }      \n', '  } \n', '  function procureTokens(address _beneficiary) public payable {\n', '    uint256 tokens;\n', '    uint256 weiAmount = msg.value;\n', '    uint256 rate;\n', '    address _this = this;\n', '    require(now >= startPreICOStage1);\n', '    require(now <= endICOStage2);\n', '    require(_beneficiary != address(0));\n', '    rate = getRateIcoWithBonus();\n', '    tokens = weiAmount.mul(rate);\n', '    checkHardCap(tokens);\n', '    //totalSoldTokens = totalSoldTokens.add(tokens);\n', '    wallet.transfer(_this.balance);\n', '    token.mint(_beneficiary, tokens);\n', '    emit TokenProcurement(msg.sender, _beneficiary, weiAmount, tokens);\n', '  }\n', '}']