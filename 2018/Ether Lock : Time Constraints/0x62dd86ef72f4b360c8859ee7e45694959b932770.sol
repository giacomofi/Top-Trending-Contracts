['pragma solidity ^0.4.18;\n', '\n', 'interface token {\n', '    function transfer(address receiver, uint amount) external;\n', '}\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract CandyContract is owned{\n', '\n', '    token public tokenReward;\n', '    uint public totalCandyNo; \n', '\n', '    address public collectorAddress;\n', '    mapping(address => uint256) public balanceOf;\n', '\n', '    event GoalReached(address recipient, uint totalAmountRaised);\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '\n', '    /**\n', '     * Constructor function\n', '     */\n', '    constructor(\n', '        address addressOfTokenUsedAsReward,\n', '        address collector\n', '    ) public {\n', '        totalCandyNo = 1e9;\n', '        tokenReward = token(addressOfTokenUsedAsReward);\n', '        collectorAddress = collector;\n', '    }\n', '\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function () payable public {\n', '        require(totalCandyNo > 0);\n', '        uint amount = getCurrentCandyAmount();\n', '        require(amount > 0); \n', '        require(balanceOf[msg.sender] == 0);\n', '\n', '        totalCandyNo -= amount;\n', '        balanceOf[msg.sender] = amount;\n', '\n', '        tokenReward.transfer(msg.sender, amount * 1e18);\n', '        emit FundTransfer(msg.sender, amount, true);\n', '    }\n', '\n', '    function getCurrentCandyAmount() private view returns (uint amount){\n', '\n', '        if (totalCandyNo >= 7.5e8){\n', '            return 2000;\n', '        }else if (totalCandyNo >= 5e8){\n', '            return 1500;\n', '        }else if (totalCandyNo >= 2.5e8){\n', '            return 1000;\n', '        }else if (totalCandyNo >= 500){\n', '            return 500;\n', '        }else{\n', '            return 0;\n', '        }\n', '    }\n', '\n', '    function collectBack() onlyOwner public{\n', '\n', '        require(totalCandyNo > 0);\n', '\n', '        require(collectorAddress != 0x0);\n', '\n', '        tokenReward.transfer(collectorAddress, totalCandyNo * 1e18);\n', '        totalCandyNo = 0;\n', '\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'interface token {\n', '    function transfer(address receiver, uint amount) external;\n', '}\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract CandyContract is owned{\n', '\n', '    token public tokenReward;\n', '    uint public totalCandyNo; \n', '\n', '    address public collectorAddress;\n', '    mapping(address => uint256) public balanceOf;\n', '\n', '    event GoalReached(address recipient, uint totalAmountRaised);\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '\n', '    /**\n', '     * Constructor function\n', '     */\n', '    constructor(\n', '        address addressOfTokenUsedAsReward,\n', '        address collector\n', '    ) public {\n', '        totalCandyNo = 1e9;\n', '        tokenReward = token(addressOfTokenUsedAsReward);\n', '        collectorAddress = collector;\n', '    }\n', '\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function () payable public {\n', '        require(totalCandyNo > 0);\n', '        uint amount = getCurrentCandyAmount();\n', '        require(amount > 0); \n', '        require(balanceOf[msg.sender] == 0);\n', '\n', '        totalCandyNo -= amount;\n', '        balanceOf[msg.sender] = amount;\n', '\n', '        tokenReward.transfer(msg.sender, amount * 1e18);\n', '        emit FundTransfer(msg.sender, amount, true);\n', '    }\n', '\n', '    function getCurrentCandyAmount() private view returns (uint amount){\n', '\n', '        if (totalCandyNo >= 7.5e8){\n', '            return 2000;\n', '        }else if (totalCandyNo >= 5e8){\n', '            return 1500;\n', '        }else if (totalCandyNo >= 2.5e8){\n', '            return 1000;\n', '        }else if (totalCandyNo >= 500){\n', '            return 500;\n', '        }else{\n', '            return 0;\n', '        }\n', '    }\n', '\n', '    function collectBack() onlyOwner public{\n', '\n', '        require(totalCandyNo > 0);\n', '\n', '        require(collectorAddress != 0x0);\n', '\n', '        tokenReward.transfer(collectorAddress, totalCandyNo * 1e18);\n', '        totalCandyNo = 0;\n', '\n', '    }\n', '}']
