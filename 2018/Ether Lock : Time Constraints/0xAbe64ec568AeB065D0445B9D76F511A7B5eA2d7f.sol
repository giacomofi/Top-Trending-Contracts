['pragma solidity ^0.4.17;\n', 'contract AccessControl {\n', '    address public creatorAddress;\n', '    uint16 public totalSeraphims = 0;\n', '    mapping (address => bool) public seraphims;\n', '\n', '    bool public isMaintenanceMode = true;\n', ' \n', '    modifier onlyCREATOR() {\n', '        require(msg.sender == creatorAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlySERAPHIM() {\n', '        require(seraphims[msg.sender] == true);\n', '        _;\n', '    }\n', '    \n', '    modifier isContractActive {\n', '        require(!isMaintenanceMode);\n', '        _;\n', '    }\n', '    \n', '    // Constructor\n', '    function AccessControl() public {\n', '        creatorAddress = msg.sender;\n', '    }\n', '    \n', '\n', '    function addSERAPHIM(address _newSeraphim) onlyCREATOR public {\n', '        if (seraphims[_newSeraphim] == false) {\n', '            seraphims[_newSeraphim] = true;\n', '            totalSeraphims += 1;\n', '        }\n', '    }\n', '    \n', '    function removeSERAPHIM(address _oldSeraphim) onlyCREATOR public {\n', '        if (seraphims[_oldSeraphim] == true) {\n', '            seraphims[_oldSeraphim] = false;\n', '            totalSeraphims -= 1;\n', '        }\n', '    }\n', '\n', '    function updateMaintenanceMode(bool _isMaintaining) onlyCREATOR public {\n', '        isMaintenanceMode = _isMaintaining;\n', '    }\n', '\n', '  \n', '} \n', 'contract SafeMath {\n', '    function safeAdd(uint x, uint y) pure internal returns(uint) {\n', '      uint z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtract(uint x, uint y) pure internal returns(uint) {\n', '      assert(x >= y);\n', '      uint z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint x, uint y) pure internal returns(uint) {\n', '      uint z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '    \n', '     \n', '\n', '    function getRandomNumber(uint16 maxRandom, uint8 min, address privateAddress) constant public returns(uint8) {\n', '        uint256 genNum = uint256(block.blockhash(block.number-1)) + uint256(privateAddress);\n', '        return uint8(genNum % (maxRandom - min + 1)+min);\n', '    }\n', '}\n', '\n', 'contract Enums {\n', '    enum ResultCode {\n', '        SUCCESS,\n', '        ERROR_CLASS_NOT_FOUND,\n', '        ERROR_LOW_BALANCE,\n', '        ERROR_SEND_FAIL,\n', '        ERROR_NOT_OWNER,\n', '        ERROR_NOT_ENOUGH_MONEY,\n', '        ERROR_INVALID_AMOUNT\n', '    }\n', '\n', '    enum AngelAura { \n', '        Blue, \n', '        Yellow, \n', '        Purple, \n', '        Orange, \n', '        Red, \n', '        Green \n', '    }\n', '}\n', '\n', '\n', 'contract ISponsoredLeaderboardData is AccessControl {\n', '\n', '  \n', '    uint16 public totalLeaderboards;\n', '    \n', '    //The reserved balance is the total balance outstanding on all open leaderboards. \n', '    //We keep track of this figure to prevent the developers from pulling out money currently pledged\n', '    uint public contractReservedBalance;\n', '    \n', '\n', '    function setMinMaxDays(uint8 _minDays, uint8 _maxDays) external ;\n', '        function openLeaderboard(uint8 numDays, string message) external payable ;\n', '        function closeLeaderboard(uint16 leaderboardId) onlySERAPHIM external;\n', '        \n', '        function setMedalsClaimed(uint16 leaderboardId) onlySERAPHIM external ;\n', '    function withdrawEther() onlyCREATOR external;\n', '  function getTeamFromLeaderboard(uint16 leaderboardId, uint8 rank) public constant returns (uint64 angelId, uint64 petId, uint64 accessoryId) ;\n', '    \n', '    function getLeaderboard(uint16 id) public constant returns (uint startTime, uint endTime, bool isLive, address sponsor, uint prize, uint8 numTeams, string message, bool medalsClaimed);\n', '      function newTeamOnEnd(uint16 leaderboardId, uint64 angelId, uint64 petId, uint64 accessoryId) onlySERAPHIM external;\n', '       function switchRankings (uint16 leaderboardId, uint8 spot,uint64 angel1ID, uint64 pet1ID, uint64 accessory1ID,uint64 angel2ID,uint64 pet2ID,uint64 accessory2ID) onlySERAPHIM external;\n', '       function verifyPosition(uint16 leaderboardId, uint8 spot, uint64 angelID) external constant returns (bool); \n', '        function angelOnLeaderboards(uint64 angelID) external constant returns (bool);\n', '         function petOnLeaderboards(uint64 petID) external constant returns (bool);\n', '         function accessoryOnLeaderboards(uint64 accessoryID) external constant returns (bool) ;\n', '    function safeMult(uint x, uint y) pure internal returns(uint) ;\n', '     function SafeDiv(uint256 a, uint256 b) internal pure returns (uint256) ;\n', '    function getTotalLeaderboards() public constant returns (uint16);\n', '      \n', '  \n', '        \n', '   \n', '        \n', '        \n', '        \n', '   \n', '      \n', '        \n', '   \n', '}\n', 'contract IAngelCardData is AccessControl, Enums {\n', '    uint8 public totalAngelCardSeries;\n', '    uint64 public totalAngels;\n', '\n', '    \n', '    // write\n', '    // angels\n', '    function createAngelCardSeries(uint8 _angelCardSeriesId, uint _basePrice,  uint64 _maxTotal, uint8 _baseAura, uint16 _baseBattlePower, uint64 _liveTime) onlyCREATOR external returns(uint8);\n', '    function updateAngelCardSeries(uint8 _angelCardSeriesId, uint64 _newPrice, uint64 _newMaxTotal) onlyCREATOR external;\n', '    function setAngel(uint8 _angelCardSeriesId, address _owner, uint _price, uint16 _battlePower) onlySERAPHIM external returns(uint64);\n', '    function addToAngelExperienceLevel(uint64 _angelId, uint _value) onlySERAPHIM external;\n', '    function setAngelLastBattleTime(uint64 _angelId) onlySERAPHIM external;\n', '    function setAngelLastVsBattleTime(uint64 _angelId) onlySERAPHIM external;\n', '    function setLastBattleResult(uint64 _angelId, uint16 _value) onlySERAPHIM external;\n', '    function addAngelIdMapping(address _owner, uint64 _angelId) private;\n', '    function transferAngel(address _from, address _to, uint64 _angelId) onlySERAPHIM public returns(ResultCode);\n', '    function ownerAngelTransfer (address _to, uint64 _angelId)  public;\n', '    function updateAngelLock (uint64 _angelId, bool newValue) public;\n', '    function removeCreator() onlyCREATOR external;\n', '\n', '    // read\n', '    function getAngelCardSeries(uint8 _angelCardSeriesId) constant public returns(uint8 angelCardSeriesId, uint64 currentAngelTotal, uint basePrice, uint64 maxAngelTotal, uint8 baseAura, uint baseBattlePower, uint64 lastSellTime, uint64 liveTime);\n', '    function getAngel(uint64 _angelId) constant public returns(uint64 angelId, uint8 angelCardSeriesId, uint16 battlePower, uint8 aura, uint16 experience, uint price, uint64 createdTime, uint64 lastBattleTime, uint64 lastVsBattleTime, uint16 lastBattleResult, address owner);\n', '    function getOwnerAngelCount(address _owner) constant public returns(uint);\n', '    function getAngelByIndex(address _owner, uint _index) constant public returns(uint64);\n', '    function getTotalAngelCardSeries() constant public returns (uint8);\n', '    function getTotalAngels() constant public returns (uint64);\n', '    function getAngelLockStatus(uint64 _angelId) constant public returns (bool);\n', '}\n', '\n', '//Note - due to not yet implemented features we could not store teams in an array. \n', '\n', 'contract SponsoredLeaderboardData is ISponsoredLeaderboardData {\n', '\n', '    /*** DATA TYPES ***/\n', '        address public angelCardDataContract = 0x6D2E76213615925c5fc436565B5ee788Ee0E86DC;\n', '    \n', '      struct Team {\n', '        uint64 angelId;\n', '        uint64 petId;\n', '        uint64 accessoryId;\n', '    }\n', '    \n', '      struct Leaderboard {\n', '        uint startTime;\n', '        uint endTime;\n', '        Team rank0;\n', '        Team rank1;\n', '        Team rank2;\n', '        Team rank3;\n', '        bool isLive;\n', '        address sponsor;\n', '        uint prize;\n', '        uint16 id;\n', '        uint8 numTeams;\n', '        string message;\n', '        bool medalsClaimed;\n', '        \n', '    }\n', '\n', '    //main storage\n', '    Leaderboard []  Leaderboards;\n', '    \n', '    uint16 public totalLeaderboards;\n', '    \n', '    uint16 minDays= 4;\n', '    uint16 maxDays = 10;\n', '    \n', '    //The reserved balance is the total balance outstanding on all open leaderboards. \n', '    //We keep track of this figure to prevent the developers from pulling out money currently pledged\n', '    uint public contractReservedBalance;\n', '    \n', '    \n', '    mapping (uint64 => bool) angelsOnLeaderboards;\n', '    mapping (uint64 => bool) petsOnLeaderboards;\n', '    mapping (uint64 => bool) accessoriesOnLeaderboards;\n', '    \n', '    \n', '    \n', '      // write functions\n', '    function setMinMaxDays(uint8 _minDays, uint8 _maxDays) external {\n', '        minDays = _minDays;\n', '        maxDays = _maxDays;\n', '       }\n', '\n', '  \n', '        function openLeaderboard(uint8 numDays, string message) external payable {\n', '            // This function is called by the sponsor to create the Leaderboard by sending money. \n', '            \n', '           if (msg.value < 10000000000000000) {revert();}\n', '         \n', '         if ((numDays < minDays) || (numDays > maxDays)) {revert();}\n', '            Leaderboard memory leaderboard;\n', '            leaderboard.startTime = now;\n', '            leaderboard.endTime = (now + (numDays * 86400));\n', '            leaderboard.isLive = true;\n', '            leaderboard.sponsor = msg.sender;\n', '            leaderboard.prize = msg.value;\n', '            leaderboard.message = message;\n', '            leaderboard.id = totalLeaderboards;\n', '            \n', '            leaderboard.medalsClaimed= false;\n', '            leaderboard.numTeams = 4;\n', '    \n', '           Leaderboards.push(leaderboard);\n', '           \n', '            Team memory team;\n', '            team.angelId = 1;\n', '            team.petId = 1;\n', '            team.accessoryId = 0;\n', '            Leaderboards[totalLeaderboards].rank1 = team;\n', '            Leaderboards[totalLeaderboards].rank2 = team;\n', '            Leaderboards[totalLeaderboards].rank3 = team;\n', '            Leaderboards[totalLeaderboards].rank0 = team;\n', '            totalLeaderboards +=1;\n', '            contractReservedBalance += msg.value;\n', '           \n', '            \n', '        }\n', '        \n', '        function closeLeaderboard(uint16 leaderboardId) onlySERAPHIM external {\n', '           //will be called by the SponsoredLeaderboards contract with a certain chance after the minimum battle time. \n', '           \n', '            Leaderboard memory leaderboard;\n', '            leaderboard = Leaderboards[leaderboardId];\n', '            if (now < leaderboard.endTime) {revert();}\n', '            if (leaderboard.isLive = false) {revert();}\n', '            Leaderboards[leaderboardId].isLive = false;\n', '             IAngelCardData angelCardData = IAngelCardData(angelCardDataContract);\n', '             \n', '             address owner1;\n', '             address owner2;\n', '             address owner3;\n', '             address owner4;\n', '             \n', '            (,,,,,,,,,,owner1) = angelCardData.getAngel(Leaderboards[leaderboardId].rank0.angelId);\n', '            (,,,,,,,,,,owner2) = angelCardData.getAngel(Leaderboards[leaderboardId].rank1.angelId);\n', '            (,,,,,,,,,,owner3) = angelCardData.getAngel(Leaderboards[leaderboardId].rank2.angelId);\n', '            (,,,,,,,,,,owner4) = angelCardData.getAngel(Leaderboards[leaderboardId].rank3.angelId);\n', '            uint prize = Leaderboards[leaderboardId].prize;\n', '            \n', '            owner1.transfer(SafeDiv(safeMult(prize,45), 100));\n', '            owner2.transfer(SafeDiv(safeMult(prize,25), 100));\n', '            owner3.transfer(SafeDiv(safeMult(prize,15), 100));\n', '            owner4.transfer(SafeDiv(safeMult(prize,5), 100));\n', '    \n', '            //Free up cards to be on other Leaderboards\n', '            \n', '        angelsOnLeaderboards[Leaderboards[leaderboardId].rank0.angelId] = false;\n', '        petsOnLeaderboards[Leaderboards[leaderboardId].rank0.petId] = false;\n', '        accessoriesOnLeaderboards[Leaderboards[leaderboardId].rank0.accessoryId] = false;\n', '         \n', '             \n', '        angelsOnLeaderboards[Leaderboards[leaderboardId].rank1.angelId] = false;\n', '        petsOnLeaderboards[Leaderboards[leaderboardId].rank1.petId] = false;\n', '        accessoriesOnLeaderboards[Leaderboards[leaderboardId].rank1.accessoryId] = false;\n', '        \n', '            \n', '        angelsOnLeaderboards[Leaderboards[leaderboardId].rank2.angelId] = false;\n', '        petsOnLeaderboards[Leaderboards[leaderboardId].rank2.petId] = false;\n', '        accessoriesOnLeaderboards[Leaderboards[leaderboardId].rank2.accessoryId] = false;\n', '        \n', '            \n', '        angelsOnLeaderboards[Leaderboards[leaderboardId].rank3.angelId] = false;\n', '        petsOnLeaderboards[Leaderboards[leaderboardId].rank3.petId] = false;\n', '        accessoriesOnLeaderboards[Leaderboards[leaderboardId].rank3.accessoryId] = false;\n', '            \n', '            \n', '            \n', '            contractReservedBalance= contractReservedBalance -  SafeDiv(safeMult(prize,90), 100);\n', '        }\n', '  \n', '        \n', '        function setMedalsClaimed(uint16 leaderboardId) onlySERAPHIM external {\n', '            Leaderboards[leaderboardId].medalsClaimed = true;\n', '        }\n', '        \n', 'function withdrawEther() external onlyCREATOR {\n', '    //make sure we can&#39;t transfer out balance for leaderboards that aren&#39;t open. \n', '    creatorAddress.transfer(this.balance-contractReservedBalance);\n', '}\n', '\n', '    // Call to get the specified team at a certain position of a certain board. \n', '   function getTeamFromLeaderboard(uint16 leaderboardId, uint8 rank) public constant returns (uint64 angelId, uint64 petId, uint64 accessoryId)   {\n', '      \n', '        if ((leaderboardId <0) || (rank <0) || (rank >3) || (leaderboardId > totalLeaderboards)) {revert();}\n', '        if (rank == 0) {\n', '       angelId = Leaderboards[leaderboardId].rank0.angelId;\n', '       petId = Leaderboards[leaderboardId].rank0.petId;\n', '       accessoryId = Leaderboards[leaderboardId].rank0.accessoryId;\n', '       return;\n', '        }\n', '         if (rank == 1) {\n', '       angelId = Leaderboards[leaderboardId].rank1.angelId;\n', '       petId = Leaderboards[leaderboardId].rank1.petId;\n', '       accessoryId = Leaderboards[leaderboardId].rank1.accessoryId;\n', '       return;\n', '        }\n', '          if (rank == 2) {\n', '       angelId = Leaderboards[leaderboardId].rank2.angelId;\n', '       petId = Leaderboards[leaderboardId].rank2.petId;\n', '       accessoryId = Leaderboards[leaderboardId].rank2.accessoryId;\n', '       return;\n', '        }\n', '          if (rank == 3) {\n', '       angelId = Leaderboards[leaderboardId].rank3.angelId;\n', '       petId = Leaderboards[leaderboardId].rank3.petId;\n', '       accessoryId = Leaderboards[leaderboardId].rank3.accessoryId;\n', '       return;\n', '        }\n', '    \n', '\n', '   }\n', '    function getLeaderboard(uint16 id) public constant returns (uint startTime, uint endTime, bool isLive, address sponsor, uint prize, uint8 numTeams, string message, bool medalsClaimed) {\n', '            Leaderboard memory leaderboard;\n', '            leaderboard = Leaderboards[id];\n', '            startTime = leaderboard.startTime;\n', '            endTime = leaderboard.endTime;\n', '            isLive = leaderboard.isLive;\n', '            sponsor = leaderboard.sponsor;\n', '            prize = leaderboard.prize;\n', '            numTeams = leaderboard.numTeams;\n', '            message = leaderboard.message;\n', '            medalsClaimed = leaderboard.medalsClaimed;\n', '    }\n', '    \n', '     \n', '\n', '\n', '        function newTeamOnEnd(uint16 leaderboardId, uint64 angelId, uint64 petId, uint64 accessoryId)  onlySERAPHIM external  {\n', '         //to be used when a team successfully challenges the last spot and knocks the prvious team out.   \n', '         \n', '                Team memory team;\n', '               //remove old team from mappings\n', '                team = Leaderboards[leaderboardId].rank3;\n', '                angelsOnLeaderboards[Leaderboards[leaderboardId].rank3.angelId] = false;\n', '               petsOnLeaderboards[Leaderboards[leaderboardId].rank3.petId] = false;\n', '               accessoriesOnLeaderboards[Leaderboards[leaderboardId].rank3.accessoryId] = false;\n', '                \n', '                //Add new team to end\n', '              Leaderboards[leaderboardId].rank3.angelId = angelId;\n', '              Leaderboards[leaderboardId].rank3.petId = petId;\n', '              Leaderboards[leaderboardId].rank3.accessoryId = accessoryId;\n', '              \n', '              angelsOnLeaderboards[angelId] = true;\n', '               petsOnLeaderboards[petId] = true;\n', '               accessoriesOnLeaderboards[accessoryId] = true;\n', '           \n', '            \n', '            \n', '        }\n', '        function switchRankings (uint16 leaderboardId, uint8 spot,uint64 angel1ID, uint64 pet1ID, uint64 accessory1ID,uint64 angel2ID,uint64 pet2ID,uint64 accessory2ID ) onlySERAPHIM external {\n', '        //put team 1 from spot to spot+1 and put team 2 to spot. \n', '    \n', '                Team memory team;\n', '                team.angelId = angel1ID;\n', '                team.petId = pet1ID;\n', '                team.accessoryId = accessory1ID;\n', '                if (spot == 0) {Leaderboards[leaderboardId].rank1 = team;}\n', '                if (spot == 1) {Leaderboards[leaderboardId].rank2 = team;}\n', '                if (spot == 2) {Leaderboards[leaderboardId].rank3 = team;}\n', '                \n', '                team.angelId = angel2ID;\n', '                team.petId = pet2ID;\n', '                team.accessoryId = accessory2ID;\n', '            \n', '                if (spot == 0) {Leaderboards[leaderboardId].rank0 = team;}\n', '                if (spot == 1) {Leaderboards[leaderboardId].rank1 = team;}\n', '                if (spot == 2) {Leaderboards[leaderboardId].rank2 = team;}\n', '        \n', '        }\n', '        \n', '        \n', '        function verifyPosition(uint16 leaderboardId, uint8 spot, uint64 angelID) external constant returns (bool) {\n', '          \n', '               if (spot == 0) {\n', '                   if (Leaderboards[leaderboardId].rank0.angelId == angelID) {return true;}\n', '               }\n', '               if (spot == 1) {\n', '                   if (Leaderboards[leaderboardId].rank1.angelId == angelID) {return true;}\n', '               }\n', '               if (spot == 2) {\n', '                   if (Leaderboards[leaderboardId].rank2.angelId == angelID) {return true;}\n', '               }\n', '                 if (spot == 3) {\n', '                   if (Leaderboards[leaderboardId].rank3.angelId == angelID) {return true;}\n', '               }\n', '               \n', '               \n', '                return false;\n', '                \n', '        }\n', '        \n', '        //each angel can only be on ONE sponsored leaderboard at a time. \n', '        function angelOnLeaderboards(uint64 angelID) external constant returns (bool) {\n', '           \n', '            return angelsOnLeaderboards[angelID]; \n', '        }\n', '        \n', '        //each pet can only be on ONE sponsored leaderboard at a time. \n', '         function petOnLeaderboards(uint64 petID) external constant returns (bool) {\n', '           \n', '            return petsOnLeaderboards[petID]; \n', '        }\n', '        \n', '        //Each Accessory can only be on one sponsored leaderboard\n', '         function accessoryOnLeaderboards(uint64 accessoryID) external constant returns (bool) {\n', '           \n', '            return accessoriesOnLeaderboards[accessoryID]; \n', '        }\n', '        \n', '       \n', '    \n', '    function safeMult(uint x, uint y) pure internal returns(uint) {\n', '      uint z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '    \n', '     function SafeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '    /// Read access\n', '     }\n', '   \n', '   \n', '    function getTotalLeaderboards() public constant returns (uint16) {\n', '        return totalLeaderboards;\n', '    }\n', '      \n', '  \n', '        \n', '   \n', '        \n', '        \n', '        \n', '   \n', '      \n', '        \n', '   \n', '}']