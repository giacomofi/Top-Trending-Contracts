['pragma solidity ^0.4.16;\n', '\n', '// copyright contact@Etheremon.com\n', '\n', 'contract SafeMath {\n', '\n', '    /* function assert(bool assertion) internal { */\n', '    /*   if (!assertion) { */\n', '    /*     throw; */\n', '    /*   } */\n', '    /* }      // assert no longer needed once solidity is on 0.4.10 */\n', '\n', '    function safeAdd(uint256 x, uint256 y) pure internal returns(uint256) {\n', '      uint256 z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtract(uint256 x, uint256 y) pure internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) pure internal returns(uint256) {\n', '      uint256 z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '\n', '}\n', '\n', 'contract BasicAccessControl {\n', '    address public owner;\n', '    // address[] public moderators;\n', '    uint16 public totalModerators = 0;\n', '    mapping (address => bool) public moderators;\n', '    bool public isMaintaining = true;\n', '\n', '    function BasicAccessControl() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyModerators() {\n', '        require(msg.sender == owner || moderators[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '    modifier isActive {\n', '        require(!isMaintaining);\n', '        _;\n', '    }\n', '\n', '    function ChangeOwner(address _newOwner) onlyOwner public {\n', '        if (_newOwner != address(0)) {\n', '            owner = _newOwner;\n', '        }\n', '    }\n', '\n', '\n', '    function AddModerator(address _newModerator) onlyOwner public {\n', '        if (moderators[_newModerator] == false) {\n', '            moderators[_newModerator] = true;\n', '            totalModerators += 1;\n', '        }\n', '    }\n', '    \n', '    function RemoveModerator(address _oldModerator) onlyOwner public {\n', '        if (moderators[_oldModerator] == true) {\n', '            moderators[_oldModerator] = false;\n', '            totalModerators -= 1;\n', '        }\n', '    }\n', '\n', '    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\n', '        isMaintaining = _isMaintaining;\n', '    }\n', '}\n', '\n', 'contract EtheremonEnum {\n', '\n', '    enum ResultCode {\n', '        SUCCESS,\n', '        ERROR_CLASS_NOT_FOUND,\n', '        ERROR_LOW_BALANCE,\n', '        ERROR_SEND_FAIL,\n', '        ERROR_NOT_TRAINER,\n', '        ERROR_NOT_ENOUGH_MONEY,\n', '        ERROR_INVALID_AMOUNT,\n', '        ERROR_OBJ_NOT_FOUND,\n', '        ERROR_OBJ_INVALID_OWNERSHIP\n', '    }\n', '    \n', '    enum ArrayType {\n', '        CLASS_TYPE,\n', '        STAT_STEP,\n', '        STAT_START,\n', '        STAT_BASE,\n', '        OBJ_SKILL\n', '    }\n', '\n', '    enum PropertyType {\n', '        ANCESTOR,\n', '        XFACTOR\n', '    }\n', '    \n', '    enum BattleResult {\n', '        CASTLE_WIN,\n', '        CASTLE_LOSE,\n', '        CASTLE_DESTROYED\n', '    }\n', '    \n', '    enum CacheClassInfoType {\n', '        CLASS_TYPE,\n', '        CLASS_STEP,\n', '        CLASS_ANCESTOR\n', '    }\n', '}\n', '\n', 'contract EtheremonDataBase is EtheremonEnum, BasicAccessControl, SafeMath {\n', '    \n', '    uint64 public totalMonster;\n', '    uint32 public totalClass;\n', '    \n', '    // read\n', '    function getSizeArrayType(ArrayType _type, uint64 _id) constant public returns(uint);\n', '    function getElementInArrayType(ArrayType _type, uint64 _id, uint _index) constant public returns(uint8);\n', '    function getMonsterClass(uint32 _classId) constant public returns(uint32 classId, uint256 price, uint256 returnPrice, uint32 total, bool catchable);\n', '    function getMonsterObj(uint64 _objId) constant public returns(uint64 objId, uint32 classId, address trainer, uint32 exp, uint32 createIndex, uint32 lastClaimIndex, uint createTime);\n', '    function getMonsterName(uint64 _objId) constant public returns(string name);\n', '    function getExtraBalance(address _trainer) constant public returns(uint256);\n', '    function getMonsterDexSize(address _trainer) constant public returns(uint);\n', '    function getMonsterObjId(address _trainer, uint index) constant public returns(uint64);\n', '    function getExpectedBalance(address _trainer) constant public returns(uint256);\n', '    function getMonsterReturn(uint64 _objId) constant public returns(uint256 current, uint256 total);\n', '}\n', '\n', 'contract EtheremonGateway is EtheremonEnum, BasicAccessControl {\n', '    // using for battle contract later\n', '    function increaseMonsterExp(uint64 _objId, uint32 amount) onlyModerators public;\n', '    function decreaseMonsterExp(uint64 _objId, uint32 amount) onlyModerators public;\n', '    \n', '    // read \n', '    function isGason(uint64 _objId) constant external returns(bool);\n', '    function getObjBattleInfo(uint64 _objId) constant external returns(uint32 classId, uint32 exp, bool isGason, \n', '        uint ancestorLength, uint xfactorsLength);\n', '    function getClassPropertySize(uint32 _classId, PropertyType _type) constant external returns(uint);\n', '    function getClassPropertyValue(uint32 _classId, PropertyType _type, uint index) constant external returns(uint32);\n', '}\n', '\n', 'contract EtheremonGym is EtheremonEnum, BasicAccessControl, SafeMath {\n', '    uint8 constant public STAT_COUNT = 6;\n', '    \n', '    struct MonsterObjAcc {\n', '        uint64 monsterId;\n', '        uint32 classId;\n', '        address trainer;\n', '        string name;\n', '        uint32 exp;\n', '        uint32 createIndex;\n', '        uint32 lastClaimIndex;\n', '        uint createTime;\n', '    }\n', '    \n', '    struct AttackData {\n', '        uint32 objClassId;\n', '        address trainee;\n', '        uint8 objLevel;\n', '        uint8 winCount;\n', '        uint32 winExp;\n', '        uint32 loseExp;\n', '    }\n', '    \n', '    struct HpData {\n', '        uint16 aHpAttack;\n', '        uint16 aHpAttackCritical;\n', '        uint16 bHpAttack;\n', '        uint16 bHpAttackCritical;        \n', '    }\n', '    \n', '    struct GymTrainer {\n', '        uint32 classId;\n', '        uint8[6] statBases;\n', '    }\n', '    \n', '    struct TrainingLog {\n', '        uint8[3] trainers;\n', '        uint8 trainerLevel;\n', '        uint64 objId;\n', '        uint8 objLevel;\n', '        uint8 ran;\n', '    }\n', '    \n', '    struct CacheClassInfo {\n', '        uint8[] types;\n', '        uint8[] steps;\n', '        uint32[] ancestors;\n', '    }\n', '    \n', '    mapping(uint8 => GymTrainer) public gymTrainers;\n', '    mapping(address => TrainingLog) public trainees;\n', '    mapping(uint8 => uint8) typeAdvantages;\n', '    mapping(uint32 => CacheClassInfo) cacheClasses;\n', '    mapping(uint8 => uint32) levelExps;\n', '    mapping(uint8 => uint32) levelExpGains;\n', '    uint256 public gymFee = 0.001 ether;\n', '    uint8 public maxTrainerLevel = 5;\n', '    uint8 public totalTrainer = 0;\n', '    uint8 public maxRandomRound = 4;\n', '    uint8 public typeBuffPercentage = 20;\n', '    uint8 public minHpDeducted = 10;\n', '    uint8 public expPercentage = 70;\n', '    \n', '    // contract\n', '    address public worldContract;\n', '    address public dataContract;\n', '\n', '   // modifier\n', '    modifier requireDataContract {\n', '        require(dataContract != address(0));\n', '        _;\n', '    }\n', '    \n', '    modifier requireWorldContract {\n', '        require(worldContract != address(0));\n', '        _;\n', '    }\n', '    \n', '    // constructor\n', '    function EtheremonGym(address _dataContract, address _worldContract) public {\n', '        dataContract = _dataContract;\n', '        worldContract = _worldContract;\n', '    }\n', '    \n', '    \n', '     // admin & moderators\n', '    function setTypeAdvantages() onlyModerators external {\n', '        typeAdvantages[1] = 14;\n', '        typeAdvantages[2] = 16;\n', '        typeAdvantages[3] = 8;\n', '        typeAdvantages[4] = 9;\n', '        typeAdvantages[5] = 2;\n', '        typeAdvantages[6] = 11;\n', '        typeAdvantages[7] = 3;\n', '        typeAdvantages[8] = 5;\n', '        typeAdvantages[9] = 15;\n', '        typeAdvantages[11] = 18;\n', '        // skipp 10\n', '        typeAdvantages[12] = 7;\n', '        typeAdvantages[13] = 6;\n', '        typeAdvantages[14] = 17;\n', '        typeAdvantages[15] = 13;\n', '        typeAdvantages[16] = 12;\n', '        typeAdvantages[17] = 1;\n', '        typeAdvantages[18] = 4;\n', '    }\n', '    \n', '    function setTypeAdvantage(uint8 _type1, uint8 _type2) onlyModerators external {\n', '        typeAdvantages[_type1] = _type2;\n', '    }\n', '    \n', '    function setCacheClassInfo(uint32 _classId) onlyModerators requireDataContract requireWorldContract public {\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '         EtheremonGateway gateway = EtheremonGateway(worldContract);\n', '        uint i = 0;\n', '        CacheClassInfo storage classInfo = cacheClasses[_classId];\n', '\n', '        // add type\n', '        i = data.getSizeArrayType(ArrayType.CLASS_TYPE, uint64(_classId));\n', '        uint8[] memory aTypes = new uint8[](i);\n', '        for(; i > 0 ; i--) {\n', '            aTypes[i-1] = data.getElementInArrayType(ArrayType.CLASS_TYPE, uint64(_classId), i-1);\n', '        }\n', '        classInfo.types = aTypes;\n', '\n', '        // add steps\n', '        i = data.getSizeArrayType(ArrayType.STAT_STEP, uint64(_classId));\n', '        uint8[] memory steps = new uint8[](i);\n', '        for(; i > 0 ; i--) {\n', '            steps[i-1] = data.getElementInArrayType(ArrayType.STAT_STEP, uint64(_classId), i-1);\n', '        }\n', '        classInfo.steps = steps;\n', '        \n', '        // add ancestor\n', '        i = gateway.getClassPropertySize(_classId, PropertyType.ANCESTOR);\n', '        uint32[] memory ancestors = new uint32[](i);\n', '        for(; i > 0 ; i--) {\n', '            ancestors[i-1] = gateway.getClassPropertyValue(_classId, PropertyType.ANCESTOR, i-1);\n', '        }\n', '        classInfo.ancestors = ancestors;\n', '    }\n', '    \n', '    function fastSetCacheClassInfo(uint32 _classId1, uint32 _classId2, uint32 _classId3, uint32 _classId4) onlyModerators requireDataContract requireWorldContract external {\n', '        setCacheClassInfo(_classId1);\n', '        setCacheClassInfo(_classId2);\n', '        setCacheClassInfo(_classId3);\n', '        setCacheClassInfo(_classId4);\n', '    }\n', '    \n', '    function presetGymTrainer() onlyModerators external {\n', '        GymTrainer storage trainer1 = gymTrainers[1];\n', '        trainer1.classId = 12;\n', '        trainer1.statBases[0] = 85;\n', '        trainer1.statBases[1] = 95;\n', '        trainer1.statBases[2] = 65;\n', '        trainer1.statBases[3] = 50;\n', '        trainer1.statBases[4] = 50;\n', '        trainer1.statBases[5] = 50;\n', '        GymTrainer storage trainer2 = gymTrainers[2];\n', '        trainer2.classId = 15;\n', '        trainer2.statBases[0] = 50;\n', '        trainer2.statBases[1] = 55;\n', '        trainer2.statBases[2] = 85;\n', '        trainer2.statBases[3] = 85;\n', '        trainer2.statBases[4] = 40;\n', '        trainer2.statBases[5] = 75;\n', '        GymTrainer storage trainer3 = gymTrainers[3];\n', '        trainer3.classId = 8;\n', '        trainer3.statBases[0] = 110;\n', '        trainer3.statBases[1] = 60;\n', '        trainer3.statBases[2] = 40;\n', '        trainer3.statBases[3] = 60;\n', '        trainer3.statBases[4] = 40;\n', '        trainer3.statBases[5] = 40;\n', '        GymTrainer storage trainer4 = gymTrainers[4];\n', '        trainer4.classId = 4;\n', '        trainer4.statBases[0] = 54;\n', '        trainer4.statBases[1] = 69;\n', '        trainer4.statBases[2] = 58;\n', '        trainer4.statBases[3] = 75;\n', '        trainer4.statBases[4] = 75;\n', '        trainer4.statBases[5] = 70;\n', '        GymTrainer storage trainer5 = gymTrainers[5];\n', '        trainer5.classId = 6;\n', '        trainer5.statBases[0] = 50;\n', '        trainer5.statBases[1] = 50;\n', '        trainer5.statBases[2] = 50;\n', '        trainer5.statBases[3] = 105;\n', '        trainer5.statBases[4] = 55;\n', '        trainer5.statBases[5] = 95;\n', '        GymTrainer storage trainer6 = gymTrainers[6];\n', '        trainer6.classId = 13;\n', '        trainer6.statBases[0] = 55;\n', '        trainer6.statBases[1] = 90;\n', '        trainer6.statBases[2] = 95;\n', '        trainer6.statBases[3] = 45;\n', '        trainer6.statBases[4] = 35;\n', '        trainer6.statBases[5] = 35;\n', '        GymTrainer storage trainer7 = gymTrainers[7];\n', '        trainer7.classId = 7;\n', '        trainer7.statBases[0] = 85;\n', '        trainer7.statBases[1] = 60;\n', '        trainer7.statBases[2] = 73;\n', '        trainer7.statBases[3] = 75;\n', '        trainer7.statBases[4] = 80;\n', '        trainer7.statBases[5] = 50;\n', '        GymTrainer storage trainer8 = gymTrainers[8];\n', '        trainer8.classId = 24;\n', '        trainer8.statBases[0] = 140;\n', '        trainer8.statBases[1] = 135;\n', '        trainer8.statBases[2] = 70;\n', '        trainer8.statBases[3] = 77;\n', '        trainer8.statBases[4] = 90;\n', '        trainer8.statBases[5] = 50;\n', '        GymTrainer storage trainer9 = gymTrainers[9];\n', '        trainer9.classId = 16;\n', '        trainer9.statBases[0] = 70;\n', '        trainer9.statBases[1] = 105;\n', '        trainer9.statBases[2] = 80;\n', '        trainer9.statBases[3] = 60;\n', '        trainer9.statBases[4] = 80;\n', '        trainer9.statBases[5] = 90;\n', '        totalTrainer = 9;\n', '    }\n', '    \n', '    function setGymTrainer(uint8 _trainerId, uint32 _classId, uint8 _s0, uint8 _s1, uint8 _s2, uint8 _s3, uint8 _s4, uint8 _s5) onlyModerators external {\n', '        GymTrainer storage trainer = gymTrainers[_trainerId];\n', '        if (trainer.classId == 0)\n', '            totalTrainer += 1;\n', '        trainer.classId = _classId;\n', '        trainer.statBases[0] = _s0;\n', '        trainer.statBases[1] = _s1;\n', '        trainer.statBases[2] = _s2;\n', '        trainer.statBases[3] = _s3;\n', '        trainer.statBases[4] = _s4;\n', '        trainer.statBases[5] = _s5;\n', '    }\n', '    \n', '    function setContract(address _dataContract, address _worldContract) onlyModerators external {\n', '        dataContract = _dataContract;\n', '        worldContract = _worldContract;\n', '    }\n', '    \n', '    function setConfig(uint256 _gymFee, uint8 _maxTrainerLevel, uint8 _maxRandomRound, uint8 _typeBuffPercentage, \n', '        uint8 _minHpDeducted, uint8 _expPercentage) onlyModerators external {\n', '        gymFee = _gymFee;\n', '        maxTrainerLevel = _maxTrainerLevel;\n', '        maxRandomRound = _maxRandomRound;\n', '        typeBuffPercentage = _typeBuffPercentage;\n', '        minHpDeducted = _minHpDeducted;\n', '        expPercentage = _expPercentage;\n', '    }\n', '    \n', '    function genLevelExp() onlyModerators external {\n', '        uint8 level = 1;\n', '        uint32 requirement = 100;\n', '        uint32 sum = requirement;\n', '        while(level <= 100) {\n', '            levelExps[level] = sum;\n', '            level += 1;\n', '            requirement = (requirement * 11) / 10 + 5;\n', '            sum += requirement;\n', '        }\n', '    }\n', '    \n', '    function genLevelExpGain() onlyModerators external {\n', '        levelExpGains[1] = 31;\n', '        levelExpGains[2] = 33;\n', '        levelExpGains[3] = 34;\n', '        levelExpGains[4] = 36;\n', '        levelExpGains[5] = 38;\n', '        levelExpGains[6] = 40;\n', '        levelExpGains[7] = 42;\n', '        levelExpGains[8] = 44;\n', '        levelExpGains[9] = 46;\n', '        levelExpGains[10] = 48;\n', '    }\n', '    \n', '    function setLevelExpGain(uint8 _level, uint32 _exp) onlyModerators external {\n', '        levelExpGains[_level] = _exp;\n', '    }\n', '    \n', '    function withdrawEther(address _sendTo, uint _amount) onlyModerators external {\n', '        if (_amount > this.balance) {\n', '            revert();\n', '        }\n', '        _sendTo.transfer(_amount);\n', '    }\n', '    \n', '    // public\n', '    function getCacheClassSize(uint32 _classId) constant public returns(uint, uint, uint) {\n', '        CacheClassInfo storage classInfo = cacheClasses[_classId];\n', '        return (classInfo.types.length, classInfo.steps.length, classInfo.ancestors.length);\n', '    }\n', '    \n', '    function getTrainerInfo(uint8 _trainerId) constant external returns(uint32, uint8, uint8, uint8, uint8, uint8, uint8) {\n', '        GymTrainer memory trainer = gymTrainers[_trainerId];\n', '        return (trainer.classId, trainer.statBases[0], trainer.statBases[1], trainer.statBases[2], trainer.statBases[3],\n', '            trainer.statBases[4], trainer.statBases[5]);\n', '    }\n', '    \n', '    function getRandom(uint8 maxRan, uint8 index) constant public returns(uint8) {\n', '        uint256 genNum = uint256(block.blockhash(block.number-1));\n', '        for (uint8 i = 0; i < index && i < 6; i ++) {\n', '            genNum /= 256;\n', '        }\n', '        return uint8(genNum % maxRan);\n', '    }\n', '    \n', '    function getLevel(uint32 exp) view public returns (uint8) {\n', '        uint8 minIndex = 1;\n', '        uint8 maxIndex = 100;\n', '        uint8 currentIndex;\n', '     \n', '        while (minIndex < maxIndex) {\n', '            currentIndex = (minIndex + maxIndex) / 2;\n', '            if (exp < levelExps[currentIndex])\n', '                maxIndex = currentIndex;\n', '            else\n', '                minIndex = currentIndex + 1;\n', '        }\n', '        return minIndex;\n', '    }\n', '    \n', '    function getGainExp(uint8 xLevel, uint8 yLevel) constant public returns(uint32 winExp, uint32 loseExp){\n', '        winExp = levelExpGains[yLevel] * expPercentage / 100;\n', '        if (xLevel > yLevel) {\n', '            if (xLevel > yLevel + 10) {\n', '                winExp = 5;\n', '            } else {\n', '                winExp /= uint32(3) ** (xLevel - yLevel) / uint32(2) ** (xLevel - yLevel);\n', '                if (winExp < 5)\n', '                    winExp = 5;\n', '            }\n', '        }\n', '        loseExp = winExp / 3;\n', '    }\n', '    \n', '    function safeDeduct(uint16 a, uint16 b) pure private returns(uint16){\n', '        if (a > b) {\n', '            return a - b;\n', '        }\n', '        return 0;\n', '    }\n', '    \n', '    function getTypeSupport(uint32 _aClassId, uint32 _bClassId) constant private returns (bool aHasAdvantage, bool bHasAdvantage) {\n', '        // check types \n', '        for (uint i = 0; i < cacheClasses[_aClassId].types.length; i++) {\n', '            for (uint j = 0; j < cacheClasses[_bClassId].types.length; j++) {\n', '                if (typeAdvantages[cacheClasses[_aClassId].types[i]] == cacheClasses[_bClassId].types[j]) {\n', '                    aHasAdvantage = true;\n', '                }\n', '                if (typeAdvantages[cacheClasses[_bClassId].types[j]] == cacheClasses[_aClassId].types[i]) {\n', '                    bHasAdvantage = true;\n', '                }\n', '            }\n', '        }\n', '    }\n', '    \n', '    function calHpDeducted(uint16 _attack, uint16 _specialAttack, uint16 _defense, uint16 _specialDefense, bool _lucky) view public returns(uint16){\n', '        if (_lucky) {\n', '            _attack = _attack * 13 / 10;\n', '            _specialAttack = _specialAttack * 13 / 10;\n', '        }\n', '        uint16 hpDeducted = safeDeduct(_attack, _defense * 3 /4);\n', '        uint16 hpSpecialDeducted = safeDeduct(_specialAttack, _specialDefense* 3 / 4);\n', '        if (hpDeducted < minHpDeducted && hpSpecialDeducted < minHpDeducted)\n', '            return minHpDeducted;\n', '        if (hpDeducted > hpSpecialDeducted)\n', '            return hpDeducted;\n', '        return hpSpecialDeducted;\n', '    }\n', '    \n', '    function attack(uint8 _index, uint8 _ran, uint16[6] _aStats, uint16[6] _bStats) constant public returns(bool win) {\n', '        if (_ran < _index * maxRandomRound)\n', '            _ran = maxRandomRound;\n', '        else\n', '            _ran = _ran - _index * maxRandomRound;\n', '            \n', '        uint16 round = 0;\n', '        uint16 aHp = _aStats[0];\n', '        uint16 bHp = _bStats[0];\n', '        if (_aStats[5] > _bStats[5]) {\n', '            while (round < maxRandomRound && aHp > 0 && bHp > 0) {\n', '                if (round % 2 == 0) {\n', '                    // a attack \n', '                    bHp = safeDeduct(bHp, calHpDeducted(_aStats[1], _aStats[3], _bStats[2], _bStats[4], round==_ran));\n', '                } else {\n', '                    aHp = safeDeduct(aHp, calHpDeducted(_bStats[1], _bStats[3], _aStats[2], _aStats[4], round==_ran));\n', '                }\n', '                round++;\n', '            }\n', '        } else {\n', '            while (round < maxRandomRound && aHp > 0 && bHp > 0) {\n', '                if (round % 2 != 0) {\n', '                    bHp = safeDeduct(bHp, calHpDeducted(_aStats[1], _aStats[3], _bStats[2], _bStats[4], round==_ran));\n', '                } else {\n', '                    aHp = safeDeduct(aHp, calHpDeducted(_bStats[1], _bStats[3], _aStats[2], _aStats[4], round==_ran));\n', '                }\n', '                round++;\n', '            }\n', '        }\n', '        \n', '        win = aHp >= bHp;\n', '    }\n', '    \n', '    function attackTrainer(uint8 _index, uint8 _ran, uint8 _trainerId, uint8 _trainerLevel, uint32 _objClassId, uint16[6] _objStats) constant public returns(bool result) {\n', '        GymTrainer memory trainer = gymTrainers[_trainerId];\n', '        uint16[6] memory trainerStats;\n', '        uint i = 0;\n', '        for (i=0; i < STAT_COUNT; i+=1) {\n', '            trainerStats[i] = trainer.statBases[i];\n', '        }\n', '        for (i=0; i < cacheClasses[trainer.classId].steps.length; i++) {\n', '            trainerStats[i] += uint16(safeMult(cacheClasses[trainer.classId].steps[i], _trainerLevel*3));\n', '        }\n', '        \n', '        bool objHasAdvantage;\n', '        bool trainerHasAdvantage;\n', '        (objHasAdvantage, trainerHasAdvantage) = getTypeSupport(_objClassId, trainer.classId);\n', '        uint16 originAttack = _objStats[1];\n', '        uint16 originAttackSpecial = _objStats[3];\n', '        if (objHasAdvantage) {\n', '            _objStats[1] += _objStats[1] * typeBuffPercentage / 100;\n', '            _objStats[3] += _objStats[3] * typeBuffPercentage / 100;\n', '        }\n', '        if (trainerHasAdvantage) {\n', '            trainerStats[1] += trainerStats[1] * typeBuffPercentage / 100;\n', '            trainerStats[3] += trainerStats[3] * typeBuffPercentage / 100;\n', '        }\n', '        result = attack(_index, _ran, _objStats, trainerStats);\n', '        _objStats[1] = originAttack;\n', '        _objStats[3] = originAttackSpecial;\n', '    }\n', '    \n', '    function getObjInfo(uint64 _objId) constant public returns(uint32 classId, address trainee, uint8 level) {\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        MonsterObjAcc memory obj;\n', '        (obj.monsterId, classId, trainee, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(_objId);\n', '        level = getLevel(obj.exp);\n', '    }\n', '    \n', '    function startTraining(uint64 _objId, uint8 _trainerLevel, uint8 _t1, uint8 _t2, uint8 _t3) isActive requireDataContract requireWorldContract payable external {\n', '        if (_trainerLevel > maxTrainerLevel)\n', '            revert();\n', '        if (msg.value != gymFee)\n', '            revert();\n', '        if (_t1 == _t2 || _t1 == _t3 || _t2 == _t3)\n', '            revert();\n', '        if (_t1 == 0 || _t2 == 0 || _t3 == 0 || _t1 > totalTrainer || _t2 > totalTrainer || _t3 > totalTrainer)\n', '            revert();\n', '\n', '        AttackData memory att;\n', '        (att.objClassId, att.trainee, att.objLevel) = getObjInfo(_objId);\n', '        if (msg.sender != att.trainee)\n', '            revert();\n', '\n', '        uint i = 0;\n', '        uint16[6] memory objStats;\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        for (i=0; i < STAT_COUNT; i+=1) {\n', '            objStats[i] = data.getElementInArrayType(ArrayType.STAT_BASE, _objId, i);\n', '        }\n', '        for (i=0; i < cacheClasses[att.objClassId].steps.length; i++) {\n', '            objStats[i] += uint16(safeMult(cacheClasses[att.objClassId].steps[i], att.objLevel*3));\n', '        }\n', '        \n', '        att.winCount = 0;\n', '        uint8 ran = getRandom(maxRandomRound*3, 0);\n', '        if (attackTrainer(0, ran, _t1, _trainerLevel, att.objClassId, objStats))\n', '            att.winCount += 1;\n', '        if (attackTrainer(1, ran, _t2, _trainerLevel, att.objClassId, objStats))\n', '            att.winCount += 1;\n', '        if (attackTrainer(2, ran, _t3, _trainerLevel, att.objClassId, objStats))\n', '            att.winCount += 1;\n', '\n', '        (att.winExp, att.loseExp) = getGainExp(att.objLevel, _trainerLevel);\n', '        EtheremonGateway gateway = EtheremonGateway(worldContract);\n', '        gateway.increaseMonsterExp(_objId, att.winCount * att.winExp + (3 - att.winCount) * att.loseExp);\n', '        \n', '        TrainingLog storage trainingLog = trainees[msg.sender];\n', '        trainingLog.trainers[0] = _t1;\n', '        trainingLog.trainers[1] = _t2;\n', '        trainingLog.trainers[2] = _t3;\n', '        trainingLog.trainerLevel = _trainerLevel;\n', '        trainingLog.objId = _objId;\n', '        trainingLog.objLevel = att.objLevel;\n', '        trainingLog.ran = ran;\n', '    }\n', '    \n', '    function getTrainingLog(address _trainee) constant external returns(uint8, uint8, uint8, uint64, uint8, uint8, uint8) {\n', '        TrainingLog memory trainingLog = trainees[_trainee];\n', '        return (trainingLog.trainers[0], trainingLog.trainers[1], trainingLog.trainers[2], \n', '            trainingLog.objId, trainingLog.trainerLevel, trainingLog.objLevel, trainingLog.ran);\n', '    }\n', '}']