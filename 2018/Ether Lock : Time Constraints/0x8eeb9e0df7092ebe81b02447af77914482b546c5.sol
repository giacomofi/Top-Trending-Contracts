['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract Z_ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract Z_ERC20 is Z_ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', ' \n', '\n', '/**\n', ' * @title Basic token implementation\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract Z_BasicToken is Z_ERC20Basic {\n', '   \n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] -= _value;\n', '    balances[_to] += _value;\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token, implementing  transfer by agents \n', ' *\n', ' * @dev Implementation of the basic standard token with allowances.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract Z_StandardToken is Z_ERC20, Z_BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', ' \n', '  /**\n', '   * @dev Transfer tokens from one address to another by agents within allowance limit \n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   * @return true\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] -= _value;\n', '    balances[_to] += _value;\n', '    allowed[_from][msg.sender] -= _value;\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to  by admin , without any allowance limit\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   * @return true\n', '   */\n', '  function transferFromByAdmin(address _from, address _to, uint256 _value) internal returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    //require(_value <= 100000);\n', '\n', '    balances[_from] -= _value;\n', '    balances[_to] += _value;\n', '\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   * @return true\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified *additional* amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The additional amount of tokens to be spent.\n', '   * @return true\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender] + (_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the allownance quota by the specified amount of tokens\n', '   *\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to be decreased\n', '   * @return true\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue - (_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and multiple admin addresses, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Z_Ownable {\n', '  address public owner;\n', '  mapping (address => bool) internal admin_accounts;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    // set msg.sender as owner\n', '    owner = msg.sender;\n', '    // set msg.sender as first administrator\n', '    admin_accounts[msg.sender]= true;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner );\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev check if msg.sender is owner\n', '   * @return true  if msg.sender is owner\n', '   */\n', '  function  isOwner() internal view returns (bool) {\n', '    return (msg.sender == owner );\n', '    \n', '  }\n', '  \n', '  /**\n', '   * @dev Throws if called by any account other than admins.\n', '   */\n', '  modifier onlyAdmin() {\n', '    require (admin_accounts[msg.sender]==true);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev check if msg.sender is admin\n', '   * @return true  if msg.sender is admin\n', '   */\n', '  function  isAdmin() internal view returns (bool) {\n', '    return  (admin_accounts[msg.sender]==true);\n', '    \n', '  }\n', ' \n', '}\n', '\n', '\n', '/** @title main contract for viva token. we should deploy this contract. needs about 5,500,000 gas */\n', '\n', 'contract VIVACHAIN is Z_StandardToken, Z_Ownable {\n', '    string  public  constant name = "VIVACHAIN";\n', '    string  public  constant symbol = "VIVA";\n', '    uint8   public  constant decimals = 18; // token traded in integer amounts, no period\n', '\n', '    // total token supply: 10 billion viva\n', '    uint256 internal constant _totalTokenAmount = 10 * (10 ** 9) * (10 ** 18);\n', '\n', '    uint256 internal constant WEI_PER_ETHER= 1000000000000000000; // 10^18 wei = 1 ether\n', '    uint256 internal constant NUM_OF_SALE_STAGES= 5; // support upto five sale stages\n', '\n', '    // enum type definition for sale status (0 ~ 13)\n', '    enum Sale_Status {\n', '      Initialized_STATUS, // 0\n', '      Stage0_Sale_Started_STATUS, // 1, stage0\n', '      Stage0_Sale_Stopped_STATUS, // 2, stage0\n', '      Stage1_Sale_Started_STATUS, // 3, stage1\n', '      Stage1_Sale_Stopped_STATUS, // 4, stage1\n', '      Stage2_Sale_Started_STATUS, // 5, stage2\n', '      Stage2_Sale_Stopped_STATUS, // 6, stage2\n', '      Stage3_Sale_Started_STATUS, // 7, stage3\n', '      Stage3_Sale_Stopped_STATUS, // 8, stage3\n', '      Stage4_Sale_Started_STATUS, // 9,  stage4\n', '      Stage4_Sale_Stopped_STATUS, // 10, stage4\n', '      Public_Allowed_To_Trade_STATUS, // 11\n', '      Stage0_Allowed_To_Trade_STATUS, // 12\n', '      Closed_STATUS  // 13\n', '    }\n', '\n', '    // sale status variable: 0 ~ 13 (enum Sale_Status )\n', '    Sale_Status  public  sale_status= Sale_Status.Initialized_STATUS;\n', '\n', '    // sale stage index : 0 ~ 4 ( 0:1~2,  1:3~4, 2:5~6, 3:7~8, 4:9~10) \n', '    uint256   public  sale_stage_index= 0; // 0 ~ 4 for stage0 ~ 4\n', '\n', '    // initiazlied time\n', '    uint256  public  when_initialized= 0;\n', '\n', '    // timestamp when public trade begins except stage0\n', '    uint256  public  when_public_allowed_to_trade_started= 0;\n', '\n', '    // timestamp when *all* tokens trade begins including stage0\n', '    uint256  public  when_stage0_allowed_to_trade_started= 0;\n', '\n', "    // array of sale starting time's timestamp\n", '    uint256 [NUM_OF_SALE_STAGES] public  when_stageN_sale_started;\n', '\n', "    // array of sale stopping time's timestamp\n", '    uint256 [NUM_OF_SALE_STAGES] public  when_stageN_sale_stopped;\n', '\n', '    // sum of all sold tokens\n', '    uint256 public sold_tokens_total= 0;\n', '\n', '    // sum of ethers received during all token sale stages\n', '    uint256 public raised_ethers_total= 0;\n', '\n', '    // array of sold tokens per sale stage\n', '    uint256[NUM_OF_SALE_STAGES] public sold_tokens_per_stage;\n', '\n', '    // array of received ethers per sale stage\n', '    uint256[NUM_OF_SALE_STAGES] public raised_ethers_per_stage;\n', '\n', '    // target ether amount to gather in each sale stage, when fullfilled, the sale stage automatically forced to stop\n', '    uint256[NUM_OF_SALE_STAGES] public target_ethers_per_stage= [\n', '       1000 * WEI_PER_ETHER, // stage0 for staff\n', '       9882 * WEI_PER_ETHER, // stage1 for black sale\n', '      11454 * WEI_PER_ETHER, // stage2 for private sale\n', '      11200 * WEI_PER_ETHER, // stage3 for public sale\n', '      11667 * WEI_PER_ETHER  // stage4 for crowd sale\n', '    ];\n', '\n', '    // array of token sale price for each stage (wei per viva)\n', '    uint256[NUM_OF_SALE_STAGES] internal  sale_price_per_stage_wei_per_viva = [\n', '      uint256(1000000000000000000/ uint256(100000)),// stage0 for staff\n', '      uint256(1000000000000000000/ uint256(38000)), // stage1 for black sale\n', '      uint256(1000000000000000000/ uint256(23000)), // stage2 for private sale\n', '      uint256(1000000000000000000/ uint256(17000)), // stage3 for public sale\n', '      uint256(1000000000000000000/ uint256(10000))  // stage4 for crowd sale\n', '    ];\n', '\n', '    // struct definition for token transfer history\n', '    struct history_token_transfer_obj {\n', '      address _from;\n', '      address _to;\n', '      uint256 _token_value; // in viva token\n', '      uint256 _when; \n', '    }\n', '\n', '    // struct definition for token burning history\n', '    struct history_token_burning_obj {\n', '      address _from;\n', '      uint256 _token_value_burned; // in viva token\n', '      uint256 _when; \n', '    }\n', '\n', '    // token transfer history\n', '    history_token_transfer_obj[] internal history_token_transfer;\n', '\n', '    // token burning history\n', '    history_token_burning_obj[]  internal history_token_burning;\n', '\n', '    // token sale amount for each account per stage 0 ~ 4\n', '    mapping (address => uint256) internal sale_amount_stage0_account;\n', '    mapping (address => uint256) internal sale_amount_stage1_account;\n', '    mapping (address => uint256) internal sale_amount_stage2_account;\n', '    mapping (address => uint256) internal sale_amount_stage3_account;\n', '    mapping (address => uint256) internal sale_amount_stage4_account;\n', '\n', '    \n', '    // array for list of  holders and their receiving amounts\n', '    mapping (address => uint256) internal holders_received_accumul;\n', '\n', '    // array for list of holders accounts (including even inactive holders) \n', '    address[] public holders;\n', '\n', '    // array for list of sale holders accounts for each sale stage\n', '    address[] public holders_stage0_sale;\n', '    address[] public holders_stage1_sale;\n', '    address[] public holders_stage2_sale;\n', '    address[] public holders_stage3_sale;\n', '    address[] public holders_stage4_sale;\n', '    \n', '    // array for list of trading holders which are not sale holders\n', '    address[] public holders_trading;\n', '\n', '    // array for list of burning holders accounts\n', '    address[] public holders_burned;\n', '\n', '    // array for list of frozen holders accounts\n', '    address[] public holders_frozen;\n', '\n', '    // burned tokens for each holders account\n', '    mapping (address => uint256) public burned_amount;\n', '\n', '    // sum of all burned tokens\n', '    uint256 public totalBurned= 0;\n', '\n', '    // total ether value withdrawed from this contract by contract owner\n', '    uint256 public totalEtherWithdrawed= 0;\n', '\n', '    // addess to timestamp mapping  to  mark the account freezing time ( 0 means later unfreezed )\n', '    mapping (address => uint256) internal account_frozen_time;\n', '\n', '    // unused\n', '    mapping (address => mapping (string => uint256)) internal traded_monthly;\n', '\n', '    // cryptocurrency exchange office  ether address, for monitorig purpose\n', '    address[] public cryptocurrency_exchange_company_accounts;\n', '\n', '    \n', '    /////////////////////////////////////////////////////////////////////////\n', ' \n', '    event AddNewAdministrator(address indexed _admin, uint256 indexed _when);\n', '    event RemoveAdministrator(address indexed _admin, uint256 indexed _when);\n', '  \n', '    /**\n', '     *  @dev   add new admin accounts \n', '     *        (run by admin, public function) \n', '     *  @param _newAdmin   new admin address\n', '     */\n', '    function z_admin_add_admin(address _newAdmin) public onlyOwner {\n', '      require(_newAdmin != address(0));\n', '      admin_accounts[_newAdmin]=true;\n', '    \n', '      emit AddNewAdministrator(_newAdmin, block.timestamp);\n', '    }\n', '  \n', '    /**\n', '     *  @dev   remove old admin accounts\n', '     *        (run by admin, public function) \n', '     *  @param _oldAdmin   old admin address\n', '     */\n', '    function z_admin_remove_admin(address _oldAdmin) public onlyOwner {\n', '      require(_oldAdmin != address(0));\n', '      require(admin_accounts[_oldAdmin]==true);\n', '      admin_accounts[_oldAdmin]=false;\n', '    \n', '      emit RemoveAdministrator(_oldAdmin, block.timestamp);\n', '    }\n', '  \n', '    event AddNewExchangeAccount(address indexed _exchange_account, uint256 indexed _when);\n', '\n', '    /**\n', '     *  @dev   add new exchange office accounts\n', '     *        (run by admin, public function) \n', '     *  @param _exchange_account   new exchange address\n', '     */\n', '    function z_admin_add_exchange(address _exchange_account) public onlyAdmin {\n', '      require(_exchange_account != address(0));\n', '      cryptocurrency_exchange_company_accounts.push(_exchange_account);\n', '    \n', '      emit AddNewExchangeAccount(_exchange_account, block.timestamp);\n', '    }\n', ' \n', '    event SaleTokenPriceSet(uint256 _stage_index, uint256 _wei_per_viva_value, uint256 indexed _when);\n', '\n', '    /**\n', '     * @dev  set new token sale price for current sale stage\n', '     *       (run buy admin, public function)\n', '     * return  _how_many_wei_per_viva   new token sale price (wei per viva)\n', '     */\n', '    function z_admin_set_sale_price(uint256 _how_many_wei_per_viva) public\n', '        onlyAdmin \n', '    {\n', '        if(_how_many_wei_per_viva == 0) revert();\n', '        if(sale_stage_index >= 5) revert();\n', '        sale_price_per_stage_wei_per_viva[sale_stage_index] = _how_many_wei_per_viva;\n', '        emit SaleTokenPriceSet(sale_stage_index, _how_many_wei_per_viva, block.timestamp);\n', '    }\n', '\n', '    /**\n', '     * @dev  return current or last token sale price\n', '     *       (public view function)\n', '     * return  _sale_price   get current token sale price (wei per viva)\n', '     * return  _current_sale_stage_index   get current sale stage index ( 0 ~ 4)\n', '     */\n', '    function CurrentSalePrice() public view returns (uint256 _sale_price, uint256 _current_sale_stage_index)  {\n', '        if(sale_stage_index >= 5) revert();\n', '        _current_sale_stage_index= sale_stage_index;\n', '        _sale_price= sale_price_per_stage_wei_per_viva[sale_stage_index];\n', '    }\n', '\n', '\n', '    event InitializedStage(uint256 indexed _when);\n', '    event StartStage0TokenSale(uint256 indexed _when);\n', '    event StartStage1TokenSale(uint256 indexed _when);\n', '    event StartStage2TokenSale(uint256 indexed _when);\n', '    event StartStage3TokenSale(uint256 indexed _when);\n', '    event StartStage4TokenSale(uint256 indexed _when);\n', '\n', '    /**\n', '     * @dev  start _new_sale_stage_index sale stage\n', '     *    (run by admin )\n', '     */\n', '    function start_StageN_Sale(uint256 _new_sale_stage_index) internal\n', '    {\n', '        if(sale_status==Sale_Status.Initialized_STATUS || sale_stage_index+1<= _new_sale_stage_index)\n', '           sale_stage_index= _new_sale_stage_index;\n', '        else\n', '           revert();\n', '        sale_status= Sale_Status(1 + sale_stage_index * 2); // 0=>1, 1=>3, 2=>5, 3=>7, 4=>9\n', '        when_stageN_sale_started[sale_stage_index]= block.timestamp;\n', '        if(sale_stage_index==0) emit StartStage0TokenSale(block.timestamp); \n', '        if(sale_stage_index==1) emit StartStage1TokenSale(block.timestamp); \n', '        if(sale_stage_index==2) emit StartStage2TokenSale(block.timestamp); \n', '        if(sale_stage_index==3) emit StartStage3TokenSale(block.timestamp); \n', '        if(sale_stage_index==4) emit StartStage4TokenSale(block.timestamp); \n', '    }\n', '\n', '\n', '\n', '    event StopStage0TokenSale(uint256 indexed _when);\n', '    event StopStage1TokenSale(uint256 indexed _when);\n', '    event StopStage2TokenSale(uint256 indexed _when);\n', '    event StopStage3TokenSale(uint256 indexed _when);\n', '    event StopStage4TokenSale(uint256 indexed _when);\n', '\n', '    /**\n', '     * @dev  stop this [_old_sale_stage_index] sale stage\n', '     *     (run by admin )\n', '     */\n', '    function stop_StageN_Sale(uint256 _old_sale_stage_index) internal \n', '    {\n', '        if(sale_stage_index != _old_sale_stage_index)\n', '           revert();\n', '        sale_status= Sale_Status(2 + sale_stage_index * 2); // 0=>2, 1=>4, 2=>6, 3=>8, 4=>10\n', '        when_stageN_sale_stopped[sale_stage_index]= block.timestamp;\n', '        if(sale_stage_index==0) emit StopStage0TokenSale(block.timestamp); \n', '        if(sale_stage_index==1) emit StopStage1TokenSale(block.timestamp); \n', '        if(sale_stage_index==2) emit StopStage2TokenSale(block.timestamp); \n', '        if(sale_stage_index==3) emit StopStage3TokenSale(block.timestamp); \n', '        if(sale_stage_index==4) emit StopStage4TokenSale(block.timestamp); \n', '    }\n', '\n', '\n', '\n', '    event StartTradePublicSaleTokens(uint256 indexed _when);\n', '\n', '    /**\n', '     *  @dev  allow stage1~4 token trading \n', '     *      (run by admin )\n', '     */\n', '    function start_Public_Trade() internal\n', '        onlyAdmin\n', '    {\n', '        // if current sale stage had not been stopped, first stop current active sale stage \n', '        Sale_Status new_sale_status= Sale_Status(2 + sale_stage_index * 2);\n', '        if(new_sale_status > sale_status)\n', '          stop_StageN_Sale(sale_stage_index);\n', '\n', '        sale_status= Sale_Status.Public_Allowed_To_Trade_STATUS;\n', '        when_public_allowed_to_trade_started= block.timestamp;\n', '        emit StartTradePublicSaleTokens(block.timestamp); \n', '    }\n', '\n', '    event StartTradeStage0SaleTokens(uint256 indexed _when);\n', '\n', '    /**\n', '     *  @dev  allow stage0 token trading\n', '     *        (run by admin )\n', '     */\n', '    function start_Stage0_Trade() internal\n', '        onlyAdmin\n', '    {\n', '        if(sale_status!= Sale_Status.Public_Allowed_To_Trade_STATUS) revert();\n', '        \n', '        // allowed 1 year later after stage1 tokens trading is enabled\n', '\n', '        uint32 stage0_locked_year= 1;\n', ' \n', '        bool is_debug= false; // change to false if this contract source  is release version \n', '        if(is_debug==false && block.timestamp <  stage0_locked_year*365*24*60*60\n', '            + when_public_allowed_to_trade_started  )  \n', '\t      revert();\n', '        if(is_debug==true  && block.timestamp <  stage0_locked_year*10*60\n', '            + when_public_allowed_to_trade_started  )  \n', '\t      revert();\n', '\t      \n', '        sale_status= Sale_Status.Stage0_Allowed_To_Trade_STATUS;\n', '        when_stage0_allowed_to_trade_started= block.timestamp;\n', '        emit StartTradeStage0SaleTokens(block.timestamp); \n', '    }\n', '\n', '\n', '\n', '\n', '    event CreateTokenContract(uint256 indexed _when);\n', '\n', '    /**\n', '     *  @dev  token contract constructor(), initialized tokens supply and sale status variables\n', '     *         (run by owner when contract deploy)\n', '     */\n', '    constructor() public\n', '    {\n', '        totalSupply = _totalTokenAmount;\n', '        balances[msg.sender] = _totalTokenAmount;\n', '\n', '        sale_status= Sale_Status.Initialized_STATUS;\n', '        sale_stage_index= 0;\n', '\n', '        when_initialized= block.timestamp;\n', '\n', '        holders.push(msg.sender); \n', '        holders_received_accumul[msg.sender] += _totalTokenAmount;\n', '\n', '        emit Transfer(address(0x0), msg.sender, _totalTokenAmount);\n', '        emit InitializedStage(block.timestamp);\n', '        emit CreateTokenContract(block.timestamp); \n', '    }\n', '\n', '\n', '\n', '\n', '    /**\n', '     * @dev check if specified token transfer request is valid \n', '     *           ( internal modifier function).\n', '     *           revert  if transfer should be NOT allowed, otherwise do nothing\n', '     * @param _from   source account from whom tokens should be transferred\n', '     * @param _to   destination account to whom tokens should be transferred\n', '     * @param _value   number of tokens to be transferred\n', '     */\n', '    modifier validTransaction( address _from, address _to, uint256 _value)\n', '    {\n', '        require(_to != address(0x0));\n', '        require(_to != _from);\n', '        require(_value > 0);\n', '        if(isAdmin()==false)  {\n', '\t    // if _from is frozen account, disallow this request\n', '\t    if(account_frozen_time[_from] > 0) revert();\n', '\t    if(_value == 0 ) revert();\n', '\n', '            // if token trading is not enabled yet, disallow this request\n', '            if(sale_status < Sale_Status.Public_Allowed_To_Trade_STATUS) revert();\n', '\n', '            // if stage0 token trading is not enabled yet, disallow this request\n', '            if( sale_amount_stage0_account[_from] > 0 ) {\n', '                if(sale_status < Sale_Status.Stage0_Allowed_To_Trade_STATUS)  \n', '                    revert();\n', '            }  else {\n', '            }\n', '  \t }\n', '        _;\n', '    }\n', '\n', '\n', '    event TransferToken(address indexed _from_whom,address indexed _to_whom,\n', '         uint _token_value, uint256 indexed _when);\n', '    event TransferTokenFrom(address indexed _from_whom,address indexed _to_whom, address _agent,\n', '\t uint _token_value, uint256 indexed _when);\n', '    event TransferTokenFromByAdmin(address indexed _from_whom,address indexed _to_whom, address _admin, \n', ' \t uint _token_value, uint256 indexed _when);\n', '\n', '    /**\n', '     * @dev transfer specified amount of tokens from my account to _to account \n', '     *     (run by self, public function)\n', '     * @param _to   destination account to whom tokens should be transferred\n', '     * @param _value   number of tokens to be transferred\n', '     * @return _success   report if transfer was successful, on failure revert()\n', '     */\n', '    function transfer(address _to, uint _value) public \n', '        validTransaction(msg.sender, _to,  _value)\n', '    returns (bool _success) \n', '    {\n', '        _success= super.transfer(_to, _value);\n', '        if(_success==false) revert();\n', '\n', '  \temit TransferToken(msg.sender,_to,_value,block.timestamp);\n', '\n', '\t// check if new trading holder\n', '        if(holders_received_accumul[_to]==0x0) {\n', '\t   // new holder comes\n', '           holders.push(_to); \n', '           holders_trading.push(_to);\n', '\t   emit NewHolderTrading(_to, block.timestamp);\n', '        }\n', '        holders_received_accumul[_to] += _value;\n', '\n', '\t// leave a transfer history entry\n', '        history_token_transfer.push( history_token_transfer_obj( {\n', '\t       _from: msg.sender,\n', '\t       _to: _to,\n', '\t       _token_value: _value,\n', '\t       _when: block.timestamp\n', '        } ) );\n', '    }\n', '\n', '    /**\n', '     * @dev transfer specified amount of tokens from _from account to _to account\n', '     *     (run by agent, public function)\n', '     * @param _from   client account who approved transaction performed by this sender as agent\n', '     * @param _to   destination account to whom tokens should be transferred\n', '     * @param _value   number of tokens to be transferred\n', '     * @return _success   report if transfer was successful, on failure revert()\n', '     */\n', '    function transferFrom(address _from, address _to, uint _value) public \n', '        validTransaction(_from, _to, _value)\n', '    returns (bool _success) \n', '    {\n', '        if(isAdmin()==true) {\n', '            // admins can transfer tokens of **ANY** accounts\n', '            emit TransferTokenFromByAdmin(_from,_to,msg.sender,_value,block.timestamp);\n', '            _success= super.transferFromByAdmin(_from,_to, _value);\n', '        }\n', '        else {\n', "            // approved agents can transfer tokens of their clients (clients shoukd 'approve()' agents first)\n", '            emit TransferTokenFrom(_from,_to,msg.sender,_value,block.timestamp);\n', '            _success= super.transferFrom(_from, _to, _value);\n', '        }\n', '\n', '        if(_success==false) revert();\n', '        \n', '\t// check if new trading holder\n', '        if(holders_received_accumul[_to]==0x0) {\n', '\t   // new holder comes\n', '           holders.push(_to); \n', '           holders_trading.push(_to); \n', '\t   emit NewHolderTrading(_to, block.timestamp);\n', '        }\n', '        holders_received_accumul[_to] += _value;\n', '\n', '\t// leave a transfer history entry\n', '        history_token_transfer.push( history_token_transfer_obj( {\n', '\t       _from: _from,\n', '\t       _to: _to,\n', '\t       _token_value: _value,\n', '\t       _when: block.timestamp\n', '        } ) );\n', '\n', '    }\n', '\n', '    \n', '    event IssueTokenSale(address indexed _buyer, uint _ether_value, uint _token_value,\n', '           uint _exchange_rate_viva_per_wei, uint256 indexed _when);\n', '\n', '    /**\n', '     * @dev  fallback function for incoming ether, receive ethers and give tokens back\n', '     */\n', '    function () public payable {\n', '        buy();\n', '    }\n', '\n', '    event NewHolderTrading(address indexed _new_comer, uint256 indexed _when);\n', '    event NewHolderSale(address indexed _new_comer, uint256 indexed _when);\n', '    \n', '    /**\n', '     *  @dev   buy viva tokens by sending some ethers  to this contract address\n', '     *       (payable public function )\n', '     */\n', '    function buy() public payable {\n', '        if(sale_status < Sale_Status.Stage0_Sale_Started_STATUS) \n', '           revert();\n', '        \n', '        if(sale_status > Sale_Status.Stage4_Sale_Stopped_STATUS) \n', '           revert();\n', '        \n', '        if((uint256(sale_status)%2)!=1)  revert(); // not in started sale status\n', '        if(isAdmin()==true)  revert(); // admins are not allowed to buy tokens\n', '\t  \n', '        uint256 tokens;\n', '        \n', '        uint256 wei_per_viva= sale_price_per_stage_wei_per_viva[sale_stage_index];\n', '\n', '        // if sent ether value is less than exch_rate, revert\n', '        if (msg.value <  wei_per_viva) revert();\n', '\n', '        // calculate num of bought tokens based on sent ether value (in wei)\n', '\ttokens = uint256( msg.value /  wei_per_viva );\n', '      \n', '        if (tokens + sold_tokens_total > totalSupply) revert();\n', '\n', '        // update token sale statistics  per stage\n', '\tif(sale_stage_index==0) sale_amount_stage0_account[msg.sender] += tokens; else\t\n', '\tif(sale_stage_index==1) sale_amount_stage1_account[msg.sender] += tokens; else\t\n', '\tif(sale_stage_index==2) sale_amount_stage2_account[msg.sender] += tokens; else\t\n', '\tif(sale_stage_index==3) sale_amount_stage3_account[msg.sender] += tokens; else\t\n', '\tif(sale_stage_index==4) sale_amount_stage4_account[msg.sender] += tokens;\t\n', '\tsold_tokens_per_stage[sale_stage_index] += tokens;\n', '        sold_tokens_total += tokens;\n', '\n', '        // update ether statistics\n', '\traised_ethers_per_stage[sale_stage_index] +=  msg.value;\n', '        raised_ethers_total +=  msg.value;\n', '\n', '        super.transferFromByAdmin(owner, msg.sender, tokens);\n', '\n', '\t// check if this holder is new\n', '        if(holders_received_accumul[msg.sender]==0x0) {\n', '\t   // new holder comes\n', '           holders.push(msg.sender); \n', '\t   if(sale_stage_index==0) holders_stage0_sale.push(msg.sender); else \n', '\t   if(sale_stage_index==1) holders_stage1_sale.push(msg.sender); else \n', '\t   if(sale_stage_index==2) holders_stage2_sale.push(msg.sender); else \n', '\t   if(sale_stage_index==3) holders_stage3_sale.push(msg.sender); else \n', '\t   if(sale_stage_index==4) holders_stage4_sale.push(msg.sender); \n', '\t   emit NewHolderSale(msg.sender, block.timestamp);\n', '        }\n', '        holders_received_accumul[msg.sender] += tokens;\n', '\n', '        emit IssueTokenSale(msg.sender, msg.value, tokens, wei_per_viva, block.timestamp);\n', '        \n', '        // if target ether is reached, stop this sale stage \n', '\tif( target_ethers_per_stage[sale_stage_index] <= raised_ethers_per_stage[sale_stage_index])\n', '    \t    stop_StageN_Sale(sale_stage_index);\n', '    }\n', '\n', '\n', '    event FreezeAccount(address indexed _account_to_freeze, uint256 indexed _when);\n', '    event UnfreezeAccount(address indexed _account_to_unfreeze, uint256 indexed _when);\n', '    \n', '    /**\n', '     * @dev freeze a holder account, prohibit further token transfer \n', '     *     (run by ADMIN, public function)\n', '     * @param _account_to_freeze   account to freeze\n', '     */\n', '    function z_admin_freeze(address _account_to_freeze) public onlyAdmin   {\n', '        account_frozen_time[_account_to_freeze]= block.timestamp;\n', '        holders_frozen.push(_account_to_freeze);\n', '        emit FreezeAccount(_account_to_freeze,block.timestamp); \n', '    }\n', '\n', '    /**\n', '     * @dev unfreeze a holder account \n', '     *     (run by ADMIN, public function)\n', '     * @param _account_to_unfreeze   account to unfreeze (previously frozen)\n', '     */\n', '    function z_admin_unfreeze(address _account_to_unfreeze) public onlyAdmin   {\n', '        account_frozen_time[_account_to_unfreeze]= 0; // reset time to zero\n', '        emit UnfreezeAccount(_account_to_unfreeze,block.timestamp); \n', '    }\n', '\n', '\n', '\n', '\n', '    event CloseTokenContract(uint256 indexed _when);\n', '\n', '    /**\n', '     * @dev close this contract after burning all tokens \n', '     *     (run by ADMIN, public function )\n', '     */\n', '    function closeContract() onlyAdmin internal {\n', '\tif(sale_status < Sale_Status.Stage0_Allowed_To_Trade_STATUS)  revert();\n', '\tif(totalSupply > 0)  revert();\n', '    \taddress ScAddress = this;\n', '        emit CloseTokenContract(block.timestamp); \n', '        emit WithdrawEther(owner,ScAddress.balance,block.timestamp); \n', '\tselfdestruct(owner);\n', '    } \n', '\n', '\n', '\n', '    /**\n', "     * @dev retrieve contract's ether balance info \n", '     *     (public view function)\n', '     * @return _current_ether_balane   current contract ethereum balance ( in wei unit)\n', '     * @return _ethers_withdrawn   withdrawen ethers in wei\n', '     * @return _ethers_raised_total   total ethers gathered from token sale\n', '     */\n', '    function ContractEtherBalance() public view\n', '    returns (\n', '      uint256 _current_ether_balance,\n', '      uint256 _ethers_withdrawn,\n', '      uint256 _ethers_raised_total \n', '     ) {\n', '\t_current_ether_balance= address(this).balance;\n', '\t_ethers_withdrawn= totalEtherWithdrawed;\n', '\t_ethers_raised_total= raised_ethers_total;\n', '    } \n', '\n', '    event WithdrawEther(address indexed _addr, uint256 _value, uint256 indexed _when);\n', '\n', '    /**\n', "     * @dev transfer this contract ether balance to owner's account \n", '     *    ( public function )\n', '     * @param _withdraw_wei_value   amount to widthdraw ( in wei unit)\n', '     */\n', '    function z_admin_withdraw_ether(uint256 _withdraw_wei_value) onlyAdmin public {\n', '    \taddress ScAddress = this;\n', '    \tif(_withdraw_wei_value > ScAddress.balance) revert();\n', '    \t//if(owner.call.value(_withdraw_wei_value).gas(5000)()==false) revert();\n', '    \tif(owner.send(_withdraw_wei_value)==false) revert();\n', '        totalEtherWithdrawed += _withdraw_wei_value;\n', '        emit WithdrawEther(owner,_withdraw_wei_value,block.timestamp); \n', '    } \n', '\n', '\n', '    /**\n', '     * @dev return  list of active holders accounts and their balances \n', '     *     ( public view function )\n', '     * @param _max_num_of_items_to_display   Max Number of latest accounts items to display ( 0 means 1 )\n', '     * @return  _num_of_active_holders   number of latest holders accounts\n', '     * @return  _active_holders   array of active( balance > 0) holders\n', '     * @return  _token_balances   array of token balances \n', '     */\n', '    function list_active_holders_and_balances(uint _max_num_of_items_to_display) public view \n', '      returns (uint _num_of_active_holders,address[] _active_holders,uint[] _token_balances){\n', '      uint len = holders.length;\n', '      _num_of_active_holders = 0;\n', '      if(_max_num_of_items_to_display==0) _max_num_of_items_to_display=1;\n', '      for (uint i = len-1 ; i >= 0 ; i--) {\n', '         if( balances[ holders[i] ] != 0x0) _num_of_active_holders++;\n', '         if(_max_num_of_items_to_display == _num_of_active_holders) break;\n', '      }\n', '      _active_holders = new address[](_num_of_active_holders);\n', '      _token_balances = new uint[](_num_of_active_holders);\n', '      uint num=0;\n', '      for (uint j = len-1 ; j >= 0 && _num_of_active_holders > num ; j--) {\n', '         address addr = holders[j];\n', '         if( balances[ addr ] == 0x0) continue; // assure balance > 0\n', '         _active_holders[num] = addr;\n', '         _token_balances[num] = balances[addr];\n', '         num++;\n', '      }\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev return  list of latest #N transfer history\n', '     *      ( public view function )\n', '     * @param _max_num_of_items_to_display   Max Number of latest history items to display ( 0 means 1 )\n', '     * @return  _num   number of latest transfer history items\n', '     * @return  _senders   array of senders\n', '     * @return  _receivers   array of receivers\n', '     * @return  _tokens   array of tokens transferred\n', '     * @return  _whens   array of transfer times\n', '     */\n', '    function list_history_of_token_transfer(uint _max_num_of_items_to_display) public view \n', '      returns (uint _num,address[] _senders,address[] _receivers,uint[] _tokens,uint[] _whens){\n', '      uint len = history_token_transfer.length;\n', '      uint n= len;\n', '      if(_max_num_of_items_to_display == 0) _max_num_of_items_to_display= 1;\n', '      if(_max_num_of_items_to_display <  n) n= _max_num_of_items_to_display;\n', '      _senders = new address[](n);\n', '      _receivers = new address[](n);\n', '      _tokens = new uint[](n);\n', '      _whens = new uint[](n);\n', '      _num=0;\n', '      for (uint j = len-1 ; j >= 0 && n > _num ; j--) {\n', '         history_token_transfer_obj storage obj= history_token_transfer[j];\n', '         _senders[_num]= obj._from;\n', '         _receivers[_num]= obj._to;\n', '         _tokens[_num]=  obj._token_value;\n', '         _whens[_num]=   obj._when;\n', '         _num++;\n', '      }\n', '    }\n', '\n', '    /**\n', '     * @dev return  list of latest address-filtered #N transfer history \n', '     *     ( public view function )\n', '     * @param _addr   address as filter for transfer history (default 0x0)\n', '     * @return  _num   number of latest transfer history items\n', '     * @return  _senders   array of senders\n', '     * @return  _receivers   array of receivers\n', '     * @return  _tokens   array of tokens transferred\n', '     * @return  _whens   array of transfer times\n', '     */\n', '    function list_history_of_token_transfer_filtered_by_addr(address _addr) public view \n', '      returns (uint _num,address[] _senders,address[] _receivers,uint[] _tokens,uint[] _whens){\n', '      uint len = history_token_transfer.length;\n', '      uint _max_num_of_items_to_display= 0;\n', '      history_token_transfer_obj storage obj= history_token_transfer[0];\n', '      uint j;\n', '      for (j = len-1 ; j >= 0 ; j--) {\n', '         obj= history_token_transfer[j];\n', '         if(obj._from== _addr || obj._to== _addr) _max_num_of_items_to_display++;\n', '      }\n', '      if(_max_num_of_items_to_display == 0) _max_num_of_items_to_display= 1;\n', '      _senders = new address[](_max_num_of_items_to_display);\n', '      _receivers = new address[](_max_num_of_items_to_display);\n', '      _tokens = new uint[](_max_num_of_items_to_display);\n', '      _whens = new uint[](_max_num_of_items_to_display);\n', '      _num=0;\n', '      for (j = len-1 ; j >= 0 && _max_num_of_items_to_display > _num ; j--) {\n', '         obj= history_token_transfer[j];\n', '         if(obj._from!= _addr && obj._to!= _addr) continue;\n', '         _senders[_num]= obj._from;\n', '         _receivers[_num]= obj._to;\n', '         _tokens[_num]=  obj._token_value;\n', '         _whens[_num]=   obj._when;\n', '         _num++;\n', '      }\n', '    }\n', '\n', '    /**\n', '     * @dev return frozen accounts and their balances \n', '     *     ( public view function )\n', '     * @param _max_num_of_items_to_display   Max Number of items to display ( 0 means 1 )\n', '     * @return  _num   number of currently frozen accounts\n', '     * @return  _frozen_holders   array of frozen accounts\n', '     * @return  _whens   array of frozen times\n', '     */\n', '    function list_frozen_accounts(uint _max_num_of_items_to_display) public view\n', '      returns (uint _num,address[] _frozen_holders,uint[] _whens){\n', '      uint len = holders_frozen.length;\n', '      uint num_of_frozen_holders = 0;\n', '      if(_max_num_of_items_to_display==0) _max_num_of_items_to_display=1;\n', '      for (uint i = len-1 ; i >= 0 ; i--) {\n', '         // assure currently in frozen state\n', '         if( account_frozen_time[ holders_frozen[i] ] > 0x0) num_of_frozen_holders++;\n', '         if(_max_num_of_items_to_display == num_of_frozen_holders) break;\n', '      }\n', '      _frozen_holders = new address[](num_of_frozen_holders);\n', '      _whens = new uint[](num_of_frozen_holders);\n', '      _num=0;\n', '      for (uint j = len-1 ; j >= 0 && num_of_frozen_holders > _num ; j--) {\n', '         address addr= holders_frozen[j];\n', '         uint256 when= account_frozen_time[ addr ];\n', '         if( when == 0x0) continue; // assure if frozen true\n', '         _frozen_holders[_num]= addr;\n', '         _whens[_num]= when;\n', '         _num++;\n', '      }\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Admin menu: Token Sale Status management\n', '     *      (run by admin, public function)\n', '     * @param _next_status  next status index (1 ~ 13). refer to enum Sale_Status \n', '     */\n', '    function z_admin_next_status(Sale_Status _next_status) onlyAdmin public {\n', '      if(_next_status== Sale_Status.Stage0_Sale_Started_STATUS) { start_StageN_Sale(0); return;} // 1\n', '      if(_next_status== Sale_Status.Stage0_Sale_Stopped_STATUS) { stop_StageN_Sale(0); return;} // 2\n', '      if(_next_status== Sale_Status.Stage1_Sale_Started_STATUS) { start_StageN_Sale(1); return;} // 3\n', '      if(_next_status== Sale_Status.Stage1_Sale_Stopped_STATUS) { stop_StageN_Sale(1); return;} // 4\n', '      if(_next_status== Sale_Status.Stage2_Sale_Started_STATUS) { start_StageN_Sale(2); return;} // 5\n', '      if(_next_status== Sale_Status.Stage2_Sale_Stopped_STATUS) { stop_StageN_Sale(2); return;} // 6\n', '      if(_next_status== Sale_Status.Stage3_Sale_Started_STATUS) { start_StageN_Sale(3); return;} // 7\n', '      if(_next_status== Sale_Status.Stage3_Sale_Stopped_STATUS) { stop_StageN_Sale(3); return;} // 8\n', '      if(_next_status== Sale_Status.Stage4_Sale_Started_STATUS) { start_StageN_Sale(4); return;} // 9\n', '      if(_next_status== Sale_Status.Stage4_Sale_Stopped_STATUS) { stop_StageN_Sale(4); return;} // 10\n', '      if(_next_status== Sale_Status.Public_Allowed_To_Trade_STATUS) { start_Public_Trade(); return;} //11\n', '      if(_next_status== Sale_Status.Stage0_Allowed_To_Trade_STATUS) { start_Stage0_Trade(); return;} //12\n', '      if(_next_status== Sale_Status.Closed_STATUS) { closeContract(); return;} //13\n', '      revert();\n', '    } \n', '\n', '}']