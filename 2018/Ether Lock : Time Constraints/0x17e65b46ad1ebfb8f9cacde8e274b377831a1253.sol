['/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  \n', '  event Transfer(address indexed _from, address indexed _to, uint _value);\n', '  //event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  \n', '  event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '  //event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    //balances[_from] = balances[_from].sub(_value); // this was removed\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', 'contract BigbomPrivateSaleList is Ownable {\n', '    mapping(address=>uint) public addressCap;\n', '\n', '    function BigbomPrivateSaleList() public  {}\n', '\n', '    event ListAddress( address _user, uint _amount, uint _time );\n', '\n', '    // Owner can delist by setting amount = 0.\n', '    // Onwer can also change it at any time\n', '    function listAddress( address _user, uint _amount ) public onlyOwner {\n', '        require(_user != address(0x0));\n', '\n', '        addressCap[_user] = _amount;\n', '        ListAddress( _user, _amount, now );\n', '    }\n', '\n', '    // an optimization in case of network congestion\n', '    function listAddresses( address[] _users, uint[] _amount ) public onlyOwner {\n', '        require(_users.length == _amount.length );\n', '        for( uint i = 0 ; i < _users.length ; i++ ) {\n', '            listAddress( _users[i], _amount[i] );\n', '        }\n', '    }\n', '\n', '    function getCap( address _user ) public constant returns(uint) {\n', '        return addressCap[_user];\n', '    }\n', '\n', '}\n', '\n', 'contract BigbomToken is StandardToken, Ownable {\n', '    \n', '    string  public  constant name = "Bigbom";\n', '    string  public  constant symbol = "BBO";\n', '    uint    public  constant decimals = 18;\n', '    uint    public   totalSupply = 2000000000 * 1e18; //2,000,000,000\n', '\n', '    uint    public  constant founderAmount = 200000000 * 1e18; // 200,000,000\n', '    uint    public  constant coreStaffAmount = 60000000 * 1e18; // 60,000,000\n', '    uint    public  constant advisorAmount = 140000000 * 1e18; // 140,000,000\n', '    uint    public  constant networkGrowthAmount = 600000000 * 1e18; //600,000,000\n', '    uint    public  constant reserveAmount = 635000000 * 1e18; // 635,000,000\n', '    uint    public  constant bountyAmount = 40000000 * 1e18; // 40,000,000\n', '    uint    public  constant publicSaleAmount = 275000000 * 1e18; // 275,000,000\n', '\n', '    address public   bbFounderCoreStaffWallet ;\n', '    address public   bbAdvisorWallet;\n', '    address public   bbAirdropWallet;\n', '    address public   bbNetworkGrowthWallet;\n', '    address public   bbReserveWallet;\n', '    address public   bbPublicSaleWallet;\n', '\n', '    uint    public  saleStartTime;\n', '    uint    public  saleEndTime;\n', '\n', '    address public  tokenSaleContract;\n', '    BigbomPrivateSaleList public privateSaleList;\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '    mapping (address => uint) public frozenTime;\n', '    mapping (address => uint) public maxAllowedAmount;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address target, bool frozen, uint _seconds);\n', '   \n', '\n', '    function checkMaxAllowed(address target)  public constant  returns (uint) {\n', '        var maxAmount  = balances[target];\n', '        if(target == bbFounderCoreStaffWallet){\n', '            maxAmount = 10000000 * 1e18;\n', '        }\n', '        if(target == bbAdvisorWallet){\n', '            maxAmount = 10000000 * 1e18;\n', '        }\n', '        if(target == bbAirdropWallet){\n', '            maxAmount = 40000000 * 1e18;\n', '        }\n', '        if(target == bbNetworkGrowthWallet){\n', '            maxAmount = 20000000 * 1e18;\n', '        }\n', '        if(target == bbReserveWallet){\n', '            maxAmount = 6350000 * 1e18;\n', '        }\n', '        return maxAmount;\n', '    }\n', '\n', '    function selfFreeze(bool freeze, uint _seconds) public {\n', '        // selfFreeze cannot more than 7 days\n', '        require(_seconds <= 7 * 24 * 3600);\n', '        // if unfreeze\n', '        if(!freeze){\n', '            // get End time of frozenAccount\n', '            var frozenEndTime = frozenTime[msg.sender];\n', '            // if now > frozenEndTime\n', '            require (now >= frozenEndTime);\n', '            // unfreeze account\n', '            frozenAccount[msg.sender] = freeze;\n', '            // set time to 0\n', '            _seconds = 0;           \n', '        }else{\n', '            frozenAccount[msg.sender] = freeze;\n', '            \n', '        }\n', '        // set endTime = now + _seconds to freeze\n', '        frozenTime[msg.sender] = now + _seconds;\n', '        FrozenFunds(msg.sender, freeze, _seconds);\n', '        \n', '    }\n', '\n', '    function freezeAccount(address target, bool freeze, uint _seconds) onlyOwner public {\n', '        \n', '        // if unfreeze\n', '        if(!freeze){\n', '            // get End time of frozenAccount\n', '            var frozenEndTime = frozenTime[target];\n', '            // if now > frozenEndTime\n', '            require (now >= frozenEndTime);\n', '            // unfreeze account\n', '            frozenAccount[target] = freeze;\n', '            // set time to 0\n', '            _seconds = 0;           \n', '        }else{\n', '            frozenAccount[target] = freeze;\n', '            \n', '        }\n', '        // set endTime = now + _seconds to freeze\n', '        frozenTime[target] = now + _seconds;\n', '        FrozenFunds(target, freeze, _seconds);\n', '        \n', '    }\n', '\n', '    modifier validDestination( address to ) {\n', '        require(to != address(0x0));\n', '        require(to != address(this) );\n', '        require(!frozenAccount[to]);                       // Check if recipient is frozen\n', '        _;\n', '    }\n', '    modifier validFrom(address from){\n', '        require(!frozenAccount[from]);                     // Check if sender is frozen\n', '        _;\n', '    }\n', '    modifier onlyWhenTransferEnabled() {\n', '        if( now <= saleEndTime && now >= saleStartTime ) {\n', '            require( msg.sender == tokenSaleContract );\n', '        }\n', '        _;\n', '    }\n', '    modifier onlyPrivateListEnabled(address _to){\n', '        require(now <= saleStartTime);\n', '        uint allowcap = privateSaleList.getCap(_to);\n', '        require (allowcap > 0);\n', '        _;\n', '    }\n', '    function setPrivateList(BigbomPrivateSaleList _privateSaleList)   onlyOwner public {\n', '        require(_privateSaleList != address(0x0));\n', '        privateSaleList = _privateSaleList;\n', '\n', '    }\n', '    \n', '    function BigbomToken(uint startTime, uint endTime, address admin, address _bbFounderCoreStaffWallet, address _bbAdvisorWallet,\n', '        address _bbAirdropWallet,\n', '        address _bbNetworkGrowthWallet,\n', '        address _bbReserveWallet, \n', '        address _bbPublicSaleWallet\n', '        ) public {\n', '\n', '        require(admin!=address(0x0));\n', '        require(_bbAirdropWallet!=address(0x0));\n', '        require(_bbAdvisorWallet!=address(0x0));\n', '        require(_bbReserveWallet!=address(0x0));\n', '        require(_bbNetworkGrowthWallet!=address(0x0));\n', '        require(_bbFounderCoreStaffWallet!=address(0x0));\n', '        require(_bbPublicSaleWallet!=address(0x0));\n', '\n', '        // Mint all tokens. Then disable minting forever.\n', '        balances[msg.sender] = totalSupply;\n', '        Transfer(address(0x0), msg.sender, totalSupply);\n', '        // init internal amount limit\n', '        // set address when deploy\n', '        bbAirdropWallet = _bbAirdropWallet;\n', '        bbAdvisorWallet = _bbAdvisorWallet;\n', '        bbReserveWallet = _bbReserveWallet;\n', '        bbNetworkGrowthWallet = _bbNetworkGrowthWallet;\n', '        bbFounderCoreStaffWallet = _bbFounderCoreStaffWallet;\n', '        bbPublicSaleWallet = _bbPublicSaleWallet;\n', '        \n', '        saleStartTime = startTime;\n', '        saleEndTime = endTime;\n', '        transferOwnership(admin); // admin could drain tokens that were sent here by mistake\n', '    }\n', '\n', '    function setTimeSale(uint startTime, uint endTime) onlyOwner public {\n', '        require (now < saleStartTime || now > saleEndTime);\n', '        require (now < startTime);\n', '        require ( startTime < endTime);\n', '        saleStartTime = startTime;\n', '        saleEndTime = endTime;\n', '    }\n', '\n', '    function setTokenSaleContract(address _tokenSaleContract) onlyOwner public {\n', '        // check address ! 0\n', '        require(_tokenSaleContract != address(0x0));\n', '        // do not allow run when saleStartTime <= now <= saleEndTime\n', '        require (now < saleStartTime || now > saleEndTime);\n', '\n', '        tokenSaleContract = _tokenSaleContract;\n', '    }\n', '    function transfer(address _to, uint _value)\n', '        onlyWhenTransferEnabled\n', '        validDestination(_to)\n', '        validFrom(msg.sender)\n', '        public \n', '        returns (bool) {\n', '        if (msg.sender == bbFounderCoreStaffWallet || msg.sender == bbAdvisorWallet|| \n', '            msg.sender == bbAirdropWallet|| msg.sender == bbNetworkGrowthWallet|| msg.sender == bbReserveWallet){\n', '\n', '            // check maxAllowedAmount\n', '            var withdrawAmount =  maxAllowedAmount[msg.sender]; \n', '            var defaultAllowAmount = checkMaxAllowed(msg.sender);\n', '            var maxAmount = defaultAllowAmount - withdrawAmount;\n', '            // _value transfer must <= maxAmount\n', '            require(maxAmount >= _value); // \n', '\n', '            // if maxAmount = 0, need to block this msg.sender\n', '            if(maxAmount==_value){\n', '               \n', '                var isTransfer = super.transfer(_to, _value);\n', '                 // freeze account\n', '                selfFreeze(true, 24 * 3600); // temp freeze account 24h\n', '                maxAllowedAmount[msg.sender] = 0;\n', '                return isTransfer;\n', '            }else{\n', '                // set max withdrawAmount\n', '                maxAllowedAmount[msg.sender] = maxAllowedAmount[msg.sender].add(_value); // \n', '                \n', '            }\n', '        }\n', '        return  super.transfer(_to, _value);\n', '            \n', '    }\n', '\n', '    function transferPrivateSale(address _to, uint _value)\n', '        onlyOwner\n', '        onlyPrivateListEnabled(_to) \n', '        public \n', '        returns (bool) {\n', '         return transfer( _to,  _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value)\n', '        onlyWhenTransferEnabled\n', '        validDestination(_to)\n', '        validFrom(_from)\n', '        public \n', '        returns (bool) {\n', '            if (_from == bbFounderCoreStaffWallet || _from == bbAdvisorWallet|| \n', '                _from == bbAirdropWallet|| _from == bbNetworkGrowthWallet|| _from == bbReserveWallet){\n', '\n', '                  // check maxAllowedAmount\n', '                var withdrawAmount =  maxAllowedAmount[_from]; \n', '                var defaultAllowAmount = checkMaxAllowed(_from);\n', '                var maxAmount = defaultAllowAmount - withdrawAmount; \n', '                // _value transfer must <= maxAmount\n', '                require(maxAmount >= _value); \n', '\n', '                // if maxAmount = 0, need to block this _from\n', '                if(maxAmount==_value){\n', '                   \n', '                    var isTransfer = super.transfer(_to, _value);\n', '                     // freeze account\n', '                    selfFreeze(true, 24 * 3600); \n', '                    maxAllowedAmount[_from] = 0;\n', '                    return isTransfer;\n', '                }else{\n', '                    // set max withdrawAmount\n', '                    maxAllowedAmount[_from] = maxAllowedAmount[_from].add(_value); \n', '                    \n', '                }\n', '            }\n', '            return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    event Burn(address indexed _burner, uint _value);\n', '\n', '    function burn(uint _value) onlyWhenTransferEnabled\n', '        public \n', '        returns (bool){\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(msg.sender, _value);\n', '        Transfer(msg.sender, address(0x0), _value);\n', '        return true;\n', '    }\n', '\n', '    // save some gas by making only one contract call\n', '    function burnFrom(address _from, uint256 _value) onlyWhenTransferEnabled\n', '        public \n', '        returns (bool) {\n', '        assert( transferFrom( _from, msg.sender, _value ) );\n', '        return burn(_value);\n', '    }\n', '\n', '    function emergencyERC20Drain( ERC20 token, uint amount ) onlyOwner public {\n', '        token.transfer( owner, amount );\n', '    }\n', '}\n', 'contract BigbomTokenExtended is BigbomToken {\n', '    \n', '    string  public  constant name = "Bigbom";\n', '    string  public  constant symbol = "BBO";\n', '    uint    public  constant decimals = 18;\n', '    uint    public   totalSupply = 2000000000 * 1e18; //2,000,000,000\n', '\n', '    BigbomToken public  bigbomToken;\n', '    function BigbomTokenExtended(uint startTime, uint endTime, address admin, address _bbFounderCoreStaffWallet, address _bbAdvisorWallet,\n', '        address _bbAirdropWallet,\n', '        address _bbNetworkGrowthWallet,\n', '        address _bbReserveWallet, \n', '        address _bbPublicSaleWallet,\n', '        BigbomToken _bigbomToken\n', '        ) public BigbomToken(startTime, endTime, admin, _bbFounderCoreStaffWallet, _bbAdvisorWallet,\n', '         _bbAirdropWallet,\n', '         _bbNetworkGrowthWallet,\n', '         _bbReserveWallet, \n', '         _bbPublicSaleWallet\n', '        ){\n', '            bigbomToken = _bigbomToken;\n', '    }\n', '        \n', '    \n', '    event TokenDrop( address receiver, uint amount );\n', '    function airDrop(address[] recipients) public onlyOwner {\n', '        for(uint i = 0 ; i < recipients.length ; i++){\n', '            uint amount = bigbomToken.balanceOf(recipients[i]);\n', '            if (amount > 0){\n', '                //\n', '                transfer(recipients[i], amount);\n', '                TokenDrop( recipients[i], amount );\n', '            }\n', '        }\n', '    }\n', '\n', '    modifier validFrozenAccount(address target) {\n', '        if(frozenAccount[target]){\n', '            require(now >= frozenTime[target]);\n', '        }\n', '        _;\n', '    }\n', '\n', '    function selfFreeze(bool freeze, uint _seconds) \n', '    validFrozenAccount(msg.sender) \n', '    public {\n', '        // selfFreeze cannot more than 7 days\n', '        require(_seconds <= 7 * 24 * 3600);\n', '        // if unfreeze\n', '        if(!freeze){\n', '            // get End time of frozenAccount\n', '            var frozenEndTime = frozenTime[msg.sender];\n', '            // if now > frozenEndTime\n', '            require (now >= frozenEndTime);\n', '            // unfreeze account\n', '            frozenAccount[msg.sender] = freeze;\n', '            // set time to 0\n', '            _seconds = 0;           \n', '        }else{\n', '            frozenAccount[msg.sender] = freeze;\n', '            \n', '        }\n', '        // set endTime = now + _seconds to freeze\n', '        frozenTime[msg.sender] = now + _seconds;\n', '        FrozenFunds(msg.sender, freeze, _seconds);\n', '        \n', '    }\n', '\n', '    function freezeAccount(address target, bool freeze, uint _seconds) \n', '    onlyOwner\n', '    validFrozenAccount(target)\n', '    public {\n', '        \n', '        // if unfreeze\n', '        if(!freeze){\n', '            // get End time of frozenAccount\n', '            var frozenEndTime = frozenTime[target];\n', '            // if now > frozenEndTime\n', '            require (now >= frozenEndTime);\n', '            // unfreeze account\n', '            frozenAccount[target] = freeze;\n', '            // set time to 0\n', '            _seconds = 0;           \n', '        }else{\n', '            frozenAccount[target] = freeze;\n', '            \n', '        }\n', '        // set endTime = now + _seconds to freeze\n', '        frozenTime[target] = now + _seconds;\n', '        FrozenFunds(target, freeze, _seconds);\n', '        \n', '    }\n', '\n', '    \n', '}']
['/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  \n', '  event Transfer(address indexed _from, address indexed _to, uint _value);\n', '  //event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  \n', '  event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '  //event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    //balances[_from] = balances[_from].sub(_value); // this was removed\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', 'contract BigbomPrivateSaleList is Ownable {\n', '    mapping(address=>uint) public addressCap;\n', '\n', '    function BigbomPrivateSaleList() public  {}\n', '\n', '    event ListAddress( address _user, uint _amount, uint _time );\n', '\n', '    // Owner can delist by setting amount = 0.\n', '    // Onwer can also change it at any time\n', '    function listAddress( address _user, uint _amount ) public onlyOwner {\n', '        require(_user != address(0x0));\n', '\n', '        addressCap[_user] = _amount;\n', '        ListAddress( _user, _amount, now );\n', '    }\n', '\n', '    // an optimization in case of network congestion\n', '    function listAddresses( address[] _users, uint[] _amount ) public onlyOwner {\n', '        require(_users.length == _amount.length );\n', '        for( uint i = 0 ; i < _users.length ; i++ ) {\n', '            listAddress( _users[i], _amount[i] );\n', '        }\n', '    }\n', '\n', '    function getCap( address _user ) public constant returns(uint) {\n', '        return addressCap[_user];\n', '    }\n', '\n', '}\n', '\n', 'contract BigbomToken is StandardToken, Ownable {\n', '    \n', '    string  public  constant name = "Bigbom";\n', '    string  public  constant symbol = "BBO";\n', '    uint    public  constant decimals = 18;\n', '    uint    public   totalSupply = 2000000000 * 1e18; //2,000,000,000\n', '\n', '    uint    public  constant founderAmount = 200000000 * 1e18; // 200,000,000\n', '    uint    public  constant coreStaffAmount = 60000000 * 1e18; // 60,000,000\n', '    uint    public  constant advisorAmount = 140000000 * 1e18; // 140,000,000\n', '    uint    public  constant networkGrowthAmount = 600000000 * 1e18; //600,000,000\n', '    uint    public  constant reserveAmount = 635000000 * 1e18; // 635,000,000\n', '    uint    public  constant bountyAmount = 40000000 * 1e18; // 40,000,000\n', '    uint    public  constant publicSaleAmount = 275000000 * 1e18; // 275,000,000\n', '\n', '    address public   bbFounderCoreStaffWallet ;\n', '    address public   bbAdvisorWallet;\n', '    address public   bbAirdropWallet;\n', '    address public   bbNetworkGrowthWallet;\n', '    address public   bbReserveWallet;\n', '    address public   bbPublicSaleWallet;\n', '\n', '    uint    public  saleStartTime;\n', '    uint    public  saleEndTime;\n', '\n', '    address public  tokenSaleContract;\n', '    BigbomPrivateSaleList public privateSaleList;\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '    mapping (address => uint) public frozenTime;\n', '    mapping (address => uint) public maxAllowedAmount;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address target, bool frozen, uint _seconds);\n', '   \n', '\n', '    function checkMaxAllowed(address target)  public constant  returns (uint) {\n', '        var maxAmount  = balances[target];\n', '        if(target == bbFounderCoreStaffWallet){\n', '            maxAmount = 10000000 * 1e18;\n', '        }\n', '        if(target == bbAdvisorWallet){\n', '            maxAmount = 10000000 * 1e18;\n', '        }\n', '        if(target == bbAirdropWallet){\n', '            maxAmount = 40000000 * 1e18;\n', '        }\n', '        if(target == bbNetworkGrowthWallet){\n', '            maxAmount = 20000000 * 1e18;\n', '        }\n', '        if(target == bbReserveWallet){\n', '            maxAmount = 6350000 * 1e18;\n', '        }\n', '        return maxAmount;\n', '    }\n', '\n', '    function selfFreeze(bool freeze, uint _seconds) public {\n', '        // selfFreeze cannot more than 7 days\n', '        require(_seconds <= 7 * 24 * 3600);\n', '        // if unfreeze\n', '        if(!freeze){\n', '            // get End time of frozenAccount\n', '            var frozenEndTime = frozenTime[msg.sender];\n', '            // if now > frozenEndTime\n', '            require (now >= frozenEndTime);\n', '            // unfreeze account\n', '            frozenAccount[msg.sender] = freeze;\n', '            // set time to 0\n', '            _seconds = 0;           \n', '        }else{\n', '            frozenAccount[msg.sender] = freeze;\n', '            \n', '        }\n', '        // set endTime = now + _seconds to freeze\n', '        frozenTime[msg.sender] = now + _seconds;\n', '        FrozenFunds(msg.sender, freeze, _seconds);\n', '        \n', '    }\n', '\n', '    function freezeAccount(address target, bool freeze, uint _seconds) onlyOwner public {\n', '        \n', '        // if unfreeze\n', '        if(!freeze){\n', '            // get End time of frozenAccount\n', '            var frozenEndTime = frozenTime[target];\n', '            // if now > frozenEndTime\n', '            require (now >= frozenEndTime);\n', '            // unfreeze account\n', '            frozenAccount[target] = freeze;\n', '            // set time to 0\n', '            _seconds = 0;           \n', '        }else{\n', '            frozenAccount[target] = freeze;\n', '            \n', '        }\n', '        // set endTime = now + _seconds to freeze\n', '        frozenTime[target] = now + _seconds;\n', '        FrozenFunds(target, freeze, _seconds);\n', '        \n', '    }\n', '\n', '    modifier validDestination( address to ) {\n', '        require(to != address(0x0));\n', '        require(to != address(this) );\n', '        require(!frozenAccount[to]);                       // Check if recipient is frozen\n', '        _;\n', '    }\n', '    modifier validFrom(address from){\n', '        require(!frozenAccount[from]);                     // Check if sender is frozen\n', '        _;\n', '    }\n', '    modifier onlyWhenTransferEnabled() {\n', '        if( now <= saleEndTime && now >= saleStartTime ) {\n', '            require( msg.sender == tokenSaleContract );\n', '        }\n', '        _;\n', '    }\n', '    modifier onlyPrivateListEnabled(address _to){\n', '        require(now <= saleStartTime);\n', '        uint allowcap = privateSaleList.getCap(_to);\n', '        require (allowcap > 0);\n', '        _;\n', '    }\n', '    function setPrivateList(BigbomPrivateSaleList _privateSaleList)   onlyOwner public {\n', '        require(_privateSaleList != address(0x0));\n', '        privateSaleList = _privateSaleList;\n', '\n', '    }\n', '    \n', '    function BigbomToken(uint startTime, uint endTime, address admin, address _bbFounderCoreStaffWallet, address _bbAdvisorWallet,\n', '        address _bbAirdropWallet,\n', '        address _bbNetworkGrowthWallet,\n', '        address _bbReserveWallet, \n', '        address _bbPublicSaleWallet\n', '        ) public {\n', '\n', '        require(admin!=address(0x0));\n', '        require(_bbAirdropWallet!=address(0x0));\n', '        require(_bbAdvisorWallet!=address(0x0));\n', '        require(_bbReserveWallet!=address(0x0));\n', '        require(_bbNetworkGrowthWallet!=address(0x0));\n', '        require(_bbFounderCoreStaffWallet!=address(0x0));\n', '        require(_bbPublicSaleWallet!=address(0x0));\n', '\n', '        // Mint all tokens. Then disable minting forever.\n', '        balances[msg.sender] = totalSupply;\n', '        Transfer(address(0x0), msg.sender, totalSupply);\n', '        // init internal amount limit\n', '        // set address when deploy\n', '        bbAirdropWallet = _bbAirdropWallet;\n', '        bbAdvisorWallet = _bbAdvisorWallet;\n', '        bbReserveWallet = _bbReserveWallet;\n', '        bbNetworkGrowthWallet = _bbNetworkGrowthWallet;\n', '        bbFounderCoreStaffWallet = _bbFounderCoreStaffWallet;\n', '        bbPublicSaleWallet = _bbPublicSaleWallet;\n', '        \n', '        saleStartTime = startTime;\n', '        saleEndTime = endTime;\n', '        transferOwnership(admin); // admin could drain tokens that were sent here by mistake\n', '    }\n', '\n', '    function setTimeSale(uint startTime, uint endTime) onlyOwner public {\n', '        require (now < saleStartTime || now > saleEndTime);\n', '        require (now < startTime);\n', '        require ( startTime < endTime);\n', '        saleStartTime = startTime;\n', '        saleEndTime = endTime;\n', '    }\n', '\n', '    function setTokenSaleContract(address _tokenSaleContract) onlyOwner public {\n', '        // check address ! 0\n', '        require(_tokenSaleContract != address(0x0));\n', '        // do not allow run when saleStartTime <= now <= saleEndTime\n', '        require (now < saleStartTime || now > saleEndTime);\n', '\n', '        tokenSaleContract = _tokenSaleContract;\n', '    }\n', '    function transfer(address _to, uint _value)\n', '        onlyWhenTransferEnabled\n', '        validDestination(_to)\n', '        validFrom(msg.sender)\n', '        public \n', '        returns (bool) {\n', '        if (msg.sender == bbFounderCoreStaffWallet || msg.sender == bbAdvisorWallet|| \n', '            msg.sender == bbAirdropWallet|| msg.sender == bbNetworkGrowthWallet|| msg.sender == bbReserveWallet){\n', '\n', '            // check maxAllowedAmount\n', '            var withdrawAmount =  maxAllowedAmount[msg.sender]; \n', '            var defaultAllowAmount = checkMaxAllowed(msg.sender);\n', '            var maxAmount = defaultAllowAmount - withdrawAmount;\n', '            // _value transfer must <= maxAmount\n', '            require(maxAmount >= _value); // \n', '\n', '            // if maxAmount = 0, need to block this msg.sender\n', '            if(maxAmount==_value){\n', '               \n', '                var isTransfer = super.transfer(_to, _value);\n', '                 // freeze account\n', '                selfFreeze(true, 24 * 3600); // temp freeze account 24h\n', '                maxAllowedAmount[msg.sender] = 0;\n', '                return isTransfer;\n', '            }else{\n', '                // set max withdrawAmount\n', '                maxAllowedAmount[msg.sender] = maxAllowedAmount[msg.sender].add(_value); // \n', '                \n', '            }\n', '        }\n', '        return  super.transfer(_to, _value);\n', '            \n', '    }\n', '\n', '    function transferPrivateSale(address _to, uint _value)\n', '        onlyOwner\n', '        onlyPrivateListEnabled(_to) \n', '        public \n', '        returns (bool) {\n', '         return transfer( _to,  _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value)\n', '        onlyWhenTransferEnabled\n', '        validDestination(_to)\n', '        validFrom(_from)\n', '        public \n', '        returns (bool) {\n', '            if (_from == bbFounderCoreStaffWallet || _from == bbAdvisorWallet|| \n', '                _from == bbAirdropWallet|| _from == bbNetworkGrowthWallet|| _from == bbReserveWallet){\n', '\n', '                  // check maxAllowedAmount\n', '                var withdrawAmount =  maxAllowedAmount[_from]; \n', '                var defaultAllowAmount = checkMaxAllowed(_from);\n', '                var maxAmount = defaultAllowAmount - withdrawAmount; \n', '                // _value transfer must <= maxAmount\n', '                require(maxAmount >= _value); \n', '\n', '                // if maxAmount = 0, need to block this _from\n', '                if(maxAmount==_value){\n', '                   \n', '                    var isTransfer = super.transfer(_to, _value);\n', '                     // freeze account\n', '                    selfFreeze(true, 24 * 3600); \n', '                    maxAllowedAmount[_from] = 0;\n', '                    return isTransfer;\n', '                }else{\n', '                    // set max withdrawAmount\n', '                    maxAllowedAmount[_from] = maxAllowedAmount[_from].add(_value); \n', '                    \n', '                }\n', '            }\n', '            return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    event Burn(address indexed _burner, uint _value);\n', '\n', '    function burn(uint _value) onlyWhenTransferEnabled\n', '        public \n', '        returns (bool){\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(msg.sender, _value);\n', '        Transfer(msg.sender, address(0x0), _value);\n', '        return true;\n', '    }\n', '\n', '    // save some gas by making only one contract call\n', '    function burnFrom(address _from, uint256 _value) onlyWhenTransferEnabled\n', '        public \n', '        returns (bool) {\n', '        assert( transferFrom( _from, msg.sender, _value ) );\n', '        return burn(_value);\n', '    }\n', '\n', '    function emergencyERC20Drain( ERC20 token, uint amount ) onlyOwner public {\n', '        token.transfer( owner, amount );\n', '    }\n', '}\n', 'contract BigbomTokenExtended is BigbomToken {\n', '    \n', '    string  public  constant name = "Bigbom";\n', '    string  public  constant symbol = "BBO";\n', '    uint    public  constant decimals = 18;\n', '    uint    public   totalSupply = 2000000000 * 1e18; //2,000,000,000\n', '\n', '    BigbomToken public  bigbomToken;\n', '    function BigbomTokenExtended(uint startTime, uint endTime, address admin, address _bbFounderCoreStaffWallet, address _bbAdvisorWallet,\n', '        address _bbAirdropWallet,\n', '        address _bbNetworkGrowthWallet,\n', '        address _bbReserveWallet, \n', '        address _bbPublicSaleWallet,\n', '        BigbomToken _bigbomToken\n', '        ) public BigbomToken(startTime, endTime, admin, _bbFounderCoreStaffWallet, _bbAdvisorWallet,\n', '         _bbAirdropWallet,\n', '         _bbNetworkGrowthWallet,\n', '         _bbReserveWallet, \n', '         _bbPublicSaleWallet\n', '        ){\n', '            bigbomToken = _bigbomToken;\n', '    }\n', '        \n', '    \n', '    event TokenDrop( address receiver, uint amount );\n', '    function airDrop(address[] recipients) public onlyOwner {\n', '        for(uint i = 0 ; i < recipients.length ; i++){\n', '            uint amount = bigbomToken.balanceOf(recipients[i]);\n', '            if (amount > 0){\n', '                //\n', '                transfer(recipients[i], amount);\n', '                TokenDrop( recipients[i], amount );\n', '            }\n', '        }\n', '    }\n', '\n', '    modifier validFrozenAccount(address target) {\n', '        if(frozenAccount[target]){\n', '            require(now >= frozenTime[target]);\n', '        }\n', '        _;\n', '    }\n', '\n', '    function selfFreeze(bool freeze, uint _seconds) \n', '    validFrozenAccount(msg.sender) \n', '    public {\n', '        // selfFreeze cannot more than 7 days\n', '        require(_seconds <= 7 * 24 * 3600);\n', '        // if unfreeze\n', '        if(!freeze){\n', '            // get End time of frozenAccount\n', '            var frozenEndTime = frozenTime[msg.sender];\n', '            // if now > frozenEndTime\n', '            require (now >= frozenEndTime);\n', '            // unfreeze account\n', '            frozenAccount[msg.sender] = freeze;\n', '            // set time to 0\n', '            _seconds = 0;           \n', '        }else{\n', '            frozenAccount[msg.sender] = freeze;\n', '            \n', '        }\n', '        // set endTime = now + _seconds to freeze\n', '        frozenTime[msg.sender] = now + _seconds;\n', '        FrozenFunds(msg.sender, freeze, _seconds);\n', '        \n', '    }\n', '\n', '    function freezeAccount(address target, bool freeze, uint _seconds) \n', '    onlyOwner\n', '    validFrozenAccount(target)\n', '    public {\n', '        \n', '        // if unfreeze\n', '        if(!freeze){\n', '            // get End time of frozenAccount\n', '            var frozenEndTime = frozenTime[target];\n', '            // if now > frozenEndTime\n', '            require (now >= frozenEndTime);\n', '            // unfreeze account\n', '            frozenAccount[target] = freeze;\n', '            // set time to 0\n', '            _seconds = 0;           \n', '        }else{\n', '            frozenAccount[target] = freeze;\n', '            \n', '        }\n', '        // set endTime = now + _seconds to freeze\n', '        frozenTime[target] = now + _seconds;\n', '        FrozenFunds(target, freeze, _seconds);\n', '        \n', '    }\n', '\n', '    \n', '}']
