['pragma solidity 0.4.19;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    //Variables\n', '    address public owner;\n', '\n', '    address public newOwner;\n', '\n', '    //    Modifiers\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0));\n', '        newOwner = _newOwner;\n', '\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        if (msg.sender == newOwner) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) public balances;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood:\n', '        https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract SparkERC20 is StandardToken, Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    /* Public variables of the token */\n', '    uint256 public creationBlock;\n', '\n', '    uint8 public decimals;\n', '\n', '    string public name;\n', '\n', '    string public symbol;\n', '\n', '    string public standard;\n', '\n', '    bool public locked;\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function SparkERC20(\n', '        uint256 _totalSupply,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transferAllSupplyToOwner,\n', '        bool _locked\n', '    ) public {\n', '        standard = "ERC20 0.1";\n', '        locked = _locked;\n', '        totalSupply = _totalSupply;\n', '\n', '        if (_transferAllSupplyToOwner) {\n', '            balances[msg.sender] = totalSupply;\n', '        } else {\n', '            balances[this] = totalSupply;\n', '        }\n', '        name = _tokenName;\n', '        // Set the name for display purposes\n', '        symbol = _tokenSymbol;\n', '        // Set the symbol for display purposes\n', '        decimals = _decimalUnits;\n', '        // Amount of decimals for display purposes\n', '        creationBlock = block.number;\n', '    }\n', '\n', '    /* public methods */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(locked == false);\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        if (locked) {\n', '            return false;\n', '        }\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n', '        if (locked) {\n', '            return false;\n', '        }\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n', '        if (locked) {\n', '            return false;\n', '        }\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        if (locked) {\n', '            return false;\n', '        }\n', '\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '}\n', '\n', '/*\n', 'This contract manages the minters and the modifier to allow mint to happen only if called by minters\n', 'This contract contains basic minting functionality though\n', '*/\n', 'contract MintingERC20 is SparkERC20 {\n', '\n', '    // Variables\n', '    uint256 public maxSupply;\n', '\n', '    mapping (address => bool) public minters;\n', '\n', '    // Modifiers\n', '    modifier onlyMinters() {\n', '        require(true == minters[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function MintingERC20(\n', '        uint256 _initialSupply,\n', '        uint256 _maxSupply,\n', '        string _tokenName,\n', '        uint8 _decimals,\n', '        string _symbol,\n', '        bool _transferAllSupplyToOwner,\n', '        bool _locked\n', '    ) public SparkERC20(\n', '        _initialSupply,\n', '        _tokenName,\n', '        _decimals,\n', '        _symbol,\n', '        _transferAllSupplyToOwner,\n', '        _locked\n', '    )\n', '    {\n', '        standard = "MintingERC20 0.1";\n', '        minters[msg.sender] = true;\n', '        maxSupply = _maxSupply;\n', '    }\n', '\n', '    function addMinter(address _newMinter) public onlyOwner {\n', '        minters[_newMinter] = true;\n', '    }\n', '\n', '    function removeMinter(address _minter) public onlyOwner {\n', '        minters[_minter] = false;\n', '    }\n', '\n', '    function mint(address _addr, uint256 _amount) public onlyMinters returns (uint256) {\n', '        if (_amount == uint256(0)) {\n', '            return uint256(0);\n', '        }\n', '\n', '        if (totalSupply.add(_amount) > maxSupply) {\n', '            return uint256(0);\n', '        }\n', '\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_addr] = balances[_addr].add(_amount);\n', '        Transfer(address(0), _addr, _amount);\n', '\n', '        return _amount;\n', '    }\n', '\n', '}\n', '\n', 'contract Spark is MintingERC20 {\n', '\n', '    ICO public ico;\n', '\n', '    SparkDividends public dividends;\n', '\n', '    bool public transferFrozen = true;\n', '\n', '    function Spark(\n', '        string _tokenName,\n', '        uint8 _decimals,\n', '        string _symbol,\n', '        uint256 _maxSupply,\n', '        bool _locked\n', '    ) public MintingERC20(0, _maxSupply, _tokenName, _decimals, _symbol, false, _locked)\n', '    {\n', '        standard = "Spark 0.1";\n', '    }\n', '\n', '    function setICO(address _ico) public onlyOwner {\n', '        require(_ico != address(0));\n', '        ico = ICO(_ico);\n', '    }\n', '\n', '    function setSparkDividends(address _dividends) public onlyOwner {\n', '        require(address(0) != _dividends);\n', '        dividends = SparkDividends(_dividends);\n', '    }\n', '\n', '    function setLocked(bool _locked) public onlyOwner {\n', '        locked = _locked;\n', '    }\n', '\n', '    // prevent manual minting tokens when ICO is active;\n', '    function mint(address _addr, uint256 _amount) public onlyMinters returns (uint256) {\n', '        uint256 mintedAmount;\n', '        if (msg.sender == owner) {\n', '            require(address(ico) != address(0));\n', '            if (!ico.isActive() && block.timestamp >= ico.startTime()) {\n', '                mintedAmount = super.mint(_addr, _amount);\n', '            }\n', '        } else {\n', '            mintedAmount = super.mint(_addr, _amount);\n', '        }\n', '\n', '        if (mintedAmount == _amount) {\n', '            require(address(dividends) != address(0));\n', '            dividends.logAccount(_addr, _amount);\n', '        }\n', '\n', '        return mintedAmount;\n', '    }\n', '\n', '    // Allow token transfer.\n', '    function freezing(bool _transferFrozen) public onlyOwner {\n', '        if (address(ico) != address(0) && !ico.isActive() && block.timestamp >= ico.startTime()) {\n', '            transferFrozen = _transferFrozen;\n', '        }\n', '    }\n', '\n', '    // ERC20 functions\n', '    // =========================\n', '    function transfer(address _to, uint _value) public returns (bool) {\n', '        require(!transferFrozen);\n', '\n', '        bool status = super.transfer(_to, _value);\n', '        if (status) {\n', '            require(address(dividends) != address(0));\n', '            dividends.logAccount(msg.sender, 0);\n', '            dividends.logAccount(_to, 0);\n', '        }\n', '\n', '        return status;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n', '        require(!transferFrozen);\n', '\n', '        bool status = super.transferFrom(_from, _to, _value);\n', '        if (status) {\n', '            require(address(dividends) != address(0));\n', '            dividends.logAccount(_from, 0);\n', '            dividends.logAccount(_to, 0);\n', '        }\n', '\n', '        return status;\n', '\n', '    }\n', '\n', '}\n', '\n', 'contract WhiteList is Ownable {\n', '\n', '    mapping (address => bool) public whitelist;\n', '\n', '    /* events */\n', '    event WhitelistSet(address contributorAddress);\n', '\n', '    event WhitelistUnset(address contributorAddress);\n', '\n', '    modifier onlyWhitelisted() {\n', '        require(true == whitelist[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function WhiteList() public {\n', '        whitelist[msg.sender] = true;\n', '    }\n', '\n', '    function addToWhitelist(address _address) public onlyOwner {\n', '        whitelist[_address] = true;\n', '        WhitelistSet(_address);\n', '    }\n', '\n', '    function removeFromWhitelist(address _address) public onlyOwner {\n', '        whitelist[_address] = false;\n', '        WhitelistUnset(_address);\n', '    }\n', '\n', '}\n', '\n', 'contract SparkDividends is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    Spark public spark;\n', '\n', '    ICO public ico;\n', '\n', '    address public treasuryAddress;\n', '\n', '    mapping(address => DividendData[]) public accounts;\n', '\n', '    FundsData[] public funds;\n', '\n', '    struct DividendData {\n', '        uint256 period;\n', '        uint256 day;\n', '        uint256 balance;\n', '    }\n', '\n', '    struct FundsData {\n', '        uint256 period;\n', '        uint256 ethersAmount;\n', '    }\n', '\n', '    event Disbursed(address indexed holder, uint256 value);\n', '\n', '    modifier onlySparkContracts() {\n', '        require(msg.sender == address(spark) || msg.sender == address(ico));\n', '        _;\n', '    }\n', '\n', '    function SparkDividends(\n', '        address _spark,\n', '        address _ico,\n', '        address _treasuryAddress\n', '    ) public {\n', '        require(_spark != address(0) && _ico != address(0) && _treasuryAddress != address(0));\n', '        spark = Spark(_spark);\n', '        ico = ICO(_ico);\n', '        treasuryAddress = _treasuryAddress;\n', '    }\n', '\n', '    function setSpark(address _spark) public onlyOwner {\n', '        require(_spark != address(0));\n', '        spark = Spark(_spark);\n', '    }\n', '\n', '    function setICO(address _ico) public onlyOwner {\n', '        require(_ico != address(0));\n', '        ico = ICO(_ico);\n', '    }\n', '\n', '    function setTreasuryAddress(address _treasuryAddress) public onlyOwner {\n', '        require(_treasuryAddress != address(0));\n', '        treasuryAddress = _treasuryAddress;\n', '    }\n', '\n', '    function transferEthers() public onlyOwner {\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '    function logAccount(address _address, uint256 _amount) public onlySparkContracts returns (bool) {\n', '        uint256 day = 0;\n', '        uint256 period = 1;\n', '\n', '        if (now > ico.endTime()) {\n', '            (period, day) = getPeriod(now);\n', '        }\n', '\n', '        if (_address != address(0) && period > 0) {\n', '            if (day != 0 && _amount > 0) {\n', '                logData(_address, period, 0, _amount);\n', '            }\n', '\n', '            logData(_address, period, day, 0);\n', '\n', '            return true;\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    function setEtherAmount() public payable returns (bool) {\n', '        if (msg.value == 0) {\n', '            return false;\n', '        }\n', '\n', '        uint256 day = 0;\n', '        uint256 period = 1;\n', '\n', '        if (now > ico.endTime()) {\n', '            (period, day) = getPeriod(now);\n', '        }\n', '\n', '        uint256 index = getFundsDataIndex(period);\n', '\n', '        if (index == funds.length) {\n', '            funds.push(FundsData(period, msg.value));\n', '        } else {\n', '            funds[index].ethersAmount = funds[index].ethersAmount.add(msg.value);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function claim() public returns (bool) {\n', '        uint256 currentDay;\n', '        uint256 currentPeriod;\n', '        bool status;\n', '        (currentPeriod, currentDay) = getPeriod(now);\n', '        if (currentPeriod == 1) {\n', '            return false;\n', '        }\n', '\n', '        uint256 dividendAmount;\n', '        uint256 outdatedAmount;\n', '        (dividendAmount, outdatedAmount) = calculateAmount(msg.sender, currentPeriod, currentDay);\n', '\n', '        if (dividendAmount == 0) {\n', '            return false;\n', '        }\n', '\n', '        msg.sender.transfer(dividendAmount);\n', '\n', '        if (outdatedAmount > 0) {\n', '            treasuryAddress.transfer(outdatedAmount);\n', '        }\n', '\n', '        if (cleanDividendsData(msg.sender, currentPeriod)) {\n', '            Disbursed(msg.sender, dividendAmount);\n', '            status = true;\n', '        }\n', '\n', '        require(status);\n', '        return true;\n', '    }\n', '\n', '    function calculateAmount(\n', '        address _address,\n', '        uint256 _currentPeriod,\n', '        uint256 _currentDay\n', '    ) public view returns (uint256 totalAmount, uint256 totalOutdated) {\n', '        for (uint256 i = 0; i < accounts[_address].length; i++) {\n', '            if (accounts[_address][i].period < _currentPeriod) {\n', '                uint256 index = getFundsDataIndex(accounts[_address][i].period);\n', '                if (index == funds.length) {\n', '                    continue;\n', '                }\n', '                uint256 dayEthers = funds[index].ethersAmount.div(90);\n', '                uint256 balance;\n', '                uint256 to = 90;\n', '\n', '                if (\n', '                    accounts[_address].length > i.add(1) &&\n', '                    accounts[_address][i.add(1)].period == accounts[_address][i].period\n', '                ) {\n', '                    to = accounts[_address][i.add(1)].day;\n', '                }\n', '\n', '                for (uint256 j = accounts[_address][i].day; j < to; j++) {\n', '                    balance = getBalanceByDay(_address, accounts[_address][i].period, j);\n', '                    if (_currentPeriod.sub(accounts[_address][i].period) > 1 && _currentDay > 2) {\n', '                        totalOutdated = totalOutdated.add(balance.mul(dayEthers).div(spark.maxSupply()));\n', '                    } else {\n', '                        totalAmount = totalAmount.add(balance.mul(dayEthers).div(spark.maxSupply()));\n', '                    }\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    function logData(address _address, uint256 _period, uint256 _day, uint256 _amount) internal {\n', '        uint256 index = getDividendDataIndex(_address, _period, _day);\n', '        if (accounts[_address].length == index) {\n', '            accounts[_address].push(DividendData(_period, _day, spark.balanceOf(_address).sub(_amount)));\n', '        } else if (_amount == 0) {\n', '            accounts[_address][index].balance = spark.balanceOf(_address);\n', '        }\n', '    }\n', '\n', '    function getPeriod(uint256 _time) internal view returns (uint256, uint256) {\n', '        uint256 day = uint(_time.sub(ico.endTime()) % 90 days).div(1 days);\n', '        uint256 period = _time.sub(ico.endTime()).div(90 days);\n', '\n', '        return (++period, day);\n', '    }\n', '\n', '    function cleanDividendsData(address _address, uint256 _currentPeriod) internal returns (bool) {\n', '        for (uint256 i = 0; i < accounts[_address].length; i++) {\n', '            if (accounts[_address][i].period < _currentPeriod) {\n', '                for (uint256 j = i; j < accounts[_address].length.sub(1); j++) {\n', '                    DividendData storage dividend = accounts[_address][j];\n', '\n', '                    dividend.period = accounts[_address][j.add(1)].period;\n', '                    dividend.day = accounts[_address][j.add(1)].day;\n', '                    dividend.balance = accounts[_address][j.add(1)].balance;\n', '                }\n', '                delete accounts[_address][accounts[_address].length.sub(1)];\n', '                accounts[_address].length--;\n', '                i--;\n', '            }\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function getFundsDataIndex(uint256 _period) internal view returns (uint256) {\n', '        for (uint256 i = 0; i < funds.length; i++) {\n', '            if (funds[i].period == _period) {\n', '                return i;\n', '            }\n', '        }\n', '\n', '        return funds.length;\n', '    }\n', '\n', '    function getBalanceByDay(address _address, uint256 _period, uint256 _day) internal view returns (uint256) {\n', '        for (uint256 i = accounts[_address].length.sub(1); i >= 0; i--) {\n', '            if (accounts[_address][i].period == _period && accounts[_address][i].day <= _day) {\n', '                return accounts[_address][i].balance;\n', '            }\n', '        }\n', '\n', '        return 0;\n', '    }\n', '\n', '    function getDividendDataIndex(address _address, uint256 _period, uint256 _day) internal view returns (uint256) {\n', '        for (uint256 i = 0; i < accounts[_address].length; i++) {\n', '            if (accounts[_address][i].period == _period && accounts[_address][i].day == _day) {\n', '                return i;\n', '            }\n', '        }\n', '\n', '        return accounts[_address].length;\n', '    }\n', '\n', '}\n', '\n', 'contract Multivest is Ownable {\n', '    /* public variables */\n', '    mapping (address => bool) public allowedMultivests;\n', '\n', '    /* events */\n', '    event MultivestSet(address multivest);\n', '\n', '    event MultivestUnset(address multivest);\n', '\n', '    event Contribution(address holder, uint256 value, uint256 tokens);\n', '\n', '    modifier onlyAllowedMultivests(address _addresss) {\n', '        require(allowedMultivests[_addresss] == true);\n', '        _;\n', '    }\n', '\n', '    /* constructor */\n', '    function Multivest(address _multivest) public {\n', '        allowedMultivests[_multivest] = true;\n', '    }\n', '\n', '    function setAllowedMultivest(address _address) public onlyOwner {\n', '        allowedMultivests[_address] = true;\n', '        MultivestSet(_address);\n', '    }\n', '\n', '    function unsetAllowedMultivest(address _address) public onlyOwner {\n', '        allowedMultivests[_address] = false;\n', '        MultivestUnset(_address);\n', '    }\n', '\n', '    function multivestBuy(address _address, uint256 _value) public onlyAllowedMultivests(msg.sender) {\n', '        require(buy(_address, _value) == true);\n', '    }\n', '\n', '    function multivestBuy(\n', '        address _address,\n', '        uint8 _v,\n', '        bytes32 _r,\n', '        bytes32 _s\n', '    ) public payable onlyAllowedMultivests(verify(keccak256(msg.sender), _v, _r, _s)) {\n', '        require(_address == msg.sender && buy(msg.sender, msg.value) == true);\n', '    }\n', '\n', '    function verify(bytes32 _hash, uint8 _v, bytes32 _r, bytes32 _s) internal pure returns(address) {\n', '        bytes memory prefix = "\\x19Ethereum Signed Message:\\n32";\n', '\n', '        return ecrecover(keccak256(prefix, _hash), _v, _r, _s);\n', '    }\n', '\n', '    function buy(address _address, uint256 value) internal returns (bool);\n', '\n', '}\n', '\n', 'contract SellableToken is Multivest {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    Spark public spark;\n', '\n', '    // start and end timestamps where investments are allowed (both inclusive)\n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '\n', '    // amount of sold tokens\n', '    uint256 public soldTokens;\n', '\n', '    // amount of raised money in wei\n', '    uint256 public collectedEthers;\n', '\n', '    // address where funds are collected\n', '    address public etherHolder;\n', '\n', '    address public tokensHolder;\n', '\n', '    Bonus[] public bonuses;\n', '\n', '    struct Bonus {\n', '        uint256 maxAmount;\n', '        uint256 bonus;\n', '    }\n', '\n', '    function SellableToken(\n', '        address _multivestAddress,\n', '        address _etherHolder,\n', '        address _tokensHolder,\n', '        address _spark,\n', '        uint256 _startTime,\n', '        uint256 _endTime\n', '    ) public Multivest(_multivestAddress)\n', '    {\n', '        require(_spark != address(0) && _etherHolder != address(0) && _tokensHolder != address(0));\n', '        spark = Spark(_spark);\n', '        etherHolder = _etherHolder;\n', '        tokensHolder = _tokensHolder;\n', '\n', '        require(_startTime < _endTime);\n', '\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '    }\n', '\n', '    function setSpark(address _spark) public onlyOwner {\n', '        require(_spark != address(0));\n', '        spark = Spark(_spark);\n', '    }\n', '\n', '    function setEtherHolder(address _etherHolder) public onlyOwner {\n', '        require(_etherHolder != address(0));\n', '        etherHolder = _etherHolder;\n', '    }\n', '\n', '    function setTokenHolder(address _tokensHolder) public onlyOwner {\n', '        require(_tokensHolder != address(0));\n', '        tokensHolder = _tokensHolder;\n', '    }\n', '\n', '    function transferEthers() public onlyOwner {\n', '        etherHolder.transfer(this.balance);\n', '    }\n', '\n', '    // @return true if sale period is active\n', '    function isActive() public constant returns (bool) {\n', '        if (soldTokens == spark.maxSupply()) {\n', '            return false;\n', '        }\n', '        return withinPeriod();\n', '    }\n', '\n', '    // @return true if the transaction can buy tokens\n', '    function withinPeriod() public constant returns (bool) {\n', '        return block.timestamp >= startTime && block.timestamp <= endTime;\n', '    }\n', '}\n', '\n', 'contract ICO is SellableToken, WhiteList {\n', '\n', '    uint256 public price;\n', '\n', '    function ICO(\n', '        address _multivestAddress,\n', '        address _etherHolder,\n', '        address _tokensHolder,\n', '        address _spark,\n', '        uint256 _startTime,\n', '        uint256 _endTime,\n', '        uint256 _price\n', '    ) public SellableToken(\n', '        _multivestAddress,\n', '        _etherHolder,\n', '        _tokensHolder,\n', '        _spark,\n', '        _startTime,\n', '        _endTime\n', '    ) WhiteList() {\n', '        require(_price > 0);\n', '        price = _price;\n', '\n', '        bonuses.push(Bonus(uint(10000000).mul(uint(10) ** spark.decimals()), uint256(150)));\n', '        bonuses.push(Bonus(uint(15000000).mul(uint(10) ** spark.decimals()), uint256(125)));\n', '        bonuses.push(Bonus(uint(20000000).mul(uint(10) ** spark.decimals()), uint256(110)));\n', '    }\n', '\n', '    function() public payable onlyWhitelisted {\n', '        require(buy(msg.sender, msg.value) == true);\n', '    }\n', '\n', '    function allocateUnsoldTokens() public {\n', '        if (!isActive() && block.timestamp >= startTime) {\n', '            uint256 amount = spark.maxSupply().sub(soldTokens);\n', '            require(amount > 0 && spark.mint(tokensHolder, amount) == amount);\n', '            soldTokens = spark.maxSupply();\n', '        }\n', '    }\n', '\n', '    function calculateTokensAmount(uint256 _value) public view returns (uint256 amount) {\n', '        amount = _value.mul(uint(10) ** spark.decimals()).div(price);\n', '        amount = amount.add(calculateBonusAmount(amount));\n', '    }\n', '\n', '    function calculateEthersAmount(uint256 _tokens) public view returns (uint256 ethers, uint256 bonus) {\n', '        if (_tokens == 0) {\n', '            return (0, 0);\n', '        }\n', '\n', '        ethers = _tokens.mul(price).div(uint(10) ** spark.decimals());\n', '        bonus = calculateBonusAmount(_tokens);\n', '    }\n', '\n', '    function buy(address _address, uint256 _value) internal returns (bool) {\n', '        if (_value == 0) {\n', '            return false;\n', '        }\n', '\n', '        require(withinPeriod() && _address != address(0));\n', '\n', '        uint256 amount = calculateTokensAmount(_value);\n', '\n', '        require(amount > 0 && spark.mint(_address, amount) == amount);\n', '\n', '        collectedEthers = collectedEthers.add(_value);\n', '        soldTokens = soldTokens.add(amount);\n', '\n', '        Contribution(_address, _value, amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function calculateBonusAmount(uint256 _amount) internal view returns (uint256) {\n', '        uint256 newSoldTokens = soldTokens;\n', '        uint256 remainingValue = _amount;\n', '\n', '        for (uint i = 0; i < bonuses.length; i++) {\n', '\n', '            if (bonuses[i].maxAmount > soldTokens) {\n', '                uint256 amount = remainingValue.mul(bonuses[i].bonus).div(100);\n', '                if (newSoldTokens.add(amount) > bonuses[i].maxAmount) {\n', '                    uint256 diff = bonuses[i].maxAmount.sub(newSoldTokens);\n', '                    remainingValue = remainingValue.sub(diff.mul(100).div(bonuses[i].bonus));\n', '                    newSoldTokens = newSoldTokens.add(diff);\n', '                } else {\n', '                    remainingValue = 0;\n', '                    newSoldTokens = newSoldTokens.add(amount);\n', '                }\n', '\n', '                if (remainingValue == 0) {\n', '                    break;\n', '                }\n', '            }\n', '        }\n', '\n', '        return newSoldTokens.add(remainingValue).sub(soldTokens.add(_amount));\n', '    }\n', '\n', '}']