['pragma solidity ^0.4.24;\n', 'contract ONG_Base{\n', '    struct Project{\n', '        address Owner;\n', '        uint256 Id;\n', '        uint256 Tokens;\n', '        bool Enable;\n', '    \t}\n', '\tstruct Member{\n', '        address Owner;\n', '        uint256 Tokens;\n', '        bool Enable;\n', '\t}\n', '\taddress public Oracle;\n', '    address public Owner;\n', '\taddress[] membersAddresses;\n', '    uint256 constant OwnerProject = 1;\n', '    uint256 public Period =1;\n', '\tmapping (uint256=>Project) Projects;\n', '\tmapping (address=> Member) Members;\n', '\t\n', '\t\n', '\tmodifier IsOracle(){\n', '        require(msg.sender == Oracle );\n', '        _;\n', '\t}\n', '    modifier IsOwner(){\n', '        require(msg.sender == Owner);\n', '        _;\n', '    }\n', '}\n', 'contract ONG_ProjectFunctions is ONG_Base{\n', '    function Project_RemoveToken (uint256 _ProjectID, uint256 _tokens) public {\n', '        require(Projects[_ProjectID].Owner == msg.sender);\n', '        require(Projects[_ProjectID].Enable);\n', '        require(Projects[_ProjectID].Tokens >= _tokens);\n', '        Projects[_ProjectID].Tokens = Projects[_ProjectID].Tokens  - _tokens;\n', '    }\n', '    function Project_Info(uint256 _ProjectID) public view returns(address _Owner,uint256 _Id,uint256 _Tokens,bool _Enable    )  {\n', '         _Owner= Projects[_ProjectID].Owner;\n', '         _Id= Projects[_ProjectID].Id;\n', '         _Tokens= Projects[_ProjectID].Tokens;\n', '         _Enable= Projects[_ProjectID].Enable;\n', '    }\n', '    function Project_ChangeOwner(uint256 _ProjectID, address _newOwner) public{\n', '        require(Projects[_ProjectID].Owner == msg.sender);\n', '        Projects[_ProjectID].Owner = _newOwner;\n', '    }\n', '    function Project_Enable(uint256 _ProjectID) public  returns(bool) {\n', '        require(Projects[_ProjectID].Owner == msg.sender);\n', '        Projects[_ProjectID].Enable = !Projects[_ProjectID].Enable;\n', '        return (Projects[_ProjectID].Enable);\n', '    }\n', '}\n', 'contract ONG_MembersFunctions is ONG_Base{\n', '    function Member_AssingTokensToProject(uint256 _tokens, uint256 _ProjectID) public{\n', '        require(Period ==2);\n', '        require(Members[msg.sender].Tokens>=_tokens);\n', '        require(Members[msg.sender].Enable);\n', '        require(Projects[_ProjectID].Enable);\n', '        require(_ProjectID!=OwnerProject);\n', '        \n', '        Members[msg.sender].Tokens = Members[msg.sender].Tokens + _tokens;\n', '    }\n', '    function Members_info(address _member) public view returns(address _Owner,uint256 _Tokens,bool _Enable){\n', '        _Owner = Members[_member].Owner;\n', '        _Tokens = Members[_member].Tokens;\n', '        _Enable = Members[_member].Enable;\n', '}\n', '}\n', 'contract ONG_OwnerFunction is ONG_Base{\n', '    function AddMember(address _member, uint256 _tokens) IsOwner public{\n', '        require(Members[_member].Owner != msg.sender);\n', '        Members[_member].Enable = true;\n', '        Members[_member].Owner = _member;\n', '        Members[_member].Tokens = _tokens;\n', '        membersAddresses.push(_member);\n', '    }\n', '    function AddTokensToMember(address _member, uint256 _tokens) IsOwner public{\n', '        require(Period ==1);\n', '        require(Members[_member].Enable);\n', '        Members[_member].Tokens =Members[_member].Tokens + _tokens;\n', '    }\n', '    function EnableMember(address _member)  IsOwner public returns(bool){\n', '        Members[_member].Enable = !Members[_member].Enable;\n', '        return(Members[_member].Enable);\n', '    }\n', '    function AddProject(uint256 _id, address _ProjectOwner) IsOwner public{\n', '        require(Projects[_id].Id != _id);\n', '        Projects[_id].Id = _id;\n', '        Projects[_id].Owner = _ProjectOwner;\n', '        Projects[_id].Enable = true;\n', '    }\n', '    function ReassingTokens(uint256 _IdProject, uint256 _tokens) IsOwner public{\n', '        require(Period ==3);\n', '        require(Projects[OwnerProject].Tokens>= _tokens);\n', '        Projects[OwnerProject].Tokens = Projects[OwnerProject].Tokens - _tokens;\n', '        Projects[_IdProject].Tokens = Projects[_IdProject].Tokens + _tokens;\n', '    }\n', '}\n', 'contract ONG_OracleFunctions is ONG_Base{\n', '    function ToPeriod() IsOracle public{\n', '        Period ++;\n', '        if (Period == 3 ){\n', '            for (uint256 i; i> membersAddresses.length;i++ ){\n', '                if(Members[membersAddresses[i]].Tokens>0){\n', '                    Projects[OwnerProject].Tokens = Projects[OwnerProject].Tokens + Members[membersAddresses[i]].Tokens;\n', '                    Members[membersAddresses[i]].Tokens= 0; \n', '                }\n', '            }\n', '        }\n', '        if( Period ==4){\n', '            Period = 1;\n', '        }\n', '        \n', '    }\n', '}\n', 'contract ONG is ONG_OracleFunctions, ONG_OwnerFunction, ONG_MembersFunctions, ONG_ProjectFunctions  {\n', '  constructor (address _Oracle) public{\n', '      Owner= msg.sender;\n', '      Oracle = _Oracle;\n', '      Projects[OwnerProject].Owner = Owner;\n', '      Projects[OwnerProject].Enable = true;\n', '      Projects[OwnerProject].Id = OwnerProject;\n', '  }\n', '}']