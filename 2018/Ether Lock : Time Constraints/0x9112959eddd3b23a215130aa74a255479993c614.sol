['pragma solidity ^0.4.22;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'contract HoldersList is Ownable{\n', '   uint256 public _totalTokens;\n', '   \n', '   struct TokenHolder {\n', '        uint256 balance;\n', '        uint       regTime;\n', '        bool isValue;\n', '    }\n', '    \n', '    mapping(address => TokenHolder) holders;\n', '    address[] public payees;\n', '    \n', '    function changeBalance(address _who, uint _amount)  public onlyOwner {\n', '        \n', '            holders[_who].balance = _amount;\n', '            if (notInArray(_who)){\n', '                payees.push(_who);\n', '                holders[_who].regTime = now;\n', '                holders[_who].isValue = true;\n', '            }\n', '            \n', '        //}\n', '    }\n', '    function notInArray(address _who) internal view returns (bool) {\n', '        if (holders[_who].isValue) {\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '    \n', '  /**\n', '   * @dev Defines number of issued tokens. \n', '   */\n', '  \n', '    function setTotal(uint _amount) public onlyOwner {\n', '      _totalTokens = _amount;\n', '  }\n', '  \n', '  /**\n', '   * @dev Returnes number of issued tokens.\n', '   */\n', '  \n', '   function getTotal() public constant returns (uint)  {\n', '     return  _totalTokens;\n', '  }\n', '  \n', '  /**\n', '   * @dev Returnes holders balance.\n', '   \n', '   */\n', '  function returnBalance (address _who) public constant returns (uint){\n', '      uint _balance;\n', '      \n', '      _balance= holders[_who].balance;\n', '      return _balance;\n', '  }\n', '  \n', '  \n', '  /**\n', '   * @dev Returnes number of holders in array.\n', '   \n', '   */\n', '  function returnPayees () public constant returns (uint){\n', '      uint _ammount;\n', '      \n', '      _ammount= payees.length;\n', '      return _ammount;\n', '  }\n', '  \n', '  \n', '  /**\n', '   * @dev Returnes holders address.\n', '   \n', '   */\n', '  function returnHolder (uint _num) public constant returns (address){\n', '      address _addr;\n', '      \n', '      _addr= payees[_num];\n', '      return _addr;\n', '  }\n', '  \n', '  /**\n', '   * @dev Returnes registration date of holder.\n', '   \n', '   */\n', '  function returnRegDate (address _who) public constant returns (uint){\n', '      uint _redData;\n', '      \n', '      _redData= holders[_who].regTime;\n', '      return _redData;\n', '  }\n', '    \n', '}\n', '\n', '\n', '\n', 'contract Dividend is Ownable   {\n', '  using SafeMath for uint256;  \n', '  //address multisig;\n', '  uint _totalDivid=0;\n', '  uint _newDivid=0;\n', '  uint public _totalTokens;\n', '  uint pointMultiplier = 10e18;\n', '  HoldersList list;\n', '  bool public PaymentFinished = false;\n', '  \n', ' \n', '  \n', ' \n', ' address[] payees;\n', ' \n', ' struct ETHHolder {\n', '        uint256 balance;\n', '        uint       balanceUpdateTime;\n', '        uint       rewardWithdrawTime;\n', ' }\n', ' mapping(address => ETHHolder) eholders;\n', ' \n', '   function returnMyEthBalance (address _who) public constant returns (uint){\n', '      //require(msg.sender == _who);\n', '      uint _eBalance;\n', '      \n', '      _eBalance= eholders[_who].balance;\n', '      return _eBalance;\n', '  }\n', '  \n', '  \n', '  function returnTotalDividend () public constant returns (uint){\n', '      return _totalDivid;\n', '  }\n', '  \n', '  \n', '  function changeEthBalance(address _who, uint256 _amount) internal {\n', '    //require(_who != address(0));\n', '    //require(_amount > 0);\n', '    eholders[_who].balanceUpdateTime = now;\n', '    eholders[_who].balance += _amount;\n', '\n', '  }\n', '  \n', '   /**\n', '   * @dev Allows the owner to set the List of token holders.\n', '   * @param _holdersList the List address\n', '   */\n', '  function setHoldersList(address _holdersList) public onlyOwner {\n', '    list = HoldersList(_holdersList);\n', '  }\n', '  \n', '  \n', '  function Withdraw() public returns (bool){\n', '    uint _eBalance;\n', '    address _who;\n', '    _who = msg.sender;\n', '    _eBalance= eholders[_who].balance;\n', '    require(_eBalance>0);\n', '    eholders[_who].balance = 0;\n', '    eholders[_who].rewardWithdrawTime = now;\n', '    _who.transfer(_eBalance);\n', '    return true;\n', '    \n', '   \n', '  }\n', '  \n', '  /**\n', '   * @dev Function to stop payments.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishDividend() onlyOwner public returns (bool) {\n', '    PaymentFinished = true;\n', '    return true;\n', '  }\n', '  \n', '  function() external payable {\n', '     \n', '     require(PaymentFinished==false);\n', '     \n', '     _newDivid= msg.value;\n', '     _totalDivid += _newDivid;\n', '     \n', '     uint _myTokenBalance=0;\n', '     uint _myRegTime;\n', '     uint _myEthShare=0;\n', '     //uint _myTokenPer=0;\n', '     uint256 _length;\n', '     address _addr;\n', '     \n', '     _length=list.returnPayees();\n', '     _totalTokens=list.getTotal();\n', '     \n', '     for (uint256 i = 0; i < _length; i++) {\n', '        _addr =list.returnHolder(i);\n', '        _myTokenBalance=list.returnBalance(_addr);\n', '        _myRegTime=list.returnRegDate(_addr);\n', '        _myEthShare=_myTokenBalance.mul(_newDivid).div(_totalTokens);\n', '          changeEthBalance(_addr, _myEthShare);\n', '        }\n', '    \n', '  }\n', ' \n', '}']
['pragma solidity ^0.4.22;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'contract HoldersList is Ownable{\n', '   uint256 public _totalTokens;\n', '   \n', '   struct TokenHolder {\n', '        uint256 balance;\n', '        uint       regTime;\n', '        bool isValue;\n', '    }\n', '    \n', '    mapping(address => TokenHolder) holders;\n', '    address[] public payees;\n', '    \n', '    function changeBalance(address _who, uint _amount)  public onlyOwner {\n', '        \n', '            holders[_who].balance = _amount;\n', '            if (notInArray(_who)){\n', '                payees.push(_who);\n', '                holders[_who].regTime = now;\n', '                holders[_who].isValue = true;\n', '            }\n', '            \n', '        //}\n', '    }\n', '    function notInArray(address _who) internal view returns (bool) {\n', '        if (holders[_who].isValue) {\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '    \n', '  /**\n', '   * @dev Defines number of issued tokens. \n', '   */\n', '  \n', '    function setTotal(uint _amount) public onlyOwner {\n', '      _totalTokens = _amount;\n', '  }\n', '  \n', '  /**\n', '   * @dev Returnes number of issued tokens.\n', '   */\n', '  \n', '   function getTotal() public constant returns (uint)  {\n', '     return  _totalTokens;\n', '  }\n', '  \n', '  /**\n', '   * @dev Returnes holders balance.\n', '   \n', '   */\n', '  function returnBalance (address _who) public constant returns (uint){\n', '      uint _balance;\n', '      \n', '      _balance= holders[_who].balance;\n', '      return _balance;\n', '  }\n', '  \n', '  \n', '  /**\n', '   * @dev Returnes number of holders in array.\n', '   \n', '   */\n', '  function returnPayees () public constant returns (uint){\n', '      uint _ammount;\n', '      \n', '      _ammount= payees.length;\n', '      return _ammount;\n', '  }\n', '  \n', '  \n', '  /**\n', '   * @dev Returnes holders address.\n', '   \n', '   */\n', '  function returnHolder (uint _num) public constant returns (address){\n', '      address _addr;\n', '      \n', '      _addr= payees[_num];\n', '      return _addr;\n', '  }\n', '  \n', '  /**\n', '   * @dev Returnes registration date of holder.\n', '   \n', '   */\n', '  function returnRegDate (address _who) public constant returns (uint){\n', '      uint _redData;\n', '      \n', '      _redData= holders[_who].regTime;\n', '      return _redData;\n', '  }\n', '    \n', '}\n', '\n', '\n', '\n', 'contract Dividend is Ownable   {\n', '  using SafeMath for uint256;  \n', '  //address multisig;\n', '  uint _totalDivid=0;\n', '  uint _newDivid=0;\n', '  uint public _totalTokens;\n', '  uint pointMultiplier = 10e18;\n', '  HoldersList list;\n', '  bool public PaymentFinished = false;\n', '  \n', ' \n', '  \n', ' \n', ' address[] payees;\n', ' \n', ' struct ETHHolder {\n', '        uint256 balance;\n', '        uint       balanceUpdateTime;\n', '        uint       rewardWithdrawTime;\n', ' }\n', ' mapping(address => ETHHolder) eholders;\n', ' \n', '   function returnMyEthBalance (address _who) public constant returns (uint){\n', '      //require(msg.sender == _who);\n', '      uint _eBalance;\n', '      \n', '      _eBalance= eholders[_who].balance;\n', '      return _eBalance;\n', '  }\n', '  \n', '  \n', '  function returnTotalDividend () public constant returns (uint){\n', '      return _totalDivid;\n', '  }\n', '  \n', '  \n', '  function changeEthBalance(address _who, uint256 _amount) internal {\n', '    //require(_who != address(0));\n', '    //require(_amount > 0);\n', '    eholders[_who].balanceUpdateTime = now;\n', '    eholders[_who].balance += _amount;\n', '\n', '  }\n', '  \n', '   /**\n', '   * @dev Allows the owner to set the List of token holders.\n', '   * @param _holdersList the List address\n', '   */\n', '  function setHoldersList(address _holdersList) public onlyOwner {\n', '    list = HoldersList(_holdersList);\n', '  }\n', '  \n', '  \n', '  function Withdraw() public returns (bool){\n', '    uint _eBalance;\n', '    address _who;\n', '    _who = msg.sender;\n', '    _eBalance= eholders[_who].balance;\n', '    require(_eBalance>0);\n', '    eholders[_who].balance = 0;\n', '    eholders[_who].rewardWithdrawTime = now;\n', '    _who.transfer(_eBalance);\n', '    return true;\n', '    \n', '   \n', '  }\n', '  \n', '  /**\n', '   * @dev Function to stop payments.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishDividend() onlyOwner public returns (bool) {\n', '    PaymentFinished = true;\n', '    return true;\n', '  }\n', '  \n', '  function() external payable {\n', '     \n', '     require(PaymentFinished==false);\n', '     \n', '     _newDivid= msg.value;\n', '     _totalDivid += _newDivid;\n', '     \n', '     uint _myTokenBalance=0;\n', '     uint _myRegTime;\n', '     uint _myEthShare=0;\n', '     //uint _myTokenPer=0;\n', '     uint256 _length;\n', '     address _addr;\n', '     \n', '     _length=list.returnPayees();\n', '     _totalTokens=list.getTotal();\n', '     \n', '     for (uint256 i = 0; i < _length; i++) {\n', '        _addr =list.returnHolder(i);\n', '        _myTokenBalance=list.returnBalance(_addr);\n', '        _myRegTime=list.returnRegDate(_addr);\n', '        _myEthShare=_myTokenBalance.mul(_newDivid).div(_totalTokens);\n', '          changeEthBalance(_addr, _myEthShare);\n', '        }\n', '    \n', '  }\n', ' \n', '}']
