['pragma solidity ^0.4.24;\n', '\n', '/*\n', '    Copyright 2018, Vicent Nos\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', '\n', ' */\n', '\n', '\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () internal {\n', '      owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '//////////////////////////////////////////////////////////////\n', '//                                                          //\n', '//  Alt Index, Open End Crypto Fund ERC20                    //\n', '//                                                          //\n', '//////////////////////////////////////////////////////////////\n', '\n', 'contract ALXERC20 is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '\n', '    mapping (address => uint256) public balances;\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    mapping (address => mapping (uint256 => timeHold)) internal requestWithdraws;\n', '   \n', ' \n', '\n', '    struct timeHold{\n', '        uint256[] amount;\n', '        uint256[] time;\n', '        uint256 length;\n', '    }\n', '   \n', '   function requestOfAmount(address addr, uint256 n) public view returns(uint256){\n', '     return requestWithdraws[addr][n].amount[0];   \n', '    }   \n', '   \n', '    function requestOfTime(address addr, uint256 n) public view returns(uint256){\n', '     return requestWithdraws[addr][n].time[0];   \n', '    }  \n', '    \n', '    uint256 public roundCounter=0;\n', '    \n', '    /* Public variables for the ERC20 token */\n', '    string public constant standard = "ERC20 ALX";\n', '    uint8 public constant decimals = 8; // hardcoded to be a constant\n', '    uint256 public totalSupply;\n', '    string public name;\n', '    string public symbol;\n', '\n', '    uint256 public transactionFee = 1;\n', '\n', '    uint256 public icoEnd=0;\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '\n', '    function setTransactionFee(uint256 _value) public onlyOwner{\n', '      transactionFee=_value;\n', ' \n', '    }\n', '\n', '    function setIcoEnd(uint256 _value) public onlyOwner{\n', '      icoEnd=_value;\n', ' \n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        require(block.timestamp>icoEnd);\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '\n', '        uint256 fee=(_value*transactionFee)/1000;\n', ' \n', '        delete requestWithdraws[msg.sender][roundCounter];\n', '\n', '        balances[_to] = balances[_to].add(_value-fee);\n', '        balances[owner]=balances[owner].add(fee);\n', '        \n', '        emit Transfer(msg.sender, _to, _value-fee);\n', '        emit Transfer(msg.sender, owner, fee);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        require(block.timestamp>icoEnd);\n', '        balances[_from] = balances[_from].sub(_value);\n', '\n', '        uint256 fee=(_value*transactionFee)/1000;\n', '\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '        delete requestWithdraws[msg.sender][roundCounter];\n', '        delete requestWithdraws[_from][roundCounter];\n', '\n', '        balances[_to] = balances[_to].add(_value-fee);\n', '        balances[owner]=balances[owner].add(fee);\n', '        \n', '        emit Transfer(_from, _to, _value-fee);\n', '        emit Transfer(_from, owner, fee);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /* Approve and then communicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'interface tokenRecipient {\n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external ;\n', '}\n', '\n', '\n', 'contract ALX is ALXERC20 {\n', '\n', '    // Contract variables and constants\n', '\n', '\n', '    uint256 public tokenPrice = 30000000000000000;\n', '    uint256 public tokenAmount=0;\n', '\n', '    // constant to simplify conversion of token amounts into integer form\n', '    uint256 public tokenUnit = uint256(10)**decimals;\n', '\n', '    uint256 public holdTime;\n', '    uint256 public holdMax;\n', '    uint256 public maxSupply;\n', '\n', '    //Declare logging events\n', '    event LogDeposit(address sender, uint amount);\n', '\n', '\n', '\n', '    uint256 public withdrawFee = 1;\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '        constructor (\n', '            \n', '            uint256 initialSupply,\n', '            string contractName,\n', '            string tokenSymbol,\n', '            uint256 contractHoldTime,\n', '            uint256 contractHoldMax,\n', '            \n', '            address contractOwner\n', '\n', '        ) public {\n', '\n', '\n', '        totalSupply = initialSupply;  // Update total supply\n', '        name = contractName;             // Set the name for display purposes\n', '        symbol = tokenSymbol;         // Set the symbol for display purposes\n', '        holdTime=contractHoldTime;\n', '        holdMax=contractHoldMax;\n', '        \n', '        owner=contractOwner;\n', '        balances[contractOwner]= balances[contractOwner].add(totalSupply);\n', '\n', '    }\n', '\n', '    function () public payable {\n', '        buy();   // Allow to buy tokens sending ether directly to contract\n', '    }\n', '\n', '\n', '    function deposit() external payable onlyOwner returns(bool success) {\n', '        // Check for overflows;\n', '        //executes event to reflect the changes\n', '        emit LogDeposit(msg.sender, msg.value);\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    function setWithdrawFee(uint256 _value) public onlyOwner{\n', '      withdrawFee=_value;\n', ' \n', '    }\n', '    \n', '\n', '\n', '    function withdrawReward() external {\n', '\n', '        uint i = 0;\n', '        uint256 ethAmount = 0;\n', '\n', '        uint256 tokenM=0;\n', '        \n', '        if (block.timestamp -  requestWithdraws[msg.sender][roundCounter].time[i] > holdTime && block.timestamp -  requestWithdraws[msg.sender][roundCounter].time[i] < holdMax){\n', '                ethAmount += tokenPrice * requestWithdraws[msg.sender][roundCounter].amount[i];\n', '                tokenM +=requestWithdraws[msg.sender][roundCounter].amount[i];\n', '        }\n', '    \n', '        ethAmount=ethAmount/tokenUnit;\n', '        require(ethAmount > 0);\n', '\n', '        emit LogWithdrawal(msg.sender, ethAmount);\n', '\n', '        totalSupply = totalSupply.sub(tokenM);\n', '\n', '        delete requestWithdraws[msg.sender][roundCounter];\n', '\n', '        uint256 fee=ethAmount*withdrawFee/1000;\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(tokenM);\n', '\n', '        msg.sender.transfer(ethAmount-fee);\n', '        owner.transfer(fee);\n', '\n', '    }\n', '\n', '     \n', '    function withdraw(uint256 amount) public onlyOwner{ \n', '        msg.sender.transfer(amount);\n', '    }\n', '\n', '    function setPrice(uint256 _value) public onlyOwner{\n', '      tokenPrice=_value;\n', '      roundCounter++;\n', '\n', '    }\n', '\n', '\n', '\n', '    event LogWithdrawal(address receiver, uint amount);\n', '\n', '    function requestWithdraw(uint256 value) public {\n', '      require(value <= balances[msg.sender]);\n', '\n', '      delete requestWithdraws[msg.sender][roundCounter];\n', '\n', '      requestWithdraws[msg.sender][roundCounter].amount.push(value);\n', '      requestWithdraws[msg.sender][roundCounter].time.push(block.timestamp);\n', '      requestWithdraws[msg.sender][roundCounter].length++;\n', '      //executes event ro register the changes\n', '\n', '    }\n', '    \n', '    uint256 public minPrice=250000000000000000;\n', '    \n', '    function setMinPrice(uint256 value) public onlyOwner{\n', '        minPrice=value;\n', '    }\n', '\n', '    function buy() public payable {\n', '        require(msg.value>=minPrice);\n', '        tokenAmount = (msg.value * tokenUnit) / tokenPrice ;  // calculates the amount\n', '        \n', '        transferBuy(msg.sender, tokenAmount);\n', '        owner.transfer(msg.value);\n', '    }\n', '\n', '    function transferBuy(address _to, uint256 _value) internal returns (bool) {\n', '        require(_to != address(0));\n', '\n', '        // SafeMath.add will throw if there is not enough balance.\n', '        totalSupply = totalSupply.add(_value);\n', '        \n', '        uint256 teamAmount=_value*100/1000;\n', '\n', '        totalSupply = totalSupply.add(teamAmount);\n', '\n', '\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[owner] = balances[owner].add(teamAmount);\n', '\n', '        emit Transfer(this, _to, _value);\n', '        emit Transfer(this, owner, teamAmount);\n', '        return true;\n', '\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/*\n', '    Copyright 2018, Vicent Nos\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', '\n', ' */\n', '\n', '\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () internal {\n', '      owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '//////////////////////////////////////////////////////////////\n', '//                                                          //\n', '//  Alt Index, Open End Crypto Fund ERC20                    //\n', '//                                                          //\n', '//////////////////////////////////////////////////////////////\n', '\n', 'contract ALXERC20 is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '\n', '    mapping (address => uint256) public balances;\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    mapping (address => mapping (uint256 => timeHold)) internal requestWithdraws;\n', '   \n', ' \n', '\n', '    struct timeHold{\n', '        uint256[] amount;\n', '        uint256[] time;\n', '        uint256 length;\n', '    }\n', '   \n', '   function requestOfAmount(address addr, uint256 n) public view returns(uint256){\n', '     return requestWithdraws[addr][n].amount[0];   \n', '    }   \n', '   \n', '    function requestOfTime(address addr, uint256 n) public view returns(uint256){\n', '     return requestWithdraws[addr][n].time[0];   \n', '    }  \n', '    \n', '    uint256 public roundCounter=0;\n', '    \n', '    /* Public variables for the ERC20 token */\n', '    string public constant standard = "ERC20 ALX";\n', '    uint8 public constant decimals = 8; // hardcoded to be a constant\n', '    uint256 public totalSupply;\n', '    string public name;\n', '    string public symbol;\n', '\n', '    uint256 public transactionFee = 1;\n', '\n', '    uint256 public icoEnd=0;\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '\n', '    function setTransactionFee(uint256 _value) public onlyOwner{\n', '      transactionFee=_value;\n', ' \n', '    }\n', '\n', '    function setIcoEnd(uint256 _value) public onlyOwner{\n', '      icoEnd=_value;\n', ' \n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        require(block.timestamp>icoEnd);\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '\n', '        uint256 fee=(_value*transactionFee)/1000;\n', ' \n', '        delete requestWithdraws[msg.sender][roundCounter];\n', '\n', '        balances[_to] = balances[_to].add(_value-fee);\n', '        balances[owner]=balances[owner].add(fee);\n', '        \n', '        emit Transfer(msg.sender, _to, _value-fee);\n', '        emit Transfer(msg.sender, owner, fee);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        require(block.timestamp>icoEnd);\n', '        balances[_from] = balances[_from].sub(_value);\n', '\n', '        uint256 fee=(_value*transactionFee)/1000;\n', '\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '        delete requestWithdraws[msg.sender][roundCounter];\n', '        delete requestWithdraws[_from][roundCounter];\n', '\n', '        balances[_to] = balances[_to].add(_value-fee);\n', '        balances[owner]=balances[owner].add(fee);\n', '        \n', '        emit Transfer(_from, _to, _value-fee);\n', '        emit Transfer(_from, owner, fee);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /* Approve and then communicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'interface tokenRecipient {\n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external ;\n', '}\n', '\n', '\n', 'contract ALX is ALXERC20 {\n', '\n', '    // Contract variables and constants\n', '\n', '\n', '    uint256 public tokenPrice = 30000000000000000;\n', '    uint256 public tokenAmount=0;\n', '\n', '    // constant to simplify conversion of token amounts into integer form\n', '    uint256 public tokenUnit = uint256(10)**decimals;\n', '\n', '    uint256 public holdTime;\n', '    uint256 public holdMax;\n', '    uint256 public maxSupply;\n', '\n', '    //Declare logging events\n', '    event LogDeposit(address sender, uint amount);\n', '\n', '\n', '\n', '    uint256 public withdrawFee = 1;\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '        constructor (\n', '            \n', '            uint256 initialSupply,\n', '            string contractName,\n', '            string tokenSymbol,\n', '            uint256 contractHoldTime,\n', '            uint256 contractHoldMax,\n', '            \n', '            address contractOwner\n', '\n', '        ) public {\n', '\n', '\n', '        totalSupply = initialSupply;  // Update total supply\n', '        name = contractName;             // Set the name for display purposes\n', '        symbol = tokenSymbol;         // Set the symbol for display purposes\n', '        holdTime=contractHoldTime;\n', '        holdMax=contractHoldMax;\n', '        \n', '        owner=contractOwner;\n', '        balances[contractOwner]= balances[contractOwner].add(totalSupply);\n', '\n', '    }\n', '\n', '    function () public payable {\n', '        buy();   // Allow to buy tokens sending ether directly to contract\n', '    }\n', '\n', '\n', '    function deposit() external payable onlyOwner returns(bool success) {\n', '        // Check for overflows;\n', '        //executes event to reflect the changes\n', '        emit LogDeposit(msg.sender, msg.value);\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    function setWithdrawFee(uint256 _value) public onlyOwner{\n', '      withdrawFee=_value;\n', ' \n', '    }\n', '    \n', '\n', '\n', '    function withdrawReward() external {\n', '\n', '        uint i = 0;\n', '        uint256 ethAmount = 0;\n', '\n', '        uint256 tokenM=0;\n', '        \n', '        if (block.timestamp -  requestWithdraws[msg.sender][roundCounter].time[i] > holdTime && block.timestamp -  requestWithdraws[msg.sender][roundCounter].time[i] < holdMax){\n', '                ethAmount += tokenPrice * requestWithdraws[msg.sender][roundCounter].amount[i];\n', '                tokenM +=requestWithdraws[msg.sender][roundCounter].amount[i];\n', '        }\n', '    \n', '        ethAmount=ethAmount/tokenUnit;\n', '        require(ethAmount > 0);\n', '\n', '        emit LogWithdrawal(msg.sender, ethAmount);\n', '\n', '        totalSupply = totalSupply.sub(tokenM);\n', '\n', '        delete requestWithdraws[msg.sender][roundCounter];\n', '\n', '        uint256 fee=ethAmount*withdrawFee/1000;\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(tokenM);\n', '\n', '        msg.sender.transfer(ethAmount-fee);\n', '        owner.transfer(fee);\n', '\n', '    }\n', '\n', '     \n', '    function withdraw(uint256 amount) public onlyOwner{ \n', '        msg.sender.transfer(amount);\n', '    }\n', '\n', '    function setPrice(uint256 _value) public onlyOwner{\n', '      tokenPrice=_value;\n', '      roundCounter++;\n', '\n', '    }\n', '\n', '\n', '\n', '    event LogWithdrawal(address receiver, uint amount);\n', '\n', '    function requestWithdraw(uint256 value) public {\n', '      require(value <= balances[msg.sender]);\n', '\n', '      delete requestWithdraws[msg.sender][roundCounter];\n', '\n', '      requestWithdraws[msg.sender][roundCounter].amount.push(value);\n', '      requestWithdraws[msg.sender][roundCounter].time.push(block.timestamp);\n', '      requestWithdraws[msg.sender][roundCounter].length++;\n', '      //executes event ro register the changes\n', '\n', '    }\n', '    \n', '    uint256 public minPrice=250000000000000000;\n', '    \n', '    function setMinPrice(uint256 value) public onlyOwner{\n', '        minPrice=value;\n', '    }\n', '\n', '    function buy() public payable {\n', '        require(msg.value>=minPrice);\n', '        tokenAmount = (msg.value * tokenUnit) / tokenPrice ;  // calculates the amount\n', '        \n', '        transferBuy(msg.sender, tokenAmount);\n', '        owner.transfer(msg.value);\n', '    }\n', '\n', '    function transferBuy(address _to, uint256 _value) internal returns (bool) {\n', '        require(_to != address(0));\n', '\n', '        // SafeMath.add will throw if there is not enough balance.\n', '        totalSupply = totalSupply.add(_value);\n', '        \n', '        uint256 teamAmount=_value*100/1000;\n', '\n', '        totalSupply = totalSupply.add(teamAmount);\n', '\n', '\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[owner] = balances[owner].add(teamAmount);\n', '\n', '        emit Transfer(this, _to, _value);\n', '        emit Transfer(this, owner, teamAmount);\n', '        return true;\n', '\n', '    }\n', '}']
