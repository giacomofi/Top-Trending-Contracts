['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) pure internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract token {\n', '  mapping (address => uint256) public balanceOf;\n', '  function transfer(address _to, uint256 _value) external;\n', '}\n', '\n', 'contract FIFACrowdsale {\n', '  using SafeMath for uint256;\n', '  token public tokenReward;\n', '  mapping(address => uint256) public balanceOf;\n', '\n', '  uint public beginTime;\n', '  uint public endTime;\n', '\n', '  address public owner;\n', '\n', '  event Transfer(address indexed _from, uint256 _value);\n', '\n', '  constructor (\n', '    address FIFAReward,\n', '    uint _beginTime,\n', '    uint _endTime\n', '  ) payable public {\n', '    tokenReward = token(FIFAReward);\n', '    beginTime = _beginTime;\n', '    endTime = _endTime;\n', '\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function () payable public{\n', '    uint amount = msg.value;\n', '\n', '    require(amount % 10 ** 17 == 0);\n', '    require(now >= beginTime && now <= endTime);\n', '    tokenReward.transfer(msg.sender, amount.mul(1000));\n', '\n', '    emit Transfer(msg.sender, amount);\n', '  }\n', '\n', '  function setBeginTime(uint _beginTime) onlyOwner public {\n', '    beginTime = _beginTime;\n', '  }\n', '\n', '  function setEndTime(uint _endTime) onlyOwner public {\n', '    endTime = _endTime;\n', '  }\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function WithdrawalETH(uint _value) onlyOwner public {\n', '    if (_value == 0)\n', '      owner.transfer(address(this).balance);\n', '    else\n', '      owner.transfer(_value * 1 ether);\n', '  }\n', '\n', '  function WithdrawalToken(uint _value) onlyOwner public {\n', '    if (_value == 0) {\n', '      tokenReward.transfer(owner, tokenReward.balanceOf(address(this)));\n', '    } else {\n', '      tokenReward.transfer(owner, _value * 1 ether);\n', '    }\n', '  }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) pure internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract token {\n', '  mapping (address => uint256) public balanceOf;\n', '  function transfer(address _to, uint256 _value) external;\n', '}\n', '\n', 'contract FIFACrowdsale {\n', '  using SafeMath for uint256;\n', '  token public tokenReward;\n', '  mapping(address => uint256) public balanceOf;\n', '\n', '  uint public beginTime;\n', '  uint public endTime;\n', '\n', '  address public owner;\n', '\n', '  event Transfer(address indexed _from, uint256 _value);\n', '\n', '  constructor (\n', '    address FIFAReward,\n', '    uint _beginTime,\n', '    uint _endTime\n', '  ) payable public {\n', '    tokenReward = token(FIFAReward);\n', '    beginTime = _beginTime;\n', '    endTime = _endTime;\n', '\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function () payable public{\n', '    uint amount = msg.value;\n', '\n', '    require(amount % 10 ** 17 == 0);\n', '    require(now >= beginTime && now <= endTime);\n', '    tokenReward.transfer(msg.sender, amount.mul(1000));\n', '\n', '    emit Transfer(msg.sender, amount);\n', '  }\n', '\n', '  function setBeginTime(uint _beginTime) onlyOwner public {\n', '    beginTime = _beginTime;\n', '  }\n', '\n', '  function setEndTime(uint _endTime) onlyOwner public {\n', '    endTime = _endTime;\n', '  }\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function WithdrawalETH(uint _value) onlyOwner public {\n', '    if (_value == 0)\n', '      owner.transfer(address(this).balance);\n', '    else\n', '      owner.transfer(_value * 1 ether);\n', '  }\n', '\n', '  function WithdrawalToken(uint _value) onlyOwner public {\n', '    if (_value == 0) {\n', '      tokenReward.transfer(owner, tokenReward.balanceOf(address(this)));\n', '    } else {\n', '      tokenReward.transfer(owner, _value * 1 ether);\n', '    }\n', '  }\n', '}']
