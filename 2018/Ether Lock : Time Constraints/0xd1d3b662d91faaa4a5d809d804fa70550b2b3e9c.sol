['pragma solidity ^0.4.24;\n', '// produced by the Solididy File Flattener (c) David Appleton 2018\n', '// contact : <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="a5c1c4d3c0e5c4cecac8c7c48bc6cac8">[email&#160;protected]</a>\n', '// released under Apache 2.0 licence\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b)\n', '    internal\n', '    pure\n', '    returns (uint256 c)\n', '  {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b)\n', '    internal\n', '    pure\n', '    returns (uint256)\n', '  {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b)\n', '    internal\n', '    pure\n', '    returns (uint256)\n', '  {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b)\n', '    internal\n', '    pure\n', '    returns (uint256 c)\n', '  {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '}\n', 'contract ERC20 {\n', '\n', '  function totalSupply() public view returns (uint256);\n', '\n', '  function balanceOf(address who) public view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '}\n', 'contract Owned {\n', '\n', '  event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '  address public owner;\n', '  address public newOwner;\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  constructor()\n', '    public\n', '  {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function transferOwnership(address _newOwner)\n', '    public\n', '    onlyOwner\n', '  {\n', '    newOwner = _newOwner;\n', '  }\n', '\n', '  function acceptOwnership()\n', '    public\n', '  {\n', '    require(msg.sender == newOwner);\n', '    owner = newOwner;\n', '    newOwner = address(0);\n', '    emit OwnershipTransferred(owner, newOwner);\n', '  }\n', '\n', '}\n', 'contract StandardToken is ERC20 {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  mapping(address => mapping(address => uint256)) internal allowed;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply()\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value)\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner)\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return balances[_owner];\n', '  }\n', '\n', '\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value)\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender)\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint256 _addedValue)\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '    allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint256 _subtractedValue)\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20 token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '  internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', 'contract PetCoin is StandardToken, Owned {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  // Token metadata\n', '  string public constant name = "Petcoin";\n', '  string public constant symbol = "PETC";\n', '  uint256 public constant decimals = 18;\n', '\n', '  // Token supply breakdown\n', '  uint256 public constant initialSupply = 2340 * (10**6) * 10**decimals; // 2.34 billion\n', '  uint256 public constant stageOneSupply = (10**5) * 10**decimals; // 100,000 tokens for ICO stage 1\n', '  uint256 public constant stageTwoSupply = (10**6) * 10**decimals; // 1,000,000 tokens for ICO stage 2\n', '  uint256 public constant stageThreeSupply = (10**7) * 10**decimals; // 10,000,000 tokens for ICO stage 3\n', '\n', '  // Initial Token holder addresses.\n', '  // one billion token holders\n', '  address public constant appWallet = 0x9F6899364610B96D7718Fe3c03A6BD1Deb8623CE;\n', '  address public constant genWallet = 0x530E6B9A17e9AbB77CF4E125b99Bf5D5CAD69942;\n', '  // one hundred million token holders\n', '  address public constant ceoWallet = 0x388Ed3f7Aa1C4461460197FcCE5cfEf84D562c6A;\n', '  address public constant cooWallet = 0xa2c59e6a91B4E502CF8C95A61F50D3aB1AB30cBA;\n', '  address public constant devWallet = 0x7D2ea29E2d4A95f4725f52B941c518C15eAE3c64;\n', '  // the rest token holder\n', '  address public constant poolWallet = 0x7e75fe6b73993D9Be9cb975364ec70Ee2C22c13A;\n', '\n', '  // mint configuration\n', '  uint256 public constant yearlyMintCap = (10*7) * 10*decimals; //10,000,000 tokens each year\n', '  uint16 public mintStartYear = 2019;\n', '  uint16 public mintEndYear = 2118;\n', '\n', '  mapping (uint16 => bool) minted;\n', '\n', '\n', '  constructor()\n', '    public\n', '  {\n', '    totalSupply_ = initialSupply.add(stageOneSupply).add(stageTwoSupply).add(stageThreeSupply);\n', '    uint256 oneBillion = (10**9) * 10**decimals;\n', '    uint256 oneHundredMillion = 100 * (10**6) * 10**decimals;\n', '    balances[appWallet] = oneBillion;\n', '    emit Transfer(address(0), appWallet, oneBillion);\n', '    balances[genWallet] = oneBillion;\n', '    emit Transfer(address(0), genWallet, oneBillion);\n', '    balances[ceoWallet] = oneHundredMillion;\n', '    emit Transfer(address(0), ceoWallet, oneHundredMillion);\n', '    balances[cooWallet] = oneHundredMillion;\n', '    emit Transfer(address(0), cooWallet, oneHundredMillion);\n', '    balances[devWallet] = oneHundredMillion;\n', '    emit Transfer(address(0), devWallet, oneHundredMillion);\n', '    balances[poolWallet] = initialSupply.sub(balances[appWallet])\n', '    .sub(balances[genWallet])\n', '    .sub(balances[ceoWallet])\n', '    .sub(balances[cooWallet])\n', '    .sub(balances[devWallet]);\n', '    emit Transfer(address(0), poolWallet, balances[poolWallet]);\n', '    balances[msg.sender] = stageOneSupply.add(stageTwoSupply).add(stageThreeSupply);\n', '    emit Transfer(address(0), msg.sender, balances[msg.sender]);\n', '  }\n', '\n', '  event Mint(address indexed to, uint256 amount);\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to\n', '  )\n', '    onlyOwner\n', '    external\n', '    returns (bool)\n', '  {\n', '    uint16 year = _getYear(now);\n', '    require (year >= mintStartYear && year <= mintEndYear && !minted[year]);\n', '    require (_to != address(0));\n', '\n', '    totalSupply_ = totalSupply_.add(yearlyMintCap);\n', '    balances[_to] = balances[_to].add(yearlyMintCap);\n', '    minted[year] = true;\n', '\n', '    emit Mint(_to, yearlyMintCap);\n', '    emit Transfer(address(0), _to, yearlyMintCap);\n', '    return true;\n', '  }\n', '\n', '  function _getYear(uint256 timestamp)\n', '    internal\n', '    pure\n', '    returns (uint16)\n', '  {\n', '    uint16 ORIGIN_YEAR = 1970;\n', '    uint256 YEAR_IN_SECONDS = 31536000;\n', '    uint256 LEAP_YEAR_IN_SECONDS = 31622400;\n', '\n', '    uint secondsAccountedFor = 0;\n', '    uint16 year;\n', '    uint numLeapYears;\n', '\n', '    // Year\n', '    year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\n', '    numLeapYears = _leapYearsBefore(year) - _leapYearsBefore(ORIGIN_YEAR);\n', '\n', '    secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\n', '    secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\n', '\n', '    while (secondsAccountedFor > timestamp) {\n', '      if (_isLeapYear(uint16(year - 1))) {\n', '        secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\n', '      }\n', '      else {\n', '        secondsAccountedFor -= YEAR_IN_SECONDS;\n', '      }\n', '      year -= 1;\n', '    }\n', '    return year;\n', '  }\n', '\n', '  function _isLeapYear(uint16 year)\n', '    internal\n', '    pure\n', '    returns (bool)\n', '  {\n', '    if (year % 4 != 0) {\n', '      return false;\n', '    }\n', '    if (year % 100 != 0) {\n', '      return true;\n', '    }\n', '    if (year % 400 != 0) {\n', '      return false;\n', '    }\n', '    return true;\n', '  }\n', '\n', '  function _leapYearsBefore(uint year)\n', '    internal\n', '    pure\n', '    returns (uint)\n', '  {\n', '    year -= 1;\n', '    return year / 4 - year / 100 + year / 400;\n', '  }\n', '\n', '}\n', 'contract PetCoinCrowdSale is Owned {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for PetCoin;\n', '\n', '  // Conversion rates\n', '  uint256 public stageOneRate = 4500; // 1 ETH = 4500 PETC\n', '  uint256 public stageTwoRate = 3000; // 1 ETH = 3000 PETC\n', '  uint256 public stageThreeRate = 2557; // 1 ETH = 2557 PETC\n', '\n', '  // The token being sold\n', '  PetCoin public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '\n', '  // Token Sale State Definitions\n', '  enum TokenSaleState { NOT_STARTED, STAGE_ONE, STAGE_TWO, STAGE_THREE, COMPLETED }\n', '\n', '  TokenSaleState public state;\n', '\n', '  struct Stage {\n', '    uint256 rate;\n', '    uint256 remaining;\n', '  }\n', '\n', '  // Enum as mapping key not supported by Solidity yet\n', '  mapping(uint256 => Stage) public stages;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(\n', '    address indexed purchaser,\n', '    uint256 value,\n', '    uint256 amount\n', '  );\n', '\n', '\n', '  /**\n', '   * Event for refund in case remaining tokens are not sufficient\n', '   * @param purchaser who paid for the tokens\n', '   * @param value weis refunded\n', '   */\n', '  event Refund(\n', '    address indexed purchaser,\n', '    uint256 value\n', '  );\n', '\n', '  /**\n', '   * Event for move stage\n', '   * @param oldState old state\n', '   * @param newState new state\n', '   */\n', '  event MoveStage(\n', '    TokenSaleState oldState,\n', '    TokenSaleState newState\n', '  );\n', '\n', '  /**\n', ' * Event for rates update\n', ' * @param who updated the rates\n', ' * @param stageOneRate new stageOneRate\n', ' * @param stageTwoRate new stageTwoRate\n', ' * @param stageThreeRate new stageThreeRate\n', ' */\n', '  event RatesUpdate(\n', '    address indexed who,\n', '    uint256 stageOneRate,\n', '    uint256 stageTwoRate,\n', '    uint256 stageThreeRate\n', '  );\n', '\n', '  /**\n', '   * @param _token Address of the token being sold\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   */\n', '  constructor(PetCoin _token, address _wallet)\n', '    public\n', '  {\n', '    require(_token != address(0));\n', '    require(_wallet != address(0));\n', '\n', '    token = _token;\n', '    wallet = _wallet;\n', '\n', '    state = TokenSaleState.NOT_STARTED;\n', '    stages[uint256(TokenSaleState.STAGE_ONE)] = Stage(stageOneRate, token.stageOneSupply());\n', '    stages[uint256(TokenSaleState.STAGE_TWO)] = Stage(stageTwoRate, token.stageTwoSupply());\n', '    stages[uint256(TokenSaleState.STAGE_THREE)] = Stage(stageThreeRate, token.stageThreeSupply());\n', '  }\n', '\n', '\n', '  // Modifiers\n', '  modifier notStarted() {\n', '    require (state == TokenSaleState.NOT_STARTED);\n', '    _;\n', '  }\n', '\n', '  modifier stageOne() {\n', '    require (state == TokenSaleState.STAGE_ONE);\n', '    _;\n', '  }\n', '\n', '  modifier stageTwo() {\n', '    require (state == TokenSaleState.STAGE_TWO);\n', '    _;\n', '  }\n', '\n', '  modifier stageThree() {\n', '    require (state == TokenSaleState.STAGE_THREE);\n', '    _;\n', '  }\n', '\n', '  modifier completed() {\n', '    require (state == TokenSaleState.COMPLETED);\n', '    _;\n', '  }\n', '\n', '  modifier saleInProgress() {\n', '    require (state == TokenSaleState.STAGE_ONE || state == TokenSaleState.STAGE_TWO || state == TokenSaleState.STAGE_THREE);\n', '    _;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  function kickoff()\n', '    external\n', '    onlyOwner\n', '    notStarted\n', '  {\n', '    _moveStage();\n', '  }\n', '\n', '\n', '  function updateRates(uint256 _stageOneRate, uint256 _stageTwoRate, uint256 _stageThreeRate)\n', '    external\n', '    onlyOwner\n', '  {\n', '    stageOneRate = _stageOneRate;\n', '    stageTwoRate = _stageTwoRate;\n', '    stageThreeRate = _stageThreeRate;\n', '    stages[uint256(TokenSaleState.STAGE_ONE)].rate = stageOneRate;\n', '    stages[uint256(TokenSaleState.STAGE_TWO)].rate = stageTwoRate;\n', '    stages[uint256(TokenSaleState.STAGE_THREE)].rate = stageThreeRate;\n', '    emit RatesUpdate(msg.sender, stageOneRate, stageTwoRate, stageThreeRate);\n', '  }\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function ()\n', '    external\n', '    payable\n', '    saleInProgress\n', '  {\n', '    require(stages[uint256(state)].rate > 0);\n', '    require(stages[uint256(state)].remaining > 0);\n', '    require(msg.value > 0);\n', '\n', '    uint256 weiAmount = msg.value;\n', '    uint256 refund = 0;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(stages[uint256(state)].rate);\n', '\n', '    if (tokens > stages[uint256(state)].remaining) {\n', '      // calculate wei needed to purchase the remaining tokens\n', '      tokens = stages[uint256(state)].remaining;\n', '      weiAmount = tokens.div(stages[uint256(state)].rate);\n', '      refund = msg.value - weiAmount;\n', '    }\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    emit TokenPurchase(\n', '      msg.sender,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '\n', '    // update remaining of the stage\n', '    stages[uint256(state)].remaining -= tokens;\n', '    assert(stages[uint256(state)].remaining >= 0);\n', '\n', '    if (stages[uint256(state)].remaining == 0) {\n', '      _moveStage();\n', '    }\n', '\n', '    // transfer tokens to buyer\n', '    token.safeTransfer(msg.sender, tokens);\n', '\n', '    // forward ETH to the wallet\n', '    _forwardFunds(weiAmount);\n', '\n', '    if (refund > 0) { // refund the purchaser if required\n', '      msg.sender.transfer(refund);\n', '      emit Refund(\n', '        msg.sender,\n', '        refund\n', '      );\n', '    }\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  function _moveStage()\n', '    internal\n', '  {\n', '    TokenSaleState oldState = state;\n', '    if (state == TokenSaleState.NOT_STARTED) {\n', '      state = TokenSaleState.STAGE_ONE;\n', '    } else if (state == TokenSaleState.STAGE_ONE) {\n', '      state = TokenSaleState.STAGE_TWO;\n', '    } else if (state == TokenSaleState.STAGE_TWO) {\n', '      state = TokenSaleState.STAGE_THREE;\n', '    } else if (state == TokenSaleState.STAGE_THREE) {\n', '      state = TokenSaleState.COMPLETED;\n', '    }\n', '    emit MoveStage(oldState, state);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds(uint256 weiAmount) internal {\n', '    wallet.transfer(weiAmount);\n', '  }\n', '}']
['pragma solidity ^0.4.24;\n', '// produced by the Solididy File Flattener (c) David Appleton 2018\n', '// contact : dave@akomba.com\n', '// released under Apache 2.0 licence\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b)\n', '    internal\n', '    pure\n', '    returns (uint256 c)\n', '  {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b)\n', '    internal\n', '    pure\n', '    returns (uint256)\n', '  {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b)\n', '    internal\n', '    pure\n', '    returns (uint256)\n', '  {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b)\n', '    internal\n', '    pure\n', '    returns (uint256 c)\n', '  {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '}\n', 'contract ERC20 {\n', '\n', '  function totalSupply() public view returns (uint256);\n', '\n', '  function balanceOf(address who) public view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '}\n', 'contract Owned {\n', '\n', '  event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '  address public owner;\n', '  address public newOwner;\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  constructor()\n', '    public\n', '  {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function transferOwnership(address _newOwner)\n', '    public\n', '    onlyOwner\n', '  {\n', '    newOwner = _newOwner;\n', '  }\n', '\n', '  function acceptOwnership()\n', '    public\n', '  {\n', '    require(msg.sender == newOwner);\n', '    owner = newOwner;\n', '    newOwner = address(0);\n', '    emit OwnershipTransferred(owner, newOwner);\n', '  }\n', '\n', '}\n', 'contract StandardToken is ERC20 {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  mapping(address => mapping(address => uint256)) internal allowed;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply()\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value)\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner)\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return balances[_owner];\n', '  }\n', '\n', '\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value)\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender)\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint256 _addedValue)\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '    allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint256 _subtractedValue)\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20 token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '  internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', 'contract PetCoin is StandardToken, Owned {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  // Token metadata\n', '  string public constant name = "Petcoin";\n', '  string public constant symbol = "PETC";\n', '  uint256 public constant decimals = 18;\n', '\n', '  // Token supply breakdown\n', '  uint256 public constant initialSupply = 2340 * (10**6) * 10**decimals; // 2.34 billion\n', '  uint256 public constant stageOneSupply = (10**5) * 10**decimals; // 100,000 tokens for ICO stage 1\n', '  uint256 public constant stageTwoSupply = (10**6) * 10**decimals; // 1,000,000 tokens for ICO stage 2\n', '  uint256 public constant stageThreeSupply = (10**7) * 10**decimals; // 10,000,000 tokens for ICO stage 3\n', '\n', '  // Initial Token holder addresses.\n', '  // one billion token holders\n', '  address public constant appWallet = 0x9F6899364610B96D7718Fe3c03A6BD1Deb8623CE;\n', '  address public constant genWallet = 0x530E6B9A17e9AbB77CF4E125b99Bf5D5CAD69942;\n', '  // one hundred million token holders\n', '  address public constant ceoWallet = 0x388Ed3f7Aa1C4461460197FcCE5cfEf84D562c6A;\n', '  address public constant cooWallet = 0xa2c59e6a91B4E502CF8C95A61F50D3aB1AB30cBA;\n', '  address public constant devWallet = 0x7D2ea29E2d4A95f4725f52B941c518C15eAE3c64;\n', '  // the rest token holder\n', '  address public constant poolWallet = 0x7e75fe6b73993D9Be9cb975364ec70Ee2C22c13A;\n', '\n', '  // mint configuration\n', '  uint256 public constant yearlyMintCap = (10*7) * 10*decimals; //10,000,000 tokens each year\n', '  uint16 public mintStartYear = 2019;\n', '  uint16 public mintEndYear = 2118;\n', '\n', '  mapping (uint16 => bool) minted;\n', '\n', '\n', '  constructor()\n', '    public\n', '  {\n', '    totalSupply_ = initialSupply.add(stageOneSupply).add(stageTwoSupply).add(stageThreeSupply);\n', '    uint256 oneBillion = (10**9) * 10**decimals;\n', '    uint256 oneHundredMillion = 100 * (10**6) * 10**decimals;\n', '    balances[appWallet] = oneBillion;\n', '    emit Transfer(address(0), appWallet, oneBillion);\n', '    balances[genWallet] = oneBillion;\n', '    emit Transfer(address(0), genWallet, oneBillion);\n', '    balances[ceoWallet] = oneHundredMillion;\n', '    emit Transfer(address(0), ceoWallet, oneHundredMillion);\n', '    balances[cooWallet] = oneHundredMillion;\n', '    emit Transfer(address(0), cooWallet, oneHundredMillion);\n', '    balances[devWallet] = oneHundredMillion;\n', '    emit Transfer(address(0), devWallet, oneHundredMillion);\n', '    balances[poolWallet] = initialSupply.sub(balances[appWallet])\n', '    .sub(balances[genWallet])\n', '    .sub(balances[ceoWallet])\n', '    .sub(balances[cooWallet])\n', '    .sub(balances[devWallet]);\n', '    emit Transfer(address(0), poolWallet, balances[poolWallet]);\n', '    balances[msg.sender] = stageOneSupply.add(stageTwoSupply).add(stageThreeSupply);\n', '    emit Transfer(address(0), msg.sender, balances[msg.sender]);\n', '  }\n', '\n', '  event Mint(address indexed to, uint256 amount);\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to\n', '  )\n', '    onlyOwner\n', '    external\n', '    returns (bool)\n', '  {\n', '    uint16 year = _getYear(now);\n', '    require (year >= mintStartYear && year <= mintEndYear && !minted[year]);\n', '    require (_to != address(0));\n', '\n', '    totalSupply_ = totalSupply_.add(yearlyMintCap);\n', '    balances[_to] = balances[_to].add(yearlyMintCap);\n', '    minted[year] = true;\n', '\n', '    emit Mint(_to, yearlyMintCap);\n', '    emit Transfer(address(0), _to, yearlyMintCap);\n', '    return true;\n', '  }\n', '\n', '  function _getYear(uint256 timestamp)\n', '    internal\n', '    pure\n', '    returns (uint16)\n', '  {\n', '    uint16 ORIGIN_YEAR = 1970;\n', '    uint256 YEAR_IN_SECONDS = 31536000;\n', '    uint256 LEAP_YEAR_IN_SECONDS = 31622400;\n', '\n', '    uint secondsAccountedFor = 0;\n', '    uint16 year;\n', '    uint numLeapYears;\n', '\n', '    // Year\n', '    year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\n', '    numLeapYears = _leapYearsBefore(year) - _leapYearsBefore(ORIGIN_YEAR);\n', '\n', '    secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\n', '    secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\n', '\n', '    while (secondsAccountedFor > timestamp) {\n', '      if (_isLeapYear(uint16(year - 1))) {\n', '        secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\n', '      }\n', '      else {\n', '        secondsAccountedFor -= YEAR_IN_SECONDS;\n', '      }\n', '      year -= 1;\n', '    }\n', '    return year;\n', '  }\n', '\n', '  function _isLeapYear(uint16 year)\n', '    internal\n', '    pure\n', '    returns (bool)\n', '  {\n', '    if (year % 4 != 0) {\n', '      return false;\n', '    }\n', '    if (year % 100 != 0) {\n', '      return true;\n', '    }\n', '    if (year % 400 != 0) {\n', '      return false;\n', '    }\n', '    return true;\n', '  }\n', '\n', '  function _leapYearsBefore(uint year)\n', '    internal\n', '    pure\n', '    returns (uint)\n', '  {\n', '    year -= 1;\n', '    return year / 4 - year / 100 + year / 400;\n', '  }\n', '\n', '}\n', 'contract PetCoinCrowdSale is Owned {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for PetCoin;\n', '\n', '  // Conversion rates\n', '  uint256 public stageOneRate = 4500; // 1 ETH = 4500 PETC\n', '  uint256 public stageTwoRate = 3000; // 1 ETH = 3000 PETC\n', '  uint256 public stageThreeRate = 2557; // 1 ETH = 2557 PETC\n', '\n', '  // The token being sold\n', '  PetCoin public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '\n', '  // Token Sale State Definitions\n', '  enum TokenSaleState { NOT_STARTED, STAGE_ONE, STAGE_TWO, STAGE_THREE, COMPLETED }\n', '\n', '  TokenSaleState public state;\n', '\n', '  struct Stage {\n', '    uint256 rate;\n', '    uint256 remaining;\n', '  }\n', '\n', '  // Enum as mapping key not supported by Solidity yet\n', '  mapping(uint256 => Stage) public stages;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(\n', '    address indexed purchaser,\n', '    uint256 value,\n', '    uint256 amount\n', '  );\n', '\n', '\n', '  /**\n', '   * Event for refund in case remaining tokens are not sufficient\n', '   * @param purchaser who paid for the tokens\n', '   * @param value weis refunded\n', '   */\n', '  event Refund(\n', '    address indexed purchaser,\n', '    uint256 value\n', '  );\n', '\n', '  /**\n', '   * Event for move stage\n', '   * @param oldState old state\n', '   * @param newState new state\n', '   */\n', '  event MoveStage(\n', '    TokenSaleState oldState,\n', '    TokenSaleState newState\n', '  );\n', '\n', '  /**\n', ' * Event for rates update\n', ' * @param who updated the rates\n', ' * @param stageOneRate new stageOneRate\n', ' * @param stageTwoRate new stageTwoRate\n', ' * @param stageThreeRate new stageThreeRate\n', ' */\n', '  event RatesUpdate(\n', '    address indexed who,\n', '    uint256 stageOneRate,\n', '    uint256 stageTwoRate,\n', '    uint256 stageThreeRate\n', '  );\n', '\n', '  /**\n', '   * @param _token Address of the token being sold\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   */\n', '  constructor(PetCoin _token, address _wallet)\n', '    public\n', '  {\n', '    require(_token != address(0));\n', '    require(_wallet != address(0));\n', '\n', '    token = _token;\n', '    wallet = _wallet;\n', '\n', '    state = TokenSaleState.NOT_STARTED;\n', '    stages[uint256(TokenSaleState.STAGE_ONE)] = Stage(stageOneRate, token.stageOneSupply());\n', '    stages[uint256(TokenSaleState.STAGE_TWO)] = Stage(stageTwoRate, token.stageTwoSupply());\n', '    stages[uint256(TokenSaleState.STAGE_THREE)] = Stage(stageThreeRate, token.stageThreeSupply());\n', '  }\n', '\n', '\n', '  // Modifiers\n', '  modifier notStarted() {\n', '    require (state == TokenSaleState.NOT_STARTED);\n', '    _;\n', '  }\n', '\n', '  modifier stageOne() {\n', '    require (state == TokenSaleState.STAGE_ONE);\n', '    _;\n', '  }\n', '\n', '  modifier stageTwo() {\n', '    require (state == TokenSaleState.STAGE_TWO);\n', '    _;\n', '  }\n', '\n', '  modifier stageThree() {\n', '    require (state == TokenSaleState.STAGE_THREE);\n', '    _;\n', '  }\n', '\n', '  modifier completed() {\n', '    require (state == TokenSaleState.COMPLETED);\n', '    _;\n', '  }\n', '\n', '  modifier saleInProgress() {\n', '    require (state == TokenSaleState.STAGE_ONE || state == TokenSaleState.STAGE_TWO || state == TokenSaleState.STAGE_THREE);\n', '    _;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  function kickoff()\n', '    external\n', '    onlyOwner\n', '    notStarted\n', '  {\n', '    _moveStage();\n', '  }\n', '\n', '\n', '  function updateRates(uint256 _stageOneRate, uint256 _stageTwoRate, uint256 _stageThreeRate)\n', '    external\n', '    onlyOwner\n', '  {\n', '    stageOneRate = _stageOneRate;\n', '    stageTwoRate = _stageTwoRate;\n', '    stageThreeRate = _stageThreeRate;\n', '    stages[uint256(TokenSaleState.STAGE_ONE)].rate = stageOneRate;\n', '    stages[uint256(TokenSaleState.STAGE_TWO)].rate = stageTwoRate;\n', '    stages[uint256(TokenSaleState.STAGE_THREE)].rate = stageThreeRate;\n', '    emit RatesUpdate(msg.sender, stageOneRate, stageTwoRate, stageThreeRate);\n', '  }\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function ()\n', '    external\n', '    payable\n', '    saleInProgress\n', '  {\n', '    require(stages[uint256(state)].rate > 0);\n', '    require(stages[uint256(state)].remaining > 0);\n', '    require(msg.value > 0);\n', '\n', '    uint256 weiAmount = msg.value;\n', '    uint256 refund = 0;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(stages[uint256(state)].rate);\n', '\n', '    if (tokens > stages[uint256(state)].remaining) {\n', '      // calculate wei needed to purchase the remaining tokens\n', '      tokens = stages[uint256(state)].remaining;\n', '      weiAmount = tokens.div(stages[uint256(state)].rate);\n', '      refund = msg.value - weiAmount;\n', '    }\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    emit TokenPurchase(\n', '      msg.sender,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '\n', '    // update remaining of the stage\n', '    stages[uint256(state)].remaining -= tokens;\n', '    assert(stages[uint256(state)].remaining >= 0);\n', '\n', '    if (stages[uint256(state)].remaining == 0) {\n', '      _moveStage();\n', '    }\n', '\n', '    // transfer tokens to buyer\n', '    token.safeTransfer(msg.sender, tokens);\n', '\n', '    // forward ETH to the wallet\n', '    _forwardFunds(weiAmount);\n', '\n', '    if (refund > 0) { // refund the purchaser if required\n', '      msg.sender.transfer(refund);\n', '      emit Refund(\n', '        msg.sender,\n', '        refund\n', '      );\n', '    }\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  function _moveStage()\n', '    internal\n', '  {\n', '    TokenSaleState oldState = state;\n', '    if (state == TokenSaleState.NOT_STARTED) {\n', '      state = TokenSaleState.STAGE_ONE;\n', '    } else if (state == TokenSaleState.STAGE_ONE) {\n', '      state = TokenSaleState.STAGE_TWO;\n', '    } else if (state == TokenSaleState.STAGE_TWO) {\n', '      state = TokenSaleState.STAGE_THREE;\n', '    } else if (state == TokenSaleState.STAGE_THREE) {\n', '      state = TokenSaleState.COMPLETED;\n', '    }\n', '    emit MoveStage(oldState, state);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds(uint256 weiAmount) internal {\n', '    wallet.transfer(weiAmount);\n', '  }\n', '}']
