['pragma solidity ^0.4.24;\n', '\n', 'interface Token {\n', '    function transfer(address _to, uint256 _value) external;\n', '}\n', '\n', 'contract TBECrowdsale {\n', '    \n', '    Token public tokenReward;\n', '    uint256 public price;\n', '    address public creator;\n', '    address public owner = 0x700635ad386228dEBCfBb5705d2207F529af8323;\n', '    uint256 public startDate;\n', '    uint256 public endDate;\n', '    \n', '\n', '    mapping (address => bool) public tokenAddress;\n', '    mapping (address => uint256) public balanceOfEther;\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    modifier isCreator() {\n', '        require(msg.sender == creator);\n', '        _;\n', '    }\n', '\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '\n', '    function TBECrowdsale() public {\n', '        creator = msg.sender;\n', '        price = 100;\n', '        startDate = now;\n', '        endDate = startDate + 3 days;\n', '        tokenReward = Token(0xf18b97b312EF48C5d2b5C21c739d499B7c65Cf96);\n', '    }\n', '\n', '\n', '\n', '    function setOwner(address _owner) isCreator public {\n', '        owner = _owner;      \n', '    }\n', '\n', '    function setStartDate(uint256 _startDate) isCreator public {\n', '        startDate = _startDate;      \n', '    }\n', '\n', '    function setEndtDate(uint256 _endDate) isCreator public {\n', '        endDate = _endDate;      \n', '    }\n', '    \n', '   function setPrice(uint256 _price) isCreator public {\n', '        price = _price;      \n', '    }\n', '    \n', '    function setToken(address _token) isCreator public {\n', '        tokenReward = Token(_token);      \n', '    }\n', '\n', '    function sendToken(address _to, uint256 _value) isCreator public {\n', '        tokenReward.transfer(_to, _value);      \n', '    }\n', '\n', '    \n', '    function () payable public {\n', '        require(now > startDate);\n', '        require(now < endDate);\n', '        \n', '        \n', '        uint256 amount = price;\n', '\n', '       \n', '        balanceOfEther[msg.sender] += msg.value / 1 ether;\n', '        tokenReward.transfer(msg.sender, amount);\n', '        FundTransfer(msg.sender, amount, true);\n', '        owner.transfer(msg.value);\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'interface Token {\n', '    function transfer(address _to, uint256 _value) external;\n', '}\n', '\n', 'contract TBECrowdsale {\n', '    \n', '    Token public tokenReward;\n', '    uint256 public price;\n', '    address public creator;\n', '    address public owner = 0x700635ad386228dEBCfBb5705d2207F529af8323;\n', '    uint256 public startDate;\n', '    uint256 public endDate;\n', '    \n', '\n', '    mapping (address => bool) public tokenAddress;\n', '    mapping (address => uint256) public balanceOfEther;\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    modifier isCreator() {\n', '        require(msg.sender == creator);\n', '        _;\n', '    }\n', '\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '\n', '    function TBECrowdsale() public {\n', '        creator = msg.sender;\n', '        price = 100;\n', '        startDate = now;\n', '        endDate = startDate + 3 days;\n', '        tokenReward = Token(0xf18b97b312EF48C5d2b5C21c739d499B7c65Cf96);\n', '    }\n', '\n', '\n', '\n', '    function setOwner(address _owner) isCreator public {\n', '        owner = _owner;      \n', '    }\n', '\n', '    function setStartDate(uint256 _startDate) isCreator public {\n', '        startDate = _startDate;      \n', '    }\n', '\n', '    function setEndtDate(uint256 _endDate) isCreator public {\n', '        endDate = _endDate;      \n', '    }\n', '    \n', '   function setPrice(uint256 _price) isCreator public {\n', '        price = _price;      \n', '    }\n', '    \n', '    function setToken(address _token) isCreator public {\n', '        tokenReward = Token(_token);      \n', '    }\n', '\n', '    function sendToken(address _to, uint256 _value) isCreator public {\n', '        tokenReward.transfer(_to, _value);      \n', '    }\n', '\n', '    \n', '    function () payable public {\n', '        require(now > startDate);\n', '        require(now < endDate);\n', '        \n', '        \n', '        uint256 amount = price;\n', '\n', '       \n', '        balanceOfEther[msg.sender] += msg.value / 1 ether;\n', '        tokenReward.transfer(msg.sender, amount);\n', '        FundTransfer(msg.sender, amount, true);\n', '        owner.transfer(msg.value);\n', '    }\n', '}']
