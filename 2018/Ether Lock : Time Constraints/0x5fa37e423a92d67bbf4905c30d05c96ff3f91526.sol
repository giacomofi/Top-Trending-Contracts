['pragma solidity ^0.4.15;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    \n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  \n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'interface token {\n', '  function mint(address _to, uint256 _amount) external;\n', '  function balanceOf(address _owner) external returns (uint256);\n', '}\n', '\n', 'contract Crowdsale is Ownable {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    address multisig;\n', '    address marketing;\n', '\n', '    uint256 restrictedPercent;\n', '\n', '    address restricted;\n', '\n', '    uint256 minBuy;\n', '    uint256 maxOwnerHas;\n', '\n', '    token public tokenReward;\n', '\n', '    uint256 rate;\n', '    \n', '    uint256 startPrivateSale;\n', '    uint256 endPrivateSale;\n', '    uint256 startPreICO;\n', '    uint256 endPreICO;\n', '    uint256 startICO;\n', '    uint256 endICO;\n', '\n', '    constructor() public {\n', '      multisig = owner;\n', '      marketing = 0x4000ED538DB994ae3d502b0CeF54ca6871550d12;\n', '      restricted = owner;\n', '      restrictedPercent = 25;\n', '      rate = 2500;\n', '      minBuy = 100 * 1 ether;\n', '      maxOwnerHas = 30937500 * 1 ether;\n', '      tokenReward = token(0x586effe896ec06f4a5b5bac7f04b84a6f737bad1);\n', '\n', '      startPrivateSale = now;\n', '      endPrivateSale = now + 25 * 1 minutes;  // 1536624000; // (2018-09-11 00:00:00)\n', '      startPreICO = now + 30 * 1 minutes;     // 1539129600; // (2018-10-10 00:00:00)\n', '      endPreICO = now + 55 * 1 minutes;       // 1541894400; // (2018-11-11 00:00:00)\n', '      startICO = now + 60 * 1 minutes;        // 1543622400; // (2018-12-01 00:00:00)\n', '      endICO = now + 90 * 1 minutes;          // 1545436800; // (2018-12-22 00:00:00)\n', '    }\n', '\n', '    modifier saleIsOn() {\n', '      require(now > startPrivateSale && now < endICO);\n', '      _;\n', '    }\n', '    \n', '    function init() saleIsOn public {\n', '        tokenReward.mint(owner, 1000000 * 1 ether);\n', '    }\n', '\n', '   function createTokens() saleIsOn public payable {\n', '        uint256 tokens = rate.mul(msg.value);\n', '        uint256 bonusTokens = 0;\n', '        uint256 period = 0;\n', '\n', '        require(tokens >= minBuy);\n', '        uint256 tokensTotal = tokens.add(tokenReward.balanceOf(msg.sender));\n', '        require(tokensTotal <= maxOwnerHas);\n', '\n', '        multisig.transfer(msg.value.div(2));\n', '        marketing.transfer(msg.value.div(2));\n', '        \n', '        // bonus for private sales\n', '        if (now > startPrivateSale && now < endPrivateSale) {\n', '            if (msg.value > 160 * 1 ether) {\n', '                bonusTokens = tokens.div(100).mul(35); // 35/100 = 35%\n', '            } else if (msg.value > 245 * 1 ether) {\n', '                bonusTokens = tokens.div(10).mul(4); // 4/10 = 40/100 = 40%\n', '            } else if (msg.value > 160 * 1 ether) {\n', '                bonusTokens = tokens.div(2); // 1/2 = 50%\n', '            }\n', '        }\n', '        // bonuses for pre-ICO\n', '        if (now > startPreICO && now < endPreICO) {\n', '            period = endPreICO - startPreICO;\n', '            if (now < startPreICO + period.div(4)) {\n', '              bonusTokens = tokens.div(10).mul(3); // 3/10 = 30/100 = 30%\n', '            } else if(now >= startPreICO + period.div(4) && now < startPreICO + period.div(4).mul(2)) {\n', '              bonusTokens = tokens.div(4); // 1/4 = 25/100 = 25%\n', '            } else if(now >= startPreICO + period.div(4).mul(2) && now < startPreICO + period.div(4).mul(3)) {\n', '              bonusTokens = tokens.div(5); // 1/5 = 20/100 = 20%\n', '            } else if(now >= startPreICO + (period * 1 days).div(4).mul(3)) {\n', '                bonusTokens = tokens.div(100).mul(15); // 15/100 = 15%\n', '            }\n', '        }\n', '        // bonuses for ICO\n', '        if (now > startICO && now < endICO) {\n', '            period = endICO - startICO;\n', '            if (now < startICO + (period * 1 days).div(3)) {\n', '              bonusTokens = tokens.div(10); // 1/10 = 10/100 = 10%\n', '            } else if(now >= startICO + (period * 1 days).div(3) && now < startICO + (period * 1 days).div(3).mul(2)) {\n', '              bonusTokens = tokens.div(1000).mul(75); // 75/1000 = 7.5/100 =7.5%\n', '            } else if(now >= startICO + (period * 1 days).div(3).mul(2)) {\n', '              bonusTokens = tokens.div(20); // 1/20 = 5/100 = 5%\n', '            }\n', '        }\n', '        tokens = tokens.add(bonusTokens);\n', '        tokenReward.mint(msg.sender, tokens);\n', '\n', '        uint256 restrictedTokens = tokens.mul(restrictedPercent).div(100 - restrictedPercent);\n', '        tokenReward.mint(restricted, restrictedTokens);\n', '    }\n', '\n', '    function() external payable {\n', '        createTokens();\n', '    }\n', '}']