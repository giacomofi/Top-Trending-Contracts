['pragma solidity ^0.4.24;\n', '\n', 'contract INotInitedOwnable {\n', '    \n', '    function init() public;\n', '    \n', '    function transferOwnership(address newOwner) public;\n', '}\n', '\n', 'contract IOwnableUpgradeableImplementation is INotInitedOwnable {\n', '    \n', '    function transferOwnership(address newOwner) public;\n', '    \n', '    function getOwner() constant public returns(address);\n', '    \n', '    function upgradeImplementation(address _newImpl) public;\n', '    \n', '    function getImplementation() constant public returns(address);\n', '}\n', '\n', 'contract IHookOperator is IOwnableUpgradeableImplementation {\n', '\n', '    event LogSetBalancePercentageLimit(uint256 limit);\n', '    event LogSetOverBalanceLimitHolder(address holderAddress, bool isHolder);\n', '    event LogSetUserManager(address userManagerAddress);\n', '    event LogSetICOToken(address icoTokenAddress);\n', '\n', '    event LogOnTransfer(address from, address to, uint tokens);\n', '    event LogOnMint(address to, uint256 amount);\n', '    event LogOnBurn(uint amount);\n', '    event LogOnTaxTransfer(address indexed taxableUser, uint tokensAmount);\n', '\n', '    event LogSetKYCVerificationContract(address _kycVerificationContractAddress);\n', '    event LogUpdateUserRatio(uint256 generationRatio, address indexed userContractAddress);\n', '\n', '    /**\n', '        Setters\n', '    */\n', '    function setBalancePercentageLimit(uint256 limit) public;\n', '    function getBalancePercentageLimit() public view returns(uint256);\n', '    \n', '    function setOverBalanceLimitHolder(address holderAddress, bool isHolder) public;\n', '\n', '    function setUserManager(address userManagerAddress) public;\n', '    function getUserManager() public view returns(address userManagerAddress);\n', '   \n', '    function setICOToken(address icoTokenAddress) public;\n', '    function getICOToken() public view returns(address icoTokenAddress);\n', '\n', '    /**\n', '        Main Functions\n', '    */\n', '    function onTransfer(address from, address to, uint256 tokensAmount) public;\n', '\n', '    function onMint(address to, uint256 tokensAmount) public;\n', '\n', '    function onBurn(uint256 amount) public;\n', '\n', '    function onTaxTransfer(address taxableUser, uint256 tokensAmount) public;\n', '\n', '    /**\n', '        KYC Verification\n', '    */\n', '    function kycVerification(address from, address to, uint256 tokensAmount) public;\n', '\n', '    function setKYCVerificationContract(address _kycVerificationContractAddress) public;\n', '\n', '    function getKYCVerificationContractAddress() public view returns(address _kycVerificationContractAddress);\n', '    \n', '    /**\n', '        Helper functions\n', '    */\n', '    function updateUserRatio(uint256 generationRatio, address userContractAddress) public;\n', '\n', '    function isOverBalanceLimitHolder(address holderAddress) public view returns(bool);\n', '\n', '    function isInBalanceLimit(address userAddress, uint256 tokensAmount) public view returns(bool);\n', '}\n', '\n', 'contract IUserContract {\n', '    event LogNewExchangeUserCreate(uint256 _KYCStatus);\n', '    event LogNewUserCreate(uint256 _KYCStatus);\n', '    \n', '    event LogGenerationRatioUpdate(uint256 _generationRatio);\n', '    event LogKYCStatusUpdate(uint256 _KYCStatus);\n', '    event LogLastTransactionTimeUpdate(uint256 _lastTransactionTime);\n', '    event LogUserPolicyUpdate(bool _termsAndConditions, bool _AML, bool _constitution, bool _CLA);\n', '\n', '    event LogAsFounderMark();\n', '    event LogUserBlacklistedStatusSet(bool _blacklistedStatus);\n', '    event LogUserBan();\n', '\n', '    event LogDailyTransactionVolumeSendingIncrease(uint256 _currentDay, uint256 _transactionVolume);\n', '    event LogDailyTransactionVolumeReceivingIncrease(uint256 _currentDay, uint256 _transactionVolume);\n', '\n', '    event LogWeeklyTransactionVolumeSendingIncrease(uint256 _currentWeek, uint256 _transactionVolume);\n', '    event LogWeeklyTransactionVolumeReceivingIncrease(uint256 _currentWeek, uint256 _transactionVolume);\n', '    \n', '    event LogMonthlyTransactionVolumeSendingIncrease(uint256 _currentMonth, uint256 _transactionVolume);\n', '    event LogMonthlyTransactionVolumeReceivingIncrease(uint256 _currentMonth, uint256 _transactionVolume);\n', '\n', '    /**\n', '        Main Functions\n', '    */\n', '    function initExchangeUser(uint256 _KYCStatus) external;\n', '\n', '    function initKYCUser(uint256 _KYCStatus) external;\n', '\n', '    function initUser(uint256 _KYCStatus) internal;\n', '\n', '    function isValidUser() external view returns(bool);\n', '\n', '    function getUserData() external view returns\n', '    (\n', '        uint256 _generationRatio, \n', '        uint256 _KYCStatus, \n', '        uint256 _lastTransactionTime, \n', '        bool _isBlacklistedUser,\n', '        bool _termsAndConditionsAcceptance,\n', '        bool _AMLAcceptance,\n', '        bool _constitutionSign,\n', '        bool _commonLicenseAgreementSign,\n', '        bool _isFounder\n', '    ); \n', '\n', '    function isExchangeUser() public view returns(bool);\n', '\n', '    function updateUserPolicy(bool _termsAndConditions, bool _AML, bool _constitution, bool _CLA) external;\n', '\n', '    function isUserPolicyAccepted() public view returns(bool);\n', '\n', '    function updateGenerationRatio(uint256 _generationRatio) external;\n', '    \n', '    function updateKYCStatus(uint256 _newKYCStatus) external;\n', '\n', '    function updateLastTransactionTime(uint256 _lastTransactionTime) external;\n', '\n', '    /**\n', '        Founder - User\n', '    */\n', '    function markAsFounder() external;\n', '\n', '    function isFounderUser() external view returns(bool);\n', '\n', '    /**\n', '        Blacklisted - User\n', '    */\n', '    function setUserBlacklistedStatus(bool _shouldBeBlacklisted) external;\n', '\n', '    function isUserBlacklisted() external view returns(bool _isBlacklisted);\n', '    /**\n', '        Banned - User\n', '    */\n', '    function banUser() external;\n', '\n', '    function isUserBanned() external view returns(bool _isBanned);\n', '\n', '    /**\n', '        Daily transaction volume\n', '    */\n', '    function increaseDailyTransactionVolumeSending(uint256 _transactionVolume) external;\n', '\n', '    function getDailyTransactionVolumeSending() external view returns(uint256 _dailyTransactionVolume);\n', '\n', '    /**\n', '        Daily transaction volume - Receiving\n', '    */\n', '    function increaseDailyTransactionVolumeReceiving(uint256 _transactionVolume) external;\n', '\n', '    function getDailyTransactionVolumeReceiving() external view returns(uint256 _dailyTransactionVolume);\n', '\n', '    /**\n', '        Weekly transaction volume\n', '    */\n', '    function increaseWeeklyTransactionVolumeSending(uint256 _transactionVolume) external;\n', '\n', '    function getWeeklyTransactionVolumeSending() external view returns(uint256 _weeklyTransactionVolume);\n', '\n', '    /**\n', '        Weekly transaction volume - Receiving\n', '    */\n', '    function increaseWeeklyTransactionVolumeReceiving(uint256 _transactionVolume) external;\n', '\n', '    function getWeeklyTransactionVolumeReceiving() external view returns(uint256 _weeklyTransactionVolume);\n', '\n', '    /**\n', '        Monthly transaction volume\n', '    */\n', '    function increaseMonthlyTransactionVolumeSending(uint256 _transactionVolume) external;\n', '\n', '    function getMonthlyTransactionVolumeSending() external view returns(uint256 _monthlyTransactionVolume);\n', '\n', '    /**\n', '        Monthly transaction volume - Receiving\n', '    */\n', '    function increaseMonthlyTransactionVolumeReceiving(uint256 _transactionVolume) external;\n', '\n', '    function getMonthlyTransactionVolumeReceiving() external view returns(uint256 _monthlyTransactionVolume);\n', '}\n', '\n', 'contract IUserManager is IOwnableUpgradeableImplementation {\n', '    event LogSetDataContract(address _dataContractAddress);\n', '    event LogSetTaxPercentage(uint256 _taxPercentage);\n', '    event LogSetTaxationPeriod(uint256 _taxationPeriod);\n', '\n', '    event LogSetUserFactoryContract(address _userFactoryContract);\n', '    event LogSetHookOperatorContract(address _HookOperatorContract);\n', '\n', '    event LogUpdateGenerationRatio(uint256 _generationRatio, address userContractAddress);\n', '    event LogUpdateLastTransactionTime(address _userAddress);\n', '\n', '    event LogUserAsFounderMark(address userAddress);\n', '\n', '    /**\n', '        Data Contract\n', '    */\n', '    function setDataContract(address _dataContractAddress) public;\n', '\n', '    function getDataContractAddress() public view returns(address _dataContractAddress);\n', '\n', '    function setTaxPercentage(uint256 _taxPercentage) public;\n', '\n', '    function setTaxationPeriod(uint256 _taxationPeriod) public;\n', '\n', '    /**\n', '        User Factory\n', '    */\n', '    function setUserFactoryContract(address _userFactoryContract) public;\n', '\n', '    function getUserFactoryContractAddress() public view returns(address _userFactoryContractAddress);\n', '    /**\n', '        Hook Operator\n', '    */\n', '    function setHookOperatorContract(address _HookOperatorContract) public;\n', '\n', '    function getHookOperatorContractAddress() public view returns(address _HookOperatorContractAddress);\n', '    \n', '    /**\n', '        Users Functions\n', '    */\n', '\n', '    function isUserKYCVerified(address _userAddress) public view returns(uint256 KYCStatus);\n', '\n', '    function isBlacklisted(address _userAddress) public view returns(bool _isBlacklisted);\n', '\n', '    function isBannedUser(address userAddress) public view returns(bool _isBannedUser);\n', '\n', '    function updateGenerationRatio(uint256 _generationRatio, address userContractAddress) public;\n', '\n', '    function updateLastTransactionTime(address _userAddress) public;\n', '\n', '    function getUserContractAddress(address _userAddress) public view returns(IUserContract _userContract);\n', '\n', '    function isValidUser(address userAddress) public view returns(bool);\n', '\n', '    function setCrowdsaleContract(address crowdsaleInstance) external;\n', '\n', '    function getCrowdsaleContract() external view returns(address);\n', '\n', '    function markUserAsFounder(address userAddress) external;\n', '}\n', '\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '\n', '}\n', '\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedCrowdsale(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  // overriding Crowdsale#validPurchase to add extra cap logic\n', '  // @return true if investors can buy at the moment\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinCap = weiRaised.add(msg.value) <= cap;\n', '    return super.validPurchase() && withinCap;\n', '  }\n', '\n', '  // overriding Crowdsale#hasEnded to add cap logic\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    return super.hasEnded() || capReached;\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract RefundVault is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    /* \n', '        To cover the costs for paying investor related functions by ourself as: \n', '            "add investor in the whitelist" and etc.\n', '\n', '        We are getting 3% of the investor&#39;s deposit only if the soft cap\n', '        is not reached and the investor refund his contribution\n', '    */\n', '    uint256 public constant DEDUCTION = 3;\n', '    uint256 public totalDeductedValue;\n', '\n', '    enum State { Active, Refunding, Closed }\n', '\n', '    mapping (address => uint256) public deposited;\n', '    address public wallet;\n', '    State public state;\n', '\n', '    event Closed();\n', '    event RefundsEnabled();\n', '    event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '    constructor(address _wallet) public {\n', '        require(_wallet != address(0));\n', '        \n', '        wallet = _wallet;\n', '        state = State.Active;\n', '    }\n', '\n', '    function deposit(address investor) onlyOwner external payable {\n', '        require(state == State.Active);\n', '\n', '        deposited[investor] = deposited[investor].add(msg.value);\n', '    }\n', '\n', '    function close() onlyOwner external {\n', '        require(state == State.Active);\n', '        \n', '        state = State.Closed;\n', '        emit Closed();\n', '        wallet.transfer(address(this).balance);\n', '    }\n', '\n', '    function enableRefunds() external onlyOwner {\n', '        require(state == State.Active);\n', '\n', '        state = State.Refunding;\n', '        emit RefundsEnabled();\n', '    }\n', '\n', '    function refund(address investor) external {\n', '        require(state == State.Refunding);\n', '\n', '        uint256 depositedValue = deposited[investor];\n', '        uint256 deductedValue = depositedValue.mul(DEDUCTION).div(100);\n', '        \n', '        deposited[investor] = 0;\n', '\n', '        wallet.transfer(deductedValue);\n', '        investor.transfer(depositedValue.sub(deductedValue));\n', '        \n', '        totalDeductedValue = totalDeductedValue.add(deductedValue);\n', '\n', '        emit Refunded(investor, depositedValue);\n', '    }\n', '}\n', '\n', 'contract WhitelistedCrowdsale is Ownable {\n', '\n', '    /*\n', '        We need a count limit for the users array, \n', '        which is passed to setMultiple functions\n', '\n', '        Without the limit, the set could be so big that the transaction required gas is over the block maximum gas\n', '        The count is calculated on:\n', '            How much gas it costs to process one user\n', '            The maximum gas is 5 000 000\n', '    */\n', '    uint public constant MAX_INPUT_USERS_COUNT = 200;\n', '\n', '    mapping(address => uint) public preSalesSpecialUsers;\n', '\n', '    mapping(address => bool) public publicSalesSpecialUsers;\n', '\n', '    address public lister;\n', '\n', '    event LogPresalesSpecialUserSet(address userAddress, uint userRate);\n', '    event LogMultiplePresalesSpecialUsersSet(address[] userAddresses, uint userRate);\n', '    event LogPublicsalesSpecialUserAdd(address addedUser);\n', '    event LogMultiplePublicsalesSpecialUsersSet(address[] userAddresses);\n', '    event LogPublicsalesSpecialUserRemove(address removedUser);\n', '    event LogListerSet(address listerAddress);\n', '\n', '    modifier onlyLister() {\n', '        require(msg.sender == lister);\n', '        \n', '        _;\n', '    }\n', '\n', '    modifier notZeroAddress(address addressForValidation) {\n', '        require(addressForValidation != address(0));\n', '\n', '        _;\n', '    }\n', '\n', '    function setPreSalesSpecialUser(address user, uint userRate) external onlyLister notZeroAddress(user) {\n', '        preSalesSpecialUsers[user] = userRate;\n', '\n', '        emit LogPresalesSpecialUserSet(user, userRate);\n', '    }\n', '\n', '    function setMultiplePreSalesSpecialUsers(address[] users, uint userRate) external onlyLister {\n', '        require(users.length <= MAX_INPUT_USERS_COUNT);\n', '\n', '        for(uint i = 0; i < users.length; i++) { \n', '            preSalesSpecialUsers[users[i]] = userRate;\n', '        }\n', '\n', '        emit LogMultiplePresalesSpecialUsersSet(users, userRate);\n', '    }\n', '\n', '    function addPublicSalesSpecialUser(address user) external onlyLister notZeroAddress(user) {\n', '        publicSalesSpecialUsers[user] = true;\n', '\n', '        emit LogPublicsalesSpecialUserAdd(user);\n', '    }\n', '\n', '    function addMultiplePublicSalesSpecialUser(address[] users) external onlyLister {\n', '        require(users.length <= MAX_INPUT_USERS_COUNT);\n', '\n', '        for(uint i = 0; i < users.length; i++) { \n', '            publicSalesSpecialUsers[users[i]] = true;\n', '        }\n', '\n', '        emit LogMultiplePublicsalesSpecialUsersSet(users);\n', '    }\n', '\n', '    function removePublicSalesSpecialUser(address user) external onlyLister notZeroAddress(user) {\n', '        publicSalesSpecialUsers[user] = false;\n', '\n', '        emit LogPublicsalesSpecialUserRemove(user);\n', '    }\n', '\n', '    function setLister(address newLister) external onlyOwner notZeroAddress(newLister) {\n', '        lister = newLister;\n', '\n', '        emit LogListerSet(newLister);\n', '    }\n', '}\n', '\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', '   * work. Calls the contract&#39;s finalization function.\n', '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '}\n', '\n', 'contract RefundableCrowdsale is FinalizableCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public goal;\n', '\n', '    RefundVault public vault;\n', '\n', '    constructor(uint256 _goal) public {\n', '        require(_goal > 0);\n', '        vault = new RefundVault(wallet);\n', '        goal = _goal;\n', '    }\n', '\n', '    function forwardFunds() internal {\n', '        vault.deposit.value(msg.value)(msg.sender);\n', '    }\n', '\n', '    function claimRefund() external {\n', '        require(isFinalized);\n', '        require(!goalReached());\n', '\n', '        vault.refund(msg.sender);\n', '    }\n', '\n', '    function finalization() internal {\n', '        if (goalReached()) {\n', '            vault.close();\n', '        } else {\n', '            vault.enableRefunds();\n', '        }\n', '\n', '        super.finalization();\n', '    }\n', '\n', '    function goalReached() public view returns (bool) {\n', '        return weiRaised >= goal;\n', '    }\n', '}\n', '\n', 'contract ICOCrowdsale is Ownable, FinalizableCrowdsale, WhitelistedCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    IUserManager public userManagerContract;\n', '\n', '    uint256 public preSalesEndDate;\n', '    uint256 public totalMintedBountyTokens;\n', '    bool public isPresalesNotEndedInAdvance = true;\n', '\n', '    uint256 public constant MIN_CONTRIBUTION_AMOUNT = 50 finney; // 0.05 ETH\n', '    uint256 public constant MAX_BOUNTYTOKENS_AMOUNT = 100000 * (10**18); // 100 000 tokens\n', '    uint256 public constant MAX_FUNDS_RAISED_DURING_PRESALE = 20000 ether;\n', '    \n', '    /*\n', '        The limit below allows a user to have maximum tokens balance of 2%(400 000 tokens) of the hard cap(167 000 ethers)\n', '        It only applies through crowdsale period\n', '    */\n', '    uint256 public constant MAX_USER_TOKENS_BALANCE = 400000 * (10**18); // 400 000 tokens\n', '\n', '    // 0.01 eth = 1 token\n', '    uint256 public constant REGULAR_RATE = 100;\n', '    uint256 public constant PUBLIC_SALES_SPECIAL_USERS_RATE = 120; // 20% bonus\n', '\n', '    uint256 public constant DEFAULT_PRESALES_DURATION = 7 weeks;\n', '    uint256 public constant MAX_PRESALES_EXTENSION= 12 weeks;\n', '\n', '    /*\n', '        The public sales periods ends:\n', '            PUBLIC_SALES_1_PERIOD_END = 1 weeks / Public sales 1 period starts from private sales period and expires one week after the private sales end\n', '            PUBLIC_SALES_2_PERIOD_END = 2 weeks / Public sales 2 period starts from public sales 1 period and expires on the 2-nd week after the private sales end\n', '            PUBLIC_SALES_3_PERIOD_END = 3 weeks / Public sales 3 period starts from public sales 2 period and expires on the 3-th week after the private sales end\n', '    */\n', '    uint256 public constant PUBLIC_SALES_1_PERIOD_END = 1 weeks;\n', '    uint256 public constant PUBLIC_SALES_2_PERIOD_END = 2 weeks;\n', '    uint256 public constant PUBLIC_SALES_3_PERIOD_END = 3 weeks;\n', '\n', '    uint256 public constant PUBLIC_SALES_1_RATE = 115; // 15% bonus\n', '    uint256 public constant PUBLIC_SALES_2_RATE = 110; // 10% bonus\n', '    uint256 public constant PUBLIC_SALES_3_RATE = 105; // 5% bonus\n', '\n', '    event LogBountyTokenMinted(address minter, address beneficiary, uint256 amount);\n', '    event LogPrivatesaleExtend(uint extensionTime);\n', '\n', '    constructor(uint256 startTime, uint256 endTime, address wallet, address hookOperatorAddress) public\n', '        FinalizableCrowdsale()\n', '        Crowdsale(startTime, endTime, REGULAR_RATE, wallet)\n', '    {\n', '        // Set default presales end date\n', '        preSalesEndDate = startTime.add(DEFAULT_PRESALES_DURATION);\n', '        \n', '\n', '        ICOTokenExtended icoToken = ICOTokenExtended(token);\n', '        icoToken.setHookOperator(hookOperatorAddress);\n', '    }\n', '\n', '    function createTokenContract() internal returns (MintableToken) {\n', '\n', '        ICOTokenExtended icoToken = new ICOTokenExtended();\n', '\n', '        icoToken.pause();\n', '\n', '        return icoToken;\n', '    }\n', '\n', '    function finalization() internal {\n', '        super.finalization();\n', '\n', '        ICOTokenExtended icoToken = ICOTokenExtended(token);\n', '\n', '        icoToken.transferOwnership(owner);\n', '    }\n', '\n', '    // The extensionTime is in seconds\n', '    function extendPreSalesPeriodWith(uint extensionTime) public onlyOwner {\n', '        require(extensionTime <= MAX_PRESALES_EXTENSION);\n', '        \n', '        preSalesEndDate = preSalesEndDate.add(extensionTime);\n', '        endTime = endTime.add(extensionTime);\n', '\n', '        emit LogPrivatesaleExtend(extensionTime);\n', '    }\n', '\n', '    function buyTokens(address beneficiary) public payable {\n', '        require(msg.value >= MIN_CONTRIBUTION_AMOUNT);\n', '        require(beneficiary != address(0));\n', '        require(validPurchase());\n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = getTokenAmount(weiAmount, beneficiary);\n', '\n', '        // Check for maximum user&#39;s tokens amount overflow\n', '        uint256 beneficiaryBalance = token.balanceOf(beneficiary);\n', '        require(beneficiaryBalance.add(tokens) <= MAX_USER_TOKENS_BALANCE);\n', '\n', '        // // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        if(weiRaised >= MAX_FUNDS_RAISED_DURING_PRESALE && isPresalesNotEndedInAdvance){\n', '            preSalesEndDate = now;\n', '            isPresalesNotEndedInAdvance = false;\n', '        }\n', '\n', '        token.mint(beneficiary, tokens);\n', '\n', '        userManagerContract.markUserAsFounder(beneficiary);\n', '\n', '        emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '        forwardFunds();\n', '    }\n', '\n', '    function getTokenAmount(uint256 weiAmount, address beneficiaryAddress) internal view returns(uint256 tokenAmount) {\n', '        uint256 crowdsaleRate = getRate(beneficiaryAddress);\n', '\n', '        return weiAmount.mul(crowdsaleRate);\n', '    }\n', '\n', '    function getRate(address beneficiary) internal view returns(uint256) {\n', '\n', '        if(now <= preSalesEndDate && weiRaised < MAX_FUNDS_RAISED_DURING_PRESALE){\n', '            if(preSalesSpecialUsers[beneficiary] > 0){\n', '                return preSalesSpecialUsers[beneficiary];\n', '            }\n', '\n', '            return REGULAR_RATE;\n', '        }\n', '\n', '        if(publicSalesSpecialUsers[beneficiary]){\n', '            return PUBLIC_SALES_SPECIAL_USERS_RATE;\n', '        }\n', '\n', '        if(now <= preSalesEndDate.add(PUBLIC_SALES_1_PERIOD_END)) {\n', '            return PUBLIC_SALES_1_RATE;\n', '        }\n', '\n', '        if(now <= preSalesEndDate.add(PUBLIC_SALES_2_PERIOD_END)) {\n', '            return PUBLIC_SALES_2_RATE;\n', '        }\n', '\n', '        if(now <= preSalesEndDate.add(PUBLIC_SALES_3_PERIOD_END)) {\n', '            return PUBLIC_SALES_3_RATE;\n', '        }\n', '\n', '        return REGULAR_RATE;\n', '    }\n', '\n', '    function createBountyToken(address beneficiary, uint256 amount) public onlyOwner returns(bool) {\n', '        require(!hasEnded());\n', '        require(totalMintedBountyTokens.add(amount) <= MAX_BOUNTYTOKENS_AMOUNT);\n', '\n', '        totalMintedBountyTokens = totalMintedBountyTokens.add(amount);\n', '        token.mint(beneficiary, amount);\n', '        emit LogBountyTokenMinted(msg.sender, beneficiary, amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function setUserManagerContract(address userManagerInstance) public onlyOwner {\n', '        require(userManagerInstance != address(0));\n', '\n', '        userManagerContract = IUserManager(userManagerInstance);\n', '    }\n', '}\n', '\n', 'contract ICOCappedRefundableCrowdsale is CappedCrowdsale, ICOCrowdsale, RefundableCrowdsale {\n', '\n', '    constructor(uint256 startTime, uint256 endTime, uint256 hardCap, uint256 softCap, address wallet, address HookOperatorContractAddress) public\n', '        FinalizableCrowdsale()\n', '        ICOCrowdsale(startTime, endTime, wallet, HookOperatorContractAddress)\n', '        CappedCrowdsale(hardCap)\n', '        RefundableCrowdsale(softCap)\n', '    {\n', '        require(softCap <= hardCap);\n', '    }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract ExchangeOracle is Ownable, Pausable {\n', '\n', '    using SafeMath for uint;\n', '\n', '    bool public isIrisOracle = true;\n', '\n', '    uint public rate = 0;\n', '    uint public minWeiAmount = 1000; \n', '\n', '    event LogRateChanged(uint oldRate, uint newRate, address changer);\n', '    event LogMinWeiAmountChanged(uint oldMinWeiAmount, uint newMinWeiAmount, address changer);\n', '\n', '    constructor(uint initialRate) public {\n', '        require(initialRate > 0);\n', '        rate = initialRate;\n', '    }\n', '\n', '    function rate() external view whenNotPaused returns(uint) {\n', '        return rate;\n', '    }\n', '\n', '    /*\n', '        The new rate has to be passed in format:\n', '            100 rate = 100 000 passed rate ( 1 ether = 100 tokens )\n', '            1 rate = 1 000 passed rate ( 1 ether = 1 token )\n', '            0.01 rate = 10 passed rate ( 100 ethers = 1 token )\n', '    **/\n', '    function setRate(uint newRate) external onlyOwner whenNotPaused returns(bool) {\n', '        require(newRate > 0);\n', '        \n', '        uint oldRate = rate;\n', '        rate = newRate;\n', '\n', '        emit LogRateChanged(oldRate, newRate, msg.sender);\n', '\n', '        return true;\n', '    }\n', '\n', '    /*\n', '        By default minWeiAmount = 1000\n', '        With min wei amount we can set the rate to be a float number\n', '\n', '        We use it as a multiplier because we can not pass float numbers in ethereum\n', '        If the token price becomes bigger than ether one, for example -> 1 token = 10 ethers\n', '        We will pass 100 as rate and this will be relevant to 0.1 token = 1 ether\n', '    **/\n', '    function setMinWeiAmount(uint newMinWeiAmount) external onlyOwner whenNotPaused returns(bool) {\n', '        require(newMinWeiAmount > 0);\n', '        require(newMinWeiAmount % 10 == 0); \n', '\n', '        uint oldMinWeiAmount = minWeiAmount;\n', '        minWeiAmount = newMinWeiAmount;\n', '\n', '        emit LogMinWeiAmountChanged(oldMinWeiAmount, minWeiAmount, msg.sender);\n', '\n', '        return true;\n', '    }\n', '\n', '    function convertTokensAmountInWeiAtRate(uint tokensAmount, uint convertRate) external whenNotPaused view returns(uint) {\n', '\n', '        uint weiAmount = tokensAmount.mul(minWeiAmount);\n', '        weiAmount = weiAmount.div(convertRate);\n', '\n', '        if ((tokensAmount % convertRate) != 0) {\n', '            weiAmount++;\n', '        } \n', '\n', '        return weiAmount;\n', '    }\n', '\n', '    function calcWeiForTokensAmount(uint tokensAmount) external view whenNotPaused returns(uint) {\n', '        \n', '        uint weiAmount = tokensAmount.mul(minWeiAmount);\n', '        weiAmount = weiAmount.div(rate);\n', '\n', '        if ((tokensAmount % rate) != 0) {\n', '            weiAmount++;\n', '        } \n', '\n', '        return weiAmount;\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is BasicToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', '        // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', 'contract ICOToken is BurnableToken, MintableToken, PausableToken {\n', '\n', '    string public constant name = "AIUR Token";\n', '    string public constant symbol = "AIUR";\n', '    uint8 public constant decimals = 18;\n', '}\n', '\n', 'contract ICOTokenExtended is ICOToken {\n', '\n', '    address public refunder;\n', '\n', '    IHookOperator public hookOperator;\n', '    ExchangeOracle public aiurExchangeOracle;\n', '\n', '    mapping(address => bool) public minters;\n', '\n', '    uint256 public constant MIN_REFUND_RATE_DELIMITER = 2; // Refund rate has to be minimum 50% of the AIUR ExchangeOracle rate\n', '\n', '    event LogRefunderSet(address refunderAddress);\n', '    event LogTransferOverFunds(address from, address to, uint ethersAmount, uint tokensAmount);\n', '    event LogTaxTransfer(address from, address to, uint amount);\n', '    event LogMinterAdd(address addedMinter);\n', '    event LogMinterRemove(address removedMinter);\n', '\n', '    modifier onlyMinter(){\n', '        require(minters[msg.sender]);\n', '        \n', '        _;\n', '    }\n', '\n', '    modifier onlyCurrentHookOperator() {\n', '        require(msg.sender == address(hookOperator));\n', '\n', '        _;\n', '    }\n', '\n', '    modifier nonZeroAddress(address inputAddress) {\n', '        require(inputAddress != address(0));\n', '\n', '        _;\n', '    }\n', '\n', '    modifier onlyRefunder() {\n', '        require(msg.sender == refunder);\n', '\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        minters[msg.sender] = true;\n', '    }\n', '\n', '    function setRefunder(address refunderAddress) external onlyOwner nonZeroAddress(refunderAddress) {\n', '        refunder = refunderAddress;\n', '\n', '        emit LogRefunderSet(refunderAddress);\n', '    }\n', '\n', '    // Set the exchange oracle after crowdsale \n', '    function setExchangeOracle(address exchangeOracleAddress) external onlyOwner nonZeroAddress(exchangeOracleAddress) {\n', '        aiurExchangeOracle = ExchangeOracle(exchangeOracleAddress);\n', '    }\n', '\n', '    function setHookOperator(address hookOperatorAddress) external onlyOwner nonZeroAddress(hookOperatorAddress) {\n', '        hookOperator = IHookOperator(hookOperatorAddress);\n', '    }\n', '\n', '    function addMinter(address minterAddress) external onlyOwner nonZeroAddress(minterAddress) {\n', '        minters[minterAddress] = true;    \n', '\n', '        emit LogMinterAdd(minterAddress);\n', '    }\n', '\n', '    function removeMinter(address minterAddress) external onlyOwner nonZeroAddress(minterAddress) {\n', '        minters[minterAddress] = false;    \n', '\n', '        emit LogMinterRemove(minterAddress);\n', '    }\n', '\n', '    function mint(address to, uint256 tokensAmount) public onlyMinter canMint nonZeroAddress(to) returns(bool) {\n', '        hookOperator.onMint(to, tokensAmount);\n', '\n', '        totalSupply = totalSupply.add(tokensAmount);\n', '        balances[to] = balances[to].add(tokensAmount);\n', '\n', '        emit Mint(to, tokensAmount);\n', '        emit Transfer(address(0), to, tokensAmount);\n', '        return true;\n', '    } \n', '\n', '    function burn(uint tokensAmount) public {\n', '        hookOperator.onBurn(tokensAmount);       \n', '\n', '        super.burn(tokensAmount);  \n', '    } \n', '\n', '    function transfer(address to, uint tokensAmount) public nonZeroAddress(to) returns(bool) {\n', '        hookOperator.onTransfer(msg.sender, to, tokensAmount);\n', '\n', '        return super.transfer(to, tokensAmount);\n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint tokensAmount) public nonZeroAddress(from) nonZeroAddress(to) returns(bool) {\n', '        hookOperator.onTransfer(from, to, tokensAmount);\n', '        \n', '        return super.transferFrom(from, to, tokensAmount);\n', '    }\n', '\n', '    /*\n', '        This function is used for taxation purposes and will be used after pre-defined requirement are met\n', '    */\n', '    function taxTransfer(address from, address to, uint tokensAmount) external onlyCurrentHookOperator nonZeroAddress(from) nonZeroAddress(to) returns(bool) {  \n', '        require(balances[from] >= tokensAmount);\n', '\n', '        transferDirectly(from, to, tokensAmount);\n', '\n', '        hookOperator.onTaxTransfer(from, tokensAmount);\n', '        emit LogTaxTransfer(from, to, tokensAmount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function transferOverBalanceFunds(address from, address to, uint rate) external payable onlyRefunder nonZeroAddress(from) nonZeroAddress(to) returns(bool) {\n', '        require(!hookOperator.isOverBalanceLimitHolder(from));\n', '\n', '        uint256 oracleRate = aiurExchangeOracle.rate();\n', '        require(rate <= oracleRate.add(oracleRate.div(MIN_REFUND_RATE_DELIMITER)));\n', '\n', '        uint256 fromBalance = balanceOf(from);\n', '        \n', '        // Calculate percentage limit in tokens\n', '        uint256 maxTokensBalance = totalSupply.mul(hookOperator.getBalancePercentageLimit()).div(100);\n', '\n', '        require(fromBalance > maxTokensBalance);\n', '\n', '        uint256 tokensToTake = fromBalance.sub(maxTokensBalance);\n', '        uint256 weiToRefund = aiurExchangeOracle.convertTokensAmountInWeiAtRate(tokensToTake, rate);\n', '\n', '        require(hookOperator.isInBalanceLimit(to, tokensToTake));\n', '        require(msg.value == weiToRefund);\n', '\n', '        transferDirectly(from, to, tokensToTake);\n', '        from.transfer(msg.value);\n', '\n', '        emit LogTransferOverFunds(from, to, weiToRefund, tokensToTake);\n', '\n', '        return true;\n', '    }\n', '\n', '    function transferDirectly(address from, address to, uint tokensAmount) private {\n', '        balances[from] = balances[from].sub(tokensAmount);\n', '        balances[to] = balances[to].add(tokensAmount);\n', '    }\n', '}']