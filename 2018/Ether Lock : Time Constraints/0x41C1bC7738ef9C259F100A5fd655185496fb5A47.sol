['pragma solidity ^0.4.11;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() public constant returns (uint256);\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '          return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract Kcoin is IERC20{\n', '\n', '    using SafeMath for uint256;\n', '\n', '    uint public initialSupply = 150000000000e18; // crowdsale\n', '\n', '    string public constant symbol = "24K";\n', '    string public constant name = "24Kcoin";\n', '    uint8 public constant decimals = 18;\n', '    uint public totalSupply = 1500000000000e18;\n', '\n', '    uint256 public constant Rate1 = 5000; //month March rate 1 Eth\n', '    uint256 public constant Rate2 = 5000; //month April rate 1 Eth\n', '    uint256 public constant Rate3 = 4500; //month May rate 1 Eth\n', '    uint256 public constant Rate4 = 4000; //month June rate 1 Eth\n', '    uint256 public constant Rate5 = 3500; //month July rate 1 Eth\n', '    uint256 public constant Rate6 = 3000; //month August rate 1 Eth\n', '\tuint256 public constant Rate7 = 2500; //month September rate 1 Eth\n', '\tuint256 public constant Rate8 = 2000; //month October rate 1 Eth\n', '\tuint256 public constant Rate9 = 1500; //month November rate 1 Eth\n', '\tuint256 public constant Rate10= 1000; //month December rate 1 Eth\n', '\n', '\n', '    uint256 public constant Start1 = 1519862400; //start 03/01/18 12:00 AM UTC time to Unix time stamp\n', '    uint256 public constant Start2 = 1522540800; //start 04/01/18 12:00 AM UTC time to Unix time stamp\n', '    uint256 public constant Start3 = 1525132800; //start 05/01/18 12:00 AM UTC time to Unix time stamp\n', '    uint256 public constant Start4 = 1527811200; //start 06/01/18 12:00 AM UTC time to Unix time stamp\n', '    uint256 public constant Start5 = 1530403200; //start 07/01/18 12:00 AM UTC time to Unix time stamp\n', '    uint256 public constant Start6 = 1533081600; //start 08/01/18 12:00 AM UTC time to Unix time stamp\n', '\tuint256 public constant Start7 = 1535760000; //start 09/01/18 12:00 AM UTC time to Unix time stamp\n', '\tuint256 public constant Start8 = 1538352000; //start 10/01/18 12:00 AM UTC time to Unix time stamp\n', '\tuint256 public constant Start9 = 1541030400; //start 11/01/18 12:00 AM UTC time to Unix time stamp\n', '\tuint256 public constant Start10= 1543622400; //start 12/01/18 12:00 AM UTC time to Unix time stamp\n', '\n', '\t\n', '    uint256 public constant End1 = 1522540799; //End 03/31/18 11:59 PM UTC time to Unix time stamp\n', '    uint256 public constant End2 = 1525132799; //End 04/30/18 11:59 PM UTC time to Unix time stamp\n', '    uint256 public constant End3 = 1527811199; //End 05/31/18 11:59 PM UTC time to Unix time stamp\n', '    uint256 public constant End4 = 1530403199; //End 06/30/18 11:59 PM UTC time to Unix time stamp\n', '    uint256 public constant End5 = 1533081599; //End 07/31/18 11:59 PM UTC time to Unix time stamp\n', '    uint256 public constant End6 = 1535759999; //End 08/31/18 11:59 PM UTC time to Unix time stamp\n', '\t\n', '\tuint256 public constant End7 = 1538351940; //End 09/30/18 11:59 PM UTC time to Unix time stamp\n', '\tuint256 public constant End8 = 1540943940; //End 10/30/18 11:59 PM UTC time to Unix time stamp\n', '\tuint256 public constant End9 = 1543622340; //End 11/30/18 11:59 PM UTC time to Unix time stamp\n', '\tuint256 public constant End10= 1546300740; //End 12/31/18 11:59 PM UTC time to Unix time stamp\n', '\t\n', '\t\n', '    address public owner;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    function() public payable {\n', '        buyTokens();\n', '    }\n', '\n', '    function Kcoin() public {\n', '        //TODO\n', '        balances[msg.sender] = totalSupply;\n', '        owner = msg.sender;\n', '    }\n', '    function buyTokens() public payable {\n', '\n', '        require(msg.value > 0);\n', '\n', '        uint256 weiAmount = msg.value;\n', '        uint256 tokens1 = weiAmount.mul(Rate1); //make sure to check which rate tier we are in\n', '        uint256 tokens2 = weiAmount.mul(Rate2);\n', '        uint256 tokens3 = weiAmount.mul(Rate3);\n', '        uint256 tokens4 = weiAmount.mul(Rate4);\n', '        uint256 tokens5 = weiAmount.mul(Rate5);\n', '        uint256 tokens6 = weiAmount.mul(Rate6);\n', '\t\tuint256 tokens7 = weiAmount.mul(Rate7);\n', '\t\tuint256 tokens8 = weiAmount.mul(Rate8);\n', '\t\tuint256 tokens9 = weiAmount.mul(Rate9);\n', '\t\tuint256 tokens10= weiAmount.mul(Rate10);\n', '\n', '        //send tokens from ICO contract address\n', '        if (now >= Start1 && now <= End1) //we can send tokens at rate 1\n', '        {\n', '            balances[msg.sender] = balances[msg.sender].add(tokens1);\n', '            initialSupply = initialSupply.sub(tokens1);\n', '            //transfer(msg.sender, tokens1);\n', '        }\n', '        if (now >= Start2 && now <= End2) //we can send tokens at rate 2\n', '        {\n', '            balances[msg.sender] = balances[msg.sender].add(tokens2);\n', '            initialSupply = initialSupply.sub(tokens2);\n', '        }\n', '        if (now >= Start3 && now <= End3) //we can send tokens at rate 3\n', '        {\n', '            balances[msg.sender] = balances[msg.sender].add(tokens3);\n', '            initialSupply = initialSupply.sub(tokens3);\n', '        }\n', '        if (now >= Start4 && now <= End4) //we can send tokens at rate 4\n', '        {\n', '            balances[msg.sender] = balances[msg.sender].add(tokens4);\n', '            initialSupply = initialSupply.sub(tokens4);\n', '        }\n', '        if (now >= Start5 && now <= End5) //we can send tokens at rate 5\n', '        {\n', '            balances[msg.sender] = balances[msg.sender].add(tokens5);\n', '            initialSupply = initialSupply.sub(tokens5);\n', '        }\n', '        if (now >= Start6 && now <= End6) //we can send tokens at rate 6\n', '        {\n', '            balances[msg.sender] = balances[msg.sender].add(tokens6);\n', '            initialSupply = initialSupply.sub(tokens6);\n', '        }\n', '\t\t        if (now >= Start7 && now <= End7) //we can send tokens at rate 7\n', '        {\n', '            balances[msg.sender] = balances[msg.sender].add(tokens7);\n', '            initialSupply = initialSupply.sub(tokens7);\n', '        }\n', '\t\t        if (now >= Start8 && now <= End8) //we can send tokens at rate 8\n', '        {\n', '            balances[msg.sender] = balances[msg.sender].add(tokens8);\n', '            initialSupply = initialSupply.sub(tokens8);\n', '        }\n', '\t\t        if (now >= Start9 && now <= End9) //we can send tokens at rate 9\n', '        {\n', '            balances[msg.sender] = balances[msg.sender].add(tokens9);\n', '            initialSupply = initialSupply.sub(tokens9);\n', '        }\n', '\t\t        if (now >= Start10 && now <= End10) //we can send tokens at rate 10\n', '        {\n', '            balances[msg.sender] = balances[msg.sender].add(tokens10);\n', '            initialSupply = initialSupply.sub(tokens10);\n', '        }\n', '\t\t\n', '\n', '        owner.transfer(msg.value);\n', '    }\n', '\n', '   function totalSupply() public constant returns (uint256 ) {\n', '        //TODO\n', '        return totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        //TODO\n', '        return balances[_owner];\n', '    }\n', '\n', '     function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        //TODO\n', '        require(\n', '            balances[msg.sender] >= _value\n', '            && _value > 0\n', '        );\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] += balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '     function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        //TODO\n', '        require(\n', '            allowed[_from][msg.sender] >= _value\n', '            && balances[_from] >= _value\n', '            && _value > 0\n', '        );\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '   function burn(uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);   // Check if the sender has enough\n', '        balances[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '\t function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balances[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowed[_from][msg.sender]);    // Check allowance\n', '        balances[_from] -= _value;                         // Subtract from the targeted balance\n', '        allowed[_from][msg.sender] -= _value;             // Subtract from the sender&#39;s allowance\n', '        totalSupply -= _value;                              // Update totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool success){\n', '        //TODO\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '     function allowance(address _owner, address _spender) public constant returns (uint256 remaining){\n', '        //TODO\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}']