['pragma solidity ^0.4.0;\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract SimpleExchange is Ownable {\n', '\n', '    ERC20Basic public token;\n', '    uint256 public rate;\n', '\n', '    function SimpleExchange(address _token, uint256 _rate) public {\n', '        setToken(_token);\n', '        setRate(_rate);\n', '    }\n', '\n', '    function setToken(address _token) public onlyOwner {\n', '        require(_token != 0);\n', '        token = ERC20Basic(_token);\n', '    }\n', '\n', '    function setRate(uint256 _rate) public onlyOwner {\n', '        require(_rate != 0);\n', '        rate = _rate;\n', '    }\n', '\n', '    function buy() public payable {\n', '        uint256 tokensAmount = msg.value * rate;\n', '        token.transfer(msg.sender, tokensAmount);\n', '    }\n', '\n', '    function claim() public onlyOwner {\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '    function claimTokens() public onlyOwner {\n', '        token.transfer(owner, token.balanceOf(this));\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.0;\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract SimpleExchange is Ownable {\n', '\n', '    ERC20Basic public token;\n', '    uint256 public rate;\n', '\n', '    function SimpleExchange(address _token, uint256 _rate) public {\n', '        setToken(_token);\n', '        setRate(_rate);\n', '    }\n', '\n', '    function setToken(address _token) public onlyOwner {\n', '        require(_token != 0);\n', '        token = ERC20Basic(_token);\n', '    }\n', '\n', '    function setRate(uint256 _rate) public onlyOwner {\n', '        require(_rate != 0);\n', '        rate = _rate;\n', '    }\n', '\n', '    function buy() public payable {\n', '        uint256 tokensAmount = msg.value * rate;\n', '        token.transfer(msg.sender, tokensAmount);\n', '    }\n', '\n', '    function claim() public onlyOwner {\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '    function claimTokens() public onlyOwner {\n', '        token.transfer(owner, token.balanceOf(this));\n', '    }\n', '\n', '}']
