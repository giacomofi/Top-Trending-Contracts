['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Token {\n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '}\n', '\n', '\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        //Default assumes totalSupply can&#39;t be over max (2^256 - 1).\n', '        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn&#39;t wrap.\n', '        //Replace the if with this one instead.\n', '        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '}\n', '\n', '\n', '//name this contract whatever you&#39;d like\n', 'contract MuskToken is StandardToken {\n', '\n', '    function () {\n', '        //if ether is sent to this address, send it back.\n', '        throw;\n', '    }\n', '\n', '    /* Public variables of the token */\n', '\n', '    /*\n', '    NOTE:\n', '    The following variables are OPTIONAL vanities. One does not have to include them.\n', '    They allow one to customise the token contract & in no way influences the core functionality.\n', '    Some wallets/interfaces might not even bother to look at this information.\n', '    */\n', '    string public name;                   //fancy name: eg Simon Bucks\n', '    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It&#39;s like comparing 1 wei to 1 ether.\n', '    string public symbol;                 //An identifier: eg SBX\n', '    string public version = &#39;H1.0&#39;;       //human 0.1 standard. Just an arbitrary versioning scheme.\n', '\n', '//\n', '// CHANGE THESE VALUES FOR YOUR TOKEN\n', '//\n', '\n', '//make sure this function name matches the contract name above. So if you&#39;re token is called TutorialToken, make sure the \n', '//contract name above is also TutorialToken instead of MuskToken\n', '\n', '    function MuskToken(\n', '        ) {\n', '        balances[msg.sender] = 1000000000000000000000000000;               // Give the creator all initial tokens (100000 for example)\n', '        totalSupply = 1000000000000000000000000000;                        // Update total supply (100000 for example)\n', '        name = "Musk Token";                                   // Set the name for display purposes\n', '        decimals = 18;                            // Amount of decimals for display purposes\n', '        symbol = "MUSK";                               // Set the symbol for display purposes\n', '    }\n', '\n', '    /* Approves and then calls the receiving contract */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn&#39;t have to include a contract in here just for this.\n', '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract MuskTokenVault is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    //Wallet Addresses for allocation\n', '    address public teamReserveWallet = 0xBf7E6DC9317dF0e9Fde7847577154e6C5114370d;\n', '    address public finalReserveWallet = 0xBf7E6DC9317dF0e9Fde7847577154e6C5114370d;\n', '\n', '    //Token Allocations\n', '    uint256 public teamReserveAllocation = 240 * (10 ** 6) * (10 ** 18);\n', '    uint256 public finalReserveAllocation = 10 * (10 ** 6) * (10 ** 18);\n', '\n', '    //Total Token Allocations\n', '    uint256 public totalAllocation = 250 * (10 ** 6) * (10 ** 18);\n', '\n', '    uint256 public teamTimeLock = 2 * 365 days;\n', '    uint256 public teamVestingStages = 8;\n', '    uint256 public finalReserveTimeLock = 2 * 365 days;\n', '\n', '    /** Reserve allocations */\n', '    mapping(address => uint256) public allocations;\n', '\n', '    /** When timeLocks are over (UNIX Timestamp)  */  \n', '    mapping(address => uint256) public timeLocks;\n', '\n', '    /** How many tokens each reserve wallet has claimed */\n', '    mapping(address => uint256) public claimed;\n', '\n', '    /** When this vault was locked (UNIX Timestamp)*/\n', '    uint256 public lockedAt = 0;\n', '\n', '    MuskToken public token;\n', '\n', '    /** Allocated reserve tokens */\n', '    event Allocated(address wallet, uint256 value);\n', '\n', '    /** Distributed reserved tokens */\n', '    event Distributed(address wallet, uint256 value);\n', '\n', '    /** Tokens have been locked */\n', '    event Locked(uint256 lockTime);\n', '\n', '    //Any of the three reserve wallets\n', '    modifier onlyReserveWallets {\n', '        require(allocations[msg.sender] > 0);\n', '        _;\n', '    }\n', '\n', '    //Only Musk team reserve wallet\n', '    modifier onlyTeamReserve {\n', '        require(msg.sender == teamReserveWallet);\n', '        require(allocations[msg.sender] > 0);\n', '        _;\n', '    }\n', '\n', '    //Only final token reserve wallet\n', '    modifier onlyTokenReserve {\n', '        require(msg.sender == finalReserveWallet);\n', '        require(allocations[msg.sender] > 0);\n', '        _;\n', '    }\n', '\n', '    //Has not been locked yet\n', '    modifier notLocked {\n', '        require(lockedAt == 0);\n', '        _;\n', '    }\n', '\n', '    modifier locked {\n', '        require(lockedAt > 0);\n', '        _;\n', '    }\n', '\n', '    //Token allocations have not been set\n', '    modifier notAllocated {\n', '        require(allocations[teamReserveWallet] == 0);\n', '        require(allocations[finalReserveWallet] == 0);\n', '        _;\n', '    }\n', '\n', '    function MuskTokenVault(Token _token) public {\n', '\n', '        owner = msg.sender;\n', '        token = MuskToken(_token);\n', '        \n', '    }\n', '\n', '    function allocate() public notLocked notAllocated onlyOwner {\n', '\n', '        //Makes sure Token Contract has the exact number of tokens\n', '        require(token.balanceOf(address(this)) == totalAllocation);\n', '        \n', '        allocations[teamReserveWallet] = teamReserveAllocation;\n', '        allocations[finalReserveWallet] = finalReserveAllocation;\n', '\n', '        Allocated(teamReserveWallet, teamReserveAllocation);\n', '        Allocated(finalReserveWallet, finalReserveAllocation);\n', '\n', '        lock();\n', '    }\n', '\n', '    //Lock the vault for the wallets\n', '    function lock() internal notLocked onlyOwner {\n', '\n', '        lockedAt = block.timestamp;\n', '\n', '        timeLocks[teamReserveWallet] = lockedAt.add(teamTimeLock);\n', '        timeLocks[finalReserveWallet] = lockedAt.add(finalReserveTimeLock);\n', '\n', '        Locked(lockedAt);\n', '    }\n', '\n', '    //In the case locking failed, then allow the owner to reclaim the tokens on the contract.\n', '    //Recover Tokens in case incorrect amount was sent to contract.\n', '    function recoverFailedLock() external notLocked notAllocated onlyOwner {\n', '\n', '        // Transfer all tokens on this contract back to the owner\n', '        require(token.transfer(owner, token.balanceOf(address(this))));\n', '    }\n', '\n', '    // Total number of tokens currently in the vault\n', '    function getTotalBalance() public view returns (uint256 tokensCurrentlyInVault) {\n', '\n', '        return token.balanceOf(address(this));\n', '\n', '    }\n', '\n', '    // Number of tokens that are still locked\n', '    function getLockedBalance() public view onlyReserveWallets returns (uint256 tokensLocked) {\n', '\n', '        return allocations[msg.sender].sub(claimed[msg.sender]);\n', '\n', '    }\n', '\n', '    //Claim tokens for final reserve wallet\n', '    function claimTokenReserve() onlyTokenReserve locked public {\n', '\n', '        address reserveWallet = msg.sender;\n', '\n', '        // Can&#39;t claim before Lock ends\n', '        require(block.timestamp > timeLocks[reserveWallet]);\n', '\n', '        // Must Only claim once\n', '        require(claimed[reserveWallet] == 0);\n', '\n', '        uint256 amount = allocations[reserveWallet];\n', '\n', '        claimed[reserveWallet] = amount;\n', '\n', '        require(token.transfer(reserveWallet, amount));\n', '\n', '        Distributed(reserveWallet, amount);\n', '    }\n', '\n', '    //Claim tokens for Musk team reserve wallet\n', '    function claimTeamReserve() onlyTeamReserve locked public {\n', '\n', '        uint256 vestingStage = teamVestingStage();\n', '\n', '        //Amount of tokens the team should have at this vesting stage\n', '        uint256 totalUnlocked = vestingStage.mul(allocations[teamReserveWallet]).div(teamVestingStages);\n', '\n', '        require(totalUnlocked <= allocations[teamReserveWallet]);\n', '\n', '        //Previously claimed tokens must be less than what is unlocked\n', '        require(claimed[teamReserveWallet] < totalUnlocked);\n', '\n', '        uint256 payment = totalUnlocked.sub(claimed[teamReserveWallet]);\n', '\n', '        claimed[teamReserveWallet] = totalUnlocked;\n', '\n', '        require(token.transfer(teamReserveWallet, payment));\n', '\n', '        Distributed(teamReserveWallet, payment);\n', '    }\n', '\n', '    //Current Vesting stage for Musk team \n', '    function teamVestingStage() public view onlyTeamReserve returns(uint256){\n', '        \n', '        // Every 3 months\n', '        uint256 vestingMonths = teamTimeLock.div(teamVestingStages); \n', '\n', '        uint256 stage = (block.timestamp.sub(lockedAt)).div(vestingMonths);\n', '\n', '        //Ensures team vesting stage doesn&#39;t go past teamVestingStages\n', '        if(stage > teamVestingStages){\n', '            stage = teamVestingStages;\n', '        }\n', '\n', '        return stage;\n', '\n', '    }\n', '\n', '    // Checks if msg.sender can collect tokens\n', '    function canCollect() public view onlyReserveWallets returns(bool) {\n', '\n', '        return block.timestamp > timeLocks[msg.sender] && claimed[msg.sender] == 0;\n', '\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Token {\n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '}\n', '\n', '\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", "        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n", '        //Replace the if with this one instead.\n', '        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '}\n', '\n', '\n', "//name this contract whatever you'd like\n", 'contract MuskToken is StandardToken {\n', '\n', '    function () {\n', '        //if ether is sent to this address, send it back.\n', '        throw;\n', '    }\n', '\n', '    /* Public variables of the token */\n', '\n', '    /*\n', '    NOTE:\n', '    The following variables are OPTIONAL vanities. One does not have to include them.\n', '    They allow one to customise the token contract & in no way influences the core functionality.\n', '    Some wallets/interfaces might not even bother to look at this information.\n', '    */\n', '    string public name;                   //fancy name: eg Simon Bucks\n', "    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\n", '    string public symbol;                 //An identifier: eg SBX\n', "    string public version = 'H1.0';       //human 0.1 standard. Just an arbitrary versioning scheme.\n", '\n', '//\n', '// CHANGE THESE VALUES FOR YOUR TOKEN\n', '//\n', '\n', "//make sure this function name matches the contract name above. So if you're token is called TutorialToken, make sure the \n", '//contract name above is also TutorialToken instead of MuskToken\n', '\n', '    function MuskToken(\n', '        ) {\n', '        balances[msg.sender] = 1000000000000000000000000000;               // Give the creator all initial tokens (100000 for example)\n', '        totalSupply = 1000000000000000000000000000;                        // Update total supply (100000 for example)\n', '        name = "Musk Token";                                   // Set the name for display purposes\n', '        decimals = 18;                            // Amount of decimals for display purposes\n', '        symbol = "MUSK";                               // Set the symbol for display purposes\n', '    }\n', '\n', '    /* Approves and then calls the receiving contract */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', "        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n", '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract MuskTokenVault is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    //Wallet Addresses for allocation\n', '    address public teamReserveWallet = 0xBf7E6DC9317dF0e9Fde7847577154e6C5114370d;\n', '    address public finalReserveWallet = 0xBf7E6DC9317dF0e9Fde7847577154e6C5114370d;\n', '\n', '    //Token Allocations\n', '    uint256 public teamReserveAllocation = 240 * (10 ** 6) * (10 ** 18);\n', '    uint256 public finalReserveAllocation = 10 * (10 ** 6) * (10 ** 18);\n', '\n', '    //Total Token Allocations\n', '    uint256 public totalAllocation = 250 * (10 ** 6) * (10 ** 18);\n', '\n', '    uint256 public teamTimeLock = 2 * 365 days;\n', '    uint256 public teamVestingStages = 8;\n', '    uint256 public finalReserveTimeLock = 2 * 365 days;\n', '\n', '    /** Reserve allocations */\n', '    mapping(address => uint256) public allocations;\n', '\n', '    /** When timeLocks are over (UNIX Timestamp)  */  \n', '    mapping(address => uint256) public timeLocks;\n', '\n', '    /** How many tokens each reserve wallet has claimed */\n', '    mapping(address => uint256) public claimed;\n', '\n', '    /** When this vault was locked (UNIX Timestamp)*/\n', '    uint256 public lockedAt = 0;\n', '\n', '    MuskToken public token;\n', '\n', '    /** Allocated reserve tokens */\n', '    event Allocated(address wallet, uint256 value);\n', '\n', '    /** Distributed reserved tokens */\n', '    event Distributed(address wallet, uint256 value);\n', '\n', '    /** Tokens have been locked */\n', '    event Locked(uint256 lockTime);\n', '\n', '    //Any of the three reserve wallets\n', '    modifier onlyReserveWallets {\n', '        require(allocations[msg.sender] > 0);\n', '        _;\n', '    }\n', '\n', '    //Only Musk team reserve wallet\n', '    modifier onlyTeamReserve {\n', '        require(msg.sender == teamReserveWallet);\n', '        require(allocations[msg.sender] > 0);\n', '        _;\n', '    }\n', '\n', '    //Only final token reserve wallet\n', '    modifier onlyTokenReserve {\n', '        require(msg.sender == finalReserveWallet);\n', '        require(allocations[msg.sender] > 0);\n', '        _;\n', '    }\n', '\n', '    //Has not been locked yet\n', '    modifier notLocked {\n', '        require(lockedAt == 0);\n', '        _;\n', '    }\n', '\n', '    modifier locked {\n', '        require(lockedAt > 0);\n', '        _;\n', '    }\n', '\n', '    //Token allocations have not been set\n', '    modifier notAllocated {\n', '        require(allocations[teamReserveWallet] == 0);\n', '        require(allocations[finalReserveWallet] == 0);\n', '        _;\n', '    }\n', '\n', '    function MuskTokenVault(Token _token) public {\n', '\n', '        owner = msg.sender;\n', '        token = MuskToken(_token);\n', '        \n', '    }\n', '\n', '    function allocate() public notLocked notAllocated onlyOwner {\n', '\n', '        //Makes sure Token Contract has the exact number of tokens\n', '        require(token.balanceOf(address(this)) == totalAllocation);\n', '        \n', '        allocations[teamReserveWallet] = teamReserveAllocation;\n', '        allocations[finalReserveWallet] = finalReserveAllocation;\n', '\n', '        Allocated(teamReserveWallet, teamReserveAllocation);\n', '        Allocated(finalReserveWallet, finalReserveAllocation);\n', '\n', '        lock();\n', '    }\n', '\n', '    //Lock the vault for the wallets\n', '    function lock() internal notLocked onlyOwner {\n', '\n', '        lockedAt = block.timestamp;\n', '\n', '        timeLocks[teamReserveWallet] = lockedAt.add(teamTimeLock);\n', '        timeLocks[finalReserveWallet] = lockedAt.add(finalReserveTimeLock);\n', '\n', '        Locked(lockedAt);\n', '    }\n', '\n', '    //In the case locking failed, then allow the owner to reclaim the tokens on the contract.\n', '    //Recover Tokens in case incorrect amount was sent to contract.\n', '    function recoverFailedLock() external notLocked notAllocated onlyOwner {\n', '\n', '        // Transfer all tokens on this contract back to the owner\n', '        require(token.transfer(owner, token.balanceOf(address(this))));\n', '    }\n', '\n', '    // Total number of tokens currently in the vault\n', '    function getTotalBalance() public view returns (uint256 tokensCurrentlyInVault) {\n', '\n', '        return token.balanceOf(address(this));\n', '\n', '    }\n', '\n', '    // Number of tokens that are still locked\n', '    function getLockedBalance() public view onlyReserveWallets returns (uint256 tokensLocked) {\n', '\n', '        return allocations[msg.sender].sub(claimed[msg.sender]);\n', '\n', '    }\n', '\n', '    //Claim tokens for final reserve wallet\n', '    function claimTokenReserve() onlyTokenReserve locked public {\n', '\n', '        address reserveWallet = msg.sender;\n', '\n', "        // Can't claim before Lock ends\n", '        require(block.timestamp > timeLocks[reserveWallet]);\n', '\n', '        // Must Only claim once\n', '        require(claimed[reserveWallet] == 0);\n', '\n', '        uint256 amount = allocations[reserveWallet];\n', '\n', '        claimed[reserveWallet] = amount;\n', '\n', '        require(token.transfer(reserveWallet, amount));\n', '\n', '        Distributed(reserveWallet, amount);\n', '    }\n', '\n', '    //Claim tokens for Musk team reserve wallet\n', '    function claimTeamReserve() onlyTeamReserve locked public {\n', '\n', '        uint256 vestingStage = teamVestingStage();\n', '\n', '        //Amount of tokens the team should have at this vesting stage\n', '        uint256 totalUnlocked = vestingStage.mul(allocations[teamReserveWallet]).div(teamVestingStages);\n', '\n', '        require(totalUnlocked <= allocations[teamReserveWallet]);\n', '\n', '        //Previously claimed tokens must be less than what is unlocked\n', '        require(claimed[teamReserveWallet] < totalUnlocked);\n', '\n', '        uint256 payment = totalUnlocked.sub(claimed[teamReserveWallet]);\n', '\n', '        claimed[teamReserveWallet] = totalUnlocked;\n', '\n', '        require(token.transfer(teamReserveWallet, payment));\n', '\n', '        Distributed(teamReserveWallet, payment);\n', '    }\n', '\n', '    //Current Vesting stage for Musk team \n', '    function teamVestingStage() public view onlyTeamReserve returns(uint256){\n', '        \n', '        // Every 3 months\n', '        uint256 vestingMonths = teamTimeLock.div(teamVestingStages); \n', '\n', '        uint256 stage = (block.timestamp.sub(lockedAt)).div(vestingMonths);\n', '\n', "        //Ensures team vesting stage doesn't go past teamVestingStages\n", '        if(stage > teamVestingStages){\n', '            stage = teamVestingStages;\n', '        }\n', '\n', '        return stage;\n', '\n', '    }\n', '\n', '    // Checks if msg.sender can collect tokens\n', '    function canCollect() public view onlyReserveWallets returns(bool) {\n', '\n', '        return block.timestamp > timeLocks[msg.sender] && claimed[msg.sender] == 0;\n', '\n', '    }\n', '\n', '}']
