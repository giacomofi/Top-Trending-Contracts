['pragma solidity ^0.4.21;\n', '\n', 'contract DoacaoEvento {\n', '    address public responsavel;\n', '    enum StatusDoacao{ABERTO, FECHADO, SACADO}\n', '    StatusDoacao public statusDoacao;\n', '    address public ong;\n', '    \n', '    Doador[] public doadores;  \n', '    \n', '    event LogDoacaoRecebida(address doador, uint256 value);\n', '    event LogSaqueEfetuado(uint dataHora);\n', '    event LogOngInformada(address doador);\n', '     \n', '    struct Doador {\n', '        address doador;\n', '        uint256 valor;\n', '        uint256 dataHora;\n', '    }\n', '    \n', '    function DoacaoEvento() public {\n', '        responsavel = msg.sender;\n', '        statusDoacao = StatusDoacao.ABERTO;\n', '    }\n', '    \n', '    modifier apenasResponsavel() {\n', '        require(msg.sender == responsavel);\n', '        _;\n', '    }\n', '\n', '    function informarOng(address _ong) public apenasResponsavel {\n', '        emit LogOngInformada(_ong);\n', '        ong = _ong;\n', '    }\n', '    \n', '    function fecharDoacoes() public apenasResponsavel {\n', '        require(statusDoacao == StatusDoacao.ABERTO);\n', '        statusDoacao = StatusDoacao.FECHADO;\n', '    }\n', '    \n', '    function abrirDoacoes() public apenasResponsavel {\n', '        statusDoacao = StatusDoacao.ABERTO;\n', '    }  \n', '    \n', '    function sacarDoacoes() public {\n', '        require(msg.sender == ong && address(this).balance > 0 && statusDoacao == StatusDoacao.FECHADO);\n', '        statusDoacao = StatusDoacao.SACADO;\n', '        emit LogSaqueEfetuado(block.timestamp);\n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '    \n', '    // fun&#231;&#227;o callback\n', '    function() public payable {\n', '        require(msg.value > 0 && statusDoacao == StatusDoacao.ABERTO);\n', '        emit LogDoacaoRecebida(msg.sender, msg.value);\n', '        Doador memory d = Doador(msg.sender, msg.value, block.timestamp);\n', '        doadores.push(d);\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'contract DoacaoEvento {\n', '    address public responsavel;\n', '    enum StatusDoacao{ABERTO, FECHADO, SACADO}\n', '    StatusDoacao public statusDoacao;\n', '    address public ong;\n', '    \n', '    Doador[] public doadores;  \n', '    \n', '    event LogDoacaoRecebida(address doador, uint256 value);\n', '    event LogSaqueEfetuado(uint dataHora);\n', '    event LogOngInformada(address doador);\n', '     \n', '    struct Doador {\n', '        address doador;\n', '        uint256 valor;\n', '        uint256 dataHora;\n', '    }\n', '    \n', '    function DoacaoEvento() public {\n', '        responsavel = msg.sender;\n', '        statusDoacao = StatusDoacao.ABERTO;\n', '    }\n', '    \n', '    modifier apenasResponsavel() {\n', '        require(msg.sender == responsavel);\n', '        _;\n', '    }\n', '\n', '    function informarOng(address _ong) public apenasResponsavel {\n', '        emit LogOngInformada(_ong);\n', '        ong = _ong;\n', '    }\n', '    \n', '    function fecharDoacoes() public apenasResponsavel {\n', '        require(statusDoacao == StatusDoacao.ABERTO);\n', '        statusDoacao = StatusDoacao.FECHADO;\n', '    }\n', '    \n', '    function abrirDoacoes() public apenasResponsavel {\n', '        statusDoacao = StatusDoacao.ABERTO;\n', '    }  \n', '    \n', '    function sacarDoacoes() public {\n', '        require(msg.sender == ong && address(this).balance > 0 && statusDoacao == StatusDoacao.FECHADO);\n', '        statusDoacao = StatusDoacao.SACADO;\n', '        emit LogSaqueEfetuado(block.timestamp);\n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '    \n', '    // função callback\n', '    function() public payable {\n', '        require(msg.value > 0 && statusDoacao == StatusDoacao.ABERTO);\n', '        emit LogDoacaoRecebida(msg.sender, msg.value);\n', '        Doador memory d = Doador(msg.sender, msg.value, block.timestamp);\n', '        doadores.push(d);\n', '    }\n', '}']
