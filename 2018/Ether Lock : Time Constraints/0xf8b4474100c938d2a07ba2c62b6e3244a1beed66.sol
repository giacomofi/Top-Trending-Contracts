['pragma solidity ^0.4.18;\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts/TokenVesting.sol\n', '\n', '/**\n', ' * @title Vesting contract for SDT\n', ' * @dev see https://send.sd/token\n', ' */\n', 'contract TokenVesting is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  address public ico;\n', '  bool public initialized;\n', '  bool public active;\n', '  ERC20Basic public token;\n', '  mapping (address => TokenGrant[]) public grants;\n', '\n', '  uint256 public circulatingSupply = 0;\n', '\n', '  struct TokenGrant {\n', '    uint256 value;\n', '    uint256 claimed;\n', '    uint256 vesting;\n', '    uint256 start;\n', '  }\n', '\n', '  event NewTokenGrant (\n', '    address indexed to,\n', '    uint256 value,\n', '    uint256 start,\n', '    uint256 vesting\n', '  );\n', '\n', '  event NewTokenClaim (\n', '    address indexed holder,\n', '    uint256 value\n', '  );\n', '\n', '  modifier icoResticted() {\n', '    require(msg.sender == ico);\n', '    _;\n', '  }\n', '\n', '  modifier isActive() {\n', '    require(active);\n', '    _;\n', '  }\n', '\n', '  function TokenVesting() public {\n', '    active = false;\n', '  }\n', '\n', '  function init(address _token, address _ico) public onlyOwner {\n', '    token = ERC20Basic(_token);\n', '    ico = _ico;\n', '    initialized = true;\n', '    active = true;\n', '  }\n', '\n', '  function stop() public isActive onlyOwner {\n', '    active = false;\n', '  }\n', '\n', '  function resume() public onlyOwner {\n', '    require(!active);\n', '    require(initialized);\n', '    active = true;\n', '  }\n', '\n', '  /**\n', '  * @dev Grant vested tokens.\n', '  * @notice Only for ICO contract address.\n', '  * @param _to Addres to grant tokens to.\n', '  * @param _value Number of tokens granted.\n', '  * @param _vesting Vesting finish timestamp.\n', '  * @param _start Vesting start timestamp.\n', '  */\n', '  function grantVestedTokens(\n', '      address _to,\n', '      uint256 _value,\n', '      uint256 _start,\n', '      uint256 _vesting\n', '  ) public icoResticted isActive {\n', '    require(_value > 0);\n', '    require(_vesting > _start);\n', '    require(grants[_to].length < 10);\n', '\n', '    TokenGrant memory grant = TokenGrant(_value, 0, _vesting, _start);\n', '    grants[_to].push(grant);\n', '\n', '    NewTokenGrant(_to, _value, _start, _vesting);\n', '  }\n', '\n', '  /**\n', '  * @dev Claim all vested tokens up to current date for myself\n', '  */\n', '  function claimTokens() public {\n', '    claim(msg.sender);\n', '  }\n', '\n', '  /**\n', '  * @dev Claim all vested tokens up to current date in behaviour of an user\n', '  * @param _to address Addres to claim tokens\n', '  */\n', '  function claimTokensFor(address _to) public onlyOwner {\n', '    claim(_to);\n', '  }\n', '\n', '  /**\n', '  * @dev Get claimable tokens\n', '  */\n', '  function claimableTokens() public constant returns (uint256) {\n', '    address _to = msg.sender;\n', '    uint256 numberOfGrants = grants[_to].length;\n', '\n', '    if (numberOfGrants == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 claimable = 0;\n', '    uint256 claimableFor = 0;\n', '    for (uint256 i = 0; i < numberOfGrants; i++) {\n', '      claimableFor = calculateVestedTokens(\n', '        grants[_to][i].value,\n', '        grants[_to][i].vesting,\n', '        grants[_to][i].start,\n', '        grants[_to][i].claimed\n', '      );\n', '      claimable = claimable.add(claimableFor);\n', '    }\n', '    return claimable;\n', '  }\n', '\n', '  /**\n', '  * @dev Get all veted tokens\n', '  */\n', '  function totalVestedTokens() public constant returns (uint256) {\n', '    address _to = msg.sender;\n', '    uint256 numberOfGrants = grants[_to].length;\n', '\n', '    if (numberOfGrants == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 claimable = 0;\n', '    for (uint256 i = 0; i < numberOfGrants; i++) {\n', '      claimable = claimable.add(\n', '        grants[_to][i].value.sub(grants[_to][i].claimed)\n', '      );\n', '    }\n', '    return claimable;\n', '  }\n', '\n', '  /**\n', '  * @dev Calculate vested claimable tokens on current time\n', '  * @param _tokens Number of tokens granted\n', '  * @param _vesting Vesting finish timestamp\n', '  * @param _start Vesting start timestamp\n', '  * @param _claimed Number of tokens already claimed\n', '  */\n', '  function calculateVestedTokens(\n', '      uint256 _tokens,\n', '      uint256 _vesting,\n', '      uint256 _start,\n', '      uint256 _claimed\n', '  ) internal constant returns (uint256) {\n', '    uint256 time = block.timestamp;\n', '\n', '    if (time < _start) {\n', '      return 0;\n', '    }\n', '\n', '    if (time >= _vesting) {\n', '      return _tokens.sub(_claimed);\n', '    }\n', '\n', '    uint256 vestedTokens = _tokens.mul(time.sub(_start)).div(\n', '      _vesting.sub(_start)\n', '    );\n', '\n', '    return vestedTokens.sub(_claimed);\n', '  }\n', '\n', '  /**\n', '  * @dev Claim all vested tokens up to current date\n', '  */\n', '  function claim(address _to) internal {\n', '    uint256 numberOfGrants = grants[_to].length;\n', '\n', '    if (numberOfGrants == 0) {\n', '      return;\n', '    }\n', '\n', '    uint256 claimable = 0;\n', '    uint256 claimableFor = 0;\n', '    for (uint256 i = 0; i < numberOfGrants; i++) {\n', '      claimableFor = calculateVestedTokens(\n', '        grants[_to][i].value,\n', '        grants[_to][i].vesting,\n', '        grants[_to][i].start,\n', '        grants[_to][i].claimed\n', '      );\n', '      claimable = claimable.add(claimableFor);\n', '      grants[_to][i].claimed = grants[_to][i].claimed.add(claimableFor);\n', '    }\n', '\n', '    token.transfer(_to, claimable);\n', '    circulatingSupply += claimable;\n', '\n', '    NewTokenClaim(_to, claimable);\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', '        // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '}\n', '\n', '// File: contracts/TokenSale.sol\n', '\n', '/**\n', ' * @title Crowdsale contract\n', ' * @dev see https://send.sd/crowdsale\n', ' */\n', 'contract TokenSale is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  /* Leave 10 tokens margin error in order to succedd\n', '  with last pool allocation in case hard cap is reached */\n', '  uint256 constant public HARD_CAP = 70000000 ether;\n', '  uint256 constant public VESTING_TIME = 90 days;\n', '  uint256 public weiUsdRate = 1;\n', '  uint256 public btcUsdRate = 1;\n', '\n', '  uint256 public vestingEnds;\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '  address public wallet;\n', '\n', '  uint256 public vestingStarts;\n', '\n', '  uint256 public soldTokens;\n', '  uint256 public raised;\n', '\n', '  bool public activated = false;\n', '  bool public isStopped = false;\n', '  bool public isFinalized = false;\n', '\n', '  BurnableToken public token;\n', '  TokenVesting public vesting;\n', '\n', '  event NewBuyer(\n', '    address indexed holder,\n', '    uint256 sndAmount,\n', '    uint256 usdAmount,\n', '    uint256 ethAmount,\n', '    uint256 btcAmount\n', '  );\n', '\n', '  event ClaimedTokens(\n', '    address indexed _token,\n', '    address indexed _controller,\n', '    uint256 _amount\n', '  );\n', '\n', '  modifier validAddress(address _address) {\n', '    require(_address != address(0x0));\n', '    _;\n', '  }\n', '\n', '  modifier isActive() {\n', '    require(activated);\n', '    require(!isStopped);\n', '    require(!isFinalized);\n', '    require(block.timestamp >= startTime);\n', '    require(block.timestamp <= endTime);\n', '    _;\n', '  }\n', '\n', '  function TokenSale(\n', '      uint256 _startTime,\n', '      uint256 _endTime,\n', '      address _wallet,\n', '      uint256 _vestingStarts\n', '  ) public validAddress(_wallet) {\n', '    require(_startTime > block.timestamp - 60);\n', '    require(_endTime > startTime);\n', '    require(_vestingStarts > startTime);\n', '\n', '    vestingStarts = _vestingStarts;\n', '    vestingEnds = vestingStarts.add(VESTING_TIME);\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  /**\n', '   * @dev set an exchange rate in wei\n', '   * @param _rate uint256 The new exchange rate\n', '   */\n', '  function setWeiUsdRate(uint256 _rate) public onlyOwner {\n', '    require(_rate > 0);\n', '    weiUsdRate = _rate;\n', '  }\n', '\n', '  /**\n', '   * @dev set an exchange rate in satoshis\n', '   * @param _rate uint256 The new exchange rate\n', '   */\n', '  function setBtcUsdRate(uint256 _rate) public onlyOwner {\n', '    require(_rate > 0);\n', '    btcUsdRate = _rate;\n', '  }\n', '\n', '  /**\n', '   * @dev initialize the contract and set token\n', '   */\n', '  function initialize(\n', '      address _sdt,\n', '      address _vestingContract,\n', '      address _icoCostsPool,\n', '      address _distributionContract\n', '  ) public validAddress(_sdt) validAddress(_vestingContract) onlyOwner {\n', '    require(!activated);\n', '    activated = true;\n', '\n', '    token = BurnableToken(_sdt);\n', '    vesting = TokenVesting(_vestingContract);\n', '\n', '    // 1% reserve is released on deploy\n', '    token.transfer(_icoCostsPool, 7000000 ether);\n', '    token.transfer(_distributionContract, 161000000 ether);\n', '\n', '    //early backers allocation\n', '    uint256 threeMonths = vestingStarts.add(90 days);\n', '\n', '    updateStats(0, 43387693 ether);\n', '    grantVestedTokens(0x02f807E6a1a59F8714180B301Cba84E76d3B4d06, 22572063 ether, vestingStarts, threeMonths);\n', '    grantVestedTokens(0x3A1e89dD9baDe5985E7Eb36E9AFd200dD0E20613, 15280000 ether, vestingStarts, threeMonths);\n', '    grantVestedTokens(0xA61c9A0E96eC7Ceb67586fC8BFDCE009395D9b21, 250000 ether, vestingStarts, threeMonths);\n', '    grantVestedTokens(0x26C9899eA2F8940726BbCC79483F2ce07989314E, 100000 ether, vestingStarts, threeMonths);\n', '    grantVestedTokens(0xC88d5031e00BC316bE181F0e60971e8fEdB9223b, 1360000 ether, vestingStarts, threeMonths);\n', '    grantVestedTokens(0x38f4cAD7997907741FA0D912422Ae59aC6b83dD1, 250000 ether, vestingStarts, threeMonths);\n', '    grantVestedTokens(0x2b2992e51E86980966c42736C458e2232376a044, 105000 ether, vestingStarts, threeMonths);\n', '    grantVestedTokens(0xdD0F60610052bE0976Cf8BEE576Dbb3a1621a309, 140000 ether, vestingStarts, threeMonths);\n', '    grantVestedTokens(0xd61B4F33D3413827baa1425E2FDa485913C9625B, 740000 ether, vestingStarts, threeMonths);\n', '    grantVestedTokens(0xE6D4a77D01C680Ebbc0c84393ca598984b3F45e3, 505630 ether, vestingStarts, threeMonths);\n', '    grantVestedTokens(0x35D3648c29Ac180D5C7Ef386D52de9539c9c487a, 150000 ether, vestingStarts, threeMonths);\n', '    grantVestedTokens(0x344a6130d187f51ef0DAb785e10FaEA0FeE4b5dE, 967500 ether, vestingStarts, threeMonths);\n', '    grantVestedTokens(0x026cC76a245987f3420D0FE30070B568b4b46F68, 967500 ether, vestingStarts, threeMonths);\n', '  }\n', '\n', '  function finalize(\n', '      address _poolA,\n', '      address _poolB,\n', '      address _poolC,\n', '      address _poolD\n', '  )\n', '      public\n', '      validAddress(_poolA)\n', '      validAddress(_poolB)\n', '      validAddress(_poolC)\n', '      validAddress(_poolD)\n', '      onlyOwner\n', '  {\n', '    grantVestedTokens(_poolA, 175000000 ether, vestingStarts, vestingStarts.add(7 years));\n', '    grantVestedTokens(_poolB, 168000000 ether, vestingStarts, vestingStarts.add(7 years));\n', '    grantVestedTokens(_poolC, 70000000 ether, vestingStarts, vestingStarts.add(7 years));\n', '    grantVestedTokens(_poolD, 48999990 ether, vestingStarts, vestingStarts.add(4 years));\n', '\n', '    token.burn(token.balanceOf(this));\n', '  }\n', '\n', '  function stop() public onlyOwner isActive returns(bool) {\n', '    isStopped = true;\n', '    return true;\n', '  }\n', '\n', '  function resume() public onlyOwner returns(bool) {\n', '    require(isStopped);\n', '    isStopped = false;\n', '    return true;\n', '  }\n', '\n', '  function () public payable {\n', '    uint256 usd = msg.value.div(weiUsdRate);\n', '    doPurchase(usd, msg.value, 0, msg.sender, vestingEnds);\n', '    forwardFunds();\n', '  }\n', '\n', '  function btcPurchase(\n', '      address _beneficiary,\n', '      uint256 _btcValue\n', '  ) public onlyOwner validAddress(_beneficiary) {\n', '    uint256 usd = _btcValue.div(btcUsdRate);\n', '    doPurchase(usd, 0, _btcValue, _beneficiary, vestingEnds);\n', '  }\n', '\n', '  /**\n', '  * @dev Number of tokens is given by:\n', '  * usd * 100 ether / 14\n', '  */\n', '  function computeTokens(uint256 _usd) public pure returns(uint256) {\n', '    return _usd.mul(100 ether).div(14);\n', '  }\n', '\n', '  //////////\n', '  // Safety Methods\n', '  //////////\n', '  /// @notice This method can be used by the controller to extract mistakenly\n', '  ///  sent tokens to this contract.\n', '  /// @param _token The address of the token contract that you want to recover\n', '  ///  set to 0 in case you want to extract ether.\n', '  function claimTokens(address _token) public onlyOwner {\n', '    require(_token != address(token));\n', '    if (_token == 0x0) {\n', '      owner.transfer(this.balance);\n', '      return;\n', '    }\n', '\n', '    ERC20Basic erc20token = ERC20Basic(_token);\n', '    uint256 balance = erc20token.balanceOf(this);\n', '    erc20token.transfer(owner, balance);\n', '    ClaimedTokens(_token, owner, balance);\n', '  }\n', '\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  /**\n', '   * @notice The owner of this contract is the owner of token&#39;s contract\n', '   * @param _usd amount invested in USD\n', '   * @param _eth amount invested in ETH y contribution was made in ETH, 0 otherwise\n', '   * @param _btc amount invested in BTC y contribution was made in BTC, 0 otherwise\n', '   * @param _address Address to send tokens to\n', '   * @param _vestingEnds vesting finish timestamp\n', '   */\n', '  function doPurchase(\n', '      uint256 _usd,\n', '      uint256 _eth,\n', '      uint256 _btc,\n', '      address _address,\n', '      uint256 _vestingEnds\n', '  )\n', '      internal\n', '      isActive\n', '      returns(uint256)\n', '  {\n', '    require(_usd >= 10);\n', '\n', '    uint256 soldAmount = computeTokens(_usd);\n', '\n', '    updateStats(_usd, soldAmount);\n', '    grantVestedTokens(_address, soldAmount, vestingStarts, _vestingEnds);\n', '    NewBuyer(_address, soldAmount, _usd, _eth, _btc);\n', '\n', '    return soldAmount;\n', '  }\n', '\n', '  /**\n', '   * @dev Helper function to update collected and allocated tokens stats\n', '   */\n', '  function updateStats(uint256 usd, uint256 tokens) internal {\n', '    raised = raised.add(usd);\n', '    soldTokens = soldTokens.add(tokens);\n', '\n', '    require(soldTokens <= HARD_CAP);\n', '  }\n', '\n', '  /**\n', '   * @dev grant vested tokens\n', '   * @param _to Adress to grant vested tokens\n', '   * @param _value number of tokens to grant\n', '   * @param _start vesting start timestamp\n', '   * @param _vesting vesting finish timestamp\n', '   */\n', '  function grantVestedTokens(\n', '      address _to,\n', '      uint256 _value,\n', '      uint256 _start,\n', '      uint256 _vesting\n', '  ) internal {\n', '    token.transfer(vesting, _value);\n', '    vesting.grantVestedTokens(_to, _value, _start, _vesting);\n', '  }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts/TokenVesting.sol\n', '\n', '/**\n', ' * @title Vesting contract for SDT\n', ' * @dev see https://send.sd/token\n', ' */\n', 'contract TokenVesting is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  address public ico;\n', '  bool public initialized;\n', '  bool public active;\n', '  ERC20Basic public token;\n', '  mapping (address => TokenGrant[]) public grants;\n', '\n', '  uint256 public circulatingSupply = 0;\n', '\n', '  struct TokenGrant {\n', '    uint256 value;\n', '    uint256 claimed;\n', '    uint256 vesting;\n', '    uint256 start;\n', '  }\n', '\n', '  event NewTokenGrant (\n', '    address indexed to,\n', '    uint256 value,\n', '    uint256 start,\n', '    uint256 vesting\n', '  );\n', '\n', '  event NewTokenClaim (\n', '    address indexed holder,\n', '    uint256 value\n', '  );\n', '\n', '  modifier icoResticted() {\n', '    require(msg.sender == ico);\n', '    _;\n', '  }\n', '\n', '  modifier isActive() {\n', '    require(active);\n', '    _;\n', '  }\n', '\n', '  function TokenVesting() public {\n', '    active = false;\n', '  }\n', '\n', '  function init(address _token, address _ico) public onlyOwner {\n', '    token = ERC20Basic(_token);\n', '    ico = _ico;\n', '    initialized = true;\n', '    active = true;\n', '  }\n', '\n', '  function stop() public isActive onlyOwner {\n', '    active = false;\n', '  }\n', '\n', '  function resume() public onlyOwner {\n', '    require(!active);\n', '    require(initialized);\n', '    active = true;\n', '  }\n', '\n', '  /**\n', '  * @dev Grant vested tokens.\n', '  * @notice Only for ICO contract address.\n', '  * @param _to Addres to grant tokens to.\n', '  * @param _value Number of tokens granted.\n', '  * @param _vesting Vesting finish timestamp.\n', '  * @param _start Vesting start timestamp.\n', '  */\n', '  function grantVestedTokens(\n', '      address _to,\n', '      uint256 _value,\n', '      uint256 _start,\n', '      uint256 _vesting\n', '  ) public icoResticted isActive {\n', '    require(_value > 0);\n', '    require(_vesting > _start);\n', '    require(grants[_to].length < 10);\n', '\n', '    TokenGrant memory grant = TokenGrant(_value, 0, _vesting, _start);\n', '    grants[_to].push(grant);\n', '\n', '    NewTokenGrant(_to, _value, _start, _vesting);\n', '  }\n', '\n', '  /**\n', '  * @dev Claim all vested tokens up to current date for myself\n', '  */\n', '  function claimTokens() public {\n', '    claim(msg.sender);\n', '  }\n', '\n', '  /**\n', '  * @dev Claim all vested tokens up to current date in behaviour of an user\n', '  * @param _to address Addres to claim tokens\n', '  */\n', '  function claimTokensFor(address _to) public onlyOwner {\n', '    claim(_to);\n', '  }\n', '\n', '  /**\n', '  * @dev Get claimable tokens\n', '  */\n', '  function claimableTokens() public constant returns (uint256) {\n', '    address _to = msg.sender;\n', '    uint256 numberOfGrants = grants[_to].length;\n', '\n', '    if (numberOfGrants == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 claimable = 0;\n', '    uint256 claimableFor = 0;\n', '    for (uint256 i = 0; i < numberOfGrants; i++) {\n', '      claimableFor = calculateVestedTokens(\n', '        grants[_to][i].value,\n', '        grants[_to][i].vesting,\n', '        grants[_to][i].start,\n', '        grants[_to][i].claimed\n', '      );\n', '      claimable = claimable.add(claimableFor);\n', '    }\n', '    return claimable;\n', '  }\n', '\n', '  /**\n', '  * @dev Get all veted tokens\n', '  */\n', '  function totalVestedTokens() public constant returns (uint256) {\n', '    address _to = msg.sender;\n', '    uint256 numberOfGrants = grants[_to].length;\n', '\n', '    if (numberOfGrants == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 claimable = 0;\n', '    for (uint256 i = 0; i < numberOfGrants; i++) {\n', '      claimable = claimable.add(\n', '        grants[_to][i].value.sub(grants[_to][i].claimed)\n', '      );\n', '    }\n', '    return claimable;\n', '  }\n', '\n', '  /**\n', '  * @dev Calculate vested claimable tokens on current time\n', '  * @param _tokens Number of tokens granted\n', '  * @param _vesting Vesting finish timestamp\n', '  * @param _start Vesting start timestamp\n', '  * @param _claimed Number of tokens already claimed\n', '  */\n', '  function calculateVestedTokens(\n', '      uint256 _tokens,\n', '      uint256 _vesting,\n', '      uint256 _start,\n', '      uint256 _claimed\n', '  ) internal constant returns (uint256) {\n', '    uint256 time = block.timestamp;\n', '\n', '    if (time < _start) {\n', '      return 0;\n', '    }\n', '\n', '    if (time >= _vesting) {\n', '      return _tokens.sub(_claimed);\n', '    }\n', '\n', '    uint256 vestedTokens = _tokens.mul(time.sub(_start)).div(\n', '      _vesting.sub(_start)\n', '    );\n', '\n', '    return vestedTokens.sub(_claimed);\n', '  }\n', '\n', '  /**\n', '  * @dev Claim all vested tokens up to current date\n', '  */\n', '  function claim(address _to) internal {\n', '    uint256 numberOfGrants = grants[_to].length;\n', '\n', '    if (numberOfGrants == 0) {\n', '      return;\n', '    }\n', '\n', '    uint256 claimable = 0;\n', '    uint256 claimableFor = 0;\n', '    for (uint256 i = 0; i < numberOfGrants; i++) {\n', '      claimableFor = calculateVestedTokens(\n', '        grants[_to][i].value,\n', '        grants[_to][i].vesting,\n', '        grants[_to][i].start,\n', '        grants[_to][i].claimed\n', '      );\n', '      claimable = claimable.add(claimableFor);\n', '      grants[_to][i].claimed = grants[_to][i].claimed.add(claimableFor);\n', '    }\n', '\n', '    token.transfer(_to, claimable);\n', '    circulatingSupply += claimable;\n', '\n', '    NewTokenClaim(_to, claimable);\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '}\n', '\n', '// File: contracts/TokenSale.sol\n', '\n', '/**\n', ' * @title Crowdsale contract\n', ' * @dev see https://send.sd/crowdsale\n', ' */\n', 'contract TokenSale is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  /* Leave 10 tokens margin error in order to succedd\n', '  with last pool allocation in case hard cap is reached */\n', '  uint256 constant public HARD_CAP = 70000000 ether;\n', '  uint256 constant public VESTING_TIME = 90 days;\n', '  uint256 public weiUsdRate = 1;\n', '  uint256 public btcUsdRate = 1;\n', '\n', '  uint256 public vestingEnds;\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '  address public wallet;\n', '\n', '  uint256 public vestingStarts;\n', '\n', '  uint256 public soldTokens;\n', '  uint256 public raised;\n', '\n', '  bool public activated = false;\n', '  bool public isStopped = false;\n', '  bool public isFinalized = false;\n', '\n', '  BurnableToken public token;\n', '  TokenVesting public vesting;\n', '\n', '  event NewBuyer(\n', '    address indexed holder,\n', '    uint256 sndAmount,\n', '    uint256 usdAmount,\n', '    uint256 ethAmount,\n', '    uint256 btcAmount\n', '  );\n', '\n', '  event ClaimedTokens(\n', '    address indexed _token,\n', '    address indexed _controller,\n', '    uint256 _amount\n', '  );\n', '\n', '  modifier validAddress(address _address) {\n', '    require(_address != address(0x0));\n', '    _;\n', '  }\n', '\n', '  modifier isActive() {\n', '    require(activated);\n', '    require(!isStopped);\n', '    require(!isFinalized);\n', '    require(block.timestamp >= startTime);\n', '    require(block.timestamp <= endTime);\n', '    _;\n', '  }\n', '\n', '  function TokenSale(\n', '      uint256 _startTime,\n', '      uint256 _endTime,\n', '      address _wallet,\n', '      uint256 _vestingStarts\n', '  ) public validAddress(_wallet) {\n', '    require(_startTime > block.timestamp - 60);\n', '    require(_endTime > startTime);\n', '    require(_vestingStarts > startTime);\n', '\n', '    vestingStarts = _vestingStarts;\n', '    vestingEnds = vestingStarts.add(VESTING_TIME);\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  /**\n', '   * @dev set an exchange rate in wei\n', '   * @param _rate uint256 The new exchange rate\n', '   */\n', '  function setWeiUsdRate(uint256 _rate) public onlyOwner {\n', '    require(_rate > 0);\n', '    weiUsdRate = _rate;\n', '  }\n', '\n', '  /**\n', '   * @dev set an exchange rate in satoshis\n', '   * @param _rate uint256 The new exchange rate\n', '   */\n', '  function setBtcUsdRate(uint256 _rate) public onlyOwner {\n', '    require(_rate > 0);\n', '    btcUsdRate = _rate;\n', '  }\n', '\n', '  /**\n', '   * @dev initialize the contract and set token\n', '   */\n', '  function initialize(\n', '      address _sdt,\n', '      address _vestingContract,\n', '      address _icoCostsPool,\n', '      address _distributionContract\n', '  ) public validAddress(_sdt) validAddress(_vestingContract) onlyOwner {\n', '    require(!activated);\n', '    activated = true;\n', '\n', '    token = BurnableToken(_sdt);\n', '    vesting = TokenVesting(_vestingContract);\n', '\n', '    // 1% reserve is released on deploy\n', '    token.transfer(_icoCostsPool, 7000000 ether);\n', '    token.transfer(_distributionContract, 161000000 ether);\n', '\n', '    //early backers allocation\n', '    uint256 threeMonths = vestingStarts.add(90 days);\n', '\n', '    updateStats(0, 43387693 ether);\n', '    grantVestedTokens(0x02f807E6a1a59F8714180B301Cba84E76d3B4d06, 22572063 ether, vestingStarts, threeMonths);\n', '    grantVestedTokens(0x3A1e89dD9baDe5985E7Eb36E9AFd200dD0E20613, 15280000 ether, vestingStarts, threeMonths);\n', '    grantVestedTokens(0xA61c9A0E96eC7Ceb67586fC8BFDCE009395D9b21, 250000 ether, vestingStarts, threeMonths);\n', '    grantVestedTokens(0x26C9899eA2F8940726BbCC79483F2ce07989314E, 100000 ether, vestingStarts, threeMonths);\n', '    grantVestedTokens(0xC88d5031e00BC316bE181F0e60971e8fEdB9223b, 1360000 ether, vestingStarts, threeMonths);\n', '    grantVestedTokens(0x38f4cAD7997907741FA0D912422Ae59aC6b83dD1, 250000 ether, vestingStarts, threeMonths);\n', '    grantVestedTokens(0x2b2992e51E86980966c42736C458e2232376a044, 105000 ether, vestingStarts, threeMonths);\n', '    grantVestedTokens(0xdD0F60610052bE0976Cf8BEE576Dbb3a1621a309, 140000 ether, vestingStarts, threeMonths);\n', '    grantVestedTokens(0xd61B4F33D3413827baa1425E2FDa485913C9625B, 740000 ether, vestingStarts, threeMonths);\n', '    grantVestedTokens(0xE6D4a77D01C680Ebbc0c84393ca598984b3F45e3, 505630 ether, vestingStarts, threeMonths);\n', '    grantVestedTokens(0x35D3648c29Ac180D5C7Ef386D52de9539c9c487a, 150000 ether, vestingStarts, threeMonths);\n', '    grantVestedTokens(0x344a6130d187f51ef0DAb785e10FaEA0FeE4b5dE, 967500 ether, vestingStarts, threeMonths);\n', '    grantVestedTokens(0x026cC76a245987f3420D0FE30070B568b4b46F68, 967500 ether, vestingStarts, threeMonths);\n', '  }\n', '\n', '  function finalize(\n', '      address _poolA,\n', '      address _poolB,\n', '      address _poolC,\n', '      address _poolD\n', '  )\n', '      public\n', '      validAddress(_poolA)\n', '      validAddress(_poolB)\n', '      validAddress(_poolC)\n', '      validAddress(_poolD)\n', '      onlyOwner\n', '  {\n', '    grantVestedTokens(_poolA, 175000000 ether, vestingStarts, vestingStarts.add(7 years));\n', '    grantVestedTokens(_poolB, 168000000 ether, vestingStarts, vestingStarts.add(7 years));\n', '    grantVestedTokens(_poolC, 70000000 ether, vestingStarts, vestingStarts.add(7 years));\n', '    grantVestedTokens(_poolD, 48999990 ether, vestingStarts, vestingStarts.add(4 years));\n', '\n', '    token.burn(token.balanceOf(this));\n', '  }\n', '\n', '  function stop() public onlyOwner isActive returns(bool) {\n', '    isStopped = true;\n', '    return true;\n', '  }\n', '\n', '  function resume() public onlyOwner returns(bool) {\n', '    require(isStopped);\n', '    isStopped = false;\n', '    return true;\n', '  }\n', '\n', '  function () public payable {\n', '    uint256 usd = msg.value.div(weiUsdRate);\n', '    doPurchase(usd, msg.value, 0, msg.sender, vestingEnds);\n', '    forwardFunds();\n', '  }\n', '\n', '  function btcPurchase(\n', '      address _beneficiary,\n', '      uint256 _btcValue\n', '  ) public onlyOwner validAddress(_beneficiary) {\n', '    uint256 usd = _btcValue.div(btcUsdRate);\n', '    doPurchase(usd, 0, _btcValue, _beneficiary, vestingEnds);\n', '  }\n', '\n', '  /**\n', '  * @dev Number of tokens is given by:\n', '  * usd * 100 ether / 14\n', '  */\n', '  function computeTokens(uint256 _usd) public pure returns(uint256) {\n', '    return _usd.mul(100 ether).div(14);\n', '  }\n', '\n', '  //////////\n', '  // Safety Methods\n', '  //////////\n', '  /// @notice This method can be used by the controller to extract mistakenly\n', '  ///  sent tokens to this contract.\n', '  /// @param _token The address of the token contract that you want to recover\n', '  ///  set to 0 in case you want to extract ether.\n', '  function claimTokens(address _token) public onlyOwner {\n', '    require(_token != address(token));\n', '    if (_token == 0x0) {\n', '      owner.transfer(this.balance);\n', '      return;\n', '    }\n', '\n', '    ERC20Basic erc20token = ERC20Basic(_token);\n', '    uint256 balance = erc20token.balanceOf(this);\n', '    erc20token.transfer(owner, balance);\n', '    ClaimedTokens(_token, owner, balance);\n', '  }\n', '\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  /**\n', "   * @notice The owner of this contract is the owner of token's contract\n", '   * @param _usd amount invested in USD\n', '   * @param _eth amount invested in ETH y contribution was made in ETH, 0 otherwise\n', '   * @param _btc amount invested in BTC y contribution was made in BTC, 0 otherwise\n', '   * @param _address Address to send tokens to\n', '   * @param _vestingEnds vesting finish timestamp\n', '   */\n', '  function doPurchase(\n', '      uint256 _usd,\n', '      uint256 _eth,\n', '      uint256 _btc,\n', '      address _address,\n', '      uint256 _vestingEnds\n', '  )\n', '      internal\n', '      isActive\n', '      returns(uint256)\n', '  {\n', '    require(_usd >= 10);\n', '\n', '    uint256 soldAmount = computeTokens(_usd);\n', '\n', '    updateStats(_usd, soldAmount);\n', '    grantVestedTokens(_address, soldAmount, vestingStarts, _vestingEnds);\n', '    NewBuyer(_address, soldAmount, _usd, _eth, _btc);\n', '\n', '    return soldAmount;\n', '  }\n', '\n', '  /**\n', '   * @dev Helper function to update collected and allocated tokens stats\n', '   */\n', '  function updateStats(uint256 usd, uint256 tokens) internal {\n', '    raised = raised.add(usd);\n', '    soldTokens = soldTokens.add(tokens);\n', '\n', '    require(soldTokens <= HARD_CAP);\n', '  }\n', '\n', '  /**\n', '   * @dev grant vested tokens\n', '   * @param _to Adress to grant vested tokens\n', '   * @param _value number of tokens to grant\n', '   * @param _start vesting start timestamp\n', '   * @param _vesting vesting finish timestamp\n', '   */\n', '  function grantVestedTokens(\n', '      address _to,\n', '      uint256 _value,\n', '      uint256 _start,\n', '      uint256 _vesting\n', '  ) internal {\n', '    token.transfer(vesting, _value);\n', '    vesting.grantVestedTokens(_to, _value, _start, _vesting);\n', '  }\n', '}']
