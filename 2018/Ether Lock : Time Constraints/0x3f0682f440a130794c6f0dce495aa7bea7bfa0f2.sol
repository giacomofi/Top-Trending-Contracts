['pragma solidity ^0.4.24;\n', '\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "Assertion Failed");\n', '        return c;\n', '    }\n', '    \n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "Assertion Failed");\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '}\n', '\n', 'interface IERC20 {\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '}\n', '\n', 'interface AddressRegistry {\n', '    function getAddr(string name) external view returns(address);\n', '}\n', '\n', 'interface Kyber {\n', '    function trade(\n', '        address src,\n', '        uint srcAmount,\n', '        address dest,\n', '        address destAddress,\n', '        uint maxDestAmount,\n', '        uint minConversionRate,\n', '        address walletId\n', '    ) external payable returns (uint);\n', '\n', '    function getExpectedRate(\n', '        address src,\n', '        address dest,\n', '        uint srcQty\n', '    ) external view returns (uint, uint);\n', '}\n', '\n', '\n', 'contract Registry {\n', '    address public addressRegistry;\n', '    modifier onlyAdmin() {\n', '        require(\n', '            msg.sender == getAddress("admin"),\n', '            "Permission Denied"\n', '        );\n', '        _;\n', '    }\n', '    function getAddress(string name) internal view returns(address) {\n', '        AddressRegistry addrReg = AddressRegistry(addressRegistry);\n', '        return addrReg.getAddr(name);\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract Trade is Registry {\n', '\n', '    using SafeMath for uint;\n', '    using SafeMath for uint256;\n', '\n', '    event KyberTrade(\n', '        address src,\n', '        uint srcAmt,\n', '        address dest,\n', '        uint destAmt,\n', '        address beneficiary,\n', '        uint minConversionRate,\n', '        address affiliate\n', '    );\n', '\n', '    function getExpectedPrice(\n', '        address src,\n', '        address dest,\n', '        uint srcAmt\n', '    ) public view returns (uint, uint) \n', '    {\n', '        Kyber kyberFunctions = Kyber(getAddress("kyber"));\n', '        return kyberFunctions.getExpectedRate(\n', '            src,\n', '            dest,\n', '            srcAmt\n', '        );\n', '    }\n', '\n', '    function approveKyber(address[] tokenArr) public {\n', '        address kyberProxy = getAddress("kyber");\n', '        for (uint i = 0; i < tokenArr.length; i++) {\n', '            IERC20 tokenFunctions = IERC20(tokenArr[i]);\n', '            tokenFunctions.approve(kyberProxy, 2**256 - 1);\n', '        }\n', '    }\n', '\n', '    function executeTrade(\n', '        address src, // token to sell\n', '        address dest, // token to buy\n', '        uint srcAmt, // amount of token for sell\n', '        uint minConversionRate, // minimum slippage rate\n', '        uint maxDestAmt // max amount of dest token\n', '    ) public payable returns (uint destAmt)\n', '    {\n', '\n', '        address eth = getAddress("eth");\n', '        uint ethQty = getToken(\n', '            msg.sender,\n', '            src,\n', '            srcAmt,\n', '            eth\n', '        );\n', '        \n', '        // Interacting with Kyber Proxy Contract\n', '        Kyber kyberFunctions = Kyber(getAddress("kyber"));\n', '        destAmt = kyberFunctions.trade.value(ethQty)(\n', '            src,\n', '            srcAmt,\n', '            dest,\n', '            msg.sender,\n', '            maxDestAmt,\n', '            minConversionRate,\n', '            getAddress("admin")\n', '        );\n', '\n', '        // maxDestAmt usecase implementated\n', '        if (src == eth && address(this).balance > 0) {\n', '            msg.sender.transfer(address(this).balance);\n', '        } else if (src != eth) { // as there is no balanceOf of eth\n', '            IERC20 srcTkn = IERC20(src);\n', '            uint srcBal = srcTkn.balanceOf(address(this));\n', '            if (srcBal > 0) {\n', '                srcTkn.transfer(msg.sender, srcBal);\n', '            }\n', '        }\n', '\n', '        emit KyberTrade(\n', '            src,\n', '            srcAmt,\n', '            dest,\n', '            destAmt,\n', '            msg.sender,\n', '            minConversionRate,\n', '            getAddress("admin")\n', '        );\n', '\n', '    }\n', '\n', '    function getToken(\n', '        address trader,\n', '        address src,\n', '        uint srcAmt,\n', '        address eth\n', '    ) internal returns (uint ethQty)\n', '    {\n', '        if (src == eth) {\n', '            require(msg.value == srcAmt, "Invalid Operation");\n', '            ethQty = srcAmt;\n', '        } else {\n', '            IERC20 tokenFunctions = IERC20(src);\n', '            tokenFunctions.transferFrom(trader, address(this), srcAmt);\n', '            ethQty = 0;\n', '        }\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract InstaKyber is Trade {\n', '\n', '    constructor(address rAddr) public {\n', '        addressRegistry = rAddr;\n', '    }\n', '\n', '    function () public payable {}\n', '\n', '}']