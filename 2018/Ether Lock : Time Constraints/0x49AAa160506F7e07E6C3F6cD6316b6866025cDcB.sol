['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '  function add(uint a, uint b) internal pure returns (uint c) {\n', '    c = a + b;\n', '    require(c >= a);\n', '  }\n', '\n', '  function sub(uint a, uint b) internal pure returns (uint c) {\n', '    require(b <= a);\n', '    c = a - b;\n', '  }\n', '\n', '  function mul(uint a, uint b) internal pure returns (uint c) {\n', '    c = a * b;\n', '    require(a == 0 || c / a == b);\n', '  }\n', '\n', '  function div(uint a, uint b) internal pure returns (uint c) {\n', '    require(b > 0);\n', '    c = a / b;\n', '  }\n', '}\n', '\n', 'library ExtendedMath {\n', '\n', '  //return the smaller of the two inputs (a or b)\n', '  function limitLessThan(uint a, uint b) internal pure returns (uint c) {\n', '    if(a > b) return b;\n', '    return a;\n', '  }\n', '}\n', '\n', 'contract ERC20Interface {\n', '  function totalSupply() public constant returns (uint);\n', '  function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '  function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '  function transfer(address to, uint tokens) public returns (bool success);\n', '  function approve(address spender, uint tokens) public returns (bool success);\n', '  function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '  event Transfer(address indexed from, address indexed to, uint tokens);\n', '  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract ApproveAndCallFallBack {\n', '  function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', 'contract Owned {\n', '\n', '  address public owner;\n', '  address public newOwner;\n', '  event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '  function Owned() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    newOwner = _newOwner;\n', '  }\n', '\n', '  function acceptOwnership() public {\n', '    require(msg.sender == newOwner);\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '    newOwner = address(0);\n', '  }\n', '}\n', '\n', 'contract Lira is ERC20Interface, Owned {\n', '\n', '  bool locked = false;\n', '  bytes32 public challengeNumber;\n', '  address public lastRewardTo;\n', '  using SafeMath for uint;\n', '  using ExtendedMath for uint;\n', '  string public symbol;\n', '  string public  name;\n', '  uint8 public decimals;\n', '  uint public _totalSupply;\n', '  uint public latestDifficultyPeriodStarted;\n', '  uint public epochCount; // Blocks mined\n', '  uint public _BLOCKS_PER_READJUSTMENT = 1024;\n', '  uint public  _MINIMUM_TARGET = 2**16;\n', '  uint public  _MAXIMUM_TARGET = 2**234;\n', '  uint public miningTarget;\n', '  uint public rewardEra;\n', '  uint public maxSupplyForEra;\n', '  uint public lastRewardAmount;\n', '  uint public lastRewardEthBlockNumber;\n', '  uint public tokensMinted;\n', '\n', '  mapping(bytes32 => bytes32) solutionForChallenge;\n', '  mapping(address => uint) balances;\n', '  mapping(address => mapping(address => uint)) allowed;\n', '\n', '  event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\n', '\n', '  function Lira() public onlyOwner{\n', '\n', '    symbol = "LIRA";\n', '    name = "Lira Cash";\n', '    decimals = 8;\n', '\n', '    _totalSupply = 21000000 * 10**uint(decimals);\n', '\n', '    if(locked) revert();\n', '    locked = true;\n', '    tokensMinted = 0;\n', '    rewardEra = 0;\n', '    maxSupplyForEra = _totalSupply.div(2);\n', '    miningTarget = _MAXIMUM_TARGET;\n', '    latestDifficultyPeriodStarted = block.number;\n', '    _startNewMiningEpoch();\n', '\n', '  }\n', '\n', '  function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success) {\n', '\n', '    bytes32 digest =  keccak256(challengeNumber, msg.sender, nonce );\n', '\n', '    if (digest != challenge_digest) revert();\n', '    if(uint256(digest) > miningTarget) revert();\n', '\n', '    bytes32 solution = solutionForChallenge[challengeNumber];\n', '    solutionForChallenge[challengeNumber] = digest;\n', '\n', '    // Prevent duplicate answers and duplicate rewards\n', '    if(solution != 0x0) revert();\n', '\n', '    uint reward_amount = getMiningReward();\n', '    balances[msg.sender] = balances[msg.sender].add(reward_amount);\n', '    tokensMinted = tokensMinted.add(reward_amount);\n', '    assert(tokensMinted <= maxSupplyForEra);\n', '\n', '    lastRewardTo = msg.sender;\n', '    lastRewardAmount = reward_amount;\n', '    lastRewardEthBlockNumber = block.number;\n', '    _startNewMiningEpoch();\n', '\n', '    Mint(msg.sender, reward_amount, epochCount, challengeNumber );\n', '    return true;\n', '  }\n', '\n', '  function _startNewMiningEpoch() internal {\n', '\n', '    if( tokensMinted.add(getMiningReward()) > maxSupplyForEra && rewardEra < 39){\n', '      rewardEra = rewardEra + 1;\n', '    }\n', '\n', '    maxSupplyForEra = _totalSupply - _totalSupply.div( 2**(rewardEra + 1));\n', '    epochCount = epochCount.add(1);\n', '\n', '    if(epochCount % _BLOCKS_PER_READJUSTMENT == 0){\n', '      _reAdjustDifficulty();\n', '    }\n', '\n', '    challengeNumber = block.blockhash(block.number - 1);\n', '\n', '  }\n', '\n', '  function _reAdjustDifficulty() internal {\n', '\n', '    uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\n', '    uint epochsMined = _BLOCKS_PER_READJUSTMENT; //256\n', '    uint targetEthBlocksPerDiffPeriod = epochsMined * 60;\n', '\n', '    if( ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod ){\n', '      uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div( ethBlocksSinceLastDifficultyPeriod );\n', '      uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\n', '      miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));\n', '    } else {\n', '      uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div( targetEthBlocksPerDiffPeriod );\n', '      uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000);\n', '      miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));\n', '    }\n', '\n', '    latestDifficultyPeriodStarted = block.number;\n', '\n', '    if(miningTarget < _MINIMUM_TARGET){\n', '      miningTarget = _MINIMUM_TARGET;\n', '    }\n', '\n', '    if(miningTarget > _MAXIMUM_TARGET){\n', '      miningTarget = _MAXIMUM_TARGET;\n', '    }\n', '  }\n', '\n', '  function getChallengeNumber() public constant returns (bytes32) {\n', '    return challengeNumber;\n', '  }\n', '\n', '  function getMiningDifficulty() public constant returns (uint) {\n', '    return _MAXIMUM_TARGET.div(miningTarget);\n', '  }\n', '\n', '  function getMiningTarget() public constant returns (uint) {\n', '    return miningTarget;\n', '  }\n', '\n', '  function getMiningReward() public constant returns (uint) {\n', '    return (50 * 10**uint(decimals) ).div( 2**rewardEra ) ;\n', '  }\n', '\n', '  function getMintDigest(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number) public view returns (bytes32 digesttest) {\n', '    bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\n', '    return digest;\n', '  }\n', '\n', '  function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns (bool success) {\n', '    bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\n', '    if(uint256(digest) > testTarget) revert();\n', '    return (digest == challenge_digest);\n', '  }\n', '\n', '  function totalSupply() public constant returns (uint) {\n', '    return _totalSupply  - balances[address(0)];\n', '  }\n', '\n', '  function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '    return balances[tokenOwner];\n', '  }\n', '\n', '  function transfer(address to, uint tokens) public returns (bool success) {\n', '    balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    Transfer(msg.sender, to, tokens);\n', '    return true;\n', '  }\n', '\n', '  function transferExtra(address to, uint tokens, uint extra) public returns (bool success) {\n', '    balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    Transfer(msg.sender, to, tokens);\n', '    return true;\n', '  }\n', '\n', '  function approve(address spender, uint tokens) public returns (bool success) {\n', '    allowed[msg.sender][spender] = tokens;\n', '    Approval(msg.sender, spender, tokens);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '    balances[from] = balances[from].sub(tokens);\n', '    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    Transfer(from, to, tokens);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '    return allowed[tokenOwner][spender];\n', '  }\n', '\n', '  function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '    allowed[msg.sender][spender] = tokens;\n', '    Approval(msg.sender, spender, tokens);\n', '    ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '    return true;\n', '  }\n', '\n', '  function () public payable {\n', '    revert();\n', '  }\n', '\n', '  function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '    return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '  }\n', '\n', '}']