['/*\n', '    xgr_token_db.sol\n', '    2.0.0\n', '    \n', "    Rajci 'iFA' Andor @ ifa@fusionwallet.io\n", '*/\n', 'pragma solidity 0.4.18;\n', '\n', 'contract SafeMath {\n', '    /* Internals */\n', '    function safeAdd(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        if ( b > 0 ) {\n', '            assert( a + b > a );\n', '        }\n', '        return a + b;\n', '    }\n', '    function safeSub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        if ( b > 0 ) {\n', '            assert( a - b < a );\n', '        }\n', '        return a - b;\n', '    }\n', '    function safeMul(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '    function safeDiv(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        return a / b;\n', '    }\n', '}\n', '\n', 'contract Owned {\n', '    /* Variables */\n', '    address public owner = msg.sender;\n', '    /* Externals */\n', '    function replaceOwner(address newOwner) external returns(bool success) {\n', '        require( isOwner() );\n', '        owner = newOwner;\n', '        return true;\n', '    }\n', '    /* Internals */\n', '    function isOwner() internal view returns(bool) {\n', '        return owner == msg.sender;\n', '    }\n', '    /* Modifiers */\n', '    modifier onlyForOwner {\n', '        require( isOwner() );\n', '        _;\n', '    }\n', '}\n', '\n', 'contract TokenDB is SafeMath, Owned {\n', '    /* Structures */\n', '    struct allowance_s {\n', '        uint256 amount;\n', '        uint256 nonce;\n', '    }\n', '    struct deposits_s {\n', '        address addr;\n', '        uint256 amount;\n', '        uint256 start;\n', '        uint256 end;\n', '        uint256 interestOnEnd;\n', '        uint256 interestBeforeEnd;\n', '        uint256 interestFee;\n', '        uint256 interestMultiplier;\n', '        bool    closeable;\n', '        bool    valid;\n', '    }\n', '    /* Variables */\n', '    mapping(address => mapping(address => allowance_s)) public allowance;\n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(uint256 => deposits_s) private deposits;\n', '    mapping(address => uint256) public lockedBalances;\n', '    address public tokenAddress;\n', '    address public depositsAddress;\n', '    uint256 public depositsCounter;\n', '    uint256 public totalSupply;\n', '    /* Constructor */\n', '    /* Externals */\n', '    function changeTokenAddress(address newTokenAddress) external onlyForOwner {\n', '        tokenAddress = newTokenAddress;\n', '    }\n', '    function changeDepositsAddress(address newDepositsAddress) external onlyForOwner {\n', '        depositsAddress = newDepositsAddress;\n', '    }\n', '    function openDeposit(address addr, uint256 amount, uint256 end, uint256 interestOnEnd,\n', '        uint256 interestBeforeEnd, uint256 interestFee, uint256 multiplier, bool closeable) external onlyForDeposits returns(bool success, uint256 DID) {\n', '        depositsCounter += 1;\n', '        DID = depositsCounter;\n', '        lockedBalances[addr] = safeAdd(lockedBalances[addr], amount);\n', '        deposits[DID] = deposits_s(\n', '            addr,\n', '            amount,\n', '            block.number,\n', '            end,\n', '            interestOnEnd,\n', '            interestBeforeEnd,\n', '            interestFee,\n', '            multiplier,\n', '            closeable,\n', '            true\n', '        );\n', '        return (true, DID);\n', '    }\n', '    function closeDeposit(uint256 DID) external onlyForDeposits returns (bool success) {\n', '        require( deposits[DID].valid );\n', '        delete deposits[DID].valid;\n', '        lockedBalances[deposits[DID].addr] = safeSub(lockedBalances[deposits[DID].addr], deposits[DID].amount);\n', '        return true;\n', '    }\n', '    function transfer(address from, address to, uint256 amount, uint256 fee) external onlyForToken returns(bool success) {\n', '        balanceOf[from] = safeSub(balanceOf[from], safeAdd(amount, fee));\n', '        balanceOf[to] = safeAdd(balanceOf[to], amount);\n', '        totalSupply = safeSub(totalSupply, fee);\n', '        return true;\n', '    }\n', '    function increase(address owner, uint256 value) external onlyForToken returns(bool success) {\n', '        balanceOf[owner] = safeAdd(balanceOf[owner], value);\n', '        totalSupply = safeAdd(totalSupply, value);\n', '        return true;\n', '    }\n', '    function decrease(address owner, uint256 value) external onlyForToken returns(bool success) {\n', '        require( safeSub(balanceOf[owner], safeAdd(lockedBalances[owner], value)) >= 0 );\n', '        balanceOf[owner] = safeSub(balanceOf[owner], value);\n', '        totalSupply = safeSub(totalSupply, value);\n', '        return true;\n', '    }\n', '    function setAllowance(address owner, address spender, uint256 amount, uint256 nonce) external onlyForToken returns(bool success) {\n', '        allowance[owner][spender].amount = amount;\n', '        allowance[owner][spender].nonce = nonce;\n', '        return true;\n', '    }\n', '    /* Constants */\n', '    function getAllowance(address owner, address spender) public constant returns(bool success, uint256 remaining, uint256 nonce) {\n', '        return ( true, allowance[owner][spender].amount, allowance[owner][spender].nonce );\n', '    }\n', '    function getDeposit(uint256 UID) public constant returns(address addr, uint256 amount, uint256 start,\n', '        uint256 end, uint256 interestOnEnd, uint256 interestBeforeEnd, uint256 interestFee, uint256 interestMultiplier, bool closeable, bool valid) {\n', '        addr = deposits[UID].addr;\n', '        amount = deposits[UID].amount;\n', '        start = deposits[UID].start;\n', '        end = deposits[UID].end;\n', '        interestOnEnd = deposits[UID].interestOnEnd;\n', '        interestBeforeEnd = deposits[UID].interestBeforeEnd;\n', '        interestFee = deposits[UID].interestFee;\n', '        interestMultiplier = deposits[UID].interestMultiplier;\n', '        closeable = deposits[UID].closeable;\n', '        valid = deposits[UID].valid;\n', '    }\n', '    /* Modifiers */\n', '    modifier onlyForToken {\n', '        require( msg.sender == tokenAddress );\n', '        _;\n', '    }\n', '    modifier onlyForDeposits {\n', '        require( msg.sender == depositsAddress );\n', '        _;\n', '    }\n', '}']