['pragma solidity 0.4.25;\n', '// ----------------------------------------------------------------------------\n', '// &#39;Gas Fund&#39; token contract, having Crowdsale and Investment functionality\n', '//\n', '// Contract Owner : 0x956881bc9Fbef7a2D176bfB371Be9Ab3e66683fD\n', '// Symbol      \t  : GAF\n', '// Name           : Gas Fund\n', '// Total supply   : 50,000,000,000\n', '// Decimals       : 18\n', '//\n', '// Copyright &#169; 2018 onwards Gas Fund Inc. (https://gas-fund.com)\n', '// Contract designed by GDO Infotech Pvt Ltd (www.GDO.co.in)\n', '// ----------------------------------------------------------------------------\n', '    \n', '    /**\n', '     * @title SafeMath\n', '     * @dev Math operations with safety checks that throw on error\n', '     */\n', '    library SafeMath {\n', '      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '          return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '      }\n', '    \n', '      function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '      }\n', '    \n', '      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '      }\n', '    \n', '      function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '      }\n', '    }\n', '    \n', '    contract owned {\n', '        address public owner;\n', '    \tusing SafeMath for uint256;\n', '    \t\n', '         constructor () public {\n', '            owner = msg.sender;\n', '        }\n', '    \n', '        modifier onlyOwner {\n', '            require(msg.sender == owner);\n', '            _;\n', '        }\n', '    \n', '        function transferOwnership(address newOwner) onlyOwner public {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '    \n', '    interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '    \n', '    contract TokenERC20 {\n', '        // Public variables of the token\n', '        using SafeMath for uint256;\n', '    \tstring public name;\n', '        string public symbol;\n', '        uint8 public decimals = 18;\n', '        // 18 decimals is the strongly suggested default, avoid changing it\n', '        uint256 public totalSupply;\n', '    \n', '        // This creates an array with all balances\n', '        mapping (address => uint256) public balanceOf;\n', '        mapping (address => mapping (address => uint256)) public allowance;\n', '    \n', '        // This generates a public event on the blockchain that will notify clients\n', '        event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '        // This notifies clients about the amount burnt\n', '        event Burn(address indexed from, uint256 value);\n', '    \n', '        /**\n', '         * Constrctor function\n', '         *\n', '         * Initializes contract with initial supply tokens to the creator of the contract\n', '         */\n', '        constructor (\n', '            uint256 initialSupply,\n', '            string tokenName,\n', '            string tokenSymbol\n', '        ) public {\n', '            totalSupply = initialSupply.mul(1 ether);           // Update total supply with the decimal amount\n', '            uint256 ownerTokens = 8000000;\n', '            balanceOf[msg.sender] = ownerTokens.mul(1 ether);   // Give the creator 8,000,000 tokens\n', '            balanceOf[this]=totalSupply.sub(ownerTokens.mul(1 ether));// Remaining tokens in the contract address for ICO and Dividends\n', '            name = tokenName;                                   // Set the name for display purposes\n', '            symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '        }\n', '    \n', '        /**\n', '         * Internal transfer, only can be called by this contract\n', '         */\n', '        function _transfer(address _from, address _to, uint _value) internal {\n', '            // Prevent transfer to 0x0 address. Use burn() instead\n', '            require(_to != 0x0);\n', '            // Check if the sender has enough\n', '            require(balanceOf[_from] >= _value);\n', '            // Check for overflows\n', '            require(balanceOf[_to].add(_value) > balanceOf[_to]);\n', '            // Save this for an assertion in the future\n', '            uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\n', '            // Subtract from the sender\n', '            balanceOf[_from] = balanceOf[_from].sub(_value);\n', '            // Add the same to the recipient\n', '            balanceOf[_to] = balanceOf[_to].add(_value);\n', '            emit Transfer(_from, _to, _value);\n', '            // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '            assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n', '        }\n', '    \n', '        /**\n', '         * Transfer tokens\n', '         *\n', '         * Send `_value` tokens to `_to` from your account\n', '         *\n', '         * @param _to The address of the recipient\n', '         * @param _value the amount to send\n', '         */\n', '        function transfer(address _to, uint256 _value) public {\n', '            _transfer(msg.sender, _to, _value);\n', '        }\n', '    \n', '        /**\n', '         * Transfer tokens from other address\n', '         *\n', '         * Send `_value` tokens to `_to` in behalf of `_from`\n', '         *\n', '         * @param _from The address of the sender\n', '         * @param _to The address of the recipient\n', '         * @param _value the amount to send\n', '         */\n', '        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '            require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '            _transfer(_from, _to, _value);\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * Set allowance for other address\n', '         *\n', '         * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '         *\n', '         * @param _spender The address authorized to spend\n', '         * @param _value the max amount they can spend\n', '         */\n', '        function approve(address _spender, uint256 _value) public\n', '            returns (bool success) {\n', '            allowance[msg.sender][_spender] = _value;\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * Set allowance for other address and notify\n', '         *\n', '         * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '         *\n', '         * @param _spender The address authorized to spend\n', '         * @param _value the max amount they can spend\n', '         * @param _extraData some extra information to send to the approved contract\n', '         */\n', '        function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '            public\n', '            returns (bool success) {\n', '            tokenRecipient spender = tokenRecipient(_spender);\n', '            if (approve(_spender, _value)) {\n', '                spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '                return true;\n', '            }\n', '        }\n', '    \n', '        /**\n', '         * Destroy tokens\n', '         *\n', '         * Remove `_value` tokens from the system irreversibly\n', '         *\n', '         * @param _value the amount of money to burn\n', '         */\n', '        function burn(uint256 _value) public returns (bool success) {\n', '            require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);            // Subtract from the sender\n', '            totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\n', '           emit Burn(msg.sender, _value);\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * Destroy tokens from other account\n', '         *\n', '         * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '         *\n', '         * @param _from the address of the sender\n', '         * @param _value the amount of money to burn\n', '         */\n', '        function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '            require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '            require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '            balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the targeted balance\n', '            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);             // Subtract from the sender&#39;s allowance\n', '            totalSupply = totalSupply.sub(_value);                              // Update totalSupply\n', '          emit  Burn(_from, _value);\n', '            return true;\n', '        }\n', '    }\n', '    \n', '    /********************************************************/\n', '    /*       MAIN GAS FUND TOKEN CONTRACT STARTS HERE       */\n', '    /********************************************************/\n', '    \n', '    contract GasFund is owned, TokenERC20 {\n', '        using SafeMath for uint256;\n', '        \n', '        //**************************************************//\n', '        //------------- Code for the GAF Token -------------//\n', '        //**************************************************//\n', '        \n', '        // Public variables of the token\n', '    \tstring internal tokenName = "Gas Fund";\n', '        string internal tokenSymbol = "GAF";\n', '        uint256 internal initialSupply = 50000000000; \t// Initial supply of the tokens   \n', '\t\n', '    \t// Records for the fronzen accounts \n', '        mapping (address => bool) public frozenAccount;\n', '    \n', '        // This generates a public event on the blockchain that will notify clients \n', '        event FrozenFunds(address target, bool frozen);\n', '    \n', '        // Initializes contract with initial supply of tokens sent to the creator as well as contract \n', '        constructor () TokenERC20(initialSupply, tokenName, tokenSymbol) public {\n', '            tokenHolderExist[msg.sender] = true;\n', '            tokenHolders.push(msg.sender);\n', '        }\n', '    \n', '         \n', '        /**\n', '         * Transfer tokens - Internal transfer, only can be called by this contract\n', '         * \n', '         * This checks if the sender or recipient is not fronzen\n', '         * \n', '         * This keeps the track of total token holders and adds new holders as well.\n', '         *\n', '         * Send `_value` tokens to `_to` from your account\n', '         *\n', '         * @param _from The address of the sender\n', '         * @param _to The address of the recipient\n', '         * @param _value the amount of tokens to send\n', '         */\n', '        function _transfer(address _from, address _to, uint _value) internal {\n', '            require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n', '            require (balanceOf[_from] >= _value);               // Check if the sender has enough\n', '            require (balanceOf[_to].add(_value) >= balanceOf[_to]); // Check for overflows\n', '            require(!frozenAccount[_from]);                     // Check if sender is frozen\n', '            require(!frozenAccount[_to]);                       // Check if recipient is frozen\n', '            balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the sender\n', '            balanceOf[_to] = balanceOf[_to].add(_value);        // Add the same to the recipient\n', '            //if receiver does not exist in tokenHolderExist mapping, then add into it as well as add in tokenHolders array\n', '            if(!tokenHolderExist[_to]){\n', '                tokenHolderExist[_to] = true;\n', '                tokenHolders.push(_to);\n', '            }\n', '           emit Transfer(_from, _to, _value);\n', '        }\n', '    \n', '        /**\n', '         * @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '         * \n', '         * @param target Address to be frozen\n', '         * @param freeze either to freeze it or not\n', '         */\n', '        function freezeAccount(address target, bool freeze) onlyOwner public {\n', '            frozenAccount[target] = freeze;\n', '          emit  FrozenFunds(target, freeze);\n', '        }\n', '    \n', '        //**************************************************//\n', '        //------------- Code for the Crowdsale -------------//\n', '        //**************************************************//\n', '    \n', '        //public variables for the Crowdsale\n', '        uint256 public icoStartDate = 1540800000 ;  // October 29, 2018 - 8am GMT\n', '        uint256 public icoEndDate   = 1548057600 ;  // January 21, 2019 - 8am GMT\n', '        uint256 public exchangeRate = 1000;         // 1 ETH = 1000 GAF which equals to 1 GAF = 0.001 ETH\n', '        uint256 public totalTokensForICO = 12000000;// Tokens allocated for crowdsale\n', '        uint256 public tokensSold = 0;              // How many tokens sold in crowdsale\n', '        bool internal withdrawTokensOnlyOnce = true;// Admin can withdraw unsold tokens after ICO only once\n', '        \n', '        /**\n', '         * Fallback function, only accepts ether if ICO is running or Reject\n', '         * \n', '         * It calcualtes token amount from exchangeRate and also adds Bonuses if applicable\n', '         * \n', '         * Ether will be forwarded to owner immidiately.\n', '         */\n', '\t\tfunction () payable public {\n', '    \t\trequire(icoEndDate > now);\n', '    \t\trequire(icoStartDate < now);\n', '    \t\tuint ethervalueWEI=msg.value;\n', '    \t\tuint256 token = ethervalueWEI.mul(exchangeRate);    // token amount = weiamount * price\n', '    \t\tuint256 totalTokens = token.add(purchaseBonus(token)); // token + bonus\n', '    \t\ttokensSold = tokensSold.add(totalTokens);\n', '    \t\t_transfer(this, msg.sender, totalTokens);           // makes the token transfer\n', '    \t\tforwardEherToOwner();                               // send ether to owner\n', '\t\t}\n', '        \n', '        \n', '        /**\n', '         * Automatocally forwards ether from smart contract to owner address.\n', '         */\n', '\t\tfunction forwardEherToOwner() internal {\n', '\t\t\towner.transfer(msg.value); \n', '\t\t}\n', '\t\t\n', '\t\t/**\n', '         * Calculates purchase bonus according to the schedule.\n', '         * \n', '         * @param _tokenAmount calculating tokens from amount of tokens \n', '         * \n', '         * @return bonus amount in wei\n', '         * \n', '         */\n', '\t\tfunction purchaseBonus(uint256 _tokenAmount) public view returns(uint256){\n', '\t\t    uint256 first24Hours = icoStartDate + 86400;    //Level 1: First 24 hours = 50% bonus\n', '\t\t    uint256 week1 = first24Hours + 604800;    //Level 2: next 7 days = 40%\n', '\t\t    uint256 week2 = week1 + 604800;           //Level 3: next 7 days = 30%\n', '\t\t    uint256 week3 = week2 + 604800;           //Level 4: next 7 days = 25%\n', '\t\t    uint256 week4 = week3 + 604800;           //Level 5: next 7 days = 20%\n', '\t\t    uint256 week5 = week4 + 604800;           //Level 6: next 7 days = 15%\n', '\t\t    uint256 week6 = week5 + 604800;           //Level 7: next 7 days = 10%\n', '\t\t    uint256 week7 = week6 + 604800;           //Level 8: next 7 days = 5%\n', '\n', '\t\t    if(now < (first24Hours)){ \n', '                return _tokenAmount.div(2);             //50% bonus\n', '\t\t    }\n', '\t\t    else if(now > first24Hours && now < week1){\n', '\t\t        return _tokenAmount.mul(40).div(100);   //40% bonus\n', '\t\t    }\n', '\t\t    else if(now > week1 && now < week2){\n', '\t\t        return _tokenAmount.mul(30).div(100);   //30% bonus\n', '\t\t    }\n', '\t\t    else if(now > week2 && now < week3){\n', '\t\t        return _tokenAmount.mul(25).div(100);   //25% bonus\n', '\t\t    }\n', '\t\t    else if(now > week3 && now < week4){\n', '\t\t        return _tokenAmount.mul(20).div(100);   //20% bonus\n', '\t\t    }\n', '\t\t    else if(now > week4 && now < week5){\n', '\t\t        return _tokenAmount.mul(15).div(100);   //15% bonus\n', '\t\t    }\n', '\t\t    else if(now > week5 && now < week6){\n', '\t\t        return _tokenAmount.mul(10).div(100);   //10% bonus\n', '\t\t    }\n', '\t\t    else if(now > week6 && now < week7){\n', '\t\t        return _tokenAmount.mul(5).div(100);   //5% bonus\n', '\t\t    }\n', '\t\t    else{\n', '\t\t        return 0;\n', '\t\t    }\n', '\t\t}\n', '        \n', '        \n', '        /**\n', '         * Function to check wheter ICO is running or not. \n', '         * \n', '         * @return bool for whether ICO is running or not\n', '         */\n', '        function isICORunning() public view returns(bool){\n', '            if(icoEndDate > now && icoStartDate < now){\n', '                return true;                \n', '            }else{\n', '                return false;\n', '            }\n', '        }\n', '        \n', '        \n', '        /**\n', '         * Function to withdraw unsold tokens to owner after ICO is over \n', '         * \n', '         * This can be called only once. \n', '         */\n', '        function withdrawTokens() onlyOwner public {\n', '            require(icoEndDate < now);\n', '            require(withdrawTokensOnlyOnce);\n', '            uint256 tokens = (totalTokensForICO.mul(1 ether)).sub(tokensSold);\n', '            _transfer(this, msg.sender, tokens);\n', '            withdrawTokensOnlyOnce = false;\n', '        }\n', '        \n', '        \n', '        //*********************************************************//\n', '        //------------- Code for the Divident Payment -------------//\n', '        //*********************************************************//\n', '        \n', '        uint256 public dividendStartDate = 1549008000;  // February 1, 2019 8:00:00 AM - GMT\n', '        uint256 public dividendMonthCounter = 0;\n', '        uint256 public monthlyAllocation = 6594333;\n', '        \n', '        //Following mapping which track record whether token holder exist or not\n', '        mapping(address => bool) public tokenHolderExist;\n', '        \n', '        //Array of addresses of token holders\n', '        address[] public tokenHolders;\n', '        \n', '        //Following is necessary to split the iteration of array execution to token transfer\n', '        uint256 public tokenHolderIndex = 0;\n', '        \n', '        \n', '        event DividendPaid(uint256 totalDividendPaidThisRound, uint256 lastAddressIndex);\n', '\n', '        /**\n', '         * Just to check if dividend payment is available to send out \n', '         * \n', '         * This function will be called from the clients side to check if main dividend payment function should be called or not.\n', '         * \n', '         * @return length or array of token holders. If 0, means not available. If more than zero, then the time has come for dividend payment\n', '         */\n', '        function checkDividendPaymentAvailable() public view returns (uint256){\n', '            require(now > (dividendStartDate.add(dividendMonthCounter.mul(2592000))));\n', '            return tokenHolders.length;\n', '        }\n', '        \n', '        /**\n', '         * Main function to call to distribute the dividend payment\n', '         * \n', '         * It will only work every month once, according to dividend schedule\n', '         * \n', '         * It will send only 150 token transfer at a time, to prevent eating out all the gas if token holders are so many.\n', '         * \n', '         * If there are more than 150 token holders, then this function must be called multiple times\n', '         * \n', '         * And it will resume from where it was left over.\n', '         * \n', '         * Dividend percentage is is calculated and distributed from the monthly token allocation.\n', '         * \n', '         * Monthly allocation multiplies every month by 1.5%\n', '         */\n', '        function runDividendPayment() public { \n', '            if(now > (dividendStartDate.add(dividendMonthCounter.mul(2592000)))){\n', '                uint256 totalDividendPaidThisRound = 0;\n', '                //Total token balance hold by all the token holders, is total supply minus - tokens in the contract\n', '                uint256 totalTokensHold = totalSupply.sub(balanceOf[this]);\n', '                for(uint256 i = 0; i < 150; i++){\n', '                    if(tokenHolderIndex < tokenHolders.length){\n', '                        uint256 userTokens = balanceOf[tokenHolders[tokenHolderIndex]];\n', '                        if(userTokens > 0){\n', '                            uint256 dividendPercentage =  userTokens.div(totalTokensHold);\n', '                            uint256 dividend = monthlyAllocation.mul(1 ether).mul(dividendPercentage);\n', '                            _transfer(this, tokenHolders[tokenHolderIndex], dividend);\n', '                            tokenHolderIndex++;\n', '                            totalDividendPaidThisRound = totalDividendPaidThisRound.add(dividend);\n', '                        }\n', '                    }else{\n', '                        //this code will run only once in 30 days when dividendPaymentAvailable is true and all the dividend has been paid\n', '                        tokenHolderIndex = 0;\n', '                        dividendMonthCounter++;\n', '                        monthlyAllocation = monthlyAllocation.add(monthlyAllocation.mul(15).div(1000)); //1.5% multiplication of monthlyAllocation each month\n', '                        break;\n', '                    }\n', '                }\n', '                //final tokenHolderIndex woluld be 0 instead of last index of the array.\n', '                emit DividendPaid(totalDividendPaidThisRound,  tokenHolderIndex);\n', '            }\n', '        }\n', '    }']
['pragma solidity 0.4.25;\n', '// ----------------------------------------------------------------------------\n', "// 'Gas Fund' token contract, having Crowdsale and Investment functionality\n", '//\n', '// Contract Owner : 0x956881bc9Fbef7a2D176bfB371Be9Ab3e66683fD\n', '// Symbol      \t  : GAF\n', '// Name           : Gas Fund\n', '// Total supply   : 50,000,000,000\n', '// Decimals       : 18\n', '//\n', '// Copyright © 2018 onwards Gas Fund Inc. (https://gas-fund.com)\n', '// Contract designed by GDO Infotech Pvt Ltd (www.GDO.co.in)\n', '// ----------------------------------------------------------------------------\n', '    \n', '    /**\n', '     * @title SafeMath\n', '     * @dev Math operations with safety checks that throw on error\n', '     */\n', '    library SafeMath {\n', '      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '          return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '      }\n', '    \n', '      function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '      }\n', '    \n', '      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '      }\n', '    \n', '      function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '      }\n', '    }\n', '    \n', '    contract owned {\n', '        address public owner;\n', '    \tusing SafeMath for uint256;\n', '    \t\n', '         constructor () public {\n', '            owner = msg.sender;\n', '        }\n', '    \n', '        modifier onlyOwner {\n', '            require(msg.sender == owner);\n', '            _;\n', '        }\n', '    \n', '        function transferOwnership(address newOwner) onlyOwner public {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '    \n', '    interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '    \n', '    contract TokenERC20 {\n', '        // Public variables of the token\n', '        using SafeMath for uint256;\n', '    \tstring public name;\n', '        string public symbol;\n', '        uint8 public decimals = 18;\n', '        // 18 decimals is the strongly suggested default, avoid changing it\n', '        uint256 public totalSupply;\n', '    \n', '        // This creates an array with all balances\n', '        mapping (address => uint256) public balanceOf;\n', '        mapping (address => mapping (address => uint256)) public allowance;\n', '    \n', '        // This generates a public event on the blockchain that will notify clients\n', '        event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '        // This notifies clients about the amount burnt\n', '        event Burn(address indexed from, uint256 value);\n', '    \n', '        /**\n', '         * Constrctor function\n', '         *\n', '         * Initializes contract with initial supply tokens to the creator of the contract\n', '         */\n', '        constructor (\n', '            uint256 initialSupply,\n', '            string tokenName,\n', '            string tokenSymbol\n', '        ) public {\n', '            totalSupply = initialSupply.mul(1 ether);           // Update total supply with the decimal amount\n', '            uint256 ownerTokens = 8000000;\n', '            balanceOf[msg.sender] = ownerTokens.mul(1 ether);   // Give the creator 8,000,000 tokens\n', '            balanceOf[this]=totalSupply.sub(ownerTokens.mul(1 ether));// Remaining tokens in the contract address for ICO and Dividends\n', '            name = tokenName;                                   // Set the name for display purposes\n', '            symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '        }\n', '    \n', '        /**\n', '         * Internal transfer, only can be called by this contract\n', '         */\n', '        function _transfer(address _from, address _to, uint _value) internal {\n', '            // Prevent transfer to 0x0 address. Use burn() instead\n', '            require(_to != 0x0);\n', '            // Check if the sender has enough\n', '            require(balanceOf[_from] >= _value);\n', '            // Check for overflows\n', '            require(balanceOf[_to].add(_value) > balanceOf[_to]);\n', '            // Save this for an assertion in the future\n', '            uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\n', '            // Subtract from the sender\n', '            balanceOf[_from] = balanceOf[_from].sub(_value);\n', '            // Add the same to the recipient\n', '            balanceOf[_to] = balanceOf[_to].add(_value);\n', '            emit Transfer(_from, _to, _value);\n', '            // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '            assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n', '        }\n', '    \n', '        /**\n', '         * Transfer tokens\n', '         *\n', '         * Send `_value` tokens to `_to` from your account\n', '         *\n', '         * @param _to The address of the recipient\n', '         * @param _value the amount to send\n', '         */\n', '        function transfer(address _to, uint256 _value) public {\n', '            _transfer(msg.sender, _to, _value);\n', '        }\n', '    \n', '        /**\n', '         * Transfer tokens from other address\n', '         *\n', '         * Send `_value` tokens to `_to` in behalf of `_from`\n', '         *\n', '         * @param _from The address of the sender\n', '         * @param _to The address of the recipient\n', '         * @param _value the amount to send\n', '         */\n', '        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '            require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '            _transfer(_from, _to, _value);\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * Set allowance for other address\n', '         *\n', '         * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '         *\n', '         * @param _spender The address authorized to spend\n', '         * @param _value the max amount they can spend\n', '         */\n', '        function approve(address _spender, uint256 _value) public\n', '            returns (bool success) {\n', '            allowance[msg.sender][_spender] = _value;\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * Set allowance for other address and notify\n', '         *\n', '         * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '         *\n', '         * @param _spender The address authorized to spend\n', '         * @param _value the max amount they can spend\n', '         * @param _extraData some extra information to send to the approved contract\n', '         */\n', '        function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '            public\n', '            returns (bool success) {\n', '            tokenRecipient spender = tokenRecipient(_spender);\n', '            if (approve(_spender, _value)) {\n', '                spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '                return true;\n', '            }\n', '        }\n', '    \n', '        /**\n', '         * Destroy tokens\n', '         *\n', '         * Remove `_value` tokens from the system irreversibly\n', '         *\n', '         * @param _value the amount of money to burn\n', '         */\n', '        function burn(uint256 _value) public returns (bool success) {\n', '            require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);            // Subtract from the sender\n', '            totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\n', '           emit Burn(msg.sender, _value);\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * Destroy tokens from other account\n', '         *\n', '         * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '         *\n', '         * @param _from the address of the sender\n', '         * @param _value the amount of money to burn\n', '         */\n', '        function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '            require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '            require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '            balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the targeted balance\n', "            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);             // Subtract from the sender's allowance\n", '            totalSupply = totalSupply.sub(_value);                              // Update totalSupply\n', '          emit  Burn(_from, _value);\n', '            return true;\n', '        }\n', '    }\n', '    \n', '    /********************************************************/\n', '    /*       MAIN GAS FUND TOKEN CONTRACT STARTS HERE       */\n', '    /********************************************************/\n', '    \n', '    contract GasFund is owned, TokenERC20 {\n', '        using SafeMath for uint256;\n', '        \n', '        //**************************************************//\n', '        //------------- Code for the GAF Token -------------//\n', '        //**************************************************//\n', '        \n', '        // Public variables of the token\n', '    \tstring internal tokenName = "Gas Fund";\n', '        string internal tokenSymbol = "GAF";\n', '        uint256 internal initialSupply = 50000000000; \t// Initial supply of the tokens   \n', '\t\n', '    \t// Records for the fronzen accounts \n', '        mapping (address => bool) public frozenAccount;\n', '    \n', '        // This generates a public event on the blockchain that will notify clients \n', '        event FrozenFunds(address target, bool frozen);\n', '    \n', '        // Initializes contract with initial supply of tokens sent to the creator as well as contract \n', '        constructor () TokenERC20(initialSupply, tokenName, tokenSymbol) public {\n', '            tokenHolderExist[msg.sender] = true;\n', '            tokenHolders.push(msg.sender);\n', '        }\n', '    \n', '         \n', '        /**\n', '         * Transfer tokens - Internal transfer, only can be called by this contract\n', '         * \n', '         * This checks if the sender or recipient is not fronzen\n', '         * \n', '         * This keeps the track of total token holders and adds new holders as well.\n', '         *\n', '         * Send `_value` tokens to `_to` from your account\n', '         *\n', '         * @param _from The address of the sender\n', '         * @param _to The address of the recipient\n', '         * @param _value the amount of tokens to send\n', '         */\n', '        function _transfer(address _from, address _to, uint _value) internal {\n', '            require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n', '            require (balanceOf[_from] >= _value);               // Check if the sender has enough\n', '            require (balanceOf[_to].add(_value) >= balanceOf[_to]); // Check for overflows\n', '            require(!frozenAccount[_from]);                     // Check if sender is frozen\n', '            require(!frozenAccount[_to]);                       // Check if recipient is frozen\n', '            balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the sender\n', '            balanceOf[_to] = balanceOf[_to].add(_value);        // Add the same to the recipient\n', '            //if receiver does not exist in tokenHolderExist mapping, then add into it as well as add in tokenHolders array\n', '            if(!tokenHolderExist[_to]){\n', '                tokenHolderExist[_to] = true;\n', '                tokenHolders.push(_to);\n', '            }\n', '           emit Transfer(_from, _to, _value);\n', '        }\n', '    \n', '        /**\n', '         * @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '         * \n', '         * @param target Address to be frozen\n', '         * @param freeze either to freeze it or not\n', '         */\n', '        function freezeAccount(address target, bool freeze) onlyOwner public {\n', '            frozenAccount[target] = freeze;\n', '          emit  FrozenFunds(target, freeze);\n', '        }\n', '    \n', '        //**************************************************//\n', '        //------------- Code for the Crowdsale -------------//\n', '        //**************************************************//\n', '    \n', '        //public variables for the Crowdsale\n', '        uint256 public icoStartDate = 1540800000 ;  // October 29, 2018 - 8am GMT\n', '        uint256 public icoEndDate   = 1548057600 ;  // January 21, 2019 - 8am GMT\n', '        uint256 public exchangeRate = 1000;         // 1 ETH = 1000 GAF which equals to 1 GAF = 0.001 ETH\n', '        uint256 public totalTokensForICO = 12000000;// Tokens allocated for crowdsale\n', '        uint256 public tokensSold = 0;              // How many tokens sold in crowdsale\n', '        bool internal withdrawTokensOnlyOnce = true;// Admin can withdraw unsold tokens after ICO only once\n', '        \n', '        /**\n', '         * Fallback function, only accepts ether if ICO is running or Reject\n', '         * \n', '         * It calcualtes token amount from exchangeRate and also adds Bonuses if applicable\n', '         * \n', '         * Ether will be forwarded to owner immidiately.\n', '         */\n', '\t\tfunction () payable public {\n', '    \t\trequire(icoEndDate > now);\n', '    \t\trequire(icoStartDate < now);\n', '    \t\tuint ethervalueWEI=msg.value;\n', '    \t\tuint256 token = ethervalueWEI.mul(exchangeRate);    // token amount = weiamount * price\n', '    \t\tuint256 totalTokens = token.add(purchaseBonus(token)); // token + bonus\n', '    \t\ttokensSold = tokensSold.add(totalTokens);\n', '    \t\t_transfer(this, msg.sender, totalTokens);           // makes the token transfer\n', '    \t\tforwardEherToOwner();                               // send ether to owner\n', '\t\t}\n', '        \n', '        \n', '        /**\n', '         * Automatocally forwards ether from smart contract to owner address.\n', '         */\n', '\t\tfunction forwardEherToOwner() internal {\n', '\t\t\towner.transfer(msg.value); \n', '\t\t}\n', '\t\t\n', '\t\t/**\n', '         * Calculates purchase bonus according to the schedule.\n', '         * \n', '         * @param _tokenAmount calculating tokens from amount of tokens \n', '         * \n', '         * @return bonus amount in wei\n', '         * \n', '         */\n', '\t\tfunction purchaseBonus(uint256 _tokenAmount) public view returns(uint256){\n', '\t\t    uint256 first24Hours = icoStartDate + 86400;    //Level 1: First 24 hours = 50% bonus\n', '\t\t    uint256 week1 = first24Hours + 604800;    //Level 2: next 7 days = 40%\n', '\t\t    uint256 week2 = week1 + 604800;           //Level 3: next 7 days = 30%\n', '\t\t    uint256 week3 = week2 + 604800;           //Level 4: next 7 days = 25%\n', '\t\t    uint256 week4 = week3 + 604800;           //Level 5: next 7 days = 20%\n', '\t\t    uint256 week5 = week4 + 604800;           //Level 6: next 7 days = 15%\n', '\t\t    uint256 week6 = week5 + 604800;           //Level 7: next 7 days = 10%\n', '\t\t    uint256 week7 = week6 + 604800;           //Level 8: next 7 days = 5%\n', '\n', '\t\t    if(now < (first24Hours)){ \n', '                return _tokenAmount.div(2);             //50% bonus\n', '\t\t    }\n', '\t\t    else if(now > first24Hours && now < week1){\n', '\t\t        return _tokenAmount.mul(40).div(100);   //40% bonus\n', '\t\t    }\n', '\t\t    else if(now > week1 && now < week2){\n', '\t\t        return _tokenAmount.mul(30).div(100);   //30% bonus\n', '\t\t    }\n', '\t\t    else if(now > week2 && now < week3){\n', '\t\t        return _tokenAmount.mul(25).div(100);   //25% bonus\n', '\t\t    }\n', '\t\t    else if(now > week3 && now < week4){\n', '\t\t        return _tokenAmount.mul(20).div(100);   //20% bonus\n', '\t\t    }\n', '\t\t    else if(now > week4 && now < week5){\n', '\t\t        return _tokenAmount.mul(15).div(100);   //15% bonus\n', '\t\t    }\n', '\t\t    else if(now > week5 && now < week6){\n', '\t\t        return _tokenAmount.mul(10).div(100);   //10% bonus\n', '\t\t    }\n', '\t\t    else if(now > week6 && now < week7){\n', '\t\t        return _tokenAmount.mul(5).div(100);   //5% bonus\n', '\t\t    }\n', '\t\t    else{\n', '\t\t        return 0;\n', '\t\t    }\n', '\t\t}\n', '        \n', '        \n', '        /**\n', '         * Function to check wheter ICO is running or not. \n', '         * \n', '         * @return bool for whether ICO is running or not\n', '         */\n', '        function isICORunning() public view returns(bool){\n', '            if(icoEndDate > now && icoStartDate < now){\n', '                return true;                \n', '            }else{\n', '                return false;\n', '            }\n', '        }\n', '        \n', '        \n', '        /**\n', '         * Function to withdraw unsold tokens to owner after ICO is over \n', '         * \n', '         * This can be called only once. \n', '         */\n', '        function withdrawTokens() onlyOwner public {\n', '            require(icoEndDate < now);\n', '            require(withdrawTokensOnlyOnce);\n', '            uint256 tokens = (totalTokensForICO.mul(1 ether)).sub(tokensSold);\n', '            _transfer(this, msg.sender, tokens);\n', '            withdrawTokensOnlyOnce = false;\n', '        }\n', '        \n', '        \n', '        //*********************************************************//\n', '        //------------- Code for the Divident Payment -------------//\n', '        //*********************************************************//\n', '        \n', '        uint256 public dividendStartDate = 1549008000;  // February 1, 2019 8:00:00 AM - GMT\n', '        uint256 public dividendMonthCounter = 0;\n', '        uint256 public monthlyAllocation = 6594333;\n', '        \n', '        //Following mapping which track record whether token holder exist or not\n', '        mapping(address => bool) public tokenHolderExist;\n', '        \n', '        //Array of addresses of token holders\n', '        address[] public tokenHolders;\n', '        \n', '        //Following is necessary to split the iteration of array execution to token transfer\n', '        uint256 public tokenHolderIndex = 0;\n', '        \n', '        \n', '        event DividendPaid(uint256 totalDividendPaidThisRound, uint256 lastAddressIndex);\n', '\n', '        /**\n', '         * Just to check if dividend payment is available to send out \n', '         * \n', '         * This function will be called from the clients side to check if main dividend payment function should be called or not.\n', '         * \n', '         * @return length or array of token holders. If 0, means not available. If more than zero, then the time has come for dividend payment\n', '         */\n', '        function checkDividendPaymentAvailable() public view returns (uint256){\n', '            require(now > (dividendStartDate.add(dividendMonthCounter.mul(2592000))));\n', '            return tokenHolders.length;\n', '        }\n', '        \n', '        /**\n', '         * Main function to call to distribute the dividend payment\n', '         * \n', '         * It will only work every month once, according to dividend schedule\n', '         * \n', '         * It will send only 150 token transfer at a time, to prevent eating out all the gas if token holders are so many.\n', '         * \n', '         * If there are more than 150 token holders, then this function must be called multiple times\n', '         * \n', '         * And it will resume from where it was left over.\n', '         * \n', '         * Dividend percentage is is calculated and distributed from the monthly token allocation.\n', '         * \n', '         * Monthly allocation multiplies every month by 1.5%\n', '         */\n', '        function runDividendPayment() public { \n', '            if(now > (dividendStartDate.add(dividendMonthCounter.mul(2592000)))){\n', '                uint256 totalDividendPaidThisRound = 0;\n', '                //Total token balance hold by all the token holders, is total supply minus - tokens in the contract\n', '                uint256 totalTokensHold = totalSupply.sub(balanceOf[this]);\n', '                for(uint256 i = 0; i < 150; i++){\n', '                    if(tokenHolderIndex < tokenHolders.length){\n', '                        uint256 userTokens = balanceOf[tokenHolders[tokenHolderIndex]];\n', '                        if(userTokens > 0){\n', '                            uint256 dividendPercentage =  userTokens.div(totalTokensHold);\n', '                            uint256 dividend = monthlyAllocation.mul(1 ether).mul(dividendPercentage);\n', '                            _transfer(this, tokenHolders[tokenHolderIndex], dividend);\n', '                            tokenHolderIndex++;\n', '                            totalDividendPaidThisRound = totalDividendPaidThisRound.add(dividend);\n', '                        }\n', '                    }else{\n', '                        //this code will run only once in 30 days when dividendPaymentAvailable is true and all the dividend has been paid\n', '                        tokenHolderIndex = 0;\n', '                        dividendMonthCounter++;\n', '                        monthlyAllocation = monthlyAllocation.add(monthlyAllocation.mul(15).div(1000)); //1.5% multiplication of monthlyAllocation each month\n', '                        break;\n', '                    }\n', '                }\n', '                //final tokenHolderIndex woluld be 0 instead of last index of the array.\n', '                emit DividendPaid(totalDividendPaidThisRound,  tokenHolderIndex);\n', '            }\n', '        }\n', '    }']
