['pragma solidity ^0.4.22;\n', '\n', 'contract EthMashTower {\n', '\n', '    address public owner;\n', '    mapping (address => uint) public withdrawals;\n', '\n', '    uint round;\n', '    uint registered;\n', '    mapping (uint => address[15]) participants;\n', '\n', '    event Log(address indexed user, uint action, uint price);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        round = 1;\n', '        registered = 0;\n', '    }\n', '\n', '    modifier whenOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function ownerWithdraw(uint amount) external whenOwner {\n', '        owner.transfer(amount);\n', '    }\n', '\n', '    function ownerDestroy() external whenOwner {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '    function publicGetRound() view public returns (uint) {\n', '        return round;\n', '    }\n', '\n', '    function publicGetParticipants(uint index) view public returns (address[15]) {\n', '        return participants[index];\n', '    }\n', '\n', '    function publicGetBalance(address player) view public returns (uint) {\n', '        return withdrawals[player];\n', '    }\n', '\n', '    function userWithdraw() public {\n', '        require(withdrawals[msg.sender] > 0);\n', '        uint amount = withdrawals[msg.sender];\n', '        withdrawals[msg.sender] = 0;\n', '        msg.sender.transfer(amount);\n', '        emit Log(msg.sender, 0, amount);\n', '    }\n', '\n', '    function userRegister() public payable {\n', '        require(msg.value == 105 finney);\n', '        require(registered < 8);\n', '\n', '        emit Log(msg.sender, 1, msg.value);\n', '\n', '        participants[round][registered] = msg.sender;\n', '\n', '        if (registered == 1) {\n', '            calcWinner(0, 1, 8, 150 finney);\n', '        } else if (registered == 3) {\n', '            calcWinner(2, 3, 9, 150 finney);\n', '            calcWinner(8, 9, 12, 50 finney);\n', '        } else if (registered == 5) {\n', '            calcWinner(4, 5, 10, 150 finney);\n', '        }  else if (registered == 7) {\n', '            calcWinner(6, 7, 11, 150 finney);\n', '            calcWinner(10, 11, 13, 50 finney);\n', '            calcWinner(12, 13, 14, 100 finney); \n', '        }\n', '\n', '        if (registered < 7) {\n', '            registered++;\n', '        } else {\n', '            round++;\n', '            registered = 0;\n', '        }\n', '    }\n', '\n', '    function calcWinner(uint first, uint second, uint winner, uint reward) private {\n', '        uint random = (uint(blockhash(block.number - 1)) + uint(participants[round][first]) + uint(participants[round][second]));\n', '\n', '        if (random % 2 == 0) {\n', '            participants[round][winner] = participants[round][first];\n', '            withdrawals[participants[round][first]] += reward;\n', '            emit Log(participants[round][first], 2, reward);\n', '        } else {\n', '            participants[round][winner] = participants[round][second];\n', '            withdrawals[participants[round][second]] += reward;\n', '            emit Log(participants[round][second], 2, reward);\n', '        }\n', '    }\n', '}']