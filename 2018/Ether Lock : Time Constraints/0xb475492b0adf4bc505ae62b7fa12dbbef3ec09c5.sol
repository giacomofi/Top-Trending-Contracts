['pragma solidity ^0.4.4;\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', 'contract Token {\n', '\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        \n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        \n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '}\n', '\n', 'contract Arbitragebit is StandardToken, SafeMath { \n', '\n', '   \n', '    string public name;                   \n', '    uint8 public decimals;                \n', '    string public symbol;                 \n', '    string public version = &#39;1.0&#39;; \n', '    uint public startDate;\n', '    uint public bonus1Ends;\n', '    uint public bonus2Ends;\n', '    uint public bonus3Ends;\n', '    uint public endDate;\n', '    uint256 public unitsOneEthCanBuy;     \n', '    uint256 public totalEthInWei;         \n', '    address public fundsWallet;           \n', '\n', '    \n', '    function Arbitragebit() {\n', '        balances[msg.sender] = 25000000000000000000000000;  \n', '        totalSupply = 25000000000000000000000000;   \n', '        name = "Arbitragebit";               \n', '        decimals = 18;                          \n', '        symbol = "ABG";                        \n', '        unitsOneEthCanBuy = 250;                  \n', '        fundsWallet = msg.sender;                \n', '        bonus1Ends = now + 45 minutes + 13 hours + 3 days + 4 weeks;\n', '        bonus2Ends = now + 45 minutes + 13 hours + 5 days + 8 weeks;\n', '        bonus3Ends = now + 45 minutes + 13 hours + 1 days + 13 weeks;\n', '        endDate = now + 45 minutes + 13 hours + 4 days + 17 weeks;\n', '\n', '    }\n', '\n', '    function() payable{\n', '        totalEthInWei = totalEthInWei + msg.value;\n', '        require(balances[fundsWallet] >= amount);\n', '        require(now >= startDate && now <= endDate);\n', '        uint256 amount;\n', '        \n', '\n', '        \n', '       \n', '       if (now <= bonus1Ends) {\n', '            amount = msg.value * unitsOneEthCanBuy * 8;\n', '        } \n', '        \n', '         else if (now <= bonus2Ends && now > bonus1Ends) {\n', '            amount = msg.value * unitsOneEthCanBuy * 6;\n', '        }\n', '        \n', '        else if (now <= bonus3Ends && now > bonus2Ends) {\n', '            amount = msg.value * unitsOneEthCanBuy * 5;\n', '        }\n', '        \n', '        else {\n', '            amount = msg.value * unitsOneEthCanBuy * 4;\n', '        }\n', '\n', '\n', '        balances[fundsWallet] = balances[fundsWallet] - amount;\n', '        balances[msg.sender] = balances[msg.sender] + amount;\n', '\n', '        Transfer(fundsWallet, msg.sender, amount); \n', '\n', '        fundsWallet.transfer(msg.value);                               \n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.4;\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', 'contract Token {\n', '\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        \n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        \n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '}\n', '\n', 'contract Arbitragebit is StandardToken, SafeMath { \n', '\n', '   \n', '    string public name;                   \n', '    uint8 public decimals;                \n', '    string public symbol;                 \n', "    string public version = '1.0'; \n", '    uint public startDate;\n', '    uint public bonus1Ends;\n', '    uint public bonus2Ends;\n', '    uint public bonus3Ends;\n', '    uint public endDate;\n', '    uint256 public unitsOneEthCanBuy;     \n', '    uint256 public totalEthInWei;         \n', '    address public fundsWallet;           \n', '\n', '    \n', '    function Arbitragebit() {\n', '        balances[msg.sender] = 25000000000000000000000000;  \n', '        totalSupply = 25000000000000000000000000;   \n', '        name = "Arbitragebit";               \n', '        decimals = 18;                          \n', '        symbol = "ABG";                        \n', '        unitsOneEthCanBuy = 250;                  \n', '        fundsWallet = msg.sender;                \n', '        bonus1Ends = now + 45 minutes + 13 hours + 3 days + 4 weeks;\n', '        bonus2Ends = now + 45 minutes + 13 hours + 5 days + 8 weeks;\n', '        bonus3Ends = now + 45 minutes + 13 hours + 1 days + 13 weeks;\n', '        endDate = now + 45 minutes + 13 hours + 4 days + 17 weeks;\n', '\n', '    }\n', '\n', '    function() payable{\n', '        totalEthInWei = totalEthInWei + msg.value;\n', '        require(balances[fundsWallet] >= amount);\n', '        require(now >= startDate && now <= endDate);\n', '        uint256 amount;\n', '        \n', '\n', '        \n', '       \n', '       if (now <= bonus1Ends) {\n', '            amount = msg.value * unitsOneEthCanBuy * 8;\n', '        } \n', '        \n', '         else if (now <= bonus2Ends && now > bonus1Ends) {\n', '            amount = msg.value * unitsOneEthCanBuy * 6;\n', '        }\n', '        \n', '        else if (now <= bonus3Ends && now > bonus2Ends) {\n', '            amount = msg.value * unitsOneEthCanBuy * 5;\n', '        }\n', '        \n', '        else {\n', '            amount = msg.value * unitsOneEthCanBuy * 4;\n', '        }\n', '\n', '\n', '        balances[fundsWallet] = balances[fundsWallet] - amount;\n', '        balances[msg.sender] = balances[msg.sender] + amount;\n', '\n', '        Transfer(fundsWallet, msg.sender, amount); \n', '\n', '        fundsWallet.transfer(msg.value);                               \n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '}']
