['pragma solidity ^0.4.16;\n', '\n', 'contract ERC20Interface {\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '}\n', '\n', 'contract HmcDistributor {\n', '\n', '    //add limit to 1 year\n', '    uint64  public constant lockDuration   = 1 years;\n', '    //Bonus amount\n', '    uint256 public constant bonus          = 500*10**18;\n', '    //add limit to 7000000 block height\n', '    uint    public constant minBlockNumber = 7000000;\n', '\n', '    address public owner;\n', '    address public hmcAddress;\n', '\n', '    uint256 public joinCount        = 0;\n', '    uint256 public withdrawCount    = 0;\n', '    uint256 public distributorCount = 0;\n', '\n', '    struct member {\n', '        uint unlockTime;\n', '        bool withdraw;\n', '    }\n', '\n', '    mapping(address => member)   public whitelist;\n', '    mapping(address => bool)     public distributors;\n', '\n', '    modifier onlyDistributor {\n', '        require(distributors[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function HmcDistributor() public {\n', '        owner = msg.sender;\n', '        distributors[msg.sender] = true;\n', '        hmcAddress = 0xAa0bb10CEc1fa372eb3Abc17C933FC6ba863DD9E;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '\n', '    function setDistributor(address []_addr)\n', '        external\n', '        onlyOwner\n', '    {\n', '        uint256 index;\n', '        for(index = 0;index< _addr.length;index ++) {\n', '            distributors[_addr[index]] = true;\n', '        }\n', '        distributorCount += _addr.length;\n', '    }\n', '\n', '    function setHmcAddress(address _addr)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(_addr != 0x0);\n', '        hmcAddress = _addr;\n', '    }\n', '\n', '    function distribute(address _addr)\n', '        external\n', '        onlyDistributor\n', '    {\n', '        require(hmcAddress != address(0));\n', '        require(whitelist[_addr].unlockTime == 0);\n', '        whitelist[_addr].unlockTime = now + lockDuration;\n', '        joinCount++;\n', '    }\n', '\n', '    function done(address _owner) external view returns (bool) {\n', '        if(whitelist[_owner].unlockTime == 0   ||\n', '           whitelist[_owner].withdraw   == true) {\n', '            return false;\n', '        }\n', '        if(now >= whitelist[_owner].unlockTime && block.number > minBlockNumber) {\n', '            return true;\n', '        }else{\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function withdraw() external {\n', '        require(withdrawCount<joinCount);\n', '        require(whitelist[msg.sender].withdraw == false);\n', '        require(whitelist[msg.sender].unlockTime > 1500000000);\n', '        require(now >= whitelist[msg.sender].unlockTime && block.number > minBlockNumber);\n', '        whitelist[msg.sender].withdraw = true;\n', '        withdrawCount++;\n', '        require(ERC20Interface(hmcAddress).transfer(msg.sender, bonus));\n', '    }\n', '}']