['pragma solidity ^0.4.24;\n', '\n', '// ----------------------------------------------------------------------------\n', '// AXNET Private sale token contract\n', '//\n', '// Symbol      : AXPRV\n', '// Name        : AXNET Private Sale token\n', '//\n', '// Website     : https://ax.net\n', '// Company     : Asset Exchange Network (AXNET O&#220;)\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', 'contract AXPRV is Owned {\n', '    using SafeMath for uint;\n', '\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    \n', '    event Withdrawn(address indexed payee, uint256 weiAmount);\n', '    \n', '    uint public constant contract_start = 1532667600;   //2018.7.27 00:00:00 EST\n', '    uint public constant contract_finish = 1535950799;  //2018.9.2  23:59:59 EST\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor() public {\n', '        symbol = "AXPRV";\n', '        name = "AXNET Private Sale token";\n', '        decimals = 18;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Time limited deposit of ether\n', '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        require(now >= contract_start);\n', '        require(now <= contract_finish);      \n', '    }\n', '\n', '  /**\n', '  * @dev Withdraw accumulated balance for a payee.\n', '  * @param _payee The address whose funds will be withdrawn and transferred to.\n', '  */\n', '  function withdraw(address _payee, uint amount) public onlyOwner {\n', '    assert(address(this).balance >= amount);\n', '\n', '    _payee.transfer(amount);\n', '\n', '    emit Withdrawn(_payee, amount);\n', '  }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']