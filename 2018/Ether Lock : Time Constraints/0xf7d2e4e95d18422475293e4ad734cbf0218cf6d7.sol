['pragma solidity ^0.4.23;\n', '\n', 'contract CSC {\n', '    mapping (address => uint256) private balances;\n', '    mapping (address => uint256[2]) private lockedBalances;\n', '    string public name;                   //fancy name: eg Simon Bucks\n', '    uint8 public decimals;                //How many decimals to show.\n', '    string public symbol;                 //An identifier: eg SBX\n', '    uint256 public totalSupply;\n', '    address public owner;\n', '        event Transfer(address indexed _from, address indexed _to, uint256 _value); \n', '    constructor(\n', '        uint256 _initialAmount,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        address _owner,\n', '        address[] _lockedAddress,\n', '        uint256[] _lockedBalances,\n', '        uint256[] _lockedTimes\n', '    ) public {\n', '        balances[_owner] = _initialAmount;                   // Give the owner all initial tokens\n', '        totalSupply = _initialAmount;                        // Update total supply\n', '        name = _tokenName;                                   // Set the name for display purposes\n', '        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n', '        symbol = _tokenSymbol;                               // Set the symbol for display purposes\n', '        owner = _owner;                                      // set owner\n', '        for(uint i = 0;i < _lockedAddress.length;i++){\n', '            lockedBalances[_lockedAddress[i]][0] = _lockedBalances[i];\n', '            lockedBalances[_lockedAddress[i]][1] = _lockedTimes[i];\n', '        }\n', '    }\n', '    /*DirectDrop and AirDrop*/\n', '    /*Checking lock limit and time limit while transfering.*/\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        //Before ICO finish, only own could transfer.\n', '        if(_to != address(0)){\n', '            if(lockedBalances[msg.sender][1] >= now) {\n', '                require((balances[msg.sender] > lockedBalances[msg.sender][0]) &&\n', '                 (balances[msg.sender] - lockedBalances[msg.sender][0] >= _value));\n', '            } else {\n', '                require(balances[msg.sender] >= _value);\n', '            }\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '    }\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    /*With permission, withdraw ETH to owner address from smart contract.*/\n', '    function withdraw() public{\n', '        require(msg.sender == owner);\n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '    /*With permission, withdraw ETH to an address from smart contract.*/\n', '    function withdrawTo(address _to) public{\n', '        require(msg.sender == owner);\n', '        address(_to).transfer(address(this).balance);\n', '    }\n', '}']