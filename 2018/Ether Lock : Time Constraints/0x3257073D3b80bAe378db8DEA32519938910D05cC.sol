['pragma solidity 0.4.18;\n', '\n', '// File: contracts/ERC20Interface.sol\n', '\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'interface ERC20 {\n', '    function totalSupply() public view returns (uint supply);\n', '    function balanceOf(address _owner) public view returns (uint balance);\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '    function approve(address _spender, uint _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint remaining);\n', '    function decimals() public view returns(uint digits);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '// File: contracts/KyberNetworkInterface.sol\n', '\n', '/// @title Kyber Network interface\n', 'interface KyberNetworkInterface {\n', '    function maxGasPrice() public view returns(uint);\n', '    function getUserCapInWei(address user) public view returns(uint);\n', '    function getUserCapInTokenWei(address user, ERC20 token) public view returns(uint);\n', '    function enabled() public view returns(bool);\n', '    function info(bytes32 id) public view returns(uint);\n', '\n', '    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) public view\n', '        returns (uint expectedRate, uint slippageRate);\n', '\n', '    function tradeWithHint(address trader, ERC20 src, uint srcAmount, ERC20 dest, address destAddress,\n', '        uint maxDestAmount, uint minConversionRate, address walletId, bytes hint) public payable returns(uint);\n', '}\n', '\n', '// File: contracts/KyberNetworkProxyInterface.sol\n', '\n', '/// @title Kyber Network interface\n', 'interface KyberNetworkProxyInterface {\n', '    function maxGasPrice() public view returns(uint);\n', '    function getUserCapInWei(address user) public view returns(uint);\n', '    function getUserCapInTokenWei(address user, ERC20 token) public view returns(uint);\n', '    function enabled() public view returns(bool);\n', '    function info(bytes32 id) public view returns(uint);\n', '\n', '    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) public view\n', '        returns (uint expectedRate, uint slippageRate);\n', '\n', '    function tradeWithHint(ERC20 src, uint srcAmount, ERC20 dest, address destAddress, uint maxDestAmount,\n', '        uint minConversionRate, address walletId, bytes hint) public payable returns(uint);\n', '}\n', '\n', '// File: contracts/SimpleNetworkInterface.sol\n', '\n', '/// @title simple interface for Kyber Network \n', 'interface SimpleNetworkInterface {\n', '    function swapTokenToToken(ERC20 src, uint srcAmount, ERC20 dest, uint minConversionRate) public returns(uint);\n', '    function swapEtherToToken(ERC20 token, uint minConversionRate) public payable returns(uint);\n', '    function swapTokenToEther(ERC20 token, uint srcAmount, uint minConversionRate) public returns(uint);\n', '}\n', '\n', '// File: contracts/Utils.sol\n', '\n', '/// @title Kyber constants contract\n', 'contract Utils {\n', '\n', '    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n', '    uint  constant internal PRECISION = (10**18);\n', '    uint  constant internal MAX_QTY   = (10**28); // 10B tokens\n', '    uint  constant internal MAX_RATE  = (PRECISION * 10**6); // up to 1M tokens per ETH\n', '    uint  constant internal MAX_DECIMALS = 18;\n', '    uint  constant internal ETH_DECIMALS = 18;\n', '    mapping(address=>uint) internal decimals;\n', '\n', '    function setDecimals(ERC20 token) internal {\n', '        if (token == ETH_TOKEN_ADDRESS) decimals[token] = ETH_DECIMALS;\n', '        else decimals[token] = token.decimals();\n', '    }\n', '\n', '    function getDecimals(ERC20 token) internal view returns(uint) {\n', '        if (token == ETH_TOKEN_ADDRESS) return ETH_DECIMALS; // save storage access\n', '        uint tokenDecimals = decimals[token];\n', '        // technically, there might be token with decimals 0\n', '        // moreover, very possible that old tokens have decimals 0\n', '        // these tokens will just have higher gas fees.\n', '        if(tokenDecimals == 0) return token.decimals();\n', '\n', '        return tokenDecimals;\n', '    }\n', '\n', '    function calcDstQty(uint srcQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n', '        require(srcQty <= MAX_QTY);\n', '        require(rate <= MAX_RATE);\n', '\n', '        if (dstDecimals >= srcDecimals) {\n', '            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n', '            return (srcQty * rate * (10**(dstDecimals - srcDecimals))) / PRECISION;\n', '        } else {\n', '            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n', '            return (srcQty * rate) / (PRECISION * (10**(srcDecimals - dstDecimals)));\n', '        }\n', '    }\n', '\n', '    function calcSrcQty(uint dstQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n', '        require(dstQty <= MAX_QTY);\n', '        require(rate <= MAX_RATE);\n', '        \n', '        //source quantity is rounded up. to avoid dest quantity being too low.\n', '        uint numerator;\n', '        uint denominator;\n', '        if (srcDecimals >= dstDecimals) {\n', '            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n', '            numerator = (PRECISION * dstQty * (10**(srcDecimals - dstDecimals)));\n', '            denominator = rate;\n', '        } else {\n', '            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n', '            numerator = (PRECISION * dstQty);\n', '            denominator = (rate * (10**(dstDecimals - srcDecimals)));\n', '        }\n', '        return (numerator + denominator - 1) / denominator; //avoid rounding down errors\n', '    }\n', '}\n', '\n', '// File: contracts/Utils2.sol\n', '\n', 'contract Utils2 is Utils {\n', '\n', '    /// @dev get the balance of a user.\n', '    /// @param token The token type\n', '    /// @return The balance\n', '    function getBalance(ERC20 token, address user) public view returns(uint) {\n', '        if (token == ETH_TOKEN_ADDRESS)\n', '            return user.balance;\n', '        else\n', '            return token.balanceOf(user);\n', '    }\n', '\n', '    function getDecimalsSafe(ERC20 token) internal returns(uint) {\n', '\n', '        if (decimals[token] == 0) {\n', '            setDecimals(token);\n', '        }\n', '\n', '        return decimals[token];\n', '    }\n', '\n', '    /// @dev notice, overrides previous implementation.\n', '    function setDecimals(ERC20 token) internal {\n', '        uint decimal;\n', '\n', '        if (token == ETH_TOKEN_ADDRESS) {\n', '            decimal = ETH_DECIMALS;\n', '        } else {\n', '            if (!address(token).call(bytes4(keccak256("decimals()")))) {/* solhint-disable-line avoid-low-level-calls */\n', '                //above code can only be performed with low level call. otherwise all operation will revert.\n', '                // call failed\n', '                decimal = 18;\n', '            } else {\n', '                decimal = token.decimals();\n', '            }\n', '        }\n', '\n', '        decimals[token] = decimal;\n', '    }\n', '\n', '    function calcDestAmount(ERC20 src, ERC20 dest, uint srcAmount, uint rate) internal view returns(uint) {\n', '        return calcDstQty(srcAmount, getDecimals(src), getDecimals(dest), rate);\n', '    }\n', '\n', '    function calcSrcAmount(ERC20 src, ERC20 dest, uint destAmount, uint rate) internal view returns(uint) {\n', '        return calcSrcQty(destAmount, getDecimals(src), getDecimals(dest), rate);\n', '    }\n', '\n', '    function calcRateFromQty(uint srcAmount, uint destAmount, uint srcDecimals, uint dstDecimals)\n', '        internal pure returns(uint)\n', '    {\n', '        require(srcAmount <= MAX_QTY);\n', '        require(destAmount <= MAX_QTY);\n', '\n', '        if (dstDecimals >= srcDecimals) {\n', '            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n', '            return (destAmount * PRECISION / ((10 ** (dstDecimals - srcDecimals)) * srcAmount));\n', '        } else {\n', '            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n', '            return (destAmount * PRECISION * (10 ** (srcDecimals - dstDecimals)) / srcAmount);\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/PermissionGroups.sol\n', '\n', 'contract PermissionGroups {\n', '\n', '    address public admin;\n', '    address public pendingAdmin;\n', '    mapping(address=>bool) internal operators;\n', '    mapping(address=>bool) internal alerters;\n', '    address[] internal operatorsGroup;\n', '    address[] internal alertersGroup;\n', '    uint constant internal MAX_GROUP_SIZE = 50;\n', '\n', '    function PermissionGroups() public {\n', '        admin = msg.sender;\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOperator() {\n', '        require(operators[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAlerter() {\n', '        require(alerters[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function getOperators () external view returns(address[]) {\n', '        return operatorsGroup;\n', '    }\n', '\n', '    function getAlerters () external view returns(address[]) {\n', '        return alertersGroup;\n', '    }\n', '\n', '    event TransferAdminPending(address pendingAdmin);\n', '\n', '    /**\n', '     * @dev Allows the current admin to set the pendingAdmin address.\n', '     * @param newAdmin The address to transfer ownership to.\n', '     */\n', '    function transferAdmin(address newAdmin) public onlyAdmin {\n', '        require(newAdmin != address(0));\n', '        TransferAdminPending(pendingAdmin);\n', '        pendingAdmin = newAdmin;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\n', '     * @param newAdmin The address to transfer ownership to.\n', '     */\n', '    function transferAdminQuickly(address newAdmin) public onlyAdmin {\n', '        require(newAdmin != address(0));\n', '        TransferAdminPending(newAdmin);\n', '        AdminClaimed(newAdmin, admin);\n', '        admin = newAdmin;\n', '    }\n', '\n', '    event AdminClaimed( address newAdmin, address previousAdmin);\n', '\n', '    /**\n', '     * @dev Allows the pendingAdmin address to finalize the change admin process.\n', '     */\n', '    function claimAdmin() public {\n', '        require(pendingAdmin == msg.sender);\n', '        AdminClaimed(pendingAdmin, admin);\n', '        admin = pendingAdmin;\n', '        pendingAdmin = address(0);\n', '    }\n', '\n', '    event AlerterAdded (address newAlerter, bool isAdd);\n', '\n', '    function addAlerter(address newAlerter) public onlyAdmin {\n', '        require(!alerters[newAlerter]); // prevent duplicates.\n', '        require(alertersGroup.length < MAX_GROUP_SIZE);\n', '\n', '        AlerterAdded(newAlerter, true);\n', '        alerters[newAlerter] = true;\n', '        alertersGroup.push(newAlerter);\n', '    }\n', '\n', '    function removeAlerter (address alerter) public onlyAdmin {\n', '        require(alerters[alerter]);\n', '        alerters[alerter] = false;\n', '\n', '        for (uint i = 0; i < alertersGroup.length; ++i) {\n', '            if (alertersGroup[i] == alerter) {\n', '                alertersGroup[i] = alertersGroup[alertersGroup.length - 1];\n', '                alertersGroup.length--;\n', '                AlerterAdded(alerter, false);\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    event OperatorAdded(address newOperator, bool isAdd);\n', '\n', '    function addOperator(address newOperator) public onlyAdmin {\n', '        require(!operators[newOperator]); // prevent duplicates.\n', '        require(operatorsGroup.length < MAX_GROUP_SIZE);\n', '\n', '        OperatorAdded(newOperator, true);\n', '        operators[newOperator] = true;\n', '        operatorsGroup.push(newOperator);\n', '    }\n', '\n', '    function removeOperator (address operator) public onlyAdmin {\n', '        require(operators[operator]);\n', '        operators[operator] = false;\n', '\n', '        for (uint i = 0; i < operatorsGroup.length; ++i) {\n', '            if (operatorsGroup[i] == operator) {\n', '                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];\n', '                operatorsGroup.length -= 1;\n', '                OperatorAdded(operator, false);\n', '                break;\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/Withdrawable.sol\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens or ethers\n', ' * @author Ilan Doron\n', ' * @dev This allows to recover any tokens or Ethers received in a contract.\n', ' * This will prevent any accidental loss of tokens.\n', ' */\n', 'contract Withdrawable is PermissionGroups {\n', '\n', '    event TokenWithdraw(ERC20 token, uint amount, address sendTo);\n', '\n', '    /**\n', '     * @dev Withdraw all ERC20 compatible tokens\n', '     * @param token ERC20 The address of the token contract\n', '     */\n', '    function withdrawToken(ERC20 token, uint amount, address sendTo) external onlyAdmin {\n', '        require(token.transfer(sendTo, amount));\n', '        TokenWithdraw(token, amount, sendTo);\n', '    }\n', '\n', '    event EtherWithdraw(uint amount, address sendTo);\n', '\n', '    /**\n', '     * @dev Withdraw Ethers\n', '     */\n', '    function withdrawEther(uint amount, address sendTo) external onlyAdmin {\n', '        sendTo.transfer(amount);\n', '        EtherWithdraw(amount, sendTo);\n', '    }\n', '}\n', '\n', '// File: contracts/KyberNetworkProxy.sol\n', '\n', '////////////////////////////////////////////////////////////////////////////////////////////////////////\n', '/// @title Kyber Network proxy for main contract\n', 'contract KyberNetworkProxy is KyberNetworkProxyInterface, SimpleNetworkInterface, Withdrawable, Utils2 {\n', '\n', '    KyberNetworkInterface public kyberNetworkContract;\n', '\n', '    function KyberNetworkProxy(address _admin) public {\n', '        require(_admin != address(0));\n', '        admin = _admin;\n', '    }\n', '\n', '    /// @notice use token address ETH_TOKEN_ADDRESS for ether\n', '    /// @dev makes a trade between src and dest token and send dest token to destAddress\n', '    /// @param src Src token\n', '    /// @param srcAmount amount of src tokens\n', '    /// @param dest   Destination token\n', '    /// @param destAddress Address to send tokens to\n', '    /// @param maxDestAmount A limit on the amount of dest tokens\n', '    /// @param minConversionRate The minimal conversion rate. If actual rate is lower, trade is canceled.\n', '    /// @param walletId is the wallet ID to send part of the fees\n', '    /// @return amount of actual dest tokens\n', '    function trade(\n', '        ERC20 src,\n', '        uint srcAmount,\n', '        ERC20 dest,\n', '        address destAddress,\n', '        uint maxDestAmount,\n', '        uint minConversionRate,\n', '        address walletId\n', '    )\n', '        public\n', '        payable\n', '        returns(uint)\n', '    {\n', '        bytes memory hint;\n', '\n', '        return tradeWithHint(\n', '            src,\n', '            srcAmount,\n', '            dest,\n', '            destAddress,\n', '            maxDestAmount,\n', '            minConversionRate,\n', '            walletId,\n', '            hint\n', '        );\n', '    }\n', '\n', '    /// @dev makes a trade between src and dest token and send dest tokens to msg sender\n', '    /// @param src Src token\n', '    /// @param srcAmount amount of src tokens\n', '    /// @param dest Destination token\n', '    /// @param minConversionRate The minimal conversion rate. If actual rate is lower, trade is canceled.\n', '    /// @return amount of actual dest tokens\n', '    function swapTokenToToken(\n', '        ERC20 src,\n', '        uint srcAmount,\n', '        ERC20 dest,\n', '        uint minConversionRate\n', '    )\n', '        public\n', '        returns(uint)\n', '    {\n', '        bytes memory hint;\n', '\n', '        return tradeWithHint(\n', '            src,\n', '            srcAmount,\n', '            dest,\n', '            msg.sender,\n', '            MAX_QTY,\n', '            minConversionRate,\n', '            0,\n', '            hint\n', '        );\n', '    }\n', '\n', '    /// @dev makes a trade from Ether to token. Sends token to msg sender\n', '    /// @param token Destination token\n', '    /// @param minConversionRate The minimal conversion rate. If actual rate is lower, trade is canceled.\n', '    /// @return amount of actual dest tokens\n', '    function swapEtherToToken(ERC20 token, uint minConversionRate) public payable returns(uint) {\n', '        bytes memory hint;\n', '\n', '        return tradeWithHint(\n', '            ETH_TOKEN_ADDRESS,\n', '            msg.value,\n', '            token,\n', '            msg.sender,\n', '            MAX_QTY,\n', '            minConversionRate,\n', '            0,\n', '            hint\n', '        );\n', '    }\n', '\n', '    /// @dev makes a trade from token to Ether, sends Ether to msg sender\n', '    /// @param token Src token\n', '    /// @param srcAmount amount of src tokens\n', '    /// @param minConversionRate The minimal conversion rate. If actual rate is lower, trade is canceled.\n', '    /// @return amount of actual dest tokens\n', '    function swapTokenToEther(ERC20 token, uint srcAmount, uint minConversionRate) public returns(uint) {\n', '        bytes memory hint;\n', '\n', '        return tradeWithHint(\n', '            token,\n', '            srcAmount,\n', '            ETH_TOKEN_ADDRESS,\n', '            msg.sender,\n', '            MAX_QTY,\n', '            minConversionRate,\n', '            0,\n', '            hint\n', '        );\n', '    }\n', '\n', '    struct UserBalance {\n', '        uint srcBalance;\n', '        uint destBalance;\n', '    }\n', '\n', '    event ExecuteTrade(address indexed trader, ERC20 src, ERC20 dest, uint actualSrcAmount, uint actualDestAmount);\n', '\n', '    /// @notice use token address ETH_TOKEN_ADDRESS for ether\n', '    /// @dev makes a trade between src and dest token and send dest token to destAddress\n', '    /// @param src Src token\n', '    /// @param srcAmount amount of src tokens\n', '    /// @param dest Destination token\n', '    /// @param destAddress Address to send tokens to\n', '    /// @param maxDestAmount A limit on the amount of dest tokens\n', '    /// @param minConversionRate The minimal conversion rate. If actual rate is lower, trade is canceled.\n', '    /// @param walletId is the wallet ID to send part of the fees\n', '    /// @param hint will give hints for the trade.\n', '    /// @return amount of actual dest tokens\n', '    function tradeWithHint(\n', '        ERC20 src,\n', '        uint srcAmount,\n', '        ERC20 dest,\n', '        address destAddress,\n', '        uint maxDestAmount,\n', '        uint minConversionRate,\n', '        address walletId,\n', '        bytes hint\n', '    )\n', '        public\n', '        payable\n', '        returns(uint)\n', '    {\n', '        require(src == ETH_TOKEN_ADDRESS || msg.value == 0);\n', '        \n', '        UserBalance memory userBalanceBefore;\n', '\n', '        userBalanceBefore.srcBalance = getBalance(src, msg.sender);\n', '        userBalanceBefore.destBalance = getBalance(dest, destAddress);\n', '\n', '        if (src == ETH_TOKEN_ADDRESS) {\n', '            userBalanceBefore.srcBalance += msg.value;\n', '        } else {\n', '            require(src.transferFrom(msg.sender, kyberNetworkContract, srcAmount));\n', '        }\n', '\n', '        uint reportedDestAmount = kyberNetworkContract.tradeWithHint.value(msg.value)(\n', '            msg.sender,\n', '            src,\n', '            srcAmount,\n', '            dest,\n', '            destAddress,\n', '            maxDestAmount,\n', '            minConversionRate,\n', '            walletId,\n', '            hint\n', '        );\n', '\n', '        TradeOutcome memory tradeOutcome = calculateTradeOutcome(\n', '            userBalanceBefore.srcBalance,\n', '            userBalanceBefore.destBalance,\n', '            src,\n', '            dest,\n', '            destAddress\n', '        );\n', '\n', '        require(reportedDestAmount == tradeOutcome.userDeltaDestAmount);\n', '        require(tradeOutcome.userDeltaDestAmount <= maxDestAmount);\n', '        require(tradeOutcome.actualRate >= minConversionRate);\n', '\n', '        ExecuteTrade(msg.sender, src, dest, tradeOutcome.userDeltaSrcAmount, tradeOutcome.userDeltaDestAmount);\n', '        return tradeOutcome.userDeltaDestAmount;\n', '    }\n', '\n', '    event KyberNetworkSet(address newNetworkContract, address oldNetworkContract);\n', '\n', '    function setKyberNetworkContract(KyberNetworkInterface _kyberNetworkContract) public onlyAdmin {\n', '\n', '        require(_kyberNetworkContract != address(0));\n', '\n', '        KyberNetworkSet(_kyberNetworkContract, kyberNetworkContract);\n', '\n', '        kyberNetworkContract = _kyberNetworkContract;\n', '    }\n', '\n', '    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty)\n', '        public view\n', '        returns(uint expectedRate, uint slippageRate)\n', '    {\n', '        return kyberNetworkContract.getExpectedRate(src, dest, srcQty);\n', '    }\n', '\n', '    function getUserCapInWei(address user) public view returns(uint) {\n', '        return kyberNetworkContract.getUserCapInWei(user);\n', '    }\n', '\n', '    function getUserCapInTokenWei(address user, ERC20 token) public view returns(uint) {\n', '        return kyberNetworkContract.getUserCapInTokenWei(user, token);\n', '    }\n', '\n', '    function maxGasPrice() public view returns(uint) {\n', '        return kyberNetworkContract.maxGasPrice();\n', '    }\n', '\n', '    function enabled() public view returns(bool) {\n', '        return kyberNetworkContract.enabled();\n', '    }\n', '\n', '    function info(bytes32 field) public view returns(uint) {\n', '        return kyberNetworkContract.info(field);\n', '    }\n', '\n', '    struct TradeOutcome {\n', '        uint userDeltaSrcAmount;\n', '        uint userDeltaDestAmount;\n', '        uint actualRate;\n', '    }\n', '\n', '    function calculateTradeOutcome (uint srcBalanceBefore, uint destBalanceBefore, ERC20 src, ERC20 dest,\n', '        address destAddress)\n', '        internal returns(TradeOutcome outcome)\n', '    {\n', '        uint userSrcBalanceAfter;\n', '        uint userDestBalanceAfter;\n', '\n', '        userSrcBalanceAfter = getBalance(src, msg.sender);\n', '        userDestBalanceAfter = getBalance(dest, destAddress);\n', '\n', '        //protect from underflow\n', '        require(userDestBalanceAfter > destBalanceBefore);\n', '        require(srcBalanceBefore > userSrcBalanceAfter);\n', '\n', '        outcome.userDeltaDestAmount = userDestBalanceAfter - destBalanceBefore;\n', '        outcome.userDeltaSrcAmount = srcBalanceBefore - userSrcBalanceAfter;\n', '\n', '        outcome.actualRate = calcRateFromQty(\n', '                outcome.userDeltaSrcAmount,\n', '                outcome.userDeltaDestAmount,\n', '                getDecimalsSafe(src),\n', '                getDecimalsSafe(dest)\n', '            );\n', '    }\n', '}']