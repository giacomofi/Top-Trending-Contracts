['pragma solidity ^0.4.24;\n', '\n', 'contract QuizQuest {\n', '    bytes32 private answerHash;\n', '    bool private isActive;\n', '    Guess[] public PreviousGuesses;\n', '    string public Riddle;\n', '    string public Answer;\n', '\n', '    struct Guess { address player; string guess; }\n', '    address private riddler;\n', '\n', '    function () payable public {}\n', '    \n', '    function Quiz(string _riddle, string _answer) public payable {\n', '        if (riddler == 0x0) {\n', '            riddler = msg.sender;\n', '            Riddle = _riddle;\n', '            answerHash = keccak256(_answer);\n', '            isActive = true;\n', '        }\n', '    }\n', '\n', '    function Play(string guess) public payable {\n', '        require(isActive && msg.value >= 0.5 ether);\n', '        if (bytes(guess).length == 0) return;\n', '        \n', '        Guess newGuess;\n', '        newGuess.player = msg.sender;\n', '        newGuess.guess = guess;\n', '        PreviousGuesses.push(newGuess);\n', '        \n', '        if (keccak256(guess) == answerHash) {\n', '            Answer = guess;\n', '            isActive = false;\n', '            msg.sender.transfer(this.balance);\n', '        }\n', '    }\n', '    \n', '    function End(string _answer) public {\n', '        require(msg.sender == riddler);\n', '        Answer = _answer;\n', '        isActive = false;\n', '        msg.sender.transfer(this.balance);\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract QuizQuest {\n', '    bytes32 private answerHash;\n', '    bool private isActive;\n', '    Guess[] public PreviousGuesses;\n', '    string public Riddle;\n', '    string public Answer;\n', '\n', '    struct Guess { address player; string guess; }\n', '    address private riddler;\n', '\n', '    function () payable public {}\n', '    \n', '    function Quiz(string _riddle, string _answer) public payable {\n', '        if (riddler == 0x0) {\n', '            riddler = msg.sender;\n', '            Riddle = _riddle;\n', '            answerHash = keccak256(_answer);\n', '            isActive = true;\n', '        }\n', '    }\n', '\n', '    function Play(string guess) public payable {\n', '        require(isActive && msg.value >= 0.5 ether);\n', '        if (bytes(guess).length == 0) return;\n', '        \n', '        Guess newGuess;\n', '        newGuess.player = msg.sender;\n', '        newGuess.guess = guess;\n', '        PreviousGuesses.push(newGuess);\n', '        \n', '        if (keccak256(guess) == answerHash) {\n', '            Answer = guess;\n', '            isActive = false;\n', '            msg.sender.transfer(this.balance);\n', '        }\n', '    }\n', '    \n', '    function End(string _answer) public {\n', '        require(msg.sender == riddler);\n', '        Answer = _answer;\n', '        isActive = false;\n', '        msg.sender.transfer(this.balance);\n', '    }\n', '}']
