['pragma solidity ^0.4.18;\n', '\n', '//Interfaces\n', '\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'interface ERC20 {\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address _owner) public constant returns (uint balance);\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '    function approve(address _spender, uint _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining);\n', '}\n', '\n', 'contract UnilotToken is ERC20 {\n', '    struct TokenStage {\n', '        string name;\n', '        uint numCoinsStart;\n', '        uint coinsAvailable;\n', '        uint bonus;\n', '        uint startsAt;\n', '        uint endsAt;\n', '        uint balance; //Amount of ether sent during this stage\n', '    }\n', '\n', '    //Token symbol\n', '    string public constant symbol = "UNIT";\n', '    //Token name\n', '    string public constant name = "Unilot token";\n', '    //It can be reeeealy small\n', '    uint8 public constant decimals = 18;\n', '\n', '    //This one duplicates the above but will have to use it because of\n', '    //solidity bug with power operation\n', '    uint public constant accuracy = 1000000000000000000;\n', '\n', '    //500 mln tokens\n', '    uint256 internal _totalSupply = 500 * (10**6) * accuracy;\n', '\n', '    //Public investor can buy tokens for 30 ether at maximum\n', '    uint256 public constant singleInvestorCap = 30 ether; //30 ether\n', '\n', '    //Distribution units\n', '    uint public constant DST_ICO     = 62; //62%\n', '    uint public constant DST_RESERVE = 10; //10%\n', '    uint public constant DST_BOUNTY  = 3;  //3%\n', '    //Referral and Bonus Program\n', '    uint public constant DST_R_N_B_PROGRAM = 10; //10%\n', '    uint public constant DST_ADVISERS      = 5;  //5%\n', '    uint public constant DST_TEAM          = 10; //10%\n', '\n', '    //Referral Bonuses\n', '    uint public constant REFERRAL_BONUS_LEVEL1 = 5; //5%\n', '    uint public constant REFERRAL_BONUS_LEVEL2 = 4; //4%\n', '    uint public constant REFERRAL_BONUS_LEVEL3 = 3; //3%\n', '    uint public constant REFERRAL_BONUS_LEVEL4 = 2; //2%\n', '    uint public constant REFERRAL_BONUS_LEVEL5 = 1; //1%\n', '\n', '    //Token amount\n', '    //25 mln tokens\n', '    uint public constant TOKEN_AMOUNT_PRE_ICO = 25 * (10**6) * accuracy;\n', '    //5 mln tokens\n', '    uint public constant TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE1 = 5 * (10**6) * accuracy;\n', '    //5 mln tokens\n', '    uint public constant TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE2 = 5 * (10**6) * accuracy;\n', '    //5 mln tokens\n', '    uint public constant TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE3 = 5 * (10**6) * accuracy;\n', '    //5 mln tokens\n', '    uint public constant TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE4 = 5 * (10**6) * accuracy;\n', '    //122.5 mln tokens\n', '    uint public constant TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE5 = 1225 * (10**5) * accuracy;\n', '    //265 mln tokens\n', '    uint public constant TOKEN_AMOUNT_ICO_STAGE2 = 1425 * (10**5) * accuracy;\n', '\n', '    uint public constant BONUS_PRE_ICO = 40; //40%\n', '    uint public constant BONUS_ICO_STAGE1_PRE_SALE1 = 35; //35%\n', '    uint public constant BONUS_ICO_STAGE1_PRE_SALE2 = 30; //30%\n', '    uint public constant BONUS_ICO_STAGE1_PRE_SALE3 = 25; //25%\n', '    uint public constant BONUS_ICO_STAGE1_PRE_SALE4 = 20; //20%\n', '    uint public constant BONUS_ICO_STAGE1_PRE_SALE5 = 0; //0%\n', '    uint public constant BONUS_ICO_STAGE2 = 0; //No bonus\n', '\n', '    //Token Price on Coin Offer\n', '    uint256 public constant price = 79 szabo; //0.000079 ETH\n', '\n', '    address public constant ADVISORS_WALLET = 0x77660795BD361Cd43c3627eAdad44dDc2026aD17;\n', '    address public constant RESERVE_WALLET = 0x731B47847352fA2cFf83D5251FD6a5266f90878d;\n', '    address public constant BOUNTY_WALLET = 0x794EF9c680bDD0bEf48Bef46bA68471e449D67Fb;\n', '    address public constant R_N_D_WALLET = 0x794EF9c680bDD0bEf48Bef46bA68471e449D67Fb;\n', '    address public constant STORAGE_WALLET = 0xE2A8F147fc808738Cab152b01C7245F386fD8d89;\n', '\n', '    // Owner of this contract\n', '    address public administrator;\n', '\n', '    // Balances for each account\n', '    mapping(address => uint256) balances;\n', '\n', '    // Owner of account approves the transfer of an amount to another account\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    //Mostly needed for internal use\n', '    uint256 internal totalCoinsAvailable;\n', '\n', '    //All token stages. Total 6 stages\n', '    TokenStage[7] stages;\n', '\n', '    //Index of current stage in stage array\n', '    uint currentStage;\n', '\n', '    //Enables or disables debug mode. Debug mode is set only in constructor.\n', '    bool isDebug = false;\n', '\n', '    event StageUpdated(string from, string to);\n', '\n', '    // Functions with this modifier can only be executed by the owner\n', '    modifier onlyAdministrator() {\n', '        require(msg.sender == administrator);\n', '        _;\n', '    }\n', '\n', '    modifier notAdministrator() {\n', '        require(msg.sender != administrator);\n', '        _;\n', '    }\n', '\n', '    modifier onlyDuringICO() {\n', '        require(currentStage < stages.length);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAfterICO(){\n', '        require(currentStage >= stages.length);\n', '        _;\n', '    }\n', '\n', '    modifier meetTheCap() {\n', '        require(msg.value >= price); // At least one token\n', '        _;\n', '    }\n', '\n', '    modifier isFreezedReserve(address _address) {\n', '        require( ( _address == RESERVE_WALLET ) && now > (stages[ (stages.length - 1) ].endsAt + 182 days));\n', '        _;\n', '    }\n', '\n', '    // Constructor\n', '    function UnilotToken()\n', '        public\n', '    {\n', '        administrator = msg.sender;\n', '        totalCoinsAvailable = _totalSupply;\n', '        //Was as fn parameter for debugging\n', '        isDebug = false;\n', '\n', '        _setupStages();\n', '        _proceedStage();\n', '    }\n', '\n', '    function prealocateCoins()\n', '        public\n', '        onlyAdministrator\n', '    {\n', '        totalCoinsAvailable -= balances[ADVISORS_WALLET] += ( ( _totalSupply * DST_ADVISERS ) / 100 );\n', '        totalCoinsAvailable -= balances[RESERVE_WALLET] += ( ( _totalSupply * DST_RESERVE ) / 100 );\n', '\n', '        address[7] memory teamWallets = getTeamWallets();\n', '        uint teamSupply = ( ( _totalSupply * DST_TEAM ) / 100 );\n', '        uint memberAmount = teamSupply / teamWallets.length;\n', '\n', '        for(uint i = 0; i < teamWallets.length; i++) {\n', '            if ( i == ( teamWallets.length - 1 ) ) {\n', '                memberAmount = teamSupply;\n', '            }\n', '\n', '            balances[teamWallets[i]] += memberAmount;\n', '            teamSupply -= memberAmount;\n', '            totalCoinsAvailable -= memberAmount;\n', '        }\n', '    }\n', '\n', '    function getTeamWallets()\n', '        public\n', '        pure\n', '        returns (address[7] memory result)\n', '    {\n', '        result[0] = 0x40e3D8fFc46d73Ab5DF878C751D813a4cB7B388D;\n', '        result[1] = 0x5E065a80f6635B6a46323e3383057cE6051aAcA0;\n', '        result[2] = 0x0cF3585FbAB2a1299F8347a9B87CF7B4fcdCE599;\n', '        result[3] = 0x5fDd3BA5B6Ff349d31eB0a72A953E454C99494aC;\n', '        result[4] = 0xC9be9818eE1B2cCf2E4f669d24eB0798390Ffb54;\n', '        result[5] = 0x77660795BD361Cd43c3627eAdad44dDc2026aD17;\n', '        result[6] = 0xd13289203889bD898d49e31a1500388441C03663;\n', '    }\n', '\n', '    function _setupStages()\n', '        internal\n', '    {\n', '        //Presale stage\n', '        stages[0].name = &#39;Presale stage&#39;;\n', '        stages[0].numCoinsStart = totalCoinsAvailable;\n', '        stages[0].coinsAvailable = TOKEN_AMOUNT_PRE_ICO;\n', '        stages[0].bonus = BONUS_PRE_ICO;\n', '\n', '        if (isDebug) {\n', '            stages[0].startsAt = now;\n', '            stages[0].endsAt = stages[0].startsAt + 30 seconds;\n', '        } else {\n', '            stages[0].startsAt = 1515610800; //10th of January 2018 at 19:00UTC\n', '            stages[0].endsAt = 1518894000; //17th of February 2018 at 19:00UTC\n', '        }\n', '\n', '        //ICO Stage 1 pre-sale 1\n', '        stages[1].name = &#39;ICO Stage 1 pre-sale 1&#39;;\n', '        stages[1].coinsAvailable = TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE1;\n', '        stages[1].bonus = BONUS_ICO_STAGE1_PRE_SALE1;\n', '\n', '        if (isDebug) {\n', '            stages[1].startsAt = stages[0].endsAt;\n', '            stages[1].endsAt = stages[1].startsAt + 30 seconds;\n', '        } else {\n', '            stages[1].startsAt = 1519326000; //22th of February 2018 at 19:00UTC\n', '            stages[1].endsAt = 1521745200; //22th of March 2018 at 19:00UTC\n', '        }\n', '\n', '        //ICO Stage 1 pre-sale 2\n', '        stages[2].name = &#39;ICO Stage 1 pre-sale 2&#39;;\n', '        stages[2].coinsAvailable = TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE2;\n', '        stages[2].bonus = BONUS_ICO_STAGE1_PRE_SALE2;\n', '\n', '        stages[2].startsAt = stages[1].startsAt;\n', '        stages[2].endsAt = stages[1].endsAt;\n', '\n', '        //ICO Stage 1 pre-sale 3\n', '        stages[3].name = &#39;ICO Stage 1 pre-sale 3&#39;;\n', '        stages[3].coinsAvailable = TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE3;\n', '        stages[3].bonus = BONUS_ICO_STAGE1_PRE_SALE3;\n', '\n', '        stages[3].startsAt = stages[1].startsAt;\n', '        stages[3].endsAt = stages[1].endsAt;\n', '\n', '        //ICO Stage 1 pre-sale 4\n', '        stages[4].name = &#39;ICO Stage 1 pre-sale 4&#39;;\n', '        stages[4].coinsAvailable = TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE4;\n', '        stages[4].bonus = BONUS_ICO_STAGE1_PRE_SALE4;\n', '\n', '        stages[4].startsAt = stages[1].startsAt;\n', '        stages[4].endsAt = stages[1].endsAt;\n', '\n', '        //ICO Stage 1 pre-sale 5\n', '        stages[5].name = &#39;ICO Stage 1 pre-sale 5&#39;;\n', '        stages[5].coinsAvailable = TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE5;\n', '        stages[5].bonus = BONUS_ICO_STAGE1_PRE_SALE5;\n', '\n', '        stages[5].startsAt = stages[1].startsAt;\n', '        stages[5].endsAt = stages[1].endsAt;\n', '\n', '        //ICO Stage 2\n', '        stages[6].name = &#39;ICO Stage 2&#39;;\n', '        stages[6].coinsAvailable = TOKEN_AMOUNT_ICO_STAGE2;\n', '        stages[6].bonus = BONUS_ICO_STAGE2;\n', '\n', '        if (isDebug) {\n', '            stages[6].startsAt = stages[5].endsAt;\n', '            stages[6].endsAt = stages[6].startsAt + 30 seconds;\n', '        } else {\n', '            stages[6].startsAt = 1524250800; //20th of April 2018 at 19:00UTC\n', '            stages[6].endsAt = 1526842800; //20th of May 2018 at 19:00UTC\n', '        }\n', '    }\n', '\n', '    function _proceedStage()\n', '        internal\n', '    {\n', '        while (true) {\n', '            if ( currentStage < stages.length\n', '            && (now >= stages[currentStage].endsAt || getAvailableCoinsForCurrentStage() == 0) ) {\n', '                currentStage++;\n', '                uint totalTokensForSale = TOKEN_AMOUNT_PRE_ICO\n', '                                    + TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE1\n', '                                    + TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE2\n', '                                    + TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE3\n', '                                    + TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE4\n', '                                    + TOKEN_AMOUNT_ICO_STAGE2;\n', '\n', '                if (currentStage >= stages.length) {\n', '                    //Burning all unsold tokens and proportionally other for deligation\n', '                    _totalSupply -= ( ( ( stages[(stages.length - 1)].coinsAvailable * DST_BOUNTY ) / 100 )\n', '                                    + ( ( stages[(stages.length - 1)].coinsAvailable * DST_R_N_B_PROGRAM ) / 100 ) );\n', '\n', '                    balances[BOUNTY_WALLET] = (((totalTokensForSale - stages[(stages.length - 1)].coinsAvailable) * DST_BOUNTY)/100);\n', '                    balances[R_N_D_WALLET] = (((totalTokensForSale - stages[(stages.length - 1)].coinsAvailable) * DST_R_N_B_PROGRAM)/100);\n', '\n', '                    totalCoinsAvailable = 0;\n', '                    break; //ICO ended\n', '                }\n', '\n', '                stages[currentStage].numCoinsStart = totalCoinsAvailable;\n', '\n', '                if ( currentStage > 0 ) {\n', '                    //Move all left tokens to last stage\n', '                    stages[(stages.length - 1)].coinsAvailable += stages[ (currentStage - 1 ) ].coinsAvailable;\n', '                    StageUpdated(stages[currentStage - 1].name, stages[currentStage].name);\n', '                }\n', '            } else {\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    function getTotalCoinsAvailable()\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        return totalCoinsAvailable;\n', '    }\n', '\n', '    function getAvailableCoinsForCurrentStage()\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        TokenStage memory stage = stages[currentStage];\n', '\n', '        return stage.coinsAvailable;\n', '    }\n', '\n', '    //------------- ERC20 methods -------------//\n', '    function totalSupply()\n', '        public\n', '        constant\n', '        returns (uint256)\n', '    {\n', '        return _totalSupply;\n', '    }\n', '\n', '\n', '    // What is the balance of a particular account?\n', '    function balanceOf(address _owner)\n', '        public\n', '        constant\n', '        returns (uint256 balance)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '\n', '\n', '    // Transfer the balance from owner&#39;s account to another account\n', '    function transfer(address _to, uint256 _amount)\n', '        public\n', '        onlyAfterICO\n', '        isFreezedReserve(_to)\n', '        returns (bool success)\n', '    {\n', '        if (balances[msg.sender] >= _amount\n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(msg.sender, _to, _amount);\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '\n', '    // Send _value amount of tokens from address _from to address _to\n', '    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n', '    // tokens on your behalf, for example to "deposit" to a contract address and/or to charge\n', '    // fees in sub-currencies; the command should fail unless the _from account has\n', '    // deliberately authorized the sender of the message via some mechanism; we propose\n', '    // these standardized APIs for approval:\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    )\n', '        public\n', '        onlyAfterICO\n', '        isFreezedReserve(_from)\n', '        isFreezedReserve(_to)\n', '        returns (bool success)\n', '    {\n', '        if (balances[_from] >= _amount\n', '            && allowed[_from][msg.sender] >= _amount\n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[_from] -= _amount;\n', '            allowed[_from][msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    function approve(address _spender, uint256 _amount)\n', '        public\n', '        onlyAfterICO\n', '        isFreezedReserve(_spender)\n', '        returns (bool success)\n', '    {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    function allowance(address _owner, address _spender)\n', '        public\n', '        constant\n', '        returns (uint256 remaining)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    //------------- ERC20 Methods END -------------//\n', '\n', '    //Returns bonus for certain level of reference\n', '    function calculateReferralBonus(uint amount, uint level)\n', '        public\n', '        pure\n', '        returns (uint bonus)\n', '    {\n', '        bonus = 0;\n', '\n', '        if ( level == 1 ) {\n', '            bonus = ( ( amount * REFERRAL_BONUS_LEVEL1 ) / 100 );\n', '        } else if (level == 2) {\n', '            bonus = ( ( amount * REFERRAL_BONUS_LEVEL2 ) / 100 );\n', '        } else if (level == 3) {\n', '            bonus = ( ( amount * REFERRAL_BONUS_LEVEL3 ) / 100 );\n', '        } else if (level == 4) {\n', '            bonus = ( ( amount * REFERRAL_BONUS_LEVEL4 ) / 100 );\n', '        } else if (level == 5) {\n', '            bonus = ( ( amount * REFERRAL_BONUS_LEVEL5 ) / 100 );\n', '        }\n', '    }\n', '\n', '    function calculateBonus(uint amountOfTokens)\n', '        public\n', '        view\n', '        returns (uint)\n', '    {\n', '        return ( ( stages[currentStage].bonus * amountOfTokens ) / 100 );\n', '    }\n', '\n', '    event TokenPurchased(string stage, uint valueSubmitted, uint valueRefunded, uint tokensPurchased);\n', '\n', '    function ()\n', '        public\n', '        payable\n', '        notAdministrator\n', '        onlyDuringICO\n', '        meetTheCap\n', '    {\n', '        _proceedStage();\n', '        require(currentStage < stages.length);\n', '        require(stages[currentStage].startsAt <= now && now < stages[currentStage].endsAt);\n', '        require(getAvailableCoinsForCurrentStage() > 0);\n', '\n', '        uint requestedAmountOfTokens = ( ( msg.value * accuracy ) / price );\n', '        uint amountToBuy = requestedAmountOfTokens;\n', '        uint refund = 0;\n', '\n', '        if ( amountToBuy > getAvailableCoinsForCurrentStage() ) {\n', '            amountToBuy = getAvailableCoinsForCurrentStage();\n', '            refund = ( ( (requestedAmountOfTokens - amountToBuy) / accuracy ) * price );\n', '\n', '            // Returning ETH\n', '            msg.sender.transfer( refund );\n', '        }\n', '\n', '        TokenPurchased(stages[currentStage].name, msg.value, refund, amountToBuy);\n', '        stages[currentStage].coinsAvailable -= amountToBuy;\n', '        stages[currentStage].balance += (msg.value - refund);\n', '\n', '        uint amountDelivered = amountToBuy + calculateBonus(amountToBuy);\n', '\n', '        balances[msg.sender] += amountDelivered;\n', '        totalCoinsAvailable -= amountDelivered;\n', '\n', '        if ( getAvailableCoinsForCurrentStage() == 0 ) {\n', '            _proceedStage();\n', '        }\n', '\n', '        STORAGE_WALLET.transfer(this.balance);\n', '    }\n', '\n', '    //It doesn&#39;t really close the stage\n', '    //It just needed to push transaction to update stage and update block.now\n', '    function closeStage()\n', '        public\n', '        onlyAdministrator\n', '    {\n', '        _proceedStage();\n', '    }\n', '}\n', '\n', 'contract ERC20Contract is ERC20 {\n', '    //Token symbol\n', '    string public constant symbol = "UNIT";\n', '\n', '    //Token name\n', '    string public constant name = "Unilot token";\n', '\n', '    //It can be reeeealy small\n', '    uint8 public constant decimals = 18;\n', '\n', '    // Balances for each account\n', '    mapping(address => uint96) public balances;\n', '\n', '    // Owner of account approves the transfer of an amount to another account\n', '    mapping(address => mapping (address => uint96)) allowed;\n', '\n', '    function totalSupply()\n', '        public\n', '        constant\n', '        returns (uint);\n', '\n', '\n', '    // What is the balance of a particular account?\n', '    function balanceOf(address _owner)\n', '        public\n', '        constant\n', '        returns (uint balance)\n', '    {\n', '        return uint(balances[_owner]);\n', '    }\n', '\n', '\n', '    // Transfer the balance from owner&#39;s account to another account\n', '    function transfer(address _to, uint _amount)\n', '        public\n', '        returns (bool success)\n', '    {\n', '        if (balances[msg.sender] >= _amount\n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[msg.sender] -= uint96(_amount);\n', '            balances[_to] += uint96(_amount);\n', '            Transfer(msg.sender, _to, _amount);\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '\n', '    // Send _value amount of tokens from address _from to address _to\n', '    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n', '    // tokens on your behalf, for example to "deposit" to a contract address and/or to charge\n', '    // fees in sub-currencies; the command should fail unless the _from account has\n', '    // deliberately authorized the sender of the message via some mechanism; we propose\n', '    // these standardized APIs for approval:\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    )\n', '        public\n', '        returns (bool success)\n', '    {\n', '        if (balances[_from] >= _amount\n', '            && allowed[_from][msg.sender] >= _amount\n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[_from] -= uint96(_amount);\n', '            allowed[_from][msg.sender] -= uint96(_amount);\n', '            balances[_to] += uint96(_amount);\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    function approve(address _spender, uint _amount)\n', '        public\n', '        returns (bool success)\n', '    {\n', '        allowed[msg.sender][_spender] = uint96(_amount);\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    function allowance(address _owner, address _spender)\n', '        public\n', '        constant\n', '        returns (uint remaining)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', 'interface TokenStagesManager {\n', '    function isDebug() public constant returns(bool);\n', '    function setToken(address tokenAddress) public;\n', '    function getPool() public constant returns (uint96);\n', '    function getBonus() public constant returns (uint8);\n', '    function isFreezeTimeout() public constant returns (bool);\n', '    function isTimeout() public constant returns (bool);\n', '    function isICO() public view returns(bool);\n', '    function isCanList() public view returns (bool);\n', '    function calculateBonus(uint96 amount) public view returns (uint88);\n', '    function delegateFromPool(uint96 amount) public;\n', '    function delegateFromBonus(uint88 amount) public;\n', '    function delegateFromReferral(uint88 amount) public;\n', '\n', '    function getBonusPool() public constant returns(uint88);\n', '    function getReferralPool() public constant returns(uint88);\n', '}\n', '\n', 'interface Whitelist {\n', '    function add(address _wlAddress) public;\n', '    function addBulk(address[] _wlAddresses) public;\n', '    function remove(address _wlAddresses) public;\n', '    function removeBulk(address[] _wlAddresses) public;\n', '    function getAll() public constant returns(address[]);\n', '    function isInList(address _checkAddress) public constant returns(bool);\n', '}\n', '\n', 'contract Administrated {\n', '    address public administrator;\n', '\n', '    modifier onlyAdministrator() {\n', '        require(administrator == tx.origin);\n', '        _;\n', '    }\n', '\n', '    modifier notAdministrator() {\n', '        require(administrator != tx.origin);\n', '        _;\n', '    }\n', '\n', '    function setAdministrator(address _administrator)\n', '        internal\n', '    {\n', '        administrator = _administrator;\n', '    }\n', '}\n', '\n', 'contract UNITv2 is ERC20Contract,Administrated {\n', '    //Token symbol\n', '    string public constant symbol = "UNIT";\n', '    //Token name\n', '    string public constant name = "Unilot token";\n', '    //It can be reeeealy small\n', '    uint8 public constant decimals = 18;\n', '\n', '    //Total supply 500mln in the start\n', '    uint96 public _totalSupply = uint96(500000000 * (10**18));\n', '\n', '    UnilotToken public sourceToken;\n', '\n', '    Whitelist public transferWhiteList;\n', '\n', '    Whitelist public paymentGateways;\n', '\n', '    TokenStagesManager public stagesManager;\n', '\n', '    bool public unlocked = false;\n', '\n', '    bool public burned = false;\n', '\n', '    //tokenImport[tokenHolder][sourceToken] = true/false;\n', '    mapping ( address => mapping ( address => bool ) ) public tokenImport;\n', '\n', '    event TokensImported(address indexed tokenHolder, uint96 amount, address indexed source);\n', '    event TokensDelegated(address indexed tokenHolder, uint96 amount, address indexed source);\n', '    event Unlocked();\n', '    event Burned(uint96 amount);\n', '\n', '    modifier isLocked() {\n', '        require(unlocked == false);\n', '        _;\n', '    }\n', '\n', '    modifier isNotBurned() {\n', '        require(burned == false);\n', '        _;\n', '    }\n', '\n', '    modifier isTransferAllowed(address _from, address _to) {\n', '        if ( sourceToken.RESERVE_WALLET() == _from ) {\n', '            require( stagesManager.isFreezeTimeout() );\n', '        }\n', '        require(unlocked\n', '                || ( stagesManager != address(0) && stagesManager.isCanList() )\n', '                || ( transferWhiteList != address(0) && ( transferWhiteList.isInList(_from) || transferWhiteList.isInList(_to) ) )\n', '        );\n', '        _;\n', '    }\n', '\n', '    function UNITv2(address _sourceToken)\n', '        public\n', '    {\n', '        setAdministrator(tx.origin);\n', '        sourceToken = UnilotToken(_sourceToken);\n', '\n', '        /*Transactions:\n', '        0x99c28675adbd0d0cb7bd783ae197492078d4063f40c11139dd07c015a543ffcc\n', '        0x86038d11ee8da46703309d2fb45d150f1dc4e2bba6d0a8fee158016111104ff1\n', '        0x0340a8a2fb89513c0086a345973470b7bc33424e818ca6a32dcf9ad66bf9d75c\n', '        */\n', '        balances[0xd13289203889bD898d49e31a1500388441C03663] += 1400000000000000000 * 3;\n', '        markAsImported(0xdBF98dF5DAd9077f457e1dcf85Aa9420BcA8B761, 0xd13289203889bD898d49e31a1500388441C03663);\n', '\n', '        //Tx: 0xec9b7b4c0f1435282e2e98a66efbd7610de7eacce3b2448cd5f503d70a64a895\n', '        balances[0xE33305B2EFbcB302DA513C38671D01646651a868] += 1400000000000000000;\n', '        markAsImported(0xdBF98dF5DAd9077f457e1dcf85Aa9420BcA8B761, 0xE33305B2EFbcB302DA513C38671D01646651a868);\n', '\n', '        //Assigning bounty\n', '        balances[0x794EF9c680bDD0bEf48Bef46bA68471e449D67Fb] += uint96(\n', '            ( uint(_totalSupply) * uint8( sourceToken.DST_BOUNTY() ) ) / 100\n', '        );\n', '\n', '        //Don&#39;t import bounty and R&B tokens\n', '        markAsImported(0xdBF98dF5DAd9077f457e1dcf85Aa9420BcA8B761, 0x794EF9c680bDD0bEf48Bef46bA68471e449D67Fb);\n', '        markAsImported(sourceToken, 0x794EF9c680bDD0bEf48Bef46bA68471e449D67Fb);\n', '\n', '        markAsImported(0xdBF98dF5DAd9077f457e1dcf85Aa9420BcA8B761, 0x91D740D87A8AeED1fc3EA3C346843173c529D63e);\n', '    }\n', '\n', '    function setTransferWhitelist(address whiteListAddress)\n', '        public\n', '        onlyAdministrator\n', '        isNotBurned\n', '    {\n', '        transferWhiteList = Whitelist(whiteListAddress);\n', '    }\n', '\n', '    function disableTransferWhitelist()\n', '        public\n', '        onlyAdministrator\n', '        isNotBurned\n', '    {\n', '        transferWhiteList = Whitelist(address(0));\n', '    }\n', '\n', '    function setStagesManager(address stagesManagerContract)\n', '        public\n', '        onlyAdministrator\n', '        isNotBurned\n', '    {\n', '        stagesManager = TokenStagesManager(stagesManagerContract);\n', '    }\n', '\n', '    function setPaymentGatewayList(address paymentGatewayListContract)\n', '        public\n', '        onlyAdministrator\n', '        isNotBurned\n', '    {\n', '        paymentGateways = Whitelist(paymentGatewayListContract);\n', '    }\n', '\n', '    //START Import related methods\n', '    function isImported(address _sourceToken, address _tokenHolder)\n', '        internal\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return tokenImport[_tokenHolder][_sourceToken];\n', '    }\n', '\n', '    function markAsImported(address _sourceToken, address _tokenHolder)\n', '        internal\n', '    {\n', '        tokenImport[_tokenHolder][_sourceToken] = true;\n', '    }\n', '\n', '    function importFromSource(ERC20 _sourceToken, address _tokenHolder)\n', '        internal\n', '    {\n', '        if ( !isImported(_sourceToken, _tokenHolder) ) {\n', '            uint96 oldBalance = uint96(_sourceToken.balanceOf(_tokenHolder));\n', '            balances[_tokenHolder] += oldBalance;\n', '            markAsImported(_sourceToken, _tokenHolder);\n', '\n', '            TokensImported(_tokenHolder, oldBalance, _sourceToken);\n', '        }\n', '    }\n', '\n', '    //Imports from source token\n', '    function importTokensFromSourceToken(address _tokenHolder)\n', '        internal\n', '    {\n', '        importFromSource(ERC20(sourceToken), _tokenHolder);\n', '    }\n', '\n', '    function importFromExternal(ERC20 _sourceToken, address _tokenHolder)\n', '        public\n', '        onlyAdministrator\n', '        isNotBurned\n', '    {\n', '        return importFromSource(_sourceToken, _tokenHolder);\n', '    }\n', '\n', '    //Imports from provided token\n', '    function importTokensSourceBulk(ERC20 _sourceToken, address[] _tokenHolders)\n', '        public\n', '        onlyAdministrator\n', '        isNotBurned\n', '    {\n', '        require(_tokenHolders.length <= 256);\n', '\n', '        for (uint8 i = 0; i < _tokenHolders.length; i++) {\n', '            importFromSource(_sourceToken, _tokenHolders[i]);\n', '        }\n', '    }\n', '    //END Import related methods\n', '\n', '    //START ERC20\n', '    function totalSupply()\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        return uint(_totalSupply);\n', '    }\n', '\n', '    function balanceOf(address _owner)\n', '        public\n', '        constant\n', '        returns (uint balance)\n', '    {\n', '        balance = super.balanceOf(_owner);\n', '\n', '        if (!isImported(sourceToken, _owner)) {\n', '            balance += sourceToken.balanceOf(_owner);\n', '        }\n', '    }\n', '\n', '    function transfer(address _to, uint _amount)\n', '        public\n', '        isTransferAllowed(msg.sender, _to)\n', '        returns (bool success)\n', '    {\n', '        return super.transfer(_to, _amount);\n', '    }\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    )\n', '        public\n', '        isTransferAllowed(_from, _to)\n', '        returns (bool success)\n', '    {\n', '        return super.transferFrom(_from, _to, _amount);\n', '    }\n', '\n', '    function approve(address _spender, uint _amount)\n', '        public\n', '        isTransferAllowed(msg.sender, _spender)\n', '        returns (bool success)\n', '    {\n', '        return super.approve(_spender, _amount);\n', '    }\n', '    //END ERC20\n', '\n', '    function delegateTokens(address tokenHolder, uint96 amount)\n', '        public\n', '        isNotBurned\n', '    {\n', '        require(paymentGateways.isInList(msg.sender));\n', '        require(stagesManager.isICO());\n', '        require(stagesManager.getPool() >= amount);\n', '\n', '        uint88 bonus = stagesManager.calculateBonus(amount);\n', '        stagesManager.delegateFromPool(amount);\n', '\n', '        balances[tokenHolder] += amount + uint96(bonus);\n', '\n', '        TokensDelegated(tokenHolder, amount, msg.sender);\n', '    }\n', '\n', '    function delegateBonusTokens(address tokenHolder, uint88 amount)\n', '        public\n', '        isNotBurned\n', '    {\n', '        require(paymentGateways.isInList(msg.sender) || tx.origin == administrator);\n', '        require(stagesManager.getBonusPool() >= amount);\n', '\n', '        stagesManager.delegateFromBonus(amount);\n', '\n', '        balances[tokenHolder] += amount;\n', '\n', '        TokensDelegated(tokenHolder, uint96(amount), msg.sender);\n', '    }\n', '\n', '    function delegateReferalTokens(address tokenHolder, uint88 amount)\n', '        public\n', '        isNotBurned\n', '    {\n', '        require(paymentGateways.isInList(msg.sender) || tx.origin == administrator);\n', '        require(stagesManager.getReferralPool() >= amount);\n', '\n', '        stagesManager.delegateFromReferral(amount);\n', '\n', '        balances[tokenHolder] += amount;\n', '\n', '        TokensDelegated(tokenHolder, amount, msg.sender);\n', '    }\n', '\n', '    function delegateReferralTokensBulk(address[] tokenHolders, uint88[] amounts)\n', '        public\n', '        isNotBurned\n', '    {\n', '        require(paymentGateways.isInList(msg.sender) || tx.origin == administrator);\n', '        require(tokenHolders.length <= 256);\n', '        require(tokenHolders.length == amounts.length);\n', '\n', '        for ( uint8 i = 0; i < tokenHolders.length; i++ ) {\n', '            delegateReferalTokens(tokenHolders[i], amounts[i]);\n', '        }\n', '    }\n', '\n', '    function unlock()\n', '        public\n', '        isLocked\n', '        onlyAdministrator\n', '    {\n', '        unlocked = true;\n', '        Unlocked();\n', '    }\n', '\n', '    function burn()\n', '        public\n', '        onlyAdministrator\n', '    {\n', '        require(!stagesManager.isICO());\n', '\n', '        uint96 burnAmount = stagesManager.getPool()\n', '                        + stagesManager.getBonusPool()\n', '                        + stagesManager.getReferralPool();\n', '\n', '        _totalSupply -= burnAmount;\n', '        burned = true;\n', '        Burned(burnAmount);\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '//Interfaces\n', '\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'interface ERC20 {\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address _owner) public constant returns (uint balance);\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '    function approve(address _spender, uint _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining);\n', '}\n', '\n', 'contract UnilotToken is ERC20 {\n', '    struct TokenStage {\n', '        string name;\n', '        uint numCoinsStart;\n', '        uint coinsAvailable;\n', '        uint bonus;\n', '        uint startsAt;\n', '        uint endsAt;\n', '        uint balance; //Amount of ether sent during this stage\n', '    }\n', '\n', '    //Token symbol\n', '    string public constant symbol = "UNIT";\n', '    //Token name\n', '    string public constant name = "Unilot token";\n', '    //It can be reeeealy small\n', '    uint8 public constant decimals = 18;\n', '\n', '    //This one duplicates the above but will have to use it because of\n', '    //solidity bug with power operation\n', '    uint public constant accuracy = 1000000000000000000;\n', '\n', '    //500 mln tokens\n', '    uint256 internal _totalSupply = 500 * (10**6) * accuracy;\n', '\n', '    //Public investor can buy tokens for 30 ether at maximum\n', '    uint256 public constant singleInvestorCap = 30 ether; //30 ether\n', '\n', '    //Distribution units\n', '    uint public constant DST_ICO     = 62; //62%\n', '    uint public constant DST_RESERVE = 10; //10%\n', '    uint public constant DST_BOUNTY  = 3;  //3%\n', '    //Referral and Bonus Program\n', '    uint public constant DST_R_N_B_PROGRAM = 10; //10%\n', '    uint public constant DST_ADVISERS      = 5;  //5%\n', '    uint public constant DST_TEAM          = 10; //10%\n', '\n', '    //Referral Bonuses\n', '    uint public constant REFERRAL_BONUS_LEVEL1 = 5; //5%\n', '    uint public constant REFERRAL_BONUS_LEVEL2 = 4; //4%\n', '    uint public constant REFERRAL_BONUS_LEVEL3 = 3; //3%\n', '    uint public constant REFERRAL_BONUS_LEVEL4 = 2; //2%\n', '    uint public constant REFERRAL_BONUS_LEVEL5 = 1; //1%\n', '\n', '    //Token amount\n', '    //25 mln tokens\n', '    uint public constant TOKEN_AMOUNT_PRE_ICO = 25 * (10**6) * accuracy;\n', '    //5 mln tokens\n', '    uint public constant TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE1 = 5 * (10**6) * accuracy;\n', '    //5 mln tokens\n', '    uint public constant TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE2 = 5 * (10**6) * accuracy;\n', '    //5 mln tokens\n', '    uint public constant TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE3 = 5 * (10**6) * accuracy;\n', '    //5 mln tokens\n', '    uint public constant TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE4 = 5 * (10**6) * accuracy;\n', '    //122.5 mln tokens\n', '    uint public constant TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE5 = 1225 * (10**5) * accuracy;\n', '    //265 mln tokens\n', '    uint public constant TOKEN_AMOUNT_ICO_STAGE2 = 1425 * (10**5) * accuracy;\n', '\n', '    uint public constant BONUS_PRE_ICO = 40; //40%\n', '    uint public constant BONUS_ICO_STAGE1_PRE_SALE1 = 35; //35%\n', '    uint public constant BONUS_ICO_STAGE1_PRE_SALE2 = 30; //30%\n', '    uint public constant BONUS_ICO_STAGE1_PRE_SALE3 = 25; //25%\n', '    uint public constant BONUS_ICO_STAGE1_PRE_SALE4 = 20; //20%\n', '    uint public constant BONUS_ICO_STAGE1_PRE_SALE5 = 0; //0%\n', '    uint public constant BONUS_ICO_STAGE2 = 0; //No bonus\n', '\n', '    //Token Price on Coin Offer\n', '    uint256 public constant price = 79 szabo; //0.000079 ETH\n', '\n', '    address public constant ADVISORS_WALLET = 0x77660795BD361Cd43c3627eAdad44dDc2026aD17;\n', '    address public constant RESERVE_WALLET = 0x731B47847352fA2cFf83D5251FD6a5266f90878d;\n', '    address public constant BOUNTY_WALLET = 0x794EF9c680bDD0bEf48Bef46bA68471e449D67Fb;\n', '    address public constant R_N_D_WALLET = 0x794EF9c680bDD0bEf48Bef46bA68471e449D67Fb;\n', '    address public constant STORAGE_WALLET = 0xE2A8F147fc808738Cab152b01C7245F386fD8d89;\n', '\n', '    // Owner of this contract\n', '    address public administrator;\n', '\n', '    // Balances for each account\n', '    mapping(address => uint256) balances;\n', '\n', '    // Owner of account approves the transfer of an amount to another account\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    //Mostly needed for internal use\n', '    uint256 internal totalCoinsAvailable;\n', '\n', '    //All token stages. Total 6 stages\n', '    TokenStage[7] stages;\n', '\n', '    //Index of current stage in stage array\n', '    uint currentStage;\n', '\n', '    //Enables or disables debug mode. Debug mode is set only in constructor.\n', '    bool isDebug = false;\n', '\n', '    event StageUpdated(string from, string to);\n', '\n', '    // Functions with this modifier can only be executed by the owner\n', '    modifier onlyAdministrator() {\n', '        require(msg.sender == administrator);\n', '        _;\n', '    }\n', '\n', '    modifier notAdministrator() {\n', '        require(msg.sender != administrator);\n', '        _;\n', '    }\n', '\n', '    modifier onlyDuringICO() {\n', '        require(currentStage < stages.length);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAfterICO(){\n', '        require(currentStage >= stages.length);\n', '        _;\n', '    }\n', '\n', '    modifier meetTheCap() {\n', '        require(msg.value >= price); // At least one token\n', '        _;\n', '    }\n', '\n', '    modifier isFreezedReserve(address _address) {\n', '        require( ( _address == RESERVE_WALLET ) && now > (stages[ (stages.length - 1) ].endsAt + 182 days));\n', '        _;\n', '    }\n', '\n', '    // Constructor\n', '    function UnilotToken()\n', '        public\n', '    {\n', '        administrator = msg.sender;\n', '        totalCoinsAvailable = _totalSupply;\n', '        //Was as fn parameter for debugging\n', '        isDebug = false;\n', '\n', '        _setupStages();\n', '        _proceedStage();\n', '    }\n', '\n', '    function prealocateCoins()\n', '        public\n', '        onlyAdministrator\n', '    {\n', '        totalCoinsAvailable -= balances[ADVISORS_WALLET] += ( ( _totalSupply * DST_ADVISERS ) / 100 );\n', '        totalCoinsAvailable -= balances[RESERVE_WALLET] += ( ( _totalSupply * DST_RESERVE ) / 100 );\n', '\n', '        address[7] memory teamWallets = getTeamWallets();\n', '        uint teamSupply = ( ( _totalSupply * DST_TEAM ) / 100 );\n', '        uint memberAmount = teamSupply / teamWallets.length;\n', '\n', '        for(uint i = 0; i < teamWallets.length; i++) {\n', '            if ( i == ( teamWallets.length - 1 ) ) {\n', '                memberAmount = teamSupply;\n', '            }\n', '\n', '            balances[teamWallets[i]] += memberAmount;\n', '            teamSupply -= memberAmount;\n', '            totalCoinsAvailable -= memberAmount;\n', '        }\n', '    }\n', '\n', '    function getTeamWallets()\n', '        public\n', '        pure\n', '        returns (address[7] memory result)\n', '    {\n', '        result[0] = 0x40e3D8fFc46d73Ab5DF878C751D813a4cB7B388D;\n', '        result[1] = 0x5E065a80f6635B6a46323e3383057cE6051aAcA0;\n', '        result[2] = 0x0cF3585FbAB2a1299F8347a9B87CF7B4fcdCE599;\n', '        result[3] = 0x5fDd3BA5B6Ff349d31eB0a72A953E454C99494aC;\n', '        result[4] = 0xC9be9818eE1B2cCf2E4f669d24eB0798390Ffb54;\n', '        result[5] = 0x77660795BD361Cd43c3627eAdad44dDc2026aD17;\n', '        result[6] = 0xd13289203889bD898d49e31a1500388441C03663;\n', '    }\n', '\n', '    function _setupStages()\n', '        internal\n', '    {\n', '        //Presale stage\n', "        stages[0].name = 'Presale stage';\n", '        stages[0].numCoinsStart = totalCoinsAvailable;\n', '        stages[0].coinsAvailable = TOKEN_AMOUNT_PRE_ICO;\n', '        stages[0].bonus = BONUS_PRE_ICO;\n', '\n', '        if (isDebug) {\n', '            stages[0].startsAt = now;\n', '            stages[0].endsAt = stages[0].startsAt + 30 seconds;\n', '        } else {\n', '            stages[0].startsAt = 1515610800; //10th of January 2018 at 19:00UTC\n', '            stages[0].endsAt = 1518894000; //17th of February 2018 at 19:00UTC\n', '        }\n', '\n', '        //ICO Stage 1 pre-sale 1\n', "        stages[1].name = 'ICO Stage 1 pre-sale 1';\n", '        stages[1].coinsAvailable = TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE1;\n', '        stages[1].bonus = BONUS_ICO_STAGE1_PRE_SALE1;\n', '\n', '        if (isDebug) {\n', '            stages[1].startsAt = stages[0].endsAt;\n', '            stages[1].endsAt = stages[1].startsAt + 30 seconds;\n', '        } else {\n', '            stages[1].startsAt = 1519326000; //22th of February 2018 at 19:00UTC\n', '            stages[1].endsAt = 1521745200; //22th of March 2018 at 19:00UTC\n', '        }\n', '\n', '        //ICO Stage 1 pre-sale 2\n', "        stages[2].name = 'ICO Stage 1 pre-sale 2';\n", '        stages[2].coinsAvailable = TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE2;\n', '        stages[2].bonus = BONUS_ICO_STAGE1_PRE_SALE2;\n', '\n', '        stages[2].startsAt = stages[1].startsAt;\n', '        stages[2].endsAt = stages[1].endsAt;\n', '\n', '        //ICO Stage 1 pre-sale 3\n', "        stages[3].name = 'ICO Stage 1 pre-sale 3';\n", '        stages[3].coinsAvailable = TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE3;\n', '        stages[3].bonus = BONUS_ICO_STAGE1_PRE_SALE3;\n', '\n', '        stages[3].startsAt = stages[1].startsAt;\n', '        stages[3].endsAt = stages[1].endsAt;\n', '\n', '        //ICO Stage 1 pre-sale 4\n', "        stages[4].name = 'ICO Stage 1 pre-sale 4';\n", '        stages[4].coinsAvailable = TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE4;\n', '        stages[4].bonus = BONUS_ICO_STAGE1_PRE_SALE4;\n', '\n', '        stages[4].startsAt = stages[1].startsAt;\n', '        stages[4].endsAt = stages[1].endsAt;\n', '\n', '        //ICO Stage 1 pre-sale 5\n', "        stages[5].name = 'ICO Stage 1 pre-sale 5';\n", '        stages[5].coinsAvailable = TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE5;\n', '        stages[5].bonus = BONUS_ICO_STAGE1_PRE_SALE5;\n', '\n', '        stages[5].startsAt = stages[1].startsAt;\n', '        stages[5].endsAt = stages[1].endsAt;\n', '\n', '        //ICO Stage 2\n', "        stages[6].name = 'ICO Stage 2';\n", '        stages[6].coinsAvailable = TOKEN_AMOUNT_ICO_STAGE2;\n', '        stages[6].bonus = BONUS_ICO_STAGE2;\n', '\n', '        if (isDebug) {\n', '            stages[6].startsAt = stages[5].endsAt;\n', '            stages[6].endsAt = stages[6].startsAt + 30 seconds;\n', '        } else {\n', '            stages[6].startsAt = 1524250800; //20th of April 2018 at 19:00UTC\n', '            stages[6].endsAt = 1526842800; //20th of May 2018 at 19:00UTC\n', '        }\n', '    }\n', '\n', '    function _proceedStage()\n', '        internal\n', '    {\n', '        while (true) {\n', '            if ( currentStage < stages.length\n', '            && (now >= stages[currentStage].endsAt || getAvailableCoinsForCurrentStage() == 0) ) {\n', '                currentStage++;\n', '                uint totalTokensForSale = TOKEN_AMOUNT_PRE_ICO\n', '                                    + TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE1\n', '                                    + TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE2\n', '                                    + TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE3\n', '                                    + TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE4\n', '                                    + TOKEN_AMOUNT_ICO_STAGE2;\n', '\n', '                if (currentStage >= stages.length) {\n', '                    //Burning all unsold tokens and proportionally other for deligation\n', '                    _totalSupply -= ( ( ( stages[(stages.length - 1)].coinsAvailable * DST_BOUNTY ) / 100 )\n', '                                    + ( ( stages[(stages.length - 1)].coinsAvailable * DST_R_N_B_PROGRAM ) / 100 ) );\n', '\n', '                    balances[BOUNTY_WALLET] = (((totalTokensForSale - stages[(stages.length - 1)].coinsAvailable) * DST_BOUNTY)/100);\n', '                    balances[R_N_D_WALLET] = (((totalTokensForSale - stages[(stages.length - 1)].coinsAvailable) * DST_R_N_B_PROGRAM)/100);\n', '\n', '                    totalCoinsAvailable = 0;\n', '                    break; //ICO ended\n', '                }\n', '\n', '                stages[currentStage].numCoinsStart = totalCoinsAvailable;\n', '\n', '                if ( currentStage > 0 ) {\n', '                    //Move all left tokens to last stage\n', '                    stages[(stages.length - 1)].coinsAvailable += stages[ (currentStage - 1 ) ].coinsAvailable;\n', '                    StageUpdated(stages[currentStage - 1].name, stages[currentStage].name);\n', '                }\n', '            } else {\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    function getTotalCoinsAvailable()\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        return totalCoinsAvailable;\n', '    }\n', '\n', '    function getAvailableCoinsForCurrentStage()\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        TokenStage memory stage = stages[currentStage];\n', '\n', '        return stage.coinsAvailable;\n', '    }\n', '\n', '    //------------- ERC20 methods -------------//\n', '    function totalSupply()\n', '        public\n', '        constant\n', '        returns (uint256)\n', '    {\n', '        return _totalSupply;\n', '    }\n', '\n', '\n', '    // What is the balance of a particular account?\n', '    function balanceOf(address _owner)\n', '        public\n', '        constant\n', '        returns (uint256 balance)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '\n', '\n', "    // Transfer the balance from owner's account to another account\n", '    function transfer(address _to, uint256 _amount)\n', '        public\n', '        onlyAfterICO\n', '        isFreezedReserve(_to)\n', '        returns (bool success)\n', '    {\n', '        if (balances[msg.sender] >= _amount\n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(msg.sender, _to, _amount);\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '\n', '    // Send _value amount of tokens from address _from to address _to\n', '    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n', '    // tokens on your behalf, for example to "deposit" to a contract address and/or to charge\n', '    // fees in sub-currencies; the command should fail unless the _from account has\n', '    // deliberately authorized the sender of the message via some mechanism; we propose\n', '    // these standardized APIs for approval:\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    )\n', '        public\n', '        onlyAfterICO\n', '        isFreezedReserve(_from)\n', '        isFreezedReserve(_to)\n', '        returns (bool success)\n', '    {\n', '        if (balances[_from] >= _amount\n', '            && allowed[_from][msg.sender] >= _amount\n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[_from] -= _amount;\n', '            allowed[_from][msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    function approve(address _spender, uint256 _amount)\n', '        public\n', '        onlyAfterICO\n', '        isFreezedReserve(_spender)\n', '        returns (bool success)\n', '    {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    function allowance(address _owner, address _spender)\n', '        public\n', '        constant\n', '        returns (uint256 remaining)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    //------------- ERC20 Methods END -------------//\n', '\n', '    //Returns bonus for certain level of reference\n', '    function calculateReferralBonus(uint amount, uint level)\n', '        public\n', '        pure\n', '        returns (uint bonus)\n', '    {\n', '        bonus = 0;\n', '\n', '        if ( level == 1 ) {\n', '            bonus = ( ( amount * REFERRAL_BONUS_LEVEL1 ) / 100 );\n', '        } else if (level == 2) {\n', '            bonus = ( ( amount * REFERRAL_BONUS_LEVEL2 ) / 100 );\n', '        } else if (level == 3) {\n', '            bonus = ( ( amount * REFERRAL_BONUS_LEVEL3 ) / 100 );\n', '        } else if (level == 4) {\n', '            bonus = ( ( amount * REFERRAL_BONUS_LEVEL4 ) / 100 );\n', '        } else if (level == 5) {\n', '            bonus = ( ( amount * REFERRAL_BONUS_LEVEL5 ) / 100 );\n', '        }\n', '    }\n', '\n', '    function calculateBonus(uint amountOfTokens)\n', '        public\n', '        view\n', '        returns (uint)\n', '    {\n', '        return ( ( stages[currentStage].bonus * amountOfTokens ) / 100 );\n', '    }\n', '\n', '    event TokenPurchased(string stage, uint valueSubmitted, uint valueRefunded, uint tokensPurchased);\n', '\n', '    function ()\n', '        public\n', '        payable\n', '        notAdministrator\n', '        onlyDuringICO\n', '        meetTheCap\n', '    {\n', '        _proceedStage();\n', '        require(currentStage < stages.length);\n', '        require(stages[currentStage].startsAt <= now && now < stages[currentStage].endsAt);\n', '        require(getAvailableCoinsForCurrentStage() > 0);\n', '\n', '        uint requestedAmountOfTokens = ( ( msg.value * accuracy ) / price );\n', '        uint amountToBuy = requestedAmountOfTokens;\n', '        uint refund = 0;\n', '\n', '        if ( amountToBuy > getAvailableCoinsForCurrentStage() ) {\n', '            amountToBuy = getAvailableCoinsForCurrentStage();\n', '            refund = ( ( (requestedAmountOfTokens - amountToBuy) / accuracy ) * price );\n', '\n', '            // Returning ETH\n', '            msg.sender.transfer( refund );\n', '        }\n', '\n', '        TokenPurchased(stages[currentStage].name, msg.value, refund, amountToBuy);\n', '        stages[currentStage].coinsAvailable -= amountToBuy;\n', '        stages[currentStage].balance += (msg.value - refund);\n', '\n', '        uint amountDelivered = amountToBuy + calculateBonus(amountToBuy);\n', '\n', '        balances[msg.sender] += amountDelivered;\n', '        totalCoinsAvailable -= amountDelivered;\n', '\n', '        if ( getAvailableCoinsForCurrentStage() == 0 ) {\n', '            _proceedStage();\n', '        }\n', '\n', '        STORAGE_WALLET.transfer(this.balance);\n', '    }\n', '\n', "    //It doesn't really close the stage\n", '    //It just needed to push transaction to update stage and update block.now\n', '    function closeStage()\n', '        public\n', '        onlyAdministrator\n', '    {\n', '        _proceedStage();\n', '    }\n', '}\n', '\n', 'contract ERC20Contract is ERC20 {\n', '    //Token symbol\n', '    string public constant symbol = "UNIT";\n', '\n', '    //Token name\n', '    string public constant name = "Unilot token";\n', '\n', '    //It can be reeeealy small\n', '    uint8 public constant decimals = 18;\n', '\n', '    // Balances for each account\n', '    mapping(address => uint96) public balances;\n', '\n', '    // Owner of account approves the transfer of an amount to another account\n', '    mapping(address => mapping (address => uint96)) allowed;\n', '\n', '    function totalSupply()\n', '        public\n', '        constant\n', '        returns (uint);\n', '\n', '\n', '    // What is the balance of a particular account?\n', '    function balanceOf(address _owner)\n', '        public\n', '        constant\n', '        returns (uint balance)\n', '    {\n', '        return uint(balances[_owner]);\n', '    }\n', '\n', '\n', "    // Transfer the balance from owner's account to another account\n", '    function transfer(address _to, uint _amount)\n', '        public\n', '        returns (bool success)\n', '    {\n', '        if (balances[msg.sender] >= _amount\n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[msg.sender] -= uint96(_amount);\n', '            balances[_to] += uint96(_amount);\n', '            Transfer(msg.sender, _to, _amount);\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '\n', '    // Send _value amount of tokens from address _from to address _to\n', '    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n', '    // tokens on your behalf, for example to "deposit" to a contract address and/or to charge\n', '    // fees in sub-currencies; the command should fail unless the _from account has\n', '    // deliberately authorized the sender of the message via some mechanism; we propose\n', '    // these standardized APIs for approval:\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    )\n', '        public\n', '        returns (bool success)\n', '    {\n', '        if (balances[_from] >= _amount\n', '            && allowed[_from][msg.sender] >= _amount\n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[_from] -= uint96(_amount);\n', '            allowed[_from][msg.sender] -= uint96(_amount);\n', '            balances[_to] += uint96(_amount);\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    function approve(address _spender, uint _amount)\n', '        public\n', '        returns (bool success)\n', '    {\n', '        allowed[msg.sender][_spender] = uint96(_amount);\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    function allowance(address _owner, address _spender)\n', '        public\n', '        constant\n', '        returns (uint remaining)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', 'interface TokenStagesManager {\n', '    function isDebug() public constant returns(bool);\n', '    function setToken(address tokenAddress) public;\n', '    function getPool() public constant returns (uint96);\n', '    function getBonus() public constant returns (uint8);\n', '    function isFreezeTimeout() public constant returns (bool);\n', '    function isTimeout() public constant returns (bool);\n', '    function isICO() public view returns(bool);\n', '    function isCanList() public view returns (bool);\n', '    function calculateBonus(uint96 amount) public view returns (uint88);\n', '    function delegateFromPool(uint96 amount) public;\n', '    function delegateFromBonus(uint88 amount) public;\n', '    function delegateFromReferral(uint88 amount) public;\n', '\n', '    function getBonusPool() public constant returns(uint88);\n', '    function getReferralPool() public constant returns(uint88);\n', '}\n', '\n', 'interface Whitelist {\n', '    function add(address _wlAddress) public;\n', '    function addBulk(address[] _wlAddresses) public;\n', '    function remove(address _wlAddresses) public;\n', '    function removeBulk(address[] _wlAddresses) public;\n', '    function getAll() public constant returns(address[]);\n', '    function isInList(address _checkAddress) public constant returns(bool);\n', '}\n', '\n', 'contract Administrated {\n', '    address public administrator;\n', '\n', '    modifier onlyAdministrator() {\n', '        require(administrator == tx.origin);\n', '        _;\n', '    }\n', '\n', '    modifier notAdministrator() {\n', '        require(administrator != tx.origin);\n', '        _;\n', '    }\n', '\n', '    function setAdministrator(address _administrator)\n', '        internal\n', '    {\n', '        administrator = _administrator;\n', '    }\n', '}\n', '\n', 'contract UNITv2 is ERC20Contract,Administrated {\n', '    //Token symbol\n', '    string public constant symbol = "UNIT";\n', '    //Token name\n', '    string public constant name = "Unilot token";\n', '    //It can be reeeealy small\n', '    uint8 public constant decimals = 18;\n', '\n', '    //Total supply 500mln in the start\n', '    uint96 public _totalSupply = uint96(500000000 * (10**18));\n', '\n', '    UnilotToken public sourceToken;\n', '\n', '    Whitelist public transferWhiteList;\n', '\n', '    Whitelist public paymentGateways;\n', '\n', '    TokenStagesManager public stagesManager;\n', '\n', '    bool public unlocked = false;\n', '\n', '    bool public burned = false;\n', '\n', '    //tokenImport[tokenHolder][sourceToken] = true/false;\n', '    mapping ( address => mapping ( address => bool ) ) public tokenImport;\n', '\n', '    event TokensImported(address indexed tokenHolder, uint96 amount, address indexed source);\n', '    event TokensDelegated(address indexed tokenHolder, uint96 amount, address indexed source);\n', '    event Unlocked();\n', '    event Burned(uint96 amount);\n', '\n', '    modifier isLocked() {\n', '        require(unlocked == false);\n', '        _;\n', '    }\n', '\n', '    modifier isNotBurned() {\n', '        require(burned == false);\n', '        _;\n', '    }\n', '\n', '    modifier isTransferAllowed(address _from, address _to) {\n', '        if ( sourceToken.RESERVE_WALLET() == _from ) {\n', '            require( stagesManager.isFreezeTimeout() );\n', '        }\n', '        require(unlocked\n', '                || ( stagesManager != address(0) && stagesManager.isCanList() )\n', '                || ( transferWhiteList != address(0) && ( transferWhiteList.isInList(_from) || transferWhiteList.isInList(_to) ) )\n', '        );\n', '        _;\n', '    }\n', '\n', '    function UNITv2(address _sourceToken)\n', '        public\n', '    {\n', '        setAdministrator(tx.origin);\n', '        sourceToken = UnilotToken(_sourceToken);\n', '\n', '        /*Transactions:\n', '        0x99c28675adbd0d0cb7bd783ae197492078d4063f40c11139dd07c015a543ffcc\n', '        0x86038d11ee8da46703309d2fb45d150f1dc4e2bba6d0a8fee158016111104ff1\n', '        0x0340a8a2fb89513c0086a345973470b7bc33424e818ca6a32dcf9ad66bf9d75c\n', '        */\n', '        balances[0xd13289203889bD898d49e31a1500388441C03663] += 1400000000000000000 * 3;\n', '        markAsImported(0xdBF98dF5DAd9077f457e1dcf85Aa9420BcA8B761, 0xd13289203889bD898d49e31a1500388441C03663);\n', '\n', '        //Tx: 0xec9b7b4c0f1435282e2e98a66efbd7610de7eacce3b2448cd5f503d70a64a895\n', '        balances[0xE33305B2EFbcB302DA513C38671D01646651a868] += 1400000000000000000;\n', '        markAsImported(0xdBF98dF5DAd9077f457e1dcf85Aa9420BcA8B761, 0xE33305B2EFbcB302DA513C38671D01646651a868);\n', '\n', '        //Assigning bounty\n', '        balances[0x794EF9c680bDD0bEf48Bef46bA68471e449D67Fb] += uint96(\n', '            ( uint(_totalSupply) * uint8( sourceToken.DST_BOUNTY() ) ) / 100\n', '        );\n', '\n', "        //Don't import bounty and R&B tokens\n", '        markAsImported(0xdBF98dF5DAd9077f457e1dcf85Aa9420BcA8B761, 0x794EF9c680bDD0bEf48Bef46bA68471e449D67Fb);\n', '        markAsImported(sourceToken, 0x794EF9c680bDD0bEf48Bef46bA68471e449D67Fb);\n', '\n', '        markAsImported(0xdBF98dF5DAd9077f457e1dcf85Aa9420BcA8B761, 0x91D740D87A8AeED1fc3EA3C346843173c529D63e);\n', '    }\n', '\n', '    function setTransferWhitelist(address whiteListAddress)\n', '        public\n', '        onlyAdministrator\n', '        isNotBurned\n', '    {\n', '        transferWhiteList = Whitelist(whiteListAddress);\n', '    }\n', '\n', '    function disableTransferWhitelist()\n', '        public\n', '        onlyAdministrator\n', '        isNotBurned\n', '    {\n', '        transferWhiteList = Whitelist(address(0));\n', '    }\n', '\n', '    function setStagesManager(address stagesManagerContract)\n', '        public\n', '        onlyAdministrator\n', '        isNotBurned\n', '    {\n', '        stagesManager = TokenStagesManager(stagesManagerContract);\n', '    }\n', '\n', '    function setPaymentGatewayList(address paymentGatewayListContract)\n', '        public\n', '        onlyAdministrator\n', '        isNotBurned\n', '    {\n', '        paymentGateways = Whitelist(paymentGatewayListContract);\n', '    }\n', '\n', '    //START Import related methods\n', '    function isImported(address _sourceToken, address _tokenHolder)\n', '        internal\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return tokenImport[_tokenHolder][_sourceToken];\n', '    }\n', '\n', '    function markAsImported(address _sourceToken, address _tokenHolder)\n', '        internal\n', '    {\n', '        tokenImport[_tokenHolder][_sourceToken] = true;\n', '    }\n', '\n', '    function importFromSource(ERC20 _sourceToken, address _tokenHolder)\n', '        internal\n', '    {\n', '        if ( !isImported(_sourceToken, _tokenHolder) ) {\n', '            uint96 oldBalance = uint96(_sourceToken.balanceOf(_tokenHolder));\n', '            balances[_tokenHolder] += oldBalance;\n', '            markAsImported(_sourceToken, _tokenHolder);\n', '\n', '            TokensImported(_tokenHolder, oldBalance, _sourceToken);\n', '        }\n', '    }\n', '\n', '    //Imports from source token\n', '    function importTokensFromSourceToken(address _tokenHolder)\n', '        internal\n', '    {\n', '        importFromSource(ERC20(sourceToken), _tokenHolder);\n', '    }\n', '\n', '    function importFromExternal(ERC20 _sourceToken, address _tokenHolder)\n', '        public\n', '        onlyAdministrator\n', '        isNotBurned\n', '    {\n', '        return importFromSource(_sourceToken, _tokenHolder);\n', '    }\n', '\n', '    //Imports from provided token\n', '    function importTokensSourceBulk(ERC20 _sourceToken, address[] _tokenHolders)\n', '        public\n', '        onlyAdministrator\n', '        isNotBurned\n', '    {\n', '        require(_tokenHolders.length <= 256);\n', '\n', '        for (uint8 i = 0; i < _tokenHolders.length; i++) {\n', '            importFromSource(_sourceToken, _tokenHolders[i]);\n', '        }\n', '    }\n', '    //END Import related methods\n', '\n', '    //START ERC20\n', '    function totalSupply()\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        return uint(_totalSupply);\n', '    }\n', '\n', '    function balanceOf(address _owner)\n', '        public\n', '        constant\n', '        returns (uint balance)\n', '    {\n', '        balance = super.balanceOf(_owner);\n', '\n', '        if (!isImported(sourceToken, _owner)) {\n', '            balance += sourceToken.balanceOf(_owner);\n', '        }\n', '    }\n', '\n', '    function transfer(address _to, uint _amount)\n', '        public\n', '        isTransferAllowed(msg.sender, _to)\n', '        returns (bool success)\n', '    {\n', '        return super.transfer(_to, _amount);\n', '    }\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    )\n', '        public\n', '        isTransferAllowed(_from, _to)\n', '        returns (bool success)\n', '    {\n', '        return super.transferFrom(_from, _to, _amount);\n', '    }\n', '\n', '    function approve(address _spender, uint _amount)\n', '        public\n', '        isTransferAllowed(msg.sender, _spender)\n', '        returns (bool success)\n', '    {\n', '        return super.approve(_spender, _amount);\n', '    }\n', '    //END ERC20\n', '\n', '    function delegateTokens(address tokenHolder, uint96 amount)\n', '        public\n', '        isNotBurned\n', '    {\n', '        require(paymentGateways.isInList(msg.sender));\n', '        require(stagesManager.isICO());\n', '        require(stagesManager.getPool() >= amount);\n', '\n', '        uint88 bonus = stagesManager.calculateBonus(amount);\n', '        stagesManager.delegateFromPool(amount);\n', '\n', '        balances[tokenHolder] += amount + uint96(bonus);\n', '\n', '        TokensDelegated(tokenHolder, amount, msg.sender);\n', '    }\n', '\n', '    function delegateBonusTokens(address tokenHolder, uint88 amount)\n', '        public\n', '        isNotBurned\n', '    {\n', '        require(paymentGateways.isInList(msg.sender) || tx.origin == administrator);\n', '        require(stagesManager.getBonusPool() >= amount);\n', '\n', '        stagesManager.delegateFromBonus(amount);\n', '\n', '        balances[tokenHolder] += amount;\n', '\n', '        TokensDelegated(tokenHolder, uint96(amount), msg.sender);\n', '    }\n', '\n', '    function delegateReferalTokens(address tokenHolder, uint88 amount)\n', '        public\n', '        isNotBurned\n', '    {\n', '        require(paymentGateways.isInList(msg.sender) || tx.origin == administrator);\n', '        require(stagesManager.getReferralPool() >= amount);\n', '\n', '        stagesManager.delegateFromReferral(amount);\n', '\n', '        balances[tokenHolder] += amount;\n', '\n', '        TokensDelegated(tokenHolder, amount, msg.sender);\n', '    }\n', '\n', '    function delegateReferralTokensBulk(address[] tokenHolders, uint88[] amounts)\n', '        public\n', '        isNotBurned\n', '    {\n', '        require(paymentGateways.isInList(msg.sender) || tx.origin == administrator);\n', '        require(tokenHolders.length <= 256);\n', '        require(tokenHolders.length == amounts.length);\n', '\n', '        for ( uint8 i = 0; i < tokenHolders.length; i++ ) {\n', '            delegateReferalTokens(tokenHolders[i], amounts[i]);\n', '        }\n', '    }\n', '\n', '    function unlock()\n', '        public\n', '        isLocked\n', '        onlyAdministrator\n', '    {\n', '        unlocked = true;\n', '        Unlocked();\n', '    }\n', '\n', '    function burn()\n', '        public\n', '        onlyAdministrator\n', '    {\n', '        require(!stagesManager.isICO());\n', '\n', '        uint96 burnAmount = stagesManager.getPool()\n', '                        + stagesManager.getBonusPool()\n', '                        + stagesManager.getReferralPool();\n', '\n', '        _totalSupply -= burnAmount;\n', '        burned = true;\n', '        Burned(burnAmount);\n', '    }\n', '}']
