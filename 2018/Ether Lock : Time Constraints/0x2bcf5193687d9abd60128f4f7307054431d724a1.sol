['pragma solidity ^0.4.24;\n', '\n', '// File: contracts/PeriodUtil.sol\n', '\n', '/**\n', ' * @title PeriodUtil\n', ' * \n', ' * Interface used for Period calculation to allow better automated testing of Fees Contract\n', ' *\n', ' * (c) Philip Louw / Zero Carbon Project 2018. The MIT Licence.\n', ' */\n', 'contract PeriodUtil {\n', '    /**\n', '    * @dev calculates the Period index for the given timestamp\n', '    * @return Period count since EPOCH\n', '    * @param timestamp The time in seconds since EPOCH (blocktime)\n', '    */\n', '    function getPeriodIdx(uint256 timestamp) public pure returns (uint256);\n', '    \n', '    /**\n', '    * @dev Timestamp of the period start\n', '    * @return Time in seconds since EPOCH of the Period Start\n', '    * @param periodIdx Period Index to find the start timestamp of\n', '    */\n', '    function getPeriodStartTimestamp(uint256 periodIdx) public pure returns (uint256);\n', '\n', '    /**\n', '    * @dev Returns the Cycle count of the given Periods. A set of time creates a cycle, eg. If period is weeks the cycle can be years.\n', '    * @return The Cycle Index\n', '    * @param timestamp The time in seconds since EPOCH (blocktime)\n', '    */\n', '    function getPeriodCycle(uint256 timestamp) public pure returns (uint256);\n', '\n', '    /**\n', '    * @dev Amount of Tokens per time unit since the start of the given periodIdx\n', '    * @return Tokens per Time Unit from the given periodIdx start till now\n', '    * @param tokens Total amount of tokens from periodIdx start till now (blocktime)\n', '    * @param periodIdx Period IDX to use for time start\n', '    */\n', '    function getRatePerTimeUnits(uint256 tokens, uint256 periodIdx) public view returns (uint256);\n', '\n', '    /**\n', '    * @dev Amount of time units in each Period, for exampe if units is hour and period is week it will be 168\n', '    * @return Amount of time units per period\n', '    */\n', '    function getUnitsPerPeriod() public pure returns (uint256);\n', '}\n', '\n', '// File: contracts/PeriodUtilWeek.sol\n', '\n', '/**\n', ' * @title PeriodUtilWeek\n', ' * \n', ' * Used to calculate Weeks and Years\n', ' *\n', ' * (c) Philip Louw / Zero Carbon Project 2018. The MIT Licence.\n', ' */\n', 'contract PeriodUtilWeek is PeriodUtil {\n', '  \n', '    uint256 public constant HOURS_IN_WEEK = 168;\n', '    uint256 constant YEAR_IN_SECONDS = 31536000;\n', '    uint256 constant LEAP_YEAR_IN_SECONDS = 31622400;\n', '\n', '    uint16 constant ORIGIN_YEAR = 1970;\n', '\n', '\n', '    /**\n', '    * @dev calculates the Week index for the given timestamp\n', '    * @return Weeks count since EPOCH\n', '    * @param timestamp The time in seconds since EPOCH (blocktime)\n', '    */\n', '    function getPeriodIdx(uint256 timestamp) public pure returns (uint256) {\n', '        return timestamp / 1 weeks;\n', '    }\n', '\n', '    /**\n', '    * @dev Timestamp of the Week start\n', '    * @return Time in seconds since EPOCH of the Period Start\n', '    * @param periodIdx Period Index to find the start timestamp of\n', '    */\n', '    function getPeriodStartTimestamp(uint256 periodIdx) public pure returns (uint256) {\n', '        // Safty for uint overflow (safe till year 2928)\n', '        assert(periodIdx < 50000);\n', '        return 1 weeks * periodIdx;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the Cycle count of the given Periods. A set of time creates a cycle, eg. If period is weeks the cycle can be years.\n', '    * @return The Cycle Index\n', '    * @param timestamp The time in seconds since EPOCH (blocktime)\n', '    */\n', '    function getPeriodCycle(uint256 timestamp) public pure returns (uint256) {\n', '        uint256 secondsAccountedFor = 0;\n', '        uint16 year;\n', '        uint256 numLeapYears;\n', '        \n', '        // Year\n', '        year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\n', '        numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\n', '        \n', '        secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\n', '        secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\n', '        \n', '        while (secondsAccountedFor > timestamp) {\n', '            if (isLeapYear(uint16(year - 1))) {\n', '                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\n', '            }\n', '            else {\n', '                secondsAccountedFor -= YEAR_IN_SECONDS;\n', '            }\n', '            year -= 1;\n', '        }\n', '        return year;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the amount of leap years before the given date\n', '     */\n', '    function leapYearsBefore(uint256 _year) public pure returns (uint256) {\n', '        uint256 year = _year - 1;\n', '        return year / 4 - year / 100 + year / 400;\n', '    }\n', '\n', '    /**\n', '     * @dev Is the given year a leap Year\n', '     */\n', '    function isLeapYear(uint16 year) public pure returns (bool) {\n', '        if (year % 4 != 0) {\n', '            return false;\n', '        }\n', '        if (year % 100 != 0) {\n', '            return true;\n', '        }\n', '        if (year % 400 != 0) {\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Amount of Tokens per time unit since the start of the given periodIdx\n', '    * @return Tokens per Time Unit from the given periodIdx start till now\n', '    * @param tokens Total amount of tokens from periodIdx start till now (blocktime)\n', '    * @param periodIdx Period IDX to use for time start\n', '    */\n', '    function getRatePerTimeUnits(uint256 tokens, uint256 periodIdx) public view returns (uint256) {\n', '        if (tokens <= 0)\n', '          return 0;\n', '        uint256 hoursSinceTime = hoursSinceTimestamp(getPeriodStartTimestamp(periodIdx));\n', '        return tokens / hoursSinceTime;\n', '    }\n', '\n', '    /**\n', '    * @dev Hours since given timestamp\n', '    * @param timestamp Timestamp in seconds since EPOCH to calculate hours to\n', '    * @return Retuns the number of hours since the given timestamp and blocktime\n', '    */\n', '    function hoursSinceTimestamp(uint256 timestamp) public view returns (uint256) {\n', '        assert(now > timestamp);\n', '        return (now - timestamp) / 1 hours;\n', '    }\n', '\n', '    /**\n', '    * @dev Amount of time units in each Period, for exampe if units is hour and period is week it will be 168\n', '    * @return Amount of time units per period\n', '    */\n', '    function getUnitsPerPeriod() public pure returns (uint256) {\n', '        return HOURS_IN_WEEK;\n', '    }\n', '}']