['pragma solidity ^0.4.17;\n', '\n', 'contract AccessControl {\n', '    address public creatorAddress;\n', '    uint16 public totalSeraphims = 0;\n', '    mapping (address => bool) public seraphims;\n', '\n', '    bool public isMaintenanceMode = true;\n', ' \n', '    modifier onlyCREATOR() {\n', '        require(msg.sender == creatorAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlySERAPHIM() {\n', '        require(seraphims[msg.sender] == true);\n', '        _;\n', '    }\n', '    \n', '    modifier isContractActive {\n', '        require(!isMaintenanceMode);\n', '        _;\n', '    }\n', '    \n', '    // Constructor\n', '    function AccessControl() public {\n', '        creatorAddress = msg.sender;\n', '    }\n', '    \n', '\n', '    function addSERAPHIM(address _newSeraphim) onlyCREATOR public {\n', '        if (seraphims[_newSeraphim] == false) {\n', '            seraphims[_newSeraphim] = true;\n', '            totalSeraphims += 1;\n', '        }\n', '    }\n', '    \n', '    function removeSERAPHIM(address _oldSeraphim) onlyCREATOR public {\n', '        if (seraphims[_oldSeraphim] == true) {\n', '            seraphims[_oldSeraphim] = false;\n', '            totalSeraphims -= 1;\n', '        }\n', '    }\n', '\n', '    function updateMaintenanceMode(bool _isMaintaining) onlyCREATOR public {\n', '        isMaintenanceMode = _isMaintaining;\n', '    }\n', '\n', '  \n', '} \n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint x, uint y) pure internal returns(uint) {\n', '      uint z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtract(uint x, uint y) pure internal returns(uint) {\n', '      assert(x >= y);\n', '      uint z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint x, uint y) pure internal returns(uint) {\n', '      uint z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '    \n', '     \n', '\n', '    function getRandomNumber(uint16 maxRandom, uint8 min, address privateAddress) constant public returns(uint8) {\n', '        uint256 genNum = uint256(block.blockhash(block.number-1)) + uint256(privateAddress);\n', '        return uint8(genNum % (maxRandom - min + 1)+min);\n', '    }\n', '}\n', '\n', 'contract Enums {\n', '    enum ResultCode {\n', '        SUCCESS,\n', '        ERROR_CLASS_NOT_FOUND,\n', '        ERROR_LOW_BALANCE,\n', '        ERROR_SEND_FAIL,\n', '        ERROR_NOT_OWNER,\n', '        ERROR_NOT_ENOUGH_MONEY,\n', '        ERROR_INVALID_AMOUNT\n', '    }\n', '\n', '    enum AngelAura { \n', '        Blue, \n', '        Yellow, \n', '        Purple, \n', '        Orange, \n', '        Red, \n', '        Green \n', '    }\n', '}\n', '\n', '\n', 'contract IAngelCardData is AccessControl, Enums {\n', '    uint8 public totalAngelCardSeries;\n', '    uint64 public totalAngels;\n', '\n', '    \n', '    // write\n', '    // angels\n', '    function createAngelCardSeries(uint8 _angelCardSeriesId, uint _basePrice,  uint64 _maxTotal, uint8 _baseAura, uint16 _baseBattlePower, uint64 _liveTime) onlyCREATOR external returns(uint8);\n', '    function updateAngelCardSeries(uint8 _angelCardSeriesId, uint64 _newPrice, uint64 _newMaxTotal) onlyCREATOR external;\n', '    function setAngel(uint8 _angelCardSeriesId, address _owner, uint _price, uint16 _battlePower) onlySERAPHIM external returns(uint64);\n', '    function addToAngelExperienceLevel(uint64 _angelId, uint _value) onlySERAPHIM external;\n', '    function setAngelLastBattleTime(uint64 _angelId) onlySERAPHIM external;\n', '    function setAngelLastVsBattleTime(uint64 _angelId) onlySERAPHIM external;\n', '    function setLastBattleResult(uint64 _angelId, uint16 _value) onlySERAPHIM external;\n', '    function addAngelIdMapping(address _owner, uint64 _angelId) private;\n', '    function transferAngel(address _from, address _to, uint64 _angelId) onlySERAPHIM public returns(ResultCode);\n', '    function ownerAngelTransfer (address _to, uint64 _angelId)  public;\n', '    function updateAngelLock (uint64 _angelId, bool newValue) public;\n', '    function removeCreator() onlyCREATOR external;\n', '\n', '    // read\n', '    function getAngelCardSeries(uint8 _angelCardSeriesId) constant public returns(uint8 angelCardSeriesId, uint64 currentAngelTotal, uint basePrice, uint64 maxAngelTotal, uint8 baseAura, uint baseBattlePower, uint64 lastSellTime, uint64 liveTime);\n', '    function getAngel(uint64 _angelId) constant public returns(uint64 angelId, uint8 angelCardSeriesId, uint16 battlePower, uint8 aura, uint16 experience, uint price, uint64 createdTime, uint64 lastBattleTime, uint64 lastVsBattleTime, uint16 lastBattleResult, address owner);\n', '    function getOwnerAngelCount(address _owner) constant public returns(uint);\n', '    function getAngelByIndex(address _owner, uint _index) constant public returns(uint64);\n', '    function getTotalAngelCardSeries() constant public returns (uint8);\n', '    function getTotalAngels() constant public returns (uint64);\n', '    function getAngelLockStatus(uint64 _angelId) constant public returns (bool);\n', '}\n', '\n', 'contract IBattleCooldown is AccessControl, SafeMath {\n', '    \n', '    function setBestAngel (uint32 _bestAngel) onlySERAPHIM external ;\n', '    function getBestAngel() public constant returns (uint32) ;\n', '    function getBattleCooldown(uint64 angelID) constant public returns (uint64) ;\n', '    function getNextBattleTime(uint64 angelId) constant public returns (uint) ;\n', '    \n', '}\n', '\n', 'contract BattleCooldown  is IBattleCooldown {\n', '    // Addresses for other contracts ArenaBattle interacts with.\n', '\n', '\n', 'address public angelCardDataContract = 0x6D2E76213615925c5fc436565B5ee788Ee0E86DC;\n', 'uint32 public bestAngel = 120;\n', '      \n', '      \n', '    function setBestAngel (uint32 _bestAngel) onlySERAPHIM external {\n', '        bestAngel = _bestAngel;\n', '    }\n', '    \n', '    function getBestAngel() public constant returns (uint32) {\n', '        return bestAngel;\n', '    }\n', '    \n', '        function getBattleCooldown(uint64 angelID) constant public returns (uint64) {\n', '        IAngelCardData angelCardData = IAngelCardData(angelCardDataContract);\n', '        uint64 experience;\n', '        (,,,,experience,,,,,,) = angelCardData.getAngel(angelID);\n', '       if (experience == bestAngel) {return 43200;}\n', '        if (safeSubtract(bestAngel, experience) > 120) {return 0;}\n', '         if (safeSubtract(bestAngel, experience) > 90) {return 3600;}\n', '         if (safeSubtract(bestAngel, experience) > 60) {return 21600;}\n', '         if (safeSubtract(bestAngel, experience) > 30) {return 28800;}\n', '         return 43200;\n', '        \n', '    }\n', '    \n', '    function getNextBattleTime(uint64 angelId) constant public returns (uint) {\n', '        //returns Unix timestamp of the next time an angel can battle. \n', '        IAngelCardData angelCardData = IAngelCardData(angelCardDataContract);\n', '        uint angellastBattleTime;\n', '           (,,,,,,,angellastBattleTime,,,) = angelCardData.getAngel(angelId);\n', '        return (angellastBattleTime + getBattleCooldown(angelId));\n', '}\n', '\n', '}']
['pragma solidity ^0.4.17;\n', '\n', 'contract AccessControl {\n', '    address public creatorAddress;\n', '    uint16 public totalSeraphims = 0;\n', '    mapping (address => bool) public seraphims;\n', '\n', '    bool public isMaintenanceMode = true;\n', ' \n', '    modifier onlyCREATOR() {\n', '        require(msg.sender == creatorAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlySERAPHIM() {\n', '        require(seraphims[msg.sender] == true);\n', '        _;\n', '    }\n', '    \n', '    modifier isContractActive {\n', '        require(!isMaintenanceMode);\n', '        _;\n', '    }\n', '    \n', '    // Constructor\n', '    function AccessControl() public {\n', '        creatorAddress = msg.sender;\n', '    }\n', '    \n', '\n', '    function addSERAPHIM(address _newSeraphim) onlyCREATOR public {\n', '        if (seraphims[_newSeraphim] == false) {\n', '            seraphims[_newSeraphim] = true;\n', '            totalSeraphims += 1;\n', '        }\n', '    }\n', '    \n', '    function removeSERAPHIM(address _oldSeraphim) onlyCREATOR public {\n', '        if (seraphims[_oldSeraphim] == true) {\n', '            seraphims[_oldSeraphim] = false;\n', '            totalSeraphims -= 1;\n', '        }\n', '    }\n', '\n', '    function updateMaintenanceMode(bool _isMaintaining) onlyCREATOR public {\n', '        isMaintenanceMode = _isMaintaining;\n', '    }\n', '\n', '  \n', '} \n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint x, uint y) pure internal returns(uint) {\n', '      uint z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtract(uint x, uint y) pure internal returns(uint) {\n', '      assert(x >= y);\n', '      uint z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint x, uint y) pure internal returns(uint) {\n', '      uint z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '    \n', '     \n', '\n', '    function getRandomNumber(uint16 maxRandom, uint8 min, address privateAddress) constant public returns(uint8) {\n', '        uint256 genNum = uint256(block.blockhash(block.number-1)) + uint256(privateAddress);\n', '        return uint8(genNum % (maxRandom - min + 1)+min);\n', '    }\n', '}\n', '\n', 'contract Enums {\n', '    enum ResultCode {\n', '        SUCCESS,\n', '        ERROR_CLASS_NOT_FOUND,\n', '        ERROR_LOW_BALANCE,\n', '        ERROR_SEND_FAIL,\n', '        ERROR_NOT_OWNER,\n', '        ERROR_NOT_ENOUGH_MONEY,\n', '        ERROR_INVALID_AMOUNT\n', '    }\n', '\n', '    enum AngelAura { \n', '        Blue, \n', '        Yellow, \n', '        Purple, \n', '        Orange, \n', '        Red, \n', '        Green \n', '    }\n', '}\n', '\n', '\n', 'contract IAngelCardData is AccessControl, Enums {\n', '    uint8 public totalAngelCardSeries;\n', '    uint64 public totalAngels;\n', '\n', '    \n', '    // write\n', '    // angels\n', '    function createAngelCardSeries(uint8 _angelCardSeriesId, uint _basePrice,  uint64 _maxTotal, uint8 _baseAura, uint16 _baseBattlePower, uint64 _liveTime) onlyCREATOR external returns(uint8);\n', '    function updateAngelCardSeries(uint8 _angelCardSeriesId, uint64 _newPrice, uint64 _newMaxTotal) onlyCREATOR external;\n', '    function setAngel(uint8 _angelCardSeriesId, address _owner, uint _price, uint16 _battlePower) onlySERAPHIM external returns(uint64);\n', '    function addToAngelExperienceLevel(uint64 _angelId, uint _value) onlySERAPHIM external;\n', '    function setAngelLastBattleTime(uint64 _angelId) onlySERAPHIM external;\n', '    function setAngelLastVsBattleTime(uint64 _angelId) onlySERAPHIM external;\n', '    function setLastBattleResult(uint64 _angelId, uint16 _value) onlySERAPHIM external;\n', '    function addAngelIdMapping(address _owner, uint64 _angelId) private;\n', '    function transferAngel(address _from, address _to, uint64 _angelId) onlySERAPHIM public returns(ResultCode);\n', '    function ownerAngelTransfer (address _to, uint64 _angelId)  public;\n', '    function updateAngelLock (uint64 _angelId, bool newValue) public;\n', '    function removeCreator() onlyCREATOR external;\n', '\n', '    // read\n', '    function getAngelCardSeries(uint8 _angelCardSeriesId) constant public returns(uint8 angelCardSeriesId, uint64 currentAngelTotal, uint basePrice, uint64 maxAngelTotal, uint8 baseAura, uint baseBattlePower, uint64 lastSellTime, uint64 liveTime);\n', '    function getAngel(uint64 _angelId) constant public returns(uint64 angelId, uint8 angelCardSeriesId, uint16 battlePower, uint8 aura, uint16 experience, uint price, uint64 createdTime, uint64 lastBattleTime, uint64 lastVsBattleTime, uint16 lastBattleResult, address owner);\n', '    function getOwnerAngelCount(address _owner) constant public returns(uint);\n', '    function getAngelByIndex(address _owner, uint _index) constant public returns(uint64);\n', '    function getTotalAngelCardSeries() constant public returns (uint8);\n', '    function getTotalAngels() constant public returns (uint64);\n', '    function getAngelLockStatus(uint64 _angelId) constant public returns (bool);\n', '}\n', '\n', 'contract IBattleCooldown is AccessControl, SafeMath {\n', '    \n', '    function setBestAngel (uint32 _bestAngel) onlySERAPHIM external ;\n', '    function getBestAngel() public constant returns (uint32) ;\n', '    function getBattleCooldown(uint64 angelID) constant public returns (uint64) ;\n', '    function getNextBattleTime(uint64 angelId) constant public returns (uint) ;\n', '    \n', '}\n', '\n', 'contract BattleCooldown  is IBattleCooldown {\n', '    // Addresses for other contracts ArenaBattle interacts with.\n', '\n', '\n', 'address public angelCardDataContract = 0x6D2E76213615925c5fc436565B5ee788Ee0E86DC;\n', 'uint32 public bestAngel = 120;\n', '      \n', '      \n', '    function setBestAngel (uint32 _bestAngel) onlySERAPHIM external {\n', '        bestAngel = _bestAngel;\n', '    }\n', '    \n', '    function getBestAngel() public constant returns (uint32) {\n', '        return bestAngel;\n', '    }\n', '    \n', '        function getBattleCooldown(uint64 angelID) constant public returns (uint64) {\n', '        IAngelCardData angelCardData = IAngelCardData(angelCardDataContract);\n', '        uint64 experience;\n', '        (,,,,experience,,,,,,) = angelCardData.getAngel(angelID);\n', '       if (experience == bestAngel) {return 43200;}\n', '        if (safeSubtract(bestAngel, experience) > 120) {return 0;}\n', '         if (safeSubtract(bestAngel, experience) > 90) {return 3600;}\n', '         if (safeSubtract(bestAngel, experience) > 60) {return 21600;}\n', '         if (safeSubtract(bestAngel, experience) > 30) {return 28800;}\n', '         return 43200;\n', '        \n', '    }\n', '    \n', '    function getNextBattleTime(uint64 angelId) constant public returns (uint) {\n', '        //returns Unix timestamp of the next time an angel can battle. \n', '        IAngelCardData angelCardData = IAngelCardData(angelCardDataContract);\n', '        uint angellastBattleTime;\n', '           (,,,,,,,angellastBattleTime,,,) = angelCardData.getAngel(angelId);\n', '        return (angellastBattleTime + getBattleCooldown(angelId));\n', '}\n', '\n', '}']
