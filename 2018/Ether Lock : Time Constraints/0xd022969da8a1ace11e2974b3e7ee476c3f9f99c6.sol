['pragma solidity ^0.4.11;\n', '\n', '\n', 'contract PreSaleFund\n', '{\n', '    address owner = msg.sender;\n', '\n', '    event CashMove(uint amount,bytes32 logMsg,address target,address currentOwner);\n', '    \n', '    mapping(address => uint) investors;\n', '    \n', '    uint public MinInvestment = 0.1 ether;\n', '   \n', '    function loggedTransfer(uint amount, bytes32 logMsg, address target, address currentOwner) \n', '    payable\n', '    {\n', '       if(msg.sender != address(this))throw;\n', '       if(target.call.value(amount)())\n', '       {\n', '          CashMove(amount, logMsg, target, currentOwner);\n', '       }\n', '    }\n', '    \n', '    function Invest() \n', '    public \n', '    payable \n', '    {\n', '        if (msg.value > MinInvestment)\n', '        {\n', '            investors[msg.sender] += msg.value;\n', '        }\n', '    }\n', '\n', '    function Divest(uint amount) \n', '    public \n', '    {\n', '        if ( investors[msg.sender] > 0 && amount > 0)\n', '        {\n', '            this.loggedTransfer(amount, "", msg.sender, owner);\n', '            investors[msg.sender] -= amount;\n', '        }\n', '    }\n', '    \n', '    function SetMin(uint min)\n', '    public\n', '    {\n', '        if(msg.sender==owner)\n', '        {\n', '            MinInvestment = min;\n', '        }\n', '    }\n', '\n', '    function GetInvestedAmount() \n', '    constant \n', '    public \n', '    returns(uint)\n', '    {\n', '        return investors[msg.sender];\n', '    }\n', '\n', '    function withdraw() \n', '    public \n', '    {\n', '        if(msg.sender==owner)\n', '        {\n', '            this.loggedTransfer(this.balance, "", msg.sender, owner);\n', '        }\n', '    }\n', '    \n', '    \n', '}']