['pragma solidity 0.4.23;\n', '\n', '// File: contracts/interfaces/EthPriceFeedI.sol\n', '\n', 'interface EthPriceFeedI {\n', '    function updateRate(uint256 _weiPerUnitRate) external;\n', '    function getRate() external view returns(uint256);\n', '    function getLastTimeUpdated() external view returns(uint256); \n', '}\n', '\n', '// File: contracts/interfaces/ReadableI.sol\n', '\n', '// https://github.com/makerdao/feeds/blob/master/src/abi/readable.json\n', '\n', 'pragma solidity 0.4.23;\n', '\n', 'interface ReadableI {\n', '\n', '    // We only care about these functions\n', '    function peek() external view returns(bytes32, bool);\n', '    function read() external view returns(bytes32);\n', '\n', '    // function owner() external view returns(address);\n', '    // function zzz() external view returns(uint256);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/MakerDAOPriceFeed.sol\n', '\n', 'contract MakerDAOPriceFeed is Ownable, EthPriceFeedI {\n', '    using SafeMath for uint256;\n', '    \n', '    uint256 public constant RATE_THRESHOLD_PERCENTAGE = 10;\n', '    uint256 public constant MAKERDAO_FEED_MULTIPLIER = 10**36;\n', '\n', '    ReadableI public makerDAOMedianizer;\n', '\n', '    uint256 private weiPerUnitRate;\n', '\n', '    uint256 private lastTimeUpdated; \n', '    \n', '    event RateUpdated(uint256 _newRate, uint256 _timeUpdated);\n', '\n', '    modifier isValidRate(uint256 _weiPerUnitRate) {\n', '        require(validRate(_weiPerUnitRate));\n', '        _;\n', '    }\n', '\n', '    constructor(ReadableI _makerDAOMedianizer) {\n', '        require(_makerDAOMedianizer != address(0));\n', '        makerDAOMedianizer = _makerDAOMedianizer;\n', '\n', '        weiPerUnitRate = convertToRate(_makerDAOMedianizer.read());\n', '        lastTimeUpdated = now;\n', '    }\n', '    \n', '    /// @dev Receives rate from outside oracle\n', '    /// @param _weiPerUnitRate calculated off chain and received to the contract\n', '    function updateRate(uint256 _weiPerUnitRate) \n', '        external \n', '        onlyOwner\n', '        isValidRate(_weiPerUnitRate)\n', '    {\n', '        weiPerUnitRate = _weiPerUnitRate;\n', '\n', '        lastTimeUpdated = now; \n', '\n', '        emit RateUpdated(_weiPerUnitRate, now);\n', '    }\n', '\n', '    /// @dev View function to see the rate stored in the contract.\n', '    function getRate() \n', '        public \n', '        view \n', '        returns(uint256)\n', '    {\n', '        return weiPerUnitRate; \n', '    }\n', '\n', '    /// @dev View function to see that last time that the rate was updated. \n', '    function getLastTimeUpdated()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return lastTimeUpdated;\n', '    }\n', '\n', '    function validRate(uint256 _weiPerUnitRate) public view returns(bool) {\n', '        if (_weiPerUnitRate == 0) return false;\n', '        bytes32 value;\n', '        bool valid;\n', '        (value, valid) = makerDAOMedianizer.peek();\n', '\n', '        // If the value from the medianizer is not valid, use the current rate as reference\n', '        uint256 currentRate = valid ? convertToRate(value) : weiPerUnitRate;\n', '\n', '        // Get the difference\n', '        uint256 diff = _weiPerUnitRate < currentRate ?  currentRate.sub(_weiPerUnitRate) : _weiPerUnitRate.sub(currentRate);\n', '\n', '        return diff <= currentRate.mul(RATE_THRESHOLD_PERCENTAGE).div(100);\n', '    }\n', '\n', '    function convertToRate(bytes32 _fromMedianizer) internal pure returns(uint256) {\n', '        uint256 value = uint256(_fromMedianizer);\n', '        return MAKERDAO_FEED_MULTIPLIER.div(value);\n', '    }\n', '}']
['pragma solidity 0.4.23;\n', '\n', '// File: contracts/interfaces/EthPriceFeedI.sol\n', '\n', 'interface EthPriceFeedI {\n', '    function updateRate(uint256 _weiPerUnitRate) external;\n', '    function getRate() external view returns(uint256);\n', '    function getLastTimeUpdated() external view returns(uint256); \n', '}\n', '\n', '// File: contracts/interfaces/ReadableI.sol\n', '\n', '// https://github.com/makerdao/feeds/blob/master/src/abi/readable.json\n', '\n', 'pragma solidity 0.4.23;\n', '\n', 'interface ReadableI {\n', '\n', '    // We only care about these functions\n', '    function peek() external view returns(bytes32, bool);\n', '    function read() external view returns(bytes32);\n', '\n', '    // function owner() external view returns(address);\n', '    // function zzz() external view returns(uint256);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/MakerDAOPriceFeed.sol\n', '\n', 'contract MakerDAOPriceFeed is Ownable, EthPriceFeedI {\n', '    using SafeMath for uint256;\n', '    \n', '    uint256 public constant RATE_THRESHOLD_PERCENTAGE = 10;\n', '    uint256 public constant MAKERDAO_FEED_MULTIPLIER = 10**36;\n', '\n', '    ReadableI public makerDAOMedianizer;\n', '\n', '    uint256 private weiPerUnitRate;\n', '\n', '    uint256 private lastTimeUpdated; \n', '    \n', '    event RateUpdated(uint256 _newRate, uint256 _timeUpdated);\n', '\n', '    modifier isValidRate(uint256 _weiPerUnitRate) {\n', '        require(validRate(_weiPerUnitRate));\n', '        _;\n', '    }\n', '\n', '    constructor(ReadableI _makerDAOMedianizer) {\n', '        require(_makerDAOMedianizer != address(0));\n', '        makerDAOMedianizer = _makerDAOMedianizer;\n', '\n', '        weiPerUnitRate = convertToRate(_makerDAOMedianizer.read());\n', '        lastTimeUpdated = now;\n', '    }\n', '    \n', '    /// @dev Receives rate from outside oracle\n', '    /// @param _weiPerUnitRate calculated off chain and received to the contract\n', '    function updateRate(uint256 _weiPerUnitRate) \n', '        external \n', '        onlyOwner\n', '        isValidRate(_weiPerUnitRate)\n', '    {\n', '        weiPerUnitRate = _weiPerUnitRate;\n', '\n', '        lastTimeUpdated = now; \n', '\n', '        emit RateUpdated(_weiPerUnitRate, now);\n', '    }\n', '\n', '    /// @dev View function to see the rate stored in the contract.\n', '    function getRate() \n', '        public \n', '        view \n', '        returns(uint256)\n', '    {\n', '        return weiPerUnitRate; \n', '    }\n', '\n', '    /// @dev View function to see that last time that the rate was updated. \n', '    function getLastTimeUpdated()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return lastTimeUpdated;\n', '    }\n', '\n', '    function validRate(uint256 _weiPerUnitRate) public view returns(bool) {\n', '        if (_weiPerUnitRate == 0) return false;\n', '        bytes32 value;\n', '        bool valid;\n', '        (value, valid) = makerDAOMedianizer.peek();\n', '\n', '        // If the value from the medianizer is not valid, use the current rate as reference\n', '        uint256 currentRate = valid ? convertToRate(value) : weiPerUnitRate;\n', '\n', '        // Get the difference\n', '        uint256 diff = _weiPerUnitRate < currentRate ?  currentRate.sub(_weiPerUnitRate) : _weiPerUnitRate.sub(currentRate);\n', '\n', '        return diff <= currentRate.mul(RATE_THRESHOLD_PERCENTAGE).div(100);\n', '    }\n', '\n', '    function convertToRate(bytes32 _fromMedianizer) internal pure returns(uint256) {\n', '        uint256 value = uint256(_fromMedianizer);\n', '        return MAKERDAO_FEED_MULTIPLIER.div(value);\n', '    }\n', '}']
