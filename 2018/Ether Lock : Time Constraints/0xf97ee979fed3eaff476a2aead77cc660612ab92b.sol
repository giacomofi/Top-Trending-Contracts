['pragma solidity ^0.4.23;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 _x, uint256 _y) internal pure returns (uint256 z) {\n', '        if (_x == 0) {\n', '            return 0;\n', '        }\n', '        z = _x * _y;\n', '        assert(z / _x == _y);\n', '        return z;\n', '    }\n', '\n', '    function div(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        return _x / _y;\n', '    }\n', '\n', '    function sub(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        assert(_y <= _x);\n', '        return _x - _y;\n', '    }\n', '\n', '    function add(uint256 _x, uint256 _y) internal pure returns (uint256 z) {\n', '        z = _x + _y;\n', '        assert(z >= _x);\n', '        return z;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) onlyOwner public {\n', '        require(_newOwner != address(0));\n', '\n', '        owner = _newOwner;\n', '\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '    }\n', '}\n', '\n', 'contract Erc20Wrapper {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _who) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract LemurTokenSale is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    Erc20Wrapper public token;\n', '\n', '    address public wallet;\n', '\n', '    uint256 public rate;\n', '    uint256 public amountRaised;\n', '\n', '    uint256 public openingTime;\n', '    uint256 public closingTime;\n', '\n', '    event TokenPurchase(address indexed _purchaser, address indexed _beneficiary, uint256 _value, uint256 _amount);\n', '\n', '    constructor() public {\n', '        // solium-disable-next-line security/no-block-members\n', '        openingTime = block.timestamp;\n', '        closingTime = openingTime.add(90 days);\n', '    }\n', '\n', '    function setToken(Erc20Wrapper _token) onlyOwner public {\n', '        require(_token != address(0));\n', '        token = _token;\n', '    }\n', '\n', '    function setWallet(address _wallet) onlyOwner public {\n', '        require(_wallet != address(0));\n', '        wallet = _wallet;\n', '    }\n', '\n', '    function setRate(uint256 _rate) onlyOwner public {\n', '        require(_rate > 0);\n', '        rate = _rate;\n', '    }\n', '\n', '    function setClosingTime(uint256 _days) onlyOwner public {\n', '        require(_days >= 1);\n', '        closingTime = openingTime.add(_days.mul(1 days));\n', '    }\n', '\n', '    function hasClosed() public view returns (bool) {\n', '        // solium-disable-next-line security/no-block-members\n', '        return block.timestamp > closingTime;\n', '    }\n', '\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    function buyTokens(address _beneficiary) public payable {\n', '        require(!hasClosed());\n', '        require(token != address(0) && wallet != address(0) && rate > 0);\n', '        require(_beneficiary != address(0));\n', '\n', '        uint256 amount = msg.value;\n', '        require(amount >= 0.01 ether);\n', '\n', '        uint256 tokenAmount = amount.mul(rate);\n', '        amountRaised = amountRaised.add(amount);\n', '        require(token.transfer(_beneficiary, tokenAmount));\n', '\n', '        emit TokenPurchase(msg.sender, _beneficiary, amount, tokenAmount);\n', '\n', '        wallet.transfer(amount);\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 _x, uint256 _y) internal pure returns (uint256 z) {\n', '        if (_x == 0) {\n', '            return 0;\n', '        }\n', '        z = _x * _y;\n', '        assert(z / _x == _y);\n', '        return z;\n', '    }\n', '\n', '    function div(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        return _x / _y;\n', '    }\n', '\n', '    function sub(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        assert(_y <= _x);\n', '        return _x - _y;\n', '    }\n', '\n', '    function add(uint256 _x, uint256 _y) internal pure returns (uint256 z) {\n', '        z = _x + _y;\n', '        assert(z >= _x);\n', '        return z;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) onlyOwner public {\n', '        require(_newOwner != address(0));\n', '\n', '        owner = _newOwner;\n', '\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '    }\n', '}\n', '\n', 'contract Erc20Wrapper {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _who) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract LemurTokenSale is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    Erc20Wrapper public token;\n', '\n', '    address public wallet;\n', '\n', '    uint256 public rate;\n', '    uint256 public amountRaised;\n', '\n', '    uint256 public openingTime;\n', '    uint256 public closingTime;\n', '\n', '    event TokenPurchase(address indexed _purchaser, address indexed _beneficiary, uint256 _value, uint256 _amount);\n', '\n', '    constructor() public {\n', '        // solium-disable-next-line security/no-block-members\n', '        openingTime = block.timestamp;\n', '        closingTime = openingTime.add(90 days);\n', '    }\n', '\n', '    function setToken(Erc20Wrapper _token) onlyOwner public {\n', '        require(_token != address(0));\n', '        token = _token;\n', '    }\n', '\n', '    function setWallet(address _wallet) onlyOwner public {\n', '        require(_wallet != address(0));\n', '        wallet = _wallet;\n', '    }\n', '\n', '    function setRate(uint256 _rate) onlyOwner public {\n', '        require(_rate > 0);\n', '        rate = _rate;\n', '    }\n', '\n', '    function setClosingTime(uint256 _days) onlyOwner public {\n', '        require(_days >= 1);\n', '        closingTime = openingTime.add(_days.mul(1 days));\n', '    }\n', '\n', '    function hasClosed() public view returns (bool) {\n', '        // solium-disable-next-line security/no-block-members\n', '        return block.timestamp > closingTime;\n', '    }\n', '\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    function buyTokens(address _beneficiary) public payable {\n', '        require(!hasClosed());\n', '        require(token != address(0) && wallet != address(0) && rate > 0);\n', '        require(_beneficiary != address(0));\n', '\n', '        uint256 amount = msg.value;\n', '        require(amount >= 0.01 ether);\n', '\n', '        uint256 tokenAmount = amount.mul(rate);\n', '        amountRaised = amountRaised.add(amount);\n', '        require(token.transfer(_beneficiary, tokenAmount));\n', '\n', '        emit TokenPurchase(msg.sender, _beneficiary, amount, tokenAmount);\n', '\n', '        wallet.transfer(amount);\n', '    }\n', '}']
