['pragma solidity ^0.4.24;\n', '\n', 'contract IERC20Token {\n', '    // these functions aren&#39;t abstract since the compiler emits automatically generated getter functions as external\n', '    function name() public constant returns (string) {}\n', '    function symbol() public constant returns (string) {}\n', '    function decimals() public constant returns (uint8) {}\n', '    function totalSupply() public constant returns (uint256) {}\n', '    function balanceOf(address _owner) public constant returns (uint256) { _owner; }\n', '    function allowance(address _owner, address _spender) public constant returns (uint256) { _owner; _spender; }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnerUpdate(address _prevOwner, address _newOwner);\n', '\n', '    /*\n', '        @dev constructor\n', '    */\n', '    constructor (address _owner) public {\n', '        owner = _owner;\n', '    }\n', '\n', '    /*\n', '        @dev allows execution by the owner only\n', '    */\n', '    modifier ownerOnly {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /*\n', '        @dev allows transferring the contract ownership\n', '        the new owner still needs to accept the transfer\n', '        can only be called by the contract owner\n', '\n', '        @param _newOwner    new contract owner\n', '    */\n', '    function transferOwnership(address _newOwner) public ownerOnly {\n', '        require(_newOwner != owner);\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    /*\n', '        @dev used by a new owner to accept an ownership transfer\n', '    */\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnerUpdate(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract Utils {\n', '    /*\n', '        @dev constructor\n', '    */\n', '    constructor() public {\n', '    }\n', '\n', '    /*\n', '        @dev verifies that an amount is greater than zero\n', '    */\n', '    modifier greaterThanZero(uint256 _amount) {\n', '        require(_amount > 0);\n', '        _;\n', '    }\n', '\n', '    /*\n', '        @dev validates an address - currently only checks that it isn&#39;t null\n', '    */\n', '    modifier validAddress(address _address) {\n', '        require(_address != 0x0);\n', '        _;\n', '    }\n', '\n', '    /*\n', '        @dev verifies that the address is different than this contract address\n', '    */\n', '    modifier notThis(address _address) {\n', '        require(_address != address(this));\n', '        _;\n', '    }\n', '\n', '    /*\n', '        @dev verifies that the string is not empty\n', '    */\n', '    modifier notEmpty(string _str) {\n', '        require(bytes(_str).length > 0);\n', '        _;\n', '    }\n', '\n', '    // Overflow protected math functions\n', '\n', '    /*\n', '        @dev returns the sum of _x and _y, asserts if the calculation overflows\n', '\n', '        @param _x   value 1\n', '        @param _y   value 2\n', '\n', '        @return sum\n', '    */\n', '    function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        uint256 z = _x + _y;\n', '        assert(z >= _x);\n', '        return z;\n', '    }\n', '\n', '    /*\n', '        @dev returns the difference of _x minus _y, asserts if the subtraction results in a negative number\n', '\n', '        @param _x   minuend\n', '        @param _y   subtrahend\n', '\n', '        @return difference\n', '    */\n', '    function safeSub(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        require(_x >= _y);\n', '        return _x - _y;\n', '    }\n', '\n', '    /*\n', '        @dev returns the product of multiplying _x by _y, asserts if the calculation overflows\n', '\n', '        @param _x   factor 1\n', '        @param _y   factor 2\n', '\n', '        @return product\n', '    */\n', '    function safeMul(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        uint256 z = _x * _y;\n', '        assert(_x == 0 || z / _x == _y);\n', '        return z;\n', '    }\n', '}\n', '\n', 'contract WithdrawalConfigurations is Ownable, Utils {\n', '    \n', '    /*\n', '     *  Members\n', '     */\n', '\n', '    uint public      minWithdrawalCoolingPeriod;\n', '    uint constant    maxWithdrawalCoolingPeriod = 12 * 1 weeks; // = 14515200 seconds\n', '    uint public      withdrawalCoolingPeriod;\n', '   \n', '    /*\n', '     *  Events\n', '     */\n', '    event WithdrawalRequested(address _sender, address _smartWallet);\n', '    event SetWithdrawalCoolingPeriod(uint _withdrawalCoolingPeriod);\n', '\n', '    /*\n', '        @dev constructor\n', '\n', '        @param _withdrawalCoolingPeriod       The cooling period \n', '        @param _minWithdrawalCoolingPeriod    The minimum time from withdraw request to allow performing it\n', '\n', '    */\n', '    constructor (uint _withdrawalCoolingPeriod, uint _minWithdrawalCoolingPeriod) \n', '        Ownable(msg.sender)\n', '        public\n', '        {\n', '            require(_withdrawalCoolingPeriod <= maxWithdrawalCoolingPeriod &&\n', '                    _withdrawalCoolingPeriod >= _minWithdrawalCoolingPeriod);\n', '            require(_minWithdrawalCoolingPeriod >= 0);\n', '\n', '            minWithdrawalCoolingPeriod = _minWithdrawalCoolingPeriod;\n', '            withdrawalCoolingPeriod = _withdrawalCoolingPeriod;\n', '       }\n', '\n', '    /*\n', '        @dev Get the withdrawalCoolingPeriod parameter value. \n', '   \n', '     */\n', '    function getWithdrawalCoolingPeriod() external view returns(uint) {\n', '        return withdrawalCoolingPeriod;\n', '    }\n', '\n', '    /*\n', '        @dev Set the withdrawalCoolingPeriod parameter value. \n', '\n', '        @param _withdrawalCoolingPeriod   Cooling period in seconds\n', '     */\n', '    function setWithdrawalCoolingPeriod(uint _withdrawalCoolingPeriod)\n', '        ownerOnly()\n', '        public\n', '        {\n', '            require (_withdrawalCoolingPeriod <= maxWithdrawalCoolingPeriod &&\n', '                     _withdrawalCoolingPeriod >= minWithdrawalCoolingPeriod);\n', '            withdrawalCoolingPeriod = _withdrawalCoolingPeriod;\n', '            emit SetWithdrawalCoolingPeriod(_withdrawalCoolingPeriod);\n', '    }\n', '\n', '    /*\n', '        @dev Fire the WithdrawalRequested event. \n', '\n', '        @param _userWithdrawalAccount   User withdrawal account address\n', '        @param _sender                  The user account, activating this request\n', '     */\n', '    function emitWithrawalRequestEvent(address _sender, address _smartWallet) \n', '        public\n', '        {\n', '            emit WithdrawalRequested(_sender, _smartWallet);\n', '    }\n', '}\n', '\n', 'library SmartWalletLib {\n', '\n', '    /*\n', '     *  Structs\n', '     */ \n', '    struct Wallet {\n', '        address operatorAccount;\n', '        address userWithdrawalAccount;\n', '        address feesAccount;\n', '        uint    withdrawAllowedAt; //In seconds\n', '    }\n', '\n', '    /*\n', '     *  Members\n', '     */\n', '    string constant VERSION = "1.1";\n', '    address constant withdrawalConfigurationsContract = 0xDdD336eAad17F1D40cc81997Fb956608f00639FF; \n', '    \n', '    /*\n', '     *  Modifiers\n', '     */\n', '    modifier validAddress(address _address) {\n', '        require(_address != 0x0);\n', '        _;\n', '    }\n', '\n', '    modifier addressNotSet(address _address) {\n', '        require(_address == 0);\n', '        _;\n', '    }\n', '\n', '    modifier operatorOnly(address _operatorAccount) {\n', '        require(msg.sender == _operatorAccount);\n', '        _;\n', '    }\n', '\n', '    modifier userWithdrawalAccountOnly(Wallet storage _self) {\n', '        require(msg.sender == _self.userWithdrawalAccount);\n', '        _;\n', '    }\n', '\n', '    /*\n', '     *  Events\n', '     */\n', '    event TransferToUserWithdrawalAccount(address _token, address _userWithdrawalAccount, uint _amount, address _feesToken, address _feesAccount, uint _fee);\n', '    event SetUserWithdrawalAccount(address _userWithdrawalAccount);\n', '    event PerformUserWithdraw(address _token, address _userWithdrawalAccount, uint _amount);\n', '    \n', '    /*\n', '        @dev Initialize the wallet with the operator and backupAccount address\n', '        \n', '        @param _self                        Wallet storage\n', '        @param _operator                    The operator account\n', '        @param _feesAccount                 The account to transfer fees to\n', '    */\n', '    function initWallet(Wallet storage _self, address _operator, address _feesAccount) \n', '            public\n', '            validAddress(_operator)\n', '            validAddress(_feesAccount)\n', '            {\n', '        \n', '                _self.operatorAccount = _operator;\n', '                _self.feesAccount = _feesAccount;\n', '    }\n', '\n', '    /*\n', '        @dev Setting the account of the user to send funds to. \n', '        \n', '        @param _self                        Wallet storage\n', '        @param _userWithdrawalAccount       The user account to withdraw funds to\n', '    */\n', '    function setUserWithdrawalAccount(Wallet storage _self, address _userWithdrawalAccount) \n', '            public\n', '            operatorOnly(_self.operatorAccount)\n', '            validAddress(_userWithdrawalAccount)\n', '            addressNotSet(_self.userWithdrawalAccount)\n', '            {\n', '        \n', '                _self.userWithdrawalAccount = _userWithdrawalAccount;\n', '                emit SetUserWithdrawalAccount(_userWithdrawalAccount);\n', '    }\n', '    \n', '    /*\n', '        @dev Withdraw funds to the user account. \n', '\n', '        @param _self                Wallet storage\n', '        @param _token               The ERC20 token the owner withdraws from \n', '        @param _amount              Amount to transfer  \n', '        @param _fee                 Fee to transfer   \n', '    */\n', '    function transferToUserWithdrawalAccount(Wallet storage _self, IERC20Token _token, uint _amount, IERC20Token _feesToken, uint _fee) \n', '            public \n', '            operatorOnly(_self.operatorAccount)\n', '            validAddress(_self.userWithdrawalAccount)\n', '            {\n', '\n', '                if (_fee > 0) {        \n', '                    _feesToken.transfer(_self.feesAccount, _fee); \n', '                }       \n', '                \n', '                _token.transfer(_self.userWithdrawalAccount, _amount);\n', '                emit TransferToUserWithdrawalAccount(_token, _self.userWithdrawalAccount, _amount,  _feesToken, _self.feesAccount, _fee);   \n', '        \n', '    }\n', '\n', '    /*\n', '        @dev returns the sum of _x and _y, asserts if the calculation overflows\n', '\n', '        @param _x   value 1\n', '        @param _y   value 2\n', '\n', '        @return sum\n', '    */\n', '    function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        uint256 z = _x + _y;\n', '        assert(z >= _x);\n', '        return z;\n', '    }\n', '    \n', '    /*\n', '        @dev user request withdraw. \n', '\n', '        @param _self                Wallet storage\n', '        @param _token               The ERC20 token the owner withdraws from \n', '        \n', '    */\n', '    function requestWithdraw(Wallet storage _self) \n', '        public \n', '        userWithdrawalAccountOnly(_self)\n', '        {\n', '            \n', '            WithdrawalConfigurations withdrawalConfigurations = WithdrawalConfigurations(withdrawalConfigurationsContract);\n', '            \n', '            _self.withdrawAllowedAt = safeAdd(now, withdrawalConfigurations.getWithdrawalCoolingPeriod());\n', '\n', '            withdrawalConfigurations.emitWithrawalRequestEvent(msg.sender, address(this));\n', '    }\n', '\n', '    /*\n', '        @dev user perform withdraw. \n', '\n', '        @param _self                Wallet storage\n', '        @param _token               The ERC20 token the owner withdraws from \n', '        \n', '    */\n', '    function performUserWithdraw(Wallet storage _self, IERC20Token _token)\n', '        public\n', '        userWithdrawalAccountOnly(_self)\n', '        {\n', '            require(_self.withdrawAllowedAt != 0 &&\n', '                    _self.withdrawAllowedAt <= now );\n', '\n', '            uint userBalance = _token.balanceOf(this);\n', '            _token.transfer(_self.userWithdrawalAccount, userBalance);\n', '            emit PerformUserWithdraw(_token, _self.userWithdrawalAccount, userBalance);   \n', '        }\n', '\n', '}\n', '\n', 'contract SmartWallet {\n', '\n', '    /*\n', '     *  Members\n', '     */\n', '    using SmartWalletLib for SmartWalletLib.Wallet;\n', '    SmartWalletLib.Wallet public wallet;\n', '       \n', '   // Wallet public wallet;\n', '    /*\n', '     *  Events\n', '     */\n', '    event TransferToUserWithdrawalAccount(address _token, address _userWithdrawalAccount, uint _amount, address _feesToken, address _feesAccount, uint _fee);\n', '    event SetUserWithdrawalAccount(address _userWithdrawalAccount);\n', '    event PerformUserWithdraw(address _token, address _userWithdrawalAccount, uint _amount);\n', '     \n', '    /*\n', '        @dev constructor\n', '\n', '        @param _backupAccount       A default operator&#39;s account to send funds to, in cases where the user account is\n', '                                    unavailable or lost\n', '        @param _operator            The contract operator address\n', '        @param _feesAccount         The account to transfer fees to \n', '\n', '    */\n', '    constructor (address _operator, address _feesAccount) public {\n', '        wallet.initWallet(_operator, _feesAccount);\n', '    }\n', '\n', '    /*\n', '        @dev Setting the account of the user to send funds to. \n', '        \n', '        @param _userWithdrawalAccount       The user account to withdraw funds to\n', '        \n', '    */\n', '    function setUserWithdrawalAccount(address _userWithdrawalAccount) public {\n', '        wallet.setUserWithdrawalAccount(_userWithdrawalAccount);\n', '    }\n', '\n', '    /*\n', '        @dev Withdraw funds to the user account. \n', '\n', '\n', '        @param _token               The ERC20 token the owner withdraws from \n', '        @param _amount              Amount to transfer    \n', '    */\n', '    function transferToUserWithdrawalAccount(IERC20Token _token, uint _amount, IERC20Token _feesToken, uint _fee) public {\n', '        wallet.transferToUserWithdrawalAccount(_token, _amount, _feesToken, _fee);\n', '    }\n', '\n', '    /*\n', '        @dev Allows the user to request a withdraw of his/her placements\n', '        \n', '        @param _token               The ERC20 token the user wishes to withdraw from \n', '    */\n', '    function requestWithdraw() public {\n', '        wallet.requestWithdraw();\n', '    }\n', '\n', '    /*\n', '        @dev Allows the user to perform the requestWithdraw operation\n', '        \n', '        @param _token               The ERC20 token the user withdraws from \n', '    */\n', '    function performUserWithdraw(IERC20Token _token) public {\n', '        wallet.performUserWithdraw(_token);\n', '    }\n', '}']