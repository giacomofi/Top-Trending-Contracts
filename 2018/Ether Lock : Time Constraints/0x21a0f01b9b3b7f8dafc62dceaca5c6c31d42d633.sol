['pragma solidity ^0.4.18;\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '//Announcement of an interface for recipient approving\n', 'interface tokenRecipient { \n', '\tfunction receiveApproval(address _from, uint256 _value, address _token, bytes _extraData)public; \n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract ShareXERC20 is Ownable{\n', '\t\n', '\t//===================public variables definition start==================\n', '    string public name;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Name of your Token\n', '    string public symbol;\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Symbol of your Token\n', '    uint8 public decimals;\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Decimals of your Token\n', '    uint256 public totalSupply;\t\t\t\t\t\t\t\t\t\t\t\t\t//Maximum amount of Token supplies\n', '\n', '    //define dictionaries of balance\n', '    mapping (address => uint256) public balanceOf;\t\t\t\t\t\t\t\t//Announce the dictionary of account&#39;s balance\n', '    mapping (address => mapping (address => uint256)) public allowance;\t\t\t//Announce the dictionary of account&#39;s available balance\n', '\t//===================public variables definition end==================\n', '\n', '\t\n', '\t//===================events definition start==================    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\t//Event on blockchain which notify client\n', '\t//===================events definition end==================\n', '\t\n', '\t\n', '\t//===================Contract Initialization Sequence Definition start===================\n', '    function ShareXERC20 () public {\n', '\t\tdecimals=8;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Assignment of Token&#39;s decimals\n', '\t\ttotalSupply = 1000000000 * 10 ** uint256(decimals);  \t\t\t\t//Assignment of Token&#39;s total supply with decimals\n', '        balanceOf[owner] = totalSupply;                \t\t\t\t\t\t//Assignment of Token&#39;s creator initial tokens\n', '        name = "ShareX";                                   \t\t\t\t\t//Set the name of Token\n', '        symbol = "SEXC";                               \t\t\t\t\t\t//Set the symbol of  Token\n', '        \n', '    }\n', '\t//===================Contract Initialization Sequence definition end===================\n', '\t\n', '\t//===================Contract behavior & funtions definition start===================\n', '\t\n', '\t/*\n', '\t*\tFuntion: Transfer funtions\n', '\t*\tType:Internal\n', '\t*\tParameters:\n', '\t\t\t@_from:\taddress of sender&#39;s account\n', '\t\t\t@_to:\taddress of recipient&#39;s account\n', '\t\t\t@_value:transaction amount\n', '\t*/\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '\t\t//Fault-tolerant processing\n', '\t\trequire(_to != 0x0);\t\t\t\t\t\t//\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '\n', '        //Execute transaction\n', '\t\tuint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '\t\t\n', '\t\t//Verify transaction\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '        \n', '    }\n', '\t\n', '\t\n', '\t/*\n', '\t*\tFuntion: Transfer tokens\n', '\t*\tType:Public\n', '\t*\tParameters:\n', '\t\t\t@_to:\taddress of recipient&#39;s account\n', '\t\t\t@_value:transaction amount\n', '\t*/\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '\t\t\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\t\n', '\t\n', '\t/*\n', '\t*\tFuntion: Transfer tokens from other address\n', '\t*\tType:Public\n', '\t*\tParameters:\n', '\t\t\t@_from:\taddress of sender&#39;s account\n', '\t\t\t@_to:\taddress of recipient&#39;s account\n', '\t\t\t@_value:transaction amount\n', '\t*/\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public \n', '\treturns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     \t\t\t\t\t//Allowance verification\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '\t/*\n', '\t*\tFuntion: Approve usable amount for an account\n', '\t*\tType:Public\n', '\t*\tParameters:\n', '\t\t\t@_spender:\taddress of spender&#39;s account\n', '\t\t\t@_value:\tapprove amount\n', '\t*/\n', '    function approve(address _spender, uint256 _value) public \n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '        }\n', '\n', '\t/*\n', '\t*\tFuntion: Approve usable amount for other address and then notify the contract\n', '\t*\tType:Public\n', '\t*\tParameters:\n', '\t\t\t@_spender:\taddress of other account\n', '\t\t\t@_value:\tapprove amount\n', '\t\t\t@_extraData:additional information to send to the approved contract\n', '\t*/\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public \n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '    /*\n', '\t*\tFuntion: Transfer owner&#39;s authority and account balance\n', '\t*\tType:Public and onlyOwner\n', '\t*\tParameters:\n', '\t\t\t@newOwner:\taddress of newOwner\n', '\t*/\n', '    function transferOwnershipWithBalance(address newOwner) onlyOwner public{\n', '\t\tif (newOwner != address(0)) {\n', '\t\t    _transfer(owner,newOwner,balanceOf[owner]);\n', '\t\t    owner = newOwner;\n', '\t\t}\n', '\t}\n', '   //===================Contract behavior & funtions definition end===================\n', '}\n', '\n', '\n', '\n', 'contract ShareXTokenVault is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    //Wallet Addresses for allocation\n', '    address public teamReserveWallet = 0x78e27c0347fa3afcc31e160b0fbc6f90186fd2b6;\n', '    address public firstReserveWallet = 0xef2ab7226c1a3d274caad2dec6d79a4db5d5799e;\n', '    \n', '    address public CEO = 0x2Fc7607CE5f6c36979CC63aFcDA6D62Df656e4aE;\n', '    address public COO = 0x08465f80A28E095DEE4BE0692AC1bA1A2E3EEeE9;\n', '    address public CTO = 0xB22E5Ac6C3a9427C48295806a34f7a3C0FD21443;\n', '    address public CMO = 0xf34C06cd907AD036b75cee40755b6937176f24c3;\n', '    address public CPO = 0xa33da3654d5fdaBC4Dd49fB4e6c81C58D28aA74a;\n', '    address public CEO_TEAM =0xc0e3294E567e965C3Ff3687015fCf88eD3CCC9EA;\n', '    address public AWD = 0xc0e3294E567e965C3Ff3687015fCf88eD3CCC9EA;\n', '    \n', '    uint256 public CEO_SHARE = 45;\n', '    uint256 public COO_SHARE = 12;\n', '    uint256 public CTO_SHARE = 9;\n', '    uint256 public CMO_SHARE = 9;\n', '    uint256 public CPO_SHARE = 9;\n', '    uint256 public CEO_TEAM_SHARE =6;\n', '    uint256 public AWD_SHARE =10;\n', '    \n', '    uint256 public DIV = 100;\n', '\n', '    //Token Allocations\n', '    uint256 public teamReserveAllocation = 16 * (10 ** 7) * (10 ** 8);\n', '    uint256 public firstReserveAllocation = 4 * (10 ** 7) * (10 ** 8);\n', '    \n', '\n', '    //Total Token Allocations\n', '    uint256 public totalAllocation = 2 * (10 ** 8) * (10 ** 8);\n', '\n', '    uint256 public teamVestingStages = 8;\n', '    //first unlocked Token \n', '    uint256 public firstTime =1531584000;  //2018-07-15 00:00:00\n', '    \n', '    //teamTimeLock\n', '    uint256 public teamTimeLock = 2 * 365 days;\n', '    //team unlocked over\n', '    uint256 public secondTime =firstTime.add(teamTimeLock);\n', '\n', '\n', '    /** Reserve allocations */\n', '    mapping(address => uint256) public allocations;\n', '\n', '    /** When timeLocks are over (UNIX Timestamp)  */  \n', '    mapping(address => uint256) public timeLocks;\n', '\n', '    /** How many tokens each reserve wallet has claimed */\n', '    mapping(address => uint256) public claimed;\n', '\n', '    /** When this vault was locked (UNIX Timestamp)*/\n', '    uint256 public lockedAt = 0;\n', '\n', '    ShareXERC20 public token;\n', '\n', '    /** Allocated reserve tokens */\n', '    event Allocated(address wallet, uint256 value);\n', '\n', '    /** Distributed reserved tokens */\n', '    event Distributed(address wallet, uint256 value);\n', '\n', '    /** Tokens have been locked */\n', '    event Locked(uint256 lockTime);\n', '\n', '    //Any of the two reserve wallets\n', '    modifier onlyReserveWallets {\n', '        require(allocations[msg.sender] > 0);\n', '        _;\n', '    }\n', '\n', '    //Only ShareX team reserve wallet\n', '    modifier onlyTeamReserve {\n', '        require(msg.sender == teamReserveWallet);\n', '        require(allocations[msg.sender] > 0);\n', '        _;\n', '    }\n', '\n', '    //Only first and second token reserve wallets\n', '    modifier onlyTokenReserve {\n', '        require(msg.sender == firstReserveWallet );\n', '        require(allocations[msg.sender] > 0);\n', '        _;\n', '    }\n', '\n', '    //Has not been locked yet\n', '    modifier notLocked {\n', '        require(lockedAt == 0);\n', '        _;\n', '    }\n', '\n', '    modifier locked {\n', '        require(lockedAt > 0);\n', '        _;\n', '    }\n', '\n', '    //Token allocations have not been set\n', '    modifier notAllocated {\n', '        require(allocations[teamReserveWallet] == 0);\n', '        require(allocations[firstReserveWallet] == 0);\n', '        _;\n', '    }\n', '\n', '    function ShareXTokenVault(ERC20 _token) public {\n', '\n', '        owner = msg.sender;\n', '        token = ShareXERC20(_token);\n', '        \n', '    }\n', '\n', '    function allocate() public notLocked notAllocated onlyOwner {\n', '\n', '        //Makes sure Token Contract has the exact number of tokens\n', '        require(token.balanceOf(address(this)) == totalAllocation);\n', '        \n', '        allocations[teamReserveWallet] = teamReserveAllocation;\n', '        allocations[firstReserveWallet] = firstReserveAllocation;\n', '\n', '        Allocated(teamReserveWallet, teamReserveAllocation);\n', '        Allocated(firstReserveWallet, firstReserveAllocation);\n', '\n', '        lock();\n', '    }\n', '\n', '    //Lock the vault for the two wallets\n', '    function lock() internal notLocked onlyOwner {\n', '\n', '        lockedAt = block.timestamp;\n', '\n', '        // timeLocks[teamReserveWallet] = lockedAt.add(teamTimeLock);\n', '        timeLocks[teamReserveWallet] = secondTime;\n', '        \n', '        // timeLocks[firstReserveWallet] = lockedAt.add(firstReserveTimeLock);\n', '        timeLocks[firstReserveWallet] = firstTime;\n', '\n', '        Locked(lockedAt);\n', '    }\n', '\n', '    //In the case locking failed, then allow the owner to reclaim the tokens on the contract.\n', '    //Recover Tokens in case incorrect amount was sent to contract.\n', '    function recoverFailedLock() external notLocked notAllocated onlyOwner {\n', '\n', '        // Transfer all tokens on this contract back to the owner\n', '        require(token.transfer(owner, token.balanceOf(address(this))));\n', '    }\n', '\n', '    // Total number of tokens currently in the vault\n', '    function getTotalBalance() public view returns (uint256 tokensCurrentlyInVault) {\n', '\n', '        return token.balanceOf(address(this));\n', '\n', '    }\n', '\n', '    // Number of tokens that are still locked\n', '    function getLockedBalance() public view onlyReserveWallets returns (uint256 tokensLocked) {\n', '\n', '        return allocations[msg.sender].sub(claimed[msg.sender]);\n', '\n', '    }\n', '\n', '    //Claim tokens for first reserve wallets\n', '    function claimTokenReserve() onlyTokenReserve locked public {\n', '\n', '        address reserveWallet = msg.sender;\n', '\n', '        // Can&#39;t claim before Lock ends\n', '        require(block.timestamp > timeLocks[reserveWallet]);\n', '\n', '        // Must Only claim once\n', '        require(claimed[reserveWallet] == 0);\n', '\n', '        uint256 amount = allocations[reserveWallet];\n', '\n', '        claimed[reserveWallet] = amount;\n', '\n', '        require(token.transfer(CEO,amount.mul(CEO_SHARE).div(DIV)));\n', '        require(token.transfer(COO,amount.mul(COO_SHARE).div(DIV)));\n', '        require(token.transfer(CTO,amount.mul(CTO_SHARE).div(DIV)));\n', '        require(token.transfer(CMO,amount.mul(CMO_SHARE).div(DIV)));\n', '        require(token.transfer(CPO,amount.mul(CPO_SHARE).div(DIV)));\n', '        require(token.transfer(CEO_TEAM,amount.mul(CEO_TEAM_SHARE).div(DIV)));\n', '        require(token.transfer(AWD,amount.mul(AWD_SHARE).div(DIV)));\n', '\n', '        Distributed(CEO, amount.mul(CEO_SHARE).div(DIV));\n', '        Distributed(COO, amount.mul(COO_SHARE).div(DIV));\n', '        Distributed(CTO, amount.mul(CTO_SHARE).div(DIV));\n', '        Distributed(CMO, amount.mul(CMO_SHARE).div(DIV));\n', '        Distributed(CPO, amount.mul(CPO_SHARE).div(DIV));\n', '        Distributed(CEO_TEAM, amount.mul(CEO_TEAM_SHARE).div(DIV));\n', '        Distributed(AWD, amount.mul(AWD_SHARE).div(DIV));\n', '    }\n', '\n', '    //Claim tokens for ShareX team reserve wallet\n', '    function claimTeamReserve() onlyTeamReserve locked public {\n', '\n', '        uint256 vestingStage = teamVestingStage();\n', '\n', '        //Amount of tokens the team should have at this vesting stage\n', '        uint256 totalUnlocked = vestingStage.mul(allocations[teamReserveWallet]).div(teamVestingStages);\n', '\n', '        require(totalUnlocked <= allocations[teamReserveWallet]);\n', '\n', '        //Previously claimed tokens must be less than what is unlocked\n', '        require(claimed[teamReserveWallet] < totalUnlocked);\n', '\n', '        uint256 payment = totalUnlocked.sub(claimed[teamReserveWallet]);\n', '\n', '        claimed[teamReserveWallet] = totalUnlocked;\n', '\n', '        // require(token.transfer(teamReserveWallet, payment));\n', '        \n', '        require(token.transfer(AWD,payment));\n', '        \n', '        Distributed(AWD, payment);\n', '    }\n', '  \n', '    //Current Vesting stage for ShareX team \n', '    function teamVestingStage() public view onlyTeamReserve returns(uint256){\n', '        \n', '        // Every 3 months\n', '        uint256 vestingMonths = teamTimeLock.div(teamVestingStages); \n', '\n', '        // uint256 stage = (block.timestamp.sub(lockedAt)).div(vestingMonths);\n', '        uint256 stage  = (block.timestamp).sub(firstTime).div(vestingMonths);\n', '\n', '        //Ensures team vesting stage doesn&#39;t go past teamVestingStages\n', '        if(stage > teamVestingStages){\n', '            stage = teamVestingStages;\n', '        }\n', '\n', '        return stage;\n', '\n', '    }\n', '\n', '    // Checks if msg.sender can collect tokens\n', '    function canCollect() public view onlyReserveWallets returns(bool) {\n', '\n', '        return block.timestamp > timeLocks[msg.sender] && claimed[msg.sender] == 0;\n', '\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '//Announcement of an interface for recipient approving\n', 'interface tokenRecipient { \n', '\tfunction receiveApproval(address _from, uint256 _value, address _token, bytes _extraData)public; \n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract ShareXERC20 is Ownable{\n', '\t\n', '\t//===================public variables definition start==================\n', '    string public name;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Name of your Token\n', '    string public symbol;\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Symbol of your Token\n', '    uint8 public decimals;\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Decimals of your Token\n', '    uint256 public totalSupply;\t\t\t\t\t\t\t\t\t\t\t\t\t//Maximum amount of Token supplies\n', '\n', '    //define dictionaries of balance\n', "    mapping (address => uint256) public balanceOf;\t\t\t\t\t\t\t\t//Announce the dictionary of account's balance\n", "    mapping (address => mapping (address => uint256)) public allowance;\t\t\t//Announce the dictionary of account's available balance\n", '\t//===================public variables definition end==================\n', '\n', '\t\n', '\t//===================events definition start==================    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\t//Event on blockchain which notify client\n', '\t//===================events definition end==================\n', '\t\n', '\t\n', '\t//===================Contract Initialization Sequence Definition start===================\n', '    function ShareXERC20 () public {\n', "\t\tdecimals=8;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Assignment of Token's decimals\n", "\t\ttotalSupply = 1000000000 * 10 ** uint256(decimals);  \t\t\t\t//Assignment of Token's total supply with decimals\n", "        balanceOf[owner] = totalSupply;                \t\t\t\t\t\t//Assignment of Token's creator initial tokens\n", '        name = "ShareX";                                   \t\t\t\t\t//Set the name of Token\n', '        symbol = "SEXC";                               \t\t\t\t\t\t//Set the symbol of  Token\n', '        \n', '    }\n', '\t//===================Contract Initialization Sequence definition end===================\n', '\t\n', '\t//===================Contract behavior & funtions definition start===================\n', '\t\n', '\t/*\n', '\t*\tFuntion: Transfer funtions\n', '\t*\tType:Internal\n', '\t*\tParameters:\n', "\t\t\t@_from:\taddress of sender's account\n", "\t\t\t@_to:\taddress of recipient's account\n", '\t\t\t@_value:transaction amount\n', '\t*/\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '\t\t//Fault-tolerant processing\n', '\t\trequire(_to != 0x0);\t\t\t\t\t\t//\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '\n', '        //Execute transaction\n', '\t\tuint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '\t\t\n', '\t\t//Verify transaction\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '        \n', '    }\n', '\t\n', '\t\n', '\t/*\n', '\t*\tFuntion: Transfer tokens\n', '\t*\tType:Public\n', '\t*\tParameters:\n', "\t\t\t@_to:\taddress of recipient's account\n", '\t\t\t@_value:transaction amount\n', '\t*/\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '\t\t\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\t\n', '\t\n', '\t/*\n', '\t*\tFuntion: Transfer tokens from other address\n', '\t*\tType:Public\n', '\t*\tParameters:\n', "\t\t\t@_from:\taddress of sender's account\n", "\t\t\t@_to:\taddress of recipient's account\n", '\t\t\t@_value:transaction amount\n', '\t*/\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public \n', '\treturns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     \t\t\t\t\t//Allowance verification\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '\t/*\n', '\t*\tFuntion: Approve usable amount for an account\n', '\t*\tType:Public\n', '\t*\tParameters:\n', "\t\t\t@_spender:\taddress of spender's account\n", '\t\t\t@_value:\tapprove amount\n', '\t*/\n', '    function approve(address _spender, uint256 _value) public \n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '        }\n', '\n', '\t/*\n', '\t*\tFuntion: Approve usable amount for other address and then notify the contract\n', '\t*\tType:Public\n', '\t*\tParameters:\n', '\t\t\t@_spender:\taddress of other account\n', '\t\t\t@_value:\tapprove amount\n', '\t\t\t@_extraData:additional information to send to the approved contract\n', '\t*/\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public \n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '    /*\n', "\t*\tFuntion: Transfer owner's authority and account balance\n", '\t*\tType:Public and onlyOwner\n', '\t*\tParameters:\n', '\t\t\t@newOwner:\taddress of newOwner\n', '\t*/\n', '    function transferOwnershipWithBalance(address newOwner) onlyOwner public{\n', '\t\tif (newOwner != address(0)) {\n', '\t\t    _transfer(owner,newOwner,balanceOf[owner]);\n', '\t\t    owner = newOwner;\n', '\t\t}\n', '\t}\n', '   //===================Contract behavior & funtions definition end===================\n', '}\n', '\n', '\n', '\n', 'contract ShareXTokenVault is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    //Wallet Addresses for allocation\n', '    address public teamReserveWallet = 0x78e27c0347fa3afcc31e160b0fbc6f90186fd2b6;\n', '    address public firstReserveWallet = 0xef2ab7226c1a3d274caad2dec6d79a4db5d5799e;\n', '    \n', '    address public CEO = 0x2Fc7607CE5f6c36979CC63aFcDA6D62Df656e4aE;\n', '    address public COO = 0x08465f80A28E095DEE4BE0692AC1bA1A2E3EEeE9;\n', '    address public CTO = 0xB22E5Ac6C3a9427C48295806a34f7a3C0FD21443;\n', '    address public CMO = 0xf34C06cd907AD036b75cee40755b6937176f24c3;\n', '    address public CPO = 0xa33da3654d5fdaBC4Dd49fB4e6c81C58D28aA74a;\n', '    address public CEO_TEAM =0xc0e3294E567e965C3Ff3687015fCf88eD3CCC9EA;\n', '    address public AWD = 0xc0e3294E567e965C3Ff3687015fCf88eD3CCC9EA;\n', '    \n', '    uint256 public CEO_SHARE = 45;\n', '    uint256 public COO_SHARE = 12;\n', '    uint256 public CTO_SHARE = 9;\n', '    uint256 public CMO_SHARE = 9;\n', '    uint256 public CPO_SHARE = 9;\n', '    uint256 public CEO_TEAM_SHARE =6;\n', '    uint256 public AWD_SHARE =10;\n', '    \n', '    uint256 public DIV = 100;\n', '\n', '    //Token Allocations\n', '    uint256 public teamReserveAllocation = 16 * (10 ** 7) * (10 ** 8);\n', '    uint256 public firstReserveAllocation = 4 * (10 ** 7) * (10 ** 8);\n', '    \n', '\n', '    //Total Token Allocations\n', '    uint256 public totalAllocation = 2 * (10 ** 8) * (10 ** 8);\n', '\n', '    uint256 public teamVestingStages = 8;\n', '    //first unlocked Token \n', '    uint256 public firstTime =1531584000;  //2018-07-15 00:00:00\n', '    \n', '    //teamTimeLock\n', '    uint256 public teamTimeLock = 2 * 365 days;\n', '    //team unlocked over\n', '    uint256 public secondTime =firstTime.add(teamTimeLock);\n', '\n', '\n', '    /** Reserve allocations */\n', '    mapping(address => uint256) public allocations;\n', '\n', '    /** When timeLocks are over (UNIX Timestamp)  */  \n', '    mapping(address => uint256) public timeLocks;\n', '\n', '    /** How many tokens each reserve wallet has claimed */\n', '    mapping(address => uint256) public claimed;\n', '\n', '    /** When this vault was locked (UNIX Timestamp)*/\n', '    uint256 public lockedAt = 0;\n', '\n', '    ShareXERC20 public token;\n', '\n', '    /** Allocated reserve tokens */\n', '    event Allocated(address wallet, uint256 value);\n', '\n', '    /** Distributed reserved tokens */\n', '    event Distributed(address wallet, uint256 value);\n', '\n', '    /** Tokens have been locked */\n', '    event Locked(uint256 lockTime);\n', '\n', '    //Any of the two reserve wallets\n', '    modifier onlyReserveWallets {\n', '        require(allocations[msg.sender] > 0);\n', '        _;\n', '    }\n', '\n', '    //Only ShareX team reserve wallet\n', '    modifier onlyTeamReserve {\n', '        require(msg.sender == teamReserveWallet);\n', '        require(allocations[msg.sender] > 0);\n', '        _;\n', '    }\n', '\n', '    //Only first and second token reserve wallets\n', '    modifier onlyTokenReserve {\n', '        require(msg.sender == firstReserveWallet );\n', '        require(allocations[msg.sender] > 0);\n', '        _;\n', '    }\n', '\n', '    //Has not been locked yet\n', '    modifier notLocked {\n', '        require(lockedAt == 0);\n', '        _;\n', '    }\n', '\n', '    modifier locked {\n', '        require(lockedAt > 0);\n', '        _;\n', '    }\n', '\n', '    //Token allocations have not been set\n', '    modifier notAllocated {\n', '        require(allocations[teamReserveWallet] == 0);\n', '        require(allocations[firstReserveWallet] == 0);\n', '        _;\n', '    }\n', '\n', '    function ShareXTokenVault(ERC20 _token) public {\n', '\n', '        owner = msg.sender;\n', '        token = ShareXERC20(_token);\n', '        \n', '    }\n', '\n', '    function allocate() public notLocked notAllocated onlyOwner {\n', '\n', '        //Makes sure Token Contract has the exact number of tokens\n', '        require(token.balanceOf(address(this)) == totalAllocation);\n', '        \n', '        allocations[teamReserveWallet] = teamReserveAllocation;\n', '        allocations[firstReserveWallet] = firstReserveAllocation;\n', '\n', '        Allocated(teamReserveWallet, teamReserveAllocation);\n', '        Allocated(firstReserveWallet, firstReserveAllocation);\n', '\n', '        lock();\n', '    }\n', '\n', '    //Lock the vault for the two wallets\n', '    function lock() internal notLocked onlyOwner {\n', '\n', '        lockedAt = block.timestamp;\n', '\n', '        // timeLocks[teamReserveWallet] = lockedAt.add(teamTimeLock);\n', '        timeLocks[teamReserveWallet] = secondTime;\n', '        \n', '        // timeLocks[firstReserveWallet] = lockedAt.add(firstReserveTimeLock);\n', '        timeLocks[firstReserveWallet] = firstTime;\n', '\n', '        Locked(lockedAt);\n', '    }\n', '\n', '    //In the case locking failed, then allow the owner to reclaim the tokens on the contract.\n', '    //Recover Tokens in case incorrect amount was sent to contract.\n', '    function recoverFailedLock() external notLocked notAllocated onlyOwner {\n', '\n', '        // Transfer all tokens on this contract back to the owner\n', '        require(token.transfer(owner, token.balanceOf(address(this))));\n', '    }\n', '\n', '    // Total number of tokens currently in the vault\n', '    function getTotalBalance() public view returns (uint256 tokensCurrentlyInVault) {\n', '\n', '        return token.balanceOf(address(this));\n', '\n', '    }\n', '\n', '    // Number of tokens that are still locked\n', '    function getLockedBalance() public view onlyReserveWallets returns (uint256 tokensLocked) {\n', '\n', '        return allocations[msg.sender].sub(claimed[msg.sender]);\n', '\n', '    }\n', '\n', '    //Claim tokens for first reserve wallets\n', '    function claimTokenReserve() onlyTokenReserve locked public {\n', '\n', '        address reserveWallet = msg.sender;\n', '\n', "        // Can't claim before Lock ends\n", '        require(block.timestamp > timeLocks[reserveWallet]);\n', '\n', '        // Must Only claim once\n', '        require(claimed[reserveWallet] == 0);\n', '\n', '        uint256 amount = allocations[reserveWallet];\n', '\n', '        claimed[reserveWallet] = amount;\n', '\n', '        require(token.transfer(CEO,amount.mul(CEO_SHARE).div(DIV)));\n', '        require(token.transfer(COO,amount.mul(COO_SHARE).div(DIV)));\n', '        require(token.transfer(CTO,amount.mul(CTO_SHARE).div(DIV)));\n', '        require(token.transfer(CMO,amount.mul(CMO_SHARE).div(DIV)));\n', '        require(token.transfer(CPO,amount.mul(CPO_SHARE).div(DIV)));\n', '        require(token.transfer(CEO_TEAM,amount.mul(CEO_TEAM_SHARE).div(DIV)));\n', '        require(token.transfer(AWD,amount.mul(AWD_SHARE).div(DIV)));\n', '\n', '        Distributed(CEO, amount.mul(CEO_SHARE).div(DIV));\n', '        Distributed(COO, amount.mul(COO_SHARE).div(DIV));\n', '        Distributed(CTO, amount.mul(CTO_SHARE).div(DIV));\n', '        Distributed(CMO, amount.mul(CMO_SHARE).div(DIV));\n', '        Distributed(CPO, amount.mul(CPO_SHARE).div(DIV));\n', '        Distributed(CEO_TEAM, amount.mul(CEO_TEAM_SHARE).div(DIV));\n', '        Distributed(AWD, amount.mul(AWD_SHARE).div(DIV));\n', '    }\n', '\n', '    //Claim tokens for ShareX team reserve wallet\n', '    function claimTeamReserve() onlyTeamReserve locked public {\n', '\n', '        uint256 vestingStage = teamVestingStage();\n', '\n', '        //Amount of tokens the team should have at this vesting stage\n', '        uint256 totalUnlocked = vestingStage.mul(allocations[teamReserveWallet]).div(teamVestingStages);\n', '\n', '        require(totalUnlocked <= allocations[teamReserveWallet]);\n', '\n', '        //Previously claimed tokens must be less than what is unlocked\n', '        require(claimed[teamReserveWallet] < totalUnlocked);\n', '\n', '        uint256 payment = totalUnlocked.sub(claimed[teamReserveWallet]);\n', '\n', '        claimed[teamReserveWallet] = totalUnlocked;\n', '\n', '        // require(token.transfer(teamReserveWallet, payment));\n', '        \n', '        require(token.transfer(AWD,payment));\n', '        \n', '        Distributed(AWD, payment);\n', '    }\n', '  \n', '    //Current Vesting stage for ShareX team \n', '    function teamVestingStage() public view onlyTeamReserve returns(uint256){\n', '        \n', '        // Every 3 months\n', '        uint256 vestingMonths = teamTimeLock.div(teamVestingStages); \n', '\n', '        // uint256 stage = (block.timestamp.sub(lockedAt)).div(vestingMonths);\n', '        uint256 stage  = (block.timestamp).sub(firstTime).div(vestingMonths);\n', '\n', "        //Ensures team vesting stage doesn't go past teamVestingStages\n", '        if(stage > teamVestingStages){\n', '            stage = teamVestingStages;\n', '        }\n', '\n', '        return stage;\n', '\n', '    }\n', '\n', '    // Checks if msg.sender can collect tokens\n', '    function canCollect() public view onlyReserveWallets returns(bool) {\n', '\n', '        return block.timestamp > timeLocks[msg.sender] && claimed[msg.sender] == 0;\n', '\n', '    }\n', '\n', '}']
