['pragma solidity ^0.4.17;\n', '\n', 'contract SingleSourceAuthority {\n', '    // Struct and Enum\n', '    struct Authority {\n', '        bool valid;\n', '        address authorizedBy;\n', '        address revokedBy;\n', '        uint validFrom;\n', '        uint validTo;\n', '    }\n', '\n', '    // Instance variables\n', '    address public rootAuthority;\n', '    mapping(address => Authority) public authorities;\n', '\n', '    // Modifier\n', '    modifier restricted() {\n', '        if (msg.sender == rootAuthority)\n', '            _;\n', '    }\n', '\n', '    // Init\n', '    function SingleSourceAuthority() public {\n', '        rootAuthority = msg.sender;\n', '    }\n', '\n', '    // Functions\n', '    function changeRootAuthority(address newRootAuthorityAddress)\n', '      public\n', '      restricted()\n', '    {\n', '        rootAuthority = newRootAuthorityAddress;\n', '    }\n', '\n', '    function isRootAuthority(address authorityAddress)\n', '      public\n', '      view\n', '      returns (bool)\n', '    {\n', '        if (authorityAddress == rootAuthority) {\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function isValidAuthority(address authorityAddress, uint blockNumber)\n', '      public\n', '      view\n', '      returns (bool)\n', '    {\n', '        Authority storage authority = authorities[authorityAddress];\n', '        if (authority.valid) {\n', '            if (authority.validFrom <= blockNumber && (authority.validTo == 0 || authority.validTo >= blockNumber)) {\n', '                return true;\n', '            } else {\n', '                return false;\n', '            }\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function approveAuthority(address authorityAddress) public restricted() {\n', '        Authority memory authority = Authority({\n', '            valid: true,\n', '            authorizedBy: msg.sender,\n', '            revokedBy: 0x0,\n', '            validFrom: block.number,\n', '            validTo: 0\n', '        });\n', '        authorities[authorityAddress] = authority;\n', '    }\n', '\n', '    function revokeAuthority(address authorityAddress, uint blockNumber) public restricted() {\n', '        Authority storage authority = authorities[authorityAddress];\n', '        authority.revokedBy = msg.sender;\n', '        authority.validTo = blockNumber;\n', '    }\n', '}']
['pragma solidity ^0.4.17;\n', '\n', 'contract SingleSourceAuthority {\n', '    // Struct and Enum\n', '    struct Authority {\n', '        bool valid;\n', '        address authorizedBy;\n', '        address revokedBy;\n', '        uint validFrom;\n', '        uint validTo;\n', '    }\n', '\n', '    // Instance variables\n', '    address public rootAuthority;\n', '    mapping(address => Authority) public authorities;\n', '\n', '    // Modifier\n', '    modifier restricted() {\n', '        if (msg.sender == rootAuthority)\n', '            _;\n', '    }\n', '\n', '    // Init\n', '    function SingleSourceAuthority() public {\n', '        rootAuthority = msg.sender;\n', '    }\n', '\n', '    // Functions\n', '    function changeRootAuthority(address newRootAuthorityAddress)\n', '      public\n', '      restricted()\n', '    {\n', '        rootAuthority = newRootAuthorityAddress;\n', '    }\n', '\n', '    function isRootAuthority(address authorityAddress)\n', '      public\n', '      view\n', '      returns (bool)\n', '    {\n', '        if (authorityAddress == rootAuthority) {\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function isValidAuthority(address authorityAddress, uint blockNumber)\n', '      public\n', '      view\n', '      returns (bool)\n', '    {\n', '        Authority storage authority = authorities[authorityAddress];\n', '        if (authority.valid) {\n', '            if (authority.validFrom <= blockNumber && (authority.validTo == 0 || authority.validTo >= blockNumber)) {\n', '                return true;\n', '            } else {\n', '                return false;\n', '            }\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function approveAuthority(address authorityAddress) public restricted() {\n', '        Authority memory authority = Authority({\n', '            valid: true,\n', '            authorizedBy: msg.sender,\n', '            revokedBy: 0x0,\n', '            validFrom: block.number,\n', '            validTo: 0\n', '        });\n', '        authorities[authorityAddress] = authority;\n', '    }\n', '\n', '    function revokeAuthority(address authorityAddress, uint blockNumber) public restricted() {\n', '        Authority storage authority = authorities[authorityAddress];\n', '        authority.revokedBy = msg.sender;\n', '        authority.validTo = blockNumber;\n', '    }\n', '}']
