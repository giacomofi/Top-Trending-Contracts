['// solhint-disable-next-line compiler-fixed, compiler-gt-0_4\n', 'pragma solidity ^0.4.24;\n', '\n', '//                             _,,ad8888888888bba,_\n', '//                         ,ad88888I888888888888888ba,\n', '//                       ,88888888I88888888888888888888a,\n', '//                     ,d888888888I8888888888888888888888b,\n', '//                    d88888PP"""" ""YY88888888888888888888b,\n', '//                  ,d88"&#39;__,,--------,,,,.;ZZZY8888888888888,\n', '//                 ,8IIl&#39;"                ;;l"ZZZIII8888888888,\n', '//                ,I88l;&#39;                  ;lZZZZZ888III8888888,\n', '//              ,II88Zl;.                  ;llZZZZZ888888I888888,\n', '//             ,II888Zl;.                .;;;;;lllZZZ888888I8888b\n', '//            ,II8888Z;;                 `;;;;;&#39;&#39;llZZ8888888I8888,\n', '//            II88888Z;&#39;                        .;lZZZ8888888I888b\n', '//            II88888Z; _,aaa,      .,aaaaa,__.l;llZZZ88888888I888\n', '//            II88888IZZZZZZZZZ,  .ZZZZZZZZZZZZZZ;llZZ88888888I888,\n', '//            II88888IZZ<&#39;(@@>Z|  |ZZZ<&#39;(@@>ZZZZ;;llZZ888888888I88I\n', '//           ,II88888;   `""" ;|  |ZZ; `"""     ;;llZ8888888888I888\n', '//           II888888l            `;;          .;llZZ8888888888I888,\n', '//          ,II888888Z;           ;;;        .;;llZZZ8888888888I888I\n', '//          III888888Zl;    ..,   `;;       ,;;lllZZZ88888888888I888\n', '//          II88888888Z;;...;(_    _)      ,;;;llZZZZ88888888888I888,\n', '//          II88888888Zl;;;;;&#39; `--&#39;Z;.   .,;;;;llZZZZ88888888888I888b\n', '//          ]I888888888Z;;;;&#39;   ";llllll;..;;;lllZZZZ88888888888I8888,\n', '//          II888888888Zl.;;"Y88bd888P";;,..;lllZZZZZ88888888888I8888I\n', '//          II8888888888Zl;.; `"PPP";;;,..;lllZZZZZZZ88888888888I88888\n', '//          II888888888888Zl;;. `;;;l;;;;lllZZZZZZZZW88888888888I88888\n', '//          `II8888888888888Zl;.    ,;;lllZZZZZZZZWMZ88888888888I88888\n', '//           II8888888888888888ZbaalllZZZZZZZZZWWMZZZ8888888888I888888,\n', '//           `II88888888888888888b"WWZZZZZWWWMMZZZZZZI888888888I888888b\n', '//            `II88888888888888888;ZZMMMMMMZZZZZZZZllI888888888I8888888\n', '//             `II8888888888888888 `;lZZZZZZZZZZZlllll888888888I8888888,\n', '//              II8888888888888888, `;lllZZZZllllll;;.Y88888888I8888888b,\n', '//             ,II8888888888888888b   .;;lllllll;;;.;..88888888I88888888b,\n', '//             II888888888888888PZI;.  .`;;;.;;;..; ...88888888I8888888888,\n', '//             II888888888888PZ;;&#39;;;.   ;. .;.  .;. .. Y8888888I88888888888b,\n', '//            ,II888888888PZ;;&#39;                        `8888888I8888888888888b,\n', '//            II888888888&#39;                              888888I8888888888888888b\n', '//           ,II888888888                              ,888888I88888888888888888\n', '//          ,d88888888888                              d888888I8888888888ZZZZZZZ\n', '//       ,ad888888888888I                              8888888I8888ZZZZZZZZZZZZZ\n', '//     ,d888888888888888&#39;                              888888IZZZZZZZZZZZZZZZZZZ\n', '//   ,d888888888888P&#39;8P&#39;                               Y888ZZZZZZZZZZZZZZZZZZZZZ\n', '//  ,8888888888888,  "                                 ,ZZZZZZZZZZZZZZZZZZZZZZZZ\n', '// d888888888888888,                                ,ZZZZZZZZZZZZZZZZZZZZZZZZZZZ\n', '// 888888888888888888a,      _                    ,ZZZZZZZZZZZZZZZZZZZZ888888888\n', '// 888888888888888888888ba,_d&#39;                  ,ZZZZZZZZZZZZZZZZZ88888888888888\n', '// 8888888888888888888888888888bbbaaa,,,______,ZZZZZZZZZZZZZZZ888888888888888888\n', '// 88888888888888888888888888888888888888888ZZZZZZZZZZZZZZZ888888888888888888888\n', '// 8888888888888888888888888888888888888888ZZZZZZZZZZZZZZ88888888888888888888888\n', '// 888888888888888888888888888888888888888ZZZZZZZZZZZZZZ888888888888888888888888\n', '// 8888888888888888888888888888888888888ZZZZZZZZZZZZZZ88888888888888888888888888\n', '// 88888888888888888888888888888888888ZZZZZZZZZZZZZZ8888888888888888888888888888\n', '// 8888888888888888888888888888888888ZZZZZZZZZZZZZZ88888888888888888 Da Vinci 88\n', '// 88888888888888888888888888888888ZZZZZZZZZZZZZZ8888888888888888888  Coders  88\n', '// 8888888888888888888888888888888ZZZZZZZZZZZZZZ88888888888888888888888888888888\n', '\n', '\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal pure returns (uint c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal pure returns (uint) {\n', '    return a / b;\n', '  }\n', '\n', '  function mod(uint a, uint b) internal pure returns (uint) {\n', '    return a % b;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal pure returns (uint c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract Dividends {\n', '  using SafeMath for *;\n', '\n', '  uint private constant FIXED_POINT = 1000000000000000000;\n', '\n', '  struct Scheme {\n', '    uint value;\n', '    uint shares;\n', '    uint mask;\n', '  }\n', '\n', '  struct Vault {\n', '    uint value;\n', '    uint shares;\n', '    uint mask;\n', '  }\n', '\n', '  mapping (uint => mapping (address => Vault)) private vaultOfAddress;\n', '  mapping (uint => Scheme) private schemeOfId;\n', '\n', '  function buyShares (uint _schemeId, address _owner, uint _shares, uint _value) internal {\n', '    require(_owner != address(0));\n', '    require(_shares > 0 && _value > 0);\n', '\n', '    uint value = _value.mul(FIXED_POINT);\n', '\n', '    Scheme storage scheme = schemeOfId[_schemeId];\n', '\n', '    scheme.value = scheme.value.add(_value);\n', '    scheme.shares = scheme.shares.add(_shares);\n', '\n', '    require(value > scheme.shares);\n', '\n', '    uint pps = value.div(scheme.shares);\n', '\n', '    Vault storage vault = vaultOfAddress[_schemeId][_owner];\n', '\n', '    vault.shares = vault.shares.add(_shares);\n', '    vault.mask = vault.mask.add(scheme.mask.mul(_shares));\n', '    vault.value = vault.value.add(value.sub(pps.mul(scheme.shares)));\n', '\n', '    scheme.mask = scheme.mask.add(pps);\n', '  }\n', '\n', '  function flushVault (uint _schemeId, address _owner) internal {\n', '    uint gains = gainsOfVault(_schemeId, _owner);\n', '    if (gains > 0) {\n', '      Vault storage vault = vaultOfAddress[_schemeId][_owner];\n', '      vault.value = vault.value.add(gains);\n', '      vault.mask = vault.mask.add(gains);\n', '    }\n', '  }\n', '\n', '  function withdrawVault (uint _schemeId, address _owner) internal returns (uint) {\n', '    flushVault(_schemeId, _owner);\n', '\n', '    Vault storage vault = vaultOfAddress[_schemeId][_owner];\n', '    uint payout = vault.value.div(FIXED_POINT);\n', '\n', '    if (payout > 0) {\n', '      vault.value = 0;\n', '    }\n', '\n', '    return payout;\n', '  }\n', '\n', '  function creditVault (uint _schemeId, address _owner, uint _value) internal {\n', '    Vault storage vault = vaultOfAddress[_schemeId][_owner];\n', '    vault.value = vault.value.add(_value.mul(FIXED_POINT));\n', '  }\n', '\n', '  function gainsOfVault (uint _schemeId, address _owner) internal view returns (uint) {\n', '    Scheme storage scheme = schemeOfId[_schemeId];\n', '    Vault storage vault = vaultOfAddress[_schemeId][_owner];\n', '\n', '    if (vault.shares == 0) {\n', '      return 0;\n', '    }\n', '\n', '    return scheme.mask.mul(vault.shares).sub(vault.mask);\n', '  }\n', '\n', '  function valueOfVault (uint _schemeId, address _owner) internal view returns (uint) {\n', '    Vault storage vault = vaultOfAddress[_schemeId][_owner];\n', '    return vault.value;\n', '  }\n', '\n', '  function balanceOfVault (uint _schemeId, address _owner) internal view returns (uint) {\n', '    Vault storage vault = vaultOfAddress[_schemeId][_owner];\n', '\n', '    uint total = vault.value.add(gainsOfVault(_schemeId, _owner));\n', '    uint balance = total.div(FIXED_POINT);\n', '\n', '    return balance;\n', '  }\n', '\n', '  function sharesOfVault (uint _schemeId, address _owner) internal view returns (uint) {\n', '    Vault storage vault = vaultOfAddress[_schemeId][_owner];\n', '    return vault.shares;\n', '  }\n', '\n', '  function valueOfScheme (uint _schemeId) internal view returns (uint) {\n', '    return schemeOfId[_schemeId].value;\n', '  }\n', '\n', '  function sharesOfScheme (uint _schemeId) internal view returns (uint) {\n', '    return schemeOfId[_schemeId].shares;\n', '  }\n', '}\n', '\n', '\n', 'library Utils {\n', '  using SafeMath for uint;\n', '\n', '  uint private constant LAST_COUNTRY = 195;\n', '\n', '  function regularTicketPrice () internal pure returns (uint) {\n', '    return 100000000000000;\n', '  }\n', '\n', '  function goldenTicketPrice (uint _x) internal pure returns (uint) {\n', '    uint price = _x.mul(_x).div(2168819140000000000000000).add(100000000000000).add(_x.div(100000));\n', '    return price < regularTicketPrice() ? regularTicketPrice() : price;\n', '  }\n', '\n', '  function ticketsForWithExcess (uint _value) internal pure returns (uint, uint) {\n', '    uint tickets = _value.div(regularTicketPrice());\n', '    uint excess = _value.sub(tickets.mul(regularTicketPrice()));\n', '    return (tickets, excess);\n', '  }\n', '\n', '  function percentageOf (uint _value, uint _p) internal pure returns (uint) {\n', '    return _value.mul(_p).div(100);\n', '  }\n', '\n', '  function validReferralCode (string _code) internal pure returns (bool) {\n', '    bytes memory b = bytes(_code);\n', '\n', '    if (b.length < 3) {\n', '      return false;\n', '    }\n', '\n', '    for (uint i = 0; i < b.length; i++) {\n', '      bytes1 c = b[i];\n', '      if (\n', '        !(c >= 0x30 && c <= 0x39) && // 0-9\n', '        !(c >= 0x41 && c <= 0x5A) && // A-Z\n', '        !(c >= 0x61 && c <= 0x7A) && // a-z\n', '        !(c == 0x2D) // -\n', '      ) {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '  function validNick (string _nick) internal pure returns (bool) {\n', '    return bytes(_nick).length > 3;\n', '  }\n', '\n', '  function validCountryId (uint _countryId) internal pure returns (bool) {\n', '    return _countryId > 0 && _countryId <= LAST_COUNTRY;\n', '  }\n', '}\n', '\n', '\n', 'contract Events {\n', '  event Started (\n', '    uint _time\n', '  );\n', '\n', '  event Bought (\n', '    address indexed _player,\n', '    address indexed _referral,\n', '    uint _countryId,\n', '    uint _tickets,\n', '    uint _value,\n', '    uint _excess\n', '  );\n', '\n', '  event Promoted (\n', '    address indexed _player,\n', '    uint _goldenTickets,\n', '    uint _endTime\n', '  );\n', '\n', '  event Withdrew (\n', '    address indexed _player,\n', '    uint _amount\n', '  );\n', '\n', '  event Registered (\n', '    string _code, address indexed _referral\n', '  );\n', '\n', '  event Won (\n', '    address indexed _winner, uint _pot\n', '  );\n', '}\n', '\n', '\n', 'contract Constants {\n', '  uint internal constant MAIN_SCHEME = 1337;\n', '  uint internal constant DEFAULT_COUNTRY = 1;\n', '\n', '  uint internal constant SET_NICK_FEE = 0.01 ether;\n', '  uint internal constant REFERRAL_REGISTRATION_FEE = 0.01 ether;\n', '\n', '  uint internal constant TO_DIVIDENDS = 42;\n', '  uint internal constant TO_REFERRAL = 10;\n', '  uint internal constant TO_DEVELOPERS = 4;\n', '  uint internal constant TO_COUNTRY = 12;\n', '}\n', '\n', '\n', 'contract State is Constants {\n', '  address internal addressOfOwner;\n', '\n', '  uint internal maxTime = 0;\n', '  uint internal addedTime = 0;\n', '\n', '  uint internal totalPot = 0;\n', '  uint internal startTime = 0;\n', '  uint internal endTime = 0;\n', '  bool internal potWithdrawn = false;\n', '  address internal addressOfCaptain;\n', '\n', '  struct Info {\n', '    address referral;\n', '    uint countryId;\n', '    uint withdrawn;\n', '    string nick;\n', '  }\n', '\n', '  mapping (address => Info) internal infoOfAddress;\n', '  mapping (address => string[]) internal codesOfAddress;\n', '  mapping (string => address) internal addressOfCode;\n', '\n', '  modifier restricted () {\n', '    require(msg.sender == addressOfOwner);\n', '    _;\n', '  }\n', '\n', '  modifier active () {\n', '    require(startTime > 0);\n', '    require(block.timestamp < endTime);\n', '    require(!potWithdrawn);\n', '    _;\n', '  }\n', '\n', '  modifier player () {\n', '    require(infoOfAddress[msg.sender].countryId > 0);\n', '    _;\n', '  }\n', '}\n', '\n', '\n', 'contract Core is Events, State, Dividends {}\n', '\n', '\n', 'contract ExternalView is Core {\n', '  function totalInfo () external view returns (bool, bool, address, uint, uint, uint, uint, uint, uint, address) {\n', '    return (\n', '      startTime > 0,\n', '      block.timestamp >= endTime,\n', '      addressOfCaptain,\n', '      totalPot,\n', '      endTime,\n', '      sharesOfScheme(MAIN_SCHEME),\n', '      valueOfScheme(MAIN_SCHEME),\n', '      maxTime,\n', '      addedTime,\n', '      addressOfOwner\n', '    );\n', '  }\n', '\n', '  function countryInfo (uint _countryId) external view returns (uint, uint) {\n', '    return (\n', '      sharesOfScheme(_countryId),\n', '      valueOfScheme(_countryId)\n', '    );\n', '  }\n', '\n', '  function playerInfo (address _player) external view returns (uint, uint, uint, address, uint, uint, string) {\n', '    Info storage info = infoOfAddress[_player];\n', '    return (\n', '      sharesOfVault(MAIN_SCHEME, _player),\n', '      balanceOfVault(MAIN_SCHEME, _player),\n', '      balanceOfVault(info.countryId, _player),\n', '      info.referral,\n', '      info.countryId,\n', '      info.withdrawn,\n', '      info.nick\n', '    );\n', '  }\n', '\n', '  function numberOfReferralCodes (address _player) external view returns (uint) {\n', '    return codesOfAddress[_player].length;\n', '  }\n', '\n', '  function referralCodeAt (address _player, uint i) external view returns (string) {\n', '    return codesOfAddress[_player][i];\n', '  }\n', '\n', '  function codeToAddress (string _code) external view returns (address) {\n', '    return addressOfCode[_code];\n', '  }\n', '\n', '  function goldenTicketPrice (uint _x) external pure returns (uint) {\n', '    return Utils.goldenTicketPrice(_x);\n', '  }\n', '}\n', '\n', '\n', 'contract Internal is Core {\n', '  function _registerReferral (string _code, address _referral) internal {\n', '    require(Utils.validReferralCode(_code));\n', '    require(addressOfCode[_code] == address(0));\n', '\n', '    addressOfCode[_code] = _referral;\n', '    codesOfAddress[_referral].push(_code);\n', '\n', '    emit Registered(_code, _referral);\n', '  }\n', '}\n', '\n', '\n', 'contract WinnerWinner is Core, Internal, ExternalView {\n', '  using SafeMath for *;\n', '\n', '  constructor () public {\n', '    addressOfOwner = msg.sender;\n', '  }\n', '\n', '  function () public payable {\n', '    buy(addressOfOwner, DEFAULT_COUNTRY);\n', '  }\n', '\n', '  function start (uint _maxTime, uint _addedTime) public restricted {\n', '    require(startTime == 0);\n', '    require(_maxTime > 0 && _addedTime > 0);\n', '    require(_maxTime > _addedTime);\n', '\n', '    maxTime = _maxTime;\n', '    addedTime = _addedTime;\n', '\n', '    startTime = block.timestamp;\n', '    endTime = startTime + maxTime;\n', '    addressOfCaptain = addressOfOwner;\n', '\n', '    _registerReferral("owner", addressOfOwner);\n', '\n', '    emit Started(startTime);\n', '  }\n', '\n', '  function buy (address _referral, uint _countryId) public payable active {\n', '    require(msg.value >= Utils.regularTicketPrice());\n', '    require(msg.value <= 100000 ether);\n', '    require(codesOfAddress[_referral].length > 0);\n', '    require(_countryId != MAIN_SCHEME);\n', '    require(Utils.validCountryId(_countryId));\n', '\n', '    (uint tickets, uint excess) = Utils.ticketsForWithExcess(msg.value);\n', '    uint value = msg.value.sub(excess);\n', '\n', '    require(tickets > 0);\n', '    require(value.add(excess) == msg.value);\n', '\n', '    Info storage info = infoOfAddress[msg.sender];\n', '\n', '    if (info.countryId == 0) {\n', '      info.referral = _referral;\n', '      info.countryId = _countryId;\n', '    }\n', '\n', '    uint vdivs = Utils.percentageOf(value, TO_DIVIDENDS);\n', '    uint vreferral = Utils.percentageOf(value, TO_REFERRAL);\n', '    uint vdevs = Utils.percentageOf(value, TO_DEVELOPERS);\n', '    uint vcountry = Utils.percentageOf(value, TO_COUNTRY);\n', '    uint vpot = value.sub(vdivs).sub(vreferral).sub(vdevs).sub(vcountry);\n', '\n', '    assert(vdivs.add(vreferral).add(vdevs).add(vcountry).add(vpot) == value);\n', '\n', '    buyShares(MAIN_SCHEME, msg.sender, tickets, vdivs);\n', '    buyShares(info.countryId, msg.sender, tickets, vcountry);\n', '\n', '    creditVault(MAIN_SCHEME, info.referral, vreferral);\n', '    creditVault(MAIN_SCHEME, addressOfOwner, vdevs);\n', '\n', '    if (excess > 0) {\n', '      creditVault(MAIN_SCHEME, msg.sender, excess);\n', '    }\n', '\n', '    uint goldenTickets = value.div(Utils.goldenTicketPrice(totalPot));\n', '    if (goldenTickets > 0) {\n', '      endTime = endTime.add(goldenTickets.mul(addedTime)) > block.timestamp.add(maxTime) ?\n', '        block.timestamp.add(maxTime) : endTime.add(goldenTickets.mul(addedTime));\n', '      addressOfCaptain = msg.sender;\n', '      emit Promoted(addressOfCaptain, goldenTickets, endTime);\n', '    }\n', '\n', '    totalPot = totalPot.add(vpot);\n', '\n', '    emit Bought(msg.sender, info.referral, info.countryId, tickets, value, excess);\n', '  }\n', '\n', '  function setNick (string _nick) public payable {\n', '    require(msg.value == SET_NICK_FEE);\n', '    require(Utils.validNick(_nick));\n', '    infoOfAddress[msg.sender].nick = _nick;\n', '    creditVault(MAIN_SCHEME, addressOfOwner, msg.value);\n', '  }\n', '\n', '  function registerCode (string _code) public payable {\n', '    require(startTime > 0);\n', '    require(msg.value == REFERRAL_REGISTRATION_FEE);\n', '    _registerReferral(_code, msg.sender);\n', '    creditVault(MAIN_SCHEME, addressOfOwner, msg.value);\n', '  }\n', '\n', '  function giftCode (string _code, address _referral) public restricted {\n', '    _registerReferral(_code, _referral);\n', '  }\n', '\n', '  function withdraw () public {\n', '    Info storage info = infoOfAddress[msg.sender];\n', '    uint payout = withdrawVault(MAIN_SCHEME, msg.sender);\n', '\n', '    if (Utils.validCountryId(info.countryId)) {\n', '      payout = payout.add(withdrawVault(info.countryId, msg.sender));\n', '    }\n', '\n', '    if (payout > 0) {\n', '      info.withdrawn = info.withdrawn.add(payout);\n', '      msg.sender.transfer(payout);\n', '      emit Withdrew(msg.sender, payout);\n', '    }\n', '  }\n', '\n', '  function withdrawPot () public player {\n', '    require(startTime > 0);\n', '    require(block.timestamp > (endTime + 10 minutes));\n', '    require(!potWithdrawn);\n', '    require(totalPot > 0);\n', '    require(addressOfCaptain == msg.sender);\n', '\n', '    uint payout = totalPot;\n', '    totalPot = 0;\n', '    potWithdrawn = true;\n', '    addressOfCaptain.transfer(payout);\n', '    emit Won(msg.sender, payout);\n', '  }\n', '}']
['// solhint-disable-next-line compiler-fixed, compiler-gt-0_4\n', 'pragma solidity ^0.4.24;\n', '\n', '//                             _,,ad8888888888bba,_\n', '//                         ,ad88888I888888888888888ba,\n', '//                       ,88888888I88888888888888888888a,\n', '//                     ,d888888888I8888888888888888888888b,\n', '//                    d88888PP"""" ""YY88888888888888888888b,\n', '//                  ,d88"\'__,,--------,,,,.;ZZZY8888888888888,\n', '//                 ,8IIl\'"                ;;l"ZZZIII8888888888,\n', "//                ,I88l;'                  ;lZZZZZ888III8888888,\n", '//              ,II88Zl;.                  ;llZZZZZ888888I888888,\n', '//             ,II888Zl;.                .;;;;;lllZZZ888888I8888b\n', "//            ,II8888Z;;                 `;;;;;''llZZ8888888I8888,\n", "//            II88888Z;'                        .;lZZZ8888888I888b\n", '//            II88888Z; _,aaa,      .,aaaaa,__.l;llZZZ88888888I888\n', '//            II88888IZZZZZZZZZ,  .ZZZZZZZZZZZZZZ;llZZ88888888I888,\n', "//            II88888IZZ<'(@@>Z|  |ZZZ<'(@@>ZZZZ;;llZZ888888888I88I\n", '//           ,II88888;   `""" ;|  |ZZ; `"""     ;;llZ8888888888I888\n', '//           II888888l            `;;          .;llZZ8888888888I888,\n', '//          ,II888888Z;           ;;;        .;;llZZZ8888888888I888I\n', '//          III888888Zl;    ..,   `;;       ,;;lllZZZ88888888888I888\n', '//          II88888888Z;;...;(_    _)      ,;;;llZZZZ88888888888I888,\n', "//          II88888888Zl;;;;;' `--'Z;.   .,;;;;llZZZZ88888888888I888b\n", '//          ]I888888888Z;;;;\'   ";llllll;..;;;lllZZZZ88888888888I8888,\n', '//          II888888888Zl.;;"Y88bd888P";;,..;lllZZZZZ88888888888I8888I\n', '//          II8888888888Zl;.; `"PPP";;;,..;lllZZZZZZZ88888888888I88888\n', '//          II888888888888Zl;;. `;;;l;;;;lllZZZZZZZZW88888888888I88888\n', '//          `II8888888888888Zl;.    ,;;lllZZZZZZZZWMZ88888888888I88888\n', '//           II8888888888888888ZbaalllZZZZZZZZZWWMZZZ8888888888I888888,\n', '//           `II88888888888888888b"WWZZZZZWWWMMZZZZZZI888888888I888888b\n', '//            `II88888888888888888;ZZMMMMMMZZZZZZZZllI888888888I8888888\n', '//             `II8888888888888888 `;lZZZZZZZZZZZlllll888888888I8888888,\n', '//              II8888888888888888, `;lllZZZZllllll;;.Y88888888I8888888b,\n', '//             ,II8888888888888888b   .;;lllllll;;;.;..88888888I88888888b,\n', '//             II888888888888888PZI;.  .`;;;.;;;..; ...88888888I8888888888,\n', "//             II888888888888PZ;;';;.   ;. .;.  .;. .. Y8888888I88888888888b,\n", "//            ,II888888888PZ;;'                        `8888888I8888888888888b,\n", "//            II888888888'                              888888I8888888888888888b\n", '//           ,II888888888                              ,888888I88888888888888888\n', '//          ,d88888888888                              d888888I8888888888ZZZZZZZ\n', '//       ,ad888888888888I                              8888888I8888ZZZZZZZZZZZZZ\n', "//     ,d888888888888888'                              888888IZZZZZZZZZZZZZZZZZZ\n", "//   ,d888888888888P'8P'                               Y888ZZZZZZZZZZZZZZZZZZZZZ\n", '//  ,8888888888888,  "                                 ,ZZZZZZZZZZZZZZZZZZZZZZZZ\n', '// d888888888888888,                                ,ZZZZZZZZZZZZZZZZZZZZZZZZZZZ\n', '// 888888888888888888a,      _                    ,ZZZZZZZZZZZZZZZZZZZZ888888888\n', "// 888888888888888888888ba,_d'                  ,ZZZZZZZZZZZZZZZZZ88888888888888\n", '// 8888888888888888888888888888bbbaaa,,,______,ZZZZZZZZZZZZZZZ888888888888888888\n', '// 88888888888888888888888888888888888888888ZZZZZZZZZZZZZZZ888888888888888888888\n', '// 8888888888888888888888888888888888888888ZZZZZZZZZZZZZZ88888888888888888888888\n', '// 888888888888888888888888888888888888888ZZZZZZZZZZZZZZ888888888888888888888888\n', '// 8888888888888888888888888888888888888ZZZZZZZZZZZZZZ88888888888888888888888888\n', '// 88888888888888888888888888888888888ZZZZZZZZZZZZZZ8888888888888888888888888888\n', '// 8888888888888888888888888888888888ZZZZZZZZZZZZZZ88888888888888888 Da Vinci 88\n', '// 88888888888888888888888888888888ZZZZZZZZZZZZZZ8888888888888888888  Coders  88\n', '// 8888888888888888888888888888888ZZZZZZZZZZZZZZ88888888888888888888888888888888\n', '\n', '\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal pure returns (uint c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal pure returns (uint) {\n', '    return a / b;\n', '  }\n', '\n', '  function mod(uint a, uint b) internal pure returns (uint) {\n', '    return a % b;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal pure returns (uint c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract Dividends {\n', '  using SafeMath for *;\n', '\n', '  uint private constant FIXED_POINT = 1000000000000000000;\n', '\n', '  struct Scheme {\n', '    uint value;\n', '    uint shares;\n', '    uint mask;\n', '  }\n', '\n', '  struct Vault {\n', '    uint value;\n', '    uint shares;\n', '    uint mask;\n', '  }\n', '\n', '  mapping (uint => mapping (address => Vault)) private vaultOfAddress;\n', '  mapping (uint => Scheme) private schemeOfId;\n', '\n', '  function buyShares (uint _schemeId, address _owner, uint _shares, uint _value) internal {\n', '    require(_owner != address(0));\n', '    require(_shares > 0 && _value > 0);\n', '\n', '    uint value = _value.mul(FIXED_POINT);\n', '\n', '    Scheme storage scheme = schemeOfId[_schemeId];\n', '\n', '    scheme.value = scheme.value.add(_value);\n', '    scheme.shares = scheme.shares.add(_shares);\n', '\n', '    require(value > scheme.shares);\n', '\n', '    uint pps = value.div(scheme.shares);\n', '\n', '    Vault storage vault = vaultOfAddress[_schemeId][_owner];\n', '\n', '    vault.shares = vault.shares.add(_shares);\n', '    vault.mask = vault.mask.add(scheme.mask.mul(_shares));\n', '    vault.value = vault.value.add(value.sub(pps.mul(scheme.shares)));\n', '\n', '    scheme.mask = scheme.mask.add(pps);\n', '  }\n', '\n', '  function flushVault (uint _schemeId, address _owner) internal {\n', '    uint gains = gainsOfVault(_schemeId, _owner);\n', '    if (gains > 0) {\n', '      Vault storage vault = vaultOfAddress[_schemeId][_owner];\n', '      vault.value = vault.value.add(gains);\n', '      vault.mask = vault.mask.add(gains);\n', '    }\n', '  }\n', '\n', '  function withdrawVault (uint _schemeId, address _owner) internal returns (uint) {\n', '    flushVault(_schemeId, _owner);\n', '\n', '    Vault storage vault = vaultOfAddress[_schemeId][_owner];\n', '    uint payout = vault.value.div(FIXED_POINT);\n', '\n', '    if (payout > 0) {\n', '      vault.value = 0;\n', '    }\n', '\n', '    return payout;\n', '  }\n', '\n', '  function creditVault (uint _schemeId, address _owner, uint _value) internal {\n', '    Vault storage vault = vaultOfAddress[_schemeId][_owner];\n', '    vault.value = vault.value.add(_value.mul(FIXED_POINT));\n', '  }\n', '\n', '  function gainsOfVault (uint _schemeId, address _owner) internal view returns (uint) {\n', '    Scheme storage scheme = schemeOfId[_schemeId];\n', '    Vault storage vault = vaultOfAddress[_schemeId][_owner];\n', '\n', '    if (vault.shares == 0) {\n', '      return 0;\n', '    }\n', '\n', '    return scheme.mask.mul(vault.shares).sub(vault.mask);\n', '  }\n', '\n', '  function valueOfVault (uint _schemeId, address _owner) internal view returns (uint) {\n', '    Vault storage vault = vaultOfAddress[_schemeId][_owner];\n', '    return vault.value;\n', '  }\n', '\n', '  function balanceOfVault (uint _schemeId, address _owner) internal view returns (uint) {\n', '    Vault storage vault = vaultOfAddress[_schemeId][_owner];\n', '\n', '    uint total = vault.value.add(gainsOfVault(_schemeId, _owner));\n', '    uint balance = total.div(FIXED_POINT);\n', '\n', '    return balance;\n', '  }\n', '\n', '  function sharesOfVault (uint _schemeId, address _owner) internal view returns (uint) {\n', '    Vault storage vault = vaultOfAddress[_schemeId][_owner];\n', '    return vault.shares;\n', '  }\n', '\n', '  function valueOfScheme (uint _schemeId) internal view returns (uint) {\n', '    return schemeOfId[_schemeId].value;\n', '  }\n', '\n', '  function sharesOfScheme (uint _schemeId) internal view returns (uint) {\n', '    return schemeOfId[_schemeId].shares;\n', '  }\n', '}\n', '\n', '\n', 'library Utils {\n', '  using SafeMath for uint;\n', '\n', '  uint private constant LAST_COUNTRY = 195;\n', '\n', '  function regularTicketPrice () internal pure returns (uint) {\n', '    return 100000000000000;\n', '  }\n', '\n', '  function goldenTicketPrice (uint _x) internal pure returns (uint) {\n', '    uint price = _x.mul(_x).div(2168819140000000000000000).add(100000000000000).add(_x.div(100000));\n', '    return price < regularTicketPrice() ? regularTicketPrice() : price;\n', '  }\n', '\n', '  function ticketsForWithExcess (uint _value) internal pure returns (uint, uint) {\n', '    uint tickets = _value.div(regularTicketPrice());\n', '    uint excess = _value.sub(tickets.mul(regularTicketPrice()));\n', '    return (tickets, excess);\n', '  }\n', '\n', '  function percentageOf (uint _value, uint _p) internal pure returns (uint) {\n', '    return _value.mul(_p).div(100);\n', '  }\n', '\n', '  function validReferralCode (string _code) internal pure returns (bool) {\n', '    bytes memory b = bytes(_code);\n', '\n', '    if (b.length < 3) {\n', '      return false;\n', '    }\n', '\n', '    for (uint i = 0; i < b.length; i++) {\n', '      bytes1 c = b[i];\n', '      if (\n', '        !(c >= 0x30 && c <= 0x39) && // 0-9\n', '        !(c >= 0x41 && c <= 0x5A) && // A-Z\n', '        !(c >= 0x61 && c <= 0x7A) && // a-z\n', '        !(c == 0x2D) // -\n', '      ) {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '  function validNick (string _nick) internal pure returns (bool) {\n', '    return bytes(_nick).length > 3;\n', '  }\n', '\n', '  function validCountryId (uint _countryId) internal pure returns (bool) {\n', '    return _countryId > 0 && _countryId <= LAST_COUNTRY;\n', '  }\n', '}\n', '\n', '\n', 'contract Events {\n', '  event Started (\n', '    uint _time\n', '  );\n', '\n', '  event Bought (\n', '    address indexed _player,\n', '    address indexed _referral,\n', '    uint _countryId,\n', '    uint _tickets,\n', '    uint _value,\n', '    uint _excess\n', '  );\n', '\n', '  event Promoted (\n', '    address indexed _player,\n', '    uint _goldenTickets,\n', '    uint _endTime\n', '  );\n', '\n', '  event Withdrew (\n', '    address indexed _player,\n', '    uint _amount\n', '  );\n', '\n', '  event Registered (\n', '    string _code, address indexed _referral\n', '  );\n', '\n', '  event Won (\n', '    address indexed _winner, uint _pot\n', '  );\n', '}\n', '\n', '\n', 'contract Constants {\n', '  uint internal constant MAIN_SCHEME = 1337;\n', '  uint internal constant DEFAULT_COUNTRY = 1;\n', '\n', '  uint internal constant SET_NICK_FEE = 0.01 ether;\n', '  uint internal constant REFERRAL_REGISTRATION_FEE = 0.01 ether;\n', '\n', '  uint internal constant TO_DIVIDENDS = 42;\n', '  uint internal constant TO_REFERRAL = 10;\n', '  uint internal constant TO_DEVELOPERS = 4;\n', '  uint internal constant TO_COUNTRY = 12;\n', '}\n', '\n', '\n', 'contract State is Constants {\n', '  address internal addressOfOwner;\n', '\n', '  uint internal maxTime = 0;\n', '  uint internal addedTime = 0;\n', '\n', '  uint internal totalPot = 0;\n', '  uint internal startTime = 0;\n', '  uint internal endTime = 0;\n', '  bool internal potWithdrawn = false;\n', '  address internal addressOfCaptain;\n', '\n', '  struct Info {\n', '    address referral;\n', '    uint countryId;\n', '    uint withdrawn;\n', '    string nick;\n', '  }\n', '\n', '  mapping (address => Info) internal infoOfAddress;\n', '  mapping (address => string[]) internal codesOfAddress;\n', '  mapping (string => address) internal addressOfCode;\n', '\n', '  modifier restricted () {\n', '    require(msg.sender == addressOfOwner);\n', '    _;\n', '  }\n', '\n', '  modifier active () {\n', '    require(startTime > 0);\n', '    require(block.timestamp < endTime);\n', '    require(!potWithdrawn);\n', '    _;\n', '  }\n', '\n', '  modifier player () {\n', '    require(infoOfAddress[msg.sender].countryId > 0);\n', '    _;\n', '  }\n', '}\n', '\n', '\n', 'contract Core is Events, State, Dividends {}\n', '\n', '\n', 'contract ExternalView is Core {\n', '  function totalInfo () external view returns (bool, bool, address, uint, uint, uint, uint, uint, uint, address) {\n', '    return (\n', '      startTime > 0,\n', '      block.timestamp >= endTime,\n', '      addressOfCaptain,\n', '      totalPot,\n', '      endTime,\n', '      sharesOfScheme(MAIN_SCHEME),\n', '      valueOfScheme(MAIN_SCHEME),\n', '      maxTime,\n', '      addedTime,\n', '      addressOfOwner\n', '    );\n', '  }\n', '\n', '  function countryInfo (uint _countryId) external view returns (uint, uint) {\n', '    return (\n', '      sharesOfScheme(_countryId),\n', '      valueOfScheme(_countryId)\n', '    );\n', '  }\n', '\n', '  function playerInfo (address _player) external view returns (uint, uint, uint, address, uint, uint, string) {\n', '    Info storage info = infoOfAddress[_player];\n', '    return (\n', '      sharesOfVault(MAIN_SCHEME, _player),\n', '      balanceOfVault(MAIN_SCHEME, _player),\n', '      balanceOfVault(info.countryId, _player),\n', '      info.referral,\n', '      info.countryId,\n', '      info.withdrawn,\n', '      info.nick\n', '    );\n', '  }\n', '\n', '  function numberOfReferralCodes (address _player) external view returns (uint) {\n', '    return codesOfAddress[_player].length;\n', '  }\n', '\n', '  function referralCodeAt (address _player, uint i) external view returns (string) {\n', '    return codesOfAddress[_player][i];\n', '  }\n', '\n', '  function codeToAddress (string _code) external view returns (address) {\n', '    return addressOfCode[_code];\n', '  }\n', '\n', '  function goldenTicketPrice (uint _x) external pure returns (uint) {\n', '    return Utils.goldenTicketPrice(_x);\n', '  }\n', '}\n', '\n', '\n', 'contract Internal is Core {\n', '  function _registerReferral (string _code, address _referral) internal {\n', '    require(Utils.validReferralCode(_code));\n', '    require(addressOfCode[_code] == address(0));\n', '\n', '    addressOfCode[_code] = _referral;\n', '    codesOfAddress[_referral].push(_code);\n', '\n', '    emit Registered(_code, _referral);\n', '  }\n', '}\n', '\n', '\n', 'contract WinnerWinner is Core, Internal, ExternalView {\n', '  using SafeMath for *;\n', '\n', '  constructor () public {\n', '    addressOfOwner = msg.sender;\n', '  }\n', '\n', '  function () public payable {\n', '    buy(addressOfOwner, DEFAULT_COUNTRY);\n', '  }\n', '\n', '  function start (uint _maxTime, uint _addedTime) public restricted {\n', '    require(startTime == 0);\n', '    require(_maxTime > 0 && _addedTime > 0);\n', '    require(_maxTime > _addedTime);\n', '\n', '    maxTime = _maxTime;\n', '    addedTime = _addedTime;\n', '\n', '    startTime = block.timestamp;\n', '    endTime = startTime + maxTime;\n', '    addressOfCaptain = addressOfOwner;\n', '\n', '    _registerReferral("owner", addressOfOwner);\n', '\n', '    emit Started(startTime);\n', '  }\n', '\n', '  function buy (address _referral, uint _countryId) public payable active {\n', '    require(msg.value >= Utils.regularTicketPrice());\n', '    require(msg.value <= 100000 ether);\n', '    require(codesOfAddress[_referral].length > 0);\n', '    require(_countryId != MAIN_SCHEME);\n', '    require(Utils.validCountryId(_countryId));\n', '\n', '    (uint tickets, uint excess) = Utils.ticketsForWithExcess(msg.value);\n', '    uint value = msg.value.sub(excess);\n', '\n', '    require(tickets > 0);\n', '    require(value.add(excess) == msg.value);\n', '\n', '    Info storage info = infoOfAddress[msg.sender];\n', '\n', '    if (info.countryId == 0) {\n', '      info.referral = _referral;\n', '      info.countryId = _countryId;\n', '    }\n', '\n', '    uint vdivs = Utils.percentageOf(value, TO_DIVIDENDS);\n', '    uint vreferral = Utils.percentageOf(value, TO_REFERRAL);\n', '    uint vdevs = Utils.percentageOf(value, TO_DEVELOPERS);\n', '    uint vcountry = Utils.percentageOf(value, TO_COUNTRY);\n', '    uint vpot = value.sub(vdivs).sub(vreferral).sub(vdevs).sub(vcountry);\n', '\n', '    assert(vdivs.add(vreferral).add(vdevs).add(vcountry).add(vpot) == value);\n', '\n', '    buyShares(MAIN_SCHEME, msg.sender, tickets, vdivs);\n', '    buyShares(info.countryId, msg.sender, tickets, vcountry);\n', '\n', '    creditVault(MAIN_SCHEME, info.referral, vreferral);\n', '    creditVault(MAIN_SCHEME, addressOfOwner, vdevs);\n', '\n', '    if (excess > 0) {\n', '      creditVault(MAIN_SCHEME, msg.sender, excess);\n', '    }\n', '\n', '    uint goldenTickets = value.div(Utils.goldenTicketPrice(totalPot));\n', '    if (goldenTickets > 0) {\n', '      endTime = endTime.add(goldenTickets.mul(addedTime)) > block.timestamp.add(maxTime) ?\n', '        block.timestamp.add(maxTime) : endTime.add(goldenTickets.mul(addedTime));\n', '      addressOfCaptain = msg.sender;\n', '      emit Promoted(addressOfCaptain, goldenTickets, endTime);\n', '    }\n', '\n', '    totalPot = totalPot.add(vpot);\n', '\n', '    emit Bought(msg.sender, info.referral, info.countryId, tickets, value, excess);\n', '  }\n', '\n', '  function setNick (string _nick) public payable {\n', '    require(msg.value == SET_NICK_FEE);\n', '    require(Utils.validNick(_nick));\n', '    infoOfAddress[msg.sender].nick = _nick;\n', '    creditVault(MAIN_SCHEME, addressOfOwner, msg.value);\n', '  }\n', '\n', '  function registerCode (string _code) public payable {\n', '    require(startTime > 0);\n', '    require(msg.value == REFERRAL_REGISTRATION_FEE);\n', '    _registerReferral(_code, msg.sender);\n', '    creditVault(MAIN_SCHEME, addressOfOwner, msg.value);\n', '  }\n', '\n', '  function giftCode (string _code, address _referral) public restricted {\n', '    _registerReferral(_code, _referral);\n', '  }\n', '\n', '  function withdraw () public {\n', '    Info storage info = infoOfAddress[msg.sender];\n', '    uint payout = withdrawVault(MAIN_SCHEME, msg.sender);\n', '\n', '    if (Utils.validCountryId(info.countryId)) {\n', '      payout = payout.add(withdrawVault(info.countryId, msg.sender));\n', '    }\n', '\n', '    if (payout > 0) {\n', '      info.withdrawn = info.withdrawn.add(payout);\n', '      msg.sender.transfer(payout);\n', '      emit Withdrew(msg.sender, payout);\n', '    }\n', '  }\n', '\n', '  function withdrawPot () public player {\n', '    require(startTime > 0);\n', '    require(block.timestamp > (endTime + 10 minutes));\n', '    require(!potWithdrawn);\n', '    require(totalPot > 0);\n', '    require(addressOfCaptain == msg.sender);\n', '\n', '    uint payout = totalPot;\n', '    totalPot = 0;\n', '    potWithdrawn = true;\n', '    addressOfCaptain.transfer(payout);\n', '    emit Won(msg.sender, payout);\n', '  }\n', '}']
