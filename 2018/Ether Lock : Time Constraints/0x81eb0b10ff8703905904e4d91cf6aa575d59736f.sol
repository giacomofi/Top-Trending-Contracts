['pragma solidity 0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', 'library Math {\n', '    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'library MathUtils {\n', '    using SafeMath for uint256;\n', '\n', '    // Divisor used for representing percentages\n', '    uint256 public constant PERC_DIVISOR = 1000000;\n', '\n', '    /*\n', '     * @dev Returns whether an amount is a valid percentage out of PERC_DIVISOR\n', '     * @param _amount Amount that is supposed to be a percentage\n', '     */\n', '    function validPerc(uint256 _amount) internal pure returns (bool) {\n', '        return _amount <= PERC_DIVISOR;\n', '    }\n', '\n', '    /*\n', '     * @dev Compute percentage of a value with the percentage represented by a fraction\n', '     * @param _amount Amount to take the percentage of\n', '     * @param _fracNum Numerator of fraction representing the percentage\n', '     * @param _fracDenom Denominator of fraction representing the percentage\n', '     */\n', '    function percOf(uint256 _amount, uint256 _fracNum, uint256 _fracDenom) internal pure returns (uint256) {\n', '        return _amount.mul(percPoints(_fracNum, _fracDenom)).div(PERC_DIVISOR);\n', '    }\n', '\n', '    /*\n', '     * @dev Compute percentage of a value with the percentage represented by a fraction over PERC_DIVISOR\n', '     * @param _amount Amount to take the percentage of\n', '     * @param _fracNum Numerator of fraction representing the percentage with PERC_DIVISOR as the denominator\n', '     */\n', '    function percOf(uint256 _amount, uint256 _fracNum) internal pure returns (uint256) {\n', '        return _amount.mul(_fracNum).div(PERC_DIVISOR);\n', '    }\n', '\n', '    /*\n', '     * @dev Compute percentage representation of a fraction\n', '     * @param _fracNum Numerator of fraction represeting the percentage\n', '     * @param _fracDenom Denominator of fraction represeting the percentage\n', '     */\n', '    function percPoints(uint256 _fracNum, uint256 _fracDenom) internal pure returns (uint256) {\n', '        return _fracNum.mul(PERC_DIVISOR).div(_fracDenom);\n', '    }\n', '}\n', '\n', 'contract IController is Pausable {\n', '    event SetContractInfo(bytes32 id, address contractAddress, bytes20 gitCommitHash);\n', '\n', '    function setContractInfo(bytes32 _id, address _contractAddress, bytes20 _gitCommitHash) external;\n', '    function updateController(bytes32 _id, address _controller) external;\n', '    function getContract(bytes32 _id) public view returns (address);\n', '}\n', '\n', 'contract IManager {\n', '    event SetController(address controller);\n', '    event ParameterUpdate(string param);\n', '\n', '    function setController(address _controller) external;\n', '}\n', '\n', 'contract Manager is IManager {\n', '    // Controller that contract is registered with\n', '    IController public controller;\n', '\n', '    // Check if sender is controller\n', '    modifier onlyController() {\n', '        require(msg.sender == address(controller));\n', '        _;\n', '    }\n', '\n', '    // Check if sender is controller owner\n', '    modifier onlyControllerOwner() {\n', '        require(msg.sender == controller.owner());\n', '        _;\n', '    }\n', '\n', '    // Check if controller is not paused\n', '    modifier whenSystemNotPaused() {\n', '        require(!controller.paused());\n', '        _;\n', '    }\n', '\n', '    // Check if controller is paused\n', '    modifier whenSystemPaused() {\n', '        require(controller.paused());\n', '        _;\n', '    }\n', '\n', '    function Manager(address _controller) public {\n', '        controller = IController(_controller);\n', '    }\n', '\n', '    /*\n', '     * @dev Set controller. Only callable by current controller\n', '     * @param _controller Controller contract address\n', '     */\n', '    function setController(address _controller) external onlyController {\n', '        controller = IController(_controller);\n', '\n', '        SetController(_controller);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ManagerProxyTarget\n', ' * @dev The base contract that target contracts used by a proxy contract should inherit from\n', ' * Note: Both the target contract and the proxy contract (implemented as ManagerProxy) MUST inherit from ManagerProxyTarget in order to guarantee\n', ' * that both contracts have the same storage layout. Differing storage layouts in a proxy contract and target contract can\n', ' * potentially break the delegate proxy upgradeability mechanism\n', ' */\n', 'contract ManagerProxyTarget is Manager {\n', "    // Used to look up target contract address in controller's registry\n", '    bytes32 public targetContractId;\n', '}\n', '\n', '/*\n', ' * @title A sorted doubly linked list with nodes sorted in descending order. Optionally accepts insert position hints\n', ' *\n', ' * Given a new node with a `key`, a hint is of the form `(prevId, nextId)` s.t. `prevId` and `nextId` are adjacent in the list.\n', ' * `prevId` is a node with a key >= `key` and `nextId` is a node with a key <= `key`. If the sender provides a hint that is a valid insert position\n', ' * the insert operation is a constant time storage write. However, the provided hint in a given transaction might be a valid insert position, but if other transactions are included first, when\n', ' * the given transaction is executed the provided hint may no longer be a valid insert position. For example, one of the nodes referenced might be removed or their keys may\n', ' * be updated such that the the pair of nodes in the hint no longer represent a valid insert position. If one of the nodes in the hint becomes invalid, we still try to use the other\n', ' * valid node as a starting point for finding the appropriate insert position. If both nodes in the hint become invalid, we use the head of the list as a starting point\n', ' * to find the appropriate insert position.\n', ' */\n', 'library SortedDoublyLL {\n', '    using SafeMath for uint256;\n', '\n', '    // Information for a node in the list\n', '    struct Node {\n', "        uint256 key;                     // Node's key used for sorting\n", '        address nextId;                  // Id of next node (smaller key) in the list\n', '        address prevId;                  // Id of previous node (larger key) in the list\n', '    }\n', '\n', '    // Information for the list\n', '    struct Data {\n', '        address head;                        // Head of the list. Also the node in the list with the largest key\n', '        address tail;                        // Tail of the list. Also the node in the list with the smallest key\n', '        uint256 maxSize;                     // Maximum size of the list\n', '        uint256 size;                        // Current size of the list\n', '        mapping (address => Node) nodes;     // Track the corresponding ids for each node in the list\n', '    }\n', '\n', '    /*\n', '     * @dev Set the maximum size of the list\n', '     * @param _size Maximum size\n', '     */\n', '    function setMaxSize(Data storage self, uint256 _size) public {\n', '        // New max size must be greater than old max size\n', '        require(_size > self.maxSize);\n', '\n', '        self.maxSize = _size;\n', '    }\n', '\n', '    /*\n', '     * @dev Add a node to the list\n', "     * @param _id Node's id\n", "     * @param _key Node's key\n", '     * @param _prevId Id of previous node for the insert position\n', '     * @param _nextId Id of next node for the insert position\n', '     */\n', '    function insert(Data storage self, address _id, uint256 _key, address _prevId, address _nextId) public {\n', '        // List must not be full\n', '        require(!isFull(self));\n', '        // List must not already contain node\n', '        require(!contains(self, _id));\n', '        // Node id must not be null\n', '        require(_id != address(0));\n', '        // Key must be non-zero\n', '        require(_key > 0);\n', '\n', '        address prevId = _prevId;\n', '        address nextId = _nextId;\n', '\n', '        if (!validInsertPosition(self, _key, prevId, nextId)) {\n', "            // Sender's hint was not a valid insert position\n", "            // Use sender's hint to find a valid insert position\n", '            (prevId, nextId) = findInsertPosition(self, _key, prevId, nextId);\n', '        }\n', '\n', '        self.nodes[_id].key = _key;\n', '\n', '        if (prevId == address(0) && nextId == address(0)) {\n', '            // Insert as head and tail\n', '            self.head = _id;\n', '            self.tail = _id;\n', '        } else if (prevId == address(0)) {\n', '            // Insert before `prevId` as the head\n', '            self.nodes[_id].nextId = self.head;\n', '            self.nodes[self.head].prevId = _id;\n', '            self.head = _id;\n', '        } else if (nextId == address(0)) {\n', '            // Insert after `nextId` as the tail\n', '            self.nodes[_id].prevId = self.tail;\n', '            self.nodes[self.tail].nextId = _id;\n', '            self.tail = _id;\n', '        } else {\n', '            // Insert at insert position between `prevId` and `nextId`\n', '            self.nodes[_id].nextId = nextId;\n', '            self.nodes[_id].prevId = prevId;\n', '            self.nodes[prevId].nextId = _id;\n', '            self.nodes[nextId].prevId = _id;\n', '        }\n', '\n', '        self.size = self.size.add(1);\n', '    }\n', '\n', '    /*\n', '     * @dev Remove a node from the list\n', "     * @param _id Node's id\n", '     */\n', '    function remove(Data storage self, address _id) public {\n', '        // List must contain the node\n', '        require(contains(self, _id));\n', '\n', '        if (self.size > 1) {\n', '            // List contains more than a single node\n', '            if (_id == self.head) {\n', '                // The removed node is the head\n', '                // Set head to next node\n', '                self.head = self.nodes[_id].nextId;\n', '                // Set prev pointer of new head to null\n', '                self.nodes[self.head].prevId = address(0);\n', '            } else if (_id == self.tail) {\n', '                // The removed node is the tail\n', '                // Set tail to previous node\n', '                self.tail = self.nodes[_id].prevId;\n', '                // Set next pointer of new tail to null\n', '                self.nodes[self.tail].nextId = address(0);\n', '            } else {\n', '                // The removed node is neither the head nor the tail\n', '                // Set next pointer of previous node to the next node\n', '                self.nodes[self.nodes[_id].prevId].nextId = self.nodes[_id].nextId;\n', '                // Set prev pointer of next node to the previous node\n', '                self.nodes[self.nodes[_id].nextId].prevId = self.nodes[_id].prevId;\n', '            }\n', '        } else {\n', '            // List contains a single node\n', '            // Set the head and tail to null\n', '            self.head = address(0);\n', '            self.tail = address(0);\n', '        }\n', '\n', '        delete self.nodes[_id];\n', '        self.size = self.size.sub(1);\n', '    }\n', '\n', '    /*\n', '     * @dev Update the key of a node in the list\n', "     * @param _id Node's id\n", "     * @param _newKey Node's new key\n", '     * @param _prevId Id of previous node for the new insert position\n', '     * @param _nextId Id of next node for the new insert position\n', '     */\n', '    function updateKey(Data storage self, address _id, uint256 _newKey, address _prevId, address _nextId) public {\n', '        // List must contain the node\n', '        require(contains(self, _id));\n', '\n', '        // Remove node from the list\n', '        remove(self, _id);\n', '\n', '        if (_newKey > 0) {\n', '            // Insert node if it has a non-zero key\n', '            insert(self, _id, _newKey, _prevId, _nextId);\n', '        }\n', '    }\n', '\n', '    /*\n', '     * @dev Checks if the list contains a node\n', '     * @param _transcoder Address of transcoder\n', '     */\n', '    function contains(Data storage self, address _id) public view returns (bool) {\n', '        // List only contains non-zero keys, so if key is non-zero the node exists\n', '        return self.nodes[_id].key > 0;\n', '    }\n', '\n', '    /*\n', '     * @dev Checks if the list is full\n', '     */\n', '    function isFull(Data storage self) public view returns (bool) {\n', '        return self.size == self.maxSize;\n', '    }\n', '\n', '    /*\n', '     * @dev Checks if the list is empty\n', '     */\n', '    function isEmpty(Data storage self) public view returns (bool) {\n', '        return self.size == 0;\n', '    }\n', '\n', '    /*\n', '     * @dev Returns the current size of the list\n', '     */\n', '    function getSize(Data storage self) public view returns (uint256) {\n', '        return self.size;\n', '    }\n', '\n', '    /*\n', '     * @dev Returns the maximum size of the list\n', '     */\n', '    function getMaxSize(Data storage self) public view returns (uint256) {\n', '        return self.maxSize;\n', '    }\n', '\n', '    /*\n', '     * @dev Returns the key of a node in the list\n', "     * @param _id Node's id\n", '     */\n', '    function getKey(Data storage self, address _id) public view returns (uint256) {\n', '        return self.nodes[_id].key;\n', '    }\n', '\n', '    /*\n', '     * @dev Returns the first node in the list (node with the largest key)\n', '     */\n', '    function getFirst(Data storage self) public view returns (address) {\n', '        return self.head;\n', '    }\n', '\n', '    /*\n', '     * @dev Returns the last node in the list (node with the smallest key)\n', '     */\n', '    function getLast(Data storage self) public view returns (address) {\n', '        return self.tail;\n', '    }\n', '\n', '    /*\n', '     * @dev Returns the next node (with a smaller key) in the list for a given node\n', "     * @param _id Node's id\n", '     */\n', '    function getNext(Data storage self, address _id) public view returns (address) {\n', '        return self.nodes[_id].nextId;\n', '    }\n', '\n', '    /*\n', '     * @dev Returns the previous node (with a larger key) in the list for a given node\n', "     * @param _id Node's id\n", '     */\n', '    function getPrev(Data storage self, address _id) public view returns (address) {\n', '        return self.nodes[_id].prevId;\n', '    }\n', '\n', '    /*\n', '     * @dev Check if a pair of nodes is a valid insertion point for a new node with the given key\n', "     * @param _key Node's key\n", '     * @param _prevId Id of previous node for the insert position\n', '     * @param _nextId Id of next node for the insert position\n', '     */\n', '    function validInsertPosition(Data storage self, uint256 _key, address _prevId, address _nextId) public view returns (bool) {\n', '        if (_prevId == address(0) && _nextId == address(0)) {\n', '            // `(null, null)` is a valid insert position if the list is empty\n', '            return isEmpty(self);\n', '        } else if (_prevId == address(0)) {\n', '            // `(null, _nextId)` is a valid insert position if `_nextId` is the head of the list\n', '            return self.head == _nextId && _key >= self.nodes[_nextId].key;\n', '        } else if (_nextId == address(0)) {\n', '            // `(_prevId, null)` is a valid insert position if `_prevId` is the tail of the list\n', '            return self.tail == _prevId && _key <= self.nodes[_prevId].key;\n', '        } else {\n', "            // `(_prevId, _nextId)` is a valid insert position if they are adjacent nodes and `_key` falls between the two nodes' keys\n", '            return self.nodes[_prevId].nextId == _nextId && self.nodes[_prevId].key >= _key && _key >= self.nodes[_nextId].key;\n', '        }\n', '    }\n', '\n', '    /*\n', '     * @dev Descend the list (larger keys to smaller keys) to find a valid insert position\n', "     * @param _key Node's key\n", '     * @param _startId Id of node to start ascending the list from\n', '     */\n', '    function descendList(Data storage self, uint256 _key, address _startId) private view returns (address, address) {\n', '        // If `_startId` is the head, check if the insert position is before the head\n', '        if (self.head == _startId && _key >= self.nodes[_startId].key) {\n', '            return (address(0), _startId);\n', '        }\n', '\n', '        address prevId = _startId;\n', '        address nextId = self.nodes[prevId].nextId;\n', '\n', '        // Descend the list until we reach the end or until we find a valid insert position\n', '        while (prevId != address(0) && !validInsertPosition(self, _key, prevId, nextId)) {\n', '            prevId = self.nodes[prevId].nextId;\n', '            nextId = self.nodes[prevId].nextId;\n', '        }\n', '\n', '        return (prevId, nextId);\n', '    }\n', '\n', '    /*\n', '     * @dev Ascend the list (smaller keys to larger keys) to find a valid insert position\n', "     * @param _key Node's key\n", '     * @param _startId Id of node to start descending the list from\n', '     */\n', '    function ascendList(Data storage self, uint256 _key, address _startId) private view returns (address, address) {\n', '        // If `_startId` is the tail, check if the insert position is after the tail\n', '        if (self.tail == _startId && _key <= self.nodes[_startId].key) {\n', '            return (_startId, address(0));\n', '        }\n', '\n', '        address nextId = _startId;\n', '        address prevId = self.nodes[nextId].prevId;\n', '\n', '        // Ascend the list until we reach the end or until we find a valid insertion point\n', '        while (nextId != address(0) && !validInsertPosition(self, _key, prevId, nextId)) {\n', '            nextId = self.nodes[nextId].prevId;\n', '            prevId = self.nodes[nextId].prevId;\n', '        }\n', '\n', '        return (prevId, nextId);\n', '    }\n', '\n', '    /*\n', '     * @dev Find the insert position for a new node with the given key\n', "     * @param _key Node's key\n", '     * @param _prevId Id of previous node for the insert position\n', '     * @param _nextId Id of next node for the insert position\n', '     */\n', '    function findInsertPosition(Data storage self, uint256 _key, address _prevId, address _nextId) private view returns (address, address) {\n', '        address prevId = _prevId;\n', '        address nextId = _nextId;\n', '\n', '        if (prevId != address(0)) {\n', '            if (!contains(self, prevId) || _key > self.nodes[prevId].key) {\n', '                // `prevId` does not exist anymore or now has a smaller key than the given key\n', '                prevId = address(0);\n', '            }\n', '        }\n', '\n', '        if (nextId != address(0)) {\n', '            if (!contains(self, nextId) || _key < self.nodes[nextId].key) {\n', '                // `nextId` does not exist anymore or now has a larger key than the given key\n', '                nextId = address(0);\n', '            }\n', '        }\n', '\n', '        if (prevId == address(0) && nextId == address(0)) {\n', '            // No hint - descend list starting from head\n', '            return descendList(self, _key, self.head);\n', '        } else if (prevId == address(0)) {\n', '            // No `prevId` for hint - ascend list starting from `nextId`\n', '            return ascendList(self, _key, nextId);\n', '        } else if (nextId == address(0)) {\n', '            // No `nextId` for hint - descend list starting from `prevId`\n', '            return descendList(self, _key, prevId);\n', '        } else {\n', '            // Descend list starting from `prevId`\n', '            return descendList(self, _key, prevId);\n', '        }\n', '    }\n', '}\n', '\n', 'library EarningsPool {\n', '    using SafeMath for uint256;\n', '\n', '    // Represents rewards and fees to be distributed to delegators\n', '    struct Data {\n', '        uint256 rewardPool;                // Rewards in the pool\n', '        uint256 feePool;                   // Fees in the pool\n', "        uint256 totalStake;                // Transcoder's total stake during the pool's round\n", '        uint256 claimableStake;            // Stake that can be used to claim portions of the fee and reward pool\n', '        uint256 transcoderRewardCut;       // Reward cut for the reward pool\n', '        uint256 transcoderFeeShare;        // Fee share for the fee pool\n', '    }\n', '\n', '    function init(EarningsPool.Data storage earningsPool, uint256 _stake, uint256 _rewardCut, uint256 _feeShare) internal {\n', '        earningsPool.totalStake = _stake;\n', '        earningsPool.claimableStake = _stake;\n', '        earningsPool.transcoderRewardCut = _rewardCut;\n', '        earningsPool.transcoderFeeShare = _feeShare;\n', '    }\n', '\n', '    function hasClaimableShares(EarningsPool.Data storage earningsPool) internal view returns (bool) {\n', '        return earningsPool.claimableStake > 0;\n', '    }\n', '\n', '    function claimShare(EarningsPool.Data storage earningsPool, uint256 _stake, bool _isTranscoder) internal returns (uint256, uint256) {\n', '        uint256 fees = 0;\n', '        uint256 rewards = 0;\n', '\n', '        if (earningsPool.feePool > 0) {\n', '            // Compute fee share\n', '            fees = feePoolShare(earningsPool, _stake, _isTranscoder);\n', '            earningsPool.feePool = earningsPool.feePool.sub(fees);\n', '        }\n', '\n', '        if (earningsPool.rewardPool > 0) {\n', '            // Compute reward share\n', '            rewards = rewardPoolShare(earningsPool, _stake, _isTranscoder);\n', '            earningsPool.rewardPool = earningsPool.rewardPool.sub(rewards);\n', '        }\n', '\n', '        // Update remaning claimable stake for token pools\n', '        earningsPool.claimableStake = earningsPool.claimableStake.sub(_stake);\n', '\n', '        return (fees, rewards);\n', '    }\n', '\n', '    function feePoolShare(EarningsPool.Data storage earningsPool, uint256 _stake, bool _isTranscoder) internal view returns (uint256) {\n', '        uint256 transcoderFees = 0;\n', '        uint256 delegatorFees = 0;\n', '\n', '        if (earningsPool.claimableStake > 0) {\n', '            uint256 delegatorsFees = MathUtils.percOf(earningsPool.feePool, earningsPool.transcoderFeeShare);\n', '            transcoderFees = earningsPool.feePool.sub(delegatorsFees);\n', '            delegatorFees = MathUtils.percOf(delegatorsFees, _stake, earningsPool.claimableStake);\n', '        }\n', '\n', '        if (_isTranscoder) {\n', '            return delegatorFees.add(transcoderFees);\n', '        } else {\n', '            return delegatorFees;\n', '        }\n', '    }\n', '\n', '    function rewardPoolShare(EarningsPool.Data storage earningsPool, uint256 _stake, bool _isTranscoder) internal view returns (uint256) {\n', '        uint256 transcoderRewards = 0;\n', '        uint256 delegatorRewards = 0;\n', '\n', '        if (earningsPool.claimableStake > 0) {\n', '            transcoderRewards = MathUtils.percOf(earningsPool.rewardPool, earningsPool.transcoderRewardCut);\n', '            delegatorRewards = MathUtils.percOf(earningsPool.rewardPool.sub(transcoderRewards), _stake, earningsPool.claimableStake);\n', '        }\n', '\n', '        if (_isTranscoder) {\n', '            return delegatorRewards.add(transcoderRewards);\n', '        } else {\n', '            return delegatorRewards;\n', '        }\n', '    }\n', '}\n', '\n', 'contract ILivepeerToken is ERC20, Ownable {\n', '    function mint(address _to, uint256 _amount) public returns (bool);\n', '    function burn(uint256 _amount) public;\n', '}\n', '\n', '/**\n', ' * @title Minter interface\n', ' */\n', 'contract IMinter {\n', '    // Events\n', '    event SetCurrentRewardTokens(uint256 currentMintableTokens, uint256 currentInflation);\n', '\n', '    // External functions\n', '    function createReward(uint256 _fracNum, uint256 _fracDenom) external returns (uint256);\n', '    function trustedTransferTokens(address _to, uint256 _amount) external;\n', '    function trustedBurnTokens(uint256 _amount) external;\n', '    function trustedWithdrawETH(address _to, uint256 _amount) external;\n', '    function depositETH() external payable returns (bool);\n', '    function setCurrentRewardTokens() external;\n', '\n', '    // Public functions\n', '    function getController() public view returns (IController);\n', '}\n', '\n', '/**\n', ' * @title RoundsManager interface\n', ' */\n', 'contract IRoundsManager {\n', '    // Events\n', '    event NewRound(uint256 round);\n', '\n', '    // External functions\n', '    function initializeRound() external;\n', '\n', '    // Public functions\n', '    function blockNum() public view returns (uint256);\n', '    function blockHash(uint256 _block) public view returns (bytes32);\n', '    function currentRound() public view returns (uint256);\n', '    function currentRoundStartBlock() public view returns (uint256);\n', '    function currentRoundInitialized() public view returns (bool);\n', '    function currentRoundLocked() public view returns (bool);\n', '}\n', '\n', '/*\n', ' * @title Interface for BondingManager\n', ' */\n', 'contract IBondingManager {\n', '    event TranscoderUpdate(address indexed transcoder, uint256 pendingRewardCut, uint256 pendingFeeShare, uint256 pendingPricePerSegment, bool registered);\n', '    event TranscoderEvicted(address indexed transcoder);\n', '    event TranscoderResigned(address indexed transcoder);\n', '    event TranscoderSlashed(address indexed transcoder, address finder, uint256 penalty, uint256 finderReward);\n', '    event Reward(address indexed transcoder, uint256 amount);\n', '    event Bond(address indexed delegate, address indexed delegator);\n', '    event Unbond(address indexed delegate, address indexed delegator);\n', '    event WithdrawStake(address indexed delegator);\n', '    event WithdrawFees(address indexed delegator);\n', '\n', '    // External functions\n', '    function setActiveTranscoders() external;\n', '    function updateTranscoderWithFees(address _transcoder, uint256 _fees, uint256 _round) external;\n', '    function slashTranscoder(address _transcoder, address _finder, uint256 _slashAmount, uint256 _finderFee) external;\n', '    function electActiveTranscoder(uint256 _maxPricePerSegment, bytes32 _blockHash, uint256 _round) external view returns (address);\n', '\n', '    // Public functions\n', '    function transcoderTotalStake(address _transcoder) public view returns (uint256);\n', '    function activeTranscoderTotalStake(address _transcoder, uint256 _round) public view returns (uint256);\n', '    function isRegisteredTranscoder(address _transcoder) public view returns (bool);\n', '    function getTotalBonded() public view returns (uint256);\n', '}\n', '\n', '/**\n', ' * @title BondingManager\n', ' * @dev Manages bonding, transcoder and rewards/fee accounting related operations of the Livepeer protocol\n', ' */\n', 'contract BondingManager is ManagerProxyTarget, IBondingManager {\n', '    using SafeMath for uint256;\n', '    using SortedDoublyLL for SortedDoublyLL.Data;\n', '    using EarningsPool for EarningsPool.Data;\n', '\n', '    // Time between unbonding and possible withdrawl in rounds\n', '    uint64 public unbondingPeriod;\n', '    // Number of active transcoders\n', '    uint256 public numActiveTranscoders;\n', '    // Max number of rounds that a caller can claim earnings for at once\n', '    uint256 public maxEarningsClaimsRounds;\n', '\n', "    // Represents a transcoder's current state\n", '    struct Transcoder {\n', '        uint256 lastRewardRound;                             // Last round that the transcoder called reward\n', '        uint256 rewardCut;                                   // % of reward paid to transcoder by a delegator\n', '        uint256 feeShare;                                    // % of fees paid to delegators by transcoder\n', '        uint256 pricePerSegment;                             // Price per segment (denominated in LPT units) for a stream\n', '        uint256 pendingRewardCut;                            // Pending reward cut for next round if the transcoder is active\n', '        uint256 pendingFeeShare;                             // Pending fee share for next round if the transcoder is active\n', '        uint256 pendingPricePerSegment;                      // Pending price per segment for next round if the transcoder is active\n', '        mapping (uint256 => EarningsPool.Data) earningsPoolPerRound;  // Mapping of round => earnings pool for the round\n', '    }\n', '\n', '    // The various states a transcoder can be in\n', '    enum TranscoderStatus { NotRegistered, Registered }\n', '\n', "    // Represents a delegator's current state\n", '    struct Delegator {\n', '        uint256 bondedAmount;                    // The amount of bonded tokens\n', '        uint256 fees;                            // The amount of fees collected\n', '        address delegateAddress;                 // The address delegated to\n', '        uint256 delegatedAmount;                 // The amount of tokens delegated to the delegator\n', '        uint256 startRound;                      // The round the delegator transitions to bonded phase and is delegated to someone\n', '        uint256 withdrawRound;                   // The round at which a delegator can withdraw\n', '        uint256 lastClaimRound;                  // The last round during which the delegator claimed its earnings\n', '    }\n', '\n', '    // The various states a delegator can be in\n', '    enum DelegatorStatus { Pending, Bonded, Unbonding, Unbonded }\n', '\n', '    // Keep track of the known transcoders and delegators\n', '    mapping (address => Delegator) private delegators;\n', '    mapping (address => Transcoder) private transcoders;\n', '\n', '    // Keep track of total bonded tokens\n', '    uint256 private totalBonded;\n', '\n', '    // Candidate and reserve transcoders\n', '    SortedDoublyLL.Data private transcoderPool;\n', '\n', '    // Represents the active transcoder set\n', '    struct ActiveTranscoderSet {\n', '        address[] transcoders;\n', '        mapping (address => bool) isActive;\n', '        uint256 totalStake;\n', '    }\n', '\n', '    // Keep track of active transcoder set for each round\n', '    mapping (uint256 => ActiveTranscoderSet) public activeTranscoderSet;\n', '\n', '    // Check if sender is JobsManager\n', '    modifier onlyJobsManager() {\n', '        require(msg.sender == controller.getContract(keccak256("JobsManager")));\n', '        _;\n', '    }\n', '\n', '    // Check if sender is RoundsManager\n', '    modifier onlyRoundsManager() {\n', '        require(msg.sender == controller.getContract(keccak256("RoundsManager")));\n', '        _;\n', '    }\n', '\n', '    // Check if current round is initialized\n', '    modifier currentRoundInitialized() {\n', '        require(roundsManager().currentRoundInitialized());\n', '        _;\n', '    }\n', '\n', '    // Automatically claim earnings from lastClaimRound through the current round\n', '    modifier autoClaimEarnings() {\n', '        updateDelegatorWithEarnings(msg.sender, roundsManager().currentRound());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev BondingManager constructor. Only invokes constructor of base Manager contract with provided Controller address\n', '     * @param _controller Address of Controller that this contract will be registered with\n', '     */\n', '    function BondingManager(address _controller) public Manager(_controller) {}\n', '\n', '    /**\n', '     * @dev Set unbonding period. Only callable by Controller owner\n', '     * @param _unbondingPeriod Rounds between unbonding and possible withdrawal\n', '     */\n', '    function setUnbondingPeriod(uint64 _unbondingPeriod) external onlyControllerOwner {\n', '        unbondingPeriod = _unbondingPeriod;\n', '\n', '        ParameterUpdate("unbondingPeriod");\n', '    }\n', '\n', '    /**\n', '     * @dev Set max number of registered transcoders. Only callable by Controller owner\n', '     * @param _numTranscoders Max number of registered transcoders\n', '     */\n', '    function setNumTranscoders(uint256 _numTranscoders) external onlyControllerOwner {\n', '        // Max number of transcoders must be greater than or equal to number of active transcoders\n', '        require(_numTranscoders >= numActiveTranscoders);\n', '\n', '        transcoderPool.setMaxSize(_numTranscoders);\n', '\n', '        ParameterUpdate("numTranscoders");\n', '    }\n', '\n', '    /**\n', '     * @dev Set number of active transcoders. Only callable by Controller owner\n', '     * @param _numActiveTranscoders Number of active transcoders\n', '     */\n', '    function setNumActiveTranscoders(uint256 _numActiveTranscoders) external onlyControllerOwner {\n', '        // Number of active transcoders cannot exceed max number of transcoders\n', '        require(_numActiveTranscoders <= transcoderPool.getMaxSize());\n', '\n', '        numActiveTranscoders = _numActiveTranscoders;\n', '\n', '        ParameterUpdate("numActiveTranscoders");\n', '    }\n', '\n', '    /**\n', '     * @dev Set max number of rounds a caller can claim earnings for at once. Only callable by Controller owner\n', '     * @param _maxEarningsClaimsRounds Max number of rounds a caller can claim earnings for at once\n', '     */\n', '    function setMaxEarningsClaimsRounds(uint256 _maxEarningsClaimsRounds) external onlyControllerOwner {\n', '        maxEarningsClaimsRounds = _maxEarningsClaimsRounds;\n', '\n', '        ParameterUpdate("maxEarningsClaimsRounds");\n', '    }\n', '\n', '    /**\n', '     * @dev The sender is declaring themselves as a candidate for active transcoding.\n', '     * @param _rewardCut % of reward paid to transcoder by a delegator\n', '     * @param _feeShare % of fees paid to delegators by a transcoder\n', '     * @param _pricePerSegment Price per segment (denominated in Wei) for a stream\n', '     */\n', '    function transcoder(uint256 _rewardCut, uint256 _feeShare, uint256 _pricePerSegment)\n', '        external\n', '        whenSystemNotPaused\n', '        currentRoundInitialized\n', '    {\n', '        Transcoder storage t = transcoders[msg.sender];\n', '        Delegator storage del = delegators[msg.sender];\n', '\n', '        if (roundsManager().currentRoundLocked()) {\n', '            // If it is the lock period of the current round\n', '            // the lowest price previously set by any transcoder\n', '            // becomes the price floor and the caller can lower its\n', '            // own price to a point greater than or equal to the price floor\n', '\n', '            // Caller must already be a registered transcoder\n', '            require(transcoderStatus(msg.sender) == TranscoderStatus.Registered);\n', '            // Provided rewardCut value must equal the current pendingRewardCut value\n', '            // This value cannot change during the lock period\n', '            require(_rewardCut == t.pendingRewardCut);\n', '            // Provided feeShare value must equal the current pendingFeeShare value\n', '            // This value cannot change during the lock period\n', '            require(_feeShare == t.pendingFeeShare);\n', '\n', '            // Iterate through the transcoder pool to find the price floor\n', '            // Since the caller must be a registered transcoder, the transcoder pool size will always at least be 1\n', '            // Thus, we can safely set the initial price floor to be the pendingPricePerSegment of the first\n', '            // transcoder in the pool\n', '            address currentTranscoder = transcoderPool.getFirst();\n', '            uint256 priceFloor = transcoders[currentTranscoder].pendingPricePerSegment;\n', '            for (uint256 i = 0; i < transcoderPool.getSize(); i++) {\n', '                if (transcoders[currentTranscoder].pendingPricePerSegment < priceFloor) {\n', '                    priceFloor = transcoders[currentTranscoder].pendingPricePerSegment;\n', '                }\n', '\n', '                currentTranscoder = transcoderPool.getNext(currentTranscoder);\n', '            }\n', '\n', '            // Provided pricePerSegment must be greater than or equal to the price floor and\n', '            // less than or equal to the previously set pricePerSegment by the caller\n', '            require(_pricePerSegment >= priceFloor && _pricePerSegment <= t.pendingPricePerSegment);\n', '\n', '            t.pendingPricePerSegment = _pricePerSegment;\n', '\n', '            TranscoderUpdate(msg.sender, t.pendingRewardCut, t.pendingFeeShare, _pricePerSegment, true);\n', '        } else {\n', '            // It is not the lock period of the current round\n', '            // Caller is free to change rewardCut, feeShare, pricePerSegment as it pleases\n', '            // If caller is not a registered transcoder, it can also register and join the transcoder pool\n', '            // if it has sufficient delegated stake\n', '            // If caller is not a registered transcoder and does not have sufficient delegated stake\n', '            // to join the transcoder pool, it can change rewardCut, feeShare, pricePerSegment\n', '            // as information signals to delegators in an effort to camapaign and accumulate\n', '            // more delegated stake\n', '\n', '            // Reward cut must be a valid percentage\n', '            require(MathUtils.validPerc(_rewardCut));\n', '            // Fee share must be a valid percentage\n', '            require(MathUtils.validPerc(_feeShare));\n', '\n', '            // Must have a non-zero amount bonded to self\n', '            require(del.delegateAddress == msg.sender && del.bondedAmount > 0);\n', '\n', '            t.pendingRewardCut = _rewardCut;\n', '            t.pendingFeeShare = _feeShare;\n', '            t.pendingPricePerSegment = _pricePerSegment;\n', '\n', '            uint256 delegatedAmount = del.delegatedAmount;\n', '\n', '            // Check if transcoder is not already registered\n', '            if (transcoderStatus(msg.sender) == TranscoderStatus.NotRegistered) {\n', '                if (!transcoderPool.isFull()) {\n', '                    // If pool is not full add new transcoder\n', '                    transcoderPool.insert(msg.sender, delegatedAmount, address(0), address(0));\n', '                } else {\n', '                    address lastTranscoder = transcoderPool.getLast();\n', '\n', '                    if (delegatedAmount > transcoderPool.getKey(lastTranscoder)) {\n', '                        // If pool is full and caller has more delegated stake than the transcoder in the pool with the least delegated stake:\n', '                        // - Evict transcoder in pool with least delegated stake\n', '                        // - Add caller to pool\n', '                        transcoderPool.remove(lastTranscoder);\n', '                        transcoderPool.insert(msg.sender, delegatedAmount, address(0), address(0));\n', '\n', '                        TranscoderEvicted(lastTranscoder);\n', '                    }\n', '                }\n', '            }\n', '\n', '            TranscoderUpdate(msg.sender, _rewardCut, _feeShare, _pricePerSegment, transcoderPool.contains(msg.sender));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Delegate stake towards a specific address.\n', '     * @param _amount The amount of LPT to stake.\n', '     * @param _to The address of the transcoder to stake towards.\n', '     */\n', '    function bond(\n', '        uint256 _amount,\n', '        address _to\n', '    )\n', '        external\n', '        whenSystemNotPaused\n', '        currentRoundInitialized\n', '        autoClaimEarnings\n', '    {\n', '        Delegator storage del = delegators[msg.sender];\n', '\n', '        uint256 currentRound = roundsManager().currentRound();\n', '        // Amount to delegate\n', '        uint256 delegationAmount = _amount;\n', '\n', '        if (delegatorStatus(msg.sender) == DelegatorStatus.Unbonded || delegatorStatus(msg.sender) == DelegatorStatus.Unbonding) {\n', '            // New delegate\n', '            // Set start round\n', "            // Don't set start round if delegator is in pending state because the start round would not change\n", '            del.startRound = currentRound.add(1);\n', '            // If transitioning from unbonding or unbonded state\n', '            // make sure to zero out withdraw round\n', '            del.withdrawRound = 0;\n', '            // Unbonded or unbonding state = no existing delegate\n', '            // Thus, delegation amount = bonded stake + provided amount\n', '            // If caller is bonding for the first time or withdrew previously bonded stake, delegation amount = provided amount\n', '            delegationAmount = delegationAmount.add(del.bondedAmount);\n', '        } else if (del.delegateAddress != address(0) && _to != del.delegateAddress) {\n', '            // Changing delegate\n', '            // Set start round\n', '            del.startRound = currentRound.add(1);\n', '            // Update amount to delegate with previous delegation amount\n', '            delegationAmount = delegationAmount.add(del.bondedAmount);\n', "            // Decrease old delegate's delegated amount\n", '            delegators[del.delegateAddress].delegatedAmount = delegators[del.delegateAddress].delegatedAmount.sub(del.bondedAmount);\n', '\n', '            if (transcoderStatus(del.delegateAddress) == TranscoderStatus.Registered) {\n', '                // Previously delegated to a transcoder\n', "                // Decrease old transcoder's total stake\n", '                transcoderPool.updateKey(del.delegateAddress, transcoderPool.getKey(del.delegateAddress).sub(del.bondedAmount), address(0), address(0));\n', '            }\n', '        }\n', '\n', '        // Delegation amount must be > 0 - cannot delegate to someone without having bonded stake\n', '        require(delegationAmount > 0);\n', '        // Update delegate\n', '        del.delegateAddress = _to;\n', "        // Update current delegate's delegated amount with delegation amount\n", '        delegators[_to].delegatedAmount = delegators[_to].delegatedAmount.add(delegationAmount);\n', '\n', '        if (transcoderStatus(_to) == TranscoderStatus.Registered) {\n', '            // Delegated to a transcoder\n', "            // Increase transcoder's total stake\n", '            transcoderPool.updateKey(_to, transcoderPool.getKey(del.delegateAddress).add(delegationAmount), address(0), address(0));\n', '        }\n', '\n', '        if (_amount > 0) {\n', '            // Update bonded amount\n', '            del.bondedAmount = del.bondedAmount.add(_amount);\n', '            // Update total bonded tokens\n', '            totalBonded = totalBonded.add(_amount);\n', '            // Transfer the LPT to the Minter\n', '            livepeerToken().transferFrom(msg.sender, minter(), _amount);\n', '        }\n', '\n', '        Bond(_to, msg.sender);\n', '    }\n', '\n', '    /**\n', "     * @dev Unbond delegator's current stake. Delegator enters unbonding state\n", '     */\n', '    function unbond()\n', '        external\n', '        whenSystemNotPaused\n', '        currentRoundInitialized\n', '        autoClaimEarnings\n', '    {\n', '        // Sender must be in bonded state\n', '        require(delegatorStatus(msg.sender) == DelegatorStatus.Bonded);\n', '\n', '        Delegator storage del = delegators[msg.sender];\n', '\n', '        uint256 currentRound = roundsManager().currentRound();\n', '\n', '        // Transition to unbonding phase\n', '        del.withdrawRound = currentRound.add(unbondingPeriod);\n', "        // Decrease delegate's delegated amount\n", '        delegators[del.delegateAddress].delegatedAmount = delegators[del.delegateAddress].delegatedAmount.sub(del.bondedAmount);\n', '        // Update total bonded tokens\n', '        totalBonded = totalBonded.sub(del.bondedAmount);\n', '\n', '        if (transcoderStatus(msg.sender) == TranscoderStatus.Registered) {\n', '            // If caller is a registered transcoder, resign\n', '            // In the future, with partial unbonding there would be a check for 0 bonded stake as well\n', '            resignTranscoder(msg.sender);\n', '        } else if (transcoderStatus(del.delegateAddress) == TranscoderStatus.Registered) {\n', '            // If delegate is a registered transcoder, decrease its delegated stake\n', '            transcoderPool.updateKey(del.delegateAddress, transcoderPool.getKey(del.delegateAddress).sub(del.bondedAmount), address(0), address(0));\n', '        }\n', '\n', '        // Delegator no longer bonded to anyone\n', '        del.delegateAddress = address(0);\n', '        // Unbonding delegator does not have a start round\n', '        del.startRound = 0;\n', '\n', '        Unbond(del.delegateAddress, msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraws bonded stake to the caller after unbonding period.\n', '     */\n', '    function withdrawStake()\n', '        external\n', '        whenSystemNotPaused\n', '        currentRoundInitialized\n', '    {\n', '        // Delegator must be in the unbonded state\n', '        require(delegatorStatus(msg.sender) == DelegatorStatus.Unbonded);\n', '\n', '        uint256 amount = delegators[msg.sender].bondedAmount;\n', '        delegators[msg.sender].bondedAmount = 0;\n', '        delegators[msg.sender].withdrawRound = 0;\n', '\n', '        // Tell Minter to transfer stake (LPT) to the delegator\n', '        minter().trustedTransferTokens(msg.sender, amount);\n', '\n', '        WithdrawStake(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraws fees to the caller\n', '     */\n', '    function withdrawFees()\n', '        external\n', '        whenSystemNotPaused\n', '        currentRoundInitialized\n', '        autoClaimEarnings\n', '    {\n', '        // Delegator must have fees\n', '        require(delegators[msg.sender].fees > 0);\n', '\n', '        uint256 amount = delegators[msg.sender].fees;\n', '        delegators[msg.sender].fees = 0;\n', '\n', '        // Tell Minter to transfer fees (ETH) to the delegator\n', '        minter().trustedWithdrawETH(msg.sender, amount);\n', '\n', '        WithdrawFees(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Set active transcoder set for the current round\n', '     */\n', '    function setActiveTranscoders() external whenSystemNotPaused onlyRoundsManager {\n', '        uint256 currentRound = roundsManager().currentRound();\n', '        uint256 activeSetSize = Math.min256(numActiveTranscoders, transcoderPool.getSize());\n', '\n', '        uint256 totalStake = 0;\n', '        address currentTranscoder = transcoderPool.getFirst();\n', '\n', '        for (uint256 i = 0; i < activeSetSize; i++) {\n', '            activeTranscoderSet[currentRound].transcoders.push(currentTranscoder);\n', '            activeTranscoderSet[currentRound].isActive[currentTranscoder] = true;\n', '\n', '            uint256 stake = transcoderPool.getKey(currentTranscoder);\n', '            uint256 rewardCut = transcoders[currentTranscoder].pendingRewardCut;\n', '            uint256 feeShare = transcoders[currentTranscoder].pendingFeeShare;\n', '            uint256 pricePerSegment = transcoders[currentTranscoder].pendingPricePerSegment;\n', '\n', '            Transcoder storage t = transcoders[currentTranscoder];\n', '            // Set pending rates as current rates\n', '            t.rewardCut = rewardCut;\n', '            t.feeShare = feeShare;\n', '            t.pricePerSegment = pricePerSegment;\n', '            // Initialize token pool\n', '            t.earningsPoolPerRound[currentRound].init(stake, rewardCut, feeShare);\n', '\n', '            totalStake = totalStake.add(stake);\n', '\n', '            // Get next transcoder in the pool\n', '            currentTranscoder = transcoderPool.getNext(currentTranscoder);\n', '        }\n', '\n', '        // Update total stake of all active transcoders\n', '        activeTranscoderSet[currentRound].totalStake = totalStake;\n', '    }\n', '\n', '    /**\n', '     * @dev Distribute the token rewards to transcoder and delegates.\n', '     * Active transcoders call this once per cycle when it is their turn.\n', '     */\n', '    function reward() external whenSystemNotPaused currentRoundInitialized {\n', '        uint256 currentRound = roundsManager().currentRound();\n', '\n', '        // Sender must be an active transcoder\n', '        require(activeTranscoderSet[currentRound].isActive[msg.sender]);\n', '\n', '        // Transcoder must not have called reward for this round already\n', '        require(transcoders[msg.sender].lastRewardRound != currentRound);\n', '        // Set last round that transcoder called reward\n', '        transcoders[msg.sender].lastRewardRound = currentRound;\n', '\n', "        // Create reward based on active transcoder's stake relative to the total active stake\n", '        // rewardTokens = (current mintable tokens for the round * active transcoder stake) / total active stake\n', '        uint256 rewardTokens = minter().createReward(activeTranscoderTotalStake(msg.sender, currentRound), activeTranscoderSet[currentRound].totalStake);\n', '\n', '        updateTranscoderWithRewards(msg.sender, rewardTokens, currentRound);\n', '\n', '        Reward(msg.sender, rewardTokens);\n', '    }\n', '\n', '    /**\n', "     * @dev Update transcoder's fee pool\n", '     * @param _transcoder Transcoder address\n', '     * @param _fees Fees from verified job claims\n', '     */\n', '    function updateTranscoderWithFees(\n', '        address _transcoder,\n', '        uint256 _fees,\n', '        uint256 _round\n', '    )\n', '        external\n', '        whenSystemNotPaused\n', '        onlyJobsManager\n', '    {\n', '        // Transcoder must be registered\n', '        require(transcoderStatus(_transcoder) == TranscoderStatus.Registered);\n', '\n', '        Transcoder storage t = transcoders[_transcoder];\n', '\n', '        EarningsPool.Data storage earningsPool = t.earningsPoolPerRound[_round];\n', '        // Add fees to fee pool\n', '        earningsPool.feePool = earningsPool.feePool.add(_fees);\n', '    }\n', '\n', '    /**\n', '     * @dev Slash a transcoder. Slashing can be invoked by the protocol or a finder.\n', '     * @param _transcoder Transcoder address\n', '     * @param _finder Finder that proved a transcoder violated a slashing condition. Null address if there is no finder\n', '     * @param _slashAmount Percentage of transcoder bond to be slashed\n', '     * @param _finderFee Percentage of penalty awarded to finder. Zero if there is no finder\n', '     */\n', '    function slashTranscoder(\n', '        address _transcoder,\n', '        address _finder,\n', '        uint256 _slashAmount,\n', '        uint256 _finderFee\n', '    )\n', '        external\n', '        whenSystemNotPaused\n', '        onlyJobsManager\n', '    {\n', '        Delegator storage del = delegators[_transcoder];\n', '\n', '        if (del.bondedAmount > 0) {\n', '            uint256 penalty = MathUtils.percOf(delegators[_transcoder].bondedAmount, _slashAmount);\n', '\n', '            // Decrease bonded stake\n', '            del.bondedAmount = del.bondedAmount.sub(penalty);\n', '\n', '            // If still bonded\n', "            // - Decrease delegate's delegated amount\n", '            // - Decrease total bonded tokens\n', '            if (delegatorStatus(_transcoder) == DelegatorStatus.Bonded) {\n', '                delegators[del.delegateAddress].delegatedAmount = delegators[del.delegateAddress].delegatedAmount.sub(penalty);\n', '                totalBonded = totalBonded.sub(penalty);\n', '            }\n', '\n', '            // If registered transcoder, resign it\n', '            if (transcoderStatus(_transcoder) == TranscoderStatus.Registered) {\n', '                resignTranscoder(_transcoder);\n', '            }\n', '\n', '            // Account for penalty\n', '            uint256 burnAmount = penalty;\n', '\n', '            // Award finder fee if there is a finder address\n', '            if (_finder != address(0)) {\n', '                uint256 finderAmount = MathUtils.percOf(penalty, _finderFee);\n', '                minter().trustedTransferTokens(_finder, finderAmount);\n', '\n', '                // Minter burns the slashed funds - finder reward\n', '                minter().trustedBurnTokens(burnAmount.sub(finderAmount));\n', '\n', '                TranscoderSlashed(_transcoder, _finder, penalty, finderAmount);\n', '            } else {\n', '                // Minter burns the slashed funds\n', '                minter().trustedBurnTokens(burnAmount);\n', '\n', '                TranscoderSlashed(_transcoder, address(0), penalty, 0);\n', '            }\n', '        } else {\n', '            TranscoderSlashed(_transcoder, _finder, 0, 0);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Pseudorandomly elect a currently active transcoder that charges a price per segment less than or equal to the max price per segment for a job\n', '     * Returns address of elected active transcoder and its price per segment\n', '     * @param _maxPricePerSegment Max price (in LPT base units) per segment of a stream\n', '     * @param _blockHash Job creation block hash used as a pseudorandom seed for assigning an active transcoder\n', '     * @param _round Job creation round\n', '     */\n', '    function electActiveTranscoder(uint256 _maxPricePerSegment, bytes32 _blockHash, uint256 _round) external view returns (address) {\n', '        uint256 activeSetSize = activeTranscoderSet[_round].transcoders.length;\n', '        // Create array to store available transcoders charging an acceptable price per segment\n', '        address[] memory availableTranscoders = new address[](activeSetSize);\n', '        // Keep track of the actual number of available transcoders\n', '        uint256 numAvailableTranscoders = 0;\n', '        // Keep track of total stake of available transcoders\n', '        uint256 totalAvailableTranscoderStake = 0;\n', '\n', '        for (uint256 i = 0; i < activeSetSize; i++) {\n', '            address activeTranscoder = activeTranscoderSet[_round].transcoders[i];\n', '            // If a transcoder is active and charges an acceptable price per segment add it to the array of available transcoders\n', '            if (activeTranscoderSet[_round].isActive[activeTranscoder] && transcoders[activeTranscoder].pricePerSegment <= _maxPricePerSegment) {\n', '                availableTranscoders[numAvailableTranscoders] = activeTranscoder;\n', '                numAvailableTranscoders++;\n', '                totalAvailableTranscoderStake = totalAvailableTranscoderStake.add(activeTranscoderTotalStake(activeTranscoder, _round));\n', '            }\n', '        }\n', '\n', '        if (numAvailableTranscoders == 0) {\n', '            // There is no currently available transcoder that charges a price per segment less than or equal to the max price per segment for a job\n', '            return address(0);\n', '        } else {\n', '            // Pseudorandomly pick an available transcoder weighted by its stake relative to the total stake of all available transcoders\n', '            uint256 r = uint256(_blockHash) % totalAvailableTranscoderStake;\n', '            uint256 s = 0;\n', '            uint256 j = 0;\n', '\n', '            while (s <= r && j < numAvailableTranscoders) {\n', '                s = s.add(activeTranscoderTotalStake(availableTranscoders[j], _round));\n', '                j++;\n', '            }\n', '\n', '            return availableTranscoders[j - 1];\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Claim token pools shares for a delegator from its lastClaimRound through the end round\n', '     * @param _endRound The last round for which to claim token pools shares for a delegator\n', '     */\n', '    function claimEarnings(uint256 _endRound) external whenSystemNotPaused currentRoundInitialized {\n', '        // End round must be after the last claim round\n', '        require(delegators[msg.sender].lastClaimRound < _endRound);\n', '        // End round must not be after the current round\n', '        require(_endRound <= roundsManager().currentRound());\n', '\n', '        updateDelegatorWithEarnings(msg.sender, _endRound);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns pending bonded stake for a delegator from its lastClaimRound through an end round\n', '     * @param _delegator Address of delegator\n', '     * @param _endRound The last round to compute pending stake from\n', '     */\n', '    function pendingStake(address _delegator, uint256 _endRound) public view returns (uint256) {\n', '        uint256 currentRound = roundsManager().currentRound();\n', '        Delegator storage del = delegators[_delegator];\n', '        // End round must be before or equal to current round and after lastClaimRound\n', '        require(_endRound <= currentRound && _endRound > del.lastClaimRound);\n', '\n', '        uint256 currentBondedAmount = del.bondedAmount;\n', '\n', '        for (uint256 i = del.lastClaimRound + 1; i <= _endRound; i++) {\n', '            EarningsPool.Data storage earningsPool = transcoders[del.delegateAddress].earningsPoolPerRound[i];\n', '\n', '            bool isTranscoder = _delegator == del.delegateAddress;\n', '            if (earningsPool.hasClaimableShares()) {\n', '                // Calculate and add reward pool share from this round\n', '                currentBondedAmount = currentBondedAmount.add(earningsPool.rewardPoolShare(currentBondedAmount, isTranscoder));\n', '            }\n', '        }\n', '\n', '        return currentBondedAmount;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns pending fees for a delegator from its lastClaimRound through an end round\n', '     * @param _delegator Address of delegator\n', '     * @param _endRound The last round to compute pending fees from\n', '     */\n', '    function pendingFees(address _delegator, uint256 _endRound) public view returns (uint256) {\n', '        uint256 currentRound = roundsManager().currentRound();\n', '        Delegator storage del = delegators[_delegator];\n', '        // End round must be before or equal to current round and after lastClaimRound\n', '        require(_endRound <= currentRound && _endRound > del.lastClaimRound);\n', '\n', '        uint256 currentFees = del.fees;\n', '        uint256 currentBondedAmount = del.bondedAmount;\n', '\n', '        for (uint256 i = del.lastClaimRound + 1; i <= _endRound; i++) {\n', '            EarningsPool.Data storage earningsPool = transcoders[del.delegateAddress].earningsPoolPerRound[i];\n', '\n', '            if (earningsPool.hasClaimableShares()) {\n', '                bool isTranscoder = _delegator == del.delegateAddress;\n', '                // Calculate and add fee pool share from this round\n', '                currentFees = currentFees.add(earningsPool.feePoolShare(currentBondedAmount, isTranscoder));\n', '                // Calculate new bonded amount with rewards from this round. Updated bonded amount used\n', '                // to calculate fee pool share in next round\n', '                currentBondedAmount = currentBondedAmount.add(earningsPool.rewardPoolShare(currentBondedAmount, isTranscoder));\n', '            }\n', '        }\n', '\n', '        return currentFees;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns total bonded stake for an active transcoder\n', '     * @param _transcoder Address of a transcoder\n', '     */\n', '    function activeTranscoderTotalStake(address _transcoder, uint256 _round) public view returns (uint256) {\n', '        // Must be active transcoder\n', '        require(activeTranscoderSet[_round].isActive[_transcoder]);\n', '\n', '        return transcoders[_transcoder].earningsPoolPerRound[_round].totalStake;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns total bonded stake for a transcoder\n', '     * @param _transcoder Address of transcoder\n', '     */\n', '    function transcoderTotalStake(address _transcoder) public view returns (uint256) {\n', '        return transcoderPool.getKey(_transcoder);\n', '    }\n', '\n', '    /*\n', '     * @dev Computes transcoder status\n', '     * @param _transcoder Address of transcoder\n', '     */\n', '    function transcoderStatus(address _transcoder) public view returns (TranscoderStatus) {\n', '        if (transcoderPool.contains(_transcoder)) {\n', '            return TranscoderStatus.Registered;\n', '        } else {\n', '            return TranscoderStatus.NotRegistered;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Computes delegator status\n', '     * @param _delegator Address of delegator\n', '     */\n', '    function delegatorStatus(address _delegator) public view returns (DelegatorStatus) {\n', '        Delegator storage del = delegators[_delegator];\n', '\n', '        if (del.withdrawRound > 0) {\n', '            // Delegator called unbond\n', '            if (roundsManager().currentRound() >= del.withdrawRound) {\n', '                return DelegatorStatus.Unbonded;\n', '            } else {\n', '                return DelegatorStatus.Unbonding;\n', '            }\n', '        } else if (del.startRound > roundsManager().currentRound()) {\n', '            // Delegator round start is in the future\n', '            return DelegatorStatus.Pending;\n', '        } else if (del.startRound > 0 && del.startRound <= roundsManager().currentRound()) {\n', '            // Delegator round start is now or in the past\n', '            return DelegatorStatus.Bonded;\n', '        } else {\n', '            // Default to unbonded\n', '            return DelegatorStatus.Unbonded;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Return transcoder information\n', '     * @param _transcoder Address of transcoder\n', '     */\n', '    function getTranscoder(\n', '        address _transcoder\n', '    )\n', '        public\n', '        view\n', '        returns (uint256 lastRewardRound, uint256 rewardCut, uint256 feeShare, uint256 pricePerSegment, uint256 pendingRewardCut, uint256 pendingFeeShare, uint256 pendingPricePerSegment)\n', '    {\n', '        Transcoder storage t = transcoders[_transcoder];\n', '\n', '        lastRewardRound = t.lastRewardRound;\n', '        rewardCut = t.rewardCut;\n', '        feeShare = t.feeShare;\n', '        pricePerSegment = t.pricePerSegment;\n', '        pendingRewardCut = t.pendingRewardCut;\n', '        pendingFeeShare = t.pendingFeeShare;\n', '        pendingPricePerSegment = t.pendingPricePerSegment;\n', '    }\n', '\n', '    /**\n', "     * @dev Return transcoder's token pools for a given round\n", '     * @param _transcoder Address of transcoder\n', '     * @param _round Round number\n', '     */\n', '    function getTranscoderEarningsPoolForRound(\n', '        address _transcoder,\n', '        uint256 _round\n', '    )\n', '        public\n', '        view\n', '        returns (uint256 rewardPool, uint256 feePool, uint256 totalStake, uint256 claimableStake)\n', '    {\n', '        EarningsPool.Data storage earningsPool = transcoders[_transcoder].earningsPoolPerRound[_round];\n', '\n', '        rewardPool = earningsPool.rewardPool;\n', '        feePool = earningsPool.feePool;\n', '        totalStake = earningsPool.totalStake;\n', '        claimableStake = earningsPool.claimableStake;\n', '    }\n', '\n', '    /**\n', '     * @dev Return delegator info\n', '     * @param _delegator Address of delegator\n', '     */\n', '    function getDelegator(\n', '        address _delegator\n', '    )\n', '        public\n', '        view\n', '        returns (uint256 bondedAmount, uint256 fees, address delegateAddress, uint256 delegatedAmount, uint256 startRound, uint256 withdrawRound, uint256 lastClaimRound)\n', '    {\n', '        Delegator storage del = delegators[_delegator];\n', '\n', '        bondedAmount = del.bondedAmount;\n', '        fees = del.fees;\n', '        delegateAddress = del.delegateAddress;\n', '        delegatedAmount = del.delegatedAmount;\n', '        startRound = del.startRound;\n', '        withdrawRound = del.withdrawRound;\n', '        lastClaimRound = del.lastClaimRound;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns max size of transcoder pool\n', '     */\n', '    function getTranscoderPoolMaxSize() public view returns (uint256) {\n', '        return transcoderPool.getMaxSize();\n', '    }\n', '\n', '    /**\n', '     * @dev Returns size of transcoder pool\n', '     */\n', '    function getTranscoderPoolSize() public view returns (uint256) {\n', '        return transcoderPool.getSize();\n', '    }\n', '\n', '    /**\n', '     * @dev Returns transcoder with most stake in pool\n', '     */\n', '    function getFirstTranscoderInPool() public view returns (address) {\n', '        return transcoderPool.getFirst();\n', '    }\n', '\n', '    /**\n', '     * @dev Returns next transcoder in pool for a given transcoder\n', '     * @param _transcoder Address of a transcoder in the pool\n', '     */\n', '    function getNextTranscoderInPool(address _transcoder) public view returns (address) {\n', '        return transcoderPool.getNext(_transcoder);\n', '    }\n', '\n', '    /**\n', '     * @dev Return total bonded tokens\n', '     */\n', '    function getTotalBonded() public view returns (uint256) {\n', '        return totalBonded;\n', '    }\n', '\n', '    /**\n', '     * @dev Return total active stake for a round\n', '     * @param _round Round number\n', '     */\n', '    function getTotalActiveStake(uint256 _round) public view returns (uint256) {\n', '        return activeTranscoderSet[_round].totalStake;\n', '    }\n', '\n', '    /**\n', '     * @dev Return whether a transcoder was active during a round\n', '     * @param _transcoder Transcoder address\n', '     * @param _round Round number\n', '     */\n', '    function isActiveTranscoder(address _transcoder, uint256 _round) public view returns (bool) {\n', '        return activeTranscoderSet[_round].isActive[_transcoder];\n', '    }\n', '\n', '    /**\n', '     * @dev Return whether a transcoder is registered\n', '     * @param _transcoder Transcoder address\n', '     */\n', '    function isRegisteredTranscoder(address _transcoder) public view returns (bool) {\n', '        return transcoderStatus(_transcoder) == TranscoderStatus.Registered;\n', '    }\n', '\n', '    /**\n', '     * @dev Remove transcoder\n', '     */\n', '    function resignTranscoder(address _transcoder) internal {\n', '        uint256 currentRound = roundsManager().currentRound();\n', '        if (activeTranscoderSet[currentRound].isActive[_transcoder]) {\n', '            // Decrease total active stake for the round\n', '            activeTranscoderSet[currentRound].totalStake = activeTranscoderSet[currentRound].totalStake.sub(activeTranscoderTotalStake(_transcoder, currentRound));\n', '            // Set transcoder as inactive\n', '            activeTranscoderSet[currentRound].isActive[_transcoder] = false;\n', '        }\n', '\n', '        // Remove transcoder from pools\n', '        transcoderPool.remove(_transcoder);\n', '\n', '        TranscoderResigned(_transcoder);\n', '    }\n', '\n', '    /**\n', '     * @dev Update a transcoder with rewards\n', '     * @param _transcoder Address of transcoder\n', '     * @param _rewards Amount of rewards\n', '     * @param _round Round that transcoder is updated\n', '     */\n', '    function updateTranscoderWithRewards(address _transcoder, uint256 _rewards, uint256 _round) internal {\n', '        Transcoder storage t = transcoders[_transcoder];\n', '        Delegator storage del = delegators[_transcoder];\n', '\n', '        EarningsPool.Data storage earningsPool = t.earningsPoolPerRound[_round];\n', '        // Add rewards to reward pool\n', '        earningsPool.rewardPool = earningsPool.rewardPool.add(_rewards);\n', "        // Update transcoder's delegated amount with rewards\n", '        del.delegatedAmount = del.delegatedAmount.add(_rewards);\n', "        // Update transcoder's total stake with rewards\n", '        uint256 newStake = transcoderPool.getKey(_transcoder).add(_rewards);\n', '        transcoderPool.updateKey(_transcoder, newStake, address(0), address(0));\n', '        // Update total bonded tokens with claimable rewards\n', '        totalBonded = totalBonded.add(_rewards);\n', '    }\n', '\n', '    /**\n', '     * @dev Update a delegator with token pools shares from its lastClaimRound through a given round\n', '     * @param _delegator Delegator address\n', "     * @param _endRound The last round for which to update a delegator's stake with token pools shares\n", '     */\n', '    function updateDelegatorWithEarnings(address _delegator, uint256 _endRound) internal {\n', '        Delegator storage del = delegators[_delegator];\n', '\n', '        // Only will have earnings to claim if you have a delegate\n', '        // If not delegated, skip the earnings claim process\n', '        if (del.delegateAddress != address(0)) {\n', '            // Cannot claim earnings for more than maxEarningsClaimsRounds\n', '            // This is a number to cause transactions to fail early if\n', '            // we know they will require too much gas to loop through all the necessary rounds to claim earnings\n', '            // The user should instead manually invoke `claimEarnings` to split up the claiming process\n', '            // across multiple transactions\n', '            require(_endRound.sub(del.lastClaimRound) <= maxEarningsClaimsRounds);\n', '\n', '            uint256 currentBondedAmount = del.bondedAmount;\n', '            uint256 currentFees = del.fees;\n', '\n', '            for (uint256 i = del.lastClaimRound + 1; i <= _endRound; i++) {\n', '                EarningsPool.Data storage earningsPool = transcoders[del.delegateAddress].earningsPoolPerRound[i];\n', '\n', '                if (earningsPool.hasClaimableShares()) {\n', '                    bool isTranscoder = _delegator == del.delegateAddress;\n', '\n', '                    var (fees, rewards) = earningsPool.claimShare(currentBondedAmount, isTranscoder);\n', '\n', '                    currentFees = currentFees.add(fees);\n', '                    currentBondedAmount = currentBondedAmount.add(rewards);\n', '                }\n', '            }\n', '\n', '            // Rewards are bonded by default\n', '            del.bondedAmount = currentBondedAmount;\n', '            del.fees = currentFees;\n', '        }\n', '\n', '        del.lastClaimRound = _endRound;\n', '    }\n', '\n', '    /**\n', '     * @dev Return LivepeerToken interface\n', '     */\n', '    function livepeerToken() internal view returns (ILivepeerToken) {\n', '        return ILivepeerToken(controller.getContract(keccak256("LivepeerToken")));\n', '    }\n', '\n', '    /**\n', '     * @dev Return Minter interface\n', '     */\n', '    function minter() internal view returns (IMinter) {\n', '        return IMinter(controller.getContract(keccak256("Minter")));\n', '    }\n', '\n', '    /**\n', '     * @dev Return RoundsManager interface\n', '     */\n', '    function roundsManager() internal view returns (IRoundsManager) {\n', '        return IRoundsManager(controller.getContract(keccak256("RoundsManager")));\n', '    }\n', '}']