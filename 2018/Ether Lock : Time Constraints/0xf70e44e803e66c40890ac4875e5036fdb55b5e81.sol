['pragma solidity ^0.4.18;\n', '\n', '// zeppelin-solidity@1.8.0 from NPM\n', '\n', 'contract DataCenterInterface {\n', '  function getResult(bytes32 gameId) view public returns (uint16, uint16, uint8);\n', '}\n', '\n', 'contract DataCenterAddrResolverInterface {\n', '  function getAddress() public returns (address _addr);\n', '}\n', '\n', 'contract DataCenterBridge {\n', '  uint8 constant networkID_auto = 0;\n', '  uint8 constant networkID_mainnet = 1;\n', '  uint8 constant networkID_testnet = 3;\n', '  string public networkName;\n', '\n', '  address public mainnetAddr = 0x6690E2698Bfa407DB697E69a11eA56810454549b;\n', '  address public testnetAddr = 0x282b192518fc09568de0E66Df8e2533f88C16672;\n', '\n', '  DataCenterAddrResolverInterface DAR;\n', '\n', '  DataCenterInterface dataCenter;\n', '\n', '  modifier dataCenterAPI() {\n', '    if((address(DAR) == 0) || (getCodeSize(address(DAR)) == 0))\n', '      setNetwork(networkID_auto);\n', '    if(address(dataCenter) != DAR.getAddress())\n', '      dataCenter = DataCenterInterface(DAR.getAddress());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev set network will indicate which net will be used\n', '   * @notice comment out `networkID` to avoid &#39;unused parameter&#39; warning\n', '   */\n', '  function setNetwork(uint8 /*networkID*/) internal returns(bool){\n', '    return setNetwork();\n', '  }\n', '\n', '  function setNetwork() internal returns(bool){\n', '    if (getCodeSize(mainnetAddr) > 0) {\n', '      DAR = DataCenterAddrResolverInterface(mainnetAddr);\n', '      setNetworkName("eth_mainnet");\n', '      return true;\n', '    }\n', '    if (getCodeSize(testnetAddr) > 0) {\n', '      DAR = DataCenterAddrResolverInterface(testnetAddr);\n', '      setNetworkName("eth_ropsten");\n', '      return true;\n', '    }\n', '    return false;\n', '  }\n', '\n', '  function setNetworkName(string _networkName) internal {\n', '    networkName = _networkName;\n', '  }\n', '\n', '  function getNetworkName() internal view returns (string) {\n', '    return networkName;\n', '  }\n', '\n', '  function dataCenterGetResult(bytes32 _gameId) dataCenterAPI internal returns (uint16, uint16, uint8){\n', '    return dataCenter.getResult(_gameId);\n', '  }\n', '\n', '  function getCodeSize(address _addr) view internal returns (uint _size) {\n', '    assembly {\n', '      _size := extcodesize(_addr)\n', '    }\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Bet is Ownable, DataCenterBridge {\n', '  using SafeMath for uint;\n', '\n', '  event LogDistributeReward(address indexed addr, uint reward, uint index);\n', '  event LogGameResult(bytes32 indexed category, bytes32 indexed gameId, uint leftPts, uint rightPts);\n', '  event LogParticipant(address indexed addr, uint choice, uint betAmount);\n', '  event LogRefund(address indexed addr, uint betAmount);\n', '  event LogBetClosed(bool isRefund, uint timestamp);\n', '  event LogDealerWithdraw(address indexed addr, uint withdrawAmount);\n', '\n', '  /** \n', '   * @desc\n', '   * gameId: is a fixed string just like "0021701030"\n', '   *   the full gameId encode(include football, basketball, esports..) will publish on github\n', '   * leftOdds: need divide 100, if odds is 216 means 2.16\n', '   * middleOdds: need divide 100, if odds is 175 means 1.75\n', '   * rightOdds: need divide 100, if odds is 250 means 2.50\n', '   * spread: need sub 0.5, if spread is 1 means 0.5, 0 means no spread\n', '   * flag: indicate which team get spread, 1 means leftTeam, 3 means rightTeam\n', '   */\n', '  struct BetInfo {\n', '    bytes32 category;\n', '    bytes32 gameId;\n', '    uint8   spread;\n', '    uint8   flag;\n', '    uint16  leftOdds;\n', '    uint16  middleOdds;\n', '    uint16  rightOdds;\n', '    uint    minimumBet;\n', '    uint    startTime;\n', '    uint    deposit;\n', '    address dealer;\n', '  }\n', '\n', '  struct Player {\n', '    uint betAmount;\n', '    uint choice;\n', '  }\n', '\n', '  /**\n', '   * @desc\n', '   * winChoice: Indicate the winner choice of this betting\n', '   *   1 means leftTeam win, 3 means rightTeam win, 2 means draw(leftTeam is not always equivalent to the home team)\n', '   */\n', '  uint8 public winChoice;\n', '  uint8 public confirmations = 0;\n', '  uint8 public neededConfirmations = 1;\n', '  uint16 public leftPts;\n', '  uint16 public rightPts;\n', '  bool public isBetClosed = false;\n', '\n', '  uint public totalBetAmount = 0;\n', '  uint public leftAmount;\n', '  uint public middleAmount;\n', '  uint public rightAmount;\n', '  uint public numberOfBet;\n', '\n', '  address [] public players;\n', '  mapping(address => Player) public playerInfo;\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the dealer\n', '   */\n', '  modifier onlyDealer() {\n', '    require(msg.sender == betInfo.dealer);\n', '    _;\n', '  }\n', '\n', '  function() payable public {}\n', '\n', '  BetInfo betInfo;\n', '\n', '  function Bet(address _dealer, bytes32 _category, bytes32 _gameId, uint _minimumBet, \n', '                  uint8 _spread, uint16 _leftOdds, uint16 _middleOdds, uint16 _rightOdds, uint8 _flag,\n', '                  uint _startTime, uint8 _neededConfirmations, address _owner) payable public {\n', '    require(_flag == 1 || _flag == 3);\n', '    require(_startTime > now);\n', '    require(msg.value >= 0.1 ether);\n', '    require(_neededConfirmations >= neededConfirmations);\n', '\n', '    betInfo.dealer = _dealer;\n', '    betInfo.deposit = msg.value;\n', '    betInfo.flag = _flag;\n', '    betInfo.category = _category;\n', '    betInfo.gameId = _gameId;\n', '    betInfo.minimumBet = _minimumBet;\n', '    betInfo.spread = _spread;\n', '    betInfo.leftOdds = _leftOdds;\n', '    betInfo.middleOdds = _middleOdds;\n', '    betInfo.rightOdds = _rightOdds;\n', '    betInfo.startTime = _startTime;\n', '\n', '    neededConfirmations = _neededConfirmations;\n', '    owner = _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev get basic information of this bet\n', '   */\n', '  function getBetInfo() public view returns (bytes32, bytes32, uint8, uint8, uint16, uint16, uint16, uint, uint, uint, address) {\n', '    return (betInfo.category, betInfo.gameId, betInfo.spread, betInfo.flag, betInfo.leftOdds, betInfo.middleOdds,\n', '            betInfo.rightOdds, betInfo.minimumBet, betInfo.startTime, betInfo.deposit, betInfo.dealer);\n', '  }\n', '\n', '  /**\n', '   * @dev get basic information of this bet\n', '   *\n', '   *  uint public numberOfBet;\n', '   *  uint public totalBetAmount = 0;\n', '   *  uint public leftAmount;\n', '   *  uint public middleAmount;\n', '   *  uint public rightAmount;\n', '   *  uint public deposit;\n', '   */\n', '  function getBetMutableData() public view returns (uint, uint, uint, uint, uint, uint) {\n', '    return (numberOfBet, totalBetAmount, leftAmount, middleAmount, rightAmount, betInfo.deposit);\n', '  }\n', '\n', '  /**\n', '   * @dev get bet result information\n', '   *\n', '   *  uint8 public winChoice;\n', '   *  uint8 public confirmations = 0;\n', '   *  uint8 public neededConfirmations = 1;\n', '   *  uint16 public leftPts;\n', '   *  uint16 public rightPts;\n', '   *  bool public isBetClosed = false;\n', '   */\n', '  function getBetResult() public view returns (uint8, uint8, uint8, uint16, uint16, bool) {\n', '    return (winChoice, confirmations, neededConfirmations, leftPts, rightPts, isBetClosed);\n', '  }\n', '\n', '  /**\n', '   * @dev calculate the gas whichdistribute rewards will cost\n', '   * set default gasPrice is 5000000000\n', '   */\n', '  function getRefundTxFee() public view returns (uint) {\n', '    return numberOfBet.mul(5000000000 * 21000);\n', '  }\n', '\n', '  /**\n', '   * @dev find a player has participanted or not\n', '   * @param player the address of the participant\n', '   */\n', '  function checkPlayerExists(address player) public view returns (bool) {\n', '    if (playerInfo[player].choice == 0) {\n', '      return false;\n', '    }\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev to check the dealer is solvent or not\n', '   * @param choice indicate which team user choose\n', '   * @param amount indicate how many ether user bet\n', '   */\n', '  function isSolvent(uint choice, uint amount) internal view returns (bool) {\n', '    uint needAmount;\n', '    if (choice == 1) {\n', '      needAmount = (leftAmount.add(amount)).mul(betInfo.leftOdds).div(100);\n', '    } else if (choice == 2) {\n', '      needAmount = (middleAmount.add(amount)).mul(betInfo.middleOdds).div(100);\n', '    } else {\n', '      needAmount = (rightAmount.add(amount)).mul(betInfo.rightOdds).div(100);\n', '    }\n', '\n', '    if (needAmount.add(getRefundTxFee()) > totalBetAmount.add(amount).add(betInfo.deposit)) {\n', '      return false;\n', '    } else {\n', '      return true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev update this bet some state\n', '   * @param choice indicate which team user choose\n', '   * @param amount indicate how many ether user bet\n', '   */\n', '  function updateAmountOfEachChoice(uint choice, uint amount) internal {\n', '    if (choice == 1) {\n', '      leftAmount = leftAmount.add(amount);\n', '    } else if (choice == 2) {\n', '      middleAmount = middleAmount.add(amount);\n', '    } else {\n', '      rightAmount = rightAmount.add(amount);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev place a bet with his/her choice\n', '   * @param choice indicate which team user choose\n', '   */\n', '  function placeBet(uint choice) public payable {\n', '    require(now < betInfo.startTime);\n', '    require(choice == 1 ||  choice == 2 || choice == 3);\n', '    require(msg.value >= betInfo.minimumBet);\n', '    require(!checkPlayerExists(msg.sender));\n', '\n', '    if (!isSolvent(choice, msg.value)) {\n', '      revert();\n', '    }\n', '\n', '    playerInfo[msg.sender].betAmount = msg.value;\n', '    playerInfo[msg.sender].choice = choice;\n', '\n', '    totalBetAmount = totalBetAmount.add(msg.value);\n', '    numberOfBet = numberOfBet.add(1);\n', '    updateAmountOfEachChoice(choice, msg.value);\n', '    players.push(msg.sender);\n', '    LogParticipant(msg.sender, choice, msg.value);\n', '  }\n', '\n', '  /**\n', '   * @dev in order to let more people participant, dealer can recharge\n', '   */\n', '  function rechargeDeposit() public payable {\n', '    require(msg.value >= betInfo.minimumBet);\n', '    betInfo.deposit = betInfo.deposit.add(msg.value);\n', '  }\n', '\n', '  /**\n', '   * @dev given game result, _return win choice by specific spread\n', '   */\n', '  function getWinChoice(uint _leftPts, uint _rightPts) public view returns (uint8) {\n', '    uint8 _winChoice;\n', '    if (betInfo.spread == 0) {\n', '      if (_leftPts > _rightPts) {\n', '        _winChoice = 1;\n', '      } else if (_leftPts == _rightPts) {\n', '        _winChoice = 2;\n', '      } else {\n', '        _winChoice = 3;\n', '      }\n', '    } else {\n', '      if (betInfo.flag == 1) {\n', '        if (_leftPts + betInfo.spread > _rightPts) {\n', '          _winChoice = 1;\n', '        } else {\n', '          _winChoice = 3;\n', '        }\n', '      } else {\n', '        if (_rightPts + betInfo.spread > _leftPts) {\n', '          _winChoice = 3;\n', '        } else {\n', '          _winChoice = 1;\n', '        }\n', '      }\n', '    }\n', '    return _winChoice;\n', '  }\n', '\n', '  /**\n', '   * @dev manualCloseBet could only be called by owner,\n', '   *      this method only be used for ropsten,\n', '   *      when ethereum-events-data deployed,\n', '   *      game result should not be upload by owner\n', '   */\n', '  function manualCloseBet(uint16 _leftPts, uint16 _rightPts) onlyOwner external {\n', '    require(!isBetClosed);\n', '    leftPts = _leftPts;\n', '    rightPts = _rightPts;\n', '\n', '    LogGameResult(betInfo.category, betInfo.gameId, leftPts, rightPts);\n', '\n', '    winChoice = getWinChoice(leftPts, rightPts);\n', '\n', '    if (winChoice == 1) {\n', '      distributeReward(betInfo.leftOdds);\n', '    } else if (winChoice == 2) {\n', '      distributeReward(betInfo.middleOdds);\n', '    } else {\n', '      distributeReward(betInfo.rightOdds);\n', '    }\n', '\n', '    isBetClosed = true;\n', '    LogBetClosed(false, now);\n', '    withdraw();\n', '  }\n', '\n', '  /**\n', '   * @dev closeBet could be called by everyone, but owner/dealer should to this.\n', '   */\n', '  function closeBet() external {\n', '    require(!isBetClosed);\n', '    (leftPts, rightPts, confirmations) = dataCenterGetResult(betInfo.gameId);\n', '\n', '    require(confirmations >= neededConfirmations);\n', '\n', '    LogGameResult(betInfo.category, betInfo.gameId, leftPts, rightPts);\n', '\n', '    winChoice = getWinChoice(leftPts, rightPts);\n', '\n', '    if (winChoice == 1) {\n', '      distributeReward(betInfo.leftOdds);\n', '    } else if (winChoice == 2) {\n', '      distributeReward(betInfo.middleOdds);\n', '    } else {\n', '      distributeReward(betInfo.rightOdds);\n', '    }\n', '\n', '    isBetClosed = true;\n', '    LogBetClosed(false, now);\n', '    withdraw();\n', '  }\n', '\n', '  /**\n', '   * @dev get the players\n', '   */\n', '  function getPlayers() view public returns (address[]) {\n', '    return players;\n', '  }\n', '\n', '  /**\n', '   * @dev get contract balance\n', '   */\n', '  function getBalance() view public returns (uint) {\n', '    return address(this).balance;\n', '  }\n', '\n', '  /**\n', '   * @dev if there are some reasons lead game postpone or cancel\n', '   *      the bet will also cancel and refund every bet\n', '   */\n', '  function refund() onlyOwner public {\n', '    for (uint i = 0; i < players.length; i++) {\n', '      players[i].transfer(playerInfo[players[i]].betAmount);\n', '      LogRefund(players[i], playerInfo[players[i]].betAmount);\n', '    }\n', '\n', '    isBetClosed = true;\n', '    LogBetClosed(true, now);\n', '    withdraw();\n', '  }\n', '\n', '  /**\n', '   * @dev dealer can withdraw the remain ether after refund or closed\n', '   */\n', '  function withdraw() internal {\n', '    require(isBetClosed);\n', '    uint _balance = address(this).balance;\n', '    betInfo.dealer.transfer(_balance);\n', '    LogDealerWithdraw(betInfo.dealer, _balance);\n', '  }\n', '\n', '  /**\n', '   * @dev distribute ether to every winner as they choosed odds\n', '   */\n', '  function distributeReward(uint winOdds) internal {\n', '    for (uint i = 0; i < players.length; i++) {\n', '      if (playerInfo[players[i]].choice == winChoice) {\n', '        players[i].transfer(winOdds.mul(playerInfo[players[i]].betAmount).div(100));\n', '        LogDistributeReward(players[i], winOdds.mul(playerInfo[players[i]].betAmount).div(100), i);\n', '      }\n', '    }\n', '  }\n', '}\n', '\n', 'contract BetCenter is Ownable {\n', '\n', '  event LogCreateBet(uint indexed startTime, uint indexed spreadTag, bytes32 indexed category, uint deposit, address bet, bytes32 gameId);\n', '\n', '  function() payable public {}\n', '\n', '  function createBet(bytes32 category, bytes32 gameId, uint minimumBet, \n', '                  uint8 spread, uint16 leftOdds, uint16 middleOdds, uint16 rightOdds, uint8 flag,\n', '                  uint startTime, uint8 confirmations) payable public {\n', '    Bet bet = (new Bet).value(msg.value)(msg.sender, category, gameId, minimumBet, \n', '                  spread, leftOdds, middleOdds, rightOdds , flag, startTime, confirmations, owner);\n', '    if (spread == 0) {\n', '      LogCreateBet(startTime, 0, category, msg.value, bet, gameId);\n', '    } else {\n', '      LogCreateBet(startTime, 1, category, msg.value, bet, gameId);\n', '    }\n', '  }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// zeppelin-solidity@1.8.0 from NPM\n', '\n', 'contract DataCenterInterface {\n', '  function getResult(bytes32 gameId) view public returns (uint16, uint16, uint8);\n', '}\n', '\n', 'contract DataCenterAddrResolverInterface {\n', '  function getAddress() public returns (address _addr);\n', '}\n', '\n', 'contract DataCenterBridge {\n', '  uint8 constant networkID_auto = 0;\n', '  uint8 constant networkID_mainnet = 1;\n', '  uint8 constant networkID_testnet = 3;\n', '  string public networkName;\n', '\n', '  address public mainnetAddr = 0x6690E2698Bfa407DB697E69a11eA56810454549b;\n', '  address public testnetAddr = 0x282b192518fc09568de0E66Df8e2533f88C16672;\n', '\n', '  DataCenterAddrResolverInterface DAR;\n', '\n', '  DataCenterInterface dataCenter;\n', '\n', '  modifier dataCenterAPI() {\n', '    if((address(DAR) == 0) || (getCodeSize(address(DAR)) == 0))\n', '      setNetwork(networkID_auto);\n', '    if(address(dataCenter) != DAR.getAddress())\n', '      dataCenter = DataCenterInterface(DAR.getAddress());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev set network will indicate which net will be used\n', "   * @notice comment out `networkID` to avoid 'unused parameter' warning\n", '   */\n', '  function setNetwork(uint8 /*networkID*/) internal returns(bool){\n', '    return setNetwork();\n', '  }\n', '\n', '  function setNetwork() internal returns(bool){\n', '    if (getCodeSize(mainnetAddr) > 0) {\n', '      DAR = DataCenterAddrResolverInterface(mainnetAddr);\n', '      setNetworkName("eth_mainnet");\n', '      return true;\n', '    }\n', '    if (getCodeSize(testnetAddr) > 0) {\n', '      DAR = DataCenterAddrResolverInterface(testnetAddr);\n', '      setNetworkName("eth_ropsten");\n', '      return true;\n', '    }\n', '    return false;\n', '  }\n', '\n', '  function setNetworkName(string _networkName) internal {\n', '    networkName = _networkName;\n', '  }\n', '\n', '  function getNetworkName() internal view returns (string) {\n', '    return networkName;\n', '  }\n', '\n', '  function dataCenterGetResult(bytes32 _gameId) dataCenterAPI internal returns (uint16, uint16, uint8){\n', '    return dataCenter.getResult(_gameId);\n', '  }\n', '\n', '  function getCodeSize(address _addr) view internal returns (uint _size) {\n', '    assembly {\n', '      _size := extcodesize(_addr)\n', '    }\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Bet is Ownable, DataCenterBridge {\n', '  using SafeMath for uint;\n', '\n', '  event LogDistributeReward(address indexed addr, uint reward, uint index);\n', '  event LogGameResult(bytes32 indexed category, bytes32 indexed gameId, uint leftPts, uint rightPts);\n', '  event LogParticipant(address indexed addr, uint choice, uint betAmount);\n', '  event LogRefund(address indexed addr, uint betAmount);\n', '  event LogBetClosed(bool isRefund, uint timestamp);\n', '  event LogDealerWithdraw(address indexed addr, uint withdrawAmount);\n', '\n', '  /** \n', '   * @desc\n', '   * gameId: is a fixed string just like "0021701030"\n', '   *   the full gameId encode(include football, basketball, esports..) will publish on github\n', '   * leftOdds: need divide 100, if odds is 216 means 2.16\n', '   * middleOdds: need divide 100, if odds is 175 means 1.75\n', '   * rightOdds: need divide 100, if odds is 250 means 2.50\n', '   * spread: need sub 0.5, if spread is 1 means 0.5, 0 means no spread\n', '   * flag: indicate which team get spread, 1 means leftTeam, 3 means rightTeam\n', '   */\n', '  struct BetInfo {\n', '    bytes32 category;\n', '    bytes32 gameId;\n', '    uint8   spread;\n', '    uint8   flag;\n', '    uint16  leftOdds;\n', '    uint16  middleOdds;\n', '    uint16  rightOdds;\n', '    uint    minimumBet;\n', '    uint    startTime;\n', '    uint    deposit;\n', '    address dealer;\n', '  }\n', '\n', '  struct Player {\n', '    uint betAmount;\n', '    uint choice;\n', '  }\n', '\n', '  /**\n', '   * @desc\n', '   * winChoice: Indicate the winner choice of this betting\n', '   *   1 means leftTeam win, 3 means rightTeam win, 2 means draw(leftTeam is not always equivalent to the home team)\n', '   */\n', '  uint8 public winChoice;\n', '  uint8 public confirmations = 0;\n', '  uint8 public neededConfirmations = 1;\n', '  uint16 public leftPts;\n', '  uint16 public rightPts;\n', '  bool public isBetClosed = false;\n', '\n', '  uint public totalBetAmount = 0;\n', '  uint public leftAmount;\n', '  uint public middleAmount;\n', '  uint public rightAmount;\n', '  uint public numberOfBet;\n', '\n', '  address [] public players;\n', '  mapping(address => Player) public playerInfo;\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the dealer\n', '   */\n', '  modifier onlyDealer() {\n', '    require(msg.sender == betInfo.dealer);\n', '    _;\n', '  }\n', '\n', '  function() payable public {}\n', '\n', '  BetInfo betInfo;\n', '\n', '  function Bet(address _dealer, bytes32 _category, bytes32 _gameId, uint _minimumBet, \n', '                  uint8 _spread, uint16 _leftOdds, uint16 _middleOdds, uint16 _rightOdds, uint8 _flag,\n', '                  uint _startTime, uint8 _neededConfirmations, address _owner) payable public {\n', '    require(_flag == 1 || _flag == 3);\n', '    require(_startTime > now);\n', '    require(msg.value >= 0.1 ether);\n', '    require(_neededConfirmations >= neededConfirmations);\n', '\n', '    betInfo.dealer = _dealer;\n', '    betInfo.deposit = msg.value;\n', '    betInfo.flag = _flag;\n', '    betInfo.category = _category;\n', '    betInfo.gameId = _gameId;\n', '    betInfo.minimumBet = _minimumBet;\n', '    betInfo.spread = _spread;\n', '    betInfo.leftOdds = _leftOdds;\n', '    betInfo.middleOdds = _middleOdds;\n', '    betInfo.rightOdds = _rightOdds;\n', '    betInfo.startTime = _startTime;\n', '\n', '    neededConfirmations = _neededConfirmations;\n', '    owner = _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev get basic information of this bet\n', '   */\n', '  function getBetInfo() public view returns (bytes32, bytes32, uint8, uint8, uint16, uint16, uint16, uint, uint, uint, address) {\n', '    return (betInfo.category, betInfo.gameId, betInfo.spread, betInfo.flag, betInfo.leftOdds, betInfo.middleOdds,\n', '            betInfo.rightOdds, betInfo.minimumBet, betInfo.startTime, betInfo.deposit, betInfo.dealer);\n', '  }\n', '\n', '  /**\n', '   * @dev get basic information of this bet\n', '   *\n', '   *  uint public numberOfBet;\n', '   *  uint public totalBetAmount = 0;\n', '   *  uint public leftAmount;\n', '   *  uint public middleAmount;\n', '   *  uint public rightAmount;\n', '   *  uint public deposit;\n', '   */\n', '  function getBetMutableData() public view returns (uint, uint, uint, uint, uint, uint) {\n', '    return (numberOfBet, totalBetAmount, leftAmount, middleAmount, rightAmount, betInfo.deposit);\n', '  }\n', '\n', '  /**\n', '   * @dev get bet result information\n', '   *\n', '   *  uint8 public winChoice;\n', '   *  uint8 public confirmations = 0;\n', '   *  uint8 public neededConfirmations = 1;\n', '   *  uint16 public leftPts;\n', '   *  uint16 public rightPts;\n', '   *  bool public isBetClosed = false;\n', '   */\n', '  function getBetResult() public view returns (uint8, uint8, uint8, uint16, uint16, bool) {\n', '    return (winChoice, confirmations, neededConfirmations, leftPts, rightPts, isBetClosed);\n', '  }\n', '\n', '  /**\n', '   * @dev calculate the gas whichdistribute rewards will cost\n', '   * set default gasPrice is 5000000000\n', '   */\n', '  function getRefundTxFee() public view returns (uint) {\n', '    return numberOfBet.mul(5000000000 * 21000);\n', '  }\n', '\n', '  /**\n', '   * @dev find a player has participanted or not\n', '   * @param player the address of the participant\n', '   */\n', '  function checkPlayerExists(address player) public view returns (bool) {\n', '    if (playerInfo[player].choice == 0) {\n', '      return false;\n', '    }\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev to check the dealer is solvent or not\n', '   * @param choice indicate which team user choose\n', '   * @param amount indicate how many ether user bet\n', '   */\n', '  function isSolvent(uint choice, uint amount) internal view returns (bool) {\n', '    uint needAmount;\n', '    if (choice == 1) {\n', '      needAmount = (leftAmount.add(amount)).mul(betInfo.leftOdds).div(100);\n', '    } else if (choice == 2) {\n', '      needAmount = (middleAmount.add(amount)).mul(betInfo.middleOdds).div(100);\n', '    } else {\n', '      needAmount = (rightAmount.add(amount)).mul(betInfo.rightOdds).div(100);\n', '    }\n', '\n', '    if (needAmount.add(getRefundTxFee()) > totalBetAmount.add(amount).add(betInfo.deposit)) {\n', '      return false;\n', '    } else {\n', '      return true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev update this bet some state\n', '   * @param choice indicate which team user choose\n', '   * @param amount indicate how many ether user bet\n', '   */\n', '  function updateAmountOfEachChoice(uint choice, uint amount) internal {\n', '    if (choice == 1) {\n', '      leftAmount = leftAmount.add(amount);\n', '    } else if (choice == 2) {\n', '      middleAmount = middleAmount.add(amount);\n', '    } else {\n', '      rightAmount = rightAmount.add(amount);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev place a bet with his/her choice\n', '   * @param choice indicate which team user choose\n', '   */\n', '  function placeBet(uint choice) public payable {\n', '    require(now < betInfo.startTime);\n', '    require(choice == 1 ||  choice == 2 || choice == 3);\n', '    require(msg.value >= betInfo.minimumBet);\n', '    require(!checkPlayerExists(msg.sender));\n', '\n', '    if (!isSolvent(choice, msg.value)) {\n', '      revert();\n', '    }\n', '\n', '    playerInfo[msg.sender].betAmount = msg.value;\n', '    playerInfo[msg.sender].choice = choice;\n', '\n', '    totalBetAmount = totalBetAmount.add(msg.value);\n', '    numberOfBet = numberOfBet.add(1);\n', '    updateAmountOfEachChoice(choice, msg.value);\n', '    players.push(msg.sender);\n', '    LogParticipant(msg.sender, choice, msg.value);\n', '  }\n', '\n', '  /**\n', '   * @dev in order to let more people participant, dealer can recharge\n', '   */\n', '  function rechargeDeposit() public payable {\n', '    require(msg.value >= betInfo.minimumBet);\n', '    betInfo.deposit = betInfo.deposit.add(msg.value);\n', '  }\n', '\n', '  /**\n', '   * @dev given game result, _return win choice by specific spread\n', '   */\n', '  function getWinChoice(uint _leftPts, uint _rightPts) public view returns (uint8) {\n', '    uint8 _winChoice;\n', '    if (betInfo.spread == 0) {\n', '      if (_leftPts > _rightPts) {\n', '        _winChoice = 1;\n', '      } else if (_leftPts == _rightPts) {\n', '        _winChoice = 2;\n', '      } else {\n', '        _winChoice = 3;\n', '      }\n', '    } else {\n', '      if (betInfo.flag == 1) {\n', '        if (_leftPts + betInfo.spread > _rightPts) {\n', '          _winChoice = 1;\n', '        } else {\n', '          _winChoice = 3;\n', '        }\n', '      } else {\n', '        if (_rightPts + betInfo.spread > _leftPts) {\n', '          _winChoice = 3;\n', '        } else {\n', '          _winChoice = 1;\n', '        }\n', '      }\n', '    }\n', '    return _winChoice;\n', '  }\n', '\n', '  /**\n', '   * @dev manualCloseBet could only be called by owner,\n', '   *      this method only be used for ropsten,\n', '   *      when ethereum-events-data deployed,\n', '   *      game result should not be upload by owner\n', '   */\n', '  function manualCloseBet(uint16 _leftPts, uint16 _rightPts) onlyOwner external {\n', '    require(!isBetClosed);\n', '    leftPts = _leftPts;\n', '    rightPts = _rightPts;\n', '\n', '    LogGameResult(betInfo.category, betInfo.gameId, leftPts, rightPts);\n', '\n', '    winChoice = getWinChoice(leftPts, rightPts);\n', '\n', '    if (winChoice == 1) {\n', '      distributeReward(betInfo.leftOdds);\n', '    } else if (winChoice == 2) {\n', '      distributeReward(betInfo.middleOdds);\n', '    } else {\n', '      distributeReward(betInfo.rightOdds);\n', '    }\n', '\n', '    isBetClosed = true;\n', '    LogBetClosed(false, now);\n', '    withdraw();\n', '  }\n', '\n', '  /**\n', '   * @dev closeBet could be called by everyone, but owner/dealer should to this.\n', '   */\n', '  function closeBet() external {\n', '    require(!isBetClosed);\n', '    (leftPts, rightPts, confirmations) = dataCenterGetResult(betInfo.gameId);\n', '\n', '    require(confirmations >= neededConfirmations);\n', '\n', '    LogGameResult(betInfo.category, betInfo.gameId, leftPts, rightPts);\n', '\n', '    winChoice = getWinChoice(leftPts, rightPts);\n', '\n', '    if (winChoice == 1) {\n', '      distributeReward(betInfo.leftOdds);\n', '    } else if (winChoice == 2) {\n', '      distributeReward(betInfo.middleOdds);\n', '    } else {\n', '      distributeReward(betInfo.rightOdds);\n', '    }\n', '\n', '    isBetClosed = true;\n', '    LogBetClosed(false, now);\n', '    withdraw();\n', '  }\n', '\n', '  /**\n', '   * @dev get the players\n', '   */\n', '  function getPlayers() view public returns (address[]) {\n', '    return players;\n', '  }\n', '\n', '  /**\n', '   * @dev get contract balance\n', '   */\n', '  function getBalance() view public returns (uint) {\n', '    return address(this).balance;\n', '  }\n', '\n', '  /**\n', '   * @dev if there are some reasons lead game postpone or cancel\n', '   *      the bet will also cancel and refund every bet\n', '   */\n', '  function refund() onlyOwner public {\n', '    for (uint i = 0; i < players.length; i++) {\n', '      players[i].transfer(playerInfo[players[i]].betAmount);\n', '      LogRefund(players[i], playerInfo[players[i]].betAmount);\n', '    }\n', '\n', '    isBetClosed = true;\n', '    LogBetClosed(true, now);\n', '    withdraw();\n', '  }\n', '\n', '  /**\n', '   * @dev dealer can withdraw the remain ether after refund or closed\n', '   */\n', '  function withdraw() internal {\n', '    require(isBetClosed);\n', '    uint _balance = address(this).balance;\n', '    betInfo.dealer.transfer(_balance);\n', '    LogDealerWithdraw(betInfo.dealer, _balance);\n', '  }\n', '\n', '  /**\n', '   * @dev distribute ether to every winner as they choosed odds\n', '   */\n', '  function distributeReward(uint winOdds) internal {\n', '    for (uint i = 0; i < players.length; i++) {\n', '      if (playerInfo[players[i]].choice == winChoice) {\n', '        players[i].transfer(winOdds.mul(playerInfo[players[i]].betAmount).div(100));\n', '        LogDistributeReward(players[i], winOdds.mul(playerInfo[players[i]].betAmount).div(100), i);\n', '      }\n', '    }\n', '  }\n', '}\n', '\n', 'contract BetCenter is Ownable {\n', '\n', '  event LogCreateBet(uint indexed startTime, uint indexed spreadTag, bytes32 indexed category, uint deposit, address bet, bytes32 gameId);\n', '\n', '  function() payable public {}\n', '\n', '  function createBet(bytes32 category, bytes32 gameId, uint minimumBet, \n', '                  uint8 spread, uint16 leftOdds, uint16 middleOdds, uint16 rightOdds, uint8 flag,\n', '                  uint startTime, uint8 confirmations) payable public {\n', '    Bet bet = (new Bet).value(msg.value)(msg.sender, category, gameId, minimumBet, \n', '                  spread, leftOdds, middleOdds, rightOdds , flag, startTime, confirmations, owner);\n', '    if (spread == 0) {\n', '      LogCreateBet(startTime, 0, category, msg.value, bet, gameId);\n', '    } else {\n', '      LogCreateBet(startTime, 1, category, msg.value, bet, gameId);\n', '    }\n', '  }\n', '}']
