['pragma solidity ^0.4.21;\n', '\n', 'contract Ownable {\n', '\n', '  address public contractOwner;\n', '\n', '  function Ownable() public {\n', '    contractOwner = msg.sender;\n', '  }\n', '\n', '  modifier onlyContractOwner() {\n', '    require(msg.sender == contractOwner);\n', '    _;\n', '  }\n', '\n', '  function transferContractOwnership(address _newOwner) public onlyContractOwner {\n', '    require(_newOwner != address(0));\n', '    contractOwner = _newOwner;\n', '  }\n', '  \n', '  function contractWithdraw() public onlyContractOwner {\n', '      contractOwner.transfer(this.balance);\n', '  }  \n', '\n', '}\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', '/// @author Dieter Shirley <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="a9cdccddcce9c8d1c0c6c4d3ccc787cac6">[email&#160;protected]</a>> (https://github.com/dete)\n', 'contract ERC721 {\n', '  // Required methods\n', '  function balanceOf(address _owner) public view returns (uint256 balance);\n', '  function implementsERC721() public pure returns (bool);\n', '  function ownerOf(uint256 _tokenId) public view returns (address addr);\n', '  function totalSupply() public view returns (uint256 total);\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 tokenId);\n', '\n', '  // Optional\n', '  // function name() public view returns (string name);\n', '  // function symbol() public view returns (string symbol);\n', '  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\n', '  // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\n', '  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\n', '}\n', '\n', 'contract EthPiranha is ERC721, Ownable {\n', '\n', '  event PiranhaCreated(uint256 tokenId, string name, address owner);\n', '  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name);\n', '  event Transfer(address from, address to, uint256 tokenId);\n', '\n', '  string public constant NAME = "Piranha";\n', '  string public constant SYMBOL = "PiranhaToken";\n', '\n', '  mapping (uint256 => address) private piranhaIdToOwner;\n', '\n', '  mapping (address => uint256) private ownershipTokenCount;\n', '  \n', '   /*** DATATYPES ***/\n', '  struct Piranha {\n', '    string name;\n', '\tuint8 size;\n', '\tuint256 gen;\n', '\tuint8 unique;\n', '\tuint256 growthStartTime;\n', '\tuint256 sellPrice;\n', '\tuint8 hungry;\n', '  }\n', '\n', '  Piranha[] public piranhas;\n', '  \n', '  uint256 private breedingCost = 0.001 ether;\n', '  uint256 private biteCost = 0.001 ether;\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) { //ERC721\n', '    return ownershipTokenCount[_owner];\n', '  }\n', '\n', '  function createPiranhaToken(string _name, address _owner, uint256 _price, uint8 _size, uint8 _hungry) public onlyContractOwner {\n', '\t\t//Emit new tokens ONLY GEN 1 \n', '\t\t_createPiranha(_name, _owner, _price, _size, 1, 0, _hungry);\n', '  }\n', '\n', '  function implementsERC721() public pure returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  function name() public pure returns (string) { //ERC721\n', '    return NAME;\n', '  }\n', '\n', '  function symbol() public pure returns (string) { //ERC721\n', '    return SYMBOL;\n', '  }  \n', '\n', '  function ownerOf(uint256 _tokenId) public view returns (address owner) { //ERC721\n', '    owner = piranhaIdToOwner[_tokenId];\n', '    require(owner != address(0));\n', '  }\n', '\n', '  function buy(uint256 _tokenId) public payable {\n', '    address oldOwner = piranhaIdToOwner[_tokenId];\n', '    address newOwner = msg.sender;\n', '\n', '\tPiranha storage piranha = piranhas[_tokenId];\n', '\n', '    uint256 sellingPrice = piranha.sellPrice;\n', '\n', '    require(oldOwner != newOwner);\n', '    require(_addressNotNull(newOwner));\n', '    require(msg.value >= sellingPrice && sellingPrice > 0);\n', '\n', '    uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 97), 100)); //97% to previous owner, 3% dev tax\n', '\n', '    // Stop selling\n', '    piranha.sellPrice=0;\n', '\tpiranha.hungry=0;\n', '\n', '    _transfer(oldOwner, newOwner, _tokenId);\n', '\n', '    // Pay previous tokenOwner if owner is not contract\n', '    if (oldOwner != address(this)) {\n', '      oldOwner.transfer(payment); //\n', '    }\n', '\n', '    TokenSold(_tokenId, sellingPrice, 0, oldOwner, newOwner, piranhas[_tokenId].name);\n', '\t\n', '    if (msg.value > sellingPrice) { //if excess pay\n', '\t    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\n', '\t\tmsg.sender.transfer(purchaseExcess);\n', '\t}\n', '  }\n', '  \n', '  function changePiranhaName(uint256 _tokenId, string _name) public payable {\n', '\trequire (piranhaIdToOwner[_tokenId] == msg.sender && msg.value == biteCost);\n', '\trequire(bytes(_name).length <= 15);\n', '\t\n', '\tPiranha storage piranha = piranhas[_tokenId];\n', '\tpiranha.name = _name;\n', '  }\n', '  \n', '  function changeBeedingCost(uint256 _newCost) public onlyContractOwner {\n', '    require(_newCost > 0);\n', '\tbreedingCost=_newCost;\n', '  }  \n', '\n', '  function changeBiteCost(uint256 _newCost) public onlyContractOwner {\n', '    require(_newCost > 0);\n', '\tbiteCost=_newCost;\n', '  }    \n', '  \n', '  function startSelling(uint256 _tokenId, uint256 _price) public {\n', '\trequire (piranhaIdToOwner[_tokenId] == msg.sender);\n', '\t\n', '\tPiranha storage piranha = piranhas[_tokenId];\n', '\tpiranha.sellPrice = _price;\n', '  }  \n', '\n', '  function stopSelling(uint256 _tokenId) public {\n', '\trequire (piranhaIdToOwner[_tokenId] == msg.sender);\n', '\n', '\tPiranha storage piranha = piranhas[_tokenId];\n', '\trequire (piranha.sellPrice > 0);\n', '\t\n', '\tpiranha.sellPrice = 0;\n', '  }  \n', '  \n', '  function hungry(uint256 _tokenId) public {\n', '\trequire (piranhaIdToOwner[_tokenId] == msg.sender);\n', '\n', '\tPiranha storage piranha = piranhas[_tokenId];\n', '\trequire (piranha.hungry == 0);\n', '\t\n', '\tuint8 piranhaSize=uint8(piranha.size+(now-piranha.growthStartTime)/300);\n', '\n', '\trequire (piranhaSize < 240);\n', '\t\n', '\tpiranha.hungry = 1;\n', '  }   \n', '\n', '  function notHungry(uint256 _tokenId) public {\n', '\trequire (piranhaIdToOwner[_tokenId] == msg.sender);\n', '\n', '\tPiranha storage piranha = piranhas[_tokenId];\n', '\trequire (piranha.hungry == 1);\n', '\t\n', '\tpiranha.hungry = 0;\n', '  }   \n', '\n', '  function bite(uint256 _tokenId, uint256 _victimTokenId) public payable {\n', '\trequire (piranhaIdToOwner[_tokenId] == msg.sender);\n', '\trequire (msg.value == biteCost);\n', '\t\n', '\tPiranha storage piranha = piranhas[_tokenId];\n', '\tPiranha storage victimPiranha = piranhas[_victimTokenId];\n', '\trequire (piranha.hungry == 1 && victimPiranha.hungry == 1);\n', '\n', '\tuint256 vitimPiranhaSize=victimPiranha.size+(now-victimPiranha.growthStartTime)/300;\n', '\t\n', '\trequire (vitimPiranhaSize>40); // don&#39;t bite a small\n', '\n', '\tuint256 piranhaSize=piranha.size+(now-piranha.growthStartTime)/300+10;\n', '\t\n', '\tif (piranhaSize>240) { \n', '\t    piranha.size = 240; //maximum\n', '\t\tpiranha.hungry = 0;\n', '\t} else {\n', '\t    piranha.size = uint8(piranhaSize);\n', '\t}\n', '     \n', '\t//decrease victim size \n', '\tif (vitimPiranhaSize>240) \n', '\t    vitimPiranhaSize=240;\n', '\t\t\n', '\tif (vitimPiranhaSize>=50) {\n', '\t    vitimPiranhaSize-=10;\n', '\t    victimPiranha.size = uint8(vitimPiranhaSize);\n', '\t}\n', '    else {\n', '\t\tvictimPiranha.size=40;\n', '\t}\n', '\t\n', '\tpiranha.growthStartTime=now;\n', '\tvictimPiranha.growthStartTime=now;\n', '\t\n', '  }    \n', '  \n', '  function breeding(uint256 _maleTokenId, uint256 _femaleTokenId) public payable {\n', '  \n', '    require (piranhaIdToOwner[_maleTokenId] ==  msg.sender && piranhaIdToOwner[_femaleTokenId] == msg.sender);\n', '\trequire (msg.value == breedingCost);\n', '\n', '\tPiranha storage piranhaMale = piranhas[_maleTokenId];\n', '\tPiranha storage piranhaFemale = piranhas[_femaleTokenId];\n', '\t\n', '\tuint256 maleSize=piranhaMale.size+(now-piranhaMale.growthStartTime)/300;\n', '\t\n', '\tif (maleSize>240)\n', '\t   maleSize=240;\n', '\n', '\tuint256 femaleSize=piranhaFemale.size+(now-piranhaFemale.growthStartTime)/300;\n', '\n', '\tif (femaleSize>240)\n', '\t    femaleSize=240;\n', '\t   \n', '\trequire (maleSize > 150 && femaleSize > 150);\n', '\t\n', '\tuint8 newbornSize = uint8(SafeMath.div(SafeMath.add(maleSize, femaleSize),4));\n', '\t\n', '\tuint256 maxGen=piranhaFemale.gen;\n', '\tuint256 minGen=piranhaMale.gen;\n', '\t\n', '\tif (piranhaMale.gen > piranhaFemale.gen) {\n', '\t\tmaxGen=piranhaMale.gen;\n', '\t\tminGen=piranhaFemale.gen;\n', '\t} \n', '\t\n', '\tuint256 randNum = uint256(block.blockhash(block.number-1));\n', '\tuint256 newbornGen;\n', '\tuint8 newbornUnique = uint8(randNum%100+1); //chance to get rare piranha\n', '\t\n', '\tif (randNum%(10+maxGen) == 1) { // new generation, difficult depends on maxgen\n', '\t\tnewbornGen = SafeMath.add(maxGen,1);\n', '\t} else if (maxGen == minGen) {\n', '\t\tnewbornGen = maxGen;\n', '\t} else {\n', '\t\tnewbornGen = SafeMath.add(randNum%(maxGen-minGen+1),minGen);\n', '\t}\n', '\t\n', '\t// 5% chance to get rare piranhas for each gen\n', '\tif (newbornUnique > 5) \n', '\t\tnewbornUnique = 0;\n', '\t\t\n', '     //initiate new size, cancel selling\n', '\t piranhaMale.size = uint8(SafeMath.div(maleSize,2));\t\t\n', '     piranhaFemale.size = uint8(SafeMath.div(femaleSize,2));\t\n', '\n', '\t piranhaMale.growthStartTime = now;\t \n', '\t piranhaFemale.growthStartTime = now;\t \n', '\n', '\t_createPiranha("EthPiranha", msg.sender, 0, newbornSize, newbornGen, newbornUnique, 0);\n', '  \n', '  }\n', '  \n', '  function allPiranhasInfo(uint256 _startPiranhaId) public view returns (address[] owners, uint256[] sizes, uint8[] hungry, uint256[] prices) { //for web site view\n', '\t\n', '\tPiranha storage piranha;\n', '\tuint256 indexTo = totalSupply();\n', '\t\n', '    if (indexTo == 0 || _startPiranhaId >= indexTo) {\n', '        // Return an empty array\n', '      return (new address[](0), new uint256[](0), new uint8[](0), new uint256[](0));\n', '    }\n', '\n', '\tif (indexTo > _startPiranhaId+1000)\n', '\t\tindexTo = _startPiranhaId + 1000;\n', '\t\t\n', '    uint256 totalResultPiranhas = indexTo - _startPiranhaId;\t\t\n', '\t\t\n', '\taddress[] memory owners_res = new address[](totalResultPiranhas);\n', '\tuint256[] memory size_res = new uint256[](totalResultPiranhas);\n', '\tuint8[] memory hungry_res = new uint8[](totalResultPiranhas);\n', '\tuint256[] memory prices_res = new uint256[](totalResultPiranhas);\n', '\t\n', '\tfor (uint256 piranhaId = _startPiranhaId; piranhaId < indexTo; piranhaId++) {\n', '\t  piranha = piranhas[piranhaId];\n', '\t  \n', '\t  owners_res[piranhaId - _startPiranhaId] = piranhaIdToOwner[piranhaId];\n', '      size_res[piranhaId - _startPiranhaId] = uint256(piranha.size+(now-piranha.growthStartTime)/300);\t  \n', '\t  hungry_res[piranhaId - _startPiranhaId] = piranha.hungry;\n', '\t  prices_res[piranhaId - _startPiranhaId] = piranha.sellPrice;\n', '\t}\n', '\t\n', '\treturn (owners_res, size_res, hungry_res, prices_res);\n', '  }\n', '  \n', '  function totalSupply() public view returns (uint256 total) { //ERC721\n', '    return piranhas.length;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _tokenId) public { //ERC721\n', '    require(_owns(msg.sender, _tokenId));\n', '    require(_addressNotNull(_to));\n', '\n', '\t_transfer(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '\n', '  /* PRIVATE FUNCTIONS */\n', '  function _addressNotNull(address _to) private pure returns (bool) {\n', '    return _to != address(0);\n', '  }\n', '\n', '\n', '  function _createPiranha(string _name, address _owner, uint256 _price, uint8 _size, uint256 _gen, uint8 _unique, uint8 _hungry) private {\n', '    Piranha memory _piranha = Piranha({\n', '      name: _name,\n', '\t  size: _size,\n', '\t  gen: _gen,\n', '\t  unique: _unique,\t  \n', '\t  growthStartTime: now,\n', '\t  sellPrice: _price,\n', '\t  hungry: _hungry\n', '    });\n', '    uint256 newPiranhaId = piranhas.push(_piranha) - 1;\n', '\n', '    require(newPiranhaId == uint256(uint32(newPiranhaId))); //check maximum limit of tokens\n', '\n', '    PiranhaCreated(newPiranhaId, _name, _owner);\n', '\n', '    _transfer(address(0), _owner, newPiranhaId);\n', '  }\n', '\n', '  function _owns(address _checkedAddr, uint256 _tokenId) private view returns (bool) {\n', '    return _checkedAddr == piranhaIdToOwner[_tokenId];\n', '  }\n', '\n', '  function _transfer(address _from, address _to, uint256 _tokenId) private {\n', '    ownershipTokenCount[_to]++;\n', '    piranhaIdToOwner[_tokenId] = _to;\n', '\n', '    // When creating new piranhas _from is 0x0, but we can&#39;t account that address.\n', '    if (_from != address(0)) {\n', '      ownershipTokenCount[_from]--;\n', '    }\n', '\n', '    // Emit the transfer event.\n', '    Transfer(_from, _to, _tokenId);\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'contract Ownable {\n', '\n', '  address public contractOwner;\n', '\n', '  function Ownable() public {\n', '    contractOwner = msg.sender;\n', '  }\n', '\n', '  modifier onlyContractOwner() {\n', '    require(msg.sender == contractOwner);\n', '    _;\n', '  }\n', '\n', '  function transferContractOwnership(address _newOwner) public onlyContractOwner {\n', '    require(_newOwner != address(0));\n', '    contractOwner = _newOwner;\n', '  }\n', '  \n', '  function contractWithdraw() public onlyContractOwner {\n', '      contractOwner.transfer(this.balance);\n', '  }  \n', '\n', '}\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', '/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\n', 'contract ERC721 {\n', '  // Required methods\n', '  function balanceOf(address _owner) public view returns (uint256 balance);\n', '  function implementsERC721() public pure returns (bool);\n', '  function ownerOf(uint256 _tokenId) public view returns (address addr);\n', '  function totalSupply() public view returns (uint256 total);\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 tokenId);\n', '\n', '  // Optional\n', '  // function name() public view returns (string name);\n', '  // function symbol() public view returns (string symbol);\n', '  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\n', '  // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\n', '  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\n', '}\n', '\n', 'contract EthPiranha is ERC721, Ownable {\n', '\n', '  event PiranhaCreated(uint256 tokenId, string name, address owner);\n', '  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name);\n', '  event Transfer(address from, address to, uint256 tokenId);\n', '\n', '  string public constant NAME = "Piranha";\n', '  string public constant SYMBOL = "PiranhaToken";\n', '\n', '  mapping (uint256 => address) private piranhaIdToOwner;\n', '\n', '  mapping (address => uint256) private ownershipTokenCount;\n', '  \n', '   /*** DATATYPES ***/\n', '  struct Piranha {\n', '    string name;\n', '\tuint8 size;\n', '\tuint256 gen;\n', '\tuint8 unique;\n', '\tuint256 growthStartTime;\n', '\tuint256 sellPrice;\n', '\tuint8 hungry;\n', '  }\n', '\n', '  Piranha[] public piranhas;\n', '  \n', '  uint256 private breedingCost = 0.001 ether;\n', '  uint256 private biteCost = 0.001 ether;\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) { //ERC721\n', '    return ownershipTokenCount[_owner];\n', '  }\n', '\n', '  function createPiranhaToken(string _name, address _owner, uint256 _price, uint8 _size, uint8 _hungry) public onlyContractOwner {\n', '\t\t//Emit new tokens ONLY GEN 1 \n', '\t\t_createPiranha(_name, _owner, _price, _size, 1, 0, _hungry);\n', '  }\n', '\n', '  function implementsERC721() public pure returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  function name() public pure returns (string) { //ERC721\n', '    return NAME;\n', '  }\n', '\n', '  function symbol() public pure returns (string) { //ERC721\n', '    return SYMBOL;\n', '  }  \n', '\n', '  function ownerOf(uint256 _tokenId) public view returns (address owner) { //ERC721\n', '    owner = piranhaIdToOwner[_tokenId];\n', '    require(owner != address(0));\n', '  }\n', '\n', '  function buy(uint256 _tokenId) public payable {\n', '    address oldOwner = piranhaIdToOwner[_tokenId];\n', '    address newOwner = msg.sender;\n', '\n', '\tPiranha storage piranha = piranhas[_tokenId];\n', '\n', '    uint256 sellingPrice = piranha.sellPrice;\n', '\n', '    require(oldOwner != newOwner);\n', '    require(_addressNotNull(newOwner));\n', '    require(msg.value >= sellingPrice && sellingPrice > 0);\n', '\n', '    uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 97), 100)); //97% to previous owner, 3% dev tax\n', '\n', '    // Stop selling\n', '    piranha.sellPrice=0;\n', '\tpiranha.hungry=0;\n', '\n', '    _transfer(oldOwner, newOwner, _tokenId);\n', '\n', '    // Pay previous tokenOwner if owner is not contract\n', '    if (oldOwner != address(this)) {\n', '      oldOwner.transfer(payment); //\n', '    }\n', '\n', '    TokenSold(_tokenId, sellingPrice, 0, oldOwner, newOwner, piranhas[_tokenId].name);\n', '\t\n', '    if (msg.value > sellingPrice) { //if excess pay\n', '\t    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\n', '\t\tmsg.sender.transfer(purchaseExcess);\n', '\t}\n', '  }\n', '  \n', '  function changePiranhaName(uint256 _tokenId, string _name) public payable {\n', '\trequire (piranhaIdToOwner[_tokenId] == msg.sender && msg.value == biteCost);\n', '\trequire(bytes(_name).length <= 15);\n', '\t\n', '\tPiranha storage piranha = piranhas[_tokenId];\n', '\tpiranha.name = _name;\n', '  }\n', '  \n', '  function changeBeedingCost(uint256 _newCost) public onlyContractOwner {\n', '    require(_newCost > 0);\n', '\tbreedingCost=_newCost;\n', '  }  \n', '\n', '  function changeBiteCost(uint256 _newCost) public onlyContractOwner {\n', '    require(_newCost > 0);\n', '\tbiteCost=_newCost;\n', '  }    \n', '  \n', '  function startSelling(uint256 _tokenId, uint256 _price) public {\n', '\trequire (piranhaIdToOwner[_tokenId] == msg.sender);\n', '\t\n', '\tPiranha storage piranha = piranhas[_tokenId];\n', '\tpiranha.sellPrice = _price;\n', '  }  \n', '\n', '  function stopSelling(uint256 _tokenId) public {\n', '\trequire (piranhaIdToOwner[_tokenId] == msg.sender);\n', '\n', '\tPiranha storage piranha = piranhas[_tokenId];\n', '\trequire (piranha.sellPrice > 0);\n', '\t\n', '\tpiranha.sellPrice = 0;\n', '  }  \n', '  \n', '  function hungry(uint256 _tokenId) public {\n', '\trequire (piranhaIdToOwner[_tokenId] == msg.sender);\n', '\n', '\tPiranha storage piranha = piranhas[_tokenId];\n', '\trequire (piranha.hungry == 0);\n', '\t\n', '\tuint8 piranhaSize=uint8(piranha.size+(now-piranha.growthStartTime)/300);\n', '\n', '\trequire (piranhaSize < 240);\n', '\t\n', '\tpiranha.hungry = 1;\n', '  }   \n', '\n', '  function notHungry(uint256 _tokenId) public {\n', '\trequire (piranhaIdToOwner[_tokenId] == msg.sender);\n', '\n', '\tPiranha storage piranha = piranhas[_tokenId];\n', '\trequire (piranha.hungry == 1);\n', '\t\n', '\tpiranha.hungry = 0;\n', '  }   \n', '\n', '  function bite(uint256 _tokenId, uint256 _victimTokenId) public payable {\n', '\trequire (piranhaIdToOwner[_tokenId] == msg.sender);\n', '\trequire (msg.value == biteCost);\n', '\t\n', '\tPiranha storage piranha = piranhas[_tokenId];\n', '\tPiranha storage victimPiranha = piranhas[_victimTokenId];\n', '\trequire (piranha.hungry == 1 && victimPiranha.hungry == 1);\n', '\n', '\tuint256 vitimPiranhaSize=victimPiranha.size+(now-victimPiranha.growthStartTime)/300;\n', '\t\n', "\trequire (vitimPiranhaSize>40); // don't bite a small\n", '\n', '\tuint256 piranhaSize=piranha.size+(now-piranha.growthStartTime)/300+10;\n', '\t\n', '\tif (piranhaSize>240) { \n', '\t    piranha.size = 240; //maximum\n', '\t\tpiranha.hungry = 0;\n', '\t} else {\n', '\t    piranha.size = uint8(piranhaSize);\n', '\t}\n', '     \n', '\t//decrease victim size \n', '\tif (vitimPiranhaSize>240) \n', '\t    vitimPiranhaSize=240;\n', '\t\t\n', '\tif (vitimPiranhaSize>=50) {\n', '\t    vitimPiranhaSize-=10;\n', '\t    victimPiranha.size = uint8(vitimPiranhaSize);\n', '\t}\n', '    else {\n', '\t\tvictimPiranha.size=40;\n', '\t}\n', '\t\n', '\tpiranha.growthStartTime=now;\n', '\tvictimPiranha.growthStartTime=now;\n', '\t\n', '  }    \n', '  \n', '  function breeding(uint256 _maleTokenId, uint256 _femaleTokenId) public payable {\n', '  \n', '    require (piranhaIdToOwner[_maleTokenId] ==  msg.sender && piranhaIdToOwner[_femaleTokenId] == msg.sender);\n', '\trequire (msg.value == breedingCost);\n', '\n', '\tPiranha storage piranhaMale = piranhas[_maleTokenId];\n', '\tPiranha storage piranhaFemale = piranhas[_femaleTokenId];\n', '\t\n', '\tuint256 maleSize=piranhaMale.size+(now-piranhaMale.growthStartTime)/300;\n', '\t\n', '\tif (maleSize>240)\n', '\t   maleSize=240;\n', '\n', '\tuint256 femaleSize=piranhaFemale.size+(now-piranhaFemale.growthStartTime)/300;\n', '\n', '\tif (femaleSize>240)\n', '\t    femaleSize=240;\n', '\t   \n', '\trequire (maleSize > 150 && femaleSize > 150);\n', '\t\n', '\tuint8 newbornSize = uint8(SafeMath.div(SafeMath.add(maleSize, femaleSize),4));\n', '\t\n', '\tuint256 maxGen=piranhaFemale.gen;\n', '\tuint256 minGen=piranhaMale.gen;\n', '\t\n', '\tif (piranhaMale.gen > piranhaFemale.gen) {\n', '\t\tmaxGen=piranhaMale.gen;\n', '\t\tminGen=piranhaFemale.gen;\n', '\t} \n', '\t\n', '\tuint256 randNum = uint256(block.blockhash(block.number-1));\n', '\tuint256 newbornGen;\n', '\tuint8 newbornUnique = uint8(randNum%100+1); //chance to get rare piranha\n', '\t\n', '\tif (randNum%(10+maxGen) == 1) { // new generation, difficult depends on maxgen\n', '\t\tnewbornGen = SafeMath.add(maxGen,1);\n', '\t} else if (maxGen == minGen) {\n', '\t\tnewbornGen = maxGen;\n', '\t} else {\n', '\t\tnewbornGen = SafeMath.add(randNum%(maxGen-minGen+1),minGen);\n', '\t}\n', '\t\n', '\t// 5% chance to get rare piranhas for each gen\n', '\tif (newbornUnique > 5) \n', '\t\tnewbornUnique = 0;\n', '\t\t\n', '     //initiate new size, cancel selling\n', '\t piranhaMale.size = uint8(SafeMath.div(maleSize,2));\t\t\n', '     piranhaFemale.size = uint8(SafeMath.div(femaleSize,2));\t\n', '\n', '\t piranhaMale.growthStartTime = now;\t \n', '\t piranhaFemale.growthStartTime = now;\t \n', '\n', '\t_createPiranha("EthPiranha", msg.sender, 0, newbornSize, newbornGen, newbornUnique, 0);\n', '  \n', '  }\n', '  \n', '  function allPiranhasInfo(uint256 _startPiranhaId) public view returns (address[] owners, uint256[] sizes, uint8[] hungry, uint256[] prices) { //for web site view\n', '\t\n', '\tPiranha storage piranha;\n', '\tuint256 indexTo = totalSupply();\n', '\t\n', '    if (indexTo == 0 || _startPiranhaId >= indexTo) {\n', '        // Return an empty array\n', '      return (new address[](0), new uint256[](0), new uint8[](0), new uint256[](0));\n', '    }\n', '\n', '\tif (indexTo > _startPiranhaId+1000)\n', '\t\tindexTo = _startPiranhaId + 1000;\n', '\t\t\n', '    uint256 totalResultPiranhas = indexTo - _startPiranhaId;\t\t\n', '\t\t\n', '\taddress[] memory owners_res = new address[](totalResultPiranhas);\n', '\tuint256[] memory size_res = new uint256[](totalResultPiranhas);\n', '\tuint8[] memory hungry_res = new uint8[](totalResultPiranhas);\n', '\tuint256[] memory prices_res = new uint256[](totalResultPiranhas);\n', '\t\n', '\tfor (uint256 piranhaId = _startPiranhaId; piranhaId < indexTo; piranhaId++) {\n', '\t  piranha = piranhas[piranhaId];\n', '\t  \n', '\t  owners_res[piranhaId - _startPiranhaId] = piranhaIdToOwner[piranhaId];\n', '      size_res[piranhaId - _startPiranhaId] = uint256(piranha.size+(now-piranha.growthStartTime)/300);\t  \n', '\t  hungry_res[piranhaId - _startPiranhaId] = piranha.hungry;\n', '\t  prices_res[piranhaId - _startPiranhaId] = piranha.sellPrice;\n', '\t}\n', '\t\n', '\treturn (owners_res, size_res, hungry_res, prices_res);\n', '  }\n', '  \n', '  function totalSupply() public view returns (uint256 total) { //ERC721\n', '    return piranhas.length;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _tokenId) public { //ERC721\n', '    require(_owns(msg.sender, _tokenId));\n', '    require(_addressNotNull(_to));\n', '\n', '\t_transfer(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '\n', '  /* PRIVATE FUNCTIONS */\n', '  function _addressNotNull(address _to) private pure returns (bool) {\n', '    return _to != address(0);\n', '  }\n', '\n', '\n', '  function _createPiranha(string _name, address _owner, uint256 _price, uint8 _size, uint256 _gen, uint8 _unique, uint8 _hungry) private {\n', '    Piranha memory _piranha = Piranha({\n', '      name: _name,\n', '\t  size: _size,\n', '\t  gen: _gen,\n', '\t  unique: _unique,\t  \n', '\t  growthStartTime: now,\n', '\t  sellPrice: _price,\n', '\t  hungry: _hungry\n', '    });\n', '    uint256 newPiranhaId = piranhas.push(_piranha) - 1;\n', '\n', '    require(newPiranhaId == uint256(uint32(newPiranhaId))); //check maximum limit of tokens\n', '\n', '    PiranhaCreated(newPiranhaId, _name, _owner);\n', '\n', '    _transfer(address(0), _owner, newPiranhaId);\n', '  }\n', '\n', '  function _owns(address _checkedAddr, uint256 _tokenId) private view returns (bool) {\n', '    return _checkedAddr == piranhaIdToOwner[_tokenId];\n', '  }\n', '\n', '  function _transfer(address _from, address _to, uint256 _tokenId) private {\n', '    ownershipTokenCount[_to]++;\n', '    piranhaIdToOwner[_tokenId] = _to;\n', '\n', "    // When creating new piranhas _from is 0x0, but we can't account that address.\n", '    if (_from != address(0)) {\n', '      ownershipTokenCount[_from]--;\n', '    }\n', '\n', '    // Emit the transfer event.\n', '    Transfer(_from, _to, _tokenId);\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
