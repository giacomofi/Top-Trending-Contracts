['contract Ownable {\n', '\n', '  address public owner;\n', '  \n', '  mapping(address => uint) public balances;\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  \n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract ExchangeRate is Ownable {\n', '\n', '  event RateUpdated(uint timestamp, bytes32 symbol, uint rate);\n', '\n', '  mapping(bytes32 => uint) public rates;\n', '\n', '  function updateRate(string _symbol, uint _rate) public onlyOwner {\n', '    rates[keccak256(_symbol)] = _rate;\n', '    RateUpdated(now, keccak256(_symbol), _rate);\n', '  }\n', '\n', '  \n', '  function updateRates(uint[] data) public onlyOwner {\n', '    if (data.length % 2 > 0)\n', '      revert();\n', '    uint i = 0;\n', '    while (i < data.length / 2) {\n', '      bytes32 symbol = bytes32(data[i * 2]);\n', '      uint rate = data[i * 2 + 1];\n', '      rates[symbol] = rate;\n', '      RateUpdated(now, symbol, rate);\n', '      i++;\n', '    }\n', '  }\n', '\n', '  function getRate(string _symbol) public constant returns(uint) {\n', '    return rates[keccak256(_symbol)];\n', '  }\n', '\n', '}']