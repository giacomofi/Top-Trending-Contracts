['pragma solidity ^0.4.23;\n', '\n', '\n', 'contract Random {\n', '\n', '    uint public ticketsNum = 0;\n', '    \n', '    mapping(uint => address) internal tickets;\n', '    mapping(uint => bool) internal payed_back;\n', '    \n', '    uint32 public random_num = 0;\n', ' \n', '    uint public liveBlocksNumber = 5760;\n', '    uint public startBlockNumber = 0;\n', '    uint public endBlockNumber = 0;\n', '    \n', '    string public constant name = "Random Daily Lottery";\n', '    string public constant symbol = "RND";\n', '    uint   public constant decimals = 0;\n', '\n', '    uint public constant onePotWei = 10000000000000000; // 1 ticket cost is 0.01 ETH\n', '\n', '    address public inv_contract = 0x1d9Ed8e4c1591384A4b2fbd005ccCBDc58501cc0; // investing contract\n', '    address public rtm_contract = 0x67e5e779bfc7a93374f273dcaefce0db8b3559c2; // team contract\n', '    \n', '    address manager; \n', '    \n', '    uint public winners_count = 0; \n', '    uint public last_winner = 0; \n', '    uint public others_prize = 0;\n', '    \n', '    uint public fee_balance = 0; \n', '    bool public autopayfee = true;\n', '\n', '    // Events\n', '    // This generates a publics event on the blockchain that will notify clients\n', '    \n', '    event Buy(address indexed sender, uint eth); \n', '    event Withdraw(address indexed sender, address to, uint eth); \n', '    event Transfer(address indexed from, address indexed to, uint value); \n', '    event TransferError(address indexed to, uint value); // event (error): sending ETH from the contract was failed\n', '    event PayFee(address _to, uint value);\n', '    \n', '    \n', '    \n', '\n', '    // methods with following modifier can only be called by the manager\n', '    modifier onlyManager() {\n', '        require(msg.sender == manager);\n', '        _;\n', '    }\n', '    \n', '\n', '    // constructor\n', '    constructor() public {\n', '        manager = msg.sender;\n', '        startBlockNumber = block.number - 1;\n', '        endBlockNumber = startBlockNumber + liveBlocksNumber;\n', '    }\n', '\n', '\n', '    /// function for straight tickets purchase (sending ETH to the contract address)\n', '\n', '    function() public payable {\n', '        emit Transfer(msg.sender, 0, 0);\n', '        require(block.number < endBlockNumber || msg.value < 1000000000000000000);  \n', '        if (msg.value > 0 && last_winner == 0) { \n', '            uint val =  msg.value / onePotWei;  \n', '            uint i = 0;\n', '            for(i; i < val; i++) { tickets[ticketsNum+i] = msg.sender; }  \n', '            ticketsNum += val;                                    \n', '            emit Buy(msg.sender, msg.value);                      \n', '        }\n', '        if (block.number >= endBlockNumber) { \n', '            EndLottery(); \n', '        }\n', '    }\n', '    \n', '    /// function for ticket sending from owner&#39;s address to designated address\n', '    function transfer(address _to, uint _ticketNum) public {    \n', '        require(msg.sender == tickets[_ticketNum] && _to != address(0));\n', '        tickets[_ticketNum] = _to;\n', '        emit Transfer(msg.sender, _to, _ticketNum);\n', '    }\n', '\n', '\n', '    /// manager&#39;s opportunity to write off ETH from the contract, in a case of unforseen contract blocking (possible in only case of more than 24 hours from the moment of lottery ending had passed and a new one has not started)\n', '    function manager_withdraw() onlyManager public {\n', '        require(block.number >= endBlockNumber + liveBlocksNumber);\n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '    \n', '    /// lottery ending  \n', '    function EndLottery() public payable returns (bool success) {\n', '        require(block.number >= endBlockNumber); \n', '        uint tn = ticketsNum;\n', '        if(tn < 3) { \n', '            tn = 0;\n', '            if(msg.value > 0) { msg.sender.transfer(msg.value); }  \n', '            startNewDraw(0);\n', '            return false;\n', '        }\n', '        uint pf = prizeFund(); \n', '        uint jp1 = percent(pf, 10);\n', '        uint jp2 = percent(pf, 4);\n', '        uint jp3 = percent(pf, 1);\n', '        uint lastbet_prize = onePotWei*10;  \n', '\n', '        if(tn < 100) { lastbet_prize = onePotWei; }\n', '        \n', '        if(last_winner == 0) { \n', '            \n', '            winners_count = percent(tn, 4) + 3; \n', '\n', '            uint prizes = jp1 + jp2 + jp3 + lastbet_prize*2; \n', '            \n', '            uint full_prizes = jp1 + jp2 + jp3 + ( lastbet_prize * (winners_count+1)/10 );\n', '            \n', '            if(winners_count < 10) {\n', '                if(prizes > pf) {\n', '                    others_prize = 0;\n', '                } else {\n', '                    others_prize = pf - prizes;    \n', '                }\n', '            } else {\n', '                if(full_prizes > pf) {\n', '                    others_prize = 0;\n', '                } else {\n', '                    others_prize = pf - full_prizes;    \n', '                }\n', '            }\n', '            sendEth(tickets[getWinningNumber(1)], jp1);\n', '            sendEth(tickets[getWinningNumber(2)], jp2);\n', '            sendEth(tickets[getWinningNumber(3)], jp3);\n', '            last_winner += 3;\n', '            \n', '            sendEth(msg.sender, lastbet_prize + msg.value);\n', '            return true;\n', '        } \n', '        \n', '        if(last_winner < winners_count && others_prize > 0) {\n', '            \n', '            uint val = others_prize / winners_count;\n', '            uint i;\n', '            uint8 cnt = 0;\n', '            for(i = last_winner; i < winners_count; i++) {\n', '                sendEth(tickets[getWinningNumber(i+3)], val);\n', '                cnt++;\n', '                if(cnt >= 9) {\n', '                    last_winner = i;\n', '                    return true;\n', '                }\n', '            }\n', '            last_winner = i;\n', '            if(cnt < 9) { \n', '                startNewDraw(lastbet_prize + msg.value); \n', '            } else {\n', '                sendEth(msg.sender, lastbet_prize + msg.value);\n', '            }\n', '            return true;\n', '            \n', '        } else {\n', '\n', '            startNewDraw(lastbet_prize + msg.value);\n', '        }\n', '        \n', '        return true;\n', '    }\n', '    \n', '    /// new draw start\n', '    function startNewDraw(uint _msg_value) internal { \n', '        ticketsNum = 0;\n', '        startBlockNumber = block.number - 1;\n', '        endBlockNumber = startBlockNumber + liveBlocksNumber;\n', '        random_num += 1;\n', '        winners_count = 0;\n', '        last_winner = 0;\n', '        \n', '        fee_balance = subZero(address(this).balance, _msg_value); \n', '        if(msg.value > 0) { sendEth(msg.sender, _msg_value); }\n', '        // fee_balance = address(this).balance;\n', '        \n', '        if(autopayfee) { _payfee(); }\n', '    }\n', '    \n', '    /// sending rewards to the investing, team and marketing contracts \n', '    function payfee() public {   \n', '        require(fee_balance > 0);\n', '        uint val = fee_balance;\n', '        \n', '        RNDInvestor rinv = RNDInvestor(inv_contract);\n', '        rinv.takeEther.value( percent(val, 25) )();\n', '        rtm_contract.transfer( percent(val, 74) );\n', '        fee_balance = 0;\n', '        \n', '        emit PayFee(inv_contract, percent(val, 25) );\n', '        emit PayFee(rtm_contract, percent(val, 74) );\n', '    }\n', '    \n', '    function _payfee() internal {\n', '        if(fee_balance <= 0) { return; }\n', '        uint val = fee_balance;\n', '        \n', '        RNDInvestor rinv = RNDInvestor(inv_contract);\n', '        rinv.takeEther.value( percent(val, 25) )();\n', '        rtm_contract.transfer( percent(val, 74) );\n', '        fee_balance = 0;\n', '        \n', '        emit PayFee(inv_contract, percent(val, 25) );\n', '        emit PayFee(rtm_contract, percent(val, 74) );\n', '    }\n', '    \n', '    /// function for sending ETH with balance check (does not interrupt the program if balance is not sufficient)\n', '    function sendEth(address _to, uint _val) internal returns(bool) {\n', '        if(address(this).balance < _val) {\n', '            emit TransferError(_to, _val);\n', '            return false;\n', '        }\n', '        _to.transfer(_val);\n', '        emit Withdraw(address(this), _to, _val);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    /// get winning ticket number basing on block hasg (block number is being calculated basing on specified displacement)\n', '    function getWinningNumber(uint _blockshift) internal constant returns (uint) {\n', '        return uint(blockhash(endBlockNumber - _blockshift)) % ticketsNum + 1;  \n', '    }\n', '    \n', '\n', '    /// current amount of jack pot 1\n', '    function jackPotA() public view returns (uint) {  \n', '        return percent(prizeFund(), 10);\n', '    }\n', '    \n', '    /// current amount of jack pot 2\n', '    function jackPotB() public view returns (uint) {\n', '        return percent(prizeFund(), 4);\n', '    }\n', '    \n', '\n', '    /// current amount of jack pot 3\n', '    function jackPotC() public view returns (uint) {\n', '        return percent(prizeFund(), 1);\n', '    }\n', '\n', '    /// current amount of prize fund\n', '    function prizeFund() public view returns (uint) {\n', '        return ( (ticketsNum * onePotWei) / 100 ) * 90;\n', '    }\n', '\n', '    /// function for calculating definite percent of a number\n', '    function percent(uint _val, uint _percent) public pure returns (uint) {\n', '        return ( _val * _percent ) / 100;\n', '    }\n', '\n', '\n', '    /// returns owner address using ticket number\n', '    function getTicketOwner(uint _num) public view returns (address) { \n', '        if(ticketsNum == 0) {\n', '            return 0;\n', '        }\n', '        return tickets[_num];\n', '    }\n', '\n', '    /// returns amount of tickets for the current draw in the possession of specified address\n', '    function getTicketsCount(address _addr) public view returns (uint) {\n', '        if(ticketsNum == 0) {\n', '            return 0;\n', '        }\n', '        uint num = 0;\n', '        for(uint i = 0; i < ticketsNum; i++) {\n', '            if(tickets[i] == _addr) {\n', '                num++;\n', '            }\n', '        }\n', '        return num;\n', '    }\n', '    \n', '    /// returns amount of tickets for the current draw in the possession of specified address\n', '    function balanceOf(address _addr) public view returns (uint) {\n', '        if(ticketsNum == 0) {\n', '            return 0;\n', '        }\n', '        uint num = 0;\n', '        for(uint i = 0; i < ticketsNum; i++) {\n', '            if(tickets[i] == _addr) {\n', '                num++;\n', '            }\n', '        }\n', '        return num;\n', '    }\n', '    \n', '    /// returns tickets numbers for the current draw in the possession of specified address\n', '    function getTicketsAtAdress(address _address) public view returns(uint[]) {\n', '        uint[] memory result = new uint[](getTicketsCount(_address)); \n', '        uint num = 0;\n', '        for(uint i = 0; i < ticketsNum; i++) {\n', '            if(tickets[i] == _address) {\n', '                result[num] = i;\n', '                num++;\n', '            }\n', '        }\n', '        return result;\n', '    }\n', '\n', '\n', '    /// returns amount of paid rewards for the current draw\n', '    function getLastWinner() public view returns(uint) {\n', '        return last_winner+1;\n', '    }\n', '\n', '\n', '    // /// investing contract address change\n', '    // function setInvContract(address _addr) onlyManager public {\n', '    //     inv_contract = _addr;\n', '    // }\n', '\n', '    /// team contract address change\n', '    function setRtmContract(address _addr) onlyManager public {\n', '        rtm_contract = _addr;\n', '    }\n', '    \n', '    function setAutoPayFee(bool _auto) onlyManager public {\n', '        autopayfee = _auto;\n', '    }\n', '\n', '   \n', '    function contractBalance() public view returns (uint256) {\n', '        return address(this).balance;\n', '    }\n', '    \n', '    function blockLeft() public view returns (uint256) {\n', '        if(endBlockNumber > block.number) {\n', '            return endBlockNumber - block.number;    \n', '        }\n', '        return 0;\n', '    }\n', '\n', '    /// method for direct contract replenishment with ETH\n', '    function deposit() public payable {\n', '        require(msg.value > 0);\n', '    }\n', '\n', '\n', '\n', '    ///Math functions\n', '\n', '    function safeMul(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a * b;\n', '        require(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint a, uint b) internal pure returns (uint) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '    \n', '    function subZero(uint a, uint b) internal pure returns (uint) {\n', '        if(a < b) {\n', '            return 0;\n', '        }\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c>=a && c>=b);\n', '        return c;\n', '    }\n', '    \n', '    \n', '    function destroy() public onlyManager {\n', '        selfdestruct(manager);\n', '    }\n', '    \n', '\n', '}\n', '\n', '\n', '/**\n', '* @title Random Investor Contract\n', '* @dev The Investor token contract\n', '*/\n', '\n', 'contract RNDInvestor {\n', '   \n', '    address public owner; // Token owner address\n', '    mapping (address => uint256) public balances; // balanceOf\n', '    address[] public addresses;\n', '\n', '    mapping (address => uint256) public debited;\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    string public standard = &#39;Random 1.1&#39;;\n', '    string public constant name = "Random Investor Token";\n', '    string public constant symbol = "RINVEST";\n', '    uint   public constant decimals = 0;\n', '    uint   public constant totalSupply = 2500;\n', '    uint   public raised = 0;\n', '\n', '    uint public ownerPrice = 1 ether;\n', '    uint public soldAmount = 0; // current sold amount (for current state)\n', '    bool public buyAllowed = true;\n', '    bool public transferAllowed = false;\n', '    \n', '    State public current_state; // current token state\n', '    \n', '    // States\n', '    enum State {\n', '        Presale,\n', '        ICO,\n', '        Public\n', '    }\n', '\n', '    //\n', '    // Events\n', '    // This generates a publics event on the blockchain that will notify clients\n', '    \n', '    event Sent(address from, address to, uint amount);\n', '    event Buy(address indexed sender, uint eth, uint fbt);\n', '    event Withdraw(address indexed sender, address to, uint eth);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Raised(uint _value);\n', '    event StateSwitch(State newState);\n', '    \n', '    //\n', '    // Modifiers\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyIfAllowed() {\n', '        if(!transferAllowed) { require(msg.sender == owner); }\n', '        _;\n', '    }\n', '\n', '    //\n', '    // Functions\n', '    // \n', '\n', '    // Constructor\n', '    function RNDInvestor() public {\n', '        owner = msg.sender;\n', '        balances[owner] = totalSupply;\n', '    }\n', '\n', '    // fallback function\n', '    function() payable public {\n', '        if(current_state == State.Public) {\n', '            takeEther();\n', '            return;\n', '        }\n', '        \n', '        require(buyAllowed);\n', '        require(msg.value >= ownerPrice);\n', '        require(msg.sender != owner);\n', '        \n', '        uint wei_value = msg.value;\n', '\n', '        // uint tokens = safeMul(wei_value, ownerPrice);\n', '        uint tokens = wei_value / ownerPrice;\n', '        uint cost = tokens * ownerPrice;\n', '        \n', '        if(current_state == State.Presale) {\n', '            tokens = tokens * 2;\n', '        }\n', '        \n', '        uint currentSoldAmount = safeAdd(tokens, soldAmount);\n', '\n', '        if (current_state == State.Presale) {\n', '            require(currentSoldAmount <= 1000);\n', '        }\n', '        \n', '        require(balances[owner] >= tokens);\n', '        \n', '        balances[owner] = safeSub(balances[owner], tokens);\n', '        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);\n', '        soldAmount = safeAdd(soldAmount, tokens);\n', '        \n', '        uint extra_ether = safeSub(msg.value, cost); \n', '        if(extra_ether > 0) {\n', '            msg.sender.transfer(extra_ether);\n', '        }\n', '    }\n', '    \n', '    \n', '    function takeEther() payable public {\n', '        if(msg.value > 0) {\n', '            raised += msg.value;\n', '            emit Raised(msg.value);\n', '        } else {\n', '            withdraw();\n', '        }\n', '    }\n', '    \n', '    function setOwnerPrice(uint _newPrice) public\n', '        onlyOwner\n', '        returns (bool success)\n', '    {\n', '        ownerPrice = _newPrice;\n', '        return true;\n', '    }\n', '    \n', '    function setTokenState(State _nextState) public\n', '        onlyOwner\n', '        returns (bool success)\n', '    {\n', '        bool canSwitchState\n', '            =  (current_state == State.Presale && _nextState == State.ICO)\n', '            || (current_state == State.Presale && _nextState == State.Public)\n', '            || (current_state == State.ICO && _nextState == State.Public) ;\n', '\n', '        require(canSwitchState);\n', '        \n', '        current_state = _nextState;\n', '\n', '        emit StateSwitch(_nextState);\n', '\n', '        return true;\n', '    }\n', '    \n', '    function setBuyAllowed(bool _allowed) public\n', '        onlyOwner\n', '        returns (bool success)\n', '    {\n', '        buyAllowed = _allowed;\n', '        return true;\n', '    }\n', '    \n', '    function allowTransfer() public\n', '        onlyOwner\n', '        returns (bool success)\n', '    {\n', '        transferAllowed = true;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '      if (newOwner != address(0)) {\n', '        owner = newOwner;\n', '      }\n', '    }\n', '\n', '    function safeMul(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a * b;\n', '        require(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '    \n', '    function safeSub(uint a, uint b) internal pure returns (uint) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c>=a && c>=b);\n', '        return c;\n', '    }\n', '\n', '    function withdraw() public returns (bool success) {\n', '        uint val = ethBalanceOf(msg.sender);\n', '        if(val > 0) {\n', '            msg.sender.transfer(val);\n', '            debited[msg.sender] += val;\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '\n', '\n', '    function ethBalanceOf(address _investor) public view returns (uint256 balance) {\n', '        uint val = (raised / totalSupply) * balances[_investor];\n', '        if(val >= debited[_investor]) {\n', '            return val - debited[_investor];\n', '        }\n', '        return 0;\n', '    }\n', '\n', '\n', '    function manager_withdraw() onlyOwner public {\n', '        uint summ = 0;\n', '        for(uint i = 0; i < addresses.length; i++) {\n', '            summ += ethBalanceOf(addresses[i]);\n', '        }\n', '        require(summ < address(this).balance);\n', '        msg.sender.transfer(address(this).balance - summ);\n', '    }\n', '\n', '    \n', '    function manual_withdraw() public {\n', '        for(uint i = 0; i < addresses.length; i++) {\n', '            addresses[i].transfer( ethBalanceOf(addresses[i]) );\n', '        }\n', '    }\n', '\n', '\n', '    function checkAddress(address _addr) public\n', '        returns (bool have_addr)\n', '    {\n', '        for(uint i=0; i<addresses.length; i++) {\n', '            if(addresses[i] == _addr) {\n', '                return true;\n', '            }\n', '        }\n', '        addresses.push(_addr);\n', '        return true;\n', '    }\n', '    \n', '\n', '    function destroy() public onlyOwner {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '\n', '    /**\n', '     * ERC 20 token functions\n', '     *\n', '     * https://github.com/ethereum/EIPs/issues/20\n', '     */\n', '    \n', '    function transfer(address _to, uint256 _value) public\n', '        onlyIfAllowed\n', '        returns (bool success) \n', '    {\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            emit Transfer(msg.sender, _to, _value);\n', '            checkAddress(_to);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public\n', '        onlyIfAllowed\n', '        returns (bool success)\n', '    {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            emit Transfer(_from, _to, _value);\n', '            checkAddress(_to);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success)\n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public\n', '        constant returns (uint256 remaining)\n', '    {\n', '      return allowed[_owner][_spender];\n', '    }\n', '    \n', '    \n', '    \n', '}']
['pragma solidity ^0.4.23;\n', '\n', '\n', 'contract Random {\n', '\n', '    uint public ticketsNum = 0;\n', '    \n', '    mapping(uint => address) internal tickets;\n', '    mapping(uint => bool) internal payed_back;\n', '    \n', '    uint32 public random_num = 0;\n', ' \n', '    uint public liveBlocksNumber = 5760;\n', '    uint public startBlockNumber = 0;\n', '    uint public endBlockNumber = 0;\n', '    \n', '    string public constant name = "Random Daily Lottery";\n', '    string public constant symbol = "RND";\n', '    uint   public constant decimals = 0;\n', '\n', '    uint public constant onePotWei = 10000000000000000; // 1 ticket cost is 0.01 ETH\n', '\n', '    address public inv_contract = 0x1d9Ed8e4c1591384A4b2fbd005ccCBDc58501cc0; // investing contract\n', '    address public rtm_contract = 0x67e5e779bfc7a93374f273dcaefce0db8b3559c2; // team contract\n', '    \n', '    address manager; \n', '    \n', '    uint public winners_count = 0; \n', '    uint public last_winner = 0; \n', '    uint public others_prize = 0;\n', '    \n', '    uint public fee_balance = 0; \n', '    bool public autopayfee = true;\n', '\n', '    // Events\n', '    // This generates a publics event on the blockchain that will notify clients\n', '    \n', '    event Buy(address indexed sender, uint eth); \n', '    event Withdraw(address indexed sender, address to, uint eth); \n', '    event Transfer(address indexed from, address indexed to, uint value); \n', '    event TransferError(address indexed to, uint value); // event (error): sending ETH from the contract was failed\n', '    event PayFee(address _to, uint value);\n', '    \n', '    \n', '    \n', '\n', '    // methods with following modifier can only be called by the manager\n', '    modifier onlyManager() {\n', '        require(msg.sender == manager);\n', '        _;\n', '    }\n', '    \n', '\n', '    // constructor\n', '    constructor() public {\n', '        manager = msg.sender;\n', '        startBlockNumber = block.number - 1;\n', '        endBlockNumber = startBlockNumber + liveBlocksNumber;\n', '    }\n', '\n', '\n', '    /// function for straight tickets purchase (sending ETH to the contract address)\n', '\n', '    function() public payable {\n', '        emit Transfer(msg.sender, 0, 0);\n', '        require(block.number < endBlockNumber || msg.value < 1000000000000000000);  \n', '        if (msg.value > 0 && last_winner == 0) { \n', '            uint val =  msg.value / onePotWei;  \n', '            uint i = 0;\n', '            for(i; i < val; i++) { tickets[ticketsNum+i] = msg.sender; }  \n', '            ticketsNum += val;                                    \n', '            emit Buy(msg.sender, msg.value);                      \n', '        }\n', '        if (block.number >= endBlockNumber) { \n', '            EndLottery(); \n', '        }\n', '    }\n', '    \n', "    /// function for ticket sending from owner's address to designated address\n", '    function transfer(address _to, uint _ticketNum) public {    \n', '        require(msg.sender == tickets[_ticketNum] && _to != address(0));\n', '        tickets[_ticketNum] = _to;\n', '        emit Transfer(msg.sender, _to, _ticketNum);\n', '    }\n', '\n', '\n', "    /// manager's opportunity to write off ETH from the contract, in a case of unforseen contract blocking (possible in only case of more than 24 hours from the moment of lottery ending had passed and a new one has not started)\n", '    function manager_withdraw() onlyManager public {\n', '        require(block.number >= endBlockNumber + liveBlocksNumber);\n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '    \n', '    /// lottery ending  \n', '    function EndLottery() public payable returns (bool success) {\n', '        require(block.number >= endBlockNumber); \n', '        uint tn = ticketsNum;\n', '        if(tn < 3) { \n', '            tn = 0;\n', '            if(msg.value > 0) { msg.sender.transfer(msg.value); }  \n', '            startNewDraw(0);\n', '            return false;\n', '        }\n', '        uint pf = prizeFund(); \n', '        uint jp1 = percent(pf, 10);\n', '        uint jp2 = percent(pf, 4);\n', '        uint jp3 = percent(pf, 1);\n', '        uint lastbet_prize = onePotWei*10;  \n', '\n', '        if(tn < 100) { lastbet_prize = onePotWei; }\n', '        \n', '        if(last_winner == 0) { \n', '            \n', '            winners_count = percent(tn, 4) + 3; \n', '\n', '            uint prizes = jp1 + jp2 + jp3 + lastbet_prize*2; \n', '            \n', '            uint full_prizes = jp1 + jp2 + jp3 + ( lastbet_prize * (winners_count+1)/10 );\n', '            \n', '            if(winners_count < 10) {\n', '                if(prizes > pf) {\n', '                    others_prize = 0;\n', '                } else {\n', '                    others_prize = pf - prizes;    \n', '                }\n', '            } else {\n', '                if(full_prizes > pf) {\n', '                    others_prize = 0;\n', '                } else {\n', '                    others_prize = pf - full_prizes;    \n', '                }\n', '            }\n', '            sendEth(tickets[getWinningNumber(1)], jp1);\n', '            sendEth(tickets[getWinningNumber(2)], jp2);\n', '            sendEth(tickets[getWinningNumber(3)], jp3);\n', '            last_winner += 3;\n', '            \n', '            sendEth(msg.sender, lastbet_prize + msg.value);\n', '            return true;\n', '        } \n', '        \n', '        if(last_winner < winners_count && others_prize > 0) {\n', '            \n', '            uint val = others_prize / winners_count;\n', '            uint i;\n', '            uint8 cnt = 0;\n', '            for(i = last_winner; i < winners_count; i++) {\n', '                sendEth(tickets[getWinningNumber(i+3)], val);\n', '                cnt++;\n', '                if(cnt >= 9) {\n', '                    last_winner = i;\n', '                    return true;\n', '                }\n', '            }\n', '            last_winner = i;\n', '            if(cnt < 9) { \n', '                startNewDraw(lastbet_prize + msg.value); \n', '            } else {\n', '                sendEth(msg.sender, lastbet_prize + msg.value);\n', '            }\n', '            return true;\n', '            \n', '        } else {\n', '\n', '            startNewDraw(lastbet_prize + msg.value);\n', '        }\n', '        \n', '        return true;\n', '    }\n', '    \n', '    /// new draw start\n', '    function startNewDraw(uint _msg_value) internal { \n', '        ticketsNum = 0;\n', '        startBlockNumber = block.number - 1;\n', '        endBlockNumber = startBlockNumber + liveBlocksNumber;\n', '        random_num += 1;\n', '        winners_count = 0;\n', '        last_winner = 0;\n', '        \n', '        fee_balance = subZero(address(this).balance, _msg_value); \n', '        if(msg.value > 0) { sendEth(msg.sender, _msg_value); }\n', '        // fee_balance = address(this).balance;\n', '        \n', '        if(autopayfee) { _payfee(); }\n', '    }\n', '    \n', '    /// sending rewards to the investing, team and marketing contracts \n', '    function payfee() public {   \n', '        require(fee_balance > 0);\n', '        uint val = fee_balance;\n', '        \n', '        RNDInvestor rinv = RNDInvestor(inv_contract);\n', '        rinv.takeEther.value( percent(val, 25) )();\n', '        rtm_contract.transfer( percent(val, 74) );\n', '        fee_balance = 0;\n', '        \n', '        emit PayFee(inv_contract, percent(val, 25) );\n', '        emit PayFee(rtm_contract, percent(val, 74) );\n', '    }\n', '    \n', '    function _payfee() internal {\n', '        if(fee_balance <= 0) { return; }\n', '        uint val = fee_balance;\n', '        \n', '        RNDInvestor rinv = RNDInvestor(inv_contract);\n', '        rinv.takeEther.value( percent(val, 25) )();\n', '        rtm_contract.transfer( percent(val, 74) );\n', '        fee_balance = 0;\n', '        \n', '        emit PayFee(inv_contract, percent(val, 25) );\n', '        emit PayFee(rtm_contract, percent(val, 74) );\n', '    }\n', '    \n', '    /// function for sending ETH with balance check (does not interrupt the program if balance is not sufficient)\n', '    function sendEth(address _to, uint _val) internal returns(bool) {\n', '        if(address(this).balance < _val) {\n', '            emit TransferError(_to, _val);\n', '            return false;\n', '        }\n', '        _to.transfer(_val);\n', '        emit Withdraw(address(this), _to, _val);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    /// get winning ticket number basing on block hasg (block number is being calculated basing on specified displacement)\n', '    function getWinningNumber(uint _blockshift) internal constant returns (uint) {\n', '        return uint(blockhash(endBlockNumber - _blockshift)) % ticketsNum + 1;  \n', '    }\n', '    \n', '\n', '    /// current amount of jack pot 1\n', '    function jackPotA() public view returns (uint) {  \n', '        return percent(prizeFund(), 10);\n', '    }\n', '    \n', '    /// current amount of jack pot 2\n', '    function jackPotB() public view returns (uint) {\n', '        return percent(prizeFund(), 4);\n', '    }\n', '    \n', '\n', '    /// current amount of jack pot 3\n', '    function jackPotC() public view returns (uint) {\n', '        return percent(prizeFund(), 1);\n', '    }\n', '\n', '    /// current amount of prize fund\n', '    function prizeFund() public view returns (uint) {\n', '        return ( (ticketsNum * onePotWei) / 100 ) * 90;\n', '    }\n', '\n', '    /// function for calculating definite percent of a number\n', '    function percent(uint _val, uint _percent) public pure returns (uint) {\n', '        return ( _val * _percent ) / 100;\n', '    }\n', '\n', '\n', '    /// returns owner address using ticket number\n', '    function getTicketOwner(uint _num) public view returns (address) { \n', '        if(ticketsNum == 0) {\n', '            return 0;\n', '        }\n', '        return tickets[_num];\n', '    }\n', '\n', '    /// returns amount of tickets for the current draw in the possession of specified address\n', '    function getTicketsCount(address _addr) public view returns (uint) {\n', '        if(ticketsNum == 0) {\n', '            return 0;\n', '        }\n', '        uint num = 0;\n', '        for(uint i = 0; i < ticketsNum; i++) {\n', '            if(tickets[i] == _addr) {\n', '                num++;\n', '            }\n', '        }\n', '        return num;\n', '    }\n', '    \n', '    /// returns amount of tickets for the current draw in the possession of specified address\n', '    function balanceOf(address _addr) public view returns (uint) {\n', '        if(ticketsNum == 0) {\n', '            return 0;\n', '        }\n', '        uint num = 0;\n', '        for(uint i = 0; i < ticketsNum; i++) {\n', '            if(tickets[i] == _addr) {\n', '                num++;\n', '            }\n', '        }\n', '        return num;\n', '    }\n', '    \n', '    /// returns tickets numbers for the current draw in the possession of specified address\n', '    function getTicketsAtAdress(address _address) public view returns(uint[]) {\n', '        uint[] memory result = new uint[](getTicketsCount(_address)); \n', '        uint num = 0;\n', '        for(uint i = 0; i < ticketsNum; i++) {\n', '            if(tickets[i] == _address) {\n', '                result[num] = i;\n', '                num++;\n', '            }\n', '        }\n', '        return result;\n', '    }\n', '\n', '\n', '    /// returns amount of paid rewards for the current draw\n', '    function getLastWinner() public view returns(uint) {\n', '        return last_winner+1;\n', '    }\n', '\n', '\n', '    // /// investing contract address change\n', '    // function setInvContract(address _addr) onlyManager public {\n', '    //     inv_contract = _addr;\n', '    // }\n', '\n', '    /// team contract address change\n', '    function setRtmContract(address _addr) onlyManager public {\n', '        rtm_contract = _addr;\n', '    }\n', '    \n', '    function setAutoPayFee(bool _auto) onlyManager public {\n', '        autopayfee = _auto;\n', '    }\n', '\n', '   \n', '    function contractBalance() public view returns (uint256) {\n', '        return address(this).balance;\n', '    }\n', '    \n', '    function blockLeft() public view returns (uint256) {\n', '        if(endBlockNumber > block.number) {\n', '            return endBlockNumber - block.number;    \n', '        }\n', '        return 0;\n', '    }\n', '\n', '    /// method for direct contract replenishment with ETH\n', '    function deposit() public payable {\n', '        require(msg.value > 0);\n', '    }\n', '\n', '\n', '\n', '    ///Math functions\n', '\n', '    function safeMul(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a * b;\n', '        require(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint a, uint b) internal pure returns (uint) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '    \n', '    function subZero(uint a, uint b) internal pure returns (uint) {\n', '        if(a < b) {\n', '            return 0;\n', '        }\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c>=a && c>=b);\n', '        return c;\n', '    }\n', '    \n', '    \n', '    function destroy() public onlyManager {\n', '        selfdestruct(manager);\n', '    }\n', '    \n', '\n', '}\n', '\n', '\n', '/**\n', '* @title Random Investor Contract\n', '* @dev The Investor token contract\n', '*/\n', '\n', 'contract RNDInvestor {\n', '   \n', '    address public owner; // Token owner address\n', '    mapping (address => uint256) public balances; // balanceOf\n', '    address[] public addresses;\n', '\n', '    mapping (address => uint256) public debited;\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', "    string public standard = 'Random 1.1';\n", '    string public constant name = "Random Investor Token";\n', '    string public constant symbol = "RINVEST";\n', '    uint   public constant decimals = 0;\n', '    uint   public constant totalSupply = 2500;\n', '    uint   public raised = 0;\n', '\n', '    uint public ownerPrice = 1 ether;\n', '    uint public soldAmount = 0; // current sold amount (for current state)\n', '    bool public buyAllowed = true;\n', '    bool public transferAllowed = false;\n', '    \n', '    State public current_state; // current token state\n', '    \n', '    // States\n', '    enum State {\n', '        Presale,\n', '        ICO,\n', '        Public\n', '    }\n', '\n', '    //\n', '    // Events\n', '    // This generates a publics event on the blockchain that will notify clients\n', '    \n', '    event Sent(address from, address to, uint amount);\n', '    event Buy(address indexed sender, uint eth, uint fbt);\n', '    event Withdraw(address indexed sender, address to, uint eth);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Raised(uint _value);\n', '    event StateSwitch(State newState);\n', '    \n', '    //\n', '    // Modifiers\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyIfAllowed() {\n', '        if(!transferAllowed) { require(msg.sender == owner); }\n', '        _;\n', '    }\n', '\n', '    //\n', '    // Functions\n', '    // \n', '\n', '    // Constructor\n', '    function RNDInvestor() public {\n', '        owner = msg.sender;\n', '        balances[owner] = totalSupply;\n', '    }\n', '\n', '    // fallback function\n', '    function() payable public {\n', '        if(current_state == State.Public) {\n', '            takeEther();\n', '            return;\n', '        }\n', '        \n', '        require(buyAllowed);\n', '        require(msg.value >= ownerPrice);\n', '        require(msg.sender != owner);\n', '        \n', '        uint wei_value = msg.value;\n', '\n', '        // uint tokens = safeMul(wei_value, ownerPrice);\n', '        uint tokens = wei_value / ownerPrice;\n', '        uint cost = tokens * ownerPrice;\n', '        \n', '        if(current_state == State.Presale) {\n', '            tokens = tokens * 2;\n', '        }\n', '        \n', '        uint currentSoldAmount = safeAdd(tokens, soldAmount);\n', '\n', '        if (current_state == State.Presale) {\n', '            require(currentSoldAmount <= 1000);\n', '        }\n', '        \n', '        require(balances[owner] >= tokens);\n', '        \n', '        balances[owner] = safeSub(balances[owner], tokens);\n', '        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);\n', '        soldAmount = safeAdd(soldAmount, tokens);\n', '        \n', '        uint extra_ether = safeSub(msg.value, cost); \n', '        if(extra_ether > 0) {\n', '            msg.sender.transfer(extra_ether);\n', '        }\n', '    }\n', '    \n', '    \n', '    function takeEther() payable public {\n', '        if(msg.value > 0) {\n', '            raised += msg.value;\n', '            emit Raised(msg.value);\n', '        } else {\n', '            withdraw();\n', '        }\n', '    }\n', '    \n', '    function setOwnerPrice(uint _newPrice) public\n', '        onlyOwner\n', '        returns (bool success)\n', '    {\n', '        ownerPrice = _newPrice;\n', '        return true;\n', '    }\n', '    \n', '    function setTokenState(State _nextState) public\n', '        onlyOwner\n', '        returns (bool success)\n', '    {\n', '        bool canSwitchState\n', '            =  (current_state == State.Presale && _nextState == State.ICO)\n', '            || (current_state == State.Presale && _nextState == State.Public)\n', '            || (current_state == State.ICO && _nextState == State.Public) ;\n', '\n', '        require(canSwitchState);\n', '        \n', '        current_state = _nextState;\n', '\n', '        emit StateSwitch(_nextState);\n', '\n', '        return true;\n', '    }\n', '    \n', '    function setBuyAllowed(bool _allowed) public\n', '        onlyOwner\n', '        returns (bool success)\n', '    {\n', '        buyAllowed = _allowed;\n', '        return true;\n', '    }\n', '    \n', '    function allowTransfer() public\n', '        onlyOwner\n', '        returns (bool success)\n', '    {\n', '        transferAllowed = true;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '      if (newOwner != address(0)) {\n', '        owner = newOwner;\n', '      }\n', '    }\n', '\n', '    function safeMul(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a * b;\n', '        require(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '    \n', '    function safeSub(uint a, uint b) internal pure returns (uint) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c>=a && c>=b);\n', '        return c;\n', '    }\n', '\n', '    function withdraw() public returns (bool success) {\n', '        uint val = ethBalanceOf(msg.sender);\n', '        if(val > 0) {\n', '            msg.sender.transfer(val);\n', '            debited[msg.sender] += val;\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '\n', '\n', '    function ethBalanceOf(address _investor) public view returns (uint256 balance) {\n', '        uint val = (raised / totalSupply) * balances[_investor];\n', '        if(val >= debited[_investor]) {\n', '            return val - debited[_investor];\n', '        }\n', '        return 0;\n', '    }\n', '\n', '\n', '    function manager_withdraw() onlyOwner public {\n', '        uint summ = 0;\n', '        for(uint i = 0; i < addresses.length; i++) {\n', '            summ += ethBalanceOf(addresses[i]);\n', '        }\n', '        require(summ < address(this).balance);\n', '        msg.sender.transfer(address(this).balance - summ);\n', '    }\n', '\n', '    \n', '    function manual_withdraw() public {\n', '        for(uint i = 0; i < addresses.length; i++) {\n', '            addresses[i].transfer( ethBalanceOf(addresses[i]) );\n', '        }\n', '    }\n', '\n', '\n', '    function checkAddress(address _addr) public\n', '        returns (bool have_addr)\n', '    {\n', '        for(uint i=0; i<addresses.length; i++) {\n', '            if(addresses[i] == _addr) {\n', '                return true;\n', '            }\n', '        }\n', '        addresses.push(_addr);\n', '        return true;\n', '    }\n', '    \n', '\n', '    function destroy() public onlyOwner {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '\n', '    /**\n', '     * ERC 20 token functions\n', '     *\n', '     * https://github.com/ethereum/EIPs/issues/20\n', '     */\n', '    \n', '    function transfer(address _to, uint256 _value) public\n', '        onlyIfAllowed\n', '        returns (bool success) \n', '    {\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            emit Transfer(msg.sender, _to, _value);\n', '            checkAddress(_to);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public\n', '        onlyIfAllowed\n', '        returns (bool success)\n', '    {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            emit Transfer(_from, _to, _value);\n', '            checkAddress(_to);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success)\n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public\n', '        constant returns (uint256 remaining)\n', '    {\n', '      return allowed[_owner][_spender];\n', '    }\n', '    \n', '    \n', '    \n', '}']
