['pragma solidity ^0.4.23;\n', '\n', 'contract Win20ETH {\n', '\n', '\n', '    struct Comissions{\n', '        uint total;\n', '        uint referal;\n', '        uint nextJackpot;\n', '    }\n', '\n', '    uint adminComission;\n', '\n', '    Comissions comission;\n', '\n', '    uint ticketPrice;\n', '    uint blockOffset;\n', '    uint jackpot;\n', '\n', '    address owner;\n', '    mapping(address => uint) referalProfits;\n', '    address[] referals;\n', '\n', '    mapping(uint => Game) games;\n', '\n', '\tevent PurchaseError(address oldOwner, uint amount);\n', '\n', '\tstruct Game{\n', '\t    uint blockId;\n', '\t    address[] gamers;\n', '\t    mapping(address=>bool) pays;\n', '\t}\n', '\n', '\tmodifier onlyOwner() {\n', '\t\trequire(msg.sender == owner);\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Sets owner and default lottery params\n', '\t */\n', '\tconstructor() public {\n', '\t\towner = msg.sender;\n', '\t\tupdateParams(0.005 ether, 1, 10, 5, 1);\n', '\t\tadminComission =0;\n', '\n', '\t}\n', '\tfunction withdrawAdmin() public onlyOwner{\n', '\t    require(adminComission>0);\n', '\t    uint t = adminComission;\n', '\t    adminComission = 0;\n', '\t    owner.transfer(t);\n', '\n', '\n', '\t}\n', '\tfunction updateParams(\n', '\t\tuint _ticketPrice,\n', '\t\tuint _blockOffset,\n', '\t\tuint _total,\n', '\t\tuint _refPercent,\n', '\t\tuint _nextJackpotPercent\n', '\n', '\t) public onlyOwner {\n', '\t\tticketPrice = _ticketPrice;\n', '\t\tcomission.total = _total;\n', '\t\tcomission.referal = _refPercent;\n', '\t\tcomission.nextJackpot =  _nextJackpotPercent;\n', '\t\tblockOffset = _blockOffset;\n', '\n', '\t}\n', '\n', '\n', '\n', '    function buyTicketWithRef(address _ref) public payable{\n', '       require(msg.value == ticketPrice);\n', '       bool found = false;\n', '       for(uint i=0; i< games[block.number+blockOffset].gamers.length;i++){\n', '        \t      if( msg.sender == games[block.number+blockOffset].gamers[i]){\n', '        \t        found = true;\n', '        \t        break;\n', '        \t      }\n', '        \t    }\n', '        \t    require(found == false);\n', '\t    jackpot+=msg.value;\n', '\t    games[block.number+blockOffset].gamers.push(msg.sender);\n', '\t    games[block.number+blockOffset].pays[msg.sender] = false;\n', '\t    if( _ref != address(0) && comission.referal>0){\n', '\t        referalProfits[_ref]+= msg.value*comission.referal/100;\n', '\t        bool _found = false;\n', '\t        for(i = 0;i<referals.length;i++){\n', '\t            if( referals[i] == _ref){\n', '\t                _found=true;\n', '\t                break;\n', '\t            }\n', '\t        }\n', '\t        if(!_found){\n', '\t            referals.push(_ref);\n', '\t        }\n', '\t    }\n', '    }\n', '\tfunction buyTicket() public payable {\n', '\n', '\t    require(msg.value == ticketPrice);\n', '\t    bool found = false;\n', '\t    for(uint i=0; i< games[block.number+blockOffset].gamers.length;i++){\n', '\t      if( msg.sender == games[block.number+blockOffset].gamers[i]){\n', '\t        found = true;\n', '\t        break;\n', '\t      }\n', '\t    }\n', '\t    require(found == false);\n', '\t    jackpot+=msg.value;\n', '\t    games[block.number+blockOffset].gamers.push(msg.sender);\n', '\t    games[block.number+blockOffset].pays[msg.sender] = false;\n', '\n', '\n', '\t}\n', '\n', '\n', '\tfunction getLotteryAtIndex(uint _index) public view returns(\n', '\t\taddress[] _gamers,\n', '\t\tuint _jackpot\n', '\t) {\n', '        _gamers = games[_index].gamers;\n', '        _jackpot = jackpot;\n', '\t}\n', '    function _checkWin( uint _blockIndex, address candidate) internal view returns(uint) {\n', '            uint32 blockHash = uint32(blockhash(_blockIndex));\n', '            uint32 hit = blockHash ^ uint32(candidate);\n', '            bool hit1 = (hit & 0xF == 0)?true:false;\n', '            bool hit2 = (hit1 && ((hit & 0xF0)==0))?true:false;\n', '            bool hit3 = (hit2 && ((hit & 0xF00)==0))?true:false;\n', '            bool _found  = false;\n', '\n', '            for(uint i=0;i<games[_blockIndex].gamers.length;i++){\n', '                if(games[_blockIndex].gamers[i] == candidate) {\n', '                    _found = true;\n', '                }\n', '            }\n', '            if(!_found) return 0;\n', '            uint amount = 0;\n', '            if ( hit1 ) amount = 2*ticketPrice;\n', '            if ( hit2 ) amount = 4*ticketPrice;\n', '            if ( hit3 ) amount = jackpot;\n', '            return amount;\n', '\n', '\n', '    }\n', '    function checkWin( uint _blockIndex, address candidate) public view returns(\n', '        uint amount\n', '        ){\n', '            amount = _checkWin(_blockIndex, candidate);\n', '        }\n', '\n', '\n', '\n', '\n', '\tfunction withdrawForWinner(uint _blockIndex) public {\n', '\t    require((block.number - 100) < _blockIndex );\n', '\t\trequire(games[_blockIndex].gamers.length > 0);\n', '\t\trequire(games[_blockIndex].pays[msg.sender]==false);\n', '\n', '\t\tuint amount =  _checkWin(_blockIndex, msg.sender) ;\n', '\t\trequire(amount>0);\n', '\n', '\t\taddress winner = msg.sender;\n', '\t\tif( amount > jackpot) amount=jackpot;\n', '\t\tif( amount == jackpot) amount = amount*99/100;\n', '\t\t\n', '\t\tgames[_blockIndex].pays[msg.sender] = true;\n', '\n', '\t\tuint winnerSum = amount*(100-comission.total)/100;\n', '\t\tuint techSum = amount-winnerSum;\n', '\n', '\t\twinner.transfer( winnerSum );\n', '\t\tfor(uint i=0;i<referals.length;i++){\n', '\t\t    if( referalProfits[referals[i]]>0 && referalProfits[referals[i]]<techSum){\n', '\t\t        referals[i].transfer( referalProfits[referals[i]]);\n', '\t\t        techSum -= referalProfits[referals[i]];\n', '\t\t        referalProfits[referals[i]] = 0;\n', '\t\t }\n', '\t\t}\n', '\t\tif( techSum > 0){\n', '\t\t  owner.transfer(techSum);\n', '\t\t}\n', '\t\tjackpot = jackpot-amount;\n', '\n', '\n', '\n', '\n', '\t}\n', '\tfunction getJackpot() public view returns(uint){\n', '\t    return jackpot;\n', '\t}\n', '\tfunction getAdminComission() public view returns(uint){\n', '\t    return adminComission;\n', '\t}\n', '\n', '    function balanceOf(address _user) public view returns(uint) {\n', '\t\treturn referalProfits[_user];\n', '    }\n', '\n', '\t/**\n', '\t * @dev Disallow users to send ether directly to the contract\n', '\t */\n', '\tfunction() public payable {\n', '\t    if( msg.sender != owner){\n', '\t        revert();\n', '\t    }\n', '\t    jackpot += msg.value;\n', '\t}\n', '\n', '\n', '}']
['pragma solidity ^0.4.23;\n', '\n', 'contract Win20ETH {\n', '\n', '\n', '    struct Comissions{\n', '        uint total;\n', '        uint referal;\n', '        uint nextJackpot;\n', '    }\n', '\n', '    uint adminComission;\n', '\n', '    Comissions comission;\n', '\n', '    uint ticketPrice;\n', '    uint blockOffset;\n', '    uint jackpot;\n', '\n', '    address owner;\n', '    mapping(address => uint) referalProfits;\n', '    address[] referals;\n', '\n', '    mapping(uint => Game) games;\n', '\n', '\tevent PurchaseError(address oldOwner, uint amount);\n', '\n', '\tstruct Game{\n', '\t    uint blockId;\n', '\t    address[] gamers;\n', '\t    mapping(address=>bool) pays;\n', '\t}\n', '\n', '\tmodifier onlyOwner() {\n', '\t\trequire(msg.sender == owner);\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Sets owner and default lottery params\n', '\t */\n', '\tconstructor() public {\n', '\t\towner = msg.sender;\n', '\t\tupdateParams(0.005 ether, 1, 10, 5, 1);\n', '\t\tadminComission =0;\n', '\n', '\t}\n', '\tfunction withdrawAdmin() public onlyOwner{\n', '\t    require(adminComission>0);\n', '\t    uint t = adminComission;\n', '\t    adminComission = 0;\n', '\t    owner.transfer(t);\n', '\n', '\n', '\t}\n', '\tfunction updateParams(\n', '\t\tuint _ticketPrice,\n', '\t\tuint _blockOffset,\n', '\t\tuint _total,\n', '\t\tuint _refPercent,\n', '\t\tuint _nextJackpotPercent\n', '\n', '\t) public onlyOwner {\n', '\t\tticketPrice = _ticketPrice;\n', '\t\tcomission.total = _total;\n', '\t\tcomission.referal = _refPercent;\n', '\t\tcomission.nextJackpot =  _nextJackpotPercent;\n', '\t\tblockOffset = _blockOffset;\n', '\n', '\t}\n', '\n', '\n', '\n', '    function buyTicketWithRef(address _ref) public payable{\n', '       require(msg.value == ticketPrice);\n', '       bool found = false;\n', '       for(uint i=0; i< games[block.number+blockOffset].gamers.length;i++){\n', '        \t      if( msg.sender == games[block.number+blockOffset].gamers[i]){\n', '        \t        found = true;\n', '        \t        break;\n', '        \t      }\n', '        \t    }\n', '        \t    require(found == false);\n', '\t    jackpot+=msg.value;\n', '\t    games[block.number+blockOffset].gamers.push(msg.sender);\n', '\t    games[block.number+blockOffset].pays[msg.sender] = false;\n', '\t    if( _ref != address(0) && comission.referal>0){\n', '\t        referalProfits[_ref]+= msg.value*comission.referal/100;\n', '\t        bool _found = false;\n', '\t        for(i = 0;i<referals.length;i++){\n', '\t            if( referals[i] == _ref){\n', '\t                _found=true;\n', '\t                break;\n', '\t            }\n', '\t        }\n', '\t        if(!_found){\n', '\t            referals.push(_ref);\n', '\t        }\n', '\t    }\n', '    }\n', '\tfunction buyTicket() public payable {\n', '\n', '\t    require(msg.value == ticketPrice);\n', '\t    bool found = false;\n', '\t    for(uint i=0; i< games[block.number+blockOffset].gamers.length;i++){\n', '\t      if( msg.sender == games[block.number+blockOffset].gamers[i]){\n', '\t        found = true;\n', '\t        break;\n', '\t      }\n', '\t    }\n', '\t    require(found == false);\n', '\t    jackpot+=msg.value;\n', '\t    games[block.number+blockOffset].gamers.push(msg.sender);\n', '\t    games[block.number+blockOffset].pays[msg.sender] = false;\n', '\n', '\n', '\t}\n', '\n', '\n', '\tfunction getLotteryAtIndex(uint _index) public view returns(\n', '\t\taddress[] _gamers,\n', '\t\tuint _jackpot\n', '\t) {\n', '        _gamers = games[_index].gamers;\n', '        _jackpot = jackpot;\n', '\t}\n', '    function _checkWin( uint _blockIndex, address candidate) internal view returns(uint) {\n', '            uint32 blockHash = uint32(blockhash(_blockIndex));\n', '            uint32 hit = blockHash ^ uint32(candidate);\n', '            bool hit1 = (hit & 0xF == 0)?true:false;\n', '            bool hit2 = (hit1 && ((hit & 0xF0)==0))?true:false;\n', '            bool hit3 = (hit2 && ((hit & 0xF00)==0))?true:false;\n', '            bool _found  = false;\n', '\n', '            for(uint i=0;i<games[_blockIndex].gamers.length;i++){\n', '                if(games[_blockIndex].gamers[i] == candidate) {\n', '                    _found = true;\n', '                }\n', '            }\n', '            if(!_found) return 0;\n', '            uint amount = 0;\n', '            if ( hit1 ) amount = 2*ticketPrice;\n', '            if ( hit2 ) amount = 4*ticketPrice;\n', '            if ( hit3 ) amount = jackpot;\n', '            return amount;\n', '\n', '\n', '    }\n', '    function checkWin( uint _blockIndex, address candidate) public view returns(\n', '        uint amount\n', '        ){\n', '            amount = _checkWin(_blockIndex, candidate);\n', '        }\n', '\n', '\n', '\n', '\n', '\tfunction withdrawForWinner(uint _blockIndex) public {\n', '\t    require((block.number - 100) < _blockIndex );\n', '\t\trequire(games[_blockIndex].gamers.length > 0);\n', '\t\trequire(games[_blockIndex].pays[msg.sender]==false);\n', '\n', '\t\tuint amount =  _checkWin(_blockIndex, msg.sender) ;\n', '\t\trequire(amount>0);\n', '\n', '\t\taddress winner = msg.sender;\n', '\t\tif( amount > jackpot) amount=jackpot;\n', '\t\tif( amount == jackpot) amount = amount*99/100;\n', '\t\t\n', '\t\tgames[_blockIndex].pays[msg.sender] = true;\n', '\n', '\t\tuint winnerSum = amount*(100-comission.total)/100;\n', '\t\tuint techSum = amount-winnerSum;\n', '\n', '\t\twinner.transfer( winnerSum );\n', '\t\tfor(uint i=0;i<referals.length;i++){\n', '\t\t    if( referalProfits[referals[i]]>0 && referalProfits[referals[i]]<techSum){\n', '\t\t        referals[i].transfer( referalProfits[referals[i]]);\n', '\t\t        techSum -= referalProfits[referals[i]];\n', '\t\t        referalProfits[referals[i]] = 0;\n', '\t\t }\n', '\t\t}\n', '\t\tif( techSum > 0){\n', '\t\t  owner.transfer(techSum);\n', '\t\t}\n', '\t\tjackpot = jackpot-amount;\n', '\n', '\n', '\n', '\n', '\t}\n', '\tfunction getJackpot() public view returns(uint){\n', '\t    return jackpot;\n', '\t}\n', '\tfunction getAdminComission() public view returns(uint){\n', '\t    return adminComission;\n', '\t}\n', '\n', '    function balanceOf(address _user) public view returns(uint) {\n', '\t\treturn referalProfits[_user];\n', '    }\n', '\n', '\t/**\n', '\t * @dev Disallow users to send ether directly to the contract\n', '\t */\n', '\tfunction() public payable {\n', '\t    if( msg.sender != owner){\n', '\t        revert();\n', '\t    }\n', '\t    jackpot += msg.value;\n', '\t}\n', '\n', '\n', '}']
