['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title owned\n', ' * @dev The owned contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Controlled\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Controlled is owned {\n', '\n', '  bool public paused = false;\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken.\n', ' */\n', 'contract BasicToken is Controlled{\n', '    using SafeMath for uint256;\n', '    \n', '    uint256       _supply;\n', '    mapping (address => uint256)    _balances;\n', '    \n', '    event Transfer( address indexed from, address indexed to, uint256 value);\n', '\n', '    function BasicToken() public {    }\n', '    \n', '    function totalSupply() public view returns (uint256) {\n', '        return _supply;\n', '    }\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return _balances[_owner];\n', '    }\n', '    \n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        require(_balances[msg.sender] >= _value && _value > 0);\n', '        \n', '        _balances[msg.sender] =_balances[msg.sender].sub(_value);\n', '        _balances[_to] =_balances[_to].add(_value);\n', '        \n', '        emit Transfer(msg.sender, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '  \n', '}\n', '\n', 'contract AicToken is BasicToken {\n', '    string  constant public symbol = "AIC";\n', '    string  constant public name = "AicBlock";\n', '    uint256 constant public decimals = 18;\n', '    uint256 public lockedCounts = 0;\n', '\n', '    struct LockStruct {\n', '        uint256 unlockTime;\n', '        bool locked;\n', '    }\n', '    \n', '    uint256[][] public unlockCountArray;\n', '    address[] public addressArray;\n', '    LockStruct[] public unlockTimeMap;\n', '\n', '    function AicToken() public {\n', '        \n', '        _supply = 10*(10**8)*(10**18);\n', '        _balances[0x01] = _supply;\n', '        lockedCounts = _supply;\n', '        \n', '        //2018\n', '        unlockTimeMap.push(LockStruct({unlockTime:1527782400, locked: true})); \n', '        unlockTimeMap.push(LockStruct({unlockTime:1535731200, locked: true})); \n', '        unlockTimeMap.push(LockStruct({unlockTime:1543593600, locked: true})); \n', '        //2019\n', '        unlockTimeMap.push(LockStruct({unlockTime:1551369600, locked: true})); \n', '        unlockTimeMap.push(LockStruct({unlockTime:1559318400, locked: true})); \n', '        unlockTimeMap.push(LockStruct({unlockTime:1567267200, locked: true})); \n', '        unlockTimeMap.push(LockStruct({unlockTime:1575129600, locked: true})); \n', '        //2020\n', '        unlockTimeMap.push(LockStruct({unlockTime:1582992000, locked: true})); \n', '        unlockTimeMap.push(LockStruct({unlockTime:1590940800, locked: true})); \n', '        unlockTimeMap.push(LockStruct({unlockTime:1598889600, locked: true}));\n', '        unlockTimeMap.push(LockStruct({unlockTime:1606752000, locked: true}));\n', '        \n', '        unlockCountArray = new uint256[][](7);\n', '        unlockCountArray[0] = [28000000,10500000,10500000,10500000,10500000,0,0,0,0,0,0];\n', '        unlockCountArray[1] = [70000000,17500000,17500000,17500000,17500000,0,0,0,0,0,0];\n', '        unlockCountArray[2] = [168000000,18000000,18000000,18000000,18000000,0,0,0,0,0,0];\n', '        unlockCountArray[3] = [0,0,25000000,0,25000000,0,0,0,0,0,0];\n', '        unlockCountArray[4] = [0,0,20000000,0,20000000,0,20000000,0,20000000,0,20000000];\n', '        unlockCountArray[5] = [0,0,50000000,0,50000000,0,50000000,0,50000000,0,50000000];\n', '        unlockCountArray[6] = [0,15000000,15000000,15000000,15000000,15000000,15000000,15000000,15000000,15000000,15000000];\n', '    \n', '    }\n', '  \n', '    \n', '    function setAddressArr(address[] self) onlyOwner public {\n', '        //Only call once\n', '        require(unlockTimeMap[0].locked);\n', '        require (self.length==7);\n', '        \n', '        addressArray = new address[](self.length);\n', '        for (uint i = 0; i < self.length; i++){\n', '           addressArray[i]=self[i]; \n', '        }\n', '    \n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require (now >= unlockTimeMap[0].unlockTime);\n', '\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '     /**\n', '     * @dev unlock , only can be called by owner.\n', '     */\n', '    function unlock(uint256 _index) onlyOwner public {\n', '         \n', '        require (addressArray.length == 7);\n', '        require(_index >= 0 && _index < unlockTimeMap.length);\n', '        require(now >= unlockTimeMap[_index].unlockTime && unlockTimeMap[_index].locked);\n', '\n', '        for (uint _addressIndex = 0; _addressIndex < addressArray.length; _addressIndex++) {\n', '            \n', '          uint256 unlockCount = unlockCountArray[_addressIndex][_index].mul(10**18);\n', '\n', '          require(_balances[0x01] >= unlockCount);\n', '\n', '          _balances[addressArray[_addressIndex]] = _balances[addressArray[_addressIndex]].add(unlockCount);\n', '          _balances[0x01] = _balances[0x01].sub(unlockCount);\n', '          \n', '          lockedCounts = lockedCounts.sub(unlockCount);\n', '\n', '          emit Transfer(0x01, addressArray[_addressIndex], unlockCount);  \n', '        }\n', '\n', '        unlockTimeMap[_index].locked = false;\n', '    }\n', '  \n', '}']