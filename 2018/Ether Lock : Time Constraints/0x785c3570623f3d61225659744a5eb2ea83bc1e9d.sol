['pragma solidity ^0.4.24;\n', '\n', '// File: contracts/libs/ERC223Receiver_Interface.sol\n', '\n', '/**\n', ' * @title ERC223-compliant contract interface.\n', ' */\n', 'contract ERC223Receiver {\n', '    constructor() internal {}\n', '\n', '    /**\n', '     * @dev Standard ERC223 function that will handle incoming token transfers.\n', '     *\n', '     * @param _from Token sender address.\n', '     * @param _value Amount of tokens.\n', '     * @param _data Transaction metadata.\n', '     */\n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/libs/ERC223Token.sol\n', '\n', '/**\n', ' * @title Implementation of the ERC223 standard token.\n', ' * @dev See https://github.com/Dexaran/ERC223-token-standard\n', ' */\n', 'contract ERC223Token is StandardToken {\n', '    using SafeMath for uint;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes data);\n', '\n', '    modifier enoughBalance(uint _value) {\n', '        require (_value <= balanceOf(msg.sender));\n', '        _;\n', '    }\n', '\n', '     /**\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      Invokes the `tokenFallback` function if the recipient is a contract.\n', '     *      The token transfer fails if the recipient is a contract\n', '     *      but does not implement the `tokenFallback` function\n', '     *      or the fallback function to receive funds.\n', '     *\n', '     * @param _to Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     * @param _data Transaction metadata.\n', '     * @return Success.\n', '     */\n', '    function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\n', '        require(_to != address(0));\n', '\n', '        return isContract(_to) ?\n', '            transferToContract(_to, _value, _data) :\n', '            transferToAddress(_to, _value, _data)\n', '        ;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      This function works the same with the previous one\n', '     *      but doesn&#39;t contain `_data` param.\n', '     *      Added due to backwards compatibility reasons.\n', '     *\n', '     * @param _to Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     * @return Success.\n', '     */\n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '        bytes memory empty;\n', '\n', '        return transfer(_to, _value, empty);\n', '    }\n', '\n', '    /**\n', '     * @dev Assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '     * @return If the target is a contract.\n', '     */\n', '    function isContract(address _addr) private view returns (bool is_contract) {\n', '        uint length;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address; this needs assembly\n', '            length := extcodesize(_addr)\n', '        }\n', '\n', '        return (length > 0);\n', '    }\n', '    \n', '    /**\n', '     * @dev Helper function that transfers to address.\n', '     * @return Success.\n', '     */\n', '    function transferToAddress(address _to, uint _value, bytes _data) private enoughBalance(_value) returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balanceOf(_to).add(_value);\n', '\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Helper function that transfers to contract.\n', '     * @return Success.\n', '     */\n', '    function transferToContract(address _to, uint _value, bytes _data) private enoughBalance(_value) returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balanceOf(_to).add(_value);\n', '\n', '        ERC223Receiver receiver = ERC223Receiver(_to);\n', '        receiver.tokenFallback(msg.sender, _value, _data);\n', '\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/StandardBurnableToken.sol\n', '\n', '/**\n', ' * @title Standard Burnable Token\n', ' * @dev Adds burnFrom method to ERC20 implementations\n', ' */\n', 'contract StandardBurnableToken is BurnableToken, StandardToken {\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _value uint256 The amount of token to be burned\n', '   */\n', '  function burnFrom(address _from, uint256 _value) public {\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '    // this function needs to emit an event with the updated approval.\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    _burn(_from, _value);\n', '  }\n', '}\n', '\n', '// File: contracts/libs/BaseToken.sol\n', '\n', '/**\n', ' * @title Base token contract for oracle.\n', ' */\n', 'contract BaseToken is ERC223Token, StandardBurnableToken {\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: contracts/ShintakuToken.sol\n', '\n', '/**\n', ' * @title Shintaku token contract\n', ' * @dev Burnable ERC223 token with set emission curve.\n', ' */\n', 'contract ShintakuToken is BaseToken, Ownable {\n', '    using SafeMath for uint;\n', '\n', '    string public constant symbol = "SHN";\n', '    string public constant name = "Shintaku";\n', '    uint8 public constant demicals = 18;\n', '\n', '    // Unit of tokens\n', '    uint public constant TOKEN_UNIT = (10 ** uint(demicals));\n', '\n', '    // Parameters\n', '\n', '    // Number of blocks for each period (100000 = ~2-3 weeks)\n', '    uint public PERIOD_BLOCKS;\n', '    // Number of blocks to lock owner balance (50x = ~2 years)\n', '    uint public OWNER_LOCK_BLOCKS;\n', '    // Number of blocks to lock user remaining balances (25x = ~1 year)\n', '    uint public USER_LOCK_BLOCKS;\n', '    // Number of tokens per period during tail emission\n', '    uint public constant TAIL_EMISSION = 400 * (10 ** 3) * TOKEN_UNIT;\n', '    // Number of tokens to emit initially: tail emission is 4% of this\n', '    uint public constant INITIAL_EMISSION_FACTOR = 25;\n', '    // Absolute cap on funds received per period\n', '    // Note: this should be obscenely large to prevent larger ether holders\n', '    //  from monopolizing tokens at low cost. This cap should never be hit in\n', '    //  practice.\n', '    uint public constant MAX_RECEIVED_PER_PERIOD = 10000 ether;\n', '\n', '    /**\n', '     * @dev Store relevant data for a period.\n', '     */\n', '    struct Period {\n', '        // Block this period has started at\n', '        uint started;\n', '\n', '        // Total funds received this period\n', '        uint totalReceived;\n', '        // Locked owner balance, will unlock after a long time\n', '        uint ownerLockedBalance;\n', '        // Number of tokens to mint this period\n', '        uint minting;\n', '\n', '        // Sealed purchases for each account\n', '        mapping (address => bytes32) sealedPurchaseOrders;\n', '        // Balance received from each account\n', '        mapping (address => uint) receivedBalances;\n', '        // Locked balance for each account\n', '        mapping (address => uint) lockedBalances;\n', '\n', '        // When withdrawing, withdraw to an alias address (e.g. cold storage)\n', '        mapping (address => address) aliases;\n', '    }\n', '\n', '    // Modifiers\n', '\n', '    modifier validPeriod(uint _period) {\n', '        require(_period <= currentPeriodIndex());\n', '        _;\n', '    }\n', '\n', '    // Contract state\n', '\n', '    // List of periods\n', '    Period[] internal periods;\n', '\n', '    // Address the owner can withdraw funds to (e.g. cold storage)\n', '    address public ownerAlias;\n', '\n', '    // Events\n', '\n', '    event NextPeriod(uint indexed _period, uint indexed _block);\n', '    event SealedOrderPlaced(address indexed _from, uint indexed _period, uint _value);\n', '    event SealedOrderRevealed(address indexed _from, uint indexed _period, address indexed _alias, uint _value);\n', '    event OpenOrderPlaced(address indexed _from, uint indexed _period, address indexed _alias, uint _value);\n', '    event Claimed(address indexed _from, uint indexed _period, address indexed _alias, uint _value);\n', '\n', '    // Functions\n', '\n', '    constructor(address _alias, uint _periodBlocks, uint _ownerLockFactor, uint _userLockFactor) public {\n', '        require(_alias != address(0));\n', '        require(_periodBlocks >= 2);\n', '        require(_ownerLockFactor > 0);\n', '        require(_userLockFactor > 0);\n', '\n', '        periods.push(Period(block.number, 0, 0, calculateMinting(0)));\n', '        ownerAlias = _alias;\n', '\n', '        PERIOD_BLOCKS = _periodBlocks;\n', '        OWNER_LOCK_BLOCKS = _periodBlocks.mul(_ownerLockFactor);\n', '        USER_LOCK_BLOCKS = _periodBlocks.mul(_userLockFactor);\n', '    }\n', '\n', '    /**\n', '     * @dev Go to the next period, if sufficient time has passed.\n', '     */\n', '    function nextPeriod() public {\n', '        uint periodIndex = currentPeriodIndex();\n', '        uint periodIndexNext = periodIndex.add(1);\n', '        require(block.number.sub(periods[periodIndex].started) > PERIOD_BLOCKS);\n', '\n', '        periods.push(Period(block.number, 0, 0, calculateMinting(periodIndexNext)));\n', '\n', '        emit NextPeriod(periodIndexNext, block.number);\n', '    }\n', '\n', '    /**\n', '     * @dev Creates a sealed purchase order.\n', '     * @param _from Account that will purchase tokens.\n', '     * @param _period Period of purchase order.\n', '     * @param _value Purchase funds, in wei.\n', '     * @param _salt Random value to keep purchase secret.\n', '     * @return The sealed purchase order.\n', '     */\n', '    function createPurchaseOrder(address _from, uint _period, uint _value, bytes32 _salt) public pure returns (bytes32) {\n', '        return keccak256(abi.encodePacked(_from, _period, _value, _salt));\n', '    }\n', '\n', '    /**\n', '     * @dev Submit a sealed purchase order. Wei sent can be different then sealed value.\n', '     * @param _sealedPurchaseOrder The sealed purchase order.\n', '     */\n', '    function placePurchaseOrder(bytes32 _sealedPurchaseOrder) public payable {\n', '        if (block.number.sub(periods[currentPeriodIndex()].started) > PERIOD_BLOCKS) {\n', '            nextPeriod();\n', '        }\n', '        // Note: current period index may update from above call\n', '        Period storage period = periods[currentPeriodIndex()];\n', '        // Each address can only make a single purchase per period\n', '        require(period.sealedPurchaseOrders[msg.sender] == bytes32(0));\n', '\n', '        period.sealedPurchaseOrders[msg.sender] = _sealedPurchaseOrder;\n', '        period.receivedBalances[msg.sender] = msg.value;\n', '\n', '        emit SealedOrderPlaced(msg.sender, currentPeriodIndex(), msg.value);\n', '    }\n', '\n', '    /**\n', '     * @dev Reveal a sealed purchase order and commit to a purchase.\n', '     * @param _sealedPurchaseOrder The sealed purchase order.\n', '     * @param _period Period of purchase order.\n', '     * @param _value Purchase funds, in wei.\n', '     * @param _period Period for which to reveal purchase order.\n', '     * @param _salt Random value to keep purchase secret.\n', '     * @param _alias Address to withdraw tokens and excess funds to.\n', '     */\n', '    function revealPurchaseOrder(bytes32 _sealedPurchaseOrder, uint _period, uint _value, bytes32 _salt, address _alias) public {\n', '        // Sanity check to make sure user enters an alias\n', '        require(_alias != address(0));\n', '        // Can only reveal sealed orders in the next period\n', '        require(currentPeriodIndex() == _period.add(1));\n', '        Period storage period = periods[_period];\n', '        // Each address can only make a single purchase per period\n', '        require(period.aliases[msg.sender] == address(0));\n', '\n', '        // Note: don&#39;t *need* to advance period here\n', '\n', '        bytes32 h = createPurchaseOrder(msg.sender, _period, _value, _salt);\n', '        require(h == _sealedPurchaseOrder);\n', '\n', '        // The value revealed must not be greater than the value previously sent\n', '        require(_value <= period.receivedBalances[msg.sender]);\n', '\n', '        period.totalReceived = period.totalReceived.add(_value);\n', '        uint remainder = period.receivedBalances[msg.sender].sub(_value);\n', '        period.receivedBalances[msg.sender] = _value;\n', '        period.aliases[msg.sender] = _alias;\n', '\n', '        emit SealedOrderRevealed(msg.sender, _period, _alias, _value);\n', '\n', '        // Return any extra balance to the alias\n', '        _alias.transfer(remainder);\n', '    }\n', '\n', '    /**\n', '     * @dev Place an unsealed purchase order immediately.\n', '     * @param _alias Address to withdraw tokens to.\n', '     */\n', '    function placeOpenPurchaseOrder(address _alias) public payable {\n', '        // Sanity check to make sure user enters an alias\n', '        require(_alias != address(0));\n', '\n', '        if (block.number.sub(periods[currentPeriodIndex()].started) > PERIOD_BLOCKS) {\n', '            nextPeriod();\n', '        }\n', '        // Note: current period index may update from above call\n', '        Period storage period = periods[currentPeriodIndex()];\n', '        // Each address can only make a single purchase per period\n', '        require(period.aliases[msg.sender] == address(0));\n', '\n', '        period.totalReceived = period.totalReceived.add(msg.value);\n', '        period.receivedBalances[msg.sender] = msg.value;\n', '        period.aliases[msg.sender] = _alias;\n', '\n', '        emit OpenOrderPlaced(msg.sender, currentPeriodIndex(), _alias, msg.value);\n', '    }\n', '\n', '    /**\n', '     * @dev Claim previously purchased tokens for an account.\n', '     * @param _from Account to claim tokens for.\n', '     * @param _period Period for which to claim tokens.\n', '     */\n', '    function claim(address _from, uint _period) public {\n', '        // Claiming can only be done at least two periods after submitting sealed purchase order\n', '        require(currentPeriodIndex() > _period.add(1));\n', '        Period storage period = periods[_period];\n', '        require(period.receivedBalances[_from] > 0);\n', '\n', '        uint value = period.receivedBalances[_from];\n', '        delete period.receivedBalances[_from];\n', '\n', '        (uint emission, uint spent) = calculateEmission(_period, value);\n', '        uint remainder = value.sub(spent);\n', '\n', '        address alias = period.aliases[_from];\n', '        // Mint tokens based on spent funds\n', '        mint(alias, emission);\n', '\n', '        // Lock up remaining funds for account\n', '        period.lockedBalances[_from] = period.lockedBalances[_from].add(remainder);\n', '        // Lock up spent funds for owner\n', '        period.ownerLockedBalance = period.ownerLockedBalance.add(spent);\n', '\n', '        emit Claimed(_from, _period, alias, emission);\n', '    }\n', '\n', '    /*\n', '     * @dev Users can withdraw locked balances after the lock time has expired, for an account.\n', '     * @param _from Account to withdraw balance for.\n', '     * @param _period Period to withdraw funds for.\n', '     */\n', '    function withdraw(address _from, uint _period) public {\n', '        require(currentPeriodIndex() > _period);\n', '        Period storage period = periods[_period];\n', '        require(block.number.sub(period.started) > USER_LOCK_BLOCKS);\n', '\n', '        uint balance = period.lockedBalances[_from];\n', '        require(balance <= address(this).balance);\n', '        delete period.lockedBalances[_from];\n', '\n', '        address alias = period.aliases[_from];\n', '        // Don&#39;t delete this, as a user may have unclaimed tokens\n', '        //delete period.aliases[_from];\n', '        alias.transfer(balance);\n', '    }\n', '\n', '    /**\n', '     * @dev Contract owner can withdraw unlocked owner funds.\n', '     * @param _period Period to withdraw funds for.\n', '     */\n', '    function withdrawOwner(uint _period) public onlyOwner {\n', '        require(currentPeriodIndex() > _period);\n', '        Period storage period = periods[_period];\n', '        require(block.number.sub(period.started) > OWNER_LOCK_BLOCKS);\n', '\n', '        uint balance = period.ownerLockedBalance;\n', '        require(balance <= address(this).balance);\n', '        delete period.ownerLockedBalance;\n', '\n', '        ownerAlias.transfer(balance);\n', '    }\n', '\n', '    /**\n', '     * @dev The owner can withdraw any unrevealed balances after the deadline.\n', '     * @param _period Period to withdraw funds for.\n', '     * @param _from Account to withdraw unrevealed funds against.\n', '     */\n', '    function withdrawOwnerUnrevealed(uint _period, address _from) public onlyOwner {\n', '        // Must be past the reveal deadline of one period\n', '        require(currentPeriodIndex() > _period.add(1));\n', '        Period storage period = periods[_period];\n', '        require(block.number.sub(period.started) > OWNER_LOCK_BLOCKS);\n', '\n', '        uint balance = period.receivedBalances[_from];\n', '        require(balance <= address(this).balance);\n', '        delete period.receivedBalances[_from];\n', '\n', '        ownerAlias.transfer(balance);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate the number of tokens to mint during a period.\n', '     * @param _period The period.\n', '     * @return Number of tokens to mint.\n', '     */\n', '    function calculateMinting(uint _period) internal pure returns (uint) {\n', '        // Every period, decrease emission by 5% of initial, until tail emission\n', '        return\n', '            _period < INITIAL_EMISSION_FACTOR ?\n', '            TAIL_EMISSION.mul(INITIAL_EMISSION_FACTOR.sub(_period)) :\n', '            TAIL_EMISSION\n', '        ;\n', '    }\n', '\n', '    /**\n', '     * @dev Helper function to get current period index.\n', '     * @return The array index of the current period.\n', '     */\n', '    function currentPeriodIndex() public view returns (uint) {\n', '        assert(periods.length > 0);\n', '\n', '        return periods.length.sub(1);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate token emission.\n', '     * @param _period Period for which to calculate emission.\n', '     * @param _value Amount paid. Emissions is proportional to this.\n', '     * @return Number of tokens to emit.\n', '     * @return The spent balance.\n', '     */\n', '    function calculateEmission(uint _period, uint _value) internal view returns (uint, uint) {\n', '        Period storage currentPeriod = periods[_period];\n', '        uint minting = currentPeriod.minting;\n', '        uint totalReceived = currentPeriod.totalReceived;\n', '\n', '        uint scaledValue = _value;\n', '        if (totalReceived > MAX_RECEIVED_PER_PERIOD) {\n', '            // If the funds received this period exceed the maximum, scale\n', '            // emission to refund remaining\n', '            scaledValue = _value.mul(MAX_RECEIVED_PER_PERIOD).div(totalReceived);\n', '        }\n', '\n', '        uint emission = scaledValue.mul(minting).div(MAX_RECEIVED_PER_PERIOD);\n', '        return (emission, scaledValue);\n', '    }\n', '\n', '    /**\n', '     * @dev Mints new tokens.\n', '     * @param _account Account that will receive new tokens.\n', '     * @param _value Number of tokens to mint.\n', '     */\n', '    function mint(address _account, uint _value) internal {\n', '        balances[_account] = balances[_account].add(_value);\n', '        totalSupply_ = totalSupply_.add(_value);\n', '    }\n', '\n', '    // Getters\n', '\n', '    function getPeriodStarted(uint _period) public view validPeriod(_period) returns (uint) {\n', '        return periods[_period].started;\n', '    }\n', '\n', '    function getPeriodTotalReceived(uint _period) public view validPeriod(_period) returns (uint) {\n', '        return periods[_period].totalReceived;\n', '    }\n', '\n', '    function getPeriodOwnerLockedBalance(uint _period) public view validPeriod(_period) returns (uint) {\n', '        return periods[_period].ownerLockedBalance;\n', '    }\n', '\n', '    function getPeriodMinting(uint _period) public view validPeriod(_period) returns (uint) {\n', '        return periods[_period].minting;\n', '    }\n', '\n', '    function getPeriodSealedPurchaseOrderFor(uint _period, address _account) public view validPeriod(_period) returns (bytes32) {\n', '        return periods[_period].sealedPurchaseOrders[_account];\n', '    }\n', '\n', '    function getPeriodReceivedBalanceFor(uint _period, address _account) public view validPeriod(_period) returns (uint) {\n', '        return periods[_period].receivedBalances[_account];\n', '    }\n', '\n', '    function getPeriodLockedBalanceFor(uint _period, address _account) public view validPeriod(_period) returns (uint) {\n', '        return periods[_period].lockedBalances[_account];\n', '    }\n', '\n', '    function getPeriodAliasFor(uint _period, address _account) public view validPeriod(_period) returns (address) {\n', '        return periods[_period].aliases[_account];\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '// File: contracts/libs/ERC223Receiver_Interface.sol\n', '\n', '/**\n', ' * @title ERC223-compliant contract interface.\n', ' */\n', 'contract ERC223Receiver {\n', '    constructor() internal {}\n', '\n', '    /**\n', '     * @dev Standard ERC223 function that will handle incoming token transfers.\n', '     *\n', '     * @param _from Token sender address.\n', '     * @param _value Amount of tokens.\n', '     * @param _data Transaction metadata.\n', '     */\n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/libs/ERC223Token.sol\n', '\n', '/**\n', ' * @title Implementation of the ERC223 standard token.\n', ' * @dev See https://github.com/Dexaran/ERC223-token-standard\n', ' */\n', 'contract ERC223Token is StandardToken {\n', '    using SafeMath for uint;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes data);\n', '\n', '    modifier enoughBalance(uint _value) {\n', '        require (_value <= balanceOf(msg.sender));\n', '        _;\n', '    }\n', '\n', '     /**\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      Invokes the `tokenFallback` function if the recipient is a contract.\n', '     *      The token transfer fails if the recipient is a contract\n', '     *      but does not implement the `tokenFallback` function\n', '     *      or the fallback function to receive funds.\n', '     *\n', '     * @param _to Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     * @param _data Transaction metadata.\n', '     * @return Success.\n', '     */\n', '    function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\n', '        require(_to != address(0));\n', '\n', '        return isContract(_to) ?\n', '            transferToContract(_to, _value, _data) :\n', '            transferToAddress(_to, _value, _data)\n', '        ;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      This function works the same with the previous one\n', "     *      but doesn't contain `_data` param.\n", '     *      Added due to backwards compatibility reasons.\n', '     *\n', '     * @param _to Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     * @return Success.\n', '     */\n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '        bytes memory empty;\n', '\n', '        return transfer(_to, _value, empty);\n', '    }\n', '\n', '    /**\n', '     * @dev Assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '     * @return If the target is a contract.\n', '     */\n', '    function isContract(address _addr) private view returns (bool is_contract) {\n', '        uint length;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address; this needs assembly\n', '            length := extcodesize(_addr)\n', '        }\n', '\n', '        return (length > 0);\n', '    }\n', '    \n', '    /**\n', '     * @dev Helper function that transfers to address.\n', '     * @return Success.\n', '     */\n', '    function transferToAddress(address _to, uint _value, bytes _data) private enoughBalance(_value) returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balanceOf(_to).add(_value);\n', '\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Helper function that transfers to contract.\n', '     * @return Success.\n', '     */\n', '    function transferToContract(address _to, uint _value, bytes _data) private enoughBalance(_value) returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balanceOf(_to).add(_value);\n', '\n', '        ERC223Receiver receiver = ERC223Receiver(_to);\n', '        receiver.tokenFallback(msg.sender, _value, _data);\n', '\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/StandardBurnableToken.sol\n', '\n', '/**\n', ' * @title Standard Burnable Token\n', ' * @dev Adds burnFrom method to ERC20 implementations\n', ' */\n', 'contract StandardBurnableToken is BurnableToken, StandardToken {\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _value uint256 The amount of token to be burned\n', '   */\n', '  function burnFrom(address _from, uint256 _value) public {\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '    // this function needs to emit an event with the updated approval.\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    _burn(_from, _value);\n', '  }\n', '}\n', '\n', '// File: contracts/libs/BaseToken.sol\n', '\n', '/**\n', ' * @title Base token contract for oracle.\n', ' */\n', 'contract BaseToken is ERC223Token, StandardBurnableToken {\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: contracts/ShintakuToken.sol\n', '\n', '/**\n', ' * @title Shintaku token contract\n', ' * @dev Burnable ERC223 token with set emission curve.\n', ' */\n', 'contract ShintakuToken is BaseToken, Ownable {\n', '    using SafeMath for uint;\n', '\n', '    string public constant symbol = "SHN";\n', '    string public constant name = "Shintaku";\n', '    uint8 public constant demicals = 18;\n', '\n', '    // Unit of tokens\n', '    uint public constant TOKEN_UNIT = (10 ** uint(demicals));\n', '\n', '    // Parameters\n', '\n', '    // Number of blocks for each period (100000 = ~2-3 weeks)\n', '    uint public PERIOD_BLOCKS;\n', '    // Number of blocks to lock owner balance (50x = ~2 years)\n', '    uint public OWNER_LOCK_BLOCKS;\n', '    // Number of blocks to lock user remaining balances (25x = ~1 year)\n', '    uint public USER_LOCK_BLOCKS;\n', '    // Number of tokens per period during tail emission\n', '    uint public constant TAIL_EMISSION = 400 * (10 ** 3) * TOKEN_UNIT;\n', '    // Number of tokens to emit initially: tail emission is 4% of this\n', '    uint public constant INITIAL_EMISSION_FACTOR = 25;\n', '    // Absolute cap on funds received per period\n', '    // Note: this should be obscenely large to prevent larger ether holders\n', '    //  from monopolizing tokens at low cost. This cap should never be hit in\n', '    //  practice.\n', '    uint public constant MAX_RECEIVED_PER_PERIOD = 10000 ether;\n', '\n', '    /**\n', '     * @dev Store relevant data for a period.\n', '     */\n', '    struct Period {\n', '        // Block this period has started at\n', '        uint started;\n', '\n', '        // Total funds received this period\n', '        uint totalReceived;\n', '        // Locked owner balance, will unlock after a long time\n', '        uint ownerLockedBalance;\n', '        // Number of tokens to mint this period\n', '        uint minting;\n', '\n', '        // Sealed purchases for each account\n', '        mapping (address => bytes32) sealedPurchaseOrders;\n', '        // Balance received from each account\n', '        mapping (address => uint) receivedBalances;\n', '        // Locked balance for each account\n', '        mapping (address => uint) lockedBalances;\n', '\n', '        // When withdrawing, withdraw to an alias address (e.g. cold storage)\n', '        mapping (address => address) aliases;\n', '    }\n', '\n', '    // Modifiers\n', '\n', '    modifier validPeriod(uint _period) {\n', '        require(_period <= currentPeriodIndex());\n', '        _;\n', '    }\n', '\n', '    // Contract state\n', '\n', '    // List of periods\n', '    Period[] internal periods;\n', '\n', '    // Address the owner can withdraw funds to (e.g. cold storage)\n', '    address public ownerAlias;\n', '\n', '    // Events\n', '\n', '    event NextPeriod(uint indexed _period, uint indexed _block);\n', '    event SealedOrderPlaced(address indexed _from, uint indexed _period, uint _value);\n', '    event SealedOrderRevealed(address indexed _from, uint indexed _period, address indexed _alias, uint _value);\n', '    event OpenOrderPlaced(address indexed _from, uint indexed _period, address indexed _alias, uint _value);\n', '    event Claimed(address indexed _from, uint indexed _period, address indexed _alias, uint _value);\n', '\n', '    // Functions\n', '\n', '    constructor(address _alias, uint _periodBlocks, uint _ownerLockFactor, uint _userLockFactor) public {\n', '        require(_alias != address(0));\n', '        require(_periodBlocks >= 2);\n', '        require(_ownerLockFactor > 0);\n', '        require(_userLockFactor > 0);\n', '\n', '        periods.push(Period(block.number, 0, 0, calculateMinting(0)));\n', '        ownerAlias = _alias;\n', '\n', '        PERIOD_BLOCKS = _periodBlocks;\n', '        OWNER_LOCK_BLOCKS = _periodBlocks.mul(_ownerLockFactor);\n', '        USER_LOCK_BLOCKS = _periodBlocks.mul(_userLockFactor);\n', '    }\n', '\n', '    /**\n', '     * @dev Go to the next period, if sufficient time has passed.\n', '     */\n', '    function nextPeriod() public {\n', '        uint periodIndex = currentPeriodIndex();\n', '        uint periodIndexNext = periodIndex.add(1);\n', '        require(block.number.sub(periods[periodIndex].started) > PERIOD_BLOCKS);\n', '\n', '        periods.push(Period(block.number, 0, 0, calculateMinting(periodIndexNext)));\n', '\n', '        emit NextPeriod(periodIndexNext, block.number);\n', '    }\n', '\n', '    /**\n', '     * @dev Creates a sealed purchase order.\n', '     * @param _from Account that will purchase tokens.\n', '     * @param _period Period of purchase order.\n', '     * @param _value Purchase funds, in wei.\n', '     * @param _salt Random value to keep purchase secret.\n', '     * @return The sealed purchase order.\n', '     */\n', '    function createPurchaseOrder(address _from, uint _period, uint _value, bytes32 _salt) public pure returns (bytes32) {\n', '        return keccak256(abi.encodePacked(_from, _period, _value, _salt));\n', '    }\n', '\n', '    /**\n', '     * @dev Submit a sealed purchase order. Wei sent can be different then sealed value.\n', '     * @param _sealedPurchaseOrder The sealed purchase order.\n', '     */\n', '    function placePurchaseOrder(bytes32 _sealedPurchaseOrder) public payable {\n', '        if (block.number.sub(periods[currentPeriodIndex()].started) > PERIOD_BLOCKS) {\n', '            nextPeriod();\n', '        }\n', '        // Note: current period index may update from above call\n', '        Period storage period = periods[currentPeriodIndex()];\n', '        // Each address can only make a single purchase per period\n', '        require(period.sealedPurchaseOrders[msg.sender] == bytes32(0));\n', '\n', '        period.sealedPurchaseOrders[msg.sender] = _sealedPurchaseOrder;\n', '        period.receivedBalances[msg.sender] = msg.value;\n', '\n', '        emit SealedOrderPlaced(msg.sender, currentPeriodIndex(), msg.value);\n', '    }\n', '\n', '    /**\n', '     * @dev Reveal a sealed purchase order and commit to a purchase.\n', '     * @param _sealedPurchaseOrder The sealed purchase order.\n', '     * @param _period Period of purchase order.\n', '     * @param _value Purchase funds, in wei.\n', '     * @param _period Period for which to reveal purchase order.\n', '     * @param _salt Random value to keep purchase secret.\n', '     * @param _alias Address to withdraw tokens and excess funds to.\n', '     */\n', '    function revealPurchaseOrder(bytes32 _sealedPurchaseOrder, uint _period, uint _value, bytes32 _salt, address _alias) public {\n', '        // Sanity check to make sure user enters an alias\n', '        require(_alias != address(0));\n', '        // Can only reveal sealed orders in the next period\n', '        require(currentPeriodIndex() == _period.add(1));\n', '        Period storage period = periods[_period];\n', '        // Each address can only make a single purchase per period\n', '        require(period.aliases[msg.sender] == address(0));\n', '\n', "        // Note: don't *need* to advance period here\n", '\n', '        bytes32 h = createPurchaseOrder(msg.sender, _period, _value, _salt);\n', '        require(h == _sealedPurchaseOrder);\n', '\n', '        // The value revealed must not be greater than the value previously sent\n', '        require(_value <= period.receivedBalances[msg.sender]);\n', '\n', '        period.totalReceived = period.totalReceived.add(_value);\n', '        uint remainder = period.receivedBalances[msg.sender].sub(_value);\n', '        period.receivedBalances[msg.sender] = _value;\n', '        period.aliases[msg.sender] = _alias;\n', '\n', '        emit SealedOrderRevealed(msg.sender, _period, _alias, _value);\n', '\n', '        // Return any extra balance to the alias\n', '        _alias.transfer(remainder);\n', '    }\n', '\n', '    /**\n', '     * @dev Place an unsealed purchase order immediately.\n', '     * @param _alias Address to withdraw tokens to.\n', '     */\n', '    function placeOpenPurchaseOrder(address _alias) public payable {\n', '        // Sanity check to make sure user enters an alias\n', '        require(_alias != address(0));\n', '\n', '        if (block.number.sub(periods[currentPeriodIndex()].started) > PERIOD_BLOCKS) {\n', '            nextPeriod();\n', '        }\n', '        // Note: current period index may update from above call\n', '        Period storage period = periods[currentPeriodIndex()];\n', '        // Each address can only make a single purchase per period\n', '        require(period.aliases[msg.sender] == address(0));\n', '\n', '        period.totalReceived = period.totalReceived.add(msg.value);\n', '        period.receivedBalances[msg.sender] = msg.value;\n', '        period.aliases[msg.sender] = _alias;\n', '\n', '        emit OpenOrderPlaced(msg.sender, currentPeriodIndex(), _alias, msg.value);\n', '    }\n', '\n', '    /**\n', '     * @dev Claim previously purchased tokens for an account.\n', '     * @param _from Account to claim tokens for.\n', '     * @param _period Period for which to claim tokens.\n', '     */\n', '    function claim(address _from, uint _period) public {\n', '        // Claiming can only be done at least two periods after submitting sealed purchase order\n', '        require(currentPeriodIndex() > _period.add(1));\n', '        Period storage period = periods[_period];\n', '        require(period.receivedBalances[_from] > 0);\n', '\n', '        uint value = period.receivedBalances[_from];\n', '        delete period.receivedBalances[_from];\n', '\n', '        (uint emission, uint spent) = calculateEmission(_period, value);\n', '        uint remainder = value.sub(spent);\n', '\n', '        address alias = period.aliases[_from];\n', '        // Mint tokens based on spent funds\n', '        mint(alias, emission);\n', '\n', '        // Lock up remaining funds for account\n', '        period.lockedBalances[_from] = period.lockedBalances[_from].add(remainder);\n', '        // Lock up spent funds for owner\n', '        period.ownerLockedBalance = period.ownerLockedBalance.add(spent);\n', '\n', '        emit Claimed(_from, _period, alias, emission);\n', '    }\n', '\n', '    /*\n', '     * @dev Users can withdraw locked balances after the lock time has expired, for an account.\n', '     * @param _from Account to withdraw balance for.\n', '     * @param _period Period to withdraw funds for.\n', '     */\n', '    function withdraw(address _from, uint _period) public {\n', '        require(currentPeriodIndex() > _period);\n', '        Period storage period = periods[_period];\n', '        require(block.number.sub(period.started) > USER_LOCK_BLOCKS);\n', '\n', '        uint balance = period.lockedBalances[_from];\n', '        require(balance <= address(this).balance);\n', '        delete period.lockedBalances[_from];\n', '\n', '        address alias = period.aliases[_from];\n', "        // Don't delete this, as a user may have unclaimed tokens\n", '        //delete period.aliases[_from];\n', '        alias.transfer(balance);\n', '    }\n', '\n', '    /**\n', '     * @dev Contract owner can withdraw unlocked owner funds.\n', '     * @param _period Period to withdraw funds for.\n', '     */\n', '    function withdrawOwner(uint _period) public onlyOwner {\n', '        require(currentPeriodIndex() > _period);\n', '        Period storage period = periods[_period];\n', '        require(block.number.sub(period.started) > OWNER_LOCK_BLOCKS);\n', '\n', '        uint balance = period.ownerLockedBalance;\n', '        require(balance <= address(this).balance);\n', '        delete period.ownerLockedBalance;\n', '\n', '        ownerAlias.transfer(balance);\n', '    }\n', '\n', '    /**\n', '     * @dev The owner can withdraw any unrevealed balances after the deadline.\n', '     * @param _period Period to withdraw funds for.\n', '     * @param _from Account to withdraw unrevealed funds against.\n', '     */\n', '    function withdrawOwnerUnrevealed(uint _period, address _from) public onlyOwner {\n', '        // Must be past the reveal deadline of one period\n', '        require(currentPeriodIndex() > _period.add(1));\n', '        Period storage period = periods[_period];\n', '        require(block.number.sub(period.started) > OWNER_LOCK_BLOCKS);\n', '\n', '        uint balance = period.receivedBalances[_from];\n', '        require(balance <= address(this).balance);\n', '        delete period.receivedBalances[_from];\n', '\n', '        ownerAlias.transfer(balance);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate the number of tokens to mint during a period.\n', '     * @param _period The period.\n', '     * @return Number of tokens to mint.\n', '     */\n', '    function calculateMinting(uint _period) internal pure returns (uint) {\n', '        // Every period, decrease emission by 5% of initial, until tail emission\n', '        return\n', '            _period < INITIAL_EMISSION_FACTOR ?\n', '            TAIL_EMISSION.mul(INITIAL_EMISSION_FACTOR.sub(_period)) :\n', '            TAIL_EMISSION\n', '        ;\n', '    }\n', '\n', '    /**\n', '     * @dev Helper function to get current period index.\n', '     * @return The array index of the current period.\n', '     */\n', '    function currentPeriodIndex() public view returns (uint) {\n', '        assert(periods.length > 0);\n', '\n', '        return periods.length.sub(1);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate token emission.\n', '     * @param _period Period for which to calculate emission.\n', '     * @param _value Amount paid. Emissions is proportional to this.\n', '     * @return Number of tokens to emit.\n', '     * @return The spent balance.\n', '     */\n', '    function calculateEmission(uint _period, uint _value) internal view returns (uint, uint) {\n', '        Period storage currentPeriod = periods[_period];\n', '        uint minting = currentPeriod.minting;\n', '        uint totalReceived = currentPeriod.totalReceived;\n', '\n', '        uint scaledValue = _value;\n', '        if (totalReceived > MAX_RECEIVED_PER_PERIOD) {\n', '            // If the funds received this period exceed the maximum, scale\n', '            // emission to refund remaining\n', '            scaledValue = _value.mul(MAX_RECEIVED_PER_PERIOD).div(totalReceived);\n', '        }\n', '\n', '        uint emission = scaledValue.mul(minting).div(MAX_RECEIVED_PER_PERIOD);\n', '        return (emission, scaledValue);\n', '    }\n', '\n', '    /**\n', '     * @dev Mints new tokens.\n', '     * @param _account Account that will receive new tokens.\n', '     * @param _value Number of tokens to mint.\n', '     */\n', '    function mint(address _account, uint _value) internal {\n', '        balances[_account] = balances[_account].add(_value);\n', '        totalSupply_ = totalSupply_.add(_value);\n', '    }\n', '\n', '    // Getters\n', '\n', '    function getPeriodStarted(uint _period) public view validPeriod(_period) returns (uint) {\n', '        return periods[_period].started;\n', '    }\n', '\n', '    function getPeriodTotalReceived(uint _period) public view validPeriod(_period) returns (uint) {\n', '        return periods[_period].totalReceived;\n', '    }\n', '\n', '    function getPeriodOwnerLockedBalance(uint _period) public view validPeriod(_period) returns (uint) {\n', '        return periods[_period].ownerLockedBalance;\n', '    }\n', '\n', '    function getPeriodMinting(uint _period) public view validPeriod(_period) returns (uint) {\n', '        return periods[_period].minting;\n', '    }\n', '\n', '    function getPeriodSealedPurchaseOrderFor(uint _period, address _account) public view validPeriod(_period) returns (bytes32) {\n', '        return periods[_period].sealedPurchaseOrders[_account];\n', '    }\n', '\n', '    function getPeriodReceivedBalanceFor(uint _period, address _account) public view validPeriod(_period) returns (uint) {\n', '        return periods[_period].receivedBalances[_account];\n', '    }\n', '\n', '    function getPeriodLockedBalanceFor(uint _period, address _account) public view validPeriod(_period) returns (uint) {\n', '        return periods[_period].lockedBalances[_account];\n', '    }\n', '\n', '    function getPeriodAliasFor(uint _period, address _account) public view validPeriod(_period) returns (address) {\n', '        return periods[_period].aliases[_account];\n', '    }\n', '}']
