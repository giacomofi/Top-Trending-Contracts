['pragma solidity 0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '// Intermediate deposit contract for DBET V1 and V2 tokens.\n', '// Token holders send tokens to this contract to in-turn receive DBET tokens on VET.\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', 'contract DBETToVETDeposit {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    // DBET team address\n', '    address public dbetTeam;\n', '    // DBET V1 token contract\n', '    ERC20 public dbetV1;\n', '    // DBET V2 token contract\n', '    ERC20 public dbetV2;\n', '\n', '    // Emergency withdrawals incase something goes wrong\n', '    bool public emergencyWithdrawalsEnabled;\n', '    // If deposits are finalized, emergency withdrawals will cease to work\n', '    bool public finalizedDeposits;\n', '    // Number of deposits made\n', '    uint256 public depositIndex;\n', '\n', '    // Mapping of tokens deposited by addresses\n', '    // isV2 => (address => amount)\n', '    mapping(bool => mapping(address => uint256)) public depositedTokens;\n', '\n', '    event LogTokenDeposit(\n', '        bool isV2,\n', '        address _address,\n', '        address VETAddress,\n', '        uint256 amount,\n', '        uint256 index\n', '    );\n', '    event LogEmergencyWithdraw(\n', '        bool isV2,\n', '        address _address,\n', '        uint256 amount\n', '    );\n', '\n', '    constructor(address v1, address v2) public {\n', '        dbetTeam = msg.sender;\n', '        dbetV1 = ERC20(v1);\n', '        dbetV2 = ERC20(v2);\n', '    }\n', '\n', '    modifier isDbetTeam() {\n', '        require(msg.sender == dbetTeam);\n', '        _;\n', '    }\n', '\n', '    modifier areWithdrawalsEnabled() {\n', '        require(emergencyWithdrawalsEnabled && !finalizedDeposits);\n', '        _;\n', '    }\n', '\n', '    // Returns the appropriate token contract\n', '    function getToken(bool isV2) internal returns (ERC20) {\n', '        if (isV2)\n', '            return dbetV2;\n', '        else\n', '            return dbetV1;\n', '    }\n', '\n', '    // Deposit V1/V2 tokens into the contract\n', '    function depositTokens(\n', '        bool isV2,\n', '        uint256 amount,\n', '        address VETAddress\n', '    )\n', '    public {\n', '        require(amount > 0);\n', '        require(VETAddress != 0);\n', '        require(getToken(isV2).balanceOf(msg.sender) >= amount);\n', '        require(getToken(isV2).allowance(msg.sender, address(this)) >= amount);\n', '\n', '        depositedTokens[isV2][msg.sender] = depositedTokens[isV2][msg.sender].add(amount);\n', '\n', '        require(getToken(isV2).transferFrom(msg.sender, address(this), amount));\n', '\n', '        emit LogTokenDeposit(\n', '            isV2,\n', '            msg.sender,\n', '            VETAddress,\n', '            amount,\n', '            depositIndex++\n', '        );\n', '    }\n', '\n', '    function enableEmergencyWithdrawals () public\n', '    isDbetTeam {\n', '        emergencyWithdrawalsEnabled = true;\n', '    }\n', '\n', '    function finalizeDeposits () public\n', '    isDbetTeam {\n', '        finalizedDeposits = true;\n', '    }\n', '\n', '    // Withdraw deposited tokens if emergency withdrawals have been enabled\n', '    function emergencyWithdraw(bool isV2) public\n', '    areWithdrawalsEnabled {\n', '        require(depositedTokens[isV2][msg.sender] > 0);\n', '\n', '        uint256 amount = depositedTokens[isV2][msg.sender];\n', '\n', '        depositedTokens[isV2][msg.sender] = 0;\n', '\n', '        require(getToken(isV2).transfer(msg.sender, amount));\n', '\n', '        emit LogEmergencyWithdraw(isV2, msg.sender, amount);\n', '    }\n', '\n', '}']
['pragma solidity 0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '// Intermediate deposit contract for DBET V1 and V2 tokens.\n', '// Token holders send tokens to this contract to in-turn receive DBET tokens on VET.\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', 'contract DBETToVETDeposit {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    // DBET team address\n', '    address public dbetTeam;\n', '    // DBET V1 token contract\n', '    ERC20 public dbetV1;\n', '    // DBET V2 token contract\n', '    ERC20 public dbetV2;\n', '\n', '    // Emergency withdrawals incase something goes wrong\n', '    bool public emergencyWithdrawalsEnabled;\n', '    // If deposits are finalized, emergency withdrawals will cease to work\n', '    bool public finalizedDeposits;\n', '    // Number of deposits made\n', '    uint256 public depositIndex;\n', '\n', '    // Mapping of tokens deposited by addresses\n', '    // isV2 => (address => amount)\n', '    mapping(bool => mapping(address => uint256)) public depositedTokens;\n', '\n', '    event LogTokenDeposit(\n', '        bool isV2,\n', '        address _address,\n', '        address VETAddress,\n', '        uint256 amount,\n', '        uint256 index\n', '    );\n', '    event LogEmergencyWithdraw(\n', '        bool isV2,\n', '        address _address,\n', '        uint256 amount\n', '    );\n', '\n', '    constructor(address v1, address v2) public {\n', '        dbetTeam = msg.sender;\n', '        dbetV1 = ERC20(v1);\n', '        dbetV2 = ERC20(v2);\n', '    }\n', '\n', '    modifier isDbetTeam() {\n', '        require(msg.sender == dbetTeam);\n', '        _;\n', '    }\n', '\n', '    modifier areWithdrawalsEnabled() {\n', '        require(emergencyWithdrawalsEnabled && !finalizedDeposits);\n', '        _;\n', '    }\n', '\n', '    // Returns the appropriate token contract\n', '    function getToken(bool isV2) internal returns (ERC20) {\n', '        if (isV2)\n', '            return dbetV2;\n', '        else\n', '            return dbetV1;\n', '    }\n', '\n', '    // Deposit V1/V2 tokens into the contract\n', '    function depositTokens(\n', '        bool isV2,\n', '        uint256 amount,\n', '        address VETAddress\n', '    )\n', '    public {\n', '        require(amount > 0);\n', '        require(VETAddress != 0);\n', '        require(getToken(isV2).balanceOf(msg.sender) >= amount);\n', '        require(getToken(isV2).allowance(msg.sender, address(this)) >= amount);\n', '\n', '        depositedTokens[isV2][msg.sender] = depositedTokens[isV2][msg.sender].add(amount);\n', '\n', '        require(getToken(isV2).transferFrom(msg.sender, address(this), amount));\n', '\n', '        emit LogTokenDeposit(\n', '            isV2,\n', '            msg.sender,\n', '            VETAddress,\n', '            amount,\n', '            depositIndex++\n', '        );\n', '    }\n', '\n', '    function enableEmergencyWithdrawals () public\n', '    isDbetTeam {\n', '        emergencyWithdrawalsEnabled = true;\n', '    }\n', '\n', '    function finalizeDeposits () public\n', '    isDbetTeam {\n', '        finalizedDeposits = true;\n', '    }\n', '\n', '    // Withdraw deposited tokens if emergency withdrawals have been enabled\n', '    function emergencyWithdraw(bool isV2) public\n', '    areWithdrawalsEnabled {\n', '        require(depositedTokens[isV2][msg.sender] > 0);\n', '\n', '        uint256 amount = depositedTokens[isV2][msg.sender];\n', '\n', '        depositedTokens[isV2][msg.sender] = 0;\n', '\n', '        require(getToken(isV2).transfer(msg.sender, amount));\n', '\n', '        emit LogEmergencyWithdraw(isV2, msg.sender, amount);\n', '    }\n', '\n', '}']
