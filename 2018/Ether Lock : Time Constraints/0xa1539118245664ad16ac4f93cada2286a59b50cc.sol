['pragma solidity ^0.4.18;\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', 'contract DogCoreInterface {\n', '    \n', '    function getDog(uint256 _id) external view returns (\n', '        uint256 cooldownIndex,\n', '        uint256 nextActionAt,\n', '        uint256 siringWithId,\n', '        uint256 birthTime,\n', '        uint256 matronId,\n', '        uint256 sireId,\n', '        uint256 generation,\n', '        uint256 genes,\n', '        uint8 variation,\n', '        uint256 gen0\n', '        ); \n', '\n', '    function sendMoney(address _to, uint256 _money) external;    \n', '\n', '    function cfoAddress() public returns(address);\n', '\n', '    function cooAddress() public returns(address);\n', '}\n', '\n', 'contract LotteryInterface {\n', '    \n', '    function isLottery() public pure returns (bool);\n', '    \n', '    function getCLottery() \n', '        public \n', '        view \n', '        returns (\n', '            uint8[7]        luckyGenes1,\n', '            uint256         totalAmount1,\n', '            uint256         openBlock1,\n', '            bool            isReward1,\n', '            uint256         term1,\n', '            uint8           currentGenes1,\n', '            uint256         tSupply,\n', '            uint256         sPoolAmount1,\n', '            uint256[]       reward1\n', '        );\n', '}\n', '\n', 'contract Variation is Ownable{\n', '\n', '    bool public isVariation = true;\n', '\n', '    uint256 randomSeed = 1;\n', '\n', '    LotteryInterface public lottery;\n', '\n', '    DogCoreInterface public dogCore;\n', '\n', '    function random() internal returns(uint256) {\n', '        uint256 randomValue = uint256(keccak256(block.timestamp, uint256(randomSeed * block.difficulty)));\n', '        randomSeed = uint256(randomValue * block.number);\n', '        return randomValue;\n', '    }\n', '\n', '\n', '    struct CVariation {\n', '\n', '        uint256         totalAmount;\n', '\n', '        address[]       luckyAccounts;\n', '\n', '        uint256[]       luckyDogs;\n', '\n', '        uint256         withdrawBlock;\n', '    }\n', '\n', '    CVariation[] public cVariations;\n', '\n', '\n', '    event CallBackVariations(uint256[] dogs, address[] owners, uint256 totalAmount, uint256 blockNumber);\n', '    \n', '\n', '    uint256 public variationProbably = 1;\n', '\n', '    uint256 public variationCycle = 10;\n', '\n', '\n', '    function setVariationProbably(uint256 _value) public onlyOwner{\n', '        require(_value > 0);\n', '        require(_value <= 100);\n', '        variationProbably = _value;\n', '    }\n', '    \n', '    function setVariationCycle(uint256 _value) public onlyOwner{\n', '        require(_value > 0);\n', '        require(_value <= 172800);\n', '        variationCycle = _value;\n', '    }\n', '\n', '    function Variation(address _dogCore, address _lottery) public {    \n', '        require(_dogCore != address(0));\n', '        dogCore = DogCoreInterface(_dogCore);\n', '\n', '        setLotteryAddress(_lottery);\n', '\n', '\n', '        CVariation memory newCVariation;\n', '        newCVariation.totalAmount = uint256(0);\n', '        newCVariation.withdrawBlock = uint256(block.number + variationCycle);\n', '        cVariations.push(newCVariation);\n', '    }\n', '\n', '    function setLotteryAddress(address _lottery) public onlyOwner{\n', '        LotteryInterface candidateContract = LotteryInterface(_lottery);\n', '        require(candidateContract.isLottery());\n', '        lottery = candidateContract;\n', '    }\n', '\n', '    function createVariation(uint256 _gene, uint256 _totalSupply) public returns (uint8){\n', '        require(msg.sender == address(dogCore) || msg.sender == owner);\n', '        \n', '        randomSeed = uint256(randomSeed * _gene);\n', '\n', '        uint256 variationRandom = random();\n', '        uint256 totalRandom = _totalSupply >= 20000 ? _totalSupply : 20000;\n', '        return uint256(variationRandom % uint256(totalRandom * variationProbably)) == 1 ? 1 : 0;\n', '    }\n', '\n', '    function registerVariation(uint256 _dogId, address _owner) public {\n', '        require(msg.sender == address(dogCore) || msg.sender == owner);\n', '\n', '        require(_owner != address(0));\n', '        cVariations[cVariations.length - 1].luckyDogs.push(_dogId);\n', '        cVariations[cVariations.length - 1].luckyAccounts.push(_owner);\n', '    }\n', '        \n', '    function callBackVariations() public {\n', '        uint256 index = 0;\n', '\n', '        if (block.number < cVariations[cVariations.length - 1].withdrawBlock) {\n', '            require(cVariations.length > 1);\n', '            CallBackVariations(\n', '                cVariations[cVariations.length - 2].luckyDogs, \n', '                cVariations[cVariations.length - 2].luckyAccounts, \n', '                cVariations[cVariations.length - 2].totalAmount, \n', '                cVariations[cVariations.length - 2].withdrawBlock\n', '            );\n', '            return;\n', '        }\n', '        require(msg.sender == dogCore.cooAddress() || msg.sender == owner);\n', '\n', '        CVariation storage currentCVariation = cVariations[cVariations.length - 1];    \n', '\n', '        currentCVariation.withdrawBlock = block.number;\n', '\n', '        var(,,,,,,,spoolAmount,) = lottery.getCLottery();\n', '        uint256 luckyAmount = (address(dogCore).balance - spoolAmount) * 3 / 100;\n', '        require(luckyAmount > 0);\n', '        currentCVariation.totalAmount = luckyAmount;\n', '        \n', '        CVariation memory newCVariation;\n', '        newCVariation.totalAmount = uint256(0);\n', '        newCVariation.withdrawBlock = uint256(block.number + variationCycle);    \n', '        cVariations.push(newCVariation);\n', '\n', '        uint256 luckySize = currentCVariation.luckyDogs.length;\n', '        if (luckySize == 0) {\n', '            CallBackVariations(\n', '                currentCVariation.luckyDogs, \n', '                currentCVariation.luckyAccounts, \n', '                currentCVariation.totalAmount, \n', '                currentCVariation.withdrawBlock\n', '            );\n', '            return;\n', '        }\n', '\n', '        for (index = 1; index <= luckySize; index++) {\n', '            uint256 dogId = currentCVariation.luckyDogs[luckySize - index];\n', '            var(,,,birthTime,,,,,,) = dogCore.getDog(dogId);\n', '            if(birthTime < block.number){\n', '                break;\n', '            }\n', '            cVariations[cVariations.length - 1].luckyDogs.push(dogId);\n', '            cVariations[cVariations.length - 1].luckyAccounts.push(currentCVariation.luckyAccounts[luckySize - index]);\n', '        }\n', '        for (index = 1; index <= cVariations[cVariations.length - 1].luckyDogs.length; index++) {\n', '            delete currentCVariation.luckyDogs[luckySize - index];\n', '            delete currentCVariation.luckyAccounts[luckySize - index];\n', '        }\n', '\n', '        luckySize -= cVariations[cVariations.length - 1].luckyDogs.length;\n', '        if (luckySize == 0) {\n', '            CallBackVariations(\n', '                currentCVariation.luckyDogs, \n', '                currentCVariation.luckyAccounts, \n', '                currentCVariation.totalAmount, \n', '                currentCVariation.withdrawBlock\n', '            );\n', '            return;\n', '        }\n', '\n', '        uint256 reward = currentCVariation.totalAmount * 9 / (10 * luckySize);\n', '        \n', '        for (index = 0; index < luckySize; index++) {\n', '\n', '            address owner = currentCVariation.luckyAccounts[index];\n', '            dogCore.sendMoney(owner, reward);\n', '        }\n', '\n', '        dogCore.sendMoney(dogCore.cfoAddress(),  currentCVariation.totalAmount / 10);\n', '\n', '\n', '        CallBackVariations(\n', '            currentCVariation.luckyDogs, \n', '            currentCVariation.luckyAccounts, \n', '            currentCVariation.totalAmount, \n', '            currentCVariation.withdrawBlock\n', '        );\n', '    }\n', '}']