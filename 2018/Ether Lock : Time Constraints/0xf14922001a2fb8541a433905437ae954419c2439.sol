['pragma solidity 0.4.24;\n', '\n', '\n', '// @title Abstract ERC20 token interface\n', 'contract AbstractToken {\n', '\tfunction balanceOf(address owner) public view returns (uint256 balance);\n', '\tfunction transfer(address to, uint256 value) public returns (bool success);\n', '\tfunction transferFrom(address from, address to, uint256 value) public returns (bool success);\n', '\tfunction approve(address spender, uint256 value) public returns (bool success);\n', '\tfunction allowance(address owner, address spender) public view returns (uint256 remaining);\n', '\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/// @title Owned - Add an owner to the contract.\n', 'contract Owned {\n', '\n', '\taddress public owner = msg.sender;\n', '\taddress public potentialOwner;\n', '\n', '\tmodifier onlyOwner {\n', '\t\trequire(msg.sender == owner);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier onlyPotentialOwner {\n', '\t\trequire(msg.sender == potentialOwner);\n', '\t\t_;\n', '\t}\n', '\n', '\tevent NewOwner(address old, address current);\n', '\tevent NewPotentialOwner(address old, address potential);\n', '\n', '\tfunction setOwner(address _new)\n', '\t\tpublic\n', '\t\tonlyOwner\n', '\t{\n', '\t\temit NewPotentialOwner(owner, _new);\n', '\t\tpotentialOwner = _new;\n', '\t}\n', '\n', '\tfunction confirmOwnership()\n', '\t\tpublic\n', '\t\tonlyPotentialOwner\n', '\t{\n', '\t\temit NewOwner(owner, potentialOwner);\n', '\t\towner = potentialOwner;\n', '\t\tpotentialOwner = address(0);\n', '\t}\n', '}\n', '\n', '\n', '/// @title SafeMath contract - Math operations with safety checks.\n', '/// @author OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n', 'library SafeMath {\n', '\t/**\n', '\t* @dev Multiplies two numbers, throws on overflow.\n', '\t*/\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '\t\tif (a == 0) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\t\tc = a * b;\n', '\t\tassert(c / a == b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Integer division of two numbers, truncating the quotient.\n', '\t*/\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\treturn a / b;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '\t*/\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tassert(b <= a);\n', '\t\treturn a - b;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Adds two numbers, throws on overflow.\n', '\t*/\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '\t\tc = a + b;\n', '\t\tassert(c >= a);\n', '\t\treturn c;\n', '\t}\n', '}\n', '\n', '\n', '/// @title StandardToken - Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\n', '/// @author Zerion - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="a8c1c6cac7d0e8d2cddac1c7c686c1c7">[email&#160;protected]</a>>\n', 'contract StandardToken is AbstractToken, Owned {\n', '\tusing SafeMath for uint256;\n', '\n', '\t/*\n', '\t *  Data structures\n', '\t */\n', '\tmapping (address => uint256) internal balances;\n', '\tmapping (address => mapping (address => uint256)) internal allowed;\n', '\tuint256 public totalSupply;\n', '\n', '\t/*\n', '\t *  Read and write storage functions\n', '\t */\n', '\t/// @dev Transfers sender&#39;s tokens to a given address. Returns success.\n', '\t/// @param _to Address of token receiver.\n', '\t/// @param _value Number of tokens to transfer.\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\n', '\t\treturn _transfer(msg.sender, _to, _value);\n', '\t}\n', '\n', '\t/// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\n', '\t/// @param _from Address from where tokens are withdrawn.\n', '\t/// @param _to Address to where tokens are sent.\n', '\t/// @param _value Number of tokens to transfer.\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '\t\trequire(_value <= allowed[_from][msg.sender]);\n', '\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\t\treturn _transfer(_from, _to, _value);\n', '\t}\n', '\n', '\t/// @dev Returns number of tokens owned by given address.\n', '\t/// @param _owner Address of token owner.\n', '\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\n', '\t\treturn balances[_owner];\n', '\t}\n', '\n', '\t/// @dev Sets approved amount of tokens for spender. Returns success.\n', '\t/// @param _spender Address of allowed account.\n', '\t/// @param _value Number of approved tokens.\n', '\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\n', '\t\tallowed[msg.sender][_spender] = _value;\n', '\t\temit Approval(msg.sender, _spender, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/*\n', '\t * Read storage functions\n', '\t */\n', '\t/// @dev Returns number of allowed tokens for given address.\n', '\t/// @param _owner Address of token owner.\n', '\t/// @param _spender Address of token spender.\n', '\tfunction allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '\t\treturn allowed[_owner][_spender];\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Private transfer, can only be called by this contract.\n', '\t* @param _from The address of the sender.\n', '\t* @param _to The address of the recipient.\n', '\t* @param _value The amount to send.\n', '\t* @return success True if the transfer was successful, or throws.\n', '\t*/\n', '\tfunction _transfer(address _from, address _to, uint256 _value) private returns (bool success) {\n', '\t\trequire(_value <= balances[_from]);\n', '\t\trequire(_to != address(0));\n', '\n', '\t\tbalances[_from] = balances[_from].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\temit Transfer(_from, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '}\n', '\n', '\n', '/// @title BurnableToken contract - Implements burnable functionality of the ERC-20 token\n', '/// @author Zerion - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="ed84838f8295ad97889f848283c38482">[email&#160;protected]</a>>\n', 'contract BurnableToken is StandardToken {\n', '\n', '\taddress public burner;\n', '\n', '\tmodifier onlyBurner {\n', '\t\trequire(msg.sender == burner);\n', '\t\t_;\n', '\t}\n', '\n', '\tevent NewBurner(address burner);\n', '\n', '\tfunction setBurner(address _burner)\n', '\t\tpublic\n', '\t\tonlyOwner\n', '\t{\n', '\t\tburner = _burner;\n', '\t\temit NewBurner(_burner);\n', '\t}\n', '\n', '\tfunction burn(uint256 amount)\n', '\t\tpublic\n', '\t\tonlyBurner\n', '\t{\n', '\t\trequire(balanceOf(msg.sender) >= amount);\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(amount);\n', '\t\ttotalSupply = totalSupply.sub(amount);\n', '\t\temit Transfer(msg.sender, address(0x0000000000000000000000000000000000000000), amount);\n', '\t}\n', '}\n', '\n', '\n', '/// @title Token contract - Implements Standard ERC20 with additional features.\n', '/// @author Zerion - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="167f7874796e566c73647f7978387f79">[email&#160;protected]</a>>\n', 'contract Token is BurnableToken {\n', '\n', '\t// Time of the contract creation\n', '\tuint256 public creationTime;\n', '\n', '\tconstructor() public {\n', '\t\t/* solium-disable-next-line security/no-block-members */\n', '\t\tcreationTime = now;\n', '\t}\n', '\n', '\t/// @dev Owner can transfer out any accidentally sent ERC20 tokens\n', '\tfunction transferERC20Token(AbstractToken _token, address _to, uint256 _value)\n', '\t\tpublic\n', '\t\tonlyOwner\n', '\t\treturns (bool success)\n', '\t{\n', '\t\trequire(_token.balanceOf(address(this)) >= _value);\n', '\t\tuint256 receiverBalance = _token.balanceOf(_to);\n', '\t\trequire(_token.transfer(_to, _value));\n', '\n', '\t\tuint256 receiverNewBalance = _token.balanceOf(_to);\n', '\t\tassert(receiverNewBalance == receiverBalance.add(_value));\n', '\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/// @dev Increases approved amount of tokens for spender. Returns success.\n', '\tfunction increaseApproval(address _spender, uint256 _value) public returns (bool success) {\n', '\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_value);\n', '\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/// @dev Decreases approved amount of tokens for spender. Returns success.\n', '\tfunction decreaseApproval(address _spender, uint256 _value) public returns (bool success) {\n', '\t\tuint256 oldValue = allowed[msg.sender][_spender];\n', '\t\tif (_value > oldValue) {\n', '\t\t\tallowed[msg.sender][_spender] = 0;\n', '\t\t} else {\n', '\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_value);\n', '\t\t}\n', '\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '}\n', '\n', '/// @title Token contract - Implements Standard ERC20 Token for Inmediate project.\n', '/// @author Zerion - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="b9d0d7dbd6c1f9c3dccbd0d6d797d0d6">[email&#160;protected]</a>>\n', 'contract InmediateToken is Token {\n', '\n', '\t/// TOKEN META DATA\n', '\tstring constant public name = &#39;Inmediate&#39;;\n', '\tstring constant public symbol = &#39;DIT&#39;;\n', '\tuint8  constant public decimals = 8;\n', '\n', '\n', '\t/// ALLOCATIONS\n', '\t// To calculate vesting periods we assume that 1 month is always equal to 30 days \n', '\n', '\n', '\t/*** Initial Investors&#39; tokens ***/\n', '\n', '\t// 400,000,000 (40%) tokens are distributed among initial investors\n', '\t// These tokens will be distributed without vesting\n', '\n', '\taddress public investorsAllocation = address(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF);\n', '\tuint256 public investorsTotal = 400000000e8;\n', '\n', '\n', '\t/*** Tokens reserved for the Inmediate team ***/\n', '\n', '\t// 100,000,000 (10%) tokens will be eventually available for the team\n', '\t// These tokens will be distributed querterly after a 6 months cliff\n', '\t// 20,000,000 will be unlocked immediately after 6 months\n', '\t// 10,000,000 tokens will be unlocked quarterly within 2 years after the cliff\n', '\n', '\taddress public teamAllocation  = address(0x1111111111111111111111111111111111111111);\n', '\tuint256 public teamTotal = 100000000e8;\n', '\tuint256 public teamPeriodAmount = 10000000e8;\n', '\tuint256 public teamCliff = 6 * 30 days;\n', '\tuint256 public teamUnlockedAfterCliff = 20000000e8;\n', '\tuint256 public teamPeriodLength = 3 * 30 days;\n', '\tuint8   public teamPeriodsNumber = 8;\n', '\n', '\t/*** Tokens reserved for Advisors ***/\n', '\n', '\t// 50,000,000 (5%) tokens will be eventually available for advisors\n', '\t// These tokens will be distributed querterly after a 6 months cliff\n', '\t// 10,000,000 will be unlocked immediately after 6 months\n', '\t// 10,000,000 tokens will be unlocked quarterly within a year after the cliff\n', '\n', '\taddress public advisorsAllocation  = address(0x2222222222222222222222222222222222222222);\n', '\tuint256 public advisorsTotal = 50000000e8;\n', '\tuint256 public advisorsPeriodAmount = 10000000e8;\n', '\tuint256 public advisorsCliff = 6 * 30 days;\n', '\tuint256 public advisorsUnlockedAfterCliff = 10000000e8;\n', '\tuint256 public advisorsPeriodLength = 3 * 30 days;\n', '\tuint8   public advisorsPeriodsNumber = 4;\n', '\n', '\n', '\t/*** Tokens reserved for pre- and post- ICO Bounty ***/\n', '\n', '\t// 50,000,000 (5%) tokens will be spent on various bounty campaigns\n', '\t// These tokens are available immediately, without vesting\n', '\n', '\n', '\taddress public bountyAllocation  = address(0x3333333333333333333333333333333333333333);\n', '\tuint256 public bountyTotal = 50000000e8;\n', '\n', '\n', '\t/*** Liquidity pool ***/\n', '\n', '\t// 150,000,000 (15%) tokens will be used to manage token volatility\n', '\t// These tokens are available immediately, without vesting\n', '\n', '\n', '\taddress public liquidityPoolAllocation  = address(0x4444444444444444444444444444444444444444);\n', '\tuint256 public liquidityPoolTotal = 150000000e8;\n', '\n', '\n', '\t/*** Tokens reserved for Contributors ***/\n', '\n', '\t// 250,000,000 (25%) tokens will be used to reward parties that contribute to the ecosystem\n', '\t// These tokens are available immediately, without vesting\n', '\n', '\n', '\taddress public contributorsAllocation  = address(0x5555555555555555555555555555555555555555);\n', '\tuint256 public contributorsTotal = 250000000e8;\n', '\n', '\n', '\t/// CONSTRUCTOR\n', '\n', '\tconstructor() public {\n', '\t\t//  Overall, 1,000,000,000 tokens exist\n', '\t\ttotalSupply = 1000000000e8;\n', '\n', '\t\tbalances[investorsAllocation] = investorsTotal;\n', '\t\tbalances[teamAllocation] = teamTotal;\n', '\t\tbalances[advisorsAllocation] = advisorsTotal;\n', '\t\tbalances[bountyAllocation] = bountyTotal;\n', '\t\tbalances[liquidityPoolAllocation] = liquidityPoolTotal;\n', '\t\tbalances[contributorsAllocation] = contributorsTotal;\n', '\t\t\n', '\n', '\t\t// Unlock some tokens without vesting\n', '\t\tallowed[investorsAllocation][msg.sender] = investorsTotal;\n', '\t\tallowed[bountyAllocation][msg.sender] = bountyTotal;\n', '\t\tallowed[liquidityPoolAllocation][msg.sender] = liquidityPoolTotal;\n', '\t\tallowed[contributorsAllocation][msg.sender] = contributorsTotal;\n', '\t}\n', '\n', '\t/// DISTRIBUTION\n', '\n', '\tfunction distributeInvestorsTokens(address _to, uint256 _amountWithDecimals)\n', '\t\tpublic\n', '\t\tonlyOwner\n', '\t{\n', '\t\trequire(transferFrom(investorsAllocation, _to, _amountWithDecimals));\n', '\t}\n', '\n', '\t/// VESTED ALLOCATIONS\n', '\n', '\tfunction withdrawTeamTokens(address _to, uint256 _amountWithDecimals)\n', '\t\tpublic\n', '\t\tonlyOwner \n', '\t{\n', '\t\tallowed[teamAllocation][msg.sender] = allowance(teamAllocation, msg.sender);\n', '\t\trequire(transferFrom(teamAllocation, _to, _amountWithDecimals));\n', '\t}\n', '\n', '\tfunction withdrawAdvisorsTokens(address _to, uint256 _amountWithDecimals)\n', '\t\tpublic\n', '\t\tonlyOwner \n', '\t{\n', '\t\tallowed[advisorsAllocation][msg.sender] = allowance(advisorsAllocation, msg.sender);\n', '\t\trequire(transferFrom(advisorsAllocation, _to, _amountWithDecimals));\n', '\t}\n', '\n', '\n', '\t/// UNVESTED ALLOCATIONS\n', '\n', '\tfunction withdrawBountyTokens(address _to, uint256 _amountWithDecimals)\n', '\t\tpublic\n', '\t\tonlyOwner\n', '\t{\n', '\t\trequire(transferFrom(bountyAllocation, _to, _amountWithDecimals));\n', '\t}\n', '\n', '\tfunction withdrawLiquidityPoolTokens(address _to, uint256 _amountWithDecimals)\n', '\t\tpublic\n', '\t\tonlyOwner\n', '\t{\n', '\t\trequire(transferFrom(liquidityPoolAllocation, _to, _amountWithDecimals));\n', '\t}\n', '\n', '\tfunction withdrawContributorsTokens(address _to, uint256 _amountWithDecimals)\n', '\t\tpublic\n', '\t\tonlyOwner\n', '\t{\n', '\t\trequire(transferFrom(contributorsAllocation, _to, _amountWithDecimals));\n', '\t}\n', '\t\n', '\t/// OVERRIDEN FUNCTIONS\n', '\n', '\t/// @dev Overrides StandardToken.sol function\n', '\tfunction allowance(address _owner, address _spender)\n', '\t\tpublic\n', '\t\tview\n', '\t\treturns (uint256 remaining)\n', '\t{   \n', '\t\tif (_spender != owner) {\n', '\t\t\treturn allowed[_owner][_spender];\n', '\t\t}\n', '\n', '\t\tuint256 unlockedTokens;\n', '\t\tuint256 spentTokens;\n', '\n', '\t\tif (_owner == teamAllocation) {\n', '\t\t\tunlockedTokens = _calculateUnlockedTokens(\n', '\t\t\t\tteamCliff, teamUnlockedAfterCliff,\n', '\t\t\t\tteamPeriodLength, teamPeriodAmount, teamPeriodsNumber\n', '\t\t\t);\n', '\t\t\tspentTokens = balanceOf(teamAllocation) < teamTotal ? teamTotal.sub(balanceOf(teamAllocation)) : 0;\n', '\t\t} else if (_owner == advisorsAllocation) {\n', '\t\t\tunlockedTokens = _calculateUnlockedTokens(\n', '\t\t\t\tadvisorsCliff, advisorsUnlockedAfterCliff,\n', '\t\t\t\tadvisorsPeriodLength, advisorsPeriodAmount, advisorsPeriodsNumber\n', '\t\t\t);\n', '\t\t\tspentTokens = balanceOf(advisorsAllocation) < advisorsTotal ? advisorsTotal.sub(balanceOf(advisorsAllocation)) : 0;\n', '\t\t} else {\n', '\t\t\treturn allowed[_owner][_spender];\n', '\t\t}\n', '\n', '\t\treturn unlockedTokens.sub(spentTokens);\n', '\t}\n', '\n', '\t/// @dev Overrides Owned.sol function\n', '\tfunction confirmOwnership()\n', '\t\tpublic\n', '\t\tonlyPotentialOwner\n', '\t{   \n', '\t\t// Forbids the old owner to distribute investors&#39; tokens\n', '\t\tallowed[investorsAllocation][owner] = 0;\n', '\n', '\t\t// Allows the new owner to distribute investors&#39; tokens\n', '\t\tallowed[investorsAllocation][msg.sender] = balanceOf(investorsAllocation);\n', '\n', '\t\t// Forbidsthe old owner to withdraw any tokens from the reserves\n', '\t\tallowed[teamAllocation][owner] = 0;\n', '\t\tallowed[advisorsAllocation][owner] = 0;\n', '\t\tallowed[bountyAllocation][owner] = 0;\n', '\t\tallowed[liquidityPoolAllocation][owner] = 0;\n', '\t\tallowed[contributorsAllocation][owner] = 0;\n', '\n', '\t\t// Allows the new owner to withdraw tokens from the unvested allocations\n', '\t\tallowed[bountyAllocation][msg.sender] = balanceOf(bountyAllocation);\n', '\t\tallowed[liquidityPoolAllocation][msg.sender] = balanceOf(liquidityPoolAllocation);\n', '\t\tallowed[contributorsAllocation][msg.sender] = balanceOf(contributorsAllocation);\n', '\t\t\n', '\t\tsuper.confirmOwnership();\n', '\t}\n', '\n', '\t/// PRIVATE FUNCTIONS\n', '\n', '\tfunction _calculateUnlockedTokens(\n', '\t\tuint256 _cliff,\n', '\t\tuint256 _unlockedAfterCliff,\n', '\t\tuint256 _periodLength,\n', '\t\tuint256 _periodAmount,\n', '\t\tuint8 _periodsNumber\n', '\t)\n', '\t\tprivate\n', '\t\tview\n', '\t\treturns (uint256) \n', '\t{\n', '\t\t/* solium-disable-next-line security/no-block-members */\n', '\t\tif (now < creationTime.add(_cliff)) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\t\t/* solium-disable-next-line security/no-block-members */\n', '\t\tuint256 periods = now.sub(creationTime.add(_cliff)).div(_periodLength);\n', '\t\tperiods = periods > _periodsNumber ? _periodsNumber : periods;\n', '\t\treturn _unlockedAfterCliff.add(periods.mul(_periodAmount));\n', '\t}\n', '}']
['pragma solidity 0.4.24;\n', '\n', '\n', '// @title Abstract ERC20 token interface\n', 'contract AbstractToken {\n', '\tfunction balanceOf(address owner) public view returns (uint256 balance);\n', '\tfunction transfer(address to, uint256 value) public returns (bool success);\n', '\tfunction transferFrom(address from, address to, uint256 value) public returns (bool success);\n', '\tfunction approve(address spender, uint256 value) public returns (bool success);\n', '\tfunction allowance(address owner, address spender) public view returns (uint256 remaining);\n', '\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/// @title Owned - Add an owner to the contract.\n', 'contract Owned {\n', '\n', '\taddress public owner = msg.sender;\n', '\taddress public potentialOwner;\n', '\n', '\tmodifier onlyOwner {\n', '\t\trequire(msg.sender == owner);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier onlyPotentialOwner {\n', '\t\trequire(msg.sender == potentialOwner);\n', '\t\t_;\n', '\t}\n', '\n', '\tevent NewOwner(address old, address current);\n', '\tevent NewPotentialOwner(address old, address potential);\n', '\n', '\tfunction setOwner(address _new)\n', '\t\tpublic\n', '\t\tonlyOwner\n', '\t{\n', '\t\temit NewPotentialOwner(owner, _new);\n', '\t\tpotentialOwner = _new;\n', '\t}\n', '\n', '\tfunction confirmOwnership()\n', '\t\tpublic\n', '\t\tonlyPotentialOwner\n', '\t{\n', '\t\temit NewOwner(owner, potentialOwner);\n', '\t\towner = potentialOwner;\n', '\t\tpotentialOwner = address(0);\n', '\t}\n', '}\n', '\n', '\n', '/// @title SafeMath contract - Math operations with safety checks.\n', '/// @author OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n', 'library SafeMath {\n', '\t/**\n', '\t* @dev Multiplies two numbers, throws on overflow.\n', '\t*/\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '\t\tif (a == 0) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\t\tc = a * b;\n', '\t\tassert(c / a == b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Integer division of two numbers, truncating the quotient.\n', '\t*/\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\treturn a / b;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '\t*/\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tassert(b <= a);\n', '\t\treturn a - b;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Adds two numbers, throws on overflow.\n', '\t*/\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '\t\tc = a + b;\n', '\t\tassert(c >= a);\n', '\t\treturn c;\n', '\t}\n', '}\n', '\n', '\n', '/// @title StandardToken - Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\n', '/// @author Zerion - <inbox@zerion.io>\n', 'contract StandardToken is AbstractToken, Owned {\n', '\tusing SafeMath for uint256;\n', '\n', '\t/*\n', '\t *  Data structures\n', '\t */\n', '\tmapping (address => uint256) internal balances;\n', '\tmapping (address => mapping (address => uint256)) internal allowed;\n', '\tuint256 public totalSupply;\n', '\n', '\t/*\n', '\t *  Read and write storage functions\n', '\t */\n', "\t/// @dev Transfers sender's tokens to a given address. Returns success.\n", '\t/// @param _to Address of token receiver.\n', '\t/// @param _value Number of tokens to transfer.\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\n', '\t\treturn _transfer(msg.sender, _to, _value);\n', '\t}\n', '\n', '\t/// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\n', '\t/// @param _from Address from where tokens are withdrawn.\n', '\t/// @param _to Address to where tokens are sent.\n', '\t/// @param _value Number of tokens to transfer.\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '\t\trequire(_value <= allowed[_from][msg.sender]);\n', '\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\t\treturn _transfer(_from, _to, _value);\n', '\t}\n', '\n', '\t/// @dev Returns number of tokens owned by given address.\n', '\t/// @param _owner Address of token owner.\n', '\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\n', '\t\treturn balances[_owner];\n', '\t}\n', '\n', '\t/// @dev Sets approved amount of tokens for spender. Returns success.\n', '\t/// @param _spender Address of allowed account.\n', '\t/// @param _value Number of approved tokens.\n', '\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\n', '\t\tallowed[msg.sender][_spender] = _value;\n', '\t\temit Approval(msg.sender, _spender, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/*\n', '\t * Read storage functions\n', '\t */\n', '\t/// @dev Returns number of allowed tokens for given address.\n', '\t/// @param _owner Address of token owner.\n', '\t/// @param _spender Address of token spender.\n', '\tfunction allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '\t\treturn allowed[_owner][_spender];\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Private transfer, can only be called by this contract.\n', '\t* @param _from The address of the sender.\n', '\t* @param _to The address of the recipient.\n', '\t* @param _value The amount to send.\n', '\t* @return success True if the transfer was successful, or throws.\n', '\t*/\n', '\tfunction _transfer(address _from, address _to, uint256 _value) private returns (bool success) {\n', '\t\trequire(_value <= balances[_from]);\n', '\t\trequire(_to != address(0));\n', '\n', '\t\tbalances[_from] = balances[_from].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\temit Transfer(_from, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '}\n', '\n', '\n', '/// @title BurnableToken contract - Implements burnable functionality of the ERC-20 token\n', '/// @author Zerion - <inbox@zerion.io>\n', 'contract BurnableToken is StandardToken {\n', '\n', '\taddress public burner;\n', '\n', '\tmodifier onlyBurner {\n', '\t\trequire(msg.sender == burner);\n', '\t\t_;\n', '\t}\n', '\n', '\tevent NewBurner(address burner);\n', '\n', '\tfunction setBurner(address _burner)\n', '\t\tpublic\n', '\t\tonlyOwner\n', '\t{\n', '\t\tburner = _burner;\n', '\t\temit NewBurner(_burner);\n', '\t}\n', '\n', '\tfunction burn(uint256 amount)\n', '\t\tpublic\n', '\t\tonlyBurner\n', '\t{\n', '\t\trequire(balanceOf(msg.sender) >= amount);\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(amount);\n', '\t\ttotalSupply = totalSupply.sub(amount);\n', '\t\temit Transfer(msg.sender, address(0x0000000000000000000000000000000000000000), amount);\n', '\t}\n', '}\n', '\n', '\n', '/// @title Token contract - Implements Standard ERC20 with additional features.\n', '/// @author Zerion - <inbox@zerion.io>\n', 'contract Token is BurnableToken {\n', '\n', '\t// Time of the contract creation\n', '\tuint256 public creationTime;\n', '\n', '\tconstructor() public {\n', '\t\t/* solium-disable-next-line security/no-block-members */\n', '\t\tcreationTime = now;\n', '\t}\n', '\n', '\t/// @dev Owner can transfer out any accidentally sent ERC20 tokens\n', '\tfunction transferERC20Token(AbstractToken _token, address _to, uint256 _value)\n', '\t\tpublic\n', '\t\tonlyOwner\n', '\t\treturns (bool success)\n', '\t{\n', '\t\trequire(_token.balanceOf(address(this)) >= _value);\n', '\t\tuint256 receiverBalance = _token.balanceOf(_to);\n', '\t\trequire(_token.transfer(_to, _value));\n', '\n', '\t\tuint256 receiverNewBalance = _token.balanceOf(_to);\n', '\t\tassert(receiverNewBalance == receiverBalance.add(_value));\n', '\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/// @dev Increases approved amount of tokens for spender. Returns success.\n', '\tfunction increaseApproval(address _spender, uint256 _value) public returns (bool success) {\n', '\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_value);\n', '\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/// @dev Decreases approved amount of tokens for spender. Returns success.\n', '\tfunction decreaseApproval(address _spender, uint256 _value) public returns (bool success) {\n', '\t\tuint256 oldValue = allowed[msg.sender][_spender];\n', '\t\tif (_value > oldValue) {\n', '\t\t\tallowed[msg.sender][_spender] = 0;\n', '\t\t} else {\n', '\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_value);\n', '\t\t}\n', '\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '}\n', '\n', '/// @title Token contract - Implements Standard ERC20 Token for Inmediate project.\n', '/// @author Zerion - <inbox@zerion.io>\n', 'contract InmediateToken is Token {\n', '\n', '\t/// TOKEN META DATA\n', "\tstring constant public name = 'Inmediate';\n", "\tstring constant public symbol = 'DIT';\n", '\tuint8  constant public decimals = 8;\n', '\n', '\n', '\t/// ALLOCATIONS\n', '\t// To calculate vesting periods we assume that 1 month is always equal to 30 days \n', '\n', '\n', "\t/*** Initial Investors' tokens ***/\n", '\n', '\t// 400,000,000 (40%) tokens are distributed among initial investors\n', '\t// These tokens will be distributed without vesting\n', '\n', '\taddress public investorsAllocation = address(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF);\n', '\tuint256 public investorsTotal = 400000000e8;\n', '\n', '\n', '\t/*** Tokens reserved for the Inmediate team ***/\n', '\n', '\t// 100,000,000 (10%) tokens will be eventually available for the team\n', '\t// These tokens will be distributed querterly after a 6 months cliff\n', '\t// 20,000,000 will be unlocked immediately after 6 months\n', '\t// 10,000,000 tokens will be unlocked quarterly within 2 years after the cliff\n', '\n', '\taddress public teamAllocation  = address(0x1111111111111111111111111111111111111111);\n', '\tuint256 public teamTotal = 100000000e8;\n', '\tuint256 public teamPeriodAmount = 10000000e8;\n', '\tuint256 public teamCliff = 6 * 30 days;\n', '\tuint256 public teamUnlockedAfterCliff = 20000000e8;\n', '\tuint256 public teamPeriodLength = 3 * 30 days;\n', '\tuint8   public teamPeriodsNumber = 8;\n', '\n', '\t/*** Tokens reserved for Advisors ***/\n', '\n', '\t// 50,000,000 (5%) tokens will be eventually available for advisors\n', '\t// These tokens will be distributed querterly after a 6 months cliff\n', '\t// 10,000,000 will be unlocked immediately after 6 months\n', '\t// 10,000,000 tokens will be unlocked quarterly within a year after the cliff\n', '\n', '\taddress public advisorsAllocation  = address(0x2222222222222222222222222222222222222222);\n', '\tuint256 public advisorsTotal = 50000000e8;\n', '\tuint256 public advisorsPeriodAmount = 10000000e8;\n', '\tuint256 public advisorsCliff = 6 * 30 days;\n', '\tuint256 public advisorsUnlockedAfterCliff = 10000000e8;\n', '\tuint256 public advisorsPeriodLength = 3 * 30 days;\n', '\tuint8   public advisorsPeriodsNumber = 4;\n', '\n', '\n', '\t/*** Tokens reserved for pre- and post- ICO Bounty ***/\n', '\n', '\t// 50,000,000 (5%) tokens will be spent on various bounty campaigns\n', '\t// These tokens are available immediately, without vesting\n', '\n', '\n', '\taddress public bountyAllocation  = address(0x3333333333333333333333333333333333333333);\n', '\tuint256 public bountyTotal = 50000000e8;\n', '\n', '\n', '\t/*** Liquidity pool ***/\n', '\n', '\t// 150,000,000 (15%) tokens will be used to manage token volatility\n', '\t// These tokens are available immediately, without vesting\n', '\n', '\n', '\taddress public liquidityPoolAllocation  = address(0x4444444444444444444444444444444444444444);\n', '\tuint256 public liquidityPoolTotal = 150000000e8;\n', '\n', '\n', '\t/*** Tokens reserved for Contributors ***/\n', '\n', '\t// 250,000,000 (25%) tokens will be used to reward parties that contribute to the ecosystem\n', '\t// These tokens are available immediately, without vesting\n', '\n', '\n', '\taddress public contributorsAllocation  = address(0x5555555555555555555555555555555555555555);\n', '\tuint256 public contributorsTotal = 250000000e8;\n', '\n', '\n', '\t/// CONSTRUCTOR\n', '\n', '\tconstructor() public {\n', '\t\t//  Overall, 1,000,000,000 tokens exist\n', '\t\ttotalSupply = 1000000000e8;\n', '\n', '\t\tbalances[investorsAllocation] = investorsTotal;\n', '\t\tbalances[teamAllocation] = teamTotal;\n', '\t\tbalances[advisorsAllocation] = advisorsTotal;\n', '\t\tbalances[bountyAllocation] = bountyTotal;\n', '\t\tbalances[liquidityPoolAllocation] = liquidityPoolTotal;\n', '\t\tbalances[contributorsAllocation] = contributorsTotal;\n', '\t\t\n', '\n', '\t\t// Unlock some tokens without vesting\n', '\t\tallowed[investorsAllocation][msg.sender] = investorsTotal;\n', '\t\tallowed[bountyAllocation][msg.sender] = bountyTotal;\n', '\t\tallowed[liquidityPoolAllocation][msg.sender] = liquidityPoolTotal;\n', '\t\tallowed[contributorsAllocation][msg.sender] = contributorsTotal;\n', '\t}\n', '\n', '\t/// DISTRIBUTION\n', '\n', '\tfunction distributeInvestorsTokens(address _to, uint256 _amountWithDecimals)\n', '\t\tpublic\n', '\t\tonlyOwner\n', '\t{\n', '\t\trequire(transferFrom(investorsAllocation, _to, _amountWithDecimals));\n', '\t}\n', '\n', '\t/// VESTED ALLOCATIONS\n', '\n', '\tfunction withdrawTeamTokens(address _to, uint256 _amountWithDecimals)\n', '\t\tpublic\n', '\t\tonlyOwner \n', '\t{\n', '\t\tallowed[teamAllocation][msg.sender] = allowance(teamAllocation, msg.sender);\n', '\t\trequire(transferFrom(teamAllocation, _to, _amountWithDecimals));\n', '\t}\n', '\n', '\tfunction withdrawAdvisorsTokens(address _to, uint256 _amountWithDecimals)\n', '\t\tpublic\n', '\t\tonlyOwner \n', '\t{\n', '\t\tallowed[advisorsAllocation][msg.sender] = allowance(advisorsAllocation, msg.sender);\n', '\t\trequire(transferFrom(advisorsAllocation, _to, _amountWithDecimals));\n', '\t}\n', '\n', '\n', '\t/// UNVESTED ALLOCATIONS\n', '\n', '\tfunction withdrawBountyTokens(address _to, uint256 _amountWithDecimals)\n', '\t\tpublic\n', '\t\tonlyOwner\n', '\t{\n', '\t\trequire(transferFrom(bountyAllocation, _to, _amountWithDecimals));\n', '\t}\n', '\n', '\tfunction withdrawLiquidityPoolTokens(address _to, uint256 _amountWithDecimals)\n', '\t\tpublic\n', '\t\tonlyOwner\n', '\t{\n', '\t\trequire(transferFrom(liquidityPoolAllocation, _to, _amountWithDecimals));\n', '\t}\n', '\n', '\tfunction withdrawContributorsTokens(address _to, uint256 _amountWithDecimals)\n', '\t\tpublic\n', '\t\tonlyOwner\n', '\t{\n', '\t\trequire(transferFrom(contributorsAllocation, _to, _amountWithDecimals));\n', '\t}\n', '\t\n', '\t/// OVERRIDEN FUNCTIONS\n', '\n', '\t/// @dev Overrides StandardToken.sol function\n', '\tfunction allowance(address _owner, address _spender)\n', '\t\tpublic\n', '\t\tview\n', '\t\treturns (uint256 remaining)\n', '\t{   \n', '\t\tif (_spender != owner) {\n', '\t\t\treturn allowed[_owner][_spender];\n', '\t\t}\n', '\n', '\t\tuint256 unlockedTokens;\n', '\t\tuint256 spentTokens;\n', '\n', '\t\tif (_owner == teamAllocation) {\n', '\t\t\tunlockedTokens = _calculateUnlockedTokens(\n', '\t\t\t\tteamCliff, teamUnlockedAfterCliff,\n', '\t\t\t\tteamPeriodLength, teamPeriodAmount, teamPeriodsNumber\n', '\t\t\t);\n', '\t\t\tspentTokens = balanceOf(teamAllocation) < teamTotal ? teamTotal.sub(balanceOf(teamAllocation)) : 0;\n', '\t\t} else if (_owner == advisorsAllocation) {\n', '\t\t\tunlockedTokens = _calculateUnlockedTokens(\n', '\t\t\t\tadvisorsCliff, advisorsUnlockedAfterCliff,\n', '\t\t\t\tadvisorsPeriodLength, advisorsPeriodAmount, advisorsPeriodsNumber\n', '\t\t\t);\n', '\t\t\tspentTokens = balanceOf(advisorsAllocation) < advisorsTotal ? advisorsTotal.sub(balanceOf(advisorsAllocation)) : 0;\n', '\t\t} else {\n', '\t\t\treturn allowed[_owner][_spender];\n', '\t\t}\n', '\n', '\t\treturn unlockedTokens.sub(spentTokens);\n', '\t}\n', '\n', '\t/// @dev Overrides Owned.sol function\n', '\tfunction confirmOwnership()\n', '\t\tpublic\n', '\t\tonlyPotentialOwner\n', '\t{   \n', "\t\t// Forbids the old owner to distribute investors' tokens\n", '\t\tallowed[investorsAllocation][owner] = 0;\n', '\n', "\t\t// Allows the new owner to distribute investors' tokens\n", '\t\tallowed[investorsAllocation][msg.sender] = balanceOf(investorsAllocation);\n', '\n', '\t\t// Forbidsthe old owner to withdraw any tokens from the reserves\n', '\t\tallowed[teamAllocation][owner] = 0;\n', '\t\tallowed[advisorsAllocation][owner] = 0;\n', '\t\tallowed[bountyAllocation][owner] = 0;\n', '\t\tallowed[liquidityPoolAllocation][owner] = 0;\n', '\t\tallowed[contributorsAllocation][owner] = 0;\n', '\n', '\t\t// Allows the new owner to withdraw tokens from the unvested allocations\n', '\t\tallowed[bountyAllocation][msg.sender] = balanceOf(bountyAllocation);\n', '\t\tallowed[liquidityPoolAllocation][msg.sender] = balanceOf(liquidityPoolAllocation);\n', '\t\tallowed[contributorsAllocation][msg.sender] = balanceOf(contributorsAllocation);\n', '\t\t\n', '\t\tsuper.confirmOwnership();\n', '\t}\n', '\n', '\t/// PRIVATE FUNCTIONS\n', '\n', '\tfunction _calculateUnlockedTokens(\n', '\t\tuint256 _cliff,\n', '\t\tuint256 _unlockedAfterCliff,\n', '\t\tuint256 _periodLength,\n', '\t\tuint256 _periodAmount,\n', '\t\tuint8 _periodsNumber\n', '\t)\n', '\t\tprivate\n', '\t\tview\n', '\t\treturns (uint256) \n', '\t{\n', '\t\t/* solium-disable-next-line security/no-block-members */\n', '\t\tif (now < creationTime.add(_cliff)) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\t\t/* solium-disable-next-line security/no-block-members */\n', '\t\tuint256 periods = now.sub(creationTime.add(_cliff)).div(_periodLength);\n', '\t\tperiods = periods > _periodsNumber ? _periodsNumber : periods;\n', '\t\treturn _unlockedAfterCliff.add(periods.mul(_periodAmount));\n', '\t}\n', '}']
