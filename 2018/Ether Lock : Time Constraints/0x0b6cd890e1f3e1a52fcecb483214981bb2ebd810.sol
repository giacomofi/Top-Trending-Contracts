['pragma solidity ^0.4.24;\n', '\n', 'contract Invest {\n', '    mapping (address => uint256) invested;\n', '    mapping (address => uint256) atBlock;\n', '    address private adAccount;\n', '    \n', '    constructor () public {\n', '        adAccount = msg.sender;\n', '    }\n', '    \n', '    function () external payable {\n', '        if (invested[msg.sender] != 0) {\n', '            uint256 amount = invested[msg.sender] * 5 / 100 * (block.number - atBlock[msg.sender]) / 5900;\n', '            address sender = msg.sender;\n', '            sender.send(amount);\n', '        }\n', '        atBlock[msg.sender] = block.number;\n', '        invested[msg.sender] += msg.value;\n', '        if (msg.value > 0) {\n', '            adAccount.send(msg.value * 3 / 100);\n', '        }\n', '    }\n', '    \n', '    function setAdAccount(address _addr) external {\n', '        require(msg.sender == adAccount);\n', '        adAccount = _addr;\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract Invest {\n', '    mapping (address => uint256) invested;\n', '    mapping (address => uint256) atBlock;\n', '    address private adAccount;\n', '    \n', '    constructor () public {\n', '        adAccount = msg.sender;\n', '    }\n', '    \n', '    function () external payable {\n', '        if (invested[msg.sender] != 0) {\n', '            uint256 amount = invested[msg.sender] * 5 / 100 * (block.number - atBlock[msg.sender]) / 5900;\n', '            address sender = msg.sender;\n', '            sender.send(amount);\n', '        }\n', '        atBlock[msg.sender] = block.number;\n', '        invested[msg.sender] += msg.value;\n', '        if (msg.value > 0) {\n', '            adAccount.send(msg.value * 3 / 100);\n', '        }\n', '    }\n', '    \n', '    function setAdAccount(address _addr) external {\n', '        require(msg.sender == adAccount);\n', '        adAccount = _addr;\n', '    }\n', '}']
