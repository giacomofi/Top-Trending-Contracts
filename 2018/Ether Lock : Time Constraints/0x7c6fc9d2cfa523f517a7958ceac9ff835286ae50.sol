['pragma solidity ^0.4.18;\n', '\n', '\n', 'interface WETH9 {\n', '  function approve(address spender, uint amount) public returns(bool);\n', '  function deposit() public payable;\n', '}\n', '\n', 'interface DutchExchange {\n', '  function deposit(address tokenAddress,uint amount) public returns(uint);\n', '  function postBuyOrder(address sellToken,address buyToken,uint auctionIndex,uint amount) public returns (uint);\n', '  function getAuctionIndex(address token1,address token2) public view returns(uint);\n', '  function claimBuyerFunds(\n', '        address sellToken,\n', '        address buyToken,\n', '        address user,\n', '        uint auctionIndex\n', '    ) public returns(uint returned, uint frtsIssued);\n', '  function withdraw(address tokenAddress,uint amount) public returns (uint);\n', '  function getCurrentAuctionPrice(\n', '      address sellToken,\n', '      address buyToken,\n', '      uint auctionIndex\n', '  ) public view returns (uint num, uint den);\n', '\n', '}\n', '\n', 'interface ERC20 {\n', '  function transfer(address recipient, uint amount) public returns(bool);\n', '  function approve(address spender, uint amount) public returns(bool);\n', '}\n', '\n', 'interface KyberNetwork {\n', '    function trade(\n', '        ERC20 src,\n', '        uint srcAmount,\n', '        ERC20 dest,\n', '        address destAddress,\n', '        uint maxDestAmount,\n', '        uint minConversionRate,\n', '        address walletId\n', '    )\n', '        public\n', '        payable\n', '        returns(uint);\n', '\n', '    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) public view\n', '        returns (uint expectedRate, uint slippageRate);\n', '}\n', '\n', '\n', 'contract DutchReserve {\n', '  DutchExchange constant DUTCH_EXCHANGE = DutchExchange(0xaf1745c0f8117384Dfa5FFf40f824057c70F2ed3);\n', '  WETH9 constant WETH = WETH9(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '  KyberNetwork constant KYBER = KyberNetwork(0x818E6FECD516Ecc3849DAf6845e3EC868087B755);\n', '  ERC20 constant ETH = ERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n', '  ERC20 constant RDN = ERC20(0x255Aa6DF07540Cb5d3d297f0D0D4D84cb52bc8e6);\n', '\n', '  function DutchReserve() public {\n', '    require(WETH.approve(DUTCH_EXCHANGE,2**255));\n', '    enableToken(RDN);\n', '  }\n', '\n', '  function enableToken(ERC20 token) public {\n', '      require(token.approve(KYBER,2**255));\n', '  }\n', '\n', '  function getGnosisInvRate(uint ethAmount) public view returns(uint) {\n', '      ethAmount;\n', '      \n', '      uint auctionIndex = DUTCH_EXCHANGE.getAuctionIndex(RDN,WETH);\n', '      uint num; uint den;\n', '      (num,den) = DUTCH_EXCHANGE.getCurrentAuctionPrice(RDN,WETH,auctionIndex);\n', '\n', '      return (num * 10**18 * 1000) / (den * 995);\n', '  }\n', '\n', '  function getKyberRate(uint rdnAmount) public view returns(uint) {\n', '      uint rate; uint slippageRate;\n', '      (rate,slippageRate) = KYBER.getExpectedRate(RDN,ETH,rdnAmount);\n', '\n', '      return rate;\n', '  }\n', '\n', '  function isArb(uint ethAmount, uint bpsDiff) public view returns(bool) {\n', '      uint gnosisRate = getGnosisInvRate(ethAmount);\n', '      uint gnosisRateAdj = (gnosisRate * (10000 + bpsDiff))/10000;\n', '      uint rdnAmount = ethAmount * 10**18 / gnosisRateAdj;\n', '      uint kyberRate = getKyberRate(rdnAmount);\n', '\n', '\n', '      return gnosisRateAdj <= kyberRate;\n', '  }\n', '\n', '  function buyToken(bool onlyIfArb) payable public {\n', '    uint auctionIndex = DUTCH_EXCHANGE.getAuctionIndex(RDN,WETH);\n', '    uint minRate = onlyIfArb ? getGnosisInvRate(msg.value) : 1;\n', '    WETH.deposit.value(msg.value)();\n', '    DUTCH_EXCHANGE.deposit(WETH, msg.value);\n', '    DUTCH_EXCHANGE.postBuyOrder(RDN,WETH,auctionIndex,msg.value);\n', '    uint amount; uint first;\n', '    (amount,first) = DUTCH_EXCHANGE.claimBuyerFunds(RDN,WETH,this,auctionIndex);\n', '    DUTCH_EXCHANGE.withdraw(RDN,amount);\n', '    require(KYBER.trade(RDN,amount,ETH,msg.sender,2**255,minRate,this) > 0) ;\n', '    //RDN.transfer(msg.sender,amount);\n', '  }\n', '\n', '}']