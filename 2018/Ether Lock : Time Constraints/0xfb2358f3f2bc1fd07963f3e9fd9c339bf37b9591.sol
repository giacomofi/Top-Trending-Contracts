['pragma solidity ^0.4.19;\n', '\n', 'contract ERC20 {\n', '  function balanceOf(address _owner) public constant returns (uint256 balance);\n', '}\n', '\n', 'contract GetManyBalances {\n', '  function getManyBalances(address[] addresses)\n', '      public view returns (uint256[]) {\n', '    return _getManyBalances(addresses);\n', '  }\n', '\n', '  function getManyTokenBalances(address[] addresses, ERC20 token)\n', '      public view returns (uint256[]) {\n', '    return _getManyTokenBalances(addresses, token);\n', '  }\n', '\n', '  function getManyBalancesPacked(bytes addressesPacked, ERC20 token)\n', '      public view returns (uint256 []) {\n', '    uint256 len = addressesPacked.length;\n', '    require(len % 20 == 0);\n', '    uint256 numAddresses = len / 20;\n', '\n', '    address[] memory addresses = new address[](numAddresses);\n', '    uint256 out;\n', '    uint256 outEnd;\n', '\n', '    assembly {\n', '      out := add(addresses, 32)\n', '      outEnd := add(out, mul(32, numAddresses))\n', '    }\n', '\n', '    while (out < outEnd) {\n', '      assembly {\n', '          addressesPacked := add(addressesPacked, 20)\n', '          mstore(out, mload(addressesPacked))\n', '          out := add(out, 32)\n', '      }\n', '    }\n', '\n', '    return _getManyTokenBalances(addresses, token);\n', '  }\n', '\n', '  function _getManyBalances(address[] memory addresses)\n', '      internal view returns (uint256[]) {\n', '    uint[] memory b = new uint[](addresses.length);\n', '    for (uint i = 0; i < addresses.length; ++i) {\n', '        b[i] = addresses[i].balance;\n', '    }\n', '    return b;\n', '  }\n', '\n', '  function _getManyTokenBalances(address[] memory addresses, ERC20 token)\n', '      internal view returns (uint256[]) {\n', '    if (token == ERC20(0)) {\n', '      return _getManyBalances(addresses);\n', '    }\n', '    uint[] memory b = new uint[](addresses.length);\n', '    for (uint i = 0; i < addresses.length; ++i) {\n', '        b[i] = token.balanceOf(addresses[i]);\n', '    }\n', '    return b;\n', '  }\n', '}']