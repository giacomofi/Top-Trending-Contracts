['pragma solidity^0.4.18;\n', '\n', 'contract Owned {\n', '    address owner;\n', '    \n', '    modifier onlyowner(){\n', '        if (msg.sender == owner) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    function Owned() internal {\n', '        owner = msg.sender;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract ethKeepHand is Owned{\n', '\n', '    struct DepositItem{\n', '        \n', '        uint depositDate;     //Date of deposit\n', '        uint256 depositValue; //The amount of deposit\n', '        uint depositTime;     //The terms of deposit\n', '        uint  valid;          //The address is in the state of deposit:\n', '                              //1 indicates that there is a deposit in the corresponding address, and 0 indicates no.\n', '    }\n', '\n', '     mapping(address => DepositItem)  DepositItems;\n', '\n', '     event DepositTime(uint time);\n', '     \n', '     //Judge whether you can withdraw money\n', '     modifier withdrawable(address adr){\n', '\n', '         require(this.balance >= DepositItems[adr].depositValue);\n', '         _;\n', '     }\n', '    \n', '    //Determine whether you can deposit money\n', '    modifier isright()\n', '    {\n', '        require(DepositItems[msg.sender].valid !=1);\n', '        _;\n', '    }\n', '\n', '\n', '\n', '    //deposit\n', '    function addDeposit(uint _time) external payable isright{\n', '         \n', '         DepositTime(_time);\n', '         DepositItems[msg.sender].depositDate = now;\n', '         DepositItems[msg.sender].depositValue = msg.value;\n', '         DepositItems[msg.sender].depositTime = _time;\n', '         DepositItems[msg.sender].valid =1;\n', '\n', '     }\n', '\n', '     //Note how many days are left until the date of withdrawal.\n', '     function withdrawtime() external view returns(uint){\n', '       \n', '       if(DepositItems[msg.sender].depositDate + DepositItems[msg.sender].depositTime > now){\n', '         return DepositItems[msg.sender].depositDate + DepositItems[msg.sender].depositTime - now;\n', '       }\n', '       \n', '        return 0;\n', '     }\n', '\n', '     //withdrawals\n', '     function withdrawals() withdrawable(msg.sender) external{\n', '\n', '        DepositItems[msg.sender].valid = 0;\n', '        uint256 backvalue = DepositItems[msg.sender].depositValue;\n', '        DepositItems[msg.sender].depositValue = 0;\n', '        msg.sender.transfer(backvalue);\n', '\n', '\n', '     }\n', '    \n', '     //Amount of deposit\n', '    function getdepositValue()  external view returns(uint)\n', '     {\n', '        \n', '        return DepositItems[msg.sender].depositValue;\n', '     }\n', '     //Contract balance\n', '     function getvalue() public view returns(uint)\n', '     {\n', '         \n', '         return this.balance;\n', '     }\n', '      //Decide whether to deposit money\n', '     function  isdeposit() external view returns(uint){\n', '\n', '         return DepositItems[msg.sender].valid;\n', '       }\n', '\n', '\n', '      function() public payable{\n', '          \n', '          revert();\n', '      }\n', '}']
['pragma solidity^0.4.18;\n', '\n', 'contract Owned {\n', '    address owner;\n', '    \n', '    modifier onlyowner(){\n', '        if (msg.sender == owner) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    function Owned() internal {\n', '        owner = msg.sender;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract ethKeepHand is Owned{\n', '\n', '    struct DepositItem{\n', '        \n', '        uint depositDate;     //Date of deposit\n', '        uint256 depositValue; //The amount of deposit\n', '        uint depositTime;     //The terms of deposit\n', '        uint  valid;          //The address is in the state of deposit:\n', '                              //1 indicates that there is a deposit in the corresponding address, and 0 indicates no.\n', '    }\n', '\n', '     mapping(address => DepositItem)  DepositItems;\n', '\n', '     event DepositTime(uint time);\n', '     \n', '     //Judge whether you can withdraw money\n', '     modifier withdrawable(address adr){\n', '\n', '         require(this.balance >= DepositItems[adr].depositValue);\n', '         _;\n', '     }\n', '    \n', '    //Determine whether you can deposit money\n', '    modifier isright()\n', '    {\n', '        require(DepositItems[msg.sender].valid !=1);\n', '        _;\n', '    }\n', '\n', '\n', '\n', '    //deposit\n', '    function addDeposit(uint _time) external payable isright{\n', '         \n', '         DepositTime(_time);\n', '         DepositItems[msg.sender].depositDate = now;\n', '         DepositItems[msg.sender].depositValue = msg.value;\n', '         DepositItems[msg.sender].depositTime = _time;\n', '         DepositItems[msg.sender].valid =1;\n', '\n', '     }\n', '\n', '     //Note how many days are left until the date of withdrawal.\n', '     function withdrawtime() external view returns(uint){\n', '       \n', '       if(DepositItems[msg.sender].depositDate + DepositItems[msg.sender].depositTime > now){\n', '         return DepositItems[msg.sender].depositDate + DepositItems[msg.sender].depositTime - now;\n', '       }\n', '       \n', '        return 0;\n', '     }\n', '\n', '     //withdrawals\n', '     function withdrawals() withdrawable(msg.sender) external{\n', '\n', '        DepositItems[msg.sender].valid = 0;\n', '        uint256 backvalue = DepositItems[msg.sender].depositValue;\n', '        DepositItems[msg.sender].depositValue = 0;\n', '        msg.sender.transfer(backvalue);\n', '\n', '\n', '     }\n', '    \n', '     //Amount of deposit\n', '    function getdepositValue()  external view returns(uint)\n', '     {\n', '        \n', '        return DepositItems[msg.sender].depositValue;\n', '     }\n', '     //Contract balance\n', '     function getvalue() public view returns(uint)\n', '     {\n', '         \n', '         return this.balance;\n', '     }\n', '      //Decide whether to deposit money\n', '     function  isdeposit() external view returns(uint){\n', '\n', '         return DepositItems[msg.sender].valid;\n', '       }\n', '\n', '\n', '      function() public payable{\n', '          \n', '          revert();\n', '      }\n', '}']
