['pragma solidity ^0.4.20;\n', '\n', 'contract NotFomo3D {\n', '\n', '    //owner of contract\n', '    address public owner;\n', '    \n', '    //last bidder and winner\n', '    address public latestBidder;\n', '    address public latestWinner;\n', '    \n', '    //time left of auction\n', '    uint public endTime;\n', '    uint public addTime;\n', '    \n', '    //event for auctions bid\n', '    event Bid(address bidder, uint ending, uint adding, uint balance);\n', '\n', '    //constructor\n', '    function NotFomo3D() public {\n', '        owner           = msg.sender;\n', '        latestBidder    = msg.sender;\n', '        latestWinner    = msg.sender;\n', '        addTime         = (2 hours);\n', '        endTime         = 0;\n', '    }\n', '\n', '    //bid on auction\n', '    function bid() payable public{\n', '        \n', '        //bid must be precisely 0.005 ETH\n', '        require(msg.value == 5000000000000000);\n', '\n', '        //place first bid\n', '        if(endTime == 0){\n', '            endTime = (now + addTime);\n', '        }\n', '        \n', '        //place a bid\n', '        if(endTime != 0 && endTime > now){\n', '            addTime -= (10 seconds);\n', '            endTime = (now + addTime);\n', '            latestBidder = msg.sender;\n', '            Bid(latestBidder, endTime, addTime, this.balance);\n', '        }\n', '        \n', '        //winner found, restart auction\n', '        if(addTime == 0 || endTime <= now){\n', '            latestWinner = latestBidder;\n', '            \n', '            //restart auction\n', '            addTime = (2 hours);\n', '            endTime = (now + addTime);\n', '            latestBidder = msg.sender;\n', '            Bid(latestBidder, endTime, addTime, ((this.balance/20)*17)+5000000000000000);\n', '            \n', '            //transfer winnings\n', '            owner.transfer((this.balance/20)*1);\n', '            latestWinner.transfer(((this.balance-5000000000000000)/10)*8);\n', '        }\n', '    }\n', '    \n', '    //allow for eth to be fed to the contract\n', '    function() public payable {}\n', '}']
['pragma solidity ^0.4.20;\n', '\n', 'contract NotFomo3D {\n', '\n', '    //owner of contract\n', '    address public owner;\n', '    \n', '    //last bidder and winner\n', '    address public latestBidder;\n', '    address public latestWinner;\n', '    \n', '    //time left of auction\n', '    uint public endTime;\n', '    uint public addTime;\n', '    \n', '    //event for auctions bid\n', '    event Bid(address bidder, uint ending, uint adding, uint balance);\n', '\n', '    //constructor\n', '    function NotFomo3D() public {\n', '        owner           = msg.sender;\n', '        latestBidder    = msg.sender;\n', '        latestWinner    = msg.sender;\n', '        addTime         = (2 hours);\n', '        endTime         = 0;\n', '    }\n', '\n', '    //bid on auction\n', '    function bid() payable public{\n', '        \n', '        //bid must be precisely 0.005 ETH\n', '        require(msg.value == 5000000000000000);\n', '\n', '        //place first bid\n', '        if(endTime == 0){\n', '            endTime = (now + addTime);\n', '        }\n', '        \n', '        //place a bid\n', '        if(endTime != 0 && endTime > now){\n', '            addTime -= (10 seconds);\n', '            endTime = (now + addTime);\n', '            latestBidder = msg.sender;\n', '            Bid(latestBidder, endTime, addTime, this.balance);\n', '        }\n', '        \n', '        //winner found, restart auction\n', '        if(addTime == 0 || endTime <= now){\n', '            latestWinner = latestBidder;\n', '            \n', '            //restart auction\n', '            addTime = (2 hours);\n', '            endTime = (now + addTime);\n', '            latestBidder = msg.sender;\n', '            Bid(latestBidder, endTime, addTime, ((this.balance/20)*17)+5000000000000000);\n', '            \n', '            //transfer winnings\n', '            owner.transfer((this.balance/20)*1);\n', '            latestWinner.transfer(((this.balance-5000000000000000)/10)*8);\n', '        }\n', '    }\n', '    \n', '    //allow for eth to be fed to the contract\n', '    function() public payable {}\n', '}']
