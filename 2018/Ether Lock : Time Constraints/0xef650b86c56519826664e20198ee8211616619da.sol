['pragma solidity ^0.4.18;\n', '\n', 'contract FullERC20 {\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  \n', '  uint256 public totalSupply;\n', '  uint8 public decimals;\n', '\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Crowdsale is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '\n', '    // start and end timestamps where investments are allowed (both inclusive)\n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '\n', '    // address where funds are collected\n', '    address public wallet;\n', '    FullERC20 public token;\n', '\n', '    // token amount per 1 ETH\n', '    // eg. 40000000000 = 2500000 tokens.\n', '    uint256 public rate; \n', '\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '    uint256 public tokensPurchased;\n', '\n', '    /**\n', '    * event for token purchase logging\n', '    * @param purchaser who paid for the tokens\n', '    * @param value weis paid for purchase\n', '    * @param amount amount of tokens purchased\n', '    */\n', '    event TokenPurchased(address indexed purchaser, uint256 value, uint256 amount);\n', '\n', '    function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, address _token) public {\n', '        require(_startTime >= now);\n', '        require(_endTime >= _startTime);\n', '        require(_rate > 0);\n', '        require(_wallet != address(0));\n', '        require(_token != address(0));\n', '\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '        rate = _rate;\n', '        wallet = _wallet;\n', '        token = FullERC20(_token);\n', '    }\n', '\n', '    // fallback function can be used to buy tokens\n', '    function () public payable {\n', '        purchase();\n', '    }\n', '\n', '    function purchase() public payable {\n', '        require(msg.sender != address(0));\n', '        require(validPurchase());\n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = weiAmount.div(rate);\n', '        require(tokens > 0);\n', '        require(token.balanceOf(this) > tokens);\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        tokensPurchased = tokensPurchased.add(tokens);\n', '\n', '        TokenPurchased(msg.sender, weiAmount, tokens);\n', '        assert(token.transfer(msg.sender, tokens));\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '    // @return true if the transaction can buy tokens\n', '    function validPurchase() internal view returns (bool) {\n', '        bool withinPeriod = now >= startTime && now <= endTime;\n', '        bool nonZeroPurchase = msg.value != 0;\n', '        return withinPeriod && nonZeroPurchase;\n', '    }\n', '\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public view returns (bool) {\n', '        return now > endTime;\n', '    }\n', '\n', '    // @dev updates the rate\n', '    function updateRate(uint256 newRate) public onlyOwner {\n', '        rate = newRate;\n', '    }\n', '\n', '    function updateTimes(uint256 _startTime, uint256 _endTime) public onlyOwner {\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '    }\n', '\n', '    // @dev returns the number of tokens available in the sale.\n', '    function tokensAvailable() public view returns (bool) {\n', '        return token.balanceOf(this) > 0;\n', '    }\n', '\n', '    // @dev Ends the token sale and transfers balance of tokens\n', '    // and eth to owner. \n', '    function endSale() public onlyOwner {\n', '        wallet.transfer(this.balance);\n', '        assert(token.transfer(wallet, token.balanceOf(this)));\n', '        endTime = now;\n', '    }\n', '}']