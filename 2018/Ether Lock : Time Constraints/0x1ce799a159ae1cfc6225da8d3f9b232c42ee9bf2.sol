['pragma solidity ^0.4.18;\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event TransferSell(address indexed from, uint tokens, uint eth);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '    \n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '        owner = newOwner;\n', '    }\n', '    // function acceptOwnership() public {\n', '    //     require(msg.sender == newOwner);\n', '    //     OwnershipTransferred(owner, newOwner);\n', '    //     owner = newOwner;\n', '    //     newOwner = address(0);\n', '    // }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals\n', '// Receives ETH and generates tokens\n', '// ----------------------------------------------------------------------------\n', 'contract MyToken is ERC20Interface, Owned, SafeMath {\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint public totalSupply;\n', '    uint public sellRate;\n', '    uint public buyRate;\n', '    uint public startTime;\n', '    uint public endTime;\n', '    \n', '    address[] admins;\n', '    \n', '    struct lockPosition{\n', '        uint time;\n', '        uint count;\n', '        uint releaseRate;\n', '        uint lockTime;\n', '    }\n', '    \n', '    struct lockPosition1{\n', '        uint8 typ; // 1 2 3 4\n', '        uint count;\n', '        uint time1;\n', '        uint8 releaseRate1;\n', '        uint time2;\n', '        uint8 releaseRate2;\n', '        uint time3;\n', '        uint8 releaseRate3;\n', '        uint time4;\n', '        uint8 releaseRate4;\n', '    }\n', '    \n', '    \n', '    mapping(address => lockPosition) private lposition;\n', '    mapping(address => lockPosition1) public lposition1;\n', '    \n', '    // locked account dictionary that maps addresses to boolean\n', '    mapping (address => bool) public lockedAccounts;\n', '    mapping (address => bool) public isAdmin;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    \n', '    modifier is_not_locked(address _address) {\n', '        if (lockedAccounts[_address] == true) revert();\n', '        _;\n', '    }\n', '    \n', '    modifier validate_address(address _address) {\n', '        if (_address == address(0)) revert();\n', '        _;\n', '    }\n', '    \n', '    modifier is_admin {\n', '        if (isAdmin[msg.sender] != true && msg.sender != owner) revert();\n', '        _;\n', '    }\n', '    \n', '    modifier validate_position(address _address,uint count) {\n', '        if(count <= 0) revert();\n', '        if(balances[_address] < count) revert();\n', '        if(lposition[_address].count > 0 && safeSub(balances[_address],count) < lposition[_address].count && now < lposition[_address].time) revert();\n', '        if(lposition1[_address].count > 0 && safeSub(balances[_address],count) < lposition1[_address].count && now < lposition1[_address].time1) revert();\n', '        checkPosition1(_address,count);\n', '        checkPosition(_address,count);\n', '        _;\n', '    }\n', '    \n', '    function checkPosition(address _address,uint count) private view {\n', '        if(lposition[_address].releaseRate < 100 && lposition[_address].count > 0){\n', '            uint _rate = safeDiv(100,lposition[_address].releaseRate);\n', '            uint _time = lposition[_address].time;\n', '            uint _tmpRate = lposition[_address].releaseRate;\n', '            uint _tmpRateAll = 0;\n', '            uint _count = 0;\n', '            for(uint _a=1;_a<=_rate;_a++){\n', '                if(now >= _time){\n', '                    _count = _a;\n', '                    _tmpRateAll = safeAdd(_tmpRateAll,_tmpRate);\n', '                    _time = safeAdd(_time,lposition[_address].lockTime);\n', '                }\n', '            }\n', '            uint _tmp1 = safeSub(balances[_address],count);\n', '            uint _tmp2 = safeSub(lposition[_address].count,safeDiv(lposition[_address].count*_tmpRateAll,100));\n', '            if(_count < _rate && _tmp1 < _tmp2  && now >= lposition[_address].time) revert();\n', '        }\n', '    }\n', '    \n', '    function checkPosition1(address _address,uint count) private view {\n', '        if(lposition1[_address].releaseRate1 < 100 && lposition1[_address].count > 0){\n', '            uint _tmpRateAll = 0;\n', '            \n', '            if(lposition1[_address].typ == 2 && now < lposition1[_address].time2){\n', '                if(now >= lposition1[_address].time1){\n', '                    _tmpRateAll = lposition1[_address].releaseRate1;\n', '                }\n', '            }\n', '            \n', '            if(lposition1[_address].typ == 3 && now < lposition1[_address].time3){\n', '                if(now >= lposition1[_address].time1){\n', '                    _tmpRateAll = lposition1[_address].releaseRate1;\n', '                }\n', '                if(now >= lposition1[_address].time2){\n', '                    _tmpRateAll = safeAdd(lposition1[_address].releaseRate2,_tmpRateAll);\n', '                }\n', '            }\n', '            \n', '            if(lposition1[_address].typ == 4 && now < lposition1[_address].time4){\n', '                if(now >= lposition1[_address].time1){\n', '                    _tmpRateAll = lposition1[_address].releaseRate1;\n', '                }\n', '                if(now >= lposition1[_address].time2){\n', '                    _tmpRateAll = safeAdd(lposition1[_address].releaseRate2,_tmpRateAll);\n', '                }\n', '                if(now >= lposition1[_address].time3){\n', '                    _tmpRateAll = safeAdd(lposition1[_address].releaseRate3,_tmpRateAll);\n', '                }\n', '            }\n', '            \n', '            uint _tmp1 = safeSub(balances[_address],count);\n', '            uint _tmp2 = safeSub(lposition1[_address].count,safeDiv(lposition1[_address].count*_tmpRateAll,100));\n', '            \n', '            if(_tmpRateAll > 0){\n', '                if(_tmp1 < _tmp2) revert();\n', '            }\n', '        }\n', '    }\n', '    \n', '    event _lockAccount(address _add);\n', '    event _unlockAccount(address _add);\n', '    \n', '    function () public payable{\n', '        uint tokens;\n', '        require(owner != msg.sender);\n', '        require(now >= startTime && now < endTime);\n', '        require(buyRate > 0);\n', '        require(msg.value >= 0.1 ether && msg.value <= 1000 ether);\n', '        \n', '        tokens = safeDiv(msg.value,(1 ether * 1 wei / buyRate));\n', '        require(balances[owner] >= tokens * 10**uint(decimals));\n', '        balances[msg.sender] = safeAdd(balances[msg.sender], tokens * 10**uint(decimals));\n', '        balances[owner] = safeSub(balances[owner], tokens * 10**uint(decimals));\n', '        Transfer(owner,msg.sender,tokens * 10**uint(decimals));\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    function MyToken(uint _sellRate,uint _buyRate,string _symbo1,string _name,uint _startTime,uint _endTime) public payable {\n', '        require(_sellRate >0 && _buyRate > 0);\n', '        require(_startTime < _endTime);\n', '        symbol = _symbo1;\n', '        name = _name;\n', '        decimals = 8;\n', '        totalSupply = 2000000000 * 10**uint(decimals);\n', '        balances[owner] = totalSupply;\n', '        Transfer(address(0), owner, totalSupply);\n', '        sellRate = _sellRate;\n', '        buyRate = _buyRate;\n', '        endTime = _endTime;\n', '        startTime = _startTime;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return totalSupply  - balances[address(0)];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from token owner&#39;s account to `to` account\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public is_not_locked(msg.sender) validate_position(msg.sender,tokens) returns (bool success) {\n', '        require(to != msg.sender);\n', '        require(tokens > 0);\n', '        require(balances[msg.sender] >= tokens);\n', '        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account\n', '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces \n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public is_not_locked(msg.sender) is_not_locked(spender) validate_position(msg.sender,tokens) returns (bool success) {\n', '        require(spender != msg.sender);\n', '        require(tokens > 0);\n', '        require(balances[msg.sender] >= tokens);\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    // \n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public is_not_locked(msg.sender) is_not_locked(from) validate_position(from,tokens) returns (bool success) {\n', '        require(transferFromCheck(from,to,tokens));\n', '        return true;\n', '    }\n', '    \n', '    function transferFromCheck(address from,address to,uint tokens) private returns (bool success) {\n', '        require(tokens > 0);\n', '        require(from != msg.sender && msg.sender != to && from != to);\n', '        require(balances[from] >= tokens && allowed[from][msg.sender] >= tokens);\n', '        balances[from] = safeSub(balances[from], tokens);\n', '        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account. The `spender` contract function\n', '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '    \n', '\n', '    // ------------------------------------------------------------------------\n', '    // Sall a token from a contract\n', '    // ------------------------------------------------------------------------\n', '    function sellCoin(address seller, uint amount) public onlyOwner is_not_locked(seller) validate_position(seller,amount* 10**uint(decimals)) {\n', '        require(balances[seller] >= safeMul(amount,10**uint(decimals)));\n', '        require(sellRate > 0);\n', '        require(seller != msg.sender);\n', '        uint tmpAmount = safeMul(amount,(1 ether * 1 wei / sellRate));\n', '        \n', '        balances[owner] = safeAdd(balances[owner],amount * 10**uint(decimals));\n', '        balances[seller] = safeSub(balances[seller],amount * 10**uint(decimals));\n', '        \n', '        seller.transfer(tmpAmount);\n', '        TransferSell(seller, amount * 10**uint(decimals), tmpAmount);\n', '    }\n', '    \n', '    // set rate\n', '    function setConfig(uint _buyRate,uint _sellRate,string _symbol,string _name,uint _startTime,uint _endTime) public onlyOwner {\n', '        require((_buyRate == 0 && _sellRate == 0) || (_buyRate < _sellRate && _buyRate > 0 && _sellRate > 0) || (_buyRate < sellRate && _buyRate > 0 && _sellRate == 0) || (buyRate < _sellRate && _buyRate == 0 && _sellRate > 0));\n', '        \n', '        if(_buyRate > 0){\n', '            buyRate = _buyRate;\n', '        }\n', '        if(sellRate > 0){\n', '            sellRate = _sellRate;\n', '        }\n', '        if(_startTime > 0){\n', '            startTime = _startTime;\n', '        }\n', '        if(_endTime > 0){\n', '            endTime = _endTime;\n', '        }\n', '        symbol = _symbol;\n', '        name = _name;\n', '    }\n', '    \n', '    // lockAccount\n', '    function lockStatus(address _add,bool _success) public validate_address(_add) is_admin {\n', '        lockedAccounts[_add] = _success;\n', '        _lockAccount(_add);\n', '    }\n', '    \n', '    // setIsAdmin\n', '    function setIsAdmin(address _add,bool _success) public validate_address(_add) onlyOwner {\n', '        isAdmin[_add] = _success;\n', '        if(_success == true){\n', '            admins[admins.length++] = _add;\n', '        }else{\n', '            for (uint256 i;i < admins.length;i++){\n', '                if(admins[i] == _add){\n', '                    delete admins[i];\n', '                }\n', '            }\n', '        }\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '    \n', '    //set lock position\n', '    function setLockPostion(address _add,uint _count,uint _time,uint _releaseRate,uint _lockTime) public is_not_locked(_add) onlyOwner {\n', '        require(lposition1[_add].count == 0);\n', '        require(balances[_add] >= safeMul(_count,10**uint(decimals)));\n', '        require(_time > now);\n', '        require(_count > 0 && _lockTime > 0);\n', '        require(_releaseRate > 0 && _releaseRate < 100);\n', '        require(_releaseRate == 2 || _releaseRate == 4 || _releaseRate == 5 || _releaseRate == 10 || _releaseRate == 20 || _releaseRate == 25 || _releaseRate == 50);\n', '        lposition[_add].time = _time;\n', '        lposition[_add].count = _count * 10**uint(decimals);\n', '        lposition[_add].releaseRate = _releaseRate;\n', '        lposition[_add].lockTime = _lockTime;\n', '    }\n', '    \n', '    //get lockPosition info\n', '    function getLockPosition(address _add) public view returns(uint time,uint count,uint rate,uint scount,uint _lockTime) {\n', '        return (lposition[_add].time,lposition[_add].count,lposition[_add].releaseRate,positionScount(_add),lposition[_add].lockTime);\n', '    }\n', '    \n', '    function positionScount(address _add) private view returns (uint count){\n', '        uint _rate = safeDiv(100,lposition[_add].releaseRate);\n', '        uint _time = lposition[_add].time;\n', '        uint _tmpRate = lposition[_add].releaseRate;\n', '        uint _tmpRateAll = 0;\n', '        for(uint _a=1;_a<=_rate;_a++){\n', '            if(now >= _time){\n', '                _tmpRateAll = safeAdd(_tmpRateAll,_tmpRate);\n', '                _time = safeAdd(_time,lposition[_add].lockTime);\n', '            }\n', '        }\n', '        \n', '        return (lposition[_add].count - safeDiv(lposition[_add].count*_tmpRateAll,100));\n', '    }\n', '    \n', '    \n', '    //set lock position\n', '    function setLockPostion1(address _add,uint _count,uint8 _typ,uint _time1,uint8 _releaseRate1,uint _time2,uint8 _releaseRate2,uint _time3,uint8 _releaseRate3,uint _time4,uint8 _releaseRate4) public is_not_locked(_add) onlyOwner {\n', '        require(_count > 0);\n', '        require(_time1 > now);\n', '        require(_releaseRate1 > 0);\n', '        require(_typ >= 1 && _typ <= 4);\n', '        require(balances[_add] >= safeMul(_count,10**uint(decimals)));\n', '        require(safeAdd(safeAdd(_releaseRate1,_releaseRate2),safeAdd(_releaseRate3,_releaseRate4)) == 100);\n', '        require(lposition[_add].count == 0);\n', '        \n', '        if(_typ == 1){\n', '            require(_time2 == 0 && _releaseRate2 == 0 && _time3 == 0 && _releaseRate3 == 0 && _releaseRate4 == 0 && _time4 == 0);\n', '        }\n', '        if(_typ == 2){\n', '            require(_time2 > _time1 && _releaseRate2 > 0 && _time3 == 0 && _releaseRate3 == 0 && _releaseRate4 == 0 && _time4 == 0);\n', '        }\n', '        if(_typ == 3){\n', '            require(_time2 > _time1 && _releaseRate2 > 0 && _time3 > _time2 && _releaseRate3 > 0 && _releaseRate4 == 0 && _time4 == 0);\n', '        }\n', '        if(_typ == 4){\n', '            require(_time2 > _time1 && _releaseRate2 > 0 && _releaseRate3 > 0 && _time3 > _time2 && _time4 > _time3 && _releaseRate4 > 0);\n', '        }\n', '        lockPostion1Add(_typ,_add,_count,_time1,_releaseRate1,_time2,_releaseRate2,_time3,_releaseRate3,_time4,_releaseRate4);\n', '    }\n', '    \n', '    function lockPostion1Add(uint8 _typ,address _add,uint _count,uint _time1,uint8 _releaseRate1,uint _time2,uint8 _releaseRate2,uint _time3,uint8 _releaseRate3,uint _time4,uint8 _releaseRate4) private {\n', '        lposition1[_add].typ = _typ;\n', '        lposition1[_add].count = _count * 10**uint(decimals);\n', '        lposition1[_add].time1 = _time1;\n', '        lposition1[_add].releaseRate1 = _releaseRate1;\n', '        lposition1[_add].time2 = _time2;\n', '        lposition1[_add].releaseRate2 = _releaseRate2;\n', '        lposition1[_add].time3 = _time3;\n', '        lposition1[_add].releaseRate3 = _releaseRate3;\n', '        lposition1[_add].time4 = _time4;\n', '        lposition1[_add].releaseRate4 = _releaseRate4;\n', '    }\n', '    \n', '    //get lockPosition1 info\n', '    function getLockPosition1(address _add) public view returns(uint count,uint Scount,uint8 _typ,uint8 _rate1,uint8 _rate2,uint8 _rate3,uint8 _rate4) {\n', '        return (lposition1[_add].count,positionScount1(_add),lposition1[_add].typ,lposition1[_add].releaseRate1,lposition1[_add].releaseRate2,lposition1[_add].releaseRate3,lposition1[_add].releaseRate4);\n', '    }\n', '    \n', '    function positionScount1(address _address) private view returns (uint count){\n', '        uint _tmpRateAll = 0;\n', '        \n', '        if(lposition1[_address].typ == 2 && now < lposition1[_address].time2){\n', '            if(now >= lposition1[_address].time1){\n', '                _tmpRateAll = lposition1[_address].releaseRate1;\n', '            }\n', '        }\n', '        \n', '        if(lposition1[_address].typ == 3 && now < lposition1[_address].time3){\n', '            if(now >= lposition1[_address].time1){\n', '                _tmpRateAll = lposition1[_address].releaseRate1;\n', '            }\n', '            if(now >= lposition1[_address].time2){\n', '                _tmpRateAll = safeAdd(lposition1[_address].releaseRate2,_tmpRateAll);\n', '            }\n', '        }\n', '        \n', '        if(lposition1[_address].typ == 4 && now < lposition1[_address].time4){\n', '            if(now >= lposition1[_address].time1){\n', '                _tmpRateAll = lposition1[_address].releaseRate1;\n', '            }\n', '            if(now >= lposition1[_address].time2){\n', '                _tmpRateAll = safeAdd(lposition1[_address].releaseRate2,_tmpRateAll);\n', '            }\n', '            if(now >= lposition1[_address].time3){\n', '                _tmpRateAll = safeAdd(lposition1[_address].releaseRate3,_tmpRateAll);\n', '            }\n', '        }\n', '        \n', '        if((lposition1[_address].typ == 1 && now >= lposition1[_address].time1) || (lposition1[_address].typ == 2 && now >= lposition1[_address].time2) || (lposition1[_address].typ == 3 && now >= lposition1[_address].time3) || (lposition1[_address].typ == 4 && now >= lposition1[_address].time4)){\n', '            return 0;\n', '        }\n', '        \n', '        if(_tmpRateAll > 0){\n', '            return (safeSub(lposition1[_address].count,safeDiv(lposition1[_address].count*_tmpRateAll,100)));\n', '        }else{\n', '            return lposition1[_address].count;\n', '        }\n', '    }\n', '    \n', '    // batchTransfer\n', '    function batchTransfer(address[] _adds,uint256 _tokens) public is_admin returns(bool success) {\n', '        require(balances[msg.sender] >= safeMul(_adds.length,_tokens));\n', '        require(lposition[msg.sender].count == 0 && lposition1[msg.sender].count == 0);\n', '        \n', '        for (uint256 i = 0; i < _adds.length; i++) {\n', '            uint256 _tmpTokens = _tokens;\n', '            address _tmpAdds = _adds[i];\n', '            balances[msg.sender] = safeSub(balances[msg.sender], _tmpTokens);\n', '            balances[_tmpAdds] = safeAdd(balances[_tmpAdds], _tmpTokens);\n', '            Transfer(msg.sender,_tmpAdds,_tmpTokens);\n', '        }\n', '        \n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event TransferSell(address indexed from, uint tokens, uint eth);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '    \n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '        owner = newOwner;\n', '    }\n', '    // function acceptOwnership() public {\n', '    //     require(msg.sender == newOwner);\n', '    //     OwnershipTransferred(owner, newOwner);\n', '    //     owner = newOwner;\n', '    //     newOwner = address(0);\n', '    // }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals\n', '// Receives ETH and generates tokens\n', '// ----------------------------------------------------------------------------\n', 'contract MyToken is ERC20Interface, Owned, SafeMath {\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint public totalSupply;\n', '    uint public sellRate;\n', '    uint public buyRate;\n', '    uint public startTime;\n', '    uint public endTime;\n', '    \n', '    address[] admins;\n', '    \n', '    struct lockPosition{\n', '        uint time;\n', '        uint count;\n', '        uint releaseRate;\n', '        uint lockTime;\n', '    }\n', '    \n', '    struct lockPosition1{\n', '        uint8 typ; // 1 2 3 4\n', '        uint count;\n', '        uint time1;\n', '        uint8 releaseRate1;\n', '        uint time2;\n', '        uint8 releaseRate2;\n', '        uint time3;\n', '        uint8 releaseRate3;\n', '        uint time4;\n', '        uint8 releaseRate4;\n', '    }\n', '    \n', '    \n', '    mapping(address => lockPosition) private lposition;\n', '    mapping(address => lockPosition1) public lposition1;\n', '    \n', '    // locked account dictionary that maps addresses to boolean\n', '    mapping (address => bool) public lockedAccounts;\n', '    mapping (address => bool) public isAdmin;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    \n', '    modifier is_not_locked(address _address) {\n', '        if (lockedAccounts[_address] == true) revert();\n', '        _;\n', '    }\n', '    \n', '    modifier validate_address(address _address) {\n', '        if (_address == address(0)) revert();\n', '        _;\n', '    }\n', '    \n', '    modifier is_admin {\n', '        if (isAdmin[msg.sender] != true && msg.sender != owner) revert();\n', '        _;\n', '    }\n', '    \n', '    modifier validate_position(address _address,uint count) {\n', '        if(count <= 0) revert();\n', '        if(balances[_address] < count) revert();\n', '        if(lposition[_address].count > 0 && safeSub(balances[_address],count) < lposition[_address].count && now < lposition[_address].time) revert();\n', '        if(lposition1[_address].count > 0 && safeSub(balances[_address],count) < lposition1[_address].count && now < lposition1[_address].time1) revert();\n', '        checkPosition1(_address,count);\n', '        checkPosition(_address,count);\n', '        _;\n', '    }\n', '    \n', '    function checkPosition(address _address,uint count) private view {\n', '        if(lposition[_address].releaseRate < 100 && lposition[_address].count > 0){\n', '            uint _rate = safeDiv(100,lposition[_address].releaseRate);\n', '            uint _time = lposition[_address].time;\n', '            uint _tmpRate = lposition[_address].releaseRate;\n', '            uint _tmpRateAll = 0;\n', '            uint _count = 0;\n', '            for(uint _a=1;_a<=_rate;_a++){\n', '                if(now >= _time){\n', '                    _count = _a;\n', '                    _tmpRateAll = safeAdd(_tmpRateAll,_tmpRate);\n', '                    _time = safeAdd(_time,lposition[_address].lockTime);\n', '                }\n', '            }\n', '            uint _tmp1 = safeSub(balances[_address],count);\n', '            uint _tmp2 = safeSub(lposition[_address].count,safeDiv(lposition[_address].count*_tmpRateAll,100));\n', '            if(_count < _rate && _tmp1 < _tmp2  && now >= lposition[_address].time) revert();\n', '        }\n', '    }\n', '    \n', '    function checkPosition1(address _address,uint count) private view {\n', '        if(lposition1[_address].releaseRate1 < 100 && lposition1[_address].count > 0){\n', '            uint _tmpRateAll = 0;\n', '            \n', '            if(lposition1[_address].typ == 2 && now < lposition1[_address].time2){\n', '                if(now >= lposition1[_address].time1){\n', '                    _tmpRateAll = lposition1[_address].releaseRate1;\n', '                }\n', '            }\n', '            \n', '            if(lposition1[_address].typ == 3 && now < lposition1[_address].time3){\n', '                if(now >= lposition1[_address].time1){\n', '                    _tmpRateAll = lposition1[_address].releaseRate1;\n', '                }\n', '                if(now >= lposition1[_address].time2){\n', '                    _tmpRateAll = safeAdd(lposition1[_address].releaseRate2,_tmpRateAll);\n', '                }\n', '            }\n', '            \n', '            if(lposition1[_address].typ == 4 && now < lposition1[_address].time4){\n', '                if(now >= lposition1[_address].time1){\n', '                    _tmpRateAll = lposition1[_address].releaseRate1;\n', '                }\n', '                if(now >= lposition1[_address].time2){\n', '                    _tmpRateAll = safeAdd(lposition1[_address].releaseRate2,_tmpRateAll);\n', '                }\n', '                if(now >= lposition1[_address].time3){\n', '                    _tmpRateAll = safeAdd(lposition1[_address].releaseRate3,_tmpRateAll);\n', '                }\n', '            }\n', '            \n', '            uint _tmp1 = safeSub(balances[_address],count);\n', '            uint _tmp2 = safeSub(lposition1[_address].count,safeDiv(lposition1[_address].count*_tmpRateAll,100));\n', '            \n', '            if(_tmpRateAll > 0){\n', '                if(_tmp1 < _tmp2) revert();\n', '            }\n', '        }\n', '    }\n', '    \n', '    event _lockAccount(address _add);\n', '    event _unlockAccount(address _add);\n', '    \n', '    function () public payable{\n', '        uint tokens;\n', '        require(owner != msg.sender);\n', '        require(now >= startTime && now < endTime);\n', '        require(buyRate > 0);\n', '        require(msg.value >= 0.1 ether && msg.value <= 1000 ether);\n', '        \n', '        tokens = safeDiv(msg.value,(1 ether * 1 wei / buyRate));\n', '        require(balances[owner] >= tokens * 10**uint(decimals));\n', '        balances[msg.sender] = safeAdd(balances[msg.sender], tokens * 10**uint(decimals));\n', '        balances[owner] = safeSub(balances[owner], tokens * 10**uint(decimals));\n', '        Transfer(owner,msg.sender,tokens * 10**uint(decimals));\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    function MyToken(uint _sellRate,uint _buyRate,string _symbo1,string _name,uint _startTime,uint _endTime) public payable {\n', '        require(_sellRate >0 && _buyRate > 0);\n', '        require(_startTime < _endTime);\n', '        symbol = _symbo1;\n', '        name = _name;\n', '        decimals = 8;\n', '        totalSupply = 2000000000 * 10**uint(decimals);\n', '        balances[owner] = totalSupply;\n', '        Transfer(address(0), owner, totalSupply);\n', '        sellRate = _sellRate;\n', '        buyRate = _buyRate;\n', '        endTime = _endTime;\n', '        startTime = _startTime;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return totalSupply  - balances[address(0)];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to `to` account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public is_not_locked(msg.sender) validate_position(msg.sender,tokens) returns (bool success) {\n', '        require(to != msg.sender);\n', '        require(tokens > 0);\n', '        require(balances[msg.sender] >= tokens);\n', '        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account\n", '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces \n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public is_not_locked(msg.sender) is_not_locked(spender) validate_position(msg.sender,tokens) returns (bool success) {\n', '        require(spender != msg.sender);\n', '        require(tokens > 0);\n', '        require(balances[msg.sender] >= tokens);\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    // \n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public is_not_locked(msg.sender) is_not_locked(from) validate_position(from,tokens) returns (bool success) {\n', '        require(transferFromCheck(from,to,tokens));\n', '        return true;\n', '    }\n', '    \n', '    function transferFromCheck(address from,address to,uint tokens) private returns (bool success) {\n', '        require(tokens > 0);\n', '        require(from != msg.sender && msg.sender != to && from != to);\n', '        require(balances[from] >= tokens && allowed[from][msg.sender] >= tokens);\n', '        balances[from] = safeSub(balances[from], tokens);\n', '        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account. The `spender` contract function\n", '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '    \n', '\n', '    // ------------------------------------------------------------------------\n', '    // Sall a token from a contract\n', '    // ------------------------------------------------------------------------\n', '    function sellCoin(address seller, uint amount) public onlyOwner is_not_locked(seller) validate_position(seller,amount* 10**uint(decimals)) {\n', '        require(balances[seller] >= safeMul(amount,10**uint(decimals)));\n', '        require(sellRate > 0);\n', '        require(seller != msg.sender);\n', '        uint tmpAmount = safeMul(amount,(1 ether * 1 wei / sellRate));\n', '        \n', '        balances[owner] = safeAdd(balances[owner],amount * 10**uint(decimals));\n', '        balances[seller] = safeSub(balances[seller],amount * 10**uint(decimals));\n', '        \n', '        seller.transfer(tmpAmount);\n', '        TransferSell(seller, amount * 10**uint(decimals), tmpAmount);\n', '    }\n', '    \n', '    // set rate\n', '    function setConfig(uint _buyRate,uint _sellRate,string _symbol,string _name,uint _startTime,uint _endTime) public onlyOwner {\n', '        require((_buyRate == 0 && _sellRate == 0) || (_buyRate < _sellRate && _buyRate > 0 && _sellRate > 0) || (_buyRate < sellRate && _buyRate > 0 && _sellRate == 0) || (buyRate < _sellRate && _buyRate == 0 && _sellRate > 0));\n', '        \n', '        if(_buyRate > 0){\n', '            buyRate = _buyRate;\n', '        }\n', '        if(sellRate > 0){\n', '            sellRate = _sellRate;\n', '        }\n', '        if(_startTime > 0){\n', '            startTime = _startTime;\n', '        }\n', '        if(_endTime > 0){\n', '            endTime = _endTime;\n', '        }\n', '        symbol = _symbol;\n', '        name = _name;\n', '    }\n', '    \n', '    // lockAccount\n', '    function lockStatus(address _add,bool _success) public validate_address(_add) is_admin {\n', '        lockedAccounts[_add] = _success;\n', '        _lockAccount(_add);\n', '    }\n', '    \n', '    // setIsAdmin\n', '    function setIsAdmin(address _add,bool _success) public validate_address(_add) onlyOwner {\n', '        isAdmin[_add] = _success;\n', '        if(_success == true){\n', '            admins[admins.length++] = _add;\n', '        }else{\n', '            for (uint256 i;i < admins.length;i++){\n', '                if(admins[i] == _add){\n', '                    delete admins[i];\n', '                }\n', '            }\n', '        }\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '    \n', '    //set lock position\n', '    function setLockPostion(address _add,uint _count,uint _time,uint _releaseRate,uint _lockTime) public is_not_locked(_add) onlyOwner {\n', '        require(lposition1[_add].count == 0);\n', '        require(balances[_add] >= safeMul(_count,10**uint(decimals)));\n', '        require(_time > now);\n', '        require(_count > 0 && _lockTime > 0);\n', '        require(_releaseRate > 0 && _releaseRate < 100);\n', '        require(_releaseRate == 2 || _releaseRate == 4 || _releaseRate == 5 || _releaseRate == 10 || _releaseRate == 20 || _releaseRate == 25 || _releaseRate == 50);\n', '        lposition[_add].time = _time;\n', '        lposition[_add].count = _count * 10**uint(decimals);\n', '        lposition[_add].releaseRate = _releaseRate;\n', '        lposition[_add].lockTime = _lockTime;\n', '    }\n', '    \n', '    //get lockPosition info\n', '    function getLockPosition(address _add) public view returns(uint time,uint count,uint rate,uint scount,uint _lockTime) {\n', '        return (lposition[_add].time,lposition[_add].count,lposition[_add].releaseRate,positionScount(_add),lposition[_add].lockTime);\n', '    }\n', '    \n', '    function positionScount(address _add) private view returns (uint count){\n', '        uint _rate = safeDiv(100,lposition[_add].releaseRate);\n', '        uint _time = lposition[_add].time;\n', '        uint _tmpRate = lposition[_add].releaseRate;\n', '        uint _tmpRateAll = 0;\n', '        for(uint _a=1;_a<=_rate;_a++){\n', '            if(now >= _time){\n', '                _tmpRateAll = safeAdd(_tmpRateAll,_tmpRate);\n', '                _time = safeAdd(_time,lposition[_add].lockTime);\n', '            }\n', '        }\n', '        \n', '        return (lposition[_add].count - safeDiv(lposition[_add].count*_tmpRateAll,100));\n', '    }\n', '    \n', '    \n', '    //set lock position\n', '    function setLockPostion1(address _add,uint _count,uint8 _typ,uint _time1,uint8 _releaseRate1,uint _time2,uint8 _releaseRate2,uint _time3,uint8 _releaseRate3,uint _time4,uint8 _releaseRate4) public is_not_locked(_add) onlyOwner {\n', '        require(_count > 0);\n', '        require(_time1 > now);\n', '        require(_releaseRate1 > 0);\n', '        require(_typ >= 1 && _typ <= 4);\n', '        require(balances[_add] >= safeMul(_count,10**uint(decimals)));\n', '        require(safeAdd(safeAdd(_releaseRate1,_releaseRate2),safeAdd(_releaseRate3,_releaseRate4)) == 100);\n', '        require(lposition[_add].count == 0);\n', '        \n', '        if(_typ == 1){\n', '            require(_time2 == 0 && _releaseRate2 == 0 && _time3 == 0 && _releaseRate3 == 0 && _releaseRate4 == 0 && _time4 == 0);\n', '        }\n', '        if(_typ == 2){\n', '            require(_time2 > _time1 && _releaseRate2 > 0 && _time3 == 0 && _releaseRate3 == 0 && _releaseRate4 == 0 && _time4 == 0);\n', '        }\n', '        if(_typ == 3){\n', '            require(_time2 > _time1 && _releaseRate2 > 0 && _time3 > _time2 && _releaseRate3 > 0 && _releaseRate4 == 0 && _time4 == 0);\n', '        }\n', '        if(_typ == 4){\n', '            require(_time2 > _time1 && _releaseRate2 > 0 && _releaseRate3 > 0 && _time3 > _time2 && _time4 > _time3 && _releaseRate4 > 0);\n', '        }\n', '        lockPostion1Add(_typ,_add,_count,_time1,_releaseRate1,_time2,_releaseRate2,_time3,_releaseRate3,_time4,_releaseRate4);\n', '    }\n', '    \n', '    function lockPostion1Add(uint8 _typ,address _add,uint _count,uint _time1,uint8 _releaseRate1,uint _time2,uint8 _releaseRate2,uint _time3,uint8 _releaseRate3,uint _time4,uint8 _releaseRate4) private {\n', '        lposition1[_add].typ = _typ;\n', '        lposition1[_add].count = _count * 10**uint(decimals);\n', '        lposition1[_add].time1 = _time1;\n', '        lposition1[_add].releaseRate1 = _releaseRate1;\n', '        lposition1[_add].time2 = _time2;\n', '        lposition1[_add].releaseRate2 = _releaseRate2;\n', '        lposition1[_add].time3 = _time3;\n', '        lposition1[_add].releaseRate3 = _releaseRate3;\n', '        lposition1[_add].time4 = _time4;\n', '        lposition1[_add].releaseRate4 = _releaseRate4;\n', '    }\n', '    \n', '    //get lockPosition1 info\n', '    function getLockPosition1(address _add) public view returns(uint count,uint Scount,uint8 _typ,uint8 _rate1,uint8 _rate2,uint8 _rate3,uint8 _rate4) {\n', '        return (lposition1[_add].count,positionScount1(_add),lposition1[_add].typ,lposition1[_add].releaseRate1,lposition1[_add].releaseRate2,lposition1[_add].releaseRate3,lposition1[_add].releaseRate4);\n', '    }\n', '    \n', '    function positionScount1(address _address) private view returns (uint count){\n', '        uint _tmpRateAll = 0;\n', '        \n', '        if(lposition1[_address].typ == 2 && now < lposition1[_address].time2){\n', '            if(now >= lposition1[_address].time1){\n', '                _tmpRateAll = lposition1[_address].releaseRate1;\n', '            }\n', '        }\n', '        \n', '        if(lposition1[_address].typ == 3 && now < lposition1[_address].time3){\n', '            if(now >= lposition1[_address].time1){\n', '                _tmpRateAll = lposition1[_address].releaseRate1;\n', '            }\n', '            if(now >= lposition1[_address].time2){\n', '                _tmpRateAll = safeAdd(lposition1[_address].releaseRate2,_tmpRateAll);\n', '            }\n', '        }\n', '        \n', '        if(lposition1[_address].typ == 4 && now < lposition1[_address].time4){\n', '            if(now >= lposition1[_address].time1){\n', '                _tmpRateAll = lposition1[_address].releaseRate1;\n', '            }\n', '            if(now >= lposition1[_address].time2){\n', '                _tmpRateAll = safeAdd(lposition1[_address].releaseRate2,_tmpRateAll);\n', '            }\n', '            if(now >= lposition1[_address].time3){\n', '                _tmpRateAll = safeAdd(lposition1[_address].releaseRate3,_tmpRateAll);\n', '            }\n', '        }\n', '        \n', '        if((lposition1[_address].typ == 1 && now >= lposition1[_address].time1) || (lposition1[_address].typ == 2 && now >= lposition1[_address].time2) || (lposition1[_address].typ == 3 && now >= lposition1[_address].time3) || (lposition1[_address].typ == 4 && now >= lposition1[_address].time4)){\n', '            return 0;\n', '        }\n', '        \n', '        if(_tmpRateAll > 0){\n', '            return (safeSub(lposition1[_address].count,safeDiv(lposition1[_address].count*_tmpRateAll,100)));\n', '        }else{\n', '            return lposition1[_address].count;\n', '        }\n', '    }\n', '    \n', '    // batchTransfer\n', '    function batchTransfer(address[] _adds,uint256 _tokens) public is_admin returns(bool success) {\n', '        require(balances[msg.sender] >= safeMul(_adds.length,_tokens));\n', '        require(lposition[msg.sender].count == 0 && lposition1[msg.sender].count == 0);\n', '        \n', '        for (uint256 i = 0; i < _adds.length; i++) {\n', '            uint256 _tmpTokens = _tokens;\n', '            address _tmpAdds = _adds[i];\n', '            balances[msg.sender] = safeSub(balances[msg.sender], _tmpTokens);\n', '            balances[_tmpAdds] = safeAdd(balances[_tmpAdds], _tmpTokens);\n', '            Transfer(msg.sender,_tmpAdds,_tmpTokens);\n', '        }\n', '        \n', '        return true;\n', '    }\n', '}']
