['pragma solidity 0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  \n', '}\n', '\n', 'contract TIZACOIN {\n', '    \n', '    using SafeMath for uint256;\n', '\n', '    string public name      = "TIZACOIN";                                   // Token name\n', '    string public symbol    = "TIZA";                                       // Token symbol\n', '    uint256 public decimals = 18;                                           // Token decimal points\n', '    uint256 public totalSupply  = 50000000 * (10 ** uint256(decimals));     // Token total supply\n', '\n', '    // Balances for each account\n', '    mapping (address => uint256) public balances;\n', '    \n', '    // Owner of account approves the transfer of an amount to another account\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // variable to start and stop ico\n', '    bool public stopped = false;\n', '    uint public minEth  = 0.2 ether;\n', '\n', '    // contract owner\n', '    address public owner;\n', '    \n', '    // wallet address ethereum will going\n', '    address public wallet = 0xDb78138276E9401C908268E093A303f440733f1E;\n', '    \n', '    // number token we are going to provide in one ethereum\n', '    uint256 public tokenPerEth = 5000;\n', '\n', '    // struct to set ico stage detail\n', '    struct icoData {\n', '        uint256 icoStage;\n', '        uint256 icoStartDate;\n', '        uint256 icoEndDate;\n', '        uint256 icoFund;\n', '        uint256 icoBonus;\n', '        uint256 icoSold;\n', '    }\n', '    \n', '    // ico struct alias\n', '    icoData public ico;\n', '\n', '    // modifier to check sender is owner ot not\n', '    modifier isOwner {\n', '        assert(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    // modifier to check ico is running ot not\n', '    modifier isRunning {\n', '        assert (!stopped);\n', '        _;\n', '    }\n', '\n', '    // modifier to check ico is stopped ot not\n', '    modifier isStopped {\n', '        assert (stopped);\n', '        _;\n', '    }\n', '\n', '    // modifier to check sender is valid or not\n', '    modifier validAddress {\n', '        assert(0x0 != msg.sender);\n', '        _;\n', '    }\n', '\n', '    // contract constructor\n', '    constructor(address _owner) public {\n', '        require( _owner != address(0) );\n', '        owner = _owner;\n', '        balances[owner] = totalSupply;\n', '        emit Transfer(0x0, owner, totalSupply);\n', '    }\n', '    \n', '    // function to get the balance of a specific address\n', '    function balanceOf(address _address) public view returns (uint256 balance) {\n', '        // Return the balance for the specific address\n', '        return balances[_address];\n', '    }\n', '\n', '    // Transfer the balance from owner&#39;s account to another account\n', '    function transfer(address _to, uint256 _value) public isRunning validAddress returns (bool success) {\n', '        require(_to != address(0));\n', '        require(balances[msg.sender] >= _value);\n', '        require(balances[_to].add(_value) >= balances[_to]);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // Send `tokens` amount of tokens from address `from` to address `to`\n', '    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n', '    // tokens on your behalf, for example to "deposit" to a contract address and/or to charge\n', '    // fees in sub-currencies; the command should fail unless the _from account has\n', '    // deliberately authorized the sender of the message via some mechanism; we propose\n', '    // these standardized APIs for approval:\n', '    function transferFrom(address _from, address _to, uint256 _value) public isRunning validAddress returns (bool success) {\n', '        require(_from != address(0) && _to != address(0));\n', '        require(balances[_from] >= _value);\n', '        require(balances[_to].add(_value) >= balances[_to]);\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // Allow `spender` to withdraw from your account, multiple times, up to the `tokens` amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    function approve(address _spender, uint256 _value) public isRunning validAddress returns (bool success) {\n', '        require(_spender != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    // set new ico stage\n', '    function setStage(uint256 _stage, uint256 _startDate, uint256 _endDate, uint256 _fund, uint256 _bonus) external isOwner returns(bool) {\n', '        \n', '        // current time must be greater then previous ico stage end time\n', '        require(now > ico.icoEndDate);\n', '        // current stage must be greater then previous ico stage \n', '        require(_stage > ico.icoStage);\n', '        // current time must be less then start new ico time\n', '        require(now < _startDate);\n', '        // new ico start time must be less then new ico stage end date\n', '        require(_startDate < _endDate);\n', '        // owner must have fund to start the ico stage\n', '        require(balances[msg.sender] >= _fund);\n', '        \n', '        //  calculate the token\n', '        uint tokens = _fund * (10 ** uint256(decimals));\n', '        \n', '        // set ico data\n', '        ico.icoStage        = _stage;\n', '        ico.icoStartDate    = _startDate;\n', '        ico.icoEndDate      = _endDate;\n', '        ico.icoFund         = tokens;\n', '        ico.icoBonus        = _bonus;\n', '        ico.icoSold         = 0;\n', '        \n', '        // transfer tokens to the contract\n', '        transfer( address(this), tokens );\n', '        \n', '        return true;\n', '    }\n', '    \n', '    // set withdrawal wallet address\n', '    function setWithdrawalWallet(address _newWallet) external isOwner {\n', '        \n', '        // new and old address should not be same\n', '        require( _newWallet != wallet );\n', '        // new balance is valid or not\n', '        require( _newWallet != address(0) );\n', '        \n', '        // set new withdrawal wallet\n', '        wallet = _newWallet;\n', '        \n', '    }\n', '\n', '    // payable to send tokens who is paying to the contract\n', '    function() payable public isRunning validAddress  {\n', '        \n', '        // sender must send atleast 0.02 ETH\n', '        require(msg.value >= minEth);\n', '        // check for ico is active or not\n', '        require(now >= ico.icoStartDate && now <= ico.icoEndDate );\n', '\n', '        // calculate the tokens amount\n', '        uint tokens = msg.value * tokenPerEth;\n', '        // calculate the bounus\n', '        uint bonus  = ( tokens.mul(ico.icoBonus) ).div(100);\n', '        // add the bonus tokens to actual token amount\n', '        uint total  = tokens + bonus;\n', '\n', '        // ico must have the fund to send\n', '        require(ico.icoFund >= total);\n', '        // contract must have the balance to send\n', '        require(balances[address(this)] >= total);\n', '        // sender&#39;s new balance must be greate then old balance\n', '        require(balances[msg.sender].add(total) >= balances[msg.sender]);\n', '        \n', '        // update ico fund and sold token count\n', '        ico.icoFund      = ico.icoFund.sub(total);\n', '        ico.icoSold      = ico.icoSold.add(total);\n', '        \n', '        // send the tokens from contract to msg.sender\n', '        _sendTokens(address(this), msg.sender, total);\n', '        \n', '        // transfer ethereum to the withdrawal address\n', '        wallet.transfer( msg.value );\n', '        \n', '    }\n', '    \n', '    // function to get back the token from contract to owner\n', '    function withdrawTokens(address _address, uint256 _value) external isOwner validAddress {\n', '        \n', '        // check for valid address\n', '        require(_address != address(0) && _address != address(this));\n', '        \n', '        // calculate the tokens\n', '        uint256 tokens = _value * 10 ** uint256(decimals);\n', '        \n', '        // check contract have the sufficient balance\n', '        require(balances[address(this)] > tokens);\n', '        \n', '        // check for valid value of value params\n', '        require(balances[_address] < balances[_address].add(tokens));\n', '        \n', '        // send the tokens\n', '        _sendTokens(address(this), _address, tokens);\n', '        \n', '    }\n', '    \n', '    function _sendTokens(address _from, address _to, uint256 _tokens) internal {\n', '        \n', '         // deduct contract balance\n', '        balances[_from] = balances[_from].sub(_tokens);\n', '        // add balanc to the sender\n', '        balances[_to] = balances[_to].add(_tokens);\n', '        // call the transfer event\n', '        emit Transfer(_from, _to, _tokens);\n', '        \n', '    }\n', '\n', '    // event to \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}']
['pragma solidity 0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  \n', '}\n', '\n', 'contract TIZACOIN {\n', '    \n', '    using SafeMath for uint256;\n', '\n', '    string public name      = "TIZACOIN";                                   // Token name\n', '    string public symbol    = "TIZA";                                       // Token symbol\n', '    uint256 public decimals = 18;                                           // Token decimal points\n', '    uint256 public totalSupply  = 50000000 * (10 ** uint256(decimals));     // Token total supply\n', '\n', '    // Balances for each account\n', '    mapping (address => uint256) public balances;\n', '    \n', '    // Owner of account approves the transfer of an amount to another account\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // variable to start and stop ico\n', '    bool public stopped = false;\n', '    uint public minEth  = 0.2 ether;\n', '\n', '    // contract owner\n', '    address public owner;\n', '    \n', '    // wallet address ethereum will going\n', '    address public wallet = 0xDb78138276E9401C908268E093A303f440733f1E;\n', '    \n', '    // number token we are going to provide in one ethereum\n', '    uint256 public tokenPerEth = 5000;\n', '\n', '    // struct to set ico stage detail\n', '    struct icoData {\n', '        uint256 icoStage;\n', '        uint256 icoStartDate;\n', '        uint256 icoEndDate;\n', '        uint256 icoFund;\n', '        uint256 icoBonus;\n', '        uint256 icoSold;\n', '    }\n', '    \n', '    // ico struct alias\n', '    icoData public ico;\n', '\n', '    // modifier to check sender is owner ot not\n', '    modifier isOwner {\n', '        assert(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    // modifier to check ico is running ot not\n', '    modifier isRunning {\n', '        assert (!stopped);\n', '        _;\n', '    }\n', '\n', '    // modifier to check ico is stopped ot not\n', '    modifier isStopped {\n', '        assert (stopped);\n', '        _;\n', '    }\n', '\n', '    // modifier to check sender is valid or not\n', '    modifier validAddress {\n', '        assert(0x0 != msg.sender);\n', '        _;\n', '    }\n', '\n', '    // contract constructor\n', '    constructor(address _owner) public {\n', '        require( _owner != address(0) );\n', '        owner = _owner;\n', '        balances[owner] = totalSupply;\n', '        emit Transfer(0x0, owner, totalSupply);\n', '    }\n', '    \n', '    // function to get the balance of a specific address\n', '    function balanceOf(address _address) public view returns (uint256 balance) {\n', '        // Return the balance for the specific address\n', '        return balances[_address];\n', '    }\n', '\n', "    // Transfer the balance from owner's account to another account\n", '    function transfer(address _to, uint256 _value) public isRunning validAddress returns (bool success) {\n', '        require(_to != address(0));\n', '        require(balances[msg.sender] >= _value);\n', '        require(balances[_to].add(_value) >= balances[_to]);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // Send `tokens` amount of tokens from address `from` to address `to`\n', '    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n', '    // tokens on your behalf, for example to "deposit" to a contract address and/or to charge\n', '    // fees in sub-currencies; the command should fail unless the _from account has\n', '    // deliberately authorized the sender of the message via some mechanism; we propose\n', '    // these standardized APIs for approval:\n', '    function transferFrom(address _from, address _to, uint256 _value) public isRunning validAddress returns (bool success) {\n', '        require(_from != address(0) && _to != address(0));\n', '        require(balances[_from] >= _value);\n', '        require(balances[_to].add(_value) >= balances[_to]);\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // Allow `spender` to withdraw from your account, multiple times, up to the `tokens` amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    function approve(address _spender, uint256 _value) public isRunning validAddress returns (bool success) {\n', '        require(_spender != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    // set new ico stage\n', '    function setStage(uint256 _stage, uint256 _startDate, uint256 _endDate, uint256 _fund, uint256 _bonus) external isOwner returns(bool) {\n', '        \n', '        // current time must be greater then previous ico stage end time\n', '        require(now > ico.icoEndDate);\n', '        // current stage must be greater then previous ico stage \n', '        require(_stage > ico.icoStage);\n', '        // current time must be less then start new ico time\n', '        require(now < _startDate);\n', '        // new ico start time must be less then new ico stage end date\n', '        require(_startDate < _endDate);\n', '        // owner must have fund to start the ico stage\n', '        require(balances[msg.sender] >= _fund);\n', '        \n', '        //  calculate the token\n', '        uint tokens = _fund * (10 ** uint256(decimals));\n', '        \n', '        // set ico data\n', '        ico.icoStage        = _stage;\n', '        ico.icoStartDate    = _startDate;\n', '        ico.icoEndDate      = _endDate;\n', '        ico.icoFund         = tokens;\n', '        ico.icoBonus        = _bonus;\n', '        ico.icoSold         = 0;\n', '        \n', '        // transfer tokens to the contract\n', '        transfer( address(this), tokens );\n', '        \n', '        return true;\n', '    }\n', '    \n', '    // set withdrawal wallet address\n', '    function setWithdrawalWallet(address _newWallet) external isOwner {\n', '        \n', '        // new and old address should not be same\n', '        require( _newWallet != wallet );\n', '        // new balance is valid or not\n', '        require( _newWallet != address(0) );\n', '        \n', '        // set new withdrawal wallet\n', '        wallet = _newWallet;\n', '        \n', '    }\n', '\n', '    // payable to send tokens who is paying to the contract\n', '    function() payable public isRunning validAddress  {\n', '        \n', '        // sender must send atleast 0.02 ETH\n', '        require(msg.value >= minEth);\n', '        // check for ico is active or not\n', '        require(now >= ico.icoStartDate && now <= ico.icoEndDate );\n', '\n', '        // calculate the tokens amount\n', '        uint tokens = msg.value * tokenPerEth;\n', '        // calculate the bounus\n', '        uint bonus  = ( tokens.mul(ico.icoBonus) ).div(100);\n', '        // add the bonus tokens to actual token amount\n', '        uint total  = tokens + bonus;\n', '\n', '        // ico must have the fund to send\n', '        require(ico.icoFund >= total);\n', '        // contract must have the balance to send\n', '        require(balances[address(this)] >= total);\n', "        // sender's new balance must be greate then old balance\n", '        require(balances[msg.sender].add(total) >= balances[msg.sender]);\n', '        \n', '        // update ico fund and sold token count\n', '        ico.icoFund      = ico.icoFund.sub(total);\n', '        ico.icoSold      = ico.icoSold.add(total);\n', '        \n', '        // send the tokens from contract to msg.sender\n', '        _sendTokens(address(this), msg.sender, total);\n', '        \n', '        // transfer ethereum to the withdrawal address\n', '        wallet.transfer( msg.value );\n', '        \n', '    }\n', '    \n', '    // function to get back the token from contract to owner\n', '    function withdrawTokens(address _address, uint256 _value) external isOwner validAddress {\n', '        \n', '        // check for valid address\n', '        require(_address != address(0) && _address != address(this));\n', '        \n', '        // calculate the tokens\n', '        uint256 tokens = _value * 10 ** uint256(decimals);\n', '        \n', '        // check contract have the sufficient balance\n', '        require(balances[address(this)] > tokens);\n', '        \n', '        // check for valid value of value params\n', '        require(balances[_address] < balances[_address].add(tokens));\n', '        \n', '        // send the tokens\n', '        _sendTokens(address(this), _address, tokens);\n', '        \n', '    }\n', '    \n', '    function _sendTokens(address _from, address _to, uint256 _tokens) internal {\n', '        \n', '         // deduct contract balance\n', '        balances[_from] = balances[_from].sub(_tokens);\n', '        // add balanc to the sender\n', '        balances[_to] = balances[_to].add(_tokens);\n', '        // call the transfer event\n', '        emit Transfer(_from, _to, _tokens);\n', '        \n', '    }\n', '\n', '    // event to \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}']
