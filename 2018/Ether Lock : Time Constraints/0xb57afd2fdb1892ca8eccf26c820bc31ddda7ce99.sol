['pragma solidity 0.4.20;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20 {\n', '  function totalSupply()public view returns (uint total_Supply);\n', '  function balanceOf(address who)public view returns (uint256);\n', '  function allowance(address owner, address spender)public view returns (uint);\n', '  function transferFrom(address from, address to, uint value)public returns (bool ok);\n', '  function approve(address spender, uint value)public returns (bool ok);\n', '  function transfer(address to, uint value)public returns (bool ok);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '\n', 'contract SPCoin is ERC20\n', '{ using SafeMath for uint256;\n', '    // Name of the token\n', '    string public constant name = "SP Coin";\n', '\n', '    // Symbol of token\n', '    string public constant symbol = "SPS";\n', '    uint8 public constant decimals = 18;\n', '    uint public _totalsupply = 2500000000 *10 ** 18; // 2.5 Billion SPS Coins\n', '    address public owner;\n', '    uint256 constant public _price_tokn = 20000 ; \n', '    uint256 no_of_tokens;\n', '    uint256 bonus_token;\n', '    uint256 total_token;\n', '    bool stopped = false;\n', '    uint256 public pre_startdate;\n', '    uint256 public ico_startdate;\n', '    uint256 pre_enddate;\n', '    uint256 ico_enddate;\n', '    uint256 maxCap_PRE;\n', '    uint256 maxCap_ICO;\n', '    bool public icoRunningStatus = true;\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', "    address ethFundMain = 0x649BbCF5625E78f8A1dE1AE07d9D5E3E0fDCa932; // Suchapp's cold wallet\n", '    mapping (address => bool) public whitelisted;\n', '    uint256 public Numtokens;\n', '    uint256 public bonustokn;\n', '    uint256 public ethreceived;\n', '    uint constant public minimumInvestment = 1 ether; // 1 ether is minimum minimumInvestment\n', '    uint bonusCalculationFactor;\n', '    uint public bonus;\n', '    uint x ;\n', '    \n', '     enum Stages {\n', '        NOTSTARTED,\n', '        PREICO,\n', '        ICO,\n', '        ENDED\n', '    }\n', '    Stages public stage;\n', '    \n', '    modifier atStage(Stages _stage) {\n', '        if (stage != _stage)\n', '            // Contract not in expected state\n', '            revert();\n', '        _;\n', '    }\n', '    \n', '     modifier onlyOwner() {\n', '        if (msg.sender != owner) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '  \n', '    function SPCoin() public\n', '    {\n', '        owner = msg.sender;\n', '        balances[owner] = 1250000000 *10 ** 18;  // 1.25 billion given to owner\n', '        stage = Stages.NOTSTARTED;\n', '        Transfer(0, owner, balances[owner]);\n', '    }\n', '  \n', '    function () public payable \n', '    {\n', '        require(stage != Stages.ENDED && msg.value >= minimumInvestment);\n', '        require(!stopped && msg.sender != owner);\n', '        require(whitelisted[msg.sender]);\n', '    if( stage == Stages.PREICO && now <= pre_enddate )\n', '        {  \n', '            no_of_tokens =(msg.value).mul(_price_tokn);\n', '            ethreceived = ethreceived.add(msg.value);\n', '            bonus= bonuscalpre();\n', '            bonus_token = ((no_of_tokens).mul(bonus)).div(100);  // bonus calculation\n', '            total_token = no_of_tokens + bonus_token;\n', '            Numtokens= Numtokens.add(no_of_tokens);\n', '             bonustokn= bonustokn.add(bonus_token);\n', '            transferTokens(msg.sender,total_token);\n', '         }\n', '         \n', '         \n', '    else\n', '    if(stage == Stages.ICO && now <= ico_enddate )\n', '        {\n', '             \n', '            no_of_tokens =((msg.value).mul(_price_tokn));\n', '            ethreceived = ethreceived.add(msg.value);\n', '          bonus= bonuscalico(msg.value);\n', '            bonus_token = ((no_of_tokens).mul(bonus)).div(100);  // bonus calculation\n', '            total_token = no_of_tokens + bonus_token;\n', '           Numtokens= Numtokens.add(no_of_tokens);\n', '             bonustokn= bonustokn.add(bonus_token);\n', '            transferTokens(msg.sender,total_token);\n', '        \n', '        }\n', '    else {\n', '            revert();\n', '        }\n', '       \n', '    }\n', '\n', '    \n', '    //bonuc calculation for preico on per day basis\n', '     function bonuscalpre() private returns (uint256 cp)\n', '        {\n', '          uint bon = 30;\n', '             bonusCalculationFactor = (block.timestamp.sub(pre_startdate)).div(86400); //time period in seconds\n', '            if(bonusCalculationFactor == 0)\n', '            {\n', '                bon = 30;\n', '            }\n', '          else if(bonusCalculationFactor >= 15)\n', '            {\n', '              bon = 2;\n', '            }\n', '            else{\n', '                 bon -= bonusCalculationFactor* 2;\n', '            }\n', '            return bon;\n', '          \n', '        }\n', '        //bonus calculation for ICO on purchase basis\n', '  function bonuscalico(uint256 y) private returns (uint256 cp){\n', '     x = y/(10**18);\n', '     uint bon;\n', '      if (x>=2 && x <5){\n', '          bon = 1;\n', '      }\n', '      else  if (x>=5 && x <15){\n', '          bon = 2;\n', '      }\n', '      else  if (x>=15 && x <25){\n', '          bon = 3;\n', '      }\n', '      else  if (x>=25 && x <40){\n', '          bon = 4;\n', '      }\n', '      else  if (x>=40 && x <60){\n', '          bon = 5;\n', '      }\n', '      else  if (x>=60 && x <70){\n', '          bon = 6;\n', '      }\n', '      else  if (x>=70 && x <80){\n', '          bon = 7;\n', '      }\n', '      else  if (x>=80 && x <90){\n', '          bon = 8;\n', '      }\n', '     else  if (x>=90 && x <100){\n', '          bon = 9;\n', '      }\n', '      else  if (x>=100){\n', '          bon = 10;\n', '      }\n', '      else{\n', '      bon = 0;\n', '      }\n', '      \n', '      return bon;\n', '  }\n', '    \n', '     function start_PREICO() public onlyOwner atStage(Stages.NOTSTARTED)\n', '      {\n', '          stage = Stages.PREICO;\n', '          stopped = false;\n', '          maxCap_PRE = 350000000 * 10 ** 18;  // 350 million\n', '          balances[address(this)] = maxCap_PRE;\n', '          pre_startdate = now;\n', '          pre_enddate = now + 20 days; //time for preICO\n', '          Transfer(0, address(this), balances[address(this)]);\n', '          }\n', '    \n', '    \n', '      function start_ICO() public onlyOwner atStage(Stages.PREICO)\n', '      {\n', '          stage = Stages.ICO;\n', '          stopped = false;\n', '          maxCap_ICO = 900000000 * 10 **18;   // 900 million\n', '          balances[address(this)] = balances[address(this)].add(maxCap_ICO);\n', '         ico_startdate = now;\n', '         ico_enddate = now + 25 days; //time for ICO\n', '          Transfer(0, address(this), balances[address(this)]);\n', '          }\n', '          \n', '   \n', '    // called by the owner, pause ICO\n', '    function StopICO() external onlyOwner  {\n', '        stopped = true;\n', '      \n', '    }\n', '\n', '    // called by the owner , resumes ICO\n', '    function releaseICO() external onlyOwner\n', '    {\n', '        stopped = false;\n', '      \n', '    }\n', '    \n', '       \n', '    function setWhiteListAddresses(address _investor) external onlyOwner{\n', '           whitelisted[_investor] = true;\n', '       }\n', '       \n', '      \n', '     function end_ICO() external onlyOwner atStage(Stages.ICO)\n', '     {\n', '         require(now > ico_enddate);\n', '         stage = Stages.ENDED;\n', '         icoRunningStatus= false;\n', '        _totalsupply = (_totalsupply).sub(balances[address(this)]);\n', '         balances[address(this)] = 0;\n', '         Transfer(address(this), 0 , balances[address(this)]);\n', '         \n', '     }\n', '      // This function can be used by owner in emergency to update running status parameter\n', '        function fixSpecications(bool RunningStatus ) external onlyOwner\n', '        {\n', '           icoRunningStatus = RunningStatus;\n', '        }\n', '     \n', '    // what is the total supply of the ech tokens\n', '     function totalSupply() public view returns (uint256 total_Supply) {\n', '         total_Supply = _totalsupply;\n', '     }\n', '    \n', '    // What is the balance of a particular account?\n', '     function balanceOf(address _owner)public view returns (uint256 balance) {\n', '         return balances[_owner];\n', '     }\n', '    \n', '    // Send _value amount of tokens from address _from to address _to\n', '     // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n', '     // tokens on your behalf, for example to "deposit" to a contract address and/or to charge\n', '     // fees in sub-currencies; the command should fail unless the _from account has\n', '     // deliberately authorized the sender of the message via some mechanism; we propose\n', '     // these standardized APIs for approval:\n', '     function transferFrom( address _from, address _to, uint256 _amount )public returns (bool success) {\n', '     require( _to != 0x0);\n', '     require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);\n', '     balances[_from] = (balances[_from]).sub(_amount);\n', '     allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);\n', '     balances[_to] = (balances[_to]).add(_amount);\n', '     Transfer(_from, _to, _amount);\n', '     return true;\n', '         }\n', '    \n', '   // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '     // If this function is called again it overwrites the current allowance with _value.\n', '     function approve(address _spender, uint256 _amount)public returns (bool success) {\n', '         require(!icoRunningStatus);\n', '         require( _spender != 0x0);\n', '         allowed[msg.sender][_spender] = _amount;\n', '         Approval(msg.sender, _spender, _amount);\n', '         return true;\n', '     }\n', '  \n', '     function allowance(address _owner, address _spender)public view returns (uint256 remaining) {\n', '         require( _owner != 0x0 && _spender !=0x0);\n', '         return allowed[_owner][_spender];\n', '   }\n', "    // Transfer the balance from owner's account to another account\n", '     function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '         if(icoRunningStatus && msg.sender == owner)\n', '         {\n', '            require(balances[owner] >= _amount && _amount >= 0 && balances[_to] + _amount > balances[_to]);\n', '            balances[owner] = (balances[owner]).sub(_amount);\n', '            balances[_to] = (balances[_to]).add(_amount);\n', '            Transfer(owner, _to, _amount);\n', '            return true;\n', '         }\n', '       \n', '         else if(!icoRunningStatus)\n', '         {\n', '            require(balances[msg.sender] >= _amount && _amount >= 0 && balances[_to] + _amount > balances[_to]);\n', '            balances[msg.sender] = (balances[msg.sender]).sub(_amount);\n', '            balances[_to] = (balances[_to]).add(_amount);\n', '            Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '         } \n', '         \n', '         else \n', '         revert();\n', '     }\n', '  \n', '\n', "          // Transfer the balance from owner's account to another account\n", '    function transferTokens(address _to, uint256 _amount) private returns(bool success) {\n', '        require( _to != 0x0);       \n', '        require(balances[address(this)] >= _amount && _amount > 0);\n', '        balances[address(this)] = (balances[address(this)]).sub(_amount);\n', '        balances[_to] = (balances[_to]).add(_amount);\n', '        Transfer(address(this), _to, _amount);\n', '        return true;\n', '        }\n', '    \n', ' \n', '    \t//In case the ownership needs to be transferred\n', '\tfunction transferOwnership(address newOwner)public onlyOwner\n', '\t{\n', '\t    balances[newOwner] = (balances[newOwner]).add(balances[owner]);\n', '\t    balances[owner] = 0;\n', '\t    owner = newOwner;\n', '\t}\n', '\n', '    \n', '    function drain() external onlyOwner {\n', '        ethFundMain.transfer(this.balance);\n', '    }\n', '    \n', '}']