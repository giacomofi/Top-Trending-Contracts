['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0 uint256 c = a / b;\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded \n', ' to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract token { function transfer(address receiver, uint amount){  } }\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // uint256 durationInMinutes;\n', '  // address where funds are collected\n', '  address public wallet;\n', '  // token address\n', '  address public addressOfTokenUsedAsReward1;\n', '  address public addressOfTokenUsedAsReward2;\n', '  address public addressOfTokenUsedAsReward3;\n', '  address public addressOfTokenUsedAsReward4;\n', '  address public addressOfTokenUsedAsReward5;\n', '\n', '  uint256 public price = 7500;\n', '\n', '  token tokenReward1;\n', '  token tokenReward2;\n', '  token tokenReward3;\n', '  token tokenReward4;\n', '  token tokenReward5;\n', '\n', '  // mapping (address => uint) public contributions;\n', '  \n', '\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  // uint256 public startTime;\n', '  // uint256 public endTime;\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale() {\n', '    //You will change this to your wallet where you need the ETH \n', '    wallet = 0xE37C4541C34e4A8785DaAA9aEb5005DdD29854ac;\n', '    // durationInMinutes = _durationInMinutes;\n', '    //Here will come the checksum address we got\n', '    //aircoin\n', '    addressOfTokenUsedAsReward1 = 0xBD17Dfe402f1Afa41Cda169297F8de48d6Dfb613;\n', '    //diamond\n', '    addressOfTokenUsedAsReward2 = 0x489DF6493C58642e6a4651dDcd4145eaFBAA1018;\n', '    //silver\n', '    addressOfTokenUsedAsReward3 = 0x404a639086eda1B9C8abA3e34a5f8145B4B04ea5;\n', '    //usdgold\n', '    addressOfTokenUsedAsReward4 = 0x00755562Dfc1F409ec05d38254158850E4e8362a;\n', '    //worldcoin\n', '    addressOfTokenUsedAsReward5 = 0xE7AE9dc8F5F572e4f80655C4D0Ffe32ec16fF0E3;\n', '\n', '\n', '    tokenReward1 = token(addressOfTokenUsedAsReward1);\n', '    tokenReward2 = token(addressOfTokenUsedAsReward2);\n', '    tokenReward3 = token(addressOfTokenUsedAsReward3);\n', '    tokenReward4 = token(addressOfTokenUsedAsReward4);\n', '    tokenReward5 = token(addressOfTokenUsedAsReward5);\n', '  }\n', '\n', '  bool public started = true;\n', '\n', '  function startSale(){\n', '    if (msg.sender != wallet) throw;\n', '    started = true;\n', '  }\n', '\n', '  function stopSale(){\n', '    if(msg.sender != wallet) throw;\n', '    started = false;\n', '  }\n', '\n', '  function setPrice(uint256 _price){\n', '    if(msg.sender != wallet) throw;\n', '    price = _price;\n', '  }\n', '  function changeWallet(address _wallet){\n', '  \tif(msg.sender != wallet) throw;\n', '  \twallet = _wallet;\n', '  }\n', '\n', '  // function changeTokenReward(address _token){\n', '  //   if(msg.sender!=wallet) throw;\n', '  //   tokenReward = token(_token);\n', '  // }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token `purchase function\n', '  function buyTokens(address beneficiary) payable {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // if(weiAmount < 10**16) throw;\n', '    // if(weiAmount > 50*10**18) throw;\n', '\n', '    // calculate token amount to be sent\n', '    uint256 tokens = (weiAmount/10**10) * price;//weiamount * price \n', '    // uint256 tokens = (weiAmount/10**(18-decimals)) * price;//weiamount * price \n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    \n', '    // if(contributions[msg.sender].add(weiAmount)>10*10**18) throw;\n', '    // contributions[msg.sender] = contributions[msg.sender].add(weiAmount);\n', '\n', '    tokenReward1.transfer(beneficiary, tokens);\n', '    tokenReward2.transfer(beneficiary, tokens);\n', '    tokenReward3.transfer(beneficiary, tokens);\n', '    tokenReward4.transfer(beneficiary, tokens);\n', '    tokenReward5.transfer(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    // wallet.transfer(msg.value);\n', '    if (!wallet.send(msg.value)) {\n', '      throw;\n', '    }\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = started;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  function withdrawTokens1(uint256 _amount) {\n', '    if(msg.sender!=wallet) throw;\n', '    tokenReward1.transfer(wallet,_amount);\n', '  }\n', '  function withdrawTokens2(uint256 _amount) {\n', '    if(msg.sender!=wallet) throw;\n', '    tokenReward2.transfer(wallet,_amount);\n', '  }\n', '  function withdrawTokens3(uint256 _amount) {\n', '    if(msg.sender!=wallet) throw;\n', '    tokenReward3.transfer(wallet,_amount);\n', '  }\n', '  function withdrawTokens4(uint256 _amount) {\n', '    if(msg.sender!=wallet) throw;\n', '    tokenReward4.transfer(wallet,_amount);\n', '  }\n', '  function withdrawTokens5(uint256 _amount) {\n', '    if(msg.sender!=wallet) throw;\n', '    tokenReward5.transfer(wallet,_amount);\n', '  }\n', '}']