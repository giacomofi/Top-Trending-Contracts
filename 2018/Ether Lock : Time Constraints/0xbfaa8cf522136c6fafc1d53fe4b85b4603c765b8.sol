['contract ERC20Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' *\n', ' * Contract source taken from Open Zeppelin: https://github.com/OpenZeppelin/zeppelin-solidity/blob/v1.4.0/contracts/ownership/Ownable.sol\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'library SafeMathLib {\n', '    //\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    //\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b > 0 && a > 0);\n', '        // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    //\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    //\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a && c >= b);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract StandardToken is ERC20Token {\n', '    using SafeMathLib for uint;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '\n', '    //\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    //\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(_value > 0 && balances[msg.sender] >= _value);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    //\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value > 0 && balances[_from] >= _value);\n', '        require(allowed[_from][msg.sender] >= _value);\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    //\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', 'contract Winchain is StandardToken, Ownable {\n', '    using SafeMathLib for uint256;\n', '\n', '    uint256 INTERVAL_TIME = 63072000;//Two years\n', '    uint256 public deadlineToFreedTeamPool;//the deadline to freed the win pool of team\n', '    string public name = "Winchain";\n', '    string public symbol = "WIN";\n', '    uint256 public decimals = 18;\n', '    uint256 public INITIAL_SUPPLY = (210) * (10 ** 8) * (10 ** 18);//210\n', '\n', '    // WIN which is freezed for the second stage\n', '    uint256 winPoolForSecondStage;\n', '    // WIN which is freezed for the third stage\n', '    uint256 winPoolForThirdStage;\n', '    // WIN which is freezed in order to reward team\n', '    uint256 winPoolToTeam;\n', '    // WIN which is freezed for community incentives, business corporation, developer ecosystem\n', '    uint256 winPoolToWinSystem;\n', '\n', '    event Freed(address indexed owner, uint256 value);\n', '\n', '    function Winchain(){\n', '        totalSupply = INITIAL_SUPPLY;\n', '        deadlineToFreedTeamPool = INTERVAL_TIME.add(block.timestamp);\n', '\n', '        uint256 peerSupply = totalSupply.div(100);\n', '        //the first stage 15% + community operation 15%\n', '        balances[msg.sender] = peerSupply.mul(30);\n', '        //the second stage 15%\n', '        winPoolForSecondStage = peerSupply.mul(15);\n', '        //the third stage 20%\n', '        winPoolForThirdStage = peerSupply.mul(20);\n', '        //team 15%\n', '        winPoolToTeam = peerSupply.mul(15);\n', '        //community incentives and developer ecosystem 20%\n', '        winPoolToWinSystem = peerSupply.mul(20);\n', '\n', '    }\n', '\n', '    //===================================================================\n', '    //\n', '    function balanceWinPoolForSecondStage() public constant returns (uint256 remaining) {\n', '        return winPoolForSecondStage;\n', '    }\n', '\n', '    function freedWinPoolForSecondStage() onlyOwner returns (bool success) {\n', '        require(winPoolForSecondStage > 0);\n', '        require(balances[msg.sender].add(winPoolForSecondStage) >= balances[msg.sender]\n', '        && balances[msg.sender].add(winPoolForSecondStage) >= winPoolForSecondStage);\n', '\n', '        balances[msg.sender] = balances[msg.sender].add(winPoolForSecondStage);\n', '        Freed(msg.sender, winPoolForSecondStage);\n', '        winPoolForSecondStage = 0;\n', '        return true;\n', '    }\n', '    //\n', '    function balanceWinPoolForThirdStage() public constant returns (uint256 remaining) {\n', '        return winPoolForThirdStage;\n', '    }\n', '\n', '    function freedWinPoolForThirdStage() onlyOwner returns (bool success) {\n', '        require(winPoolForThirdStage > 0);\n', '        require(balances[msg.sender].add(winPoolForThirdStage) >= balances[msg.sender]\n', '        && balances[msg.sender].add(winPoolForThirdStage) >= winPoolForThirdStage);\n', '\n', '        balances[msg.sender] = balances[msg.sender].add(winPoolForThirdStage);\n', '        Freed(msg.sender, winPoolForThirdStage);\n', '        winPoolForThirdStage = 0;\n', '        return true;\n', '    }\n', '    //\n', '    function balanceWinPoolToTeam() public constant returns (uint256 remaining) {\n', '        return winPoolToTeam;\n', '    }\n', '\n', '    function freedWinPoolToTeam() onlyOwner returns (bool success) {\n', '        require(winPoolToTeam > 0);\n', '        require(balances[msg.sender].add(winPoolToTeam) >= balances[msg.sender]\n', '        && balances[msg.sender].add(winPoolToTeam) >= winPoolToTeam);\n', '\n', '        require(block.timestamp >= deadlineToFreedTeamPool);\n', '\n', '        balances[msg.sender] = balances[msg.sender].add(winPoolToTeam);\n', '        Freed(msg.sender, winPoolToTeam);\n', '        winPoolToTeam = 0;\n', '        return true;\n', '    }\n', '    //\n', '    function balanceWinPoolToWinSystem() public constant returns (uint256 remaining) {\n', '        return winPoolToWinSystem;\n', '    }\n', '\n', '    function freedWinPoolToWinSystem() onlyOwner returns (bool success) {\n', '        require(winPoolToWinSystem > 0);\n', '        require(balances[msg.sender].add(winPoolToWinSystem) >= balances[msg.sender]\n', '        && balances[msg.sender].add(winPoolToWinSystem) >= winPoolToWinSystem);\n', '\n', '        balances[msg.sender] = balances[msg.sender].add(winPoolToWinSystem);\n', '        Freed(msg.sender, winPoolToWinSystem);\n', '        winPoolToWinSystem = 0;\n', '        return true;\n', '    }\n', '\n', '    function() public payable {\n', '        revert();\n', '    }\n', '\n', '}']
['contract ERC20Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' *\n', ' * Contract source taken from Open Zeppelin: https://github.com/OpenZeppelin/zeppelin-solidity/blob/v1.4.0/contracts/ownership/Ownable.sol\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'library SafeMathLib {\n', '    //\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    //\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b > 0 && a > 0);\n', '        // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    //\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    //\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a && c >= b);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract StandardToken is ERC20Token {\n', '    using SafeMathLib for uint;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '\n', '    //\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    //\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(_value > 0 && balances[msg.sender] >= _value);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    //\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value > 0 && balances[_from] >= _value);\n', '        require(allowed[_from][msg.sender] >= _value);\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    //\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', 'contract Winchain is StandardToken, Ownable {\n', '    using SafeMathLib for uint256;\n', '\n', '    uint256 INTERVAL_TIME = 63072000;//Two years\n', '    uint256 public deadlineToFreedTeamPool;//the deadline to freed the win pool of team\n', '    string public name = "Winchain";\n', '    string public symbol = "WIN";\n', '    uint256 public decimals = 18;\n', '    uint256 public INITIAL_SUPPLY = (210) * (10 ** 8) * (10 ** 18);//210\n', '\n', '    // WIN which is freezed for the second stage\n', '    uint256 winPoolForSecondStage;\n', '    // WIN which is freezed for the third stage\n', '    uint256 winPoolForThirdStage;\n', '    // WIN which is freezed in order to reward team\n', '    uint256 winPoolToTeam;\n', '    // WIN which is freezed for community incentives, business corporation, developer ecosystem\n', '    uint256 winPoolToWinSystem;\n', '\n', '    event Freed(address indexed owner, uint256 value);\n', '\n', '    function Winchain(){\n', '        totalSupply = INITIAL_SUPPLY;\n', '        deadlineToFreedTeamPool = INTERVAL_TIME.add(block.timestamp);\n', '\n', '        uint256 peerSupply = totalSupply.div(100);\n', '        //the first stage 15% + community operation 15%\n', '        balances[msg.sender] = peerSupply.mul(30);\n', '        //the second stage 15%\n', '        winPoolForSecondStage = peerSupply.mul(15);\n', '        //the third stage 20%\n', '        winPoolForThirdStage = peerSupply.mul(20);\n', '        //team 15%\n', '        winPoolToTeam = peerSupply.mul(15);\n', '        //community incentives and developer ecosystem 20%\n', '        winPoolToWinSystem = peerSupply.mul(20);\n', '\n', '    }\n', '\n', '    //===================================================================\n', '    //\n', '    function balanceWinPoolForSecondStage() public constant returns (uint256 remaining) {\n', '        return winPoolForSecondStage;\n', '    }\n', '\n', '    function freedWinPoolForSecondStage() onlyOwner returns (bool success) {\n', '        require(winPoolForSecondStage > 0);\n', '        require(balances[msg.sender].add(winPoolForSecondStage) >= balances[msg.sender]\n', '        && balances[msg.sender].add(winPoolForSecondStage) >= winPoolForSecondStage);\n', '\n', '        balances[msg.sender] = balances[msg.sender].add(winPoolForSecondStage);\n', '        Freed(msg.sender, winPoolForSecondStage);\n', '        winPoolForSecondStage = 0;\n', '        return true;\n', '    }\n', '    //\n', '    function balanceWinPoolForThirdStage() public constant returns (uint256 remaining) {\n', '        return winPoolForThirdStage;\n', '    }\n', '\n', '    function freedWinPoolForThirdStage() onlyOwner returns (bool success) {\n', '        require(winPoolForThirdStage > 0);\n', '        require(balances[msg.sender].add(winPoolForThirdStage) >= balances[msg.sender]\n', '        && balances[msg.sender].add(winPoolForThirdStage) >= winPoolForThirdStage);\n', '\n', '        balances[msg.sender] = balances[msg.sender].add(winPoolForThirdStage);\n', '        Freed(msg.sender, winPoolForThirdStage);\n', '        winPoolForThirdStage = 0;\n', '        return true;\n', '    }\n', '    //\n', '    function balanceWinPoolToTeam() public constant returns (uint256 remaining) {\n', '        return winPoolToTeam;\n', '    }\n', '\n', '    function freedWinPoolToTeam() onlyOwner returns (bool success) {\n', '        require(winPoolToTeam > 0);\n', '        require(balances[msg.sender].add(winPoolToTeam) >= balances[msg.sender]\n', '        && balances[msg.sender].add(winPoolToTeam) >= winPoolToTeam);\n', '\n', '        require(block.timestamp >= deadlineToFreedTeamPool);\n', '\n', '        balances[msg.sender] = balances[msg.sender].add(winPoolToTeam);\n', '        Freed(msg.sender, winPoolToTeam);\n', '        winPoolToTeam = 0;\n', '        return true;\n', '    }\n', '    //\n', '    function balanceWinPoolToWinSystem() public constant returns (uint256 remaining) {\n', '        return winPoolToWinSystem;\n', '    }\n', '\n', '    function freedWinPoolToWinSystem() onlyOwner returns (bool success) {\n', '        require(winPoolToWinSystem > 0);\n', '        require(balances[msg.sender].add(winPoolToWinSystem) >= balances[msg.sender]\n', '        && balances[msg.sender].add(winPoolToWinSystem) >= winPoolToWinSystem);\n', '\n', '        balances[msg.sender] = balances[msg.sender].add(winPoolToWinSystem);\n', '        Freed(msg.sender, winPoolToWinSystem);\n', '        winPoolToWinSystem = 0;\n', '        return true;\n', '    }\n', '\n', '    function() public payable {\n', '        revert();\n', '    }\n', '\n', '}']
