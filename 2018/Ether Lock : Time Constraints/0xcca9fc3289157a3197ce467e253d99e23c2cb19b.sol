['pragma solidity^0.4.21;\n', '/*\n', ' *      ##########################################\n', ' *      ##########################################\n', ' *      ###                                    ###\n', ' *      ###          &#119823;&#119845;&#119834;&#119858; & &#119830;&#119842;&#119847; &#119812;&#119853;&#119841;&#119838;&#119851;          ###\n', ' *      ###                 at                 ###\n', ' *      ###          &#119812;&#119827;&#119815;&#119812;&#119825;&#119808;&#119813;&#119813;&#119819;&#119812;.&#119810;&#119822;&#119820;          ###\n', ' *      ###                                    ###\n', ' *      ##########################################\n', ' *      ##########################################\n', ' *\n', ' *      Welcome to the &#119812;&#119853;&#119841;&#119838;&#119851;&#119834;&#119839;&#119839;&#119845;&#119838; &#119819;&#119822;&#119827; &#119827;&#119848;&#119844;&#119838;&#119847; promotional contract!\n', ' *      First you should go and play &#119812;&#119853;&#119841;&#119838;&#119851;&#119834;&#119839;&#119839;&#119845;&#119838; @ &#119841;&#119853;&#119853;&#119849;&#119852;://&#119838;&#119853;&#119841;&#119838;&#119851;&#119834;&#119839;&#119839;&#119845;&#119838;.&#119836;&#119848;&#119846;\n', ' *      Then you&#39;ll have earnt free &#119819;&#119822;&#119827; &#119827;&#119848;&#119844;&#119838;&#119847;&#119852; via this very promotion!\n', ' *      Next you should learn about our &#119816;&#119810;&#119822; @ &#119841;&#119853;&#119853;&#119849;&#119852;://&#119838;&#119853;&#119841;&#119838;&#119851;&#119834;&#119839;&#119839;&#119845;&#119838;.&#119836;&#119848;&#119846;/&#119842;&#119836;&#119848;\n', ' *      Then take part by buying even more &#119819;&#119822;&#119827; &#119853;&#119848;&#119844;&#119838;&#119847;&#119852;! \n', ' *      And don&#39;t forget to play &#119812;&#119853;&#119841;&#119838;&#119851;&#119834;&#119839;&#119839;&#119845;&#119838; some more because it&#39;s brilliant!\n', ' *\n', ' *      If you want to chat to us you have loads of options:\n', ' *      On &#119827;&#119838;&#119845;&#119838;&#119840;&#119851;&#119834;&#119846; @ &#119841;&#119853;&#119853;&#119849;&#119852;://&#119853;.&#119846;&#119838;/&#119838;&#119853;&#119841;&#119838;&#119851;&#119834;&#119839;&#119839;&#119845;&#119838;\n', ' *      Or on &#119827;&#119856;&#119842;&#119853;&#119853;&#119838;&#119851; @ &#119841;&#119853;&#119853;&#119849;&#119852;://&#119853;&#119856;&#119842;&#119853;&#119853;&#119838;&#119851;.&#119836;&#119848;&#119846;/&#119838;&#119853;&#119841;&#119838;&#119851;&#119834;&#119839;&#119839;&#119845;&#119838;\n', ' *      Or on &#119825;&#119838;&#119837;&#119837;&#119842;&#119853; @ &#119841;&#119853;&#119853;&#119849;&#119852;://&#119838;&#119853;&#119841;&#119838;&#119851;&#119834;&#119839;&#119839;&#119845;&#119838;.&#119851;&#119838;&#119837;&#119837;&#119842;&#119853;.&#119836;&#119848;&#119846;\n', ' *\n', ' *      &#119812;&#119853;&#119841;&#119838;&#119851;&#119834;&#119839;&#119839;&#119845;&#119838; - the only &#119853;&#119851;&#119854;&#119845;&#119858; &#119837;&#119838;&#119836;&#119838;&#119847;&#119853;&#119851;&#119834;&#119845;&#119842;&#119859;&#119838;&#119837; & &#119836;&#119841;&#119834;&#119851;&#119842;&#119853;&#119834;&#119835;&#119845;&#119838; blockchain lottery.\n', ' */\n', 'contract EtheraffleInterface {\n', '    uint public tktPrice;\n', '    function getUserNumEntries(address _entrant, uint _week) public view returns (uint) {}\n', '}\n', '\n', 'contract LOTInterface {\n', '    function transfer(address _to, uint _value) public {}\n', '    function balanceOf(address _owner) public view returns (uint) {}\n', '}\n', '\n', 'contract EtheraffleLOTPromo {\n', '    \n', '    bool    public isActive;\n', '    uint    constant public RAFEND     = 500400;     // 7:00pm Saturdays\n', '    uint    constant public BIRTHDAY   = 1500249600; // Etheraffle&#39;s birthday <3\n', '    uint    constant public ICOSTART   = 1522281600; // Thur 29th March 2018\n', '    uint    constant public TIER1END   = 1523491200; // Thur 12th April 2018\n', '    uint    constant public TIER2END   = 1525305600; // Thur 3rd May 2018\n', '    uint    constant public TIER3END   = 1527724800; // Thur 31st May 2018\n', '    address constant public ETHERAFFLE = 0x97f535e98cf250CDd7Ff0cb9B29E4548b609A0bd; // ER multisig wallet address\n', '    \n', '    LOTInterface LOTContract;\n', '    EtheraffleInterface etheraffleContract;\n', '\n', '    /* Mapping of  user address to weekNo to claimed bool */\n', '    mapping (address => mapping (uint => bool)) public claimed;\n', '    \n', '    event LogActiveStatus(bool currentStatus, uint atTime);\n', '    event LogTokenDeposit(address fromWhom, uint tokenAmount, bytes data);\n', '    event LogLOTClaim(address whom, uint howMany, uint inWeek, uint atTime);\n', '    /*\n', '     * @dev     Modifier requiring function caller to be the Etheraffle \n', '     *          multisig wallet address\n', '     */\n', '    modifier onlyEtheraffle() {\n', '        require(msg.sender == ETHERAFFLE);\n', '        _;\n', '    }\n', '    /*\n', '     * @dev     Constructor - sets promo running and instantiates required\n', '     *          contracts.\n', '     *\n', '     * @param _LOT      Address of the LOT token contract\n', '     * @param _ER       Address of the Etheraffle contract\n', '     */\n', '    function EtheraffleLOTPromo(address _LOT, address _ER) public {\n', '        isActive           = true;\n', '        LOTContract        = LOTInterface(_LOT);\n', '        etheraffleContract = EtheraffleInterface(_ER);\n', '    }\n', '    \n', '    /*\n', '     * @dev     Function used to redeem promotional LOT owed. Use weekNo of \n', '     *          0 to get current week number. Requires user not to have already \n', '     *          claimed week number in question&#39;s earnt promo LOT and for promo \n', '     *          to be active. It calculates LOT owed, and sends them to the \n', '     *          caller. Should contract&#39;s LOT balance fall too low, attempts \n', '     *          to redeem will arrest the contract to await a resupply of LOT.\n', '     */\n', '    function redeem(uint _weekNo) public {\n', '        uint week    = _weekNo == 0 ? getWeek() : _weekNo;\n', '        uint entries = getNumEntries(msg.sender, week);\n', '        require(\n', '            !claimed[msg.sender][week] &&\n', '            entries > 0 &&\n', '            isActive\n', '            );\n', '        uint amt = getPromoLOTEarnt(entries);\n', '        if (getLOTBalance(this) < amt) {\n', '            isActive = false;\n', '            emit LogActiveStatus(false, now);\n', '            return;\n', '        }\n', '        claimed[msg.sender][week] = true;\n', '        LOTContract.transfer(msg.sender, amt);\n', '        emit LogLOTClaim(msg.sender, amt, week, now);\n', '    }\n', '    /*\n', '     * @dev     Returns number of entries made in Etheraffle contract by\n', '     *          function caller in whatever the queried week is. \n', '     *\n', '     * @param _address  Address to be queried\n', '     * @param _weekNo   Desired week number. (Use 0 for current week)\n', '     */\n', '    function getNumEntries(address _address, uint _weekNo) public view returns (uint) {\n', '        uint week = _weekNo == 0 ? getWeek() : _weekNo;\n', '        return etheraffleContract.getUserNumEntries(_address, week);\n', '    }\n', '    /*\n', '     * @dev     Toggles promo on & off. Only callable by the Etheraffle\n', '     *          multisig wallet.\n', '     *\n', '     * @param _status   Desired bool status of the promo\n', '     */\n', '    function togglePromo(bool _status) public onlyEtheraffle {\n', '        isActive = _status;\n', '        emit LogActiveStatus(_status, now);\n', '    }\n', '    /*\n', '     * @dev     Same getWeek function as seen in main Etheraffle contract to \n', '     *          ensure parity. Ddefined by number of weeks since Etheraffle&#39;s\n', '     *          birthday.\n', '     */\n', '    function getWeek() public view returns (uint) {\n', '        uint curWeek = (now - BIRTHDAY) / 604800;\n', '        if (now - ((curWeek * 604800) + BIRTHDAY) > RAFEND) curWeek++;\n', '        return curWeek;\n', '    }\n', '    /**\n', '     * @dev     ERC223 tokenFallback function allows to receive ERC223 tokens \n', '     *          properly.\n', '     *\n', '     * @param _from  Address of the sender.\n', '     * @param _value Amount of deposited tokens.\n', '     * @param _data  Token transaction data.\n', '     */\n', '    function tokenFallback(address _from, uint256 _value, bytes _data) external {\n', '        if (_value > 0) emit LogTokenDeposit(_from, _value, _data);\n', '    }\n', '    /*\n', '     * @dev     Retrieves current LOT token balance of an address.\n', '     *\n', '     * @param _address Address whose balance is to be queried.\n', '     */\n', '    function getLOTBalance(address _address) internal view returns (uint) {\n', '        return LOTContract.balanceOf(_address);\n', '    }\n', '    /*\n', '     * @dev     Function returns bool re whether or not address in question \n', '     *          has claimed promo LOT for the week in question.\n', '     *\n', '     * @param _address  Ethereum address to be queried\n', '     * @param _weekNo   Week number to be queried (use 0 for current week)\n', '     */\n', '    function hasRedeemed(address _address, uint _weekNo) public view returns (bool) {\n', '        uint week = _weekNo == 0 ? getWeek() : _weekNo;\n', '        return claimed[_address][week];\n', '    }\n', '    /*\n', '     * @dev     Returns current ticket price from the main Etheraffle\n', '     *          contract\n', '     */\n', '    function getTktPrice() public view returns (uint) {\n', '        return etheraffleContract.tktPrice();\n', '    }\n', '    /*\n', '     * @dev     Function returns current ICO tier&#39;s exchange rate of LOT\n', '     *          per ETH.\n', '     */\n', '    function getRate() public view returns (uint) {\n', '        if (now <  ICOSTART) return 110000 * 10 ** 6;\n', '        if (now <= TIER1END) return 100000 * 10 ** 6;\n', '        if (now <= TIER2END) return 90000  * 10 ** 6;\n', '        if (now <= TIER3END) return 80000  * 10 ** 6;\n', '        else return 0;\n', '    }\n', '    /*\n', '     * @dev     Returns number of promotional LOT earnt as calculated \n', '     *          based on number of entries, current ICO exchange rate\n', '     *          and the current Etheraffle ticket price. \n', '     */\n', '    function getPromoLOTEarnt(uint _entries) public view returns (uint) {\n', '        return (_entries * getRate() * getTktPrice()) / (1 * 10 ** 18);\n', '    }\n', '    /*\n', '     * @dev     Allows contract addresses to be changed in the event of \n', '     *          future contract upgrades.\n', '     *\n', '     * @param _LOT      Address of the LOT token contract\n', '     * @param _ER       Address of the Etheraffle contract\n', '     */\n', '    function updateAddresses(address _LOT, address _ER) external onlyEtheraffle {\n', '        LOTContract        = LOTInterface(_LOT);\n', '        etheraffleContract = EtheraffleInterface(_ER);\n', '    }\n', '    /*\n', '     * @dev     Scuttles contract, sending any remaining LOT tokens back \n', '     *          to the Etheraffle multisig (by whom it is only callable)\n', '     */\n', '    function scuttle() external onlyEtheraffle {\n', '        LOTContract.transfer(ETHERAFFLE, LOTContract.balanceOf(this));\n', '        selfdestruct(ETHERAFFLE);\n', '    }\n', '}']
['pragma solidity^0.4.21;\n', '/*\n', ' *      ##########################################\n', ' *      ##########################################\n', ' *      ###                                    ###\n', ' *      ###          ???? & ??? ?????          ###\n', ' *      ###                 at                 ###\n', ' *      ###          ??????????.???          ###\n', ' *      ###                                    ###\n', ' *      ##########################################\n', ' *      ##########################################\n', ' *\n', ' *      Welcome to the ?????????? ??? ????? promotional contract!\n', ' *      First you should go and play ?????????? @ ?????://??????????.???\n', " *      Then you'll have earnt free ??? ?????? via this very promotion!\n", ' *      Next you should learn about our ??? @ ?????://??????????.???/???\n', ' *      Then take part by buying even more ??? ??????! \n', " *      And don't forget to play ?????????? some more because it's brilliant!\n", ' *\n', ' *      If you want to chat to us you have loads of options:\n', ' *      On ???????? @ ?????://?.??/??????????\n', ' *      Or on ??????? @ ?????://???????.???/??????????\n', ' *      Or on ?????? @ ?????://??????????.??????.???\n', ' *\n', ' *      ?????????? - the only ????? ????????????? & ?????????? blockchain lottery.\n', ' */\n', 'contract EtheraffleInterface {\n', '    uint public tktPrice;\n', '    function getUserNumEntries(address _entrant, uint _week) public view returns (uint) {}\n', '}\n', '\n', 'contract LOTInterface {\n', '    function transfer(address _to, uint _value) public {}\n', '    function balanceOf(address _owner) public view returns (uint) {}\n', '}\n', '\n', 'contract EtheraffleLOTPromo {\n', '    \n', '    bool    public isActive;\n', '    uint    constant public RAFEND     = 500400;     // 7:00pm Saturdays\n', "    uint    constant public BIRTHDAY   = 1500249600; // Etheraffle's birthday <3\n", '    uint    constant public ICOSTART   = 1522281600; // Thur 29th March 2018\n', '    uint    constant public TIER1END   = 1523491200; // Thur 12th April 2018\n', '    uint    constant public TIER2END   = 1525305600; // Thur 3rd May 2018\n', '    uint    constant public TIER3END   = 1527724800; // Thur 31st May 2018\n', '    address constant public ETHERAFFLE = 0x97f535e98cf250CDd7Ff0cb9B29E4548b609A0bd; // ER multisig wallet address\n', '    \n', '    LOTInterface LOTContract;\n', '    EtheraffleInterface etheraffleContract;\n', '\n', '    /* Mapping of  user address to weekNo to claimed bool */\n', '    mapping (address => mapping (uint => bool)) public claimed;\n', '    \n', '    event LogActiveStatus(bool currentStatus, uint atTime);\n', '    event LogTokenDeposit(address fromWhom, uint tokenAmount, bytes data);\n', '    event LogLOTClaim(address whom, uint howMany, uint inWeek, uint atTime);\n', '    /*\n', '     * @dev     Modifier requiring function caller to be the Etheraffle \n', '     *          multisig wallet address\n', '     */\n', '    modifier onlyEtheraffle() {\n', '        require(msg.sender == ETHERAFFLE);\n', '        _;\n', '    }\n', '    /*\n', '     * @dev     Constructor - sets promo running and instantiates required\n', '     *          contracts.\n', '     *\n', '     * @param _LOT      Address of the LOT token contract\n', '     * @param _ER       Address of the Etheraffle contract\n', '     */\n', '    function EtheraffleLOTPromo(address _LOT, address _ER) public {\n', '        isActive           = true;\n', '        LOTContract        = LOTInterface(_LOT);\n', '        etheraffleContract = EtheraffleInterface(_ER);\n', '    }\n', '    \n', '    /*\n', '     * @dev     Function used to redeem promotional LOT owed. Use weekNo of \n', '     *          0 to get current week number. Requires user not to have already \n', "     *          claimed week number in question's earnt promo LOT and for promo \n", '     *          to be active. It calculates LOT owed, and sends them to the \n', "     *          caller. Should contract's LOT balance fall too low, attempts \n", '     *          to redeem will arrest the contract to await a resupply of LOT.\n', '     */\n', '    function redeem(uint _weekNo) public {\n', '        uint week    = _weekNo == 0 ? getWeek() : _weekNo;\n', '        uint entries = getNumEntries(msg.sender, week);\n', '        require(\n', '            !claimed[msg.sender][week] &&\n', '            entries > 0 &&\n', '            isActive\n', '            );\n', '        uint amt = getPromoLOTEarnt(entries);\n', '        if (getLOTBalance(this) < amt) {\n', '            isActive = false;\n', '            emit LogActiveStatus(false, now);\n', '            return;\n', '        }\n', '        claimed[msg.sender][week] = true;\n', '        LOTContract.transfer(msg.sender, amt);\n', '        emit LogLOTClaim(msg.sender, amt, week, now);\n', '    }\n', '    /*\n', '     * @dev     Returns number of entries made in Etheraffle contract by\n', '     *          function caller in whatever the queried week is. \n', '     *\n', '     * @param _address  Address to be queried\n', '     * @param _weekNo   Desired week number. (Use 0 for current week)\n', '     */\n', '    function getNumEntries(address _address, uint _weekNo) public view returns (uint) {\n', '        uint week = _weekNo == 0 ? getWeek() : _weekNo;\n', '        return etheraffleContract.getUserNumEntries(_address, week);\n', '    }\n', '    /*\n', '     * @dev     Toggles promo on & off. Only callable by the Etheraffle\n', '     *          multisig wallet.\n', '     *\n', '     * @param _status   Desired bool status of the promo\n', '     */\n', '    function togglePromo(bool _status) public onlyEtheraffle {\n', '        isActive = _status;\n', '        emit LogActiveStatus(_status, now);\n', '    }\n', '    /*\n', '     * @dev     Same getWeek function as seen in main Etheraffle contract to \n', "     *          ensure parity. Ddefined by number of weeks since Etheraffle's\n", '     *          birthday.\n', '     */\n', '    function getWeek() public view returns (uint) {\n', '        uint curWeek = (now - BIRTHDAY) / 604800;\n', '        if (now - ((curWeek * 604800) + BIRTHDAY) > RAFEND) curWeek++;\n', '        return curWeek;\n', '    }\n', '    /**\n', '     * @dev     ERC223 tokenFallback function allows to receive ERC223 tokens \n', '     *          properly.\n', '     *\n', '     * @param _from  Address of the sender.\n', '     * @param _value Amount of deposited tokens.\n', '     * @param _data  Token transaction data.\n', '     */\n', '    function tokenFallback(address _from, uint256 _value, bytes _data) external {\n', '        if (_value > 0) emit LogTokenDeposit(_from, _value, _data);\n', '    }\n', '    /*\n', '     * @dev     Retrieves current LOT token balance of an address.\n', '     *\n', '     * @param _address Address whose balance is to be queried.\n', '     */\n', '    function getLOTBalance(address _address) internal view returns (uint) {\n', '        return LOTContract.balanceOf(_address);\n', '    }\n', '    /*\n', '     * @dev     Function returns bool re whether or not address in question \n', '     *          has claimed promo LOT for the week in question.\n', '     *\n', '     * @param _address  Ethereum address to be queried\n', '     * @param _weekNo   Week number to be queried (use 0 for current week)\n', '     */\n', '    function hasRedeemed(address _address, uint _weekNo) public view returns (bool) {\n', '        uint week = _weekNo == 0 ? getWeek() : _weekNo;\n', '        return claimed[_address][week];\n', '    }\n', '    /*\n', '     * @dev     Returns current ticket price from the main Etheraffle\n', '     *          contract\n', '     */\n', '    function getTktPrice() public view returns (uint) {\n', '        return etheraffleContract.tktPrice();\n', '    }\n', '    /*\n', "     * @dev     Function returns current ICO tier's exchange rate of LOT\n", '     *          per ETH.\n', '     */\n', '    function getRate() public view returns (uint) {\n', '        if (now <  ICOSTART) return 110000 * 10 ** 6;\n', '        if (now <= TIER1END) return 100000 * 10 ** 6;\n', '        if (now <= TIER2END) return 90000  * 10 ** 6;\n', '        if (now <= TIER3END) return 80000  * 10 ** 6;\n', '        else return 0;\n', '    }\n', '    /*\n', '     * @dev     Returns number of promotional LOT earnt as calculated \n', '     *          based on number of entries, current ICO exchange rate\n', '     *          and the current Etheraffle ticket price. \n', '     */\n', '    function getPromoLOTEarnt(uint _entries) public view returns (uint) {\n', '        return (_entries * getRate() * getTktPrice()) / (1 * 10 ** 18);\n', '    }\n', '    /*\n', '     * @dev     Allows contract addresses to be changed in the event of \n', '     *          future contract upgrades.\n', '     *\n', '     * @param _LOT      Address of the LOT token contract\n', '     * @param _ER       Address of the Etheraffle contract\n', '     */\n', '    function updateAddresses(address _LOT, address _ER) external onlyEtheraffle {\n', '        LOTContract        = LOTInterface(_LOT);\n', '        etheraffleContract = EtheraffleInterface(_ER);\n', '    }\n', '    /*\n', '     * @dev     Scuttles contract, sending any remaining LOT tokens back \n', '     *          to the Etheraffle multisig (by whom it is only callable)\n', '     */\n', '    function scuttle() external onlyEtheraffle {\n', '        LOTContract.transfer(ETHERAFFLE, LOTContract.balanceOf(this));\n', '        selfdestruct(ETHERAFFLE);\n', '    }\n', '}']
