['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', 'contract Owned {\n', '    /**\n', '     * Contract owner address\n', '     */\n', '    address public owner;\n', '\n', '    /**\n', '     * @dev Delegate contract to another person\n', '     * @param _owner New owner address\n', '     */\n', '    function setOwner(address _owner) onlyOwner\n', '    { owner = _owner; }\n', '\n', '    /**\n', '     * @dev Owner check modifier\n', '     */\n', '    modifier onlyOwner { if (msg.sender != owner) throw; _; }\n', '}\n', '\n', '\n', 'contract RusgasCrowdsale is Owned {\n', '    using SafeMath for uint;\n', '\n', '    event Print(string _name, uint _value);\n', '\n', '    uint public ETHUSD = 50000; //in cent\n', '    address manager;\n', '    address public multisig;\n', '    address public addressOfERC20Tocken;\n', '    ERC20 public token;\n', '\n', '    uint public startICO = 1522195200;\n', '    uint public endICO = 1528847999;\n', '    \n', '    uint public phase1Price = 166666666;\n', '    uint public phase2Price = 125000000;\n', '    uint public phase3Price = 100000000;\n', '    uint public phase4Price = 83333333;\n', '    uint public phase5Price = 62500000;\n', '    uint public phase6Price = 55555555;\n', '    uint public phase7Price = 5000000;\n', '    uint public phase8Price = 4000000;\n', '    uint public phase9Price = 3000000;\n', '\n', '\n', '    function RusgasCrowdsale(){//(address _addressOfERC20Tocken){\n', '        owner = msg.sender;\n', '        manager = msg.sender;\n', '        multisig = msg.sender;\n', '        //token = ERC20(addressOfERC20Tocken);\n', '        //token = ERC20(_addressOfERC20Tocken);\n', '    }\n', '\n', '    function tokenBalance() constant returns (uint256) {\n', '        return token.balanceOf(address(this));\n', '    }\n', '\n', '    /* The token address is set when the contract is deployed */\n', '    function setAddressOfERC20Tocken(address _addressOfERC20Tocken) onlyOwner {\n', '        addressOfERC20Tocken = _addressOfERC20Tocken;\n', '        token = ERC20(addressOfERC20Tocken);\n', '\n', '    }\n', '    /* ETH/USD price */\n', '        function setETHUSD( uint256 _newPrice ) onlyOwner {\n', '        require(msg.sender == manager);\n', '        ETHUSD = _newPrice;\n', '    }\n', '\n', '    function transferToken(address _to, uint _value) onlyOwner returns (bool) {\n', '        return token.transfer(_to, _value);\n', '    }\n', '\n', '    function() payable {\n', '        doPurchase();\n', '    }\n', '\n', '    function doPurchase() payable {\n', '        require(now >= startICO && now < endICO);\n', '\n', '        require(msg.value > 0);\n', '\n', '        uint sum = msg.value;\n', '\n', '        uint tokensAmount;\n', '\n', '        if(now < startICO + (21 days)) {\n', '            tokensAmount = sum.mul(ETHUSD).mul(phase1Price).div(1000000000000000000);//.mul(token.decimals);\n', '        } else if(now > startICO + (21 days) && now < startICO + (28 days)) {\n', '            tokensAmount = sum.mul(ETHUSD).mul(phase2Price).div(1000000000000000000);//.mul(token.decimals);\n', '        } else if(now > startICO + (28 days) && now < startICO + (35 days)) {\n', '            tokensAmount = sum.mul(ETHUSD).mul(phase3Price).div(1000000000000000000);//.mul(token.decimals);\n', '        }else if(now > startICO + (35 days) && now < startICO + (42 days)) {\n', '            tokensAmount = sum.mul(ETHUSD).mul(phase4Price).div(1000000000000000000);//.mul(token.decimals);\n', '        }else if(now > startICO + (42 days) && now < startICO + (49 days)) {\n', '            tokensAmount = sum.mul(ETHUSD).mul(phase5Price).div(1000000000000000000);//.mul(token.decimals);\n', '        }else if(now > startICO + (49 days) && now < startICO + (56 days)) {\n', '            tokensAmount = sum.mul(ETHUSD).mul(phase6Price).div(1000000000000000000);//.mul(token.decimals);\n', '        }else if(now > startICO + (56 days) && now < startICO + (63 days)) {\n', '            tokensAmount = sum.mul(ETHUSD).mul(phase7Price).div(1000000000000000000);//.mul(token.decimals);\n', '        }else if(now > startICO + (63 days) && now < startICO + (70 days)) {\n', '            tokensAmount = sum.mul(ETHUSD).mul(phase8Price).div(1000000000000000000);//.mul(token.decimals);\n', '        }\n', '        else\n', '        {\n', '            tokensAmount = sum.mul(ETHUSD).mul(phase9Price).div(1000000000000000000);\n', '        }\n', '\n', '        if(tokenBalance() > tokensAmount){\n', '            require(token.transfer(msg.sender, tokensAmount));\n', '            multisig.transfer(msg.value);\n', '        } else {\n', '            manager.transfer(msg.value);\n', '        }\n', '    }\n', '}']