['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyOwner whenNotPaused {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyOwner whenPaused {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', 'contract RCPreorder is Pausable {\n', '    uint8 constant WEEK1_PERCENT_AMOUNT = 30;\n', '    uint8 constant WEEK2_PERCENT_AMOUNT = 60;\n', '    uint8 constant WEEK3_PERCENT_AMOUNT = 80;\n', '    uint32 constant WEEK1_DURATION = 1 weeks;\n', '    uint32 constant WEEK2_DURATION = 2 weeks;\n', '    uint32 constant WEEK3_DURATION = 3 weeks;\n', '    uint32 constant SECONDS_PER_BLOCK = 15;\n', '\n', '    event PackPurchased(address indexed user, uint8 indexed packId, uint256 price);\n', '\n', '    struct Purchase {\n', '        uint8 packId;\n', '        address user;\n', '        uint64 commit;\n', '    }\n', '\n', '    Purchase[] public purchases;\n', '\n', '    mapping (uint8 => uint256) public prices;\n', '    mapping (uint8 => uint256) public leftCount;\n', '\n', '    uint256 public startBlock;\n', '\n', '    constructor() public {\n', '        paused = true;\n', '\n', '        // The creator of the contract is the initial owner\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function purchase(uint8 _packId) external payable whenNotPaused {\n', '        require(_packIsAvialable(_packId));\n', '        require(_isRunning());\n', '\n', '        uint256 currentPrice = _computeCurrentPrice(prices[_packId]);\n', '        // Check current price of pack\n', '        require(msg.value >= currentPrice);\n', '\n', '        Purchase memory p = Purchase({\n', '            user: msg.sender,\n', '            packId: _packId,\n', '            commit: uint64(block.number)\n', '        });\n', '\n', '        purchases.push(p);\n', '        leftCount[_packId]--;\n', '\n', '        emit PackPurchased(msg.sender, _packId, currentPrice);\n', '    }\n', '\n', '    function getPackPrice(uint8 _packId) external view returns (uint256) {\n', '        return _computeCurrentPrice(prices[_packId]);\n', '    }\n', '\n', '    function getPurchaseCount() external view returns (uint) {\n', '        return purchases.length;\n', '    }\n', '\n', '    function run() external onlyOwner {\n', '        startBlock = block.number;\n', '        unpause();\n', '    }\n', '\n', '    function addPack(uint8 _id, uint256 _price, uint256 _count) external onlyOwner {\n', '        prices[_id] = _price;\n', '        leftCount[_id] = _count;\n', '    }\n', '\n', '    function withdraw() external onlyOwner {\n', '        address(msg.sender).transfer(address(this).balance);\n', '    }\n', '\n', '    function unpause() public onlyOwner whenPaused {\n', '        require(startBlock > 0);\n', '\n', '        // Actually unpause the contract.\n', '        super.unpause();\n', '    }\n', '\n', '    function _isRunning() internal view returns (bool) {\n', '        uint diff = block.number - startBlock;\n', '        return startBlock > 0 && diff < uint(WEEK3_DURATION / SECONDS_PER_BLOCK);\n', '    }\n', '\n', '    function _packIsAvialable(uint8 _id) internal view returns (bool) {\n', '        return leftCount[_id] > 0;\n', '    }\n', '\n', '    function _computeCurrentPrice(\n', '        uint256 _basePrice\n', '    )\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        uint diff = block.number - startBlock;\n', '\n', '        if (diff < uint(WEEK1_DURATION / SECONDS_PER_BLOCK)) {\n', '            // Week 1 price\n', '            return _basePrice * WEEK1_PERCENT_AMOUNT / 100;\n', '        } else if (diff < uint(WEEK2_DURATION / SECONDS_PER_BLOCK)) {\n', '            // Week 2 price\n', '            return _basePrice * WEEK2_PERCENT_AMOUNT / 100;\n', '        } else if (diff < uint(WEEK3_DURATION / SECONDS_PER_BLOCK)) {\n', '            // Week 3 price\n', '            return _basePrice * WEEK3_PERCENT_AMOUNT / 100;\n', '        }\n', '\n', '        return _basePrice;\n', '    }\n', '}']