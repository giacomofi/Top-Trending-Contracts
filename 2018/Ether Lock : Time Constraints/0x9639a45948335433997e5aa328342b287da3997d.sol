['pragma solidity ^0.4.14;\n', '\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Currency contract\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// NRB_Users\n', '// ----------------------------------------------------------------------------\n', 'contract NRB_Users {\n', '    function init(address _main, address _flc) public;\n', '    function registerUserOnToken(address _token, address _user, uint _value, uint _flc, string _json) public returns (uint);\n', '    function getUserIndexOnEther(address _user) constant public returns (uint);\n', '    function getUserIndexOnToken(address _token, address _user) constant public returns (uint);\n', '    function getUserLengthOnEther() constant public returns (uint);\n', '    function getUserLengthOnToken(address _token) constant public returns (uint);\n', '    function getUserNumbersOnToken(address _token, uint _index) constant public returns (uint, uint, uint, uint, address);\n', '    function getUserTotalPaid(address _user, address _token) constant public returns (uint);\n', '    function getUserTotalCredit(address _user, address _token) constant public returns (uint);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// NRB_Tokens contract\n', '// ----------------------------------------------------------------------------\n', 'contract NRB_Tokens {\n', '    function init(address _main, address _flc) public;\n', '    function getTokenListLength() constant public returns (uint);\n', '    function getTokenAddressByIndex(uint _index) constant public returns (address);\n', '    function isTokenRegistered(address _token) constant public returns (bool);\n', '    function registerToken(address _token, string _name, string _symbol, uint _decimals) public;\n', '    function registerTokenPayment(address _token, uint _value) public;\n', '    function sendFLC(address user, address token, uint totalpaid) public returns (uint);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// contract WhiteListAccess\n', '// ----------------------------------------------------------------------------\n', 'contract WhiteListAccess {\n', '    \n', '    function WhiteListAccess() public {\n', '        owner = msg.sender;\n', '        whitelist[owner] = true;\n', '        whitelist[address(this)] = true;\n', '    }\n', '    \n', '    address public owner;\n', '    mapping (address => bool) whitelist;\n', '\n', '    modifier onlyBy(address who) { require(msg.sender == who); _; }\n', '    modifier onlyOwner {require(msg.sender == owner); _;}\n', '    modifier onlyWhitelisted {require(whitelist[msg.sender]); _;}\n', '\n', '    function addToWhiteList(address trusted) public onlyOwner() {\n', '        whitelist[trusted] = true;\n', '    }\n', '\n', '    function removeFromWhiteList(address untrusted) public onlyOwner() {\n', '        whitelist[untrusted] = false;\n', '    }\n', '\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// CNTCommon contract\n', '// ----------------------------------------------------------------------------\n', 'contract NRB_Common is WhiteListAccess {\n', '    string public name;             // contract&#39;s name\n', '    function NRB_Common() public { ETH_address = 0x1; }\n', '\n', '    // Deployment\n', '    address public ETH_address;    // representation of Ether as Token (0x1)\n', '    address public TOKENS_address;  // NRB_Tokens\n', '    address public USERS_address;   // NRB_Users\n', '    address public FLC_address;     // Four Leaf Clover Token\n', '\n', '    // Debug\n', '    event Debug(string, bool);\n', '    event Debug(string, uint);\n', '    event Debug(string, uint, uint);\n', '    event Debug(string, uint, uint, uint);\n', '    event Debug(string, uint, uint, uint, uint);\n', '    event Debug(string, address);\n', '    event Debug(string, address, address);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// NRB_Main (main) contract\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract NRB_Main is NRB_Common {\n', '    mapping(address => uint) raisedAmount;\n', '    bool _init;\n', '\n', '    function NRB_Main() public {\n', '        _init = false;\n', '        name = "NRB_Main";\n', '    }\n', '\n', '    function init(address _tokens, address _users, address _flc) public {\n', '        require(!_init);\n', '        TOKENS_address = _tokens;\n', '        USERS_address = _users;\n', '        FLC_address = _flc;\n', '        NRB_Tokens(TOKENS_address).init(address(this), _flc);\n', '        NRB_Users(USERS_address).init(address(this), _flc);\n', '        _init = true;\n', '    }\n', '\n', '    function isTokenRegistered(address _token) constant public returns (bool) {\n', '        return NRB_Tokens(TOKENS_address).isTokenRegistered(_token);\n', '    }\n', '\n', '    function isInit() constant public returns (bool) {\n', '        return _init;\n', '    }\n', '\n', '    // User Registration ------------------------------------------\n', '    function registerMeOnEther(string _json) payable public {\n', '        return registerMeOnTokenCore(ETH_address, msg.sender, msg.value, _json);\n', '    }\n', '\n', '    function registerMeOnToken(address _token, uint _value, string _json) public {\n', '        return registerMeOnTokenCore(_token, msg.sender, _value, _json);\n', '    }\n', '\n', '    function registerMeOnTokenCore(address _token, address _user, uint _value, string _json) internal {\n', '        require(this.isTokenRegistered(_token));\n', '        raisedAmount[_token] = raisedAmount[_token] + _value;\n', '\n', '        uint _credit = NRB_Users(USERS_address).getUserTotalCredit(_user, _token);\n', '        uint _totalpaid = NRB_Users(USERS_address).getUserTotalPaid(_user, _token) + _value - _credit;\n', '        uint flc = NRB_Tokens(TOKENS_address).sendFLC(_user, _token, _totalpaid);\n', '\n', '        NRB_Users(USERS_address).registerUserOnToken(_token, _user, _value, flc,_json);\n', '        NRB_Tokens(TOKENS_address).registerTokenPayment(_token,_value);\n', '\n', '        withdrawalFrom(_token, _user, _value);\n', '    }\n', '\n', '    function getRaisedAmountOnEther() constant public returns (uint) {\n', '        return this.getRaisedAmountOnToken(ETH_address);\n', '    }\n', '\n', '    function getRaisedAmountOnToken(address _token) constant public returns (uint) {\n', '        return raisedAmount[_token];\n', '    }\n', '\n', '    function getUserIndexOnEther(address _user) constant public returns (uint) {\n', '        return NRB_Users(USERS_address).getUserIndexOnEther(_user);\n', '    }\n', '\n', '    function getUserIndexOnToken(address _token, address _user) constant public returns (uint) {\n', '        return NRB_Users(USERS_address).getUserIndexOnToken(_token, _user);\n', '    }\n', '\n', '    function getUserLengthOnEther() constant public returns (uint) {\n', '        return NRB_Users(USERS_address).getUserLengthOnEther();\n', '    }\n', '\n', '    function getUserLengthOnToken(address _token) constant public returns (uint) {\n', '        return NRB_Users(USERS_address).getUserLengthOnToken(_token);\n', '    }\n', '\n', '    function getUserNumbersOnEther(uint _index) constant public returns (uint, uint, uint, uint, uint) {\n', '        return getUserNumbersOnToken(ETH_address, _index);\n', '    }\n', '\n', '    function getUserNumbersOnToken(address _token, uint _index) constant public returns (uint, uint, uint, uint, uint) {\n', '        address _user;\n', '        uint _time;\n', '        uint _userid;\n', '        uint _userindex;\n', '        uint _paid;\n', '        (_time, _userid, _userindex, _paid, _user) = NRB_Users(USERS_address).getUserNumbersOnToken(_token, _index);\n', '        uint _balance = _paid * 10;\n', '        uint _userbalance = getUserBalanceOnToken(_token, _user);\n', '        if (_userbalance < _balance) {\n', '            _balance = _userbalance;\n', '        }\n', '        return (_time, _balance, _paid, _userid, _userindex);\n', '    }\n', '\n', '\n', '    function getUserBalanceOnEther(address _user) constant public returns (uint) {\n', '        return this.getUserBalanceOnToken(ETH_address, _user);\n', '    }\n', '\n', '    function getUserBalanceOnToken(address _token, address _user) constant public returns (uint) {\n', '        if (_token == ETH_address) {\n', '            return _user.balance;\n', '        } else {\n', '            return ERC20Interface(_token).balanceOf(_user);\n', '        }\n', '    }\n', '    \n', '    function withdrawalFrom(address _token, address _user, uint _value) public {\n', '        if (_token != ETH_address) {\n', '            ERC20Interface(_token).transferFrom(_user, owner, _value);\n', '        } else {\n', '            owner.transfer(this.balance);\n', '        }\n', '    }\n', '\n', '    // recover tokens sent accidentally\n', '    function _withdrawal(address _token) public {\n', '        uint _balance =  ERC20Interface(_token).balanceOf(address(this));\n', '        if (_balance > 0) {\n', '            ERC20Interface(_token).transfer(owner, _balance);\n', '        }\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.14;\n', '\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Currency contract\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// NRB_Users\n', '// ----------------------------------------------------------------------------\n', 'contract NRB_Users {\n', '    function init(address _main, address _flc) public;\n', '    function registerUserOnToken(address _token, address _user, uint _value, uint _flc, string _json) public returns (uint);\n', '    function getUserIndexOnEther(address _user) constant public returns (uint);\n', '    function getUserIndexOnToken(address _token, address _user) constant public returns (uint);\n', '    function getUserLengthOnEther() constant public returns (uint);\n', '    function getUserLengthOnToken(address _token) constant public returns (uint);\n', '    function getUserNumbersOnToken(address _token, uint _index) constant public returns (uint, uint, uint, uint, address);\n', '    function getUserTotalPaid(address _user, address _token) constant public returns (uint);\n', '    function getUserTotalCredit(address _user, address _token) constant public returns (uint);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// NRB_Tokens contract\n', '// ----------------------------------------------------------------------------\n', 'contract NRB_Tokens {\n', '    function init(address _main, address _flc) public;\n', '    function getTokenListLength() constant public returns (uint);\n', '    function getTokenAddressByIndex(uint _index) constant public returns (address);\n', '    function isTokenRegistered(address _token) constant public returns (bool);\n', '    function registerToken(address _token, string _name, string _symbol, uint _decimals) public;\n', '    function registerTokenPayment(address _token, uint _value) public;\n', '    function sendFLC(address user, address token, uint totalpaid) public returns (uint);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// contract WhiteListAccess\n', '// ----------------------------------------------------------------------------\n', 'contract WhiteListAccess {\n', '    \n', '    function WhiteListAccess() public {\n', '        owner = msg.sender;\n', '        whitelist[owner] = true;\n', '        whitelist[address(this)] = true;\n', '    }\n', '    \n', '    address public owner;\n', '    mapping (address => bool) whitelist;\n', '\n', '    modifier onlyBy(address who) { require(msg.sender == who); _; }\n', '    modifier onlyOwner {require(msg.sender == owner); _;}\n', '    modifier onlyWhitelisted {require(whitelist[msg.sender]); _;}\n', '\n', '    function addToWhiteList(address trusted) public onlyOwner() {\n', '        whitelist[trusted] = true;\n', '    }\n', '\n', '    function removeFromWhiteList(address untrusted) public onlyOwner() {\n', '        whitelist[untrusted] = false;\n', '    }\n', '\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// CNTCommon contract\n', '// ----------------------------------------------------------------------------\n', 'contract NRB_Common is WhiteListAccess {\n', "    string public name;             // contract's name\n", '    function NRB_Common() public { ETH_address = 0x1; }\n', '\n', '    // Deployment\n', '    address public ETH_address;    // representation of Ether as Token (0x1)\n', '    address public TOKENS_address;  // NRB_Tokens\n', '    address public USERS_address;   // NRB_Users\n', '    address public FLC_address;     // Four Leaf Clover Token\n', '\n', '    // Debug\n', '    event Debug(string, bool);\n', '    event Debug(string, uint);\n', '    event Debug(string, uint, uint);\n', '    event Debug(string, uint, uint, uint);\n', '    event Debug(string, uint, uint, uint, uint);\n', '    event Debug(string, address);\n', '    event Debug(string, address, address);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// NRB_Main (main) contract\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract NRB_Main is NRB_Common {\n', '    mapping(address => uint) raisedAmount;\n', '    bool _init;\n', '\n', '    function NRB_Main() public {\n', '        _init = false;\n', '        name = "NRB_Main";\n', '    }\n', '\n', '    function init(address _tokens, address _users, address _flc) public {\n', '        require(!_init);\n', '        TOKENS_address = _tokens;\n', '        USERS_address = _users;\n', '        FLC_address = _flc;\n', '        NRB_Tokens(TOKENS_address).init(address(this), _flc);\n', '        NRB_Users(USERS_address).init(address(this), _flc);\n', '        _init = true;\n', '    }\n', '\n', '    function isTokenRegistered(address _token) constant public returns (bool) {\n', '        return NRB_Tokens(TOKENS_address).isTokenRegistered(_token);\n', '    }\n', '\n', '    function isInit() constant public returns (bool) {\n', '        return _init;\n', '    }\n', '\n', '    // User Registration ------------------------------------------\n', '    function registerMeOnEther(string _json) payable public {\n', '        return registerMeOnTokenCore(ETH_address, msg.sender, msg.value, _json);\n', '    }\n', '\n', '    function registerMeOnToken(address _token, uint _value, string _json) public {\n', '        return registerMeOnTokenCore(_token, msg.sender, _value, _json);\n', '    }\n', '\n', '    function registerMeOnTokenCore(address _token, address _user, uint _value, string _json) internal {\n', '        require(this.isTokenRegistered(_token));\n', '        raisedAmount[_token] = raisedAmount[_token] + _value;\n', '\n', '        uint _credit = NRB_Users(USERS_address).getUserTotalCredit(_user, _token);\n', '        uint _totalpaid = NRB_Users(USERS_address).getUserTotalPaid(_user, _token) + _value - _credit;\n', '        uint flc = NRB_Tokens(TOKENS_address).sendFLC(_user, _token, _totalpaid);\n', '\n', '        NRB_Users(USERS_address).registerUserOnToken(_token, _user, _value, flc,_json);\n', '        NRB_Tokens(TOKENS_address).registerTokenPayment(_token,_value);\n', '\n', '        withdrawalFrom(_token, _user, _value);\n', '    }\n', '\n', '    function getRaisedAmountOnEther() constant public returns (uint) {\n', '        return this.getRaisedAmountOnToken(ETH_address);\n', '    }\n', '\n', '    function getRaisedAmountOnToken(address _token) constant public returns (uint) {\n', '        return raisedAmount[_token];\n', '    }\n', '\n', '    function getUserIndexOnEther(address _user) constant public returns (uint) {\n', '        return NRB_Users(USERS_address).getUserIndexOnEther(_user);\n', '    }\n', '\n', '    function getUserIndexOnToken(address _token, address _user) constant public returns (uint) {\n', '        return NRB_Users(USERS_address).getUserIndexOnToken(_token, _user);\n', '    }\n', '\n', '    function getUserLengthOnEther() constant public returns (uint) {\n', '        return NRB_Users(USERS_address).getUserLengthOnEther();\n', '    }\n', '\n', '    function getUserLengthOnToken(address _token) constant public returns (uint) {\n', '        return NRB_Users(USERS_address).getUserLengthOnToken(_token);\n', '    }\n', '\n', '    function getUserNumbersOnEther(uint _index) constant public returns (uint, uint, uint, uint, uint) {\n', '        return getUserNumbersOnToken(ETH_address, _index);\n', '    }\n', '\n', '    function getUserNumbersOnToken(address _token, uint _index) constant public returns (uint, uint, uint, uint, uint) {\n', '        address _user;\n', '        uint _time;\n', '        uint _userid;\n', '        uint _userindex;\n', '        uint _paid;\n', '        (_time, _userid, _userindex, _paid, _user) = NRB_Users(USERS_address).getUserNumbersOnToken(_token, _index);\n', '        uint _balance = _paid * 10;\n', '        uint _userbalance = getUserBalanceOnToken(_token, _user);\n', '        if (_userbalance < _balance) {\n', '            _balance = _userbalance;\n', '        }\n', '        return (_time, _balance, _paid, _userid, _userindex);\n', '    }\n', '\n', '\n', '    function getUserBalanceOnEther(address _user) constant public returns (uint) {\n', '        return this.getUserBalanceOnToken(ETH_address, _user);\n', '    }\n', '\n', '    function getUserBalanceOnToken(address _token, address _user) constant public returns (uint) {\n', '        if (_token == ETH_address) {\n', '            return _user.balance;\n', '        } else {\n', '            return ERC20Interface(_token).balanceOf(_user);\n', '        }\n', '    }\n', '    \n', '    function withdrawalFrom(address _token, address _user, uint _value) public {\n', '        if (_token != ETH_address) {\n', '            ERC20Interface(_token).transferFrom(_user, owner, _value);\n', '        } else {\n', '            owner.transfer(this.balance);\n', '        }\n', '    }\n', '\n', '    // recover tokens sent accidentally\n', '    function _withdrawal(address _token) public {\n', '        uint _balance =  ERC20Interface(_token).balanceOf(address(this));\n', '        if (_balance > 0) {\n', '            ERC20Interface(_token).transfer(owner, _balance);\n', '        }\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '}']
