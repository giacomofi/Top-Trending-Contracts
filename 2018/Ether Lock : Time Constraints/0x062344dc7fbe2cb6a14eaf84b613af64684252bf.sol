['pragma solidity ^0.4.18;\n', '\n', 'contract TronToken {\n', '\n', '    string   public name ;            //  token name\n', '    string   public symbol ;          //  token symbol\n', '    uint256  public decimals ;        //  token digit\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    uint256 public totalSupply = 0;\n', '    bool public stopped = false;      //  stopflag: true is stoped,false is not stoped\n', '\n', '    uint256 constant valueFounder = 500000000000000000;\n', '    address owner = 0x0;\n', '\n', '    modifier isOwner {\n', '        assert(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier isRunning {\n', '        assert (!stopped);\n', '        _;\n', '    }\n', '\n', '    modifier validAddress {\n', '        assert(0x0 != msg.sender);\n', '        _;\n', '    }\n', '\n', '    function TronToken(address _addressFounder,uint256 _initialSupply, string _tokenName, uint8 _decimalUnits, string _tokenSymbol) public {\n', '        owner = msg.sender;\n', '        if (_addressFounder == 0x0)\n', '            _addressFounder = msg.sender;\n', '        if (_initialSupply == 0) \n', '            _initialSupply = valueFounder;\n', '        totalSupply = _initialSupply;   // Set the totalSupply \n', '        name = _tokenName;              // Set the name for display \n', '        symbol = _tokenSymbol;          // Set the symbol for display \n', '        decimals = _decimalUnits;       // Amount of decimals for display purposes\n', '        balanceOf[_addressFounder] = totalSupply;\n', '        Transfer(0x0, _addressFounder, totalSupply);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public isRunning validAddress returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function stop() public isOwner {\n', '        stopped = true;\n', '    }\n', '\n', '    function start() public isOwner {\n', '        stopped = false;\n', '    }\n', '\n', '    function setName(string _name) public isOwner {\n', '        name = _name;\n', '    }\n', '    \n', '    function setOwner(address _owner) public isOwner {\n', '        owner = _owner;\n', '    }\n', '\n', '    function burn(uint256 _value) public {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[0x0] += _value;\n', '        Transfer(msg.sender, 0x0, _value);\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'contract TronToken {\n', '\n', '    string   public name ;            //  token name\n', '    string   public symbol ;          //  token symbol\n', '    uint256  public decimals ;        //  token digit\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    uint256 public totalSupply = 0;\n', '    bool public stopped = false;      //  stopflag: true is stoped,false is not stoped\n', '\n', '    uint256 constant valueFounder = 500000000000000000;\n', '    address owner = 0x0;\n', '\n', '    modifier isOwner {\n', '        assert(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier isRunning {\n', '        assert (!stopped);\n', '        _;\n', '    }\n', '\n', '    modifier validAddress {\n', '        assert(0x0 != msg.sender);\n', '        _;\n', '    }\n', '\n', '    function TronToken(address _addressFounder,uint256 _initialSupply, string _tokenName, uint8 _decimalUnits, string _tokenSymbol) public {\n', '        owner = msg.sender;\n', '        if (_addressFounder == 0x0)\n', '            _addressFounder = msg.sender;\n', '        if (_initialSupply == 0) \n', '            _initialSupply = valueFounder;\n', '        totalSupply = _initialSupply;   // Set the totalSupply \n', '        name = _tokenName;              // Set the name for display \n', '        symbol = _tokenSymbol;          // Set the symbol for display \n', '        decimals = _decimalUnits;       // Amount of decimals for display purposes\n', '        balanceOf[_addressFounder] = totalSupply;\n', '        Transfer(0x0, _addressFounder, totalSupply);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public isRunning validAddress returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function stop() public isOwner {\n', '        stopped = true;\n', '    }\n', '\n', '    function start() public isOwner {\n', '        stopped = false;\n', '    }\n', '\n', '    function setName(string _name) public isOwner {\n', '        name = _name;\n', '    }\n', '    \n', '    function setOwner(address _owner) public isOwner {\n', '        owner = _owner;\n', '    }\n', '\n', '    function burn(uint256 _value) public {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[0x0] += _value;\n', '        Transfer(msg.sender, 0x0, _value);\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '}']
