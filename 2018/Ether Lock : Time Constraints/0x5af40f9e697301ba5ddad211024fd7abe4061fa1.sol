['pragma solidity 0.4.23;\n', '\n', '/**\n', ' * @title SafeMath by OpenZepelin\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = 0x3c390e7f986273df9623d2B27Ae8606F10766B41;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0));\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) constant public returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) constant public returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title PoSTokenStandard\n', ' * @dev the interface of PoSTokenStandard\n', ' */\n', 'contract PoSTokenStandard {\n', '    uint256 public stakeStartTime; //when staking start to count\n', '    uint256 public stakeMinAge; //minimum valid staking time\n', '    uint256 public stakeMaxAge; //maximum valid staking time\n', '    function mint() public returns (bool);\n', '    function coinAge() constant public returns (uint256);\n', '    function annualInterest() constant public returns (uint256);\n', '    event Mint(address indexed _address, uint _reward);\n', '}\n', '\n', '\n', 'contract PallyToken is ERC20,PoSTokenStandard,Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    string public name = "PallyToken ";\n', '    string public symbol = "PTK";\n', '    uint public decimals = 8;\n', '\n', '    uint public chainStartTime; //chain start time\n', '    uint public stakeStartTime; //stake start time\n', '    uint public stakeMinAge = 3 days; // minimum age for coin age: 3 Days\n', '    uint public stakeMaxAge = 30 days; // stake age of full weight: 30 Days\n', '    uint public baseIntCalc = 10**uint256(decimals - 1); // default 10% annual interest\n', '\n', '    uint public totalSupply; //actual supply\n', '    uint public maxTotalSupply; //maximum supply ever \n', '    uint public totalInitialSupply; //initial supply on deployment\n', '\n', '    //struct to define stake stacks\n', '    struct transferInStruct{\n', '    uint128 amount;\n', '    uint64 time;\n', '    }\n', '\n', '    //HardCodedAddresses\n', '    address GamificationRewards = 0xC9dFe28843F73669cb05af6a1Da2288F2F244D22;\n', '    address AirdropDistribution = 0x92A77dA8bc0a0Beb8e1586D180a251b48be405F2;\n', '    address BlockchainDev = 0x3d56020f8991db8A2D840AaD511c6F3Bec8E833c;\n', '    address MarketingAllocation = 0x8142285EA1cf4b6aeC5532367A3dc864Ccf31B1E;\n', '    address BountyPayments = 0x50c2BEc52d0C97ae1eF6ACB7108caD06dd0701bB;\n', '    address PallyFoundation = 0xc5E6401ceD169e411A10b5f11A0578F9C8F0f781;\n', '    address TeamSalaries = 0x47a5750803042AeBE96533A0BEb77C1286B58282;\n', '    //Mappings\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '    mapping(address => transferInStruct[]) transferIns; //mapping to stake stacks\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '\n', '    //modifier to limit the minting to not exceed maximum supply limit\n', '    modifier canPoSMint() {\n', '        require(totalSupply < maxTotalSupply);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '\n', '        uint64 _now = uint64(now);\n', '        \n', '        maxTotalSupply = 7073844 * 10 ** uint256(decimals); // 7.073.844 maximum supply\n', '        totalInitialSupply = 300000 * 10 ** uint256(decimals); // 300k initial supply\n', '        totalSupply = totalInitialSupply;\n', '\n', '        chainStartTime = now; //when contract is deployed\n', '        stakeStartTime = now;\n', '        \n', '        balances[GamificationRewards] = 200000 * 10 ** uint256(decimals);//200k        \n', '        transferIns[GamificationRewards].push(transferInStruct(uint128(balances[GamificationRewards]),_now));\n', '\n', '        balances[AirdropDistribution] = 60000 * 10 ** uint256(decimals); //60k\n', '        transferIns[AirdropDistribution].push(transferInStruct(uint128(balances[AirdropDistribution]),_now));\n', '\n', '        balances[BlockchainDev] =  10000 * 10 ** uint256(decimals);//10k\n', '        transferIns[BlockchainDev].push(transferInStruct(uint128(balances[BlockchainDev]),_now));\n', '\n', '        balances[MarketingAllocation] =  10000 * 10 ** uint256(decimals);//10k\n', '        transferIns[MarketingAllocation].push(transferInStruct(uint128(balances[MarketingAllocation]),_now));\n', '\n', '        balances[BountyPayments] =  5000 * 10 ** uint256(decimals);//5k\n', '        transferIns[BountyPayments].push(transferInStruct(uint128(balances[BountyPayments]),_now));\n', '\n', '        balances[PallyFoundation] =  5000 * 10 ** uint256(decimals);//5k\n', '        transferIns[PallyFoundation].push(transferInStruct(uint128(balances[PallyFoundation]),_now));\n', '\n', '        balances[TeamSalaries] =  10000 * 10 ** uint256(decimals);//10k\n', '        transferIns[TeamSalaries].push(transferInStruct(uint128(balances[TeamSalaries]),_now));\n', '\n', '        //initial logs\n', '        emit Transfer(address(0), GamificationRewards, balances[GamificationRewards]);\n', '        emit Transfer(address(0), AirdropDistribution, balances[AirdropDistribution]);\n', '        emit Transfer(address(0), BlockchainDev, balances[BlockchainDev]);\n', '        emit Transfer(address(0), MarketingAllocation, balances[MarketingAllocation]); \n', '        emit Transfer(address(0), BountyPayments, balances[BountyPayments]);\n', '        emit Transfer(address(0), PallyFoundation, balances[PallyFoundation]);\n', '        emit Transfer(address(0), TeamSalaries, balances[TeamSalaries]);\n', '            }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '\n', '        if(msg.sender == _to || _to == address(0)) return mint(); //if self/zero transfer, trigger stake claim\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        \n', '        emit Transfer(msg.sender, _to, _value);\n', '        \n', '        //if there is any stake on stack, delete the stack\n', '        if(transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\n', '        //take actual time\n', '        uint64 _now = uint64(now);\n', '        //reset counter for sender\n', '        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),_now));\n', '        //add counter to stack for receiver\n', '        transferIns[_to].push(transferInStruct(uint128(_value),_now));\n', '        \n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0)); //empty/zero address send is not allowed\n', '        //check\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        //if there is any stake on stack, delete the stack\n', '        if(transferIns[_from].length > 0) delete transferIns[_from];\n', '        //take actual time\n', '        uint64 _now = uint64(now);\n', '        //reset counter for sender\n', '        transferIns[_from].push(transferInStruct(uint128(balances[_from]),_now));\n', '         //add counter to stack for receiver\n', '        transferIns[_to].push(transferInStruct(uint128(_value),_now));\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0)); //exploit mitigation\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    //funtion to claim stake reward\n', '    function mint() canPoSMint public returns (bool) {        \n', '        if(balances[msg.sender] <= 0) return false;//no balance = no stake\n', '        if(transferIns[msg.sender].length <= 0) return false;//no stake = no reward\n', '\n', '        uint reward = getProofOfStakeReward(msg.sender);\n', '\n', '        if(reward <= 0) return false;\n', '\n', '        totalSupply = totalSupply.add(reward); //supply is increased\n', '        balances[msg.sender] = balances[msg.sender].add(reward); //assigned to holder\n', '        delete transferIns[msg.sender]; //stake stack get reset\n', '        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),uint64(now)));\n', '        //Logs\n', '        emit Mint(msg.sender, reward);\n', '        return true;\n', '    }\n', '\n', '    function coinAge() constant public returns (uint myCoinAge) {\n', '        return myCoinAge = getCoinAge(msg.sender,now);\n', '    }\n', '\n', '    function annualInterest() constant public returns(uint interest) {\n', '        uint _now = now;\n', '        interest = 0; // After 10 years no PoS\n', '        // Due to the high interest rate for the first year, compounding should be taken into account.\n', '        // Effective annual interest rate = (1 + (nominal rate / number of compounding periods)) ^ (number of compounding periods) - 1\n', '        if((_now.sub(stakeStartTime)).div(1 years) == 0) {\n', '            // 1st year effective annual interest rate is 900% when we select the stakeMaxAge (30 days) as the compounding period.\n', '            interest = (2573 * baseIntCalc).div(100);\n', '        } else if((_now.sub(stakeStartTime)).div(1 years) <= 10){\n', '            // 2nd to 10th year effective annual interest rate is 10%\n', '            interest = (97 * baseIntCalc).div(100);\n', '        }\n', '    }\n', '\n', '    function getProofOfStakeReward(address _address) public view returns (uint) {\n', '        require( (now >= stakeStartTime) && (stakeStartTime > 0) );\n', '\n', '        uint _now = now;\n', '        uint _coinAge = getCoinAge(_address, _now);\n', '        if(_coinAge == 0) return 0;\n', '\n', '        uint interest = 0; // After 10 years no PoS\n', '        // Due to the high interest rate for the first year, compounding should be taken into account.\n', '        // Effective annual interest rate = (1 + (nominal rate / number of compounding periods)) ^ (number of compounding periods) - 1\n', '        if((_now.sub(stakeStartTime)).div(1 years) == 0) {\n', '            // 1st year effective annual interest rate is 900% when we select the stakeMaxAge (30 days) as the compounding period.\n', '            interest = (2573 * baseIntCalc).div(100);\n', '        } else if((_now.sub(stakeStartTime)).div(1 years) <= 10){\n', '            // 2nd to 10th year effective annual interest rate is 10%\n', '            interest = (97 * baseIntCalc).div(100);\n', '        }\n', '\n', '        return (_coinAge * interest).div(365 * (10**uint256(decimals)));\n', '    }\n', '\n', '    function getCoinAge(address _address, uint _now) internal view returns (uint _coinAge) {\n', '        if(transferIns[_address].length <= 0) return 0;\n', '\n', '        for (uint i = 0; i < transferIns[_address].length; i++){\n', '            if( _now < uint(transferIns[_address][i].time).add(stakeMinAge) ) continue;\n', '\n', '            uint nCoinSeconds = _now.sub(uint(transferIns[_address][i].time));\n', '            if( nCoinSeconds > stakeMaxAge ) nCoinSeconds = stakeMaxAge;\n', '\n', '            _coinAge = _coinAge.add(uint(transferIns[_address][i].amount) * nCoinSeconds.div(1 days));\n', '        }\n', '    }\n', '\n', '    function ownerBurnToken(uint _value) onlyOwner public {\n', '        require(_value > 0);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        delete transferIns[msg.sender];\n', '        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),uint64(now)));\n', '\n', '        totalSupply = totalSupply.sub(_value);\n', '\n', '        emit Burn(msg.sender, _value);\n', '    }\n', '\n', '    /* Batch token transfer. Used by contract creator to distribute initial tokens to holders */\n', '    function batchTransfer(address[] _recipients, uint[] _values) onlyOwner public returns (bool) {\n', '        require( _recipients.length > 0 && _recipients.length == _values.length);\n', '\n', '        uint total = 0;\n', '        for(uint i = 0; i < _values.length; i++){\n', '            total = total.add(_values[i]);\n', '        }\n', '        require(total <= balances[msg.sender]);\n', '\n', '        uint64 _now = uint64(now);\n', '        for(uint j = 0; j < _recipients.length; j++){\n', '            balances[_recipients[j]] = balances[_recipients[j]].add(_values[j]);\n', '            transferIns[_recipients[j]].push(transferInStruct(uint128(_values[j]),_now));\n', '            emit Transfer(msg.sender, _recipients[j], _values[j]);\n', '        }\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(total);\n', '        if(transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\n', '        if(balances[msg.sender] > 0) transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),_now));\n', '\n', '        return true;\n', '    }\n', '}']