['pragma solidity ^0.4.10;\n', '\n', 'contract SafeMath {\n', '\n', '\n', '    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '\n', '}\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/*  ERC 20 token */\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract SPINToken is StandardToken, SafeMath {\n', '\n', '    string public constant name = "ETHERSPIN";\n', '    string public constant symbol = "SPIN";\n', '    uint256 public constant decimals = 18;\n', '    string public version = "2.0";\n', '\n', '    address public ethFundDeposit;\n', '    address public SPINFundDeposit;\n', '\n', '    bool public isFinalized;\n', '    uint256 public fundingStartBlock;\n', '    uint256 public fundingEndBlock;\n', '    uint256 public constant SPINFund = 2000 * (10**3) * 10**decimals;\n', '\n', '    function tokenRate() constant returns(uint) {\n', '        if (block.number>=fundingStartBlock && block.number<fundingStartBlock+250) return 1300;\n', '        if (block.number>=fundingStartBlock && block.number<fundingStartBlock+33600) return 1000;\n', '        if (block.number>=fundingStartBlock && block.number<fundingStartBlock+67200) return 750;\n', '        if (block.number>=fundingStartBlock && block.number<fundingStartBlock+100800) return 600;\n', '        return 500;\n', '    }\n', '\n', '    // Total Cap is 10M\n', '    uint256 public constant tokenCreationCap =  10 * (10**6) * 10**decimals;\n', '\n', '\n', '    // events\n', '    event CreateSPIN(address indexed _to, uint256 _value);\n', '\n', '    // constructor\n', '    function SPINToken(\n', '        address _ethFundDeposit,\n', '        address _SPINFundDeposit,\n', '        uint256 _fundingStartBlock,\n', '        uint256 _fundingEndBlock)\n', '    {\n', '      isFinalized = false;\n', '      ethFundDeposit = _ethFundDeposit;\n', '      SPINFundDeposit = _SPINFundDeposit;\n', '      fundingStartBlock = _fundingStartBlock;\n', '      fundingEndBlock = _fundingEndBlock;\n', '      totalSupply = SPINFund;\n', '      balances[SPINFundDeposit] = SPINFund;\n', '      CreateSPIN(SPINFundDeposit, SPINFund);\n', '    }\n', '\n', '\n', '    function makeTokens() payable  {\n', '      if (isFinalized) throw;\n', '      if (block.number < fundingStartBlock) throw;\n', '      if (block.number > fundingEndBlock) throw;\n', '      if (msg.value == 0) throw;\n', '\n', '      uint256 tokens = safeMult(msg.value, tokenRate());\n', '\n', '      uint256 checkedSupply = safeAdd(totalSupply, tokens);\n', '\n', '      if (tokenCreationCap < checkedSupply) throw;\n', '\n', '      totalSupply = checkedSupply;\n', '      balances[msg.sender] += tokens;\n', '      CreateSPIN(msg.sender, tokens);\n', '    }\n', '\n', '    function() payable {\n', '        makeTokens();\n', '    }\n', '\n', '    function finalize() external {\n', '      if (isFinalized) throw;\n', '      if (msg.sender != ethFundDeposit) throw;\n', '\n', '      if(block.number <= fundingEndBlock && totalSupply != tokenCreationCap) throw;\n', '\n', '      isFinalized = true;\n', '      if(!ethFundDeposit.send(this.balance)) throw;\n', '    }\n', '\n', '\n', '\n', '}']
['pragma solidity ^0.4.10;\n', '\n', 'contract SafeMath {\n', '\n', '\n', '    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '\n', '}\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/*  ERC 20 token */\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract SPINToken is StandardToken, SafeMath {\n', '\n', '    string public constant name = "ETHERSPIN";\n', '    string public constant symbol = "SPIN";\n', '    uint256 public constant decimals = 18;\n', '    string public version = "2.0";\n', '\n', '    address public ethFundDeposit;\n', '    address public SPINFundDeposit;\n', '\n', '    bool public isFinalized;\n', '    uint256 public fundingStartBlock;\n', '    uint256 public fundingEndBlock;\n', '    uint256 public constant SPINFund = 2000 * (10**3) * 10**decimals;\n', '\n', '    function tokenRate() constant returns(uint) {\n', '        if (block.number>=fundingStartBlock && block.number<fundingStartBlock+250) return 1300;\n', '        if (block.number>=fundingStartBlock && block.number<fundingStartBlock+33600) return 1000;\n', '        if (block.number>=fundingStartBlock && block.number<fundingStartBlock+67200) return 750;\n', '        if (block.number>=fundingStartBlock && block.number<fundingStartBlock+100800) return 600;\n', '        return 500;\n', '    }\n', '\n', '    // Total Cap is 10M\n', '    uint256 public constant tokenCreationCap =  10 * (10**6) * 10**decimals;\n', '\n', '\n', '    // events\n', '    event CreateSPIN(address indexed _to, uint256 _value);\n', '\n', '    // constructor\n', '    function SPINToken(\n', '        address _ethFundDeposit,\n', '        address _SPINFundDeposit,\n', '        uint256 _fundingStartBlock,\n', '        uint256 _fundingEndBlock)\n', '    {\n', '      isFinalized = false;\n', '      ethFundDeposit = _ethFundDeposit;\n', '      SPINFundDeposit = _SPINFundDeposit;\n', '      fundingStartBlock = _fundingStartBlock;\n', '      fundingEndBlock = _fundingEndBlock;\n', '      totalSupply = SPINFund;\n', '      balances[SPINFundDeposit] = SPINFund;\n', '      CreateSPIN(SPINFundDeposit, SPINFund);\n', '    }\n', '\n', '\n', '    function makeTokens() payable  {\n', '      if (isFinalized) throw;\n', '      if (block.number < fundingStartBlock) throw;\n', '      if (block.number > fundingEndBlock) throw;\n', '      if (msg.value == 0) throw;\n', '\n', '      uint256 tokens = safeMult(msg.value, tokenRate());\n', '\n', '      uint256 checkedSupply = safeAdd(totalSupply, tokens);\n', '\n', '      if (tokenCreationCap < checkedSupply) throw;\n', '\n', '      totalSupply = checkedSupply;\n', '      balances[msg.sender] += tokens;\n', '      CreateSPIN(msg.sender, tokens);\n', '    }\n', '\n', '    function() payable {\n', '        makeTokens();\n', '    }\n', '\n', '    function finalize() external {\n', '      if (isFinalized) throw;\n', '      if (msg.sender != ethFundDeposit) throw;\n', '\n', '      if(block.number <= fundingEndBlock && totalSupply != tokenCreationCap) throw;\n', '\n', '      isFinalized = true;\n', '      if(!ethFundDeposit.send(this.balance)) throw;\n', '    }\n', '\n', '\n', '\n', '}']
