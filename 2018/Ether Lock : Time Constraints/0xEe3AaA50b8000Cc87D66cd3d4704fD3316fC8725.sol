['pragma solidity ^0.4.18; // solhint-disable-line\n', '\n', '//http://0xbtcminer.surge.sh/\n', ' \n', 'contract MineFarmer{\n', '    //uint256 EGGS_PER_SHRIMP_PER_SECOND=1;\n', '    uint256 public EGGS_TO_HATCH_1SHRIMP=86400;//for final version should be seconds in a day\n', '    uint256 public STARTING_SHRIMP=300;\n', '    uint256 PSN=10000;\n', '    uint256 PSNH=5000;\n', '    bool public initialized=false;\n', '    address public ceoAddress;\n', '    mapping (address => uint256) public hatcheryShrimp;\n', '    mapping (address => uint256) public claimedEggs;\n', '    mapping (address => uint256) public lastHatch;\n', '    mapping (address => address) public referrals;\n', '    uint256 public marketEggs;\n', '    _0xBitcoinToken Token = _0xBitcoinToken(0xB6eD7644C69416d67B522e20bC294A9a9B405B31);\n', '    address partnerAddress;\n', '    constructor() public{\n', '        ceoAddress=0x85abE8E3bed0d4891ba201Af1e212FE50bb65a26;\n', '        partnerAddress = 0x20C945800de43394F70D789874a4daC9cFA57451;\n', '    }\n', '    function hatchEggs(address ref) public{\n', '        require(initialized);\n', '        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender){\n', '            referrals[msg.sender]=ref;\n', '        }\n', '        uint256 eggsUsed=getMyEggs();\n', '        uint256 newShrimp=SafeMath.div(eggsUsed,EGGS_TO_HATCH_1SHRIMP);\n', '        hatcheryShrimp[msg.sender]=SafeMath.add(hatcheryShrimp[msg.sender],newShrimp);\n', '        claimedEggs[msg.sender]=0;\n', '        lastHatch[msg.sender]=now;\n', '        \n', '        //send referral eggs\n', '        claimedEggs[referrals[msg.sender]]=SafeMath.add(claimedEggs[referrals[msg.sender]],SafeMath.div(eggsUsed,5));\n', '        \n', '        //boost market to nerf shrimp hoarding\n', '        marketEggs=SafeMath.add(marketEggs,SafeMath.div(eggsUsed,10));\n', '    }\n', '    function sellEggs() public{\n', '        require(initialized);\n', '        uint256 hasEggs=getMyEggs();\n', '        uint256 eggValue=calculateEggSell(hasEggs);\n', '        uint256 fee=devFee(eggValue);\n', '        claimedEggs[msg.sender]=0;\n', '        lastHatch[msg.sender]=now;\n', '        marketEggs=SafeMath.add(marketEggs,hasEggs);\n', '        devFeeHandle(fee);\n', '        Token.transfer(msg.sender, SafeMath.sub(eggValue, fee)); \n', '    }\n', '    function buyEggs(uint256 _incoming, address who) internal{\n', '        require(initialized);\n', '        uint256 eggsBought=calculateEggBuy(_incoming,SafeMath.sub(Token.balanceOf(address(this)),_incoming));\n', '        eggsBought=SafeMath.sub(eggsBought,devFee(eggsBought));\n', '        uint256 fee = devFee(_incoming);\n', '        devFeeHandle(fee);\n', '        claimedEggs[who]=SafeMath.add(claimedEggs[who],eggsBought);\n', '    }\n', '    \n', '    function receiveApproval(address receiveFrom, uint256 tkn, address tknaddr, bytes empty){\n', '        require(tknaddr == address(Token) && msg.sender == tknaddr);\n', '        Token.transferFrom(receiveFrom, address(this), tkn);\n', '        buyEggs(tkn, receiveFrom);\n', '    }\n', '    \n', '    //magic trade balancing algorithm\n', '    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\n', '        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n', '        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n', '    }\n', '    function calculateEggSell(uint256 eggs) public view returns(uint256){\n', '        return calculateTrade(eggs,marketEggs,Token.balanceOf(address(this)));\n', '    }\n', '    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\n', '        return calculateTrade(eth,contractBalance,marketEggs);\n', '    }\n', '    function calculateEggBuySimple(uint256 eth) public view returns(uint256){\n', '        return calculateEggBuy(eth,Token.balanceOf(address(this)));\n', '    }\n', '    function devFee(uint256 amount) public view returns(uint256){\n', '        return SafeMath.div(SafeMath.mul(amount,4),100);\n', '    }\n', '    \n', '    function devFeeHandle(uint256 fee) internal{\n', '        Token.transfer(ceoAddress, fee/2);\n', '        Token.transfer(partnerAddress, SafeMath.sub(fee,fee/2));\n', '    }\n', '    function seedMarket(uint256 eggs, uint256 tkn) public{\n', '        require(marketEggs==0);\n', '        if (tkn>0){\n', '            Token.transferFrom(msg.sender, address(this), tkn);\n', '        }\n', '        initialized=true;\n', '        marketEggs=eggs;\n', '    }\n', '    function getFreeShrimp() public{\n', '        require(initialized);\n', '        require(hatcheryShrimp[msg.sender]==0);\n', '        lastHatch[msg.sender]=now;\n', '        hatcheryShrimp[msg.sender]=STARTING_SHRIMP;\n', '    }\n', '    function getBalance() public view returns(uint256){\n', '        return Token.balanceOf(address(this));\n', '    }\n', '    function getMyShrimp() public view returns(uint256){\n', '        return hatcheryShrimp[msg.sender];\n', '    }\n', '    function getMyEggs() public view returns(uint256){\n', '        return SafeMath.add(claimedEggs[msg.sender],getEggsSinceLastHatch(msg.sender));\n', '    }\n', '    function getEggsSinceLastHatch(address adr) public view returns(uint256){\n', '        uint256 secondsPassed=min(EGGS_TO_HATCH_1SHRIMP,SafeMath.sub(now,lastHatch[adr]));\n', '        return SafeMath.mul(secondsPassed,hatcheryShrimp[adr]);\n', '    }\n', '    function min(uint256 a, uint256 b) private pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'library ExtendedMath {\n', '    //return the smaller of the two inputs (a or b)\n', '    function limitLessThan(uint a, uint b) internal pure returns (uint c) {\n', '        if(a > b) return b;\n', '        return a;\n', '    }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and an\n', '// initial fixed supply\n', '// ----------------------------------------------------------------------------\n', 'contract _0xBitcoinToken is ERC20Interface, Owned {\n', '    using SafeMath for uint;\n', '    using ExtendedMath for uint;\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '     uint public latestDifficultyPeriodStarted;\n', "    uint public epochCount;//number of 'blocks' mined\n", '    uint public _BLOCKS_PER_READJUSTMENT = 1024;\n', '    //a little number\n', '    uint public  _MINIMUM_TARGET = 2**16;\n', '      //a big number is easier ; just find a solution that is smaller\n', '    //uint public  _MAXIMUM_TARGET = 2**224;  bitcoin uses 224\n', '    uint public  _MAXIMUM_TARGET = 2**234;\n', '    uint public miningTarget;\n', '    bytes32 public challengeNumber;   //generate a new one when a new reward is minted\n', '    uint public rewardEra;\n', '    uint public maxSupplyForEra;\n', '    address public lastRewardTo;\n', '    uint public lastRewardAmount;\n', '    uint public lastRewardEthBlockNumber;\n', '    bool locked = false;\n', '    mapping(bytes32 => bytes32) solutionForChallenge;\n', '    uint public tokensMinted;\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    function _0xBitcoinToken() public onlyOwner{\n', '        symbol = "0xBTC";\n', '        name = "0xBitcoin Token";\n', '        decimals = 8;\n', '        _totalSupply = 21000000 * 10**uint(decimals);\n', '        if(locked) revert();\n', '        balances[msg.sender] = 2100000 * 10**uint(decimals);\n', '        balances[0x14723a09acff6d2a60dcdf7aa4aff308fddc160c] = 2100000 * 10**uint(decimals);\n', '        locked = true;\n', '        tokensMinted = 0;\n', '        rewardEra = 0;\n', '        maxSupplyForEra = _totalSupply.div(2);\n', '        miningTarget = _MAXIMUM_TARGET;\n', '        latestDifficultyPeriodStarted = block.number;\n', '        _startNewMiningEpoch();\n', '        //The owner gets nothing! You must mine this ERC20 token\n', '        //balances[owner] = _totalSupply;\n', '        //Transfer(address(0), owner, _totalSupply);\n', '    }\n', '        function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success) {\n', "            //the PoW must contain work that includes a recent ethereum block hash (challenge number) and the msg.sender's address to prevent MITM attacks\n", '            bytes32 digest =  keccak256(challengeNumber, msg.sender, nonce );\n', '            //the challenge digest must match the expected\n', '            if (digest != challenge_digest) revert();\n', '            //the digest must be smaller than the target\n', '            if(uint256(digest) > miningTarget) revert();\n', '            //only allow one reward for each challenge\n', '             bytes32 solution = solutionForChallenge[challengeNumber];\n', '             solutionForChallenge[challengeNumber] = digest;\n', '             if(solution != 0x0) revert();  //prevent the same answer from awarding twice\n', '            uint reward_amount = getMiningReward();\n', '            balances[msg.sender] = balances[msg.sender].add(reward_amount);\n', '            tokensMinted = tokensMinted.add(reward_amount);\n', '            //Cannot mint more tokens than there are\n', '            assert(tokensMinted <= maxSupplyForEra);\n', '            //set readonly diagnostics data\n', '            lastRewardTo = msg.sender;\n', '            lastRewardAmount = reward_amount;\n', '            lastRewardEthBlockNumber = block.number;\n', '             _startNewMiningEpoch();\n', '              Mint(msg.sender, reward_amount, epochCount, challengeNumber );\n', '           return true;\n', '        }\n', "    //a new 'block' to be mined\n", '    function _startNewMiningEpoch() internal {\n', '      //if max supply for the era will be exceeded next reward round then enter the new era before that happens\n', '      //40 is the final reward era, almost all tokens minted\n', '      //once the final era is reached, more tokens will not be given out because the assert function\n', '      if( tokensMinted.add(getMiningReward()) > maxSupplyForEra && rewardEra < 39)\n', '      {\n', '        rewardEra = rewardEra + 1;\n', '      }\n', '      //set the next minted supply at which the era will change\n', '      // total supply is 2100000000000000  because of 8 decimal places\n', '      maxSupplyForEra = _totalSupply - _totalSupply.div( 2**(rewardEra + 1));\n', '      epochCount = epochCount.add(1);\n', '      //every so often, readjust difficulty. Dont readjust when deploying\n', '      if(epochCount % _BLOCKS_PER_READJUSTMENT == 0)\n', '      {\n', '        _reAdjustDifficulty();\n', '      }\n', '      //make the latest ethereum block hash a part of the next challenge for PoW to prevent pre-mining future blocks\n', '      //do this last since this is a protection mechanism in the mint() function\n', '      challengeNumber = block.blockhash(block.number - 1);\n', '    }\n', '    //https://en.bitcoin.it/wiki/Difficulty#What_is_the_formula_for_difficulty.3F\n', '    //as of 2017 the bitcoin difficulty was up to 17 zeroes, it was only 8 in the early days\n', '    //readjust the target by 5 percent\n', '    function _reAdjustDifficulty() internal {\n', '        uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\n', '        //assume 360 ethereum blocks per hour\n', "        //we want miners to spend 10 minutes to mine each 'block', about 60 ethereum blocks = one 0xbitcoin epoch\n", '        uint epochsMined = _BLOCKS_PER_READJUSTMENT; //256\n', '        uint targetEthBlocksPerDiffPeriod = epochsMined * 60; //should be 60 times slower than ethereum\n', '        //if there were less eth blocks passed in time than expected\n', '        if( ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod )\n', '        {\n', '          uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div( ethBlocksSinceLastDifficultyPeriod );\n', '          uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\n', '          // If there were 5% more blocks mined than expected then this is 5.  If there were 100% more blocks mined than expected then this is 100.\n', '          //make it harder\n', '          miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));   //by up to 50 %\n', '        }else{\n', '          uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div( targetEthBlocksPerDiffPeriod );\n', '          uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000); //always between 0 and 1000\n', '          //make it easier\n', '          miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));   //by up to 50 %\n', '        }\n', '        latestDifficultyPeriodStarted = block.number;\n', '        if(miningTarget < _MINIMUM_TARGET) //very difficult\n', '        {\n', '          miningTarget = _MINIMUM_TARGET;\n', '        }\n', '        if(miningTarget > _MAXIMUM_TARGET) //very easy\n', '        {\n', '          miningTarget = _MAXIMUM_TARGET;\n', '        }\n', '    }\n', '    //this is a recent ethereum block hash, used to prevent pre-mining future blocks\n', '    function getChallengeNumber() public constant returns (bytes32) {\n', '        return challengeNumber;\n', '    }\n', '    //the number of zeroes the digest of the PoW solution requires.  Auto adjusts\n', '     function getMiningDifficulty() public constant returns (uint) {\n', '        return _MAXIMUM_TARGET.div(miningTarget);\n', '    }\n', '    function getMiningTarget() public constant returns (uint) {\n', '       return miningTarget;\n', '   }\n', '    //21m coins total\n', '    //reward begins at 50 and is cut in half every reward era (as tokens are mined)\n', '    function getMiningReward() public constant returns (uint) {\n', '        //once we get half way thru the coins, only get 25 per block\n', '         //every reward era, the reward amount halves.\n', '         return (50 * 10**uint(decimals) ).div( 2**rewardEra ) ;\n', '    }\n', '    //help debug mining software\n', '    function getMintDigest(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number) public view returns (bytes32 digesttest) {\n', '        bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\n', '        return digest;\n', '      }\n', '        //help debug mining software\n', '      function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns (bool success) {\n', '          bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\n', '          if(uint256(digest) > testTarget) revert();\n', '          return (digest == challenge_digest);\n', '        }\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to `to` account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account\n", '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces\n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    //\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account. The `spender` contract function\n", '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '    // ------------------------------------------------------------------------\n', "    // Don't accept ETH\n", '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        revert();\n', '    }\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']