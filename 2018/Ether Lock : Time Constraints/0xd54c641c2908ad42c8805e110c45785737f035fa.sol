['pragma solidity ^0.4.25;\n', '\n', 'contract EtherwaterTest {\n', '    //Address for promo expences\n', '    address constant private PROMO = 0x014bF153476683dC0A0673325C07EB3342281DC8;\n', '    //Percent for promo expences\n', '    uint constant public PROMO_PERCENT = 6; //6 for advertizing, 1 for techsupport\n', '    //How many percent for your deposit to be multiplied\n', '    uint constant public MULTIPLIER = 119;\n', '\n', '    //The deposit structure holds all the info about the deposit made\n', '    struct Deposit {\n', '        address depositor; //The depositor address\n', '        uint128 deposit;   //The deposit amount\n', '        uint128 expect;    //How much we should pay out (initially it is 121% of deposit)\n', '    }\n', '\n', '    Deposit[] private queue;  //The queue\n', '    uint public currentReceiverIndex = 0; //The index of the first depositor in the queue. The receiver of investments!\n', '\n', '    //This function receives all the deposits\n', '    //stores them and make immediate payouts\n', '    function () public payable {\n', '        if(msg.value > 0){\n', '            require(gasleft() >= 220000, "We require more gas!"); //We need gas to process queue\n', '            require(msg.value <= 13 ether); //Do not allow too big investments to stabilize payouts\n', '\n', '            //Add the investor into the queue. Mark that he expects to receive 121% of deposit back\n', '            queue.push(Deposit(msg.sender, uint128(msg.value), uint128(msg.value*MULTIPLIER/100)));\n', '\n', '            //Send some promo to enable this contract to leave long-long time\n', '            uint promo = msg.value*PROMO_PERCENT/100;\n', '            PROMO.send(promo);\n', '\n', '            //Pay to first investors in line\n', '            pay();\n', '        }\n', '    }\n', '\n', '    //Used to pay to current investors\n', '    //Each new transaction processes 1 - 4+ investors in the head of queue \n', '    //depending on balance and gas left\n', '    function pay() private {\n', '        //Try to send all the money on contract to the first investors in line\n', '        uint128 money = uint128(address(this).balance);\n', '\n', '        //We will do cycle on the queue\n', '        for(uint i=0; i<queue.length; i++){\n', '\n', '            uint idx = currentReceiverIndex + i;  //get the index of the currently first investor\n', '\n', '            Deposit storage dep = queue[idx]; //get the info of the first investor\n', '\n', '            if(money >= dep.expect){  //If we have enough money on the contract to fully pay to investor\n', '                dep.depositor.send(dep.expect); //Send money to him\n', '                money -= dep.expect;            //update money left\n', '\n', '                //this investor is fully paid, so remove him\n', '                delete queue[idx];\n', '            }else{\n', "                //Here we don't have enough money so partially pay to investor\n", '                dep.depositor.send(money); //Send to him everything we have\n', '                dep.expect -= money;       //Update the expected amount\n', '                break;                     //Exit cycle\n', '            }\n', '\n', '            if(gasleft() <= 50000)         //Check the gas left. If it is low, exit the cycle\n', '                break;                     //The next investor will process the line further\n', '        }\n', '\n', '        currentReceiverIndex += i; //Update the index of the current first investor\n', '    }\n', '\n', '    //Get the deposit info by its index\n', '    //You can get deposit index from\n', '    function getSingleDeposit(uint idx) public view returns (address depositor, uint deposit, uint expect){\n', '        Deposit storage dep = queue[idx];\n', '        return (dep.depositor, dep.deposit, dep.expect);\n', '    }\n', '\n', '    //Get the count of deposits of specific investor\n', '    function getDepositsCount(address depositor) public view returns (uint) {\n', '        uint c = 0;\n', '        for(uint i=currentReceiverIndex; i<queue.length; ++i){\n', '            if(queue[i].depositor == depositor)\n', '                c++;\n', '        }\n', '        return c;\n', '    }\n', '\n', '    //Get all deposits (index, deposit, expect) of a specific investor\n', '    function getAllDeposits(address depositor) public view returns (uint[] idxs, uint128[] deposits, uint128[] expects) {\n', '        uint c = getDepositsCount(depositor);\n', '\n', '        idxs = new uint[](c);\n', '        deposits = new uint128[](c);\n', '        expects = new uint128[](c);\n', '\n', '        if(c > 0) {\n', '            uint j = 0;\n', '            for(uint i=currentReceiverIndex; i<queue.length; ++i){\n', '                Deposit storage dep = queue[i];\n', '                if(dep.depositor == depositor){\n', '                    idxs[j] = i;\n', '                    deposits[j] = dep.deposit;\n', '                    expects[j] = dep.expect;\n', '                    j++;\n', '                }\n', '            }\n', '        }\n', '    }\n', '    \n', '    //Get current queue size\n', '    function getQueueLength() public view returns (uint) {\n', '        return queue.length - currentReceiverIndex;\n', '    }\n', '\n', '}']