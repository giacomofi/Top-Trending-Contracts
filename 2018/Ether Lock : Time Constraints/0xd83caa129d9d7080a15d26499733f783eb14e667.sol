['pragma solidity ^0.4.18;\n', '\n', '\n', '// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNK0kxolc:;,,&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;,,;:cloxk0KNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n', '// MMMMMMMMMMMMMMMMMMMMMMMMMMMWN0kdl:,&#39;&#39;&#39;&#39;&#39;,,;;:::::cc:::::;;,,&#39;&#39;&#39;&#39;&#39;;:ldk0NWMMMMMMMMMMMMMMMMMMMMMMMMMMM\n', '// MMMMMMMMMMMMMMMMMMMMMMMWN0xo:,&#39;&#39;&#39;,;:cloodxxkkkkkkkkkkkkkkxxdoolc:;,&#39;&#39;&#39;,:ox0NWMMMMMMMMMMMMMMMMMMMMMMM\n', '// MMMMMMMMMMMMMMMMMMMMWXOdc,&#39;&#39;&#39;;:lodxkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxdoc:;&#39;&#39;&#39;,cdOXWMMMMMMMMMMMMMMMMMMMM\n', '// MMMMMMMMMMMMMMMMMMN0d:,&#39;&#39;,:loxkkkkkkkkkkkkkkkkkkkkkxodkkkkkkkkkkkkkkkkxol:,&#39;&#39;,:d0NMMMMMMMMMMMMMMMMMM\n', '// MMMMMMMMMMMMMMMWXxc,&#39;&#39;,:ldxkkkkkkkkkkkkkkkkkkkkkxl:;cxkkkkkkkkkkkkkkkkkkkxdl:,&#39;&#39;,cxXWMMMMMMMMMMMMMMM\n', '// MMMMMMMMMMMMMWKd:&#39;&#39;&#39;;ldxkkkkkkkkkkkkkkkkkkkkkkxo:&#39;&#39;;dkkkkkkkkkkkkkkkkkkkkkkkxdl;&#39;&#39;&#39;:dKWMMMMMMMMMMMMM\n', '// MMMMMMMMMMMWKd;&#39;&#39;,:oxxkkxxkkxkkxxxxxxxxxkkxkkxl,&#39;&#39;,cxxkkxxxxxxxxxkkkxkkkxkkxkkxxo:,&#39;&#39;;dKWMMMMMMMMMMM\n', '// MMMMMMMMMMXx:&#39;&#39;,:oxxxxxxxxxxxxxxxxxxxxxxxxxxxl,&#39;&#39;,:oxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxo:,&#39;&#39;:xXMMMMMMMMMM\n', '// MMMMMMMMW0c&#39;&#39;&#39;:oxxxxxxxxxxxxxxxxxxxxxxxxxxxxd;&#39;&#39;&#39;;coxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxo:&#39;&#39;&#39;c0WMMMMMMMM\n', '// MMMMMMMXx;&#39;&#39;;ldxxxxxxxxxxxxxxxxxxxxxxxxxxxxxc,&#39;&#39;&#39;;coxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxdl;&#39;&#39;;xXMMMMMMM\n', '// MMMMMMKl,&#39;&#39;:oxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxd:&#39;&#39;&#39;&#39;,:lxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxo:&#39;&#39;,lKMMMMMM\n', '// MMMMW0c&#39;&#39;,cdxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxd:&#39;&#39;&#39;&#39;,;ldxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxdc,&#39;&#39;c0WMMMM\n', '// MMMW0c&#39;&#39;,cdxddddddddddddddddddddddddddddxddo:&#39;&#39;&#39;&#39;&#39;&#39;:dddddddooddxddddddddddddddddddddddddxdl,&#39;&#39;c0WMMM\n', '// MMW0c&#39;&#39;,lddddddddddddddddddddddddddddddddddd:&#39;&#39;&#39;&#39;&#39;&#39;,lddddddoc:lddddddddddddddddddddddddddddl,&#39;&#39;c0MMM\n', '// MMKl&#39;&#39;,cddddddddddddddddddddddddddddddddddddc&#39;&#39;&#39;&#39;&#39;&#39;&#39;:oddddddl,,codddddddddddddddddddddddddddc,&#39;&#39;lKMM\n', '// MNd,&#39;&#39;coddddddddddddddddddddddddddddddddddddc,&#39;&#39;&#39;&#39;&#39;&#39;,cddddddo:&#39;&#39;;codddddddddddddddddddddddddoc&#39;&#39;,dNM\n', '// WO;&#39;&#39;;odddddddddddddddddddddddddddddddddddddl,&#39;&#39;&#39;&#39;&#39;&#39;&#39;;lddddddl,&#39;&#39;&#39;;loddddddddddddddddddddddddo:&#39;&#39;;OW\n', '// Xl&#39;&#39;,codoodddddddddddddddddddddddoddddoollodl;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;;loddodo:&#39;&#39;&#39;&#39;,:odooddddddddddddddoodddool,&#39;&#39;lX\n', '// k;&#39;&#39;:oooooooooooooooooooooooooooooooooo:,cooo;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;,cooooo:&#39;&#39;&#39;&#39;&#39;&#39;;loooooooooooooooooooooooo:&#39;&#39;;k\n', '// o&#39;&#39;,cooooooooooooooooooooooooooooooool;&#39;&#39;:ooo:&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;,:loooc,&#39;&#39;&#39;&#39;&#39;&#39;,:oooooooooooooooooooooooc,&#39;&#39;o\n', '// :&#39;&#39;;loooooooooooooooooooooooooooooooc;&#39;&#39;&#39;:ooo:&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;;cll:&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;;loooooooooooooooooooool;&#39;&#39;:\n', '// ,&#39;&#39;;loooooooooooooooooooooooooooool:,&#39;&#39;&#39;,coooc&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;,,&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;;looooooooooooooooooool;&#39;&#39;;\n', '// &#39;&#39;&#39;:loooooooooooooooooooooooooool:,&#39;&#39;&#39;&#39;&#39;;loooc,&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;;coooooooooooooooooool:&#39;&#39;&#39;\n', '// &#39;&#39;&#39;:loolllllllllllllllllloollllc;&#39;&#39;&#39;&#39;&#39;&#39;,cllllc,&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;;cllollllllllllllolll:&#39;&#39;&#39;\n', '// &#39;&#39;&#39;:lllllllllllllllllllllllllc;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;;lllllc,&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;;lllllllllllllllllll:&#39;&#39;&#39;\n', '// ,&#39;&#39;;lllllllllllllllllllllllc;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;,clllllc,&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;:llllllllllllllllll;&#39;&#39;,\n', '// ;&#39;&#39;;cllllllllllllllllllllc:,&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;:llllll:,&#39;&#39;&#39;&#39;&#39;&#39;,,&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;,:llllllllllllllllc;&#39;&#39;;\n', '// c&#39;&#39;,:lllllllllllllllllll:,&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;,:lllllc;&#39;&#39;&#39;&#39;&#39;&#39;&#39;cc&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;;clllllllllllllll:,&#39;&#39;l\n', '// x,&#39;&#39;;cllllllllllllccllc:,&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;,:cccc;&#39;&#39;&#39;&#39;&#39;&#39;&#39;,oo;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;:clllllllcllcllc;&#39;&#39;,x\n', '// 0:&#39;&#39;,ccccccccccccccccc;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;,,,&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;:dd;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;,ccccccccccccccc,&#39;&#39;:0\n', '// Nd,&#39;&#39;;ccccccccccccccc;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;;oxd;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;:ccccccccccccc;&#39;&#39;,dN\n', '// MKc&#39;&#39;,:ccccccccccccc;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;;:,&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;,;ldxo;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;;cccccccccccc:,&#39;&#39;cKM\n', '// MWO;&#39;&#39;,:ccccccccccc:,&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;;odl;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;,lodddl,&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;;:cccccccccc:,&#39;&#39;;OWM\n', '// MMWx,&#39;&#39;,:cccccccccc;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;;ldddo:,&#39;&#39;&#39;&#39;&#39;&#39;&#39;,:ldddddc&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;,:ccccccccc:,&#39;&#39;,xWMM\n', '// MMMNd,&#39;&#39;,:::c::c:c:,&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;,coooodolc;,,,;:looodddo;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;,:c::::ccc:,&#39;&#39;,dNMMM\n', '// MMMMNd,&#39;&#39;,:::::::::,&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;;loooooooooolloooooooooc,&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;;:::::::::,&#39;&#39;,xNMMMM\n', '// MMMMMNx;&#39;&#39;,;:::::::,&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;:looooooooooooooooooooo:&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;,;:::::::;,&#39;&#39;;xNMMMMM\n', '// MMMMMMWOc&#39;&#39;&#39;,::::::;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;,:llllllllllllllllllllll:&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;,::::::;,&#39;&#39;&#39;cOWMMMMMM\n', '// MMMMMMMMKo,&#39;&#39;,;::::;,&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;,:llllllllllllllllllllll:&#39;&#39;&#39;&#39;&#39;&#39;;;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;,;:::::;,&#39;&#39;,oKMMMMMMMM\n', '// MMMMMMMMMNOc&#39;&#39;&#39;,;;:;,&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;,:lllllllllllllllllllcll:,&#39;&#39;&#39;&#39;,:c,&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;;;:::;,&#39;&#39;&#39;ckNMMMMMMMMM\n', '// MMMMMMMMMMWXx:&#39;&#39;&#39;,;;;,&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;:ccccccccccccccccccccccc:;,,,:cc;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;,;;;;,&#39;&#39;&#39;:xXWMMMMMMMMMM\n', '// MMMMMMMMMMMMWKd;&#39;&#39;&#39;,,;,&#39;&#39;&#39;&#39;&#39;&#39;&#39;;ccccccccccccccccccccccccc::cccc;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;,;;,,&#39;&#39;&#39;:dKWMMMMMMMMMMMM\n', '// MMMMMMMMMMMMMMWXxc,&#39;&#39;&#39;,&#39;&#39;&#39;&#39;&#39;&#39;&#39;,:::::::::::::::::::::::::::::::;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;,,,&#39;&#39;&#39;,:xXWMMMMMMMMMMMMMM\n', '// MMMMMMMMMMMMMMMMWXOo;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;,::::::::::::::::::::::::::::::,&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;;lONWMMMMMMMMMMMMMMMM\n', '// MMMMMMMMMMMMMMMMMMMWKkl;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;,;:::::::::::::::::::::::::::;,&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;;lkKWMMMMMMMMMMMMMMMMMMM\n', '// MMMMMMMMMMMMMMMMMMMMMMWKko:,&#39;&#39;&#39;&#39;&#39;,,;;;;;;;;;;;;;;;;;;;;;;;;;;,&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;,:okKWMMMMMMMMMMMMMMMMMMMMMM\n', '// MMMMMMMMMMMMMMMMMMMMMMMMMWN0koc;,&#39;&#39;&#39;&#39;&#39;&#39;,,,,,,,,,,,,,,,,,,,,,&#39;&#39;&#39;&#39;&#39;&#39;&#39;,;cok0NWMMMMMMMMMMMMMMMMMMMMMMMMM\n', '// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNX0kdlc;,,&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;,,:cldk0XNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n', '// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNKOxdlc:;,,&#39;&#39;&#39;&#39;&#39;&#39;,,;;cloxOKNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n', '//\n', '// ----------------------------------------------------------------------------------------------------\n', '//\n', '// Website: https://skorch.io \n', '// Reddit: https://reddit.com/r/SkorchToken\n', '// Twitter: https://twitter.com/SkorchToken\n', '\n', 'library SafeMath {\n', '\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'library ExtendedMath {\n', '    //return the smaller of the two inputs (a or b)\n', '    function limitLessThan(uint a, uint b) internal pure returns (uint c) {\n', '        if(a > b) return b;\n', '        return a;\n', '    }\n', '}\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', 'contract Owned {\n', '\n', '    address public owner;\n', '\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract SkorchToken is ERC20Interface, Owned {\n', '\n', '    using SafeMath for uint;\n', '    using ExtendedMath for uint;\n', '\n', '    string public symbol;\n', '\n', '    string public  name;\n', '\n', '    uint8 public decimals;\n', '\n', '    uint public _totalSupply;\n', '    uint public latestDifficultyPeriodStarted;\n', '    uint public epochCount;\n', '    uint public _BLOCKS_PER_READJUSTMENT = 1024;\n', '\n', '    uint public  _MINIMUM_TARGET = 2**16;\n', '\n', '    uint public  _MAXIMUM_TARGET = 2**234;\n', '\n', '    uint public miningTarget;\n', '    \n', '    uint256 public MinimumPoStokens = 20000 * 10**uint(decimals); // set minimum tokens to stake \n', '\n', '    bytes32 public challengeNumber;   //generate a new one when a new reward is minted\n', '\n', '    uint public rewardEra;\n', '    uint public maxSupplyForEra;\n', '\n', '    address public lastRewardTo;\n', '    uint public lastRewardAmount;\n', '    uint public lastRewardEthBlockNumber;\n', '\n', '    mapping(bytes32 => bytes32) solutionForChallenge;\n', '\n', '    uint public tokensMinted;\n', '\n', '    mapping(address => uint) balances;\n', '\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    \n', '    mapping(address => uint256) timer; // timer to check PoS \n', '    \n', '    // how to calculate doubleUnit: \n', '    // specify how much percent increase you want per year \n', '    // e.g. 130% -> 2.3 multiplier every year \n', '    // now divide (1 years) by LOG(2.3) where LOG is the natural logarithm (not LOG10)\n', '    // in this case LOG(2.3) is 0.83290912293\n', '    // hence multiplying by 1/0.83290912293 is the same \n', '    // 31536000 = 1 years (to prevent deprecated warning in solc)\n', '    uint256 doubleUnit = (31536000) * 1.2;\n', '\n', '    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\n', '\n', '    constructor()\n', '        public \n', '        onlyOwner()\n', '    {\n', '        symbol = "SKO";\n', '        name = "Skorch Token";\n', '        decimals = 18;\n', '        // uncomment this to test \n', '        //balances[msg.sender] = (20000) * (10 ** uint(decimals)); // change 20000 to some lower number than 20000 \n', '        //to see you will not get PoS tokens if you have less than 20000 tokens \n', '        //timer[msg.sender] = now - (1 years);\n', '        _totalSupply = 21000000 * 10**uint(decimals);\n', '        tokensMinted = 0;\n', '        rewardEra = 0;\n', '        maxSupplyForEra = _totalSupply.div(2);\n', '        miningTarget = _MAXIMUM_TARGET;\n', '        latestDifficultyPeriodStarted = block.number;\n', '        _startNewMiningEpoch();\n', '        \n', '        \n', '    }\n', '    \n', '    function setPosTokens(uint256 newTokens)\n', '        public \n', '        onlyOwner\n', '    {\n', '        require(newTokens >= 100000);\n', '        // note: newTokens should be multiplied with 10**uint(decimals) (10^18);\n', '        // require is in place to prevent fuck up. for 1000 tokens you need to enter 1000* 10^18 \n', '        MinimumPoStokens = newTokens;\n', '    }\n', '\n', '        function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success) {\n', '            bytes32 digest =  keccak256(challengeNumber, msg.sender, nonce );\n', '            if (digest != challenge_digest) revert();\n', '            if(uint256(digest) > miningTarget) revert();\n', '             bytes32 solution = solutionForChallenge[challengeNumber];\n', '             solutionForChallenge[challengeNumber] = digest;\n', '             if(solution != 0x0) revert();  //prevent the same answer from awarding twice\n', '             _claimTokens(msg.sender);\n', '            uint reward_amount = getMiningReward();\n', '            balances[msg.sender] = balances[msg.sender].add(reward_amount);\n', '            tokensMinted = tokensMinted.add(reward_amount);\n', '            assert(tokensMinted <= maxSupplyForEra);\n', '            lastRewardTo = msg.sender;\n', '            lastRewardAmount = reward_amount;\n', '            lastRewardEthBlockNumber = block.number;\n', '             _startNewMiningEpoch();\n', '              emit Mint(msg.sender, reward_amount, epochCount, challengeNumber );\n', '           return true;\n', '        }\n', '\n', '    function _startNewMiningEpoch() internal {\n', '      if( tokensMinted.add(getMiningReward()) > maxSupplyForEra && rewardEra < 39)\n', '      {\n', '        rewardEra = rewardEra + 1;\n', '      }\n', '      maxSupplyForEra = _totalSupply - _totalSupply.div( 2**(rewardEra + 1));\n', '      epochCount = epochCount.add(1);\n', '      if(epochCount % _BLOCKS_PER_READJUSTMENT == 0)\n', '      {\n', '        _reAdjustDifficulty();\n', '      }\n', '      challengeNumber = block.blockhash(block.number - 1);\n', '    }\n', '\n', '    function _reAdjustDifficulty() internal {\n', '        uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\n', '        uint epochsMined = _BLOCKS_PER_READJUSTMENT; \n', '        uint targetEthBlocksPerDiffPeriod = epochsMined * 60; //should be 60 times slower than ethereum\n', '        if( ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod )\n', '        {\n', '          uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div( ethBlocksSinceLastDifficultyPeriod );\n', '          uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\n', '          miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));   //by up to 50 %\n', '        }else{\n', '          uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div( targetEthBlocksPerDiffPeriod );\n', '          uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000); //always between 0 and 1000\n', '          miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));   //by up to 50 %\n', '        }\n', '        latestDifficultyPeriodStarted = block.number;\n', '        if(miningTarget < _MINIMUM_TARGET) //very difficult\n', '        {\n', '          miningTarget = _MINIMUM_TARGET;\n', '        }\n', '        if(miningTarget > _MAXIMUM_TARGET) //very easy\n', '        {\n', '          miningTarget = _MAXIMUM_TARGET;\n', '        }\n', '    }\n', '\n', '    function getChallengeNumber() public constant returns (bytes32) {\n', '        return challengeNumber;\n', '    }\n', '\n', '    function getMiningDifficulty() public constant returns (uint) {\n', '        return _MAXIMUM_TARGET.div(miningTarget);\n', '    }\n', '\n', '    function getMiningTarget() public constant returns (uint) {\n', '       return miningTarget;\n', '   }\n', '\n', '    function getMiningReward() public constant returns (uint) {\n', '         return (50 * 10**uint(decimals) ).div( 2**rewardEra ) ;\n', '    }\n', '\n', '    function getMintDigest(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number) public view returns (bytes32 digesttest) {\n', '        bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\n', '        return digest;\n', '      }\n', '      \n', '      function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns (bool success) {\n', '          bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\n', '          if(uint256(digest) > testTarget) revert();\n', '          return (digest == challenge_digest);\n', '        }\n', '\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];// + _getPoS(tokenOwner); // add unclaimed pos tokens \n', '    }\n', '\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        _claimTokens(msg.sender);\n', '        _claimTokens(to);\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        _claimTokens(from);\n', '        _claimTokens(to);\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    function () public payable {\n', '        revert();\n', '    } \n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '    \n', '    function claimTokens() public {\n', '        _claimTokens(msg.sender);        \n', '    }\n', '    \n', '    function _claimTokens(address target) internal{\n', '        if (timer[target] == 0){\n', '            // russian hackers BTFO\n', '            return;\n', '        }\n', '        if (timer[target] == now){\n', '            // 0 seconds passed, 0 tokens gotten via PoS \n', '            // return so no gas waste \n', '            return;\n', '        }\n', '        \n', '        uint256 totalTkn = _getPoS(target);\n', '        balances[target] = balances[target].add(totalTkn);\n', '        _totalSupply.add(totalTkn);\n', '        timer[target] = now;\n', '        emit Transfer(address(0x0), target, totalTkn);\n', '    }\n', '    \n', '    function _getPoS(address target) internal view returns (uint256){\n', '        if (balances[target] <= MinimumPoStokens){\n', '            return 0;\n', '        }\n', '        int ONE_SECOND = 0x10000000000000000;\n', '        int PORTION_SCALED = (int(now - timer[target]) * ONE_SECOND) / int(doubleUnit); \n', '        uint256 exp = fixedExp(PORTION_SCALED);\n', '        \n', '        return ((balances[target].mul(exp)) / uint(one)).sub(balances[target]); \n', '    }\n', '    \n', '    \n', '    \n', '    int256 constant ln2       = 0x0b17217f7d1cf79ac;\n', '    int256 constant ln2_64dot5= 0x2cb53f09f05cc627c8;\n', '    int256 constant one       = 0x10000000000000000;\n', '\tint256 constant c2 =  0x02aaaaaaaaa015db0;\n', '\tint256 constant c4 = -0x000b60b60808399d1;\n', '\tint256 constant c6 =  0x0000455956bccdd06;\n', '\tint256 constant c8 = -0x000001b893ad04b3a;\n', '\tfunction fixedExp(int256 a) public pure returns (uint256 exp) {\n', '\t\tint256 scale = (a + (ln2_64dot5)) / ln2 - 64;\n', '\t\ta -= scale*ln2;\n', '\t\t// The polynomial R = 2 + c2*x^2 + c4*x^4 + ...\n', '\t\t// approximates the function x*(exp(x)+1)/(exp(x)-1)\n', '\t\t// Hence exp(x) = (R(x)+x)/(R(x)-x)\n', '\t\tint256 z = (a*a) / one;\n', '\t\tint256 R = ((int256)(2) * one) +\n', '\t\t\t(z*(c2 + (z*(c4 + (z*(c6 + (z*c8/one))/one))/one))/one);\n', '\t\texp = (uint256) (((R + a) * one) / (R - a));\n', '\t\tif (scale >= 0)\n', '\t\t\texp <<= scale;\n', '\t\telse\n', '\t\t\texp >>= -scale;\n', '\t\treturn exp;\n', '\t}\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', "// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNK0kxolc:;,,'''''''''',,;:cloxk0KNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n", "// MMMMMMMMMMMMMMMMMMMMMMMMMMMWN0kdl:,''''',,;;:::::cc:::::;;,,''''';:ldk0NWMMMMMMMMMMMMMMMMMMMMMMMMMMM\n", "// MMMMMMMMMMMMMMMMMMMMMMMWN0xo:,''',;:cloodxxkkkkkkkkkkkkkkxxdoolc:;,''',:ox0NWMMMMMMMMMMMMMMMMMMMMMMM\n", "// MMMMMMMMMMMMMMMMMMMMWXOdc,''';:lodxkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxdoc:;''',cdOXWMMMMMMMMMMMMMMMMMMMM\n", "// MMMMMMMMMMMMMMMMMMN0d:,'',:loxkkkkkkkkkkkkkkkkkkkkkxodkkkkkkkkkkkkkkkkxol:,'',:d0NMMMMMMMMMMMMMMMMMM\n", "// MMMMMMMMMMMMMMMWXxc,'',:ldxkkkkkkkkkkkkkkkkkkkkkxl:;cxkkkkkkkkkkkkkkkkkkkxdl:,'',cxXWMMMMMMMMMMMMMMM\n", "// MMMMMMMMMMMMMWKd:''';ldxkkkkkkkkkkkkkkkkkkkkkkxo:'';dkkkkkkkkkkkkkkkkkkkkkkkxdl;''':dKWMMMMMMMMMMMMM\n", "// MMMMMMMMMMMWKd;'',:oxxkkxxkkxkkxxxxxxxxxkkxkkxl,'',cxxkkxxxxxxxxxkkkxkkkxkkxkkxxo:,'';dKWMMMMMMMMMMM\n", "// MMMMMMMMMMXx:'',:oxxxxxxxxxxxxxxxxxxxxxxxxxxxl,'',:oxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxo:,'':xXMMMMMMMMMM\n", "// MMMMMMMMW0c''':oxxxxxxxxxxxxxxxxxxxxxxxxxxxxd;''';coxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxo:'''c0WMMMMMMMM\n", "// MMMMMMMXx;'';ldxxxxxxxxxxxxxxxxxxxxxxxxxxxxxc,''';coxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxdl;'';xXMMMMMMM\n", "// MMMMMMKl,'':oxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxd:'''',:lxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxo:'',lKMMMMMM\n", "// MMMMW0c'',cdxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxd:'''',;ldxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxdc,''c0WMMMM\n", "// MMMW0c'',cdxddddddddddddddddddddddddddddxddo:'''''':dddddddooddxddddddddddddddddddddddddxdl,''c0WMMM\n", "// MMW0c'',lddddddddddddddddddddddddddddddddddd:'''''',lddddddoc:lddddddddddddddddddddddddddddl,''c0MMM\n", "// MMKl'',cddddddddddddddddddddddddddddddddddddc''''''':oddddddl,,codddddddddddddddddddddddddddc,''lKMM\n", "// MNd,''coddddddddddddddddddddddddddddddddddddc,'''''',cddddddo:'';codddddddddddddddddddddddddoc'',dNM\n", "// WO;'';odddddddddddddddddddddddddddddddddddddl,''''''';lddddddl,''';loddddddddddddddddddddddddo:'';OW\n", "// Xl'',codoodddddddddddddddddddddddoddddoollodl;'''''''';loddodo:'''',:odooddddddddddddddoodddool,''lX\n", "// k;'':oooooooooooooooooooooooooooooooooo:,cooo;''''''''',cooooo:'''''';loooooooooooooooooooooooo:'';k\n", "// o'',cooooooooooooooooooooooooooooooool;'':ooo:'''''''''',:loooc,'''''',:oooooooooooooooooooooooc,''o\n", "// :'';loooooooooooooooooooooooooooooooc;''':ooo:'''''''''''';cll:''''''''';loooooooooooooooooooool;'':\n", "// ,'';loooooooooooooooooooooooooooool:,''',coooc'''''''''''''',,''''''''''';looooooooooooooooooool;'';\n", "// ''':loooooooooooooooooooooooooool:,''''';loooc,''''''''''''''''''''''''''';coooooooooooooooooool:'''\n", "// ''':loolllllllllllllllllloollllc;'''''',cllllc,'''''''''''''''''''''''''''';cllollllllllllllolll:'''\n", "// ''':lllllllllllllllllllllllllc;'''''''';lllllc,''''''''''''''''''''''''''''';lllllllllllllllllll:'''\n", "// ,'';lllllllllllllllllllllllc;''''''''',clllllc,'''''''''''''''''''''''''''''':llllllllllllllllll;'',\n", "// ;'';cllllllllllllllllllllc:,'''''''''':llllll:,'''''',,'''''''''''''''''''''',:llllllllllllllllc;'';\n", "// c'',:lllllllllllllllllll:,''''''''''',:lllllc;'''''''cc''''''''''''''''''''''';clllllllllllllll:,''l\n", "// x,'';cllllllllllllccllc:,''''''''''''',:cccc;''''''',oo;''''''''''''''''''''''':clllllllcllcllc;'',x\n", "// 0:'',ccccccccccccccccc;''''''''''''''''',,,''''''''':dd;''''''''''''''''''''''',ccccccccccccccc,'':0\n", "// Nd,'';ccccccccccccccc;''''''''''''''''''''''''''''';oxd;'''''''''''''''''''''''':ccccccccccccc;'',dN\n", "// MKc'',:ccccccccccccc;'''''''''''';:,''''''''''''',;ldxo;'''''''''''''''''''''''';cccccccccccc:,''cKM\n", "// MWO;'',:ccccccccccc:,''''''''''';odl;''''''''''',lodddl,'''''''''''''''''''''''';:cccccccccc:,'';OWM\n", "// MMWx,'',:cccccccccc;''''''''''';ldddo:,''''''',:ldddddc''''''''''''''''''''''''',:ccccccccc:,'',xWMM\n", "// MMMNd,'',:::c::c:c:,'''''''''',coooodolc;,,,;:looodddo;''''''''''''''''''''''''',:c::::ccc:,'',dNMMM\n", "// MMMMNd,'',:::::::::,'''''''''';loooooooooolloooooooooc,''''''''''''''''''''''''';:::::::::,'',xNMMMM\n", "// MMMMMNx;'',;:::::::,'''''''''':looooooooooooooooooooo:''''''''''''''''''''''''',;:::::::;,'';xNMMMMM\n", "// MMMMMMWOc''',::::::;''''''''',:llllllllllllllllllllll:''''''''''''''''''''''''',::::::;,'''cOWMMMMMM\n", "// MMMMMMMMKo,'',;::::;,'''''''',:llllllllllllllllllllll:'''''';;'''''''''''''''',;:::::;,'',oKMMMMMMMM\n", "// MMMMMMMMMNOc''',;;:;,'''''''',:lllllllllllllllllllcll:,'''',:c,''''''''''''''';;:::;,'''ckNMMMMMMMMM\n", "// MMMMMMMMMMWXx:''',;;;,'''''''':ccccccccccccccccccccccc:;,,,:cc;'''''''''''''',;;;;,''':xXWMMMMMMMMMM\n", "// MMMMMMMMMMMMWKd;''',,;,''''''';ccccccccccccccccccccccccc::cccc;''''''''''''',;;,,''':dKWMMMMMMMMMMMM\n", "// MMMMMMMMMMMMMMWXxc,''',''''''',:::::::::::::::::::::::::::::::;'''''''''''',,,''',:xXWMMMMMMMMMMMMMM\n", "// MMMMMMMMMMMMMMMMWXOo;'''''''''',::::::::::::::::::::::::::::::,'''''''''''''''';lONWMMMMMMMMMMMMMMMM\n", "// MMMMMMMMMMMMMMMMMMMWKkl;'''''''',;:::::::::::::::::::::::::::;,''''''''''''';lkKWMMMMMMMMMMMMMMMMMMM\n", "// MMMMMMMMMMMMMMMMMMMMMMWKko:,''''',,;;;;;;;;;;;;;;;;;;;;;;;;;;,'''''''''',:okKWMMMMMMMMMMMMMMMMMMMMMM\n", "// MMMMMMMMMMMMMMMMMMMMMMMMMWN0koc;,'''''',,,,,,,,,,,,,,,,,,,,,''''''',;cok0NWMMMMMMMMMMMMMMMMMMMMMMMMM\n", "// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNX0kdlc;,,'''''''''''''''''''',,:cldk0XNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n", "// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNKOxdlc:;,,'''''',,;;cloxOKNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n", '//\n', '// ----------------------------------------------------------------------------------------------------\n', '//\n', '// Website: https://skorch.io \n', '// Reddit: https://reddit.com/r/SkorchToken\n', '// Twitter: https://twitter.com/SkorchToken\n', '\n', 'library SafeMath {\n', '\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'library ExtendedMath {\n', '    //return the smaller of the two inputs (a or b)\n', '    function limitLessThan(uint a, uint b) internal pure returns (uint c) {\n', '        if(a > b) return b;\n', '        return a;\n', '    }\n', '}\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', 'contract Owned {\n', '\n', '    address public owner;\n', '\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract SkorchToken is ERC20Interface, Owned {\n', '\n', '    using SafeMath for uint;\n', '    using ExtendedMath for uint;\n', '\n', '    string public symbol;\n', '\n', '    string public  name;\n', '\n', '    uint8 public decimals;\n', '\n', '    uint public _totalSupply;\n', '    uint public latestDifficultyPeriodStarted;\n', '    uint public epochCount;\n', '    uint public _BLOCKS_PER_READJUSTMENT = 1024;\n', '\n', '    uint public  _MINIMUM_TARGET = 2**16;\n', '\n', '    uint public  _MAXIMUM_TARGET = 2**234;\n', '\n', '    uint public miningTarget;\n', '    \n', '    uint256 public MinimumPoStokens = 20000 * 10**uint(decimals); // set minimum tokens to stake \n', '\n', '    bytes32 public challengeNumber;   //generate a new one when a new reward is minted\n', '\n', '    uint public rewardEra;\n', '    uint public maxSupplyForEra;\n', '\n', '    address public lastRewardTo;\n', '    uint public lastRewardAmount;\n', '    uint public lastRewardEthBlockNumber;\n', '\n', '    mapping(bytes32 => bytes32) solutionForChallenge;\n', '\n', '    uint public tokensMinted;\n', '\n', '    mapping(address => uint) balances;\n', '\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    \n', '    mapping(address => uint256) timer; // timer to check PoS \n', '    \n', '    // how to calculate doubleUnit: \n', '    // specify how much percent increase you want per year \n', '    // e.g. 130% -> 2.3 multiplier every year \n', '    // now divide (1 years) by LOG(2.3) where LOG is the natural logarithm (not LOG10)\n', '    // in this case LOG(2.3) is 0.83290912293\n', '    // hence multiplying by 1/0.83290912293 is the same \n', '    // 31536000 = 1 years (to prevent deprecated warning in solc)\n', '    uint256 doubleUnit = (31536000) * 1.2;\n', '\n', '    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\n', '\n', '    constructor()\n', '        public \n', '        onlyOwner()\n', '    {\n', '        symbol = "SKO";\n', '        name = "Skorch Token";\n', '        decimals = 18;\n', '        // uncomment this to test \n', '        //balances[msg.sender] = (20000) * (10 ** uint(decimals)); // change 20000 to some lower number than 20000 \n', '        //to see you will not get PoS tokens if you have less than 20000 tokens \n', '        //timer[msg.sender] = now - (1 years);\n', '        _totalSupply = 21000000 * 10**uint(decimals);\n', '        tokensMinted = 0;\n', '        rewardEra = 0;\n', '        maxSupplyForEra = _totalSupply.div(2);\n', '        miningTarget = _MAXIMUM_TARGET;\n', '        latestDifficultyPeriodStarted = block.number;\n', '        _startNewMiningEpoch();\n', '        \n', '        \n', '    }\n', '    \n', '    function setPosTokens(uint256 newTokens)\n', '        public \n', '        onlyOwner\n', '    {\n', '        require(newTokens >= 100000);\n', '        // note: newTokens should be multiplied with 10**uint(decimals) (10^18);\n', '        // require is in place to prevent fuck up. for 1000 tokens you need to enter 1000* 10^18 \n', '        MinimumPoStokens = newTokens;\n', '    }\n', '\n', '        function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success) {\n', '            bytes32 digest =  keccak256(challengeNumber, msg.sender, nonce );\n', '            if (digest != challenge_digest) revert();\n', '            if(uint256(digest) > miningTarget) revert();\n', '             bytes32 solution = solutionForChallenge[challengeNumber];\n', '             solutionForChallenge[challengeNumber] = digest;\n', '             if(solution != 0x0) revert();  //prevent the same answer from awarding twice\n', '             _claimTokens(msg.sender);\n', '            uint reward_amount = getMiningReward();\n', '            balances[msg.sender] = balances[msg.sender].add(reward_amount);\n', '            tokensMinted = tokensMinted.add(reward_amount);\n', '            assert(tokensMinted <= maxSupplyForEra);\n', '            lastRewardTo = msg.sender;\n', '            lastRewardAmount = reward_amount;\n', '            lastRewardEthBlockNumber = block.number;\n', '             _startNewMiningEpoch();\n', '              emit Mint(msg.sender, reward_amount, epochCount, challengeNumber );\n', '           return true;\n', '        }\n', '\n', '    function _startNewMiningEpoch() internal {\n', '      if( tokensMinted.add(getMiningReward()) > maxSupplyForEra && rewardEra < 39)\n', '      {\n', '        rewardEra = rewardEra + 1;\n', '      }\n', '      maxSupplyForEra = _totalSupply - _totalSupply.div( 2**(rewardEra + 1));\n', '      epochCount = epochCount.add(1);\n', '      if(epochCount % _BLOCKS_PER_READJUSTMENT == 0)\n', '      {\n', '        _reAdjustDifficulty();\n', '      }\n', '      challengeNumber = block.blockhash(block.number - 1);\n', '    }\n', '\n', '    function _reAdjustDifficulty() internal {\n', '        uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\n', '        uint epochsMined = _BLOCKS_PER_READJUSTMENT; \n', '        uint targetEthBlocksPerDiffPeriod = epochsMined * 60; //should be 60 times slower than ethereum\n', '        if( ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod )\n', '        {\n', '          uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div( ethBlocksSinceLastDifficultyPeriod );\n', '          uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\n', '          miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));   //by up to 50 %\n', '        }else{\n', '          uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div( targetEthBlocksPerDiffPeriod );\n', '          uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000); //always between 0 and 1000\n', '          miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));   //by up to 50 %\n', '        }\n', '        latestDifficultyPeriodStarted = block.number;\n', '        if(miningTarget < _MINIMUM_TARGET) //very difficult\n', '        {\n', '          miningTarget = _MINIMUM_TARGET;\n', '        }\n', '        if(miningTarget > _MAXIMUM_TARGET) //very easy\n', '        {\n', '          miningTarget = _MAXIMUM_TARGET;\n', '        }\n', '    }\n', '\n', '    function getChallengeNumber() public constant returns (bytes32) {\n', '        return challengeNumber;\n', '    }\n', '\n', '    function getMiningDifficulty() public constant returns (uint) {\n', '        return _MAXIMUM_TARGET.div(miningTarget);\n', '    }\n', '\n', '    function getMiningTarget() public constant returns (uint) {\n', '       return miningTarget;\n', '   }\n', '\n', '    function getMiningReward() public constant returns (uint) {\n', '         return (50 * 10**uint(decimals) ).div( 2**rewardEra ) ;\n', '    }\n', '\n', '    function getMintDigest(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number) public view returns (bytes32 digesttest) {\n', '        bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\n', '        return digest;\n', '      }\n', '      \n', '      function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns (bool success) {\n', '          bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\n', '          if(uint256(digest) > testTarget) revert();\n', '          return (digest == challenge_digest);\n', '        }\n', '\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];// + _getPoS(tokenOwner); // add unclaimed pos tokens \n', '    }\n', '\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        _claimTokens(msg.sender);\n', '        _claimTokens(to);\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        _claimTokens(from);\n', '        _claimTokens(to);\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    function () public payable {\n', '        revert();\n', '    } \n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '    \n', '    function claimTokens() public {\n', '        _claimTokens(msg.sender);        \n', '    }\n', '    \n', '    function _claimTokens(address target) internal{\n', '        if (timer[target] == 0){\n', '            // russian hackers BTFO\n', '            return;\n', '        }\n', '        if (timer[target] == now){\n', '            // 0 seconds passed, 0 tokens gotten via PoS \n', '            // return so no gas waste \n', '            return;\n', '        }\n', '        \n', '        uint256 totalTkn = _getPoS(target);\n', '        balances[target] = balances[target].add(totalTkn);\n', '        _totalSupply.add(totalTkn);\n', '        timer[target] = now;\n', '        emit Transfer(address(0x0), target, totalTkn);\n', '    }\n', '    \n', '    function _getPoS(address target) internal view returns (uint256){\n', '        if (balances[target] <= MinimumPoStokens){\n', '            return 0;\n', '        }\n', '        int ONE_SECOND = 0x10000000000000000;\n', '        int PORTION_SCALED = (int(now - timer[target]) * ONE_SECOND) / int(doubleUnit); \n', '        uint256 exp = fixedExp(PORTION_SCALED);\n', '        \n', '        return ((balances[target].mul(exp)) / uint(one)).sub(balances[target]); \n', '    }\n', '    \n', '    \n', '    \n', '    int256 constant ln2       = 0x0b17217f7d1cf79ac;\n', '    int256 constant ln2_64dot5= 0x2cb53f09f05cc627c8;\n', '    int256 constant one       = 0x10000000000000000;\n', '\tint256 constant c2 =  0x02aaaaaaaaa015db0;\n', '\tint256 constant c4 = -0x000b60b60808399d1;\n', '\tint256 constant c6 =  0x0000455956bccdd06;\n', '\tint256 constant c8 = -0x000001b893ad04b3a;\n', '\tfunction fixedExp(int256 a) public pure returns (uint256 exp) {\n', '\t\tint256 scale = (a + (ln2_64dot5)) / ln2 - 64;\n', '\t\ta -= scale*ln2;\n', '\t\t// The polynomial R = 2 + c2*x^2 + c4*x^4 + ...\n', '\t\t// approximates the function x*(exp(x)+1)/(exp(x)-1)\n', '\t\t// Hence exp(x) = (R(x)+x)/(R(x)-x)\n', '\t\tint256 z = (a*a) / one;\n', '\t\tint256 R = ((int256)(2) * one) +\n', '\t\t\t(z*(c2 + (z*(c4 + (z*(c6 + (z*c8/one))/one))/one))/one);\n', '\t\texp = (uint256) (((R + a) * one) / (R - a));\n', '\t\tif (scale >= 0)\n', '\t\t\texp <<= scale;\n', '\t\telse\n', '\t\t\texp >>= -scale;\n', '\t\treturn exp;\n', '\t}\n', '\n', '}']
