['pragma solidity 0.4.24;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20 {\n', '  function totalSupply()public view returns (uint total_Supply);\n', '  function balanceOf(address who)public view returns (uint256);\n', '  function allowance(address owner, address spender)public view returns (uint);\n', '  function transferFrom(address from, address to, uint value)public returns (bool ok);\n', '  function approve(address spender, uint value)public returns (bool ok);\n', '  function transfer(address to, uint value)public returns (bool ok);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract KNOWToken is ERC20\n', '{\n', '    using SafeMath for uint256;\n', '    // Name of the token\n', '    string public constant name = "KNOW Token";\n', '\n', '    // Symbol of token\n', '    string public constant symbol = "KNOW";\n', '    uint8 public constant decimals = 18;\n', '    uint public _totalsupply = 18300000000 * 10 ** 18; // 18 billion total supply // muliplies dues to decimal precision\n', '    address public owner;                    // Owner of this contract\n', '    uint256 no_of_tokens;\n', '    uint256 total_token;\n', '    bool stopped = false;\n', '    bool checkTransfer = false;\n', '    uint256 public lockup_startdate;\n', '    uint256 public lockup_enddate;\n', '    uint256 public eth_received; // total ether received in the contract\n', '    uint256 transferPercent;\n', '    uint256 transferPercentTotal;\n', '    uint256 transferDays;\n', '    uint256 transferDaysTotal;\n', '    uint256 transferLastTransaction;\n', '    uint256 transferTotalSpent;\n', '    uint256 transferPostDate;\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    \n', '    mapping(address => bool) addOfPrivateSale;\n', '    mapping(address => bool) addOfContributors;\n', '    mapping(address => bool) addOfContributors2;\n', '    mapping(address => bool) addOfTechOperation;\n', '    mapping(address => bool) addOfMarketingBusinessDev;\n', '    mapping(address => bool) addOfEarlyInvestor;\n', '    mapping(address => bool) addOfOwners;\n', '    \n', '    event EventPrivateSale(address indexed _PrivateSale, bool _status);\n', '    event EventContributors(address indexed _Contributors, bool _status);\n', '    event EventContributors2(address indexed _Contributors2, bool _status);\n', '    event EventTechOperation(address indexed _TechOperation, bool _status);\n', '    event EventMarketingBusinessDev(address indexed _MarketingBusinessDev, bool _status);\n', '    event EventEarlyInvestor(address indexed _EarlyInvestor, bool _status);\n', '    \n', '    mapping(address => LockupHolderDetails) lockupHolderMap;\n', '    \n', '    struct LockupHolderDetails{\n', '      uint transferPercent;\n', '      uint transferDays;\n', '      uint transferPercentTotal;\n', '      uint transferDaysTotal;\n', '      uint transferLastTransaction;\n', '      uint transferTotalSpent;\n', '      uint transferPostDate;\n', '      bool reset;\n', '    }\n', '        \n', '    enum Stages {\n', '        LOCKUPNOTSTARTED,\n', '        LOCKUPSTARTED,\n', '        LOCKUPENDED\n', '    }\n', '    \n', '    Stages public stage;\n', '    \n', '    modifier atStage(Stages _stage) {\n', '        if (stage != _stage)\n', '            // Contract not in expected state\n', '            revert();\n', '        _;\n', '    }\n', '    modifier onlyOwner() {\n', '        if (msg.sender != owner) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '\n', '    function KNOWToken() public\n', '    {\n', '        owner = msg.sender;\n', '        stage = Stages.LOCKUPNOTSTARTED;\n', '        \n', '        uint256 _transfertoPrivateSale = 2745000000 * 10 ** 18; // 15% to Private Sale\n', '        uint256 _transfertoContributors = 10980000000 * 10 ** 18; // 60% to Contributors\n', '        uint256 _transfertoContributors2 = 1830000000 * 10 ** 18; // 10% to Contributors 2\n', '        uint256 _transfertoTechOperationExpenses = 915000000 * 10 ** 18; // 5% to Tech & Operation Expenses\n', '        uint256 _transfertoMarketingBusinessDev = 915000000 * 10 ** 18; // 5% to Marketing & Business Development\n', '        uint256 _transfertoEarlyInvestors = 915000000 * 10 ** 18; // 5% to Early Investors\n', '        \n', '        // 15% to Private Sale\n', '        balances[0x8eeC67a193B6B90A4B0047769De8F17a7ee87eB9] = _transfertoPrivateSale;\n', '        Transfer(address(0), 0x8eeC67a193B6B90A4B0047769De8F17a7ee87eB9, _transfertoPrivateSale);\n', '        \n', '        // 60% to Contributors\n', '        balances[0xc7991555F9F2E731bb2013cfB0ac2dcf6dc4A236] = _transfertoContributors;\n', '        Transfer(address(0), 0xc7991555F9F2E731bb2013cfB0ac2dcf6dc4A236, _transfertoContributors);\n', '        \n', '        // 10% to Contributors 2\n', '        balances[0xf26511984b53bf4b96d85355224E06a06180237F] = _transfertoContributors2;\n', '        Transfer(address(0), 0xf26511984b53bf4b96d85355224E06a06180237F, _transfertoContributors2);\n', '        \n', '        // 5% to Tech & Operation Expenses\n', '        balances[0xDd695A5b4594ad79e3D9cE5280f0A36fde72C70A] = _transfertoTechOperationExpenses;\n', '        Transfer(address(0), 0xDd695A5b4594ad79e3D9cE5280f0A36fde72C70A, _transfertoTechOperationExpenses);\n', '        \n', '        // 5% to Marketing & Business Development\n', '        balances[0x84B899f535b7128fEC47e53901cE3242CdC9C06f] = _transfertoMarketingBusinessDev;\n', '        Transfer(address(0), 0x84B899f535b7128fEC47e53901cE3242CdC9C06f, _transfertoMarketingBusinessDev);\n', '        \n', '        // 5% to Early Investors\n', '        balances[0xeD9200CffFBe17af59D288836a9B25520c6CeFa1] = _transfertoEarlyInvestors;\n', '        Transfer(address(0), 0xeD9200CffFBe17af59D288836a9B25520c6CeFa1, _transfertoEarlyInvestors);\n', '    }\n', '    \n', '    function () public payable \n', '    {\n', '        revert();\n', '        //Not Applicable   \n', '    }\n', '    \n', '     // Start lockup periods\n', '     function start_LOCKUP(uint _lockupEndDate) public onlyOwner atStage(Stages.LOCKUPNOTSTARTED)\n', '     {\n', '          stage = Stages.LOCKUPSTARTED;\n', '          stopped = false;\n', '          lockup_startdate = now;\n', '          lockup_enddate = now + _lockupEndDate * 86400;\n', '     }\n', '\n', '     // End lockup periods\n', '     function end_LOCKUP() external onlyOwner atStage(Stages.LOCKUPSTARTED)\n', '     {\n', '         require(now > lockup_enddate);\n', '         stage = Stages.LOCKUPENDED;\n', '     }\n', '     \n', '     // Add address to Private Sale\n', '     function addtoPrivateSale(address _address, uint _transferPercent, uint _transferPercentTotal) public onlyOwner {\n', '        addOfPrivateSale[_address] = true;\n', '        emit EventPrivateSale(_address, true);\n', '        lockupHolderMap[_address] = LockupHolderDetails({\n', '                transferPercent: _transferPercent,\n', '                transferDays: 1,\n', '                transferPercentTotal: _transferPercentTotal,\n', '                transferDaysTotal: 365,\n', '                transferLastTransaction: 0,\n', '                transferTotalSpent: 0,\n', '                transferPostDate: now,\n', '                reset: true\n', '                });\n', '     }\n', '     \n', '     // Add address to Contributors\n', '     function addtoContributos(address _address, uint _transferPercent, uint _transferPercentTotal) public onlyOwner {\n', '        addOfContributors[_address] = true;\n', '        emit EventContributors(_address, true);\n', '        lockupHolderMap[_address] = LockupHolderDetails({\n', '                transferPercent: _transferPercent,\n', '                transferDays: 1,\n', '                transferPercentTotal: _transferPercentTotal,\n', '                transferDaysTotal: 365,\n', '                transferLastTransaction: 0,\n', '                transferTotalSpent: 0,\n', '                transferPostDate: now,\n', '                reset: true\n', '                });\n', '     }\n', '     \n', '     // Add address to Contributors2\n', '     function addtoContributos2(address _address, uint _transferPercent, uint _transferPercentTotal) public onlyOwner {\n', '        addOfContributors2[_address] = true;\n', '        emit EventContributors2(_address, true);\n', '        lockupHolderMap[_address] = LockupHolderDetails({\n', '                transferPercent: _transferPercent,\n', '                transferDays: 1,\n', '                transferPercentTotal: _transferPercentTotal,\n', '                transferDaysTotal: 365,\n', '                transferLastTransaction: 0,\n', '                transferTotalSpent: 0,\n', '                transferPostDate: now,\n', '                reset: true\n', '                });\n', '     }\n', '     \n', '     // Add address to Tech & Operation\n', '     function addtoTechOperation(address _address, uint _transferPercent, uint _transferPercentTotal) public onlyOwner {\n', '        addOfTechOperation[_address] = true;\n', '        emit EventTechOperation(_address, true);\n', '        lockupHolderMap[_address] = LockupHolderDetails({\n', '                transferPercent: _transferPercent,\n', '                transferDays: 1,\n', '                transferPercentTotal: _transferPercentTotal,\n', '                transferDaysTotal: 365,\n', '                transferLastTransaction: 0,\n', '                transferTotalSpent: 0,\n', '                transferPostDate: now,\n', '                reset: true\n', '                });\n', '     }\n', '     \n', '     // Add address to Marketing & Business Development\n', '     function addtoMarketingBusinessDev(address _address, uint _transferPercent, uint _transferPercentTotal) public onlyOwner {\n', '        addOfMarketingBusinessDev[_address] = true;\n', '        emit EventMarketingBusinessDev(_address, true);\n', '        lockupHolderMap[_address] = LockupHolderDetails({\n', '                transferPercent: _transferPercent,\n', '                transferDays: 1,\n', '                transferPercentTotal: _transferPercentTotal,\n', '                transferDaysTotal: 365,\n', '                transferLastTransaction: 0,\n', '                transferTotalSpent: 0,\n', '                transferPostDate: now,\n', '                reset: true\n', '                });\n', '     }\n', '     \n', '     // Add address to Early Investors\n', '     function addtoEarlyInvestors(address _address, uint _transferPercent, uint _transferPercentTotal) public onlyOwner{\n', '        addOfEarlyInvestor[_address] = true;\n', '        emit EventEarlyInvestor(_address, true);\n', '        lockupHolderMap[_address] = LockupHolderDetails({\n', '                transferPercent: _transferPercent,\n', '                transferDays: 1,\n', '                transferPercentTotal: _transferPercentTotal,\n', '                transferDaysTotal: 365,\n', '                transferLastTransaction: 0,\n', '                transferTotalSpent: 0,\n', '                transferPostDate: now,\n', '                reset: true\n', '                });\n', '     }\n', '     \n', '     // Add owners\n', '     function addtoOwners(address _address) public onlyOwner{\n', '        addOfOwners[_address] = true;\n', '     }\n', '   \n', '     // what is the total supply of the ech tokens\n', '     function totalSupply() public view returns (uint256 total_Supply) {\n', '         total_Supply = _totalsupply;\n', '     }\n', '    \n', '     // What is the balance of a particular account?\n', '     function balanceOf(address _owner)public view returns (uint256 balance) {\n', '         return balances[_owner];\n', '     }\n', '     \n', '     // Send _value amount of tokens from address _from to address _to\n', '     // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n', '     // tokens on your behalf, for example to "deposit" to a contract address and/or to charge\n', '     // fees in sub-currencies; the command should fail unless the _from account has\n', '     // deliberately authorized the sender of the message via some mechanism; we propose\n', '     // these standardized APIs for approval:\n', '     function transferFrom(address _from, address _to, uint256 _amount)public returns (bool success) {\n', '         require( _to != 0x0);\n', '         checkTransfer = false;\n', '         \n', '         if(addOfOwners[_from]) {\n', '             checkTransfer = true;\n', '         } else\n', '         if(addOfPrivateSale[_from]) {\n', '             require(checkTransferFunctionPrivateSale(_from, _to, _amount));\n', '         } else\n', '         if(addOfContributors[_from]) {\n', '             checkTransfer = true;\n', '         } else\n', '         if(addOfContributors2[_from] || addOfTechOperation[_from] || addOfMarketingBusinessDev[_from] || addOfEarlyInvestor[_from]) {\n', '             require(checkTransferFunction(_from, _to, _amount));\n', '         } \n', '         \n', '         require(checkTransfer == true);\n', '         require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);\n', '         balances[_from] = (balances[_from]).sub(_amount);\n', '         allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);\n', '         balances[_to] = (balances[_to]).add(_amount);\n', '         Transfer(_from, _to, _amount);\n', '         return true;\n', '     }\n', '     \n', '     function checkTransferFunction(address _from, address _to, uint256 _amount) internal returns (bool success) {\n', '             \n', '             require(now > lockup_enddate);\n', '             \n', '             transferDaysTotal = lockupHolderMap[_from].transferDaysTotal * 86400;\n', '             transferPostDate = lockupHolderMap[_from].transferPostDate;\n', '             \n', '             if(now >= transferPostDate + transferDaysTotal) {\n', '                 lockupHolderMap[_from].transferPostDate = lockupHolderMap[_from].transferPostDate + transferDaysTotal;\n', '                 lockupHolderMap[_from].transferTotalSpent = 0;\n', '             }\n', '             \n', '             transferPercent = lockupHolderMap[_from].transferPercent;\n', '             transferPercentTotal = lockupHolderMap[_from].transferPercentTotal;\n', '             transferDays = lockupHolderMap[_from].transferDays * 86400;\n', '             transferDaysTotal = lockupHolderMap[_from].transferDaysTotal * 86400;\n', '             transferLastTransaction = lockupHolderMap[_from].transferLastTransaction;\n', '             transferTotalSpent = lockupHolderMap[_from].transferTotalSpent;\n', '             transferPostDate = lockupHolderMap[_from].transferPostDate;\n', '             \n', '             require((_amount * 10 ** 18) <= ((_totalsupply).mul(transferPercent)).div(100));\n', '             require((_amount * 10 ** 18) <= ((_totalsupply).mul(transferPercentTotal)).div(100));\n', '             \n', '             require(now >= transferLastTransaction + transferDays);\n', '             require((transferTotalSpent * 10 ** 18) <= ((_totalsupply).mul(transferPercentTotal)).div(100));\n', '             require(now <= transferPostDate + transferDaysTotal);\n', '             \n', '             lockupHolderMap[_from].transferLastTransaction = now;\n', '             lockupHolderMap[_from].transferTotalSpent += _amount;\n', '             \n', '             checkTransfer = true;\n', '             return true;\n', '     }\n', '     \n', '     function checkTransferFunctionPrivateSale(address _from, address _to, uint256 _amount) internal returns (bool success) {\n', '             \n', '             require(stage == Stages.LOCKUPENDED);\n', '             require(now > lockup_enddate);\n', '            \n', '             transferPercent = lockupHolderMap[_from].transferPercent;\n', '             transferDays = lockupHolderMap[_from].transferDays * 86400;\n', '             transferLastTransaction = lockupHolderMap[_from].transferLastTransaction;\n', '             transferTotalSpent = lockupHolderMap[_from].transferTotalSpent;\n', '             \n', '             require((_amount * 10 ** 18) <= ((_totalsupply).mul(transferPercent)).div(100));\n', '             \n', '             require(now >= transferLastTransaction + transferDays);\n', '             \n', '             lockupHolderMap[_from].transferLastTransaction = now;\n', '             \n', '             checkTransfer = true;\n', '             return true;\n', '     }\n', '     \n', '    \n', '     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '     // If this function is called again it overwrites the current allowance with _value.\n', '     function approve(address _spender, uint256 _amount)public returns (bool success) {\n', '         require( _spender != 0x0);\n', '         allowed[msg.sender][_spender] = _amount;\n', '         Approval(msg.sender, _spender, _amount);\n', '         return true;\n', '     }\n', '     \n', '     \n', '     function allowance(address _owner, address _spender)public view returns (uint256 remaining) {\n', '         require( _owner != 0x0 && _spender !=0x0);\n', '         return allowed[_owner][_spender];\n', '     }\n', '\n', '     // Transfer the balance from owner&#39;s account to another account\n', '     function transfer(address _to, uint256 _amount)public returns (bool success) {\n', '        require( _to != 0x0);\n', '        require(balances[msg.sender] >= _amount && _amount >= 0);\n', '        balances[msg.sender] = (balances[msg.sender]).sub(_amount);\n', '        balances[_to] = (balances[_to]).add(_amount);\n', '        Transfer(msg.sender, _to, _amount);\n', '             return true;\n', '     }\n', '    \n', '     // Transfer the balance from owner&#39;s account to another account\n', '    function transferTokens(address _to, uint256 _amount) private returns(bool success) {\n', '        require( _to != 0x0);       \n', '        require(balances[address(this)] >= _amount && _amount > 0);\n', '        balances[address(this)] = (balances[address(this)]).sub(_amount);\n', '        balances[_to] = (balances[_to]).add(_amount);\n', '        Transfer(address(this), _to, _amount);\n', '        return true;\n', '     }\n', ' \n', '     // Drain all coins \n', '     function drain() external onlyOwner {\n', '        owner.transfer(this.balance);\n', '     }\n', '    \n', '}']
['pragma solidity 0.4.24;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20 {\n', '  function totalSupply()public view returns (uint total_Supply);\n', '  function balanceOf(address who)public view returns (uint256);\n', '  function allowance(address owner, address spender)public view returns (uint);\n', '  function transferFrom(address from, address to, uint value)public returns (bool ok);\n', '  function approve(address spender, uint value)public returns (bool ok);\n', '  function transfer(address to, uint value)public returns (bool ok);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract KNOWToken is ERC20\n', '{\n', '    using SafeMath for uint256;\n', '    // Name of the token\n', '    string public constant name = "KNOW Token";\n', '\n', '    // Symbol of token\n', '    string public constant symbol = "KNOW";\n', '    uint8 public constant decimals = 18;\n', '    uint public _totalsupply = 18300000000 * 10 ** 18; // 18 billion total supply // muliplies dues to decimal precision\n', '    address public owner;                    // Owner of this contract\n', '    uint256 no_of_tokens;\n', '    uint256 total_token;\n', '    bool stopped = false;\n', '    bool checkTransfer = false;\n', '    uint256 public lockup_startdate;\n', '    uint256 public lockup_enddate;\n', '    uint256 public eth_received; // total ether received in the contract\n', '    uint256 transferPercent;\n', '    uint256 transferPercentTotal;\n', '    uint256 transferDays;\n', '    uint256 transferDaysTotal;\n', '    uint256 transferLastTransaction;\n', '    uint256 transferTotalSpent;\n', '    uint256 transferPostDate;\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    \n', '    mapping(address => bool) addOfPrivateSale;\n', '    mapping(address => bool) addOfContributors;\n', '    mapping(address => bool) addOfContributors2;\n', '    mapping(address => bool) addOfTechOperation;\n', '    mapping(address => bool) addOfMarketingBusinessDev;\n', '    mapping(address => bool) addOfEarlyInvestor;\n', '    mapping(address => bool) addOfOwners;\n', '    \n', '    event EventPrivateSale(address indexed _PrivateSale, bool _status);\n', '    event EventContributors(address indexed _Contributors, bool _status);\n', '    event EventContributors2(address indexed _Contributors2, bool _status);\n', '    event EventTechOperation(address indexed _TechOperation, bool _status);\n', '    event EventMarketingBusinessDev(address indexed _MarketingBusinessDev, bool _status);\n', '    event EventEarlyInvestor(address indexed _EarlyInvestor, bool _status);\n', '    \n', '    mapping(address => LockupHolderDetails) lockupHolderMap;\n', '    \n', '    struct LockupHolderDetails{\n', '      uint transferPercent;\n', '      uint transferDays;\n', '      uint transferPercentTotal;\n', '      uint transferDaysTotal;\n', '      uint transferLastTransaction;\n', '      uint transferTotalSpent;\n', '      uint transferPostDate;\n', '      bool reset;\n', '    }\n', '        \n', '    enum Stages {\n', '        LOCKUPNOTSTARTED,\n', '        LOCKUPSTARTED,\n', '        LOCKUPENDED\n', '    }\n', '    \n', '    Stages public stage;\n', '    \n', '    modifier atStage(Stages _stage) {\n', '        if (stage != _stage)\n', '            // Contract not in expected state\n', '            revert();\n', '        _;\n', '    }\n', '    modifier onlyOwner() {\n', '        if (msg.sender != owner) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '\n', '    function KNOWToken() public\n', '    {\n', '        owner = msg.sender;\n', '        stage = Stages.LOCKUPNOTSTARTED;\n', '        \n', '        uint256 _transfertoPrivateSale = 2745000000 * 10 ** 18; // 15% to Private Sale\n', '        uint256 _transfertoContributors = 10980000000 * 10 ** 18; // 60% to Contributors\n', '        uint256 _transfertoContributors2 = 1830000000 * 10 ** 18; // 10% to Contributors 2\n', '        uint256 _transfertoTechOperationExpenses = 915000000 * 10 ** 18; // 5% to Tech & Operation Expenses\n', '        uint256 _transfertoMarketingBusinessDev = 915000000 * 10 ** 18; // 5% to Marketing & Business Development\n', '        uint256 _transfertoEarlyInvestors = 915000000 * 10 ** 18; // 5% to Early Investors\n', '        \n', '        // 15% to Private Sale\n', '        balances[0x8eeC67a193B6B90A4B0047769De8F17a7ee87eB9] = _transfertoPrivateSale;\n', '        Transfer(address(0), 0x8eeC67a193B6B90A4B0047769De8F17a7ee87eB9, _transfertoPrivateSale);\n', '        \n', '        // 60% to Contributors\n', '        balances[0xc7991555F9F2E731bb2013cfB0ac2dcf6dc4A236] = _transfertoContributors;\n', '        Transfer(address(0), 0xc7991555F9F2E731bb2013cfB0ac2dcf6dc4A236, _transfertoContributors);\n', '        \n', '        // 10% to Contributors 2\n', '        balances[0xf26511984b53bf4b96d85355224E06a06180237F] = _transfertoContributors2;\n', '        Transfer(address(0), 0xf26511984b53bf4b96d85355224E06a06180237F, _transfertoContributors2);\n', '        \n', '        // 5% to Tech & Operation Expenses\n', '        balances[0xDd695A5b4594ad79e3D9cE5280f0A36fde72C70A] = _transfertoTechOperationExpenses;\n', '        Transfer(address(0), 0xDd695A5b4594ad79e3D9cE5280f0A36fde72C70A, _transfertoTechOperationExpenses);\n', '        \n', '        // 5% to Marketing & Business Development\n', '        balances[0x84B899f535b7128fEC47e53901cE3242CdC9C06f] = _transfertoMarketingBusinessDev;\n', '        Transfer(address(0), 0x84B899f535b7128fEC47e53901cE3242CdC9C06f, _transfertoMarketingBusinessDev);\n', '        \n', '        // 5% to Early Investors\n', '        balances[0xeD9200CffFBe17af59D288836a9B25520c6CeFa1] = _transfertoEarlyInvestors;\n', '        Transfer(address(0), 0xeD9200CffFBe17af59D288836a9B25520c6CeFa1, _transfertoEarlyInvestors);\n', '    }\n', '    \n', '    function () public payable \n', '    {\n', '        revert();\n', '        //Not Applicable   \n', '    }\n', '    \n', '     // Start lockup periods\n', '     function start_LOCKUP(uint _lockupEndDate) public onlyOwner atStage(Stages.LOCKUPNOTSTARTED)\n', '     {\n', '          stage = Stages.LOCKUPSTARTED;\n', '          stopped = false;\n', '          lockup_startdate = now;\n', '          lockup_enddate = now + _lockupEndDate * 86400;\n', '     }\n', '\n', '     // End lockup periods\n', '     function end_LOCKUP() external onlyOwner atStage(Stages.LOCKUPSTARTED)\n', '     {\n', '         require(now > lockup_enddate);\n', '         stage = Stages.LOCKUPENDED;\n', '     }\n', '     \n', '     // Add address to Private Sale\n', '     function addtoPrivateSale(address _address, uint _transferPercent, uint _transferPercentTotal) public onlyOwner {\n', '        addOfPrivateSale[_address] = true;\n', '        emit EventPrivateSale(_address, true);\n', '        lockupHolderMap[_address] = LockupHolderDetails({\n', '                transferPercent: _transferPercent,\n', '                transferDays: 1,\n', '                transferPercentTotal: _transferPercentTotal,\n', '                transferDaysTotal: 365,\n', '                transferLastTransaction: 0,\n', '                transferTotalSpent: 0,\n', '                transferPostDate: now,\n', '                reset: true\n', '                });\n', '     }\n', '     \n', '     // Add address to Contributors\n', '     function addtoContributos(address _address, uint _transferPercent, uint _transferPercentTotal) public onlyOwner {\n', '        addOfContributors[_address] = true;\n', '        emit EventContributors(_address, true);\n', '        lockupHolderMap[_address] = LockupHolderDetails({\n', '                transferPercent: _transferPercent,\n', '                transferDays: 1,\n', '                transferPercentTotal: _transferPercentTotal,\n', '                transferDaysTotal: 365,\n', '                transferLastTransaction: 0,\n', '                transferTotalSpent: 0,\n', '                transferPostDate: now,\n', '                reset: true\n', '                });\n', '     }\n', '     \n', '     // Add address to Contributors2\n', '     function addtoContributos2(address _address, uint _transferPercent, uint _transferPercentTotal) public onlyOwner {\n', '        addOfContributors2[_address] = true;\n', '        emit EventContributors2(_address, true);\n', '        lockupHolderMap[_address] = LockupHolderDetails({\n', '                transferPercent: _transferPercent,\n', '                transferDays: 1,\n', '                transferPercentTotal: _transferPercentTotal,\n', '                transferDaysTotal: 365,\n', '                transferLastTransaction: 0,\n', '                transferTotalSpent: 0,\n', '                transferPostDate: now,\n', '                reset: true\n', '                });\n', '     }\n', '     \n', '     // Add address to Tech & Operation\n', '     function addtoTechOperation(address _address, uint _transferPercent, uint _transferPercentTotal) public onlyOwner {\n', '        addOfTechOperation[_address] = true;\n', '        emit EventTechOperation(_address, true);\n', '        lockupHolderMap[_address] = LockupHolderDetails({\n', '                transferPercent: _transferPercent,\n', '                transferDays: 1,\n', '                transferPercentTotal: _transferPercentTotal,\n', '                transferDaysTotal: 365,\n', '                transferLastTransaction: 0,\n', '                transferTotalSpent: 0,\n', '                transferPostDate: now,\n', '                reset: true\n', '                });\n', '     }\n', '     \n', '     // Add address to Marketing & Business Development\n', '     function addtoMarketingBusinessDev(address _address, uint _transferPercent, uint _transferPercentTotal) public onlyOwner {\n', '        addOfMarketingBusinessDev[_address] = true;\n', '        emit EventMarketingBusinessDev(_address, true);\n', '        lockupHolderMap[_address] = LockupHolderDetails({\n', '                transferPercent: _transferPercent,\n', '                transferDays: 1,\n', '                transferPercentTotal: _transferPercentTotal,\n', '                transferDaysTotal: 365,\n', '                transferLastTransaction: 0,\n', '                transferTotalSpent: 0,\n', '                transferPostDate: now,\n', '                reset: true\n', '                });\n', '     }\n', '     \n', '     // Add address to Early Investors\n', '     function addtoEarlyInvestors(address _address, uint _transferPercent, uint _transferPercentTotal) public onlyOwner{\n', '        addOfEarlyInvestor[_address] = true;\n', '        emit EventEarlyInvestor(_address, true);\n', '        lockupHolderMap[_address] = LockupHolderDetails({\n', '                transferPercent: _transferPercent,\n', '                transferDays: 1,\n', '                transferPercentTotal: _transferPercentTotal,\n', '                transferDaysTotal: 365,\n', '                transferLastTransaction: 0,\n', '                transferTotalSpent: 0,\n', '                transferPostDate: now,\n', '                reset: true\n', '                });\n', '     }\n', '     \n', '     // Add owners\n', '     function addtoOwners(address _address) public onlyOwner{\n', '        addOfOwners[_address] = true;\n', '     }\n', '   \n', '     // what is the total supply of the ech tokens\n', '     function totalSupply() public view returns (uint256 total_Supply) {\n', '         total_Supply = _totalsupply;\n', '     }\n', '    \n', '     // What is the balance of a particular account?\n', '     function balanceOf(address _owner)public view returns (uint256 balance) {\n', '         return balances[_owner];\n', '     }\n', '     \n', '     // Send _value amount of tokens from address _from to address _to\n', '     // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n', '     // tokens on your behalf, for example to "deposit" to a contract address and/or to charge\n', '     // fees in sub-currencies; the command should fail unless the _from account has\n', '     // deliberately authorized the sender of the message via some mechanism; we propose\n', '     // these standardized APIs for approval:\n', '     function transferFrom(address _from, address _to, uint256 _amount)public returns (bool success) {\n', '         require( _to != 0x0);\n', '         checkTransfer = false;\n', '         \n', '         if(addOfOwners[_from]) {\n', '             checkTransfer = true;\n', '         } else\n', '         if(addOfPrivateSale[_from]) {\n', '             require(checkTransferFunctionPrivateSale(_from, _to, _amount));\n', '         } else\n', '         if(addOfContributors[_from]) {\n', '             checkTransfer = true;\n', '         } else\n', '         if(addOfContributors2[_from] || addOfTechOperation[_from] || addOfMarketingBusinessDev[_from] || addOfEarlyInvestor[_from]) {\n', '             require(checkTransferFunction(_from, _to, _amount));\n', '         } \n', '         \n', '         require(checkTransfer == true);\n', '         require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);\n', '         balances[_from] = (balances[_from]).sub(_amount);\n', '         allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);\n', '         balances[_to] = (balances[_to]).add(_amount);\n', '         Transfer(_from, _to, _amount);\n', '         return true;\n', '     }\n', '     \n', '     function checkTransferFunction(address _from, address _to, uint256 _amount) internal returns (bool success) {\n', '             \n', '             require(now > lockup_enddate);\n', '             \n', '             transferDaysTotal = lockupHolderMap[_from].transferDaysTotal * 86400;\n', '             transferPostDate = lockupHolderMap[_from].transferPostDate;\n', '             \n', '             if(now >= transferPostDate + transferDaysTotal) {\n', '                 lockupHolderMap[_from].transferPostDate = lockupHolderMap[_from].transferPostDate + transferDaysTotal;\n', '                 lockupHolderMap[_from].transferTotalSpent = 0;\n', '             }\n', '             \n', '             transferPercent = lockupHolderMap[_from].transferPercent;\n', '             transferPercentTotal = lockupHolderMap[_from].transferPercentTotal;\n', '             transferDays = lockupHolderMap[_from].transferDays * 86400;\n', '             transferDaysTotal = lockupHolderMap[_from].transferDaysTotal * 86400;\n', '             transferLastTransaction = lockupHolderMap[_from].transferLastTransaction;\n', '             transferTotalSpent = lockupHolderMap[_from].transferTotalSpent;\n', '             transferPostDate = lockupHolderMap[_from].transferPostDate;\n', '             \n', '             require((_amount * 10 ** 18) <= ((_totalsupply).mul(transferPercent)).div(100));\n', '             require((_amount * 10 ** 18) <= ((_totalsupply).mul(transferPercentTotal)).div(100));\n', '             \n', '             require(now >= transferLastTransaction + transferDays);\n', '             require((transferTotalSpent * 10 ** 18) <= ((_totalsupply).mul(transferPercentTotal)).div(100));\n', '             require(now <= transferPostDate + transferDaysTotal);\n', '             \n', '             lockupHolderMap[_from].transferLastTransaction = now;\n', '             lockupHolderMap[_from].transferTotalSpent += _amount;\n', '             \n', '             checkTransfer = true;\n', '             return true;\n', '     }\n', '     \n', '     function checkTransferFunctionPrivateSale(address _from, address _to, uint256 _amount) internal returns (bool success) {\n', '             \n', '             require(stage == Stages.LOCKUPENDED);\n', '             require(now > lockup_enddate);\n', '            \n', '             transferPercent = lockupHolderMap[_from].transferPercent;\n', '             transferDays = lockupHolderMap[_from].transferDays * 86400;\n', '             transferLastTransaction = lockupHolderMap[_from].transferLastTransaction;\n', '             transferTotalSpent = lockupHolderMap[_from].transferTotalSpent;\n', '             \n', '             require((_amount * 10 ** 18) <= ((_totalsupply).mul(transferPercent)).div(100));\n', '             \n', '             require(now >= transferLastTransaction + transferDays);\n', '             \n', '             lockupHolderMap[_from].transferLastTransaction = now;\n', '             \n', '             checkTransfer = true;\n', '             return true;\n', '     }\n', '     \n', '    \n', '     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '     // If this function is called again it overwrites the current allowance with _value.\n', '     function approve(address _spender, uint256 _amount)public returns (bool success) {\n', '         require( _spender != 0x0);\n', '         allowed[msg.sender][_spender] = _amount;\n', '         Approval(msg.sender, _spender, _amount);\n', '         return true;\n', '     }\n', '     \n', '     \n', '     function allowance(address _owner, address _spender)public view returns (uint256 remaining) {\n', '         require( _owner != 0x0 && _spender !=0x0);\n', '         return allowed[_owner][_spender];\n', '     }\n', '\n', "     // Transfer the balance from owner's account to another account\n", '     function transfer(address _to, uint256 _amount)public returns (bool success) {\n', '        require( _to != 0x0);\n', '        require(balances[msg.sender] >= _amount && _amount >= 0);\n', '        balances[msg.sender] = (balances[msg.sender]).sub(_amount);\n', '        balances[_to] = (balances[_to]).add(_amount);\n', '        Transfer(msg.sender, _to, _amount);\n', '             return true;\n', '     }\n', '    \n', "     // Transfer the balance from owner's account to another account\n", '    function transferTokens(address _to, uint256 _amount) private returns(bool success) {\n', '        require( _to != 0x0);       \n', '        require(balances[address(this)] >= _amount && _amount > 0);\n', '        balances[address(this)] = (balances[address(this)]).sub(_amount);\n', '        balances[_to] = (balances[_to]).add(_amount);\n', '        Transfer(address(this), _to, _amount);\n', '        return true;\n', '     }\n', ' \n', '     // Drain all coins \n', '     function drain() external onlyOwner {\n', '        owner.transfer(this.balance);\n', '     }\n', '    \n', '}']
