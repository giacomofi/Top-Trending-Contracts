['pragma solidity 0.4.25;\n', '\n', ' /*\n', ' *check ethgasstation.info\n', ' *to set good gas price and gas limit\n', ' *we recommend to set your gas limit to 150000\n', ' *and your gas price to 15 gwei\n', ' *visit Ethkassa.io for more details\n', ' */ \n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0);\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'contract EthKassa{\n', '\n', '   using SafeMath for uint;\n', '    mapping (address => uint) public balances;\n', '    mapping (address => uint) public time;\n', '    \n', '    uint steep1 = 5000;\n', '    uint steep2 = 10000;\n', '    uint steep3 = 15000;\n', '    uint steep4 = 20000;\n', '    uint steep5 = 25000;\n', '    \n', '    uint dividendsTime = 1 days;\n', '    \n', '    event NewInvestor(address indexed investor, uint deposit);\n', '    event PayOffDividends(address indexed investor, uint value);\n', '    event NewDeposit(address indexed investor, uint value);\n', '    \n', '    uint public allDeposits;\n', '    uint public allPercents;\n', '    uint public allBeneficiaries;\n', '    uint public lastPayment;\n', '    \n', '    modifier isIssetRecepient(){\n', '        require(balances[msg.sender] > 0,  "Please send something");\n', '        _;\n', '    }\n', '    \n', '    \n', '    modifier timeCheck(){\n', '        \n', '         require(now >= time[msg.sender].add(dividendsTime), "Too fast, bro, please wait a little");\n', '         _;\n', '        \n', '    }\n', '    function getDepositMultiplier()public view  returns(uint){\n', '        uint percent = getPercent();\n', '        uint rate = balances[msg.sender].mul(percent).div(10000);\n', '        uint depositMultiplier = now.sub(time[msg.sender]).div(dividendsTime);\n', '        return(rate.mul(depositMultiplier));\n', '        \n', '    }\n', '    \n', '    function receivePayment()isIssetRecepient timeCheck private {\n', '        \n', '        uint depositMultiplier = getDepositMultiplier();\n', '        time[msg.sender] = now;\n', '        msg.sender.transfer(depositMultiplier);\n', '        \n', '        allPercents+=depositMultiplier;\n', '        lastPayment =now;\n', '        emit PayOffDividends(msg.sender, depositMultiplier);\n', '        \n', '        \n', '    }\n', '    \n', '    function authorizationPayment()public view returns(bool){\n', '        \n', '        if (balances[msg.sender] > 0 && now >= (time[msg.sender].add(dividendsTime))){\n', '            return (true);\n', '        }else{\n', '            return(false);\n', '        }\n', '        \n', '    }\n', '   \n', '     \n', '    function getPercent() public view returns(uint){\n', '        \n', '        uint contractBalance = address(this).balance;\n', '        \n', '        uint balanceSteep1 = steep1.mul(1 ether);\n', '        uint balanceSteep2 = steep2.mul(1 ether);\n', '        uint balanceSteep3 = steep3.mul(1 ether);\n', '        uint balanceSteep4 = steep4.mul(1 ether);\n', '        uint balanceSteep5 = steep5.mul(1 ether);\n', '        \n', '        \n', '        if(contractBalance < balanceSteep1){\n', '            return(300);\n', '        }\n', '        if(contractBalance >= balanceSteep1 && contractBalance < balanceSteep2){\n', '            return(350);\n', '        }\n', '        if(contractBalance >= balanceSteep2 && contractBalance < balanceSteep3){\n', '            return(400);\n', '        }\n', '        if(contractBalance >= balanceSteep3 && contractBalance < balanceSteep4){\n', '            return(450);\n', '        }\n', '        if(contractBalance >= balanceSteep4 && contractBalance < balanceSteep5){\n', '            return(500);\n', '        }\n', '        if(contractBalance >= balanceSteep5){\n', '            return(550);\n', '        }\n', '        \n', '        \n', '    }\n', '    \n', '    function createDeposit() private{\n', '        \n', '        if(msg.value > 0){\n', '            \n', '            if (balances[msg.sender] == 0){\n', '                emit NewInvestor(msg.sender, msg.value);\n', '                allBeneficiaries+=1;\n', '            }\n', '            \n', '            \n', '            if(getDepositMultiplier() > 0 && now >= time[msg.sender].add(dividendsTime) ){\n', '                receivePayment();\n', '            }\n', '            \n', '            balances[msg.sender] = balances[msg.sender].add(msg.value);\n', '            time[msg.sender] = now;\n', '            \n', '            allDeposits+=msg.value;\n', '            emit NewDeposit(msg.sender, msg.value);\n', '            \n', '        }else{\n', '            receivePayment();\n', '        }\n', '        \n', '    }\n', '    //BOF protection\n', '    function() external payable{\n', '        require((balances[msg.sender] + msg.value) >= balances[msg.sender]);\n', '        createDeposit();\n', '       \n', '    }\n', '    \n', '    \n', '}']
['pragma solidity 0.4.25;\n', '\n', ' /*\n', ' *check ethgasstation.info\n', ' *to set good gas price and gas limit\n', ' *we recommend to set your gas limit to 150000\n', ' *and your gas price to 15 gwei\n', ' *visit Ethkassa.io for more details\n', ' */ \n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0);\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'contract EthKassa{\n', '\n', '   using SafeMath for uint;\n', '    mapping (address => uint) public balances;\n', '    mapping (address => uint) public time;\n', '    \n', '    uint steep1 = 5000;\n', '    uint steep2 = 10000;\n', '    uint steep3 = 15000;\n', '    uint steep4 = 20000;\n', '    uint steep5 = 25000;\n', '    \n', '    uint dividendsTime = 1 days;\n', '    \n', '    event NewInvestor(address indexed investor, uint deposit);\n', '    event PayOffDividends(address indexed investor, uint value);\n', '    event NewDeposit(address indexed investor, uint value);\n', '    \n', '    uint public allDeposits;\n', '    uint public allPercents;\n', '    uint public allBeneficiaries;\n', '    uint public lastPayment;\n', '    \n', '    modifier isIssetRecepient(){\n', '        require(balances[msg.sender] > 0,  "Please send something");\n', '        _;\n', '    }\n', '    \n', '    \n', '    modifier timeCheck(){\n', '        \n', '         require(now >= time[msg.sender].add(dividendsTime), "Too fast, bro, please wait a little");\n', '         _;\n', '        \n', '    }\n', '    function getDepositMultiplier()public view  returns(uint){\n', '        uint percent = getPercent();\n', '        uint rate = balances[msg.sender].mul(percent).div(10000);\n', '        uint depositMultiplier = now.sub(time[msg.sender]).div(dividendsTime);\n', '        return(rate.mul(depositMultiplier));\n', '        \n', '    }\n', '    \n', '    function receivePayment()isIssetRecepient timeCheck private {\n', '        \n', '        uint depositMultiplier = getDepositMultiplier();\n', '        time[msg.sender] = now;\n', '        msg.sender.transfer(depositMultiplier);\n', '        \n', '        allPercents+=depositMultiplier;\n', '        lastPayment =now;\n', '        emit PayOffDividends(msg.sender, depositMultiplier);\n', '        \n', '        \n', '    }\n', '    \n', '    function authorizationPayment()public view returns(bool){\n', '        \n', '        if (balances[msg.sender] > 0 && now >= (time[msg.sender].add(dividendsTime))){\n', '            return (true);\n', '        }else{\n', '            return(false);\n', '        }\n', '        \n', '    }\n', '   \n', '     \n', '    function getPercent() public view returns(uint){\n', '        \n', '        uint contractBalance = address(this).balance;\n', '        \n', '        uint balanceSteep1 = steep1.mul(1 ether);\n', '        uint balanceSteep2 = steep2.mul(1 ether);\n', '        uint balanceSteep3 = steep3.mul(1 ether);\n', '        uint balanceSteep4 = steep4.mul(1 ether);\n', '        uint balanceSteep5 = steep5.mul(1 ether);\n', '        \n', '        \n', '        if(contractBalance < balanceSteep1){\n', '            return(300);\n', '        }\n', '        if(contractBalance >= balanceSteep1 && contractBalance < balanceSteep2){\n', '            return(350);\n', '        }\n', '        if(contractBalance >= balanceSteep2 && contractBalance < balanceSteep3){\n', '            return(400);\n', '        }\n', '        if(contractBalance >= balanceSteep3 && contractBalance < balanceSteep4){\n', '            return(450);\n', '        }\n', '        if(contractBalance >= balanceSteep4 && contractBalance < balanceSteep5){\n', '            return(500);\n', '        }\n', '        if(contractBalance >= balanceSteep5){\n', '            return(550);\n', '        }\n', '        \n', '        \n', '    }\n', '    \n', '    function createDeposit() private{\n', '        \n', '        if(msg.value > 0){\n', '            \n', '            if (balances[msg.sender] == 0){\n', '                emit NewInvestor(msg.sender, msg.value);\n', '                allBeneficiaries+=1;\n', '            }\n', '            \n', '            \n', '            if(getDepositMultiplier() > 0 && now >= time[msg.sender].add(dividendsTime) ){\n', '                receivePayment();\n', '            }\n', '            \n', '            balances[msg.sender] = balances[msg.sender].add(msg.value);\n', '            time[msg.sender] = now;\n', '            \n', '            allDeposits+=msg.value;\n', '            emit NewDeposit(msg.sender, msg.value);\n', '            \n', '        }else{\n', '            receivePayment();\n', '        }\n', '        \n', '    }\n', '    //BOF protection\n', '    function() external payable{\n', '        require((balances[msg.sender] + msg.value) >= balances[msg.sender]);\n', '        createDeposit();\n', '       \n', '    }\n', '    \n', '    \n', '}']
