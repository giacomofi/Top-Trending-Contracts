['pragma solidity ^0.4.24;\n', '\n', 'contract dPonzi {\n', '    address public manager;\n', '\n', '    struct PlayerStruct {\n', '        uint key;\n', '        uint food;\n', '        uint idx;\n', '        uint gametime;\n', '        uint flag;\n', '    }\n', '\n', '    struct RefStruct {\n', '        address player;\n', '        uint flag;\n', '    }\n', '\n', '    struct RefStructAdd {\n', '        bool flag;\n', '        string name;\n', '    }\n', '\n', '    struct PotCntStruct {\n', '        address[] player;\n', '        address lastPlayer;\n', '        uint last;\n', '        uint balance;\n', '        uint keys;\n', '        uint food;\n', '        uint gtime;\n', '        uint gameTime;\n', '        uint lastRecord;\n', '        uint entryAmount;\n', '        mapping(string => PackageStruct) potStruct;\n', '    }\n', '\n', '    struct IdxStruct {\n', '      mapping(address => PlayerStruct) playerStruct;\n', '    }\n', '\n', '    struct PackageStruct {\n', '      uint entryAmount;\n', '    }\n', '\n', '    mapping(string => PotCntStruct) potCntInfo;\n', '    mapping(string => IdxStruct) idxStruct;\n', '    mapping(string => RefStruct) idxR;\n', '    mapping(address => RefStructAdd) public idxRadd;\n', '\n', '\n', '    constructor() public {\n', '        manager = msg.sender;\n', '\n', '        potCntInfo[&#39;d&#39;].gameTime   = 0;\n', '        potCntInfo[&#39;7&#39;].gameTime   = 0;\n', '        potCntInfo[&#39;30&#39;].gameTime  = 0;\n', '        potCntInfo[&#39;90&#39;].gameTime  = 0;\n', '        potCntInfo[&#39;180&#39;].gameTime = 0;\n', '        potCntInfo[&#39;365&#39;].gameTime = 0;\n', '\n', '        potCntInfo[&#39;i&#39;].entryAmount   = 10;\n', '        potCntInfo[&#39;d&#39;].entryAmount   = 1;\n', '        potCntInfo[&#39;7&#39;].entryAmount   = 4;\n', '        potCntInfo[&#39;30&#39;].entryAmount  = 8;\n', '        potCntInfo[&#39;90&#39;].entryAmount  = 15;\n', '        potCntInfo[&#39;180&#39;].entryAmount = 25;\n', '        potCntInfo[&#39;365&#39;].entryAmount = 5;\n', '        potCntInfo[&#39;l&#39;].entryAmount   = 2;\n', '    }\n', '\n', '    function enter(string package, address advisor) public payable {\n', '        require(msg.value >= 0.01 ether, "0 ether is not allowed");\n', '\n', '        uint key = 0;\n', '        uint multiplier = 100000000000000;\n', '\n', '        if(keccak256(abi.encodePacked(package)) == keccak256("BasicK")) {\n', '            require(msg.value == 0.01 ether, "Invalid Package Amount");\n', '            key = 1;\n', '        }\n', '        else if (keccak256(abi.encodePacked(package)) == keccak256("PremiumK")){\n', '            require(msg.value == 0.1 ether, "Invalid Package Amount");\n', '            key = 11;\n', '            multiplier = multiplier * 10;\n', '        }\n', '        else if (keccak256(abi.encodePacked(package)) == keccak256("LuxuryK")){\n', '            require(msg.value == 1 ether, "Invalid Package Amount");\n', '            key = 120;\n', '            multiplier = multiplier * 100;\n', '            addRoyLuxList(&#39;l&#39;, &#39;idxLuxury&#39;, now, 500);\n', '        }\n', '        else if (keccak256(abi.encodePacked(package)) == keccak256("RoyalK")){\n', '            require(msg.value == 10 ether, "Invalid Package Amount");\n', '            key = 1300;\n', '            multiplier = multiplier * 1000;\n', '            addRoyLuxList(&#39;r&#39;, &#39;idxRoyal&#39;, now, 100);\n', '        }\n', '\n', '        if (key > 0){\n', '            if ( idxRadd[advisor].flag ) {\n', '                advisor.transfer(potCntInfo[&#39;i&#39;].entryAmount * multiplier);\n', '            }\n', '            else {\n', '                potCntInfo[&#39;i&#39;].balance += potCntInfo[&#39;i&#39;].entryAmount * multiplier;\n', '            }\n', '            potCntInfo[&#39;d&#39;].balance   += potCntInfo[&#39;d&#39;].entryAmount    * multiplier;\n', '            potCntInfo[&#39;7&#39;].balance   += potCntInfo[&#39;7&#39;].entryAmount    * multiplier;\n', '            potCntInfo[&#39;30&#39;].balance  += potCntInfo[&#39;30&#39;].entryAmount   * multiplier;\n', '            potCntInfo[&#39;90&#39;].balance  += potCntInfo[&#39;90&#39;].entryAmount   * multiplier;\n', '            potCntInfo[&#39;180&#39;].balance += potCntInfo[&#39;180&#39;].entryAmount  * multiplier;\n', '            potCntInfo[&#39;365&#39;].balance += potCntInfo[&#39;365&#39;].entryAmount  * multiplier;\n', '            potCntInfo[&#39;l&#39;].balance   += potCntInfo[&#39;l&#39;].entryAmount    * multiplier;\n', '            potCntInfo[&#39;r&#39;].balance   += potCntInfo[&#39;365&#39;].entryAmount  * multiplier;\n', '            potCntInfo[&#39;i&#39;].balance   += potCntInfo[&#39;i&#39;].entryAmount    * multiplier;\n', '            potCntInfo[&#39;dv&#39;].balance  += potCntInfo[&#39;90&#39;].entryAmount   * multiplier;\n', '\n', '            addPlayerMapping(&#39;d&#39;,   &#39;idxDaily&#39;,  key, 0, 0);\n', '            addPlayerMapping(&#39;7&#39;,   &#39;idx7Pot&#39;,   key, 60, 3600);\n', '            addPlayerMapping(&#39;30&#39;,  &#39;idx30Pot&#39;,  key, 90, 10800);\n', '            addPlayerMapping(&#39;90&#39;,  &#39;idx90Pot&#39;,  key, 120, 21600);\n', '            addPlayerMapping(&#39;180&#39;, &#39;idx180Pot&#39;, key, 150, 43200);\n', '            addPlayerMapping(&#39;365&#39;, &#39;idx365Pot&#39;, key, 0, 0);\n', '        }\n', '    }\n', '\n', '    function addPlayerMapping(string x1, string x2, uint key, uint timeAdd, uint hardCap ) private{\n', '      if(potCntInfo[x1].last <= now){\n', '        potCntInfo[x1].last = now;\n', '      }\n', '\n', '      if(keccak256(abi.encodePacked(x1)) == keccak256("d")) {\n', '          if (potCntInfo[x1].gameTime == 0) {\n', '              potCntInfo[x1].gameTime   = now%86400 == 0 ? (now-28800) : now-28800-(now%86400);\n', '              potCntInfo[x1].gtime   = now;\n', '              potCntInfo[x1].last = potCntInfo[x1].gameTime + 1 days;\n', '          }\n', '      }\n', '      else if(keccak256(abi.encodePacked(x1)) == keccak256("365")) {\n', '        if (potCntInfo[x1].gameTime == 0) {\n', '            potCntInfo[x1].gameTime = now%86400 == 0 ? (now-28800) : now-28800-(now%86400);\n', '            potCntInfo[x1].gtime = now;\n', '            potCntInfo[x1].last = potCntInfo[x1].gameTime + 365 days;\n', '            potCntInfo[&#39;l&#39;].gameTime = potCntInfo[x1].gameTime;\n', '            potCntInfo[&#39;r&#39;].gameTime = potCntInfo[x1].gameTime;\n', '            potCntInfo[&#39;l&#39;].gtime   = now;\n', '            potCntInfo[&#39;r&#39;].gtime   = now;\n', '        }\n', '      }else  {\n', '          if (potCntInfo[x1].gameTime == 0) {\n', '              potCntInfo[x1].gameTime   = now%86400 == 0 ? (now-28800) : now-28800-(now%86400);\n', '              potCntInfo[x1].gtime   = now;\n', '              potCntInfo[x1].last = (now + (key * timeAdd))>=now+hardCap ? now + hardCap : now + (key * timeAdd);\n', '          }\n', '          else {\n', '              potCntInfo[x1].last = (potCntInfo[x1].last + (key * timeAdd))>=now+hardCap ? now + hardCap : potCntInfo[x1].last + (key * timeAdd);\n', '          }\n', '      }\n', '\n', '      if (idxStruct[x2].playerStruct[msg.sender].flag == 0) {\n', '          potCntInfo[x1].player.push(msg.sender);\n', '          idxStruct[x2].playerStruct[msg.sender] = PlayerStruct(key, 0, potCntInfo[x1].player.length, potCntInfo[x1].gtime, 1);\n', '      }\n', '      else if (idxStruct[x2].playerStruct[msg.sender].gametime != potCntInfo[x1].gtime){\n', '          potCntInfo[x1].player.push(msg.sender);\n', '          idxStruct[x2].playerStruct[msg.sender] = PlayerStruct(key, 0, potCntInfo[x1].player.length, potCntInfo[x1].gtime, 1);\n', '      }\n', '      else {\n', '          idxStruct[x2].playerStruct[msg.sender].key += key;\n', '      }\n', '      potCntInfo[x1].keys += key;\n', '      potCntInfo[x1].lastPlayer = msg.sender;\n', '    }\n', '\n', '    function joinboard(string name) public payable {\n', '        require(msg.value >= 0.01 ether, "0 ether is not allowed");\n', '\n', '        if (idxR[name].flag == 0 ) {\n', '            idxR[name] = RefStruct(msg.sender, 1);\n', '            potCntInfo[&#39;i&#39;].balance += msg.value;\n', '            idxRadd[msg.sender].name = name;\n', '            idxRadd[msg.sender].flag = true;\n', '        }\n', '        else {\n', '            revert("Name is not unique");\n', '        }\n', '    }\n', '\n', '    function pickFood(uint pickTime, string x1, string x2, uint num, uint c) public restricted {\n', '        uint i = 0;\n', '        uint pCounter = 0;\n', '        uint food = 0;\n', '        if (potCntInfo[x1].player.length > 0 && potCntInfo[x1].food < num) {\n', '            do {\n', '                pCounter = random(potCntInfo[x1].player.length, pickTime+i+pCounter+food);\n', '                food = random(idxStruct[x2].playerStruct[potCntInfo[x1].player[pCounter]].key, pickTime+i+pCounter+food);\n', '                if (potCntInfo[x1].food + food > num) {\n', '                    idxStruct[x2].playerStruct[potCntInfo[x1].player[pCounter]].food += num-potCntInfo[x1].food;\n', '                    potCntInfo[x1].food = num;\n', '                    break;\n', '                }\n', '                else {\n', '                    idxStruct[x2].playerStruct[potCntInfo[x1].player[pCounter]].food += food;\n', '                    potCntInfo[x1].food += food;\n', '                }\n', '                i++;\n', '\n', '                if(potCntInfo[x1].food == num) {\n', '                    break;\n', '                }\n', '            }\n', '            while (i < c);\n', '            potCntInfo[x1].lastRecord = potCntInfo[x1].food == num ? 1 : 0;\n', '        }\n', '        else {\n', '            potCntInfo[x1].lastRecord = 1;\n', '        }\n', '    }\n', '\n', '    function pickWinner(uint pickTime, bool sendDaily, bool send7Pot, bool send30Pot, bool send90Pot, bool send180Pot, bool send365Pot) public restricted{\n', '        hitPotProcess(&#39;7&#39;, send7Pot,  pickTime);\n', '        hitPotProcess(&#39;30&#39;, send30Pot, pickTime);\n', '        hitPotProcess(&#39;90&#39;, send90Pot, pickTime);\n', '        hitPotProcess(&#39;180&#39;, send180Pot, pickTime);\n', '\n', '        maturityProcess(&#39;d&#39;, sendDaily, pickTime, 86400);\n', '        maturityProcess(&#39;7&#39;, send7Pot, pickTime, 604800);\n', '        maturityProcess(&#39;30&#39;, send30Pot, pickTime, 2592000);\n', '        maturityProcess(&#39;90&#39;, send90Pot, pickTime, 7776000);\n', '        maturityProcess(&#39;180&#39;, send180Pot, pickTime, 15552000);\n', '        maturityProcess(&#39;365&#39;, send365Pot, pickTime, 31536000);\n', '        maturityProcess(&#39;l&#39;, send365Pot, pickTime, 31536000);\n', '        maturityProcess(&#39;r&#39;, send365Pot, pickTime, 31536000);\n', '    }\n', '\n', '    function hitPotProcess(string x1, bool send, uint pickTime) private {\n', '        if( pickTime > potCntInfo[x1].last) {\n', '            if (potCntInfo[x1].balance > 0 && send) {\n', '                if (pickTime - potCntInfo[x1].last >= 20) {\n', '                    potCntInfo[x1].balance = 0;\n', '                    potCntInfo[x1].food = 0;\n', '                    potCntInfo[x1].keys = 0;\n', '                    delete potCntInfo[x1].player;\n', '                    potCntInfo[x1].gameTime = 0;\n', '                    potCntInfo[x1].gtime = pickTime;\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    function maturityProcess(string x1, bool send, uint pickTime, uint addTime) private {\n', '      if( pickTime > potCntInfo[x1].gameTime) {\n', '          if ( (pickTime - potCntInfo[x1].gameTime) >= addTime) {\n', '            if (potCntInfo[x1].balance > 0 && send) {\n', '                potCntInfo[x1].balance = 0;\n', '                potCntInfo[x1].food = 0;\n', '                potCntInfo[x1].keys = 0;\n', '                delete potCntInfo[x1].player;\n', '                potCntInfo[x1].gameTime = 0;\n', '                potCntInfo[x1].gtime    = pickTime;\n', '            }\n', '        }\n', '      }\n', '    }\n', '\n', '    modifier restricted() {\n', '        require(msg.sender == manager, "Only manager is allowed");\n', '        _;\n', '    }\n', '\n', '    function random(uint maxNum, uint timestamp) private view returns (uint){\n', '        return uint(keccak256(abi.encodePacked(block.difficulty, timestamp, potCntInfo[&#39;d&#39;].balance, potCntInfo[&#39;7&#39;].balance, potCntInfo[&#39;30&#39;].balance, potCntInfo[&#39;90&#39;].balance, potCntInfo[&#39;180&#39;].balance, potCntInfo[&#39;365&#39;].balance))) % maxNum;\n', '    }\n', '\n', '    function addRoyLuxList(string x1, string x2, uint timestamp, uint num) private {\n', '        uint pick;\n', '\n', '        if ( potCntInfo[x1].player.length < num) {\n', '            if (idxStruct[x2].playerStruct[msg.sender].flag == 0 ) {\n', '                idxStruct[x2].playerStruct[msg.sender] = PlayerStruct(0, 0, potCntInfo[x1].player.length, potCntInfo[&#39;365&#39;].gtime, 1);\n', '                potCntInfo[x1].player.push(msg.sender);\n', '            }\n', '            else if (idxStruct[x2].playerStruct[msg.sender].gametime != potCntInfo[&#39;365&#39;].gtime ) {\n', '                idxStruct[x2].playerStruct[msg.sender] = PlayerStruct(0, 0, potCntInfo[x1].player.length, potCntInfo[&#39;365&#39;].gtime, 1);\n', '                potCntInfo[x1].player.push(msg.sender);\n', '            }\n', '        }\n', '        else {\n', '            if (idxStruct[x2].playerStruct[msg.sender].flag == 0 ) {\n', '                pick = random(potCntInfo[x1].player.length, timestamp);\n', '                idxStruct[x2].playerStruct[msg.sender] = PlayerStruct(0, 0, idxStruct[x2].playerStruct[potCntInfo[x1].player[pick]].idx, potCntInfo[&#39;365&#39;].gtime, 1);\n', '                idxStruct[x2].playerStruct[potCntInfo[x1].player[pick]].flag = 0;\n', '                potCntInfo[x1].player[pick] = msg.sender;\n', '            }\n', '            else if (idxStruct[x2].playerStruct[msg.sender].gametime != potCntInfo[&#39;365&#39;].gtime ) {\n', '                pick = random(potCntInfo[x1].player.length, timestamp);\n', '                idxStruct[x2].playerStruct[msg.sender] = PlayerStruct(0, 0, idxStruct[x2].playerStruct[potCntInfo[x1].player[pick]].idx, potCntInfo[&#39;365&#39;].gtime, 1);\n', '                idxStruct[x2].playerStruct[potCntInfo[x1].player[pick]].flag = 0;\n', '                potCntInfo[x1].player[pick] = msg.sender;\n', '            }\n', '        }\n', '    }\n', '\n', '    function getPotCnt(string x) public constant returns(uint count, uint pLast, uint pot, uint keystore, uint gtime, uint gameTime, uint food) {\n', '        return (potCntInfo[x].player.length, potCntInfo[x].last, potCntInfo[x].balance, potCntInfo[x].keys, potCntInfo[x].gtime, potCntInfo[x].gameTime, potCntInfo[x].food);\n', '    }\n', '\n', '    function getIdx(string x1, string x2, uint p) public constant returns(address p1, uint key, uint food, uint gametime, uint flag) {\n', '        return (potCntInfo[x1].player[p], idxStruct[x2].playerStruct[potCntInfo[x1].player[p]].key, idxStruct[x2].playerStruct[potCntInfo[x1].player[p]].food, idxStruct[x2].playerStruct[potCntInfo[x1].player[p]].gametime, idxStruct[x2].playerStruct[potCntInfo[x1].player[p]].flag);\n', '    }\n', '\n', '    function getLast(string x) public constant returns(uint lastRecord) {\n', '        return potCntInfo[x].lastRecord;\n', '    }\n', '\n', '    function getLastPlayer(string x) public constant returns(address lastPlayer) {\n', '        return potCntInfo[x].lastPlayer;\n', '    }\n', '\n', '    function sendFood(address p, uint food) public restricted {\n', '         p.transfer(food);\n', '    }\n', '\n', '    function sendFoods(address[500] p, uint[500] food) public restricted {\n', '        for(uint k = 0; k < p.length; k++){\n', '            if (food[k] == 0) {\n', '                return;\n', '            }\n', '            p[k].transfer(food[k]);\n', '        }\n', '    }\n', '\n', '    function sendItDv(string x1) public restricted {\n', '        msg.sender.transfer(potCntInfo[x1].balance);\n', '        potCntInfo[x1].balance = 0;\n', '    }\n', '\n', '    function sendDv(string x1) public restricted {\n', '        potCntInfo[x1].balance = 0;\n', '    }\n', '\n', '    function getReffAdd(string x) public constant returns(address){\n', '      if( idxR[x].flag == 1){\n', '        return idxR[x].player;\n', '      }else{\n', '        revert("Not found!");\n', '      }\n', '    }\n', '\n', '    function getReffName(address x) public constant returns(string){\n', '      if( idxRadd[x].flag){\n', '        return idxRadd[x].name;\n', '      }else{\n', '        revert("Not found!");\n', '      }\n', '    }\n', '}']