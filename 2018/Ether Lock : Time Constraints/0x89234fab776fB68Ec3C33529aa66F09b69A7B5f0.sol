['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  // уточниьт у МЕноскоп про этот функционал  - убрали  передачу владения (по итогам встречи 20171128)\n', '  /*\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '  */\n', '}\n', '\n', '//Abstract contract for Calling ERC20 contract\n', 'contract AbstractCon {\n', '    function allowance(address _owner, address _spender)  public pure returns (uint256 remaining);\n', '    function transferFrom(address _from, address _to, uint256 _value) public  returns (bool success);\n', '    function token_rate() public returns (uint256);\n', '    function minimum_token_sell() public returns (uint16);\n', '    function decimals() public returns (uint8);\n', '    //function approve(address _spender, uint256 _value) public returns (bool); //test\n', '    //function transfer(address _to, uint256 _value) public returns (bool); //test\n', '    \n', '}\n', '\n', '//ProxyDeposit\n', 'contract SynergisProxyDeposit is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    ///////////////////////\n', '    // DATA STRUCTURES  ///\n', '    ///////////////////////\n', '    enum Role {Fund, Team, Adviser}\n', '    struct Partner {\n', '        Role roleInProject;\n', '        address account;\n', '        uint256  amount;\n', '    }\n', '\n', '    mapping (int16 => Partner)  public partners; //public for dubug only\n', '    mapping (address => uint8) public special_offer;// % of discount\n', '\n', '\n', '    /////////////////////////////////////////\n', '    // STAKE for partners    - fixed !!!   //\n', '    /////////////////////////////////////////\n', '    uint8 constant Stake_Team = 10;\n', '    uint8 constant Stake_Adv = 5;\n', '\n', '    string public constant name = "SYNERGIS_TOKEN_CHANGE";\n', '\n', '\n', '    uint8 public numTeamDeposits = 0; //public for dubug only\n', '    uint8 public numAdviserDeposits = 0; //public for dubug only\n', '    int16 public maxId = 1;// public for dubug only\n', '    uint256 public notDistributedAmount = 0;\n', '    uint256 public weiRaised; //All raised ether\n', '    address public ERC20address;\n', '\n', '    ///////////////////////\n', '    /// EVENTS     ///////\n', '    //////////////////////\n', '    event Income(address from, uint256 amount);\n', '    event NewDepositCreated(address _acc, Role _role, int16 _maxid);\n', '    event DeletedDeposit(address _acc, Role _role, int16 _maxid, uint256 amount);\n', '    event DistributeIncome(address who, uint256 notDistrAm, uint256 distrAm);\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 weivalue, uint256 tokens);\n', '    event FundsWithdraw(address indexed who, uint256 amount );\n', '    event DepositIncome(address indexed _deposit, uint256 _amount );\n', '    event SpecialOfferAdd(address _acc, uint16 _discount);\n', '    event SpecialOfferRemove(address _acc);\n', '     \n', '\n', '    //!!!! Fund Account address must be defind and provided in constructor\n', '    constructor (address fundAcc) public {\n', '        //costructor\n', '        require(fundAcc != address(0)); //Fund must exist\n', '        partners[0]=Partner(Role.Fund, fundAcc, 0);// Always must be Fund\n', '    }\n', '\n', '    function() public payable {\n', '        emit Income(msg.sender, msg.value);\n', '        sellTokens(msg.sender);\n', '    }\n', '\n', '        // low level token purchase function\n', '    function sellTokens(address beneficiary) internal  {  //public payable modificatros- for truffle tests only\n', '        uint256 weiAmount = msg.value; //local\n', '        notDistributedAmount = notDistributedAmount.add(weiAmount);//\n', '        AbstractCon ac = AbstractCon(ERC20address);\n', '        //calculate token amount for sell -!!!! must check on minimum_token_sell\n', '        uint256 tokens = weiAmount.mul(ac.token_rate()*(100+uint256(special_offer[beneficiary])))/100;\n', '        require(beneficiary != address(0));\n', '        require(ac.token_rate() > 0);//implicit enabling/disabling sell\n', '        require(tokens >= ac.minimum_token_sell()*(10 ** uint256(ac.decimals())));\n', '        require(ac.transferFrom(ERC20address, beneficiary, tokens));//!!!token sell/change\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        emit TokenPurchase(msg.sender, beneficiary, msg.value, tokens);\n', '    }\n', '\n', '    //set   erc20 address for token process  with check of allowance \n', '    function setERC20address(address currentERC20contract)  public onlyOwner {\n', '        require(address(currentERC20contract) != 0);\n', '        AbstractCon ac = AbstractCon(currentERC20contract);\n', '        require(ac.allowance(currentERC20contract, address(this))>0);\n', '        ERC20address = currentERC20contract;\n', '    }    \n', '\n', '    /////////////////////////////////////////\n', '    // PARTNERS DEPOSIT MANAGE          /////\n', '    /////////////////////////////////////////\n', '    //Create new deposit account\n', '    function newDeposit(Role _role, address _dep) public onlyOwner returns (int16){\n', '        require(getDepositID(_dep)==-1);//chek double\n', '        require(_dep != address(0));\n', '        require(_dep != address(this));\n', '        int16 depositID = maxId++;//first=, then ++\n', '        partners[depositID]=Partner(_role, _dep, 0);//new deposit with 0 ether\n', '        //We need to know number of deposits per Role\n', '        if (_role==Role.Team) {\n', '            numTeamDeposits++; // For quick calculate stake\n', '        }\n', '        if (_role==Role.Adviser) {\n', '            numAdviserDeposits++; // For quick calculate stake\n', '        }\n', '        emit NewDepositCreated(_dep, _role, depositID);\n', '        return depositID;\n', '    }\n', '\n', '    //Delete Team or Adviser accounts\n', '    function deleteDeposit(address dep) public onlyOwner {\n', '        int16 depositId = getDepositID(dep);\n', '        require(depositId>0);\n', '        //can`t delete Fund deposit account\n', '        require(partners[depositId].roleInProject != Role.Fund);\n', '        //Decrease deposits number befor deleting\n', '        if (partners[depositId].roleInProject==Role.Team) {\n', '            numTeamDeposits--;\n', '        }\n', '        if (partners[depositId].roleInProject==Role.Adviser) {\n', '            numAdviserDeposits--;\n', '        }\n', '        //return current Amount of deleting Deposit  to  notDistributedAmount\n', '        notDistributedAmount = notDistributedAmount.add(partners[depositId].amount);\n', '        emit DeletedDeposit(dep, partners[depositId].roleInProject, depositId, partners[depositId].amount);\n', '        delete(partners[depositId]);\n', '\n', '    }\n', '\n', '    function getDepositID(address dep) internal constant returns (int16 id){\n', '        //id = -1; //not found\n', '        for (int16 i=0; i<=maxId; i++) {\n', '            if (dep==partners[i].account){\n', '                //id=i;\n', '                //return id;\n', '                return i;\n', '            }\n', '        }\n', '        return -1;\n', '    }\n', '\n', '    //withdraw with pull payee patern\n', '    function withdraw() external {\n', '        int16 id = getDepositID(msg.sender);\n', '        require(id >=0);\n', '        uint256 amount = partners[id].amount;\n', '        // set to zero the pending refund before\n', '        // sending to prevent re-entrancy attacks\n', '        partners[id].amount = 0;\n', '        msg.sender.transfer(amount);\n', '        emit FundsWithdraw(msg.sender, amount);\n', '    }\n', '\n', '\n', '    function distributeIncomeEther() public onlyOwner { \n', '        require(notDistributedAmount !=0);\n', '        uint256 distributed;\n', '        uint256 sum;\n', '        uint256 _amount;\n', '        for (int16 i=0; i<=maxId; i++) {\n', '            if  (partners[i].account != address(0) ){\n', '                sum = 0;\n', '                if  (partners[i].roleInProject==Role.Team) {\n', '                    sum = notDistributedAmount/100*Stake_Team/numTeamDeposits;\n', '                    emit DepositIncome(partners[i].account, uint256(sum));\n', '                }\n', '                if  (partners[i].roleInProject==Role.Adviser) {\n', '                    sum = notDistributedAmount/100*Stake_Adv/numAdviserDeposits;\n', '                    emit DepositIncome(partners[i].account, uint256(sum));\n', '                }\n', '                if  (partners[i].roleInProject==Role.Fund) {\n', '                    int16 fundAccountId=i; //just Remember last id\n', '                } else {\n', '                    partners[i].amount = partners[i].amount.add(sum);\n', '                    distributed = distributed.add(sum);\n', '                }\n', '            }\n', '        }\n', '        //And now Amount for Fund = notDistributedAmount - distributed\n', '        emit DistributeIncome(msg.sender, notDistributedAmount, distributed);\n', '        _amount = notDistributedAmount.sub(distributed);\n', '        partners[fundAccountId].amount =\n', '                 partners[fundAccountId].amount.add(_amount);\n', '        emit DepositIncome(partners[fundAccountId].account, uint256(_amount));         \n', '        notDistributedAmount = 0;\n', '        //проверить  на  ошибку   округления.\n', '    }\n', '\n', '\n', '    //Check of red_balance\n', '    function checkBalance() public constant returns (uint256 red_balance) {\n', '        // this.balance = notDistributedAmount + Sum(all deposits)\n', '        uint256 allDepositSum;\n', '        for (int16 i=0; i<=maxId; i++) {\n', '            allDepositSum = allDepositSum.add(partners[i].amount);\n', '        }\n', '        red_balance = address(this).balance.sub(notDistributedAmount).sub(allDepositSum);\n', '        return red_balance;\n', '    }\n', '\n', '    //общая практика,  но уменьшает прозрачность и доверие -убрали destroy (по итогам встречи 20171128)\n', '    /*\n', '    function destroy() onlyOwner public {\n', '        selfdestruct(owner);\n', '    }\n', '    */\n', '\n', '    //////////////////////////////////////////////////////////////////////\n', '    /////  SPECIAL OFFER MANAGE - DISCOUNTS        ///////////////////////\n', '    //////////////////////////////////////////////////////////////////////\n', '\n', '        //For add percent discount for some purchaser - see WhitePaper\n', '    function addSpecialOffer (address vip, uint8 discount_percent) public onlyOwner {\n', '        require(discount_percent>0 && discount_percent<100);\n', '        special_offer[vip] = discount_percent;\n', '        emit SpecialOfferAdd(vip, discount_percent);\n', '    }\n', '\n', '    //For remove discount for some purchaser - see WhitePaper\n', '    function removeSpecialOffer(address was_vip) public onlyOwner {\n', '        special_offer[was_vip] = 0;\n', '        emit SpecialOfferRemove(was_vip);\n', '    }\n', '  //***************************************************************\n', '  //Token Change Contract Design by IBERGroup, email:maxsizmobile@iber.group; \n', '  //     Telegram: https://t.me/msmobile\n', '  //\n', '  ////**************************************************************\n', '}']