['pragma solidity ^0.4.24;\n', '/**\n', ' * Marriage\n', ' * Copyright (c) 2018 MING-CHIEN LEE\n', ' */\n', 'contract owned {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', 'contract Marriage is owned {\n', '    // Marriage data variables\n', '    bytes32 public partner1;\n', '    bytes32 public partner2;\n', '    uint256 public marriageDate;\n', '    bytes32 public marriageStatus;\n', '    bytes public imageHash;\n', '    bytes public marriageProofDoc;\n', '    \n', '    constructor() public {\n', '        createMarriage();\n', '    }\n', '\n', '    // Create initial marriage contract\n', '    function createMarriage() onlyOwner public {\n', '        partner1 = "Edison Lee";\n', '        partner2 = "Chino Kafuu";\n', '        marriageDate = 1526983200;\n', '        setStatus("Married");\n', '        bytes32 name = "Marriage Contract Creation";\n', '        \n', '        majorEventFunc(marriageDate, name, "We got married!");\n', '    }\n', '    \n', '    // Set the marriage status if it changes\n', '    function setStatus(bytes32 status) onlyOwner public {\n', '        marriageStatus = status;\n', '        majorEventFunc(block.timestamp, "Changed Status", status);\n', '    }\n', '    \n', '    // Set the IPFS hash of the image of the couple\n', '    function setImage(bytes IPFSImageHash) onlyOwner public {\n', '        imageHash = IPFSImageHash;\n', '        majorEventFunc(block.timestamp, "Entered Marriage Image", "Image is in IPFS");\n', '    }\n', '    \n', '    // Upload documentation for proof of marrage like a marriage certificate\n', '    function marriageProof(bytes IPFSProofHash) onlyOwner public {\n', '        marriageProofDoc = IPFSProofHash;\n', '        majorEventFunc(block.timestamp, "Entered Marriage Proof", "Marriage proof in IPFS");\n', '    }\n', '\n', '    // Log major life events\n', '    function majorEventFunc(uint256 eventTimeStamp, bytes32 name, bytes32 description) public {\n', '        emit MajorEvent(block.timestamp, eventTimeStamp, name, description);\n', '    }\n', '\n', '    // Declare event structure\n', '    event MajorEvent(uint256 logTimeStamp, uint256 eventTimeStamp, bytes32 indexed name, bytes32 indexed description);\n', '    \n', '    // This function gets executed if a transaction with invalid data is sent to\n', '    // the contract or just ether without data. We revert the send so that no-one\n', '    // accidentally loses money when using the contract.\n', '    function () public {\n', '        revert();\n', '    }\n', '}']