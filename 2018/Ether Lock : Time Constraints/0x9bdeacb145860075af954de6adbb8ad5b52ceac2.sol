['pragma solidity ^0.4.19;\n', '\n', '/**\n', '   @title HODL\n', '\n', '   A smart contract for real HOLDERS, all ETH received here can be withdraw a year \n', '   after it was deposited.\n', ' */\n', 'contract HODL {\n', '\n', '    // 1 Year to relase the funds\n', '    uint256 public RELEASE_TIME = 1 years;\n', '\n', '    // Balances on hold\n', '    mapping(address => Deposit) deposits;\n', '    \n', '    struct Deposit {\n', '        uint256 value;\n', '        uint256 releaseTime;\n', '    }\n', '    \n', '    /**\n', '     @dev Fallback function\n', '\n', '     Everytime the contract receives ETH it will check if there is a deposit\n', '     made by the `msg.sender` if there is one the value of the tx wil be added\n', '     to the current deposit and the release time will be reseted adding a year\n', '     If there is not deposit created by the `msg.sender` it will be created.\n', '   */\n', '    function () public payable {\n', '        require(msg.value > 0);\n', '        \n', '        if (deposits[msg.sender].releaseTime == 0) {\n', '            uint256 releaseTime = now + RELEASE_TIME;\n', '            deposits[msg.sender] = Deposit(msg.value, releaseTime);\n', '        } else {\n', '            deposits[msg.sender].value += msg.value;\n', '            deposits[msg.sender].releaseTime += RELEASE_TIME;\n', '        }\n', '    }\n', '    \n', '    /**\n', '     @dev withdraw function\n', '\n', '     This function can be called by a holder after a year of his last deposit\n', '     and it will transfer all the ETH deposited back to him.\n', '   */\n', '    function withdraw() public {\n', '        require(deposits[msg.sender].value > 0);\n', '        require(deposits[msg.sender].releaseTime < now);\n', '        \n', '        msg.sender.transfer(deposits[msg.sender].value);\n', '        \n', '        deposits[msg.sender].value = 0;\n', '        deposits[msg.sender].releaseTime = 0;\n', '    }\n', '    \n', '    /**\n', '     @dev getDeposit function\n', '     It returns the deposited value and release time from a holder.\n', '\n', '     @param holder address The holder address\n', '\n', '     @return uint256 value Amount of ETH deposited in wei\n', '     @return uint256 releaseTime Timestamp of when the the deposit can returned\n', '   */\n', '    function getDeposit(address holder) public view returns\n', '        (uint256 value, uint256 releaseTime)\n', '    {\n', '        return(deposits[holder].value, deposits[holder].releaseTime);\n', '    }\n', '}']