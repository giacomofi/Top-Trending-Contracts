['pragma solidity ^0.4.11;\n', '/**\n', ' * Contract that exposes the needed erc20 token functions\n', ' */\n', '\n', 'contract ERC20Interface {\n', '  // Send _value amount of tokens to address _to\n', '  function transfer(address _to, uint256 _value) public returns (bool success);\n', '  // Get the account balance of another account with address _owner\n', '  function balanceOf(address _owner) public constant returns (uint256 balance);\n', '}\n', '/**\n', ' * Contract that will forward any incoming Ether to the creator of the contract\n', ' */\n', 'contract Forwarder {\n', '  // Address to which any funds sent to this contract will be forwarded\n', '  address public parentAddress;\n', '  event ForwarderDeposited(address from, uint value, bytes data);\n', '\n', '  /**\n', '   * Create the contract, and sets the destination address to that of the creator\n', '   */\n', '  function Forwarder(address pool) public {\n', '    parentAddress = 0xE4402b9f8034A9B2857FFeE4Cf96605a364B16A1;\n', '  }\n', ' \n', '  /**\n', '   * Modifier that will execute internal code block only if the sender is the parent address\n', '   */\n', '  modifier onlyParent {\n', '    if (msg.sender != parentAddress) {\n', '      revert();\n', '    }\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * Default function; Gets called when Ether is deposited, and forwards it to the parent address\n', '   */\n', '  function() public payable {\n', '    // throws on failure\n', '    parentAddress.transfer(msg.value);\n', '    // Fire off the deposited event if we can forward it\n', '    ForwarderDeposited(msg.sender, msg.value, msg.data);\n', '  }\n', '\n', '  /**\n', '   * Execute a token transfer of the full balance from the forwarder token to the parent address\n', '   * @param tokenContractAddress the address of the erc20 token contract\n', '   */\n', '  function flushTokens(address tokenContractAddress) public {\n', '    ERC20Interface instance = ERC20Interface(tokenContractAddress);\n', '    var forwarderAddress = address(this);\n', '    var forwarderBalance = instance.balanceOf(forwarderAddress);\n', '    if (forwarderBalance == 0) {\n', '      return;\n', '    }\n', '    if (!instance.transfer(parentAddress, forwarderBalance)) {\n', '      revert();\n', '    }\n', '  }\n', '\n', '  /**\n', '   * It is possible that funds were sent to this address before the contract was deployed.\n', '   * We can flush those funds to the parent address.\n', '   */\n', '  function flush() public {\n', '    // throws on failure\n', '    parentAddress.transfer(this.balance);\n', '  }\n', '}\n', '\n', '// This is a test target for a Forwarder.\n', '// It contains a public function with a side-effect.\n', 'contract ForwarderTarget {\n', '  uint public data;\n', '\n', '  function ForwarderTarget() public {\n', '  }\n', '\n', '  function createForwarder(address pool) public returns (address) {\n', '    return new Forwarder(pool);\n', '  }\n', '\n', '  function() public payable {\n', '    // accept unspendable balance\n', '  }\n', '}']