['pragma solidity ^0.4.21;\n', '\n', 'contract Math\n', '{\n', '    /*\n', '    standard uint256 functions\n', '     */\n', '\n', '    function add(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x + y) >= x);\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x - y) <= x);\n', '    }\n', '\n', '    function mul(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x * y) >= x);\n', '    }\n', '\n', '    function div(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        z = x / y;\n', '    }\n', '\n', '    function min(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function max(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '}\n', '\n', 'contract Grass is Math\n', '{\n', '  uint256 public availableTokens;\n', '  uint256 currentTokenPriceInDollar;\n', '\n', '  uint256 public lastUpdateEtherPrice;\n', '  uint256 public etherPriceInDollarIn;\n', '  uint256 public etherPriceInDollarOut;\n', '\n', '  function getCurrentTokenPrice() public constant returns (uint256)\n', '  {\n', '      uint256 today = getToday();\n', '      return (tokenPriceHistory[today] == 0)?currentTokenPriceInDollar:tokenPriceHistory[today];\n', '  }\n', '\n', '  mapping(uint256 => uint256) public tokenPriceHistory;\n', '  struct ExtraTokensInfo\n', '  {\n', '    uint256 timestamp;\n', '    uint256 extraTokens;\n', '    string  proofLink;\n', '    uint256 videoFileHash;\n', '  }\n', '\n', '  ExtraTokensInfo[] public extraTokens;\n', '\n', '  struct TokenInfo\n', '  {\n', '    uint256 amount;\n', '    bool isReturnedInPool;\n', '  }\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '  // address => day => amount\n', '  mapping(address => mapping(uint256 => TokenInfo)) timeTable;\n', '  mapping(address => mapping(uint256 => uint256)) bonuses;\n', '  mapping (address => uint256) public balances;\n', '  uint256 public totalSupply;\n', '\n', '  string public name;\n', '  uint8 public decimals;\n', '  string public symbol;\n', '\n', '  bool isCanBuy = true;\n', '\n', '  modifier canBuy()\n', '  {\n', '      assert(isCanBuy);\n', '      _;\n', '  }\n', '\n', '  function changeState(bool bNewState) public onlyAdmin\n', '  {\n', '      isCanBuy = bNewState;\n', '  }\n', '\n', '  address owner;\n', '  mapping(address => bool) admins;\n', '  modifier onlyAdmin()\n', '  {\n', '      assert(admins[msg.sender] == true || msg.sender == owner);\n', '      _;\n', '  }\n', '\n', '  modifier onlyOwner()\n', '  {\n', '      assert(msg.sender == owner);\n', '      _;\n', '  }\n', '  function addAdmin(address addr) public onlyOwner\n', '  {\n', '      admins[addr] = true;\n', '  }\n', '  function removeAdmin(address addr) public onlyOwner\n', '  {\n', '      admins[addr] = false;\n', '  }\n', '\n', '  function Grass() public\n', '  {\n', '    // startTime = block.timestamp;\n', '    owner = msg.sender;\n', '    admins[msg.sender] = true;\n', '    totalSupply = 0;\n', '    name = &#39;GRASS Token&#39;;\n', '    decimals = 18;\n', '    symbol = &#39;GRASS&#39;;\n', '    availableTokens = 800 * 10**18;\n', '    currentTokenPriceInDollar = 35 * 100; // 35.00$ (price may change)\n', '\n', '    etherPriceInDollarIn = 388 * 100;\n', '    etherPriceInDollarOut = 450 * 100;\n', '    lastUpdateEtherPrice = block.timestamp;\n', '  }\n', '\n', '  function increaseMaxAvailableTokens(uint256 amount, string link, uint256 videoFileHash) onlyAdmin public\n', '  {\n', '    extraTokens.push(ExtraTokensInfo(block.timestamp, amount, link, videoFileHash));\n', '    availableTokens = add(availableTokens, amount);\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '      return balances[_owner];\n', '  }\n', '\n', '  function updateEtherPrice (uint256 newPriceIn, uint256 newPriceOut) onlyAdmin public\n', '  {\n', '    etherPriceInDollarIn = newPriceIn;\n', '    etherPriceInDollarOut = newPriceOut;\n', '    lastUpdateEtherPrice = block.timestamp;\n', '  }\n', '\n', '  modifier isEtherPriceUpdated()\n', '  {\n', '      require(now - lastUpdateEtherPrice < 24 hours);\n', '      _;\n', '  }\n', '\n', '  function updateTokenPrice (uint256 newPrice) onlyAdmin public\n', '  {\n', '    currentTokenPriceInDollar = newPrice;\n', '  }\n', '\n', '  function getToday() public constant returns (uint256)\n', '  {\n', '    return block.timestamp / 24 hours;\n', '  }\n', '\n', '  function() isEtherPriceUpdated canBuy isInitialized payable public\n', '  {\n', '    buyInternal(msg.sender);\n', '  }\n', '\n', '  function buyFor(address addr) isEtherPriceUpdated canBuy onlyAdmin isInitialized payable public\n', '  {\n', '    buyInternal(addr);\n', '  }\n', '\n', '  function buy() isEtherPriceUpdated canBuy payable isInitialized public\n', '  {\n', '    buyInternal(msg.sender);\n', '  }\n', '\n', '  function getPartnerBalance (address addr) public view returns(uint256)\n', '  {\n', '    return partners[addr];\n', '  }\n', '\n', '  function partnerWithdraw () isInitialized public\n', '  {\n', '    assert (partners[msg.sender] > 0);\n', '    uint256 ethToWidthdraw = partners[msg.sender];\n', '    partners[msg.sender] = 0;\n', '    msg.sender.transfer(ethToWidthdraw);\n', '  }\n', '\n', '  mapping(address => uint256) partners;\n', '  // refferal => partner\n', '  mapping(address => address) referrals;\n', '\n', '  function takeEther(address dest, uint256 amount) onlyAdmin public\n', '  {\n', '      dest.transfer(amount);\n', '  }\n', '\n', '  function addEther() payable onlyAdmin public\n', '  {\n', '  }\n', '\n', '  function buyWithPromo(address partner) isEtherPriceUpdated canBuy isInitialized payable public\n', '  {\n', '      if (referrals[msg.sender] == 0 && partner != msg.sender)\n', '      {\n', '        referrals[msg.sender] = partner;\n', '      }\n', '\n', '      buyInternal(msg.sender);\n', '  }\n', '\n', '  function buyInternal(address addr) internal\n', '  {\n', '    if (referrals[addr] != 0)\n', '    {\n', '        partners[referrals[addr]] += msg.value / 100; // 1% to partner\n', '    }\n', '\n', '    assert (isContract(addr) == false);\n', '\n', '    // проверка lastUpdateEtherPrice\n', '    uint256 today = getToday();\n', '    if (tokenPriceHistory[today] == 0) tokenPriceHistory[today] = currentTokenPriceInDollar;\n', '\n', '    // timeTable\n', '    uint256 amount = msg.value * etherPriceInDollarIn / tokenPriceHistory[today] ;\n', '    if (amount > availableTokens)\n', '    {\n', '       addr.transfer((amount - availableTokens) * tokenPriceHistory[today] / etherPriceInDollarIn);\n', '       amount = availableTokens;\n', '    }\n', '\n', '    assert(amount > 0);\n', '\n', '    availableTokens = sub(availableTokens, amount);\n', '\n', '    // is new day ?\n', '    if (timeTable[addr][today].amount == 0)\n', '    {\n', '      timeTable[addr][today] = TokenInfo(amount, false);\n', '    }\n', '    else\n', '    {\n', '      timeTable[addr][today].amount += amount;\n', '    }\n', '\n', '    //                  < 30.03.2018\n', '    if (block.timestamp < 1522357200 && bonuses[addr][today] == 0)\n', '    {\n', '      bonuses[addr][today] = 1;\n', '    }\n', '\n', '    balances[addr] = add(balances[addr], amount);\n', '    totalSupply = add(totalSupply, amount);\n', '    emit Transfer(0, addr, amount);\n', '  }\n', '\n', '  function calculateProfit (uint256 day) public constant returns(int256)\n', '  {\n', '    uint256 today = getToday();\n', '    assert(today >= day);\n', '    uint256 daysLeft = today - day;\n', '    int256 extraProfit = 0;\n', '\n', '    // is referral ?\n', '    if (referrals[msg.sender] != 0) extraProfit++;\n', '    // participant until March 30\n', '    if (bonuses[msg.sender][day] > 0) extraProfit++;\n', '\n', '    if (daysLeft <= 7) return -10;\n', '    if (daysLeft <= 14) return -5;\n', '    if (daysLeft <= 21) return 1 + extraProfit;\n', '    if (daysLeft <= 28) return 3 + extraProfit;\n', '    if (daysLeft <= 60) return 5 + extraProfit;\n', '    if (daysLeft <= 90) return 12 + extraProfit;\n', '    return 18 + extraProfit;\n', '  }\n', '\n', '  function getTokensPerDay(uint256 _day) public view returns (uint256)\n', '  {\n', '      return timeTable[msg.sender][_day].amount;\n', '  }\n', '\n', '  // returns amount, ether\n', '  function getProfitForDay(uint256 day, uint256 amount) isEtherPriceUpdated public constant returns(uint256, uint256)\n', '  {\n', '    assert (day <= getToday());\n', '\n', '    uint256 tokenPrice = tokenPriceHistory[day];\n', '    if (timeTable[msg.sender][day].amount < amount) amount = timeTable[msg.sender][day].amount;\n', '\n', '    assert (amount > 0);\n', '\n', '    return (amount, amount * tokenPrice * uint256(100 + calculateProfit(day)) / 100 / etherPriceInDollarOut);\n', '  }\n', '\n', '  function returnTokensInPool (address[] addr, uint256[] _days) public\n', '  {\n', '    assert (addr.length == _days.length);\n', '\n', '    TokenInfo storage info;\n', '    for(uint256 i = 0; i < addr.length;i++)\n', '    {\n', '      assert(_days[i] + 92 < getToday() && info.amount > 0);\n', '      info = timeTable[addr[i]][_days[i]];\n', '      info.isReturnedInPool = true;\n', '      availableTokens = add(availableTokens, info.amount);\n', '    }\n', '  }\n', '\n', '  function getInfo(address addr, uint256 start, uint256 end) public constant returns (uint256[30] _days, uint256[30] _amounts, int256[30] _profits, uint256[30] _etherAmounts)\n', '  {\n', '      if (addr == 0) addr = msg.sender;\n', '\n', '      uint256 j = 0;\n', '      for(uint256 iDay = start; iDay < end; iDay++)\n', '      {\n', '        if (timeTable[addr][iDay].amount > 0)\n', '        {\n', '          _days[j] = iDay;\n', '          _profits[j] = calculateProfit(iDay);\n', '          _amounts[j] = timeTable[addr][iDay].amount;\n', '          (_amounts[j], _etherAmounts[j]) = getProfitForDay(iDay, _amounts[j]);\n', '          j++;\n', '          if (j == 30) break;\n', '        }\n', '      }\n', '  }\n', '\n', '  function returnTokensForDay(uint256 day, uint256 userTokensAmount) isInitialized public\n', '  {\n', '    uint256 tokensAmount;\n', '    uint256 etherAmount;\n', '    (tokensAmount, etherAmount) = getProfitForDay(day, userTokensAmount);\n', '\n', '    require(day > 0);\n', '    require(balances[msg.sender] >= tokensAmount);\n', '\n', '    balances[msg.sender] = sub(balances[msg.sender], tokensAmount);\n', '    totalSupply = sub(totalSupply, tokensAmount);\n', '    timeTable[msg.sender][day].amount = sub(timeTable[msg.sender][day].amount, tokensAmount);\n', '\n', '    if (!timeTable[msg.sender][day].isReturnedInPool)\n', '    {\n', '      availableTokens = add(availableTokens, tokensAmount);\n', '    }\n', '\n', '    msg.sender.transfer(etherAmount);\n', '    emit Transfer(msg.sender, 0, tokensAmount);\n', '  }\n', '\n', '  function isContract(address addr) internal returns (bool)\n', '  {\n', '    uint256 size;\n', '    assembly { size := extcodesize(addr) }\n', '    return size > 0;\n', '  }\n', '\n', '  bool public initialized = false;\n', '\n', '  modifier isInitialized()\n', '  {\n', '      assert(initialized);\n', '      _;\n', '  }\n', '\n', '  uint8 balancesTransferred = 0;\n', '  // restore tokens from previous contract \n', '  function restoreBalances(address[60] addr, uint256[60] _days, uint256[60] _amounts) external onlyAdmin\n', '  {\n', '    // call when contract is not initialized\n', '    assert(initialized == false);\n', '\n', '    if (totalSupply == 0)\n', '    {\n', '        balances[0x9d4f1d5c6da16f28405cb8b063500606e41b8279] = 151428571428571428571;\n', '        balances[0x35497d9c2beaa5debc48da2208d6b03222f5e753] = 75714285714285714285;\n', '        balances[0xb43f0c8ad004f7fdd50bc9b1c2ca06cad653f56d] = 60571428571428571428;\n', '        balances[0x006f2e159f3e3f2363a64b952122d27df1b307cd] = 49453400000000000000;\n', '        balances[0xb8c180dd09e611ac253ab321650b8b5393d6a00c] = 31972285714285714284;\n', '        balances[0xa209e963d089f03c26fff226a411028700fb6009] = 29281428571428571427;\n', '        balances[0xec185474a0c593f741cca00995aa22f078ec02e2] = 25000000000000000514;\n', '        balances[0x1c1a6b49bccb8b2c12ddf874fc69e14c4371343b] = 14655428571428571428;\n', '        balances[0x38aeeb7e8390632e45f44c01a7b982a9e03a1b10] = 11671422857142857142;\n', '        balances[0xfeff4cd1fc9273848c0cbabacc688c5e5707ddd5] = 9999999999999999428;\n', '        balances[0x1c0c4d7961c96576c21b63b0b892b88ec5b86742] = 8227208857142857142;\n', '        balances[0xdae0aca4b9b38199408ffab32562bf7b3b0495fe] = 5999999999999999957;\n', '        balances[0x2c46fb6e390d90f5742877728d81a5e354c2be0c] = 5990527428571428570;\n', '        balances[0x3c9e6d9a10956f29ec20d797c26ba720e4f0f327] = 5013159428571428571;\n', '        balances[0xb9621f1a9402fa3119fd6b011a23dd007e05b7af] = 5000108571428571427;\n', '        balances[0xae2856a1ea65093852b8828efcaabb16ac987d6b] = 4174942857142857142;\n', '        balances[0xb9507bfc17d6b70177d778ead1cd581c2572b6c1] = 3022857142857142857;\n', '        balances[0x2e983528f19633cf25eee2aa93c78542d660a20f] = 3000000000000000131;\n', '        balances[0xf4b733ff2f2eab631e2860bb60dc596074b9912d] = 3000000000000000131;\n', '        balances[0x431d78c14b570aafb4940c8df524b5a7f5373f46] = 2999999999999999851;\n', '        balances[0xda43b71d5ba11b61f315867ff8fc29db7d34ed31] = 3000000000000000131;\n', '        balances[0x7d9c012ea8e111cec46e89e01b7cd63687696862] = 2771866285714285714;\n', '        balances[0x1c1d8b576c7354dccd20d017b1cde68a942353b6] = 2490045714285714285;\n', '        balances[0x024c07e4e9631763d8db8294bfc8f4fd82113ef5] = 2109977142857142857;\n', '        balances[0x64f482e94e9781c42ada16742780709613ea7fe0] = 2031377142857142857;\n', '        balances[0x0c371ce4b7dcc1da7d68b004d5dea49667af7320] = 1999999999999999885;\n', '        balances[0x709b1599cfe4b06ff4fce1cc4fe8a72ac55c2f10] = 1999999999999999885;\n', '        balances[0xe217aee24b3181540d17f872d3d791b41224bc31] = 1999999999999999885;\n', '        balances[0x0d85570eef6baa41a8f918e48973ea54a9385ee7] = 2000000000000000120;\n', '        balances[0xcf1a033ae5b48def61c8ceb21d41c293a9e5d3c0] = 2000000000000000057;\n', '        balances[0xbc202f5082e403090d7dd483545f680a37efb7e5] = 1999999999999999885;\n', '        balances[0xdf18736dcafaa40b8880b481c5bfab5196089535] = 1999999999999999885;\n', '        balances[0x83da64ffdfe4f6c3a4cf9891d840096ee984b456] = 1271428571428571428;\n', '        balances[0x3babede4f2275762f1c6b4a8185a0056ceee4f5f] = 1051428571428571428;\n', '        balances[0x2f4f98d2489bec1c98515e0f75596e0b135a6023] = 1000480000000000000;\n', '        balances[0xe89156e5694f94b86fabfefab173cf6dd1f2ee00] = 1000000000000000125;\n', '        balances[0x890430d3dbc99846b72c77de7ec10e91ad956619] = 1000000000000000125;\n', '        balances[0x4ee63ad9a151d7c8360561bc00cbe9d7f81c4677] = 1000000000000000125;\n', '        balances[0xc5398714592750850693b56e74c8a5618ae14d38] = 1000000000000000125;\n', '        balances[0xab4a42f7a9ada127858c2e054778e000ea0b8325] = 1000000000000000125;\n', '        balances[0xfcc9b4658b296fe9d667c5a264f4da209dec13db] = 1000000000000000125;\n', '        balances[0x36a93d56e175947be686f0a65bb328d400c1a8b9] = 1000000000000000125;\n', '        balances[0x362a979afe6e5b6acb57d075be9e6f462acacc85] = 1000000000000000125;\n', '        balances[0xe50f079b8f9d67002c787cf9dbd456fc11bd5779] = 999999999999999942;\n', '        balances[0x68afff1424c27246647969dee18e7150124b2b28] = 999999999999999942;\n', '        balances[0x44aba76f01b6498a485dd8f8ee1615d422b8cbf8] = 999999999999999942;\n', '        balances[0x1d51752cd228c3d71714f16401ccdaecfe6d52c3] = 999999999999999942;\n', '        balances[0x5eb72c2bbd74d3e9cb61f5d43002104403a16b43] = 999999999999999942;\n', '        balances[0xa0a0d04bb08051780e5a6cba3080b623fc8404a6] = 999999999999999942;\n', '        balances[0xec49706126ae73db0ca54664d8b0feeb67c3c777] = 999999999999999942;\n', '        balances[0xa95413cd1bc9bdf336e9c2c074fb9ffa91bb89a6] = 999999999999999942;\n', '        balances[0x884a7cc58132ca80897d98bfae87ce72e0eaf461] = 999999999999999942;\n', '        balances[0xb6593630850c56aee328be42038fc6d347b37440] = 999999999999999942;\n', '        balances[0x324ddd8b98b23cb2b6ffaeb84b9bb99ec3de9db6] = 999999999999999942;\n', '        balances[0x1013809376254288325a7b49d60c395da80eeef5] = 1000000000000000028;\n', '        balances[0x3f6753388a491e958b2de57634060e28c7ff2c1e] = 1000000000000000062;\n', '        balances[0xe7800dc7166f11decd415c3a74ec9d0cfa3ceb06] = 431405714285714285;\n', '        totalSupply = 557335064857142857325;\n', '        availableTokens = availableTokens - totalSupply;\n', '        \n', '        uint256 today = getToday();\n', '        for(uint256 j=17614;j <= today;j++)\n', '        {\n', '            tokenPriceHistory[j] = currentTokenPriceInDollar;\n', '        }\n', '    }\n', '    else\n', '    {\n', '        uint8 start = balancesTransferred;\n', '        for(uint8 i=start; i < start+30; i++)\n', '        {\n', '            assert(addr[i] != 0 && _days[i] !=0 && _amounts[i] !=0);\n', '            timeTable[addr[i]][_days[i]] = TokenInfo(_amounts[i], false);\n', '            emit Transfer(0, addr[i], _amounts[i]);\n', '            if (_days[i] < 17620 && bonuses[addr[i]][_days[i]] == 0)\n', '            {\n', '                bonuses[addr[i]][_days[i]] = 1;\n', '            }\n', '        }\n', '        balancesTransferred += 30;\n', '\n', '        if (balancesTransferred == 60) initialized = true;\n', '    }\n', '  }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'contract Math\n', '{\n', '    /*\n', '    standard uint256 functions\n', '     */\n', '\n', '    function add(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x + y) >= x);\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x - y) <= x);\n', '    }\n', '\n', '    function mul(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x * y) >= x);\n', '    }\n', '\n', '    function div(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        z = x / y;\n', '    }\n', '\n', '    function min(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function max(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '}\n', '\n', 'contract Grass is Math\n', '{\n', '  uint256 public availableTokens;\n', '  uint256 currentTokenPriceInDollar;\n', '\n', '  uint256 public lastUpdateEtherPrice;\n', '  uint256 public etherPriceInDollarIn;\n', '  uint256 public etherPriceInDollarOut;\n', '\n', '  function getCurrentTokenPrice() public constant returns (uint256)\n', '  {\n', '      uint256 today = getToday();\n', '      return (tokenPriceHistory[today] == 0)?currentTokenPriceInDollar:tokenPriceHistory[today];\n', '  }\n', '\n', '  mapping(uint256 => uint256) public tokenPriceHistory;\n', '  struct ExtraTokensInfo\n', '  {\n', '    uint256 timestamp;\n', '    uint256 extraTokens;\n', '    string  proofLink;\n', '    uint256 videoFileHash;\n', '  }\n', '\n', '  ExtraTokensInfo[] public extraTokens;\n', '\n', '  struct TokenInfo\n', '  {\n', '    uint256 amount;\n', '    bool isReturnedInPool;\n', '  }\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '  // address => day => amount\n', '  mapping(address => mapping(uint256 => TokenInfo)) timeTable;\n', '  mapping(address => mapping(uint256 => uint256)) bonuses;\n', '  mapping (address => uint256) public balances;\n', '  uint256 public totalSupply;\n', '\n', '  string public name;\n', '  uint8 public decimals;\n', '  string public symbol;\n', '\n', '  bool isCanBuy = true;\n', '\n', '  modifier canBuy()\n', '  {\n', '      assert(isCanBuy);\n', '      _;\n', '  }\n', '\n', '  function changeState(bool bNewState) public onlyAdmin\n', '  {\n', '      isCanBuy = bNewState;\n', '  }\n', '\n', '  address owner;\n', '  mapping(address => bool) admins;\n', '  modifier onlyAdmin()\n', '  {\n', '      assert(admins[msg.sender] == true || msg.sender == owner);\n', '      _;\n', '  }\n', '\n', '  modifier onlyOwner()\n', '  {\n', '      assert(msg.sender == owner);\n', '      _;\n', '  }\n', '  function addAdmin(address addr) public onlyOwner\n', '  {\n', '      admins[addr] = true;\n', '  }\n', '  function removeAdmin(address addr) public onlyOwner\n', '  {\n', '      admins[addr] = false;\n', '  }\n', '\n', '  function Grass() public\n', '  {\n', '    // startTime = block.timestamp;\n', '    owner = msg.sender;\n', '    admins[msg.sender] = true;\n', '    totalSupply = 0;\n', "    name = 'GRASS Token';\n", '    decimals = 18;\n', "    symbol = 'GRASS';\n", '    availableTokens = 800 * 10**18;\n', '    currentTokenPriceInDollar = 35 * 100; // 35.00$ (price may change)\n', '\n', '    etherPriceInDollarIn = 388 * 100;\n', '    etherPriceInDollarOut = 450 * 100;\n', '    lastUpdateEtherPrice = block.timestamp;\n', '  }\n', '\n', '  function increaseMaxAvailableTokens(uint256 amount, string link, uint256 videoFileHash) onlyAdmin public\n', '  {\n', '    extraTokens.push(ExtraTokensInfo(block.timestamp, amount, link, videoFileHash));\n', '    availableTokens = add(availableTokens, amount);\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '      return balances[_owner];\n', '  }\n', '\n', '  function updateEtherPrice (uint256 newPriceIn, uint256 newPriceOut) onlyAdmin public\n', '  {\n', '    etherPriceInDollarIn = newPriceIn;\n', '    etherPriceInDollarOut = newPriceOut;\n', '    lastUpdateEtherPrice = block.timestamp;\n', '  }\n', '\n', '  modifier isEtherPriceUpdated()\n', '  {\n', '      require(now - lastUpdateEtherPrice < 24 hours);\n', '      _;\n', '  }\n', '\n', '  function updateTokenPrice (uint256 newPrice) onlyAdmin public\n', '  {\n', '    currentTokenPriceInDollar = newPrice;\n', '  }\n', '\n', '  function getToday() public constant returns (uint256)\n', '  {\n', '    return block.timestamp / 24 hours;\n', '  }\n', '\n', '  function() isEtherPriceUpdated canBuy isInitialized payable public\n', '  {\n', '    buyInternal(msg.sender);\n', '  }\n', '\n', '  function buyFor(address addr) isEtherPriceUpdated canBuy onlyAdmin isInitialized payable public\n', '  {\n', '    buyInternal(addr);\n', '  }\n', '\n', '  function buy() isEtherPriceUpdated canBuy payable isInitialized public\n', '  {\n', '    buyInternal(msg.sender);\n', '  }\n', '\n', '  function getPartnerBalance (address addr) public view returns(uint256)\n', '  {\n', '    return partners[addr];\n', '  }\n', '\n', '  function partnerWithdraw () isInitialized public\n', '  {\n', '    assert (partners[msg.sender] > 0);\n', '    uint256 ethToWidthdraw = partners[msg.sender];\n', '    partners[msg.sender] = 0;\n', '    msg.sender.transfer(ethToWidthdraw);\n', '  }\n', '\n', '  mapping(address => uint256) partners;\n', '  // refferal => partner\n', '  mapping(address => address) referrals;\n', '\n', '  function takeEther(address dest, uint256 amount) onlyAdmin public\n', '  {\n', '      dest.transfer(amount);\n', '  }\n', '\n', '  function addEther() payable onlyAdmin public\n', '  {\n', '  }\n', '\n', '  function buyWithPromo(address partner) isEtherPriceUpdated canBuy isInitialized payable public\n', '  {\n', '      if (referrals[msg.sender] == 0 && partner != msg.sender)\n', '      {\n', '        referrals[msg.sender] = partner;\n', '      }\n', '\n', '      buyInternal(msg.sender);\n', '  }\n', '\n', '  function buyInternal(address addr) internal\n', '  {\n', '    if (referrals[addr] != 0)\n', '    {\n', '        partners[referrals[addr]] += msg.value / 100; // 1% to partner\n', '    }\n', '\n', '    assert (isContract(addr) == false);\n', '\n', '    // проверка lastUpdateEtherPrice\n', '    uint256 today = getToday();\n', '    if (tokenPriceHistory[today] == 0) tokenPriceHistory[today] = currentTokenPriceInDollar;\n', '\n', '    // timeTable\n', '    uint256 amount = msg.value * etherPriceInDollarIn / tokenPriceHistory[today] ;\n', '    if (amount > availableTokens)\n', '    {\n', '       addr.transfer((amount - availableTokens) * tokenPriceHistory[today] / etherPriceInDollarIn);\n', '       amount = availableTokens;\n', '    }\n', '\n', '    assert(amount > 0);\n', '\n', '    availableTokens = sub(availableTokens, amount);\n', '\n', '    // is new day ?\n', '    if (timeTable[addr][today].amount == 0)\n', '    {\n', '      timeTable[addr][today] = TokenInfo(amount, false);\n', '    }\n', '    else\n', '    {\n', '      timeTable[addr][today].amount += amount;\n', '    }\n', '\n', '    //                  < 30.03.2018\n', '    if (block.timestamp < 1522357200 && bonuses[addr][today] == 0)\n', '    {\n', '      bonuses[addr][today] = 1;\n', '    }\n', '\n', '    balances[addr] = add(balances[addr], amount);\n', '    totalSupply = add(totalSupply, amount);\n', '    emit Transfer(0, addr, amount);\n', '  }\n', '\n', '  function calculateProfit (uint256 day) public constant returns(int256)\n', '  {\n', '    uint256 today = getToday();\n', '    assert(today >= day);\n', '    uint256 daysLeft = today - day;\n', '    int256 extraProfit = 0;\n', '\n', '    // is referral ?\n', '    if (referrals[msg.sender] != 0) extraProfit++;\n', '    // participant until March 30\n', '    if (bonuses[msg.sender][day] > 0) extraProfit++;\n', '\n', '    if (daysLeft <= 7) return -10;\n', '    if (daysLeft <= 14) return -5;\n', '    if (daysLeft <= 21) return 1 + extraProfit;\n', '    if (daysLeft <= 28) return 3 + extraProfit;\n', '    if (daysLeft <= 60) return 5 + extraProfit;\n', '    if (daysLeft <= 90) return 12 + extraProfit;\n', '    return 18 + extraProfit;\n', '  }\n', '\n', '  function getTokensPerDay(uint256 _day) public view returns (uint256)\n', '  {\n', '      return timeTable[msg.sender][_day].amount;\n', '  }\n', '\n', '  // returns amount, ether\n', '  function getProfitForDay(uint256 day, uint256 amount) isEtherPriceUpdated public constant returns(uint256, uint256)\n', '  {\n', '    assert (day <= getToday());\n', '\n', '    uint256 tokenPrice = tokenPriceHistory[day];\n', '    if (timeTable[msg.sender][day].amount < amount) amount = timeTable[msg.sender][day].amount;\n', '\n', '    assert (amount > 0);\n', '\n', '    return (amount, amount * tokenPrice * uint256(100 + calculateProfit(day)) / 100 / etherPriceInDollarOut);\n', '  }\n', '\n', '  function returnTokensInPool (address[] addr, uint256[] _days) public\n', '  {\n', '    assert (addr.length == _days.length);\n', '\n', '    TokenInfo storage info;\n', '    for(uint256 i = 0; i < addr.length;i++)\n', '    {\n', '      assert(_days[i] + 92 < getToday() && info.amount > 0);\n', '      info = timeTable[addr[i]][_days[i]];\n', '      info.isReturnedInPool = true;\n', '      availableTokens = add(availableTokens, info.amount);\n', '    }\n', '  }\n', '\n', '  function getInfo(address addr, uint256 start, uint256 end) public constant returns (uint256[30] _days, uint256[30] _amounts, int256[30] _profits, uint256[30] _etherAmounts)\n', '  {\n', '      if (addr == 0) addr = msg.sender;\n', '\n', '      uint256 j = 0;\n', '      for(uint256 iDay = start; iDay < end; iDay++)\n', '      {\n', '        if (timeTable[addr][iDay].amount > 0)\n', '        {\n', '          _days[j] = iDay;\n', '          _profits[j] = calculateProfit(iDay);\n', '          _amounts[j] = timeTable[addr][iDay].amount;\n', '          (_amounts[j], _etherAmounts[j]) = getProfitForDay(iDay, _amounts[j]);\n', '          j++;\n', '          if (j == 30) break;\n', '        }\n', '      }\n', '  }\n', '\n', '  function returnTokensForDay(uint256 day, uint256 userTokensAmount) isInitialized public\n', '  {\n', '    uint256 tokensAmount;\n', '    uint256 etherAmount;\n', '    (tokensAmount, etherAmount) = getProfitForDay(day, userTokensAmount);\n', '\n', '    require(day > 0);\n', '    require(balances[msg.sender] >= tokensAmount);\n', '\n', '    balances[msg.sender] = sub(balances[msg.sender], tokensAmount);\n', '    totalSupply = sub(totalSupply, tokensAmount);\n', '    timeTable[msg.sender][day].amount = sub(timeTable[msg.sender][day].amount, tokensAmount);\n', '\n', '    if (!timeTable[msg.sender][day].isReturnedInPool)\n', '    {\n', '      availableTokens = add(availableTokens, tokensAmount);\n', '    }\n', '\n', '    msg.sender.transfer(etherAmount);\n', '    emit Transfer(msg.sender, 0, tokensAmount);\n', '  }\n', '\n', '  function isContract(address addr) internal returns (bool)\n', '  {\n', '    uint256 size;\n', '    assembly { size := extcodesize(addr) }\n', '    return size > 0;\n', '  }\n', '\n', '  bool public initialized = false;\n', '\n', '  modifier isInitialized()\n', '  {\n', '      assert(initialized);\n', '      _;\n', '  }\n', '\n', '  uint8 balancesTransferred = 0;\n', '  // restore tokens from previous contract \n', '  function restoreBalances(address[60] addr, uint256[60] _days, uint256[60] _amounts) external onlyAdmin\n', '  {\n', '    // call when contract is not initialized\n', '    assert(initialized == false);\n', '\n', '    if (totalSupply == 0)\n', '    {\n', '        balances[0x9d4f1d5c6da16f28405cb8b063500606e41b8279] = 151428571428571428571;\n', '        balances[0x35497d9c2beaa5debc48da2208d6b03222f5e753] = 75714285714285714285;\n', '        balances[0xb43f0c8ad004f7fdd50bc9b1c2ca06cad653f56d] = 60571428571428571428;\n', '        balances[0x006f2e159f3e3f2363a64b952122d27df1b307cd] = 49453400000000000000;\n', '        balances[0xb8c180dd09e611ac253ab321650b8b5393d6a00c] = 31972285714285714284;\n', '        balances[0xa209e963d089f03c26fff226a411028700fb6009] = 29281428571428571427;\n', '        balances[0xec185474a0c593f741cca00995aa22f078ec02e2] = 25000000000000000514;\n', '        balances[0x1c1a6b49bccb8b2c12ddf874fc69e14c4371343b] = 14655428571428571428;\n', '        balances[0x38aeeb7e8390632e45f44c01a7b982a9e03a1b10] = 11671422857142857142;\n', '        balances[0xfeff4cd1fc9273848c0cbabacc688c5e5707ddd5] = 9999999999999999428;\n', '        balances[0x1c0c4d7961c96576c21b63b0b892b88ec5b86742] = 8227208857142857142;\n', '        balances[0xdae0aca4b9b38199408ffab32562bf7b3b0495fe] = 5999999999999999957;\n', '        balances[0x2c46fb6e390d90f5742877728d81a5e354c2be0c] = 5990527428571428570;\n', '        balances[0x3c9e6d9a10956f29ec20d797c26ba720e4f0f327] = 5013159428571428571;\n', '        balances[0xb9621f1a9402fa3119fd6b011a23dd007e05b7af] = 5000108571428571427;\n', '        balances[0xae2856a1ea65093852b8828efcaabb16ac987d6b] = 4174942857142857142;\n', '        balances[0xb9507bfc17d6b70177d778ead1cd581c2572b6c1] = 3022857142857142857;\n', '        balances[0x2e983528f19633cf25eee2aa93c78542d660a20f] = 3000000000000000131;\n', '        balances[0xf4b733ff2f2eab631e2860bb60dc596074b9912d] = 3000000000000000131;\n', '        balances[0x431d78c14b570aafb4940c8df524b5a7f5373f46] = 2999999999999999851;\n', '        balances[0xda43b71d5ba11b61f315867ff8fc29db7d34ed31] = 3000000000000000131;\n', '        balances[0x7d9c012ea8e111cec46e89e01b7cd63687696862] = 2771866285714285714;\n', '        balances[0x1c1d8b576c7354dccd20d017b1cde68a942353b6] = 2490045714285714285;\n', '        balances[0x024c07e4e9631763d8db8294bfc8f4fd82113ef5] = 2109977142857142857;\n', '        balances[0x64f482e94e9781c42ada16742780709613ea7fe0] = 2031377142857142857;\n', '        balances[0x0c371ce4b7dcc1da7d68b004d5dea49667af7320] = 1999999999999999885;\n', '        balances[0x709b1599cfe4b06ff4fce1cc4fe8a72ac55c2f10] = 1999999999999999885;\n', '        balances[0xe217aee24b3181540d17f872d3d791b41224bc31] = 1999999999999999885;\n', '        balances[0x0d85570eef6baa41a8f918e48973ea54a9385ee7] = 2000000000000000120;\n', '        balances[0xcf1a033ae5b48def61c8ceb21d41c293a9e5d3c0] = 2000000000000000057;\n', '        balances[0xbc202f5082e403090d7dd483545f680a37efb7e5] = 1999999999999999885;\n', '        balances[0xdf18736dcafaa40b8880b481c5bfab5196089535] = 1999999999999999885;\n', '        balances[0x83da64ffdfe4f6c3a4cf9891d840096ee984b456] = 1271428571428571428;\n', '        balances[0x3babede4f2275762f1c6b4a8185a0056ceee4f5f] = 1051428571428571428;\n', '        balances[0x2f4f98d2489bec1c98515e0f75596e0b135a6023] = 1000480000000000000;\n', '        balances[0xe89156e5694f94b86fabfefab173cf6dd1f2ee00] = 1000000000000000125;\n', '        balances[0x890430d3dbc99846b72c77de7ec10e91ad956619] = 1000000000000000125;\n', '        balances[0x4ee63ad9a151d7c8360561bc00cbe9d7f81c4677] = 1000000000000000125;\n', '        balances[0xc5398714592750850693b56e74c8a5618ae14d38] = 1000000000000000125;\n', '        balances[0xab4a42f7a9ada127858c2e054778e000ea0b8325] = 1000000000000000125;\n', '        balances[0xfcc9b4658b296fe9d667c5a264f4da209dec13db] = 1000000000000000125;\n', '        balances[0x36a93d56e175947be686f0a65bb328d400c1a8b9] = 1000000000000000125;\n', '        balances[0x362a979afe6e5b6acb57d075be9e6f462acacc85] = 1000000000000000125;\n', '        balances[0xe50f079b8f9d67002c787cf9dbd456fc11bd5779] = 999999999999999942;\n', '        balances[0x68afff1424c27246647969dee18e7150124b2b28] = 999999999999999942;\n', '        balances[0x44aba76f01b6498a485dd8f8ee1615d422b8cbf8] = 999999999999999942;\n', '        balances[0x1d51752cd228c3d71714f16401ccdaecfe6d52c3] = 999999999999999942;\n', '        balances[0x5eb72c2bbd74d3e9cb61f5d43002104403a16b43] = 999999999999999942;\n', '        balances[0xa0a0d04bb08051780e5a6cba3080b623fc8404a6] = 999999999999999942;\n', '        balances[0xec49706126ae73db0ca54664d8b0feeb67c3c777] = 999999999999999942;\n', '        balances[0xa95413cd1bc9bdf336e9c2c074fb9ffa91bb89a6] = 999999999999999942;\n', '        balances[0x884a7cc58132ca80897d98bfae87ce72e0eaf461] = 999999999999999942;\n', '        balances[0xb6593630850c56aee328be42038fc6d347b37440] = 999999999999999942;\n', '        balances[0x324ddd8b98b23cb2b6ffaeb84b9bb99ec3de9db6] = 999999999999999942;\n', '        balances[0x1013809376254288325a7b49d60c395da80eeef5] = 1000000000000000028;\n', '        balances[0x3f6753388a491e958b2de57634060e28c7ff2c1e] = 1000000000000000062;\n', '        balances[0xe7800dc7166f11decd415c3a74ec9d0cfa3ceb06] = 431405714285714285;\n', '        totalSupply = 557335064857142857325;\n', '        availableTokens = availableTokens - totalSupply;\n', '        \n', '        uint256 today = getToday();\n', '        for(uint256 j=17614;j <= today;j++)\n', '        {\n', '            tokenPriceHistory[j] = currentTokenPriceInDollar;\n', '        }\n', '    }\n', '    else\n', '    {\n', '        uint8 start = balancesTransferred;\n', '        for(uint8 i=start; i < start+30; i++)\n', '        {\n', '            assert(addr[i] != 0 && _days[i] !=0 && _amounts[i] !=0);\n', '            timeTable[addr[i]][_days[i]] = TokenInfo(_amounts[i], false);\n', '            emit Transfer(0, addr[i], _amounts[i]);\n', '            if (_days[i] < 17620 && bonuses[addr[i]][_days[i]] == 0)\n', '            {\n', '                bonuses[addr[i]][_days[i]] = 1;\n', '            }\n', '        }\n', '        balancesTransferred += 30;\n', '\n', '        if (balancesTransferred == 60) initialized = true;\n', '    }\n', '  }\n', '}']
