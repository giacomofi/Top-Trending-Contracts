['/*\n', ' * Kryptium Oracle Smart Contract v.1.0.0\n', ' * Copyright © 2018 Kryptium Team <info@kryptium.io>\n', ' * Author: Giannis Zarifis <jzarifis@kryptium.io>\n', ' * \n', ' * The Oracle smart contract is used by the House smart contract (and, in turn, \n', ' * the betting app) as a “trusted source of truth” for upcoming events and their \n', ' * outcomes. It is managed by an entity trusted by the owner of the House.\n', ' *\n', ' * This program is free to use according the Terms and Conditions available at\n', ' * <https://kryptium.io/terms-and-conditions/>. You cannot resell it or copy any\n', ' * part of it or modify it without permission from the Kryptium Team.\n', ' *\n', ' * This program is distributed in the hope that it will be useful, but WITHOUT \n', ' * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n', ' * FOR A PARTICULAR PURPOSE. See the Terms and Conditions for more details.\n', ' */\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * SafeMath\n', ' * Math operations with safety checks that throw on error\n', ' */\n', 'contract SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b != 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function mulByFraction(uint256 number, uint256 numerator, uint256 denominator) internal pure returns (uint256) {\n', '        return div(mul(number, numerator), denominator);\n', '    }\n', '}\n', '\n', 'contract Owned {\n', '\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0x0));\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/*\n', ' * Kryptium Oracle Smart Contract.  \n', ' */\n', 'contract Oracle is SafeMath, Owned {\n', '\n', '    enum EventOutputType { stringarray, numeric }\n', '\n', '    uint private eventNextId;\n', '    uint private subcategoryNextId;\n', '\n', '    struct Event { \n', '        uint id;\n', '        string  title;\n', '        uint  startDateTime;   \n', '        uint  endDateTime;\n', '        uint  subcategoryId;   \n', '        uint  categoryId;   \n', '        uint closeDateTime;     \n', '        uint freezeDateTime;\n', '        bool isCancelled;\n', '        string announcement;\n', '        uint totalAvailableOutputs;\n', '    } \n', '\n', '    struct EventOutcome {\n', '        uint256 outcome1;\n', '        uint256 outcome2;\n', '        uint256 outcome3;\n', '        uint256 outcome4;\n', '        uint256 outcome5;\n', '        uint256 outcome6;\n', '    }\n', '\n', '\n', '\n', '    struct EventOutput {\n', '        bool isSet;\n', '        string title;\n', '        uint possibleResultsCount;\n', '        EventOutputType  eventOutputType;\n', '        string announcement; \n', '        uint decimals;\n', '    }\n', '\n', '\n', '    struct OracleData { \n', '        string  name;\n', '        string  creatorName;\n', '        uint  closeBeforeStartTime;   \n', '        uint  closeEventOutcomeTime;\n', '        uint version;      \n', '    } \n', '\n', '    struct Subcategory {\n', '        uint id;\n', '        uint  categoryId; \n', '        string name;\n', '        string country;\n', '        bool hidden;\n', '    }\n', '\n', '    OracleData public oracleData;  \n', '\n', '    // This creates an array with all sucategories\n', '    mapping (uint => Subcategory) public subcategories;\n', '\n', '    // This creates an array with all events\n', '    mapping (uint => Event) public events;\n', '\n', '    // Event output possible results\n', '    mapping (uint =>mapping (uint => mapping (uint => bytes32))) public eventOutputPossibleResults;  \n', '\n', '    // Event output Outcome\n', '    mapping (uint => mapping (uint => EventOutput)) public eventOutputs;\n', '\n', '    //Event output outcome\n', '    mapping (uint => mapping (uint => uint)) public eventOutcome;\n', '\n', '    //Event output outcome numeric\n', '    mapping (uint => mapping (uint => EventOutcome)) public eventNumericOutcomes;\n', '\n', '\n', '\n', '    // Notifies clients that a new Oracle was launched\n', '    event OracleCreated();\n', '\n', '    // Notifies clients that the details of an Oracle were changed\n', '    event OraclePropertiesUpdated();    \n', '\n', '    // Notifies clients that an Oracle subcategory was added\n', '    event OracleSubcategoryAdded(uint id);    \n', '\n', '    // Notifies clients that an Oracle subcategory was changed\n', '    event OracleSubcategoryUpdated(uint id);    \n', '    \n', '    // Notifies clients that an Oracle Event was changed\n', '    event UpcomingEventUpdated(uint id,uint closeDateTime);\n', '\n', '\n', '\n', '    /**\n', '     * Constructor function\n', '     * Initializes Oracle contract\n', '     */\n', '    constructor(string memory oracleName, string memory oracleCreatorName, uint closeBeforeStartTime, uint closeEventOutcomeTime, uint version) public {\n', '        oracleData.name = oracleName;\n', '        oracleData.creatorName = oracleCreatorName;\n', '        oracleData.closeBeforeStartTime = closeBeforeStartTime;\n', '        oracleData.closeEventOutcomeTime = closeEventOutcomeTime;\n', '        oracleData.version = version;\n', '        emit OracleCreated();\n', '    }\n', '\n', '     /**\n', '     * Update Oracle Data function\n', '     *\n', '     * Updates Oracle Data\n', '     */\n', '    function updateOracleNames(string memory newName, string memory newCreatorName) onlyOwner public {\n', '        oracleData.name = newName;\n', '        oracleData.creatorName = newCreatorName;\n', '        emit OraclePropertiesUpdated();\n', '    }    \n', '\n', '     /**\n', '     * Update Oracle Time Constants function\n', '     *\n', '     * Updates Oracle Time Constants\n', '     */\n', '    function setTimeConstants(uint closeBeforeStartTime, uint closeEventOutcomeTime) onlyOwner public {\n', '        oracleData.closeBeforeStartTime = closeBeforeStartTime;\n', '        oracleData.closeEventOutcomeTime = closeEventOutcomeTime;\n', '        emit OraclePropertiesUpdated();\n', '    }      \n', '\n', '\n', '    /**\n', '     * Adds an Oracle Subcategory\n', '     */\n', '    function setSubcategory(uint id, uint categoryId, string memory name,string memory country,bool hidden) onlyOwner public {\n', '        if (id==0) {\n', '            subcategoryNextId += 1;\n', '            id = subcategoryNextId;\n', '        }\n', '        subcategories[id].id = id;\n', '        subcategories[id].categoryId = categoryId;\n', '        subcategories[id].name = name;\n', '        subcategories[id].country = country;\n', '        subcategories[id].hidden = hidden;\n', '        emit OracleSubcategoryAdded(id);\n', '    }  \n', '\n', '    /**\n', '     * Hides an Oracle Subcategory\n', '     */\n', '    function hideSubcategory(uint id) onlyOwner public {\n', '        subcategories[id].hidden = true;\n', '        emit OracleSubcategoryUpdated(id);\n', '    }   \n', '\n', '\n', '    /**\n', '     * Adds an Upcoming Event\n', '     */\n', '    function addUpcomingEvent(uint id, string memory title, uint startDateTime, uint endDateTime, uint subcategoryId, uint categoryId, string memory outputTitle, EventOutputType eventOutputType, bytes32[] memory _possibleResults,uint decimals) onlyOwner public {        \n', '        if (id==0) {\n', '            eventNextId += 1;\n', '            id = eventNextId;\n', '        }\n', '        \n', '        uint closeDateTime = startDateTime - oracleData.closeBeforeStartTime * 1 minutes;\n', '        uint freezeDateTime = endDateTime + oracleData.closeEventOutcomeTime * 1 minutes;\n', '        require(closeDateTime >= now,"Close time should be greater than now");\n', '        events[id].id = id;\n', '        events[id].title = title;\n', '        events[id].startDateTime = startDateTime;\n', '        events[id].endDateTime = endDateTime;\n', '        events[id].subcategoryId = subcategoryId;\n', '        events[id].categoryId = categoryId;\n', '        events[id].closeDateTime = closeDateTime;\n', '        events[id].freezeDateTime = freezeDateTime;\n', '        eventOutputs[id][0].title = outputTitle;\n', '        eventOutputs[id][0].possibleResultsCount = _possibleResults.length;\n', '        eventOutputs[id][0].eventOutputType = eventOutputType;\n', '        eventOutputs[id][0].decimals = decimals;\n', '        for (uint j = 0; j<_possibleResults.length; j++) {\n', '            eventOutputPossibleResults[id][0][j] = _possibleResults[j];            \n', '        }\n', '        if (events[id].totalAvailableOutputs < 1) {\n', '            events[id].totalAvailableOutputs = 1;\n', '        }      \n', '        emit UpcomingEventUpdated(id,closeDateTime);\n', '    }  \n', '\n', '    /**\n', '     * Adds a new output to existing an Upcoming Event\n', '     */\n', '    function addUpcomingEventOutput(uint id, string memory outputTitle, EventOutputType eventOutputType, bytes32[] memory _possibleResults,uint decimals) onlyOwner public {\n', '        require(events[id].closeDateTime >= now,"Close time should be greater than now");\n', '        eventOutputs[id][events[id].totalAvailableOutputs].title = outputTitle;\n', '        eventOutputs[id][events[id].totalAvailableOutputs].possibleResultsCount = _possibleResults.length;\n', '        eventOutputs[id][events[id].totalAvailableOutputs].eventOutputType = eventOutputType;\n', '        eventOutputs[id][events[id].totalAvailableOutputs].decimals = decimals;\n', '        for (uint j = 0; j<_possibleResults.length; j++) {\n', '            eventOutputPossibleResults[id][events[id].totalAvailableOutputs][j] = _possibleResults[j];\n', '        }  \n', '        events[id].totalAvailableOutputs += 1;             \n', '        emit UpcomingEventUpdated(id,events[id].closeDateTime);\n', '    }\n', '\n', '    /**\n', '     * Updates an Upcoming Event\n', '     */\n', '    function updateUpcomingEvent(uint id, string memory title, uint startDateTime, uint endDateTime, uint subcategoryId, uint categoryId) onlyOwner public {\n', '        uint closeDateTime = startDateTime - oracleData.closeBeforeStartTime * 1 minutes;\n', '        uint freezeDateTime = endDateTime + oracleData.closeEventOutcomeTime * 1 minutes;\n', '        events[id].title = title;\n', '        events[id].startDateTime = startDateTime;\n', '        events[id].endDateTime = endDateTime;\n', '        events[id].subcategoryId = subcategoryId;\n', '        events[id].categoryId = categoryId;\n', '        events[id].closeDateTime = closeDateTime;\n', '        events[id].freezeDateTime = freezeDateTime;\n', '        if (closeDateTime < now) {\n', '            events[id].isCancelled = true;\n', '        }  \n', '        emit UpcomingEventUpdated(id,closeDateTime); \n', '    }     \n', '\n', '    /**\n', '     * Cancels an Upcoming Event\n', '     */\n', '    function cancelUpcomingEvent(uint id) onlyOwner public {\n', '        require(events[id].freezeDateTime >= now,"Freeze time should be greater than now");\n', '        events[id].isCancelled = true;\n', '        emit UpcomingEventUpdated(id,events[id].closeDateTime); \n', '    }  \n', '\n', '\n', '    /**\n', '     * Set the numeric type outcome of Event output\n', '     */\n', '    function setEventOutcomeNumeric(uint eventId, uint outputId, string memory announcement, bool setEventAnnouncement, uint256 outcome1, uint256 outcome2,uint256 outcome3,uint256 outcome4, uint256 outcome5, uint256 outcome6) onlyOwner public {\n', '        require(events[eventId].freezeDateTime > now,"Freeze time should be greater than now");\n', '        require(!events[eventId].isCancelled,"Cancelled Event");\n', '        require(eventOutputs[eventId][outputId].eventOutputType == EventOutputType.numeric,"Required numeric Event type");\n', '        eventNumericOutcomes[eventId][outputId].outcome1 = outcome1;\n', '        eventNumericOutcomes[eventId][outputId].outcome2 = outcome2;\n', '        eventNumericOutcomes[eventId][outputId].outcome3 = outcome3;\n', '        eventNumericOutcomes[eventId][outputId].outcome4 = outcome4;\n', '        eventNumericOutcomes[eventId][outputId].outcome5 = outcome5;\n', '        eventNumericOutcomes[eventId][outputId].outcome6 = outcome6;\n', '        eventOutputs[eventId][outputId].isSet = true;\n', '        eventOutputs[eventId][outputId].announcement = announcement;\n', '        if (setEventAnnouncement) {\n', '            events[eventId].announcement = announcement;\n', '        }     \n', '        emit UpcomingEventUpdated(eventId,events[eventId].closeDateTime); \n', '    }  \n', '\n', '     /**\n', '     * Set the outcome of Event output\n', '     */\n', '    function setEventOutcome(uint eventId, uint outputId, string memory announcement, bool setEventAnnouncement, uint _eventOutcome ) onlyOwner public {\n', '        require(events[eventId].freezeDateTime > now,"Freeze time should be greater than now");\n', '        require(!events[eventId].isCancelled,"Cancelled Event");\n', '        require(eventOutputs[eventId][outputId].eventOutputType == EventOutputType.stringarray,"Required array of options Event type");\n', '        eventOutputs[eventId][outputId].isSet = true;\n', '        eventOutcome[eventId][outputId] = _eventOutcome;\n', '        eventOutputs[eventId][outputId].announcement = announcement;\n', '        if (setEventAnnouncement) {\n', '            events[eventId].announcement = announcement;\n', '        } \n', '        emit UpcomingEventUpdated(eventId,events[eventId].closeDateTime); \n', '    } \n', '\n', '\n', '    /**\n', '     * set a new freeze datetime of an Event\n', '     */\n', '    function freezeEventOutcome(uint id, uint newFreezeDateTime) onlyOwner public {\n', '        require(!events[id].isCancelled,"Cancelled Event");\n', '        if (newFreezeDateTime > now) {\n', '            events[id].freezeDateTime = newFreezeDateTime;\n', '        } else {\n', '            events[id].freezeDateTime = now;\n', '        }\n', '        emit UpcomingEventUpdated(id,events[id].closeDateTime);\n', '    } \n', '\n', '    /**\n', '     * Get event outcome numeric\n', '     */\n', '    function getEventOutcomeNumeric(uint eventId, uint outputId) public view returns(uint256 outcome1, uint256 outcome2,uint256 outcome3,uint256 outcome4, uint256 outcome5, uint256 outcome6) {\n', '        require(eventOutputs[eventId][outputId].isSet && eventOutputs[eventId][outputId].eventOutputType==EventOutputType.numeric);\n', '        return (eventNumericOutcomes[eventId][outputId].outcome1,eventNumericOutcomes[eventId][outputId].outcome2,eventNumericOutcomes[eventId][outputId].outcome3,eventNumericOutcomes[eventId][outputId].outcome4,eventNumericOutcomes[eventId][outputId].outcome5,eventNumericOutcomes[eventId][outputId].outcome6);\n', '    }\n', '\n', '    /**\n', '     * Get event outcome\n', '     */\n', '    function getEventOutcome(uint eventId, uint outputId) public view returns(uint outcome) {\n', '        require(eventOutputs[eventId][outputId].isSet && eventOutputs[eventId][outputId].eventOutputType==EventOutputType.stringarray);\n', '        return (eventOutcome[eventId][outputId]);\n', '    }\n', '\n', '     /**\n', '     * Get event outcome is Set\n', '     */\n', '    function getEventOutcomeIsSet(uint eventId, uint outputId) public view returns(bool isSet) {\n', '        return (eventOutputs[eventId][outputId].isSet);\n', '    }\n', '\n', '\n', '    /**\n', '     * Get event Info for Houses\n', '     */\n', '    function getEventForHousePlaceBet(uint id) public view returns(uint closeDateTime, uint freezeDateTime, bool isCancelled) {\n', '        return (events[id].closeDateTime,events[id].freezeDateTime, events[id].isCancelled);\n', '    }\n', '\n', '\n', '}']