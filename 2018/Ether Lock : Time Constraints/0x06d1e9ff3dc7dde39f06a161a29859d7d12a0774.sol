['pragma solidity ^0.4.23;\n', '\n', 'contract BasicAccessControl {\n', '    address public owner;\n', '    // address[] public moderators;\n', '    uint16 public totalModerators = 0;\n', '    mapping (address => bool) public moderators;\n', '    bool public isMaintaining = false;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyModerators() {\n', '        require(msg.sender == owner || moderators[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '    modifier isActive {\n', '        require(!isMaintaining);\n', '        _;\n', '    }\n', '\n', '    function ChangeOwner(address _newOwner) onlyOwner public {\n', '        if (_newOwner != address(0)) {\n', '            owner = _newOwner;\n', '        }\n', '    }\n', '\n', '\n', '    function AddModerator(address _newModerator) onlyOwner public {\n', '        if (moderators[_newModerator] == false) {\n', '            moderators[_newModerator] = true;\n', '            totalModerators += 1;\n', '        }\n', '    }\n', '    \n', '    function RemoveModerator(address _oldModerator) onlyOwner public {\n', '        if (moderators[_oldModerator] == true) {\n', '            moderators[_oldModerator] = false;\n', '            totalModerators -= 1;\n', '        }\n', '    }\n', '\n', '    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\n', '        isMaintaining = _isMaintaining;\n', '    }\n', '}\n', '\n', 'contract EtheremonEnum {\n', '\n', '    enum ResultCode {\n', '        SUCCESS,\n', '        ERROR_CLASS_NOT_FOUND,\n', '        ERROR_LOW_BALANCE,\n', '        ERROR_SEND_FAIL,\n', '        ERROR_NOT_TRAINER,\n', '        ERROR_NOT_ENOUGH_MONEY,\n', '        ERROR_INVALID_AMOUNT\n', '    }\n', '    \n', '    enum ArrayType {\n', '        CLASS_TYPE,\n', '        STAT_STEP,\n', '        STAT_START,\n', '        STAT_BASE,\n', '        OBJ_SKILL\n', '    }\n', '}\n', '\n', 'contract EtheremonDataBase is EtheremonEnum {\n', '    // read\n', '    function getMonsterObj(uint64 _objId) constant public returns(uint64 objId, uint32 classId, address trainer, uint32 exp, uint32 createIndex, uint32 lastClaimIndex, uint createTime);\n', '    function getElementInArrayType(ArrayType _type, uint64 _id, uint _index) constant public returns(uint8);\n', '\n', '    // write\n', '    function increaseMonsterExp(uint64 _objId, uint32 amount) public;\n', '    function updateIndexOfArrayType(ArrayType _type, uint64 _id, uint _index, uint8 _value) public returns(uint);\n', '}\n', '\n', 'contract EtheremonAdventureHandler is BasicAccessControl, EtheremonEnum {\n', '    uint8 constant public STAT_MAX_VALUE = 32;\n', '    uint8 constant public LEVEL_MAX_VALUE = 254;\n', '    \n', '    struct MonsterObjAcc {\n', '        uint64 monsterId;\n', '        uint32 classId;\n', '        address trainer;\n', '        string name;\n', '        uint32 exp;\n', '        uint32 createIndex;\n', '        uint32 lastClaimIndex;\n', '        uint createTime;\n', '    }\n', '    \n', '    // address\n', '    address public dataContract;\n', '    mapping(uint8 => uint32) public levelExps;\n', '    uint public levelItemClass = 200;\n', '    uint public expItemClass = 201;\n', '    \n', '    function setContract(address _dataContract) onlyModerators public {\n', '        dataContract = _dataContract;\n', '    }\n', '    \n', '    function setConfig(uint _levelItemClass, uint _expItemClass) onlyModerators public {\n', '        levelItemClass = _levelItemClass;\n', '        expItemClass = _expItemClass;\n', '    }\n', '    \n', '    function genLevelExp() onlyModerators external {\n', '        uint8 level = 1;\n', '        uint32 requirement = 100;\n', '        uint32 sum = requirement;\n', '        while(level <= 100) {\n', '            levelExps[level] = sum;\n', '            level += 1;\n', '            requirement = (requirement * 11) / 10 + 5;\n', '            sum += requirement;\n', '        }\n', '    }\n', '    \n', '    function handleSingleItem(address _sender, uint _classId, uint _value, uint _target, uint _param) onlyModerators public {\n', '        // check ownership of _target\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        MonsterObjAcc memory obj;\n', '        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(uint64(_target));\n', '        if (obj.monsterId != _target || obj.trainer != _sender) revert();\n', '        \n', '        if (_classId == expItemClass) {\n', '            // exp item\n', '            data.increaseMonsterExp(obj.monsterId, uint32(_value));\n', '        } else if (_classId == levelItemClass) {\n', '            // level item\n', '            uint8 currentLevel = getLevel(obj.exp);\n', '            currentLevel += uint8(_value);\n', '            if (levelExps[currentLevel-1] < obj.exp || currentLevel > LEVEL_MAX_VALUE)\n', '                revert();\n', '            data.increaseMonsterExp(obj.monsterId, levelExps[currentLevel-1] - obj.exp);\n', '        }\n', '    }\n', '    \n', '    function handleMultipleItems(address _sender, uint _classId1, uint _classId2, uint _classId3, uint _target, uint _param) onlyModerators public {\n', '        EtheremonDataBase data = EtheremonDataBase(dataContract);\n', '        MonsterObjAcc memory obj;\n', '        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(uint64(_target));\n', '        if (obj.monsterId != _target || obj.trainer != _sender) revert();\n', '        \n', '        \n', '        uint index = 0;\n', '        if (_classId1 == 300 && _classId2 == 301 && _classId3 == 302) {\n', '            //health shards\n', '            index = 0;\n', '        } else if (_classId1 == 310 && _classId2 == 311 && _classId3 == 312) {\n', '            // primary attack shards\n', '            index = 1;\n', '        } else if (_classId1 == 320 && _classId2 == 321 && _classId3 == 322) {\n', '            // primary defense shards\n', '            index = 2;\n', '        } else if (_classId1 == 330 && _classId2 == 331 && _classId3 == 332) {\n', '            // secondary attack shards\n', '            index = 3;\n', '        } else if (_classId1 == 340 && _classId2 == 341 && _classId3 == 342) {\n', '            // secondary defense shards\n', '            index = 4;\n', '        } else if (_classId1 == 350 && _classId2 == 351 && _classId3 == 352) {\n', '            // speed shards\n', '            index = 5;\n', '        }\n', '        \n', '        uint8 currentValue = data.getElementInArrayType(ArrayType.STAT_BASE, obj.monsterId, index);\n', '        if (currentValue + 1 >= LEVEL_MAX_VALUE)\n', '            revert();\n', '        data.updateIndexOfArrayType(ArrayType.STAT_BASE, obj.monsterId, index, currentValue + 1);\n', '    }\n', '    \n', '    // public method\n', '    function getLevel(uint32 exp) view public returns (uint8) {\n', '        uint8 minIndex = 1;\n', '        uint8 maxIndex = 100;\n', '        uint8 currentIndex;\n', '     \n', '        while (minIndex < maxIndex) {\n', '            currentIndex = (minIndex + maxIndex) / 2;\n', '            if (exp < levelExps[currentIndex])\n', '                maxIndex = currentIndex;\n', '            else\n', '                minIndex = currentIndex + 1;\n', '        }\n', '\n', '        return minIndex;\n', '    }\n', '\n', '}']