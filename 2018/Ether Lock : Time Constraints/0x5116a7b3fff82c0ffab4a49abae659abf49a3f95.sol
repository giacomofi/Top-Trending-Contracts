['pragma solidity ^0.4.23;\n', '\n', '// * https://dice1.win - fair games that pay Ether. Version 1.\n', '//\n', '// * Ethereum smart contract, deployed at 0x5116A7B3FFF82C0FFaB4A49aBaE659aBF49A3f95.\n', '\n', 'contract Dice1Win{\n', '    using SafeMath for uint256;\n', '    \n', '    uint256 constant MIN_BET = 0.01 ether;\n', '    mapping(address => uint256) public balanceOf;\n', '    address public owner;\n', '    \n', '    struct Bet {\n', '        uint256 amount;\n', '        uint256 target;\n', '        address gambler;\n', '    }\n', '    \n', '    uint256 public times = 1;\n', '    uint256 public totalBig ;\n', '    uint256 public totalSmall ;\n', '    \n', '    Bet[] public big ;\n', '    Bet[] public small ;\n', '    \n', '    \n', '    event placeBetEvent(uint256 totalCount);\n', '    event settleBetEvent(uint256 random, uint256 times);\n', '    event FailedPayment(address indexed beneficiary, uint256 amount);\n', '    event Payment(address indexed beneficiary, uint256 amount);\n', '    \n', '    \n', '    function placeBet(uint256 _target) external payable {\n', '        require (msg.value >= MIN_BET);\n', '        \n', '        if(_target ==1){\n', '            big.push(\n', '                Bet({\n', '                    amount : msg.value,\n', '                    target : 1,\n', '                    gambler: msg.sender\n', '                })\n', '            );\n', '            totalBig = totalBig.add(msg.value);\n', '        }\n', '        \n', '        if(_target ==0){\n', '            small.push(\n', '                Bet({\n', '                    amount : msg.value,\n', '                    target : 0,\n', '                    gambler: msg.sender\n', '                })\n', '            );\n', '            totalSmall = totalSmall.add(msg.value);\n', '        }\n', '        \n', '        uint256 totalCount = big.length.add(small.length);\n', '        \n', '        if(totalCount >= 20){\n', '            settleBet();\n', '        }\n', '        \n', '        emit placeBetEvent(totalCount);\n', '        \n', '    }\n', '    \n', '    \n', '    function getInfo(uint256 _uint) view public returns(uint256){\n', '        if(_uint ==1){\n', '            return big.length;\n', '        }\n', '        \n', '        if(_uint ==0){\n', '            return small.length;\n', '        }\n', '        \n', '    }\n', '    \n', '    \n', '    \n', '    function settleBet() private {\n', '        \n', '        times += 1;\n', '        \n', '        if(totalSmall == 0 || totalBig==0){\n', '            for(uint256 i=0;i<big.length;i++){\n', '                balanceOf[big[i].gambler] = balanceOf[big[i].gambler].add(big[i].amount);\n', '            }\n', '            for( i=0;i<small.length;i++){\n', '                balanceOf[small[i].gambler] = balanceOf[small[i].gambler].add(small[i].amount);\n', '            }\n', '            emit settleBetEvent(100, times);\n', '        }else{\n', '            \n', '            uint _random = random();\n', '            if(_random >=50){\n', '                for( i=0;i<big.length;i++){\n', '                    balanceOf[big[i].gambler] = balanceOf[big[i].gambler].add(big[i].amount * odds(1)/10000);\n', '                }\n', '            }else{\n', '                for( i=0;i<small.length;i++){\n', '                    balanceOf[small[i].gambler] = balanceOf[small[i].gambler].add(small[i].amount * odds(0) / 10000);\n', '                }\n', '            }\n', '            balanceOf[owner] = balanceOf[owner].add((totalSmall + totalBig)  * 1/100);\n', '            emit settleBetEvent(_random, times);\n', '        }\n', '        \n', '        clean();\n', '        \n', '        \n', '    }\n', '    \n', '    function odds(uint256 _target) view public returns(uint256){\n', '        \n', '        if(totalSmall == 0 || totalBig == 0){\n', '            return 0;\n', '        }\n', '        \n', '        if(_target == 1){\n', '            return 10000*(totalSmall.add(totalBig)) / totalBig * 99/100;\n', '        }\n', '        \n', '        if(_target == 0){\n', '            return 10000*(totalSmall.add(totalBig)) / totalSmall * 99/100;\n', '        }\n', '\n', '    }\n', '    \n', '    function withdrawFunds(uint256 withdrawAmount) public  {\n', '        require (balanceOf[msg.sender] >= withdrawAmount);\n', '        require (withdrawAmount >= 0);\n', '        \n', '        if (msg.sender.send(withdrawAmount)) {\n', '            emit Payment(msg.sender, withdrawAmount);\n', '            balanceOf[msg.sender] = balanceOf[msg.sender].sub(withdrawAmount);\n', '        } else {\n', '            emit FailedPayment(msg.sender, withdrawAmount);\n', '        }\n', '        \n', '    }\n', '    \n', '    \n', '    \n', '    \n', '    function random() private view returns(uint256){\n', '        \n', '        if(big.length >0){\n', '            address addr = big[big.length-1].gambler;  \n', '        }else{\n', '             addr = msg.sender; \n', '        }\n', '\n', '        uint256 random = uint(keccak256(now, addr, (totalSmall + totalSmall))) % 100;\n', '        \n', '        if(small.length >0){\n', '             addr = small[big.length-1].gambler;  \n', '        }else{\n', '             addr = msg.sender; \n', '        }\n', '        \n', '        uint256 random2 = uint(keccak256(now, addr, random)) % 100;\n', '        \n', '        return random2;\n', '    }\n', '    \n', '    \n', '    function clean() private{\n', '        delete totalBig;\n', '        delete totalSmall;\n', '        delete big;\n', '        delete small;\n', '    }\n', '    \n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', 'library SafeMath {\n', '    int256 constant private INT256_MIN = -2**255;\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function mul(int256 a, int256 b) internal pure returns (int256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        require(!(a == -1 && b == INT256_MIN));\n', '        int256 c = a * b;\n', '        require(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function div(int256 a, int256 b) internal pure returns (int256) {\n', '        require(b != 0);\n', '        require(!(b == -1 && a == INT256_MIN)); \n', '        int256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '\n', '    function sub(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a - b;\n', '        require((b >= 0 && c <= a) || (b < 0 && c > a));\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function add(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a + b;\n', '        require((b >= 0 && c >= a) || (b < 0 && c < a));\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}']