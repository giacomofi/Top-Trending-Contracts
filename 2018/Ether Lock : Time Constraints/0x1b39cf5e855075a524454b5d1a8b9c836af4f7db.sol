['/*\n', 'Copyright (C) 2017-2018 Hashfuture Inc. All rights reserved.\n', 'This document is the property of Hashfuture Inc.\n', '*/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract HashFutureBasicToken {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    // Mapping from token ID to owner\n', '    mapping (uint256 => address) internal tokenOwner;\n', '\n', '    // Mapping from owner to number of owned token\n', '    mapping (address => uint256) internal ownedTokensCount;\n', '\n', '    modifier onlyOwnerOf(uint256 _tokenId) {\n', '        require(tokenOwner[_tokenId] == msg.sender);\n', '        _;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return ownedTokensCount[_owner];\n', '    }\n', '\n', '    function ownerOf(uint256 _tokenId) public view returns (address) {\n', '        address owner = tokenOwner[_tokenId];\n', '        return owner;\n', '    }\n', '\n', '    function addTokenTo(address _to, uint256 _tokenId) internal {\n', '        require(tokenOwner[_tokenId] == address(0));\n', '        tokenOwner[_tokenId] = _to;\n', '        ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n', '    }\n', '\n', '    function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '        require(ownerOf(_tokenId) == _from);\n', '        ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n', '        tokenOwner[_tokenId] = address(0);\n', '    }\n', '\n', '    function _mint(address _to, uint256 _tokenId) internal {\n', '        require(_to != address(0));\n', '        addTokenTo(_to, _tokenId);\n', '    }\n', '\n', '    function _burn(address _owner, uint256 _tokenId) internal {\n', '        removeTokenFrom(_owner, _tokenId);\n', '    }\n', '}\n', '\n', '\n', 'contract HashFutureToken is HashFutureBasicToken{\n', '\n', '    string internal name_;\n', '    string internal symbol_;\n', '\n', '    address public owner;\n', '\n', '    // Array with all token ids, used for enumeration\n', '    uint256[] internal allTokens;\n', '\n', '    // Mapping from token id to position in the allTokens array\n', '    mapping(uint256 => uint256) internal allTokensIndex;\n', '\n', '    // Mapping from owner to list of owned token IDs\n', '    mapping (address => uint256[]) internal ownedTokens;\n', '\n', '    // Mapping from token ID to index of the owner tokens list\n', '    mapping(uint256 => uint256) internal ownedTokensIndex;\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    constructor(string _name, string _symbol) public {\n', '        name_ = _name;\n', '        symbol_ = _symbol;\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '\n', '    function name() external view returns (string) {\n', '        return name_;\n', '    }\n', '\n', '    function symbol() external view returns (string) {\n', '        return symbol_;\n', '    }\n', '\n', '    function totalSupply() external view returns (uint256) {\n', '        return allTokens.length;\n', '    }\n', '\n', '    function tokenByIndex(uint256 _index) external view returns (uint256) {\n', '        require(_index < allTokens.length);\n', '        return allTokens[_index];\n', '    }\n', '\n', '    function tokenOfOwnerByIndex(\n', '        address _owner,\n', '        uint256 _index\n', '    )\n', '        external view returns (uint256)\n', '    {\n', '        require(_index < balanceOf(_owner));\n', '        return ownedTokens[_owner][_index];\n', '    }\n', '\n', '    function addTokenTo(address _to, uint256 _tokenId) internal {\n', '        super.addTokenTo(_to, _tokenId);\n', '\n', '        uint256 length = ownedTokens[_to].length;\n', '        ownedTokens[_to].push(_tokenId);\n', '        ownedTokensIndex[_tokenId] = length;\n', '    }\n', '\n', '    function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '        super.removeTokenFrom(_from, _tokenId);\n', '\n', '        uint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '        uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n', '        uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '        ownedTokens[_from][tokenIndex] = lastToken;\n', '        ownedTokens[_from][lastTokenIndex] = 0;\n', '\n', '        ownedTokens[_from].length = ownedTokens[_from].length.sub(1);\n', '        ownedTokensIndex[_tokenId] = 0;\n', '        ownedTokensIndex[lastToken] = tokenIndex;\n', '    }\n', '\n', '    function _mint(address _to, uint256 _tokenId) internal {\n', '        super._mint(_to, _tokenId);\n', '\n', '        allTokensIndex[_tokenId] = allTokens.length;\n', '        allTokens.push(_tokenId);\n', '    }\n', '\n', '    function _burn(address _owner, uint256 _tokenId) internal {\n', '        super._burn(_owner, _tokenId);\n', '\n', '        uint256 tokenIndex = allTokensIndex[_tokenId];\n', '        uint256 lastTokenIndex = allTokens.length.sub(1);\n', '        uint256 lastToken = allTokens[lastTokenIndex];\n', '\n', '        allTokens[tokenIndex] = lastToken;\n', '        allTokens[lastTokenIndex] = 0;\n', '\n', '        allTokens.length = allTokens.length.sub(1);\n', '        allTokensIndex[_tokenId] = 0;\n', '        allTokensIndex[lastToken] = tokenIndex;\n', '    }\n', '}\n', '/**\n', ' * Official token issued by HashFuture Inc.\n', ' * This is the token for HashFuture pioneers.\n', ' */\n', 'contract CommunityToken is HashFutureToken{\n', '\n', '    string internal privilege;\n', '    string internal contractIntroduction;\n', '\n', '    constructor() HashFutureToken("HashFuture CommunityToken", "HFCT") public {\n', '        privilege = "1.Privilege of enjoying a monthly airdrop of 10 Antarctic Lands; 2.Privilege of enjoying higher priority in pre-sale shares of tokenized assets in HashFuture trading platform; 3.Privilege of 20% discount in the commission fee of trading in HashFuture trading platform;";\n', '        contractIntroduction = "1. This token cannot be transferred, only the holder himself or herself can hold the token and enjoy the privileges; 2. The privileges of this token will be upgraded with the development of HashFuture; 3. If the holder quits from the HashFuture platform, this token and its privileges will be destroyed as well;";\n', '    }\n', '\n', '    struct IdentityInfo {\n', '        string hashID;\n', '        string name;\n', '        string country;\n', '    }\n', '\n', '    mapping(uint256 => IdentityInfo) IdentityInfoOfId;\n', '\n', '    /**\n', '     * @param _hashID token holder customized field, the HashFuture account ID\n', '     * @param _name token holder customized field, the name of the holder\n', '     * @param _country token holder customized field.\n', '     **/\n', '    function issueToken(\n', '        address _to,\n', '        string _hashID,\n', '        string _name,\n', '        string _country\n', '    )\n', '        public onlyOwner\n', '    {\n', '        uint256 _tokenId = allTokens.length;\n', '\n', '        IdentityInfoOfId[_tokenId] = IdentityInfo(\n', '            _hashID, _name, _country\n', '        );\n', '\n', '        _mint(_to, _tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev the contract owner can burn (recycle) any token in circulation.\n', '     **/\n', '    function burnToken(uint256 _tokenId) public onlyOwner{\n', '        address tokenOwner = ownerOf(_tokenId);\n', '        require(tokenOwner != address(0));\n', '\n', '        delete IdentityInfoOfId[_tokenId];\n', '        _burn(tokenOwner, _tokenId);\n', '    }\n', '\n', '    /**\n', "     * @dev Get the holder's info of a token.\n", '     * @param _tokenId id of interested token\n', '     **/\n', '    function getTokenInfo(uint256 _tokenId) external view returns (string, string, string) {\n', '        address tokenOwner = ownerOf(_tokenId);\n', '        require(tokenOwner != address(0));\n', '\n', '        IdentityInfo storage pInfo = IdentityInfoOfId[_tokenId];\n', '        return (\n', '            pInfo.hashID,\n', '            pInfo.name,\n', '            pInfo.country\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Get the privilege of the token\n', '     **/\n', '    function getPrivilege() external view returns (string) {\n', '        return privilege;\n', '    }\n', '\n', '    /**\n', '     * @dev Get the introduction of the token\n', '     **/\n', '    function getContractIntroduction() external view returns (string) {\n', '        return contractIntroduction;\n', '    }\n', '\n', '    /**\n', "     * @dev Update token holder's privileges\n", '     * only official operator can use this function\n', '     **/\n', '    function updatePrivilege(string _privilege) public onlyOwner {\n', '        privilege = _privilege;\n', '    }\n', '\n', '}']