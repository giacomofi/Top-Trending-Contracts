['pragma solidity ^0.4.25;\n', '\n', '// ----------------------------------------------------------------------------\n', '// BokkyPooBah&#39;s Pricefeed from a single source\n', '//\n', '// Deployed to: 0x4604646C55410EAa6Cf43b04d26071E36bC227Ef\n', '//\n', '// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018. The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '    bool private initialised;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function initOwned(address _owner) internal {\n', '        require(!initialised);\n', '        owner = _owner;\n', '        initialised = true;\n', '    }\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '    function transferOwnershipImmediately(address _newOwner) public onlyOwner {\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Maintain a list of operators that are permissioned to execute certain\n', '// functions\n', '// ----------------------------------------------------------------------------\n', 'contract Operated is Owned {\n', '    mapping(address => bool) public operators;\n', '\n', '    event OperatorAdded(address _operator);\n', '    event OperatorRemoved(address _operator);\n', '\n', '    modifier onlyOperator() {\n', '        require(operators[msg.sender] || owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    function initOperated(address _owner) internal {\n', '        initOwned(_owner);\n', '    }\n', '    function addOperator(address _operator) public onlyOwner {\n', '        require(!operators[_operator]);\n', '        operators[_operator] = true;\n', '        emit OperatorAdded(_operator);\n', '    }\n', '    function removeOperator(address _operator) public onlyOwner {\n', '        require(operators[_operator]);\n', '        delete operators[_operator];\n', '        emit OperatorRemoved(_operator);\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// PriceFeed Interface - _live is true if the rate is valid, false if invalid\n', '// ----------------------------------------------------------------------------\n', 'contract PriceFeedInterface {\n', '    function getRate() public view returns (uint _rate, bool _live);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Pricefeed from a single source\n', '// ----------------------------------------------------------------------------\n', 'contract PriceFeed is PriceFeedInterface, Operated {\n', '    string public name;\n', '    uint public rate;\n', '    bool public live;\n', '\n', '    event SetRate(uint oldRate, bool oldLive, uint newRate, bool newLive);\n', '\n', '    constructor(string _name, uint _rate, bool _live) public {\n', '        initOperated(msg.sender);\n', '        name = _name;\n', '        rate = _rate;\n', '        live = _live;\n', '        emit SetRate(0, false, rate, live);\n', '    }\n', '    function setRate(uint _rate, bool _live) public onlyOperator {\n', '        emit SetRate(rate, live, _rate, _live);\n', '        rate = _rate;\n', '        live = _live;\n', '    }\n', '    function getRate() public view returns (uint _rate, bool _live) {\n', '        return (rate, live);\n', '    }\n', '}']
['pragma solidity ^0.4.25;\n', '\n', '// ----------------------------------------------------------------------------\n', "// BokkyPooBah's Pricefeed from a single source\n", '//\n', '// Deployed to: 0x4604646C55410EAa6Cf43b04d26071E36bC227Ef\n', '//\n', '// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018. The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '    bool private initialised;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function initOwned(address _owner) internal {\n', '        require(!initialised);\n', '        owner = _owner;\n', '        initialised = true;\n', '    }\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '    function transferOwnershipImmediately(address _newOwner) public onlyOwner {\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Maintain a list of operators that are permissioned to execute certain\n', '// functions\n', '// ----------------------------------------------------------------------------\n', 'contract Operated is Owned {\n', '    mapping(address => bool) public operators;\n', '\n', '    event OperatorAdded(address _operator);\n', '    event OperatorRemoved(address _operator);\n', '\n', '    modifier onlyOperator() {\n', '        require(operators[msg.sender] || owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    function initOperated(address _owner) internal {\n', '        initOwned(_owner);\n', '    }\n', '    function addOperator(address _operator) public onlyOwner {\n', '        require(!operators[_operator]);\n', '        operators[_operator] = true;\n', '        emit OperatorAdded(_operator);\n', '    }\n', '    function removeOperator(address _operator) public onlyOwner {\n', '        require(operators[_operator]);\n', '        delete operators[_operator];\n', '        emit OperatorRemoved(_operator);\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// PriceFeed Interface - _live is true if the rate is valid, false if invalid\n', '// ----------------------------------------------------------------------------\n', 'contract PriceFeedInterface {\n', '    function getRate() public view returns (uint _rate, bool _live);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Pricefeed from a single source\n', '// ----------------------------------------------------------------------------\n', 'contract PriceFeed is PriceFeedInterface, Operated {\n', '    string public name;\n', '    uint public rate;\n', '    bool public live;\n', '\n', '    event SetRate(uint oldRate, bool oldLive, uint newRate, bool newLive);\n', '\n', '    constructor(string _name, uint _rate, bool _live) public {\n', '        initOperated(msg.sender);\n', '        name = _name;\n', '        rate = _rate;\n', '        live = _live;\n', '        emit SetRate(0, false, rate, live);\n', '    }\n', '    function setRate(uint _rate, bool _live) public onlyOperator {\n', '        emit SetRate(rate, live, _rate, _live);\n', '        rate = _rate;\n', '        live = _live;\n', '    }\n', '    function getRate() public view returns (uint _rate, bool _live) {\n', '        return (rate, live);\n', '    }\n', '}']
