['pragma solidity ^0.4.24;\n', '\n', '/**\n', '* @title SafeMath\n', '* @dev Math operations with safety checks that revert on error\n', '*/\n', 'library SafeMath {\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\n', '    return c;\n', '  }\n', '}\n', '\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value) external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(IERC20 token, address to, uint256 value) internal{\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract TalaRCrowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for IERC20;\n', '\n', '  // The token being sold\n', '  IERC20 private _token;\n', '\n', '  // Address where funds are collected\n', '  address private _wallet;\n', '\n', '  // How many token units a buyer gets per wei.\n', '  uint256 private _rate;\n', '\n', '  // Same as _rate but in bonus time\n', '  uint256 private _bonusRate;\n', '\n', '  // bonus cap in wei\n', '  uint256 private _bonusCap;\n', '\n', '  // Amount of wei raised\n', '  uint256 private _weiRaised;\n', '\n', '  // Timestamps\n', '  uint256 private _openingTime;\n', '  uint256 private _bonusEndTime;\n', '  uint256 private _closingTime;\n', '\n', '  // Minimal contribution - 0.05 ETH\n', '  uint256 private constant MINIMAL_CONTRIBUTION = 50000000000000000;\n', '\n', '  event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  constructor(uint256 rate, uint256 bonusRate, uint256 bonusCap, uint256 openingTime, uint256 bonusEndTime, uint256 closingTime, address wallet, IERC20 token) public {\n', '    require(rate > 0);\n', '    require(bonusRate > 0);\n', '    require(bonusCap > 0);\n', '    require(openingTime >= block.timestamp);\n', '    require(bonusEndTime >= openingTime);\n', '    require(closingTime >= bonusEndTime);\n', '    require(wallet != address(0));\n', '\n', '    _rate = rate;\n', '    _bonusRate = bonusRate;\n', '    _bonusCap = bonusCap;\n', '    _wallet = wallet;\n', '    _token = token;\n', '    _openingTime = openingTime;\n', '    _closingTime = closingTime;\n', '    _bonusEndTime = bonusEndTime;\n', '  }\n', '\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  function token() public view returns(IERC20) {\n', '    return _token;\n', '  }\n', '\n', '  function wallet() public view returns(address) {\n', '    return _wallet;\n', '  }\n', '\n', '  function rate() public view returns(uint256) {\n', '    return _rate;\n', '  }\n', '\n', '  function bonusRate() public view returns(uint256) {\n', '    return _bonusRate;\n', '  }\n', '\n', '  function bonusCap() public view returns(uint256) {\n', '    return _bonusCap;\n', '  }\n', '\n', '  function weiRaised() public view returns (uint256) {\n', '    return _weiRaised;\n', '  }\n', '\n', '  function openingTime() public view returns(uint256) {\n', '    return _openingTime;\n', '  }\n', '\n', '  function closingTime() public view returns(uint256) {\n', '    return _closingTime;\n', '  }\n', '\n', '  function bonusEndTime() public view returns(uint256) {\n', '    return _bonusEndTime;\n', '  }\n', '\n', '  function buyTokens(address beneficiary) public payable {\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(beneficiary, weiAmount);\n', '\n', '    uint256 tokenAmount = _getTokenAmount(weiAmount);\n', '\n', '    _weiRaised = _weiRaised.add(weiAmount);\n', '\n', '    _token.safeTransfer(beneficiary, tokenAmount);\n', '    emit TokensPurchased(msg.sender, beneficiary, weiAmount, tokenAmount);\n', '\n', '    _forwardFunds();\n', '  }\n', '\n', '  function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal {\n', '    require(isOpen());\n', '    require(beneficiary != address(0));\n', '    require(weiAmount >= MINIMAL_CONTRIBUTION);\n', '  }\n', '\n', '  function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\n', '    return weiAmount.mul(_getCurrentRate());\n', '  }\n', '\n', '  function _forwardFunds() internal {\n', '    _wallet.transfer(msg.value);\n', '  }\n', '\n', '  function _getCurrentRate() internal view returns (uint256) {\n', '    return isBonusTime() ? _bonusRate : _rate;\n', '  }\n', '\n', '  function isOpen() public view returns (bool) {\n', '    return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\n', '  }\n', '\n', '  function hasClosed() public view returns (bool) {\n', '    return block.timestamp > _closingTime;\n', '  }\n', '\n', '  function isBonusTime() public view returns (bool) {\n', '    return block.timestamp >= _openingTime && block.timestamp <= _bonusEndTime && _weiRaised <= _bonusCap;\n', '  }\n', '\n', '  // ETH balance is always expected to be 0.\n', '  // but in case something went wrong, owner can extract ETH\n', '  function emergencyETHDrain() external onlyOwner {\n', '    _wallet.transfer(address(this).balance);\n', '  }\n', '\n', '  // owner can drain tokens that are sent here by mistake\n', '  function emergencyERC20Drain(IERC20 tokenDrained, uint amount) external onlyOwner {\n', '    tokenDrained.transfer(owner, amount);\n', '  }\n', '\n', '  // when sale is closed owner can drain any tokens left \n', '  function tokensLeftDrain(uint amount) external onlyOwner {\n', '    require(hasClosed());\n', '    _token.transfer(owner, amount);\n', '  }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', '* @title SafeMath\n', '* @dev Math operations with safety checks that revert on error\n', '*/\n', 'library SafeMath {\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '}\n', '\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value) external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(IERC20 token, address to, uint256 value) internal{\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract TalaRCrowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for IERC20;\n', '\n', '  // The token being sold\n', '  IERC20 private _token;\n', '\n', '  // Address where funds are collected\n', '  address private _wallet;\n', '\n', '  // How many token units a buyer gets per wei.\n', '  uint256 private _rate;\n', '\n', '  // Same as _rate but in bonus time\n', '  uint256 private _bonusRate;\n', '\n', '  // bonus cap in wei\n', '  uint256 private _bonusCap;\n', '\n', '  // Amount of wei raised\n', '  uint256 private _weiRaised;\n', '\n', '  // Timestamps\n', '  uint256 private _openingTime;\n', '  uint256 private _bonusEndTime;\n', '  uint256 private _closingTime;\n', '\n', '  // Minimal contribution - 0.05 ETH\n', '  uint256 private constant MINIMAL_CONTRIBUTION = 50000000000000000;\n', '\n', '  event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  constructor(uint256 rate, uint256 bonusRate, uint256 bonusCap, uint256 openingTime, uint256 bonusEndTime, uint256 closingTime, address wallet, IERC20 token) public {\n', '    require(rate > 0);\n', '    require(bonusRate > 0);\n', '    require(bonusCap > 0);\n', '    require(openingTime >= block.timestamp);\n', '    require(bonusEndTime >= openingTime);\n', '    require(closingTime >= bonusEndTime);\n', '    require(wallet != address(0));\n', '\n', '    _rate = rate;\n', '    _bonusRate = bonusRate;\n', '    _bonusCap = bonusCap;\n', '    _wallet = wallet;\n', '    _token = token;\n', '    _openingTime = openingTime;\n', '    _closingTime = closingTime;\n', '    _bonusEndTime = bonusEndTime;\n', '  }\n', '\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  function token() public view returns(IERC20) {\n', '    return _token;\n', '  }\n', '\n', '  function wallet() public view returns(address) {\n', '    return _wallet;\n', '  }\n', '\n', '  function rate() public view returns(uint256) {\n', '    return _rate;\n', '  }\n', '\n', '  function bonusRate() public view returns(uint256) {\n', '    return _bonusRate;\n', '  }\n', '\n', '  function bonusCap() public view returns(uint256) {\n', '    return _bonusCap;\n', '  }\n', '\n', '  function weiRaised() public view returns (uint256) {\n', '    return _weiRaised;\n', '  }\n', '\n', '  function openingTime() public view returns(uint256) {\n', '    return _openingTime;\n', '  }\n', '\n', '  function closingTime() public view returns(uint256) {\n', '    return _closingTime;\n', '  }\n', '\n', '  function bonusEndTime() public view returns(uint256) {\n', '    return _bonusEndTime;\n', '  }\n', '\n', '  function buyTokens(address beneficiary) public payable {\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(beneficiary, weiAmount);\n', '\n', '    uint256 tokenAmount = _getTokenAmount(weiAmount);\n', '\n', '    _weiRaised = _weiRaised.add(weiAmount);\n', '\n', '    _token.safeTransfer(beneficiary, tokenAmount);\n', '    emit TokensPurchased(msg.sender, beneficiary, weiAmount, tokenAmount);\n', '\n', '    _forwardFunds();\n', '  }\n', '\n', '  function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal {\n', '    require(isOpen());\n', '    require(beneficiary != address(0));\n', '    require(weiAmount >= MINIMAL_CONTRIBUTION);\n', '  }\n', '\n', '  function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\n', '    return weiAmount.mul(_getCurrentRate());\n', '  }\n', '\n', '  function _forwardFunds() internal {\n', '    _wallet.transfer(msg.value);\n', '  }\n', '\n', '  function _getCurrentRate() internal view returns (uint256) {\n', '    return isBonusTime() ? _bonusRate : _rate;\n', '  }\n', '\n', '  function isOpen() public view returns (bool) {\n', '    return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\n', '  }\n', '\n', '  function hasClosed() public view returns (bool) {\n', '    return block.timestamp > _closingTime;\n', '  }\n', '\n', '  function isBonusTime() public view returns (bool) {\n', '    return block.timestamp >= _openingTime && block.timestamp <= _bonusEndTime && _weiRaised <= _bonusCap;\n', '  }\n', '\n', '  // ETH balance is always expected to be 0.\n', '  // but in case something went wrong, owner can extract ETH\n', '  function emergencyETHDrain() external onlyOwner {\n', '    _wallet.transfer(address(this).balance);\n', '  }\n', '\n', '  // owner can drain tokens that are sent here by mistake\n', '  function emergencyERC20Drain(IERC20 tokenDrained, uint amount) external onlyOwner {\n', '    tokenDrained.transfer(owner, amount);\n', '  }\n', '\n', '  // when sale is closed owner can drain any tokens left \n', '  function tokensLeftDrain(uint amount) external onlyOwner {\n', '    require(hasClosed());\n', '    _token.transfer(owner, amount);\n', '  }\n', '}']
