['pragma solidity ^0.4.23;\n', '\n', '// File: contracts/Ownerable.sol\n', '\n', 'contract Ownerable {\n', '    /// @notice The address of the owner is the only address that can call\n', '    ///  a function with this modifier\n', '    modifier onlyOwner { require(msg.sender == owner); _; }\n', '\n', '    address public owner;\n', '\n', '    constructor() public { owner = msg.sender;}\n', '\n', '    /// @notice Changes the owner of the contract\n', '    /// @param _newOwner The new owner of the contract\n', '    function setOwner(address _newOwner) public onlyOwner {\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/TokenController.sol\n', '\n', 'contract TokenController {\n', '    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n', '    /// @param _owner The address that sent the ether to create tokens\n', '    /// @return True if the ether is accepted, false if it throws\n', '    function proxyPayment(address _owner) public payable returns(bool);\n', '\n', '    /// @notice Notifies the controller about a token transfer allowing the\n', '    ///  controller to react if desired\n', '    /// @param _from The origin of the transfer\n', '    /// @param _to The destination of the transfer\n', '    /// @param _amount The amount of the transfer\n', '    /// @return False if the controller does not authorize the transfer\n', '    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\n', '\n', '    /// @notice Notifies the controller about an approval allowing the\n', '    ///  controller to react if desired\n', '    /// @param _owner The address that calls `approve()`\n', '    /// @param _spender The spender in the `approve()` call\n', '    /// @param _amount The amount in the `approve()` call\n', '    /// @return False if the controller does not authorize the approval\n', '    function onApprove(address _owner, address _spender, uint _amount) public returns(bool);\n', '}\n', '\n', '// File: contracts/ATXICOToken.sol\n', '\n', 'contract ATXICOToken {\n', '    function atxBuy(address _from, uint256 _amount) public returns(bool);\n', '}\n', '\n', '// File: contracts/ATX.sol\n', '\n', 'contract ATX {\n', '    function blacklistAccount(address tokenOwner) public returns (bool);\n', '    function unBlacklistAccount(address tokenOwner) public returns (bool);\n', '    function enableTransfers(bool _transfersEnabled) public;\n', '    function changeController(address _newController) public;\n', '}\n', '\n', '// File: contracts/ATXController.sol\n', '\n', 'contract ATXController is TokenController, Ownerable {\n', '\n', '    address public atxContract;\n', '    mapping (address => bool) public icoTokens;\n', '\n', '    event Debug(address indexed _from, address indexed _to, uint256 indexed _amount, uint ord);\n', '\n', '    constructor (address _atxContract) public {\n', '        atxContract = _atxContract;\n', '    }\n', '\n', '    function addICOToken(address _icoToken) public onlyOwner {\n', '        icoTokens[_icoToken] = true;\n', '    }\n', '    function delICOToken(address _icoToken) public onlyOwner {\n', '        icoTokens[_icoToken] = false;\n', '    }\n', '\n', '    function proxyPayment(address _owner) public payable returns(bool) {\n', '        return false;\n', '    }\n', '\n', '    function onTransfer(address _from, address _to, uint256 _amount) public returns(bool) {\n', '        require(atxContract == msg.sender);\n', '        require(_to != 0x0);\n', '\n', '        // default\n', '        bool result = true;\n', '\n', '        if(icoTokens[_to] == true) {\n', '            result = ATXICOToken(_to).atxBuy(_from, _amount);\n', '        }\n', '        return result;\n', '    }\n', '\n', '    function onApprove(address _owner, address _spender, uint _amount) public returns(bool) {\n', '        return true;\n', '    }\n', '\n', '    //\n', '    // for controlling ATX\n', '    function blacklist(address tokenOwner) public onlyOwner returns (bool) {\n', '        return ATX(atxContract).blacklistAccount(tokenOwner);\n', '    }\n', '\n', '    function unBlacklist(address tokenOwner) public onlyOwner returns (bool) {\n', '        return ATX(atxContract).unBlacklistAccount(tokenOwner);\n', '    }\n', '\n', '    function enableTransfers(bool _transfersEnabled) public onlyOwner {\n', '        ATX(atxContract).enableTransfers(_transfersEnabled);\n', '    }\n', '\n', '    function changeController(address _newController) public onlyOwner {\n', '        ATX(atxContract).changeController(_newController);\n', '    }\n', '\n', '    function changeATXTokenAddr(address _newTokenAddr) public onlyOwner {\n', '        atxContract = _newTokenAddr;\n', '    }\n', '\n', '    function ownerMethod() public onlyOwner returns(bool) {\n', '      return true;\n', '    }\n', '}']