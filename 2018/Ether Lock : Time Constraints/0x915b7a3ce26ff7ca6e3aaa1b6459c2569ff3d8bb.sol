['pragma solidity ^0.4.19;\n', '\n', 'contract Ownable {\n', '\n', '  /**\n', '   * @dev set `owner` of the contract to the sender\n', '   */\n', '  address public owner = msg.sender;\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Data is Ownable {\n', '\n', '    // node => its parent\n', '    mapping (address => address) private parent;\n', '\n', '    // node => its status\n', '    mapping (address => uint8) public statuses;\n', '\n', '    // node => sum of all his child deposits in USD cents\n', '    mapping (address => uint) public referralDeposits;\n', '\n', '    // client => balance in wei*10^(-6) available for withdrawal\n', '    mapping(address => uint256) private balances;\n', '\n', '    // investor => balance in wei*10^(-6) available for withdrawal\n', '    mapping(address => uint256) private investorBalances;\n', '\n', '    function parentOf(address _addr) public constant returns (address) {\n', '        return parent[_addr];\n', '    }\n', '\n', '    function balanceOf(address _addr) public constant returns (uint256) {\n', '        return balances[_addr] / 1000000;\n', '    }\n', '\n', '    function investorBalanceOf(address _addr) public constant returns (uint256) {\n', '        return investorBalances[_addr] / 1000000;\n', '    }\n', '\n', '    /**\n', '     * @dev The Data constructor to set up the first depositer\n', '     */\n', '    function Data() public {\n', '        // DirectorOfRegion - 7\n', '        statuses[msg.sender] = 7;\n', '    }\n', '\n', '    function addBalance(address _addr, uint256 amount) onlyOwner public {\n', '        balances[_addr] += amount;\n', '    }\n', '\n', '    function subtrBalance(address _addr, uint256 amount) onlyOwner public {\n', '        require(balances[_addr] >= amount);\n', '        balances[_addr] -= amount;\n', '    }\n', '\n', '    function addInvestorBalance(address _addr, uint256 amount) onlyOwner public {\n', '        investorBalances[_addr] += amount;\n', '    }\n', '\n', '    function subtrInvestorBalance(address _addr, uint256 amount) onlyOwner public {\n', '        require(investorBalances[_addr] >= amount);\n', '        investorBalances[_addr] -= amount;\n', '    }\n', '\n', '    function addReferralDeposit(address _addr, uint256 amount) onlyOwner public {\n', '        referralDeposits[_addr] += amount;\n', '    }\n', '\n', '    function setStatus(address _addr, uint8 _status) onlyOwner public {\n', '        statuses[_addr] = _status;\n', '    }\n', '\n', '    function setParent(address _addr, address _parent) onlyOwner public {\n', '        parent[_addr] = _parent;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.19;\n', '\n', 'contract Ownable {\n', '\n', '  /**\n', '   * @dev set `owner` of the contract to the sender\n', '   */\n', '  address public owner = msg.sender;\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Data is Ownable {\n', '\n', '    // node => its parent\n', '    mapping (address => address) private parent;\n', '\n', '    // node => its status\n', '    mapping (address => uint8) public statuses;\n', '\n', '    // node => sum of all his child deposits in USD cents\n', '    mapping (address => uint) public referralDeposits;\n', '\n', '    // client => balance in wei*10^(-6) available for withdrawal\n', '    mapping(address => uint256) private balances;\n', '\n', '    // investor => balance in wei*10^(-6) available for withdrawal\n', '    mapping(address => uint256) private investorBalances;\n', '\n', '    function parentOf(address _addr) public constant returns (address) {\n', '        return parent[_addr];\n', '    }\n', '\n', '    function balanceOf(address _addr) public constant returns (uint256) {\n', '        return balances[_addr] / 1000000;\n', '    }\n', '\n', '    function investorBalanceOf(address _addr) public constant returns (uint256) {\n', '        return investorBalances[_addr] / 1000000;\n', '    }\n', '\n', '    /**\n', '     * @dev The Data constructor to set up the first depositer\n', '     */\n', '    function Data() public {\n', '        // DirectorOfRegion - 7\n', '        statuses[msg.sender] = 7;\n', '    }\n', '\n', '    function addBalance(address _addr, uint256 amount) onlyOwner public {\n', '        balances[_addr] += amount;\n', '    }\n', '\n', '    function subtrBalance(address _addr, uint256 amount) onlyOwner public {\n', '        require(balances[_addr] >= amount);\n', '        balances[_addr] -= amount;\n', '    }\n', '\n', '    function addInvestorBalance(address _addr, uint256 amount) onlyOwner public {\n', '        investorBalances[_addr] += amount;\n', '    }\n', '\n', '    function subtrInvestorBalance(address _addr, uint256 amount) onlyOwner public {\n', '        require(investorBalances[_addr] >= amount);\n', '        investorBalances[_addr] -= amount;\n', '    }\n', '\n', '    function addReferralDeposit(address _addr, uint256 amount) onlyOwner public {\n', '        referralDeposits[_addr] += amount;\n', '    }\n', '\n', '    function setStatus(address _addr, uint8 _status) onlyOwner public {\n', '        statuses[_addr] = _status;\n', '    }\n', '\n', '    function setParent(address _addr, address _parent) onlyOwner public {\n', '        parent[_addr] = _parent;\n', '    }\n', '\n', '}']
