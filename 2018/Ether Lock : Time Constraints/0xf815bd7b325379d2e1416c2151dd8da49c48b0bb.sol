['pragma solidity 0.4.24;\n', '\n', '\n', 'interface iERC20 {\n', '    function totalSupply() external constant returns (uint256 supply);\n', '    function balanceOf(address owner) external constant returns (uint256 balance);    \n', '    function transfer(address to, uint tokens) external returns (bool success);\n', '}\n', '\n', '/// @title buying tokens with eth.\n', '/// @dev This contract must be created with the address of the token to sell.\n', '/// This contract must also own some quantity of the token it&#39;s selling.\n', '/// Note: This is not meant to be feature complete.\n', '\n', 'contract MeerkatICO {\n', '    iERC20 token;\n', '    address owner;\n', '    address tokenCo;\n', '    uint rateMe;\n', '    \n', '    modifier ownerOnly() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    // @notice Initialises the contract.\n', '    // @param _main The address of an ERC20 compatible token to sell.\n', '   constructor(address _main) public {\n', '        token = iERC20(_main);\n', '        tokenCo = _main;\n', '        owner = msg.sender;\n', '        rateMe = 14400;\n', '    }\n', '\n', '    /// @notice Will transfer all ether in this account to the contract owner.\n', '    function withdraw() public ownerOnly {\n', '        owner.transfer(address(this).balance);\n', '    }\n', '\n', '    /// @notice This function will set the conversion rate.\n', '    /// @dev To set a rate of 100 token / eth, you would make the rate 100 hopefully.\n', '    /// @param _rateMe The conversion rate in a hole\n', '    function setRate(uint _rateMe) public ownerOnly {\n', '        rateMe = _rateMe;\n', '    }\n', '    \n', '    function CurrentRate() public constant returns (uint rate) {\n', '        return rateMe;\n', '    }\n', '    \n', '    function TokenLinked() public constant returns (address _token, uint _amountLeft) {\n', '        return (tokenCo, (token.balanceOf(address(this)) / 10**18)) ;\n', '    }\n', '    \n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public ownerOnly returns (bool success) {\n', '        return iERC20(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '    /// @notice Any funds sent to this contract will be converted to the linked contract&#39;s tokens\n', '    /// @dev This function receives funds, and transfers tokens based on the current conversion rate\n', '    \n', '    function () public payable {\n', '        // minimum contribution is 0.1 ETH\n', '        // STOP selling if the rate is set to 0\n', '        require( (msg.value >= 100000000000000000) && (rateMe != 0) );\n', '        \n', '        uint value = msg.value * rateMe;\n', '        \n', '        // Overflow detection/protection:\n', '        require(value/msg.value == rateMe);\n', '        \n', '        token.transfer(msg.sender, value);\n', '        \n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '\n', 'interface iERC20 {\n', '    function totalSupply() external constant returns (uint256 supply);\n', '    function balanceOf(address owner) external constant returns (uint256 balance);    \n', '    function transfer(address to, uint tokens) external returns (bool success);\n', '}\n', '\n', '/// @title buying tokens with eth.\n', '/// @dev This contract must be created with the address of the token to sell.\n', "/// This contract must also own some quantity of the token it's selling.\n", '/// Note: This is not meant to be feature complete.\n', '\n', 'contract MeerkatICO {\n', '    iERC20 token;\n', '    address owner;\n', '    address tokenCo;\n', '    uint rateMe;\n', '    \n', '    modifier ownerOnly() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    // @notice Initialises the contract.\n', '    // @param _main The address of an ERC20 compatible token to sell.\n', '   constructor(address _main) public {\n', '        token = iERC20(_main);\n', '        tokenCo = _main;\n', '        owner = msg.sender;\n', '        rateMe = 14400;\n', '    }\n', '\n', '    /// @notice Will transfer all ether in this account to the contract owner.\n', '    function withdraw() public ownerOnly {\n', '        owner.transfer(address(this).balance);\n', '    }\n', '\n', '    /// @notice This function will set the conversion rate.\n', '    /// @dev To set a rate of 100 token / eth, you would make the rate 100 hopefully.\n', '    /// @param _rateMe The conversion rate in a hole\n', '    function setRate(uint _rateMe) public ownerOnly {\n', '        rateMe = _rateMe;\n', '    }\n', '    \n', '    function CurrentRate() public constant returns (uint rate) {\n', '        return rateMe;\n', '    }\n', '    \n', '    function TokenLinked() public constant returns (address _token, uint _amountLeft) {\n', '        return (tokenCo, (token.balanceOf(address(this)) / 10**18)) ;\n', '    }\n', '    \n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public ownerOnly returns (bool success) {\n', '        return iERC20(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', "    /// @notice Any funds sent to this contract will be converted to the linked contract's tokens\n", '    /// @dev This function receives funds, and transfers tokens based on the current conversion rate\n', '    \n', '    function () public payable {\n', '        // minimum contribution is 0.1 ETH\n', '        // STOP selling if the rate is set to 0\n', '        require( (msg.value >= 100000000000000000) && (rateMe != 0) );\n', '        \n', '        uint value = msg.value * rateMe;\n', '        \n', '        // Overflow detection/protection:\n', '        require(value/msg.value == rateMe);\n', '        \n', '        token.transfer(msg.sender, value);\n', '        \n', '    }\n', '}']
