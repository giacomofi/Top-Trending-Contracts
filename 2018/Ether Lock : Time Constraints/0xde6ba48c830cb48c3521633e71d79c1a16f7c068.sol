['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '\n', '}\n', '\n', '/**\n', ' * @title CappedCrowdsale\n', ' * @dev Extension of Crowdsale with a max amount of funds raised\n', ' */\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedCrowdsale(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  // overriding Crowdsale#validPurchase to add extra cap logic\n', '  // @return true if investors can buy at the moment\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinCap = weiRaised.add(msg.value) <= cap;\n', '    return super.validPurchase() && withinCap;\n', '  }\n', '\n', '  // overriding Crowdsale#hasEnded to add cap logic\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    return super.hasEnded() || capReached;\n', '  }\n', '\n', '}\n', '\n', 'contract Vend is MintableToken {\n', '  \tstring public constant name = "VEND";\n', '  \tstring public constant symbol = "VEND";\n', '  \tuint8 public constant decimals = 18;\n', '\n', '  \t/**\n', '    * @dev Function to stop minting new tokens.\n', ' \t* @return True if the operation was successful.\n', '    */\n', '    function finishMinting() onlyOwner canMint public returns (bool) {\n', '      mintingFinished = true;\n', '      MintFinished();\n', '      return true;\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', 'contract VendCrowdsale is Crowdsale , Ownable, CappedCrowdsale {\n', '\n', '\t//stage presale or crowdsale\n', '\tenum Stage {PRESALE, PUBLICSALE}\n', '\n', '\t//stage ICO\n', '\tStage public stage;\n', '\n', '\tuint256 private constant DECIMALFACTOR = 10**uint256(18);\n', '\n', '\tuint256 public publicAllocation = 120000000 * DECIMALFACTOR; //60% Public Allocation \n', '\tuint256 public advisorsAllocation = 20000000 * DECIMALFACTOR; // 10% Advisory and Legal Fund Allocation  \n', '\tuint256 public marketAllocation = 20000000 * DECIMALFACTOR; //10% Market Place Incentive\n', '\tuint256 public founderAllocation = 40000000* DECIMALFACTOR; //20% Founder & Key Employee Allocation\n', '\n', '\tuint256 public softCap = 9000 ether;\n', '             \n', '\n', '\tbool public isGoalReached = false;\n', '\t// How much ETH each address has invested to this crowdsale\n', '\tmapping (address => uint256) public investedAmountOf;\n', '\t// How many distinct addresses have invested\n', '\tuint256 public investorCount;\n', '\n', '\tuint256 public minContribAmount = 0.1 ether; // 0.1 ether\n', '\n', '\tevent MinimumGoalReached();\n', '\tevent Burn (address indexed burner, uint256 value);\n', '\n', '\n', '\t/**\n', '\n', ' \t* \n', ' \t* @dev VendCrowdsale is a base contract for managing a token crowdsale.\n', ' \t* VendCrowdsale have a start and end timestamps, where investors can make\n', ' \t* token purchases and the crowdsale will assign them tokens based\n', ' \t* on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' \t* as they arrive.\n', ' \t*/\n', '\tfunction VendCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, uint256 _cap)\n', '    \tCrowdsale (_startTime, _endTime, _rate, _wallet) CappedCrowdsale(_cap * DECIMALFACTOR)\n', '  {\n', '    \tstage = Stage.PRESALE;\n', '  }\n', '  \tfunction createTokenContract() internal returns (MintableToken) {\n', '    \treturn new Vend();\n', '  }\n', '\n', '  \t// low level token purchase function\n', '  \t// @notice buyTokens\n', '  \t// @param beneficiary The address of the beneficiary\n', '  \t// @return the transaction address and send the event as TokenPurchase\n', '\n', '  \tfunction buyTokens(address beneficiary) public payable {\n', '\n', '       \trequire(validPurchase());\n', '       \tuint256 weiAmount = msg.value;\n', '       \t// calculate token amount to be created\n', '       \tuint256 tokens = weiAmount.mul(rate);\n', '       \tuint256 timebasedBonus = tokens.mul(getTimebasedBonusRate()).div(100);\n', '       \tuint256 volumebasedBonus = tokens.mul(getVolumebasedBonusRate(weiAmount)).div(100);\n', '       \ttokens = tokens.add(timebasedBonus);\n', '       \ttokens = tokens.add(volumebasedBonus);\n', '\t\tassert (tokens <= publicAllocation);\n', '\t\t   \n', '       \tif(investedAmountOf[beneficiary] == 0) {\n', '           // A new investor\n', '           \tinvestorCount++;\n', '        }\n', '        // Update investor\n', '        investedAmountOf[beneficiary] = investedAmountOf[beneficiary].add(weiAmount);\n', '        if (stage == Stage.PRESALE) {\n', '            assert (tokens <= publicAllocation);\n', '            publicAllocation = publicAllocation.sub(tokens);\n', '        } else {\n', '            assert (tokens <= publicAllocation);\n', '            publicAllocation = publicAllocation.sub(tokens);\n', '\n', '        }\n', '       forwardFunds();\n', '       weiRaised = weiRaised.add(weiAmount);\n', '       token.mint(beneficiary, tokens);\n', '       TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '       if (!isGoalReached && weiRaised >= softCap) {\n', '             isGoalReached = true;\n', '             MinimumGoalReached();\n', '         }\n', '     }\n', '\n', '     // @return true if the transaction can buy tokens\n', '    function validPurchase() internal constant returns (bool) {\n', '       bool minContribution = minContribAmount <= msg.value;\n', '       bool withinPeriod = now >= startTime && now <= endTime;\n', '       bool nonZeroPurchase = msg.value != 0;\n', '       bool Publicsale =publicAllocation !=0;\n', '       return withinPeriod && minContribution && nonZeroPurchase && Publicsale;\n', '    }\n', '   // @return  current time\n', '    function getNow() public constant returns (uint) {\n', '       return (now);\n', '    }\n', '   \t// @return time-based bonus rate\n', '    function getTimebasedBonusRate() internal constant returns (uint256) {\n', '       uint256 bonusRate = 0;\n', '         if (stage == Stage.PUBLICSALE) {\n', '       uint256 nowTime = getNow();\n', '       uint256 week1 = startTime + (7 days);\n', '       uint256 week2 = startTime + (14 days);\n', '       uint256 week3 = startTime + (21 days);\n', '       uint256 week4 = startTime + (14 days);\n', '\n', '       if (nowTime <= week1) {\n', '           bonusRate = 15;\n', '       }else if (nowTime <= week2) {\n', '           bonusRate = 15;\n', '       }else if (nowTime <= week3) {\n', '           bonusRate = 10;\n', '       } else if (nowTime <= week4) {\n', '           bonusRate = 10;\n', '       }\n', '         }\n', '       return bonusRate;\n', '   }\n', '   \t//@return getVolumebasedBonus\n', '    function getVolumebasedBonusRate(uint256 value) internal constant returns (uint256) {\n', '        uint256 bonusRate = 0;\n', '        if (stage == Stage.PRESALE) {\n', '            uint256 volume = value.div(1 ether);\n', '        if (volume >= 70 && volume <= 100 ) {\n', '            bonusRate = 15;\n', '        }else if (volume >= 40 && volume <= 69 ) {\n', '            bonusRate = 10;\n', '        }else if (volume >= 10 && volume <= 39 ) {\n', '            bonusRate = 5;\n', '        }\n', '        }\n', '        return bonusRate;\n', '        }\n', '   \t/**\n', ' \t*  \n', ' \t* @dev change the State from presale to public sale\n', ' \t*/\n', '  \tfunction startPublicsale(uint256 _startTime, uint256 _endTime) public onlyOwner {\n', '      \trequire(_endTime >= _startTime);\n', '      \tstage = Stage.PUBLICSALE;\n', '      \t//Start Time endTime and price for PUBLICSALE\n', '      \tstartTime = _startTime;\n', '      \tendTime = _endTime;\n', '   }\n', '\n', '  \t// @return true if the crowdsale has raised enough money to be successful.\n', '  \tfunction isMinimumGoalReached() public constant returns (bool reached) {\n', '        return weiRaised >= softCap;\n', '  \t}\n', '\n', '     // Change Start and Endtime for Testing Purpose\n', '    function changeEnd(uint256 _endTime) public onlyOwner {\n', '    \trequire(_endTime!=0);\n', '        endTime = _endTime;\n', '        \n', '    }\n', '\n', '    /**\n', ' \t*   \n', ' \t* @dev change the Current Token price per Ether\n', ' \t*/\n', '   \tfunction changeRate(uint256 _rate) public onlyOwner {\n', '     \trequire(_rate != 0);\n', '      \trate = _rate;\n', '\n', '   }\n', '   \n', '\n', '    /**\n', ' \t* \n', ' \t* @param _to is beneficiary address\n', ' \t* \n', ' \t* @param _value  Amount if tokens\n', ' \t*   \n', ' \t* @dev Allocated tokens transfer to Advisory team\n', ' \t*/\n', '    function transferAdvisorsToken(address _to, uint256 _value) onlyOwner {\n', '    \trequire (\n', '           _to != 0x0 && _value > 0 && advisorsAllocation >= _value\n', '        );\n', '        token.mint(_to, _value);\n', '        advisorsAllocation = advisorsAllocation.sub(_value);\n', '    }\n', '\n', '    /**\n', ' \t* @param _to is beneficiary address\n', ' \t* \n', ' \t* @param _value  Amount if tokens\n', ' \t*   \n', ' \t* @dev Allocated tokens transfer to  Market Place Incentive team\n', ' \t*/\n', '    function transferMarketallocationTokens(address _to, uint256 _value) onlyOwner {\n', '        require (\n', '           _to != 0x0 && _value > 0 && marketAllocation >= _value\n', '        );\n', '        token.mint(_to, _value);\n', '        marketAllocation = marketAllocation.sub(_value);\n', '\t}\n', '\t\n', '\n', '\t/**\n', ' \t* @param _to is beneficiary address\n', ' \t* \n', ' \t* @param _value  Amount if tokens\n', ' \t*   \n', ' \t* @dev Allocated tokens transfer to \tFounder & Key Employee team\n', ' \t*/\n', '\tfunction transferFounderTokens(address _to, uint256 _value) onlyOwner {\n', '        require (\n', '           _to != 0x0 && _value > 0 && founderAllocation >= _value\n', '        );\n', '        token.mint(_to, _value);\n', '        founderAllocation = founderAllocation.sub(_value);\n', '    }\n', '\n', '    /**\n', ' \t* @param _value no of tokens\n', '\t*\t   \n', ' \t* @dev Burn the tokens\n', ' \t*/\n', '\tfunction burnToken(uint256 _value) onlyOwner {\n', '    \trequire(_value > 0);\n', '     \tpublicAllocation = publicAllocation.sub(_value);\n', '\n', '    \tBurn(msg.sender, _value);\n', '\t}\n', '}']