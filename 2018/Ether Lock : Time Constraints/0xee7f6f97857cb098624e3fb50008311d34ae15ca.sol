['pragma solidity ^0.4.15;\n', '\n', 'contract Factory{\n', '    \n', '    //Adress of creator\n', '    address private creator;\n', '\n', '    // Addresses of owners\n', '    address private owner1 = 0x6CAa636cFFbCbb2043A3322c04dE3f26b1fa6555;\n', '    address private owner2 = 0xbc2d90C2D3A87ba3fC8B23aA951A9936A6D68121;\n', '    address private owner3 = 0x680d821fFE703762E7755c52C2a5E8556519EEDc;\n', '  \n', '    //List of deployed Forwarders\n', '    address[] public deployed_forwarders;\n', '    \n', '    //Get number of forwarders created\n', '    uint public forwarders_count = 0;\n', '    \n', '    //Last forwarder create\n', '    address public last_forwarder_created;\n', '  \n', '    //Only owners can generate a forwarder\n', '    modifier onlyOwnerOrCreator {\n', '      require(msg.sender == owner1 || msg.sender == owner2 || msg.sender == owner3 || msg.sender == creator);\n', '      _;\n', '    }\n', '  \n', '    //Constructor\n', '    constructor() public {\n', '        creator = msg.sender;\n', '    }\n', '  \n', '    //Create new Forwarder\n', '    function create_forwarder() public onlyOwnerOrCreator {\n', '        address new_forwarder = new Forwarder();\n', '        deployed_forwarders.push(new_forwarder);\n', '        last_forwarder_created = new_forwarder;\n', '        forwarders_count += 1;\n', '    }\n', '    \n', '    //Get deployed forwarders\n', '    function get_deployed_forwarders() public view returns (address[]) {\n', '        return deployed_forwarders;\n', '    }\n', '\n', '}\n', '\n', 'contract Forwarder {\n', '    \n', '  // Address to which any funds sent to this contract will be forwarded\n', '  address private parentAddress = 0x7aeCf441966CA8486F4cBAa62fa9eF2D557f9ba7;\n', '  \n', '  // Addresses of people who can flush ethers and tokenContractAddress\n', '  address private owner1 = 0x6CAa636cFFbCbb2043A3322c04dE3f26b1fa6555;\n', '  address private owner2 = 0xbc2d90C2D3A87ba3fC8B23aA951A9936A6D68121;\n', '  address private owner3 = 0x680d821fFE703762E7755c52C2a5E8556519EEDc;\n', '  \n', '  event ForwarderDeposited(address from, uint value, bytes data);\n', '\n', '  /**\n', '   * Create the contract.\n', '   */\n', '  constructor() public {\n', '  }\n', '\n', '  /**\n', '   * Modifier that will execute internal code block only if the sender is among owners.\n', '   */\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner1 || msg.sender == owner2 || msg.sender == owner3);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * Default function; Gets called when Ether is deposited, and forwards it to the parent address\n', '   */\n', '  function() public payable {\n', '    // throws on failure\n', '    parentAddress.transfer(msg.value);\n', '    // Fire off the deposited event if we can forward it\n', '    emit ForwarderDeposited(msg.sender, msg.value, msg.data);\n', '  }\n', '\n', '\n', '  /**\n', '   * Execute a token transfer of the full balance from the forwarder token to the parent address\n', '   * @param tokenContractAddress the address of the erc20 token contract\n', '   */\n', '  function flushTokens(address tokenContractAddress) public onlyOwner {\n', '    ERC20Interface instance = ERC20Interface(tokenContractAddress);\n', '    address forwarderAddress = address(this);\n', '    uint forwarderBalance = instance.balanceOf(forwarderAddress);\n', '    if (forwarderBalance == 0) {\n', '      return;\n', '    }\n', '    if (!instance.transfer(parentAddress, forwarderBalance)) {\n', '      revert();\n', '    }\n', '  }\n', '\n', '  /**\n', '   * It is possible that funds were sent to this address before the contract was deployed.\n', '   * We can flush those funds to the parent address.\n', '   */\n', '  function flush() public onlyOwner {\n', '    // throws on failure\n', '    uint my_balance = address(this).balance;\n', '    if (my_balance == 0){\n', '        return;\n', '    } else {\n', '        parentAddress.transfer(address(this).balance);\n', '    }\n', '  }\n', '}\n', '\n', 'contract ERC20Interface {\n', '  // Send _value amount of tokens to address _to\n', '  function transfer(address _to, uint256 _value) public returns (bool success);\n', '  // Get the account balance of another account with address _owner\n', '  function balanceOf(address _owner) public constant returns (uint256 balance);\n', '}']