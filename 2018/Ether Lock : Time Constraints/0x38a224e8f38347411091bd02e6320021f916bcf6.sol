['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnerChanged(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function changeOwner(address _newOwner) onlyOwner public {\n', '        require(_newOwner != address(0));\n', '        OwnerChanged(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '}\n', '\n', 'interface IContractStakeToken {\n', '    function depositToken(address _investor, uint8 _stakeType, uint256 _time, uint256 _value) external returns (bool);\n', '    function validWithdrawToken(address _address, uint256 _now) public returns (uint256);\n', '    function withdrawToken(address _address) public returns (uint256);\n', '    function cancel(uint256 _index, address _address) public returns (bool _result);\n', '    function changeRates(uint8 _numberRate, uint256 _percent) public returns (bool);\n', '\n', '\n', '    function getBalanceTokenContract() public view returns (uint256);\n', '    function balanceOfToken(address _owner) external view returns (uint256 balance);\n', '    function getTokenStakeByIndex(uint256 _index) public view returns (\n', '        address _owner,\n', '        uint256 _amount,\n', '        uint8 _stakeType,\n', '        uint256 _time,\n', '        uint8 _status\n', '    );\n', '    function getTokenTransferInsByAddress(address _address, uint256 _index) public view returns (\n', '        uint256 _indexStake,\n', '        bool _isRipe\n', '    );\n', '    function getCountTransferInsToken(address _address) public view returns (uint256 _count);\n', '    function getCountStakesToken() public view returns (uint256 _count);\n', '    function getTotalTokenDepositByAddress(address _owner) public view returns (uint256 _amountEth);\n', '    function getTotalTokenWithdrawByAddress(address _owner) public view returns (uint256 _amountEth);\n', '    function setContractAdmin(address _admin, bool _isAdmin) public;\n', '\n', '    function setContractUser(address _user, bool _isUser) public;\n', '    function calculator(uint8 _currentStake, uint256 _amount, uint256 _amountHours) public view returns (uint256 stakeAmount);\n', '}\n', '\n', 'interface IContractErc20Token {\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool);\n', '    function approve(address _spender, uint256 _value) returns (bool);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '}\n', '\n', 'contract RapidProfit is Ownable {\n', '    using SafeMath for uint256;\n', '    IContractStakeToken public contractStakeToken;\n', '    IContractErc20Token public contractErc20Token;\n', '\n', '    uint256 public balanceTokenContract;\n', '\n', '    event WithdrawEther(address indexed receiver, uint256 amount);\n', '    event WithdrawToken(address indexed receiver, uint256 amount);\n', '\n', '    function RapidProfit(address _owner) public {\n', '        require(_owner != address(0));\n', '        owner = _owner;\n', '        //owner = msg.sender; // for test&#39;s\n', '    }\n', '\n', '    // fallback function can be used to buy tokens\n', '    function() payable public {\n', '    }\n', '\n', '    function setContractStakeToken (address _addressContract) public onlyOwner {\n', '        require(_addressContract != address(0));\n', '        contractStakeToken = IContractStakeToken(_addressContract);\n', '    }\n', '\n', '    function setContractErc20Token (address _addressContract) public onlyOwner {\n', '        require(_addressContract != address(0));\n', '        contractErc20Token = IContractErc20Token(_addressContract);\n', '    }\n', '\n', '    function depositToken(address _investor, uint8 _stakeType, uint256 _value) external payable returns (bool){\n', '        require(_investor != address(0));\n', '        require(_value > 0);\n', '        require(contractErc20Token.allowance(_investor, this) >= _value);\n', '\n', '        bool resultStake = contractStakeToken.depositToken(_investor, _stakeType, now, _value);\n', '        balanceTokenContract = balanceTokenContract.add(_value);\n', '        bool resultErc20 = contractErc20Token.transferFrom(_investor, this, _value);\n', '\n', '        return (resultStake && resultErc20);\n', '    }\n', '\n', '    function validWithdrawToken(address _address, uint256 _now) public returns (uint256 result){\n', '        require(_address != address(0));\n', '        require(_now > 0);\n', '        result = contractStakeToken.validWithdrawToken(_address, _now);\n', '    }\n', '\n', '    function balanceOfToken(address _owner) public view returns (uint256 balance) {\n', '        return contractStakeToken.balanceOfToken(_owner);\n', '    }\n', '\n', '    function getCountStakesToken() public view returns (uint256 result) {\n', '        result = contractStakeToken.getCountStakesToken();\n', '    }\n', '\n', '    function getCountTransferInsToken(address _address) public view returns (uint256 result) {\n', '        result = contractStakeToken.getCountTransferInsToken(_address);\n', '    }\n', '\n', '    function getTokenStakeByIndex(uint256 _index) public view returns (\n', '        address _owner,\n', '        uint256 _amount,\n', '        uint8 _stakeType,\n', '        uint256 _time,\n', '        uint8 _status\n', '    ) {\n', '        (_owner, _amount, _stakeType, _time, _status) = contractStakeToken.getTokenStakeByIndex(_index);\n', '    }\n', '\n', '    function getTokenTransferInsByAddress(address _address, uint256 _index) public view returns (\n', '        uint256 _indexStake,\n', '        bool _isRipe\n', '    ) {\n', '        (_indexStake, _isRipe) = contractStakeToken.getTokenTransferInsByAddress(_address, _index);\n', '    }\n', '\n', '    function removeContract() public onlyOwner {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '    function calculator(uint8 _currentStake, uint256 _amount, uint256 _amountHours) public view returns (uint256 result){\n', '        result = contractStakeToken.calculator(_currentStake, _amount, _amountHours);\n', '    }\n', '\n', '    function getBalanceEthContract() public view returns (uint256){\n', '        return this.balance;\n', '    }\n', '\n', '    function getBalanceTokenContract() public view returns (uint256 result){\n', '        return contractErc20Token.balanceOf(this);\n', '    }\n', '\n', '    function withdrawToken(address _address) public returns (uint256 result){\n', '        uint256 amount = contractStakeToken.withdrawToken(_address);\n', '        require(getBalanceTokenContract() >= amount);\n', '        bool success = contractErc20Token.transfer(_address, amount);\n', '        //require(success);\n', '        WithdrawToken(_address, amount);\n', '        result = amount;\n', '    }\n', '\n', '    function cancelToken(uint256 _index) public returns (bool result) {\n', '        require(_index >= 0);\n', '        require(msg.sender != address(0));\n', '        result = contractStakeToken.cancel(_index, msg.sender);\n', '    }\n', '\n', '    function changeRatesToken(uint8 _numberRate, uint256 _percent) public onlyOwner returns (bool result) {\n', '        result = contractStakeToken.changeRates(_numberRate, _percent);\n', '    }\n', '\n', '    function getTotalTokenDepositByAddress(address _owner) public view returns (uint256 result) {\n', '        result = contractStakeToken.getTotalTokenDepositByAddress(_owner);\n', '    }\n', '\n', '    function getTotalTokenWithdrawByAddress(address _owner) public view returns (uint256 result) {\n', '        result = contractStakeToken.getTotalTokenWithdrawByAddress(_owner);\n', '    }\n', '\n', '    function withdrawOwnerEth(uint256 _amount) public onlyOwner returns (bool) {\n', '        require(this.balance >= _amount);\n', '        owner.transfer(_amount);\n', '        WithdrawEther(owner, _amount);\n', '    }\n', '\n', '    function withdrawOwnerToken(uint256 _amount) public onlyOwner returns (bool) {\n', '        require(getBalanceTokenContract() >= _amount);\n', '        contractErc20Token.transfer(owner, _amount);\n', '        WithdrawToken(owner, _amount);\n', '    }\n', '\n', '}']