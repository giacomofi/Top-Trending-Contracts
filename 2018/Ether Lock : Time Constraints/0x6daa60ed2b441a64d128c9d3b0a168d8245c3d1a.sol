['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address owner) public constant returns (uint256 balance);\n', '  function transfer(address to, uint256 value) public returns (bool success);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', ' \n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256 remaining);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool success);\n', '  function approve(address spender, uint256 value) public returns (bool success);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    \n', '  using SafeMath for uint256;\n', ' \n', '  mapping (address => uint256) public balances;\n', ' \n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to] && _value > 0 && _to != address(this) && _to != address(0)) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    } else { return false; }\n', '  }\n', '\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', ' \n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to] && _value > 0 && _to != address(this) && _to != address(0)) {\n', '        var _allowance = allowed[_from][msg.sender];\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    } else { return false; }\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '      if (((_value == 0) || (allowed[msg.sender][_spender] == 0)) && _spender != address(this) && _spender != address(0)) {\n', '          allowed[msg.sender][_spender] = _value;\n', '          Approval(msg.sender, _spender, _value);\n', '          return true;\n', '      } else { return false; }\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', ' \n', '}\n', '\n', 'contract UNICToken is owned, StandardToken {\n', '    \n', "    string public constant name = 'UNICToken';\n", "    string public constant symbol = 'UNIC';\n", '    uint8 public constant decimals = 18;\n', '    \n', '    uint256 public initialSupply = 250000000 * 10 ** uint256(decimals);\n', '    \n', '    address public icoManager;\n', '    \n', '    mapping (address => uint256) public WhiteList;\n', '\n', '    modifier onlyManager() {\n', '        require(msg.sender == icoManager);\n', '        _;\n', '    }\n', '\n', '    function UNICToken() public onlyOwner {\n', '      totalSupply = initialSupply;\n', '      balances[msg.sender] = initialSupply;\n', '    }\n', '\n', '    function setICOManager(address _newIcoManager) public onlyOwner returns (bool) {\n', '      assert(_newIcoManager != 0x0);\n', '      icoManager = _newIcoManager;\n', '    }\n', '    \n', '    function setWhiteList(address _contributor) public onlyManager {\n', '      if(_contributor != 0x0){\n', '        WhiteList[_contributor] = 1;\n', '      }\n', '    }\n', '}\n', '\n', 'contract Crowdsale is owned, UNICToken {\n', '    \n', '  using SafeMath for uint;\n', '  \n', '  UNICToken public token = new UNICToken();\n', '  \n', '  address constant multisig = 0xDE4951a749DE77874ee72778512A2bA1e9032e7a;\n', '  uint constant rate = 3400 * 1000000000000000000;\n', '  \n', '  uint public constant presaleStart = 1518084000;   /** 08.02 */\n', '  uint public presaleEnd = 1520244000;              /** 05.03 */\n', '  uint public presaleDiscount = 30;\n', '  uint public presaleTokensLimit = 4250000 * 1000000000000000000;\n', '  uint public presaleWhitelistDiscount = 40;\n', '  uint public presaleWhitelistTokensLimit = 750000 * 1000000000000000000;\n', '\n', '  uint public firstRoundICOStart = 1520848800;      /** 12.03 */\n', '  uint public firstRoundICOEnd = 1522058400;        /** 26.03 */\n', '  uint public firstRoundICODiscount = 15;\n', '  uint public firstRoundICOTokensLimit = 6250000 * 1000000000000000000;\n', '\n', '  uint public secondRoundICOStart = 1522922400;     /** 05.04 */\n', '  uint public secondRoundICOEnd = 1524736800;       /** 26.04 */\n', '  uint public secondRoundICOTokensLimit = 43750000 * 1000000000000000000;\n', '\n', '  uint public etherRaised;\n', '  uint public tokensSold;\n', '  uint public tokensSoldWhitelist;\n', '\n', '  modifier saleIsOn() {\n', '    require((now >= presaleStart && now <= presaleEnd) ||\n', '      (now >= firstRoundICOStart && now <= firstRoundICOEnd)\n', '      || (now >= secondRoundICOStart && now <= secondRoundICOEnd)\n', '      );\n', '    _;\n', '  }\n', '\n', '  function Crowdsale() public onlyOwner {\n', '    etherRaised = 0;\n', '    tokensSold = 0;\n', '    tokensSoldWhitelist = 0;\n', '  }\n', '  \n', '  function() external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  function buyTokens(address _buyer) saleIsOn public payable {\n', '    assert(_buyer != 0x0);\n', '    if(msg.value > 0){\n', '\n', '      uint tokens = rate.mul(msg.value).div(1 ether);\n', '      uint discountTokens = 0;\n', '      if(now >= presaleStart && now <= presaleEnd) {\n', '          if(WhiteList[_buyer]==1) {\n', '              discountTokens = tokens.mul(presaleWhitelistDiscount).div(100);\n', '          }else{\n', '              discountTokens = tokens.mul(presaleDiscount).div(100);\n', '          }\n', '      }\n', '      if(now >= firstRoundICOStart && now <= firstRoundICOEnd) {\n', '          discountTokens = tokens.mul(firstRoundICODiscount).div(100);\n', '      }\n', '\n', '      uint tokensWithBonus = tokens.add(discountTokens);\n', '      \n', '      if(\n', '          (now >= presaleStart && now <= presaleEnd && presaleTokensLimit > tokensSold + tokensWithBonus &&\n', '            ((WhiteList[_buyer]==1 && presaleWhitelistTokensLimit > tokensSoldWhitelist + tokensWithBonus) || WhiteList[_buyer]!=1)\n', '          ) ||\n', '          (now >= firstRoundICOStart && now <= firstRoundICOEnd && firstRoundICOTokensLimit > tokensSold + tokensWithBonus) ||\n', '          (now >= secondRoundICOStart && now <= secondRoundICOEnd && secondRoundICOTokensLimit > tokensSold + tokensWithBonus)\n', '      ){\n', '      \n', '        multisig.transfer(msg.value);\n', '        etherRaised = etherRaised.add(msg.value);\n', '        token.transfer(msg.sender, tokensWithBonus);\n', '        tokensSold = tokensSold.add(tokensWithBonus);\n', '        if(WhiteList[_buyer]==1) {\n', '          tokensSoldWhitelist = tokensSoldWhitelist.add(tokensWithBonus);\n', '        }\n', '      }\n', '    }\n', '  }\n', '}']