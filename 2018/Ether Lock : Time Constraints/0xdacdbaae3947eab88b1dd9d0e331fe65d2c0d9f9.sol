['pragma solidity ^0.4.24;\n', '\n', '/* \n', 'Welcome to the greates pyramid scheme of the Internet! And it&#39;s UNSTOPPABLE\n', 'You can access it on IPFS here: https://ipfs.io/ipfs/Qmb6q3oWG33xeNoVppRHv1Mk23e5zMd8JK7dmKAhgiFk9H/\n', '*/\n', '\n', 'contract UnstoppablePyramid {\n', '    \n', '    /* Admin */\n', '    address devAddress = 0x75E129b02D12ECa5A5D7548a5F75007f84387b8F;\n', '\n', '    /* The Unstoppable Ponzi Core */\n', '    uint256 basePricePonzi = 50000000000000000;    // 0.05 ETH\n', '\n', '    /* Some stats */\n', '    uint256 totalAmountPlayed;\n', '    uint256 totalCommissionSent;\n', '\n', '    struct PonziFriend {\n', '        address playerAddr;\n', '        uint parent;\n', '        uint256 amountPlayed;   // We keep track of the amount invested\n', '        uint256 amountEarned;   // We keep track of the commissions received. It can&#39;t be more than 10x the amount invested\n', '    }\n', '    PonziFriend[] ponziFriends;\n', '    mapping (address => uint) public ponziFriendsToId;\n', '    \n', '    /* Track Level 1, 2 and 3 commissions */\n', '    mapping (uint => uint) public ponziFriendToLevel1Ref;\n', '    mapping (uint => uint) public ponziFriendToLevel2Ref;\n', '    mapping (uint => uint) public ponziFriendToLevel3Ref;\n', '\n', '    // The main function, we call it when a new friend wants to join\n', '    function newPonziFriend(uint _parentId) public payable isHuman() {\n', '        /* Commissions */\n', '        uint256 com1percent = msg.value / 100;\n', '        uint256 comLevel1 = com1percent * 50; // 50%\n', '        uint256 comLevel2 = com1percent * 35; // 35%\n', '        uint256 comLevel3 = com1percent * 15; // 15%\n', '    \n', '        require(msg.value >= basePricePonzi);\n', '\n', '        /* Transfer commission to parents (level 1, 2 & 3) */\n', '\n', '        // Transfer to level 1 if parent[l1] hasn&#39;t reached its limit\n', '        if(ponziFriends[_parentId].amountEarned < (ponziFriends[_parentId].amountPlayed * 5) && _parentId < ponziFriends.length) {\n', '            // Transfer commission\n', '            ponziFriends[_parentId].playerAddr.transfer(comLevel1);\n', '\n', '            // Record amount received\n', '            ponziFriends[_parentId].amountEarned += comLevel1;\n', '            \n', '            // Increment level 1 ref\n', '            ponziFriendToLevel1Ref[_parentId]++;\n', '        } else {\n', '            // If the parent has exceeded its x5 limit we transfer the commission to the dev\n', '            devAddress.transfer(comLevel1);\n', '        }\n', '        \n', '\n', '        // Transfer to level 2\n', '        uint level2parent = ponziFriends[_parentId].parent;\n', '        if(ponziFriends[level2parent].amountEarned < (ponziFriends[level2parent].amountPlayed *5 )) {\n', '            // Transfer commission\n', '            ponziFriends[level2parent].playerAddr.transfer(comLevel2);\n', '\n', '            // Record amount received\n', '            ponziFriends[level2parent].amountEarned += comLevel2;\n', '            \n', '            // Increment level 2 ref\n', '            ponziFriendToLevel2Ref[level2parent]++;\n', '        } else {\n', '            // If the parent has exceeded its x5 limit we transfer the commission to the dev\n', '            devAddress.transfer(comLevel2);\n', '        }\n', '        \n', '\n', '        // Transfer to level 3\n', '        uint level3parent = ponziFriends[level2parent].parent;\n', '        if(ponziFriends[level3parent].amountEarned < (ponziFriends[level3parent].amountPlayed * 5)) {\n', '            // Transfer commission\n', '            ponziFriends[level3parent].playerAddr.transfer(comLevel3); \n', '\n', '            // Record amount received\n', '            ponziFriends[level3parent].amountEarned += comLevel3;\n', '            \n', '            // Increment level 3 ref\n', '            ponziFriendToLevel3Ref[level3parent]++;\n', '        } else {\n', '            // If the parent has exceeded its x5 limit we transfer the commission to the dev\n', '            devAddress.transfer(comLevel3);\n', '        }\n', '\n', '        /* End Transfer */\n', '\n', '        /* Save Ponzi Friend in struct */\n', '\n', '        if(ponziFriendsToId[msg.sender] > 0) {\n', '            // Player exists, update data\n', '            ponziFriends[ponziFriendsToId[msg.sender]].amountPlayed += msg.value;\n', '        } else {\n', '            // Player doesn&#39;t exist create it\n', '            uint pzfId = ponziFriends.push(PonziFriend(msg.sender, _parentId, msg.value, 0)) - 1;\n', '            ponziFriendsToId[msg.sender] = pzfId;\n', '        }\n', '\n', '        /* End Save Ponzi Friend */\n', '\n', '        /* Save stats */\n', '        totalAmountPlayed = totalAmountPlayed + msg.value;\n', '        totalCommissionSent = totalCommissionSent + comLevel1 + comLevel2 + comLevel3;\n', '\n', '    }\n', '\n', '    // This function is called when the contract is deployed\n', '    constructor() public {\n', '        // We initiate the first player\n', '        uint pzfId = ponziFriends.push(PonziFriend(devAddress, 0, 1000000000000000000000000000, 0)) - 1;\n', '        ponziFriendsToId[msg.sender] = pzfId;\n', '    }\n', '\n', '    // This will return the stats for a ponzi friend // returns(ponziFriendId, parent, amoutPlayed, amountEarned)\n', '    function getPonziFriend(address _addr) public view returns(uint, uint, uint256, uint256, uint, uint, uint) {\n', '        uint pzfId = ponziFriendsToId[_addr];\n', '        if(pzfId == 0) {\n', '            return(0, 0, 0, 0, 0, 0, 0);\n', '        } else {\n', '            return(pzfId, ponziFriends[pzfId].parent, ponziFriends[pzfId].amountPlayed, ponziFriends[pzfId].amountEarned, ponziFriendToLevel1Ref[pzfId], ponziFriendToLevel2Ref[pzfId], ponziFriendToLevel3Ref[pzfId]);\n', '        }\n', '    }\n', '\n', '    // Return some general stats about the game // returns(friendsLength, amountPlayed, commissionsSent)\n', '    function getStats() public view returns(uint, uint256, uint256) {\n', '        return(ponziFriends.length, totalAmountPlayed, totalCommissionSent);\n', '    }\n', '\n', '    // Add isHuman check for the newPonziFriend function (we want to avoid contract to participate in this experience)\n', '    modifier isHuman() {\n', '        address _addr = msg.sender;\n', '        uint256 _codeLength;\n', '        \n', '        assembly {_codeLength := extcodesize(_addr)}\n', '        require(_codeLength == 0, "sorry humans only");\n', '        _;\n', '    }\n', '\n', '    \n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/* \n', "Welcome to the greates pyramid scheme of the Internet! And it's UNSTOPPABLE\n", 'You can access it on IPFS here: https://ipfs.io/ipfs/Qmb6q3oWG33xeNoVppRHv1Mk23e5zMd8JK7dmKAhgiFk9H/\n', '*/\n', '\n', 'contract UnstoppablePyramid {\n', '    \n', '    /* Admin */\n', '    address devAddress = 0x75E129b02D12ECa5A5D7548a5F75007f84387b8F;\n', '\n', '    /* The Unstoppable Ponzi Core */\n', '    uint256 basePricePonzi = 50000000000000000;    // 0.05 ETH\n', '\n', '    /* Some stats */\n', '    uint256 totalAmountPlayed;\n', '    uint256 totalCommissionSent;\n', '\n', '    struct PonziFriend {\n', '        address playerAddr;\n', '        uint parent;\n', '        uint256 amountPlayed;   // We keep track of the amount invested\n', "        uint256 amountEarned;   // We keep track of the commissions received. It can't be more than 10x the amount invested\n", '    }\n', '    PonziFriend[] ponziFriends;\n', '    mapping (address => uint) public ponziFriendsToId;\n', '    \n', '    /* Track Level 1, 2 and 3 commissions */\n', '    mapping (uint => uint) public ponziFriendToLevel1Ref;\n', '    mapping (uint => uint) public ponziFriendToLevel2Ref;\n', '    mapping (uint => uint) public ponziFriendToLevel3Ref;\n', '\n', '    // The main function, we call it when a new friend wants to join\n', '    function newPonziFriend(uint _parentId) public payable isHuman() {\n', '        /* Commissions */\n', '        uint256 com1percent = msg.value / 100;\n', '        uint256 comLevel1 = com1percent * 50; // 50%\n', '        uint256 comLevel2 = com1percent * 35; // 35%\n', '        uint256 comLevel3 = com1percent * 15; // 15%\n', '    \n', '        require(msg.value >= basePricePonzi);\n', '\n', '        /* Transfer commission to parents (level 1, 2 & 3) */\n', '\n', "        // Transfer to level 1 if parent[l1] hasn't reached its limit\n", '        if(ponziFriends[_parentId].amountEarned < (ponziFriends[_parentId].amountPlayed * 5) && _parentId < ponziFriends.length) {\n', '            // Transfer commission\n', '            ponziFriends[_parentId].playerAddr.transfer(comLevel1);\n', '\n', '            // Record amount received\n', '            ponziFriends[_parentId].amountEarned += comLevel1;\n', '            \n', '            // Increment level 1 ref\n', '            ponziFriendToLevel1Ref[_parentId]++;\n', '        } else {\n', '            // If the parent has exceeded its x5 limit we transfer the commission to the dev\n', '            devAddress.transfer(comLevel1);\n', '        }\n', '        \n', '\n', '        // Transfer to level 2\n', '        uint level2parent = ponziFriends[_parentId].parent;\n', '        if(ponziFriends[level2parent].amountEarned < (ponziFriends[level2parent].amountPlayed *5 )) {\n', '            // Transfer commission\n', '            ponziFriends[level2parent].playerAddr.transfer(comLevel2);\n', '\n', '            // Record amount received\n', '            ponziFriends[level2parent].amountEarned += comLevel2;\n', '            \n', '            // Increment level 2 ref\n', '            ponziFriendToLevel2Ref[level2parent]++;\n', '        } else {\n', '            // If the parent has exceeded its x5 limit we transfer the commission to the dev\n', '            devAddress.transfer(comLevel2);\n', '        }\n', '        \n', '\n', '        // Transfer to level 3\n', '        uint level3parent = ponziFriends[level2parent].parent;\n', '        if(ponziFriends[level3parent].amountEarned < (ponziFriends[level3parent].amountPlayed * 5)) {\n', '            // Transfer commission\n', '            ponziFriends[level3parent].playerAddr.transfer(comLevel3); \n', '\n', '            // Record amount received\n', '            ponziFriends[level3parent].amountEarned += comLevel3;\n', '            \n', '            // Increment level 3 ref\n', '            ponziFriendToLevel3Ref[level3parent]++;\n', '        } else {\n', '            // If the parent has exceeded its x5 limit we transfer the commission to the dev\n', '            devAddress.transfer(comLevel3);\n', '        }\n', '\n', '        /* End Transfer */\n', '\n', '        /* Save Ponzi Friend in struct */\n', '\n', '        if(ponziFriendsToId[msg.sender] > 0) {\n', '            // Player exists, update data\n', '            ponziFriends[ponziFriendsToId[msg.sender]].amountPlayed += msg.value;\n', '        } else {\n', "            // Player doesn't exist create it\n", '            uint pzfId = ponziFriends.push(PonziFriend(msg.sender, _parentId, msg.value, 0)) - 1;\n', '            ponziFriendsToId[msg.sender] = pzfId;\n', '        }\n', '\n', '        /* End Save Ponzi Friend */\n', '\n', '        /* Save stats */\n', '        totalAmountPlayed = totalAmountPlayed + msg.value;\n', '        totalCommissionSent = totalCommissionSent + comLevel1 + comLevel2 + comLevel3;\n', '\n', '    }\n', '\n', '    // This function is called when the contract is deployed\n', '    constructor() public {\n', '        // We initiate the first player\n', '        uint pzfId = ponziFriends.push(PonziFriend(devAddress, 0, 1000000000000000000000000000, 0)) - 1;\n', '        ponziFriendsToId[msg.sender] = pzfId;\n', '    }\n', '\n', '    // This will return the stats for a ponzi friend // returns(ponziFriendId, parent, amoutPlayed, amountEarned)\n', '    function getPonziFriend(address _addr) public view returns(uint, uint, uint256, uint256, uint, uint, uint) {\n', '        uint pzfId = ponziFriendsToId[_addr];\n', '        if(pzfId == 0) {\n', '            return(0, 0, 0, 0, 0, 0, 0);\n', '        } else {\n', '            return(pzfId, ponziFriends[pzfId].parent, ponziFriends[pzfId].amountPlayed, ponziFriends[pzfId].amountEarned, ponziFriendToLevel1Ref[pzfId], ponziFriendToLevel2Ref[pzfId], ponziFriendToLevel3Ref[pzfId]);\n', '        }\n', '    }\n', '\n', '    // Return some general stats about the game // returns(friendsLength, amountPlayed, commissionsSent)\n', '    function getStats() public view returns(uint, uint256, uint256) {\n', '        return(ponziFriends.length, totalAmountPlayed, totalCommissionSent);\n', '    }\n', '\n', '    // Add isHuman check for the newPonziFriend function (we want to avoid contract to participate in this experience)\n', '    modifier isHuman() {\n', '        address _addr = msg.sender;\n', '        uint256 _codeLength;\n', '        \n', '        assembly {_codeLength := extcodesize(_addr)}\n', '        require(_codeLength == 0, "sorry humans only");\n', '        _;\n', '    }\n', '\n', '    \n', '}']
