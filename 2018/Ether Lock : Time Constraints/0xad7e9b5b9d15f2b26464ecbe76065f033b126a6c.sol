['pragma solidity ^0.4.18;\n', '\n', 'contract Random {\n', '\n', '    uint public ticketsNum = 0;\n', '    \n', '    mapping(uint => uint) internal tickets;  // tickets for the current draw\n', '    mapping(uint => bool) internal payed_back; // ticket payment refunding identifier\n', '    \n', '    address[] public addr; // addresses of all the draw participants\n', '    \n', '    uint32 public random_num = 0; // draw serial number\n', ' \n', '    uint public liveBlocksNumber = 5760; // amount of blocks untill the lottery ending\n', '    uint public startBlockNumber = 0; // initial block of the current lottery\n', '    uint public endBlockNumber = 0; // final block of the current lottery\n', '\n', '    uint public constant onePotWei = 10000000000000000; // 1 ticket cost is 0.01 ETH\n', '\n', '    address public inv_contract = 0x5192c55B1064D920C15dB125eF2E69a17558E65a; // investing contract\n', '    address public rtm_contract = 0x7E08c0468CBe9F48d8A4D246095dEb8bC1EB2e7e; // team contract\n', '    address public mrk_contract = 0xc01c08B2b451328947bFb7Ba5ffA3af96Cfc3430; // marketing contract\n', '    \n', '    address manager; // lottery manager address\n', '    \n', '    uint public winners_count = 0; // amount of winners in the current draw\n', '    uint last_winner = 0; // amount of winners already received rewards\n', '    uint public others_prize = 0; // prize fund less jack pots\n', '    \n', '    uint public fee_balance = 0; // current balance available for commiting payment to investing, team and marketing contracts\n', '\n', '    \n', '    // Events\n', '    // This generates a publics event on the blockchain that will notify clients\n', '    \n', '    event Buy(address indexed sender, uint eth); // tickets purchase\n', '    event Withdraw(address indexed sender, address to, uint eth); // reward accruing\n', '    event Transfer(address indexed from, address indexed to, uint value); // event: sending ticket to another address\n', '    event TransferError(address indexed to, uint value); // event (error): sending ETH from the contract was failed\n', '    \n', '\n', '    // methods with following modifier can only be called by the manager\n', '    modifier onlyManager() {\n', '        require(msg.sender == manager);\n', '        _;\n', '    }\n', '    \n', '\n', '    // constructor\n', '    function Random() public {\n', '        manager = msg.sender;\n', '        startBlockNumber = block.number - 1;\n', '        endBlockNumber = startBlockNumber + liveBlocksNumber;\n', '    }\n', '\n', '\n', '    /// function for straight tickets purchase (sending ETH to the contract address)\n', '    function() public payable {\n', '        require(block.number < endBlockNumber || msg.value < 1000000000000000000);\n', '        if (msg.value > 0 && last_winner == 0) {\n', '            uint val =  msg.value / onePotWei;\n', '            uint i = 0;\n', '            uint ix = checkAddress(msg.sender);\n', '            for(i; i < val; i++) { tickets[ticketsNum+i] = ix; }\n', '            ticketsNum += i;\n', '            Buy(msg.sender, msg.value);\n', '        }\n', '        if (block.number >= endBlockNumber) { \n', '            EndLottery(); \n', '        }\n', '    }\n', '\n', '\n', "    /// function for ticket sending from owner's address to designated address\n", '    function transfer(address _to, uint _ticketNum) public {\n', '        if (msg.sender == getAddress(tickets[_ticketNum]) && _to != address(0)) {\n', '            uint ix = checkAddress(_to);\n', '            tickets[_ticketNum] = ix;\n', '            Transfer(msg.sender, _to, _ticketNum);\n', '        }\n', '    }\n', '\n', '\n', "    /// manager's opportunity to write off ETH from the contract, in a case of unforseen contract blocking (possible in only case of more than 24 hours from the moment of lottery ending had passed and a new one has not started)\n", '    function manager_withdraw() onlyManager public {\n', '        require(block.number >= endBlockNumber + liveBlocksNumber);\n', '        msg.sender.transfer(this.balance);\n', '    }\n', '    \n', '    /// lottery ending\n', '    function EndLottery() public payable returns (bool success) {\n', '        require(block.number >= endBlockNumber); \n', '        uint tn = ticketsNum;\n', '        if(tn < 3) { \n', '            tn = 0;\n', '            if(msg.value > 0) { msg.sender.transfer(msg.value); }\n', '            startNewDraw(msg.value);\n', '            return false;\n', '        }\n', '        uint pf = prizeFund();\n', '        uint jp1 = percent(pf, 10);\n', '        uint jp2 = percent(pf, 4);\n', '        uint jp3 = percent(pf, 1);\n', '        uint lastbet_prize = onePotWei*10;\n', '        \n', '        if(last_winner == 0) {\n', '            \n', '            winners_count = percent(tn, 4) + 3; \n', '            \n', '            uint prizes = jp1 + jp2 + jp3 + lastbet_prize*2;\n', '            uint full_prizes = jp1 + jp2 + jp3 + (lastbet_prize * ( (winners_count+1)/10 ) );\n', '\n', '            if(winners_count < 10) {\n', '                if(prizes > pf) {\n', '                    others_prize = 0;\n', '                } else {\n', '                    others_prize = pf - prizes;    \n', '                }\n', '            } else {\n', '                if(full_prizes > pf) {\n', '                    others_prize = 0;\n', '                } else {\n', '                    others_prize = pf - full_prizes;    \n', '                }\n', '            }\n', '\n', '            sendEth(getAddress(tickets[getWinningNumber(1)]), jp1);\n', '            sendEth(getAddress(tickets[getWinningNumber(2)]), jp2);\n', '            sendEth(getAddress(tickets[getWinningNumber(3)]), jp3);\n', '            last_winner += 1;\n', '            \n', '            sendEth(msg.sender, lastbet_prize + msg.value); \n', '            return true;\n', '        } \n', '        \n', '        if(last_winner < winners_count + 1 && others_prize > 0) {\n', '            \n', '            uint val = others_prize / winners_count;\n', '            uint i;\n', '            uint8 cnt = 0;\n', '            for(i = last_winner; i < winners_count + 1; i++) {\n', '                sendEth(getAddress(tickets[getWinningNumber(i+3)]), val);\n', '                cnt++;\n', '                if(cnt > 9) {\n', '                    last_winner = i;\n', '                    return true;\n', '                }\n', '            }\n', '            last_winner = i;\n', '            sendEth(msg.sender, lastbet_prize + msg.value);\n', '            return true;\n', '            \n', '        } else {\n', '\n', '            startNewDraw(lastbet_prize + msg.value);   \n', '        }\n', '        \n', '        sendEth(msg.sender, lastbet_prize + msg.value);\n', '        return true;\n', '    }\n', '    \n', '    /// new draw start\n', '    function startNewDraw(uint _msg_value) internal {\n', '        ticketsNum = 0;\n', '        startBlockNumber = block.number - 1;\n', '        endBlockNumber = startBlockNumber + liveBlocksNumber;\n', '        random_num += 1;\n', '        winners_count = 0;\n', '        last_winner = 0;\n', '        fee_balance += (this.balance - _msg_value);\n', '    }\n', '    \n', '    /// sending rewards to the investing, team and marketing contracts \n', '    function payfee() public {\n', '        require(fee_balance > 0);\n', '        uint val = fee_balance;\n', '        inv_contract.transfer( percent(val, 20) );\n', '        rtm_contract.transfer( percent(val, 49) );\n', '        mrk_contract.transfer( percent(val, 30) );\n', '        fee_balance = 0;\n', '    }\n', '    \n', '    /// function for sending ETH with balance check (does not interrupt the program if balance is not sufficient)\n', '    function sendEth(address _to, uint _val) internal returns(bool) {\n', '        if(this.balance < _val) {\n', '            TransferError(_to, _val);\n', '            return false;\n', '        }\n', '        _to.transfer(_val);\n', '        Withdraw(address(this), _to, _val);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    /// get winning ticket number basing on block hasg (block number is being calculated basing on specified displacement)\n', '    function getWinningNumber(uint _blockshift) internal constant returns (uint) {\n', '        return uint(block.blockhash(block.number - _blockshift)) % ticketsNum + 1;\n', '    }\n', '    \n', '\n', '    /// current amount of jack pot 1\n', '    function jackPotA() public view returns (uint) {\n', '        return percent(prizeFund(), 10);\n', '    }\n', '    \n', '    /// current amount of jack pot 2\n', '    function jackPotB() public view returns (uint) {\n', '        return percent(prizeFund(), 4);\n', '    }\n', '    \n', '    /// current amount of jack pot 3\n', '    function jackPotC() public view returns (uint) {\n', '        return percent(prizeFund(), 1);\n', '    }\n', '\n', '    /// current amount of prize fund\n', '    function prizeFund() public view returns (uint) {\n', '        return ( (ticketsNum * onePotWei) / 100 ) * 90;\n', '    }\n', '\n', '    /// function for calculating definite percent of a number\n', '    function percent(uint _val, uint8 _percent) public pure returns (uint) {\n', '        return ( _val / 100 ) * _percent;\n', '    }\n', '\n', '\n', '    /// returns owner address using ticket number\n', '    function getTicketOwner(uint _num) public view returns (address) {\n', '        if(ticketsNum == 0) {\n', '            return 0;\n', '        }\n', '        return getAddress(tickets[_num]);\n', '    }\n', '\n', '    /// returns amount of tickets for the current draw in the possession of specified address\n', '    function getTicketsCount(address _addr) public view returns (uint) {\n', '        if(ticketsNum == 0) {\n', '            return 0;\n', '        }\n', '        uint num = 0;\n', '        for(uint i = 0; i < ticketsNum; i++) {\n', '            if(tickets[i] == readAddress(_addr)) {\n', '                num++;\n', '            }\n', '        }\n', '        return num;\n', '    }\n', '    \n', '    /// returns tickets numbers for the current draw in the possession of specified address\n', '    function getTicketsAtAdress(address _address) public view returns(uint[]) {\n', '        uint[] memory result = new uint[](getTicketsCount(_address));\n', '        uint num = 0;\n', '        for(uint i = 0; i < ticketsNum; i++) {\n', '            if(getAddress(tickets[i]) == _address) {\n', '                result[num] = i;\n', '                num++;\n', '            }\n', '        }\n', '        return result;\n', '    }\n', '\n', '\n', '    /// returns amount of paid rewards for the current draw\n', '    function getLastWinner() public view returns(uint) {\n', '        return last_winner+1;\n', '    }\n', '\n', '\n', '    /// investing contract address change\n', '    function setInvContract(address _addr) onlyManager public {\n', '        inv_contract = _addr;\n', '    }\n', '\n', '    /// team contract address change\n', '    function setRtmContract(address _addr) onlyManager public {\n', '        rtm_contract = _addr;\n', '    }\n', '\n', '    /// marketing contract address change\n', '    function setMrkContract(address _addr) onlyManager public {\n', '        mrk_contract = _addr;\n', '    }\n', '\n', '\n', '    /// returns number of participant (in the list of participants) by belonging address and adding to the list, if not found\n', '    function checkAddress(address _addr) public returns (uint addr_num)\n', '    {\n', '        for(uint i=0; i<addr.length; i++) {\n', '            if(addr[i] == _addr) {\n', '                return i;\n', '            }\n', '        }\n', '        return addr.push(_addr) - 1;\n', '    }\n', '    \n', '    /// returns participants number (in the list of participants) be belonging address (read only)\n', '    function readAddress(address _addr) public view returns (uint addr_num)\n', '    {\n', '        for(uint i=0; i<addr.length; i++) {\n', '            if(addr[i] == _addr) {\n', '                return i;\n', '            }\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    /// returns address by the number in the list of participants\n', '    function getAddress(uint _index) public view returns (address) {\n', '        return addr[_index];\n', '    }\n', '\n', '\n', '    /// method for direct contract replenishment with ETH\n', '    function deposit() public payable {\n', '        require(msg.value > 0);\n', '    }\n', '    \n', '\n', '}']