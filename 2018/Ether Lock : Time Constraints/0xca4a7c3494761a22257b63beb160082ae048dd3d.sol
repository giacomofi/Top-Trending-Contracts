['pragma solidity ^0.4.24;\n', '\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _who) public view returns (uint256);\n', '}\n', '\n', 'contract Distribution {\n', '    address public owner;\n', '    ERC20 public token;\n', '\n', '    address[] holders;\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) external onlyOwner {\n', '        require(_newOwner != address(0));\n', '        owner = _newOwner;\n', '    }\n', '\n', '    constructor(address _ERC20) public {\n', '        owner = msg.sender;\n', '        token = ERC20(_ERC20);\n', '    }\n', '\n', '    function() external payable {\n', '    }\n', '\n', '    function payDividends(uint _value) external onlyOwner {\n', '        for (uint i = 0; i < holders.length; i++) {\n', '            holders[i].transfer(_value * token.balanceOf(holders[i]) / token.totalSupply());\n', '        }\n', '    }\n', '\n', '    function addHolder(address _address) external onlyOwner {\n', '        holders.push(_address);\n', '    }\n', '\n', '    function addListOfHolders(address[] _addresses) external onlyOwner {\n', '        for (uint i = 0; i < _addresses.length; i++) {\n', '            holders.push(_addresses[i]);\n', '        }\n', '    }\n', '\n', '    function emptyListOfHolders() external onlyOwner {\n', '        for (uint i = 0; i < holders.length; i++) {\n', '            delete holders[i];\n', '        }\n', '        holders.length = 0;\n', '    }\n', '\n', '    function getLengthOfList() external view returns(uint) {\n', '        return holders.length;\n', '    }\n', '\n', '    function getHolder(uint _number) external view returns(address) {\n', '        return holders[_number];\n', '    }\n', '\n', '    function withdrawBalance() external onlyOwner {\n', '        owner.transfer(address(this).balance);\n', '    }\n', '}']