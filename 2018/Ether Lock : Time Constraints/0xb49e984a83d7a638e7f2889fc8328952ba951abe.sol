['library SafeMath {\n', '  function mul(uint256 a, uint256 b) constant public returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) constant public returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) constant public returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) constant public returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    if(msg.sender == owner){\n', '      _;\n', '    }\n', '    else{\n', '      revert();\n', '    }\n', '  }\n', '\n', '}\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant public returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant public returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '  using SafeMath for uint128;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant public returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    if(!mintingFinished){\n', '      _;\n', '    }\n', '    else{\n', '      revert();\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will recieve the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) canMint internal returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0),_to,_amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', 'contract MON is MintableToken{\n', '    \n', '    event BuyStatus(uint256 status);\n', '    struct Buy{\n', '        uint128 amountOfEth;\n', '        uint128 stage;\n', '    }\n', '    \n', '    struct StageData{\n', '        uint128 stageTime;\n', '        uint64 stageSum;\n', '        uint64 stagePrice;\n', '    }\n', '    \n', '\tstring public constant name = "MillionCoin";\n', '\tstring public constant symbol = "MON";\n', '\tuint256 public constant DECIMALS = 8;\n', '\tuint256 public constant decimals = 8;\n', '\taddress public beneficiary ;\n', '    uint256 private alreadyRunned \t= 0;\n', '    uint256 internal _now =0;\n', '    uint256 public stageIndex = 0;\n', '    StageData[] public stageDataStore;\n', '    uint256 public period = 3600*24; //1 day\n', '    uint256 public start = 0;\n', '    uint256 public sumMultiplayer = 100000;\n', '    mapping(address => Buy) public stageBuys;\n', ' \n', ' modifier runOnce(uint256 bit){\n', '     if((alreadyRunned & bit)==0){\n', '        alreadyRunned = alreadyRunned | bit;   \n', '         _;   \n', '     }\n', '     else{\n', '         revert();\n', '     }\n', ' }\n', ' \n', ' \n', ' function MON(address _benef,uint256 _start,uint256 _sumMul,uint256 _period) public{\n', '     beneficiary = _benef;\n', '     if(_start==0){\n', '         start = GetNow();\n', '     }\n', '     else{\n', '         start = _start;\n', '     }\n', '     if(_period!=0){\n', '         period = _period;\n', '     }\n', '     if(_sumMul!=0){\n', '         sumMultiplayer = _sumMul;\n', '     }\n', '     stageDataStore.push(StageData(uint128(start+period*151),uint64(50*sumMultiplayer),uint64(5000)));\n', '     stageDataStore.push(StageData(uint128(start+period*243),uint64(60*sumMultiplayer),uint64(3000)));\n', '     stageDataStore.push(StageData(uint128(start+period*334),uint64(50*sumMultiplayer),uint64(1666)));\n', '     stageDataStore.push(StageData(uint128(start+period*455),uint64(60*sumMultiplayer),uint64(1500)));\n', '     stageDataStore.push(StageData(uint128(start+period*548),uint64(65*sumMultiplayer),uint64(1444)));\n', '     stageDataStore.push(StageData(uint128(start+period*641),uint64(55*sumMultiplayer),uint64(1000)));\n', '     \n', ' }\n', ' \n', ' \n', ' function GetMaxStageEthAmount() public constant returns(uint256){\n', '     StageData memory currS = stageDataStore[stageIndex];\n', '     uint256 retVal = currS.stageSum;\n', '     retVal = retVal*(10**18);\n', '     retVal = retVal/currS.stagePrice;\n', '     retVal = retVal.sub(this.balance);\n', '     return retVal;\n', ' }\n', ' \n', ' \n', ' function () public payable {\n', '     uint256  status = 0;\n', '     status = 0;\n', '     bool transferToBenef = false;\n', '     uint256  amountOfEthBeforeBuy = 0;\n', '     uint256  stageMaxEthAmount = 0;\n', '     uint128 _n = uint128(GetNow());\n', '     StageData memory currS = stageDataStore[stageIndex] ;\n', '     if(_n<start){\n', '         revert();\n', '     }\n', '     if(this.balance <msg.value){\n', '        amountOfEthBeforeBuy =0 ;\n', '     }\n', '     else{\n', '        amountOfEthBeforeBuy = this.balance - msg.value;\n', '     }\n', '     stageMaxEthAmount = uint256(currS.stageSum)*(10**18)/currS.stagePrice;\n', '         uint256 amountToReturn =0;\n', '         uint256 amountToMint =0;\n', '         Buy memory b = stageBuys[msg.sender];\n', '     if(currS.stageTime<_n && amountOfEthBeforeBuy<stageMaxEthAmount){\n', '         status = 1;\n', '         //current stage is unsuccessful money send in transaction should be returned plus \n', '         // all money spent in current round \n', '         amountToReturn = msg.value;\n', '         if(b.stage==stageIndex){\n', '             amountToReturn = amountToReturn.add(b.amountOfEth);\n', '             if(b.amountOfEth>0){\n', '                burn(msg.sender,b.amountOfEth.mul(currS.stagePrice));\n', '             }\n', '         }\n', '         b.amountOfEth=0;\n', '         mintingFinished = true;\n', '         msg.sender.transfer(amountToReturn);\n', '     }\n', '     else{\n', '         status = 2;\n', '         \n', '         if(b.stage!=stageIndex){\n', '             b.stage = uint128(stageIndex);\n', '             b.amountOfEth = 0;\n', '             status = status*10+3;\n', '         }\n', '         \n', '         if(currS.stageTime>_n &&  this.balance < stageMaxEthAmount){\n', '            //nothing special normal buy \n', '             b.amountOfEth = uint128(b.amountOfEth.add(uint128(msg.value)));\n', '            amountToMint = msg.value*currS.stagePrice;\n', '            status = status*10+4;\n', '            mintCoins(msg.sender,amountToMint);\n', '         }else{\n', '             if( this.balance >=stageMaxEthAmount){\n', '                 //we exceed stage limit\n', '                status = status*10+5;\n', '                 transferToBenef = true;\n', '                amountToMint = (stageMaxEthAmount - amountOfEthBeforeBuy)*(currS.stagePrice);\n', '                mintCoins(msg.sender,amountToMint);\n', '                stageIndex = stageIndex+1;\n', '                beneficiary.transfer(stageMaxEthAmount);\n', '                stageMaxEthAmount =  GetMaxStageEthAmount();\n', '                if(stageIndex<5 && stageMaxEthAmount>this.balance){\n', '                 //   status = status*10+7;\n', '                    //buys for rest of eth tokens in new prices\n', '                    currS = stageDataStore[stageIndex] ;\n', '                    amountToMint = this.balance*(currS.stagePrice);\n', '                    b.stage = uint128(stageIndex);\n', '                    b.amountOfEth =uint128(this.balance);\n', '                    mintCoins(msg.sender,amountToMint);\n', '                }\n', '                else{\n', '                    status = status*10+8;\n', '                    //returns rest of money if during buy hardcap is reached\n', '                    amountToReturn = this.balance;\n', '                    msg.sender.transfer(amountToReturn);\n', '                }\n', '             }else{\n', '                status = status*10+6;\n', '           //     revert() ;// not implemented, should not happend\n', '             }\n', '         }\n', '         \n', '     }\n', '     stageBuys[msg.sender] = b;\n', '     BuyStatus(status);\n', ' }\n', ' \n', ' \n', ' function GetBalance() public constant returns(uint256){\n', '     return this.balance;\n', ' }\n', '\n', '  uint256 public constant maxTokenSupply = (10**(18-DECIMALS))*(10**6)*34 ;  \n', '  \n', '  function burn(address _from, uint256 _amount) private returns (bool){\n', '      _amount = _amount.div(10**10);\n', '      balances[_from] = balances[_from].sub(_amount);\n', '      totalSupply = totalSupply.sub(_amount);\n', '      Transfer(_from,address(0),_amount);\n', '  }\n', '  \n', '  function GetStats()public constant returns (uint256,uint256,uint256,uint256){\n', '      uint256 timeToEnd = 0;\n', '      uint256 round =0;\n', '      StageData memory _s = stageDataStore[stageIndex];\n', '      if(GetNow()>=start){\n', '        round = stageIndex+1;\n', '        if(_s.stageTime>GetNow())\n', '        {\n', '            timeToEnd = _s.stageTime-GetNow();\n', '        }\n', '        else{\n', '            return(0,0,0,0);\n', '        }\n', '      }\n', '      else{\n', '        timeToEnd = start-GetNow();\n', '      }\n', '      return(timeToEnd,\n', '       round,\n', '       _s.stageSum*1000/_s.stagePrice,\n', '       GetMaxStageEthAmount().div(10**15));\n', '  }\n', '  \n', '  function mintCoins(address _to, uint256 _amount)  canMint internal returns (bool) {\n', '      \n', '    _amount = _amount.div(10**10);\n', '  \tif(totalSupply.add(_amount)<maxTokenSupply){\n', '  \t  super.mint(_to,_amount.mul(75).div(100));\n', '  \t  super.mint(address(beneficiary),_amount.mul(25).div(100));\n', '  \t  \n', '  \t  return true;\n', '  \t}\n', '  \telse{\n', '  \t\treturn false; \n', '  \t}\n', '  \t\n', '  \treturn true;\n', '  }\n', '  \n', '  \n', ' function GetNow() public constant returns(uint256){\n', '    return now; \n', ' }\n', '  \n', '  \n', '}']