['pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', 'library SafeMath {\n', '    \n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) \n', '        internal \n', '        pure \n', '        returns (uint256 c) \n', '    {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        require(c / a == b, "SafeMath mul failed");\n', '        return c;\n', '    }\n', '    \n', '    function pwr(uint256 x, uint256 y)\n', '        internal \n', '        pure \n', '        returns (uint256)\n', '    {\n', '        if (x==0)\n', '            return (0);\n', '        else if (y==0)\n', '            return (1);\n', '        else \n', '        {\n', '            uint256 z = x;\n', '            for (uint256 i=1; i < y; i++)\n', '                z = mul(z,x);\n', '            return (z);\n', '        }\n', '    }\n', '    \n', '    function pwrFloat(uint256 tar,uint256 numerator,uint256 denominator,uint256 pwrN) public pure returns(uint256) {\n', '        for(uint256 i=0;i<pwrN;i++){\n', '            tar = tar * numerator / denominator;\n', '        }\n', '        return tar ;\n', '        \n', '    }\n', '\n', '    \n', '    function mulRate(uint256 tar,uint256 rate) public pure returns (uint256){\n', '        return tar *rate / 100;\n', '    }\n', ' \n', '    \n', '    \n', '}']