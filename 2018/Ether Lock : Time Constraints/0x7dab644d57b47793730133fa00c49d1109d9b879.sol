['pragma solidity ^0.4.15;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20 {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    \n', '}\n', '\n', 'contract BasicToken is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool) {\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] = balances[msg.sender].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '\n', '    /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '}\n', '\n', '\n', '    /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract TalentToken is BasicToken {\n', '\n', 'using SafeMath for uint256;\n', '\n', 'string public name = "Talent Token";              \n', 'string public symbol = "TAL";                               // Token&#39;s Symbol\n', 'uint8 public decimals = 18;                                 // How Many Decimals for Token\n', 'uint256 public totalSupply = 98000000 * 10**18;             // The total supply.\n', '\n', '// variables\n', 'uint256 public TotalTokens;                // variable to keep track of funds allocated\n', 'uint256 public LongTermProjectTokens;      // Funds to be used in the long term for the development of future projects.\n', 'uint256 public TeamFundsTokens;            // Funds for the team.\n', 'uint256 public IcoTokens;                  // Funds to be used for the ICO\n', 'uint256 public platformTokens;             // Tokens to be retained for future sale by various platforms.\n', '\n', '// addresses    \n', 'address public owner;                               // Owner of the Contract\n', 'address public crowdFundAddress;                    // Crowdfund Contract Address\n', 'address public founderAddress = 0xe3f38940A588922F2082FE30bCAe6bB0aa633a7b;\n', 'address public LongTermProjectTokensAddress = 0x689Aff79dCAbdFd611273703C62821baBb39823a;\n', 'address public teamFundsAddress = 0x2dd75A9A6C99B824811e3aCe16a63882Ff4C1C03;\n', 'address public platformTokensAddress = 0x5F0Be8081692a3A96d2ad10Ae5ce14488a045B10;\n', '\n', '//events\n', '\n', 'event ChangeFoundersWalletAddress(uint256  _blockTimeStamp, address indexed _foundersWalletAddress);\n', '\n', '//modifiers\n', '\n', '  modifier onlyCrowdFundAddress() {\n', '    require(msg.sender == crowdFundAddress);\n', '    _;\n', '  }\n', '\n', '  modifier nonZeroAddress(address _to) {\n', '    require(_to != 0x0);\n', '    _;\n', '  }\n', '\n', '  modifier onlyFounders() {\n', '    require(msg.sender == founderAddress);\n', '    _;\n', '  }\n', '  \n', '   // creation of the token contract \n', '   function TalentToken (address _crowdFundAddress) {\n', '    owner = msg.sender;\n', '    crowdFundAddress = _crowdFundAddress;\n', '\n', '    // Token Distribution \n', '    LongTermProjectTokens = 22540000 * 10**18;    // 23 % allocation of totalSupply. Used for further development of projects.\n', '    TeamFundsTokens = 1960000 * 10**18;           // 2% of total tokens.\n', '    platformTokens = 19600000 * 10**18;           // 20% of total tokens.\n', '    IcoTokens = 53900000 * 10**18;                // ICO Tokens = 55% allocation of totalSupply\n', '\n', '    //Assigned budget\n', '    balances[crowdFundAddress] = IcoTokens;\n', '    balances[LongTermProjectTokensAddress] = LongTermProjectTokens;\n', '    balances[teamFundsAddress] = TeamFundsTokens;\n', '    balances[platformTokensAddress] = platformTokens;\n', '\n', '  }\n', '\n', '\n', '// fallback function to restrict direct sending of ether\n', '  function () {\n', '    revert();\n', '  }\n', '\n', '}\n', '\n', 'contract TalentICO {\n', '\n', '    using SafeMath for uint256;\n', '    \n', '    TalentToken public token;                                 // Token contract reference\n', '         \n', '    uint256 public IcoStartDate = 1519862400;                 // March 1st, 2018, 00:00:00\n', '    uint256 public IcoEndDate = 1546300799;                   // 31st Dec, 11:59:59\n', '    uint256 public WeiRaised;                                 // Counter to track the amount raised\n', '    uint256 public initialExchangeRateForETH = 15000;         // Initial Number of Token per Ether\n', '    uint256 internal IcoTotalTokensSold = 0;\n', '    uint256 internal minAmount = 1 * 10 ** 17;                //The minimum amount to trade.\n', '    bool internal isTokenDeployed = false;                    // Flag to track the token deployment -- only can be set once\n', '\n', '\n', '     // Founder&#39;s Address\n', '    address public founderAddress = 0xe3f38940A588922F2082FE30bCAe6bB0aa633a7b;                            \n', '    // Owner of the contract\n', '    address public owner;                                              \n', '    \n', '    enum State {Crowdfund, Finish}\n', '\n', '    //events\n', '    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount); \n', '    event CrowdFundClosed(uint256 _blockTimeStamp);\n', '    event ChangeFoundersWalletAddress(uint256 _blockTimeStamp, address indexed _foundersWalletAddress);\n', '   \n', '    //Modifiers\n', '    modifier tokenIsDeployed() {\n', '        require(isTokenDeployed == true);\n', '        _;\n', '    }\n', '    modifier nonZeroEth() {\n', '        require(msg.value > 0);\n', '        _;\n', '    }\n', '\n', '    modifier nonZeroAddress(address _to) {\n', '        require(_to != 0x0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyFounders() {\n', '        require(msg.sender == founderAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyPublic() {\n', '        require(msg.sender != founderAddress);\n', '        _;\n', '    }\n', '\n', '    modifier inState(State state) {\n', '        require(getState() == state); \n', '        _;\n', '    }\n', '\n', '     // Constructor\n', '    function TalentICO () {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function changeOwner(address newOwner) public onlyOwner returns (bool) {\n', '        owner = newOwner;\n', '    }\n', '\n', '    // Used to attach the token&#39;s contract.\n', '    function setTokenAddress(address _tokenAddress) external onlyFounders nonZeroAddress(_tokenAddress) {\n', '        require(isTokenDeployed == false);\n', '        token = TalentToken(_tokenAddress);\n', '        isTokenDeployed = true;\n', '    }\n', '\n', '\n', '    // Used to change founder&#39;s address.\n', '     function setfounderAddress(address _newFounderAddress) onlyFounders  nonZeroAddress(_newFounderAddress) {\n', '        founderAddress = _newFounderAddress;\n', '        ChangeFoundersWalletAddress(now, founderAddress);\n', '    }\n', '\n', '    // function call after ICO ends.\n', '    // Transfers Remaining Tokens to holder.\n', '    function ICOend() onlyFounders inState(State.Finish) returns (bool) {\n', '        require(now > IcoEndDate);\n', '        uint256 remainingToken = token.balanceOf(this);  // remaining tokens\n', '        if (remainingToken != 0) \n', '          token.transfer(founderAddress, remainingToken); \n', '        CrowdFundClosed(now);\n', '        return true; \n', '    }\n', '\n', '    // Allows users to buy tokens.\n', '    function buyTokens(address beneficiary) \n', '    nonZeroEth \n', '    tokenIsDeployed \n', '    onlyPublic \n', '    nonZeroAddress(beneficiary) \n', '    payable \n', '    returns(bool) \n', '    {\n', '        require(msg.value >= minAmount);\n', '\n', '        require(now >= IcoStartDate && now <= IcoEndDate);\n', '        fundTransfer(msg.value);\n', '\n', '        uint256 amount = numberOfTokens(getCurrentExchangeRate(), msg.value);\n', '            \n', '        if (token.transfer(beneficiary, amount)) {\n', '            IcoTotalTokensSold = IcoTotalTokensSold.add(amount);\n', '            WeiRaised = WeiRaised.add(msg.value);\n', '            TokenPurchase(beneficiary, msg.value, amount);\n', '            return true;\n', '        } \n', '\n', '    return false;\n', '       \n', '    }\n', '\n', '    // Function determines current exchange rate.\n', '    // This increases the price of the token, as time passes.\n', '    function getCurrentExchangeRate() internal view returns (uint256) {\n', '\n', '        uint256 timeDiff = IcoEndDate - IcoStartDate;\n', '\n', '        uint256 etherDiff = 11250; //Difference of exchange rate between start date and end date.\n', '\n', '        uint256 initialTimeDiff = now - IcoStartDate;\n', '\n', '        uint256 exchangeRateLess = (initialTimeDiff * etherDiff) / timeDiff;\n', '\n', '        return (initialExchangeRateForETH - exchangeRateLess);    \n', '\n', '    }\n', '           \n', '\n', '// Calculates total number of tokens.\n', '    function numberOfTokens(uint256 _exchangeRate, uint256 _amount) internal constant returns (uint256) {\n', '         uint256 noOfToken = _amount.mul(_exchangeRate);\n', '         return noOfToken;\n', '    }\n', '\n', '    // Transfers funds to founder&#39;s account.\n', '    function fundTransfer(uint256 weiAmount) internal {\n', '        founderAddress.transfer(weiAmount);\n', '    }\n', '\n', '\n', '// Get functions \n', '\n', '    // Gets the current state of the crowdsale\n', '    function getState() public constant returns(State) {\n', '\n', '        if (now >= IcoStartDate && now <= IcoEndDate) {\n', '            return State.Crowdfund;\n', '        } \n', '        return State.Finish;\n', '    }\n', '\n', '    // GET functions\n', '\n', '    function getExchangeRate() public constant returns (uint256 _exchangeRateForETH) {\n', '\n', '        return getCurrentExchangeRate();\n', '    \n', '    }\n', '\n', '    function getNoOfSoldToken() public constant returns (uint256 _IcoTotalTokensSold) {\n', '        return (IcoTotalTokensSold);\n', '    }\n', '\n', '    function getWeiRaised() public constant returns (uint256 _WeiRaised) {\n', '        return WeiRaised;\n', '    }\n', '\n', '    //Sends ether to founder&#39;s address.\n', '    function() public payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '}']