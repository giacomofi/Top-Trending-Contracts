['contract Partner {\n', '    function exchangeTokensFromOtherContract(address _source, address _recipient, uint256 _RequestedTokens);\n', '}\n', '\n', 'contract Target {\n', '    function transfer(address _to, uint _value);\n', '}\n', '\n', 'contract COE {\n', '\n', '    string public name = "Coeval by Monkey Capital";\n', '    uint8 public decimals = 18;\n', '    string public symbol = "COE";\n', '\n', '    address public owner;\n', '    address public devFeesAddr = 0x36Bdc3B60dC5491fbc7d74a05709E94d5b554321;\n', '    address tierAdmin;\n', '\n', '    uint256 public totalSupply = 100000000000000000000000;\n', '    uint public tierLevel = 1;\n', '    uint256 public fiatPerEth = 58332000000000000000000;\n', '    uint256 public circulatingSupply = 0;\n', '    uint maxTier = 132;\n', '    uint256 public devFees = 0;\n', '    uint256 fees = 10000;  // the calculation expects % * 100 (so 10% is 1000)\n', '\n', '    bool public receiveEth = false;\n', '    bool payFees = true;\n', '    bool public canExchange = false;\n', '    bool addTiers = true;\n', '    bool public initialTiers = false;\n', '\n', '    // Storage\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => bool) public exchangePartners;\n', '\n', '    // mining schedule\n', '    mapping(uint => uint256) public scheduleTokens;\n', '    mapping(uint => uint256) public scheduleRates;\n', '\n', '    // events\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '\n', '    function COE() {\n', '        owner = msg.sender;\n', '        doPremine();\n', '    }\n', '\n', '    function doPremine() internal {\n', '        require(msg.sender == owner);\n', '        balances[owner] = add(balances[owner],32664993546427000000000);\n', '        Transfer(this, owner, 32664993546427000000000);\n', '        circulatingSupply = add(circulatingSupply, 32664993546427000000000);\n', '        totalSupply = sub(totalSupply,32664993546427000000000);\n', '    }\n', '\n', '    function populateTierTokens() public {\n', '        require((msg.sender == owner) && (initialTiers == false));\n', '        scheduleTokens[1] = 1E21;\n', '        scheduleTokens[2] = 9E20;\n', '        scheduleTokens[3] = 8E20;\n', '        scheduleTokens[4] = 7E20;\n', '        scheduleTokens[5] = 2.3E21;\n', '        scheduleTokens[6] = 6.5E21;\n', '        scheduleTokens[7] = 2E21;\n', '        scheduleTokens[8] = 1.2E21;\n', '        scheduleTokens[9] = 4.5E21;\n', '        scheduleTokens[10] = 7.5E19;\n', '        scheduleTokens[11] = 7.5E19;\n', '        scheduleTokens[12] = 7.5E19;\n', '        scheduleTokens[13] = 7.5E19;\n', '        scheduleTokens[14] = 7.5E19;\n', '        scheduleTokens[15] = 7.5E19;\n', '        scheduleTokens[16] = 7.5E19;\n', '        scheduleTokens[17] = 7.5E19;\n', '        scheduleTokens[18] = 5.6E21;\n', '        scheduleTokens[19] = 7.5E19;\n', '        scheduleTokens[20] = 7.5E19;\n', '        scheduleTokens[21] = 7.5E19;\n', '        scheduleTokens[22] = 7.5E19;\n', '        scheduleTokens[23] = 7.5E19;\n', '        scheduleTokens[24] = 8.2E21;\n', '        scheduleTokens[25] = 2.5E21;\n', '        scheduleTokens[26] = 1.45E22;\n', '        scheduleTokens[27] = 7.5E19;\n', '        scheduleTokens[28] = 7.5E19;\n', '        scheduleTokens[29] = 7.5E19;\n', '        scheduleTokens[30] = 7.5E19;\n', '        scheduleTokens[31] = 7.5E19;\n', '        scheduleTokens[32] = 7.5E19;\n', '        scheduleTokens[33] = 7.5E19;\n', '        scheduleTokens[34] = 7.5E19;\n', '        scheduleTokens[35] = 7.5E19;\n', '        scheduleTokens[36] = 7.5E19;\n', '        scheduleTokens[37] = 7.5E19;\n', '        scheduleTokens[38] = 7.5E19;\n', '        scheduleTokens[39] = 7.5E19;\n', '        scheduleTokens[40] = 7.5E19;\n', '        scheduleTokens[41] = 7.5E19;\n', '        scheduleTokens[42] = 7.5E19;\n', '        scheduleTokens[43] = 7.5E19;\n', '        scheduleTokens[44] = 7.5E19;\n', '        scheduleTokens[45] = 7.5E19;\n', '        scheduleTokens[46] = 7.5E19;\n', '        scheduleTokens[47] = 7.5E19;\n', '        scheduleTokens[48] = 7.5E19;\n', '        scheduleTokens[49] = 7.5E19;\n', '        scheduleTokens[50] = 7.5E19;\n', '    }\n', '\n', '    function populateTierRates() public {\n', '        require((msg.sender == owner) && (initialTiers == false));\n', '        require(msg.sender == owner);\n', '        scheduleRates[1] = 3.85E23;\n', '        scheduleRates[2] = 6.1E23;\n', '        scheduleRates[3] = 4.15E23;\n', '        scheduleRates[4] = 5.92E23;\n', '        scheduleRates[5] = 9.47E23;\n', '        scheduleRates[6] = 1.1E24;\n', '        scheduleRates[7] = 1.123E24;\n', '        scheduleRates[8] = 1.115E24;\n', '        scheduleRates[9] = 1.135E24;\n', '        scheduleRates[10] = 1.013E24;\n', '        scheduleRates[11] = 8.48E23;\n', '        scheduleRates[12] = 8.17E23;\n', '        scheduleRates[13] = 7.3E23;\n', '        scheduleRates[14] = 9.8E23;\n', '        scheduleRates[15] = 1.007E24;\n', '        scheduleRates[16] = 1.45E24;\n', '        scheduleRates[17] = 1.242E24;\n', '        scheduleRates[18] = 1.383E24;\n', '        scheduleRates[19] = 1.442E24;\n', '        scheduleRates[20] = 2.048E24;\n', '        scheduleRates[21] = 1.358E24;\n', '        scheduleRates[22] = 1.245E24;\n', '        scheduleRates[23] = 9.94E23;\n', '        scheduleRates[24] = 1.14E24;\n', '        scheduleRates[25] = 1.253E24;\n', '        scheduleRates[26] = 1.29E24;\n', '        scheduleRates[27] = 1.126E24;\n', '        scheduleRates[28] = 1.173E24;\n', '        scheduleRates[29] = 1.074E24;\n', '        scheduleRates[30] = 1.127E24;\n', '        scheduleRates[31] = 1.223E24;\n', '        scheduleRates[32] = 1.145E24;\n', '        scheduleRates[33] = 1.199E24;\n', '        scheduleRates[34] = 1.319E24;\n', '        scheduleRates[35] = 1.312E24;\n', '        scheduleRates[36] = 1.287E24;\n', '        scheduleRates[37] = 1.175E24;\n', '        scheduleRates[38] = 1.175E24;\n', '        scheduleRates[39] = 1.146E24;\n', '        scheduleRates[40] = 1.098E24;\n', '        scheduleRates[41] = 1.058E24;\n', '        scheduleRates[42] = 9.97E23;\n', '        scheduleRates[43] = 9.32E23;\n', '        scheduleRates[44] = 8.44E23;\n', '        scheduleRates[45] = 8.33E23;\n', '        scheduleRates[46] = 7.8E23;\n', '        scheduleRates[47] = 7.67E23;\n', '        scheduleRates[48] = 8.37E23;\n', '        scheduleRates[49] = 1.011E24;\n', '        scheduleRates[50] = 9.79E23;\n', '        initialTiers = true;\n', '    }\n', '\n', '    function () payable public {\n', '        require((msg.value > 0) && (receiveEth));\n', '\n', '        if(payFees) {\n', '            devFees = add(devFees, ((msg.value * fees) / 10000));\n', '        }\n', '        allocateTokens(convertEthToCents(msg.value), 0);\n', '    }\n', '\n', '    function convertEthToCents(uint256 _incoming) internal returns (uint256) {\n', '        return mul(_incoming, fiatPerEth);\n', '    }\n', '\n', '    function allocateTokens(uint256 _submitted, uint256 tokenCount) internal {\n', '        uint256 _tokensAfforded = 0;\n', '        if((_submitted != 0) && (tierLevel <= maxTier)) {\n', '            _tokensAfforded = div(_submitted, scheduleRates[tierLevel]);\n', '        }\n', '\n', '        if(scheduleTokens[tierLevel] <= _tokensAfforded) {\n', '            scheduleTokens[tierLevel] = sub(scheduleTokens[tierLevel], _tokensAfforded);\n', '            tokenCount = add(tokenCount, _tokensAfforded);\n', '            circulatingSupply = add(circulatingSupply, _tokensAfforded);\n', '            totalSupply = sub(totalSupply, _tokensAfforded);\n', '        }\n', '        else if(_tokensAfforded > 0) {\n', '            scheduleTokens[tierLevel] = sub(scheduleTokens[tierLevel], _tokensAfforded);\n', '            tokenCount = add(tokenCount, _tokensAfforded);\n', '            circulatingSupply = add(circulatingSupply, _tokensAfforded);\n', '            totalSupply = sub(totalSupply, _tokensAfforded);\n', '            tierLevel++;\n', '            uint256 stepOne = _submitted;\n', '            uint256 stepTwo = mul(_tokensAfforded, scheduleRates[tierLevel]);\n', '\n', '            if(stepTwo <= stepOne) {\n', '                _submitted = sub(stepOne, stepTwo);\n', '            }\n', '            else _submitted = 0;\n', '\n', '            allocateTokens(_submitted, tokenCount);\n', '        }\n', '        else {\n', '            balances[msg.sender] = add(balances[msg.sender], tokenCount);\n', '            Transfer(this, msg.sender, tokenCount);\n', '        }\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public {\n', '        require(balances[msg.sender] >= _value);\n', '\n', '        if(_to == address(this)) {\n', '            // WARNING: if you transfer tokens back to the contract you will lose them\n', '            // use the exchange function to exchange for tokens with approved partner contracts\n', '            balances[msg.sender] = sub(balances[msg.sender], _value);\n', '            Transfer(msg.sender, _to, _value);\n', '        }\n', '        else {\n', '            uint codeLength;\n', '\n', '            assembly {\n', '                codeLength := extcodesize(_to)\n', '            }\n', '\n', '            if(codeLength != 0) {\n', '                if(canExchange == true) {\n', '                    if(exchangePartners[_to]) {\n', '                        // WARNING: exchanging COE into MNY costs more Gas than a normal transfer as we interact directly\n', '                        // with the MNY contract - suggest doubling the recommended gas limit\n', '                        exchange(_to, _value);\n', '                    }\n', '                    else {\n', '                        // WARNING: if you transfer to a contract that cannot handle incoming tokens you may lose them\n', '                        balances[msg.sender] = sub(balances[msg.sender], _value);\n', '                        balances[_to] = add(balances[_to], _value);\n', '                        Transfer(msg.sender, _to, _value);\n', '                    }\n', '                }\n', '            }\n', '            else {\n', '                balances[msg.sender] = sub(balances[msg.sender], _value);\n', '                balances[_to] = add(balances[_to], _value);\n', '                Transfer(msg.sender, _to, _value);\n', '            }\n', '        }\n', '    }\n', '\n', '    function exchange(address _partner, uint _amount) internal {\n', '        require(exchangePartners[_partner]);\n', '        requestTokensFromOtherContract(_partner, this, msg.sender, _amount);\n', '        balances[msg.sender] = sub(balanceOf(msg.sender), _amount);\n', '        circulatingSupply = sub(circulatingSupply, _amount);\n', '        totalSupply = add(totalSupply, _amount);\n', '        Transfer(msg.sender, this, _amount);\n', '    }\n', '\n', '    function requestTokensFromOtherContract(address _targetContract, address _sourceContract, address _recipient, uint256 _value) internal returns (bool){\n', '        Partner p = Partner(_targetContract);\n', '        p.exchangeTokensFromOtherContract(_sourceContract, _recipient, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _receiver) public constant returns (uint256) {\n', '        return balances[_receiver];\n', '    }\n', '\n', '    function balanceInTier() public constant returns (uint256) {\n', '        return scheduleTokens[tierLevel];\n', '    }\n', '\n', '    function balanceInSpecificTier(uint256 _tier) public constant returns (uint256) {\n', '        return scheduleTokens[_tier];\n', '    }\n', '\n', '    function rateOfSpecificTier(uint256 _tier) public constant returns (uint256) {\n', '        return scheduleRates[_tier];\n', '    }\n', '\n', '    function setFiatPerEthRate(uint256 _newRate) public {\n', '        require(msg.sender == owner);\n', '        fiatPerEth = _newRate;\n', '    }\n', '\n', '    function addExchangePartnerTargetAddress(address _partner) public {\n', '        require(msg.sender == owner);\n', '        exchangePartners[_partner] = true;\n', '    }\n', '\n', '    function canContractExchange(address _contract) public constant returns (bool) {\n', '        return exchangePartners[_contract];\n', '    }\n', '\n', '    function removeExchangePartnerTargetAddress(address _partner) public {\n', '        require(msg.sender == owner);\n', '        exchangePartners[_partner] = false;\n', '    }\n', '\n', '    function withdrawDevFees() public {\n', '        require(payFees);\n', '        devFeesAddr.transfer(devFees);\n', '        devFees = 0;\n', '    }\n', '\n', '    function changeDevFees(address _devFees) public {\n', '        require(msg.sender == owner);\n', '        devFeesAddr = _devFees;\n', '    }\n', '\n', '    function payFeesToggle() public {\n', '        require(msg.sender == owner);\n', '        if(payFees) {\n', '            payFees = false;\n', '        }\n', '        else {\n', '            payFees = true;\n', '        }\n', '    }\n', '\n', '    function safeWithdrawal(address _receiver, uint256 _value) public {\n', '        require(msg.sender == owner);\n', '        withdrawDevFees();\n', '        require(_value <= this.balance);\n', '        _receiver.transfer(_value);\n', '    }\n', '\n', '    // enables fee update - must be between 0 and 100 (%)\n', '    function updateFeeAmount(uint _newFee) public {\n', '        require(msg.sender == owner);\n', '        require((_newFee >= 0) && (_newFee <= 100));\n', '        fees = _newFee * 100;\n', '    }\n', '\n', '    function handleTokensFromOtherContracts(address _contract, address _recipient, uint256 _tokens) public {\n', '        require(msg.sender == owner);\n', '        Target t;\n', '        t = Target(_contract);\n', '        t.transfer(_recipient, _tokens);\n', '    }\n', '\n', '    function changeOwner(address _recipient) public {\n', '        require(msg.sender == owner);\n', '        owner = _recipient;\n', '    }\n', '\n', '    function changeTierAdmin(address _tierAdmin) public {\n', '        require((msg.sender == owner) || (msg.sender == tierAdmin));\n', '        tierAdmin = _tierAdmin;\n', '    }\n', '\n', '    function toggleReceiveEth() public {\n', '        require(msg.sender == owner);\n', '        if(receiveEth == true) {\n', '            receiveEth = false;\n', '        }\n', '        else receiveEth = true;\n', '    }\n', '\n', '    function toggleTokenExchange() public {\n', '        require(msg.sender == owner);\n', '        if(canExchange == true) {\n', '            canExchange = false;\n', '        }\n', '        else canExchange = true;\n', '    }\n', '\n', '    function addTierRateAndTokens(uint256 _rate, uint256 _tokens, uint256 _level) public {\n', '        require(((msg.sender == owner) || (msg.sender == tierAdmin)) && (addTiers == true));\n', '        scheduleTokens[_level] = _tokens;\n', '        scheduleRates[_level] = _rate;\n', '    }\n', '\n', '    // not really needed as we fix the max tiers on contract creation but just for completeness&#39; sake we&#39;ll call this\n', '    // when all tiers have been added to the contract (not possible to deploy with all of them)\n', '    function closeTierAddition() public {\n', '        require(msg.sender == owner);\n', '        addTiers = false;\n', '    }\n', '\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint) {\n', '        uint c = a * b;\n', '        require(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '}']
['contract Partner {\n', '    function exchangeTokensFromOtherContract(address _source, address _recipient, uint256 _RequestedTokens);\n', '}\n', '\n', 'contract Target {\n', '    function transfer(address _to, uint _value);\n', '}\n', '\n', 'contract COE {\n', '\n', '    string public name = "Coeval by Monkey Capital";\n', '    uint8 public decimals = 18;\n', '    string public symbol = "COE";\n', '\n', '    address public owner;\n', '    address public devFeesAddr = 0x36Bdc3B60dC5491fbc7d74a05709E94d5b554321;\n', '    address tierAdmin;\n', '\n', '    uint256 public totalSupply = 100000000000000000000000;\n', '    uint public tierLevel = 1;\n', '    uint256 public fiatPerEth = 58332000000000000000000;\n', '    uint256 public circulatingSupply = 0;\n', '    uint maxTier = 132;\n', '    uint256 public devFees = 0;\n', '    uint256 fees = 10000;  // the calculation expects % * 100 (so 10% is 1000)\n', '\n', '    bool public receiveEth = false;\n', '    bool payFees = true;\n', '    bool public canExchange = false;\n', '    bool addTiers = true;\n', '    bool public initialTiers = false;\n', '\n', '    // Storage\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => bool) public exchangePartners;\n', '\n', '    // mining schedule\n', '    mapping(uint => uint256) public scheduleTokens;\n', '    mapping(uint => uint256) public scheduleRates;\n', '\n', '    // events\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '\n', '    function COE() {\n', '        owner = msg.sender;\n', '        doPremine();\n', '    }\n', '\n', '    function doPremine() internal {\n', '        require(msg.sender == owner);\n', '        balances[owner] = add(balances[owner],32664993546427000000000);\n', '        Transfer(this, owner, 32664993546427000000000);\n', '        circulatingSupply = add(circulatingSupply, 32664993546427000000000);\n', '        totalSupply = sub(totalSupply,32664993546427000000000);\n', '    }\n', '\n', '    function populateTierTokens() public {\n', '        require((msg.sender == owner) && (initialTiers == false));\n', '        scheduleTokens[1] = 1E21;\n', '        scheduleTokens[2] = 9E20;\n', '        scheduleTokens[3] = 8E20;\n', '        scheduleTokens[4] = 7E20;\n', '        scheduleTokens[5] = 2.3E21;\n', '        scheduleTokens[6] = 6.5E21;\n', '        scheduleTokens[7] = 2E21;\n', '        scheduleTokens[8] = 1.2E21;\n', '        scheduleTokens[9] = 4.5E21;\n', '        scheduleTokens[10] = 7.5E19;\n', '        scheduleTokens[11] = 7.5E19;\n', '        scheduleTokens[12] = 7.5E19;\n', '        scheduleTokens[13] = 7.5E19;\n', '        scheduleTokens[14] = 7.5E19;\n', '        scheduleTokens[15] = 7.5E19;\n', '        scheduleTokens[16] = 7.5E19;\n', '        scheduleTokens[17] = 7.5E19;\n', '        scheduleTokens[18] = 5.6E21;\n', '        scheduleTokens[19] = 7.5E19;\n', '        scheduleTokens[20] = 7.5E19;\n', '        scheduleTokens[21] = 7.5E19;\n', '        scheduleTokens[22] = 7.5E19;\n', '        scheduleTokens[23] = 7.5E19;\n', '        scheduleTokens[24] = 8.2E21;\n', '        scheduleTokens[25] = 2.5E21;\n', '        scheduleTokens[26] = 1.45E22;\n', '        scheduleTokens[27] = 7.5E19;\n', '        scheduleTokens[28] = 7.5E19;\n', '        scheduleTokens[29] = 7.5E19;\n', '        scheduleTokens[30] = 7.5E19;\n', '        scheduleTokens[31] = 7.5E19;\n', '        scheduleTokens[32] = 7.5E19;\n', '        scheduleTokens[33] = 7.5E19;\n', '        scheduleTokens[34] = 7.5E19;\n', '        scheduleTokens[35] = 7.5E19;\n', '        scheduleTokens[36] = 7.5E19;\n', '        scheduleTokens[37] = 7.5E19;\n', '        scheduleTokens[38] = 7.5E19;\n', '        scheduleTokens[39] = 7.5E19;\n', '        scheduleTokens[40] = 7.5E19;\n', '        scheduleTokens[41] = 7.5E19;\n', '        scheduleTokens[42] = 7.5E19;\n', '        scheduleTokens[43] = 7.5E19;\n', '        scheduleTokens[44] = 7.5E19;\n', '        scheduleTokens[45] = 7.5E19;\n', '        scheduleTokens[46] = 7.5E19;\n', '        scheduleTokens[47] = 7.5E19;\n', '        scheduleTokens[48] = 7.5E19;\n', '        scheduleTokens[49] = 7.5E19;\n', '        scheduleTokens[50] = 7.5E19;\n', '    }\n', '\n', '    function populateTierRates() public {\n', '        require((msg.sender == owner) && (initialTiers == false));\n', '        require(msg.sender == owner);\n', '        scheduleRates[1] = 3.85E23;\n', '        scheduleRates[2] = 6.1E23;\n', '        scheduleRates[3] = 4.15E23;\n', '        scheduleRates[4] = 5.92E23;\n', '        scheduleRates[5] = 9.47E23;\n', '        scheduleRates[6] = 1.1E24;\n', '        scheduleRates[7] = 1.123E24;\n', '        scheduleRates[8] = 1.115E24;\n', '        scheduleRates[9] = 1.135E24;\n', '        scheduleRates[10] = 1.013E24;\n', '        scheduleRates[11] = 8.48E23;\n', '        scheduleRates[12] = 8.17E23;\n', '        scheduleRates[13] = 7.3E23;\n', '        scheduleRates[14] = 9.8E23;\n', '        scheduleRates[15] = 1.007E24;\n', '        scheduleRates[16] = 1.45E24;\n', '        scheduleRates[17] = 1.242E24;\n', '        scheduleRates[18] = 1.383E24;\n', '        scheduleRates[19] = 1.442E24;\n', '        scheduleRates[20] = 2.048E24;\n', '        scheduleRates[21] = 1.358E24;\n', '        scheduleRates[22] = 1.245E24;\n', '        scheduleRates[23] = 9.94E23;\n', '        scheduleRates[24] = 1.14E24;\n', '        scheduleRates[25] = 1.253E24;\n', '        scheduleRates[26] = 1.29E24;\n', '        scheduleRates[27] = 1.126E24;\n', '        scheduleRates[28] = 1.173E24;\n', '        scheduleRates[29] = 1.074E24;\n', '        scheduleRates[30] = 1.127E24;\n', '        scheduleRates[31] = 1.223E24;\n', '        scheduleRates[32] = 1.145E24;\n', '        scheduleRates[33] = 1.199E24;\n', '        scheduleRates[34] = 1.319E24;\n', '        scheduleRates[35] = 1.312E24;\n', '        scheduleRates[36] = 1.287E24;\n', '        scheduleRates[37] = 1.175E24;\n', '        scheduleRates[38] = 1.175E24;\n', '        scheduleRates[39] = 1.146E24;\n', '        scheduleRates[40] = 1.098E24;\n', '        scheduleRates[41] = 1.058E24;\n', '        scheduleRates[42] = 9.97E23;\n', '        scheduleRates[43] = 9.32E23;\n', '        scheduleRates[44] = 8.44E23;\n', '        scheduleRates[45] = 8.33E23;\n', '        scheduleRates[46] = 7.8E23;\n', '        scheduleRates[47] = 7.67E23;\n', '        scheduleRates[48] = 8.37E23;\n', '        scheduleRates[49] = 1.011E24;\n', '        scheduleRates[50] = 9.79E23;\n', '        initialTiers = true;\n', '    }\n', '\n', '    function () payable public {\n', '        require((msg.value > 0) && (receiveEth));\n', '\n', '        if(payFees) {\n', '            devFees = add(devFees, ((msg.value * fees) / 10000));\n', '        }\n', '        allocateTokens(convertEthToCents(msg.value), 0);\n', '    }\n', '\n', '    function convertEthToCents(uint256 _incoming) internal returns (uint256) {\n', '        return mul(_incoming, fiatPerEth);\n', '    }\n', '\n', '    function allocateTokens(uint256 _submitted, uint256 tokenCount) internal {\n', '        uint256 _tokensAfforded = 0;\n', '        if((_submitted != 0) && (tierLevel <= maxTier)) {\n', '            _tokensAfforded = div(_submitted, scheduleRates[tierLevel]);\n', '        }\n', '\n', '        if(scheduleTokens[tierLevel] <= _tokensAfforded) {\n', '            scheduleTokens[tierLevel] = sub(scheduleTokens[tierLevel], _tokensAfforded);\n', '            tokenCount = add(tokenCount, _tokensAfforded);\n', '            circulatingSupply = add(circulatingSupply, _tokensAfforded);\n', '            totalSupply = sub(totalSupply, _tokensAfforded);\n', '        }\n', '        else if(_tokensAfforded > 0) {\n', '            scheduleTokens[tierLevel] = sub(scheduleTokens[tierLevel], _tokensAfforded);\n', '            tokenCount = add(tokenCount, _tokensAfforded);\n', '            circulatingSupply = add(circulatingSupply, _tokensAfforded);\n', '            totalSupply = sub(totalSupply, _tokensAfforded);\n', '            tierLevel++;\n', '            uint256 stepOne = _submitted;\n', '            uint256 stepTwo = mul(_tokensAfforded, scheduleRates[tierLevel]);\n', '\n', '            if(stepTwo <= stepOne) {\n', '                _submitted = sub(stepOne, stepTwo);\n', '            }\n', '            else _submitted = 0;\n', '\n', '            allocateTokens(_submitted, tokenCount);\n', '        }\n', '        else {\n', '            balances[msg.sender] = add(balances[msg.sender], tokenCount);\n', '            Transfer(this, msg.sender, tokenCount);\n', '        }\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public {\n', '        require(balances[msg.sender] >= _value);\n', '\n', '        if(_to == address(this)) {\n', '            // WARNING: if you transfer tokens back to the contract you will lose them\n', '            // use the exchange function to exchange for tokens with approved partner contracts\n', '            balances[msg.sender] = sub(balances[msg.sender], _value);\n', '            Transfer(msg.sender, _to, _value);\n', '        }\n', '        else {\n', '            uint codeLength;\n', '\n', '            assembly {\n', '                codeLength := extcodesize(_to)\n', '            }\n', '\n', '            if(codeLength != 0) {\n', '                if(canExchange == true) {\n', '                    if(exchangePartners[_to]) {\n', '                        // WARNING: exchanging COE into MNY costs more Gas than a normal transfer as we interact directly\n', '                        // with the MNY contract - suggest doubling the recommended gas limit\n', '                        exchange(_to, _value);\n', '                    }\n', '                    else {\n', '                        // WARNING: if you transfer to a contract that cannot handle incoming tokens you may lose them\n', '                        balances[msg.sender] = sub(balances[msg.sender], _value);\n', '                        balances[_to] = add(balances[_to], _value);\n', '                        Transfer(msg.sender, _to, _value);\n', '                    }\n', '                }\n', '            }\n', '            else {\n', '                balances[msg.sender] = sub(balances[msg.sender], _value);\n', '                balances[_to] = add(balances[_to], _value);\n', '                Transfer(msg.sender, _to, _value);\n', '            }\n', '        }\n', '    }\n', '\n', '    function exchange(address _partner, uint _amount) internal {\n', '        require(exchangePartners[_partner]);\n', '        requestTokensFromOtherContract(_partner, this, msg.sender, _amount);\n', '        balances[msg.sender] = sub(balanceOf(msg.sender), _amount);\n', '        circulatingSupply = sub(circulatingSupply, _amount);\n', '        totalSupply = add(totalSupply, _amount);\n', '        Transfer(msg.sender, this, _amount);\n', '    }\n', '\n', '    function requestTokensFromOtherContract(address _targetContract, address _sourceContract, address _recipient, uint256 _value) internal returns (bool){\n', '        Partner p = Partner(_targetContract);\n', '        p.exchangeTokensFromOtherContract(_sourceContract, _recipient, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _receiver) public constant returns (uint256) {\n', '        return balances[_receiver];\n', '    }\n', '\n', '    function balanceInTier() public constant returns (uint256) {\n', '        return scheduleTokens[tierLevel];\n', '    }\n', '\n', '    function balanceInSpecificTier(uint256 _tier) public constant returns (uint256) {\n', '        return scheduleTokens[_tier];\n', '    }\n', '\n', '    function rateOfSpecificTier(uint256 _tier) public constant returns (uint256) {\n', '        return scheduleRates[_tier];\n', '    }\n', '\n', '    function setFiatPerEthRate(uint256 _newRate) public {\n', '        require(msg.sender == owner);\n', '        fiatPerEth = _newRate;\n', '    }\n', '\n', '    function addExchangePartnerTargetAddress(address _partner) public {\n', '        require(msg.sender == owner);\n', '        exchangePartners[_partner] = true;\n', '    }\n', '\n', '    function canContractExchange(address _contract) public constant returns (bool) {\n', '        return exchangePartners[_contract];\n', '    }\n', '\n', '    function removeExchangePartnerTargetAddress(address _partner) public {\n', '        require(msg.sender == owner);\n', '        exchangePartners[_partner] = false;\n', '    }\n', '\n', '    function withdrawDevFees() public {\n', '        require(payFees);\n', '        devFeesAddr.transfer(devFees);\n', '        devFees = 0;\n', '    }\n', '\n', '    function changeDevFees(address _devFees) public {\n', '        require(msg.sender == owner);\n', '        devFeesAddr = _devFees;\n', '    }\n', '\n', '    function payFeesToggle() public {\n', '        require(msg.sender == owner);\n', '        if(payFees) {\n', '            payFees = false;\n', '        }\n', '        else {\n', '            payFees = true;\n', '        }\n', '    }\n', '\n', '    function safeWithdrawal(address _receiver, uint256 _value) public {\n', '        require(msg.sender == owner);\n', '        withdrawDevFees();\n', '        require(_value <= this.balance);\n', '        _receiver.transfer(_value);\n', '    }\n', '\n', '    // enables fee update - must be between 0 and 100 (%)\n', '    function updateFeeAmount(uint _newFee) public {\n', '        require(msg.sender == owner);\n', '        require((_newFee >= 0) && (_newFee <= 100));\n', '        fees = _newFee * 100;\n', '    }\n', '\n', '    function handleTokensFromOtherContracts(address _contract, address _recipient, uint256 _tokens) public {\n', '        require(msg.sender == owner);\n', '        Target t;\n', '        t = Target(_contract);\n', '        t.transfer(_recipient, _tokens);\n', '    }\n', '\n', '    function changeOwner(address _recipient) public {\n', '        require(msg.sender == owner);\n', '        owner = _recipient;\n', '    }\n', '\n', '    function changeTierAdmin(address _tierAdmin) public {\n', '        require((msg.sender == owner) || (msg.sender == tierAdmin));\n', '        tierAdmin = _tierAdmin;\n', '    }\n', '\n', '    function toggleReceiveEth() public {\n', '        require(msg.sender == owner);\n', '        if(receiveEth == true) {\n', '            receiveEth = false;\n', '        }\n', '        else receiveEth = true;\n', '    }\n', '\n', '    function toggleTokenExchange() public {\n', '        require(msg.sender == owner);\n', '        if(canExchange == true) {\n', '            canExchange = false;\n', '        }\n', '        else canExchange = true;\n', '    }\n', '\n', '    function addTierRateAndTokens(uint256 _rate, uint256 _tokens, uint256 _level) public {\n', '        require(((msg.sender == owner) || (msg.sender == tierAdmin)) && (addTiers == true));\n', '        scheduleTokens[_level] = _tokens;\n', '        scheduleRates[_level] = _rate;\n', '    }\n', '\n', "    // not really needed as we fix the max tiers on contract creation but just for completeness' sake we'll call this\n", '    // when all tiers have been added to the contract (not possible to deploy with all of them)\n', '    function closeTierAddition() public {\n', '        require(msg.sender == owner);\n', '        addTiers = false;\n', '    }\n', '\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint) {\n', '        uint c = a * b;\n', '        require(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '}']
