['contract SafeMath {\n', '  //internals\n', '\n', '  function safeMul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) throw;\n', '  }\n', '}\n', '\n', 'contract Token {\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', 'contract StandardToken is Token {\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        //if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    uint256 public totalSupply;\n', '\n', '}\n', '\n', 'contract GooglierToken is StandardToken, SafeMath {\n', '\n', '    string public name = "Googlier Token";\n', '    string public symbol = "googlier";\n', '    uint public decimals = 18;\n', '    uint public startBlock;\n', '    uint public endBlock;\n', '    address public founder = 0x0e0b9d8c9930e7cff062dd4a2b26bce95a0defee;\n', '    address public signer = 0x0e0b9d8c9930e7cff062dd4a2b26bce95a0defee;\n', '\n', '    uint public etherCap = 500000 * 10**18;\n', '    uint public transferLockup = 370285;\n', '    uint public founderLockup = 2252571;\n', '    uint public bountyAllocation = 2500000 * 10**18;\n', '    uint public ecosystemAllocation = 5 * 10**16;\n', '    uint public founderAllocation = 10 * 10**16;\n', '    bool public bountyAllocated = true;\n', '    bool public ecosystemAllocated = true;\n', '    bool public founderAllocated = true;\n', '    uint public presaleTokenSupply = 2500000 * 10**18;\n', '    uint public totalSupply = 2500000 * 10**18;\n', '    uint public presaleEtherRaised = 2500000 * 10**18;\n', '    bool public halted = false;\n', '    event Buy(address indexed sender, uint eth, uint fbt);\n', '    event Withdraw(address indexed sender, address to, uint eth);\n', '    event AllocateFounderTokens(address indexed sender);\n', '    event AllocateBountyAndEcosystemTokens(address indexed sender);\n', '\n', '    function FirstBloodToken(address founderInput, address signerInput, uint startBlockInput, uint endBlockInput) {\n', '        founder = founderInput;\n', '        signer = signerInput;\n', '        startBlock = startBlockInput;\n', '        endBlock = endBlockInput;\n', '    }\n', '    function price() constant returns(uint) {\n', '        if (block.number>=startBlock && block.number<startBlock+250) return 170; //power hour\n', '        if (block.number<startBlock || block.number>endBlock) return 100; //default price\n', '        return 100 + 4*(endBlock - block.number)/(endBlock - startBlock + 1)*67/4; //crowdsale price\n', '    }\n', '\n', '    // price() exposed for unit tests\n', '    function testPrice(uint blockNumber) constant returns(uint) {\n', '        if (blockNumber>=startBlock && blockNumber<startBlock+250) return 170; //power hour\n', '        if (blockNumber<startBlock || blockNumber>endBlock) return 100; //default price\n', '        return 100 + 4*(endBlock - blockNumber)/(endBlock - startBlock + 1)*67/4; //crowdsale price\n', '    }\n', '\n', '    // Buy entry point\n', '    function buy(uint8 v, bytes32 r, bytes32 s) {\n', '        buyRecipient(msg.sender, v, r, s);\n', '    }\n', '    function buyRecipient(address recipient, uint8 v, bytes32 r, bytes32 s) {\n', '        bytes32 hash = sha256(msg.sender);\n', '        if (ecrecover(hash,v,r,s) != signer) throw;\n', '        if (block.number<startBlock || block.number>endBlock || safeAdd(presaleEtherRaised,msg.value)>etherCap || halted) throw;\n', '        uint tokens = safeMul(msg.value, price());\n', '        balances[recipient] = safeAdd(balances[recipient], tokens);\n', '        totalSupply = safeAdd(totalSupply, tokens);\n', '        presaleEtherRaised = safeAdd(presaleEtherRaised, msg.value);\n', '    if (!founder.call.value(msg.value)()) throw; //immediately send Ether to founder address\n', '\n', '        Buy(recipient, msg.value, tokens);\n', '    }\n', '    function allocateFounderTokens() {\n', '        if (msg.sender!=founder) throw;\n', '        if (block.number <= endBlock + founderLockup) throw;\n', '        if (founderAllocated) throw;\n', '        if (!bountyAllocated || !ecosystemAllocated) throw;\n', '        balances[founder] = safeAdd(balances[founder], presaleTokenSupply * founderAllocation / (1 ether));\n', '        totalSupply = safeAdd(totalSupply, presaleTokenSupply * founderAllocation / (1 ether));\n', '        founderAllocated = true;\n', '        AllocateFounderTokens(msg.sender);\n', '    }\n', '\n', '\n', '    function allocateBountyAndEcosystemTokens() {\n', '        if (msg.sender!=founder) throw;\n', '        if (block.number <= endBlock) throw;\n', '        if (bountyAllocated || ecosystemAllocated) throw;\n', '        presaleTokenSupply = totalSupply;\n', '        balances[founder] = safeAdd(balances[founder], presaleTokenSupply * ecosystemAllocation / (1 ether));\n', '        totalSupply = safeAdd(totalSupply, presaleTokenSupply * ecosystemAllocation / (1 ether));\n', '        balances[founder] = safeAdd(balances[founder], bountyAllocation);\n', '        totalSupply = safeAdd(totalSupply, bountyAllocation);\n', '        bountyAllocated = true;\n', '        ecosystemAllocated = true;\n', '        AllocateBountyAndEcosystemTokens(msg.sender);\n', '    }\n', '    function halt() {\n', '        if (msg.sender!=founder) throw;\n', '        halted = true;\n', '    }\n', '\n', '    function unhalt() {\n', '        if (msg.sender!=founder) throw;\n', '        halted = false;\n', '    }\n', '    function changeFounder(address newFounder) {\n', '        if (msg.sender!=founder) throw;\n', '        founder = newFounder;\n', '    }\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (block.number <= endBlock + transferLockup && msg.sender!=founder) throw;\n', '        return super.transfer(_to, _value);\n', '    }\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (block.number <= endBlock + transferLockup && msg.sender!=founder) throw;\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function() {\n', '        throw;\n', '    }\n', '\n', '}']