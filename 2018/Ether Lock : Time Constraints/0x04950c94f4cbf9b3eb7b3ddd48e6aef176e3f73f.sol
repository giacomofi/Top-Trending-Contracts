['pragma solidity ^0.4.24;\n', '\n', '/** WhaleKiller - ETH CRYPTOCURRENCY INVESMENT PROJECT\n', ' *\n', ' * BRIEF ESSENCE OF THE CONTRACT:\n', ' * 1) Return on investment for one investor can not exceed 150% of the amount of the investment;\n', ' * 2) The charge is 5% per day of the invested amount;\n', ' * 3) The owner of the maximum investment is a *Whale* and receives an additional 1% reward\n', ' *    with payment immediately to the wallet from the subsequent investments (own and others) in the contract;\n', ' * 4) Request for withdrawal of accrued interest - sending 0 ETH to the address of the contract;\n', ' * 5) When sending to the contract of any amount other than 0 ETH\n', ' *    automatic reinvestment of interest accrued.\n', ' * 6) RECOMMENDED GAS LIMIT: 80000.\n', ' *    RECOMMENDED GAS PRICE: https://ethgasstation.info/\n', ' *\n', ' * !!!ATTENTION!!!\n', ' * DO NOT TRANSFER ETH FROM EXCHANGE ACCOUNTS! \n', ' * Investing only from a personal Ethereum wallet (MyEtherWallet, Trust Wallet, Jaxx, MetaMask).\n', ' */\n', '\n', 'contract WhaleKiller {\n', '    address WhaleAddr;\n', '    uint constant interest = 5;\n', '    uint constant whalefee = 1;\n', '    uint constant maxRoi = 150;\n', '    mapping (address => uint256) invested;\n', '    mapping (address => uint256) timeInvest;\n', '    mapping (address => uint256) rewards;\n', '\n', '    constructor() public {\n', '        WhaleAddr = msg.sender;\n', '    }\n', '    function () external payable {\n', '        address sender = msg.sender;\n', '        uint256 amount = 0;        \n', '        if (invested[sender] != 0) {\n', '            amount = invested[sender] * interest / 100 * (now - timeInvest[sender]) / 1 days;\n', '            if (msg.value == 0) {\n', '                if (amount >= address(this).balance) {\n', '                    amount = (address(this).balance);\n', '                }\n', '                if ((rewards[sender] + amount) > invested[sender] * maxRoi / 100) {\n', '                    amount = invested[sender] * maxRoi / 100 - rewards[sender];\n', '                    invested[sender] = 0;\n', '                    rewards[sender] = 0;\n', '                    sender.transfer(amount);\n', '                    return;\n', '                } else {\n', '                    sender.transfer(amount);\n', '                    rewards[sender] += amount;\n', '                    amount = 0;\n', '                }\n', '            }\n', '        }\n', '        timeInvest[sender] = now;\n', '        invested[sender] += (msg.value + amount);\n', '        \n', '        if (msg.value != 0) {\n', '            WhaleAddr.transfer(msg.value * whalefee / 100);\n', '            if (invested[sender] > invested[WhaleAddr]) {\n', '                WhaleAddr = sender;\n', '            }  \n', '        }\n', '    }\n', '    function ShowDepositInfo(address _dep) public view returns(uint256 _invested, uint256 _rewards, uint256 _unpaidInterest) {\n', '        _unpaidInterest = invested[_dep] * interest / 100 * (now - timeInvest[_dep]) / 1 days;\n', '        return (invested[_dep], rewards[_dep], _unpaidInterest);\n', '    }\n', '    function ShowWhaleAddress() public view returns(address) {\n', '        return WhaleAddr;\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/** WhaleKiller - ETH CRYPTOCURRENCY INVESMENT PROJECT\n', ' *\n', ' * BRIEF ESSENCE OF THE CONTRACT:\n', ' * 1) Return on investment for one investor can not exceed 150% of the amount of the investment;\n', ' * 2) The charge is 5% per day of the invested amount;\n', ' * 3) The owner of the maximum investment is a *Whale* and receives an additional 1% reward\n', ' *    with payment immediately to the wallet from the subsequent investments (own and others) in the contract;\n', ' * 4) Request for withdrawal of accrued interest - sending 0 ETH to the address of the contract;\n', ' * 5) When sending to the contract of any amount other than 0 ETH\n', ' *    automatic reinvestment of interest accrued.\n', ' * 6) RECOMMENDED GAS LIMIT: 80000.\n', ' *    RECOMMENDED GAS PRICE: https://ethgasstation.info/\n', ' *\n', ' * !!!ATTENTION!!!\n', ' * DO NOT TRANSFER ETH FROM EXCHANGE ACCOUNTS! \n', ' * Investing only from a personal Ethereum wallet (MyEtherWallet, Trust Wallet, Jaxx, MetaMask).\n', ' */\n', '\n', 'contract WhaleKiller {\n', '    address WhaleAddr;\n', '    uint constant interest = 5;\n', '    uint constant whalefee = 1;\n', '    uint constant maxRoi = 150;\n', '    mapping (address => uint256) invested;\n', '    mapping (address => uint256) timeInvest;\n', '    mapping (address => uint256) rewards;\n', '\n', '    constructor() public {\n', '        WhaleAddr = msg.sender;\n', '    }\n', '    function () external payable {\n', '        address sender = msg.sender;\n', '        uint256 amount = 0;        \n', '        if (invested[sender] != 0) {\n', '            amount = invested[sender] * interest / 100 * (now - timeInvest[sender]) / 1 days;\n', '            if (msg.value == 0) {\n', '                if (amount >= address(this).balance) {\n', '                    amount = (address(this).balance);\n', '                }\n', '                if ((rewards[sender] + amount) > invested[sender] * maxRoi / 100) {\n', '                    amount = invested[sender] * maxRoi / 100 - rewards[sender];\n', '                    invested[sender] = 0;\n', '                    rewards[sender] = 0;\n', '                    sender.transfer(amount);\n', '                    return;\n', '                } else {\n', '                    sender.transfer(amount);\n', '                    rewards[sender] += amount;\n', '                    amount = 0;\n', '                }\n', '            }\n', '        }\n', '        timeInvest[sender] = now;\n', '        invested[sender] += (msg.value + amount);\n', '        \n', '        if (msg.value != 0) {\n', '            WhaleAddr.transfer(msg.value * whalefee / 100);\n', '            if (invested[sender] > invested[WhaleAddr]) {\n', '                WhaleAddr = sender;\n', '            }  \n', '        }\n', '    }\n', '    function ShowDepositInfo(address _dep) public view returns(uint256 _invested, uint256 _rewards, uint256 _unpaidInterest) {\n', '        _unpaidInterest = invested[_dep] * interest / 100 * (now - timeInvest[_dep]) / 1 days;\n', '        return (invested[_dep], rewards[_dep], _unpaidInterest);\n', '    }\n', '    function ShowWhaleAddress() public view returns(address) {\n', '        return WhaleAddr;\n', '    }\n', '}']
