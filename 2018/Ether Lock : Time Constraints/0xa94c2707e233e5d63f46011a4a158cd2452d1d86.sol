['pragma solidity ^0.4.18;\n', '\n', '// ----------------- \n', '//begin Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '//end Ownable.sol\n', '// ----------------- \n', '//begin SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '//end SafeMath.sol\n', '// ----------------- \n', '//begin ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '//end ERC20Basic.sol\n', '// ----------------- \n', '//begin Pausable.sol\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '//end Pausable.sol\n', '// ----------------- \n', '//begin BasicToken.sol\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '//end BasicToken.sol\n', '// ----------------- \n', '//begin ERC20.sol\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '//end ERC20.sol\n', '// ----------------- \n', '//begin StandardToken.sol\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '//end StandardToken.sol\n', '// ----------------- \n', '//begin MintableToken.sol\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '//end MintableToken.sol\n', '// ----------------- \n', '//begin PausableToken.sol\n', '\n', '/**\n', ' * @title Pausable token\n', ' *\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '//end PausableToken.sol\n', '// ----------------- \n', '//begin RestartEnergyToken.sol\n', '\n', 'contract RestartEnergyToken is MintableToken, PausableToken {\n', '    string public name = "RED MWAT";\n', '    string public symbol = "MWAT";\n', '    uint256 public decimals = 18;\n', '}\n', '\n', '//end RestartEnergyToken.sol\n', '// ----------------- \n', '//begin Crowdsale.sol\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '\n', '}\n', '\n', '//end Crowdsale.sol\n', '// ----------------- \n', '//begin TimedCrowdsale.sol\n', '\n', '\n', '\n', 'contract TimedCrowdsale is Crowdsale, Ownable {\n', '\n', '    uint256 public presaleStartTime;\n', '\n', '    uint256 public presaleEndTime;\n', '\n', '    event EndTimeChanged(uint newEndTime);\n', '\n', '    event StartTimeChanged(uint newStartTime);\n', '\n', '    event PresaleStartTimeChanged(uint newPresaleStartTime);\n', '\n', '    event PresaleEndTimeChanged(uint newPresaleEndTime);\n', '\n', '    function setEndTime(uint time) public onlyOwner {\n', '        require(now < time);\n', '        require(time > startTime);\n', '\n', '        endTime = time;\n', '        EndTimeChanged(endTime);\n', '    }\n', '\n', '    function setStartTime(uint time) public onlyOwner {\n', '        require(now < time);\n', '        require(time > presaleEndTime);\n', '\n', '        startTime = time;\n', '        StartTimeChanged(startTime);\n', '    }\n', '\n', '    function setPresaleStartTime(uint time) public onlyOwner {\n', '        require(now < time);\n', '        require(time < presaleEndTime);\n', '\n', '        presaleStartTime = time;\n', '        PresaleStartTimeChanged(presaleStartTime);\n', '    }\n', '\n', '    function setPresaleEndTime(uint time) public onlyOwner {\n', '        require(now < time);\n', '        require(time > presaleStartTime);\n', '\n', '        presaleEndTime = time;\n', '        PresaleEndTimeChanged(presaleEndTime);\n', '    }\n', '\n', '}\n', '\n', '//end TimedCrowdsale.sol\n', '// ----------------- \n', '//begin FinalizableCrowdsale.sol\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '}\n', '\n', '//end FinalizableCrowdsale.sol\n', '// ----------------- \n', '//begin TokenCappedCrowdsale.sol\n', '\n', '\n', '\n', 'contract TokenCappedCrowdsale is FinalizableCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public hardCap;\n', '    uint256 public totalTokens;\n', '\n', '    function TokenCappedCrowdsale() internal {\n', '\n', '        hardCap = 400000000 * 1 ether;\n', '        totalTokens = 500000000 * 1 ether;\n', '    }\n', '\n', '    function notExceedingSaleLimit(uint256 amount) internal constant returns (bool) {\n', '        return hardCap >= amount.add(token.totalSupply());\n', '    }\n', '\n', '    /**\n', '    * Finalization logic. We take the expected sale cap\n', '    * ether and find the difference from the actual minted tokens.\n', '    * The remaining balance and the reserved amount for the team are minted\n', '    * to the team wallet.\n', '    */\n', '    function finalization() internal {\n', '        super.finalization();\n', '    }\n', '}\n', '\n', '//end TokenCappedCrowdsale.sol\n', '// ----------------- \n', '//begin RestartEnergyCrowdsale.sol\n', '\n', '\n', '\n', '\n', 'contract RestartEnergyCrowdsale is TimedCrowdsale, TokenCappedCrowdsale, Pausable {\n', '\n', '    uint256 public presaleLimit = 10 * 1 ether;\n', '\n', '    // how many token units a buyer gets per ether with basic presale discount\n', '    uint16 public presaleRate = 120;\n', '\n', '    uint256 public soldTokens = 0;\n', '\n', '    uint16 public etherRate = 130;\n', '\n', '    // address where tokens for team, advisors and bounty ar minted\n', '    address public tokensWallet;\n', '\n', '    // How much ETH each address has invested to this crowdsale\n', '    mapping(address => uint256) public purchasedAmountOf;\n', '\n', '    // How many tokens this crowdsale has credited for each investor address\n', '    mapping(address => uint256) public tokenAmountOf;\n', '\n', '\n', '    function RestartEnergyCrowdsale(uint256 _presaleStartTime, uint256 _presaleEndTime,\n', '        uint256 _startTime, uint256 _endTime, address _wallet, address _tokensWallet) public TokenCappedCrowdsale() Crowdsale(_startTime, _endTime, 100, _wallet) {\n', '        presaleStartTime = _presaleStartTime;\n', '        presaleEndTime = _presaleEndTime;\n', '        tokensWallet = _tokensWallet;\n', '\n', '        require(now <= presaleStartTime);\n', '        require(presaleEndTime > presaleStartTime);\n', '        require(presaleEndTime < startTime);\n', '    }\n', '\n', '    /**\n', '    * Creates the token automatically (inherited from zeppelin Crowdsale)\n', '    */\n', '    function createTokenContract() internal returns (MintableToken) {\n', '        return RestartEnergyToken(0x0);\n', '    }\n', '\n', '    /**\n', '    * create the token manually to consume less gas per transaction when deploying\n', '    */\n', '    function buildTokenContract() public onlyOwner {\n', '        require(token == address(0x0));\n', '        RestartEnergyToken _token = new RestartEnergyToken();\n', '        _token.pause();\n', '        token = _token;\n', '    }\n', '\n', '    function buy() public whenNotPaused payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    function buyTokens(address beneficiary) public whenNotPaused payable {\n', '        require(!isFinalized);\n', '        require(beneficiary != 0x0);\n', '        require(validPresalePurchase() || validPurchase());\n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = weiAmount.mul(getRate());\n', '\n', '        require(notExceedingSaleLimit(tokens));\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        soldTokens = soldTokens.add(tokens);\n', '\n', '        // mint the tokens\n', '        token.mint(beneficiary, tokens);\n', '\n', '        // update purchaser\n', '        purchasedAmountOf[msg.sender] = purchasedAmountOf[msg.sender].add(msg.value);\n', '        tokenAmountOf[msg.sender] = tokenAmountOf[msg.sender].add(tokens);\n', '\n', '        //event\n', '        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '        //forward funds to our wallet\n', '        forwardFunds();\n', '    }\n', '\n', '    /**\n', '    * Send tokens by the owner directly to an address.\n', '    */\n', '    function sendTokensToAddress(uint256 amount, address to) public onlyOwner {\n', '        require(!isFinalized);\n', '        require(notExceedingSaleLimit(amount));\n', '        tokenAmountOf[to] = tokenAmountOf[to].add(amount);\n', '        soldTokens = soldTokens.add(amount);\n', '        token.mint(to, amount);\n', '\n', '        TokenPurchase(msg.sender, to, 0, amount);\n', '    }\n', '\n', '    function enableTokenTransfers() public onlyOwner {\n', '        require(isFinalized);\n', '        require(now > endTime + 15 days);\n', '        require(RestartEnergyToken(token).paused());\n', '        RestartEnergyToken(token).unpause();\n', '    }\n', '\n', "    // the team wallet is the 'wallet' field\n", '    bool public firstPartOfTeamTokensClaimed = false;\n', '    bool public secondPartOfTeamTokensClaimed = false;\n', '\n', '\n', '    function claimTeamTokens() public onlyOwner {\n', '        require(isFinalized);\n', '        require(!secondPartOfTeamTokensClaimed);\n', '        require(now > endTime + 182 days);\n', '\n', '        uint256 tokensToMint = totalTokens.mul(3).div(100);\n', '        if (!firstPartOfTeamTokensClaimed) {\n', '            token.mint(tokensWallet, tokensToMint);\n', '            firstPartOfTeamTokensClaimed = true;\n', '        }\n', '        else {\n', '            require(now > endTime + 365 days);\n', '            token.mint(tokensWallet, tokensToMint);\n', '            secondPartOfTeamTokensClaimed = true;\n', '            token.finishMinting();\n', '        }\n', '    }\n', '\n', '    /**\n', '    * the rate (how much tokens are given for 1 ether)\n', '    * is calculated according to presale/sale period and the amount of ether\n', '    */\n', '    function getRate() internal view returns (uint256) {\n', '        uint256 calcRate = rate;\n', '        //check if this sale is in presale period\n', '        if (validPresalePurchase()) {\n', '            calcRate = presaleRate;\n', '        }\n', '        else {\n', '            //if not validPresalePurchase() and not validPurchase() this function is not called\n', '            // so no need to check validPurchase() again here\n', '            uint256 daysPassed = (now - startTime) / 1 days;\n', '            if (daysPassed < 15) {\n', '                calcRate = 100 + (15 - daysPassed);\n', '            }\n', '        }\n', '        calcRate = calcRate.mul(etherRate);\n', '        return calcRate;\n', '    }\n', '\n', '\n', '    function setEtherRate(uint16 _etherRate) public onlyOwner {\n', '        etherRate = _etherRate;\n', '\n', "        // the presaleLimit must be $10000 in eth at the defined 'etherRate'\n", '        presaleLimit = uint256(1 ether).mul(10000).div(etherRate).div(10);\n', '    }\n', '\n', '    // @return true if the transaction can buy tokens in presale\n', '    function validPresalePurchase() internal constant returns (bool) {\n', '        bool withinPeriod = now >= presaleStartTime && now <= presaleEndTime;\n', '        bool nonZeroPurchase = msg.value != 0;\n', '        bool validPresaleLimit = msg.value >= presaleLimit;\n', '        return withinPeriod && nonZeroPurchase && validPresaleLimit;\n', '    }\n', '\n', '    function finalization() internal {\n', '        super.finalization();\n', '\n', '        // mint 14% of total Tokens (3% for bounty, 5% for advisors, 6% for team) into team wallet\n', '        uint256 toMintNow = totalTokens.mul(14).div(100);\n', '        token.mint(tokensWallet, toMintNow);\n', '    }\n', '}\n', '\n', '//end RestartEnergyCrowdsale.sol']