['pragma solidity ^0.4.18;\n', '\n', 'contract ERC20 {\n', '\n', '    uint256 public totalSupply;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnerChanged(address oldOwner, address newOwner);\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != owner && newOwner != address(0x0));\n', '        address oldOwner = owner;\n', '        owner = newOwner;\n', '        OwnerChanged(oldOwner, newOwner);\n', '    }\n', '}\n', '\n', '\n', 'contract TeamTokenLock is Ownable {\n', '\n', '    ERC20 public token;\n', '\n', '    // address where receives funds when unlock period\n', '    address public beneficiary;\n', '\n', '    uint public startTime = 1514592000;\n', '    uint public firstLockTime = 365 days;\n', '    uint public secondLockTime = 2 * 365 days;\n', '\n', '    uint public firstLockAmount = 120000000 * (10 ** 18);\n', '    uint public secondLockAmount = 120000000 * (10 ** 18);\n', '\n', '    modifier onlyOfficial {\n', '        require(msg.sender == owner || msg.sender == beneficiary);\n', '        _;\n', '    }\n', '\n', '    modifier firstLockTimeEnd {\n', '        require(isFirstLockTimeEnd());\n', '        _;\n', '    }\n', '\n', '    modifier secondLockTimeEnd {\n', '        require(isSecondLockTimeEnd());\n', '        _;\n', '    }\n', '\n', '    function TeamTokenLock(address _beneficiary, address _token) public {\n', '        require(_beneficiary != address(0));\n', '        require(_token != address(0));\n', '\n', '        beneficiary = _beneficiary;\n', '        token = ERC20(_token);\n', '    }\n', '\n', '    function getTokenBalance() public view returns(uint) {\n', '        return token.balanceOf(address(this));\n', '    }\n', '\n', '    function isFirstLockTimeEnd() public view returns(bool) {\n', '        return now > startTime + firstLockTime;\n', '    }\n', '\n', '    function isSecondLockTimeEnd() public view returns(bool) {\n', '        return now > startTime + secondLockTime;\n', '    }\n', '\n', '    function unlockFirstTokens() public onlyOfficial firstLockTimeEnd {\n', '        require(firstLockAmount > 0);\n', '\n', '        uint unlockAmount = firstLockAmount < getTokenBalance() ? firstLockAmount : getTokenBalance();\n', '        require(unlockAmount <= firstLockAmount);\n', '        firstLockAmount = firstLockAmount - unlockAmount;\n', '        require(token.transfer(beneficiary, unlockAmount));\n', '    }\n', '\n', '    function unlockSecondTokens() public onlyOfficial secondLockTimeEnd {\n', '        require(secondLockAmount > 0);\n', '\n', '        uint unlockAmount = secondLockAmount < getTokenBalance() ? secondLockAmount : getTokenBalance();\n', '        require(unlockAmount <= secondLockAmount);\n', '        secondLockAmount = secondLockAmount - unlockAmount;\n', '        require(token.transfer(beneficiary, unlockAmount));\n', '    }\n', '\n', '    function changeBeneficiary(address _beneficiary) public onlyOwner {\n', '        require(_beneficiary != address(0));\n', '        beneficiary = _beneficiary;\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'contract ERC20 {\n', '\n', '    uint256 public totalSupply;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnerChanged(address oldOwner, address newOwner);\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != owner && newOwner != address(0x0));\n', '        address oldOwner = owner;\n', '        owner = newOwner;\n', '        OwnerChanged(oldOwner, newOwner);\n', '    }\n', '}\n', '\n', '\n', 'contract TeamTokenLock is Ownable {\n', '\n', '    ERC20 public token;\n', '\n', '    // address where receives funds when unlock period\n', '    address public beneficiary;\n', '\n', '    uint public startTime = 1514592000;\n', '    uint public firstLockTime = 365 days;\n', '    uint public secondLockTime = 2 * 365 days;\n', '\n', '    uint public firstLockAmount = 120000000 * (10 ** 18);\n', '    uint public secondLockAmount = 120000000 * (10 ** 18);\n', '\n', '    modifier onlyOfficial {\n', '        require(msg.sender == owner || msg.sender == beneficiary);\n', '        _;\n', '    }\n', '\n', '    modifier firstLockTimeEnd {\n', '        require(isFirstLockTimeEnd());\n', '        _;\n', '    }\n', '\n', '    modifier secondLockTimeEnd {\n', '        require(isSecondLockTimeEnd());\n', '        _;\n', '    }\n', '\n', '    function TeamTokenLock(address _beneficiary, address _token) public {\n', '        require(_beneficiary != address(0));\n', '        require(_token != address(0));\n', '\n', '        beneficiary = _beneficiary;\n', '        token = ERC20(_token);\n', '    }\n', '\n', '    function getTokenBalance() public view returns(uint) {\n', '        return token.balanceOf(address(this));\n', '    }\n', '\n', '    function isFirstLockTimeEnd() public view returns(bool) {\n', '        return now > startTime + firstLockTime;\n', '    }\n', '\n', '    function isSecondLockTimeEnd() public view returns(bool) {\n', '        return now > startTime + secondLockTime;\n', '    }\n', '\n', '    function unlockFirstTokens() public onlyOfficial firstLockTimeEnd {\n', '        require(firstLockAmount > 0);\n', '\n', '        uint unlockAmount = firstLockAmount < getTokenBalance() ? firstLockAmount : getTokenBalance();\n', '        require(unlockAmount <= firstLockAmount);\n', '        firstLockAmount = firstLockAmount - unlockAmount;\n', '        require(token.transfer(beneficiary, unlockAmount));\n', '    }\n', '\n', '    function unlockSecondTokens() public onlyOfficial secondLockTimeEnd {\n', '        require(secondLockAmount > 0);\n', '\n', '        uint unlockAmount = secondLockAmount < getTokenBalance() ? secondLockAmount : getTokenBalance();\n', '        require(unlockAmount <= secondLockAmount);\n', '        secondLockAmount = secondLockAmount - unlockAmount;\n', '        require(token.transfer(beneficiary, unlockAmount));\n', '    }\n', '\n', '    function changeBeneficiary(address _beneficiary) public onlyOwner {\n', '        require(_beneficiary != address(0));\n', '        beneficiary = _beneficiary;\n', '    }\n', '}']
