['pragma solidity ^0.4.18;\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic contracts\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    /**\n', '    * @dev transfer contracts for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of contracts to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', '        // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(burner, _value);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 contracts\n', ' *\n', ' * @dev Implementation of the basic standard contracts.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' *\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '\n', '}\n', '\n', 'contract PAXToken is BurnableToken, PausableToken {\n', '\n', '    using SafeMath for uint;\n', '\n', '    string public constant name = "Pax Token";\n', '\n', '    string public constant symbol = "PAX";\n', '\n', '    uint32 public constant decimals = 10;\n', '\n', '    uint256 public constant INITIAL_SUPPLY = 999500000 * (10 ** uint256(decimals));\n', '\n', '    /**\n', '     * @dev Constructor that gives msg.sender all of existing tokens.\n', '     * @param _company address reserve tokens (300000000)\n', '     * @param _founders_1 address reserve tokens (300000000)\n', '     * @param _founders_2 address reserve tokens (50000000)\n', '     * @param _isPause bool (pause === true)\n', '     */\n', '    function PAXToken(address _company, address _founders_1, address _founders_2, bool _isPause) public {\n', '        require(_company != address(0) && _founders_1 != address(0) && _founders_2 != address(0));\n', '        paused = _isPause;\n', '        totalSupply = INITIAL_SUPPLY;\n', '        balances[msg.sender] = 349500000 * (10 ** uint256(decimals));\n', '        balances[_company] = 300000000 * (10 ** uint256(decimals));\n', '        balances[_founders_1] = 300000000 * (10 ** uint256(decimals));\n', '        balances[_founders_2] = 50000000 * (10 ** uint256(decimals));\n', '        emit Transfer(0x0, msg.sender, balances[msg.sender]);\n', '        emit Transfer(0x0, _company, balances[_company]);\n', '        emit Transfer(0x0, _founders_1, balances[_founders_1]);\n', '        emit Transfer(0x0, _founders_2, balances[_founders_2]);\n', '\n', '    }\n', '\n', '    /**\n', '    * @dev transfer contracts for a specified address, despite the pause state\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function ownersTransfer(address _to, uint256 _value) public onlyOwner returns (bool) {\n', '        return BasicToken.transfer(_to, _value);\n', '    }\n', '}\n', '\n', 'contract Crowdsale is Pausable {\n', '\n', '    struct stageInfo {\n', '        uint start;\n', '        uint stop;\n', '        uint duration;\n', '        uint bonus;\n', '        uint limit;\n', '    }\n', '\n', '    /**\n', '     * @dev Mapping with stageId = stageInfo\n', '     */\n', '    mapping (uint => stageInfo) public stages;\n', '\n', '    /**\n', '     * @dev Mapping with adress = with balance\n', '     */\n', '    mapping(address => uint) public balances;\n', '\n', '    /**\n', '     * @dev Softcap\n', '     */\n', '    uint public constant softcap = 2500 ether;\n', '\n', '    /**\n', '     * @dev xDecimals\n', '     */\n', '    uint public constant decimals = 1E10;\n', '\n', '    /**\n', '     * @dev ICO Period Number\n', '     */\n', '    uint public period = 5;\n', '\n', '    /**\n', '     * @dev Total number of minted tokens\n', '     */\n', '    uint public hardcap;\n', '\n', '    /**\n', '     * @dev Cost of the token\n', '     */\n', '    uint public rate;\n', '\n', '    /**\n', '     * @dev Number of sold tokens\n', '     */\n', '    uint public totalSold = 0;\n', '\n', '    /**\n', '     * @dev Assembled Eth\n', '     */\n', '    uint256 public sumWei;\n', '\n', '    /**\n', '     * @dev ICO Status\n', '     */\n', '    bool public state;\n', '\n', '    /**\n', '     * @dev Once call flag\n', '     */\n', '    bool public requireOnce = true;\n', '\n', '    /**\n', '     * @dev Once burning flag\n', '     */\n', '    bool public isBurned;\n', '\n', '    /**\n', '     * @dev Reserve tokens adress for company (300000000)\n', '     */\n', '    address public company;\n', '\n', '    /**\n', '     * @dev Reserve tokens adress for founders first (300000000)\n', '     */\n', '    address public founders_1;\n', '\n', '    /**\n', '     * @dev Reserve tokens adress for founders second (50000000)\n', '     */\n', '    address public founders_2;\n', '\n', '    /**\n', '     * @dev The address to which the received ether will be sent\n', '     */\n', '    address public multisig;\n', '\n', '    /**\n', '     * @dev Tokens classes\n', '     */\n', '    PAXToken public token;\n', '\n', '    /**\n', '     * @dev Number of coins for the typical period\n', '     */\n', '    uint private constant typicalBonus = 100;\n', '\n', '    /**\n', '     * @dev Sending tokens\n', '     */\n', '    uint private sendingTokens;\n', '\n', '    /**\n', '     * @dev Time left\n', '     */\n', '    uint private timeLeft;\n', '\n', '    /**\n', '     * @dev Pause date\n', '     */\n', '    uint private pauseDate;\n', '\n', '    /**\n', '     * @dev Paused by value flag\n', '     */\n', '    bool private pausedByValue;\n', '\n', '    /**\n', '     * @dev Manual pause flag\n', '     */\n', '    bool private manualPause;\n', '\n', '\n', '    event StartICO();\n', '\n', '    event StopICO();\n', '\n', '    event BurnUnsoldTokens();\n', '\n', '    event NewWalletAddress(address _to);\n', '\n', '    event Refund(address _wallet, uint _val);\n', '\n', '    event DateMoved(uint value);\n', '\n', '    using SafeMath for uint;\n', '\n', '    modifier saleIsOn() {\n', '        require(state);\n', '        uint stageId = getStageId();\n', '        if (period != stageId || stageId == 5) {\n', '            usersPause();\n', '            (msg.sender).transfer(msg.value);\n', '        }\n', '        else\n', '            _;\n', '    }\n', '\n', '    modifier isUnderHardCap() {\n', '        uint tokenBalance = token.balanceOf(this);\n', '        require(\n', '            tokenBalance <= hardcap &&\n', '            tokenBalance >= 500\n', '        );\n', '        _;\n', '    }\n', '\n', '\n', '    function Crowdsale(address _company, address _founders_1, address _founders_2, address _token) public {\n', '        multisig = owner;\n', '        rate = (uint)(1 ether).div(5000);\n', '\n', '        stages[0] = stageInfo({\n', '            start: 0,\n', '            stop: 0,\n', '            duration: 14 days,\n', '            bonus: 130,\n', '            limit:  44500000 * decimals\n', '            });\n', '\n', '        stages[1] = stageInfo({\n', '            start: 0,\n', '            stop: 0,\n', '            duration: 14 days,\n', '            bonus: 115,\n', '            limit:  85000000 * decimals\n', '            });\n', '\n', '        stages[2] = stageInfo({\n', '            start: 0,\n', '            stop: 0,\n', '            duration: 14 days,\n', '            bonus: 110,\n', '            limit:  100000000 * decimals\n', '            });\n', '\n', '        stages[3] = stageInfo({\n', '            start: 0,\n', '            stop: 0,\n', '            duration: 14 days,\n', '            bonus: 105,\n', '            limit:  120000000 * decimals\n', '            });\n', '\n', '        hardcap = 349500000 * decimals;\n', '\n', '        token = PAXToken(_token);\n', '\n', '        company = _company;\n', '        founders_1 = _founders_1;\n', '        founders_2 = _founders_2;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Fallback function\n', '     */\n', '    function() whenNotPaused saleIsOn external payable {\n', '        require (msg.value > 0);\n', '        sendTokens(msg.value, msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Manual sending tokens\n', '     * @param _to address where sending tokens\n', '     * @param _value uint256 value tokens for sending\n', '     */\n', '    function manualSendTokens(address _to, uint256 _value) public onlyOwner returns(bool) {\n', '        uint tokens = _value;\n', '        uint avalibleTokens = token.balanceOf(this);\n', '\n', '        if (tokens < avalibleTokens) {\n', '            if (tokens <= stages[3].limit) {\n', '                stages[3].limit = (stages[3].limit).sub(tokens);\n', '            } else if (tokens <= (stages[3].limit).add(stages[2].limit)) {\n', '                stages[2].limit = (stages[2].limit).sub(tokens.sub(stages[3].limit));\n', '                stages[3].limit = 0;\n', '            } else if (tokens <= (stages[3].limit).add(stages[2].limit).add(stages[1].limit)) {\n', '                stages[1].limit = (stages[1].limit).sub(tokens.sub(stages[3].limit).sub(stages[2].limit));\n', '                stages[3].limit = 0;\n', '                stages[2].limit = 0;\n', '            } else if (tokens <= (stages[3].limit).add(stages[2].limit).add(stages[1].limit).add(stages[0].limit)) {\n', '                stages[0].limit = (stages[0].limit).sub(tokens.sub(stages[3].limit).sub(stages[2].limit).sub(stages[1].limit));\n', '                stages[3].limit = 0;\n', '                stages[2].limit = 0;\n', '                stages[1].limit = 0;\n', '            }\n', '        } else {\n', '            tokens = avalibleTokens;\n', '            stages[3].limit = 0;\n', '            stages[2].limit = 0;\n', '            stages[1].limit = 0;\n', '            stages[0].limit = 0;\n', '        }\n', '\n', '        sendingTokens = sendingTokens.add(tokens);\n', '        sumWei = sumWei.add(tokens.mul(rate).div(decimals));\n', '        totalSold = totalSold.add(tokens);\n', '        token.ownersTransfer(_to, tokens);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Return Etherium all investors\n', '     */\n', '    function refund() public {\n', '        require(sumWei < softcap && !state);\n', '        uint value = balances[msg.sender];\n', '        balances[msg.sender] = 0;\n', '        emit Refund(msg.sender, value);\n', '        msg.sender.transfer(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Burning all tokens on mintAddress\n', '     */\n', '    function burnUnsoldTokens() onlyOwner public returns(bool) {\n', '        require(!state);\n', '        require(!isBurned);\n', '        isBurned = true;\n', '        emit BurnUnsoldTokens();\n', '        token.burn(token.balanceOf(this));\n', '        if (token.paused()) {\n', '            token.unpause();\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Starting ICO\n', '     */\n', '    function startICO() public onlyOwner returns(bool) {\n', '        require(stages[0].start >= now);\n', '        require(requireOnce);\n', '        requireOnce = false;\n', '        state = true;\n', '        period = 0;\n', '        emit StartICO();\n', '        token.ownersTransfer(company, (uint)(300000000).mul(decimals));\n', '        token.ownersTransfer(founders_1, (uint)(300000000).mul(decimals));\n', '        token.ownersTransfer(founders_2, (uint)(50000000).mul(decimals));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Turning off the ICO\n', '     */\n', '    function stopICO() onlyOwner public returns(bool) {\n', '        state = false;\n', '        emit StopICO();\n', '        if (token.paused()) {\n', '            token.unpause();\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        manualPause = true;\n', '        usersPause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() onlyOwner whenPaused public {\n', '        uint shift = now.sub(pauseDate);\n', '        dateMove(shift);\n', '        period = getStageId();\n', '        pausedByValue = false;\n', '        manualPause = false;\n', '        super.unpause();\n', '    }\n', '\n', '    /**\n', '     * @dev Withdrawal Etherium from smart-contract\n', '     */\n', '    function withDrawal() public onlyOwner {\n', '        if(!state && sumWei >= softcap) {\n', '            multisig.transfer(address(this).balance);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns stage id\n', '     */\n', '    function getStageId() public view returns(uint) {\n', '        uint stageId;\n', '        uint today = now;\n', '\n', '        if (today < stages[0].stop) {\n', '            stageId = 0;\n', '\n', '        } else if (today >= stages[1].start &&\n', '        today < stages[1].stop ) {\n', '            stageId = 1;\n', '\n', '        } else if (today >= stages[2].start &&\n', '        today < stages[2].stop ) {\n', '            stageId = 2;\n', '\n', '        } else if (today >= stages[3].start &&\n', '        today < stages[3].stop ) {\n', '            stageId = 3;\n', '\n', '        } else if (today >= stages[3].stop) {\n', '            stageId = 4;\n', '\n', '        } else {\n', '            return 5;\n', '        }\n', '\n', '        uint tempId = (stageId > period) ? stageId : period;\n', '        return tempId;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns Limit of coins for the period and Number of coins taking\n', '     * into account the bonus for the period\n', '     */\n', '    function getStageData() public view returns(uint tempLimit, uint tempBonus) {\n', '        uint stageId = getStageId();\n', '        tempBonus = stages[stageId].bonus;\n', '\n', '        if (stageId == 0) {\n', '            tempLimit = stages[0].limit;\n', '\n', '        } else if (stageId == 1) {\n', '            tempLimit = (stages[0].limit).add(stages[1].limit);\n', '\n', '        } else if (stageId == 2) {\n', '            tempLimit = (stages[0].limit).add(stages[1].limit).add(stages[2].limit);\n', '\n', '        } else if (stageId == 3) {\n', '            tempLimit = (stages[0].limit).add(stages[1].limit).add(stages[2].limit).add(stages[3].limit);\n', '\n', '        } else {\n', '            tempLimit = token.balanceOf(this);\n', '            tempBonus = typicalBonus;\n', '            return;\n', '        }\n', '        tempLimit = tempLimit.sub(totalSold);\n', '        return;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the amount for which you can redeem all tokens for the current period\n', '     */\n', '    function calculateStagePrice() public view returns(uint price) {\n', '        uint limit;\n', '        uint bonusCoefficient;\n', '        (limit, bonusCoefficient) = getStageData();\n', '\n', '        price = limit.mul(rate).mul(100).div(bonusCoefficient).div(decimals);\n', '    }\n', '\n', '    /**\n', '     * @dev Sending tokens to the recipient, based on the amount of ether that it sent\n', '     * @param _etherValue uint Amount of sent ether\n', '     * @param _to address The address which you want to transfer to\n', '     */\n', '    function sendTokens(uint _etherValue, address _to) internal isUnderHardCap {\n', '        uint limit;\n', '        uint bonusCoefficient;\n', '        (limit, bonusCoefficient) = getStageData();\n', '        uint tokens = (_etherValue).mul(bonusCoefficient).mul(decimals).div(100);\n', '        tokens = tokens.div(rate);\n', '        bool needPause;\n', '\n', '        if (tokens > limit) {\n', '            needPause = true;\n', '            uint stageEther = calculateStagePrice();\n', '            period++;\n', '            if (period == 4) {\n', '                balances[msg.sender] = balances[msg.sender].add(stageEther);\n', '                sumWei = sumWei.add(stageEther);\n', '                token.ownersTransfer(_to, limit);\n', '                totalSold = totalSold.add(limit);\n', '                _to.transfer(_etherValue.sub(stageEther));\n', '                state = false;\n', '                return;\n', '            }\n', '            balances[msg.sender] = balances[msg.sender].add(stageEther);\n', '            sumWei = sumWei.add(stageEther);\n', '            token.ownersTransfer(_to, limit);\n', '            totalSold = totalSold.add(limit);\n', '            sendTokens(_etherValue.sub(stageEther), _to);\n', '\n', '        } else {\n', '            require(tokens <= token.balanceOf(this));\n', '            if (limit.sub(tokens) < 500) {\n', '                needPause = true;\n', '                period++;\n', '            }\n', '            balances[msg.sender] = balances[msg.sender].add(_etherValue);\n', '            sumWei = sumWei.add(_etherValue);\n', '            token.ownersTransfer(_to, tokens);\n', '            totalSold = totalSold.add(tokens);\n', '        }\n', '\n', '        if (needPause) {\n', '            pausedByValue = true;\n', '            usersPause();\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev called by the contract to pause, triggers stopped state\n', '     */\n', '    function usersPause() private {\n', '        pauseDate = now;\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev Moving date after the pause\n', '     * @param _shift uint Time in seconds\n', '     */\n', '    function dateMove(uint _shift) private returns(bool) {\n', '        require(_shift > 0);\n', '\n', '        uint i;\n', '\n', '        if (pausedByValue) {\n', '            stages[period].start = now;\n', '            stages[period].stop = (stages[period].start).add(stages[period].duration);\n', '\n', '            for (i = period + 1; i < 4; i++) {\n', '                stages[i].start = stages[i - 1].stop;\n', '                stages[i].stop = (stages[i].start).add(stages[i].duration);\n', '            }\n', '\n', '        } else {\n', '            if (manualPause) stages[period].stop = (stages[period].stop).add(_shift);\n', '\n', '            for (i = period + 1; i < 4; i++) {\n', '                stages[i].start = (stages[i].start).add(_shift);\n', '                stages[i].stop = (stages[i].stop).add(_shift);\n', '            }\n', '        }\n', '\n', '        emit DateMoved(_shift);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the total number of tokens available for sale\n', '     */\n', '    function tokensAmount() public view returns(uint) {\n', '        return token.balanceOf(this);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns number of supplied tokens\n', '     */\n', '    function tokensSupply() public view returns(uint) {\n', '        return token.totalSupply();\n', '    }\n', '\n', '    /**\n', '     * @dev Set start date\n', '     * @param _start uint Time start\n', '     */\n', '    function setStartDate(uint _start) public onlyOwner returns(bool) {\n', '        require(_start > now);\n', '        require(requireOnce);\n', '\n', '        stages[0].start = _start;\n', '        stages[0].stop = _start.add(stages[0].duration);\n', '        stages[1].start = stages[0].stop;\n', '        stages[1].stop = stages[1].start.add(stages[1].duration);\n', '        stages[2].start = stages[1].stop;\n', '        stages[2].stop = stages[2].start.add(stages[2].duration);\n', '        stages[3].start = stages[2].stop;\n', '        stages[3].stop = stages[3].start.add(stages[3].duration);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Sets new multisig address to which the received ether will be sent\n', '     * @param _to address\n', '     */\n', '    function setMultisig(address _to) public onlyOwner returns(bool) {\n', '        require(_to != address(0));\n', '        multisig = _to;\n', '        emit NewWalletAddress(_to);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Change first adress with reserve(300000000 tokens)\n', '     * @param _company address\n', '     */\n', '    function setReserveForCompany(address _company) public onlyOwner {\n', '        require(_company != address(0));\n', '        require(requireOnce);\n', '        company = _company;\n', '    }\n', '\n', '    /**\n', '     * @dev Change second adress with reserve(300000000 tokens)\n', '     * @param _founders_1 address\n', '     */\n', '    function setReserveForFoundersFirst(address _founders_1) public onlyOwner {\n', '        require(_founders_1 != address(0));\n', '        require(requireOnce);\n', '        founders_1 = _founders_1;\n', '    }\n', '\n', '    /**\n', '     * @dev Change third adress with reserve(50000000 tokens)\n', '     * @param _founders_2 address\n', '     */\n', '    function setReserveForFoundersSecond(address _founders_2) public onlyOwner {\n', '        require(_founders_2 != address(0));\n', '        require(requireOnce);\n', '        founders_2 = _founders_2;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic contracts\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    /**\n', '    * @dev transfer contracts for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of contracts to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(burner, _value);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 contracts\n', ' *\n', ' * @dev Implementation of the basic standard contracts.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' *\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '\n', '}\n', '\n', 'contract PAXToken is BurnableToken, PausableToken {\n', '\n', '    using SafeMath for uint;\n', '\n', '    string public constant name = "Pax Token";\n', '\n', '    string public constant symbol = "PAX";\n', '\n', '    uint32 public constant decimals = 10;\n', '\n', '    uint256 public constant INITIAL_SUPPLY = 999500000 * (10 ** uint256(decimals));\n', '\n', '    /**\n', '     * @dev Constructor that gives msg.sender all of existing tokens.\n', '     * @param _company address reserve tokens (300000000)\n', '     * @param _founders_1 address reserve tokens (300000000)\n', '     * @param _founders_2 address reserve tokens (50000000)\n', '     * @param _isPause bool (pause === true)\n', '     */\n', '    function PAXToken(address _company, address _founders_1, address _founders_2, bool _isPause) public {\n', '        require(_company != address(0) && _founders_1 != address(0) && _founders_2 != address(0));\n', '        paused = _isPause;\n', '        totalSupply = INITIAL_SUPPLY;\n', '        balances[msg.sender] = 349500000 * (10 ** uint256(decimals));\n', '        balances[_company] = 300000000 * (10 ** uint256(decimals));\n', '        balances[_founders_1] = 300000000 * (10 ** uint256(decimals));\n', '        balances[_founders_2] = 50000000 * (10 ** uint256(decimals));\n', '        emit Transfer(0x0, msg.sender, balances[msg.sender]);\n', '        emit Transfer(0x0, _company, balances[_company]);\n', '        emit Transfer(0x0, _founders_1, balances[_founders_1]);\n', '        emit Transfer(0x0, _founders_2, balances[_founders_2]);\n', '\n', '    }\n', '\n', '    /**\n', '    * @dev transfer contracts for a specified address, despite the pause state\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function ownersTransfer(address _to, uint256 _value) public onlyOwner returns (bool) {\n', '        return BasicToken.transfer(_to, _value);\n', '    }\n', '}\n', '\n', 'contract Crowdsale is Pausable {\n', '\n', '    struct stageInfo {\n', '        uint start;\n', '        uint stop;\n', '        uint duration;\n', '        uint bonus;\n', '        uint limit;\n', '    }\n', '\n', '    /**\n', '     * @dev Mapping with stageId = stageInfo\n', '     */\n', '    mapping (uint => stageInfo) public stages;\n', '\n', '    /**\n', '     * @dev Mapping with adress = with balance\n', '     */\n', '    mapping(address => uint) public balances;\n', '\n', '    /**\n', '     * @dev Softcap\n', '     */\n', '    uint public constant softcap = 2500 ether;\n', '\n', '    /**\n', '     * @dev xDecimals\n', '     */\n', '    uint public constant decimals = 1E10;\n', '\n', '    /**\n', '     * @dev ICO Period Number\n', '     */\n', '    uint public period = 5;\n', '\n', '    /**\n', '     * @dev Total number of minted tokens\n', '     */\n', '    uint public hardcap;\n', '\n', '    /**\n', '     * @dev Cost of the token\n', '     */\n', '    uint public rate;\n', '\n', '    /**\n', '     * @dev Number of sold tokens\n', '     */\n', '    uint public totalSold = 0;\n', '\n', '    /**\n', '     * @dev Assembled Eth\n', '     */\n', '    uint256 public sumWei;\n', '\n', '    /**\n', '     * @dev ICO Status\n', '     */\n', '    bool public state;\n', '\n', '    /**\n', '     * @dev Once call flag\n', '     */\n', '    bool public requireOnce = true;\n', '\n', '    /**\n', '     * @dev Once burning flag\n', '     */\n', '    bool public isBurned;\n', '\n', '    /**\n', '     * @dev Reserve tokens adress for company (300000000)\n', '     */\n', '    address public company;\n', '\n', '    /**\n', '     * @dev Reserve tokens adress for founders first (300000000)\n', '     */\n', '    address public founders_1;\n', '\n', '    /**\n', '     * @dev Reserve tokens adress for founders second (50000000)\n', '     */\n', '    address public founders_2;\n', '\n', '    /**\n', '     * @dev The address to which the received ether will be sent\n', '     */\n', '    address public multisig;\n', '\n', '    /**\n', '     * @dev Tokens classes\n', '     */\n', '    PAXToken public token;\n', '\n', '    /**\n', '     * @dev Number of coins for the typical period\n', '     */\n', '    uint private constant typicalBonus = 100;\n', '\n', '    /**\n', '     * @dev Sending tokens\n', '     */\n', '    uint private sendingTokens;\n', '\n', '    /**\n', '     * @dev Time left\n', '     */\n', '    uint private timeLeft;\n', '\n', '    /**\n', '     * @dev Pause date\n', '     */\n', '    uint private pauseDate;\n', '\n', '    /**\n', '     * @dev Paused by value flag\n', '     */\n', '    bool private pausedByValue;\n', '\n', '    /**\n', '     * @dev Manual pause flag\n', '     */\n', '    bool private manualPause;\n', '\n', '\n', '    event StartICO();\n', '\n', '    event StopICO();\n', '\n', '    event BurnUnsoldTokens();\n', '\n', '    event NewWalletAddress(address _to);\n', '\n', '    event Refund(address _wallet, uint _val);\n', '\n', '    event DateMoved(uint value);\n', '\n', '    using SafeMath for uint;\n', '\n', '    modifier saleIsOn() {\n', '        require(state);\n', '        uint stageId = getStageId();\n', '        if (period != stageId || stageId == 5) {\n', '            usersPause();\n', '            (msg.sender).transfer(msg.value);\n', '        }\n', '        else\n', '            _;\n', '    }\n', '\n', '    modifier isUnderHardCap() {\n', '        uint tokenBalance = token.balanceOf(this);\n', '        require(\n', '            tokenBalance <= hardcap &&\n', '            tokenBalance >= 500\n', '        );\n', '        _;\n', '    }\n', '\n', '\n', '    function Crowdsale(address _company, address _founders_1, address _founders_2, address _token) public {\n', '        multisig = owner;\n', '        rate = (uint)(1 ether).div(5000);\n', '\n', '        stages[0] = stageInfo({\n', '            start: 0,\n', '            stop: 0,\n', '            duration: 14 days,\n', '            bonus: 130,\n', '            limit:  44500000 * decimals\n', '            });\n', '\n', '        stages[1] = stageInfo({\n', '            start: 0,\n', '            stop: 0,\n', '            duration: 14 days,\n', '            bonus: 115,\n', '            limit:  85000000 * decimals\n', '            });\n', '\n', '        stages[2] = stageInfo({\n', '            start: 0,\n', '            stop: 0,\n', '            duration: 14 days,\n', '            bonus: 110,\n', '            limit:  100000000 * decimals\n', '            });\n', '\n', '        stages[3] = stageInfo({\n', '            start: 0,\n', '            stop: 0,\n', '            duration: 14 days,\n', '            bonus: 105,\n', '            limit:  120000000 * decimals\n', '            });\n', '\n', '        hardcap = 349500000 * decimals;\n', '\n', '        token = PAXToken(_token);\n', '\n', '        company = _company;\n', '        founders_1 = _founders_1;\n', '        founders_2 = _founders_2;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Fallback function\n', '     */\n', '    function() whenNotPaused saleIsOn external payable {\n', '        require (msg.value > 0);\n', '        sendTokens(msg.value, msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Manual sending tokens\n', '     * @param _to address where sending tokens\n', '     * @param _value uint256 value tokens for sending\n', '     */\n', '    function manualSendTokens(address _to, uint256 _value) public onlyOwner returns(bool) {\n', '        uint tokens = _value;\n', '        uint avalibleTokens = token.balanceOf(this);\n', '\n', '        if (tokens < avalibleTokens) {\n', '            if (tokens <= stages[3].limit) {\n', '                stages[3].limit = (stages[3].limit).sub(tokens);\n', '            } else if (tokens <= (stages[3].limit).add(stages[2].limit)) {\n', '                stages[2].limit = (stages[2].limit).sub(tokens.sub(stages[3].limit));\n', '                stages[3].limit = 0;\n', '            } else if (tokens <= (stages[3].limit).add(stages[2].limit).add(stages[1].limit)) {\n', '                stages[1].limit = (stages[1].limit).sub(tokens.sub(stages[3].limit).sub(stages[2].limit));\n', '                stages[3].limit = 0;\n', '                stages[2].limit = 0;\n', '            } else if (tokens <= (stages[3].limit).add(stages[2].limit).add(stages[1].limit).add(stages[0].limit)) {\n', '                stages[0].limit = (stages[0].limit).sub(tokens.sub(stages[3].limit).sub(stages[2].limit).sub(stages[1].limit));\n', '                stages[3].limit = 0;\n', '                stages[2].limit = 0;\n', '                stages[1].limit = 0;\n', '            }\n', '        } else {\n', '            tokens = avalibleTokens;\n', '            stages[3].limit = 0;\n', '            stages[2].limit = 0;\n', '            stages[1].limit = 0;\n', '            stages[0].limit = 0;\n', '        }\n', '\n', '        sendingTokens = sendingTokens.add(tokens);\n', '        sumWei = sumWei.add(tokens.mul(rate).div(decimals));\n', '        totalSold = totalSold.add(tokens);\n', '        token.ownersTransfer(_to, tokens);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Return Etherium all investors\n', '     */\n', '    function refund() public {\n', '        require(sumWei < softcap && !state);\n', '        uint value = balances[msg.sender];\n', '        balances[msg.sender] = 0;\n', '        emit Refund(msg.sender, value);\n', '        msg.sender.transfer(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Burning all tokens on mintAddress\n', '     */\n', '    function burnUnsoldTokens() onlyOwner public returns(bool) {\n', '        require(!state);\n', '        require(!isBurned);\n', '        isBurned = true;\n', '        emit BurnUnsoldTokens();\n', '        token.burn(token.balanceOf(this));\n', '        if (token.paused()) {\n', '            token.unpause();\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Starting ICO\n', '     */\n', '    function startICO() public onlyOwner returns(bool) {\n', '        require(stages[0].start >= now);\n', '        require(requireOnce);\n', '        requireOnce = false;\n', '        state = true;\n', '        period = 0;\n', '        emit StartICO();\n', '        token.ownersTransfer(company, (uint)(300000000).mul(decimals));\n', '        token.ownersTransfer(founders_1, (uint)(300000000).mul(decimals));\n', '        token.ownersTransfer(founders_2, (uint)(50000000).mul(decimals));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Turning off the ICO\n', '     */\n', '    function stopICO() onlyOwner public returns(bool) {\n', '        state = false;\n', '        emit StopICO();\n', '        if (token.paused()) {\n', '            token.unpause();\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        manualPause = true;\n', '        usersPause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() onlyOwner whenPaused public {\n', '        uint shift = now.sub(pauseDate);\n', '        dateMove(shift);\n', '        period = getStageId();\n', '        pausedByValue = false;\n', '        manualPause = false;\n', '        super.unpause();\n', '    }\n', '\n', '    /**\n', '     * @dev Withdrawal Etherium from smart-contract\n', '     */\n', '    function withDrawal() public onlyOwner {\n', '        if(!state && sumWei >= softcap) {\n', '            multisig.transfer(address(this).balance);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns stage id\n', '     */\n', '    function getStageId() public view returns(uint) {\n', '        uint stageId;\n', '        uint today = now;\n', '\n', '        if (today < stages[0].stop) {\n', '            stageId = 0;\n', '\n', '        } else if (today >= stages[1].start &&\n', '        today < stages[1].stop ) {\n', '            stageId = 1;\n', '\n', '        } else if (today >= stages[2].start &&\n', '        today < stages[2].stop ) {\n', '            stageId = 2;\n', '\n', '        } else if (today >= stages[3].start &&\n', '        today < stages[3].stop ) {\n', '            stageId = 3;\n', '\n', '        } else if (today >= stages[3].stop) {\n', '            stageId = 4;\n', '\n', '        } else {\n', '            return 5;\n', '        }\n', '\n', '        uint tempId = (stageId > period) ? stageId : period;\n', '        return tempId;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns Limit of coins for the period and Number of coins taking\n', '     * into account the bonus for the period\n', '     */\n', '    function getStageData() public view returns(uint tempLimit, uint tempBonus) {\n', '        uint stageId = getStageId();\n', '        tempBonus = stages[stageId].bonus;\n', '\n', '        if (stageId == 0) {\n', '            tempLimit = stages[0].limit;\n', '\n', '        } else if (stageId == 1) {\n', '            tempLimit = (stages[0].limit).add(stages[1].limit);\n', '\n', '        } else if (stageId == 2) {\n', '            tempLimit = (stages[0].limit).add(stages[1].limit).add(stages[2].limit);\n', '\n', '        } else if (stageId == 3) {\n', '            tempLimit = (stages[0].limit).add(stages[1].limit).add(stages[2].limit).add(stages[3].limit);\n', '\n', '        } else {\n', '            tempLimit = token.balanceOf(this);\n', '            tempBonus = typicalBonus;\n', '            return;\n', '        }\n', '        tempLimit = tempLimit.sub(totalSold);\n', '        return;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the amount for which you can redeem all tokens for the current period\n', '     */\n', '    function calculateStagePrice() public view returns(uint price) {\n', '        uint limit;\n', '        uint bonusCoefficient;\n', '        (limit, bonusCoefficient) = getStageData();\n', '\n', '        price = limit.mul(rate).mul(100).div(bonusCoefficient).div(decimals);\n', '    }\n', '\n', '    /**\n', '     * @dev Sending tokens to the recipient, based on the amount of ether that it sent\n', '     * @param _etherValue uint Amount of sent ether\n', '     * @param _to address The address which you want to transfer to\n', '     */\n', '    function sendTokens(uint _etherValue, address _to) internal isUnderHardCap {\n', '        uint limit;\n', '        uint bonusCoefficient;\n', '        (limit, bonusCoefficient) = getStageData();\n', '        uint tokens = (_etherValue).mul(bonusCoefficient).mul(decimals).div(100);\n', '        tokens = tokens.div(rate);\n', '        bool needPause;\n', '\n', '        if (tokens > limit) {\n', '            needPause = true;\n', '            uint stageEther = calculateStagePrice();\n', '            period++;\n', '            if (period == 4) {\n', '                balances[msg.sender] = balances[msg.sender].add(stageEther);\n', '                sumWei = sumWei.add(stageEther);\n', '                token.ownersTransfer(_to, limit);\n', '                totalSold = totalSold.add(limit);\n', '                _to.transfer(_etherValue.sub(stageEther));\n', '                state = false;\n', '                return;\n', '            }\n', '            balances[msg.sender] = balances[msg.sender].add(stageEther);\n', '            sumWei = sumWei.add(stageEther);\n', '            token.ownersTransfer(_to, limit);\n', '            totalSold = totalSold.add(limit);\n', '            sendTokens(_etherValue.sub(stageEther), _to);\n', '\n', '        } else {\n', '            require(tokens <= token.balanceOf(this));\n', '            if (limit.sub(tokens) < 500) {\n', '                needPause = true;\n', '                period++;\n', '            }\n', '            balances[msg.sender] = balances[msg.sender].add(_etherValue);\n', '            sumWei = sumWei.add(_etherValue);\n', '            token.ownersTransfer(_to, tokens);\n', '            totalSold = totalSold.add(tokens);\n', '        }\n', '\n', '        if (needPause) {\n', '            pausedByValue = true;\n', '            usersPause();\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev called by the contract to pause, triggers stopped state\n', '     */\n', '    function usersPause() private {\n', '        pauseDate = now;\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev Moving date after the pause\n', '     * @param _shift uint Time in seconds\n', '     */\n', '    function dateMove(uint _shift) private returns(bool) {\n', '        require(_shift > 0);\n', '\n', '        uint i;\n', '\n', '        if (pausedByValue) {\n', '            stages[period].start = now;\n', '            stages[period].stop = (stages[period].start).add(stages[period].duration);\n', '\n', '            for (i = period + 1; i < 4; i++) {\n', '                stages[i].start = stages[i - 1].stop;\n', '                stages[i].stop = (stages[i].start).add(stages[i].duration);\n', '            }\n', '\n', '        } else {\n', '            if (manualPause) stages[period].stop = (stages[period].stop).add(_shift);\n', '\n', '            for (i = period + 1; i < 4; i++) {\n', '                stages[i].start = (stages[i].start).add(_shift);\n', '                stages[i].stop = (stages[i].stop).add(_shift);\n', '            }\n', '        }\n', '\n', '        emit DateMoved(_shift);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the total number of tokens available for sale\n', '     */\n', '    function tokensAmount() public view returns(uint) {\n', '        return token.balanceOf(this);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns number of supplied tokens\n', '     */\n', '    function tokensSupply() public view returns(uint) {\n', '        return token.totalSupply();\n', '    }\n', '\n', '    /**\n', '     * @dev Set start date\n', '     * @param _start uint Time start\n', '     */\n', '    function setStartDate(uint _start) public onlyOwner returns(bool) {\n', '        require(_start > now);\n', '        require(requireOnce);\n', '\n', '        stages[0].start = _start;\n', '        stages[0].stop = _start.add(stages[0].duration);\n', '        stages[1].start = stages[0].stop;\n', '        stages[1].stop = stages[1].start.add(stages[1].duration);\n', '        stages[2].start = stages[1].stop;\n', '        stages[2].stop = stages[2].start.add(stages[2].duration);\n', '        stages[3].start = stages[2].stop;\n', '        stages[3].stop = stages[3].start.add(stages[3].duration);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Sets new multisig address to which the received ether will be sent\n', '     * @param _to address\n', '     */\n', '    function setMultisig(address _to) public onlyOwner returns(bool) {\n', '        require(_to != address(0));\n', '        multisig = _to;\n', '        emit NewWalletAddress(_to);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Change first adress with reserve(300000000 tokens)\n', '     * @param _company address\n', '     */\n', '    function setReserveForCompany(address _company) public onlyOwner {\n', '        require(_company != address(0));\n', '        require(requireOnce);\n', '        company = _company;\n', '    }\n', '\n', '    /**\n', '     * @dev Change second adress with reserve(300000000 tokens)\n', '     * @param _founders_1 address\n', '     */\n', '    function setReserveForFoundersFirst(address _founders_1) public onlyOwner {\n', '        require(_founders_1 != address(0));\n', '        require(requireOnce);\n', '        founders_1 = _founders_1;\n', '    }\n', '\n', '    /**\n', '     * @dev Change third adress with reserve(50000000 tokens)\n', '     * @param _founders_2 address\n', '     */\n', '    function setReserveForFoundersSecond(address _founders_2) public onlyOwner {\n', '        require(_founders_2 != address(0));\n', '        require(requireOnce);\n', '        founders_2 = _founders_2;\n', '    }\n', '\n', '}']
