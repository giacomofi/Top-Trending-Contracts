['contract PostboyRejectSetting {\n', '   \n', '    address public adminAddress;\n', '\n', '    uint256 public minTimeForReject;\n', '    bool public isRejectEnabled;\n', '\n', '    modifier isAdmin() {\n', '        require(msg.sender == adminAddress);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        adminAddress = msg.sender;\n', '        minTimeForReject = 0;\n', '        isRejectEnabled = false;\n', '    }\n', '\n', '    function changeRejectSetting(uint256 rejectTime, bool isEnabled) isAdmin public {\n', '        minTimeForReject = rejectTime;\n', '        isRejectEnabled = isEnabled;\n', '    }\n', '}\n', 'contract PostboyAccount {\n', '\n', '    struct Mail {\n', '        bytes16 mailText;\n', '        bytes16 responseText;\n', '        uint256 paySum;\n', '        bool isPublic;\n', '        bool isRead;\n', '        address sender;\n', '        bool hasLike;\n', '        bool isDislike;\n', '        bool isRejected;\n', '        uint256 createdTime;\n', '    }\n', '\n', '    Mail[] public mails;\n', '    uint256[] public withdraws;\n', '\n', '    address public owner;\n', '    address public donateWallet;\n', '    address public serviceWallet;\n', '    PostboyRejectSetting public rejectConfig;\n', '    address public adminWallet;\n', '    uint256 public servicePercent;\n', '    bytes16 public guid;\n', '\n', '    bool public isOwnerInitialized;\n', '\n', '    uint256 public minPay;\n', '    uint256 public donatePercent;\n', '    uint256 public frozenBalance;\n', '\n', '    modifier isOwner() {\n', '        require(isOwnerInitialized);\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier isAdmin() {\n', '        require(msg.sender == adminWallet);\n', '        _;\n', '    }\n', '\n', '\n', '    constructor(uint256 _minPay, uint256 _donatePercent, uint256 _servicePercent, bytes16 _guid, address _donateWallet, address _serviceWallet, address _owner, address _admin, PostboyRejectSetting _rejectConfig) public {\n', '        require(_donatePercent < 50);\n', '        \n', '        donateWallet = _donateWallet;\n', '        serviceWallet = _serviceWallet;\n', '        servicePercent = _servicePercent;\n', '        guid = _guid;\n', '        donateWallet = _donateWallet;\n', '        donatePercent = _donatePercent;\n', '        frozenBalance = 0;\n', '        minPay = _minPay;\n', '        adminWallet = _admin;\n', '        rejectConfig = _rejectConfig;\n', '\n', '        if(_owner == address(0)) {\n', '            owner = address(0);\n', '            isOwnerInitialized = false;\n', '        } else {\n', '            owner = _owner;\n', '            isOwnerInitialized = true;\n', '        }\n', '    }\n', '\n', '    function initOwner(address _owner) isAdmin public {\n', '        require(isOwnerInitialized == false);\n', '\n', '        owner = _owner;\n', '        isOwnerInitialized = true;\n', '    }\n', ' \n', '    function sendMail(bytes16 mailText, bool isPublic) payable public {\n', '        require(msg.value >= minPay);\n', '\n', '        uint256 serviceSum = (msg.value / 100)*servicePercent;\n', '        serviceWallet.transfer(serviceSum);\n', '\n', '        frozenBalance += msg.value - serviceSum;\n', '\n', '        mails.push(Mail(mailText, bytes16(0), (msg.value - serviceSum), isPublic, false, msg.sender, false, false, false, now));\n', '    }    \n', '    \n', '    function rejectMail(uint256 mailIndex) public {\n', '        require(mails[mailIndex].sender == msg.sender);\n', '        require(mails[mailIndex].isRead == false);\n', '        require(mails[mailIndex].isRejected == false);\n', '\n', '        require(rejectConfig.isRejectEnabled() == true);\n', '        require(mails[mailIndex].createdTime + rejectConfig.minTimeForReject() < now);\n', '\n', '        mails[mailIndex].isRejected = true;\n', '        frozenBalance -= mails[mailIndex].paySum;\n', '\n', '        msg.sender.transfer(mails[mailIndex].paySum);\n', '    }\n', '\n', '    function readMail(uint256 mailIndex, bytes16 responseText) isOwner public {\n', '        require(mails[mailIndex].isRead == false);\n', '\n', '        mails[mailIndex].responseText = responseText;\n', '        mails[mailIndex].isRead = true;\n', '        frozenBalance -= mails[mailIndex].paySum;\n', '\n', '        uint256 donateSum = (mails[mailIndex].paySum / 100)*donatePercent;\n', '        donateWallet.transfer(donateSum);\n', '    }\n', '\n', '    function readMailByAdmin(uint256 mailIndex, bytes16 responseText) isAdmin public {\n', '        require(mails[mailIndex].isRead == false);\n', '\n', '        mails[mailIndex].responseText = responseText;\n', '        mails[mailIndex].isRead = true;\n', '        frozenBalance -= mails[mailIndex].paySum;\n', '\n', '        uint256 donateSum = (mails[mailIndex].paySum / 100)*donatePercent;\n', '        donateWallet.transfer(donateSum);\n', '    }\n', '\n', '    function withdrawMoney(uint256 amount) isOwner public {\n', '        require(address(this).balance - frozenBalance >= amount);\n', '        \n', '        withdraws.push(amount);\n', '        msg.sender.transfer(amount);\n', '    }\n', '\n', '    function withdrawMoneyByAdmin(uint256 amount) isAdmin public {\n', '        require(address(this).balance - frozenBalance >= amount);\n', '\n', '        withdraws.push(amount);\n', '        owner.transfer(amount);\n', '    }\n', '\n', '    function updateConfig(uint256 _minPay, uint256 _donatePercent) isOwner public {\n', '        require(_donatePercent < 50);\n', '        \n', '        minPay = _minPay;\n', '        donatePercent = _donatePercent;\n', '    }\n', '\n', '    function addLike(uint256 mailIndex, bool isDislike) public {\n', '        require(mailIndex < mails.length);\n', '        require(mails[mailIndex].sender == msg.sender);\n', '        require(mails[mailIndex].isRead == true);\n', '        require(mails[mailIndex].hasLike == false);\n', '\n', '        mails[mailIndex].hasLike = true;\n', '        mails[mailIndex].isDislike = isDislike;\n', '    }\n', ' \n', '    function countMails() constant public returns(uint256 length) {\n', '        return mails.length;\n', '    }\n', '\n', '    function countWithdraws() constant public returns(uint256 length) {\n', '        return withdraws.length;\n', '    }\n', '\n', '    function getAccountStatus() constant public returns(uint256 donatePercentVal, uint256 minPaySum, uint256 frozenBalanceSum, uint256 fullBalance, uint256 countMails, uint256 counWithdraws, bool ownerInitialized) {\n', '        return (donatePercent, minPay, frozenBalance, address(this).balance, mails.length, withdraws.length, isOwnerInitialized);\n', '    }\n', '}\n', 'contract PostboyFactory {\n', '    struct Account {\n', '        address contractAddress;\n', '        address ownerAddress;\n', '    }\n', '\n', '    Account[] public accounts;\n', '\n', '    address public adminAddress;\n', '    address public factoryAdminAddress;\n', '    address public donateWallet;\n', '    address public serviceWallet;\n', '    PostboyRejectSetting public rejectSettings;\n', '    uint256 public servicePercent;\n', '\n', '\n', '    modifier isFactoryAdmin() {\n', '        require(msg.sender == factoryAdminAddress);\n', '        _;\n', '    }\n', '\n', '    modifier isAdmin() {\n', '        require(msg.sender == adminAddress);\n', '        _;\n', '    }\n', '\n', '    constructor(address _donateWallet, address _serviceWallet, PostboyRejectSetting _rejectSettings, address _factoryAdminAddress) public {\n', '        donateWallet = _donateWallet;\n', '        serviceWallet = _serviceWallet;\n', '        adminAddress = msg.sender;\n', '        rejectSettings = _rejectSettings;\n', '        servicePercent = 10;\n', '        factoryAdminAddress = _factoryAdminAddress;\n', '    }\n', ' \n', '    function createPostboyAccount(uint256 minPay, uint256 donatePercent, bytes16 guid) public {\n', '        address createdAccount = new PostboyAccount(\n', '                            minPay, \n', '                            donatePercent,\n', '                            servicePercent, \n', '                            guid,\n', '                            donateWallet,\n', '                            serviceWallet,\n', '                            msg.sender,\n', '                            address(this),\n', '                            rejectSettings\n', '        );\n', '        accounts.push(Account(createdAccount, msg.sender));\n', '    }\n', '\n', '    function createPostboyAccountForSomeone(uint256 minPay, uint256 donatePercent, bytes16 guid) isFactoryAdmin public {\n', '        address createdAccount = new PostboyAccount(\n', '                            minPay, \n', '                            donatePercent,\n', '                            servicePercent, \n', '                            guid,\n', '                            donateWallet,\n', '                            serviceWallet,\n', '                            address(0),\n', '                            address(this),\n', '                            rejectSettings\n', '        );\n', '        accounts.push(Account(createdAccount, address(0)));\n', '    }\n', ' \n', '    function countAccounts() public constant returns(uint length) {\n', '        return accounts.length;\n', '    }\n', '\n', '    function changeServicePercent(uint256 newPercent) isAdmin public {\n', '        require(newPercent <= 10);\n', '        require(newPercent >= 0);\n', '\n', '        servicePercent = newPercent;\n', '    }\n', '\n', '    function changeFactoryAdmin(address _admin) isAdmin public {\n', '        factoryAdminAddress = _admin;\n', '    }\n', '\n', '    \n', '\n', '    function initOwner(address ownerAddress, address contractAddress) isFactoryAdmin public {\n', '        PostboyAccount(contractAddress).initOwner(ownerAddress);\n', '    }\n', '\n', '    function readMailByAdmin(uint256 mailIndex, bytes16 responseText, address contractAddress) isFactoryAdmin public {\n', '        PostboyAccount(contractAddress).readMailByAdmin(mailIndex, responseText);\n', '    }\n', '\n', '    function withdrawMoneyByAdmin(uint256 amount, address contractAddress) isFactoryAdmin public {\n', '        PostboyAccount(contractAddress).withdrawMoneyByAdmin(amount);\n', '    }\n', '\n', '}']