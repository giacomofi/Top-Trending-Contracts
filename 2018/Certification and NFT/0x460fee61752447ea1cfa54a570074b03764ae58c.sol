['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract TokenDistributor is Ownable {\n', '    using SafeMath for uint;\n', '\n', '    address public targetToken;\n', '    address[] public stakeHolders;\n', '    uint256 public maxStakeHolders;\n', '    event InsufficientTokenBalance( address indexed _token, uint256 _time );\n', '    event TokensDistributed( address indexed _token, uint256 _total, uint256 _time );\n', '\n', '    constructor ( address _targetToken, uint256 _totalStakeHolders, address[] _stakeHolders) public Ownable() {\n', '        setTargetToken(_targetToken);\n', '        maxStakeHolders = _totalStakeHolders;\n', '        if (_stakeHolders.length > 0) {\n', '            for (uint256 count = 0; count < _stakeHolders.length && count < _totalStakeHolders; count++) {\n', '                if (_stakeHolders[count] != 0x0) {\n', '                    _setStakeHolder(_stakeHolders[count]);\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    function isDistributionDue (address _token) public view returns (bool) {\n', '        return getTokenBalance(_token) > 1;\n', '    }\n', '\n', '    function isDistributionDue () public view returns (bool) {\n', '        return getTokenBalance(targetToken) > 1;\n', '    }\n', '\n', '    function countStakeHolders () public view returns (uint256) {\n', '        return stakeHolders.length;\n', '    }\n', '\n', '    function getTokenBalance(address _token) public view returns (uint256) {\n', '        ERC20Basic token = ERC20Basic(_token);\n', '        return token.balanceOf(address(this));\n', '    }\n', '\n', '    function getPortion (uint256 _total) public view returns (uint256) {\n', '        return _total.div(stakeHolders.length);\n', '    }\n', '\n', '    function setTargetToken (address _targetToken) public onlyOwner returns (bool) {\n', '        if(_targetToken != 0x0 && targetToken == 0x0) {\n', '          targetToken = _targetToken;\n', '          return true;\n', '        }\n', '    }\n', '\n', '    function _setStakeHolder (address _stakeHolder) internal onlyOwner returns (bool) {\n', '        require(countStakeHolders() < maxStakeHolders, "Max StakeHolders set");\n', '        stakeHolders.push(_stakeHolder);\n', '        return true;\n', '    }\n', '\n', '    function _transfer (address _token, address _recipient, uint256 _value) internal {\n', '        ERC20Basic token = ERC20Basic(_token);\n', '        token.transfer(_recipient, _value);\n', '    }\n', '\n', '    function distribute (address _token) public returns (bool) {\n', '        uint256 balance = getTokenBalance(_token);\n', '        uint256 perStakeHolder = getPortion(balance);\n', '\n', '        if (balance < 1) {\n', '            emit InsufficientTokenBalance(_token, block.timestamp);\n', '            return false;\n', '        } else {\n', '            for (uint256 count = 0; count < stakeHolders.length; count++) {\n', '                _transfer(_token, stakeHolders[count], perStakeHolder);\n', '            }\n', '\n', '            uint256 newBalance = getTokenBalance(_token);\n', '            if (newBalance > 0 && getPortion(newBalance) == 0) {\n', '                _transfer(_token, owner, newBalance);\n', '            }\n', '\n', '            emit TokensDistributed(_token, balance, block.timestamp);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function () public {\n', '        distribute(targetToken);\n', '    }\n', '}\n', '\n', 'contract WeightedTokenDistributor is TokenDistributor {\n', '    using SafeMath for uint;\n', '\n', '    mapping( address => uint256) public stakeHoldersWeight;\n', '\n', '    constructor ( address _targetToken, uint256 _totalStakeHolders, address[] _stakeHolders, uint256[] _weights) public\n', '    TokenDistributor(_targetToken, _totalStakeHolders, stakeHolders)\n', '    {\n', '        if (_stakeHolders.length > 0) {\n', '            for (uint256 count = 0; count < _stakeHolders.length && count < _totalStakeHolders; count++) {\n', '                if (_stakeHolders[count] != 0x0) {\n', '                  _setStakeHolder( _stakeHolders[count], _weights[count] );\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    function getTotalWeight () public view returns (uint256 _total) {\n', '        for (uint256 count = 0; count < stakeHolders.length; count++) {\n', '            _total = _total.add(stakeHoldersWeight[stakeHolders[count]]);\n', '        }\n', '    }\n', '\n', '    function getPortion (uint256 _total, uint256 _totalWeight, address _stakeHolder) public view returns (uint256) {\n', '        uint256 weight = stakeHoldersWeight[_stakeHolder];\n', '        return (_total.mul(weight)).div(_totalWeight);\n', '    }\n', '\n', '    function getPortion (uint256 _total) public view returns (uint256) {\n', '        revert("Kindly indicate stakeHolder and totalWeight");\n', '    }\n', '\n', '    function _setStakeHolder (address _stakeHolder, uint256 _weight) internal onlyOwner returns (bool) {\n', '        stakeHoldersWeight[_stakeHolder] = _weight;\n', '        require(super._setStakeHolder(_stakeHolder));\n', '        return true;\n', '    }\n', '\n', '    function _setStakeHolder (address _stakeHolder) internal onlyOwner returns (bool) {\n', '        revert("Kindly set Weights for stakeHolder");\n', '    }\n', '\n', '    function distribute (address _token) public returns (bool) {\n', '        uint256 balance = getTokenBalance(_token);\n', '        uint256 totalWeight = getTotalWeight();\n', '\n', '        if (balance < 1) {\n', '            emit InsufficientTokenBalance(_token, block.timestamp);\n', '            return false;\n', '        } else {\n', '            for (uint256 count = 0; count < stakeHolders.length; count++) {\n', '                uint256 perStakeHolder = getPortion(balance, totalWeight, stakeHolders[count]);\n', '                _transfer(_token, stakeHolders[count], perStakeHolder);\n', '            }\n', '\n', '            uint256 newBalance = getTokenBalance(_token);\n', '            if (newBalance > 0) {\n', '                _transfer(_token, owner, newBalance);\n', '            }\n', '\n', '            emit TokensDistributed(_token, balance, block.timestamp);\n', '            return true;\n', '        }\n', '    }\n', '}']