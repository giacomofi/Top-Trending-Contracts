['/**\n', ' * Created on 2018-06-05 16:37\n', ' * @summary: Our NFT Minting Contract which inherits ERC721 capability from LSNFT\n', ' * @author: Fazri Zubair & Farhan Khwaja\n', ' */\n', 'pragma solidity ^0.4.23;\n', '\n', 'pragma solidity ^0.4.23;\n', '\n', '/* NFT Metadata Schema \n', '{\n', '    "title": "Asset Metadata",\n', '    "type": "object",\n', '    "properties": {\n', '        "name": {\n', '            "type": "string",\n', '            "description": "Identifies the asset to which this NFT represents",\n', '        },\n', '        "description": {\n', '            "type": "string",\n', '            "description": "Describes the asset to which this NFT represents",\n', '        },\n', '        "image": {\n', '            "type": "string",\n', '            "description": "A URI pointing to a resource with mime type image/* representing the asset to which this NFT represents. Consider making any images at a width between 320 and 1080 pixels and aspect ratio between 1.91:1 and 4:5 inclusive.",\n', '        }\n', '    }\n', '}\n', '*/\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // Gas optimization: this is cheaper than requiring &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = _a * _b;\n', '    require(c / _a == _b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = _a / _b;\n', '    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn&#39;t hold\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b <= _a);\n', '    uint256 c = _a - _b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    uint256 c = _a + _b;\n', '    require(c >= _a);\n', '\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library AddressUtils {\n', '\n', '    /**\n', '    * Returns whether the target address is a contract\n', '    * @dev This function will return false if invoked during the constructor of a contract,\n', '    *  as the code is not actually created until after the constructor finishes.\n', '    * @param addr address to check\n', '    * @return whether the target address is a contract\n', '    */\n', '    function isContract(address addr) internal view returns (bool) {\n', '        uint256 size;\n', '        // XXX Currently there is no better way to check if there is a contract in an address\n', '        // than to check the size of the code at that address.\n', '        // See https://ethereum.stackexchange.com/a/14016/36603\n', '        // for more details about how this works.\n', '        // TODO Check this again before the Serenity release, because all addresses will be\n', '        // contracts then.\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly { size := extcodesize(addr) }\n', '        return size > 0;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic interface\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Basic {\n', '    event Transfer(\n', '        address indexed _from,\n', '        address indexed _to,\n', '        uint256 indexed _tokenId\n', '    );\n', '    event Approval(\n', '        address indexed _owner,\n', '        address indexed _approved,\n', '        uint256 indexed _tokenId\n', '    );\n', '    event ApprovalForAll(\n', '        address indexed _owner,\n', '        address indexed _operator,\n', '        bool _approved\n', '    );\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 _balance);\n', '    function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '    function exists(uint256 _tokenId) public view returns (bool _exists);\n', '\n', '    function approve(address _to, uint256 _tokenId) public;\n', '    function getApproved(uint256 _tokenId)\n', '        public view returns (address _operator);\n', '\n', '    function setApprovalForAll(address _operator, bool _approved) public;\n', '    function isApprovedForAll(address _owner, address _operator)\n', '        public view returns (bool);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\n', '\n', '    function safeTransferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _tokenId,\n', '        bytes _data\n', '    )\n', '        public;\n', '}\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Enumerable is ERC721Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function tokenOfOwnerByIndex(\n', '        address _owner,\n', '        uint256 _index\n', '    )\n', '        public\n', '        view\n', '        returns (uint256 _tokenId);\n', '\n', '    function tokenByIndex(uint256 _index) public view returns (uint256);\n', '}\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Metadata is ERC721Basic {\n', '    function name() public view returns (string _name);\n', '    function symbol() public view returns (string _symbol);\n', '    function tokenURI(uint256 _tokenId) public view returns (string);\n', '}\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n', '}\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic implementation\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721BasicToken is ERC721Basic {\n', '    using SafeMath for uint256;\n', '    using AddressUtils for address;\n', '\n', '    // Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '    // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '    bytes4 public constant ERC721_RECEIVED = 0x150b7a02;\n', '\n', '    // Mapping from token ID to owner\n', '    mapping (uint256 => address) internal tokenOwner;\n', '\n', '    // Mapping from token ID to approved address\n', '    mapping (uint256 => address) internal tokenApprovals;\n', '\n', '    // Mapping from owner to number of owned token\n', '    mapping (address => uint256) internal ownedTokensCount;\n', '\n', '    // Mapping from owner to operator approvals\n', '    mapping (address => mapping (address => bool)) internal operatorApprovals;\n', '\n', '    /**\n', '    * @dev Guarantees msg.sender is owner of the given token\n', '    * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n', '    */\n', '    modifier onlyOwnerOf(uint256 _tokenId) {\n', '        require (ownerOf(_tokenId) == msg.sender);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n', '    * @param _tokenId uint256 ID of the token to validate\n', '    */\n', '    modifier canTransfer(uint256 _tokenId) {\n', '        require (isApprovedOrOwner(msg.sender, _tokenId));\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address\n', '    * @param _owner address to query the balance of\n', '    * @return uint256 representing the amount owned by the passed address\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        require (_owner != address(0));\n', '        return ownedTokensCount[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the owner of the specified token ID\n', '    * @param _tokenId uint256 ID of the token to query the owner of\n', '    * @return owner address currently marked as the owner of the given token ID\n', '    */\n', '    function ownerOf(uint256 _tokenId) public view returns (address) {\n', '        address owner = tokenOwner[_tokenId];\n', '        require (owner != address(0));\n', '        return owner;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns whether the specified token exists\n', '    * @param _tokenId uint256 ID of the token to query the existence of\n', '    * @return whether the token exists\n', '    */\n', '    function exists(uint256 _tokenId) public view returns (bool) {\n', '        address owner = tokenOwner[_tokenId];\n', '        return owner != address(0);\n', '    }\n', '\n', '    /**\n', '    * @dev Approves another address to transfer the given token ID\n', '    * @dev The zero address indicates there is no approved address.\n', '    * @dev There can only be one approved address per token at a given time.\n', '    * @dev Can only be called by the token owner or an approved operator.\n', '    * @param _to address to be approved for the given token ID\n', '    * @param _tokenId uint256 ID of the token to be approved\n', '    */\n', '    function approve(address _to, uint256 _tokenId) public {\n', '        address owner = ownerOf(_tokenId);\n', '        require (_to != owner);\n', '        require (msg.sender == owner || isApprovedForAll(owner, msg.sender));\n', '\n', '        tokenApprovals[_tokenId] = _to;\n', '        emit Approval(owner, _to, _tokenId);\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the approved address for a token ID, or zero if no address set\n', '    * @param _tokenId uint256 ID of the token to query the approval of\n', '    * @return address currently approved for the given token ID\n', '    */\n', '    function getApproved(uint256 _tokenId) public view returns (address) {\n', '        return tokenApprovals[_tokenId];\n', '    }\n', '\n', '    /**\n', '    * @dev Sets or unsets the approval of a given operator\n', '    * @dev An operator is allowed to transfer all tokens of the sender on their behalf\n', '    * @param _to operator address to set the approval\n', '    * @param _approved representing the status of the approval to be set\n', '    */\n', '    function setApprovalForAll(address _to, bool _approved) public {\n', '        require (_to != msg.sender);\n', '        operatorApprovals[msg.sender][_to] = _approved;\n', '        emit ApprovalForAll(msg.sender, _to, _approved);\n', '    }\n', '\n', '    /**\n', '    * @dev Tells whether an operator is approved by a given owner\n', '    * @param _owner owner address which you want to query the approval of\n', '    * @param _operator operator address which you want to query the approval of\n', '    * @return bool whether the given operator is approved by the given owner\n', '    */\n', '    function isApprovedForAll(\n', '        address _owner,\n', '        address _operator\n', '    )\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        return operatorApprovals[_owner][_operator];\n', '    }\n', '\n', '    /**\n', '    * @dev Transfers the ownership of a given token ID to another address\n', '    * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n', '    * @dev Requires the msg sender to be the owner, approved, or operator\n', '    * @param _from current owner of the token\n', '    * @param _to address to receive the ownership of the given token ID\n', '    * @param _tokenId uint256 ID of the token to be transferred\n', '    */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _tokenId\n', '    )\n', '        public\n', '        canTransfer(_tokenId)\n', '    {\n', '        require (_from != address(0));\n', '        require (_to != address(0));\n', '\n', '        clearApproval(_from, _tokenId);\n', '        removeTokenFrom(_from, _tokenId);\n', '        addTokenTo(_to, _tokenId);\n', '\n', '        emit Transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '    /**\n', '    * @dev Safely transfers the ownership of a given token ID to another address\n', '    * @dev If the target address is a contract, it must implement `onERC721Received`,\n', '    *  which is called upon a safe transfer, and return the magic value\n', '    *  `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '    *  the transfer is reverted.\n', '    * @dev Requires the msg sender to be the owner, approved, or operator\n', '    * @param _from current owner of the token\n', '    * @param _to address to receive the ownership of the given token ID\n', '    * @param _tokenId uint256 ID of the token to be transferred\n', '    */\n', '    function safeTransferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _tokenId\n', '    )\n', '        public\n', '        canTransfer(_tokenId)\n', '    {\n', '        // solium-disable-next-line arg-overflow\n', '        safeTransferFrom(_from, _to, _tokenId, "");\n', '    }\n', '\n', '    /**\n', '    * @dev Safely transfers the ownership of a given token ID to another address\n', '    * @dev If the target address is a contract, it must implement `onERC721Received`,\n', '    *  which is called upon a safe transfer, and return the magic value\n', '    *  `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '    *  the transfer is reverted.\n', '    * @dev Requires the msg sender to be the owner, approved, or operator\n', '    * @param _from current owner of the token\n', '    * @param _to address to receive the ownership of the given token ID\n', '    * @param _tokenId uint256 ID of the token to be transferred\n', '    * @param _data bytes data to send along with a safe transfer check\n', '    */\n', '    function safeTransferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _tokenId,\n', '        bytes _data\n', '    )\n', '        public\n', '        canTransfer(_tokenId)\n', '    {\n', '        transferFrom(_from, _to, _tokenId);\n', '        // solium-disable-next-line arg-overflow\n', '        require (checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n', '    }\n', '\n', '    /**\n', '    * @dev Returns whether the given spender can transfer a given token ID\n', '    * @param _spender address of the spender to query\n', '    * @param _tokenId uint256 ID of the token to be transferred\n', '    * @return bool whether the msg.sender is approved for the given token ID,\n', '    *  is an operator of the owner, or is the owner of the token\n', '    */\n', '    function isApprovedOrOwner(\n', '        address _spender,\n', '        uint256 _tokenId\n', '    )\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        address owner = ownerOf(_tokenId);\n', '        // Disable solium check because of\n', '        // https://github.com/duaraghav8/Solium/issues/175\n', '        // solium-disable-next-line operator-whitespace\n', '        return (\n', '        _spender == owner ||\n', '        getApproved(_tokenId) == _spender ||\n', '        isApprovedForAll(owner, _spender)\n', '        );\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to mint a new token\n', '    * @dev Reverts if the given token ID already exists\n', '    * @param _to The address that will own the minted token\n', '    * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '    */\n', '    function _mint(address _to, uint256 _tokenId) internal {\n', '        require (_to != address(0));\n', '        addTokenTo(_to, _tokenId);\n', '        emit Transfer(address(0), _to, _tokenId);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to burn a specific token\n', '    * @dev Reverts if the token does not exist\n', '    * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '    */\n', '    function _burn(address _owner, uint256 _tokenId) internal {\n', '        clearApproval(_owner, _tokenId);\n', '        removeTokenFrom(_owner, _tokenId);\n', '        emit Transfer(_owner, address(0), _tokenId);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to clear current approval of a given token ID\n', '    * @dev Reverts if the given address is not indeed the owner of the token\n', '    * @param _owner owner of the token\n', '    * @param _tokenId uint256 ID of the token to be transferred\n', '    */\n', '    function clearApproval(address _owner, uint256 _tokenId) internal {\n', '        require (ownerOf(_tokenId) == _owner);\n', '        if (tokenApprovals[_tokenId] != address(0)) {\n', '            tokenApprovals[_tokenId] = address(0);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to add a token ID to the list of a given address\n', '    * @param _to address representing the new owner of the given token ID\n', '    * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '    */\n', '    function addTokenTo(address _to, uint256 _tokenId) internal {\n', '        require (tokenOwner[_tokenId] == address(0));\n', '        tokenOwner[_tokenId] = _to;\n', '        ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to remove a token ID from the list of a given address\n', '    * @param _from address representing the previous owner of the given token ID\n', '    * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '    */\n', '    function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '        require (ownerOf(_tokenId) == _from);\n', '        ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n', '        tokenOwner[_tokenId] = address(0);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to invoke `onERC721Received` on a target address\n', '    * @dev The call is not executed if the target address is not a contract\n', '    * @param _from address representing the previous owner of the given token ID\n', '    * @param _to target address that will receive the tokens\n', '    * @param _tokenId uint256 ID of the token to be transferred\n', '    * @param _data bytes optional data to send along with the call\n', '    * @return whether the call correctly returned the expected magic value\n', '    */\n', '    function checkAndCallSafeTransfer(\n', '        address _from,\n', '        address _to,\n', '        uint256 _tokenId,\n', '        bytes _data\n', '    )\n', '        internal\n', '        returns (bool)\n', '    {\n', '        if (!_to.isContract()) {\n', '            return true;\n', '        }\n', '        bytes4 retval = ERC721Receiver(_to).onERC721Received(\n', '            msg.sender, _from, _tokenId, _data);\n', '        return (retval == ERC721_RECEIVED);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' *  from ERC721 asset contracts.\n', ' */\n', 'contract ERC721Receiver {\n', '    /**\n', '    * @dev Magic value to be returned upon successful reception of an NFT\n', '    *  Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`,\n', '    *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '    */\n', '    bytes4 public constant ERC721_RECEIVED = 0x150b7a02;\n', '\n', '    /**\n', '    * @notice Handle the receipt of an NFT\n', '    * @dev The ERC721 smart contract calls this function on the recipient\n', '    *  after a `safetransfer`. This function MAY throw to revert and reject the\n', '    *  transfer. This function MUST use 50,000 gas or less. Return of other\n', '    *  than the magic value MUST result in the transaction being reverted.\n', '    *  Note: the contract address is always the message sender.\n', '    * @param _from The sending address\n', '    * @param _tokenId The NFT identifier which is being transfered\n', '    * @param _data Additional data with no specified format\n', '    * @return `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '    */\n', '    function onERC721Received(\n', '        address _operator,\n', '        address _from,\n', '        uint256 _tokenId,\n', '        bytes _data\n', '    )\n', '        public\n', '        returns(bytes4);\n', '}\n', '\n', 'contract ERC721Holder is ERC721Receiver {\n', '    function onERC721Received(\n', '        address,\n', '        address,\n', '        uint256,\n', '        bytes\n', '    ) \n', '        public\n', '        returns(bytes4)\n', '        {\n', '            return ERC721_RECEIVED;\n', '        }\n', '}\n', '\n', '/**\n', ' * @title Full ERC721 Token\n', ' * This implementation includes all the required and some optional functionality of the ERC721 standard\n', ' * Moreover, it includes approve all functionality using operator terminology\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Token is ERC721, ERC721BasicToken {\n', '\n', '    // Token name\n', '    string internal name_;\n', '\n', '    // Token symbol\n', '    string internal symbol_;\n', '\n', '    // Mapping from owner to list of owned token IDs\n', '    mapping(address => uint256[]) internal ownedTokens;\n', '\n', '    // Mapping from token ID to index of the owner tokens list\n', '    mapping(uint256 => uint256) internal ownedTokensIndex;\n', '\n', '    // Array with all token ids, used for enumeration\n', '    uint256[] internal allTokens;\n', '\n', '    // Mapping from token id to position in the allTokens array\n', '    mapping(uint256 => uint256) internal allTokensIndex;\n', '\n', '    // Base Server Address for Token MetaData URI\n', '    string internal tokenURIBase;\n', '\n', '    /**\n', '    * @dev Returns an URI for a given token ID\n', '    * @dev Throws if the token ID does not exist. May return an empty string.\n', '    * @notice The user/developper needs to add the tokenID, in the end of URL, to \n', '    * use the URI and get all details. Ex. www.<apiURL>.com/token/<tokenID>\n', '    * @param _tokenId uint256 ID of the token to query\n', '    */\n', '    function tokenURI(uint256 _tokenId) public view returns (string) {\n', '        require (exists(_tokenId));\n', '        return tokenURIBase;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the token ID at a given index of the tokens list of the requested owner\n', '    * @param _owner address owning the tokens list to be accessed\n', '    * @param _index uint256 representing the index to be accessed of the requested tokens list\n', '    * @return uint256 token ID at the given index of the tokens list owned by the requested address\n', '    */\n', '    function tokenOfOwnerByIndex(\n', '        address _owner,\n', '        uint256 _index\n', '    )\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        require (_index < balanceOf(_owner));\n', '        return ownedTokens[_owner][_index];\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the total amount of tokens stored by the contract\n', '    * @return uint256 representing the total amount of tokens\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return allTokens.length;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the token ID at a given index of all the tokens in this contract\n', '    * @dev Reverts if the index is greater or equal to the total number of tokens\n', '    * @param _index uint256 representing the index to be accessed of the tokens list\n', '    * @return uint256 token ID at the given index of the tokens list\n', '    */\n', '    function tokenByIndex(uint256 _index) public view returns (uint256) {\n', '        require (_index < totalSupply());\n', '        return allTokens[_index];\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Internal function to set the token URI for a given token\n', '    * @dev Reverts if the token ID does not exist\n', '    * @param _uri string URI to assign\n', '    */\n', '    function _setTokenURIBase(string _uri) internal {\n', '        tokenURIBase = _uri;\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to add a token ID to the list of a given address\n', '    * @param _to address representing the new owner of the given token ID\n', '    * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '    */\n', '    function addTokenTo(address _to, uint256 _tokenId) internal {\n', '        super.addTokenTo(_to, _tokenId);\n', '        uint256 length = ownedTokens[_to].length;\n', '        ownedTokens[_to].push(_tokenId);\n', '        ownedTokensIndex[_tokenId] = length;\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to remove a token ID from the list of a given address\n', '    * @param _from address representing the previous owner of the given token ID\n', '    * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '    */\n', '    function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '        super.removeTokenFrom(_from, _tokenId);\n', '\n', '        // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n', '        // then delete the last slot.\n', '        uint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '        uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n', '        uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '        ownedTokens[_from][tokenIndex] = lastToken;\n', '        // This also deletes the contents at the last position of the array\n', '        ownedTokens[_from].length--;\n', '\n', '        // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '        // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n', '        // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '        ownedTokensIndex[_tokenId] = 0;\n', '        ownedTokensIndex[lastToken] = tokenIndex;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the token name\n', '    * @return string representing the token name\n', '    */\n', '    function name() public view returns (string) {\n', '        return name_;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the token symbol\n', '    * @return string representing the token symbol\n', '    */\n', '    function symbol() public view returns (string) {\n', '        return symbol_;\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to mint a new token\n', '    * @dev Reverts if the given token ID already exists\n', '    * @param _to address the beneficiary that will own the minted token\n', '    * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '    */\n', '    function _mint(address _to, uint256 _tokenId) internal {\n', '        super._mint(_to, _tokenId);\n', '\n', '        allTokensIndex[_tokenId] = allTokens.length;\n', '        allTokens.push(_tokenId);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to burn a specific token\n', '    * @dev Reverts if the token does not exist\n', '    * @param _owner owner of the token to burn\n', '    * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '    */\n', '    function _burn(address _owner, uint256 _tokenId) internal {\n', '        super._burn(_owner, _tokenId);\n', '\n', '        // Reorg all tokens array\n', '        uint256 tokenIndex = allTokensIndex[_tokenId];\n', '        uint256 lastTokenIndex = allTokens.length.sub(1);\n', '        uint256 lastToken = allTokens[lastTokenIndex];\n', '\n', '        allTokens[tokenIndex] = lastToken;\n', '        allTokens[lastTokenIndex] = 0;\n', '\n', '        allTokens.length--;\n', '        allTokensIndex[_tokenId] = 0;\n', '        allTokensIndex[lastToken] = tokenIndex;\n', '    }\n', '\n', '    bytes4 constant InterfaceSignature_ERC165 = 0x01ffc9a7;\n', '    /*\n', '    bytes4(keccak256(&#39;supportsInterface(bytes4)&#39;));\n', '    */\n', '\n', '    bytes4 constant InterfaceSignature_ERC721Enumerable = 0x780e9d63;\n', '    /*\n', '    bytes4(keccak256(&#39;totalSupply()&#39;)) ^\n', '    bytes4(keccak256(&#39;tokenOfOwnerByIndex(address,uint256)&#39;)) ^\n', '    bytes4(keccak256(&#39;tokenByIndex(uint256)&#39;));\n', '    */\n', '\n', '    bytes4 constant InterfaceSignature_ERC721Metadata = 0x5b5e139f;\n', '    /*\n', '    bytes4(keccak256(&#39;name()&#39;)) ^\n', '    bytes4(keccak256(&#39;symbol()&#39;)) ^\n', '    bytes4(keccak256(&#39;tokenURI(uint256)&#39;));\n', '    */\n', '\n', '    bytes4 constant InterfaceSignature_ERC721 = 0x80ac58cd;\n', '    /*\n', '    bytes4(keccak256(&#39;balanceOf(address)&#39;)) ^\n', '    bytes4(keccak256(&#39;ownerOf(uint256)&#39;)) ^\n', '    bytes4(keccak256(&#39;approve(address,uint256)&#39;)) ^\n', '    bytes4(keccak256(&#39;getApproved(uint256)&#39;)) ^\n', '    bytes4(keccak256(&#39;setApprovalForAll(address,bool)&#39;)) ^\n', '    bytes4(keccak256(&#39;isApprovedForAll(address,address)&#39;)) ^\n', '    bytes4(keccak256(&#39;transferFrom(address,address,uint256)&#39;)) ^\n', '    bytes4(keccak256(&#39;safeTransferFrom(address,address,uint256)&#39;)) ^\n', '    bytes4(keccak256(&#39;safeTransferFrom(address,address,uint256,bytes)&#39;));\n', '    */\n', '\n', '    bytes4 public constant InterfaceSignature_ERC721Optional =- 0x4f558e79;\n', '    /*\n', '    bytes4(keccak256(&#39;exists(uint256)&#39;));\n', '    */\n', '\n', '    /**\n', '    * @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\n', '    * @dev Returns true for any standardized interfaces implemented by this contract.\n', '    * @param _interfaceID bytes4 the interface to check for\n', '    * @return true for any standardized interfaces implemented by this contract.\n', '    */\n', '    function supportsInterface(bytes4 _interfaceID) external view returns (bool)\n', '    {\n', '        return ((_interfaceID == InterfaceSignature_ERC165)\n', '        || (_interfaceID == InterfaceSignature_ERC721)\n', '        || (_interfaceID == InterfaceSignature_ERC721Enumerable)\n', '        || (_interfaceID == InterfaceSignature_ERC721Metadata));\n', '    }\n', '\n', '    function implementsERC721() public pure returns (bool) {\n', '        return true;\n', '    }\n', '\n', '}\n', '/* Lucid Sight, Inc. ERC-721 Collectibles. \n', ' * @title LSNFT - Lucid Sight, Inc. Non-Fungible Token\n', ' * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\n', ' */\n', 'contract LSNFT is ERC721Token {\n', '  \n', '  /*** EVENTS ***/\n', '\n', '  /// @dev The Created event is fired whenever a new collectible comes into existence.\n', '  event Created(address owner, uint256 tokenId);\n', '  \n', '  /*** DATATYPES ***/\n', '  \n', '  struct NFT {\n', '    // The sequence of potential attributes a Collectible has and can provide in creation events. Used in Creation logic to spwan new Cryptos\n', '    uint256 attributes;\n', '\n', '    // Current Game Card identifier\n', '    uint256 currentGameCardId;\n', '\n', '    // MLB Game Identifier (if asset generated as a game reward)\n', '    uint256 mlbGameId;\n', '\n', '    // player orverride identifier\n', '    uint256 playerOverrideId;\n', '\n', '    // official MLB Player ID\n', '    uint256 mlbPlayerId;\n', '\n', '    // earnedBy : In some instances we may want to retroactively write which MLB player triggered\n', '    // the event that created a Legendary Trophy. This optional field should be able to be written\n', '    // to after generation if we determine an event was newsworthy enough\n', '    uint256 earnedBy;\n', '    \n', '    // asset metadata\n', '    uint256 assetDetails;\n', '    \n', '    // Attach/Detach Flag\n', '    uint256 isAttached;\n', '  }\n', '\n', '  NFT[] allNFTs;\n', '\n', '  function isLSNFT() public view returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  /// For creating NFT\n', '  function _createNFT (\n', '    uint256[5] _nftData,\n', '    address _owner,\n', '    uint256 _isAttached)\n', '    internal\n', '    returns(uint256) {\n', '\n', '    NFT memory _lsnftObj = NFT({\n', '        attributes : _nftData[1],\n', '        currentGameCardId : 0,\n', '        mlbGameId : _nftData[2],\n', '        playerOverrideId : _nftData[3],\n', '        assetDetails: _nftData[0],\n', '        isAttached: _isAttached,\n', '        mlbPlayerId: _nftData[4],\n', '        earnedBy: 0\n', '    });\n', '\n', '    uint256 newLSNFTId = allNFTs.push(_lsnftObj) - 1;\n', '\n', '    _mint(_owner, newLSNFTId);\n', '    \n', '    // Created event\n', '    emit Created(_owner, newLSNFTId);\n', '\n', '    return newLSNFTId;\n', '  }\n', '\n', '  /// @dev Gets attributes of NFT  \n', '  function _getAttributesOfToken(uint256 _tokenId) internal returns(NFT) {\n', '    NFT storage lsnftObj = allNFTs[_tokenId];  \n', '    return lsnftObj;\n', '  }\n', '\n', '  function _approveForSale(address _owner, address _to, uint256 _tokenId) internal {\n', '    address owner = ownerOf(_tokenId);\n', '    require (_to != owner);\n', '    require (_owner == owner || isApprovedForAll(owner, _owner));\n', '\n', '    if (getApproved(_tokenId) != address(0) || _to != address(0)) {\n', '        tokenApprovals[_tokenId] = _to;\n', '        emit Approval(_owner, _to, _tokenId);\n', '    }\n', '  }\n', '}\n', '\n', '/** Controls state and access rights for contract functions\n', ' * @title Operational Control\n', ' * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\n', ' * Inspired and adapted from contract created by OpenZeppelin \n', ' * Ref: https://github.com/OpenZeppelin/zeppelin-solidity/\n', ' */\n', 'contract OperationalControl {\n', '    /// Facilitates access & control for the game.\n', '    /// Roles:\n', '    ///  -The Managers (Primary/Secondary): Has universal control of all elements (No ability to withdraw)\n', '    ///  -The Banker: The Bank can withdraw funds and adjust fees / prices.\n', '    ///  -otherManagers: Contracts that need access to functions for gameplay\n', '\n', '    /// @dev Emited when contract is upgraded\n', '    event ContractUpgrade(address newContract);\n', '\n', '    /// @dev The addresses of the accounts (or contracts) that can execute actions within each roles.\n', '    address public managerPrimary;\n', '    address public managerSecondary;\n', '    address public bankManager;\n', '\n', '    // Contracts that require access for gameplay\n', '    mapping(address => uint8) public otherManagers;\n', '\n', '    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n', '    bool public paused = false;\n', '\n', '    // @dev Keeps track whether the contract erroredOut. When that is true, most actions are blocked & refund can be claimed\n', '    bool public error = false;\n', '\n', '    /**\n', '     * @dev Operation modifiers for limiting access only to Managers\n', '     */\n', '    modifier onlyManager() {\n', '        require (msg.sender == managerPrimary || msg.sender == managerSecondary);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Operation modifiers for limiting access to only Banker\n', '     */\n', '    modifier onlyBanker() {\n', '        require (msg.sender == bankManager);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Operation modifiers for any Operators\n', '     */\n', '    modifier anyOperator() {\n', '        require (\n', '            msg.sender == managerPrimary ||\n', '            msg.sender == managerSecondary ||\n', '            msg.sender == bankManager ||\n', '            otherManagers[msg.sender] == 1\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev        Operation modifier for any Other Manager\n', '     */\n', '    modifier onlyOtherManagers() {\n', '        require (otherManagers[msg.sender] == 1);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Assigns a new address to act as the Primary Manager.\n', '     * @param _newGM    New primary manager address\n', '     */\n', '    function setPrimaryManager(address _newGM) external onlyManager {\n', '        require (_newGM != address(0));\n', '\n', '        managerPrimary = _newGM;\n', '    }\n', '\n', '    /**\n', '     * @dev Assigns a new address to act as the Secondary Manager.\n', '     * @param _newGM    New Secondary Manager Address\n', '     */\n', '    function setSecondaryManager(address _newGM) external onlyManager {\n', '        require (_newGM != address(0));\n', '\n', '        managerSecondary = _newGM;\n', '    }\n', '\n', '    /**\n', '     * @dev Assigns a new address to act as the Banker.\n', '     * @param _newBK    New Banker Address\n', '     */\n', '    function setBanker(address _newBK) external onlyManager {\n', '        require (_newBK != address(0));\n', '\n', '        bankManager = _newBK;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the Other Manager. (State = 1 is active, 0 is disabled)\n', '    function setOtherManager(address _newOp, uint8 _state) external onlyManager {\n', '        require (_newOp != address(0));\n', '\n', '        otherManagers[_newOp] = _state;\n', '    }\n', '\n', '    /*** Pausable functionality adapted from OpenZeppelin ***/\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS NOT paused\n', '    modifier whenNotPaused() {\n', '        require (!paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS paused\n', '    modifier whenPaused {\n', '        require (paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract has Error\n', '    modifier whenError {\n', '        require (error);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Called by any Operator role to pause the contract.\n', '     * Used only if a bug or exploit is discovered (Here to limit losses / damage)\n', '     */\n', '    function pause() external onlyManager whenNotPaused {\n', '        paused = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Unpauses the smart contract. Can only be called by the Game Master\n', '     */\n', '    function unpause() public onlyManager whenPaused {\n', '        // can&#39;t unpause if contract was upgraded\n', '        paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Errors out the contract thus mkaing the contract non-functionable\n', '     */\n', '    function hasError() public onlyManager whenPaused {\n', '        error = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Removes the Error Hold from the contract and resumes it for working\n', '     */\n', '    function noError() public onlyManager whenPaused {\n', '        error = false;\n', '    }\n', '}\n', '\n', '/** Base contract for DodgersNFT Collectibles. Holds all commons, events and base variables.\n', ' * @title Lucid Sight MLB NFT 2018\n', ' * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\n', ' */\n', 'contract CollectibleBase is LSNFT {\n', '\n', '    /*** EVENTS ***/\n', '\n', '    /// @dev Event emitted when an attribute of the player is updated\n', '    event AssetUpdated(uint256 tokenId);\n', '\n', '    /*** STORAGE ***/\n', '\n', '    /// @dev A mapping of Team Id to Team Sequence Number to Collectible\n', '    mapping (uint256 => mapping (uint32 => uint256) ) public nftTeamIdToSequenceIdToCollectible;\n', '\n', '    /// @dev A mapping from Team IDs to the Sequqence Number .\n', '    mapping (uint256 => uint32) public nftTeamIndexToCollectibleCount;\n', '\n', '    /// @dev Array to hold details on attachment for each LS NFT Collectible\n', '    mapping(uint256 => uint256[]) public nftCollectibleAttachments;\n', '\n', '    /// @dev Mapping to control the asset generation per season.\n', '    mapping(uint256 => uint256) public generationSeasonController;\n', '\n', '    /// @dev Mapping for generation Season Dict.\n', '    mapping(uint256 => uint256) public generationSeasonDict;\n', '\n', '    /// @dev internal function to update player override id\n', '    function _updatePlayerOverrideId(uint256 _tokenId, uint256 _newPlayerOverrideId) internal {\n', '\n', '        // Get Token Obj\n', '        NFT storage lsnftObj = allNFTs[_tokenId];\n', '        lsnftObj.playerOverrideId = _newPlayerOverrideId;\n', '\n', '        // Update Token Data with new updated attributes\n', '        allNFTs[_tokenId] = lsnftObj;\n', '\n', '        emit AssetUpdated(_tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev An internal method that helps in generation of new NFT Collectibles\n', '     * @param _teamId           teamId of the asset/token/collectible\n', '     * @param _attributes       attributes of asset/token/collectible\n', '     * @param _owner            owner of asset/token/collectible\n', '     * @param _isAttached       State of the asset (attached or dettached)\n', '     * @param _nftData          Array of data required for creation\n', '     */\n', '    function _createNFTCollectible(\n', '        uint8 _teamId,\n', '        uint256 _attributes,\n', '        address _owner,\n', '        uint256 _isAttached,\n', '        uint256[5] _nftData\n', '    )\n', '        internal\n', '        returns (uint256)\n', '    {\n', '        uint256 generationSeason = (_attributes % 1000000).div(1000);\n', '        require (generationSeasonController[generationSeason] == 1);\n', '\n', '        uint32 _sequenceId = getSequenceId(_teamId);\n', '\n', '        uint256 newNFTCryptoId = _createNFT(_nftData, _owner, _isAttached);\n', '        \n', '        nftTeamIdToSequenceIdToCollectible[_teamId][_sequenceId] = newNFTCryptoId;\n', '        nftTeamIndexToCollectibleCount[_teamId] = _sequenceId;\n', '\n', '        return newNFTCryptoId;\n', '    }\n', '    \n', '    function getSequenceId(uint256 _teamId) internal returns (uint32) {\n', '        return (nftTeamIndexToCollectibleCount[_teamId] + 1);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function, Helps in updating the Creation Stop Time\n', '     * @param _season    Season UINT Code\n', '     * @param _value    0 - Not allowed, 1 - Allowed\n', '     */\n', '    function _updateGenerationSeasonFlag(uint256 _season, uint8 _value) internal {\n', '        generationSeasonController[_season] = _value;\n', '    }\n', '\n', '    /** @param _owner The owner whose ships tokens we are interested in.\n', '      * @dev This method MUST NEVER be called by smart contract code. First, it&#39;s fairly\n', '      *  expensive (it walks the entire Collectibles owners array looking for NFT belonging to owner)\n', '    */      \n', '    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\n', '        uint256 tokenCount = balanceOf(_owner);\n', '\n', '        if (tokenCount == 0) {\n', '            // Return an empty array\n', '            return new uint256[](0);\n', '        } else {\n', '            uint256[] memory result = new uint256[](tokenCount);\n', '            uint256 totalItems = balanceOf(_owner);\n', '            uint256 resultIndex = 0;\n', '\n', '            // We count on the fact that all Collectible have IDs starting at 0 and increasing\n', '            // sequentially up to the total count.\n', '            uint256 _assetId;\n', '\n', '            for (_assetId = 0; _assetId < totalItems; _assetId++) {\n', '                result[resultIndex] = tokenOfOwnerByIndex(_owner,_assetId);\n', '                resultIndex++;\n', '            }\n', '\n', '            return result;\n', '        }\n', '    }\n', '\n', '    /// @dev internal function to update MLB player id\n', '    function _updateMLBPlayerId(uint256 _tokenId, uint256 _newMLBPlayerId) internal {\n', '\n', '        // Get Token Obj\n', '        NFT storage lsnftObj = allNFTs[_tokenId];\n', '        \n', '        lsnftObj.mlbPlayerId = _newMLBPlayerId;\n', '\n', '        // Update Token Data with new updated attributes\n', '        allNFTs[_tokenId] = lsnftObj;\n', '\n', '        emit AssetUpdated(_tokenId);\n', '    }\n', '\n', '    /// @dev internal function to update asset earnedBy value for an asset/token\n', '    function _updateEarnedBy(uint256 _tokenId, uint256 _earnedBy) internal {\n', '\n', '        // Get Token Obj\n', '        NFT storage lsnftObj = allNFTs[_tokenId];\n', '        \n', '        lsnftObj.earnedBy = _earnedBy;\n', '\n', '        // Update Token Data with new updated attributes\n', '        allNFTs[_tokenId] = lsnftObj;\n', '\n', '        emit AssetUpdated(_tokenId);\n', '    }\n', '}\n', '\n', '/* Handles creating new Collectibles for promo and seed.\n', ' * @title CollectibleMinting Minting\n', ' * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\n', ' * Inspired and adapted from KittyCore.sol created by Axiom Zen\n', ' * Ref: ETH Contract - 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\n', ' */\n', 'contract CollectibleMinting is CollectibleBase, OperationalControl {\n', '\n', '    uint256 public rewardsRedeemed = 0;\n', '\n', '    /// @dev Counts the number of promo collectibles that can be made per-team\n', '    uint256[31]  public promoCreatedCount;\n', '    \n', '    /// @dev Counts the number of seed collectibles that can be made in total\n', '    uint256 public seedCreatedCount;\n', '\n', '    /// @dev Bool to toggle batch support\n', '    bool public isBatchSupported = true;\n', '    \n', '    /// @dev A mapping of contracts that can trigger functions\n', '    mapping (address => bool) public contractsApprovedList;\n', '    \n', '    /**\n', '     * @dev        Helps to toggle batch supported flag\n', '     * @param      _flag  The flag\n', '     */\n', '    function updateBatchSupport(bool _flag) public onlyManager {\n', '        isBatchSupported = _flag;\n', '    }\n', '\n', '    modifier canCreate() { \n', '        require (contractsApprovedList[msg.sender] || \n', '            msg.sender == managerPrimary ||\n', '            msg.sender == managerSecondary); \n', '        _; \n', '    }\n', '    \n', '    /**\n', '     * @dev Add an address to the Approved List\n', '     * @param _newAddress   The new address to be approved for interaction with the contract\n', '     */\n', '    function addToApproveList(address _newAddress) public onlyManager {\n', '        \n', '        require (!contractsApprovedList[_newAddress]);\n', '        contractsApprovedList[_newAddress] = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Remove an address from Approved List\n', '     * @param _newAddress   The new address to be approved for interaction with the contract\n', '     */\n', '    function removeFromApproveList(address _newAddress) public onlyManager {\n', '        require (contractsApprovedList[_newAddress]);\n', '        delete contractsApprovedList[_newAddress];\n', '    }\n', '\n', '    \n', '    /**\n', '     * @dev Generates promo collectibles. Only callable by Game Master, with isAttached as 0.\n', '     * @notice The generation of an asset if limited via the generationSeasonController\n', '     * @param _teamId           teamId of the asset/token/collectible\n', '     * @param _posId            position of the asset/token/collectible\n', '     * @param _attributes       attributes of asset/token/collectible\n', '     * @param _owner            owner of asset/token/collectible\n', '     * @param _gameId          mlb game Identifier\n', '     * @param _playerOverrideId player override identifier\n', '     * @param _mlbPlayerId      official mlb player identifier\n', '     */\n', '    function createPromoCollectible(\n', '        uint8 _teamId,\n', '        uint8 _posId,\n', '        uint256 _attributes,\n', '        address _owner,\n', '        uint256 _gameId,\n', '        uint256 _playerOverrideId,\n', '        uint256 _mlbPlayerId)\n', '        external\n', '        canCreate\n', '        whenNotPaused\n', '        returns (uint256)\n', '        {\n', '\n', '        address nftOwner = _owner;\n', '        if (nftOwner == address(0)) {\n', '             nftOwner = managerPrimary;\n', '        }\n', '\n', '        if(allNFTs.length > 0) {\n', '            promoCreatedCount[_teamId]++;\n', '        }\n', '        \n', '        uint32 _sequenceId = getSequenceId(_teamId);\n', '        \n', '        uint256 assetDetails = uint256(uint64(now));\n', '        assetDetails |= uint256(_sequenceId)<<64;\n', '        assetDetails |= uint256(_teamId)<<96;\n', '        assetDetails |= uint256(_posId)<<104;\n', '\n', '        uint256[5] memory _nftData = [assetDetails, _attributes, _gameId, _playerOverrideId, _mlbPlayerId];\n', '        \n', '        return _createNFTCollectible(_teamId, _attributes, nftOwner, 0, _nftData);\n', '    }\n', '\n', '    /**\n', '     * @dev Generaes a new single seed Collectible, with isAttached as 0.\n', '     * @notice Helps in creating seed collectible.The generation of an asset if limited via the generationSeasonController\n', '     * @param _teamId           teamId of the asset/token/collectible\n', '     * @param _posId            position of the asset/token/collectible\n', '     * @param _attributes       attributes of asset/token/collectible\n', '     * @param _owner            owner of asset/token/collectible\n', '     * @param _gameId          mlb game Identifier\n', '     * @param _playerOverrideId player override identifier\n', '     * @param _mlbPlayerId      official mlb player identifier\n', '     */\n', '    function createSeedCollectible(\n', '        uint8 _teamId,\n', '        uint8 _posId,\n', '        uint256 _attributes,\n', '        address _owner,\n', '        uint256 _gameId,\n', '        uint256 _playerOverrideId,\n', '        uint256 _mlbPlayerId)\n', '        external\n', '        canCreate\n', '        whenNotPaused\n', '        returns (uint256) {\n', '\n', '        address nftOwner = _owner;\n', '        \n', '        if (nftOwner == address(0)) {\n', '             nftOwner = managerPrimary;\n', '        }\n', '        \n', '        seedCreatedCount++;\n', '        uint32 _sequenceId = getSequenceId(_teamId);\n', '        \n', '        uint256 assetDetails = uint256(uint64(now));\n', '        assetDetails |= uint256(_sequenceId)<<64;\n', '        assetDetails |= uint256(_teamId)<<96;\n', '        assetDetails |= uint256(_posId)<<104;\n', '\n', '        uint256[5] memory _nftData = [assetDetails, _attributes, _gameId, _playerOverrideId, _mlbPlayerId];\n', '        \n', '        return _createNFTCollectible(_teamId, _attributes, nftOwner, 0, _nftData);\n', '    }\n', '\n', '    /**\n', '     * @dev Generate new Reward Collectible and transfer it to the owner, with isAttached as 0.\n', '     * @notice Helps in redeeming the Rewards using our Oracle. Creates & transfers the asset to the redeemer (_owner)\n', '     * The generation of an asset if limited via the generationSeasonController\n', '     * @param _teamId           teamId of the asset/token/collectible\n', '     * @param _posId            position of the asset/token/collectible\n', '     * @param _attributes       attributes of asset/token/collectible\n', '     * @param _owner            owner (redeemer) of asset/token/collectible\n', '     * @param _gameId           mlb game Identifier\n', '     * @param _playerOverrideId player override identifier\n', '     * @param _mlbPlayerId      official mlb player identifier\n', '     */\n', '    function createRewardCollectible (\n', '        uint8 _teamId,\n', '        uint8 _posId,\n', '        uint256 _attributes,\n', '        address _owner,\n', '        uint256 _gameId,\n', '        uint256 _playerOverrideId,\n', '        uint256 _mlbPlayerId)\n', '        external\n', '        canCreate\n', '        whenNotPaused\n', '        returns (uint256) {\n', '\n', '        address nftOwner = _owner;\n', '        \n', '        if (nftOwner == address(0)) {\n', '             nftOwner = managerPrimary;\n', '        }\n', '        \n', '        rewardsRedeemed++;\n', '        uint32 _sequenceId = getSequenceId(_teamId);\n', '        \n', '        uint256 assetDetails = uint256(uint64(now));\n', '        assetDetails |= uint256(_sequenceId)<<64;\n', '        assetDetails |= uint256(_teamId)<<96;\n', '        assetDetails |= uint256(_posId)<<104;\n', '\n', '        uint256[5] memory _nftData = [assetDetails, _attributes, _gameId, _playerOverrideId, _mlbPlayerId];\n', '        \n', '        return _createNFTCollectible(_teamId, _attributes, nftOwner, 0, _nftData);\n', '    }\n', '\n', '    /**\n', '     * @dev Generate new ETH Card Collectible, with isAttached as 2.\n', '     * @notice Helps to generate Collectibles/Tokens/Asset and transfer to ETH Cards,\n', '     * which can be redeemed using our web-app.The generation of an asset if limited via the generationSeasonController\n', '     * @param _teamId           teamId of the asset/token/collectible\n', '     * @param _posId            position of the asset/token/collectible\n', '     * @param _attributes       attributes of asset/token/collectible\n', '     * @param _owner            owner of asset/token/collectible\n', '     * @param _gameId           mlb game Identifier\n', '     * @param _playerOverrideId player override identifier\n', '     * @param _mlbPlayerId      official mlb player identifier\n', '     */\n', '    function createETHCardCollectible (\n', '        uint8 _teamId,\n', '        uint8 _posId,\n', '        uint256 _attributes,\n', '        address _owner,\n', '        uint256 _gameId,\n', '        uint256 _playerOverrideId,\n', '        uint256 _mlbPlayerId)\n', '        external\n', '        canCreate\n', '        whenNotPaused\n', '        returns (uint256) {\n', '\n', '        address nftOwner = _owner;\n', '        \n', '        if (nftOwner == address(0)) {\n', '             nftOwner = managerPrimary;\n', '        }\n', '        \n', '        rewardsRedeemed++;\n', '        uint32 _sequenceId = getSequenceId(_teamId);\n', '        \n', '        uint256 assetDetails = uint256(uint64(now));\n', '        assetDetails |= uint256(_sequenceId)<<64;\n', '        assetDetails |= uint256(_teamId)<<96;\n', '        assetDetails |= uint256(_posId)<<104;\n', '\n', '        uint256[5] memory _nftData = [assetDetails, _attributes, _gameId, _playerOverrideId, _mlbPlayerId];\n', '        \n', '        return _createNFTCollectible(_teamId, _attributes, nftOwner, 2, _nftData);\n', '    }\n', '}\n', '\n', '/* @title Interface for DodgersNFT Contract\n', ' * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\n', ' */\n', 'contract SaleManager {\n', '    function createSale(uint256 _tokenId, uint256 _startingPrice, uint256 _endingPrice, uint256 _duration, address _owner) external;\n', '}\n', '\n', '/**\n', ' * DodgersNFT manages all aspects of the Lucid Sight, Inc. CryptoBaseball.\n', ' * @title DodgersNFT\n', ' * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\n', ' */\n', 'contract DodgersNFT is CollectibleMinting {\n', '    \n', '    /// @dev Set in case the DodgersNFT contract requires an upgrade\n', '    address public newContractAddress;\n', '\n', '    string public constant MLB_Legal = "Major League Baseball trademarks and copyrights are used with permission of the applicable MLB entity.  All rights reserved.";\n', '\n', '    // Time LS Oracle has to respond to detach requests\n', '    uint32 public detachmentTime = 0;\n', '\n', '    // Indicates if attached system is Active (Transfers will be blocked if attached and active)\n', '    bool public attachedSystemActive;\n', '\n', '    // Sale Manager Contract\n', '    SaleManager public saleManagerAddress;\n', '\n', '    /**\n', '     * @dev DodgersNFT constructor.\n', '     */\n', '    constructor() public {\n', '        // Starts paused.\n', '        paused = true;\n', '        managerPrimary = msg.sender;\n', '        managerSecondary = msg.sender;\n', '        bankManager = msg.sender;\n', '        name_ = "LucidSight-DODGERS-NFT";\n', '        symbol_ = "DNFTCB";\n', '    }\n', '\n', '    /**\n', '     * @dev        Sets the address for the NFT Contract\n', '     * @param      _saleManagerAddress  The nft address\n', '     */\n', '    function setSaleManagerAddress(address _saleManagerAddress) public onlyManager {\n', '        require (_saleManagerAddress != address(0));\n', '        saleManagerAddress = SaleManager(_saleManagerAddress);\n', '    }\n', '\n', '    /**\n', '    * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n', '    * @param _tokenId uint256 ID of the token to validate\n', '    */\n', '    modifier canTransfer(uint256 _tokenId) {\n', '        uint256 isAttached = checkIsAttached(_tokenId);\n', '        if(isAttached == 2) {\n', '            //One-Time Auth for Physical Card Transfers\n', '            require (msg.sender == managerPrimary ||\n', '                msg.sender == managerSecondary ||\n', '                msg.sender == bankManager ||\n', '                otherManagers[msg.sender] == 1\n', '            );\n', '            updateIsAttached(_tokenId, 0);\n', '        } else if(attachedSystemActive == true && isAttached >= 1) {\n', '            require (msg.sender == managerPrimary ||\n', '                msg.sender == managerSecondary ||\n', '                msg.sender == bankManager ||\n', '                otherManagers[msg.sender] == 1\n', '            );\n', '        }\n', '        else {\n', '            require (isApprovedOrOwner(msg.sender, _tokenId));\n', '        }\n', '    _;\n', '    }\n', '\n', '    /**\n', '     * @dev Used to mark the smart contract as upgraded, in case of a issue\n', '     * @param _v2Address    The new contract address\n', '     */\n', '    function setNewAddress(address _v2Address) external onlyManager {\n', '        require (_v2Address != address(0));\n', '        newContractAddress = _v2Address;\n', '        emit ContractUpgrade(_v2Address);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns all the relevant information about a specific Collectible.\n', '     * @notice Get details about your collectible\n', '     * @param _tokenId              The token identifier\n', '     * @return isAttached           Is Object attached\n', '     * @return teamId               team identifier of the asset/token/collectible\n', '     * @return positionId           position identifier of the asset/token/collectible\n', '     * @return creationTime         creation timestamp\n', '     * @return attributes           attribute of the asset/token/collectible\n', '     * @return currentGameCardId    current game card of the asset/token/collectible\n', '     * @return mlbGameID            mlb game identifier in which the asset/token/collectible was generated\n', '     * @return playerOverrideId     player override identifier of the asset/token/collectible\n', '     * @return playerStatus         status of the player (Rookie/Veteran/Historical)\n', '     * @return playerHandedness     handedness of the asset\n', '     * @return mlbPlayerId          official MLB Player Identifier\n', '     */\n', '    function getCollectibleDetails(uint256 _tokenId)\n', '        external\n', '        view\n', '        returns (\n', '        uint256 isAttached,\n', '        uint32 sequenceId,\n', '        uint8 teamId,\n', '        uint8 positionId,\n', '        uint64 creationTime,\n', '        uint256 attributes,\n', '        uint256 playerOverrideId,\n', '        uint256 mlbGameId,\n', '        uint256 currentGameCardId,\n', '        uint256 mlbPlayerId,\n', '        uint256 earnedBy,\n', '        uint256 generationSeason\n', '        ) {\n', '        NFT memory obj  = _getAttributesOfToken(_tokenId);\n', '        \n', '        attributes = obj.attributes;\n', '        currentGameCardId = obj.currentGameCardId;\n', '        mlbGameId = obj.mlbGameId;\n', '        playerOverrideId = obj.playerOverrideId;\n', '        mlbPlayerId = obj.mlbPlayerId;\n', '\n', '        creationTime = uint64(obj.assetDetails);\n', '        sequenceId = uint32(obj.assetDetails>>64);\n', '        teamId = uint8(obj.assetDetails>>96);\n', '        positionId = uint8(obj.assetDetails>>104);\n', '        isAttached = obj.isAttached;\n', '        earnedBy = obj.earnedBy;\n', '\n', '        generationSeason = generationSeasonDict[(obj.attributes % 1000000) / 1000];\n', '    }\n', '\n', '    \n', '    /**\n', '     * @dev This is public rather than external so we can call super.unpause\n', '     * without using an expensive CALL.\n', '     */\n', '    function unpause() public onlyManager {\n', '        /// Actually unpause the contract.\n', '        super.unpause();\n', '    }\n', '\n', '    /**\n', '     * @dev Helper function to get the teamID of a collectible.To avoid using getCollectibleDetails\n', '     * @notice Returns the teamID associated with the asset/collectible/token\n', '     * @param _tokenId  The token identifier\n', '     */\n', '    function getTeamId(uint256 _tokenId) external view returns (uint256) {\n', '        NFT memory obj  = _getAttributesOfToken(_tokenId);\n', '\n', '        uint256 teamId = uint256(uint8(obj.assetDetails>>96));\n', '        return uint256(teamId);\n', '    }\n', '\n', '    /**\n', '     * @dev Helper function to get the position of a collectible.To avoid using getCollectibleDetails\n', '     * @notice Returns the position of the asset/collectible/token\n', '     * @param _tokenId  The token identifier\n', '     */\n', '    function getPositionId(uint256 _tokenId) external view returns (uint256) {\n', '        NFT memory obj  = _getAttributesOfToken(_tokenId);\n', '\n', '        uint256 positionId = uint256(uint8(obj.assetDetails>>104));\n', '\n', '        return positionId;\n', '    }\n', '\n', '    /**\n', '     * @dev Helper function to get the game card. To avoid using getCollectibleDetails\n', '     * @notice Returns the gameCard associated with the asset/collectible/token\n', '     * @param _tokenId  The token identifier\n', '     */\n', '    function getGameCardId(uint256 _tokenId) public view returns (uint256) {\n', '        NFT memory obj  = _getAttributesOfToken(_tokenId);\n', '        return obj.currentGameCardId;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns isAttached property value for an asset/collectible/token\n', '     * @param _tokenId  The token identifier\n', '     */\n', '    function checkIsAttached(uint256 _tokenId) public view returns (uint256) {\n', '        NFT memory obj  = _getAttributesOfToken(_tokenId);\n', '        return obj.isAttached;\n', '    }\n', '\n', '    /**\n', '     * @dev Helper function to get the attirbute of the collectible.To avoid using getCollectibleDetails\n', '     * @notice Returns the ability of an asset/collectible/token from attributes.\n', '     * @param _tokenId  The token identifier\n', '     * @return ability  ability of the asset\n', '     */\n', '    function getAbilitiesForCollectibleId(uint256 _tokenId) external view returns (uint256 ability) {\n', '        NFT memory obj  = _getAttributesOfToken(_tokenId);\n', '        uint256 _attributes = uint256(obj.attributes);\n', '        ability = (_attributes % 1000);\n', '    }\n', '\n', '    /**\n', '     * @dev Only allows trasnctions to go throught if the msg.sender is in the apporved list\n', '     * @notice Updates the gameCardID properrty of the asset\n', '     * @param _gameCardNumber  The game card number\n', '     * @param _playerId        The player identifier\n', '     */\n', '    function updateCurrentGameCardId(uint256 _gameCardNumber, uint256 _playerId) public whenNotPaused {\n', '        require (contractsApprovedList[msg.sender]);\n', '\n', '        NFT memory obj  = _getAttributesOfToken(_playerId);\n', '        \n', '        obj.currentGameCardId = _gameCardNumber;\n', '        \n', '        if ( _gameCardNumber == 0 ) {\n', '            obj.isAttached = 0;\n', '        } else {\n', '            obj.isAttached = 1;\n', '        }\n', '\n', '        allNFTs[_playerId] = obj;\n', '    }\n', '\n', '    /**\n', '     * @dev Only Manager can add an attachment (special events) to the collectible\n', '     * @notice Adds an attachment to collectible.\n', '     * @param _tokenId  The token identifier\n', '     * @param _attachment  The attachment\n', '     */\n', '    function addAttachmentToCollectible ( \n', '        uint256 _tokenId,\n', '        uint256 _attachment)\n', '        external\n', '        onlyManager\n', '        whenNotPaused {\n', '        require (exists(_tokenId));\n', '\n', '        nftCollectibleAttachments[_tokenId].push(_attachment);\n', '        emit AssetUpdated(_tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev It will remove the attachment form the collectible. We will need to re-add all attachment(s) if removed.\n', '     * @notice Removes all attachments from collectible.\n', '     * @param _tokenId  The token identifier\n', '     */\n', '    function removeAllAttachmentsFromCollectible(uint256 _tokenId)\n', '        external\n', '        onlyManager\n', '        whenNotPaused {\n', '\n', '        require (exists(_tokenId));\n', '        \n', '        delete nftCollectibleAttachments[_tokenId];\n', '        emit AssetUpdated(_tokenId);\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers the ownership of NFT from one address to another address\n', '     * @dev responsible for gifting assets to other user.\n', '     * @param _to       to address\n', '     * @param _tokenId  The token identifier\n', '     */\n', '    function giftAsset(address _to, uint256 _tokenId) public whenNotPaused {        \n', '        safeTransferFrom(msg.sender, _to, _tokenId);\n', '    }\n', '    \n', '    /**\n', '     * @dev responsible for setting the tokenURI.\n', '     * @notice The user/developper needs to add the tokenID, in the end of URL, to \n', '     * use the URI and get all details. Ex. www.<apiURL>.com/token/<tokenID>\n', '     * @param _tokenURI  The token uri\n', '     */\n', '    function setTokenURIBase (string _tokenURI) public anyOperator {\n', '        _setTokenURIBase(_tokenURI);\n', '    }\n', '\n', '    /**\n', '     * @dev Allowed to be called by onlyGameManager to update a certain collectible playerOverrideID\n', '     * @notice Sets the player override identifier.\n', '     * @param _tokenId      The token identifier\n', '     * @param _newOverrideId     The new player override identifier\n', '     */\n', '    function setPlayerOverrideId(uint256 _tokenId, uint256 _newOverrideId) public onlyManager whenNotPaused {\n', '        require (exists(_tokenId));\n', '\n', '        _updatePlayerOverrideId(_tokenId, _newOverrideId);\n', '    }\n', '\n', '    /**\n', '     * @notice Updates the Generation Season Controller.\n', '     * @dev Allowed to be called by onlyGameManager to update the generation season.\n', '     * this helps to control the generation of collectible.\n', '     * @param _season    Season UINT representation\n', '     * @param _value    0-Not allowed, 1-open, >=2 Locked Forever\n', '     */\n', '    function updateGenerationStopTime(uint256 _season, uint8 _value ) public  onlyManager whenNotPaused {\n', '        require (generationSeasonController[_season] == 1 && _value != 0);\n', '        _updateGenerationSeasonFlag(_season, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev set Generation Season Controller, can only be called by Managers._season can be [0,1,2,3..] and \n', '     * _value can be [0,1,N].\n', '     * @notice _value of 1: means generation of collectible is allowed. anything, apart from 1, wont allow generating assets for that season.\n', '     * @param _season    Season UINT representation\n', '     */\n', '    function setGenerationSeasonController(uint256 _season) public onlyManager whenNotPaused {\n', '        require (generationSeasonController[_season] == 0);\n', '        _updateGenerationSeasonFlag(_season, 1);\n', '    }\n', '\n', '    /**\n', '     * @dev Adding value to DICT helps in showing the season value in getCollectibleDetails\n', '     * @notice Updates the Generation Season Dict.\n', '     * @param _season    Season UINT representation\n', '     * @param _value    0-Not allowed,1-allowed\n', '     */\n', '    function updateGenerationDict(uint256 _season, uint64 _value) public onlyManager whenNotPaused {\n', '        require (generationSeasonDict[_season] <= 1);\n', '        generationSeasonDict[_season] = _value;\n', '    }\n', '\n', '    /**\n', '     * @dev Helper function to avoid calling getCollectibleDetails\n', '     * @notice Gets the MLB player Id from the player attributes\n', '     * @param _tokenId  The token identifier\n', '     * @return playerId  MLB Player Identifier\n', '     */\n', '    function getPlayerId(uint256 _tokenId) external view returns (uint256 playerId) {\n', '        NFT memory obj  = _getAttributesOfToken(_tokenId);\n', '        playerId = ((obj.attributes.div(100000000000000000)) % 1000);\n', '    }\n', '    \n', '    /**\n', '     * @dev Helper function to avoid calling getCollectibleDetails\n', '     * @notice Gets the attachments for an asset\n', '     * @param _tokenId  The token identifier\n', '     * @return attachments\n', '     */\n', '    function getAssetAttachment(uint256 _tokenId) external view returns (uint256[]) {\n', '        uint256[] _attachments = nftCollectibleAttachments[_tokenId];\n', '        uint256[] attachments;\n', '        for(uint i=0;i<_attachments.length;i++){\n', '            attachments.push(_attachments[i]);\n', '        }\n', '        \n', '        return attachments;\n', '    }\n', '\n', '    /**\n', '     * @dev Can only be trigerred by Managers. Updates the earnedBy property of the NFT\n', '     * @notice Helps in updating the earned _by property of an asset/token.\n', '     * @param  _tokenId        asser/token identifier\n', '     * @param  _earnedBy       New asset/token DNA\n', '     */\n', '    function updateEarnedBy(uint256 _tokenId, uint256 _earnedBy) public onlyManager whenNotPaused {\n', '        require (exists(_tokenId));\n', '\n', '        _updateEarnedBy(_tokenId, _earnedBy);\n', '    }\n', '\n', '    /**\n', '     * @dev A batch function to facilitate batching of asset creation. canCreate modifier\n', '     * helps in controlling who can call the function\n', '     * @notice Batch Function to Create Assets\n', '     * @param      _teamId            The team identifier\n', '     * @param      _attributes        The attributes\n', '     * @param      _playerOverrideId  The player override identifier\n', '     * @param      _mlbPlayerId       The mlb player identifier\n', '     * @param      _to                To Address\n', '     */\n', '    function batchCreateAsset(\n', '        uint8[] _teamId,\n', '        uint256[] _attributes,\n', '        uint256[] _playerOverrideId,\n', '        uint256[] _mlbPlayerId,\n', '        address[] _to)\n', '        external\n', '        canCreate\n', '        whenNotPaused {\n', '            require (isBatchSupported);\n', '\n', '            require (_teamId.length > 0 && _attributes.length > 0 && \n', '                _playerOverrideId.length > 0 && _mlbPlayerId.length > 0 && \n', '                _to.length > 0);\n', '\n', '            uint256 assetDetails;\n', '            uint256[5] memory _nftData;\n', '            \n', '            for(uint ii = 0; ii < _attributes.length; ii++){\n', '                require (_to[ii] != address(0) && _teamId[ii] != 0 && _attributes.length != 0 && \n', '                    _mlbPlayerId[ii] != 0);\n', '                \n', '                assetDetails = uint256(uint64(now));\n', '                assetDetails |= uint256(getSequenceId(_teamId[ii]))<<64;\n', '                assetDetails |= uint256(_teamId[ii])<<96;\n', '                assetDetails |= uint256((_attributes[ii]/1000000000000000000000000000000000000000)-800)<<104;\n', '        \n', '                _nftData = [assetDetails, _attributes[ii], 0, _playerOverrideId[ii], _mlbPlayerId[ii]];\n', '                \n', '                _createNFTCollectible(_teamId[ii], _attributes[ii], _to[ii], 0, _nftData);\n', '            }\n', '        }\n', '\n', '    /**\n', '     * @dev A batch function to facilitate batching of asset creation for ETH Cards. canCreate modifier\n', '     * helps in controlling who can call the function\n', '     * @notice        Batch Function to Create Assets\n', '     * @param      _teamId            The team identifier\n', '     * @param      _attributes        The attributes\n', '     * @param      _playerOverrideId  The player override identifier\n', '     * @param      _mlbPlayerId       The mlb player identifier\n', '     * @param      _to                { parameter_description }\n', '     */\n', '    function batchCreateETHCardAsset(\n', '        uint8[] _teamId,\n', '        uint256[] _attributes,\n', '        uint256[] _playerOverrideId,\n', '        uint256[] _mlbPlayerId,\n', '        address[] _to)\n', '        external\n', '        canCreate\n', '        whenNotPaused {\n', '            require (isBatchSupported);\n', '\n', '            require (_teamId.length > 0 && _attributes.length > 0\n', '                        && _playerOverrideId.length > 0 &&\n', '                        _mlbPlayerId.length > 0 && _to.length > 0);\n', '\n', '            uint256 assetDetails;\n', '            uint256[5] memory _nftData;\n', '\n', '            for(uint ii = 0; ii < _attributes.length; ii++){\n', '\n', '                require (_to[ii] != address(0) && _teamId[ii] != 0 && _attributes.length != 0 && \n', '                    _mlbPlayerId[ii] != 0);\n', '        \n', '                assetDetails = uint256(uint64(now));\n', '                assetDetails |= uint256(getSequenceId(_teamId[ii]))<<64;\n', '                assetDetails |= uint256(_teamId[ii])<<96;\n', '                assetDetails |= uint256((_attributes[ii]/1000000000000000000000000000000000000000)-800)<<104;\n', '        \n', '                _nftData = [assetDetails, _attributes[ii], 0, _playerOverrideId[ii], _mlbPlayerId[ii]];\n', '                \n', '                _createNFTCollectible(_teamId[ii], _attributes[ii], _to[ii], 2, _nftData);\n', '            }\n', '        }\n', '\n', '    /**\n', '     * @dev        Overriden TransferFrom, with the modifier canTransfer which uses our attachment system\n', '     * @notice     Helps in trasnferring assets\n', '     * @param      _from     the address sending from\n', '     * @param      _to       the address sending to\n', '     * @param      _tokenId  The token identifier\n', '     */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _tokenId\n', '    )\n', '        public\n', '        canTransfer(_tokenId)\n', '    {\n', '        // Asset should not be in play\n', '        require (checkIsAttached(_tokenId) == 0);\n', '        \n', '        require (_from != address(0));\n', '\n', '        require (_to != address(0));\n', '\n', '        clearApproval(_from, _tokenId);\n', '        removeTokenFrom(_from, _tokenId);\n', '        addTokenTo(_to, _tokenId);\n', '\n', '        emit Transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev     Facilitates batch trasnfer of collectible with multiple TO Address, depending if batch is supported on contract.\n', '     * @notice  Batch Trasnfer with multpple TO addresses\n', '     * @param      _tokenIds  The token identifiers\n', '     * @param      _fromB     the address sending from\n', '     * @param      _toB       the address sending to\n', '     */\n', '    function multiBatchTransferFrom(\n', '        uint256[] _tokenIds, \n', '        address[] _fromB, \n', '        address[] _toB) \n', '        public\n', '    {\n', '        require (isBatchSupported);\n', '\n', '        require (_tokenIds.length > 0 && _fromB.length > 0 && _toB.length > 0);\n', '\n', '        uint256 _id;\n', '        address _to;\n', '        address _from;\n', '        \n', '        for (uint256 i = 0; i < _tokenIds.length; ++i) {\n', '\n', '            require (_tokenIds[i] != 0 && _fromB[i] != 0 && _toB[i] != 0);\n', '\n', '            _id = _tokenIds[i];\n', '            _to = _toB[i];\n', '            _from = _fromB[i];\n', '\n', '            transferFrom(_from, _to, _id);\n', '        }\n', '        \n', '    }\n', '    \n', '    /**\n', '     * @dev     Facilitates batch trasnfer of collectible, depending if batch is supported on contract\n', '     * @notice        Batch TransferFrom with the same to & from address\n', '     * @param      _tokenIds  The asset identifiers\n', '     * @param      _from      the address sending from\n', '     * @param      _to        the address sending to\n', '     */\n', '    function batchTransferFrom(uint256[] _tokenIds, address _from, address _to) \n', '        public\n', '    {\n', '        require (isBatchSupported);\n', '\n', '        require (_tokenIds.length > 0 && _from != address(0) && _to != address(0));\n', '\n', '        uint256 _id;\n', '        \n', '        for (uint256 i = 0; i < _tokenIds.length; ++i) {\n', '            \n', '            require (_tokenIds[i] != 0);\n', '\n', '            _id = _tokenIds[i];\n', '\n', '            transferFrom(_from, _to, _id);\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @dev     Facilitates batch trasnfer of collectible, depending if batch is supported on contract.\n', '     * Checks for collectible 0,address 0 and then performs the transfer\n', '     * @notice        Batch SafeTransferFrom with multiple From and to Addresses\n', '     * @param      _tokenIds  The asset identifiers\n', '     * @param      _fromB     the address sending from\n', '     * @param      _toB       the address sending to\n', '     */\n', '    function multiBatchSafeTransferFrom(\n', '        uint256[] _tokenIds, \n', '        address[] _fromB, \n', '        address[] _toB\n', '        )\n', '        public\n', '    {\n', '        require (isBatchSupported);\n', '\n', '        require (_tokenIds.length > 0 && _fromB.length > 0 && _toB.length > 0);\n', '\n', '        uint256 _id;\n', '        address _to;\n', '        address _from;\n', '        \n', '        for (uint256 i = 0; i < _tokenIds.length; ++i) {\n', '\n', '            require (_tokenIds[i] != 0 && _fromB[i] != 0 && _toB[i] != 0);\n', '\n', '            _id = _tokenIds[i];\n', '            _to  = _toB[i];\n', '            _from  = _fromB[i];\n', '\n', '            safeTransferFrom(_from, _to, _id);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev     Facilitates batch trasnfer of collectible, depending if batch is supported on contract.\n', '     * Checks for collectible 0,address 0 and then performs the transfer\n', '     * @notice        Batch SafeTransferFrom from a single address to another address\n', '     * @param      _tokenIds  The asset identifiers\n', '     * @param      _from     the address sending from\n', '     * @param      _to       the address sending to\n', '     */\n', '    function batchSafeTransferFrom(\n', '        uint256[] _tokenIds, \n', '        address _from, \n', '        address _to\n', '        )\n', '        public\n', '    {   \n', '        require (isBatchSupported);\n', '\n', '        require (_tokenIds.length > 0 && _from != address(0) && _to != address(0));\n', '\n', '        uint256 _id;\n', '        for (uint256 i = 0; i < _tokenIds.length; ++i) {\n', '            require (_tokenIds[i] != 0);\n', '            _id = _tokenIds[i];\n', '            safeTransferFrom(_from, _to, _id);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice     Batch Function to approve the spender\n', '     * @dev        Helps to approve a batch of collectibles \n', '     * @param      _tokenIds  The asset identifiers\n', '     * @param      _spender   The spender\n', '     */\n', '    function batchApprove(\n', '        uint256[] _tokenIds, \n', '        address _spender\n', '        )\n', '        public\n', '    {   \n', '        require (isBatchSupported);\n', '\n', '        require (_tokenIds.length > 0 && _spender != address(0));\n', '        \n', '        uint256 _id;\n', '        for (uint256 i = 0; i < _tokenIds.length; ++i) {\n', '\n', '            require (_tokenIds[i] != 0);\n', '            \n', '            _id = _tokenIds[i];\n', '            approve(_spender, _id);\n', '        }\n', '        \n', '    }\n', '\n', '    /**\n', '     * @dev        Batch Function to mark spender for approved for all. Does a check\n', '     * for address(0) and throws if true\n', '     * @notice     Facilitates batch approveAll\n', '     * @param      _spenders  The spenders\n', '     * @param      _approved  The approved\n', '     */\n', '    function batchSetApprovalForAll(\n', '        address[] _spenders,\n', '        bool _approved\n', '        )\n', '        public\n', '    {   \n', '        require (isBatchSupported);\n', '\n', '        require (_spenders.length > 0);\n', '\n', '        address _spender;\n', '        for (uint256 i = 0; i < _spenders.length; ++i) {        \n', '\n', '            require (address(_spenders[i]) != address(0));\n', '                \n', '            _spender = _spenders[i];\n', '            setApprovalForAll(_spender, _approved);\n', '        }\n', '    }  \n', '    \n', '    /**\n', '     * @dev        Function to request Detachment from our Contract\n', '     * @notice     a wallet can request to detach it collectible, so, that it can be used in other third-party contracts.\n', '     * @param      _tokenId  The token identifier\n', '     */\n', '    function requestDetachment(\n', '        uint256 _tokenId\n', '    )\n', '        public\n', '    {\n', '        //Request can only be made by owner or approved address\n', '        require (isApprovedOrOwner(msg.sender, _tokenId));\n', '\n', '        uint256 isAttached = checkIsAttached(_tokenId);\n', '\n', '        //If collectible is on a gamecard prevent detachment\n', '        require(getGameCardId(_tokenId) == 0);\n', '\n', '        require (isAttached >= 1);\n', '\n', '        if(attachedSystemActive == true) {\n', '            //Checks to see if request was made and if time elapsed\n', '            if(isAttached > 1 && block.timestamp - isAttached > detachmentTime) {\n', '                isAttached = 0;\n', '            } else if(isAttached > 1) {\n', '                //Forces Tx Fail if time is already set for attachment and not less than detachmentTime\n', '                require (isAttached == 1);\n', '            } else {\n', '                //Is attached, set detachment time and make request to detach\n', '                // emit AssetUpdated(_tokenId);\n', '                isAttached = block.timestamp;\n', '            }\n', '        } else {\n', '            isAttached = 0;\n', '        }\n', '\n', '        updateIsAttached(_tokenId, isAttached);\n', '    }\n', '\n', '    /**\n', '     * @dev        Function to attach the asset, thus, restricting transfer\n', '     * @notice     Attaches the collectible to our contract\n', '     * @param      _tokenId  The token identifier\n', '     */\n', '    function attachAsset(\n', '        uint256 _tokenId\n', '    )\n', '        public\n', '        canTransfer(_tokenId)\n', '    {\n', '        uint256 isAttached = checkIsAttached(_tokenId);\n', '\n', '        require (isAttached == 0);\n', '        isAttached = 1;\n', '\n', '        updateIsAttached(_tokenId, isAttached);\n', '\n', '        emit AssetUpdated(_tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev        Batch attach function\n', '     * @param      _tokenIds  The identifiers\n', '     */\n', '    function batchAttachAssets(uint256[] _tokenIds) public {\n', '        require (isBatchSupported);\n', '\n', '        for(uint i = 0; i < _tokenIds.length; i++) {\n', '            attachAsset(_tokenIds[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev        Batch detach function\n', '     * @param      _tokenIds  The identifiers\n', '     */\n', '    function batchDetachAssets(uint256[] _tokenIds) public {\n', '        require (isBatchSupported);\n', '\n', '        for(uint i = 0; i < _tokenIds.length; i++) {\n', '            requestDetachment(_tokenIds[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev        Function to facilitate detachment when contract is paused\n', '     * @param      _tokenId  The identifiers\n', '     */\n', '    function requestDetachmentOnPause (uint256 _tokenId) public whenPaused {\n', '        //Request can only be made by owner or approved address\n', '        require (isApprovedOrOwner(msg.sender, _tokenId));\n', '\n', '        updateIsAttached(_tokenId, 0);\n', '    }\n', '\n', '    /**\n', '     * @dev        Toggle the Attachment Switch\n', '     * @param      _state  The state\n', '     */\n', '    function toggleAttachedEnforcement (bool _state) public onlyManager {\n', '        attachedSystemActive = _state;\n', '    }\n', '\n', '    /**\n', '     * @dev        Set Attachment Time Period (this restricts user from continuously trigger detachment)\n', '     * @param      _time  The time\n', '     */\n', '    function setDetachmentTime (uint256 _time) public onlyManager {\n', '        //Detactment Time can not be set greater than 2 weeks.\n', '        require (_time <= 1209600);\n', '        detachmentTime = uint32(_time);\n', '    }\n', '\n', '    /**\n', '     * @dev        Detach Asset From System\n', '     * @param      _tokenId  The token iddentifier\n', '     */\n', '    function setNFTDetached(uint256 _tokenId) public anyOperator {\n', '        require (checkIsAttached(_tokenId) > 0);\n', '\n', '        updateIsAttached(_tokenId, 0);\n', '    }\n', '\n', '    /**\n', '     * @dev        Batch function to detach multiple assets\n', '     * @param      _tokenIds  The token identifiers\n', '     */\n', '    function setBatchDetachCollectibles(uint256[] _tokenIds) public anyOperator {\n', '        uint256 _id;\n', '        for(uint i = 0; i < _tokenIds.length; i++) {\n', '            _id = _tokenIds[i];\n', '            setNFTDetached(_id);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev        Function to update attach value\n', '     * @param      _tokenId     The asset id\n', '     * @param      _isAttached  Indicates if attached\n', '     */\n', '    function updateIsAttached(uint256 _tokenId, uint256 _isAttached) internal {\n', '        NFT memory obj  = _getAttributesOfToken(_tokenId);\n', '        \n', '        obj.isAttached = _isAttached;\n', '    \n', '        allNFTs[_tokenId] = obj;\n', '        emit AssetUpdated(_tokenId);\n', '    }\n', '\n', '    /**\n', '    * @dev   Facilitates Creating Sale using the Sale Contract. Forces owner check & collectibleId check\n', '    * @notice Helps a wallet to create a sale using our Sale Contract\n', '    * @param      _tokenId        The token identifier\n', '    * @param      _startingPrice  The starting price\n', '    * @param      _endingPrice    The ending price\n', '    * @param      _duration       The duration\n', '    */\n', '    function initiateCreateSale(uint256 _tokenId, uint256 _startingPrice, uint256 _endingPrice, uint256 _duration) external {\n', '        require (_tokenId != 0);\n', '        \n', '        // If DodgersNFT is already on any sale, this will throw\n', '        // because it will be owned by the sale contract.\n', '        address owner = ownerOf(_tokenId);\n', '        require (owner == msg.sender);\n', '\n', '        // Sale contract checks input sizes\n', '        require (_startingPrice == _startingPrice);\n', '        require (_endingPrice == _endingPrice);\n', '        require (_duration == _duration);\n', '\n', '        require (checkIsAttached(_tokenId) == 0);\n', '        \n', '        // One time approval for the tokenID\n', '        _approveForSale(msg.sender, address(saleManagerAddress), _tokenId);\n', '\n', '        saleManagerAddress.createSale(_tokenId, _startingPrice, _endingPrice, _duration, msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev        Facilitates batch auction of collectibles, and enforeces strict checking on the collectibleId,starting/ending price, duration.\n', '     * @notice     Batch function to put 10 or less collectibles on sale\n', '     * @param      _tokenIds        The token identifier\n', '     * @param      _startingPrices  The starting price\n', '     * @param      _endingPrices    The ending price\n', '     * @param      _durations       The duration\n', '     */\n', '    function batchCreateAssetSale(uint256[] _tokenIds, uint256[] _startingPrices, uint256[] _endingPrices, uint256[] _durations) external whenNotPaused {\n', '\n', '        require (_tokenIds.length > 0 && _startingPrices.length > 0 && _endingPrices.length > 0 && _durations.length > 0);\n', '        \n', '        // Sale contract checks input sizes\n', '        for(uint ii = 0; ii < _tokenIds.length; ii++){\n', '\n', '            // Do not process for tokenId 0\n', '            require (_tokenIds[ii] != 0);\n', '            \n', '            require (_startingPrices[ii] == _startingPrices[ii]);\n', '            require (_endingPrices[ii] == _endingPrices[ii]);\n', '            require (_durations[ii] == _durations[ii]);\n', '\n', '            // If DodgersNFT is already on any sale, this will throw\n', '            // because it will be owned by the sale contract.\n', '            address _owner = ownerOf(_tokenIds[ii]);\n', '            address _msgSender = msg.sender;\n', '            require (_owner == _msgSender);\n', '\n', '            // Check whether the collectible is inPlay. If inPlay cant put it on Sale\n', '            require (checkIsAttached(_tokenIds[ii]) == 0);\n', '            \n', '            // approve token to for Sale creation\n', '            _approveForSale(msg.sender, address(saleManagerAddress), _tokenIds[ii]);\n', '            \n', '            saleManagerAddress.createSale(_tokenIds[ii], _startingPrices[ii], _endingPrices[ii], _durations[ii], msg.sender);\n', '        }\n', '    }\n', '}']
['/**\n', ' * Created on 2018-06-05 16:37\n', ' * @summary: Our NFT Minting Contract which inherits ERC721 capability from LSNFT\n', ' * @author: Fazri Zubair & Farhan Khwaja\n', ' */\n', 'pragma solidity ^0.4.23;\n', '\n', 'pragma solidity ^0.4.23;\n', '\n', '/* NFT Metadata Schema \n', '{\n', '    "title": "Asset Metadata",\n', '    "type": "object",\n', '    "properties": {\n', '        "name": {\n', '            "type": "string",\n', '            "description": "Identifies the asset to which this NFT represents",\n', '        },\n', '        "description": {\n', '            "type": "string",\n', '            "description": "Describes the asset to which this NFT represents",\n', '        },\n', '        "image": {\n', '            "type": "string",\n', '            "description": "A URI pointing to a resource with mime type image/* representing the asset to which this NFT represents. Consider making any images at a width between 320 and 1080 pixels and aspect ratio between 1.91:1 and 4:5 inclusive.",\n', '        }\n', '    }\n', '}\n', '*/\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = _a * _b;\n', '    require(c / _a == _b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b <= _a);\n', '    uint256 c = _a - _b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    uint256 c = _a + _b;\n', '    require(c >= _a);\n', '\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library AddressUtils {\n', '\n', '    /**\n', '    * Returns whether the target address is a contract\n', '    * @dev This function will return false if invoked during the constructor of a contract,\n', '    *  as the code is not actually created until after the constructor finishes.\n', '    * @param addr address to check\n', '    * @return whether the target address is a contract\n', '    */\n', '    function isContract(address addr) internal view returns (bool) {\n', '        uint256 size;\n', '        // XXX Currently there is no better way to check if there is a contract in an address\n', '        // than to check the size of the code at that address.\n', '        // See https://ethereum.stackexchange.com/a/14016/36603\n', '        // for more details about how this works.\n', '        // TODO Check this again before the Serenity release, because all addresses will be\n', '        // contracts then.\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly { size := extcodesize(addr) }\n', '        return size > 0;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic interface\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Basic {\n', '    event Transfer(\n', '        address indexed _from,\n', '        address indexed _to,\n', '        uint256 indexed _tokenId\n', '    );\n', '    event Approval(\n', '        address indexed _owner,\n', '        address indexed _approved,\n', '        uint256 indexed _tokenId\n', '    );\n', '    event ApprovalForAll(\n', '        address indexed _owner,\n', '        address indexed _operator,\n', '        bool _approved\n', '    );\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 _balance);\n', '    function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '    function exists(uint256 _tokenId) public view returns (bool _exists);\n', '\n', '    function approve(address _to, uint256 _tokenId) public;\n', '    function getApproved(uint256 _tokenId)\n', '        public view returns (address _operator);\n', '\n', '    function setApprovalForAll(address _operator, bool _approved) public;\n', '    function isApprovedForAll(address _owner, address _operator)\n', '        public view returns (bool);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\n', '\n', '    function safeTransferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _tokenId,\n', '        bytes _data\n', '    )\n', '        public;\n', '}\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Enumerable is ERC721Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function tokenOfOwnerByIndex(\n', '        address _owner,\n', '        uint256 _index\n', '    )\n', '        public\n', '        view\n', '        returns (uint256 _tokenId);\n', '\n', '    function tokenByIndex(uint256 _index) public view returns (uint256);\n', '}\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Metadata is ERC721Basic {\n', '    function name() public view returns (string _name);\n', '    function symbol() public view returns (string _symbol);\n', '    function tokenURI(uint256 _tokenId) public view returns (string);\n', '}\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n', '}\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic implementation\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721BasicToken is ERC721Basic {\n', '    using SafeMath for uint256;\n', '    using AddressUtils for address;\n', '\n', '    // Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '    // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '    bytes4 public constant ERC721_RECEIVED = 0x150b7a02;\n', '\n', '    // Mapping from token ID to owner\n', '    mapping (uint256 => address) internal tokenOwner;\n', '\n', '    // Mapping from token ID to approved address\n', '    mapping (uint256 => address) internal tokenApprovals;\n', '\n', '    // Mapping from owner to number of owned token\n', '    mapping (address => uint256) internal ownedTokensCount;\n', '\n', '    // Mapping from owner to operator approvals\n', '    mapping (address => mapping (address => bool)) internal operatorApprovals;\n', '\n', '    /**\n', '    * @dev Guarantees msg.sender is owner of the given token\n', '    * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n', '    */\n', '    modifier onlyOwnerOf(uint256 _tokenId) {\n', '        require (ownerOf(_tokenId) == msg.sender);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n', '    * @param _tokenId uint256 ID of the token to validate\n', '    */\n', '    modifier canTransfer(uint256 _tokenId) {\n', '        require (isApprovedOrOwner(msg.sender, _tokenId));\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address\n', '    * @param _owner address to query the balance of\n', '    * @return uint256 representing the amount owned by the passed address\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        require (_owner != address(0));\n', '        return ownedTokensCount[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the owner of the specified token ID\n', '    * @param _tokenId uint256 ID of the token to query the owner of\n', '    * @return owner address currently marked as the owner of the given token ID\n', '    */\n', '    function ownerOf(uint256 _tokenId) public view returns (address) {\n', '        address owner = tokenOwner[_tokenId];\n', '        require (owner != address(0));\n', '        return owner;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns whether the specified token exists\n', '    * @param _tokenId uint256 ID of the token to query the existence of\n', '    * @return whether the token exists\n', '    */\n', '    function exists(uint256 _tokenId) public view returns (bool) {\n', '        address owner = tokenOwner[_tokenId];\n', '        return owner != address(0);\n', '    }\n', '\n', '    /**\n', '    * @dev Approves another address to transfer the given token ID\n', '    * @dev The zero address indicates there is no approved address.\n', '    * @dev There can only be one approved address per token at a given time.\n', '    * @dev Can only be called by the token owner or an approved operator.\n', '    * @param _to address to be approved for the given token ID\n', '    * @param _tokenId uint256 ID of the token to be approved\n', '    */\n', '    function approve(address _to, uint256 _tokenId) public {\n', '        address owner = ownerOf(_tokenId);\n', '        require (_to != owner);\n', '        require (msg.sender == owner || isApprovedForAll(owner, msg.sender));\n', '\n', '        tokenApprovals[_tokenId] = _to;\n', '        emit Approval(owner, _to, _tokenId);\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the approved address for a token ID, or zero if no address set\n', '    * @param _tokenId uint256 ID of the token to query the approval of\n', '    * @return address currently approved for the given token ID\n', '    */\n', '    function getApproved(uint256 _tokenId) public view returns (address) {\n', '        return tokenApprovals[_tokenId];\n', '    }\n', '\n', '    /**\n', '    * @dev Sets or unsets the approval of a given operator\n', '    * @dev An operator is allowed to transfer all tokens of the sender on their behalf\n', '    * @param _to operator address to set the approval\n', '    * @param _approved representing the status of the approval to be set\n', '    */\n', '    function setApprovalForAll(address _to, bool _approved) public {\n', '        require (_to != msg.sender);\n', '        operatorApprovals[msg.sender][_to] = _approved;\n', '        emit ApprovalForAll(msg.sender, _to, _approved);\n', '    }\n', '\n', '    /**\n', '    * @dev Tells whether an operator is approved by a given owner\n', '    * @param _owner owner address which you want to query the approval of\n', '    * @param _operator operator address which you want to query the approval of\n', '    * @return bool whether the given operator is approved by the given owner\n', '    */\n', '    function isApprovedForAll(\n', '        address _owner,\n', '        address _operator\n', '    )\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        return operatorApprovals[_owner][_operator];\n', '    }\n', '\n', '    /**\n', '    * @dev Transfers the ownership of a given token ID to another address\n', '    * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n', '    * @dev Requires the msg sender to be the owner, approved, or operator\n', '    * @param _from current owner of the token\n', '    * @param _to address to receive the ownership of the given token ID\n', '    * @param _tokenId uint256 ID of the token to be transferred\n', '    */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _tokenId\n', '    )\n', '        public\n', '        canTransfer(_tokenId)\n', '    {\n', '        require (_from != address(0));\n', '        require (_to != address(0));\n', '\n', '        clearApproval(_from, _tokenId);\n', '        removeTokenFrom(_from, _tokenId);\n', '        addTokenTo(_to, _tokenId);\n', '\n', '        emit Transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '    /**\n', '    * @dev Safely transfers the ownership of a given token ID to another address\n', '    * @dev If the target address is a contract, it must implement `onERC721Received`,\n', '    *  which is called upon a safe transfer, and return the magic value\n', '    *  `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '    *  the transfer is reverted.\n', '    * @dev Requires the msg sender to be the owner, approved, or operator\n', '    * @param _from current owner of the token\n', '    * @param _to address to receive the ownership of the given token ID\n', '    * @param _tokenId uint256 ID of the token to be transferred\n', '    */\n', '    function safeTransferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _tokenId\n', '    )\n', '        public\n', '        canTransfer(_tokenId)\n', '    {\n', '        // solium-disable-next-line arg-overflow\n', '        safeTransferFrom(_from, _to, _tokenId, "");\n', '    }\n', '\n', '    /**\n', '    * @dev Safely transfers the ownership of a given token ID to another address\n', '    * @dev If the target address is a contract, it must implement `onERC721Received`,\n', '    *  which is called upon a safe transfer, and return the magic value\n', '    *  `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '    *  the transfer is reverted.\n', '    * @dev Requires the msg sender to be the owner, approved, or operator\n', '    * @param _from current owner of the token\n', '    * @param _to address to receive the ownership of the given token ID\n', '    * @param _tokenId uint256 ID of the token to be transferred\n', '    * @param _data bytes data to send along with a safe transfer check\n', '    */\n', '    function safeTransferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _tokenId,\n', '        bytes _data\n', '    )\n', '        public\n', '        canTransfer(_tokenId)\n', '    {\n', '        transferFrom(_from, _to, _tokenId);\n', '        // solium-disable-next-line arg-overflow\n', '        require (checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n', '    }\n', '\n', '    /**\n', '    * @dev Returns whether the given spender can transfer a given token ID\n', '    * @param _spender address of the spender to query\n', '    * @param _tokenId uint256 ID of the token to be transferred\n', '    * @return bool whether the msg.sender is approved for the given token ID,\n', '    *  is an operator of the owner, or is the owner of the token\n', '    */\n', '    function isApprovedOrOwner(\n', '        address _spender,\n', '        uint256 _tokenId\n', '    )\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        address owner = ownerOf(_tokenId);\n', '        // Disable solium check because of\n', '        // https://github.com/duaraghav8/Solium/issues/175\n', '        // solium-disable-next-line operator-whitespace\n', '        return (\n', '        _spender == owner ||\n', '        getApproved(_tokenId) == _spender ||\n', '        isApprovedForAll(owner, _spender)\n', '        );\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to mint a new token\n', '    * @dev Reverts if the given token ID already exists\n', '    * @param _to The address that will own the minted token\n', '    * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '    */\n', '    function _mint(address _to, uint256 _tokenId) internal {\n', '        require (_to != address(0));\n', '        addTokenTo(_to, _tokenId);\n', '        emit Transfer(address(0), _to, _tokenId);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to burn a specific token\n', '    * @dev Reverts if the token does not exist\n', '    * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '    */\n', '    function _burn(address _owner, uint256 _tokenId) internal {\n', '        clearApproval(_owner, _tokenId);\n', '        removeTokenFrom(_owner, _tokenId);\n', '        emit Transfer(_owner, address(0), _tokenId);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to clear current approval of a given token ID\n', '    * @dev Reverts if the given address is not indeed the owner of the token\n', '    * @param _owner owner of the token\n', '    * @param _tokenId uint256 ID of the token to be transferred\n', '    */\n', '    function clearApproval(address _owner, uint256 _tokenId) internal {\n', '        require (ownerOf(_tokenId) == _owner);\n', '        if (tokenApprovals[_tokenId] != address(0)) {\n', '            tokenApprovals[_tokenId] = address(0);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to add a token ID to the list of a given address\n', '    * @param _to address representing the new owner of the given token ID\n', '    * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '    */\n', '    function addTokenTo(address _to, uint256 _tokenId) internal {\n', '        require (tokenOwner[_tokenId] == address(0));\n', '        tokenOwner[_tokenId] = _to;\n', '        ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to remove a token ID from the list of a given address\n', '    * @param _from address representing the previous owner of the given token ID\n', '    * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '    */\n', '    function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '        require (ownerOf(_tokenId) == _from);\n', '        ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n', '        tokenOwner[_tokenId] = address(0);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to invoke `onERC721Received` on a target address\n', '    * @dev The call is not executed if the target address is not a contract\n', '    * @param _from address representing the previous owner of the given token ID\n', '    * @param _to target address that will receive the tokens\n', '    * @param _tokenId uint256 ID of the token to be transferred\n', '    * @param _data bytes optional data to send along with the call\n', '    * @return whether the call correctly returned the expected magic value\n', '    */\n', '    function checkAndCallSafeTransfer(\n', '        address _from,\n', '        address _to,\n', '        uint256 _tokenId,\n', '        bytes _data\n', '    )\n', '        internal\n', '        returns (bool)\n', '    {\n', '        if (!_to.isContract()) {\n', '            return true;\n', '        }\n', '        bytes4 retval = ERC721Receiver(_to).onERC721Received(\n', '            msg.sender, _from, _tokenId, _data);\n', '        return (retval == ERC721_RECEIVED);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' *  from ERC721 asset contracts.\n', ' */\n', 'contract ERC721Receiver {\n', '    /**\n', '    * @dev Magic value to be returned upon successful reception of an NFT\n', '    *  Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`,\n', '    *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '    */\n', '    bytes4 public constant ERC721_RECEIVED = 0x150b7a02;\n', '\n', '    /**\n', '    * @notice Handle the receipt of an NFT\n', '    * @dev The ERC721 smart contract calls this function on the recipient\n', '    *  after a `safetransfer`. This function MAY throw to revert and reject the\n', '    *  transfer. This function MUST use 50,000 gas or less. Return of other\n', '    *  than the magic value MUST result in the transaction being reverted.\n', '    *  Note: the contract address is always the message sender.\n', '    * @param _from The sending address\n', '    * @param _tokenId The NFT identifier which is being transfered\n', '    * @param _data Additional data with no specified format\n', '    * @return `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '    */\n', '    function onERC721Received(\n', '        address _operator,\n', '        address _from,\n', '        uint256 _tokenId,\n', '        bytes _data\n', '    )\n', '        public\n', '        returns(bytes4);\n', '}\n', '\n', 'contract ERC721Holder is ERC721Receiver {\n', '    function onERC721Received(\n', '        address,\n', '        address,\n', '        uint256,\n', '        bytes\n', '    ) \n', '        public\n', '        returns(bytes4)\n', '        {\n', '            return ERC721_RECEIVED;\n', '        }\n', '}\n', '\n', '/**\n', ' * @title Full ERC721 Token\n', ' * This implementation includes all the required and some optional functionality of the ERC721 standard\n', ' * Moreover, it includes approve all functionality using operator terminology\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Token is ERC721, ERC721BasicToken {\n', '\n', '    // Token name\n', '    string internal name_;\n', '\n', '    // Token symbol\n', '    string internal symbol_;\n', '\n', '    // Mapping from owner to list of owned token IDs\n', '    mapping(address => uint256[]) internal ownedTokens;\n', '\n', '    // Mapping from token ID to index of the owner tokens list\n', '    mapping(uint256 => uint256) internal ownedTokensIndex;\n', '\n', '    // Array with all token ids, used for enumeration\n', '    uint256[] internal allTokens;\n', '\n', '    // Mapping from token id to position in the allTokens array\n', '    mapping(uint256 => uint256) internal allTokensIndex;\n', '\n', '    // Base Server Address for Token MetaData URI\n', '    string internal tokenURIBase;\n', '\n', '    /**\n', '    * @dev Returns an URI for a given token ID\n', '    * @dev Throws if the token ID does not exist. May return an empty string.\n', '    * @notice The user/developper needs to add the tokenID, in the end of URL, to \n', '    * use the URI and get all details. Ex. www.<apiURL>.com/token/<tokenID>\n', '    * @param _tokenId uint256 ID of the token to query\n', '    */\n', '    function tokenURI(uint256 _tokenId) public view returns (string) {\n', '        require (exists(_tokenId));\n', '        return tokenURIBase;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the token ID at a given index of the tokens list of the requested owner\n', '    * @param _owner address owning the tokens list to be accessed\n', '    * @param _index uint256 representing the index to be accessed of the requested tokens list\n', '    * @return uint256 token ID at the given index of the tokens list owned by the requested address\n', '    */\n', '    function tokenOfOwnerByIndex(\n', '        address _owner,\n', '        uint256 _index\n', '    )\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        require (_index < balanceOf(_owner));\n', '        return ownedTokens[_owner][_index];\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the total amount of tokens stored by the contract\n', '    * @return uint256 representing the total amount of tokens\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return allTokens.length;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the token ID at a given index of all the tokens in this contract\n', '    * @dev Reverts if the index is greater or equal to the total number of tokens\n', '    * @param _index uint256 representing the index to be accessed of the tokens list\n', '    * @return uint256 token ID at the given index of the tokens list\n', '    */\n', '    function tokenByIndex(uint256 _index) public view returns (uint256) {\n', '        require (_index < totalSupply());\n', '        return allTokens[_index];\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Internal function to set the token URI for a given token\n', '    * @dev Reverts if the token ID does not exist\n', '    * @param _uri string URI to assign\n', '    */\n', '    function _setTokenURIBase(string _uri) internal {\n', '        tokenURIBase = _uri;\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to add a token ID to the list of a given address\n', '    * @param _to address representing the new owner of the given token ID\n', '    * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '    */\n', '    function addTokenTo(address _to, uint256 _tokenId) internal {\n', '        super.addTokenTo(_to, _tokenId);\n', '        uint256 length = ownedTokens[_to].length;\n', '        ownedTokens[_to].push(_tokenId);\n', '        ownedTokensIndex[_tokenId] = length;\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to remove a token ID from the list of a given address\n', '    * @param _from address representing the previous owner of the given token ID\n', '    * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '    */\n', '    function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '        super.removeTokenFrom(_from, _tokenId);\n', '\n', '        // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n', '        // then delete the last slot.\n', '        uint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '        uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n', '        uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '        ownedTokens[_from][tokenIndex] = lastToken;\n', '        // This also deletes the contents at the last position of the array\n', '        ownedTokens[_from].length--;\n', '\n', '        // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '        // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n', '        // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '        ownedTokensIndex[_tokenId] = 0;\n', '        ownedTokensIndex[lastToken] = tokenIndex;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the token name\n', '    * @return string representing the token name\n', '    */\n', '    function name() public view returns (string) {\n', '        return name_;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the token symbol\n', '    * @return string representing the token symbol\n', '    */\n', '    function symbol() public view returns (string) {\n', '        return symbol_;\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to mint a new token\n', '    * @dev Reverts if the given token ID already exists\n', '    * @param _to address the beneficiary that will own the minted token\n', '    * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '    */\n', '    function _mint(address _to, uint256 _tokenId) internal {\n', '        super._mint(_to, _tokenId);\n', '\n', '        allTokensIndex[_tokenId] = allTokens.length;\n', '        allTokens.push(_tokenId);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to burn a specific token\n', '    * @dev Reverts if the token does not exist\n', '    * @param _owner owner of the token to burn\n', '    * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '    */\n', '    function _burn(address _owner, uint256 _tokenId) internal {\n', '        super._burn(_owner, _tokenId);\n', '\n', '        // Reorg all tokens array\n', '        uint256 tokenIndex = allTokensIndex[_tokenId];\n', '        uint256 lastTokenIndex = allTokens.length.sub(1);\n', '        uint256 lastToken = allTokens[lastTokenIndex];\n', '\n', '        allTokens[tokenIndex] = lastToken;\n', '        allTokens[lastTokenIndex] = 0;\n', '\n', '        allTokens.length--;\n', '        allTokensIndex[_tokenId] = 0;\n', '        allTokensIndex[lastToken] = tokenIndex;\n', '    }\n', '\n', '    bytes4 constant InterfaceSignature_ERC165 = 0x01ffc9a7;\n', '    /*\n', "    bytes4(keccak256('supportsInterface(bytes4)'));\n", '    */\n', '\n', '    bytes4 constant InterfaceSignature_ERC721Enumerable = 0x780e9d63;\n', '    /*\n', "    bytes4(keccak256('totalSupply()')) ^\n", "    bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n", "    bytes4(keccak256('tokenByIndex(uint256)'));\n", '    */\n', '\n', '    bytes4 constant InterfaceSignature_ERC721Metadata = 0x5b5e139f;\n', '    /*\n', "    bytes4(keccak256('name()')) ^\n", "    bytes4(keccak256('symbol()')) ^\n", "    bytes4(keccak256('tokenURI(uint256)'));\n", '    */\n', '\n', '    bytes4 constant InterfaceSignature_ERC721 = 0x80ac58cd;\n', '    /*\n', "    bytes4(keccak256('balanceOf(address)')) ^\n", "    bytes4(keccak256('ownerOf(uint256)')) ^\n", "    bytes4(keccak256('approve(address,uint256)')) ^\n", "    bytes4(keccak256('getApproved(uint256)')) ^\n", "    bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n", "    bytes4(keccak256('isApprovedForAll(address,address)')) ^\n", "    bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n", "    bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n", "    bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'));\n", '    */\n', '\n', '    bytes4 public constant InterfaceSignature_ERC721Optional =- 0x4f558e79;\n', '    /*\n', "    bytes4(keccak256('exists(uint256)'));\n", '    */\n', '\n', '    /**\n', '    * @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\n', '    * @dev Returns true for any standardized interfaces implemented by this contract.\n', '    * @param _interfaceID bytes4 the interface to check for\n', '    * @return true for any standardized interfaces implemented by this contract.\n', '    */\n', '    function supportsInterface(bytes4 _interfaceID) external view returns (bool)\n', '    {\n', '        return ((_interfaceID == InterfaceSignature_ERC165)\n', '        || (_interfaceID == InterfaceSignature_ERC721)\n', '        || (_interfaceID == InterfaceSignature_ERC721Enumerable)\n', '        || (_interfaceID == InterfaceSignature_ERC721Metadata));\n', '    }\n', '\n', '    function implementsERC721() public pure returns (bool) {\n', '        return true;\n', '    }\n', '\n', '}\n', '/* Lucid Sight, Inc. ERC-721 Collectibles. \n', ' * @title LSNFT - Lucid Sight, Inc. Non-Fungible Token\n', ' * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\n', ' */\n', 'contract LSNFT is ERC721Token {\n', '  \n', '  /*** EVENTS ***/\n', '\n', '  /// @dev The Created event is fired whenever a new collectible comes into existence.\n', '  event Created(address owner, uint256 tokenId);\n', '  \n', '  /*** DATATYPES ***/\n', '  \n', '  struct NFT {\n', '    // The sequence of potential attributes a Collectible has and can provide in creation events. Used in Creation logic to spwan new Cryptos\n', '    uint256 attributes;\n', '\n', '    // Current Game Card identifier\n', '    uint256 currentGameCardId;\n', '\n', '    // MLB Game Identifier (if asset generated as a game reward)\n', '    uint256 mlbGameId;\n', '\n', '    // player orverride identifier\n', '    uint256 playerOverrideId;\n', '\n', '    // official MLB Player ID\n', '    uint256 mlbPlayerId;\n', '\n', '    // earnedBy : In some instances we may want to retroactively write which MLB player triggered\n', '    // the event that created a Legendary Trophy. This optional field should be able to be written\n', '    // to after generation if we determine an event was newsworthy enough\n', '    uint256 earnedBy;\n', '    \n', '    // asset metadata\n', '    uint256 assetDetails;\n', '    \n', '    // Attach/Detach Flag\n', '    uint256 isAttached;\n', '  }\n', '\n', '  NFT[] allNFTs;\n', '\n', '  function isLSNFT() public view returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  /// For creating NFT\n', '  function _createNFT (\n', '    uint256[5] _nftData,\n', '    address _owner,\n', '    uint256 _isAttached)\n', '    internal\n', '    returns(uint256) {\n', '\n', '    NFT memory _lsnftObj = NFT({\n', '        attributes : _nftData[1],\n', '        currentGameCardId : 0,\n', '        mlbGameId : _nftData[2],\n', '        playerOverrideId : _nftData[3],\n', '        assetDetails: _nftData[0],\n', '        isAttached: _isAttached,\n', '        mlbPlayerId: _nftData[4],\n', '        earnedBy: 0\n', '    });\n', '\n', '    uint256 newLSNFTId = allNFTs.push(_lsnftObj) - 1;\n', '\n', '    _mint(_owner, newLSNFTId);\n', '    \n', '    // Created event\n', '    emit Created(_owner, newLSNFTId);\n', '\n', '    return newLSNFTId;\n', '  }\n', '\n', '  /// @dev Gets attributes of NFT  \n', '  function _getAttributesOfToken(uint256 _tokenId) internal returns(NFT) {\n', '    NFT storage lsnftObj = allNFTs[_tokenId];  \n', '    return lsnftObj;\n', '  }\n', '\n', '  function _approveForSale(address _owner, address _to, uint256 _tokenId) internal {\n', '    address owner = ownerOf(_tokenId);\n', '    require (_to != owner);\n', '    require (_owner == owner || isApprovedForAll(owner, _owner));\n', '\n', '    if (getApproved(_tokenId) != address(0) || _to != address(0)) {\n', '        tokenApprovals[_tokenId] = _to;\n', '        emit Approval(_owner, _to, _tokenId);\n', '    }\n', '  }\n', '}\n', '\n', '/** Controls state and access rights for contract functions\n', ' * @title Operational Control\n', ' * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\n', ' * Inspired and adapted from contract created by OpenZeppelin \n', ' * Ref: https://github.com/OpenZeppelin/zeppelin-solidity/\n', ' */\n', 'contract OperationalControl {\n', '    /// Facilitates access & control for the game.\n', '    /// Roles:\n', '    ///  -The Managers (Primary/Secondary): Has universal control of all elements (No ability to withdraw)\n', '    ///  -The Banker: The Bank can withdraw funds and adjust fees / prices.\n', '    ///  -otherManagers: Contracts that need access to functions for gameplay\n', '\n', '    /// @dev Emited when contract is upgraded\n', '    event ContractUpgrade(address newContract);\n', '\n', '    /// @dev The addresses of the accounts (or contracts) that can execute actions within each roles.\n', '    address public managerPrimary;\n', '    address public managerSecondary;\n', '    address public bankManager;\n', '\n', '    // Contracts that require access for gameplay\n', '    mapping(address => uint8) public otherManagers;\n', '\n', '    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n', '    bool public paused = false;\n', '\n', '    // @dev Keeps track whether the contract erroredOut. When that is true, most actions are blocked & refund can be claimed\n', '    bool public error = false;\n', '\n', '    /**\n', '     * @dev Operation modifiers for limiting access only to Managers\n', '     */\n', '    modifier onlyManager() {\n', '        require (msg.sender == managerPrimary || msg.sender == managerSecondary);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Operation modifiers for limiting access to only Banker\n', '     */\n', '    modifier onlyBanker() {\n', '        require (msg.sender == bankManager);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Operation modifiers for any Operators\n', '     */\n', '    modifier anyOperator() {\n', '        require (\n', '            msg.sender == managerPrimary ||\n', '            msg.sender == managerSecondary ||\n', '            msg.sender == bankManager ||\n', '            otherManagers[msg.sender] == 1\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev        Operation modifier for any Other Manager\n', '     */\n', '    modifier onlyOtherManagers() {\n', '        require (otherManagers[msg.sender] == 1);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Assigns a new address to act as the Primary Manager.\n', '     * @param _newGM    New primary manager address\n', '     */\n', '    function setPrimaryManager(address _newGM) external onlyManager {\n', '        require (_newGM != address(0));\n', '\n', '        managerPrimary = _newGM;\n', '    }\n', '\n', '    /**\n', '     * @dev Assigns a new address to act as the Secondary Manager.\n', '     * @param _newGM    New Secondary Manager Address\n', '     */\n', '    function setSecondaryManager(address _newGM) external onlyManager {\n', '        require (_newGM != address(0));\n', '\n', '        managerSecondary = _newGM;\n', '    }\n', '\n', '    /**\n', '     * @dev Assigns a new address to act as the Banker.\n', '     * @param _newBK    New Banker Address\n', '     */\n', '    function setBanker(address _newBK) external onlyManager {\n', '        require (_newBK != address(0));\n', '\n', '        bankManager = _newBK;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the Other Manager. (State = 1 is active, 0 is disabled)\n', '    function setOtherManager(address _newOp, uint8 _state) external onlyManager {\n', '        require (_newOp != address(0));\n', '\n', '        otherManagers[_newOp] = _state;\n', '    }\n', '\n', '    /*** Pausable functionality adapted from OpenZeppelin ***/\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS NOT paused\n', '    modifier whenNotPaused() {\n', '        require (!paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS paused\n', '    modifier whenPaused {\n', '        require (paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract has Error\n', '    modifier whenError {\n', '        require (error);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Called by any Operator role to pause the contract.\n', '     * Used only if a bug or exploit is discovered (Here to limit losses / damage)\n', '     */\n', '    function pause() external onlyManager whenNotPaused {\n', '        paused = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Unpauses the smart contract. Can only be called by the Game Master\n', '     */\n', '    function unpause() public onlyManager whenPaused {\n', "        // can't unpause if contract was upgraded\n", '        paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Errors out the contract thus mkaing the contract non-functionable\n', '     */\n', '    function hasError() public onlyManager whenPaused {\n', '        error = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Removes the Error Hold from the contract and resumes it for working\n', '     */\n', '    function noError() public onlyManager whenPaused {\n', '        error = false;\n', '    }\n', '}\n', '\n', '/** Base contract for DodgersNFT Collectibles. Holds all commons, events and base variables.\n', ' * @title Lucid Sight MLB NFT 2018\n', ' * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\n', ' */\n', 'contract CollectibleBase is LSNFT {\n', '\n', '    /*** EVENTS ***/\n', '\n', '    /// @dev Event emitted when an attribute of the player is updated\n', '    event AssetUpdated(uint256 tokenId);\n', '\n', '    /*** STORAGE ***/\n', '\n', '    /// @dev A mapping of Team Id to Team Sequence Number to Collectible\n', '    mapping (uint256 => mapping (uint32 => uint256) ) public nftTeamIdToSequenceIdToCollectible;\n', '\n', '    /// @dev A mapping from Team IDs to the Sequqence Number .\n', '    mapping (uint256 => uint32) public nftTeamIndexToCollectibleCount;\n', '\n', '    /// @dev Array to hold details on attachment for each LS NFT Collectible\n', '    mapping(uint256 => uint256[]) public nftCollectibleAttachments;\n', '\n', '    /// @dev Mapping to control the asset generation per season.\n', '    mapping(uint256 => uint256) public generationSeasonController;\n', '\n', '    /// @dev Mapping for generation Season Dict.\n', '    mapping(uint256 => uint256) public generationSeasonDict;\n', '\n', '    /// @dev internal function to update player override id\n', '    function _updatePlayerOverrideId(uint256 _tokenId, uint256 _newPlayerOverrideId) internal {\n', '\n', '        // Get Token Obj\n', '        NFT storage lsnftObj = allNFTs[_tokenId];\n', '        lsnftObj.playerOverrideId = _newPlayerOverrideId;\n', '\n', '        // Update Token Data with new updated attributes\n', '        allNFTs[_tokenId] = lsnftObj;\n', '\n', '        emit AssetUpdated(_tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev An internal method that helps in generation of new NFT Collectibles\n', '     * @param _teamId           teamId of the asset/token/collectible\n', '     * @param _attributes       attributes of asset/token/collectible\n', '     * @param _owner            owner of asset/token/collectible\n', '     * @param _isAttached       State of the asset (attached or dettached)\n', '     * @param _nftData          Array of data required for creation\n', '     */\n', '    function _createNFTCollectible(\n', '        uint8 _teamId,\n', '        uint256 _attributes,\n', '        address _owner,\n', '        uint256 _isAttached,\n', '        uint256[5] _nftData\n', '    )\n', '        internal\n', '        returns (uint256)\n', '    {\n', '        uint256 generationSeason = (_attributes % 1000000).div(1000);\n', '        require (generationSeasonController[generationSeason] == 1);\n', '\n', '        uint32 _sequenceId = getSequenceId(_teamId);\n', '\n', '        uint256 newNFTCryptoId = _createNFT(_nftData, _owner, _isAttached);\n', '        \n', '        nftTeamIdToSequenceIdToCollectible[_teamId][_sequenceId] = newNFTCryptoId;\n', '        nftTeamIndexToCollectibleCount[_teamId] = _sequenceId;\n', '\n', '        return newNFTCryptoId;\n', '    }\n', '    \n', '    function getSequenceId(uint256 _teamId) internal returns (uint32) {\n', '        return (nftTeamIndexToCollectibleCount[_teamId] + 1);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function, Helps in updating the Creation Stop Time\n', '     * @param _season    Season UINT Code\n', '     * @param _value    0 - Not allowed, 1 - Allowed\n', '     */\n', '    function _updateGenerationSeasonFlag(uint256 _season, uint8 _value) internal {\n', '        generationSeasonController[_season] = _value;\n', '    }\n', '\n', '    /** @param _owner The owner whose ships tokens we are interested in.\n', "      * @dev This method MUST NEVER be called by smart contract code. First, it's fairly\n", '      *  expensive (it walks the entire Collectibles owners array looking for NFT belonging to owner)\n', '    */      \n', '    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\n', '        uint256 tokenCount = balanceOf(_owner);\n', '\n', '        if (tokenCount == 0) {\n', '            // Return an empty array\n', '            return new uint256[](0);\n', '        } else {\n', '            uint256[] memory result = new uint256[](tokenCount);\n', '            uint256 totalItems = balanceOf(_owner);\n', '            uint256 resultIndex = 0;\n', '\n', '            // We count on the fact that all Collectible have IDs starting at 0 and increasing\n', '            // sequentially up to the total count.\n', '            uint256 _assetId;\n', '\n', '            for (_assetId = 0; _assetId < totalItems; _assetId++) {\n', '                result[resultIndex] = tokenOfOwnerByIndex(_owner,_assetId);\n', '                resultIndex++;\n', '            }\n', '\n', '            return result;\n', '        }\n', '    }\n', '\n', '    /// @dev internal function to update MLB player id\n', '    function _updateMLBPlayerId(uint256 _tokenId, uint256 _newMLBPlayerId) internal {\n', '\n', '        // Get Token Obj\n', '        NFT storage lsnftObj = allNFTs[_tokenId];\n', '        \n', '        lsnftObj.mlbPlayerId = _newMLBPlayerId;\n', '\n', '        // Update Token Data with new updated attributes\n', '        allNFTs[_tokenId] = lsnftObj;\n', '\n', '        emit AssetUpdated(_tokenId);\n', '    }\n', '\n', '    /// @dev internal function to update asset earnedBy value for an asset/token\n', '    function _updateEarnedBy(uint256 _tokenId, uint256 _earnedBy) internal {\n', '\n', '        // Get Token Obj\n', '        NFT storage lsnftObj = allNFTs[_tokenId];\n', '        \n', '        lsnftObj.earnedBy = _earnedBy;\n', '\n', '        // Update Token Data with new updated attributes\n', '        allNFTs[_tokenId] = lsnftObj;\n', '\n', '        emit AssetUpdated(_tokenId);\n', '    }\n', '}\n', '\n', '/* Handles creating new Collectibles for promo and seed.\n', ' * @title CollectibleMinting Minting\n', ' * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\n', ' * Inspired and adapted from KittyCore.sol created by Axiom Zen\n', ' * Ref: ETH Contract - 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\n', ' */\n', 'contract CollectibleMinting is CollectibleBase, OperationalControl {\n', '\n', '    uint256 public rewardsRedeemed = 0;\n', '\n', '    /// @dev Counts the number of promo collectibles that can be made per-team\n', '    uint256[31]  public promoCreatedCount;\n', '    \n', '    /// @dev Counts the number of seed collectibles that can be made in total\n', '    uint256 public seedCreatedCount;\n', '\n', '    /// @dev Bool to toggle batch support\n', '    bool public isBatchSupported = true;\n', '    \n', '    /// @dev A mapping of contracts that can trigger functions\n', '    mapping (address => bool) public contractsApprovedList;\n', '    \n', '    /**\n', '     * @dev        Helps to toggle batch supported flag\n', '     * @param      _flag  The flag\n', '     */\n', '    function updateBatchSupport(bool _flag) public onlyManager {\n', '        isBatchSupported = _flag;\n', '    }\n', '\n', '    modifier canCreate() { \n', '        require (contractsApprovedList[msg.sender] || \n', '            msg.sender == managerPrimary ||\n', '            msg.sender == managerSecondary); \n', '        _; \n', '    }\n', '    \n', '    /**\n', '     * @dev Add an address to the Approved List\n', '     * @param _newAddress   The new address to be approved for interaction with the contract\n', '     */\n', '    function addToApproveList(address _newAddress) public onlyManager {\n', '        \n', '        require (!contractsApprovedList[_newAddress]);\n', '        contractsApprovedList[_newAddress] = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Remove an address from Approved List\n', '     * @param _newAddress   The new address to be approved for interaction with the contract\n', '     */\n', '    function removeFromApproveList(address _newAddress) public onlyManager {\n', '        require (contractsApprovedList[_newAddress]);\n', '        delete contractsApprovedList[_newAddress];\n', '    }\n', '\n', '    \n', '    /**\n', '     * @dev Generates promo collectibles. Only callable by Game Master, with isAttached as 0.\n', '     * @notice The generation of an asset if limited via the generationSeasonController\n', '     * @param _teamId           teamId of the asset/token/collectible\n', '     * @param _posId            position of the asset/token/collectible\n', '     * @param _attributes       attributes of asset/token/collectible\n', '     * @param _owner            owner of asset/token/collectible\n', '     * @param _gameId          mlb game Identifier\n', '     * @param _playerOverrideId player override identifier\n', '     * @param _mlbPlayerId      official mlb player identifier\n', '     */\n', '    function createPromoCollectible(\n', '        uint8 _teamId,\n', '        uint8 _posId,\n', '        uint256 _attributes,\n', '        address _owner,\n', '        uint256 _gameId,\n', '        uint256 _playerOverrideId,\n', '        uint256 _mlbPlayerId)\n', '        external\n', '        canCreate\n', '        whenNotPaused\n', '        returns (uint256)\n', '        {\n', '\n', '        address nftOwner = _owner;\n', '        if (nftOwner == address(0)) {\n', '             nftOwner = managerPrimary;\n', '        }\n', '\n', '        if(allNFTs.length > 0) {\n', '            promoCreatedCount[_teamId]++;\n', '        }\n', '        \n', '        uint32 _sequenceId = getSequenceId(_teamId);\n', '        \n', '        uint256 assetDetails = uint256(uint64(now));\n', '        assetDetails |= uint256(_sequenceId)<<64;\n', '        assetDetails |= uint256(_teamId)<<96;\n', '        assetDetails |= uint256(_posId)<<104;\n', '\n', '        uint256[5] memory _nftData = [assetDetails, _attributes, _gameId, _playerOverrideId, _mlbPlayerId];\n', '        \n', '        return _createNFTCollectible(_teamId, _attributes, nftOwner, 0, _nftData);\n', '    }\n', '\n', '    /**\n', '     * @dev Generaes a new single seed Collectible, with isAttached as 0.\n', '     * @notice Helps in creating seed collectible.The generation of an asset if limited via the generationSeasonController\n', '     * @param _teamId           teamId of the asset/token/collectible\n', '     * @param _posId            position of the asset/token/collectible\n', '     * @param _attributes       attributes of asset/token/collectible\n', '     * @param _owner            owner of asset/token/collectible\n', '     * @param _gameId          mlb game Identifier\n', '     * @param _playerOverrideId player override identifier\n', '     * @param _mlbPlayerId      official mlb player identifier\n', '     */\n', '    function createSeedCollectible(\n', '        uint8 _teamId,\n', '        uint8 _posId,\n', '        uint256 _attributes,\n', '        address _owner,\n', '        uint256 _gameId,\n', '        uint256 _playerOverrideId,\n', '        uint256 _mlbPlayerId)\n', '        external\n', '        canCreate\n', '        whenNotPaused\n', '        returns (uint256) {\n', '\n', '        address nftOwner = _owner;\n', '        \n', '        if (nftOwner == address(0)) {\n', '             nftOwner = managerPrimary;\n', '        }\n', '        \n', '        seedCreatedCount++;\n', '        uint32 _sequenceId = getSequenceId(_teamId);\n', '        \n', '        uint256 assetDetails = uint256(uint64(now));\n', '        assetDetails |= uint256(_sequenceId)<<64;\n', '        assetDetails |= uint256(_teamId)<<96;\n', '        assetDetails |= uint256(_posId)<<104;\n', '\n', '        uint256[5] memory _nftData = [assetDetails, _attributes, _gameId, _playerOverrideId, _mlbPlayerId];\n', '        \n', '        return _createNFTCollectible(_teamId, _attributes, nftOwner, 0, _nftData);\n', '    }\n', '\n', '    /**\n', '     * @dev Generate new Reward Collectible and transfer it to the owner, with isAttached as 0.\n', '     * @notice Helps in redeeming the Rewards using our Oracle. Creates & transfers the asset to the redeemer (_owner)\n', '     * The generation of an asset if limited via the generationSeasonController\n', '     * @param _teamId           teamId of the asset/token/collectible\n', '     * @param _posId            position of the asset/token/collectible\n', '     * @param _attributes       attributes of asset/token/collectible\n', '     * @param _owner            owner (redeemer) of asset/token/collectible\n', '     * @param _gameId           mlb game Identifier\n', '     * @param _playerOverrideId player override identifier\n', '     * @param _mlbPlayerId      official mlb player identifier\n', '     */\n', '    function createRewardCollectible (\n', '        uint8 _teamId,\n', '        uint8 _posId,\n', '        uint256 _attributes,\n', '        address _owner,\n', '        uint256 _gameId,\n', '        uint256 _playerOverrideId,\n', '        uint256 _mlbPlayerId)\n', '        external\n', '        canCreate\n', '        whenNotPaused\n', '        returns (uint256) {\n', '\n', '        address nftOwner = _owner;\n', '        \n', '        if (nftOwner == address(0)) {\n', '             nftOwner = managerPrimary;\n', '        }\n', '        \n', '        rewardsRedeemed++;\n', '        uint32 _sequenceId = getSequenceId(_teamId);\n', '        \n', '        uint256 assetDetails = uint256(uint64(now));\n', '        assetDetails |= uint256(_sequenceId)<<64;\n', '        assetDetails |= uint256(_teamId)<<96;\n', '        assetDetails |= uint256(_posId)<<104;\n', '\n', '        uint256[5] memory _nftData = [assetDetails, _attributes, _gameId, _playerOverrideId, _mlbPlayerId];\n', '        \n', '        return _createNFTCollectible(_teamId, _attributes, nftOwner, 0, _nftData);\n', '    }\n', '\n', '    /**\n', '     * @dev Generate new ETH Card Collectible, with isAttached as 2.\n', '     * @notice Helps to generate Collectibles/Tokens/Asset and transfer to ETH Cards,\n', '     * which can be redeemed using our web-app.The generation of an asset if limited via the generationSeasonController\n', '     * @param _teamId           teamId of the asset/token/collectible\n', '     * @param _posId            position of the asset/token/collectible\n', '     * @param _attributes       attributes of asset/token/collectible\n', '     * @param _owner            owner of asset/token/collectible\n', '     * @param _gameId           mlb game Identifier\n', '     * @param _playerOverrideId player override identifier\n', '     * @param _mlbPlayerId      official mlb player identifier\n', '     */\n', '    function createETHCardCollectible (\n', '        uint8 _teamId,\n', '        uint8 _posId,\n', '        uint256 _attributes,\n', '        address _owner,\n', '        uint256 _gameId,\n', '        uint256 _playerOverrideId,\n', '        uint256 _mlbPlayerId)\n', '        external\n', '        canCreate\n', '        whenNotPaused\n', '        returns (uint256) {\n', '\n', '        address nftOwner = _owner;\n', '        \n', '        if (nftOwner == address(0)) {\n', '             nftOwner = managerPrimary;\n', '        }\n', '        \n', '        rewardsRedeemed++;\n', '        uint32 _sequenceId = getSequenceId(_teamId);\n', '        \n', '        uint256 assetDetails = uint256(uint64(now));\n', '        assetDetails |= uint256(_sequenceId)<<64;\n', '        assetDetails |= uint256(_teamId)<<96;\n', '        assetDetails |= uint256(_posId)<<104;\n', '\n', '        uint256[5] memory _nftData = [assetDetails, _attributes, _gameId, _playerOverrideId, _mlbPlayerId];\n', '        \n', '        return _createNFTCollectible(_teamId, _attributes, nftOwner, 2, _nftData);\n', '    }\n', '}\n', '\n', '/* @title Interface for DodgersNFT Contract\n', ' * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\n', ' */\n', 'contract SaleManager {\n', '    function createSale(uint256 _tokenId, uint256 _startingPrice, uint256 _endingPrice, uint256 _duration, address _owner) external;\n', '}\n', '\n', '/**\n', ' * DodgersNFT manages all aspects of the Lucid Sight, Inc. CryptoBaseball.\n', ' * @title DodgersNFT\n', ' * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\n', ' */\n', 'contract DodgersNFT is CollectibleMinting {\n', '    \n', '    /// @dev Set in case the DodgersNFT contract requires an upgrade\n', '    address public newContractAddress;\n', '\n', '    string public constant MLB_Legal = "Major League Baseball trademarks and copyrights are used with permission of the applicable MLB entity.  All rights reserved.";\n', '\n', '    // Time LS Oracle has to respond to detach requests\n', '    uint32 public detachmentTime = 0;\n', '\n', '    // Indicates if attached system is Active (Transfers will be blocked if attached and active)\n', '    bool public attachedSystemActive;\n', '\n', '    // Sale Manager Contract\n', '    SaleManager public saleManagerAddress;\n', '\n', '    /**\n', '     * @dev DodgersNFT constructor.\n', '     */\n', '    constructor() public {\n', '        // Starts paused.\n', '        paused = true;\n', '        managerPrimary = msg.sender;\n', '        managerSecondary = msg.sender;\n', '        bankManager = msg.sender;\n', '        name_ = "LucidSight-DODGERS-NFT";\n', '        symbol_ = "DNFTCB";\n', '    }\n', '\n', '    /**\n', '     * @dev        Sets the address for the NFT Contract\n', '     * @param      _saleManagerAddress  The nft address\n', '     */\n', '    function setSaleManagerAddress(address _saleManagerAddress) public onlyManager {\n', '        require (_saleManagerAddress != address(0));\n', '        saleManagerAddress = SaleManager(_saleManagerAddress);\n', '    }\n', '\n', '    /**\n', '    * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n', '    * @param _tokenId uint256 ID of the token to validate\n', '    */\n', '    modifier canTransfer(uint256 _tokenId) {\n', '        uint256 isAttached = checkIsAttached(_tokenId);\n', '        if(isAttached == 2) {\n', '            //One-Time Auth for Physical Card Transfers\n', '            require (msg.sender == managerPrimary ||\n', '                msg.sender == managerSecondary ||\n', '                msg.sender == bankManager ||\n', '                otherManagers[msg.sender] == 1\n', '            );\n', '            updateIsAttached(_tokenId, 0);\n', '        } else if(attachedSystemActive == true && isAttached >= 1) {\n', '            require (msg.sender == managerPrimary ||\n', '                msg.sender == managerSecondary ||\n', '                msg.sender == bankManager ||\n', '                otherManagers[msg.sender] == 1\n', '            );\n', '        }\n', '        else {\n', '            require (isApprovedOrOwner(msg.sender, _tokenId));\n', '        }\n', '    _;\n', '    }\n', '\n', '    /**\n', '     * @dev Used to mark the smart contract as upgraded, in case of a issue\n', '     * @param _v2Address    The new contract address\n', '     */\n', '    function setNewAddress(address _v2Address) external onlyManager {\n', '        require (_v2Address != address(0));\n', '        newContractAddress = _v2Address;\n', '        emit ContractUpgrade(_v2Address);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns all the relevant information about a specific Collectible.\n', '     * @notice Get details about your collectible\n', '     * @param _tokenId              The token identifier\n', '     * @return isAttached           Is Object attached\n', '     * @return teamId               team identifier of the asset/token/collectible\n', '     * @return positionId           position identifier of the asset/token/collectible\n', '     * @return creationTime         creation timestamp\n', '     * @return attributes           attribute of the asset/token/collectible\n', '     * @return currentGameCardId    current game card of the asset/token/collectible\n', '     * @return mlbGameID            mlb game identifier in which the asset/token/collectible was generated\n', '     * @return playerOverrideId     player override identifier of the asset/token/collectible\n', '     * @return playerStatus         status of the player (Rookie/Veteran/Historical)\n', '     * @return playerHandedness     handedness of the asset\n', '     * @return mlbPlayerId          official MLB Player Identifier\n', '     */\n', '    function getCollectibleDetails(uint256 _tokenId)\n', '        external\n', '        view\n', '        returns (\n', '        uint256 isAttached,\n', '        uint32 sequenceId,\n', '        uint8 teamId,\n', '        uint8 positionId,\n', '        uint64 creationTime,\n', '        uint256 attributes,\n', '        uint256 playerOverrideId,\n', '        uint256 mlbGameId,\n', '        uint256 currentGameCardId,\n', '        uint256 mlbPlayerId,\n', '        uint256 earnedBy,\n', '        uint256 generationSeason\n', '        ) {\n', '        NFT memory obj  = _getAttributesOfToken(_tokenId);\n', '        \n', '        attributes = obj.attributes;\n', '        currentGameCardId = obj.currentGameCardId;\n', '        mlbGameId = obj.mlbGameId;\n', '        playerOverrideId = obj.playerOverrideId;\n', '        mlbPlayerId = obj.mlbPlayerId;\n', '\n', '        creationTime = uint64(obj.assetDetails);\n', '        sequenceId = uint32(obj.assetDetails>>64);\n', '        teamId = uint8(obj.assetDetails>>96);\n', '        positionId = uint8(obj.assetDetails>>104);\n', '        isAttached = obj.isAttached;\n', '        earnedBy = obj.earnedBy;\n', '\n', '        generationSeason = generationSeasonDict[(obj.attributes % 1000000) / 1000];\n', '    }\n', '\n', '    \n', '    /**\n', '     * @dev This is public rather than external so we can call super.unpause\n', '     * without using an expensive CALL.\n', '     */\n', '    function unpause() public onlyManager {\n', '        /// Actually unpause the contract.\n', '        super.unpause();\n', '    }\n', '\n', '    /**\n', '     * @dev Helper function to get the teamID of a collectible.To avoid using getCollectibleDetails\n', '     * @notice Returns the teamID associated with the asset/collectible/token\n', '     * @param _tokenId  The token identifier\n', '     */\n', '    function getTeamId(uint256 _tokenId) external view returns (uint256) {\n', '        NFT memory obj  = _getAttributesOfToken(_tokenId);\n', '\n', '        uint256 teamId = uint256(uint8(obj.assetDetails>>96));\n', '        return uint256(teamId);\n', '    }\n', '\n', '    /**\n', '     * @dev Helper function to get the position of a collectible.To avoid using getCollectibleDetails\n', '     * @notice Returns the position of the asset/collectible/token\n', '     * @param _tokenId  The token identifier\n', '     */\n', '    function getPositionId(uint256 _tokenId) external view returns (uint256) {\n', '        NFT memory obj  = _getAttributesOfToken(_tokenId);\n', '\n', '        uint256 positionId = uint256(uint8(obj.assetDetails>>104));\n', '\n', '        return positionId;\n', '    }\n', '\n', '    /**\n', '     * @dev Helper function to get the game card. To avoid using getCollectibleDetails\n', '     * @notice Returns the gameCard associated with the asset/collectible/token\n', '     * @param _tokenId  The token identifier\n', '     */\n', '    function getGameCardId(uint256 _tokenId) public view returns (uint256) {\n', '        NFT memory obj  = _getAttributesOfToken(_tokenId);\n', '        return obj.currentGameCardId;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns isAttached property value for an asset/collectible/token\n', '     * @param _tokenId  The token identifier\n', '     */\n', '    function checkIsAttached(uint256 _tokenId) public view returns (uint256) {\n', '        NFT memory obj  = _getAttributesOfToken(_tokenId);\n', '        return obj.isAttached;\n', '    }\n', '\n', '    /**\n', '     * @dev Helper function to get the attirbute of the collectible.To avoid using getCollectibleDetails\n', '     * @notice Returns the ability of an asset/collectible/token from attributes.\n', '     * @param _tokenId  The token identifier\n', '     * @return ability  ability of the asset\n', '     */\n', '    function getAbilitiesForCollectibleId(uint256 _tokenId) external view returns (uint256 ability) {\n', '        NFT memory obj  = _getAttributesOfToken(_tokenId);\n', '        uint256 _attributes = uint256(obj.attributes);\n', '        ability = (_attributes % 1000);\n', '    }\n', '\n', '    /**\n', '     * @dev Only allows trasnctions to go throught if the msg.sender is in the apporved list\n', '     * @notice Updates the gameCardID properrty of the asset\n', '     * @param _gameCardNumber  The game card number\n', '     * @param _playerId        The player identifier\n', '     */\n', '    function updateCurrentGameCardId(uint256 _gameCardNumber, uint256 _playerId) public whenNotPaused {\n', '        require (contractsApprovedList[msg.sender]);\n', '\n', '        NFT memory obj  = _getAttributesOfToken(_playerId);\n', '        \n', '        obj.currentGameCardId = _gameCardNumber;\n', '        \n', '        if ( _gameCardNumber == 0 ) {\n', '            obj.isAttached = 0;\n', '        } else {\n', '            obj.isAttached = 1;\n', '        }\n', '\n', '        allNFTs[_playerId] = obj;\n', '    }\n', '\n', '    /**\n', '     * @dev Only Manager can add an attachment (special events) to the collectible\n', '     * @notice Adds an attachment to collectible.\n', '     * @param _tokenId  The token identifier\n', '     * @param _attachment  The attachment\n', '     */\n', '    function addAttachmentToCollectible ( \n', '        uint256 _tokenId,\n', '        uint256 _attachment)\n', '        external\n', '        onlyManager\n', '        whenNotPaused {\n', '        require (exists(_tokenId));\n', '\n', '        nftCollectibleAttachments[_tokenId].push(_attachment);\n', '        emit AssetUpdated(_tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev It will remove the attachment form the collectible. We will need to re-add all attachment(s) if removed.\n', '     * @notice Removes all attachments from collectible.\n', '     * @param _tokenId  The token identifier\n', '     */\n', '    function removeAllAttachmentsFromCollectible(uint256 _tokenId)\n', '        external\n', '        onlyManager\n', '        whenNotPaused {\n', '\n', '        require (exists(_tokenId));\n', '        \n', '        delete nftCollectibleAttachments[_tokenId];\n', '        emit AssetUpdated(_tokenId);\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers the ownership of NFT from one address to another address\n', '     * @dev responsible for gifting assets to other user.\n', '     * @param _to       to address\n', '     * @param _tokenId  The token identifier\n', '     */\n', '    function giftAsset(address _to, uint256 _tokenId) public whenNotPaused {        \n', '        safeTransferFrom(msg.sender, _to, _tokenId);\n', '    }\n', '    \n', '    /**\n', '     * @dev responsible for setting the tokenURI.\n', '     * @notice The user/developper needs to add the tokenID, in the end of URL, to \n', '     * use the URI and get all details. Ex. www.<apiURL>.com/token/<tokenID>\n', '     * @param _tokenURI  The token uri\n', '     */\n', '    function setTokenURIBase (string _tokenURI) public anyOperator {\n', '        _setTokenURIBase(_tokenURI);\n', '    }\n', '\n', '    /**\n', '     * @dev Allowed to be called by onlyGameManager to update a certain collectible playerOverrideID\n', '     * @notice Sets the player override identifier.\n', '     * @param _tokenId      The token identifier\n', '     * @param _newOverrideId     The new player override identifier\n', '     */\n', '    function setPlayerOverrideId(uint256 _tokenId, uint256 _newOverrideId) public onlyManager whenNotPaused {\n', '        require (exists(_tokenId));\n', '\n', '        _updatePlayerOverrideId(_tokenId, _newOverrideId);\n', '    }\n', '\n', '    /**\n', '     * @notice Updates the Generation Season Controller.\n', '     * @dev Allowed to be called by onlyGameManager to update the generation season.\n', '     * this helps to control the generation of collectible.\n', '     * @param _season    Season UINT representation\n', '     * @param _value    0-Not allowed, 1-open, >=2 Locked Forever\n', '     */\n', '    function updateGenerationStopTime(uint256 _season, uint8 _value ) public  onlyManager whenNotPaused {\n', '        require (generationSeasonController[_season] == 1 && _value != 0);\n', '        _updateGenerationSeasonFlag(_season, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev set Generation Season Controller, can only be called by Managers._season can be [0,1,2,3..] and \n', '     * _value can be [0,1,N].\n', '     * @notice _value of 1: means generation of collectible is allowed. anything, apart from 1, wont allow generating assets for that season.\n', '     * @param _season    Season UINT representation\n', '     */\n', '    function setGenerationSeasonController(uint256 _season) public onlyManager whenNotPaused {\n', '        require (generationSeasonController[_season] == 0);\n', '        _updateGenerationSeasonFlag(_season, 1);\n', '    }\n', '\n', '    /**\n', '     * @dev Adding value to DICT helps in showing the season value in getCollectibleDetails\n', '     * @notice Updates the Generation Season Dict.\n', '     * @param _season    Season UINT representation\n', '     * @param _value    0-Not allowed,1-allowed\n', '     */\n', '    function updateGenerationDict(uint256 _season, uint64 _value) public onlyManager whenNotPaused {\n', '        require (generationSeasonDict[_season] <= 1);\n', '        generationSeasonDict[_season] = _value;\n', '    }\n', '\n', '    /**\n', '     * @dev Helper function to avoid calling getCollectibleDetails\n', '     * @notice Gets the MLB player Id from the player attributes\n', '     * @param _tokenId  The token identifier\n', '     * @return playerId  MLB Player Identifier\n', '     */\n', '    function getPlayerId(uint256 _tokenId) external view returns (uint256 playerId) {\n', '        NFT memory obj  = _getAttributesOfToken(_tokenId);\n', '        playerId = ((obj.attributes.div(100000000000000000)) % 1000);\n', '    }\n', '    \n', '    /**\n', '     * @dev Helper function to avoid calling getCollectibleDetails\n', '     * @notice Gets the attachments for an asset\n', '     * @param _tokenId  The token identifier\n', '     * @return attachments\n', '     */\n', '    function getAssetAttachment(uint256 _tokenId) external view returns (uint256[]) {\n', '        uint256[] _attachments = nftCollectibleAttachments[_tokenId];\n', '        uint256[] attachments;\n', '        for(uint i=0;i<_attachments.length;i++){\n', '            attachments.push(_attachments[i]);\n', '        }\n', '        \n', '        return attachments;\n', '    }\n', '\n', '    /**\n', '     * @dev Can only be trigerred by Managers. Updates the earnedBy property of the NFT\n', '     * @notice Helps in updating the earned _by property of an asset/token.\n', '     * @param  _tokenId        asser/token identifier\n', '     * @param  _earnedBy       New asset/token DNA\n', '     */\n', '    function updateEarnedBy(uint256 _tokenId, uint256 _earnedBy) public onlyManager whenNotPaused {\n', '        require (exists(_tokenId));\n', '\n', '        _updateEarnedBy(_tokenId, _earnedBy);\n', '    }\n', '\n', '    /**\n', '     * @dev A batch function to facilitate batching of asset creation. canCreate modifier\n', '     * helps in controlling who can call the function\n', '     * @notice Batch Function to Create Assets\n', '     * @param      _teamId            The team identifier\n', '     * @param      _attributes        The attributes\n', '     * @param      _playerOverrideId  The player override identifier\n', '     * @param      _mlbPlayerId       The mlb player identifier\n', '     * @param      _to                To Address\n', '     */\n', '    function batchCreateAsset(\n', '        uint8[] _teamId,\n', '        uint256[] _attributes,\n', '        uint256[] _playerOverrideId,\n', '        uint256[] _mlbPlayerId,\n', '        address[] _to)\n', '        external\n', '        canCreate\n', '        whenNotPaused {\n', '            require (isBatchSupported);\n', '\n', '            require (_teamId.length > 0 && _attributes.length > 0 && \n', '                _playerOverrideId.length > 0 && _mlbPlayerId.length > 0 && \n', '                _to.length > 0);\n', '\n', '            uint256 assetDetails;\n', '            uint256[5] memory _nftData;\n', '            \n', '            for(uint ii = 0; ii < _attributes.length; ii++){\n', '                require (_to[ii] != address(0) && _teamId[ii] != 0 && _attributes.length != 0 && \n', '                    _mlbPlayerId[ii] != 0);\n', '                \n', '                assetDetails = uint256(uint64(now));\n', '                assetDetails |= uint256(getSequenceId(_teamId[ii]))<<64;\n', '                assetDetails |= uint256(_teamId[ii])<<96;\n', '                assetDetails |= uint256((_attributes[ii]/1000000000000000000000000000000000000000)-800)<<104;\n', '        \n', '                _nftData = [assetDetails, _attributes[ii], 0, _playerOverrideId[ii], _mlbPlayerId[ii]];\n', '                \n', '                _createNFTCollectible(_teamId[ii], _attributes[ii], _to[ii], 0, _nftData);\n', '            }\n', '        }\n', '\n', '    /**\n', '     * @dev A batch function to facilitate batching of asset creation for ETH Cards. canCreate modifier\n', '     * helps in controlling who can call the function\n', '     * @notice        Batch Function to Create Assets\n', '     * @param      _teamId            The team identifier\n', '     * @param      _attributes        The attributes\n', '     * @param      _playerOverrideId  The player override identifier\n', '     * @param      _mlbPlayerId       The mlb player identifier\n', '     * @param      _to                { parameter_description }\n', '     */\n', '    function batchCreateETHCardAsset(\n', '        uint8[] _teamId,\n', '        uint256[] _attributes,\n', '        uint256[] _playerOverrideId,\n', '        uint256[] _mlbPlayerId,\n', '        address[] _to)\n', '        external\n', '        canCreate\n', '        whenNotPaused {\n', '            require (isBatchSupported);\n', '\n', '            require (_teamId.length > 0 && _attributes.length > 0\n', '                        && _playerOverrideId.length > 0 &&\n', '                        _mlbPlayerId.length > 0 && _to.length > 0);\n', '\n', '            uint256 assetDetails;\n', '            uint256[5] memory _nftData;\n', '\n', '            for(uint ii = 0; ii < _attributes.length; ii++){\n', '\n', '                require (_to[ii] != address(0) && _teamId[ii] != 0 && _attributes.length != 0 && \n', '                    _mlbPlayerId[ii] != 0);\n', '        \n', '                assetDetails = uint256(uint64(now));\n', '                assetDetails |= uint256(getSequenceId(_teamId[ii]))<<64;\n', '                assetDetails |= uint256(_teamId[ii])<<96;\n', '                assetDetails |= uint256((_attributes[ii]/1000000000000000000000000000000000000000)-800)<<104;\n', '        \n', '                _nftData = [assetDetails, _attributes[ii], 0, _playerOverrideId[ii], _mlbPlayerId[ii]];\n', '                \n', '                _createNFTCollectible(_teamId[ii], _attributes[ii], _to[ii], 2, _nftData);\n', '            }\n', '        }\n', '\n', '    /**\n', '     * @dev        Overriden TransferFrom, with the modifier canTransfer which uses our attachment system\n', '     * @notice     Helps in trasnferring assets\n', '     * @param      _from     the address sending from\n', '     * @param      _to       the address sending to\n', '     * @param      _tokenId  The token identifier\n', '     */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _tokenId\n', '    )\n', '        public\n', '        canTransfer(_tokenId)\n', '    {\n', '        // Asset should not be in play\n', '        require (checkIsAttached(_tokenId) == 0);\n', '        \n', '        require (_from != address(0));\n', '\n', '        require (_to != address(0));\n', '\n', '        clearApproval(_from, _tokenId);\n', '        removeTokenFrom(_from, _tokenId);\n', '        addTokenTo(_to, _tokenId);\n', '\n', '        emit Transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev     Facilitates batch trasnfer of collectible with multiple TO Address, depending if batch is supported on contract.\n', '     * @notice  Batch Trasnfer with multpple TO addresses\n', '     * @param      _tokenIds  The token identifiers\n', '     * @param      _fromB     the address sending from\n', '     * @param      _toB       the address sending to\n', '     */\n', '    function multiBatchTransferFrom(\n', '        uint256[] _tokenIds, \n', '        address[] _fromB, \n', '        address[] _toB) \n', '        public\n', '    {\n', '        require (isBatchSupported);\n', '\n', '        require (_tokenIds.length > 0 && _fromB.length > 0 && _toB.length > 0);\n', '\n', '        uint256 _id;\n', '        address _to;\n', '        address _from;\n', '        \n', '        for (uint256 i = 0; i < _tokenIds.length; ++i) {\n', '\n', '            require (_tokenIds[i] != 0 && _fromB[i] != 0 && _toB[i] != 0);\n', '\n', '            _id = _tokenIds[i];\n', '            _to = _toB[i];\n', '            _from = _fromB[i];\n', '\n', '            transferFrom(_from, _to, _id);\n', '        }\n', '        \n', '    }\n', '    \n', '    /**\n', '     * @dev     Facilitates batch trasnfer of collectible, depending if batch is supported on contract\n', '     * @notice        Batch TransferFrom with the same to & from address\n', '     * @param      _tokenIds  The asset identifiers\n', '     * @param      _from      the address sending from\n', '     * @param      _to        the address sending to\n', '     */\n', '    function batchTransferFrom(uint256[] _tokenIds, address _from, address _to) \n', '        public\n', '    {\n', '        require (isBatchSupported);\n', '\n', '        require (_tokenIds.length > 0 && _from != address(0) && _to != address(0));\n', '\n', '        uint256 _id;\n', '        \n', '        for (uint256 i = 0; i < _tokenIds.length; ++i) {\n', '            \n', '            require (_tokenIds[i] != 0);\n', '\n', '            _id = _tokenIds[i];\n', '\n', '            transferFrom(_from, _to, _id);\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @dev     Facilitates batch trasnfer of collectible, depending if batch is supported on contract.\n', '     * Checks for collectible 0,address 0 and then performs the transfer\n', '     * @notice        Batch SafeTransferFrom with multiple From and to Addresses\n', '     * @param      _tokenIds  The asset identifiers\n', '     * @param      _fromB     the address sending from\n', '     * @param      _toB       the address sending to\n', '     */\n', '    function multiBatchSafeTransferFrom(\n', '        uint256[] _tokenIds, \n', '        address[] _fromB, \n', '        address[] _toB\n', '        )\n', '        public\n', '    {\n', '        require (isBatchSupported);\n', '\n', '        require (_tokenIds.length > 0 && _fromB.length > 0 && _toB.length > 0);\n', '\n', '        uint256 _id;\n', '        address _to;\n', '        address _from;\n', '        \n', '        for (uint256 i = 0; i < _tokenIds.length; ++i) {\n', '\n', '            require (_tokenIds[i] != 0 && _fromB[i] != 0 && _toB[i] != 0);\n', '\n', '            _id = _tokenIds[i];\n', '            _to  = _toB[i];\n', '            _from  = _fromB[i];\n', '\n', '            safeTransferFrom(_from, _to, _id);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev     Facilitates batch trasnfer of collectible, depending if batch is supported on contract.\n', '     * Checks for collectible 0,address 0 and then performs the transfer\n', '     * @notice        Batch SafeTransferFrom from a single address to another address\n', '     * @param      _tokenIds  The asset identifiers\n', '     * @param      _from     the address sending from\n', '     * @param      _to       the address sending to\n', '     */\n', '    function batchSafeTransferFrom(\n', '        uint256[] _tokenIds, \n', '        address _from, \n', '        address _to\n', '        )\n', '        public\n', '    {   \n', '        require (isBatchSupported);\n', '\n', '        require (_tokenIds.length > 0 && _from != address(0) && _to != address(0));\n', '\n', '        uint256 _id;\n', '        for (uint256 i = 0; i < _tokenIds.length; ++i) {\n', '            require (_tokenIds[i] != 0);\n', '            _id = _tokenIds[i];\n', '            safeTransferFrom(_from, _to, _id);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice     Batch Function to approve the spender\n', '     * @dev        Helps to approve a batch of collectibles \n', '     * @param      _tokenIds  The asset identifiers\n', '     * @param      _spender   The spender\n', '     */\n', '    function batchApprove(\n', '        uint256[] _tokenIds, \n', '        address _spender\n', '        )\n', '        public\n', '    {   \n', '        require (isBatchSupported);\n', '\n', '        require (_tokenIds.length > 0 && _spender != address(0));\n', '        \n', '        uint256 _id;\n', '        for (uint256 i = 0; i < _tokenIds.length; ++i) {\n', '\n', '            require (_tokenIds[i] != 0);\n', '            \n', '            _id = _tokenIds[i];\n', '            approve(_spender, _id);\n', '        }\n', '        \n', '    }\n', '\n', '    /**\n', '     * @dev        Batch Function to mark spender for approved for all. Does a check\n', '     * for address(0) and throws if true\n', '     * @notice     Facilitates batch approveAll\n', '     * @param      _spenders  The spenders\n', '     * @param      _approved  The approved\n', '     */\n', '    function batchSetApprovalForAll(\n', '        address[] _spenders,\n', '        bool _approved\n', '        )\n', '        public\n', '    {   \n', '        require (isBatchSupported);\n', '\n', '        require (_spenders.length > 0);\n', '\n', '        address _spender;\n', '        for (uint256 i = 0; i < _spenders.length; ++i) {        \n', '\n', '            require (address(_spenders[i]) != address(0));\n', '                \n', '            _spender = _spenders[i];\n', '            setApprovalForAll(_spender, _approved);\n', '        }\n', '    }  \n', '    \n', '    /**\n', '     * @dev        Function to request Detachment from our Contract\n', '     * @notice     a wallet can request to detach it collectible, so, that it can be used in other third-party contracts.\n', '     * @param      _tokenId  The token identifier\n', '     */\n', '    function requestDetachment(\n', '        uint256 _tokenId\n', '    )\n', '        public\n', '    {\n', '        //Request can only be made by owner or approved address\n', '        require (isApprovedOrOwner(msg.sender, _tokenId));\n', '\n', '        uint256 isAttached = checkIsAttached(_tokenId);\n', '\n', '        //If collectible is on a gamecard prevent detachment\n', '        require(getGameCardId(_tokenId) == 0);\n', '\n', '        require (isAttached >= 1);\n', '\n', '        if(attachedSystemActive == true) {\n', '            //Checks to see if request was made and if time elapsed\n', '            if(isAttached > 1 && block.timestamp - isAttached > detachmentTime) {\n', '                isAttached = 0;\n', '            } else if(isAttached > 1) {\n', '                //Forces Tx Fail if time is already set for attachment and not less than detachmentTime\n', '                require (isAttached == 1);\n', '            } else {\n', '                //Is attached, set detachment time and make request to detach\n', '                // emit AssetUpdated(_tokenId);\n', '                isAttached = block.timestamp;\n', '            }\n', '        } else {\n', '            isAttached = 0;\n', '        }\n', '\n', '        updateIsAttached(_tokenId, isAttached);\n', '    }\n', '\n', '    /**\n', '     * @dev        Function to attach the asset, thus, restricting transfer\n', '     * @notice     Attaches the collectible to our contract\n', '     * @param      _tokenId  The token identifier\n', '     */\n', '    function attachAsset(\n', '        uint256 _tokenId\n', '    )\n', '        public\n', '        canTransfer(_tokenId)\n', '    {\n', '        uint256 isAttached = checkIsAttached(_tokenId);\n', '\n', '        require (isAttached == 0);\n', '        isAttached = 1;\n', '\n', '        updateIsAttached(_tokenId, isAttached);\n', '\n', '        emit AssetUpdated(_tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev        Batch attach function\n', '     * @param      _tokenIds  The identifiers\n', '     */\n', '    function batchAttachAssets(uint256[] _tokenIds) public {\n', '        require (isBatchSupported);\n', '\n', '        for(uint i = 0; i < _tokenIds.length; i++) {\n', '            attachAsset(_tokenIds[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev        Batch detach function\n', '     * @param      _tokenIds  The identifiers\n', '     */\n', '    function batchDetachAssets(uint256[] _tokenIds) public {\n', '        require (isBatchSupported);\n', '\n', '        for(uint i = 0; i < _tokenIds.length; i++) {\n', '            requestDetachment(_tokenIds[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev        Function to facilitate detachment when contract is paused\n', '     * @param      _tokenId  The identifiers\n', '     */\n', '    function requestDetachmentOnPause (uint256 _tokenId) public whenPaused {\n', '        //Request can only be made by owner or approved address\n', '        require (isApprovedOrOwner(msg.sender, _tokenId));\n', '\n', '        updateIsAttached(_tokenId, 0);\n', '    }\n', '\n', '    /**\n', '     * @dev        Toggle the Attachment Switch\n', '     * @param      _state  The state\n', '     */\n', '    function toggleAttachedEnforcement (bool _state) public onlyManager {\n', '        attachedSystemActive = _state;\n', '    }\n', '\n', '    /**\n', '     * @dev        Set Attachment Time Period (this restricts user from continuously trigger detachment)\n', '     * @param      _time  The time\n', '     */\n', '    function setDetachmentTime (uint256 _time) public onlyManager {\n', '        //Detactment Time can not be set greater than 2 weeks.\n', '        require (_time <= 1209600);\n', '        detachmentTime = uint32(_time);\n', '    }\n', '\n', '    /**\n', '     * @dev        Detach Asset From System\n', '     * @param      _tokenId  The token iddentifier\n', '     */\n', '    function setNFTDetached(uint256 _tokenId) public anyOperator {\n', '        require (checkIsAttached(_tokenId) > 0);\n', '\n', '        updateIsAttached(_tokenId, 0);\n', '    }\n', '\n', '    /**\n', '     * @dev        Batch function to detach multiple assets\n', '     * @param      _tokenIds  The token identifiers\n', '     */\n', '    function setBatchDetachCollectibles(uint256[] _tokenIds) public anyOperator {\n', '        uint256 _id;\n', '        for(uint i = 0; i < _tokenIds.length; i++) {\n', '            _id = _tokenIds[i];\n', '            setNFTDetached(_id);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev        Function to update attach value\n', '     * @param      _tokenId     The asset id\n', '     * @param      _isAttached  Indicates if attached\n', '     */\n', '    function updateIsAttached(uint256 _tokenId, uint256 _isAttached) internal {\n', '        NFT memory obj  = _getAttributesOfToken(_tokenId);\n', '        \n', '        obj.isAttached = _isAttached;\n', '    \n', '        allNFTs[_tokenId] = obj;\n', '        emit AssetUpdated(_tokenId);\n', '    }\n', '\n', '    /**\n', '    * @dev   Facilitates Creating Sale using the Sale Contract. Forces owner check & collectibleId check\n', '    * @notice Helps a wallet to create a sale using our Sale Contract\n', '    * @param      _tokenId        The token identifier\n', '    * @param      _startingPrice  The starting price\n', '    * @param      _endingPrice    The ending price\n', '    * @param      _duration       The duration\n', '    */\n', '    function initiateCreateSale(uint256 _tokenId, uint256 _startingPrice, uint256 _endingPrice, uint256 _duration) external {\n', '        require (_tokenId != 0);\n', '        \n', '        // If DodgersNFT is already on any sale, this will throw\n', '        // because it will be owned by the sale contract.\n', '        address owner = ownerOf(_tokenId);\n', '        require (owner == msg.sender);\n', '\n', '        // Sale contract checks input sizes\n', '        require (_startingPrice == _startingPrice);\n', '        require (_endingPrice == _endingPrice);\n', '        require (_duration == _duration);\n', '\n', '        require (checkIsAttached(_tokenId) == 0);\n', '        \n', '        // One time approval for the tokenID\n', '        _approveForSale(msg.sender, address(saleManagerAddress), _tokenId);\n', '\n', '        saleManagerAddress.createSale(_tokenId, _startingPrice, _endingPrice, _duration, msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev        Facilitates batch auction of collectibles, and enforeces strict checking on the collectibleId,starting/ending price, duration.\n', '     * @notice     Batch function to put 10 or less collectibles on sale\n', '     * @param      _tokenIds        The token identifier\n', '     * @param      _startingPrices  The starting price\n', '     * @param      _endingPrices    The ending price\n', '     * @param      _durations       The duration\n', '     */\n', '    function batchCreateAssetSale(uint256[] _tokenIds, uint256[] _startingPrices, uint256[] _endingPrices, uint256[] _durations) external whenNotPaused {\n', '\n', '        require (_tokenIds.length > 0 && _startingPrices.length > 0 && _endingPrices.length > 0 && _durations.length > 0);\n', '        \n', '        // Sale contract checks input sizes\n', '        for(uint ii = 0; ii < _tokenIds.length; ii++){\n', '\n', '            // Do not process for tokenId 0\n', '            require (_tokenIds[ii] != 0);\n', '            \n', '            require (_startingPrices[ii] == _startingPrices[ii]);\n', '            require (_endingPrices[ii] == _endingPrices[ii]);\n', '            require (_durations[ii] == _durations[ii]);\n', '\n', '            // If DodgersNFT is already on any sale, this will throw\n', '            // because it will be owned by the sale contract.\n', '            address _owner = ownerOf(_tokenIds[ii]);\n', '            address _msgSender = msg.sender;\n', '            require (_owner == _msgSender);\n', '\n', '            // Check whether the collectible is inPlay. If inPlay cant put it on Sale\n', '            require (checkIsAttached(_tokenIds[ii]) == 0);\n', '            \n', '            // approve token to for Sale creation\n', '            _approveForSale(msg.sender, address(saleManagerAddress), _tokenIds[ii]);\n', '            \n', '            saleManagerAddress.createSale(_tokenIds[ii], _startingPrices[ii], _endingPrices[ii], _durations[ii], msg.sender);\n', '        }\n', '    }\n', '}']
