['pragma solidity ^0.4.24;\n', '//pragma experimental ABIEncoderV2;\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: contracts/registry/BancorBuyer.sol\n', '\n', '//pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', '\n', 'contract IMultiToken {\n', '    function tokensCount() external view returns(uint16 count);\n', '    function tokens(uint256 i) public view returns(ERC20);\n', '    function weights(address t) public view returns(uint256);\n', '    function totalSupply() public view returns(uint256);\n', '    function bundle(address _to, uint256 _amount) public;\n', '}\n', '\n', '\n', 'contract BancorBuyer {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) public balances;\n', '    mapping(address => mapping(address => uint256)) public tokenBalances; // [owner][token]\n', '\n', '    function sumWeightOfMultiToken(IMultiToken mtkn) public view returns(uint256 sumWeight) {\n', '        for (uint i = mtkn.tokensCount(); i > 0; i--) {\n', '            sumWeight += mtkn.weights(mtkn.tokens(i - 1));\n', '        }\n', '    }\n', '    \n', '    function allBalances(address _account, address[] _tokens) public view returns(uint256[]) {\n', '        uint256[] memory tokenValues = new uint256[](_tokens.length);\n', '        for (uint i = 0; i < _tokens.length; i++) {\n', '            tokenValues[i] = tokenBalances[_account][_tokens[i]];\n', '        }\n', '        return tokenValues;\n', '    }\n', '\n', '    function deposit(address _beneficiary, address[] _tokens, uint256[] _tokenValues) payable external {\n', '        if (msg.value > 0) {\n', '            balances[_beneficiary] = balances[_beneficiary].add(msg.value);\n', '        }\n', '\n', '        for (uint i = 0; i < _tokens.length; i++) {\n', '            ERC20 token = ERC20(_tokens[i]);\n', '            uint256 tokenValue = _tokenValues[i];\n', '\n', '            uint256 balance = token.balanceOf(this);\n', '            token.transferFrom(msg.sender, this, tokenValue);\n', '            require(token.balanceOf(this) == balance.add(tokenValue));\n', '            tokenBalances[_beneficiary][token] = tokenBalances[_beneficiary][token].add(tokenValue);\n', '        }\n', '    }\n', '    \n', '    function withdrawInternal(address _to, uint256 _value, address[] _tokens, uint256[] _tokenValues) internal {\n', '        if (_value > 0) {\n', '            _to.transfer(_value);\n', '            balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        }\n', '\n', '        for (uint i = 0; i < _tokens.length; i++) {\n', '            ERC20 token = ERC20(_tokens[i]);\n', '            uint256 tokenValue = _tokenValues[i];\n', '\n', '            uint256 tokenBalance = token.balanceOf(this);\n', '            token.transfer(_to, tokenValue);\n', '            require(token.balanceOf(this) == tokenBalance.sub(tokenValue));\n', '            tokenBalances[msg.sender][token] = tokenBalances[msg.sender][token].sub(tokenValue);\n', '        }\n', '    }\n', '\n', '    function withdraw(address _to, uint256 _value, address[] _tokens, uint256[] _tokenValues) external {\n', '        withdrawInternal(_to, _value, _tokens, _tokenValues);\n', '    }\n', '    \n', '    function withdrawAll(address _to, address[] _tokens) external {\n', '        uint256[] memory tokenValues = allBalances(msg.sender, _tokens);\n', '        withdrawInternal(_to, balances[msg.sender], _tokens, tokenValues);\n', '    }\n', '\n', '    // function approveAndCall(address _to, uint256 _value, bytes _data, address[] _tokens, uint256[] _tokenValues) payable external {\n', '    //     uint256[] memory tempBalances = new uint256[](_tokens.length);\n', '    //     for (uint i = 0; i < _tokens.length; i++) {\n', '    //         ERC20 token = ERC20(_tokens[i]);\n', '    //         uint256 tokenValue = _tokenValues[i];\n', '\n', '    //         tempBalances[i] = token.balanceOf(this);\n', '    //         token.approve(_to, tokenValue);\n', '    //     }\n', '\n', '    //     require(_to.call.value(_value)(_data));\n', '    //     balances[msg.sender] = balances[msg.sender].add(msg.value).sub(_value);\n', '\n', '    //     for (i = 0; i < _tokens.length; i++) {\n', '    //         token = ERC20(_tokens[i]);\n', '    //         tokenValue = _tokenValues[i];\n', '\n', '    //         uint256 tokenSpent = tempBalances[i].sub(token.balanceOf(this));\n', '    //         tokenBalances[msg.sender][token] = tokenBalances[msg.sender][token].sub(tokenSpent);\n', '    //         token.approve(_to, 0);\n', '    //     }\n', '    // }\n', '    \n', '    function buyInternal(\n', '        ERC20 token,\n', '        address _exchange,\n', '        uint256 _value,\n', '        bytes _data\n', '    ) \n', '        internal\n', '    {\n', '        require(\n', '            // 0xa9059cbb - transfer(address,uint256)\n', '            !(_data[0] == 0xa9 && _data[1] == 0x05 && _data[2] == 0x9c && _data[3] == 0xbb) &&\n', '            // 0x095ea7b3 - approve(address,uint256)\n', '            !(_data[0] == 0x09 && _data[1] == 0x5e && _data[2] == 0xa7 && _data[3] == 0xb3) &&\n', '            // 0x23b872dd - transferFrom(address,address,uint256)\n', '            !(_data[0] == 0x23 && _data[1] == 0xb8 && _data[2] == 0x72 && _data[3] == 0xdd),\n', '            "buyInternal: Do not try to call transfer, approve or transferFrom"\n', '        );\n', '        uint256 tokenBalance = token.balanceOf(this);\n', '        require(_exchange.call.value(_value)(_data));\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        tokenBalances[msg.sender][token] = tokenBalances[msg.sender][token]\n', '            .add(token.balanceOf(this).sub(tokenBalance));\n', '    }\n', '    \n', '    function mintInternal(\n', '        IMultiToken _mtkn,\n', '        uint256[] _notUsedValues\n', '    ) \n', '        internal\n', '    {\n', '        uint256 totalSupply = _mtkn.totalSupply();\n', '        uint256 bestAmount = uint256(-1);\n', '        uint256 tokensCount = _mtkn.tokensCount();\n', '        for (uint i = 0; i < tokensCount; i++) {\n', '            ERC20 token = _mtkn.tokens(i);\n', '\n', '            // Approve XXX to mtkn\n', '            uint256 thisTokenBalance = tokenBalances[msg.sender][token];\n', '            uint256 mtknTokenBalance = token.balanceOf(_mtkn);\n', '            _notUsedValues[i] = token.balanceOf(this);\n', '            token.approve(_mtkn, thisTokenBalance);\n', '            \n', '            uint256 amount = totalSupply.mul(thisTokenBalance).div(mtknTokenBalance);\n', '            if (amount < bestAmount) {\n', '                bestAmount = amount;\n', '            }\n', '        }\n', '\n', '        // Mint mtkn\n', '        _mtkn.bundle(msg.sender, bestAmount);\n', '        \n', '        for (i = 0; i < tokensCount; i++) {\n', '            token = _mtkn.tokens(i);\n', '            token.approve(_mtkn, 0);\n', '            tokenBalances[msg.sender][token] = tokenBalances[msg.sender][token]\n', '                .sub(_notUsedValues[i].sub(token.balanceOf(this)));\n', '        }\n', '    }\n', '    \n', '    ////////////////////////////////////////////////////////////////\n', '    \n', '    function buy10(\n', '        address[] _tokens,\n', '        address[] _exchanges,\n', '        uint256[] _values,\n', '        bytes _data1,\n', '        bytes _data2,\n', '        bytes _data3,\n', '        bytes _data4,\n', '        bytes _data5,\n', '        bytes _data6,\n', '        bytes _data7,\n', '        bytes _data8,\n', '        bytes _data9,\n', '        bytes _data10\n', '    ) \n', '        payable\n', '        public\n', '    {\n', '        balances[msg.sender] = balances[msg.sender].add(msg.value);\n', '        buyInternal(ERC20(_tokens[0]), _exchanges[0], _values[0], _data1);\n', '        if (_tokens.length == 1) {\n', '            return;\n', '        }\n', '        buyInternal(ERC20(_tokens[1]), _exchanges[1], _values[1], _data2);\n', '        if (_tokens.length == 2) {\n', '            return;\n', '        }\n', '        buyInternal(ERC20(_tokens[2]), _exchanges[2], _values[2], _data3);\n', '        if (_tokens.length == 3) {\n', '            return;\n', '        }\n', '        buyInternal(ERC20(_tokens[3]), _exchanges[3], _values[3], _data4);\n', '        if (_tokens.length == 4) {\n', '            return;\n', '        }\n', '        buyInternal(ERC20(_tokens[4]), _exchanges[4], _values[4], _data5);\n', '        if (_tokens.length == 5) {\n', '            return;\n', '        }\n', '        buyInternal(ERC20(_tokens[5]), _exchanges[5], _values[5], _data6);\n', '        if (_tokens.length == 6) {\n', '            return;\n', '        }\n', '        buyInternal(ERC20(_tokens[6]), _exchanges[6], _values[6], _data7);\n', '        if (_tokens.length == 7) {\n', '            return;\n', '        }\n', '        buyInternal(ERC20(_tokens[7]), _exchanges[7], _values[7], _data8);\n', '        if (_tokens.length == 8) {\n', '            return;\n', '        }\n', '        buyInternal(ERC20(_tokens[8]), _exchanges[8], _values[8], _data9);\n', '        if (_tokens.length == 9) {\n', '            return;\n', '        }\n', '        buyInternal(ERC20(_tokens[9]), _exchanges[9], _values[9], _data10);\n', '    }\n', '    \n', '    ////////////////////////////////////////////////////////////////\n', '    \n', '    function buy10mint(\n', '        IMultiToken _mtkn,\n', '        address[] _tokens,\n', '        address[] _exchanges,\n', '        uint256[] _values,\n', '        bytes _data1,\n', '        bytes _data2,\n', '        bytes _data3,\n', '        bytes _data4,\n', '        bytes _data5,\n', '        bytes _data6,\n', '        bytes _data7,\n', '        bytes _data8,\n', '        bytes _data9,\n', '        bytes _data10\n', '    ) \n', '        payable\n', '        public\n', '    {\n', '        buy10(_tokens, _exchanges, _values, _data1, _data2, _data3, _data4, _data5, _data6, _data7, _data8, _data9, _data10);\n', '        mintInternal(_mtkn, _values);\n', '    }\n', '    \n', '    ////////////////////////////////////////////////////////////////\n', '    \n', '    function buyOne(\n', '        address _token,\n', '        address _exchange,\n', '        uint256 _value,\n', '        bytes _data\n', '    ) \n', '        payable\n', '        public\n', '    {\n', '        balances[msg.sender] = balances[msg.sender].add(msg.value);\n', '        buyInternal(ERC20(_token), _exchange, _value, _data);\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '//pragma experimental ABIEncoderV2;\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: contracts/registry/BancorBuyer.sol\n', '\n', '//pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', '\n', 'contract IMultiToken {\n', '    function tokensCount() external view returns(uint16 count);\n', '    function tokens(uint256 i) public view returns(ERC20);\n', '    function weights(address t) public view returns(uint256);\n', '    function totalSupply() public view returns(uint256);\n', '    function bundle(address _to, uint256 _amount) public;\n', '}\n', '\n', '\n', 'contract BancorBuyer {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) public balances;\n', '    mapping(address => mapping(address => uint256)) public tokenBalances; // [owner][token]\n', '\n', '    function sumWeightOfMultiToken(IMultiToken mtkn) public view returns(uint256 sumWeight) {\n', '        for (uint i = mtkn.tokensCount(); i > 0; i--) {\n', '            sumWeight += mtkn.weights(mtkn.tokens(i - 1));\n', '        }\n', '    }\n', '    \n', '    function allBalances(address _account, address[] _tokens) public view returns(uint256[]) {\n', '        uint256[] memory tokenValues = new uint256[](_tokens.length);\n', '        for (uint i = 0; i < _tokens.length; i++) {\n', '            tokenValues[i] = tokenBalances[_account][_tokens[i]];\n', '        }\n', '        return tokenValues;\n', '    }\n', '\n', '    function deposit(address _beneficiary, address[] _tokens, uint256[] _tokenValues) payable external {\n', '        if (msg.value > 0) {\n', '            balances[_beneficiary] = balances[_beneficiary].add(msg.value);\n', '        }\n', '\n', '        for (uint i = 0; i < _tokens.length; i++) {\n', '            ERC20 token = ERC20(_tokens[i]);\n', '            uint256 tokenValue = _tokenValues[i];\n', '\n', '            uint256 balance = token.balanceOf(this);\n', '            token.transferFrom(msg.sender, this, tokenValue);\n', '            require(token.balanceOf(this) == balance.add(tokenValue));\n', '            tokenBalances[_beneficiary][token] = tokenBalances[_beneficiary][token].add(tokenValue);\n', '        }\n', '    }\n', '    \n', '    function withdrawInternal(address _to, uint256 _value, address[] _tokens, uint256[] _tokenValues) internal {\n', '        if (_value > 0) {\n', '            _to.transfer(_value);\n', '            balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        }\n', '\n', '        for (uint i = 0; i < _tokens.length; i++) {\n', '            ERC20 token = ERC20(_tokens[i]);\n', '            uint256 tokenValue = _tokenValues[i];\n', '\n', '            uint256 tokenBalance = token.balanceOf(this);\n', '            token.transfer(_to, tokenValue);\n', '            require(token.balanceOf(this) == tokenBalance.sub(tokenValue));\n', '            tokenBalances[msg.sender][token] = tokenBalances[msg.sender][token].sub(tokenValue);\n', '        }\n', '    }\n', '\n', '    function withdraw(address _to, uint256 _value, address[] _tokens, uint256[] _tokenValues) external {\n', '        withdrawInternal(_to, _value, _tokens, _tokenValues);\n', '    }\n', '    \n', '    function withdrawAll(address _to, address[] _tokens) external {\n', '        uint256[] memory tokenValues = allBalances(msg.sender, _tokens);\n', '        withdrawInternal(_to, balances[msg.sender], _tokens, tokenValues);\n', '    }\n', '\n', '    // function approveAndCall(address _to, uint256 _value, bytes _data, address[] _tokens, uint256[] _tokenValues) payable external {\n', '    //     uint256[] memory tempBalances = new uint256[](_tokens.length);\n', '    //     for (uint i = 0; i < _tokens.length; i++) {\n', '    //         ERC20 token = ERC20(_tokens[i]);\n', '    //         uint256 tokenValue = _tokenValues[i];\n', '\n', '    //         tempBalances[i] = token.balanceOf(this);\n', '    //         token.approve(_to, tokenValue);\n', '    //     }\n', '\n', '    //     require(_to.call.value(_value)(_data));\n', '    //     balances[msg.sender] = balances[msg.sender].add(msg.value).sub(_value);\n', '\n', '    //     for (i = 0; i < _tokens.length; i++) {\n', '    //         token = ERC20(_tokens[i]);\n', '    //         tokenValue = _tokenValues[i];\n', '\n', '    //         uint256 tokenSpent = tempBalances[i].sub(token.balanceOf(this));\n', '    //         tokenBalances[msg.sender][token] = tokenBalances[msg.sender][token].sub(tokenSpent);\n', '    //         token.approve(_to, 0);\n', '    //     }\n', '    // }\n', '    \n', '    function buyInternal(\n', '        ERC20 token,\n', '        address _exchange,\n', '        uint256 _value,\n', '        bytes _data\n', '    ) \n', '        internal\n', '    {\n', '        require(\n', '            // 0xa9059cbb - transfer(address,uint256)\n', '            !(_data[0] == 0xa9 && _data[1] == 0x05 && _data[2] == 0x9c && _data[3] == 0xbb) &&\n', '            // 0x095ea7b3 - approve(address,uint256)\n', '            !(_data[0] == 0x09 && _data[1] == 0x5e && _data[2] == 0xa7 && _data[3] == 0xb3) &&\n', '            // 0x23b872dd - transferFrom(address,address,uint256)\n', '            !(_data[0] == 0x23 && _data[1] == 0xb8 && _data[2] == 0x72 && _data[3] == 0xdd),\n', '            "buyInternal: Do not try to call transfer, approve or transferFrom"\n', '        );\n', '        uint256 tokenBalance = token.balanceOf(this);\n', '        require(_exchange.call.value(_value)(_data));\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        tokenBalances[msg.sender][token] = tokenBalances[msg.sender][token]\n', '            .add(token.balanceOf(this).sub(tokenBalance));\n', '    }\n', '    \n', '    function mintInternal(\n', '        IMultiToken _mtkn,\n', '        uint256[] _notUsedValues\n', '    ) \n', '        internal\n', '    {\n', '        uint256 totalSupply = _mtkn.totalSupply();\n', '        uint256 bestAmount = uint256(-1);\n', '        uint256 tokensCount = _mtkn.tokensCount();\n', '        for (uint i = 0; i < tokensCount; i++) {\n', '            ERC20 token = _mtkn.tokens(i);\n', '\n', '            // Approve XXX to mtkn\n', '            uint256 thisTokenBalance = tokenBalances[msg.sender][token];\n', '            uint256 mtknTokenBalance = token.balanceOf(_mtkn);\n', '            _notUsedValues[i] = token.balanceOf(this);\n', '            token.approve(_mtkn, thisTokenBalance);\n', '            \n', '            uint256 amount = totalSupply.mul(thisTokenBalance).div(mtknTokenBalance);\n', '            if (amount < bestAmount) {\n', '                bestAmount = amount;\n', '            }\n', '        }\n', '\n', '        // Mint mtkn\n', '        _mtkn.bundle(msg.sender, bestAmount);\n', '        \n', '        for (i = 0; i < tokensCount; i++) {\n', '            token = _mtkn.tokens(i);\n', '            token.approve(_mtkn, 0);\n', '            tokenBalances[msg.sender][token] = tokenBalances[msg.sender][token]\n', '                .sub(_notUsedValues[i].sub(token.balanceOf(this)));\n', '        }\n', '    }\n', '    \n', '    ////////////////////////////////////////////////////////////////\n', '    \n', '    function buy10(\n', '        address[] _tokens,\n', '        address[] _exchanges,\n', '        uint256[] _values,\n', '        bytes _data1,\n', '        bytes _data2,\n', '        bytes _data3,\n', '        bytes _data4,\n', '        bytes _data5,\n', '        bytes _data6,\n', '        bytes _data7,\n', '        bytes _data8,\n', '        bytes _data9,\n', '        bytes _data10\n', '    ) \n', '        payable\n', '        public\n', '    {\n', '        balances[msg.sender] = balances[msg.sender].add(msg.value);\n', '        buyInternal(ERC20(_tokens[0]), _exchanges[0], _values[0], _data1);\n', '        if (_tokens.length == 1) {\n', '            return;\n', '        }\n', '        buyInternal(ERC20(_tokens[1]), _exchanges[1], _values[1], _data2);\n', '        if (_tokens.length == 2) {\n', '            return;\n', '        }\n', '        buyInternal(ERC20(_tokens[2]), _exchanges[2], _values[2], _data3);\n', '        if (_tokens.length == 3) {\n', '            return;\n', '        }\n', '        buyInternal(ERC20(_tokens[3]), _exchanges[3], _values[3], _data4);\n', '        if (_tokens.length == 4) {\n', '            return;\n', '        }\n', '        buyInternal(ERC20(_tokens[4]), _exchanges[4], _values[4], _data5);\n', '        if (_tokens.length == 5) {\n', '            return;\n', '        }\n', '        buyInternal(ERC20(_tokens[5]), _exchanges[5], _values[5], _data6);\n', '        if (_tokens.length == 6) {\n', '            return;\n', '        }\n', '        buyInternal(ERC20(_tokens[6]), _exchanges[6], _values[6], _data7);\n', '        if (_tokens.length == 7) {\n', '            return;\n', '        }\n', '        buyInternal(ERC20(_tokens[7]), _exchanges[7], _values[7], _data8);\n', '        if (_tokens.length == 8) {\n', '            return;\n', '        }\n', '        buyInternal(ERC20(_tokens[8]), _exchanges[8], _values[8], _data9);\n', '        if (_tokens.length == 9) {\n', '            return;\n', '        }\n', '        buyInternal(ERC20(_tokens[9]), _exchanges[9], _values[9], _data10);\n', '    }\n', '    \n', '    ////////////////////////////////////////////////////////////////\n', '    \n', '    function buy10mint(\n', '        IMultiToken _mtkn,\n', '        address[] _tokens,\n', '        address[] _exchanges,\n', '        uint256[] _values,\n', '        bytes _data1,\n', '        bytes _data2,\n', '        bytes _data3,\n', '        bytes _data4,\n', '        bytes _data5,\n', '        bytes _data6,\n', '        bytes _data7,\n', '        bytes _data8,\n', '        bytes _data9,\n', '        bytes _data10\n', '    ) \n', '        payable\n', '        public\n', '    {\n', '        buy10(_tokens, _exchanges, _values, _data1, _data2, _data3, _data4, _data5, _data6, _data7, _data8, _data9, _data10);\n', '        mintInternal(_mtkn, _values);\n', '    }\n', '    \n', '    ////////////////////////////////////////////////////////////////\n', '    \n', '    function buyOne(\n', '        address _token,\n', '        address _exchange,\n', '        uint256 _value,\n', '        bytes _data\n', '    ) \n', '        payable\n', '        public\n', '    {\n', '        balances[msg.sender] = balances[msg.sender].add(msg.value);\n', '        buyInternal(ERC20(_token), _exchange, _value, _data);\n', '    }\n', '}']
