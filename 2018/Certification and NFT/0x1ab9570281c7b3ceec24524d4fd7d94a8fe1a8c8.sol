['pragma solidity 0.4.23;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     */\n', '    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '        assert(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '        assert(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '        assert(token.approve(spender, value));\n', '    }\n', '}\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TokenTimelock {\n', '    using SafeERC20 for ERC20Basic;\n', '\n', '    // ERC20 basic token contract being held\n', '    ERC20Basic public token;\n', '\n', '    // beneficiary of tokens after they are released\n', '    address public beneficiary;\n', '\n', '    // timestamp when token release is enabled\n', '    uint64 public releaseTime;\n', '\n', '    constructor(ERC20Basic _token, address _beneficiary, uint64 _releaseTime) public {\n', '        require(_releaseTime > uint64(block.timestamp));\n', '        token = _token;\n', '        beneficiary = _beneficiary;\n', '        releaseTime = _releaseTime;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers tokens held by timelock to beneficiary.\n', '     */\n', '    function release() public {\n', '        require(uint64(block.timestamp) >= releaseTime);\n', '\n', '        uint256 amount = token.balanceOf(this);\n', '        require(amount > 0);\n', '\n', '        token.safeTransfer(beneficiary, amount);\n', '    }\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract ReferralDiscountToken is StandardToken, Owned {\n', '    /// Store the referrers by the referred addresses\n', '    mapping(address => address) referrerOf;\n', '    address[] ownersIndex;\n', '\n', '    // Emitted when an investor declares his referrer\n', '    event Referral(address indexed referred, address indexed referrer);\n', '\n', '    /// Compute the earned discount, topped at 60%\n', '    function referralDiscountPercentage(address _owner) public view returns (uint256 percent) {\n', '        uint256 total = 0;\n', '\n', '        /// get one time discount for having been referred\n', '        if(referrerOf[_owner] != address(0)) {\n', '            total = total.add(10);\n', '        }\n', '\n', '        /// get a 10% discount for each one referred\n', '        for(uint256 i = 0; i < ownersIndex.length; i++) {\n', '            if(referrerOf[ownersIndex[i]] == _owner) {\n', '                total = total.add(10);\n', '                // if(total >= 60) break;\n', '            }\n', '        }\n', '\n', '        return total;\n', '    }\n', '\n', '    // /**\n', '    //  * Activate referral discounts by declaring one&#39;s own referrer\n', '    //  * @param _referrer can&#39;t be self\n', '    //  * @param _referrer must own tokens at the time of the call\n', '    //  * You must own tokens at the time of the call\n', '    //  */\n', '    // function setReferrer(address _referrer) public returns (bool success) {\n', '    //     require(_referrer != address(0));\n', '    //     require(_referrer != address(msg.sender));\n', '    //     require(balanceOf(msg.sender) > 0);\n', '    //     require(balanceOf(_referrer) > 0);\n', '    //     assert(referrerOf[msg.sender] == address(0));\n', '\n', '    //     ownersIndex.push(msg.sender);\n', '    //     referrerOf[msg.sender] = _referrer;\n', '\n', '    //     Referral(msg.sender, _referrer);\n', '    //     return true;\n', '    // }\n', '\n', '    /**\n', '     * Activate referral discounts by declaring one&#39;s own referrer\n', '     * @param _referrer the investor who brought another\n', '     * @param _referred the investor who was brought by another\n', '     * @dev _referrer and _referred must own tokens at the time of the call\n', '     */\n', '    function setReferrer(address _referred, address _referrer) onlyOwner public returns (bool success) {\n', '        require(_referrer != address(0));\n', '        require(_referrer != address(_referred));\n', '        //        require(balanceOf(_referred) > 0);\n', '        //        require(balanceOf(_referrer) > 0);\n', '        require(referrerOf[_referred] == address(0));\n', '\n', '        ownersIndex.push(_referred);\n', '        referrerOf[_referred] = _referrer;\n', '\n', '        emit Referral(_referred, _referrer);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract NaorisToken is ReferralDiscountToken {\n', '    string public constant name = "NaorisToken";\n', '    string public constant symbol = "NAO";\n', '    uint256 public constant decimals = 18;\n', '\n', '    /// The owner of this address will manage the sale process.\n', '    address public saleTeamAddress;\n', '\n', '    /// The owner of this address will manage the referal and airdrop campaigns.\n', '    address public referalAirdropsTokensAddress;\n', '\n', '    /// The owner of this address is the Naoris Reserve fund.\n', '    address public reserveFundAddress;\n', '\n', '    /// The owner of this address is the Naoris Think Tank fund.\n', '    address public thinkTankFundAddress;\n', '\n', '    /// This address keeps the locked board bonus until 1st of May 2019\n', '    address public lockedBoardBonusAddress;\n', '\n', '    /// This is the address of the timelock contract for the locked Board Bonus tokens\n', '    address public treasuryTimelockAddress;\n', '\n', '    /// After this flag is changed to &#39;true&#39; no more tokens can be created\n', '    bool public tokenSaleClosed = false;\n', '\n', '    // seconds since 01.01.1970 to 1st of May 2019 (both 00:00:00 o&#39;clock UTC)\n', '    uint64 date01May2019 = 1556668800;\n', '\n', '    /// Maximum tokens to be allocated.\n', '    uint256 public constant TOKENS_HARD_CAP = 400000000 * 10 ** decimals;\n', '\n', '    /// Maximum tokens to be sold.\n', '    uint256 public constant TOKENS_SALE_HARD_CAP = 300000000 * 10 ** decimals;\n', '\n', '    /// Tokens to be allocated to the Referal tokens fund.\n', '    uint256 public constant REFERRAL_TOKENS = 10000000 * 10 ** decimals;\n', '\n', '    /// Tokens to be allocated to the Airdrop tokens fund.\n', '    uint256 public constant AIRDROP_TOKENS = 10000000 * 10 ** decimals;\n', '\n', '    /// Tokens to be allocated to the Think Tank fund.\n', '    uint256 public constant THINK_TANK_FUND_TOKENS = 40000000 * 10 ** decimals;\n', '\n', '    /// Tokens to be allocated to the Naoris Team fund.\n', '    uint256 public constant NAORIS_TEAM_TOKENS = 20000000 * 10 ** decimals;\n', '\n', '    /// Tokens to be allocated to the locked Board Bonus.\n', '    uint256 public constant LOCKED_BOARD_BONUS_TOKENS = 20000000 * 10 ** decimals;\n', '\n', '    /// Only the sale team or the owner are allowed to execute\n', '    modifier onlyTeam {\n', '        assert(msg.sender == saleTeamAddress || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /// Only allowed to execute while the sale is not yet closed\n', '    modifier beforeEnd {\n', '        assert(!tokenSaleClosed);\n', '        _;\n', '    }\n', '\n', '    constructor(address _saleTeamAddress, address _referalAirdropsTokensAddress, address _reserveFundAddress,\n', '    address _thinkTankFundAddress, address _lockedBoardBonusAddress) public {\n', '        require(_saleTeamAddress != address(0));\n', '        require(_referalAirdropsTokensAddress != address(0));\n', '        require(_reserveFundAddress != address(0));\n', '        require(_thinkTankFundAddress != address(0));\n', '        require(_lockedBoardBonusAddress != address(0));\n', '\n', '        saleTeamAddress = _saleTeamAddress;\n', '        referalAirdropsTokensAddress = _referalAirdropsTokensAddress;\n', '        reserveFundAddress = _reserveFundAddress;\n', '        thinkTankFundAddress = _thinkTankFundAddress;\n', '        lockedBoardBonusAddress = _lockedBoardBonusAddress;\n', '                \n', '        /// The unsold sale tokens will be burnt when the sale is closed\n', '        balances[saleTeamAddress] = TOKENS_SALE_HARD_CAP;\n', '        totalSupply_ = TOKENS_SALE_HARD_CAP;\n', '        emit Transfer(0x0, saleTeamAddress, TOKENS_SALE_HARD_CAP);\n', '\n', '        /// The unspent referal/airdrop tokens will be sent back\n', '        /// to the reserve fund when the sale is closed\n', '        balances[referalAirdropsTokensAddress] = REFERRAL_TOKENS;\n', '        totalSupply_ = totalSupply_.add(REFERRAL_TOKENS);\n', '        emit Transfer(0x0, referalAirdropsTokensAddress, REFERRAL_TOKENS);\n', '\n', '        balances[referalAirdropsTokensAddress] = balances[referalAirdropsTokensAddress].add(AIRDROP_TOKENS);\n', '        totalSupply_ = totalSupply_.add(AIRDROP_TOKENS);\n', '        emit Transfer(0x0, referalAirdropsTokensAddress, AIRDROP_TOKENS);\n', '    }\n', '\n', '    function close() public onlyTeam beforeEnd {\n', '        /// burn the unsold sale tokens\n', '        uint256 unsoldSaleTokens = balances[saleTeamAddress];\n', '        if(unsoldSaleTokens > 0) {\n', '            balances[saleTeamAddress] = 0;\n', '            totalSupply_ = totalSupply_.sub(unsoldSaleTokens);\n', '            emit Transfer(saleTeamAddress, 0x0, unsoldSaleTokens);\n', '        }\n', '        \n', '        /// transfer the unspent referal/airdrop tokens to the Reserve fund\n', '        uint256 unspentReferalAirdropTokens = balances[referalAirdropsTokensAddress];\n', '        if(unspentReferalAirdropTokens > 0) {\n', '            balances[referalAirdropsTokensAddress] = 0;\n', '            balances[reserveFundAddress] = balances[reserveFundAddress].add(unspentReferalAirdropTokens);\n', '            emit Transfer(referalAirdropsTokensAddress, reserveFundAddress, unspentReferalAirdropTokens);\n', '        }\n', '        \n', '        /// 40% allocated to the Naoris Think Tank Fund\n', '        balances[thinkTankFundAddress] = balances[thinkTankFundAddress].add(THINK_TANK_FUND_TOKENS);\n', '        totalSupply_ = totalSupply_.add(THINK_TANK_FUND_TOKENS);\n', '        emit Transfer(0x0, thinkTankFundAddress, THINK_TANK_FUND_TOKENS);\n', '\n', '        /// 20% allocated to the Naoris Team and Advisors Fund\n', '        balances[owner] = balances[owner].add(NAORIS_TEAM_TOKENS);\n', '        totalSupply_ = totalSupply_.add(NAORIS_TEAM_TOKENS);\n', '        emit Transfer(0x0, owner, NAORIS_TEAM_TOKENS);\n', '\n', '        /// tokens of the Board Bonus locked until 1st of May 2019\n', '        TokenTimelock lockedTreasuryTokens = new TokenTimelock(this, lockedBoardBonusAddress, date01May2019);\n', '        treasuryTimelockAddress = address(lockedTreasuryTokens);\n', '        balances[treasuryTimelockAddress] = balances[treasuryTimelockAddress].add(LOCKED_BOARD_BONUS_TOKENS);\n', '        totalSupply_ = totalSupply_.add(LOCKED_BOARD_BONUS_TOKENS);\n', '        emit Transfer(0x0, treasuryTimelockAddress, LOCKED_BOARD_BONUS_TOKENS);\n', '\n', '        require(totalSupply_ <= TOKENS_HARD_CAP);\n', '\n', '        tokenSaleClosed = true;\n', '    }\n', '\n', '    function tokenDiscountPercentage(address _owner) public view returns (uint256 percent) {\n', '        if(balanceOf(_owner) >= 1000000 * 10**decimals) {\n', '            return 50;\n', '        } else if(balanceOf(_owner) >= 500000 * 10**decimals) {\n', '            return 30;\n', '        } else if(balanceOf(_owner) >= 250000 * 10**decimals) {\n', '            return 25;\n', '        } else if(balanceOf(_owner) >= 100000 * 10**decimals) {\n', '            return 20;\n', '        } else if(balanceOf(_owner) >= 50000 * 10**decimals) {\n', '            return 15;\n', '        } else if(balanceOf(_owner) >= 10000 * 10**decimals) {\n', '            return 10;\n', '        } else if(balanceOf(_owner) >= 1000 * 10**decimals) {\n', '            return 5;\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '    function getTotalDiscount(address _owner) public view returns (uint256 percent) {\n', '        uint256 total = 0;\n', '\n', '        total += tokenDiscountPercentage(_owner);\n', '        total += referralDiscountPercentage(_owner);\n', '\n', '        return (total > 60) ? 60 : total;\n', '    }\n', '\n', '    /// @dev Trading limited - requires the token sale to have closed\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        if(tokenSaleClosed) {\n', '            return super.transferFrom(_from, _to, _value);\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /// @dev Trading limited - requires the token sale to have closed\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        if(tokenSaleClosed || msg.sender == referalAirdropsTokensAddress\n', '                        || msg.sender == saleTeamAddress) {\n', '            return super.transfer(_to, _value);\n', '        }\n', '        return false;\n', '    }\n', '}']
['pragma solidity 0.4.23;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     */\n', '    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '        assert(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '        assert(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '        assert(token.approve(spender, value));\n', '    }\n', '}\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TokenTimelock {\n', '    using SafeERC20 for ERC20Basic;\n', '\n', '    // ERC20 basic token contract being held\n', '    ERC20Basic public token;\n', '\n', '    // beneficiary of tokens after they are released\n', '    address public beneficiary;\n', '\n', '    // timestamp when token release is enabled\n', '    uint64 public releaseTime;\n', '\n', '    constructor(ERC20Basic _token, address _beneficiary, uint64 _releaseTime) public {\n', '        require(_releaseTime > uint64(block.timestamp));\n', '        token = _token;\n', '        beneficiary = _beneficiary;\n', '        releaseTime = _releaseTime;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers tokens held by timelock to beneficiary.\n', '     */\n', '    function release() public {\n', '        require(uint64(block.timestamp) >= releaseTime);\n', '\n', '        uint256 amount = token.balanceOf(this);\n', '        require(amount > 0);\n', '\n', '        token.safeTransfer(beneficiary, amount);\n', '    }\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract ReferralDiscountToken is StandardToken, Owned {\n', '    /// Store the referrers by the referred addresses\n', '    mapping(address => address) referrerOf;\n', '    address[] ownersIndex;\n', '\n', '    // Emitted when an investor declares his referrer\n', '    event Referral(address indexed referred, address indexed referrer);\n', '\n', '    /// Compute the earned discount, topped at 60%\n', '    function referralDiscountPercentage(address _owner) public view returns (uint256 percent) {\n', '        uint256 total = 0;\n', '\n', '        /// get one time discount for having been referred\n', '        if(referrerOf[_owner] != address(0)) {\n', '            total = total.add(10);\n', '        }\n', '\n', '        /// get a 10% discount for each one referred\n', '        for(uint256 i = 0; i < ownersIndex.length; i++) {\n', '            if(referrerOf[ownersIndex[i]] == _owner) {\n', '                total = total.add(10);\n', '                // if(total >= 60) break;\n', '            }\n', '        }\n', '\n', '        return total;\n', '    }\n', '\n', '    // /**\n', "    //  * Activate referral discounts by declaring one's own referrer\n", "    //  * @param _referrer can't be self\n", '    //  * @param _referrer must own tokens at the time of the call\n', '    //  * You must own tokens at the time of the call\n', '    //  */\n', '    // function setReferrer(address _referrer) public returns (bool success) {\n', '    //     require(_referrer != address(0));\n', '    //     require(_referrer != address(msg.sender));\n', '    //     require(balanceOf(msg.sender) > 0);\n', '    //     require(balanceOf(_referrer) > 0);\n', '    //     assert(referrerOf[msg.sender] == address(0));\n', '\n', '    //     ownersIndex.push(msg.sender);\n', '    //     referrerOf[msg.sender] = _referrer;\n', '\n', '    //     Referral(msg.sender, _referrer);\n', '    //     return true;\n', '    // }\n', '\n', '    /**\n', "     * Activate referral discounts by declaring one's own referrer\n", '     * @param _referrer the investor who brought another\n', '     * @param _referred the investor who was brought by another\n', '     * @dev _referrer and _referred must own tokens at the time of the call\n', '     */\n', '    function setReferrer(address _referred, address _referrer) onlyOwner public returns (bool success) {\n', '        require(_referrer != address(0));\n', '        require(_referrer != address(_referred));\n', '        //        require(balanceOf(_referred) > 0);\n', '        //        require(balanceOf(_referrer) > 0);\n', '        require(referrerOf[_referred] == address(0));\n', '\n', '        ownersIndex.push(_referred);\n', '        referrerOf[_referred] = _referrer;\n', '\n', '        emit Referral(_referred, _referrer);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract NaorisToken is ReferralDiscountToken {\n', '    string public constant name = "NaorisToken";\n', '    string public constant symbol = "NAO";\n', '    uint256 public constant decimals = 18;\n', '\n', '    /// The owner of this address will manage the sale process.\n', '    address public saleTeamAddress;\n', '\n', '    /// The owner of this address will manage the referal and airdrop campaigns.\n', '    address public referalAirdropsTokensAddress;\n', '\n', '    /// The owner of this address is the Naoris Reserve fund.\n', '    address public reserveFundAddress;\n', '\n', '    /// The owner of this address is the Naoris Think Tank fund.\n', '    address public thinkTankFundAddress;\n', '\n', '    /// This address keeps the locked board bonus until 1st of May 2019\n', '    address public lockedBoardBonusAddress;\n', '\n', '    /// This is the address of the timelock contract for the locked Board Bonus tokens\n', '    address public treasuryTimelockAddress;\n', '\n', "    /// After this flag is changed to 'true' no more tokens can be created\n", '    bool public tokenSaleClosed = false;\n', '\n', "    // seconds since 01.01.1970 to 1st of May 2019 (both 00:00:00 o'clock UTC)\n", '    uint64 date01May2019 = 1556668800;\n', '\n', '    /// Maximum tokens to be allocated.\n', '    uint256 public constant TOKENS_HARD_CAP = 400000000 * 10 ** decimals;\n', '\n', '    /// Maximum tokens to be sold.\n', '    uint256 public constant TOKENS_SALE_HARD_CAP = 300000000 * 10 ** decimals;\n', '\n', '    /// Tokens to be allocated to the Referal tokens fund.\n', '    uint256 public constant REFERRAL_TOKENS = 10000000 * 10 ** decimals;\n', '\n', '    /// Tokens to be allocated to the Airdrop tokens fund.\n', '    uint256 public constant AIRDROP_TOKENS = 10000000 * 10 ** decimals;\n', '\n', '    /// Tokens to be allocated to the Think Tank fund.\n', '    uint256 public constant THINK_TANK_FUND_TOKENS = 40000000 * 10 ** decimals;\n', '\n', '    /// Tokens to be allocated to the Naoris Team fund.\n', '    uint256 public constant NAORIS_TEAM_TOKENS = 20000000 * 10 ** decimals;\n', '\n', '    /// Tokens to be allocated to the locked Board Bonus.\n', '    uint256 public constant LOCKED_BOARD_BONUS_TOKENS = 20000000 * 10 ** decimals;\n', '\n', '    /// Only the sale team or the owner are allowed to execute\n', '    modifier onlyTeam {\n', '        assert(msg.sender == saleTeamAddress || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /// Only allowed to execute while the sale is not yet closed\n', '    modifier beforeEnd {\n', '        assert(!tokenSaleClosed);\n', '        _;\n', '    }\n', '\n', '    constructor(address _saleTeamAddress, address _referalAirdropsTokensAddress, address _reserveFundAddress,\n', '    address _thinkTankFundAddress, address _lockedBoardBonusAddress) public {\n', '        require(_saleTeamAddress != address(0));\n', '        require(_referalAirdropsTokensAddress != address(0));\n', '        require(_reserveFundAddress != address(0));\n', '        require(_thinkTankFundAddress != address(0));\n', '        require(_lockedBoardBonusAddress != address(0));\n', '\n', '        saleTeamAddress = _saleTeamAddress;\n', '        referalAirdropsTokensAddress = _referalAirdropsTokensAddress;\n', '        reserveFundAddress = _reserveFundAddress;\n', '        thinkTankFundAddress = _thinkTankFundAddress;\n', '        lockedBoardBonusAddress = _lockedBoardBonusAddress;\n', '                \n', '        /// The unsold sale tokens will be burnt when the sale is closed\n', '        balances[saleTeamAddress] = TOKENS_SALE_HARD_CAP;\n', '        totalSupply_ = TOKENS_SALE_HARD_CAP;\n', '        emit Transfer(0x0, saleTeamAddress, TOKENS_SALE_HARD_CAP);\n', '\n', '        /// The unspent referal/airdrop tokens will be sent back\n', '        /// to the reserve fund when the sale is closed\n', '        balances[referalAirdropsTokensAddress] = REFERRAL_TOKENS;\n', '        totalSupply_ = totalSupply_.add(REFERRAL_TOKENS);\n', '        emit Transfer(0x0, referalAirdropsTokensAddress, REFERRAL_TOKENS);\n', '\n', '        balances[referalAirdropsTokensAddress] = balances[referalAirdropsTokensAddress].add(AIRDROP_TOKENS);\n', '        totalSupply_ = totalSupply_.add(AIRDROP_TOKENS);\n', '        emit Transfer(0x0, referalAirdropsTokensAddress, AIRDROP_TOKENS);\n', '    }\n', '\n', '    function close() public onlyTeam beforeEnd {\n', '        /// burn the unsold sale tokens\n', '        uint256 unsoldSaleTokens = balances[saleTeamAddress];\n', '        if(unsoldSaleTokens > 0) {\n', '            balances[saleTeamAddress] = 0;\n', '            totalSupply_ = totalSupply_.sub(unsoldSaleTokens);\n', '            emit Transfer(saleTeamAddress, 0x0, unsoldSaleTokens);\n', '        }\n', '        \n', '        /// transfer the unspent referal/airdrop tokens to the Reserve fund\n', '        uint256 unspentReferalAirdropTokens = balances[referalAirdropsTokensAddress];\n', '        if(unspentReferalAirdropTokens > 0) {\n', '            balances[referalAirdropsTokensAddress] = 0;\n', '            balances[reserveFundAddress] = balances[reserveFundAddress].add(unspentReferalAirdropTokens);\n', '            emit Transfer(referalAirdropsTokensAddress, reserveFundAddress, unspentReferalAirdropTokens);\n', '        }\n', '        \n', '        /// 40% allocated to the Naoris Think Tank Fund\n', '        balances[thinkTankFundAddress] = balances[thinkTankFundAddress].add(THINK_TANK_FUND_TOKENS);\n', '        totalSupply_ = totalSupply_.add(THINK_TANK_FUND_TOKENS);\n', '        emit Transfer(0x0, thinkTankFundAddress, THINK_TANK_FUND_TOKENS);\n', '\n', '        /// 20% allocated to the Naoris Team and Advisors Fund\n', '        balances[owner] = balances[owner].add(NAORIS_TEAM_TOKENS);\n', '        totalSupply_ = totalSupply_.add(NAORIS_TEAM_TOKENS);\n', '        emit Transfer(0x0, owner, NAORIS_TEAM_TOKENS);\n', '\n', '        /// tokens of the Board Bonus locked until 1st of May 2019\n', '        TokenTimelock lockedTreasuryTokens = new TokenTimelock(this, lockedBoardBonusAddress, date01May2019);\n', '        treasuryTimelockAddress = address(lockedTreasuryTokens);\n', '        balances[treasuryTimelockAddress] = balances[treasuryTimelockAddress].add(LOCKED_BOARD_BONUS_TOKENS);\n', '        totalSupply_ = totalSupply_.add(LOCKED_BOARD_BONUS_TOKENS);\n', '        emit Transfer(0x0, treasuryTimelockAddress, LOCKED_BOARD_BONUS_TOKENS);\n', '\n', '        require(totalSupply_ <= TOKENS_HARD_CAP);\n', '\n', '        tokenSaleClosed = true;\n', '    }\n', '\n', '    function tokenDiscountPercentage(address _owner) public view returns (uint256 percent) {\n', '        if(balanceOf(_owner) >= 1000000 * 10**decimals) {\n', '            return 50;\n', '        } else if(balanceOf(_owner) >= 500000 * 10**decimals) {\n', '            return 30;\n', '        } else if(balanceOf(_owner) >= 250000 * 10**decimals) {\n', '            return 25;\n', '        } else if(balanceOf(_owner) >= 100000 * 10**decimals) {\n', '            return 20;\n', '        } else if(balanceOf(_owner) >= 50000 * 10**decimals) {\n', '            return 15;\n', '        } else if(balanceOf(_owner) >= 10000 * 10**decimals) {\n', '            return 10;\n', '        } else if(balanceOf(_owner) >= 1000 * 10**decimals) {\n', '            return 5;\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '    function getTotalDiscount(address _owner) public view returns (uint256 percent) {\n', '        uint256 total = 0;\n', '\n', '        total += tokenDiscountPercentage(_owner);\n', '        total += referralDiscountPercentage(_owner);\n', '\n', '        return (total > 60) ? 60 : total;\n', '    }\n', '\n', '    /// @dev Trading limited - requires the token sale to have closed\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        if(tokenSaleClosed) {\n', '            return super.transferFrom(_from, _to, _value);\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /// @dev Trading limited - requires the token sale to have closed\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        if(tokenSaleClosed || msg.sender == referalAirdropsTokensAddress\n', '                        || msg.sender == saleTeamAddress) {\n', '            return super.transfer(_to, _value);\n', '        }\n', '        return false;\n', '    }\n', '}']
