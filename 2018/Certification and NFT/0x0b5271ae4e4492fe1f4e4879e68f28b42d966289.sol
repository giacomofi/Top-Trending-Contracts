['pragma solidity ^0.4.16;\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract zombieToken {\n', '  function mint(address to, uint256 value) public returns (bool success);\n', '}\n', '\n', 'contract zombieMain {\n', '  function checkAllOwner(uint256[] _tokenId, address owner) public view returns (bool);\n', '  function seeZombieRole(uint256 _tokenId) public view returns (uint16 roletype);\n', '  function seeZombieColor(uint256 _tokenId) public view returns (uint8 color);\n', '  function seeZombieStar(uint256 _tokenId) public view returns (uint8 star);\n', '  function seeZombieDna(uint256 _tokenId) public view returns (bytes32 dna);\n', '}\n', '\n', 'contract zombieInvasion is Ownable{\n', '    using SafeMath for uint256;\n', '    \n', '    zombieToken zombietoken = zombieToken(0x83B8C8A08938B878017fDF0Ec0A689313F75739D);\n', '    zombieMain zombiemain = zombieMain(0x58fd762F76D57C6fC2a480F6d26c1D03175AD64F);\n', '\n', '    struct Zombie {\n', '      uint32 readyTime;//剩餘可出戰時間\n', '      bool notAtHome;  //是否離家\n', '      uint16 undeadsTime;//不死次數\n', '    }\n', '\n', '    struct Area {\n', '      uint starLimit; \n', '      uint8 TeamMemberlimitCount; // 5\n', '      uint8[] roletype;     //  4,4,99,99,99\n', '      uint TotallimitTeamCount;\n', '      uint TotalTeamCount;\n', '      string name;\n', '      uint ZOBRevenue;\n', '      bool isOpen;\n', '      uint32 duration;\n', '    }\n', '\n', '    struct Team {\n', '      bool isCharge;\n', '      uint areaID;\n', '      uint[] Zombies;\n', '      uint32 awardTime;\n', '      address Owner;\n', '      bytes32 teamHash;\n', '      uint blocknumber;\n', '    }\n', '    \n', '    Area[] public areas;\n', '\n', '    mapping (uint=>Zombie) public zombies;\n', '    mapping (bytes32=>Team) public teams;\n', '\n', '    event StartInvasion(bytes32 indexed teamhash, uint _areaId,uint[] _zombieId);\n', '    event AwardInvation(bytes32 indexed teamhash, bool InvationResult, uint ZOBRevenue);\n', '\n', '    modifier onlyOwnerOf(uint[] _zombieId) {\n', '      require(zombiemain.checkAllOwner(_zombieId, msg.sender));\n', '      _;\n', '    }\n', '\n', '\n', '  function startInvasion(uint _areaId, uint[] _zombieId) public onlyOwnerOf(_zombieId){\n', '    require(areas[_areaId].TotallimitTeamCount >= areas[_areaId].TotalTeamCount + 1);\n', '    require(areas[_areaId].isOpen);\n', '    require(areas[_areaId].TeamMemberlimitCount >= _zombieId.length);\n', '\n', '    bytes32 teamHash = block.blockhash(block.number-1);\n', '\n', '    for(uint16 i = 0; i<_zombieId.length; i++){\n', '      //確保殭屍都在家，並且可以出戰\n', '      require(now > zombies[_zombieId[i]].readyTime);\n', '      require(!zombies[_zombieId[i]].notAtHome);\n', '\n', '      teamHash = keccak256(teamHash,now,_areaId,zombiemain.seeZombieDna(_zombieId[i]));\n', '\n', '      zombies[_zombieId[i]].notAtHome = true;\n', '      zombies[_zombieId[i]].readyTime = uint32(now + areas[_areaId].duration);\n', '    }\n', '\n', '    //職業都必須符合條件\n', '    for(uint16 a = 0; a<areas[_areaId].roletype.length; a++){\n', '      if(areas[_areaId].roletype[a] == 99) continue;\n', '      if(zombiemain.seeZombieRole(_zombieId[a]) != areas[_areaId].roletype[a]) revert();\n', '    }    \n', '\n', '    areas[_areaId].TotalTeamCount ++;\n', '\n', '    require(teams[teamHash].areaID == 0);\n', '    teams[teamHash] = Team(false,_areaId,_zombieId,uint32(now+areas[_areaId].duration),msg.sender,teamHash,block.number + 1);\n', '    \n', '    StartInvasion(teamHash, _areaId, _zombieId);\n', '  }\n', '\n', '  function awardInvation(bytes32 _teamId) public {\n', '    require(teams[_teamId].Owner == msg.sender);\n', '    require(now >= teams[_teamId].awardTime);\n', '    require(!teams[_teamId].isCharge);\n', '    uint totalUndeadsTime;\n', '    uint totalStar;\n', '    uint dieNumber;\n', '\n', '    uint[] memory zb =  teams[_teamId].Zombies;\n', '\n', '    for(i=0;i<zb.length;i++){\n', '        totalUndeadsTime += zombies[zb[i]].undeadsTime;\n', '        totalStar += zombiemain.seeZombieStar(zb[i]);\n', '    }\n', '\n', '    if(totalStar<areas[teams[_teamId].areaID].starLimit){\n', '        dieNumber = totalStar*9500/(areas[teams[_teamId].areaID].starLimit)+totalUndeadsTime*10;\n', '    }else{\n', '        dieNumber = totalStar*100/(areas[teams[_teamId].areaID].starLimit)+9500+totalUndeadsTime;\n', '    }\n', '\n', '    if(dieNumber <= uint(keccak256(teams[_teamId].teamHash, now, block.blockhash(block.number-1),block.blockhash(teams[_teamId].blocknumber))) % 10000) {\n', '      //Lose\n', '      for(uint16 i = 0; i<zb.length; i++){\n', '        zombies[zb[ii]].readyTime = uint32(now + 7 days);\n', '        zombies[zb[ii]].undeadsTime = 0;\n', '        zombies[zb[ii]].notAtHome = false;\n', '      }\n', '      AwardInvation(_teamId, false, 0);\n', '    } else {\n', '      //Win\n', '      for(uint16 ii = 0; ii<zb.length; ii++){\n', '        zombies[zb[ii]].undeadsTime ++;\n', '        zombies[zb[ii]].notAtHome = false;\n', '      }\n', '      zombietoken.mint(teams[_teamId].Owner, areas[teams[_teamId].areaID].ZOBRevenue);\n', '      AwardInvation(_teamId, true, areas[teams[_teamId].areaID].ZOBRevenue);\n', '    }\n', '\n', '    teams[_teamId].isCharge = true;\n', '    areas[teams[_teamId].areaID].TotalTeamCount --;\n', '  }\n', '\n', '  function addArea(uint starLimit,uint8 TeamMemberlimitCount,uint8[] roletype,uint _totallimitTeamCount,string name,uint ZOBRevenue,bool isOpen,uint32 duration) public onlyOwner{\n', '      areas.push(Area(starLimit, TeamMemberlimitCount, roletype, _totallimitTeamCount, 0, name, ZOBRevenue, isOpen, duration));\n', '  }\n', '  \n', '  function closeArea(uint areaId) public onlyOwner{\n', '      areas[areaId].isOpen = false;\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.16;\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract zombieToken {\n', '  function mint(address to, uint256 value) public returns (bool success);\n', '}\n', '\n', 'contract zombieMain {\n', '  function checkAllOwner(uint256[] _tokenId, address owner) public view returns (bool);\n', '  function seeZombieRole(uint256 _tokenId) public view returns (uint16 roletype);\n', '  function seeZombieColor(uint256 _tokenId) public view returns (uint8 color);\n', '  function seeZombieStar(uint256 _tokenId) public view returns (uint8 star);\n', '  function seeZombieDna(uint256 _tokenId) public view returns (bytes32 dna);\n', '}\n', '\n', 'contract zombieInvasion is Ownable{\n', '    using SafeMath for uint256;\n', '    \n', '    zombieToken zombietoken = zombieToken(0x83B8C8A08938B878017fDF0Ec0A689313F75739D);\n', '    zombieMain zombiemain = zombieMain(0x58fd762F76D57C6fC2a480F6d26c1D03175AD64F);\n', '\n', '    struct Zombie {\n', '      uint32 readyTime;//剩餘可出戰時間\n', '      bool notAtHome;  //是否離家\n', '      uint16 undeadsTime;//不死次數\n', '    }\n', '\n', '    struct Area {\n', '      uint starLimit; \n', '      uint8 TeamMemberlimitCount; // 5\n', '      uint8[] roletype;     //  4,4,99,99,99\n', '      uint TotallimitTeamCount;\n', '      uint TotalTeamCount;\n', '      string name;\n', '      uint ZOBRevenue;\n', '      bool isOpen;\n', '      uint32 duration;\n', '    }\n', '\n', '    struct Team {\n', '      bool isCharge;\n', '      uint areaID;\n', '      uint[] Zombies;\n', '      uint32 awardTime;\n', '      address Owner;\n', '      bytes32 teamHash;\n', '      uint blocknumber;\n', '    }\n', '    \n', '    Area[] public areas;\n', '\n', '    mapping (uint=>Zombie) public zombies;\n', '    mapping (bytes32=>Team) public teams;\n', '\n', '    event StartInvasion(bytes32 indexed teamhash, uint _areaId,uint[] _zombieId);\n', '    event AwardInvation(bytes32 indexed teamhash, bool InvationResult, uint ZOBRevenue);\n', '\n', '    modifier onlyOwnerOf(uint[] _zombieId) {\n', '      require(zombiemain.checkAllOwner(_zombieId, msg.sender));\n', '      _;\n', '    }\n', '\n', '\n', '  function startInvasion(uint _areaId, uint[] _zombieId) public onlyOwnerOf(_zombieId){\n', '    require(areas[_areaId].TotallimitTeamCount >= areas[_areaId].TotalTeamCount + 1);\n', '    require(areas[_areaId].isOpen);\n', '    require(areas[_areaId].TeamMemberlimitCount >= _zombieId.length);\n', '\n', '    bytes32 teamHash = block.blockhash(block.number-1);\n', '\n', '    for(uint16 i = 0; i<_zombieId.length; i++){\n', '      //確保殭屍都在家，並且可以出戰\n', '      require(now > zombies[_zombieId[i]].readyTime);\n', '      require(!zombies[_zombieId[i]].notAtHome);\n', '\n', '      teamHash = keccak256(teamHash,now,_areaId,zombiemain.seeZombieDna(_zombieId[i]));\n', '\n', '      zombies[_zombieId[i]].notAtHome = true;\n', '      zombies[_zombieId[i]].readyTime = uint32(now + areas[_areaId].duration);\n', '    }\n', '\n', '    //職業都必須符合條件\n', '    for(uint16 a = 0; a<areas[_areaId].roletype.length; a++){\n', '      if(areas[_areaId].roletype[a] == 99) continue;\n', '      if(zombiemain.seeZombieRole(_zombieId[a]) != areas[_areaId].roletype[a]) revert();\n', '    }    \n', '\n', '    areas[_areaId].TotalTeamCount ++;\n', '\n', '    require(teams[teamHash].areaID == 0);\n', '    teams[teamHash] = Team(false,_areaId,_zombieId,uint32(now+areas[_areaId].duration),msg.sender,teamHash,block.number + 1);\n', '    \n', '    StartInvasion(teamHash, _areaId, _zombieId);\n', '  }\n', '\n', '  function awardInvation(bytes32 _teamId) public {\n', '    require(teams[_teamId].Owner == msg.sender);\n', '    require(now >= teams[_teamId].awardTime);\n', '    require(!teams[_teamId].isCharge);\n', '    uint totalUndeadsTime;\n', '    uint totalStar;\n', '    uint dieNumber;\n', '\n', '    uint[] memory zb =  teams[_teamId].Zombies;\n', '\n', '    for(i=0;i<zb.length;i++){\n', '        totalUndeadsTime += zombies[zb[i]].undeadsTime;\n', '        totalStar += zombiemain.seeZombieStar(zb[i]);\n', '    }\n', '\n', '    if(totalStar<areas[teams[_teamId].areaID].starLimit){\n', '        dieNumber = totalStar*9500/(areas[teams[_teamId].areaID].starLimit)+totalUndeadsTime*10;\n', '    }else{\n', '        dieNumber = totalStar*100/(areas[teams[_teamId].areaID].starLimit)+9500+totalUndeadsTime;\n', '    }\n', '\n', '    if(dieNumber <= uint(keccak256(teams[_teamId].teamHash, now, block.blockhash(block.number-1),block.blockhash(teams[_teamId].blocknumber))) % 10000) {\n', '      //Lose\n', '      for(uint16 i = 0; i<zb.length; i++){\n', '        zombies[zb[ii]].readyTime = uint32(now + 7 days);\n', '        zombies[zb[ii]].undeadsTime = 0;\n', '        zombies[zb[ii]].notAtHome = false;\n', '      }\n', '      AwardInvation(_teamId, false, 0);\n', '    } else {\n', '      //Win\n', '      for(uint16 ii = 0; ii<zb.length; ii++){\n', '        zombies[zb[ii]].undeadsTime ++;\n', '        zombies[zb[ii]].notAtHome = false;\n', '      }\n', '      zombietoken.mint(teams[_teamId].Owner, areas[teams[_teamId].areaID].ZOBRevenue);\n', '      AwardInvation(_teamId, true, areas[teams[_teamId].areaID].ZOBRevenue);\n', '    }\n', '\n', '    teams[_teamId].isCharge = true;\n', '    areas[teams[_teamId].areaID].TotalTeamCount --;\n', '  }\n', '\n', '  function addArea(uint starLimit,uint8 TeamMemberlimitCount,uint8[] roletype,uint _totallimitTeamCount,string name,uint ZOBRevenue,bool isOpen,uint32 duration) public onlyOwner{\n', '      areas.push(Area(starLimit, TeamMemberlimitCount, roletype, _totallimitTeamCount, 0, name, ZOBRevenue, isOpen, duration));\n', '  }\n', '  \n', '  function closeArea(uint areaId) public onlyOwner{\n', '      areas[areaId].isOpen = false;\n', '  }\n', '\n', '}']
