['pragma solidity ^0.4.23;\n', '\n', 'contract ballotBox {\n', '    // addresses set to true are able to create new ballots\n', '    mapping(address => bool) public creators;\n', '    // define ballot object/struct\n', '    struct ballot {\n', '        uint8 choiceCount;\n', '        uint256 voteCountBlock;\n', '    }\n', '    // create array of ballots\n', '    ballot[] public ballots;\n', '    \n', '    // event to record what ballot contracts have been deployed with what parameters\n', '    event BallotCreated( string ballotProposal, uint256 indexed ballotIndex, address indexed ballotCreator, bytes32[] choices, uint256 countBlock );\n', '    // event to record a vote\n', '    event Vote(uint256 indexed ballotIndex, address voter, uint8 choice);\n', '    // event to record changes to creator permission                                 \n', '    event CreatorModified(address creator, bool active, address indexed by);\n', '    \n', '    constructor() public {\n', '        // set contract creator as authorized ballot creator\n', '        creators[msg.sender] = true;\n', '        emit CreatorModified(msg.sender, true, msg.sender);\n', '    }\n', '    \n', '    function createBallot(string _ballotQuestion, bytes32[] _choices, uint256 _countBlock) public {\n', '        // ensure the count is in the future\n', '        require(_countBlock > block.number);\n', '        // ensure msg.sender is an authorized ballot creator\n', '        require(creators[msg.sender]);\n', '        // add ballot object to array\n', '        ballots.push(ballot(uint8(_choices.length),_countBlock));\n', '        // fire event to record ballot contract creation and parameters\n', '        emit BallotCreated( _ballotQuestion, ballots.length-1 , msg.sender, _choices, _countBlock);\n', '    }\n', '    \n', '    function vote(uint256 _ballotIndex, uint8 _choice) public {\n', '        // ensure the count Block is not exceeded\n', '        require(ballots[_ballotIndex].voteCountBlock > block.number);\n', '        // ensure vote is a valid choice\n', '        require(_choice < ballots[_ballotIndex].choiceCount);\n', '        // fire event to record Vote\n', '        emit Vote(_ballotIndex, msg.sender, _choice);\n', '    }\n', '    \n', '    function modifyCreator(address _creator, bool _active) public {\n', '        // ensure only creators can add or remove creators\n', '        require(creators[msg.sender]);\n', '        // ensure creators can only remove themselves\n', '        if(_active == false) require(_creator == msg.sender);\n', '        // set creator status\n', '        creators[_creator] = _active;\n', '        // fire event to record creator permission change\n', '        emit CreatorModified(_creator, _active, msg.sender); \n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', 'contract ballotBox {\n', '    // addresses set to true are able to create new ballots\n', '    mapping(address => bool) public creators;\n', '    // define ballot object/struct\n', '    struct ballot {\n', '        uint8 choiceCount;\n', '        uint256 voteCountBlock;\n', '    }\n', '    // create array of ballots\n', '    ballot[] public ballots;\n', '    \n', '    // event to record what ballot contracts have been deployed with what parameters\n', '    event BallotCreated( string ballotProposal, uint256 indexed ballotIndex, address indexed ballotCreator, bytes32[] choices, uint256 countBlock );\n', '    // event to record a vote\n', '    event Vote(uint256 indexed ballotIndex, address voter, uint8 choice);\n', '    // event to record changes to creator permission                                 \n', '    event CreatorModified(address creator, bool active, address indexed by);\n', '    \n', '    constructor() public {\n', '        // set contract creator as authorized ballot creator\n', '        creators[msg.sender] = true;\n', '        emit CreatorModified(msg.sender, true, msg.sender);\n', '    }\n', '    \n', '    function createBallot(string _ballotQuestion, bytes32[] _choices, uint256 _countBlock) public {\n', '        // ensure the count is in the future\n', '        require(_countBlock > block.number);\n', '        // ensure msg.sender is an authorized ballot creator\n', '        require(creators[msg.sender]);\n', '        // add ballot object to array\n', '        ballots.push(ballot(uint8(_choices.length),_countBlock));\n', '        // fire event to record ballot contract creation and parameters\n', '        emit BallotCreated( _ballotQuestion, ballots.length-1 , msg.sender, _choices, _countBlock);\n', '    }\n', '    \n', '    function vote(uint256 _ballotIndex, uint8 _choice) public {\n', '        // ensure the count Block is not exceeded\n', '        require(ballots[_ballotIndex].voteCountBlock > block.number);\n', '        // ensure vote is a valid choice\n', '        require(_choice < ballots[_ballotIndex].choiceCount);\n', '        // fire event to record Vote\n', '        emit Vote(_ballotIndex, msg.sender, _choice);\n', '    }\n', '    \n', '    function modifyCreator(address _creator, bool _active) public {\n', '        // ensure only creators can add or remove creators\n', '        require(creators[msg.sender]);\n', '        // ensure creators can only remove themselves\n', '        if(_active == false) require(_creator == msg.sender);\n', '        // set creator status\n', '        creators[_creator] = _active;\n', '        // fire event to record creator permission change\n', '        emit CreatorModified(_creator, _active, msg.sender); \n', '    }\n', '}']
