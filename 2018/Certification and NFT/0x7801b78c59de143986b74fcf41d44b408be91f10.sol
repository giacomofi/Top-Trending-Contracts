['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Haltable is Ownable {\n', '\tbool public halted;\n', '\n', '\tmodifier stopInEmergency {\n', '\t\trequire(!halted);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier onlyInEmergency {\n', '\t\trequire(halted);\n', '\t\t_;\n', '\t}\n', '\n', '\t// called by the owner on emergency, triggers stopped state\n', '\tfunction halt() public onlyOwner {\n', '\t\thalted = true;\n', '\t}\n', '\n', '\t// called by the owner on end of emergency, returns to normal state\n', '\tfunction unhalt() public onlyOwner onlyInEmergency {\n', '\t\thalted = false;\n', '\t}\n', '}\n', '\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Capped token\n', ' * @dev Mintable token with a token cap.\n', ' */\n', 'contract CappedToken is MintableToken {\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedToken(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(totalSupply_.add(_amount) <= cap);\n', '\n', '    return super.mint(_to, _amount);\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * Merit token\n', ' */\n', 'contract MeritToken is CappedToken {\n', '\tevent NewCap(uint256 value);\n', '\n', '\tstring public constant name = "Merit Token"; // solium-disable-line uppercase\n', '\tstring public constant symbol = "MERIT"; // solium-disable-line uppercase\n', '\tuint8 public constant decimals = 18; // solium-disable-line uppercase\n', '\tbool public tokensReleased;\n', '\n', '\tfunction MeritToken(uint256 _cap) public CappedToken(_cap * 10**uint256(decimals)) { }\n', '\n', '    modifier released {\n', '        require(mintingFinished);\n', '        _;\n', '    }\n', '    \n', '    modifier notReleased {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '    \n', '    // only allow these functions once the token is released (minting is done)\n', '    // basically the zeppelin &#39;Pausable&#39; token but using my token release flag\n', '    // Only allow our token to be usable once the minting phase is over\n', '    function transfer(address _to, uint256 _value) public released returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public released returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) public released returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '    \n', '    function increaseApproval(address _spender, uint _addedValue) public released returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '    \n', '    function decreaseApproval(address _spender, uint _subtractedValue) public released returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '    \n', '    // for our token, the balance will always be zero if we&#39;re still minting them\n', '\t// once we&#39;re done minting, the tokens will be effectively released to their owners\n', '    function balanceOf(address _owner) public view released returns (uint256 balance) {\n', '        return super.balanceOf(_owner);\n', '    }\n', '\n', '    // lets us see the pre-allocated balance, since we&#39;re just letting the token keep track of all of the allocations\n', '    // instead of going through another complete allocation step for all users\n', '    function actualBalanceOf(address _owner) public view returns (uint256 balance) {\n', '        return super.balanceOf(_owner);\n', '    }\n', '    \n', '    // revoke a user&#39;s tokens if they have been banned for violating the TOS.\n', '    // Note, this can only be called during the ICO phase and not once the tokens are released.\n', '    function revoke(address _owner) public onlyOwner notReleased returns (uint256 balance) {\n', '        // the balance should never ben greater than our total supply, so don&#39;t worry about checking\n', '        balance = balances[_owner];\n', '        balances[_owner] = 0;\n', '        totalSupply_ = totalSupply_.sub(balance);\n', '    }\n', '  }\n', '\n', '\n', 'contract MeritICO is Ownable, Haltable {\n', '\tusing SafeMath for uint256;\n', '\n', '\tevent TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\t\t\n', '\t// token\n', '\tMeritToken public token;\n', '\taddress public reserveVault;\n', '\taddress public restrictedVault;\n', '\t//address public fundWallet;\n', '\n', '\tenum Stage \t\t{ None, Closed, PrivateSale, PreSale, Round1, Round2, Round3, Round4, Allocating, Done }\n', '\tStage public currentStage;\n', '\n', '\tuint256 public tokenCap;\n', '\tuint256 public icoCap;\n', '\tuint256 public marketingCap;\n', '\tuint256 public teamCap;\n', '\tuint256 public reserveCap;\n', '\n', '    // number of tokens per ether, kept with 3 decimals (so divide by 1000)\n', '\tuint public exchangeRate;\n', '\tuint public bonusRate;\n', '\tuint256 public currentSaleCap;\n', '\n', '\tuint256 public weiRaised;\n', '\tuint256 public baseTokensAllocated;\n', '\tuint256 public bonusTokensAllocated;\n', '\tbool public saleAllocated;\n', '\t\n', '\tstruct Contribution {\n', '\t    uint256 base;\n', '\t    uint256 bonus;\n', '\t}\n', '\t// current base and bonus balances for each contributor\n', '\tmapping (address => Contribution) contributionBalance;\n', '\n', '\t// map of any address that has been banned from participating in the ICO, for violations of TOS\n', '\tmapping (address => bool) blacklist;\n', '\n', '\tmodifier saleActive {\n', '\t\trequire(currentStage > Stage.Closed && currentStage < Stage.Allocating);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier saleAllocatable {\n', '\t\trequire(currentStage > Stage.Closed && currentStage <= Stage.Allocating);\n', '\t\t_;\n', '\t}\n', '\t\n', '\tmodifier saleNotDone {\n', '\t\trequire(currentStage != Stage.Done);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier saleAllocating {\n', '\t\trequire (currentStage == Stage.Allocating);\n', '\t\t_;\n', '\t}\n', '\t\n', '\tmodifier saleClosed {\n', '\t    require (currentStage == Stage.Closed);\n', '\t    _;\n', '\t}\n', '\t\n', '\tmodifier saleDone {\n', '\t    require (currentStage == Stage.Done);\n', '\t    _;\n', '\t}\n', '\n', '\t// _token is the address of an already deployed MeritToken contract\n', '\t//\n', '\t// team tokens go into a restricted access vault\n', '\t// reserve tokens go into a reserve vault\n', '\t// any bonus or referral tokens come out of the marketing pool\n', '\t// any base purchased tokens come out of the ICO pool\n', '\t// all percentages are based off of the cap in the passed in token\n', '\t//\n', '\t// anything left over in the marketing or ico pool is burned\n', '\t//\n', '\tfunction MeritICO() public {\n', '\t\t//fundWallet = _fundWallet;\n', '\t\tcurrentStage = Stage.Closed;\n', '\t}\n', '\n', '\tfunction updateToken(address _token) external onlyOwner saleNotDone {\n', '\t\trequire(_token != address(0));\n', '\t\t\n', '\t    token = MeritToken(_token); \n', '\t    \n', '\t    tokenCap = token.cap();\n', '\t    \n', '\t    require(MeritToken(_token).owner() == address(this));\n', '\t}\n', '\n', '\tfunction updateCaps(uint256 _icoPercent, uint256 _marketingPercent, uint256 _teamPercent, uint256 _reservePercent) external onlyOwner saleNotDone {\n', '\t\trequire(_icoPercent + _marketingPercent + _teamPercent + _reservePercent == 100);\n', '\n', '\t\tuint256 max = tokenCap;\n', '        \n', '\t\tmarketingCap = max.mul(_marketingPercent).div(100);\n', '\t\ticoCap = max.mul(_icoPercent).div(100);\n', '\t\tteamCap = max.mul(_teamPercent).div(100);\n', '\t\treserveCap = max.mul(_reservePercent).div(100);\n', '\n', '\t\trequire (marketingCap + icoCap + teamCap + reserveCap == max);\n', '\t}\n', '\n', '\tfunction setStage(Stage _stage) public onlyOwner saleNotDone {\n', '\t\t// don&#39;t allow you to set the stage to done unless the tokens have been released\n', '\t\trequire (_stage != Stage.Done || saleAllocated == true);\n', '\t\tcurrentStage = _stage;\n', '\t}\n', '\n', '\tfunction startAllocation() public onlyOwner saleActive {\n', '\t\trequire (!saleAllocated);\n', '\t\tcurrentStage = Stage.Allocating;\n', '\t}\n', '    \n', '\t// set how many tokens per wei, kept with 3 decimals\n', '\tfunction updateExchangeRate(uint _rateTimes1000) public onlyOwner saleNotDone {\n', '\t\texchangeRate = _rateTimes1000;\n', '\t}\n', '\n', '\t// bonus rate percentage (value 0 to 100)\n', '\t// cap is the cumulative cap at this point in time\n', '\tfunction updateICO(uint _bonusRate, uint256 _cap, Stage _stage) external onlyOwner saleNotDone {\n', '\t\trequire (_bonusRate <= 100);\n', '\t\trequire(_cap <= icoCap);\n', '\t\trequire(_stage != Stage.None);\n', '\t\t\n', '\t\tbonusRate = _bonusRate;\n', '\t\tcurrentSaleCap = _cap;\t\n', '\t\tcurrentStage = _stage;\n', '\t}\n', '\t\n', '\tfunction updateVaults(address _reserve, address _restricted) external onlyOwner saleNotDone {\n', '\t\trequire(_reserve != address(0));\n', '\t\trequire(_restricted != address(0));\n', '\t\t\n', '\t\treserveVault = _reserve;\n', '\t\trestrictedVault = _restricted;\n', '\t\t\n', '\t    require(Ownable(_reserve).owner() == address(this));\n', '\t    require(Ownable(_restricted).owner() == address(this));\n', '\t}\n', '\t\n', '\tfunction updateReserveVault(address _reserve) external onlyOwner saleNotDone {\n', '\t\trequire(_reserve != address(0));\n', '\n', '\t\treserveVault = _reserve;\n', '\n', '\t    require(Ownable(_reserve).owner() == address(this));\n', '\t}\n', '\t\n', '\tfunction updateRestrictedVault(address _restricted) external onlyOwner saleNotDone {\n', '\t\trequire(_restricted != address(0));\n', '\t\t\n', '\t\trestrictedVault = _restricted;\n', '\t\t\n', '\t    require(Ownable(_restricted).owner() == address(this));\n', '\t}\n', '\t\n', '\t//function updateFundWallet(address _wallet) external onlyOwner saleNotDone {\n', '\t//\trequire(_wallet != address(0));\n', '\t//\trequire(fundWallet != _wallet);\n', '\t//  fundWallet = _wallet;\n', '\t//}\n', '\n', '\tfunction bookkeep(address _beneficiary, uint256 _base, uint256 _bonus) internal returns(bool) {\n', '\t\tuint256 newBase = baseTokensAllocated.add(_base);\n', '\t\tuint256 newBonus = bonusTokensAllocated.add(_bonus);\n', '\n', '\t\tif (newBase > currentSaleCap || newBonus > marketingCap) {\n', '\t\t\treturn false;\n', '\t\t}\n', '\n', '\t\tbaseTokensAllocated = newBase;\n', '\t\tbonusTokensAllocated = newBonus;\n', '\n', '\t\tContribution storage c = contributionBalance[_beneficiary];\n', '\t\tc.base = c.base.add(_base);\n', '\t\tc.bonus = c.bonus.add(_bonus);\n', '\n', '\t\treturn true;\n', '\t}\n', '    \n', '\tfunction computeTokens(uint256 _weiAmount, uint _bonusRate) external view returns (uint256 base, uint256 bonus) {\n', '\t\tbase = _weiAmount.mul(exchangeRate).div(1000);\n', '\t\tbonus = base.mul(_bonusRate).div(100);\n', '\t}\n', '    \n', '\t// can only &#39;buy&#39; tokens while the sale is active. \n', '\tfunction () public payable saleActive stopInEmergency {\n', '\t    revert();\n', '\t    \n', '\t\t//buyTokens(msg.sender);\n', '\t}\n', '\n', '\t//function buyTokens(address _beneficiary) public payable saleActive stopInEmergency {\n', '\t\t//require(msg.value != 0);\n', '\t\t//require(_beneficiary != 0x0);\n', '\t\t//require(blacklist[_beneficiary] == false);\n', '\n', '\t\t//uint256 weiAmount = msg.value;\n', '\t\t//uint256 baseTokens = weiAmount.mul(exchangeRate).div(1000);\n', '\t\t//uint256 bonusTokens = baseTokens.mul(bonusRate).div(100);\n', '\t\t\n', '\t\t//require (bookkeep(_beneficiary, baseTokens, bonusTokens));\n', '\n', '        //uint256 total = baseTokens.add(bonusTokens);\n', '        \n', '\t\t//weiRaised = weiRaised.add(weiAmount);\n', '\n', '        //TokenPurchase(msg.sender, _beneficiary, weiAmount, total);\n', '        \n', '\t\t//fundWallet.transfer(weiAmount);\n', '\t\t//token.mint(_beneficiary, total);\n', '\t//}\n', '\n', '\t// function to purchase tokens for someone, from an external funding source.  This function \n', '\t// assumes that the external source has been verified.  bonus amount is passed in, so we can \n', '\t// handle an edge case where someone externally purchased tokens when the bonus should be different\n', '\t// than it currnetly is set to.\n', '\tfunction buyTokensFor(address _beneficiary, uint256 _baseTokens, uint _bonusTokens) external onlyOwner saleAllocatable {\n', '\t\trequire(_beneficiary != 0x0);\n', '\t\trequire(_baseTokens != 0 || _bonusTokens != 0);\n', '\t\trequire(blacklist[_beneficiary] == false);\n', '\t\t\n', '        require(bookkeep(_beneficiary, _baseTokens, _bonusTokens));\n', '\n', '        uint256 total = _baseTokens.add(_bonusTokens);\n', '\n', '        TokenPurchase(msg.sender, _beneficiary, 0, total);\n', '        \n', '\t\ttoken.mint(_beneficiary, total);\n', '\t}\n', '    \n', '\t// same as above, but strictly for allocating tokens out of the bonus pool\n', '\tfunction giftTokens(address _beneficiary, uint256 _giftAmount) external onlyOwner saleAllocatable {\n', '\t\trequire(_beneficiary != 0x0);\n', '\t\trequire(_giftAmount != 0);\n', '\t\trequire(blacklist[_beneficiary] == false);\n', '\n', '        require(bookkeep(_beneficiary, 0, _giftAmount));\n', '        \n', '        TokenPurchase(msg.sender, _beneficiary, 0, _giftAmount);\n', '        \n', '\t\ttoken.mint(_beneficiary, _giftAmount);\n', '\t}\n', '\tfunction balanceOf(address _beneficiary) public view returns(uint256, uint256) {\n', '\t\trequire(_beneficiary != address(0));\n', '\n', '        Contribution storage c = contributionBalance[_beneficiary];\n', '\t\treturn (c.base, c.bonus);\n', '\t}\n', '\n', '\t\n', '\t// ban/prevent a user from participating in the ICO for violations of TOS, and deallocate any tokens they have allocated\n', '\t// if any refunds are necessary, they are handled offline\n', '\tfunction ban(address _owner) external onlyOwner saleAllocatable returns (uint256 total) {\n', '\t    require(_owner != address(0));\n', '\t    require(!blacklist[_owner]);\n', '\t    \n', '\t    uint256 base;\n', '\t    uint256 bonus;\n', '\t    \n', '\t    (base, bonus) = balanceOf(_owner);\n', '\t    \n', '\t    delete contributionBalance[_owner];\n', '\t    \n', '\t\tbaseTokensAllocated = baseTokensAllocated.sub(base);\n', '\t\tbonusTokensAllocated = bonusTokensAllocated.sub(bonus);\n', '\t\t\n', '\t    blacklist[_owner] = true;\n', '\n', '\t    total = token.revoke(_owner);\n', '\t}\n', '\n', '    // unbans a user that was banned with the above function.  does NOT reallocate their tokens\n', '\tfunction unban(address _beneficiary) external onlyOwner saleAllocatable {\n', '\t    require(_beneficiary != address(0));\n', '\t    require(blacklist[_beneficiary] == true);\n', '\n', '        delete blacklist[_beneficiary];\n', '\t}\n', '\t\n', '\t// release any other tokens needed and mark us as allocated\n', '\tfunction releaseTokens() external onlyOwner saleAllocating {\n', '\t\trequire(reserveVault != address(0));\n', '\t\trequire(restrictedVault != address(0));\n', '\t\trequire(saleAllocated == false);\n', '\n', '\t\tsaleAllocated = true;\n', '\t\t\n', '        // allocate the team and reserve tokens to our vaults\t\t\n', '\t    token.mint(reserveVault, reserveCap); \n', '\t\ttoken.mint(restrictedVault, teamCap); \n', '\t}\n', '\n', '\t\n', '\t// end the ICO, tokens won&#39;t show up in anyone&#39;s wallets until this function is called.\n', '\t// once this is called, nothing works on the ICO any longer\n', '\tfunction endICO() external onlyOwner saleAllocating {\n', '\t    require(saleAllocated);\n', '\t    \n', '\t    currentStage = Stage.Done;\n', '\t    \n', '        // this will release all allocated tokens to their owners\n', '\t    token.finishMinting();  \n', '\t    \n', '\t    // now transfer all these objects back to our owner, which we know to be a trusted account\n', '\t    token.transferOwnership(owner);\n', '\t    Ownable(reserveVault).transferOwnership(owner);\n', '\t    Ownable(restrictedVault).transferOwnership(owner);\n', '\t}\n', '\t\n', '\tfunction giveBack() public onlyOwner {\n', '\t    if (address(token) != address(0))\n', '\t        token.transferOwnership(owner);\n', '        if (reserveVault != address(0))\n', '\t        Ownable(reserveVault).transferOwnership(owner);\n', '        if (restrictedVault != address(0))\n', '\t        Ownable(restrictedVault).transferOwnership(owner);\n', '\t}\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Haltable is Ownable {\n', '\tbool public halted;\n', '\n', '\tmodifier stopInEmergency {\n', '\t\trequire(!halted);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier onlyInEmergency {\n', '\t\trequire(halted);\n', '\t\t_;\n', '\t}\n', '\n', '\t// called by the owner on emergency, triggers stopped state\n', '\tfunction halt() public onlyOwner {\n', '\t\thalted = true;\n', '\t}\n', '\n', '\t// called by the owner on end of emergency, returns to normal state\n', '\tfunction unhalt() public onlyOwner onlyInEmergency {\n', '\t\thalted = false;\n', '\t}\n', '}\n', '\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Capped token\n', ' * @dev Mintable token with a token cap.\n', ' */\n', 'contract CappedToken is MintableToken {\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedToken(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(totalSupply_.add(_amount) <= cap);\n', '\n', '    return super.mint(_to, _amount);\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * Merit token\n', ' */\n', 'contract MeritToken is CappedToken {\n', '\tevent NewCap(uint256 value);\n', '\n', '\tstring public constant name = "Merit Token"; // solium-disable-line uppercase\n', '\tstring public constant symbol = "MERIT"; // solium-disable-line uppercase\n', '\tuint8 public constant decimals = 18; // solium-disable-line uppercase\n', '\tbool public tokensReleased;\n', '\n', '\tfunction MeritToken(uint256 _cap) public CappedToken(_cap * 10**uint256(decimals)) { }\n', '\n', '    modifier released {\n', '        require(mintingFinished);\n', '        _;\n', '    }\n', '    \n', '    modifier notReleased {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '    \n', '    // only allow these functions once the token is released (minting is done)\n', "    // basically the zeppelin 'Pausable' token but using my token release flag\n", '    // Only allow our token to be usable once the minting phase is over\n', '    function transfer(address _to, uint256 _value) public released returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public released returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) public released returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '    \n', '    function increaseApproval(address _spender, uint _addedValue) public released returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '    \n', '    function decreaseApproval(address _spender, uint _subtractedValue) public released returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '    \n', "    // for our token, the balance will always be zero if we're still minting them\n", "\t// once we're done minting, the tokens will be effectively released to their owners\n", '    function balanceOf(address _owner) public view released returns (uint256 balance) {\n', '        return super.balanceOf(_owner);\n', '    }\n', '\n', "    // lets us see the pre-allocated balance, since we're just letting the token keep track of all of the allocations\n", '    // instead of going through another complete allocation step for all users\n', '    function actualBalanceOf(address _owner) public view returns (uint256 balance) {\n', '        return super.balanceOf(_owner);\n', '    }\n', '    \n', "    // revoke a user's tokens if they have been banned for violating the TOS.\n", '    // Note, this can only be called during the ICO phase and not once the tokens are released.\n', '    function revoke(address _owner) public onlyOwner notReleased returns (uint256 balance) {\n', "        // the balance should never ben greater than our total supply, so don't worry about checking\n", '        balance = balances[_owner];\n', '        balances[_owner] = 0;\n', '        totalSupply_ = totalSupply_.sub(balance);\n', '    }\n', '  }\n', '\n', '\n', 'contract MeritICO is Ownable, Haltable {\n', '\tusing SafeMath for uint256;\n', '\n', '\tevent TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\t\t\n', '\t// token\n', '\tMeritToken public token;\n', '\taddress public reserveVault;\n', '\taddress public restrictedVault;\n', '\t//address public fundWallet;\n', '\n', '\tenum Stage \t\t{ None, Closed, PrivateSale, PreSale, Round1, Round2, Round3, Round4, Allocating, Done }\n', '\tStage public currentStage;\n', '\n', '\tuint256 public tokenCap;\n', '\tuint256 public icoCap;\n', '\tuint256 public marketingCap;\n', '\tuint256 public teamCap;\n', '\tuint256 public reserveCap;\n', '\n', '    // number of tokens per ether, kept with 3 decimals (so divide by 1000)\n', '\tuint public exchangeRate;\n', '\tuint public bonusRate;\n', '\tuint256 public currentSaleCap;\n', '\n', '\tuint256 public weiRaised;\n', '\tuint256 public baseTokensAllocated;\n', '\tuint256 public bonusTokensAllocated;\n', '\tbool public saleAllocated;\n', '\t\n', '\tstruct Contribution {\n', '\t    uint256 base;\n', '\t    uint256 bonus;\n', '\t}\n', '\t// current base and bonus balances for each contributor\n', '\tmapping (address => Contribution) contributionBalance;\n', '\n', '\t// map of any address that has been banned from participating in the ICO, for violations of TOS\n', '\tmapping (address => bool) blacklist;\n', '\n', '\tmodifier saleActive {\n', '\t\trequire(currentStage > Stage.Closed && currentStage < Stage.Allocating);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier saleAllocatable {\n', '\t\trequire(currentStage > Stage.Closed && currentStage <= Stage.Allocating);\n', '\t\t_;\n', '\t}\n', '\t\n', '\tmodifier saleNotDone {\n', '\t\trequire(currentStage != Stage.Done);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier saleAllocating {\n', '\t\trequire (currentStage == Stage.Allocating);\n', '\t\t_;\n', '\t}\n', '\t\n', '\tmodifier saleClosed {\n', '\t    require (currentStage == Stage.Closed);\n', '\t    _;\n', '\t}\n', '\t\n', '\tmodifier saleDone {\n', '\t    require (currentStage == Stage.Done);\n', '\t    _;\n', '\t}\n', '\n', '\t// _token is the address of an already deployed MeritToken contract\n', '\t//\n', '\t// team tokens go into a restricted access vault\n', '\t// reserve tokens go into a reserve vault\n', '\t// any bonus or referral tokens come out of the marketing pool\n', '\t// any base purchased tokens come out of the ICO pool\n', '\t// all percentages are based off of the cap in the passed in token\n', '\t//\n', '\t// anything left over in the marketing or ico pool is burned\n', '\t//\n', '\tfunction MeritICO() public {\n', '\t\t//fundWallet = _fundWallet;\n', '\t\tcurrentStage = Stage.Closed;\n', '\t}\n', '\n', '\tfunction updateToken(address _token) external onlyOwner saleNotDone {\n', '\t\trequire(_token != address(0));\n', '\t\t\n', '\t    token = MeritToken(_token); \n', '\t    \n', '\t    tokenCap = token.cap();\n', '\t    \n', '\t    require(MeritToken(_token).owner() == address(this));\n', '\t}\n', '\n', '\tfunction updateCaps(uint256 _icoPercent, uint256 _marketingPercent, uint256 _teamPercent, uint256 _reservePercent) external onlyOwner saleNotDone {\n', '\t\trequire(_icoPercent + _marketingPercent + _teamPercent + _reservePercent == 100);\n', '\n', '\t\tuint256 max = tokenCap;\n', '        \n', '\t\tmarketingCap = max.mul(_marketingPercent).div(100);\n', '\t\ticoCap = max.mul(_icoPercent).div(100);\n', '\t\tteamCap = max.mul(_teamPercent).div(100);\n', '\t\treserveCap = max.mul(_reservePercent).div(100);\n', '\n', '\t\trequire (marketingCap + icoCap + teamCap + reserveCap == max);\n', '\t}\n', '\n', '\tfunction setStage(Stage _stage) public onlyOwner saleNotDone {\n', "\t\t// don't allow you to set the stage to done unless the tokens have been released\n", '\t\trequire (_stage != Stage.Done || saleAllocated == true);\n', '\t\tcurrentStage = _stage;\n', '\t}\n', '\n', '\tfunction startAllocation() public onlyOwner saleActive {\n', '\t\trequire (!saleAllocated);\n', '\t\tcurrentStage = Stage.Allocating;\n', '\t}\n', '    \n', '\t// set how many tokens per wei, kept with 3 decimals\n', '\tfunction updateExchangeRate(uint _rateTimes1000) public onlyOwner saleNotDone {\n', '\t\texchangeRate = _rateTimes1000;\n', '\t}\n', '\n', '\t// bonus rate percentage (value 0 to 100)\n', '\t// cap is the cumulative cap at this point in time\n', '\tfunction updateICO(uint _bonusRate, uint256 _cap, Stage _stage) external onlyOwner saleNotDone {\n', '\t\trequire (_bonusRate <= 100);\n', '\t\trequire(_cap <= icoCap);\n', '\t\trequire(_stage != Stage.None);\n', '\t\t\n', '\t\tbonusRate = _bonusRate;\n', '\t\tcurrentSaleCap = _cap;\t\n', '\t\tcurrentStage = _stage;\n', '\t}\n', '\t\n', '\tfunction updateVaults(address _reserve, address _restricted) external onlyOwner saleNotDone {\n', '\t\trequire(_reserve != address(0));\n', '\t\trequire(_restricted != address(0));\n', '\t\t\n', '\t\treserveVault = _reserve;\n', '\t\trestrictedVault = _restricted;\n', '\t\t\n', '\t    require(Ownable(_reserve).owner() == address(this));\n', '\t    require(Ownable(_restricted).owner() == address(this));\n', '\t}\n', '\t\n', '\tfunction updateReserveVault(address _reserve) external onlyOwner saleNotDone {\n', '\t\trequire(_reserve != address(0));\n', '\n', '\t\treserveVault = _reserve;\n', '\n', '\t    require(Ownable(_reserve).owner() == address(this));\n', '\t}\n', '\t\n', '\tfunction updateRestrictedVault(address _restricted) external onlyOwner saleNotDone {\n', '\t\trequire(_restricted != address(0));\n', '\t\t\n', '\t\trestrictedVault = _restricted;\n', '\t\t\n', '\t    require(Ownable(_restricted).owner() == address(this));\n', '\t}\n', '\t\n', '\t//function updateFundWallet(address _wallet) external onlyOwner saleNotDone {\n', '\t//\trequire(_wallet != address(0));\n', '\t//\trequire(fundWallet != _wallet);\n', '\t//  fundWallet = _wallet;\n', '\t//}\n', '\n', '\tfunction bookkeep(address _beneficiary, uint256 _base, uint256 _bonus) internal returns(bool) {\n', '\t\tuint256 newBase = baseTokensAllocated.add(_base);\n', '\t\tuint256 newBonus = bonusTokensAllocated.add(_bonus);\n', '\n', '\t\tif (newBase > currentSaleCap || newBonus > marketingCap) {\n', '\t\t\treturn false;\n', '\t\t}\n', '\n', '\t\tbaseTokensAllocated = newBase;\n', '\t\tbonusTokensAllocated = newBonus;\n', '\n', '\t\tContribution storage c = contributionBalance[_beneficiary];\n', '\t\tc.base = c.base.add(_base);\n', '\t\tc.bonus = c.bonus.add(_bonus);\n', '\n', '\t\treturn true;\n', '\t}\n', '    \n', '\tfunction computeTokens(uint256 _weiAmount, uint _bonusRate) external view returns (uint256 base, uint256 bonus) {\n', '\t\tbase = _weiAmount.mul(exchangeRate).div(1000);\n', '\t\tbonus = base.mul(_bonusRate).div(100);\n', '\t}\n', '    \n', "\t// can only 'buy' tokens while the sale is active. \n", '\tfunction () public payable saleActive stopInEmergency {\n', '\t    revert();\n', '\t    \n', '\t\t//buyTokens(msg.sender);\n', '\t}\n', '\n', '\t//function buyTokens(address _beneficiary) public payable saleActive stopInEmergency {\n', '\t\t//require(msg.value != 0);\n', '\t\t//require(_beneficiary != 0x0);\n', '\t\t//require(blacklist[_beneficiary] == false);\n', '\n', '\t\t//uint256 weiAmount = msg.value;\n', '\t\t//uint256 baseTokens = weiAmount.mul(exchangeRate).div(1000);\n', '\t\t//uint256 bonusTokens = baseTokens.mul(bonusRate).div(100);\n', '\t\t\n', '\t\t//require (bookkeep(_beneficiary, baseTokens, bonusTokens));\n', '\n', '        //uint256 total = baseTokens.add(bonusTokens);\n', '        \n', '\t\t//weiRaised = weiRaised.add(weiAmount);\n', '\n', '        //TokenPurchase(msg.sender, _beneficiary, weiAmount, total);\n', '        \n', '\t\t//fundWallet.transfer(weiAmount);\n', '\t\t//token.mint(_beneficiary, total);\n', '\t//}\n', '\n', '\t// function to purchase tokens for someone, from an external funding source.  This function \n', '\t// assumes that the external source has been verified.  bonus amount is passed in, so we can \n', '\t// handle an edge case where someone externally purchased tokens when the bonus should be different\n', '\t// than it currnetly is set to.\n', '\tfunction buyTokensFor(address _beneficiary, uint256 _baseTokens, uint _bonusTokens) external onlyOwner saleAllocatable {\n', '\t\trequire(_beneficiary != 0x0);\n', '\t\trequire(_baseTokens != 0 || _bonusTokens != 0);\n', '\t\trequire(blacklist[_beneficiary] == false);\n', '\t\t\n', '        require(bookkeep(_beneficiary, _baseTokens, _bonusTokens));\n', '\n', '        uint256 total = _baseTokens.add(_bonusTokens);\n', '\n', '        TokenPurchase(msg.sender, _beneficiary, 0, total);\n', '        \n', '\t\ttoken.mint(_beneficiary, total);\n', '\t}\n', '    \n', '\t// same as above, but strictly for allocating tokens out of the bonus pool\n', '\tfunction giftTokens(address _beneficiary, uint256 _giftAmount) external onlyOwner saleAllocatable {\n', '\t\trequire(_beneficiary != 0x0);\n', '\t\trequire(_giftAmount != 0);\n', '\t\trequire(blacklist[_beneficiary] == false);\n', '\n', '        require(bookkeep(_beneficiary, 0, _giftAmount));\n', '        \n', '        TokenPurchase(msg.sender, _beneficiary, 0, _giftAmount);\n', '        \n', '\t\ttoken.mint(_beneficiary, _giftAmount);\n', '\t}\n', '\tfunction balanceOf(address _beneficiary) public view returns(uint256, uint256) {\n', '\t\trequire(_beneficiary != address(0));\n', '\n', '        Contribution storage c = contributionBalance[_beneficiary];\n', '\t\treturn (c.base, c.bonus);\n', '\t}\n', '\n', '\t\n', '\t// ban/prevent a user from participating in the ICO for violations of TOS, and deallocate any tokens they have allocated\n', '\t// if any refunds are necessary, they are handled offline\n', '\tfunction ban(address _owner) external onlyOwner saleAllocatable returns (uint256 total) {\n', '\t    require(_owner != address(0));\n', '\t    require(!blacklist[_owner]);\n', '\t    \n', '\t    uint256 base;\n', '\t    uint256 bonus;\n', '\t    \n', '\t    (base, bonus) = balanceOf(_owner);\n', '\t    \n', '\t    delete contributionBalance[_owner];\n', '\t    \n', '\t\tbaseTokensAllocated = baseTokensAllocated.sub(base);\n', '\t\tbonusTokensAllocated = bonusTokensAllocated.sub(bonus);\n', '\t\t\n', '\t    blacklist[_owner] = true;\n', '\n', '\t    total = token.revoke(_owner);\n', '\t}\n', '\n', '    // unbans a user that was banned with the above function.  does NOT reallocate their tokens\n', '\tfunction unban(address _beneficiary) external onlyOwner saleAllocatable {\n', '\t    require(_beneficiary != address(0));\n', '\t    require(blacklist[_beneficiary] == true);\n', '\n', '        delete blacklist[_beneficiary];\n', '\t}\n', '\t\n', '\t// release any other tokens needed and mark us as allocated\n', '\tfunction releaseTokens() external onlyOwner saleAllocating {\n', '\t\trequire(reserveVault != address(0));\n', '\t\trequire(restrictedVault != address(0));\n', '\t\trequire(saleAllocated == false);\n', '\n', '\t\tsaleAllocated = true;\n', '\t\t\n', '        // allocate the team and reserve tokens to our vaults\t\t\n', '\t    token.mint(reserveVault, reserveCap); \n', '\t\ttoken.mint(restrictedVault, teamCap); \n', '\t}\n', '\n', '\t\n', "\t// end the ICO, tokens won't show up in anyone's wallets until this function is called.\n", '\t// once this is called, nothing works on the ICO any longer\n', '\tfunction endICO() external onlyOwner saleAllocating {\n', '\t    require(saleAllocated);\n', '\t    \n', '\t    currentStage = Stage.Done;\n', '\t    \n', '        // this will release all allocated tokens to their owners\n', '\t    token.finishMinting();  \n', '\t    \n', '\t    // now transfer all these objects back to our owner, which we know to be a trusted account\n', '\t    token.transferOwnership(owner);\n', '\t    Ownable(reserveVault).transferOwnership(owner);\n', '\t    Ownable(restrictedVault).transferOwnership(owner);\n', '\t}\n', '\t\n', '\tfunction giveBack() public onlyOwner {\n', '\t    if (address(token) != address(0))\n', '\t        token.transferOwnership(owner);\n', '        if (reserveVault != address(0))\n', '\t        Ownable(reserveVault).transferOwnership(owner);\n', '        if (restrictedVault != address(0))\n', '\t        Ownable(restrictedVault).transferOwnership(owner);\n', '\t}\n', '}']
