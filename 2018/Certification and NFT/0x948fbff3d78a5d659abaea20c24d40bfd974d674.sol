['pragma solidity 0.4.24;\n', '/**\n', '* @title Networth Token Contract\n', '* @dev ERC-20 Token Standar Compliant\n', '* Contact: networthlabs.com\n', '* Airdrop service provided by f.antonio.akel@gmail.com\n', '*/\n', '\n', '/**\n', ' * @title SafeMath by OpenZeppelin (partially)\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', '* @title ERC20 Token minimal interface for external tokens handle\n', '*/\n', 'contract token {\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '}\n', '\n', '/**\n', '* @title Admin parameters\n', '* @dev Define administration parameters for this contract\n', '*/\n', 'contract admined { //This token contract is administered\n', '    address public admin; //Admin address is public\n', '    address public allowed; //Allowed address is public\n', '    bool public transferLock; //global transfer lock\n', '\n', '    /**\n', '    * @dev Contract constructor, define initial administrator\n', '    */\n', '    constructor() internal {\n', '        admin = msg.sender; //Set initial admin to contract creator\n', '        emit Admined(admin);\n', '    }\n', '\n', '    modifier onlyAdmin() { //A modifier to define admin-only functions\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAllowed() { //A modifier to define allowed only function during transfer locks\n', '        require(msg.sender == admin || msg.sender == allowed || transferLock == false);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to set new admin address\n', '    * @param _newAdmin The address to transfer administration to\n', '    */\n', '    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered\n', '        require(_newAdmin != address(0));\n', '        admin = _newAdmin;\n', '        emit TransferAdminship(_newAdmin);\n', '    }\n', '\n', '    /**\n', '    * @dev Function to set new allowed address\n', '    * @param _newAllowed The address to allow\n', '    */\n', '    function SetAllow(address _newAllowed) onlyAdmin public {\n', '        allowed = _newAllowed;\n', '        emit SetAllowed(_newAllowed);\n', '    }\n', '\n', '   /**\n', '    * @dev Function to set transfer locks\n', '    * @param _set boolean flag (true | false)\n', '    */\n', '    function setTransferLock(bool _set) onlyAdmin public { //Only the admin can set a lock on transfers\n', '        transferLock = _set;\n', '        emit SetTransferLock(_set);\n', '    }\n', '\n', '    //All admin actions have a log for public review\n', '    event SetTransferLock(bool _set);\n', '    event SetAllowed(address _allowed);\n', '    event TransferAdminship(address _newAdminister);\n', '    event Admined(address _administer);\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20TokenInterface\n', ' * @dev Token contract interface for external use\n', ' */\n', 'contract ERC20TokenInterface {\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '}\n', '\n', '\n', '/**\n', '* @title ERC20Token\n', '* @notice Token definition contract\n', '*/\n', 'contract ERC20Token is admined,ERC20TokenInterface { //Standard definition of an ERC20Token\n', '    using SafeMath for uint256;\n', '    uint256 public totalSupply;\n', '    mapping (address => uint256) balances; //A mapping of all balances per address\n', '    mapping (address => mapping (address => uint256)) allowed; //A mapping of all allowances\n', '    mapping (address => bool) frozen; //A mapping of all frozen status\n', '\n', '    /**\n', '    * @dev Get the balance of an specified address.\n', '    * @param _owner The address to be query.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint256 value) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token to a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) onlyAllowed public returns (bool success) {\n', '        require(_to != address(0)); //If you dont want that people destroy token\n', '        require(frozen[msg.sender]==false);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token from an address to another specified address using allowance\n', '    * @param _from The address where token comes.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) onlyAllowed public returns (bool success) {\n', '        require(_to != address(0)); //If you dont want that people destroy token\n', '        require(frozen[_from]==false);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Assign allowance to an specified address to use the owner balance\n', '    * @param _spender The address to be allowed to spend.\n', '    * @param _value The amount to be allowed.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0)); //exploit mitigation\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Get the allowance of an specified address to use another address balance.\n', '    * @param _owner The address of the owner of the tokens.\n', '    * @param _spender The address of the allowed spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Frozen account.\n', '    * @param _target The address to being frozen.\n', '    * @param _flag The frozen status to set.\n', '    */\n', '    function setFrozen(address _target,bool _flag) onlyAdmin public {\n', '        frozen[_target]=_flag;\n', '        emit FrozenStatus(_target,_flag);\n', '    }\n', '\n', '    /**\n', '    * @dev Special only admin function for batch tokens assignments.\n', '    * @param _target Array of target addresses.\n', '    * @param _amount Targets value.\n', '    */\n', '    function batch(address[] _target,uint256 _amount) onlyAdmin public { //It takes an array of addresses and an amount\n', '        uint256 size = _target.length;\n', '        require( balances[msg.sender] >= size.mul(_amount));\n', '        balances[msg.sender] = balances[msg.sender].sub(size.mul(_amount));\n', '\n', '        for (uint i=0; i<size; i++) { //It moves over the array\n', '            balances[_target[i]] = balances[_target[i]].add(_amount);\n', '            emit Transfer(msg.sender, _target[i], _amount);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Log Events\n', '    */\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event FrozenStatus(address _target,bool _flag);\n', '\n', '}\n', '\n', '/**\n', '* @title Networth\n', '* @notice Networth Token creation.\n', '* @dev ERC20 Token compliant\n', '*/\n', 'contract Networth is ERC20Token {\n', '    string public name = &#39;Networth&#39;;\n', '    uint8 public decimals = 18;\n', '    string public symbol = &#39;Googol&#39;;\n', '    string public version = &#39;1&#39;;\n', '\n', '    /**\n', '    * @notice token contructor.\n', '    */\n', '    constructor() public {\n', '        totalSupply = 250000000 * 10 ** uint256(decimals); //250.000.000 tokens initial supply;\n', '        balances[msg.sender] = totalSupply;\n', '        emit Transfer(0, msg.sender, totalSupply);\n', '    }\n', '\n', '    /**\n', '    * @notice Function to claim any token stuck on contract\n', '    */\n', '    function externalTokensRecovery(token _address) onlyAdmin public {\n', '        uint256 remainder = _address.balanceOf(this); //Check remainder tokens\n', '        _address.transfer(msg.sender,remainder); //Transfer tokens to admin\n', '    }\n', '\n', '\n', '    /**\n', '    * @notice this contract will revert on direct non-function calls, also it&#39;s not payable\n', '    * @dev Function to handle callback calls to contract\n', '    */\n', '    function() public {\n', '        revert();\n', '    }\n', '\n', '}']
['pragma solidity 0.4.24;\n', '/**\n', '* @title Networth Token Contract\n', '* @dev ERC-20 Token Standar Compliant\n', '* Contact: networthlabs.com\n', '* Airdrop service provided by f.antonio.akel@gmail.com\n', '*/\n', '\n', '/**\n', ' * @title SafeMath by OpenZeppelin (partially)\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', '* @title ERC20 Token minimal interface for external tokens handle\n', '*/\n', 'contract token {\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '}\n', '\n', '/**\n', '* @title Admin parameters\n', '* @dev Define administration parameters for this contract\n', '*/\n', 'contract admined { //This token contract is administered\n', '    address public admin; //Admin address is public\n', '    address public allowed; //Allowed address is public\n', '    bool public transferLock; //global transfer lock\n', '\n', '    /**\n', '    * @dev Contract constructor, define initial administrator\n', '    */\n', '    constructor() internal {\n', '        admin = msg.sender; //Set initial admin to contract creator\n', '        emit Admined(admin);\n', '    }\n', '\n', '    modifier onlyAdmin() { //A modifier to define admin-only functions\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAllowed() { //A modifier to define allowed only function during transfer locks\n', '        require(msg.sender == admin || msg.sender == allowed || transferLock == false);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to set new admin address\n', '    * @param _newAdmin The address to transfer administration to\n', '    */\n', '    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered\n', '        require(_newAdmin != address(0));\n', '        admin = _newAdmin;\n', '        emit TransferAdminship(_newAdmin);\n', '    }\n', '\n', '    /**\n', '    * @dev Function to set new allowed address\n', '    * @param _newAllowed The address to allow\n', '    */\n', '    function SetAllow(address _newAllowed) onlyAdmin public {\n', '        allowed = _newAllowed;\n', '        emit SetAllowed(_newAllowed);\n', '    }\n', '\n', '   /**\n', '    * @dev Function to set transfer locks\n', '    * @param _set boolean flag (true | false)\n', '    */\n', '    function setTransferLock(bool _set) onlyAdmin public { //Only the admin can set a lock on transfers\n', '        transferLock = _set;\n', '        emit SetTransferLock(_set);\n', '    }\n', '\n', '    //All admin actions have a log for public review\n', '    event SetTransferLock(bool _set);\n', '    event SetAllowed(address _allowed);\n', '    event TransferAdminship(address _newAdminister);\n', '    event Admined(address _administer);\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20TokenInterface\n', ' * @dev Token contract interface for external use\n', ' */\n', 'contract ERC20TokenInterface {\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '}\n', '\n', '\n', '/**\n', '* @title ERC20Token\n', '* @notice Token definition contract\n', '*/\n', 'contract ERC20Token is admined,ERC20TokenInterface { //Standard definition of an ERC20Token\n', '    using SafeMath for uint256;\n', '    uint256 public totalSupply;\n', '    mapping (address => uint256) balances; //A mapping of all balances per address\n', '    mapping (address => mapping (address => uint256)) allowed; //A mapping of all allowances\n', '    mapping (address => bool) frozen; //A mapping of all frozen status\n', '\n', '    /**\n', '    * @dev Get the balance of an specified address.\n', '    * @param _owner The address to be query.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint256 value) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token to a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) onlyAllowed public returns (bool success) {\n', '        require(_to != address(0)); //If you dont want that people destroy token\n', '        require(frozen[msg.sender]==false);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token from an address to another specified address using allowance\n', '    * @param _from The address where token comes.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) onlyAllowed public returns (bool success) {\n', '        require(_to != address(0)); //If you dont want that people destroy token\n', '        require(frozen[_from]==false);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Assign allowance to an specified address to use the owner balance\n', '    * @param _spender The address to be allowed to spend.\n', '    * @param _value The amount to be allowed.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0)); //exploit mitigation\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Get the allowance of an specified address to use another address balance.\n', '    * @param _owner The address of the owner of the tokens.\n', '    * @param _spender The address of the allowed spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Frozen account.\n', '    * @param _target The address to being frozen.\n', '    * @param _flag The frozen status to set.\n', '    */\n', '    function setFrozen(address _target,bool _flag) onlyAdmin public {\n', '        frozen[_target]=_flag;\n', '        emit FrozenStatus(_target,_flag);\n', '    }\n', '\n', '    /**\n', '    * @dev Special only admin function for batch tokens assignments.\n', '    * @param _target Array of target addresses.\n', '    * @param _amount Targets value.\n', '    */\n', '    function batch(address[] _target,uint256 _amount) onlyAdmin public { //It takes an array of addresses and an amount\n', '        uint256 size = _target.length;\n', '        require( balances[msg.sender] >= size.mul(_amount));\n', '        balances[msg.sender] = balances[msg.sender].sub(size.mul(_amount));\n', '\n', '        for (uint i=0; i<size; i++) { //It moves over the array\n', '            balances[_target[i]] = balances[_target[i]].add(_amount);\n', '            emit Transfer(msg.sender, _target[i], _amount);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Log Events\n', '    */\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event FrozenStatus(address _target,bool _flag);\n', '\n', '}\n', '\n', '/**\n', '* @title Networth\n', '* @notice Networth Token creation.\n', '* @dev ERC20 Token compliant\n', '*/\n', 'contract Networth is ERC20Token {\n', "    string public name = 'Networth';\n", '    uint8 public decimals = 18;\n', "    string public symbol = 'Googol';\n", "    string public version = '1';\n", '\n', '    /**\n', '    * @notice token contructor.\n', '    */\n', '    constructor() public {\n', '        totalSupply = 250000000 * 10 ** uint256(decimals); //250.000.000 tokens initial supply;\n', '        balances[msg.sender] = totalSupply;\n', '        emit Transfer(0, msg.sender, totalSupply);\n', '    }\n', '\n', '    /**\n', '    * @notice Function to claim any token stuck on contract\n', '    */\n', '    function externalTokensRecovery(token _address) onlyAdmin public {\n', '        uint256 remainder = _address.balanceOf(this); //Check remainder tokens\n', '        _address.transfer(msg.sender,remainder); //Transfer tokens to admin\n', '    }\n', '\n', '\n', '    /**\n', "    * @notice this contract will revert on direct non-function calls, also it's not payable\n", '    * @dev Function to handle callback calls to contract\n', '    */\n', '    function() public {\n', '        revert();\n', '    }\n', '\n', '}']
