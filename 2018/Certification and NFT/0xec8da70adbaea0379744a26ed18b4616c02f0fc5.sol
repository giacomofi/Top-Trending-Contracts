['pragma solidity ^0.4.23;\n', '\n', 'contract ERC223 {\n', '    uint public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint);\n', '\n', '    function name() public constant returns (string _name);\n', '    function symbol() public constant returns (string _symbol);\n', '    function decimals() public constant returns (uint8 _decimals);\n', '    function totalSupply() public constant returns (uint256 _supply);\n', '\n', '    function transfer(address to, uint value) public returns (bool _success);\n', '    function transfer(address to, uint value, bytes data) public returns (bool _success);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event ERC223Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\n', '    event Burn(address indexed _burner, uint256 _value);\n', '}\n', '\n', '/**\n', ' * https://peeke.io\n', ' * - Peeke Private Coupon -  \n', ' * These tokens form a binding receipt for the initial private sale and can be redeemed onchain 1:1 with the PKE token once deployed.\n', ' * Unsold tokens will be burnt at the end of the private campaign.\n', ' **/\n', ' \n', 'contract PeekePrivateTokenCoupon is ERC223 {\n', '    using SafeMath for uint;\n', '\n', '    mapping(address => uint) balances;\n', '\n', '    string public name    = "Peeke Private Coupon";\n', '    string public symbol  = "PPC-PKE";\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply = 155000000 * (10**18);\n', '\n', '    constructor(PeekePrivateTokenCoupon) public {\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '\n', '    // Function to access name of token.\n', '    function name() constant public returns (string _name) {\n', '        return name;\n', '    }\n', '\n', '    // Function to access symbol of token.\n', '    function symbol() constant public returns (string _symbol) {\n', '        return symbol;\n', '    }\n', '\n', '    // Function to access decimals of token.\n', '    function decimals() constant public returns (uint8 _decimals) {\n', '        return decimals;\n', '    }\n', '\n', '    // Function to access total supply of tokens.\n', '    function totalSupply() constant public returns (uint256 _totalSupply) {\n', '        return totalSupply;\n', '    }\n', '\n', '    // Function that is called when a user or another contract wants to transfer funds.\n', '    function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\n', '        if(isContract(_to)) {\n', '            return transferToContract(_to, _value, _data);\n', '        }\n', '        else {\n', '            return transferToAddress(_to, _value, _data);\n', '        }\n', '    }\n', '\n', '    // Standard function transfer similar to ERC20 transfer with no _data.\n', '    // Added due to backwards compatibility reasons .\n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '        // Standard function transfer similar to ERC20 transfer with no _data\n', '        // Added due to backwards compatibility reasons\n', '        bytes memory empty;\n', '        if(isContract(_to)) {\n', '            return transferToContract(_to, _value, empty);\n', '        } else {\n', '            return transferToAddress(_to, _value, empty);\n', '        }\n', '    }\n', '\n', '    // Assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '    function isContract(address _addr) private constant returns (bool is_contract) {\n', '      uint length;\n', '      assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly.\n', '            length := extcodesize(_addr)\n', '        }\n', '        return (length > 0);\n', '    }\n', '\n', '    // Function that is called when transaction target is an address\n', '    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n', '        if (balanceOf(msg.sender) < _value) revert();\n', '        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '        balances[_to] = balanceOf(_to).add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        emit ERC223Transfer(msg.sender, _to, _value, _data);\n', '        return true;\n', '    }\n', '\n', '    // Function that is called when transaction target is a contract\n', '    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n', '        if (balanceOf(msg.sender) < _value) revert();\n', '        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '        balances[_to] = balanceOf(_to).add(_value);\n', '        ContractReceiver reciever = ContractReceiver(_to);\n', '        reciever.tokenFallback(msg.sender, _value, _data);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        emit ERC223Transfer(msg.sender, _to, _value, _data);\n', '        return true;\n', '    }\n', '\n', '    // Function to burn unsold tokens at the end of the private contribution.\n', '    function burn() public {\n', '        uint256 tokens = balances[msg.sender];\n', '        balances[msg.sender] = 0;\n', '        totalSupply = totalSupply.sub(tokens);\n', '        emit Burn(msg.sender, tokens);\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '\n', 'contract ContractReceiver {\n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', '\n', 'library SafeMath {\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', 'contract ERC223 {\n', '    uint public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint);\n', '\n', '    function name() public constant returns (string _name);\n', '    function symbol() public constant returns (string _symbol);\n', '    function decimals() public constant returns (uint8 _decimals);\n', '    function totalSupply() public constant returns (uint256 _supply);\n', '\n', '    function transfer(address to, uint value) public returns (bool _success);\n', '    function transfer(address to, uint value, bytes data) public returns (bool _success);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event ERC223Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\n', '    event Burn(address indexed _burner, uint256 _value);\n', '}\n', '\n', '/**\n', ' * https://peeke.io\n', ' * - Peeke Private Coupon -  \n', ' * These tokens form a binding receipt for the initial private sale and can be redeemed onchain 1:1 with the PKE token once deployed.\n', ' * Unsold tokens will be burnt at the end of the private campaign.\n', ' **/\n', ' \n', 'contract PeekePrivateTokenCoupon is ERC223 {\n', '    using SafeMath for uint;\n', '\n', '    mapping(address => uint) balances;\n', '\n', '    string public name    = "Peeke Private Coupon";\n', '    string public symbol  = "PPC-PKE";\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply = 155000000 * (10**18);\n', '\n', '    constructor(PeekePrivateTokenCoupon) public {\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '\n', '    // Function to access name of token.\n', '    function name() constant public returns (string _name) {\n', '        return name;\n', '    }\n', '\n', '    // Function to access symbol of token.\n', '    function symbol() constant public returns (string _symbol) {\n', '        return symbol;\n', '    }\n', '\n', '    // Function to access decimals of token.\n', '    function decimals() constant public returns (uint8 _decimals) {\n', '        return decimals;\n', '    }\n', '\n', '    // Function to access total supply of tokens.\n', '    function totalSupply() constant public returns (uint256 _totalSupply) {\n', '        return totalSupply;\n', '    }\n', '\n', '    // Function that is called when a user or another contract wants to transfer funds.\n', '    function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\n', '        if(isContract(_to)) {\n', '            return transferToContract(_to, _value, _data);\n', '        }\n', '        else {\n', '            return transferToAddress(_to, _value, _data);\n', '        }\n', '    }\n', '\n', '    // Standard function transfer similar to ERC20 transfer with no _data.\n', '    // Added due to backwards compatibility reasons .\n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '        // Standard function transfer similar to ERC20 transfer with no _data\n', '        // Added due to backwards compatibility reasons\n', '        bytes memory empty;\n', '        if(isContract(_to)) {\n', '            return transferToContract(_to, _value, empty);\n', '        } else {\n', '            return transferToAddress(_to, _value, empty);\n', '        }\n', '    }\n', '\n', '    // Assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '    function isContract(address _addr) private constant returns (bool is_contract) {\n', '      uint length;\n', '      assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly.\n', '            length := extcodesize(_addr)\n', '        }\n', '        return (length > 0);\n', '    }\n', '\n', '    // Function that is called when transaction target is an address\n', '    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n', '        if (balanceOf(msg.sender) < _value) revert();\n', '        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '        balances[_to] = balanceOf(_to).add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        emit ERC223Transfer(msg.sender, _to, _value, _data);\n', '        return true;\n', '    }\n', '\n', '    // Function that is called when transaction target is a contract\n', '    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n', '        if (balanceOf(msg.sender) < _value) revert();\n', '        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '        balances[_to] = balanceOf(_to).add(_value);\n', '        ContractReceiver reciever = ContractReceiver(_to);\n', '        reciever.tokenFallback(msg.sender, _value, _data);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        emit ERC223Transfer(msg.sender, _to, _value, _data);\n', '        return true;\n', '    }\n', '\n', '    // Function to burn unsold tokens at the end of the private contribution.\n', '    function burn() public {\n', '        uint256 tokens = balances[msg.sender];\n', '        balances[msg.sender] = 0;\n', '        totalSupply = totalSupply.sub(tokens);\n', '        emit Burn(msg.sender, tokens);\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '\n', 'contract ContractReceiver {\n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', '\n', 'library SafeMath {\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
