['pragma solidity ^0.4.25;\n', '\n', '//\n', '//   ____                                      ______                        __      \n', '//  /\\  _`\\                                   /\\__  _\\                      /\\ \\__   \n', '//  \\ \\,\\L\\_\\  __  __  _____      __   _ __   \\/_/\\ \\/ _ __   __  __    ____\\ \\ ,_\\  \n', '//   \\/_\\__ \\ /\\ \\/\\ \\/\\ &#39;__`\\  /&#39;__`\\/\\`&#39;__\\    \\ \\ \\/\\`&#39;__\\/\\ \\/\\ \\  /&#39;,__\\\\ \\ \\/  \n', '//     /\\ \\L\\ \\ \\ \\_\\ \\ \\ \\L\\ \\/\\  __/\\ \\ \\/      \\ \\ \\ \\ \\/ \\ \\ \\_\\ \\/\\__, `\\\\ \\ \\_ \n', '//     \\ `\\____\\ \\____/\\ \\ ,__/\\ \\____\\\\ \\_\\       \\ \\_\\ \\_\\  \\ \\____/\\/\\____/ \\ \\__\\\n', '//      \\/_____/\\/___/  \\ \\ \\/  \\/____/ \\/_/        \\/_/\\/_/   \\/___/  \\/___/   \\/__/\n', '//                       \\ \\_\\               \n', '//                        \\/_/                                                        \n', '//\n', '//  ETHEREUM PSEUDO-INVESTMENT SMART CONTRACT\n', '//\n', '//  Make a payment to this address to become a participant. Once invested,\n', '//  any following transactions of any amount will request dividend payout\n', '//  for you and increase invested amount.\n', '//\n', '//  Easter Eggs:\n', '//  1. If a function "advertise" called by any ethereum address with supplied\n', '//  referring address and at least 0.15 ETH, and referring address makes\n', '//  payments in future, referrer address will receive 3% referral bonuses.\n', '//  E.g., in geth console you can do the following:\n', '//\n', '//  var abi = eth.contract(<TrustABI>);\n', '//  var contract = abi.at("<TrustAddress>");\n', '//  var calldata = contract.advertise.getData("<TargetAddress>");\n', '//  web3.eth.sendTransaction({from:"<YourAddress>", to:"<TrustAddress>",\n', '//      data: calldata, value: web3.toWei(0.15, "ether"), gas:200000});\n', '//\n', '//  Copypaste and insert your values into "<>" placeholders.\n', '//\n', '//  Referring wallet will receive an advertisement payment of 1 WEI and your\n', '//  supplied ETH value will be invested. PLEASE NOTE that 0.15 ETH price\n', '//  may be changed - see "Read Contract" tab on etherscan.io.\n', '//\n', '//  2. Gold investor receive instant 3% bonus payments, when regular\n', '//  investors make payments greater than 0.05 ETH on each N-th transaction.\n', '//\n', '//  3. Gold referrer will receive additional bonus in similar way as the gold\n', '//  investor.\n', '//\n', '//  Please do not send payments via contracts and other unusual ways -\n', '//  these payments may be lost. Recommended gas limit per transaction is\n', '//  200000.\n', '//\n', '//  Initial GAIN:                               4%\n', '//  Referral Bonus:                             3% from investments\n', '//  Gold Bonus:                                 3% from every N-th investment\n', '//  Project Fee:                                3% from dividends\n', '//  Minimum investment:                         No limit\n', '//  Other questions:                            apiman45445 at protonmail.com\n', '//\n', '\n', 'contract SuperTrust {\n', '\t// Generate public view getters for game settings and stats\n', '\taddress public admin = msg.sender;\n', '\tuint256 public round = 0;\n', '\tuint256 public payoutFee;\n', '\tuint256 public goldBonus;\n', '\tuint256 public referralBonus;\n', '\tuint256 public investorGain;\n', '\tuint256 public bonusInterval;\n', '\tuint256 public bonusThreshold;\n', '\tuint256 public advPrice;\n', '\tuint256 public investorCount;\n', '\tuint256 public avgMinedPerDay;\n', '\tuint256 public collectedFee = 0;\n', '\tbool public lastRound = false; \n', '    // Hide some data from public access to prevent manipulations\n', '\tmapping(uint256 => mapping(address => Investor)) private investors;\n', '\tmapping(uint256 => mapping(address => address)) private referrals;\n', '\taddress[2] private board;\n', '\tuint256 private roulett;\n', '\n', '\tstruct Investor {\n', '\t\tuint256 deposit;\n', '\t\tuint256 block;\n', '\t\tuint256 refBalance;\n', '\t\tbool banned;\n', '\t}\n', '\n', '\tfunction globalReinitialization() private {\n', '\t\tpayoutFee = 3;\n', '\t\tgoldBonus = 3;\n', '\t\treferralBonus = 3;\n', '\t\tinvestorGain = 4;\n', '\t\tbonusInterval = 5;\n', '\t\tbonusThreshold = 0.05 ether;\n', '\t\tadvPrice = 0.15 ether;\n', '\t\tinvestorCount = 0;\n', '\t\tavgMinedPerDay = 5900;\n', '\t\tboard = [admin, admin];\n', '\t\troulett = bonusInterval * board.length;\n', '\t}\n', '\n', '\tconstructor () public {\n', '\t\tglobalReinitialization();\n', '\t}\n', '\n', '\t//\n', '\t// Administration\n', '\t//\n', '\n', '\tevent LogAdminRetired(address, address, address);\n', '\tevent LogPayoutFeeChanged(address, uint256, uint256);\n', '\tevent LogGoldBonusChanged(address, uint256, uint256);\n', '\tevent LogReferralBonusChanged(address, uint256, uint256);\n', '\tevent LogInvestorGainChanged(address, uint256, uint256);\n', '\tevent LogBonusIntervalChanged(address, uint256, uint256);\n', '\tevent LogBonusThresholdChanged(address, uint256, uint256);\n', '\tevent LogAdvPriceChanged(address, uint256, uint256);\n', '\tevent LogAvgMinedPerDayChanged(address, uint256, uint256);\n', '\tevent LogReferrerBanned(address, address, string);\n', '\n', '\tmodifier asAdmin {\n', '\t\trequire(msg.sender == admin, "unauthorized function call");\n', '\t\t_;\n', '\t}\n', '\n', '\tfunction retireAdmin(address newAdmin) public asAdmin {\n', '\t\temit LogAdminRetired(msg.sender, admin, newAdmin);\n', '\t\tadmin = newAdmin;\n', '\t}\n', '\n', '\tfunction setPayoutFee(uint256 newValue) public asAdmin {\n', '\t\t// Administrator cannot withdraw all money at any time.\n', '\t\trequire((newValue > 0) && (newValue <= 10));\n', '\t\temit LogPayoutFeeChanged(msg.sender, payoutFee, newValue);\n', '\t\tpayoutFee = newValue;\n', '\t}\n', '\n', '\tfunction setGoldBonus(uint256 newValue) public asAdmin {\n', '\t\trequire((newValue > 0) && (newValue <= 10));\n', '\t\temit LogGoldBonusChanged(msg.sender, goldBonus, newValue);\n', '\t\tgoldBonus = newValue;\n', '\t}\n', '\n', '\tfunction setReferralBonus(uint256 newValue) public asAdmin {\n', '\t\trequire((newValue > 0) && (newValue <= 10));\n', '\t\temit LogReferralBonusChanged(msg.sender, referralBonus, newValue);\n', '\t\treferralBonus = newValue;\n', '\t}\n', '\n', '\tfunction setInvestorGain(uint256 newValue) public asAdmin {\n', '\t\trequire((newValue > 0) && (newValue <= 5));\n', '\t\temit LogInvestorGainChanged(msg.sender, investorGain, newValue);\n', '\t\tinvestorGain = newValue;\n', '\t}\n', '\n', '\tfunction setBonusInterval(uint256 newValue) public asAdmin {\n', '\t\trequire(newValue > 0);\n', '\t\temit LogBonusIntervalChanged(msg.sender, bonusInterval, newValue);\n', '\t\tbonusInterval = newValue;\n', '\t\troulett = bonusInterval * board.length;\n', '\t}\n', '\n', '\tfunction setBonusThreshold(uint256 newValue) public asAdmin {\n', '\t\temit LogBonusThresholdChanged(msg.sender, bonusThreshold, newValue);\n', '\t\tbonusThreshold = newValue;\n', '\t}\n', '\n', '\tfunction setAdvPrice(uint256 newValue) public asAdmin {\n', '\t\temit LogAdvPriceChanged(msg.sender, advPrice, newValue);\n', '\t\tadvPrice = newValue;\n', '\t}\n', '\n', '\tfunction setAvgMinedPerDay(uint256 newValue) public asAdmin {\n', '\t\trequire(newValue >= 4000);\n', '\t\temit LogAvgMinedPerDayChanged(msg.sender, avgMinedPerDay, newValue);\n', '\t\tavgMinedPerDay = newValue;\n', '\t}\n', '\n', '\tfunction collectFee(uint256 percent) public asAdmin {\n', '\t\trequire(percent <= 100);\n', '\t\tuint256 amount = (collectedFee * percent) / 100;\n', '\t\trequire(amount <= collectedFee);\n', '\t\tcollectedFee -= amount;\n', '\t\tadmin.transfer(amount);\n', '\t}\n', '\n', '\tfunction banReferrer(address target) public asAdmin {\n', '\t\trequire(target != admin);\n', '\t\temit LogReferrerBanned(msg.sender, target, "Violating referrer banned");\n', '\t\tinvestors[round][target].banned = true;\n', '\t\tboard[1] = admin; // refBonus of admin is always zero\n', '\t}\n', '\n', '\tfunction unbanReferrer(address target) public asAdmin {\n', '\t\trequire(target != admin);\n', '\t\temit LogReferrerBanned(msg.sender, target, "Referrer unbanned");\n', '\t\tinvestors[round][target].banned = false;\n', '\t}\n', '\n', '\t//\n', '\t// Game logic\n', '\t//\n', '\n', '\tevent LogGoldBonus(address, address, uint256);\n', '\tevent LogReferralBonus(address, address, uint256);\n', '\tevent LogAdvertisement(address, address, uint256);\n', '\tevent LogNewInvestor(address, uint256);\n', '\tevent LogRoundEnd(address, uint256, uint256, uint256);\n', '\tevent LogBoardChange(address, uint256, string);\n', '\n', '\tfunction payoutBonuses() private {\n', '\t\t// GOLD bonus payout, if any\n', '\t\troulett--;\n', '\t\tif (roulett % bonusInterval == 0) {\n', '\t\t\tuint256 bonusAmount = (msg.value * goldBonus) / 100;\n', '\t\t\tuint256 winnIdx = roulett / bonusInterval;\n', '\t\t\tif ((board[winnIdx] != msg.sender) && (board[winnIdx] != admin)) {\n', '\t\t\t\t// Payouts to itself are not applicable, admin has its own reward\n', '\t\t\t\temit LogGoldBonus(msg.sender, board[winnIdx], bonusAmount);\n', '\t\t\t\tpayoutBalanceCheck(board[winnIdx], bonusAmount);\n', '\t\t\t}\n', '\t\t}\n', '\t\tif (roulett == 0)\n', '\t\t\troulett = bonusInterval * board.length;\n', '\t}\n', '\n', '\tfunction payoutReferrer() private {\n', '\t\tuint256 bonusAmount = (msg.value * referralBonus) / 100;\n', '\t\taddress referrer = referrals[round][msg.sender];\n', '\t\tif (!investors[round][referrer].banned) {\n', '\t\t\tif (referrer != admin)\n', '\t\t\t\tinvestors[round][referrer].refBalance += bonusAmount;\n', '\t\t\temit LogReferralBonus(msg.sender, referrer, bonusAmount);\n', '\t\t\tupdateGoldReferrer(referrer);\n', '\t\t\tpayoutBalanceCheck(referrer, bonusAmount);\n', '\t\t}\n', '\t}\n', '\n', '\tfunction payoutBalanceCheck(address to, uint256 value) private {\n', '\t\tif (to == admin) {\n', '\t\t\tcollectedFee += value;\n', '\t\t\treturn;\n', '\t\t}\n', '\t\tif (value > (address(this).balance - 0.01 ether)) {\n', '\t\t\tif (lastRound)\n', '\t\t\t\tselfdestruct(admin);\n', '\t\t\temit LogRoundEnd(msg.sender, value, address(this).balance, round);\n', '\t\t\tglobalReinitialization();\n', '\t\t\tround++;\n', '\t\t\treturn;\n', '\t\t}\n', '\t\tto.transfer(value);\n', '\t}\n', '\n', '\tfunction processDividends() private {\n', '\t\tif (investors[round][msg.sender].deposit != 0) {\n', '\t\t\t// ((investorGain% from deposit) * minedBlocks) / avgMinedPerDay\n', '\t\t\tuint256 deposit = investors[round][msg.sender].deposit;\n', '\t\t\tuint256 previousBlock = investors[round][msg.sender].block;\n', '\t\t\tuint256 minedBlocks = block.number - previousBlock;\n', '\t\t\tuint256 dailyIncome = (deposit * investorGain) / 100;\n', '\t\t\tuint256 divsAmount = (dailyIncome * minedBlocks) / avgMinedPerDay;\n', '\t\t\tcollectedFee += (divsAmount * payoutFee) / 100;\n', '\t\t\tpayoutBalanceCheck(msg.sender, divsAmount);\t\n', '\t\t}\n', '\t\telse if (msg.value != 0) {\n', '\t\t\temit LogNewInvestor(msg.sender, ++investorCount);\n', '\t\t}\n', '\t\tinvestors[round][msg.sender].block = block.number;\n', '\t\tinvestors[round][msg.sender].deposit += msg.value;\n', '\t}\n', '\n', '\tfunction updateGoldInvestor(address candidate) private {\n', '\t\tuint256 candidateDeposit = investors[round][candidate].deposit;\n', '\t\tif (candidateDeposit > investors[round][board[0]].deposit) {\n', '\t\t\tboard[0] = candidate;\n', '\t\t\temit LogBoardChange(candidate, candidateDeposit,\n', '\t\t\t\t"Congrats! New Gold Investor!");\n', '\t\t}\n', '\t}\n', '\n', '\tfunction updateGoldReferrer(address candidate) private {\n', '\t\t// Admin can refer participants, but will not be the gold referrer.\n', '\t\tif ((candidate != admin) && (!investors[round][candidate].banned)) {\n', '\t\t\tuint256 candidateRefBalance = investors[round][candidate].refBalance;\n', '\t\t\tuint256 goldReferrerBalance = investors[round][board[1]].refBalance;\n', '\t\t\tif (candidateRefBalance > goldReferrerBalance) {\n', '\t\t\t\tboard[1] = candidate;\n', '\t\t\t\temit LogBoardChange(candidate, candidateRefBalance,\n', '\t\t\t\t\t"Congrats! New Gold Referrer!");\n', '\t\t\t}\n', '\t\t}\n', '\t}\n', '\n', '\tfunction regularPayment() private {\n', '\t\tif (msg.value >= bonusThreshold) {\n', '\t\t\tpayoutBonuses();\n', '\t\t\tif (referrals[round][msg.sender] != 0)\n', '\t\t\t\tpayoutReferrer();\n', '\t\t}\n', '\t\tprocessDividends();\n', '\t\tupdateGoldInvestor(msg.sender);\n', '\t}\n', '\n', '\tfunction advertise(address targetAddress) external payable {\n', '\t\t// Any violation results in failed transaction\n', '\t\tif (investors[round][msg.sender].banned)\n', '\t\t\trevert("You are violating the rules and banned");\n', '\t\tif ((msg.sender != admin) && (msg.value < advPrice))\n', '\t\t\trevert("Need more ETH to make an advertiement");\n', '\t\tif (investors[round][targetAddress].deposit != 0)\n', '\t\t\trevert("Advertising address is already an investor");\n', '\t\tif (referrals[round][targetAddress] != 0)\n', '\t\t\trevert("Address already advertised");\n', '\n', '\t\temit LogAdvertisement(msg.sender, targetAddress, msg.value);\n', '\t\treferrals[round][targetAddress] = msg.sender;\n', '\t\ttargetAddress.transfer(1 wei);\n', '\t\tregularPayment();\n', '\t}\n', '\n', '\tfunction () external payable {\n', '\t\tregularPayment();\n', '\t} \n', '}']
['pragma solidity ^0.4.25;\n', '\n', '//\n', '//   ____                                      ______                        __      \n', '//  /\\  _`\\                                   /\\__  _\\                      /\\ \\__   \n', '//  \\ \\,\\L\\_\\  __  __  _____      __   _ __   \\/_/\\ \\/ _ __   __  __    ____\\ \\ ,_\\  \n', "//   \\/_\\__ \\ /\\ \\/\\ \\/\\ '__`\\  /'__`\\/\\`'__\\    \\ \\ \\/\\`'__\\/\\ \\/\\ \\  /',__\\\\ \\ \\/  \n", '//     /\\ \\L\\ \\ \\ \\_\\ \\ \\ \\L\\ \\/\\  __/\\ \\ \\/      \\ \\ \\ \\ \\/ \\ \\ \\_\\ \\/\\__, `\\\\ \\ \\_ \n', '//     \\ `\\____\\ \\____/\\ \\ ,__/\\ \\____\\\\ \\_\\       \\ \\_\\ \\_\\  \\ \\____/\\/\\____/ \\ \\__\\\n', '//      \\/_____/\\/___/  \\ \\ \\/  \\/____/ \\/_/        \\/_/\\/_/   \\/___/  \\/___/   \\/__/\n', '//                       \\ \\_\\               \n', '//                        \\/_/                                                        \n', '//\n', '//  ETHEREUM PSEUDO-INVESTMENT SMART CONTRACT\n', '//\n', '//  Make a payment to this address to become a participant. Once invested,\n', '//  any following transactions of any amount will request dividend payout\n', '//  for you and increase invested amount.\n', '//\n', '//  Easter Eggs:\n', '//  1. If a function "advertise" called by any ethereum address with supplied\n', '//  referring address and at least 0.15 ETH, and referring address makes\n', '//  payments in future, referrer address will receive 3% referral bonuses.\n', '//  E.g., in geth console you can do the following:\n', '//\n', '//  var abi = eth.contract(<TrustABI>);\n', '//  var contract = abi.at("<TrustAddress>");\n', '//  var calldata = contract.advertise.getData("<TargetAddress>");\n', '//  web3.eth.sendTransaction({from:"<YourAddress>", to:"<TrustAddress>",\n', '//      data: calldata, value: web3.toWei(0.15, "ether"), gas:200000});\n', '//\n', '//  Copypaste and insert your values into "<>" placeholders.\n', '//\n', '//  Referring wallet will receive an advertisement payment of 1 WEI and your\n', '//  supplied ETH value will be invested. PLEASE NOTE that 0.15 ETH price\n', '//  may be changed - see "Read Contract" tab on etherscan.io.\n', '//\n', '//  2. Gold investor receive instant 3% bonus payments, when regular\n', '//  investors make payments greater than 0.05 ETH on each N-th transaction.\n', '//\n', '//  3. Gold referrer will receive additional bonus in similar way as the gold\n', '//  investor.\n', '//\n', '//  Please do not send payments via contracts and other unusual ways -\n', '//  these payments may be lost. Recommended gas limit per transaction is\n', '//  200000.\n', '//\n', '//  Initial GAIN:                               4%\n', '//  Referral Bonus:                             3% from investments\n', '//  Gold Bonus:                                 3% from every N-th investment\n', '//  Project Fee:                                3% from dividends\n', '//  Minimum investment:                         No limit\n', '//  Other questions:                            apiman45445 at protonmail.com\n', '//\n', '\n', 'contract SuperTrust {\n', '\t// Generate public view getters for game settings and stats\n', '\taddress public admin = msg.sender;\n', '\tuint256 public round = 0;\n', '\tuint256 public payoutFee;\n', '\tuint256 public goldBonus;\n', '\tuint256 public referralBonus;\n', '\tuint256 public investorGain;\n', '\tuint256 public bonusInterval;\n', '\tuint256 public bonusThreshold;\n', '\tuint256 public advPrice;\n', '\tuint256 public investorCount;\n', '\tuint256 public avgMinedPerDay;\n', '\tuint256 public collectedFee = 0;\n', '\tbool public lastRound = false; \n', '    // Hide some data from public access to prevent manipulations\n', '\tmapping(uint256 => mapping(address => Investor)) private investors;\n', '\tmapping(uint256 => mapping(address => address)) private referrals;\n', '\taddress[2] private board;\n', '\tuint256 private roulett;\n', '\n', '\tstruct Investor {\n', '\t\tuint256 deposit;\n', '\t\tuint256 block;\n', '\t\tuint256 refBalance;\n', '\t\tbool banned;\n', '\t}\n', '\n', '\tfunction globalReinitialization() private {\n', '\t\tpayoutFee = 3;\n', '\t\tgoldBonus = 3;\n', '\t\treferralBonus = 3;\n', '\t\tinvestorGain = 4;\n', '\t\tbonusInterval = 5;\n', '\t\tbonusThreshold = 0.05 ether;\n', '\t\tadvPrice = 0.15 ether;\n', '\t\tinvestorCount = 0;\n', '\t\tavgMinedPerDay = 5900;\n', '\t\tboard = [admin, admin];\n', '\t\troulett = bonusInterval * board.length;\n', '\t}\n', '\n', '\tconstructor () public {\n', '\t\tglobalReinitialization();\n', '\t}\n', '\n', '\t//\n', '\t// Administration\n', '\t//\n', '\n', '\tevent LogAdminRetired(address, address, address);\n', '\tevent LogPayoutFeeChanged(address, uint256, uint256);\n', '\tevent LogGoldBonusChanged(address, uint256, uint256);\n', '\tevent LogReferralBonusChanged(address, uint256, uint256);\n', '\tevent LogInvestorGainChanged(address, uint256, uint256);\n', '\tevent LogBonusIntervalChanged(address, uint256, uint256);\n', '\tevent LogBonusThresholdChanged(address, uint256, uint256);\n', '\tevent LogAdvPriceChanged(address, uint256, uint256);\n', '\tevent LogAvgMinedPerDayChanged(address, uint256, uint256);\n', '\tevent LogReferrerBanned(address, address, string);\n', '\n', '\tmodifier asAdmin {\n', '\t\trequire(msg.sender == admin, "unauthorized function call");\n', '\t\t_;\n', '\t}\n', '\n', '\tfunction retireAdmin(address newAdmin) public asAdmin {\n', '\t\temit LogAdminRetired(msg.sender, admin, newAdmin);\n', '\t\tadmin = newAdmin;\n', '\t}\n', '\n', '\tfunction setPayoutFee(uint256 newValue) public asAdmin {\n', '\t\t// Administrator cannot withdraw all money at any time.\n', '\t\trequire((newValue > 0) && (newValue <= 10));\n', '\t\temit LogPayoutFeeChanged(msg.sender, payoutFee, newValue);\n', '\t\tpayoutFee = newValue;\n', '\t}\n', '\n', '\tfunction setGoldBonus(uint256 newValue) public asAdmin {\n', '\t\trequire((newValue > 0) && (newValue <= 10));\n', '\t\temit LogGoldBonusChanged(msg.sender, goldBonus, newValue);\n', '\t\tgoldBonus = newValue;\n', '\t}\n', '\n', '\tfunction setReferralBonus(uint256 newValue) public asAdmin {\n', '\t\trequire((newValue > 0) && (newValue <= 10));\n', '\t\temit LogReferralBonusChanged(msg.sender, referralBonus, newValue);\n', '\t\treferralBonus = newValue;\n', '\t}\n', '\n', '\tfunction setInvestorGain(uint256 newValue) public asAdmin {\n', '\t\trequire((newValue > 0) && (newValue <= 5));\n', '\t\temit LogInvestorGainChanged(msg.sender, investorGain, newValue);\n', '\t\tinvestorGain = newValue;\n', '\t}\n', '\n', '\tfunction setBonusInterval(uint256 newValue) public asAdmin {\n', '\t\trequire(newValue > 0);\n', '\t\temit LogBonusIntervalChanged(msg.sender, bonusInterval, newValue);\n', '\t\tbonusInterval = newValue;\n', '\t\troulett = bonusInterval * board.length;\n', '\t}\n', '\n', '\tfunction setBonusThreshold(uint256 newValue) public asAdmin {\n', '\t\temit LogBonusThresholdChanged(msg.sender, bonusThreshold, newValue);\n', '\t\tbonusThreshold = newValue;\n', '\t}\n', '\n', '\tfunction setAdvPrice(uint256 newValue) public asAdmin {\n', '\t\temit LogAdvPriceChanged(msg.sender, advPrice, newValue);\n', '\t\tadvPrice = newValue;\n', '\t}\n', '\n', '\tfunction setAvgMinedPerDay(uint256 newValue) public asAdmin {\n', '\t\trequire(newValue >= 4000);\n', '\t\temit LogAvgMinedPerDayChanged(msg.sender, avgMinedPerDay, newValue);\n', '\t\tavgMinedPerDay = newValue;\n', '\t}\n', '\n', '\tfunction collectFee(uint256 percent) public asAdmin {\n', '\t\trequire(percent <= 100);\n', '\t\tuint256 amount = (collectedFee * percent) / 100;\n', '\t\trequire(amount <= collectedFee);\n', '\t\tcollectedFee -= amount;\n', '\t\tadmin.transfer(amount);\n', '\t}\n', '\n', '\tfunction banReferrer(address target) public asAdmin {\n', '\t\trequire(target != admin);\n', '\t\temit LogReferrerBanned(msg.sender, target, "Violating referrer banned");\n', '\t\tinvestors[round][target].banned = true;\n', '\t\tboard[1] = admin; // refBonus of admin is always zero\n', '\t}\n', '\n', '\tfunction unbanReferrer(address target) public asAdmin {\n', '\t\trequire(target != admin);\n', '\t\temit LogReferrerBanned(msg.sender, target, "Referrer unbanned");\n', '\t\tinvestors[round][target].banned = false;\n', '\t}\n', '\n', '\t//\n', '\t// Game logic\n', '\t//\n', '\n', '\tevent LogGoldBonus(address, address, uint256);\n', '\tevent LogReferralBonus(address, address, uint256);\n', '\tevent LogAdvertisement(address, address, uint256);\n', '\tevent LogNewInvestor(address, uint256);\n', '\tevent LogRoundEnd(address, uint256, uint256, uint256);\n', '\tevent LogBoardChange(address, uint256, string);\n', '\n', '\tfunction payoutBonuses() private {\n', '\t\t// GOLD bonus payout, if any\n', '\t\troulett--;\n', '\t\tif (roulett % bonusInterval == 0) {\n', '\t\t\tuint256 bonusAmount = (msg.value * goldBonus) / 100;\n', '\t\t\tuint256 winnIdx = roulett / bonusInterval;\n', '\t\t\tif ((board[winnIdx] != msg.sender) && (board[winnIdx] != admin)) {\n', '\t\t\t\t// Payouts to itself are not applicable, admin has its own reward\n', '\t\t\t\temit LogGoldBonus(msg.sender, board[winnIdx], bonusAmount);\n', '\t\t\t\tpayoutBalanceCheck(board[winnIdx], bonusAmount);\n', '\t\t\t}\n', '\t\t}\n', '\t\tif (roulett == 0)\n', '\t\t\troulett = bonusInterval * board.length;\n', '\t}\n', '\n', '\tfunction payoutReferrer() private {\n', '\t\tuint256 bonusAmount = (msg.value * referralBonus) / 100;\n', '\t\taddress referrer = referrals[round][msg.sender];\n', '\t\tif (!investors[round][referrer].banned) {\n', '\t\t\tif (referrer != admin)\n', '\t\t\t\tinvestors[round][referrer].refBalance += bonusAmount;\n', '\t\t\temit LogReferralBonus(msg.sender, referrer, bonusAmount);\n', '\t\t\tupdateGoldReferrer(referrer);\n', '\t\t\tpayoutBalanceCheck(referrer, bonusAmount);\n', '\t\t}\n', '\t}\n', '\n', '\tfunction payoutBalanceCheck(address to, uint256 value) private {\n', '\t\tif (to == admin) {\n', '\t\t\tcollectedFee += value;\n', '\t\t\treturn;\n', '\t\t}\n', '\t\tif (value > (address(this).balance - 0.01 ether)) {\n', '\t\t\tif (lastRound)\n', '\t\t\t\tselfdestruct(admin);\n', '\t\t\temit LogRoundEnd(msg.sender, value, address(this).balance, round);\n', '\t\t\tglobalReinitialization();\n', '\t\t\tround++;\n', '\t\t\treturn;\n', '\t\t}\n', '\t\tto.transfer(value);\n', '\t}\n', '\n', '\tfunction processDividends() private {\n', '\t\tif (investors[round][msg.sender].deposit != 0) {\n', '\t\t\t// ((investorGain% from deposit) * minedBlocks) / avgMinedPerDay\n', '\t\t\tuint256 deposit = investors[round][msg.sender].deposit;\n', '\t\t\tuint256 previousBlock = investors[round][msg.sender].block;\n', '\t\t\tuint256 minedBlocks = block.number - previousBlock;\n', '\t\t\tuint256 dailyIncome = (deposit * investorGain) / 100;\n', '\t\t\tuint256 divsAmount = (dailyIncome * minedBlocks) / avgMinedPerDay;\n', '\t\t\tcollectedFee += (divsAmount * payoutFee) / 100;\n', '\t\t\tpayoutBalanceCheck(msg.sender, divsAmount);\t\n', '\t\t}\n', '\t\telse if (msg.value != 0) {\n', '\t\t\temit LogNewInvestor(msg.sender, ++investorCount);\n', '\t\t}\n', '\t\tinvestors[round][msg.sender].block = block.number;\n', '\t\tinvestors[round][msg.sender].deposit += msg.value;\n', '\t}\n', '\n', '\tfunction updateGoldInvestor(address candidate) private {\n', '\t\tuint256 candidateDeposit = investors[round][candidate].deposit;\n', '\t\tif (candidateDeposit > investors[round][board[0]].deposit) {\n', '\t\t\tboard[0] = candidate;\n', '\t\t\temit LogBoardChange(candidate, candidateDeposit,\n', '\t\t\t\t"Congrats! New Gold Investor!");\n', '\t\t}\n', '\t}\n', '\n', '\tfunction updateGoldReferrer(address candidate) private {\n', '\t\t// Admin can refer participants, but will not be the gold referrer.\n', '\t\tif ((candidate != admin) && (!investors[round][candidate].banned)) {\n', '\t\t\tuint256 candidateRefBalance = investors[round][candidate].refBalance;\n', '\t\t\tuint256 goldReferrerBalance = investors[round][board[1]].refBalance;\n', '\t\t\tif (candidateRefBalance > goldReferrerBalance) {\n', '\t\t\t\tboard[1] = candidate;\n', '\t\t\t\temit LogBoardChange(candidate, candidateRefBalance,\n', '\t\t\t\t\t"Congrats! New Gold Referrer!");\n', '\t\t\t}\n', '\t\t}\n', '\t}\n', '\n', '\tfunction regularPayment() private {\n', '\t\tif (msg.value >= bonusThreshold) {\n', '\t\t\tpayoutBonuses();\n', '\t\t\tif (referrals[round][msg.sender] != 0)\n', '\t\t\t\tpayoutReferrer();\n', '\t\t}\n', '\t\tprocessDividends();\n', '\t\tupdateGoldInvestor(msg.sender);\n', '\t}\n', '\n', '\tfunction advertise(address targetAddress) external payable {\n', '\t\t// Any violation results in failed transaction\n', '\t\tif (investors[round][msg.sender].banned)\n', '\t\t\trevert("You are violating the rules and banned");\n', '\t\tif ((msg.sender != admin) && (msg.value < advPrice))\n', '\t\t\trevert("Need more ETH to make an advertiement");\n', '\t\tif (investors[round][targetAddress].deposit != 0)\n', '\t\t\trevert("Advertising address is already an investor");\n', '\t\tif (referrals[round][targetAddress] != 0)\n', '\t\t\trevert("Address already advertised");\n', '\n', '\t\temit LogAdvertisement(msg.sender, targetAddress, msg.value);\n', '\t\treferrals[round][targetAddress] = msg.sender;\n', '\t\ttargetAddress.transfer(1 wei);\n', '\t\tregularPayment();\n', '\t}\n', '\n', '\tfunction () external payable {\n', '\t\tregularPayment();\n', '\t} \n', '}']
