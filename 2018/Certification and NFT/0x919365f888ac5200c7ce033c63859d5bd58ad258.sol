['pragma solidity ^0.4.15;\n', '\n', 'contract Token {\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '}\n', '\n', '/***************************************************************************\\\n', ' *   SignalPylon: Signal capturing contract\n', ' *\n', ' *   Allows token signaling without sub-token generation or transferal\n', ' *   The final signal scoring is determined outside the contract and\n', ' *   outside the blockchain (by the admin/user interested in the data)\n', ' *   and can be parsed/post-processed however is contextually appropriate.\n', '\\***************************************************************************/\n', '\n', 'contract SignalPylon {\n', '    /*************\\\n', '     *  Storage  *\n', '    \\*************/\n', '    address public token;                       // The address of the signal token\n', '    mapping (uint => Signal) public signals;    // Signals captured from users/voters\n', '    uint public signalCount;                    // Total count of signals (index)\n', '\n', '    /*************\\\n', '     *  Structs  *\n', '     *****************************************************************\\\n', '     *  Signal (vote)\n', '     *  @dev Represents a particular vote or signal captured/cast\n', '     *       at a specific blockheight. Note: signaling uses the\n', '     *       entire available token balance of the caller&#39;s account.\n', '    \\*****************************************************************/\n', '    struct Signal {\n', '        address signaler;\n', '        bytes32 register;\n', '        uint value;\n', '    }\n', '\n', '    /************\\\n', '     *  Events  *\n', '    \\************/\n', '    event SignalOutput(address signaler, bytes32 register, uint value);\n', '\n', '    /*********************\\\n', '     *  Public functions\n', '     *********************\\\n', '     *  @dev Constructor\n', '    \\*********************/\n', '    function SignalPylon(address _token) public {\n', '        token = _token;\n', '    }\n', '\n', '    /***********************************************\\\n', '     *  @dev User-callable signaling function\n', '     *  @param _register Register which is signaled\n', '    \\***********************************************/\n', '    function sendSignal(bytes32 _register) public {\n', '        uint signalValue = Token(token).balanceOf(msg.sender);\n', '        require(signalValue > 0);\n', '\n', '        // Append to signal list\n', '        signals[signalCount] = Signal({\n', '            signaler: msg.sender,\n', '            register: _register,\n', '            value: signalValue\n', '        });\n', '\n', '        // Update signal count index\n', '        signalCount += 1;\n', '\n', '        // Emit SignalOutput event\n', '        emit SignalOutput(msg.sender, _register, signalValue);\n', '    }\n', '}']