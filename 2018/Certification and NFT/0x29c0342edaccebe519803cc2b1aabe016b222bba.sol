['pragma solidity 0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' *  @title TokenSale\n', ' *  @dev Martin Halford, CTO, BlockGrain (AgriChain Pty Ltd) - April 2018\n', ' */\n', 'contract TokenSale {\n', '  using SafeMath for uint256;\n', '\n', '  // Address of owner\n', '  address public owner;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // Amount of raised (in Wei)\n', '  uint256 public amountRaised;\n', '\n', '  // Upper limit of the amount to be collected\n', '  uint256 public saleLimit = 25000 ether;\n', '\n', '  // Minimum contribution permitted\n', '  uint256 public minContribution = 0.5 ether;\n', '\n', '  // Maximum contribution permitted\n', '  uint256 public maxContribution = 500 ether;\n', '\n', '  // Flag to accept or reject payments\n', '  bool public isAcceptingPayments;\n', '\n', '  // List of admins who can edit the whitelist\n', '  mapping (address => bool) public tokenSaleAdmins;\n', '\n', '  // List of addresses that are whitelisted for private sale\n', '  mapping (address => bool) public whitelist;\n', '\n', '  // List of addresses that have made payments (in Wei)\n', '  mapping (address => uint256) public amountPaid;\n', '\n', '  // modifier to check owner\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  // modifier to check whitelist admin status\n', '  modifier onlyAdmin() {\n', '    require(tokenSaleAdmins[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  // modifier to check if whitelisted address\n', '  modifier isWhitelisted() {\n', '    require(whitelist[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  // modifier to check if payments being accepted\n', '  modifier acceptingPayments() {\n', '    require(isAcceptingPayments);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * Constructor\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   */\n', '  constructor(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    owner = msg.sender;\n', '    wallet = _wallet;\n', '    tokenSaleAdmins[msg.sender] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev fallback function\n', '   */\n', '  function () isWhitelisted acceptingPayments payable public {\n', '    uint256 _contribution = msg.value;\n', '    require(_contribution >= minContribution);\n', '    require(_contribution <= maxContribution);\n', '    require(msg.sender != address(0));\n', '\n', '    // add to sender&#39;s amountPaid record\n', '    amountPaid[msg.sender] += _contribution;\n', '\n', '    // add to amount raised\n', '    amountRaised = amountRaised.add(_contribution);\n', '\n', '    // handle edge case where amountRaised exceeds saleLimit\n', '    if (amountRaised > saleLimit) {\n', '      uint256 _refundAmount = amountRaised.sub(saleLimit);\n', '      msg.sender.transfer(_refundAmount);\n', '      _contribution = _contribution.sub(_refundAmount);\n', '      _refundAmount = 0;\n', '      amountRaised = saleLimit;\n', '      isAcceptingPayments = false;\n', '    }\n', '\n', '    // transfer funds to external wallet\n', '    wallet.transfer(_contribution);\n', '  }\n', '\n', '  /**\n', '   * @dev Start accepting payments\n', '   */\n', '  function acceptPayments() onlyAdmin public  {\n', '    isAcceptingPayments = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Stop accepting payments\n', '   */\n', '  function rejectPayments() onlyAdmin public  {\n', '    isAcceptingPayments = false;\n', '  }\n', '\n', '  /**\n', '   *  @dev Add a user to the whitelist admins\n', '   */\n', '  function addAdmin(address _admin) onlyOwner public {\n', '    tokenSaleAdmins[_admin] = true;\n', '  }\n', '\n', '  /**\n', '   *  @dev Remove a user from the whitelist admins\n', '   */\n', '  function removeAdmin(address _admin) onlyOwner public {\n', '    tokenSaleAdmins[_admin] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Add an address to the whitelist\n', '   * @param _contributor The address of the contributor\n', '   */\n', '  function whitelistAddress(address _contributor) onlyAdmin public  {\n', '    whitelist[_contributor] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Add multiple addresses to the whitelist\n', '   * @param _contributors The addresses of the contributor\n', '   */\n', '  function whitelistAddresses(address[] _contributors) onlyAdmin public {\n', '    for (uint256 i = 0; i < _contributors.length; i++) {\n', '      whitelist[_contributors[i]] = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Remove an addresses from the whitelist\n', '   * @param _contributor The addresses of the contributor\n', '   */\n', '  function unWhitelistAddress(address _contributor) onlyAdmin public  {\n', '    whitelist[_contributor] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Remove multiple addresses from the whitelist\n', '   * @param _contributors The addresses of the contributor\n', '   */\n', '  function unWhitelistAddresses(address[] _contributors) onlyAdmin public {\n', '    for (uint256 i = 0; i < _contributors.length; i++) {\n', '      whitelist[_contributors[i]] = false;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Update the sale limit\n', '   * @param _saleLimit The updated sale limit value\n', '   */\n', '  function updateSaleLimit(uint256 _saleLimit) onlyAdmin public {\n', '    saleLimit = _saleLimit;\n', '  }\n', '\n', '  /**\n', '    * @dev Update the minimum contribution\n', '    * @param _minContribution The updated minimum contribution value\n', '    */\n', '  function updateMinContribution(uint256 _minContribution) onlyAdmin public {\n', '    minContribution = _minContribution;\n', '  }\n', '\n', '  /**\n', '    * @dev Update the maximum contribution\n', '    * @param _maxContribution The updated maximum contribution value\n', '    */\n', '  function updateMaxContribution(uint256 _maxContribution) onlyAdmin public {\n', '    maxContribution = _maxContribution;\n', '  }\n', '\n', '}']
['pragma solidity 0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' *  @title TokenSale\n', ' *  @dev Martin Halford, CTO, BlockGrain (AgriChain Pty Ltd) - April 2018\n', ' */\n', 'contract TokenSale {\n', '  using SafeMath for uint256;\n', '\n', '  // Address of owner\n', '  address public owner;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // Amount of raised (in Wei)\n', '  uint256 public amountRaised;\n', '\n', '  // Upper limit of the amount to be collected\n', '  uint256 public saleLimit = 25000 ether;\n', '\n', '  // Minimum contribution permitted\n', '  uint256 public minContribution = 0.5 ether;\n', '\n', '  // Maximum contribution permitted\n', '  uint256 public maxContribution = 500 ether;\n', '\n', '  // Flag to accept or reject payments\n', '  bool public isAcceptingPayments;\n', '\n', '  // List of admins who can edit the whitelist\n', '  mapping (address => bool) public tokenSaleAdmins;\n', '\n', '  // List of addresses that are whitelisted for private sale\n', '  mapping (address => bool) public whitelist;\n', '\n', '  // List of addresses that have made payments (in Wei)\n', '  mapping (address => uint256) public amountPaid;\n', '\n', '  // modifier to check owner\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  // modifier to check whitelist admin status\n', '  modifier onlyAdmin() {\n', '    require(tokenSaleAdmins[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  // modifier to check if whitelisted address\n', '  modifier isWhitelisted() {\n', '    require(whitelist[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  // modifier to check if payments being accepted\n', '  modifier acceptingPayments() {\n', '    require(isAcceptingPayments);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * Constructor\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   */\n', '  constructor(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    owner = msg.sender;\n', '    wallet = _wallet;\n', '    tokenSaleAdmins[msg.sender] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev fallback function\n', '   */\n', '  function () isWhitelisted acceptingPayments payable public {\n', '    uint256 _contribution = msg.value;\n', '    require(_contribution >= minContribution);\n', '    require(_contribution <= maxContribution);\n', '    require(msg.sender != address(0));\n', '\n', "    // add to sender's amountPaid record\n", '    amountPaid[msg.sender] += _contribution;\n', '\n', '    // add to amount raised\n', '    amountRaised = amountRaised.add(_contribution);\n', '\n', '    // handle edge case where amountRaised exceeds saleLimit\n', '    if (amountRaised > saleLimit) {\n', '      uint256 _refundAmount = amountRaised.sub(saleLimit);\n', '      msg.sender.transfer(_refundAmount);\n', '      _contribution = _contribution.sub(_refundAmount);\n', '      _refundAmount = 0;\n', '      amountRaised = saleLimit;\n', '      isAcceptingPayments = false;\n', '    }\n', '\n', '    // transfer funds to external wallet\n', '    wallet.transfer(_contribution);\n', '  }\n', '\n', '  /**\n', '   * @dev Start accepting payments\n', '   */\n', '  function acceptPayments() onlyAdmin public  {\n', '    isAcceptingPayments = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Stop accepting payments\n', '   */\n', '  function rejectPayments() onlyAdmin public  {\n', '    isAcceptingPayments = false;\n', '  }\n', '\n', '  /**\n', '   *  @dev Add a user to the whitelist admins\n', '   */\n', '  function addAdmin(address _admin) onlyOwner public {\n', '    tokenSaleAdmins[_admin] = true;\n', '  }\n', '\n', '  /**\n', '   *  @dev Remove a user from the whitelist admins\n', '   */\n', '  function removeAdmin(address _admin) onlyOwner public {\n', '    tokenSaleAdmins[_admin] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Add an address to the whitelist\n', '   * @param _contributor The address of the contributor\n', '   */\n', '  function whitelistAddress(address _contributor) onlyAdmin public  {\n', '    whitelist[_contributor] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Add multiple addresses to the whitelist\n', '   * @param _contributors The addresses of the contributor\n', '   */\n', '  function whitelistAddresses(address[] _contributors) onlyAdmin public {\n', '    for (uint256 i = 0; i < _contributors.length; i++) {\n', '      whitelist[_contributors[i]] = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Remove an addresses from the whitelist\n', '   * @param _contributor The addresses of the contributor\n', '   */\n', '  function unWhitelistAddress(address _contributor) onlyAdmin public  {\n', '    whitelist[_contributor] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Remove multiple addresses from the whitelist\n', '   * @param _contributors The addresses of the contributor\n', '   */\n', '  function unWhitelistAddresses(address[] _contributors) onlyAdmin public {\n', '    for (uint256 i = 0; i < _contributors.length; i++) {\n', '      whitelist[_contributors[i]] = false;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Update the sale limit\n', '   * @param _saleLimit The updated sale limit value\n', '   */\n', '  function updateSaleLimit(uint256 _saleLimit) onlyAdmin public {\n', '    saleLimit = _saleLimit;\n', '  }\n', '\n', '  /**\n', '    * @dev Update the minimum contribution\n', '    * @param _minContribution The updated minimum contribution value\n', '    */\n', '  function updateMinContribution(uint256 _minContribution) onlyAdmin public {\n', '    minContribution = _minContribution;\n', '  }\n', '\n', '  /**\n', '    * @dev Update the maximum contribution\n', '    * @param _maxContribution The updated maximum contribution value\n', '    */\n', '  function updateMaxContribution(uint256 _maxContribution) onlyAdmin public {\n', '    maxContribution = _maxContribution;\n', '  }\n', '\n', '}']
