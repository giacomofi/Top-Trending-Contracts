['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract Lending is Ownable, Pausable {\n', '    using SafeMath for uint256;\n', '    uint256 public minContribAmount = 0.1 ether;                          // 0.01 ether\n', '    enum LendingState {AcceptingContributions, AwaitingReturn, ProjectNotFunded, ContributionReturned}\n', '\n', '    mapping(address => Investor) public investors;\n', '    uint256 public fundingStartTime;                                     // Start time of contribution period in UNIX time\n', '    uint256 public fundingEndTime;                                       // End time of contribution period in UNIX time\n', '    uint256 public totalContributed;\n', '    bool public capReached;\n', '    LendingState public state;\n', '    address[] public investorsKeys;\n', '\n', '    uint256 public lendingInterestRatePercentage;\n', '    uint256 public totalLendingAmount;\n', '    uint256 public lendingDays;\n', '    uint256 public initialFiatPerEthRate;\n', '    uint256 public totalLendingFiatAmount;\n', '    address public borrower;\n', '    uint256 public borrowerReturnDate;\n', '    uint256 public borrowerReturnFiatAmount;\n', '    uint256 public borrowerReturnFiatPerEthRate;\n', '    uint256 public borrowerReturnAmount;\n', '\n', '    struct Investor {\n', '        uint amount;\n', '        bool isCompensated;\n', '    }\n', '\n', '    // events\n', '    event onCapReached(uint endTime);\n', '    event onContribution(uint totalContributed, address indexed investor, uint amount, uint investorsCount);\n', '    event onCompensated(address indexed contributor, uint amount);\n', '    event excessContributionReturned(address indexed contributor, uint amount);\n', '    event StateChange(uint state);\n', '\n', '    function Lending(uint _fundingStartTime, uint _fundingEndTime, address _borrower, uint _lendingInterestRatePercentage, uint _totalLendingAmount, uint256 _lendingDays) public {\n', '        fundingStartTime = _fundingStartTime;\n', '        fundingEndTime = _fundingEndTime;\n', '        borrower = _borrower;\n', '        // 115\n', '        lendingInterestRatePercentage = _lendingInterestRatePercentage;\n', '        totalLendingAmount = _totalLendingAmount;\n', '        //90 days for version 0.1\n', '        lendingDays = _lendingDays;\n', '        state = LendingState.AcceptingContributions;\n', '        StateChange(uint(state));\n', '    }\n', '\n', '    function() public payable whenNotPaused {\n', '        if(state == LendingState.AwaitingReturn){\n', '            returnBorroweedEth();\n', '        } else{\n', '            contributeWithAddress(msg.sender);\n', '        }\n', '    }\n', '\n', '    function isContribPeriodRunning() public constant returns(bool){\n', '        return fundingStartTime <= now && fundingEndTime > now && !capReached;\n', '    }\n', '\n', '    // @notice Function to participate in contribution period\n', '    //  Amounts from the same address should be added up\n', '    //  If cap is reached, end time should be modified\n', '    //  Funds should be transferred into multisig wallet\n', '    // @param contributor Address\n', '    function contributeWithAddress(address contributor) public payable whenNotPaused {\n', '        require(msg.value >= minContribAmount);\n', '        require(isContribPeriodRunning());\n', '\n', '        uint contribValue = msg.value;\n', '        uint excessContribValue = 0;\n', '\n', '        uint oldTotalContributed = totalContributed;\n', '\n', '        totalContributed = oldTotalContributed.add(contribValue);\n', '\n', '        uint newTotalContributed = totalContributed;\n', '\n', '        // cap was reached\n', '        if (newTotalContributed >=  totalLendingAmount &&\n', '            oldTotalContributed < totalLendingAmount)\n', '        {\n', '            capReached = true;\n', '            fundingEndTime = now;\n', '            onCapReached(fundingEndTime);\n', '\n', '            // Everything above hard cap will be sent back to contributor\n', '            excessContribValue = newTotalContributed.sub(totalLendingAmount);\n', '            contribValue = contribValue.sub(excessContribValue);\n', '\n', '            totalContributed = totalLendingAmount;\n', '        }\n', '\n', '        if (investors[contributor].amount == 0) {\n', '            investorsKeys.push(contributor);\n', '        }\n', '\n', '        investors[contributor].amount = investors[contributor].amount.add(contribValue);\n', '\n', '        if (excessContribValue > 0) {\n', '            msg.sender.transfer(excessContribValue);\n', '            excessContributionReturned(msg.sender, excessContribValue);\n', '        }\n', '        onContribution(newTotalContributed, contributor, contribValue, investorsKeys.length);\n', '    }\n', '\n', '    function enableReturnContribution() external onlyOwner {\n', '        require(totalContributed < totalLendingAmount);\n', '        require(now > fundingEndTime);\n', '        state = LendingState.ProjectNotFunded;\n', '        StateChange(uint(state));\n', '    }\n', '\n', '    // @notice Function to participate in contribution period\n', '    //  Amounts from the same address should be added up\n', '    //  If cap is reached, end time should be modified\n', '    //  Funds should be transferred into multisig wallet\n', '    // @param contributor Address\n', '    function finishContributionPeriod(uint256 _initialFiatPerEthRate) onlyOwner {\n', '        require(capReached == true);\n', '        initialFiatPerEthRate = _initialFiatPerEthRate;\n', '        borrower.transfer(totalContributed);\n', '        state = LendingState.AwaitingReturn;\n', '        StateChange(uint(state));\n', '        totalLendingFiatAmount = totalLendingAmount.mul(initialFiatPerEthRate);\n', '        borrowerReturnFiatAmount = totalLendingFiatAmount.mul(lendingInterestRatePercentage).div(100);\n', '    }\n', '\n', '    function reclaimContribution(address beneficiary) external {\n', '        require(state == LendingState.ProjectNotFunded);\n', '        uint contribution = investors[beneficiary].amount;\n', '        require(contribution > 0);\n', '        beneficiary.transfer(contribution);\n', '    }\n', '\n', '    function establishBorrowerReturnFiatPerEthRate(uint256 _borrowerReturnFiatPerEthRate) external onlyOwner{\n', '        require(state == LendingState.AwaitingReturn);\n', '        borrowerReturnFiatPerEthRate = _borrowerReturnFiatPerEthRate;\n', '        borrowerReturnAmount = borrowerReturnFiatAmount.div(borrowerReturnFiatPerEthRate);\n', '    }\n', '\n', '    function returnBorroweedEth() payable public {\n', '        require(state == LendingState.AwaitingReturn);\n', '        require(borrowerReturnFiatPerEthRate > 0);\n', '        require(msg.value == borrowerReturnAmount);\n', '        state = LendingState.ContributionReturned;\n', '        StateChange(uint(state));\n', '    }\n', '\n', '    function reclaimContributionWithInterest(address beneficiary) external {\n', '        require(state == LendingState.ContributionReturned);\n', '        uint contribution = investors[beneficiary].amount.mul(initialFiatPerEthRate).mul(lendingInterestRatePercentage).div(borrowerReturnFiatPerEthRate).div(100);\n', '        require(contribution > 0);\n', '        beneficiary.transfer(contribution);\n', '    }\n', '\n', '    function selfKill() external onlyOwner {\n', '        selfdestruct(owner);\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract Lending is Ownable, Pausable {\n', '    using SafeMath for uint256;\n', '    uint256 public minContribAmount = 0.1 ether;                          // 0.01 ether\n', '    enum LendingState {AcceptingContributions, AwaitingReturn, ProjectNotFunded, ContributionReturned}\n', '\n', '    mapping(address => Investor) public investors;\n', '    uint256 public fundingStartTime;                                     // Start time of contribution period in UNIX time\n', '    uint256 public fundingEndTime;                                       // End time of contribution period in UNIX time\n', '    uint256 public totalContributed;\n', '    bool public capReached;\n', '    LendingState public state;\n', '    address[] public investorsKeys;\n', '\n', '    uint256 public lendingInterestRatePercentage;\n', '    uint256 public totalLendingAmount;\n', '    uint256 public lendingDays;\n', '    uint256 public initialFiatPerEthRate;\n', '    uint256 public totalLendingFiatAmount;\n', '    address public borrower;\n', '    uint256 public borrowerReturnDate;\n', '    uint256 public borrowerReturnFiatAmount;\n', '    uint256 public borrowerReturnFiatPerEthRate;\n', '    uint256 public borrowerReturnAmount;\n', '\n', '    struct Investor {\n', '        uint amount;\n', '        bool isCompensated;\n', '    }\n', '\n', '    // events\n', '    event onCapReached(uint endTime);\n', '    event onContribution(uint totalContributed, address indexed investor, uint amount, uint investorsCount);\n', '    event onCompensated(address indexed contributor, uint amount);\n', '    event excessContributionReturned(address indexed contributor, uint amount);\n', '    event StateChange(uint state);\n', '\n', '    function Lending(uint _fundingStartTime, uint _fundingEndTime, address _borrower, uint _lendingInterestRatePercentage, uint _totalLendingAmount, uint256 _lendingDays) public {\n', '        fundingStartTime = _fundingStartTime;\n', '        fundingEndTime = _fundingEndTime;\n', '        borrower = _borrower;\n', '        // 115\n', '        lendingInterestRatePercentage = _lendingInterestRatePercentage;\n', '        totalLendingAmount = _totalLendingAmount;\n', '        //90 days for version 0.1\n', '        lendingDays = _lendingDays;\n', '        state = LendingState.AcceptingContributions;\n', '        StateChange(uint(state));\n', '    }\n', '\n', '    function() public payable whenNotPaused {\n', '        if(state == LendingState.AwaitingReturn){\n', '            returnBorroweedEth();\n', '        } else{\n', '            contributeWithAddress(msg.sender);\n', '        }\n', '    }\n', '\n', '    function isContribPeriodRunning() public constant returns(bool){\n', '        return fundingStartTime <= now && fundingEndTime > now && !capReached;\n', '    }\n', '\n', '    // @notice Function to participate in contribution period\n', '    //  Amounts from the same address should be added up\n', '    //  If cap is reached, end time should be modified\n', '    //  Funds should be transferred into multisig wallet\n', '    // @param contributor Address\n', '    function contributeWithAddress(address contributor) public payable whenNotPaused {\n', '        require(msg.value >= minContribAmount);\n', '        require(isContribPeriodRunning());\n', '\n', '        uint contribValue = msg.value;\n', '        uint excessContribValue = 0;\n', '\n', '        uint oldTotalContributed = totalContributed;\n', '\n', '        totalContributed = oldTotalContributed.add(contribValue);\n', '\n', '        uint newTotalContributed = totalContributed;\n', '\n', '        // cap was reached\n', '        if (newTotalContributed >=  totalLendingAmount &&\n', '            oldTotalContributed < totalLendingAmount)\n', '        {\n', '            capReached = true;\n', '            fundingEndTime = now;\n', '            onCapReached(fundingEndTime);\n', '\n', '            // Everything above hard cap will be sent back to contributor\n', '            excessContribValue = newTotalContributed.sub(totalLendingAmount);\n', '            contribValue = contribValue.sub(excessContribValue);\n', '\n', '            totalContributed = totalLendingAmount;\n', '        }\n', '\n', '        if (investors[contributor].amount == 0) {\n', '            investorsKeys.push(contributor);\n', '        }\n', '\n', '        investors[contributor].amount = investors[contributor].amount.add(contribValue);\n', '\n', '        if (excessContribValue > 0) {\n', '            msg.sender.transfer(excessContribValue);\n', '            excessContributionReturned(msg.sender, excessContribValue);\n', '        }\n', '        onContribution(newTotalContributed, contributor, contribValue, investorsKeys.length);\n', '    }\n', '\n', '    function enableReturnContribution() external onlyOwner {\n', '        require(totalContributed < totalLendingAmount);\n', '        require(now > fundingEndTime);\n', '        state = LendingState.ProjectNotFunded;\n', '        StateChange(uint(state));\n', '    }\n', '\n', '    // @notice Function to participate in contribution period\n', '    //  Amounts from the same address should be added up\n', '    //  If cap is reached, end time should be modified\n', '    //  Funds should be transferred into multisig wallet\n', '    // @param contributor Address\n', '    function finishContributionPeriod(uint256 _initialFiatPerEthRate) onlyOwner {\n', '        require(capReached == true);\n', '        initialFiatPerEthRate = _initialFiatPerEthRate;\n', '        borrower.transfer(totalContributed);\n', '        state = LendingState.AwaitingReturn;\n', '        StateChange(uint(state));\n', '        totalLendingFiatAmount = totalLendingAmount.mul(initialFiatPerEthRate);\n', '        borrowerReturnFiatAmount = totalLendingFiatAmount.mul(lendingInterestRatePercentage).div(100);\n', '    }\n', '\n', '    function reclaimContribution(address beneficiary) external {\n', '        require(state == LendingState.ProjectNotFunded);\n', '        uint contribution = investors[beneficiary].amount;\n', '        require(contribution > 0);\n', '        beneficiary.transfer(contribution);\n', '    }\n', '\n', '    function establishBorrowerReturnFiatPerEthRate(uint256 _borrowerReturnFiatPerEthRate) external onlyOwner{\n', '        require(state == LendingState.AwaitingReturn);\n', '        borrowerReturnFiatPerEthRate = _borrowerReturnFiatPerEthRate;\n', '        borrowerReturnAmount = borrowerReturnFiatAmount.div(borrowerReturnFiatPerEthRate);\n', '    }\n', '\n', '    function returnBorroweedEth() payable public {\n', '        require(state == LendingState.AwaitingReturn);\n', '        require(borrowerReturnFiatPerEthRate > 0);\n', '        require(msg.value == borrowerReturnAmount);\n', '        state = LendingState.ContributionReturned;\n', '        StateChange(uint(state));\n', '    }\n', '\n', '    function reclaimContributionWithInterest(address beneficiary) external {\n', '        require(state == LendingState.ContributionReturned);\n', '        uint contribution = investors[beneficiary].amount.mul(initialFiatPerEthRate).mul(lendingInterestRatePercentage).div(borrowerReturnFiatPerEthRate).div(100);\n', '        require(contribution > 0);\n', '        beneficiary.transfer(contribution);\n', '    }\n', '\n', '    function selfKill() external onlyOwner {\n', '        selfdestruct(owner);\n', '    }\n', '}']
