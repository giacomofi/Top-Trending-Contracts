['pragma solidity ^0.4.18; // solhint-disable-line\n', '\n', '\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', '/// @author Dieter Shirley <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="274342534267465f4e484a5d4249094448">[email&#160;protected]</a>> (https://github.com/dete)\n', 'contract ERC721 {\n', '  // Required methods\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function balanceOf(address _owner) public view returns (uint256 balance);\n', '  function implementsERC721() public pure returns (bool);\n', '  function ownerOf(uint256 _tokenId) public view returns (address addr);\n', '  function takeOwnership(uint256 _tokenId) public;\n', '  function totalSupply() public view returns (uint256 total);\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 tokenId);\n', '  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\n', '\n', '  // Optional\n', '  // function name() public view returns (string name);\n', '  // function symbol() public view returns (string symbol);\n', '  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\n', '  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\n', '}\n', '\n', '\n', 'contract OpinionToken is ERC721 {\n', '\n', '  /*** EVENTS ***/\n', '\n', '  /// @dev The Birth event is fired whenever a new opinion comes into existence.\n', '  event Birth(uint256 tokenId, string name, address owner);\n', '\n', '  /// @dev The TokenSold event is fired whenever a token is sold.\n', '  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name);\n', '\n', '  /// @dev Transfer event as defined in current draft of ERC721. \n', '  ///  ownership is assigned, including births.\n', '  event Transfer(address from, address to, uint256 tokenId);\n', '\n', '  /*** CONSTANTS ***/\n', '\n', '  /// @notice Name and symbol of the non fungible token, as defined in ERC721.\n', '  string public constant NAME = "Cryptopinions"; // solhint-disable-line\n', '  string public constant SYMBOL = "OpinionToken"; // solhint-disable-line\n', '  string public constant DEFAULT_TEXT = "";\n', '\n', '  uint256 private firstStepLimit =  0.053613 ether;\n', '  uint256 private secondStepLimit = 0.564957 ether;\n', '  uint256 private numIssued=5; //number of tokens issued initially\n', '  uint256 private constant stepMultiplier=2;//multiplier for initial opinion registration cost, not sponsorship\n', '  uint256 private startingPrice = 0.001 ether; //will increase every token issued by stepMultiplier times\n', '  uint256 private sponsorStartingCost=0.01 ether;//initial cost to sponsor an opinion\n', '  //uint256 private currentIssueRemaining;\n', '  /*** STORAGE ***/\n', '\n', '  /// @dev A mapping from opinion IDs to the address that owns them. All opinions have\n', '  ///  some valid owner address.\n', '  mapping (uint256 => address) public opinionIndexToOwner;\n', '\n', '  // @dev A mapping from owner address to count of tokens that address owns.\n', '  //  Used internally inside balanceOf() to resolve ownership count.\n', '  mapping (address => uint256) private ownershipTokenCount;\n', '\n', '  /// @dev A mapping from opinionIDs to an address that has been approved to call\n', '  ///  transferFrom(). Each opinion can only have one approved address for transfer\n', '  ///  at any time. A zero value means no approval is outstanding.\n', '  mapping (uint256 => address) public opinionIndexToApproved;\n', '\n', '  // @dev A mapping from opinionIDs to the price of the token.\n', '  mapping (uint256 => uint256) private opinionIndexToPrice;\n', '  \n', '  // The addresses of the accounts (or contracts) that can execute actions within each roles.\n', '  address public ceoAddress;\n', '  address public cooAddress;\n', '\n', '  /*** DATATYPES ***/\n', '  struct Opinion {\n', '    string text;\n', '    bool claimed;\n', '    bool deleted;\n', '    uint8 comment;\n', '    address sponsor;\n', '    address antisponsor;\n', '    uint256 totalsponsored;\n', '    uint256 totalantisponsored;\n', '    uint256 timestamp;\n', '  }\n', '\n', '  Opinion[] private opinions;\n', '\n', '  /*** ACCESS MODIFIERS ***/\n', '  /// @dev Access modifier for CEO-only functionality\n', '  modifier onlyCEO() {\n', '    require(msg.sender == ceoAddress);\n', '    _;\n', '  }\n', '\n', '  /// @dev Access modifier for COO-only functionality\n', '  modifier onlyCOO() {\n', '    require(msg.sender == cooAddress);\n', '    _;\n', '  }\n', '\n', '  /// Access modifier for contract owner only functionality\n', '  modifier onlyCLevel() {\n', '    require(\n', '      msg.sender == ceoAddress ||\n', '      msg.sender == cooAddress\n', '    );\n', '    _;\n', '  }\n', '\n', '  /*** CONSTRUCTOR ***/\n', '  function OpinionToken() public {\n', '    ceoAddress = msg.sender;\n', '    cooAddress = msg.sender;\n', '  }\n', '\n', '  /*** PUBLIC FUNCTIONS ***/\n', '  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\n', '  /// @param _to The address to be granted transfer approval. Pass address(0) to\n', '  ///  clear all approvals.\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function approve(\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public {\n', '    // Caller must own token.\n', '    require(_owns(msg.sender, _tokenId));\n', '\n', '    opinionIndexToApproved[_tokenId] = _to;\n', '\n', '    Approval(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /// For querying balance of a particular account\n', '  /// @param _owner The address for balance query\n', '  /// @dev Required for ERC-721 compliance.\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return ownershipTokenCount[_owner];\n', '  }\n', '  /// @dev Creates initial set of opinions. Can only be called once.\n', '  function createInitialItems() public onlyCOO {\n', '    require(opinions.length==0);\n', '    _createOpinionSet();\n', '  }\n', '\n', '  /// @notice Returns all the relevant information about a specific opinion.\n', '  /// @param _tokenId The tokenId of the opinion of interest.\n', '  function getOpinion(uint256 _tokenId) public view returns (\n', '    uint256 sellingPrice,\n', '    address owner,\n', '    address sponsor,\n', '    address antisponsor,\n', '    uint256 amountsponsored,\n', '    uint256 amountantisponsored,\n', '    uint8 acomment,\n', '    uint256 timestamp,\n', '    string opinionText\n', '  ) {\n', '    Opinion storage opinion = opinions[_tokenId];\n', '    opinionText = opinion.text;\n', '    sellingPrice = opinionIndexToPrice[_tokenId];\n', '    owner = opinionIndexToOwner[_tokenId];\n', '    acomment=opinion.comment;\n', '    sponsor=opinion.sponsor;\n', '    antisponsor=opinion.antisponsor;\n', '    amountsponsored=opinion.totalsponsored;\n', '    amountantisponsored=opinion.totalantisponsored;\n', '    timestamp=opinion.timestamp;\n', '  }\n', '\n', '  function compareStrings (string a, string b) public pure returns (bool){\n', '       return keccak256(a) == keccak256(b);\n', '   }\n', '  \n', '  function hasDuplicate(string _tocheck) public view returns (bool){\n', '    return hasPriorDuplicate(_tocheck,opinions.length);\n', '  }\n', '  \n', '  function hasPriorDuplicate(string _tocheck,uint256 index) public view returns (bool){\n', '    for(uint i = 0; i<index; i++){\n', '        if(compareStrings(_tocheck,opinions[i].text)){\n', '            return true;\n', '        }\n', '    }\n', '    return false;\n', '  }\n', '  \n', '  function implementsERC721() public pure returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  /// @dev Required for ERC-721 compliance.\n', '  function name() public pure returns (string) {\n', '    return NAME;\n', '  }\n', '\n', '  /// For querying owner of token\n', '  /// @param _tokenId The tokenID for owner inquiry\n', '  /// @dev Required for ERC-721 compliance.\n', '  function ownerOf(uint256 _tokenId)\n', '    public\n', '    view\n', '    returns (address owner)\n', '  {\n', '    owner = opinionIndexToOwner[_tokenId];\n', '    require(owner != address(0));\n', '  }\n', '\n', '  function payout(address _to) public onlyCLevel {\n', '    _payout(_to);\n', '  }\n', '\n', '  function sponsorOpinion(uint256 _tokenId,uint8 comment,bool _likesOpinion) public payable {\n', '      //ensure comment corresponds to status of token. Tokens with a comment of 0 are unregistered.\n', '      require(comment!=0);\n', '      require((_likesOpinion && comment<100) || (!_likesOpinion && comment>100));\n', '      address sponsorAdr = msg.sender;\n', '      require(_addressNotNull(sponsorAdr));\n', '      // Making sure sent amount is greater than or equal to the sellingPrice\n', '      uint256 sellingPrice = opinionIndexToPrice[_tokenId];\n', '      address currentOwner=opinionIndexToOwner[_tokenId];\n', '      address newOwner = msg.sender;\n', '      require(_addressNotNull(newOwner));\n', '      require(_addressNotNull(currentOwner));\n', '      require(msg.value >= sellingPrice);\n', '      uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 90), 100));\n', '      uint256 ownerTake=uint256(SafeMath.div(SafeMath.mul(sellingPrice, 10), 100));\n', '      uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\n', '          // Update prices\n', '    if (sellingPrice < firstStepLimit) {\n', '      // first stage\n', '      opinionIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 200), 90);\n', '    } else if (sellingPrice < secondStepLimit) {\n', '      // second stage\n', '      opinionIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 120), 90);\n', '    } else {\n', '      // third stage\n', '      opinionIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 115), 90);\n', '    }\n', '    Opinion storage opinion = opinions[_tokenId];\n', '    require(opinion.claimed);\n', '    require(sponsorAdr!=opinion.sponsor);\n', '    require(sponsorAdr!=opinion.antisponsor);\n', '    require(sponsorAdr!=currentOwner);\n', '    opinion.comment=comment;\n', '    if(_likesOpinion){\n', '        if(_addressNotNull(opinion.sponsor)){\n', '            opinion.sponsor.transfer(payment);\n', '            currentOwner.transfer(ownerTake);\n', '        }\n', '        else{\n', '            currentOwner.transfer(sellingPrice);\n', '        }\n', '        opinion.sponsor=sponsorAdr;\n', '        opinion.totalsponsored=SafeMath.add(opinion.totalsponsored,sellingPrice);\n', '    }\n', '    else{\n', '        if(_addressNotNull(opinion.sponsor)){\n', '            opinion.antisponsor.transfer(payment);\n', '            ceoAddress.transfer(ownerTake);\n', '        }\n', '        else{\n', '            ceoAddress.transfer(sellingPrice); //eth for initial antisponsor goes to Cryptopinions, because you wouldn&#39;t want it to go to the creator of an opinion you don&#39;t like\n', '        }\n', '        opinion.antisponsor=sponsorAdr;\n', '        opinion.totalantisponsored=SafeMath.add(opinion.totalantisponsored,sellingPrice);\n', '    }\n', '    msg.sender.transfer(purchaseExcess);\n', '  }\n', '  \n', '  //lets you permanently delete someone elses opinion.\n', '  function deleteThis(uint256 _tokenId) public payable{\n', '    //Cost is 1 eth or five times the current valuation of the opinion, whichever is higher.\n', '    uint256 sellingPrice = SafeMath.mul(opinionIndexToPrice[_tokenId],5);\n', '    if(sellingPrice<1 ether){\n', '        sellingPrice=1 ether;\n', '    }\n', '    require(msg.value >= sellingPrice);\n', '    ceoAddress.transfer(sellingPrice);\n', '    Opinion storage opinion = opinions[_tokenId];\n', '    opinion.deleted=true;\n', '    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\n', '    msg.sender.transfer(purchaseExcess);\n', '  }\n', '  \n', '  // Allows someone to send ether and obtain the (unclaimed only) token\n', '  function registerOpinion(uint256 _tokenId,string _newOpinion) public payable {\n', '    \n', '    //Set opinion to the new opinion\n', '    _initOpinion(_tokenId,_newOpinion);\n', '    \n', '    address oldOwner = opinionIndexToOwner[_tokenId];\n', '    address newOwner = msg.sender;\n', '\n', '    uint256 sellingPrice = opinionIndexToPrice[_tokenId];\n', '\n', '    // Making sure token owner is not sending to self\n', '    require(oldOwner != newOwner);\n', '\n', '    // Safety check to prevent against an unexpected 0x0 default.\n', '    require(_addressNotNull(newOwner));\n', '\n', '    // Making sure sent amount is greater than or equal to the sellingPrice\n', '    require(msg.value >= sellingPrice);\n', '    \n', '    uint256 payment = sellingPrice;\n', '    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\n', '    opinionIndexToPrice[_tokenId] = sponsorStartingCost; //initial cost to sponsor\n', '\n', '    _transfer(oldOwner, newOwner, _tokenId);\n', '\n', '    ceoAddress.transfer(payment);\n', '\n', '    TokenSold(_tokenId, sellingPrice, opinionIndexToPrice[_tokenId], oldOwner, newOwner, opinions[_tokenId].text);\n', '\n', '    msg.sender.transfer(purchaseExcess);\n', '  }\n', '\n', '  function priceOf(uint256 _tokenId) public view returns (uint256 price) {\n', '    return opinionIndexToPrice[_tokenId];\n', '  }\n', '\n', '  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n', '  /// @param _newCEO The address of the new CEO\n', '  function setCEO(address _newCEO) public onlyCEO {\n', '    _setCEO(_newCEO);\n', '  }\n', '   function _setCEO(address _newCEO) private{\n', '         require(_newCEO != address(0));\n', '         ceoAddress = _newCEO;\n', '   }\n', '  /// @dev Assigns a new address to act as the COO. Only available to the current COO.\n', '  /// @param _newCOO The address of the new COO\n', '  function setCOO(address _newCOO) public onlyCEO {\n', '    require(_newCOO != address(0));\n', '\n', '    cooAddress = _newCOO;\n', '  }\n', '\n', '  /// @dev Required for ERC-721 compliance.\n', '  function symbol() public pure returns (string) {\n', '    return SYMBOL;\n', '  }\n', '\n', '  /// @notice Allow pre-approved user to take ownership of a token\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function takeOwnership(uint256 _tokenId) public {\n', '    address newOwner = msg.sender;\n', '    address oldOwner = opinionIndexToOwner[_tokenId];\n', '\n', '    // Safety check to prevent against an unexpected 0x0 default.\n', '    require(_addressNotNull(newOwner));\n', '\n', '    // Making sure transfer is approved\n', '    require(_approved(newOwner, _tokenId));\n', '\n', '    _transfer(oldOwner, newOwner, _tokenId);\n', '  }\n', '\n', '  /// @param _owner The owner whose celebrity tokens we are interested in.\n', '  /// @dev This method MUST NEVER be called by smart contract code. First, it&#39;s fairly\n', '  ///  expensive (it walks the entire opinions array looking for opinions belonging to owner),\n', '  ///  but it also returns a dynamic array, which is only supported for web3 calls, and\n', '  ///  not contract-to-contract calls.\n', '  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\n', '    uint256 tokenCount = balanceOf(_owner);\n', '    if (tokenCount == 0) {\n', '        // Return an empty array\n', '      return new uint256[](0);\n', '    } else {\n', '      uint256[] memory result = new uint256[](tokenCount);\n', '      uint256 totalOpinions = totalSupply();\n', '      uint256 resultIndex = 0;\n', '\n', '      uint256 opinionId;\n', '      for (opinionId = 0; opinionId <= totalOpinions; opinionId++) {\n', '        if (opinionIndexToOwner[opinionId] == _owner) {\n', '          result[resultIndex] = opinionId;\n', '          resultIndex++;\n', '        }\n', '      }\n', '      return result;\n', '    }\n', '  }\n', '\n', '  /// For querying totalSupply of token\n', '  /// @dev Required for ERC-721 compliance.\n', '  function totalSupply() public view returns (uint256 total) {\n', '    return opinions.length;\n', '  }\n', '\n', '  /// Owner initates the transfer of the token to another account\n', '  /// @param _to The address for the token to be transferred to.\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function transfer(\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public {\n', '    require(_owns(msg.sender, _tokenId));\n', '    require(_addressNotNull(_to));\n', '\n', '    _transfer(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /// Third-party initiates transfer of token from address _from to address _to\n', '  /// @param _from The address for the token to be transferred from.\n', '  /// @param _to The address for the token to be transferred to.\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public {\n', '    require(_owns(_from, _tokenId));\n', '    require(_approved(_to, _tokenId));\n', '    require(_addressNotNull(_to));\n', '\n', '    _transfer(_from, _to, _tokenId);\n', '  }\n', '  \n', '//Allows purchase of the entire contract. All revenue provisioned to ceoAddress will go to the new address specified.\n', '//If you contact us following purchase we will transfer domain, website source code etc. to you free of charge, otherwise we will continue to maintain the frontend site for 1 year.\n', 'uint256 contractPrice=300 ether;\n', 'function buyCryptopinions(address _newCEO) payable public{\n', '    require(msg.value >= contractPrice);\n', '    ceoAddress.transfer(msg.value);\n', '    _setCEO(_newCEO);\n', '    _setPrice(9999999 ether);\n', '}\n', 'function setPrice(uint256 newprice) public onlyCEO{\n', '    _setPrice(newprice);\n', '}\n', 'function _setPrice(uint256 newprice) private{\n', '    contractPrice=newprice;\n', '}\n', '\n', '  /*** PRIVATE FUNCTIONS ***/\n', '  /// Safety check on _to address to prevent against an unexpected 0x0 default.\n', '  function _addressNotNull(address _to) private pure returns (bool) {\n', '    return _to != address(0);\n', '  }\n', '\n', '  /// For checking approval of transfer for address _to\n', '  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\n', '    return opinionIndexToApproved[_tokenId] == _to;\n', '  }\n', '  \n', '  function _createOpinionSet() private {\n', '      for(uint i = 0; i<numIssued; i++){\n', '        _createOpinion(DEFAULT_TEXT,ceoAddress,startingPrice);\n', '      }\n', '      //startingPrice = SafeMath.mul(startingPrice,stepMultiplier); //increase the price for the next set of tokens\n', '      //currentIssueRemaining=numIssued;\n', '      \n', '  }\n', '  \n', '  //for registering an Opinion\n', '  function _initOpinion(uint256 _tokenId,string _newOpinion) private {\n', '      Opinion storage opinion = opinions[_tokenId];\n', '      opinion.timestamp=now;\n', '      opinion.text=_newOpinion;\n', '      opinion.comment=1;\n', '      require(!opinion.claimed);\n', '        uint256 newprice=SafeMath.mul(stepMultiplier,opinionIndexToPrice[_tokenId]);\n', '        //max price 1 eth\n', '        if(newprice > 0.1 ether){ //max price for a new opinion, 1 ether\n', '            newprice=0.1 ether;\n', '        }\n', '        _createOpinion("",ceoAddress,newprice); //make a new opinion for someone else to buy\n', '        opinion.claimed=true;\n', '      \n', '          //currentIssueRemaining=SafeMath.sub(currentIssueRemaining,1);\n', '          //if this is the last remaining token for sale, issue more\n', '          //if(currentIssueRemaining == 0){\n', '          //    _createOpinionSet();\n', '          //}\n', '      \n', '      \n', '  }\n', '  \n', '  /// For creating Opinion\n', '  function _createOpinion(string _name, address _owner, uint256 _price) private {\n', '    Opinion memory _opinion = Opinion({\n', '      text: _name,\n', '      claimed: false,\n', '      deleted: false,\n', '      comment: 0,\n', '      sponsor: _owner,\n', '      antisponsor: ceoAddress,\n', '      totalsponsored:0,\n', '      totalantisponsored:0,\n', '      timestamp:now\n', '    });\n', '    uint256 newOpinionId = opinions.push(_opinion) - 1;\n', '\n', '    // It&#39;s probably never going to happen, 4 billion tokens are A LOT, but\n', '    // let&#39;s just be 100% sure we never let this happen.\n', '    require(newOpinionId == uint256(uint32(newOpinionId)));\n', '\n', '    Birth(newOpinionId, _name, _owner);\n', '\n', '    opinionIndexToPrice[newOpinionId] = _price;\n', '\n', '    // This will assign ownership, and also emit the Transfer event as\n', '    // per ERC721 draft\n', '    _transfer(address(0), _owner, newOpinionId);\n', '  }\n', '\n', '  /// Check for token ownership\n', '  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\n', '    return claimant == opinionIndexToOwner[_tokenId];\n', '  }\n', '\n', '  /// For paying out balance on contract\n', '  function _payout(address _to) private {\n', '    if (_to == address(0)) {\n', '      ceoAddress.transfer(this.balance);\n', '    } else {\n', '      _to.transfer(this.balance);\n', '    }\n', '  }\n', '\n', '  /// @dev Assigns ownership of a specific opinion to an address.\n', '  function _transfer(address _from, address _to, uint256 _tokenId) private {\n', '    // Since the number of opinions is capped to 2^32 we can&#39;t overflow this\n', '    ownershipTokenCount[_to]++;\n', '    //transfer ownership\n', '    opinionIndexToOwner[_tokenId] = _to;\n', '\n', '    // When creating new opinions _from is 0x0, but we can&#39;t account that address.\n', '    if (_from != address(0)) {\n', '      ownershipTokenCount[_from]--;\n', '      // clear any previously approved ownership exchange\n', '      delete opinionIndexToApproved[_tokenId];\n', '    }\n', '\n', '    // Emit the transfer event.\n', '    Transfer(_from, _to, _tokenId);\n', '  }\n', '}\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
['pragma solidity ^0.4.18; // solhint-disable-line\n', '\n', '\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', '/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\n', 'contract ERC721 {\n', '  // Required methods\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function balanceOf(address _owner) public view returns (uint256 balance);\n', '  function implementsERC721() public pure returns (bool);\n', '  function ownerOf(uint256 _tokenId) public view returns (address addr);\n', '  function takeOwnership(uint256 _tokenId) public;\n', '  function totalSupply() public view returns (uint256 total);\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 tokenId);\n', '  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\n', '\n', '  // Optional\n', '  // function name() public view returns (string name);\n', '  // function symbol() public view returns (string symbol);\n', '  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\n', '  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\n', '}\n', '\n', '\n', 'contract OpinionToken is ERC721 {\n', '\n', '  /*** EVENTS ***/\n', '\n', '  /// @dev The Birth event is fired whenever a new opinion comes into existence.\n', '  event Birth(uint256 tokenId, string name, address owner);\n', '\n', '  /// @dev The TokenSold event is fired whenever a token is sold.\n', '  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name);\n', '\n', '  /// @dev Transfer event as defined in current draft of ERC721. \n', '  ///  ownership is assigned, including births.\n', '  event Transfer(address from, address to, uint256 tokenId);\n', '\n', '  /*** CONSTANTS ***/\n', '\n', '  /// @notice Name and symbol of the non fungible token, as defined in ERC721.\n', '  string public constant NAME = "Cryptopinions"; // solhint-disable-line\n', '  string public constant SYMBOL = "OpinionToken"; // solhint-disable-line\n', '  string public constant DEFAULT_TEXT = "";\n', '\n', '  uint256 private firstStepLimit =  0.053613 ether;\n', '  uint256 private secondStepLimit = 0.564957 ether;\n', '  uint256 private numIssued=5; //number of tokens issued initially\n', '  uint256 private constant stepMultiplier=2;//multiplier for initial opinion registration cost, not sponsorship\n', '  uint256 private startingPrice = 0.001 ether; //will increase every token issued by stepMultiplier times\n', '  uint256 private sponsorStartingCost=0.01 ether;//initial cost to sponsor an opinion\n', '  //uint256 private currentIssueRemaining;\n', '  /*** STORAGE ***/\n', '\n', '  /// @dev A mapping from opinion IDs to the address that owns them. All opinions have\n', '  ///  some valid owner address.\n', '  mapping (uint256 => address) public opinionIndexToOwner;\n', '\n', '  // @dev A mapping from owner address to count of tokens that address owns.\n', '  //  Used internally inside balanceOf() to resolve ownership count.\n', '  mapping (address => uint256) private ownershipTokenCount;\n', '\n', '  /// @dev A mapping from opinionIDs to an address that has been approved to call\n', '  ///  transferFrom(). Each opinion can only have one approved address for transfer\n', '  ///  at any time. A zero value means no approval is outstanding.\n', '  mapping (uint256 => address) public opinionIndexToApproved;\n', '\n', '  // @dev A mapping from opinionIDs to the price of the token.\n', '  mapping (uint256 => uint256) private opinionIndexToPrice;\n', '  \n', '  // The addresses of the accounts (or contracts) that can execute actions within each roles.\n', '  address public ceoAddress;\n', '  address public cooAddress;\n', '\n', '  /*** DATATYPES ***/\n', '  struct Opinion {\n', '    string text;\n', '    bool claimed;\n', '    bool deleted;\n', '    uint8 comment;\n', '    address sponsor;\n', '    address antisponsor;\n', '    uint256 totalsponsored;\n', '    uint256 totalantisponsored;\n', '    uint256 timestamp;\n', '  }\n', '\n', '  Opinion[] private opinions;\n', '\n', '  /*** ACCESS MODIFIERS ***/\n', '  /// @dev Access modifier for CEO-only functionality\n', '  modifier onlyCEO() {\n', '    require(msg.sender == ceoAddress);\n', '    _;\n', '  }\n', '\n', '  /// @dev Access modifier for COO-only functionality\n', '  modifier onlyCOO() {\n', '    require(msg.sender == cooAddress);\n', '    _;\n', '  }\n', '\n', '  /// Access modifier for contract owner only functionality\n', '  modifier onlyCLevel() {\n', '    require(\n', '      msg.sender == ceoAddress ||\n', '      msg.sender == cooAddress\n', '    );\n', '    _;\n', '  }\n', '\n', '  /*** CONSTRUCTOR ***/\n', '  function OpinionToken() public {\n', '    ceoAddress = msg.sender;\n', '    cooAddress = msg.sender;\n', '  }\n', '\n', '  /*** PUBLIC FUNCTIONS ***/\n', '  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\n', '  /// @param _to The address to be granted transfer approval. Pass address(0) to\n', '  ///  clear all approvals.\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function approve(\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public {\n', '    // Caller must own token.\n', '    require(_owns(msg.sender, _tokenId));\n', '\n', '    opinionIndexToApproved[_tokenId] = _to;\n', '\n', '    Approval(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /// For querying balance of a particular account\n', '  /// @param _owner The address for balance query\n', '  /// @dev Required for ERC-721 compliance.\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return ownershipTokenCount[_owner];\n', '  }\n', '  /// @dev Creates initial set of opinions. Can only be called once.\n', '  function createInitialItems() public onlyCOO {\n', '    require(opinions.length==0);\n', '    _createOpinionSet();\n', '  }\n', '\n', '  /// @notice Returns all the relevant information about a specific opinion.\n', '  /// @param _tokenId The tokenId of the opinion of interest.\n', '  function getOpinion(uint256 _tokenId) public view returns (\n', '    uint256 sellingPrice,\n', '    address owner,\n', '    address sponsor,\n', '    address antisponsor,\n', '    uint256 amountsponsored,\n', '    uint256 amountantisponsored,\n', '    uint8 acomment,\n', '    uint256 timestamp,\n', '    string opinionText\n', '  ) {\n', '    Opinion storage opinion = opinions[_tokenId];\n', '    opinionText = opinion.text;\n', '    sellingPrice = opinionIndexToPrice[_tokenId];\n', '    owner = opinionIndexToOwner[_tokenId];\n', '    acomment=opinion.comment;\n', '    sponsor=opinion.sponsor;\n', '    antisponsor=opinion.antisponsor;\n', '    amountsponsored=opinion.totalsponsored;\n', '    amountantisponsored=opinion.totalantisponsored;\n', '    timestamp=opinion.timestamp;\n', '  }\n', '\n', '  function compareStrings (string a, string b) public pure returns (bool){\n', '       return keccak256(a) == keccak256(b);\n', '   }\n', '  \n', '  function hasDuplicate(string _tocheck) public view returns (bool){\n', '    return hasPriorDuplicate(_tocheck,opinions.length);\n', '  }\n', '  \n', '  function hasPriorDuplicate(string _tocheck,uint256 index) public view returns (bool){\n', '    for(uint i = 0; i<index; i++){\n', '        if(compareStrings(_tocheck,opinions[i].text)){\n', '            return true;\n', '        }\n', '    }\n', '    return false;\n', '  }\n', '  \n', '  function implementsERC721() public pure returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  /// @dev Required for ERC-721 compliance.\n', '  function name() public pure returns (string) {\n', '    return NAME;\n', '  }\n', '\n', '  /// For querying owner of token\n', '  /// @param _tokenId The tokenID for owner inquiry\n', '  /// @dev Required for ERC-721 compliance.\n', '  function ownerOf(uint256 _tokenId)\n', '    public\n', '    view\n', '    returns (address owner)\n', '  {\n', '    owner = opinionIndexToOwner[_tokenId];\n', '    require(owner != address(0));\n', '  }\n', '\n', '  function payout(address _to) public onlyCLevel {\n', '    _payout(_to);\n', '  }\n', '\n', '  function sponsorOpinion(uint256 _tokenId,uint8 comment,bool _likesOpinion) public payable {\n', '      //ensure comment corresponds to status of token. Tokens with a comment of 0 are unregistered.\n', '      require(comment!=0);\n', '      require((_likesOpinion && comment<100) || (!_likesOpinion && comment>100));\n', '      address sponsorAdr = msg.sender;\n', '      require(_addressNotNull(sponsorAdr));\n', '      // Making sure sent amount is greater than or equal to the sellingPrice\n', '      uint256 sellingPrice = opinionIndexToPrice[_tokenId];\n', '      address currentOwner=opinionIndexToOwner[_tokenId];\n', '      address newOwner = msg.sender;\n', '      require(_addressNotNull(newOwner));\n', '      require(_addressNotNull(currentOwner));\n', '      require(msg.value >= sellingPrice);\n', '      uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 90), 100));\n', '      uint256 ownerTake=uint256(SafeMath.div(SafeMath.mul(sellingPrice, 10), 100));\n', '      uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\n', '          // Update prices\n', '    if (sellingPrice < firstStepLimit) {\n', '      // first stage\n', '      opinionIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 200), 90);\n', '    } else if (sellingPrice < secondStepLimit) {\n', '      // second stage\n', '      opinionIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 120), 90);\n', '    } else {\n', '      // third stage\n', '      opinionIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 115), 90);\n', '    }\n', '    Opinion storage opinion = opinions[_tokenId];\n', '    require(opinion.claimed);\n', '    require(sponsorAdr!=opinion.sponsor);\n', '    require(sponsorAdr!=opinion.antisponsor);\n', '    require(sponsorAdr!=currentOwner);\n', '    opinion.comment=comment;\n', '    if(_likesOpinion){\n', '        if(_addressNotNull(opinion.sponsor)){\n', '            opinion.sponsor.transfer(payment);\n', '            currentOwner.transfer(ownerTake);\n', '        }\n', '        else{\n', '            currentOwner.transfer(sellingPrice);\n', '        }\n', '        opinion.sponsor=sponsorAdr;\n', '        opinion.totalsponsored=SafeMath.add(opinion.totalsponsored,sellingPrice);\n', '    }\n', '    else{\n', '        if(_addressNotNull(opinion.sponsor)){\n', '            opinion.antisponsor.transfer(payment);\n', '            ceoAddress.transfer(ownerTake);\n', '        }\n', '        else{\n', "            ceoAddress.transfer(sellingPrice); //eth for initial antisponsor goes to Cryptopinions, because you wouldn't want it to go to the creator of an opinion you don't like\n", '        }\n', '        opinion.antisponsor=sponsorAdr;\n', '        opinion.totalantisponsored=SafeMath.add(opinion.totalantisponsored,sellingPrice);\n', '    }\n', '    msg.sender.transfer(purchaseExcess);\n', '  }\n', '  \n', '  //lets you permanently delete someone elses opinion.\n', '  function deleteThis(uint256 _tokenId) public payable{\n', '    //Cost is 1 eth or five times the current valuation of the opinion, whichever is higher.\n', '    uint256 sellingPrice = SafeMath.mul(opinionIndexToPrice[_tokenId],5);\n', '    if(sellingPrice<1 ether){\n', '        sellingPrice=1 ether;\n', '    }\n', '    require(msg.value >= sellingPrice);\n', '    ceoAddress.transfer(sellingPrice);\n', '    Opinion storage opinion = opinions[_tokenId];\n', '    opinion.deleted=true;\n', '    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\n', '    msg.sender.transfer(purchaseExcess);\n', '  }\n', '  \n', '  // Allows someone to send ether and obtain the (unclaimed only) token\n', '  function registerOpinion(uint256 _tokenId,string _newOpinion) public payable {\n', '    \n', '    //Set opinion to the new opinion\n', '    _initOpinion(_tokenId,_newOpinion);\n', '    \n', '    address oldOwner = opinionIndexToOwner[_tokenId];\n', '    address newOwner = msg.sender;\n', '\n', '    uint256 sellingPrice = opinionIndexToPrice[_tokenId];\n', '\n', '    // Making sure token owner is not sending to self\n', '    require(oldOwner != newOwner);\n', '\n', '    // Safety check to prevent against an unexpected 0x0 default.\n', '    require(_addressNotNull(newOwner));\n', '\n', '    // Making sure sent amount is greater than or equal to the sellingPrice\n', '    require(msg.value >= sellingPrice);\n', '    \n', '    uint256 payment = sellingPrice;\n', '    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\n', '    opinionIndexToPrice[_tokenId] = sponsorStartingCost; //initial cost to sponsor\n', '\n', '    _transfer(oldOwner, newOwner, _tokenId);\n', '\n', '    ceoAddress.transfer(payment);\n', '\n', '    TokenSold(_tokenId, sellingPrice, opinionIndexToPrice[_tokenId], oldOwner, newOwner, opinions[_tokenId].text);\n', '\n', '    msg.sender.transfer(purchaseExcess);\n', '  }\n', '\n', '  function priceOf(uint256 _tokenId) public view returns (uint256 price) {\n', '    return opinionIndexToPrice[_tokenId];\n', '  }\n', '\n', '  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n', '  /// @param _newCEO The address of the new CEO\n', '  function setCEO(address _newCEO) public onlyCEO {\n', '    _setCEO(_newCEO);\n', '  }\n', '   function _setCEO(address _newCEO) private{\n', '         require(_newCEO != address(0));\n', '         ceoAddress = _newCEO;\n', '   }\n', '  /// @dev Assigns a new address to act as the COO. Only available to the current COO.\n', '  /// @param _newCOO The address of the new COO\n', '  function setCOO(address _newCOO) public onlyCEO {\n', '    require(_newCOO != address(0));\n', '\n', '    cooAddress = _newCOO;\n', '  }\n', '\n', '  /// @dev Required for ERC-721 compliance.\n', '  function symbol() public pure returns (string) {\n', '    return SYMBOL;\n', '  }\n', '\n', '  /// @notice Allow pre-approved user to take ownership of a token\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function takeOwnership(uint256 _tokenId) public {\n', '    address newOwner = msg.sender;\n', '    address oldOwner = opinionIndexToOwner[_tokenId];\n', '\n', '    // Safety check to prevent against an unexpected 0x0 default.\n', '    require(_addressNotNull(newOwner));\n', '\n', '    // Making sure transfer is approved\n', '    require(_approved(newOwner, _tokenId));\n', '\n', '    _transfer(oldOwner, newOwner, _tokenId);\n', '  }\n', '\n', '  /// @param _owner The owner whose celebrity tokens we are interested in.\n', "  /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\n", '  ///  expensive (it walks the entire opinions array looking for opinions belonging to owner),\n', '  ///  but it also returns a dynamic array, which is only supported for web3 calls, and\n', '  ///  not contract-to-contract calls.\n', '  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\n', '    uint256 tokenCount = balanceOf(_owner);\n', '    if (tokenCount == 0) {\n', '        // Return an empty array\n', '      return new uint256[](0);\n', '    } else {\n', '      uint256[] memory result = new uint256[](tokenCount);\n', '      uint256 totalOpinions = totalSupply();\n', '      uint256 resultIndex = 0;\n', '\n', '      uint256 opinionId;\n', '      for (opinionId = 0; opinionId <= totalOpinions; opinionId++) {\n', '        if (opinionIndexToOwner[opinionId] == _owner) {\n', '          result[resultIndex] = opinionId;\n', '          resultIndex++;\n', '        }\n', '      }\n', '      return result;\n', '    }\n', '  }\n', '\n', '  /// For querying totalSupply of token\n', '  /// @dev Required for ERC-721 compliance.\n', '  function totalSupply() public view returns (uint256 total) {\n', '    return opinions.length;\n', '  }\n', '\n', '  /// Owner initates the transfer of the token to another account\n', '  /// @param _to The address for the token to be transferred to.\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function transfer(\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public {\n', '    require(_owns(msg.sender, _tokenId));\n', '    require(_addressNotNull(_to));\n', '\n', '    _transfer(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /// Third-party initiates transfer of token from address _from to address _to\n', '  /// @param _from The address for the token to be transferred from.\n', '  /// @param _to The address for the token to be transferred to.\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public {\n', '    require(_owns(_from, _tokenId));\n', '    require(_approved(_to, _tokenId));\n', '    require(_addressNotNull(_to));\n', '\n', '    _transfer(_from, _to, _tokenId);\n', '  }\n', '  \n', '//Allows purchase of the entire contract. All revenue provisioned to ceoAddress will go to the new address specified.\n', '//If you contact us following purchase we will transfer domain, website source code etc. to you free of charge, otherwise we will continue to maintain the frontend site for 1 year.\n', 'uint256 contractPrice=300 ether;\n', 'function buyCryptopinions(address _newCEO) payable public{\n', '    require(msg.value >= contractPrice);\n', '    ceoAddress.transfer(msg.value);\n', '    _setCEO(_newCEO);\n', '    _setPrice(9999999 ether);\n', '}\n', 'function setPrice(uint256 newprice) public onlyCEO{\n', '    _setPrice(newprice);\n', '}\n', 'function _setPrice(uint256 newprice) private{\n', '    contractPrice=newprice;\n', '}\n', '\n', '  /*** PRIVATE FUNCTIONS ***/\n', '  /// Safety check on _to address to prevent against an unexpected 0x0 default.\n', '  function _addressNotNull(address _to) private pure returns (bool) {\n', '    return _to != address(0);\n', '  }\n', '\n', '  /// For checking approval of transfer for address _to\n', '  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\n', '    return opinionIndexToApproved[_tokenId] == _to;\n', '  }\n', '  \n', '  function _createOpinionSet() private {\n', '      for(uint i = 0; i<numIssued; i++){\n', '        _createOpinion(DEFAULT_TEXT,ceoAddress,startingPrice);\n', '      }\n', '      //startingPrice = SafeMath.mul(startingPrice,stepMultiplier); //increase the price for the next set of tokens\n', '      //currentIssueRemaining=numIssued;\n', '      \n', '  }\n', '  \n', '  //for registering an Opinion\n', '  function _initOpinion(uint256 _tokenId,string _newOpinion) private {\n', '      Opinion storage opinion = opinions[_tokenId];\n', '      opinion.timestamp=now;\n', '      opinion.text=_newOpinion;\n', '      opinion.comment=1;\n', '      require(!opinion.claimed);\n', '        uint256 newprice=SafeMath.mul(stepMultiplier,opinionIndexToPrice[_tokenId]);\n', '        //max price 1 eth\n', '        if(newprice > 0.1 ether){ //max price for a new opinion, 1 ether\n', '            newprice=0.1 ether;\n', '        }\n', '        _createOpinion("",ceoAddress,newprice); //make a new opinion for someone else to buy\n', '        opinion.claimed=true;\n', '      \n', '          //currentIssueRemaining=SafeMath.sub(currentIssueRemaining,1);\n', '          //if this is the last remaining token for sale, issue more\n', '          //if(currentIssueRemaining == 0){\n', '          //    _createOpinionSet();\n', '          //}\n', '      \n', '      \n', '  }\n', '  \n', '  /// For creating Opinion\n', '  function _createOpinion(string _name, address _owner, uint256 _price) private {\n', '    Opinion memory _opinion = Opinion({\n', '      text: _name,\n', '      claimed: false,\n', '      deleted: false,\n', '      comment: 0,\n', '      sponsor: _owner,\n', '      antisponsor: ceoAddress,\n', '      totalsponsored:0,\n', '      totalantisponsored:0,\n', '      timestamp:now\n', '    });\n', '    uint256 newOpinionId = opinions.push(_opinion) - 1;\n', '\n', "    // It's probably never going to happen, 4 billion tokens are A LOT, but\n", "    // let's just be 100% sure we never let this happen.\n", '    require(newOpinionId == uint256(uint32(newOpinionId)));\n', '\n', '    Birth(newOpinionId, _name, _owner);\n', '\n', '    opinionIndexToPrice[newOpinionId] = _price;\n', '\n', '    // This will assign ownership, and also emit the Transfer event as\n', '    // per ERC721 draft\n', '    _transfer(address(0), _owner, newOpinionId);\n', '  }\n', '\n', '  /// Check for token ownership\n', '  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\n', '    return claimant == opinionIndexToOwner[_tokenId];\n', '  }\n', '\n', '  /// For paying out balance on contract\n', '  function _payout(address _to) private {\n', '    if (_to == address(0)) {\n', '      ceoAddress.transfer(this.balance);\n', '    } else {\n', '      _to.transfer(this.balance);\n', '    }\n', '  }\n', '\n', '  /// @dev Assigns ownership of a specific opinion to an address.\n', '  function _transfer(address _from, address _to, uint256 _tokenId) private {\n', "    // Since the number of opinions is capped to 2^32 we can't overflow this\n", '    ownershipTokenCount[_to]++;\n', '    //transfer ownership\n', '    opinionIndexToOwner[_tokenId] = _to;\n', '\n', "    // When creating new opinions _from is 0x0, but we can't account that address.\n", '    if (_from != address(0)) {\n', '      ownershipTokenCount[_from]--;\n', '      // clear any previously approved ownership exchange\n', '      delete opinionIndexToApproved[_tokenId];\n', '    }\n', '\n', '    // Emit the transfer event.\n', '    Transfer(_from, _to, _tokenId);\n', '  }\n', '}\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
