['pragma solidity ^0.4.24;\n', '\n', '// File: contracts/interfaces/IOwned.sol\n', '\n', '/*\n', '    Owned Contract Interface\n', '*/\n', 'contract IOwned {\n', '    function transferOwnership(address _newOwner) public;\n', '    function acceptOwnership() public;\n', '    function transferOwnershipNow(address newContractOwner) public;\n', '}\n', '\n', '// File: contracts/utility/Owned.sol\n', '\n', '/*\n', '    This is the "owned" utility contract used by bancor with one additional function - transferOwnershipNow()\n', '    \n', '    The original unmodified version can be found here:\n', '    https://github.com/bancorprotocol/contracts/commit/63480ca28534830f184d3c4bf799c1f90d113846\n', '    \n', '    Provides support and utilities for contract ownership\n', '*/\n', 'contract Owned is IOwned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\n', '\n', '    /**\n', '        @dev constructor\n', '    */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    // allows execution by the owner only\n', '    modifier ownerOnly {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '        @dev allows transferring the contract ownership\n', '        the new owner still needs to accept the transfer\n', '        can only be called by the contract owner\n', '        @param _newOwner    new contract owner\n', '    */\n', '    function transferOwnership(address _newOwner) public ownerOnly {\n', '        require(_newOwner != owner);\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    /**\n', '        @dev used by a new owner to accept an ownership transfer\n', '    */\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnerUpdate(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '\n', '    /**\n', '        @dev transfers the contract ownership without needing the new owner to accept ownership\n', '        @param newContractOwner    new contract owner\n', '    */\n', '    function transferOwnershipNow(address newContractOwner) ownerOnly public {\n', '        require(newContractOwner != owner);\n', '        emit OwnerUpdate(owner, newContractOwner);\n', '        owner = newContractOwner;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/interfaces/ILogger.sol\n', '\n', '/*\n', '    Logger Contract Interface\n', '*/\n', '\n', 'contract ILogger {\n', '    function addNewLoggerPermission(address addressToPermission) public;\n', '    function emitTaskCreated(uint uuid, uint amount) public;\n', '    function emitProjectCreated(uint uuid, uint amount, address rewardAddress) public;\n', '    function emitNewSmartToken(address token) public;\n', '    function emitIssuance(uint256 amount) public;\n', '    function emitDestruction(uint256 amount) public;\n', '    function emitTransfer(address from, address to, uint256 value) public;\n', '    function emitApproval(address owner, address spender, uint256 value) public;\n', '    function emitGenericLog(string messageType, string message) public;\n', '}\n', '\n', '// File: contracts/Logger.sol\n', '\n', '/*\n', '\n', 'Centralized logger allows backend to easily watch all events on all communities without needing to watch each community individually\n', '\n', '*/\n', 'contract Logger is Owned, ILogger  {\n', '\n', '    // Community\n', '    event TaskCreated(address msgSender, uint _uuid, uint _amount);\n', '    event ProjectCreated(address msgSender, uint _uuid, uint _amount, address _address);\n', '\n', '    // SmartToken\n', '    // triggered when a smart token is deployed - the _token address is defined for forward compatibility\n', '    //  in case we want to trigger the event from a factory\n', '    event NewSmartToken(address msgSender, address _token);\n', '    // triggered when the total supply is increased\n', '    event Issuance(address msgSender, uint256 _amount);\n', '    // triggered when the total supply is decreased\n', '    event Destruction(address msgSender, uint256 _amount);\n', '    // erc20\n', '    event Transfer(address msgSender, address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address msgSender, address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    // Logger\n', '    event NewCommunityAddress(address msgSender, address _newAddress);\n', '\n', '    event GenericLog(address msgSender, string messageType, string message);\n', '    mapping (address => bool) public permissionedAddresses;\n', '\n', '    modifier hasLoggerPermissions(address _address) {\n', '        require(permissionedAddresses[_address] == true);\n', '        _;\n', '    }\n', '\n', '    function addNewLoggerPermission(address addressToPermission) ownerOnly public {\n', '        permissionedAddresses[addressToPermission] = true;\n', '    }\n', '\n', '    function emitTaskCreated(uint uuid, uint amount) public hasLoggerPermissions(msg.sender) {\n', '        emit TaskCreated(msg.sender, uuid, amount);\n', '    }\n', '\n', '    function emitProjectCreated(uint uuid, uint amount, address rewardAddress) public hasLoggerPermissions(msg.sender) {\n', '        emit ProjectCreated(msg.sender, uuid, amount, rewardAddress);\n', '    }\n', '\n', '    function emitNewSmartToken(address token) public hasLoggerPermissions(msg.sender) {\n', '        emit NewSmartToken(msg.sender, token);\n', '    }\n', '\n', '    function emitIssuance(uint256 amount) public hasLoggerPermissions(msg.sender) {\n', '        emit Issuance(msg.sender, amount);\n', '    }\n', '\n', '    function emitDestruction(uint256 amount) public hasLoggerPermissions(msg.sender) {\n', '        emit Destruction(msg.sender, amount);\n', '    }\n', '\n', '    function emitTransfer(address from, address to, uint256 value) public hasLoggerPermissions(msg.sender) {\n', '        emit Transfer(msg.sender, from, to, value);\n', '    }\n', '\n', '    function emitApproval(address owner, address spender, uint256 value) public hasLoggerPermissions(msg.sender) {\n', '        emit Approval(msg.sender, owner, spender, value);\n', '    }\n', '\n', '    function emitGenericLog(string messageType, string message) public hasLoggerPermissions(msg.sender) {\n', '        emit GenericLog(msg.sender, messageType, message);\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IERC20.sol\n', '\n', '/*\n', '    Smart Token Interface\n', '*/\n', 'contract IERC20 {\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '// File: contracts/interfaces/ICommunityAccount.sol\n', '\n', '/*\n', '    Community Account Interface\n', '*/\n', 'contract ICommunityAccount is IOwned {\n', '    function setStakedBalances(uint _amount, address msgSender) public;\n', '    function setTotalStaked(uint _totalStaked) public;\n', '    function setTimeStaked(uint _timeStaked, address msgSender) public;\n', '    function setEscrowedTaskBalances(uint uuid, uint balance) public;\n', '    function setEscrowedProjectBalances(uint uuid, uint balance) public;\n', '    function setEscrowedProjectPayees(uint uuid, address payeeAddress) public;\n', '    function setTotalTaskEscrow(uint balance) public;\n', '    function setTotalProjectEscrow(uint balance) public;\n', '}\n', '\n', '// File: contracts/CommunityAccount.sol\n', '\n', '/**\n', '@title Tribe Account\n', '@notice This contract is used as a community&#39;s data store.\n', '@notice Advantages:\n', '@notice 1) Decouple logic contract from data contract\n', '@notice 2) Safely upgrade logic contract without compromising stored data\n', '*/\n', 'contract CommunityAccount is Owned, ICommunityAccount {\n', '\n', '    // Staking Variables.  In community token\n', '    mapping (address => uint256) public stakedBalances;\n', '    mapping (address => uint256) public timeStaked;\n', '    uint public totalStaked;\n', '\n', '    // Escrow variables.  In native token\n', '    uint public totalTaskEscrow;\n', '    uint public totalProjectEscrow;\n', '    mapping (uint256 => uint256) public escrowedTaskBalances;\n', '    mapping (uint256 => uint256) public escrowedProjectBalances;\n', '    mapping (uint256 => address) public escrowedProjectPayees;\n', '    \n', '    /**\n', '    @notice This function allows the community to transfer tokens out of the contract.\n', '    @param tokenContractAddress Address of community contract\n', '    @param destination Destination address of user looking to remove tokens from contract\n', '    @param amount Amount to transfer out of community\n', '    */\n', '    function transferTokensOut(address tokenContractAddress, address destination, uint amount) public ownerOnly returns(bool result) {\n', '        IERC20 token = IERC20(tokenContractAddress);\n', '        return token.transfer(destination, amount);\n', '    }\n', '\n', '    /**\n', '    @notice This is the community staking method\n', '    @param _amount Amount to be staked\n', '    @param msgSender Address of the staker\n', '    */\n', '    function setStakedBalances(uint _amount, address msgSender) public ownerOnly {\n', '        stakedBalances[msgSender] = _amount;\n', '    }\n', '\n', '    /**\n', '    @param _totalStaked Set total amount staked in community\n', '     */\n', '    function setTotalStaked(uint _totalStaked) public ownerOnly {\n', '        totalStaked = _totalStaked;\n', '    }\n', '\n', '    /**\n', '    @param _timeStaked Time of user staking into community\n', '    @param msgSender Staker address\n', '     */\n', '    function setTimeStaked(uint _timeStaked, address msgSender) public ownerOnly {\n', '        timeStaked[msgSender] = _timeStaked;\n', '    }\n', '\n', '    /**\n', '    @param uuid id of escrowed task\n', '    @param balance Balance to be set of escrowed task\n', '     */\n', '    function setEscrowedTaskBalances(uint uuid, uint balance) public ownerOnly {\n', '        escrowedTaskBalances[uuid] = balance;\n', '    }\n', '\n', '    /**\n', '    @param uuid id of escrowed project\n', '    @param balance Balance to be set of escrowed project\n', '     */\n', '    function setEscrowedProjectBalances(uint uuid, uint balance) public ownerOnly {\n', '        escrowedProjectBalances[uuid] = balance;\n', '    }\n', '\n', '    /**\n', '    @param uuid id of escrowed project\n', '    @param payeeAddress Address funds will go to once project completed\n', '     */\n', '    function setEscrowedProjectPayees(uint uuid, address payeeAddress) public ownerOnly {\n', '        escrowedProjectPayees[uuid] = payeeAddress;\n', '    }\n', '\n', '    /**\n', '    @param balance Balance which to set total task escrow to\n', '     */\n', '    function setTotalTaskEscrow(uint balance) public ownerOnly {\n', '        totalTaskEscrow = balance;\n', '    }\n', '\n', '    /**\n', '    @param balance Balance which to set total project to\n', '     */\n', '    function setTotalProjectEscrow(uint balance) public ownerOnly {\n', '        totalProjectEscrow = balance;\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/ISmartToken.sol\n', '\n', '/**\n', '    @notice Smart Token Interface\n', '*/\n', 'contract ISmartToken is IOwned, IERC20 {\n', '    function disableTransfers(bool _disable) public;\n', '    function issue(address _to, uint256 _amount) public;\n', '    function destroy(address _from, uint256 _amount) public;\n', '}\n', '\n', '// File: contracts/interfaces/ICommunity.sol\n', '\n', '/*\n', '    Community Interface\n', '*/\n', 'contract ICommunity {\n', '    function transferCurator(address _curator) public;\n', '    function transferVoteController(address _voteController) public;\n', '    function setMinimumStakingRequirement(uint _minimumStakingRequirement) public;\n', '    function setLockupPeriodSeconds(uint _lockupPeriodSeconds) public;\n', '    function setLogger(address newLoggerAddress) public;\n', '    function setTokenAddresses(address newNativeTokenAddress, address newCommunityTokenAddress) public;\n', '    function setCommunityAccount(address newCommunityAccountAddress) public;\n', '    function setCommunityAccountOwner(address newOwner) public;\n', '    function getAvailableDevFund() public view returns (uint);\n', '    function getLockedDevFundAmount() public view returns (uint);\n', '    function createNewTask(uint uuid, uint amount) public;\n', '    function cancelTask(uint uuid) public;\n', '    function rewardTaskCompletion(uint uuid, address user) public;\n', '    function createNewProject(uint uuid, uint amount, address projectPayee) public;\n', '    function cancelProject(uint uuid) public;\n', '    function rewardProjectCompletion(uint uuid) public;\n', '    function stakeCommunityTokens() public;\n', '    function unstakeCommunityTokens() public;\n', '    function isMember(address memberAddress)public view returns (bool);\n', '}\n', '\n', '// File: contracts/utility/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' * From https://github.com/OpenZeppelin/openzeppelin-solidity/commit/a2e710386933d3002062888b35aae8ac0401a7b3\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        // Gas optimization: this is cheaper than requiring &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (_a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = _a * _b;\n', '        require(c / _a == _b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b > 0); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = _a / _b;\n', '        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn&#39;t hold\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b <= _a);\n', '        uint256 c = _a - _b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        uint256 c = _a + _b;\n', '        require(c >= _a);\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', '// File: contracts/Community.sol\n', '\n', '/**\n', '@notice Main community logic contract.\n', '@notice functionality:\n', '@notice 1) Stake / Unstake community tokens.  This is how user joins or leaves community.\n', '@notice 2) Create Projects and Tasks by escrowing NTV token until curator or voteController determines task complete\n', '@notice 3) Log all events to singleton Logger contract\n', '@notice 4) Own communityAccount contract which holds all staking- and escrow-related funds and variables\n', '@notice --- This abstraction of funds allows for easy upgrade process; launch new community -> transfer ownership of the existing communityAccount\n', '@notice --- View test/integration-test-upgrades.js to demonstrate this process\n', ' */\n', 'contract Community is ICommunity {\n', '\n', '    address public curator;\n', '    address public voteController;\n', '    uint public minimumStakingRequirement;\n', '    uint public lockupPeriodSeconds;\n', '    ISmartToken public nativeTokenInstance;\n', '    ISmartToken public communityTokenInstance;\n', '    Logger public logger;\n', '    CommunityAccount public communityAccount;\n', '\n', '    modifier onlyCurator {\n', '        require(msg.sender == curator);\n', '        _;\n', '    }\n', '\n', '    modifier onlyVoteController {\n', '        require(msg.sender == voteController);\n', '        _;\n', '    }\n', '\n', '    modifier sufficientDevFundBalance (uint amount) {\n', '        require(amount <= getAvailableDevFund());\n', '        _;\n', '    }\n', '\n', '    /**\n', '    @param _minimumStakingRequirement Minimum stake amount to join community\n', '    @param _lockupPeriodSeconds Required minimum holding time, in seconds, after joining for staker to leave\n', '    @param _curator Address of community curator\n', '    @param _communityTokenContractAddress Address of community token contract\n', '    @param _nativeTokenContractAddress Address of ontract\n', '    @param _voteController Address of vote controller\n', '    @param _loggerContractAddress Address of logger contract\n', '    @param _communityAccountContractAddress Address of community account\n', '     */\n', '    constructor(uint _minimumStakingRequirement,\n', '        uint _lockupPeriodSeconds,\n', '        address _curator,\n', '        address _communityTokenContractAddress,\n', '        address _nativeTokenContractAddress,\n', '        address _voteController,\n', '        address _loggerContractAddress,\n', '        address _communityAccountContractAddress) public {\n', '        communityAccount = CommunityAccount(_communityAccountContractAddress);\n', '        curator = _curator;\n', '        minimumStakingRequirement = _minimumStakingRequirement;\n', '        lockupPeriodSeconds = _lockupPeriodSeconds;\n', '        logger = Logger(_loggerContractAddress);\n', '        voteController = _voteController;\n', '        nativeTokenInstance = ISmartToken(_nativeTokenContractAddress);\n', '        communityTokenInstance = ISmartToken(_communityTokenContractAddress);\n', '    }\n', '\n', '    // TODO add events to each of these\n', '    /**\n', '    @notice Sets curator to input curator address\n', '    @param _curator Address of new community curator\n', '     */\n', '    function transferCurator(address _curator) public onlyCurator {\n', '        curator = _curator;\n', '        logger.emitGenericLog("transferCurator", "");\n', '    }\n', '\n', '    /**\n', '    @notice Sets vote controller to input vote controller address\n', '    @param _voteController Address of new vote controller\n', '     */\n', '    function transferVoteController(address _voteController) public onlyCurator {\n', '        voteController = _voteController;\n', '        logger.emitGenericLog("transferVoteController", "");\n', '    }\n', '\n', '    /**\n', '    @notice Sets the minimum community staking requirement\n', '    @param _minimumStakingRequirement Minimum community staking requirement to be set\n', '     */\n', '    function setMinimumStakingRequirement(uint _minimumStakingRequirement) public onlyCurator {\n', '        minimumStakingRequirement = _minimumStakingRequirement;\n', '        logger.emitGenericLog("setMinimumStakingRequirement", "");\n', '    }\n', '\n', '    /**\n', '    @notice Sets lockup period for community staking\n', '    @param _lockupPeriodSeconds Community staking lockup period, in seconds\n', '    */\n', '    function setLockupPeriodSeconds(uint _lockupPeriodSeconds) public onlyCurator {\n', '        lockupPeriodSeconds = _lockupPeriodSeconds;\n', '        logger.emitGenericLog("setLockupPeriodSeconds", "");\n', '    }\n', '\n', '    /**\n', '    @notice Updates Logger contract address to be used\n', '    @param newLoggerAddress Address of new Logger contract\n', '     */\n', '    function setLogger(address newLoggerAddress) public onlyCurator {\n', '        logger = Logger(newLoggerAddress);\n', '        logger.emitGenericLog("setLogger", "");\n', '    }\n', '\n', '    /**\n', '    @param newNativeTokenAddress New Native token address\n', '    @param newCommunityTokenAddress New community token address\n', '     */\n', '    function setTokenAddresses(address newNativeTokenAddress, address newCommunityTokenAddress) public onlyCurator {\n', '        nativeTokenInstance = ISmartToken(newNativeTokenAddress);\n', '        communityTokenInstance = ISmartToken(newCommunityTokenAddress);\n', '        logger.emitGenericLog("setTokenAddresses", "");\n', '    }\n', '\n', '    /**\n', '    @param newCommunityAccountAddress Address of new community account\n', '     */\n', '    function setCommunityAccount(address newCommunityAccountAddress) public onlyCurator {\n', '        communityAccount = CommunityAccount(newCommunityAccountAddress);\n', '        logger.emitGenericLog("setCommunityAccount", "");\n', '    }\n', '\n', '    /**\n', '    @param newOwner New community account owner address\n', '     */\n', '    function setCommunityAccountOwner(address newOwner) public onlyCurator {\n', '        communityAccount.transferOwnershipNow(newOwner);\n', '        logger.emitGenericLog("setCommunityAccountOwner", "");\n', '    }\n', '\n', '    /// @return Amount in the dev fund not locked up by project or task stake\n', '    function getAvailableDevFund() public view returns (uint) {\n', '        uint devFundBalance = nativeTokenInstance.balanceOf(address(communityAccount));\n', '        return SafeMath.sub(devFundBalance, getLockedDevFundAmount());\n', '    }\n', '\n', '    /// @return Amount locked up in escrow\n', '    function getLockedDevFundAmount() public view returns (uint) {\n', '        return SafeMath.add(communityAccount.totalTaskEscrow(), communityAccount.totalProjectEscrow());\n', '    }\n', '\n', '    /* Task escrow code below (in community tokens) */\n', '\n', '    /// @notice Updates the escrow values for a new task\n', '    function createNewTask(uint uuid, uint amount) public onlyCurator sufficientDevFundBalance (amount) {\n', '        communityAccount.setEscrowedTaskBalances(uuid, amount);\n', '        communityAccount.setTotalTaskEscrow(SafeMath.add(communityAccount.totalTaskEscrow(), amount));\n', '        logger.emitTaskCreated(uuid, amount);\n', '        logger.emitGenericLog("createNewTask", "");\n', '    }\n', '\n', '    /// @notice Subtracts the tasks escrow and sets tasks escrow balance to 0\n', '    function cancelTask(uint uuid) public onlyCurator {\n', '        communityAccount.setTotalTaskEscrow(SafeMath.sub(communityAccount.totalTaskEscrow(), communityAccount.escrowedTaskBalances(uuid)));\n', '        communityAccount.setEscrowedTaskBalances(uuid, 0);\n', '        logger.emitGenericLog("cancelTask", "");\n', '    }\n', '\n', '    /// @notice Pays task completer and updates escrow balances\n', '    function rewardTaskCompletion(uint uuid, address user) public onlyVoteController {\n', '        communityAccount.transferTokensOut(address(nativeTokenInstance), user, communityAccount.escrowedTaskBalances(uuid));\n', '        communityAccount.setTotalTaskEscrow(SafeMath.sub(communityAccount.totalTaskEscrow(), communityAccount.escrowedTaskBalances(uuid)));\n', '        communityAccount.setEscrowedTaskBalances(uuid, 0);\n', '        logger.emitGenericLog("rewardTaskCompletion", "");\n', '    }\n', '\n', '    /* Project escrow code below (in community tokens) */\n', '\n', '    /// @notice updates the escrow values along with the project payee for a new project\n', '    function createNewProject(uint uuid, uint amount, address projectPayee) public onlyCurator sufficientDevFundBalance (amount) {\n', '        communityAccount.setEscrowedProjectBalances(uuid, amount);\n', '        communityAccount.setEscrowedProjectPayees(uuid, projectPayee);\n', '        communityAccount.setTotalProjectEscrow(SafeMath.add(communityAccount.totalProjectEscrow(), amount));\n', '        logger.emitProjectCreated(uuid, amount, projectPayee);\n', '        logger.emitGenericLog("createNewProject", "");\n', '    }\n', '\n', '    /// @notice Subtracts tasks escrow and sets tasks escrow balance to 0\n', '    function cancelProject(uint uuid) public onlyCurator {\n', '        communityAccount.setTotalProjectEscrow(SafeMath.sub(communityAccount.totalProjectEscrow(), communityAccount.escrowedProjectBalances(uuid)));\n', '        communityAccount.setEscrowedProjectBalances(uuid, 0);\n', '        logger.emitGenericLog("cancelProject", "");\n', '    }\n', '\n', '    /// @notice Pays out upon project completion\n', '    /// @notice Updates escrow balances\n', '    function rewardProjectCompletion(uint uuid) public onlyVoteController {\n', '        communityAccount.transferTokensOut(\n', '            address(nativeTokenInstance),\n', '            communityAccount.escrowedProjectPayees(uuid),\n', '            communityAccount.escrowedProjectBalances(uuid));\n', '        communityAccount.setTotalProjectEscrow(SafeMath.sub(communityAccount.totalProjectEscrow(), communityAccount.escrowedProjectBalances(uuid)));\n', '        communityAccount.setEscrowedProjectBalances(uuid, 0);\n', '        logger.emitGenericLog("rewardProjectCompletion", "");\n', '    }\n', '\n', '    /// @notice Stake code (in community tokens)\n', '    function stakeCommunityTokens() public {\n', '\n', '        require(minimumStakingRequirement >= communityAccount.stakedBalances(msg.sender));\n', '\n', '        uint amount = minimumStakingRequirement - communityAccount.stakedBalances(msg.sender);\n', '        require(amount > 0);\n', '        require(communityTokenInstance.transferFrom(msg.sender, address(communityAccount), amount));\n', '\n', '        communityAccount.setStakedBalances(SafeMath.add(communityAccount.stakedBalances(msg.sender), amount), msg.sender);\n', '        communityAccount.setTotalStaked(SafeMath.add(communityAccount.totalStaked(), amount));\n', '        communityAccount.setTimeStaked(now, msg.sender);\n', '        logger.emitGenericLog("stakeCommunityTokens", "");\n', '    }\n', '\n', '    /// @notice Unstakes user from community and sends funds back to user\n', '    /// @notice Checks lockup period and balance before unstaking\n', '    function unstakeCommunityTokens() public {\n', '        uint amount = communityAccount.stakedBalances(msg.sender);\n', '\n', '        require(now - communityAccount.timeStaked(msg.sender) >= lockupPeriodSeconds);\n', '\n', '        communityAccount.setStakedBalances(0, msg.sender);\n', '        communityAccount.setTotalStaked(SafeMath.sub(communityAccount.totalStaked(), amount));\n', '        require(communityAccount.transferTokensOut(address(communityTokenInstance), msg.sender, amount));\n', '        logger.emitGenericLog("unstakeCommunityTokens", "");\n', '    }\n', '\n', '    /// @notice Checks that the user is fully staked\n', '    function isMember(address memberAddress) public view returns (bool) {\n', '        return (communityAccount.stakedBalances(memberAddress) >= minimumStakingRequirement);\n', '    }\n', '}']