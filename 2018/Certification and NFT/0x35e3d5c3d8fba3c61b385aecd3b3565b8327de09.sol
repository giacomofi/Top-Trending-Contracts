['pragma solidity ^0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(\n', '    ERC20Basic _token,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transfer(_to, _value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 _token,\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transferFrom(_from, _to, _value));\n', '  }\n', '\n', '  function safeApprove(\n', '    ERC20 _token,\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.approve(_spender, _value));\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/CanReclaimToken.sol\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens\n', ' * @author SylTi\n', ' * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n', ' * This will prevent any accidental loss of tokens.\n', ' */\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param _token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic _token) external onlyOwner {\n', '    uint256 balance = _token.balanceOf(this);\n', '    _token.safeTransfer(owner, balance);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/interface/IBasicMultiToken.sol\n', '\n', 'contract IBasicMultiToken is ERC20 {\n', '    event Bundle(address indexed who, address indexed beneficiary, uint256 value);\n', '    event Unbundle(address indexed who, address indexed beneficiary, uint256 value);\n', '\n', '    function tokensCount() public view returns(uint256);\n', '    function tokens(uint i) public view returns(ERC20);\n', '    function bundlingEnabled() public view returns(bool);\n', '    \n', '    function bundleFirstTokens(address _beneficiary, uint256 _amount, uint256[] _tokenAmounts) public;\n', '    function bundle(address _beneficiary, uint256 _amount) public;\n', '\n', '    function unbundle(address _beneficiary, uint256 _value) public;\n', '    function unbundleSome(address _beneficiary, uint256 _value, ERC20[] _tokens) public;\n', '\n', '    // Owner methods\n', '    function disableBundling() public;\n', '    function enableBundling() public;\n', '\n', '    bytes4 public constant InterfaceId_IBasicMultiToken = 0xd5c368b6;\n', '\t  /**\n', '\t   * 0xd5c368b6 ===\n', "\t   *   bytes4(keccak256('tokensCount()')) ^\n", "\t   *   bytes4(keccak256('tokens(uint256)')) ^\n", "       *   bytes4(keccak256('bundlingEnabled()')) ^\n", "       *   bytes4(keccak256('bundleFirstTokens(address,uint256,uint256[])')) ^\n", "       *   bytes4(keccak256('bundle(address,uint256)')) ^\n", "       *   bytes4(keccak256('unbundle(address,uint256)')) ^\n", "       *   bytes4(keccak256('unbundleSome(address,uint256,address[])')) ^\n", "       *   bytes4(keccak256('disableBundling()')) ^\n", "       *   bytes4(keccak256('enableBundling()'))\n", '\t   */\n', '}\n', '\n', '// File: contracts/interface/IMultiToken.sol\n', '\n', 'contract IMultiToken is IBasicMultiToken {\n', '    event Update();\n', '    event Change(address indexed _fromToken, address indexed _toToken, address indexed _changer, uint256 _amount, uint256 _return);\n', '\n', '    function weights(address _token) public view returns(uint256);\n', '    function changesEnabled() public view returns(bool);\n', '    \n', '    function getReturn(address _fromToken, address _toToken, uint256 _amount) public view returns (uint256 returnAmount);\n', '    function change(address _fromToken, address _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256 returnAmount);\n', '\n', '    // Owner methods\n', '    function disableChanges() public;\n', '\n', '    bytes4 public constant InterfaceId_IMultiToken = 0x81624e24;\n', '\t  /**\n', '\t   * 0x81624e24 ===\n', '       *   InterfaceId_IBasicMultiToken(0xd5c368b6) ^\n', "\t   *   bytes4(keccak256('weights(address)')) ^\n", "       *   bytes4(keccak256('changesEnabled()')) ^\n", "       *   bytes4(keccak256('getReturn(address,address,uint256)')) ^\n", "\t   *   bytes4(keccak256('change(address,address,uint256,uint256)')) ^\n", "       *   bytes4(keccak256('disableChanges()'))\n", '\t   */\n', '}\n', '\n', '// File: contracts/ext/CheckedERC20.sol\n', '\n', 'library CheckedERC20 {\n', '    using SafeMath for uint;\n', '\n', '    function isContract(address addr) internal view returns(bool result) {\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            result := gt(extcodesize(addr), 0)\n', '        }\n', '    }\n', '\n', '    function handleReturnBool() internal pure returns(bool result) {\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            switch returndatasize()\n', '            case 0 { // not a std erc20\n', '                result := 1\n', '            }\n', '            case 32 { // std erc20\n', '                returndatacopy(0, 0, 32)\n', '                result := mload(0)\n', '            }\n', '            default { // anything else, should revert for safety\n', '                revert(0, 0)\n', '            }\n', '        }\n', '    }\n', '\n', '    function handleReturnBytes32() internal pure returns(bytes32 result) {\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            switch eq(returndatasize(), 32) // not a std erc20\n', '            case 1 {\n', '                returndatacopy(0, 0, 32)\n', '                result := mload(0)\n', '            }\n', '\n', '            switch gt(returndatasize(), 32) // std erc20\n', '            case 1 {\n', '                returndatacopy(0, 64, 32)\n', '                result := mload(0)\n', '            }\n', '\n', '            switch lt(returndatasize(), 32) // anything else, should revert for safety\n', '            case 1 {\n', '                revert(0, 0)\n', '            }\n', '        }\n', '    }\n', '\n', '    function asmTransfer(address token, address to, uint256 value) internal returns(bool) {\n', '        require(isContract(token));\n', '        // solium-disable-next-line security/no-low-level-calls\n', '        require(token.call(bytes4(keccak256("transfer(address,uint256)")), to, value));\n', '        return handleReturnBool();\n', '    }\n', '\n', '    function asmTransferFrom(address token, address from, address to, uint256 value) internal returns(bool) {\n', '        require(isContract(token));\n', '        // solium-disable-next-line security/no-low-level-calls\n', '        require(token.call(bytes4(keccak256("transferFrom(address,address,uint256)")), from, to, value));\n', '        return handleReturnBool();\n', '    }\n', '\n', '    function asmApprove(address token, address spender, uint256 value) internal returns(bool) {\n', '        require(isContract(token));\n', '        // solium-disable-next-line security/no-low-level-calls\n', '        require(token.call(bytes4(keccak256("approve(address,uint256)")), spender, value));\n', '        return handleReturnBool();\n', '    }\n', '\n', '    //\n', '\n', '    function checkedTransfer(ERC20 token, address to, uint256 value) internal {\n', '        if (value > 0) {\n', '            uint256 balance = token.balanceOf(this);\n', '            asmTransfer(token, to, value);\n', '            require(token.balanceOf(this) == balance.sub(value), "checkedTransfer: Final balance didn\'t match");\n', '        }\n', '    }\n', '\n', '    function checkedTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '        if (value > 0) {\n', '            uint256 toBalance = token.balanceOf(to);\n', '            asmTransferFrom(token, from, to, value);\n', '            require(token.balanceOf(to) == toBalance.add(value), "checkedTransfer: Final balance didn\'t match");\n', '        }\n', '    }\n', '\n', '    //\n', '\n', '    function asmName(address token) internal view returns(bytes32) {\n', '        require(isContract(token));\n', '        // solium-disable-next-line security/no-low-level-calls\n', '        require(token.call(bytes4(keccak256("name()"))));\n', '        return handleReturnBytes32();\n', '    }\n', '\n', '    function asmSymbol(address token) internal view returns(bytes32) {\n', '        require(isContract(token));\n', '        // solium-disable-next-line security/no-low-level-calls\n', '        require(token.call(bytes4(keccak256("symbol()"))));\n', '        return handleReturnBytes32();\n', '    }\n', '}\n', '\n', '// File: contracts/network/MultiChanger.sol\n', '\n', 'contract IEtherToken is ERC20 {\n', '    function deposit() public payable;\n', '    function withdraw(uint256 amount) public;\n', '}\n', '\n', '\n', 'contract IBancorNetwork {\n', '    function convert(\n', '        address[] path,\n', '        uint256 amount,\n', '        uint256 minReturn\n', '    )\n', '        public\n', '        payable\n', '        returns(uint256);\n', '\n', '    function claimAndConvert(\n', '        address[] path,\n', '        uint256 amount,\n', '        uint256 minReturn\n', '    )\n', '        public\n', '        payable\n', '        returns(uint256);\n', '}\n', '\n', '\n', 'contract IKyberNetworkProxy {\n', '    function trade(\n', '        address src,\n', '        uint srcAmount,\n', '        address dest,\n', '        address destAddress,\n', '        uint maxDestAmount,\n', '        uint minConversionRate,\n', '        address walletId\n', '    )\n', '        public\n', '        payable\n', '        returns(uint);\n', '}\n', '\n', '\n', 'contract MultiChanger is CanReclaimToken {\n', '    using SafeMath for uint256;\n', '    using CheckedERC20 for ERC20;\n', '\n', '    // Source: https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol\n', '    // call has been separated into its own function in order to take advantage\n', "    // of the Solidity's code generator to produce a loop that copies tx.data into memory.\n", '    function externalCall(address destination, uint value, bytes data, uint dataOffset, uint dataLength) internal returns (bool result) {\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)\n', '            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\n', '            result := call(\n', '                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting\n', '                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\n', '                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\n', '                destination,\n', '                value,\n', '                add(d, dataOffset),\n', '                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem\n', '                x,\n', '                0                  // Output is ignored, therefore the output size is zero\n', '            )\n', '        }\n', '    }\n', '\n', '    function change(bytes callDatas, uint[] starts) public payable { // starts should include 0 and callDatas.length\n', '        for (uint i = 0; i < starts.length - 1; i++) {\n', '            require(externalCall(this, 0, callDatas, starts[i], starts[i + 1] - starts[i]));\n', '        }\n', '    }\n', '\n', '    function sendEthValue(address target, bytes data, uint256 value) external {\n', '        // solium-disable-next-line security/no-call-value\n', '        require(target.call.value(value)(data));\n', '    }\n', '\n', '    function sendEthProportion(address target, bytes data, uint256 mul, uint256 div) external {\n', '        uint256 value = address(this).balance.mul(mul).div(div);\n', '        // solium-disable-next-line security/no-call-value\n', '        require(target.call.value(value)(data));\n', '    }\n', '\n', '    function approveTokenAmount(address target, bytes data, ERC20 fromToken, uint256 amount) external {\n', '        if (fromToken.allowance(this, target) != 0) {\n', '            fromToken.asmApprove(target, 0);\n', '        }\n', '        fromToken.asmApprove(target, amount);\n', '        // solium-disable-next-line security/no-low-level-calls\n', '        require(target.call(data));\n', '    }\n', '\n', '    function approveTokenProportion(address target, bytes data, ERC20 fromToken, uint256 mul, uint256 div) external {\n', '        uint256 amount = fromToken.balanceOf(this).mul(mul).div(div);\n', '        if (fromToken.allowance(this, target) != 0) {\n', '            fromToken.asmApprove(target, 0);\n', '        }\n', '        fromToken.asmApprove(target, amount);\n', '        // solium-disable-next-line security/no-low-level-calls\n', '        require(target.call(data));\n', '    }\n', '\n', '    function transferTokenAmount(address target, bytes data, ERC20 fromToken, uint256 amount) external {\n', '        fromToken.asmTransfer(target, amount);\n', '        if (target != address(0)) {\n', '            // solium-disable-next-line security/no-low-level-calls\n', '            require(target.call(data));\n', '        }\n', '    }\n', '\n', '    function transferTokenProportion(address target, bytes data, ERC20 fromToken, uint256 mul, uint256 div) external {\n', '        uint256 amount = fromToken.balanceOf(this).mul(mul).div(div);\n', '        fromToken.asmTransfer(target, amount);\n', '        if (target != address(0)) {\n', '            // solium-disable-next-line security/no-low-level-calls\n', '            require(target.call(data));\n', '        }\n', '    }\n', '\n', '    // Multitoken\n', '\n', '    function multitokenChangeAmount(IMultiToken mtkn, ERC20 fromToken, ERC20 toToken, uint256 minReturn, uint256 amount) external {\n', '        if (fromToken.allowance(this, mtkn) == 0) {\n', '            fromToken.asmApprove(mtkn, uint256(-1));\n', '        }\n', '        mtkn.change(fromToken, toToken, amount, minReturn);\n', '    }\n', '\n', '    function multitokenChangeProportion(IMultiToken mtkn, ERC20 fromToken, ERC20 toToken, uint256 minReturn, uint256 mul, uint256 div) external {\n', '        uint256 amount = fromToken.balanceOf(this).mul(mul).div(div);\n', '        this.multitokenChangeAmount(mtkn, fromToken, toToken, minReturn, amount);\n', '    }\n', '\n', '    // Ether token\n', '\n', '    function withdrawEtherTokenAmount(IEtherToken etherToken, uint256 amount) external {\n', '        etherToken.withdraw(amount);\n', '    }\n', '\n', '    function withdrawEtherTokenProportion(IEtherToken etherToken, uint256 mul, uint256 div) external {\n', '        uint256 amount = etherToken.balanceOf(this).mul(mul).div(div);\n', '        etherToken.withdraw(amount);\n', '    }\n', '\n', '    // Bancor Network\n', '\n', '    function bancorSendEthValue(IBancorNetwork bancor, address[] path, uint256 value) external {\n', '        bancor.convert.value(value)(path, value, 1);\n', '    }\n', '\n', '    function bancorSendEthProportion(IBancorNetwork bancor, address[] path, uint256 mul, uint256 div) external {\n', '        uint256 value = address(this).balance.mul(mul).div(div);\n', '        bancor.convert.value(value)(path, value, 1);\n', '    }\n', '\n', '    function bancorApproveTokenAmount(IBancorNetwork bancor, address[] path, uint256 amount) external {\n', '        if (ERC20(path[0]).allowance(this, bancor) == 0) {\n', '            ERC20(path[0]).asmApprove(bancor, uint256(-1));\n', '        }\n', '        bancor.claimAndConvert(path, amount, 1);\n', '    }\n', '\n', '    function bancorApproveTokenProportion(IBancorNetwork bancor, address[] path, uint256 mul, uint256 div) external {\n', '        uint256 amount = ERC20(path[0]).balanceOf(this).mul(mul).div(div);\n', '        if (ERC20(path[0]).allowance(this, bancor) == 0) {\n', '            ERC20(path[0]).asmApprove(bancor, uint256(-1));\n', '        }\n', '        bancor.claimAndConvert(path, amount, 1);\n', '    }\n', '\n', '    function bancorTransferTokenAmount(IBancorNetwork bancor, address[] path, uint256 amount) external {\n', '        ERC20(path[0]).asmTransfer(bancor, amount);\n', '        bancor.convert(path, amount, 1);\n', '    }\n', '\n', '    function bancorTransferTokenProportion(IBancorNetwork bancor, address[] path, uint256 mul, uint256 div) external {\n', '        uint256 amount = ERC20(path[0]).balanceOf(this).mul(mul).div(div);\n', '        ERC20(path[0]).asmTransfer(bancor, amount);\n', '        bancor.convert(path, amount, 1);\n', '    }\n', '\n', '    function bancorAlreadyTransferedTokenAmount(IBancorNetwork bancor, address[] path, uint256 amount) external {\n', '        bancor.convert(path, amount, 1);\n', '    }\n', '\n', '    function bancorAlreadyTransferedTokenProportion(IBancorNetwork bancor, address[] path, uint256 mul, uint256 div) external {\n', '        uint256 amount = ERC20(path[0]).balanceOf(bancor).mul(mul).div(div);\n', '        bancor.convert(path, amount, 1);\n', '    }\n', '\n', '    // Kyber Network\n', '\n', '    function kyberSendEthProportion(IKyberNetworkProxy kyber, ERC20 fromToken, address toToken, uint256 mul, uint256 div) external {\n', '        uint256 value = address(this).balance.mul(mul).div(div);\n', '        kyber.trade.value(value)(\n', '            fromToken,\n', '            value,\n', '            toToken,\n', '            this,\n', '            1 << 255,\n', '            0,\n', '            0\n', '        );\n', '    }\n', '\n', '    function kyberApproveTokenAmount(IKyberNetworkProxy kyber, ERC20 fromToken, address toToken, uint256 amount) external {\n', '        if (fromToken.allowance(this, kyber) == 0) {\n', '            fromToken.asmApprove(kyber, uint256(-1));\n', '        }\n', '        kyber.trade(\n', '            fromToken,\n', '            amount,\n', '            toToken,\n', '            this,\n', '            1 << 255,\n', '            0,\n', '            0\n', '        );\n', '    }\n', '\n', '    function kyberApproveTokenProportion(IKyberNetworkProxy kyber, ERC20 fromToken, address toToken, uint256 mul, uint256 div) external {\n', '        uint256 amount = fromToken.balanceOf(this).mul(mul).div(div);\n', '        this.kyberApproveTokenAmount(kyber, fromToken, toToken, amount);\n', '    }\n', '}']