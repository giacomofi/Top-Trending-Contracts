['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * IOwnership\n', ' *\n', ' * Perminent ownership\n', ' *\n', ' * #created 01/10/2017\n', ' * #author Frank Bonnet\n', ' */\n', 'interface IOwnership {\n', '\n', '    /**\n', '     * Returns true if `_account` is the current owner\n', '     *\n', '     * @param _account The address to test against\n', '     */\n', '    function isOwner(address _account) public view returns (bool);\n', '\n', '\n', '    /**\n', '     * Gets the current owner\n', '     *\n', '     * @return address The current owner\n', '     */\n', '    function getOwner() public view returns (address);\n', '}\n', '\n', '\n', '/**\n', ' * Ownership\n', ' *\n', ' * Perminent ownership\n', ' *\n', ' * #created 01/10/2017\n', ' * #author Frank Bonnet\n', ' */\n', 'contract Ownership is IOwnership {\n', '\n', '    // Owner\n', '    address internal owner;\n', '\n', '\n', '    /**\n', '     * Access is restricted to the current owner\n', '     */\n', '    modifier only_owner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * The publisher is the inital owner\n', '     */\n', '    function Ownership() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    /**\n', '     * Returns true if `_account` is the current owner\n', '     *\n', '     * @param _account The address to test against\n', '     */\n', '    function isOwner(address _account) public view returns (bool) {\n', '        return _account == owner;\n', '    }\n', '\n', '\n', '    /**\n', '     * Gets the current owner\n', '     *\n', '     * @return address The current owner\n', '     */\n', '    function getOwner() public view returns (address) {\n', '        return owner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * ITransferableOwnership\n', ' *\n', ' * Enhances ownership by allowing the current owner to \n', ' * transfer ownership to a new owner\n', ' *\n', ' * #created 01/10/2017\n', ' * #author Frank Bonnet\n', ' */\n', 'interface ITransferableOwnership {\n', '    \n', '\n', '    /**\n', '     * Transfer ownership to `_newOwner`\n', '     *\n', '     * @param _newOwner The address of the account that will become the new owner \n', '     */\n', '    function transferOwnership(address _newOwner) public;\n', '}\n', '\n', '\n', '\n', '/**\n', ' * TransferableOwnership\n', ' *\n', ' * Enhances ownership by allowing the current owner to \n', ' * transfer ownership to a new owner\n', ' *\n', ' * #created 01/10/2017\n', ' * #author Frank Bonnet\n', ' */\n', 'contract TransferableOwnership is ITransferableOwnership, Ownership {\n', '\n', '\n', '    /**\n', '     * Transfer ownership to `_newOwner`\n', '     *\n', '     * @param _newOwner The address of the account that will become the new owner \n', '     */\n', '    function transferOwnership(address _newOwner) public only_owner {\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * IAuthenticator \n', ' *\n', ' * Authenticator interface\n', ' *\n', ' * #created 15/10/2017\n', ' * #author Frank Bonnet\n', ' */\n', 'interface IAuthenticator {\n', '    \n', '\n', '    /**\n', '     * Authenticate \n', '     *\n', '     * Returns whether `_account` is authenticated or not\n', '     *\n', '     * @param _account The account to authenticate\n', '     * @return whether `_account` is successfully authenticated\n', '     */\n', '    function authenticate(address _account) public view returns (bool);\n', '}\n', '\n', '\n', '/**\n', ' * IWhitelist \n', ' *\n', ' * Whitelist authentication interface\n', ' *\n', ' * #created 04/10/2017\n', ' * #author Frank Bonnet\n', ' */\n', 'interface IWhitelist {\n', '    \n', '\n', '    /**\n', '     * Returns whether an entry exists for `_account`\n', '     *\n', '     * @param _account The account to check\n', '     * @return whether `_account` is has an entry in the whitelist\n', '     */\n', '    function hasEntry(address _account) public view returns (bool);\n', '\n', '\n', '    /**\n', '     * Add `_account` to the whitelist\n', '     *\n', '     * If an account is currently disabled, the account is reenabled, otherwise \n', '     * a new entry is created\n', '     *\n', '     * @param _account The account to add\n', '     */\n', '    function add(address _account) public;\n', '\n', '\n', '    /**\n', '     * Remove `_account` from the whitelist\n', '     *\n', '     * Will not actually remove the entry but disable it by updating\n', '     * the accepted record\n', '     *\n', '     * @param _account The account to remove\n', '     */\n', '    function remove(address _account) public;\n', '}\n', '\n', '\n', '/**\n', ' * Whitelist authentication list\n', ' *\n', ' * #created 04/10/2017\n', ' * #author Frank Bonnet\n', ' */\n', 'contract Whitelist is IWhitelist, IAuthenticator, TransferableOwnership {\n', '\n', '    struct Entry {\n', '        uint datetime;\n', '        bool accepted;\n', '        uint index;\n', '    }\n', '\n', '    mapping(address => Entry) internal list;\n', '    address[] internal listIndex;\n', '\n', '\n', '    /**\n', '     * Returns whether an entry exists for `_account`\n', '     *\n', '     * @param _account The account to check\n', '     * @return whether `_account` is has an entry in the whitelist\n', '     */\n', '    function hasEntry(address _account) public view returns (bool) {\n', '        return listIndex.length > 0 && _account == listIndex[list[_account].index];\n', '    }\n', '\n', '\n', '    /**\n', '     * Add `_account` to the whitelist\n', '     *\n', '     * If an account is currently disabled, the account is reenabled, otherwise \n', '     * a new entry is created\n', '     *\n', '     * @param _account The account to add\n', '     */\n', '    function add(address _account) public only_owner {\n', '        if (!hasEntry(_account)) {\n', '            list[_account] = Entry(\n', '                now, true, listIndex.push(_account) - 1);\n', '        } else {\n', '            Entry storage entry = list[_account];\n', '            if (!entry.accepted) {\n', '                entry.accepted = true;\n', '                entry.datetime = now;\n', '            }\n', '        }\n', '    }\n', '\n', '\n', '    /**\n', '     * Remove `_account` from the whitelist\n', '     *\n', '     * Will not acctually remove the entry but disable it by updating\n', '     * the accepted record\n', '     *\n', '     * @param _account The account to remove\n', '     */\n', '    function remove(address _account) public only_owner {\n', '        if (hasEntry(_account)) {\n', '            Entry storage entry = list[_account];\n', '            entry.accepted = false;\n', '            entry.datetime = now;\n', '        }\n', '    }\n', '\n', '\n', '    /**\n', '     * Authenticate \n', '     *\n', '     * Returns whether `_account` is on the whitelist\n', '     *\n', '     * @param _account The account to authenticate\n', '     * @return whether `_account` is successfully authenticated\n', '     */\n', '    function authenticate(address _account) public view returns (bool) {\n', '        return list[_account].accepted;\n', '    }\n', '}']