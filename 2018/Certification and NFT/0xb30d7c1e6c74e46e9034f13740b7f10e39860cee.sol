['pragma solidity ^0.4.20;\n', '\n', 'contract ReceiverPays {\n', '    address owner = msg.sender;\n', '\n', '    mapping(uint256 => bool) usedNonces;\n', '\n', '    // Funds are sent at deployment time.\n', '    function ReceiverPays() public payable { }\n', '\n', '\n', '    function claimPayment(uint256 amount, uint256 nonce, bytes sig) public {\n', '        require(!usedNonces[nonce]);\n', '        usedNonces[nonce] = true;\n', '\n', '        // This recreates the message that was signed on the client.\n', '        bytes32 message = prefixed(keccak256(msg.sender, amount, nonce, this));\n', '\n', '        require(recoverSigner(message, sig) == owner);\n', '\n', '        msg.sender.transfer(amount);\n', '    }\n', '\n', '    // Destroy contract and reclaim leftover funds.\n', '    function kill() public {\n', '        require(msg.sender == owner);\n', '        selfdestruct(msg.sender);\n', '    }\n', '\n', '\n', '    // Signature methods\n', '\n', '    function splitSignature(bytes sig)\n', '        internal\n', '        pure\n', '        returns (uint8, bytes32, bytes32)\n', '    {\n', '        require(sig.length == 65);\n', '\n', '        bytes32 r;\n', '        bytes32 s;\n', '        uint8 v;\n', '\n', '        assembly {\n', '            // first 32 bytes, after the length prefix\n', '            r := mload(add(sig, 32))\n', '            // second 32 bytes\n', '            s := mload(add(sig, 64))\n', '            // final byte (first byte of the next 32 bytes)\n', '            v := byte(0, mload(add(sig, 96)))\n', '        }\n', '\n', '        return (v, r, s);\n', '    }\n', '\n', '    function recoverSigner(bytes32 message, bytes sig)\n', '        internal\n', '        pure\n', '        returns (address)\n', '    {\n', '        uint8 v;\n', '        bytes32 r;\n', '        bytes32 s;\n', '\n', '        (v, r, s) = splitSignature(sig);\n', '\n', '        return ecrecover(message, v, r, s);\n', '    }\n', '\n', '    // Builds a prefixed hash to mimic the behavior of eth_sign.\n', '    function prefixed(bytes32 hash) internal pure returns (bytes32) {\n', '        return keccak256("\\x19Ethereum Signed Message:\\n32", hash);\n', '    }\n', '}']
['pragma solidity ^0.4.20;\n', '\n', 'contract ReceiverPays {\n', '    address owner = msg.sender;\n', '\n', '    mapping(uint256 => bool) usedNonces;\n', '\n', '    // Funds are sent at deployment time.\n', '    function ReceiverPays() public payable { }\n', '\n', '\n', '    function claimPayment(uint256 amount, uint256 nonce, bytes sig) public {\n', '        require(!usedNonces[nonce]);\n', '        usedNonces[nonce] = true;\n', '\n', '        // This recreates the message that was signed on the client.\n', '        bytes32 message = prefixed(keccak256(msg.sender, amount, nonce, this));\n', '\n', '        require(recoverSigner(message, sig) == owner);\n', '\n', '        msg.sender.transfer(amount);\n', '    }\n', '\n', '    // Destroy contract and reclaim leftover funds.\n', '    function kill() public {\n', '        require(msg.sender == owner);\n', '        selfdestruct(msg.sender);\n', '    }\n', '\n', '\n', '    // Signature methods\n', '\n', '    function splitSignature(bytes sig)\n', '        internal\n', '        pure\n', '        returns (uint8, bytes32, bytes32)\n', '    {\n', '        require(sig.length == 65);\n', '\n', '        bytes32 r;\n', '        bytes32 s;\n', '        uint8 v;\n', '\n', '        assembly {\n', '            // first 32 bytes, after the length prefix\n', '            r := mload(add(sig, 32))\n', '            // second 32 bytes\n', '            s := mload(add(sig, 64))\n', '            // final byte (first byte of the next 32 bytes)\n', '            v := byte(0, mload(add(sig, 96)))\n', '        }\n', '\n', '        return (v, r, s);\n', '    }\n', '\n', '    function recoverSigner(bytes32 message, bytes sig)\n', '        internal\n', '        pure\n', '        returns (address)\n', '    {\n', '        uint8 v;\n', '        bytes32 r;\n', '        bytes32 s;\n', '\n', '        (v, r, s) = splitSignature(sig);\n', '\n', '        return ecrecover(message, v, r, s);\n', '    }\n', '\n', '    // Builds a prefixed hash to mimic the behavior of eth_sign.\n', '    function prefixed(bytes32 hash) internal pure returns (bytes32) {\n', '        return keccak256("\\x19Ethereum Signed Message:\\n32", hash);\n', '    }\n', '}']
