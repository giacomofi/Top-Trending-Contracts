['contract P3D {\n', '  uint256 public stakingRequirement;\n', '  function buy(address _referredBy) public payable returns(uint256) {}\n', '  function balanceOf(address _customerAddress) view public returns(uint256) {}\n', '  function exit() public {}\n', '  function calculateTokensReceived(uint256 _ethereumToSpend) public view returns(uint256) {}\n', '  function calculateEthereumReceived(uint256 _tokensToSell) public view returns(uint256) { }\n', '  function myDividends(bool _includeReferralBonus) public view returns(uint256) {}\n', '  function withdraw() public {}\n', '  function totalSupply() public view returns(uint256);\n', '}\n', '\n', 'contract Pool {\n', '  P3D constant public p3d = P3D(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe);\n', '\n', '  address public owner;\n', '  uint256 public minimum;\n', '\n', '  event Contribution(address indexed caller, address indexed receiver, uint256 contribution, uint256 payout);\n', '  event Approved(address addr);\n', '  event Removed(address addr);\n', '  event OwnerChanged(address owner);\n', '  event MinimumChanged(uint256 minimum);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function() external payable {\n', '    // accept donations\n', '    if (msg.sender != address(p3d)) {\n', '      p3d.buy.value(msg.value)(msg.sender);\n', '      emit Contribution(msg.sender, address(0), msg.value, 0);\n', '    }\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  mapping (address => bool) public approved;\n', '\n', '  function approve(address _addr) external onlyOwner() {\n', '    approved[_addr] = true;\n', '    emit Approved(_addr);\n', '  }\n', '\n', '  function remove(address _addr) external onlyOwner() {\n', '    approved[_addr] = false;\n', '    emit Removed(_addr);\n', '  }\n', '\n', '  function changeOwner(address _newOwner) external onlyOwner() {\n', '    owner = _newOwner;\n', '    emit OwnerChanged(owner);\n', '  }\n', '  \n', '  function changeMinimum(uint256 _minimum) external onlyOwner() {\n', '    minimum = _minimum;\n', '    emit MinimumChanged(minimum);\n', '  }\n', '\n', '  function contribute(address _masternode, address _receiver) external payable {\n', '    // buy p3d\n', '    p3d.buy.value(msg.value)(_masternode);\n', '    \n', '    uint256 payout;\n', '    \n', '    // caller must be approved and value must meet the minimum\n', '    if (approved[msg.sender] && msg.value >= minimum) {\n', '      payout = p3d.myDividends(true);\n', '      if (payout != 0) {\n', '        p3d.withdraw();\n', '        // send divs to receiver\n', '        _receiver.transfer(payout);\n', '      }\n', '    }\n', '    \n', '    emit Contribution(msg.sender, _receiver, msg.value, payout);\n', '  }\n', '\n', '  function getInfo() external view returns (uint256, uint256) {\n', '    return (\n', '      p3d.balanceOf(address(this)),\n', '      p3d.myDividends(true)\n', '    );\n', '  }\n', '}']