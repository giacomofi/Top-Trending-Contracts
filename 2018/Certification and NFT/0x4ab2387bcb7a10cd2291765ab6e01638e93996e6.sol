['pragma solidity ^0.4.0;\n', '\n', 'contract TycoonPresale {\n', '    event HHH(address bidder, uint amount); // Event\n', '\n', '    address public owner; // Minor management of game\n', '    bool public isPresaleEnd;\n', '    uint256 private constant price = 0.0666 ether;\n', '    uint8 private constant maxNumbersPerPlayer = 10;\n', '    mapping (address => mapping (uint8 => bool)) private doihave;\n', '    mapping (address => uint8[]) private last; // [choumode][idx1][idx2][...]\n', '    uint256 private constant FACTOR = 1157920892373161954235709850086879078532699846656405640394575840079131296399;\n', '    uint256 private constant MAGICNUMBER = 6666666666666666666666666666666666666666666666666666666666666666666666666666;\n', '    struct Level {\n', '        uint8[] GaoIdx;\n', '        uint8 passProb;\n', '    }\n', '    Level[] private levels;\n', '    /*** CONSTRUCTOR ***/\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        Level memory _level;\n', '        _level.GaoIdx = new uint8[](5);\n', '        _level.GaoIdx[0] = 2;\n', '        _level.GaoIdx[1] = 3;\n', '        _level.GaoIdx[2] = 5;\n', '        _level.GaoIdx[3] = 6;\n', '        _level.GaoIdx[4] = 7;\n', '        _level.passProb = 55;\n', '        levels.push(_level);\n', '        _level.GaoIdx = new uint8[](4);\n', '        _level.GaoIdx[0] = 9;\n', '        _level.GaoIdx[1] = 10;\n', '        _level.GaoIdx[2] = 12;\n', '        _level.GaoIdx[3] = 13;\n', '        _level.passProb = 65;\n', '        levels.push(_level);\n', '        //\n', '        _level.GaoIdx = new uint8[](11);\n', '        _level.GaoIdx[0] = 16;\n', '        _level.GaoIdx[1] = 18;\n', '        _level.GaoIdx[2] = 19;\n', '        _level.GaoIdx[3] = 20;\n', '        _level.GaoIdx[4] = 21;\n', '        _level.GaoIdx[5] = 23;\n', '        _level.GaoIdx[6] = 24;\n', '        _level.GaoIdx[7] = 25;\n', '        _level.GaoIdx[8] = 26;\n', '        _level.GaoIdx[9] = 28;\n', '        _level.GaoIdx[10] = 29;\n', '        _level.passProb = 0;\n', '        levels.push(_level);\n', '    }\n', '    function MyGaoguans() public view returns (uint8[]){\n', '        return last[msg.sender];\n', '    }\n', '    function Chou(uint8 seChou) public payable {\n', '        require(!isPresaleEnd);\n', '        require(_goodAddress(msg.sender));\n', '        require(seChou > 0 && seChou < 6);\n', '        uint8 owndCount = 0;\n', '        if (last[msg.sender].length != 0){\n', '            owndCount = last[msg.sender][0];\n', '        }\n', '        require(owndCount + seChou <= maxNumbersPerPlayer);\n', '        require(msg.value >= (price * seChou));\n', '\n', '        if (last[msg.sender].length < 2){\n', '            last[msg.sender].push(seChou);\n', '            last[msg.sender].push(seChou);\n', '        }else{\n', '            last[msg.sender][0] += seChou;\n', '            last[msg.sender][1] = seChou;\n', '        }\n', '\n', '        uint256 zhaoling = msg.value - (price * seChou);\n', '        assert(zhaoling <= msg.value); // safe math\n', '        // multi-chou\n', '        for (uint _seChouidx = 0; _seChouidx != seChou; _seChouidx++){\n', '            uint randN = _rand(_seChouidx + MAGICNUMBER); // only generate once for saving gas\n', '            for (uint idx = 0; idx != levels.length; idx++) {\n', '                bool levelPass = true;\n', '                uint8 chosenIdx;\n', '                for (uint jdx = 0; jdx != levels[idx].GaoIdx.length; jdx++) {\n', '                    if (!_Doihave(levels[idx].GaoIdx[(jdx+randN)%levels[idx].GaoIdx.length])){\n', '                        levelPass = false;\n', '                        chosenIdx = levels[idx].GaoIdx[(jdx+randN)%levels[idx].GaoIdx.length];\n', '                        break;\n', '                    }\n', '                }\n', '                if (!levelPass){\n', '                    if (randN % 100 >= levels[idx].passProb) { // this level right, and the last chosenIdx is chosenIdx\n', '                        _own(chosenIdx);\n', '                        break;\n', '                    }\n', '                    randN = randN + MAGICNUMBER;\n', '                }\n', '            }\n', '        }\n', '        msg.sender.transfer(zhaoling);\n', '    }\n', '    \n', '    // private\n', '    function _Doihave(uint8 gaoIdx) private view returns (bool) {\n', '        return doihave[msg.sender][gaoIdx];\n', '    }\n', '    function _own(uint8 gaoIdx) private {\n', '        last[msg.sender].push(gaoIdx);\n', '        doihave[msg.sender][gaoIdx] = true;\n', '    }\n', '    function _rand(uint exNumber) private constant returns (uint){\n', '        uint lastBlockNumber = block.number - 1;\n', '        uint hashVal = uint256(blockhash(lastBlockNumber));\n', '        uint result = uint(keccak256(exNumber, msg.sender, hashVal));\n', '        return result;\n', '    }\n', '    function _goodAddress(address add) private pure returns (bool) {\n', '        return add != address(0);\n', '    }\n', '    function _payout(address _to) private {\n', '        if (_to == address(0)) {\n', '            owner.transfer(address(this).balance);\n', '        } else {\n', '            _to.transfer(address(this).balance);\n', '        }\n', '    }\n', '    // business use only for owner\n', '    modifier ensureOwner() {\n', '        require(\n', '            msg.sender == owner\n', '        );\n', '        _;\n', '    }\n', '    function payout() external ensureOwner {\n', '        _payout(address(0));\n', '    }\n', '    function B() external ensureOwner constant returns (uint256){\n', '        return address(this).balance;\n', '    }\n', '    // presale control\n', '    function End() external ensureOwner {\n', '         require(!isPresaleEnd);\n', '         isPresaleEnd = true;\n', '    }\n', '    function Gaoguans(address player) public ensureOwner view returns (uint8[]){\n', '        return last[player];\n', '    }\n', '}']
['pragma solidity ^0.4.0;\n', '\n', 'contract TycoonPresale {\n', '    event HHH(address bidder, uint amount); // Event\n', '\n', '    address public owner; // Minor management of game\n', '    bool public isPresaleEnd;\n', '    uint256 private constant price = 0.0666 ether;\n', '    uint8 private constant maxNumbersPerPlayer = 10;\n', '    mapping (address => mapping (uint8 => bool)) private doihave;\n', '    mapping (address => uint8[]) private last; // [choumode][idx1][idx2][...]\n', '    uint256 private constant FACTOR = 1157920892373161954235709850086879078532699846656405640394575840079131296399;\n', '    uint256 private constant MAGICNUMBER = 6666666666666666666666666666666666666666666666666666666666666666666666666666;\n', '    struct Level {\n', '        uint8[] GaoIdx;\n', '        uint8 passProb;\n', '    }\n', '    Level[] private levels;\n', '    /*** CONSTRUCTOR ***/\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        Level memory _level;\n', '        _level.GaoIdx = new uint8[](5);\n', '        _level.GaoIdx[0] = 2;\n', '        _level.GaoIdx[1] = 3;\n', '        _level.GaoIdx[2] = 5;\n', '        _level.GaoIdx[3] = 6;\n', '        _level.GaoIdx[4] = 7;\n', '        _level.passProb = 55;\n', '        levels.push(_level);\n', '        _level.GaoIdx = new uint8[](4);\n', '        _level.GaoIdx[0] = 9;\n', '        _level.GaoIdx[1] = 10;\n', '        _level.GaoIdx[2] = 12;\n', '        _level.GaoIdx[3] = 13;\n', '        _level.passProb = 65;\n', '        levels.push(_level);\n', '        //\n', '        _level.GaoIdx = new uint8[](11);\n', '        _level.GaoIdx[0] = 16;\n', '        _level.GaoIdx[1] = 18;\n', '        _level.GaoIdx[2] = 19;\n', '        _level.GaoIdx[3] = 20;\n', '        _level.GaoIdx[4] = 21;\n', '        _level.GaoIdx[5] = 23;\n', '        _level.GaoIdx[6] = 24;\n', '        _level.GaoIdx[7] = 25;\n', '        _level.GaoIdx[8] = 26;\n', '        _level.GaoIdx[9] = 28;\n', '        _level.GaoIdx[10] = 29;\n', '        _level.passProb = 0;\n', '        levels.push(_level);\n', '    }\n', '    function MyGaoguans() public view returns (uint8[]){\n', '        return last[msg.sender];\n', '    }\n', '    function Chou(uint8 seChou) public payable {\n', '        require(!isPresaleEnd);\n', '        require(_goodAddress(msg.sender));\n', '        require(seChou > 0 && seChou < 6);\n', '        uint8 owndCount = 0;\n', '        if (last[msg.sender].length != 0){\n', '            owndCount = last[msg.sender][0];\n', '        }\n', '        require(owndCount + seChou <= maxNumbersPerPlayer);\n', '        require(msg.value >= (price * seChou));\n', '\n', '        if (last[msg.sender].length < 2){\n', '            last[msg.sender].push(seChou);\n', '            last[msg.sender].push(seChou);\n', '        }else{\n', '            last[msg.sender][0] += seChou;\n', '            last[msg.sender][1] = seChou;\n', '        }\n', '\n', '        uint256 zhaoling = msg.value - (price * seChou);\n', '        assert(zhaoling <= msg.value); // safe math\n', '        // multi-chou\n', '        for (uint _seChouidx = 0; _seChouidx != seChou; _seChouidx++){\n', '            uint randN = _rand(_seChouidx + MAGICNUMBER); // only generate once for saving gas\n', '            for (uint idx = 0; idx != levels.length; idx++) {\n', '                bool levelPass = true;\n', '                uint8 chosenIdx;\n', '                for (uint jdx = 0; jdx != levels[idx].GaoIdx.length; jdx++) {\n', '                    if (!_Doihave(levels[idx].GaoIdx[(jdx+randN)%levels[idx].GaoIdx.length])){\n', '                        levelPass = false;\n', '                        chosenIdx = levels[idx].GaoIdx[(jdx+randN)%levels[idx].GaoIdx.length];\n', '                        break;\n', '                    }\n', '                }\n', '                if (!levelPass){\n', '                    if (randN % 100 >= levels[idx].passProb) { // this level right, and the last chosenIdx is chosenIdx\n', '                        _own(chosenIdx);\n', '                        break;\n', '                    }\n', '                    randN = randN + MAGICNUMBER;\n', '                }\n', '            }\n', '        }\n', '        msg.sender.transfer(zhaoling);\n', '    }\n', '    \n', '    // private\n', '    function _Doihave(uint8 gaoIdx) private view returns (bool) {\n', '        return doihave[msg.sender][gaoIdx];\n', '    }\n', '    function _own(uint8 gaoIdx) private {\n', '        last[msg.sender].push(gaoIdx);\n', '        doihave[msg.sender][gaoIdx] = true;\n', '    }\n', '    function _rand(uint exNumber) private constant returns (uint){\n', '        uint lastBlockNumber = block.number - 1;\n', '        uint hashVal = uint256(blockhash(lastBlockNumber));\n', '        uint result = uint(keccak256(exNumber, msg.sender, hashVal));\n', '        return result;\n', '    }\n', '    function _goodAddress(address add) private pure returns (bool) {\n', '        return add != address(0);\n', '    }\n', '    function _payout(address _to) private {\n', '        if (_to == address(0)) {\n', '            owner.transfer(address(this).balance);\n', '        } else {\n', '            _to.transfer(address(this).balance);\n', '        }\n', '    }\n', '    // business use only for owner\n', '    modifier ensureOwner() {\n', '        require(\n', '            msg.sender == owner\n', '        );\n', '        _;\n', '    }\n', '    function payout() external ensureOwner {\n', '        _payout(address(0));\n', '    }\n', '    function B() external ensureOwner constant returns (uint256){\n', '        return address(this).balance;\n', '    }\n', '    // presale control\n', '    function End() external ensureOwner {\n', '         require(!isPresaleEnd);\n', '         isPresaleEnd = true;\n', '    }\n', '    function Gaoguans(address player) public ensureOwner view returns (uint8[]){\n', '        return last[player];\n', '    }\n', '}']
