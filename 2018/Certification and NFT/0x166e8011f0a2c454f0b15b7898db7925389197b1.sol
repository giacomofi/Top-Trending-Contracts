['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '//-------------------------------------------------------------------------------------------------\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '}\n', '\n', '//-------------------------------------------------------------------------------------------------\n', '\n', 'contract AifiAsset is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum AssetState { Pending, Active, Expired }\n', '  string public assetType;\n', '  uint256 public totalSupply;\n', '  AssetState public state;\n', '\n', '  constructor() public {\n', '    state = AssetState.Pending;\n', '  }\n', '\n', '  function setState(AssetState _state) public onlyOwner {\n', '    state = _state;\n', '    emit SetStateEvent(_state);\n', '  }\n', '\n', '  event SetStateEvent(AssetState indexed state);\n', '}\n', '\n', '//-------------------------------------------------------------------------------------------------\n', '\n', 'contract InitAifiAsset is AifiAsset {\n', '  string public assetType = "DEBT";\n', '  uint public initialSupply = 1000 * 10 ** 18;\n', '  string[] public subjectMatters;\n', '  \n', '  constructor() public {\n', '    totalSupply = initialSupply;\n', '  }\n', '\n', '  function addSubjectMatter(string _subjectMatter) public onlyOwner {\n', '    subjectMatters.push(_subjectMatter);\n', '  }\n', '\n', '  function updateSubjectMatter(uint _index, string _subjectMatter) public onlyOwner {\n', '    require(_index <= subjectMatters.length);\n', '    subjectMatters[_index] = _subjectMatter;\n', '  }\n', '\n', '  function getSubjectMattersSize() public view returns(uint) {\n', '    return subjectMatters.length;\n', '  }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '//-------------------------------------------------------------------------------------------------\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '}\n', '\n', '//-------------------------------------------------------------------------------------------------\n', '\n', 'contract AifiAsset is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum AssetState { Pending, Active, Expired }\n', '  string public assetType;\n', '  uint256 public totalSupply;\n', '  AssetState public state;\n', '\n', '  constructor() public {\n', '    state = AssetState.Pending;\n', '  }\n', '\n', '  function setState(AssetState _state) public onlyOwner {\n', '    state = _state;\n', '    emit SetStateEvent(_state);\n', '  }\n', '\n', '  event SetStateEvent(AssetState indexed state);\n', '}\n', '\n', '//-------------------------------------------------------------------------------------------------\n', '\n', 'contract InitAifiAsset is AifiAsset {\n', '  string public assetType = "DEBT";\n', '  uint public initialSupply = 1000 * 10 ** 18;\n', '  string[] public subjectMatters;\n', '  \n', '  constructor() public {\n', '    totalSupply = initialSupply;\n', '  }\n', '\n', '  function addSubjectMatter(string _subjectMatter) public onlyOwner {\n', '    subjectMatters.push(_subjectMatter);\n', '  }\n', '\n', '  function updateSubjectMatter(uint _index, string _subjectMatter) public onlyOwner {\n', '    require(_index <= subjectMatters.length);\n', '    subjectMatters[_index] = _subjectMatter;\n', '  }\n', '\n', '  function getSubjectMattersSize() public view returns(uint) {\n', '    return subjectMatters.length;\n', '  }\n', '}']
