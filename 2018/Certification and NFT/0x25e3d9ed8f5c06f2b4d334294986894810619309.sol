['pragma solidity 0.4.24;\n', ' \n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Token\n', ' * @dev Implemented token interface\n', ' */\n', 'contract Token {\n', '    function transferSoldToken(address _contractAddr, address _to, uint256 _value) public returns(bool);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function totalSupply() public view returns (uint256);\n', '}\n', 'contract WhiteList {\n', '\tfunction register(address _address) public;\n', '\tfunction unregister(address _address) public;\n', '\tfunction isRegistered(address _address) public view returns(bool);\t\n', '}\n', '/**\n', ' * @title BtradeIcoSale\n', ' * @dev Smart contract for ico sale\n', ' */\n', 'contract PriIcoSale2 {\n', '    using SafeMath for uint256;  // use SafeMath\n', '    \n', '    address public owner;              // BtradeIcoSale creator\n', '    address public beneficiary;        // After ico end, send to address\n', '    uint public fundingEthGoal;        // Goal funding ethereum amount\n', '    uint public raisedEthAmt;          // Funded ethereum amout\n', '    uint public totalSoldTokenCount;   // Sold total token count\n', '    uint public pricePerEther;         // Percentage of token per ethereum\n', '    \n', '    Token public tokenReward;          // ERC20 based token address\n', '\tWhiteList public whiteListMge;     // Whitelist manage contract address\n', '\t\n', '    bool enableWhiteList = false;      // check whitelist flag\n', '    bool public icoProceeding = false; // Whether ico is in progress\n', '    \n', '    mapping(address => uint256) public funderEthAmt;\n', '    \n', '    event ResistWhiteList(address funder, bool isRegist); // white list resist event\n', '    event UnregisteWhiteList(address funder, bool isRegist); // white list remove event\n', '    event FundTransfer(address backer, uint amount, bool isContribution); // Investment Event\n', '    event StartICO(address owner, bool isStart);\n', '\tevent CloseICO(address recipient, uint totalAmountRaised); // ico close event\n', '    event ReturnExcessAmount(address funder, uint amount);\n', '    \n', '    /**\n', '     * Constructor function\n', '     * Setup the owner\n', '     */\n', '    function PriIcoSale2(address _sendAddress, uint _goalEthers, uint _dividendRate, address _tokenAddress, address _whiteListAddress) public {\n', '        require(_sendAddress != address(0));\n', '        require(_tokenAddress != address(0));\n', '        require(_whiteListAddress != address(0));\n', '        \n', '        owner = msg.sender; // set owner\n', '        beneficiary = _sendAddress; // set beneficiary \n', '        fundingEthGoal = _goalEthers * 1 ether; // set goal ethereu\n', '        pricePerEther = _dividendRate; // set price per ether\n', '        \n', '        tokenReward = Token(_tokenAddress); // set token address\n', '        whiteListMge = WhiteList(_whiteListAddress); // set whitelist address\n', '        \n', '    }\n', '    /**\n', '     * Start ICO crowdsale.\n', '     */\n', '    function startIco() public {\n', '        require(msg.sender == owner);\n', '        require(!icoProceeding);\n', '        icoProceeding = true;\n', '\t\temit StartICO(msg.sender, true);\n', '    }\n', '    /**\n', '     * Close ICO crowdsale.\n', '     */\n', '    function endIco() public {\n', '        require(msg.sender == owner);\n', '        require(icoProceeding);\n', '        icoProceeding = false;\n', '        emit CloseICO(beneficiary, raisedEthAmt);\n', '    }\n', '    /**\n', '     * Check whiteList.\n', '     */\n', '    function setEnableWhiteList(bool _flag) public {\n', '        require(msg.sender == owner);\n', '        require(enableWhiteList != _flag);\n', '        enableWhiteList = _flag;\n', '    }\n', '    /**\n', '     * Resist White list for to fund\n', '     * @param _funderAddress the address of the funder\n', '     */\n', '    function resistWhiteList(address _funderAddress) public {\n', '        require(msg.sender == owner);\n', '        require(_funderAddress != address(0));\t\t\n', '\t\trequire(!whiteListMge.isRegistered(_funderAddress));\n', '\t\t\n', '\t\twhiteListMge.register(_funderAddress);\n', '        emit ResistWhiteList(_funderAddress, true);\n', '    }\n', '    function removeWhiteList(address _funderAddress) public {\n', '        require(msg.sender == owner);\n', '        require(_funderAddress != address(0));\n', '        require(whiteListMge.isRegistered(_funderAddress));\n', '        \n', '        whiteListMge.unregister(_funderAddress);\n', '        emit UnregisteWhiteList(_funderAddress, false);\n', '    }\n', '    /**\n', '     * Fallback function\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function () public payable {\n', '        require(icoProceeding);\n', '        require(raisedEthAmt < fundingEthGoal);\n', '        require(msg.value >= 0.1 ether); // Minimum deposit amount\n', '        if (enableWhiteList) {\n', '            require(whiteListMge.isRegistered(msg.sender));\n', '        }\n', '        \n', '        uint amount = msg.value; // Deposit amount\n', '        uint remainToGoal = fundingEthGoal - raisedEthAmt;\n', '        uint returnAmt = 0; // Amount to return when the goal is exceeded\n', '        if (remainToGoal < amount) {\n', '            returnAmt = msg.value.sub(remainToGoal);\n', '            amount = remainToGoal;\n', '        }\n', '        \n', '        // Token quantity calculation and token transfer, if excess amount is exceeded, it is sent to investor\n', '        uint tokenCount = amount.mul(pricePerEther);\n', '        if (tokenReward.transferSoldToken(address(this), msg.sender, tokenCount)) {\n', '            raisedEthAmt = raisedEthAmt.add(amount);\n', '            totalSoldTokenCount = totalSoldTokenCount.add(tokenCount);\n', '            funderEthAmt[msg.sender] = funderEthAmt[msg.sender].add(amount);\n', '            emit FundTransfer(msg.sender, amount, true);\n', '            \n', '            // The amount above the target amount is returned.\n', '            if (returnAmt > 0) {\n', '                msg.sender.transfer(returnAmt);\n', '                icoProceeding = false; // ICO close\n', '                emit ReturnExcessAmount(msg.sender, returnAmt);\n', '            }\n', '        }\n', '    }\n', '    /**\n', '     * Check if goal was reached\n', '     *\n', '     * Checks if the goal or time limit has been reached and ends the campaign\n', '     */\n', '    function checkGoalReached() public {\n', '        require(msg.sender == owner);\n', '        if (raisedEthAmt >= fundingEthGoal){\n', '            safeWithdrawal();\n', '        }\n', '        icoProceeding = false;\n', '    }\n', '    /**\n', '     * Withdraw the funds\n', '     */\n', '    function safeWithdrawal() public {\n', '        require(msg.sender == owner);\n', '        beneficiary.transfer(address(this).balance);\n', '        emit FundTransfer(beneficiary, address(this).balance, false);\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', ' \n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Token\n', ' * @dev Implemented token interface\n', ' */\n', 'contract Token {\n', '    function transferSoldToken(address _contractAddr, address _to, uint256 _value) public returns(bool);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function totalSupply() public view returns (uint256);\n', '}\n', 'contract WhiteList {\n', '\tfunction register(address _address) public;\n', '\tfunction unregister(address _address) public;\n', '\tfunction isRegistered(address _address) public view returns(bool);\t\n', '}\n', '/**\n', ' * @title BtradeIcoSale\n', ' * @dev Smart contract for ico sale\n', ' */\n', 'contract PriIcoSale2 {\n', '    using SafeMath for uint256;  // use SafeMath\n', '    \n', '    address public owner;              // BtradeIcoSale creator\n', '    address public beneficiary;        // After ico end, send to address\n', '    uint public fundingEthGoal;        // Goal funding ethereum amount\n', '    uint public raisedEthAmt;          // Funded ethereum amout\n', '    uint public totalSoldTokenCount;   // Sold total token count\n', '    uint public pricePerEther;         // Percentage of token per ethereum\n', '    \n', '    Token public tokenReward;          // ERC20 based token address\n', '\tWhiteList public whiteListMge;     // Whitelist manage contract address\n', '\t\n', '    bool enableWhiteList = false;      // check whitelist flag\n', '    bool public icoProceeding = false; // Whether ico is in progress\n', '    \n', '    mapping(address => uint256) public funderEthAmt;\n', '    \n', '    event ResistWhiteList(address funder, bool isRegist); // white list resist event\n', '    event UnregisteWhiteList(address funder, bool isRegist); // white list remove event\n', '    event FundTransfer(address backer, uint amount, bool isContribution); // Investment Event\n', '    event StartICO(address owner, bool isStart);\n', '\tevent CloseICO(address recipient, uint totalAmountRaised); // ico close event\n', '    event ReturnExcessAmount(address funder, uint amount);\n', '    \n', '    /**\n', '     * Constructor function\n', '     * Setup the owner\n', '     */\n', '    function PriIcoSale2(address _sendAddress, uint _goalEthers, uint _dividendRate, address _tokenAddress, address _whiteListAddress) public {\n', '        require(_sendAddress != address(0));\n', '        require(_tokenAddress != address(0));\n', '        require(_whiteListAddress != address(0));\n', '        \n', '        owner = msg.sender; // set owner\n', '        beneficiary = _sendAddress; // set beneficiary \n', '        fundingEthGoal = _goalEthers * 1 ether; // set goal ethereu\n', '        pricePerEther = _dividendRate; // set price per ether\n', '        \n', '        tokenReward = Token(_tokenAddress); // set token address\n', '        whiteListMge = WhiteList(_whiteListAddress); // set whitelist address\n', '        \n', '    }\n', '    /**\n', '     * Start ICO crowdsale.\n', '     */\n', '    function startIco() public {\n', '        require(msg.sender == owner);\n', '        require(!icoProceeding);\n', '        icoProceeding = true;\n', '\t\temit StartICO(msg.sender, true);\n', '    }\n', '    /**\n', '     * Close ICO crowdsale.\n', '     */\n', '    function endIco() public {\n', '        require(msg.sender == owner);\n', '        require(icoProceeding);\n', '        icoProceeding = false;\n', '        emit CloseICO(beneficiary, raisedEthAmt);\n', '    }\n', '    /**\n', '     * Check whiteList.\n', '     */\n', '    function setEnableWhiteList(bool _flag) public {\n', '        require(msg.sender == owner);\n', '        require(enableWhiteList != _flag);\n', '        enableWhiteList = _flag;\n', '    }\n', '    /**\n', '     * Resist White list for to fund\n', '     * @param _funderAddress the address of the funder\n', '     */\n', '    function resistWhiteList(address _funderAddress) public {\n', '        require(msg.sender == owner);\n', '        require(_funderAddress != address(0));\t\t\n', '\t\trequire(!whiteListMge.isRegistered(_funderAddress));\n', '\t\t\n', '\t\twhiteListMge.register(_funderAddress);\n', '        emit ResistWhiteList(_funderAddress, true);\n', '    }\n', '    function removeWhiteList(address _funderAddress) public {\n', '        require(msg.sender == owner);\n', '        require(_funderAddress != address(0));\n', '        require(whiteListMge.isRegistered(_funderAddress));\n', '        \n', '        whiteListMge.unregister(_funderAddress);\n', '        emit UnregisteWhiteList(_funderAddress, false);\n', '    }\n', '    /**\n', '     * Fallback function\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function () public payable {\n', '        require(icoProceeding);\n', '        require(raisedEthAmt < fundingEthGoal);\n', '        require(msg.value >= 0.1 ether); // Minimum deposit amount\n', '        if (enableWhiteList) {\n', '            require(whiteListMge.isRegistered(msg.sender));\n', '        }\n', '        \n', '        uint amount = msg.value; // Deposit amount\n', '        uint remainToGoal = fundingEthGoal - raisedEthAmt;\n', '        uint returnAmt = 0; // Amount to return when the goal is exceeded\n', '        if (remainToGoal < amount) {\n', '            returnAmt = msg.value.sub(remainToGoal);\n', '            amount = remainToGoal;\n', '        }\n', '        \n', '        // Token quantity calculation and token transfer, if excess amount is exceeded, it is sent to investor\n', '        uint tokenCount = amount.mul(pricePerEther);\n', '        if (tokenReward.transferSoldToken(address(this), msg.sender, tokenCount)) {\n', '            raisedEthAmt = raisedEthAmt.add(amount);\n', '            totalSoldTokenCount = totalSoldTokenCount.add(tokenCount);\n', '            funderEthAmt[msg.sender] = funderEthAmt[msg.sender].add(amount);\n', '            emit FundTransfer(msg.sender, amount, true);\n', '            \n', '            // The amount above the target amount is returned.\n', '            if (returnAmt > 0) {\n', '                msg.sender.transfer(returnAmt);\n', '                icoProceeding = false; // ICO close\n', '                emit ReturnExcessAmount(msg.sender, returnAmt);\n', '            }\n', '        }\n', '    }\n', '    /**\n', '     * Check if goal was reached\n', '     *\n', '     * Checks if the goal or time limit has been reached and ends the campaign\n', '     */\n', '    function checkGoalReached() public {\n', '        require(msg.sender == owner);\n', '        if (raisedEthAmt >= fundingEthGoal){\n', '            safeWithdrawal();\n', '        }\n', '        icoProceeding = false;\n', '    }\n', '    /**\n', '     * Withdraw the funds\n', '     */\n', '    function safeWithdrawal() public {\n', '        require(msg.sender == owner);\n', '        beneficiary.transfer(address(this).balance);\n', '        emit FundTransfer(beneficiary, address(this).balance, false);\n', '    }\n', '}']
