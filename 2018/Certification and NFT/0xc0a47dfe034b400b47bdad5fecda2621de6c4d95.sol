['contract Exchange():\n', '    def setup(token_addr: address): modifying\n', '\n', 'NewExchange: event({token: indexed(address), exchange: indexed(address)})\n', '\n', 'exchangeTemplate: public(address)\n', 'tokenCount: public(uint256)\n', 'token_to_exchange: address[address]\n', 'exchange_to_token: address[address]\n', 'id_to_token: address[uint256]\n', '\n', '@public\n', 'def initializeFactory(template: address):\n', '    assert self.exchangeTemplate == ZERO_ADDRESS\n', '    assert template != ZERO_ADDRESS\n', '    self.exchangeTemplate = template\n', '\n', '@public\n', 'def createExchange(token: address) -> address:\n', '    assert token != ZERO_ADDRESS\n', '    assert self.exchangeTemplate != ZERO_ADDRESS\n', '    assert self.token_to_exchange[token] == ZERO_ADDRESS\n', '    exchange: address = create_with_code_of(self.exchangeTemplate)\n', '    Exchange(exchange).setup(token)\n', '    self.token_to_exchange[token] = exchange\n', '    self.exchange_to_token[exchange] = token\n', '    token_id: uint256 = self.tokenCount + 1\n', '    self.tokenCount = token_id\n', '    self.id_to_token[token_id] = token\n', '    log.NewExchange(token, exchange)\n', '    return exchange\n', '\n', '@public\n', '@constant\n', 'def getExchange(token: address) -> address:\n', '    return self.token_to_exchange[token]\n', '\n', '@public\n', '@constant\n', 'def getToken(exchange: address) -> address:\n', '    return self.exchange_to_token[exchange]\n', '\n', '@public\n', '@constant\n', 'def getTokenWithId(token_id: uint256) -> address:\n', '    return self.id_to_token[token_id]']