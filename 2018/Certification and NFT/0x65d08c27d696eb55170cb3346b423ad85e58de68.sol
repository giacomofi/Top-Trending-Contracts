['pragma solidity ^0.4.19;\n', '\n', '/* Adapted from strings.sol created by Nick Johnson <<span class="__cf_email__" data-cfemail="93f2e1f2f0fbfdfaf7d3fdfce7f7fce7bdfdf6e7">[email&#160;protected]</span>>\n', ' * Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\n', ' * @title String & slice utility library for Solidity contracts.\n', ' * @author Nick Johnson <<span class="__cf_email__" data-cfemail="b2d3c0d3d1dadcdbd6f2dcddc6d6ddc69cdcd7c6">[email&#160;protected]</span>>\n', ' */\n', 'library strings {\n', '    \n', '    struct slice {\n', '        uint _len;\n', '        uint _ptr;\n', '    }\n', '\n', '    /*\n', '     * @dev Returns a slice containing the entire string.\n', '     * @param self The string to make a slice from.\n', '     * @return A newly allocated slice containing the entire string.\n', '     */\n', '    function toSlice(string self) internal pure returns (slice) {\n', '        uint ptr;\n', '        assembly {\n', '            ptr := add(self, 0x20)\n', '        }\n', '        return slice(bytes(self).length, ptr);\n', '    }\n', '\n', '    function memcpy(uint dest, uint src, uint len) private pure {\n', '        // Copy word-length chunks while possible\n', '        for(; len >= 32; len -= 32) {\n', '            assembly {\n', '                mstore(dest, mload(src))\n', '            }\n', '            dest += 32;\n', '            src += 32;\n', '        }\n', '\n', '        // Copy remaining bytes\n', '        uint mask = 256 ** (32 - len) - 1;\n', '        assembly {\n', '            let srcpart := and(mload(src), not(mask))\n', '            let destpart := and(mload(dest), mask)\n', '            mstore(dest, or(destpart, srcpart))\n', '        }\n', '    }\n', '\n', '    \n', '    function concat(slice self, slice other) internal returns (string) {\n', '        var ret = new string(self._len + other._len);\n', '        uint retptr;\n', '        assembly { retptr := add(ret, 32) }\n', '        memcpy(retptr, self._ptr, self._len);\n', '        memcpy(retptr + self._len, other._ptr, other._len);\n', '        return ret;\n', '    }\n', '\n', '    /*\n', '     * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.\n', '     * @param self The slice to search.\n', '     * @param needle The text to search for in `self`.\n', '     * @return The number of occurrences of `needle` found in `self`.\n', '     */\n', '    function count(slice self, slice needle) internal returns (uint cnt) {\n', '        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;\n', '        while (ptr <= self._ptr + self._len) {\n', '            cnt++;\n', '            ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;\n', '        }\n', '    }\n', '\n', '    // Returns the memory address of the first byte of the first occurrence of\n', '    // `needle` in `self`, or the first byte after `self` if not found.\n', '    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private returns (uint) {\n', '        uint ptr;\n', '        uint idx;\n', '\n', '        if (needlelen <= selflen) {\n', '            if (needlelen <= 32) {\n', '                // Optimized assembly for 68 gas per byte on short strings\n', '                assembly {\n', '                    let mask := not(sub(exp(2, mul(8, sub(32, needlelen))), 1))\n', '                    let needledata := and(mload(needleptr), mask)\n', '                    let end := add(selfptr, sub(selflen, needlelen))\n', '                    ptr := selfptr\n', '                    loop:\n', '                    jumpi(exit, eq(and(mload(ptr), mask), needledata))\n', '                    ptr := add(ptr, 1)\n', '                    jumpi(loop, lt(sub(ptr, 1), end))\n', '                    ptr := add(selfptr, selflen)\n', '                    exit:\n', '                }\n', '                return ptr;\n', '            } else {\n', '                // For long needles, use hashing\n', '                bytes32 hash;\n', '                assembly { hash := sha3(needleptr, needlelen) }\n', '                ptr = selfptr;\n', '                for (idx = 0; idx <= selflen - needlelen; idx++) {\n', '                    bytes32 testHash;\n', '                    assembly { testHash := sha3(ptr, needlelen) }\n', '                    if (hash == testHash)\n', '                        return ptr;\n', '                    ptr += 1;\n', '                }\n', '            }\n', '        }\n', '        return selfptr + selflen;\n', '    }\n', '\n', '    /*\n', '     * @dev Splits the slice, setting `self` to everything after the first\n', '     *      occurrence of `needle`, and `token` to everything before it. If\n', '     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n', '     *      and `token` is set to the entirety of `self`.\n', '     * @param self The slice to split.\n', '     * @param needle The text to search for in `self`.\n', '     * @param token An output parameter to which the first token is written.\n', '     * @return `token`.\n', '     */\n', '    function split(slice self, slice needle, slice token) internal returns (slice) {\n', '        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\n', '        token._ptr = self._ptr;\n', '        token._len = ptr - self._ptr;\n', '        if (ptr == self._ptr + self._len) {\n', '            // Not found\n', '            self._len = 0;\n', '        } else {\n', '            self._len -= token._len + needle._len;\n', '            self._ptr = ptr + needle._len;\n', '        }\n', '        return token;\n', '    }\n', '\n', '     /*\n', '     * @dev Splits the slice, setting `self` to everything after the first\n', '     *      occurrence of `needle`, and returning everything before it. If\n', '     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n', '     *      and the entirety of `self` is returned.\n', '     * @param self The slice to split.\n', '     * @param needle The text to search for in `self`.\n', '     * @return The part of `self` up to the first occurrence of `delim`.\n', '     */\n', '    function split(slice self, slice needle) internal returns (slice token) {\n', '        split(self, needle, token);\n', '    }\n', '\n', '    /*\n', '     * @dev Copies a slice to a new string.\n', '     * @param self The slice to copy.\n', '     * @return A newly allocated string containing the slice&#39;s text.\n', '     */\n', '    function toString(slice self) internal pure returns (string) {\n', '        var ret = new string(self._len);\n', '        uint retptr;\n', '        assembly { retptr := add(ret, 32) }\n', '\n', '        memcpy(retptr, self._ptr, self._len);\n', '        return ret;\n', '    }\n', '\n', '}\n', '\n', '/* Helper String Functions for Game Manager Contract\n', ' * @title String Healpers\n', ' * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\n', ' */\n', 'contract StringHelpers {\n', '    using strings for *;\n', '    \n', '    function stringToBytes32(string memory source) internal returns (bytes32 result) {\n', '        bytes memory tempEmptyStringTest = bytes(source);\n', '        if (tempEmptyStringTest.length == 0) {\n', '            return 0x0;\n', '        }\n', '    \n', '        assembly {\n', '            result := mload(add(source, 32))\n', '        }\n', '    }\n', '\n', '    function bytes32ToString(bytes32 x) constant internal returns (string) {\n', '        bytes memory bytesString = new bytes(32);\n', '        uint charCount = 0;\n', '        for (uint j = 0; j < 32; j++) {\n', '            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\n', '            if (char != 0) {\n', '                bytesString[charCount] = char;\n', '                charCount++;\n', '            }\n', '        }\n', '        bytes memory bytesStringTrimmed = new bytes(charCount);\n', '        for (j = 0; j < charCount; j++) {\n', '            bytesStringTrimmed[j] = bytesString[j];\n', '        }\n', '        return string(bytesStringTrimmed);\n', '    }\n', '}\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', '/// @author Dieter Shirley <<span class="__cf_email__" data-cfemail="afcbcadbcaefced7c6c0c2d5cac181ccc0">[email&#160;protected]</span>> (https://github.com/dete)\n', 'contract ERC721 {\n', '  // Required methods\n', '  function balanceOf(address _owner) public view returns (uint256 balance);\n', '  function ownerOf(uint256 _assetId) public view returns (address owner);\n', '  function approve(address _to, uint256 _assetId) public;\n', '  function transfer(address _to, uint256 _assetId) public;\n', '  function transferFrom(address _from, address _to, uint256 _assetId) public;\n', '  function implementsERC721() public pure returns (bool);\n', '  function takeOwnership(uint256 _assetId) public;\n', '  function totalSupply() public view returns (uint256 total);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 tokenId);\n', '  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\n', '\n', '  // Optional\n', '  // function name() public view returns (string name);\n', '  // function symbol() public view returns (string symbol);\n', '  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\n', '  // function tokenMetadata(uint256 _assetId) public view returns (string infoUrl);\n', '\n', '  // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\n', '  function supportsInterface(bytes4 _interfaceID) external view returns (bool);\n', '}\n', '\n', '/* Controls game play state and access rights for game functions\n', ' * @title Operational Control\n', ' * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\n', ' * Inspired and adapted from contract created by OpenZeppelin\n', ' * Ref: https://github.com/OpenZeppelin/zeppelin-solidity/\n', ' */\n', 'contract OperationalControl {\n', '    // Facilitates access & control for the game.\n', '    // Roles:\n', '    //  -The Game Managers (Primary/Secondary): Has universal control of all game elements (No ability to withdraw)\n', '    //  -The Banker: The Bank can withdraw funds and adjust fees / prices.\n', '\n', '    /// @dev Emited when contract is upgraded\n', '    event ContractUpgrade(address newContract);\n', '\n', '    // The addresses of the accounts (or contracts) that can execute actions within each roles.\n', '    address public gameManagerPrimary;\n', '    address public gameManagerSecondary;\n', '    address public bankManager;\n', '\n', '    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n', '    bool public paused = false;\n', '\n', '    // @dev Keeps track whether the contract erroredOut. When that is true, most actions are blocked & refund can be claimed\n', '    bool public error = false;\n', '\n', '    /// @dev Operation modifiers for limiting access\n', '    modifier onlyGameManager() {\n', '        require(msg.sender == gameManagerPrimary || msg.sender == gameManagerSecondary);\n', '        _;\n', '    }\n', '\n', '    modifier onlyBanker() {\n', '        require(msg.sender == bankManager);\n', '        _;\n', '    }\n', '\n', '    modifier anyOperator() {\n', '        require(\n', '            msg.sender == gameManagerPrimary ||\n', '            msg.sender == gameManagerSecondary ||\n', '            msg.sender == bankManager\n', '        );\n', '        _;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the GM.\n', '    function setPrimaryGameManager(address _newGM) external onlyGameManager {\n', '        require(_newGM != address(0));\n', '\n', '        gameManagerPrimary = _newGM;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the GM.\n', '    function setSecondaryGameManager(address _newGM) external onlyGameManager {\n', '        require(_newGM != address(0));\n', '\n', '        gameManagerSecondary = _newGM;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the Banker.\n', '    function setBanker(address _newBK) external onlyGameManager {\n', '        require(_newBK != address(0));\n', '\n', '        bankManager = _newBK;\n', '    }\n', '\n', '    /*** Pausable functionality adapted from OpenZeppelin ***/\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS NOT paused\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS paused\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract has Error\n', '    modifier whenError {\n', '        require(error);\n', '        _;\n', '    }\n', '\n', '    /// @dev Called by any Operator role to pause the contract.\n', '    /// Used only if a bug or exploit is discovered (Here to limit losses / damage)\n', '    function pause() external onlyGameManager whenNotPaused {\n', '        paused = true;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the Game Master\n', '    /// @notice This is public rather than external so it can be called by derived contracts. \n', '    function unpause() public onlyGameManager whenPaused {\n', '        // can&#39;t unpause if contract was upgraded\n', '        paused = false;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the Game Master\n', '    /// @notice This is public rather than external so it can be called by derived contracts. \n', '    function hasError() public onlyGameManager whenPaused {\n', '        error = true;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the Game Master\n', '    /// @notice This is public rather than external so it can be called by derived contracts. \n', '    function noError() public onlyGameManager whenPaused {\n', '        error = false;\n', '    }\n', '}\n', '\n', 'contract CSCCollectibleBase is ERC721, OperationalControl, StringHelpers {\n', '\n', '  /*** EVENTS ***/\n', '  /// @dev The Created event is fired whenever a new collectible comes into existence.\n', '  event CollectibleCreated(address owner, uint256 collectibleId, bytes32 collectibleName, bool isRedeemed);\n', '  event Transfer(address from, address to, uint256 shipId);\n', '\n', '  /*** CONSTANTS ***/\n', '\n', '  /// @notice Name and symbol of the non fungible token, as defined in ERC721.\n', '  string public constant NAME = "CSCRareCollectiblePreSale";\n', '  string public constant SYMBOL = "CSCR";\n', '  bytes4 constant InterfaceSignature_ERC165 = bytes4(keccak256(&#39;supportsInterface(bytes4)&#39;));\n', '  bytes4 constant InterfaceSignature_ERC721 =\n', '        bytes4(keccak256(&#39;name()&#39;)) ^\n', '        bytes4(keccak256(&#39;symbol()&#39;)) ^\n', '        bytes4(keccak256(&#39;totalSupply()&#39;)) ^\n', '        bytes4(keccak256(&#39;balanceOf(address)&#39;)) ^\n', '        bytes4(keccak256(&#39;ownerOf(uint256)&#39;)) ^\n', '        bytes4(keccak256(&#39;approve(address,uint256)&#39;)) ^\n', '        bytes4(keccak256(&#39;transfer(address,uint256)&#39;)) ^\n', '        bytes4(keccak256(&#39;transferFrom(address,address,uint256)&#39;)) ^\n', '        bytes4(keccak256(&#39;tokensOfOwner(address)&#39;)) ^\n', '        bytes4(keccak256(&#39;tokenMetadata(uint256,string)&#39;));\n', '\n', '  /// @dev CSC Pre Sale Struct, having details of the ship\n', '  struct RarePreSaleItem {\n', '\n', '    /// @dev name of the collectible stored in bytes\n', '    bytes32 collectibleName;\n', '\n', '    /// @dev Timestamp when bought\n', '    uint256 boughtTimestamp;\n', '\n', '    // @dev owner address\n', '    address owner;\n', '\n', '    // @dev redeeme flag (to help whether it got redeemed or not)\n', '    bool isRedeemed;\n', '  }\n', '\n', '  // @dev array of RarePreSaleItem type holding information on the Ships\n', '  RarePreSaleItem[] allPreSaleItems;\n', '\n', '  // @dev mapping which holds all the possible addresses which are allowed to interact with the contract\n', '  mapping (address => bool) approvedAddressList;\n', '\n', '  // @dev mapping holds the preSaleItem -> owner details\n', '  mapping (uint256 => address) public preSaleItemIndexToOwner;\n', '\n', '  // @dev A mapping from owner address to count of tokens that address owns.\n', '  //  Used internally inside balanceOf() to resolve ownership count.\n', '  mapping (address => uint256) private ownershipTokenCount;\n', '\n', '  /// @dev A mapping from preSaleItem to an address that has been approved to call\n', '  ///  transferFrom(). Each Ship can only have one approved address for transfer\n', '  ///  at any time. A zero value means no approval is outstanding.\n', '  mapping (uint256 => address) public preSaleItemIndexToApproved;\n', '\n', '  /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\n', '  ///  Returns true for any standardized interfaces implemented by this contract. We implement\n', '  ///  ERC-165 (obviously!) and ERC-721.\n', '  function supportsInterface(bytes4 _interfaceID) external view returns (bool)\n', '  {\n', '      // DEBUG ONLY\n', '      //require((InterfaceSignature_ERC165 == 0x01ffc9a7) && (InterfaceSignature_ERC721 == 0x9a20483d));\n', '      return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\n', '  }\n', '\n', '  /*** PUBLIC FUNCTIONS ***/\n', '  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\n', '  /// @param _to The address to be granted transfer approval. Pass address(0) to\n', '  ///  clear all approvals.\n', '  /// @param _assetId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function approve(address _to, uint256 _assetId) public {\n', '    // Caller must own token.\n', '    require(_owns(address(this), _assetId));\n', '    preSaleItemIndexToApproved[_assetId] = _to;\n', '\n', '    Approval(msg.sender, _to, _assetId);\n', '  }\n', '\n', '  /// For querying balance of a particular account\n', '  /// @param _owner The address for balance query\n', '  /// @dev Required for ERC-721 compliance.\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return ownershipTokenCount[_owner];\n', '  }\n', '\n', '  function implementsERC721() public pure returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  /// For querying owner of token\n', '  /// @param _assetId The tokenID for owner inquiry\n', '  /// @dev Required for ERC-721 compliance.\n', '  function ownerOf(uint256 _assetId) public view returns (address owner) {\n', '    owner = preSaleItemIndexToOwner[_assetId];\n', '    require(owner != address(0));\n', '  }\n', '\n', '  /// @dev Required for ERC-721 compliance.\n', '  function symbol() public pure returns (string) {\n', '    return SYMBOL;\n', '  }\n', '\n', '  /// @notice Allow pre-approved user to take ownership of a token\n', '  /// @param _assetId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function takeOwnership(uint256 _assetId) public {\n', '    address newOwner = msg.sender;\n', '    address oldOwner = preSaleItemIndexToOwner[_assetId];\n', '\n', '    // Safety check to prevent against an unexpected 0x0 default.\n', '    require(_addressNotNull(newOwner));\n', '\n', '    // Making sure transfer is approved\n', '    require(_approved(newOwner, _assetId));\n', '\n', '    _transfer(oldOwner, newOwner, _assetId);\n', '  }\n', '\n', '  /// @param _owner The owner whose ships tokens we are interested in.\n', '  /// @dev This method MUST NEVER be called by smart contract code. First, it&#39;s fairly\n', '  ///  expensive (it walks the entire CSCShips array looking for emojis belonging to owner),\n', '  ///  but it also returns a dynamic array, which is only supported for web3 calls, and\n', '  ///  not contract-to-contract calls.\n', '  function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\n', '    uint256 tokenCount = balanceOf(_owner);\n', '\n', '    if (tokenCount == 0) {\n', '        // Return an empty array\n', '        return new uint256[](0);\n', '    } else {\n', '        uint256[] memory result = new uint256[](tokenCount);\n', '        uint256 totalShips = totalSupply() + 1;\n', '        uint256 resultIndex = 0;\n', '\n', '        // We count on the fact that all CSC Ship Collectible have IDs starting at 0 and increasing\n', '        // sequentially up to the total count.\n', '        uint256 _assetId;\n', '\n', '        for (_assetId = 0; _assetId < totalShips; _assetId++) {\n', '            if (preSaleItemIndexToOwner[_assetId] == _owner) {\n', '                result[resultIndex] = _assetId;\n', '                resultIndex++;\n', '            }\n', '        }\n', '\n', '        return result;\n', '    }\n', '  }\n', '\n', '  /// For querying totalSupply of token\n', '  /// @dev Required for ERC-721 compliance.\n', '  function totalSupply() public view returns (uint256 total) {\n', '    return allPreSaleItems.length - 1; //Removed 0 index\n', '  }\n', '\n', '  /// Owner initates the transfer of the token to another account\n', '  /// @param _to The address for the token to be transferred to.\n', '  /// @param _assetId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function transfer(address _to, uint256 _assetId) public {\n', '    require(_addressNotNull(_to));\n', '    require(_owns(msg.sender, _assetId));\n', '\n', '    _transfer(msg.sender, _to, _assetId);\n', '  }\n', '\n', '  /// Third-party initiates transfer of token from address _from to address _to\n', '  /// @param _from The address for the token to be transferred from.\n', '  /// @param _to The address for the token to be transferred to.\n', '  /// @param _assetId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function transferFrom(address _from, address _to, uint256 _assetId) public {\n', '    require(_owns(_from, _assetId));\n', '    require(_approved(_to, _assetId));\n', '    require(_addressNotNull(_to));\n', '\n', '    _transfer(_from, _to, _assetId);\n', '  }\n', '\n', '  /*** PRIVATE FUNCTIONS ***/\n', '  /// @dev  Safety check on _to address to prevent against an unexpected 0x0 default.\n', '  function _addressNotNull(address _to) internal pure returns (bool) {\n', '    return _to != address(0);\n', '  }\n', '\n', '  /// @dev  For checking approval of transfer for address _to\n', '  function _approved(address _to, uint256 _assetId) internal view returns (bool) {\n', '    return preSaleItemIndexToApproved[_assetId] == _to;\n', '  }\n', '\n', '  /// @dev For creating CSC Collectible\n', '  function _createCollectible(bytes32 _collectibleName, address _owner) internal returns(uint256) {\n', '    \n', '    RarePreSaleItem memory _collectibleObj = RarePreSaleItem(\n', '      _collectibleName,\n', '      0,\n', '      address(0),\n', '      false\n', '    );\n', '\n', '    uint256 newCollectibleId = allPreSaleItems.push(_collectibleObj) - 1;\n', '    \n', '    // emit Created event\n', '    CollectibleCreated(_owner, newCollectibleId, _collectibleName, false);\n', '    \n', '    // This will assign ownership, and also emit the Transfer event as\n', '    // per ERC721 draft\n', '    _transfer(address(0), _owner, newCollectibleId);\n', '    \n', '    return newCollectibleId;\n', '  }\n', '\n', '  /// Check for token ownership\n', '  function _owns(address claimant, uint256 _assetId) internal view returns (bool) {\n', '    return claimant == preSaleItemIndexToOwner[_assetId];\n', '  }\n', '\n', '  /// @dev Assigns ownership of a specific Emoji to an address.\n', '  function _transfer(address _from, address _to, uint256 _assetId) internal {\n', '    // Updating the owner details of the ship\n', '    RarePreSaleItem memory _shipObj = allPreSaleItems[_assetId];\n', '    _shipObj.owner = _to;\n', '    allPreSaleItems[_assetId] = _shipObj;\n', '\n', '    // Since the number of emojis is capped to 2^32 we can&#39;t overflow this\n', '    ownershipTokenCount[_to]++;\n', '\n', '    //transfer ownership\n', '    preSaleItemIndexToOwner[_assetId] = _to;\n', '\n', '    // When creating new emojis _from is 0x0, but we can&#39;t account that address.\n', '    if (_from != address(0)) {\n', '      ownershipTokenCount[_from]--;\n', '      // clear any previously approved ownership exchange\n', '      delete preSaleItemIndexToApproved[_assetId];\n', '    }\n', '\n', '    // Emit the transfer event.\n', '    Transfer(_from, _to, _assetId);\n', '  }\n', '\n', '  /// @dev Checks if a given address currently has transferApproval for a particular RarePreSaleItem.\n', '  /// 0 is a valid value as it will be the starter\n', '  function _approvedFor(address _claimant, uint256 _assetId) internal view returns (bool) {\n', '      return preSaleItemIndexToApproved[_assetId] == _claimant;\n', '  }\n', '\n', '  function _getCollectibleDetails (uint256 _assetId) internal view returns(RarePreSaleItem) {\n', '    RarePreSaleItem storage _Obj = allPreSaleItems[_assetId];\n', '    return _Obj;\n', '  }\n', '\n', '  /// @dev Helps in fetching the attributes of the ship depending on the ship\n', '  /// assetId : The actual ERC721 Asset ID\n', '  /// sequenceId : Index w.r.t Ship type\n', '  function getShipDetails(uint256 _assetId) external view returns (\n', '    uint256 collectibleId,\n', '    string shipName,\n', '    uint256 boughtTimestamp,\n', '    address owner,\n', '    bool isRedeemed\n', '    ) {\n', '    RarePreSaleItem storage _collectibleObj = allPreSaleItems[_assetId];\n', '    collectibleId = _assetId;\n', '    shipName = bytes32ToString(_collectibleObj.collectibleName);\n', '    boughtTimestamp = _collectibleObj.boughtTimestamp;\n', '    owner = _collectibleObj.owner;\n', '    isRedeemed = _collectibleObj.isRedeemed;\n', '  }\n', '}\n', '\n', '/* Lucid Sight, Inc. ERC-721 CSC Collectilbe Sale Contract. \n', ' * @title CSCCollectibleSale\n', ' * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\n', ' */\n', 'contract CSCCollectibleSale is CSCCollectibleBase {\n', '  event SaleWinner(address owner, uint256 collectibleId, uint256 buyingPrice);\n', '  event CollectibleBidSuccess(address owner, uint256 collectibleId, uint256 newBidPrice, bool isActive);\n', '  event SaleCreated(uint256 tokenID, uint256 startingPrice, uint256 endingPrice, uint256 duration, uint64 startedAt, bool isActive, uint256 bidPrice);\n', '\n', '  //  SHIP DATATYPES & CONSTANTS\n', '  struct CollectibleSale {\n', '    // Current owner of NFT (ERC721)\n', '    address seller;\n', '    // Price (in wei) at beginning of sale (For Buying)\n', '    uint256 startingPrice;\n', '    // Price (in wei) at end of sale (For Buying)\n', '    uint256 endingPrice;\n', '    // Duration (in seconds) of sale\n', '    uint256 duration;\n', '    // Time when sale started\n', '    // NOTE: 0 if this sale has been concluded\n', '    uint64 startedAt;\n', '\n', '    // Flag denoting is the Sale stilla ctive\n', '    bool isActive;\n', '\n', '    // address of the wallet who had the maxBid\n', '    address highestBidder;\n', '\n', '    // address of the wallet who bought the asset\n', '    address buyer;\n', '\n', '    // ERC721 AssetID\n', '    uint256 tokenId;\n', '  }\n', '\n', '  // @dev ship Prices & price cap\n', '  uint256 public constant SALE_DURATION = 2592000;\n', '  \n', '  /// mapping holding details of the last person who had a successfull bid. used for giving back the last bid price until the asset is bought\n', '  mapping(uint256 => address) indexToBidderAddress;\n', '  mapping(address => mapping(uint256 => uint256)) addressToBidValue;\n', '\n', '  // A map from assetId to the bid increment\n', '  mapping ( uint256 => uint256 ) indexToPriceIncrement;\n', '  /// Map from assetId to bid price\n', '  mapping ( uint256 => uint256 ) indexToBidPrice;\n', '\n', '  // Map from token to their corresponding sale.\n', '  mapping (uint256 => CollectibleSale) tokenIdToSale;\n', '\n', '  /// @dev Adds an sale to the list of open sales. Also fires the\n', '  ///  SaleCreated event.\n', '  function _addSale(uint256 _assetId, CollectibleSale _sale) internal {\n', '      // Require that all sales have a duration of\n', '      // at least one minute.\n', '      require(_sale.duration >= 1 minutes);\n', '      \n', '      tokenIdToSale[_assetId] = _sale;\n', '      indexToBidPrice[_assetId] = _sale.endingPrice;\n', '\n', '      SaleCreated(\n', '          uint256(_assetId),\n', '          uint256(_sale.startingPrice),\n', '          uint256(_sale.endingPrice),\n', '          uint256(_sale.duration),\n', '          uint64(_sale.startedAt),\n', '          _sale.isActive,\n', '          indexToBidPrice[_assetId]\n', '      );\n', '  }\n', '\n', '  /// @dev Removes an sale from the list of open sales.\n', '  /// @param _assetId - ID of the token on sale\n', '  function _removeSale(uint256 _assetId) internal {\n', '      delete tokenIdToSale[_assetId];\n', '  }\n', '\n', '  function _bid(uint256 _assetId, address _buyer, uint256 _bidAmount) internal {\n', '    CollectibleSale storage _sale = tokenIdToSale[_assetId];\n', '    \n', '    require(_bidAmount >= indexToBidPrice[_assetId]);\n', '\n', '    uint256 _newBidPrice = _bidAmount + indexToPriceIncrement[_assetId];\n', '    indexToBidPrice[_assetId] = _newBidPrice;\n', '\n', '    _sale.highestBidder = _buyer;\n', '    _sale.endingPrice = _newBidPrice;\n', '\n', '    address lastBidder = indexToBidderAddress[_assetId];\n', '    \n', '    if(lastBidder != address(0)){\n', '      uint256 _value = addressToBidValue[lastBidder][_assetId];\n', '\n', '      indexToBidderAddress[_assetId] = _buyer;\n', '\n', '      addressToBidValue[lastBidder][_assetId] = 0;\n', '      addressToBidValue[_buyer][_assetId] = _bidAmount;\n', '\n', '      lastBidder.transfer(_value);\n', '    } else {\n', '      indexToBidderAddress[_assetId] = _buyer;\n', '      addressToBidValue[_buyer][_assetId] = _bidAmount;\n', '    }\n', '\n', '    // Check that the bid is greater than or equal to the current buyOut price\n', '    uint256 price = _currentPrice(_sale);\n', '\n', '    if(_bidAmount >= price) {\n', '      _sale.buyer = _buyer;\n', '      _sale.isActive = false;\n', '\n', '      _removeSale(_assetId);\n', '\n', '      uint256 bidExcess = _bidAmount - price;\n', '      _buyer.transfer(bidExcess);\n', '\n', '      SaleWinner(_buyer, _assetId, _bidAmount);\n', '      _transfer(address(this), _buyer, _assetId);\n', '    } else {\n', '      tokenIdToSale[_assetId] = _sale;\n', '\n', '      CollectibleBidSuccess(_buyer, _assetId, _sale.endingPrice, _sale.isActive);\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if the FT (ERC721) is on sale.\n', '  function _isOnSale(CollectibleSale memory _sale) internal view returns (bool) {\n', '      return (_sale.startedAt > 0 && _sale.isActive);\n', '  }\n', '\n', '  /// @dev Returns current price of a Collectible (ERC721) on sale. Broken into two\n', '  ///  functions (this one, that computes the duration from the sale\n', '  ///  structure, and the other that does the price computation) so we\n', '  ///  can easily test that the price computation works correctly.\n', '  function _currentPrice(CollectibleSale memory _sale) internal view returns (uint256) {\n', '      uint256 secondsPassed = 0;\n', '\n', '      // A bit of insurance against negative values (or wraparound).\n', '      // Probably not necessary (since Ethereum guarnatees that the\n', '      // now variable doesn&#39;t ever go backwards).\n', '      if (now > _sale.startedAt) {\n', '          secondsPassed = now - _sale.startedAt;\n', '      }\n', '\n', '      return _computeCurrentPrice(\n', '          _sale.startingPrice,\n', '          _sale.endingPrice,\n', '          _sale.duration,\n', '          secondsPassed\n', '      );\n', '  }\n', '\n', '  /// @dev Computes the current price of an sale. Factored out\n', '  ///  from _currentPrice so we can run extensive unit tests.\n', '  ///  When testing, make this function public and turn on\n', '  ///  `Current price computation` test suite.\n', '  function _computeCurrentPrice(uint256 _startingPrice, uint256 _endingPrice, uint256 _duration, uint256 _secondsPassed) internal pure returns (uint256) {\n', '      // NOTE: We don&#39;t use SafeMath (or similar) in this function because\n', '      //  all of our public functions carefully cap the maximum values for\n', '      //  time (at 64-bits) and currency (at 128-bits). _duration is\n', '      //  also known to be non-zero (see the require() statement in\n', '      //  _addSale())\n', '      if (_secondsPassed >= _duration) {\n', '          // We&#39;ve reached the end of the dynamic pricing portion\n', '          // of the sale, just return the end price.\n', '          return _endingPrice;\n', '      } else {\n', '          // Starting price can be higher than ending price (and often is!), so\n', '          // this delta can be negative.\n', '          int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\n', '\n', '          // This multiplication can&#39;t overflow, _secondsPassed will easily fit within\n', '          // 64-bits, and totalPriceChange will easily fit within 128-bits, their product\n', '          // will always fit within 256-bits.\n', '          int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\n', '\n', '          // currentPriceChange can be negative, but if so, will have a magnitude\n', '          // less that _startingPrice. Thus, this result will always end up positive.\n', '          int256 currentPrice = int256(_startingPrice) + currentPriceChange;\n', '\n', '          return uint256(currentPrice);\n', '      }\n', '  }\n', '  \n', '  /// @dev Escrows the ERC721 Token, assigning ownership to this contract.\n', '  /// Throws if the escrow fails.\n', '  function _escrow(address _owner, uint256 _tokenId) internal {\n', '    transferFrom(_owner, this, _tokenId);\n', '  }\n', '\n', '  function getBuyPrice(uint256 _assetId) external view returns(uint256 _price){\n', '    CollectibleSale memory _sale = tokenIdToSale[_assetId];\n', '    \n', '    return _currentPrice(_sale);\n', '  }\n', '  \n', '  function getBidPrice(uint256 _assetId) external view returns(uint256 _price){\n', '    return indexToBidPrice[_assetId];\n', '  }\n', '\n', '  /// @dev Creates and begins a new sale.\n', '  function _createSale(uint256 _tokenId, uint256 _startingPrice, uint256 _endingPrice, uint64 _duration, address _seller) internal {\n', '      // Sanity check that no inputs overflow how many bits we&#39;ve allocated\n', '      // to store them in the sale struct.\n', '      require(_startingPrice == uint256(uint128(_startingPrice)));\n', '      require(_endingPrice == uint256(uint128(_endingPrice)));\n', '      require(_duration == uint256(uint64(_duration)));\n', '\n', '      CollectibleSale memory sale = CollectibleSale(\n', '          _seller,\n', '          uint128(_startingPrice),\n', '          uint128(_endingPrice),\n', '          uint64(_duration),\n', '          uint64(now),\n', '          true,\n', '          address(this),\n', '          address(this),\n', '          uint256(_tokenId)\n', '      );\n', '      _addSale(_tokenId, sale);\n', '  }\n', '\n', '  function _buy(uint256 _assetId, address _buyer, uint256 _price) internal {\n', '\n', '    CollectibleSale storage _sale = tokenIdToSale[_assetId];\n', '    address lastBidder = indexToBidderAddress[_assetId];\n', '    \n', '    if(lastBidder != address(0)){\n', '      uint256 _value = addressToBidValue[lastBidder][_assetId];\n', '\n', '      indexToBidderAddress[_assetId] = _buyer;\n', '\n', '      addressToBidValue[lastBidder][_assetId] = 0;\n', '      addressToBidValue[_buyer][_assetId] = _price;\n', '\n', '      lastBidder.transfer(_value);\n', '    }\n', '\n', '    // Check that the bid is greater than or equal to the current buyOut price\n', '    uint256 currentPrice = _currentPrice(_sale);\n', '\n', '    require(_price >= currentPrice);\n', '    _sale.buyer = _buyer;\n', '    _sale.isActive = false;\n', '\n', '    _removeSale(_assetId);\n', '\n', '    uint256 bidExcess = _price - currentPrice;\n', '    _buyer.transfer(bidExcess);\n', '\n', '    SaleWinner(_buyer, _assetId, _price);\n', '    _transfer(address(this), _buyer, _assetId);\n', '  }\n', '\n', '  /// @dev Returns sales info for an CSLCollectibles (ERC721) on sale.\n', '  /// @param _assetId - ID of the token on sale\n', '  function getSale(uint256 _assetId) external view returns (address seller, uint256 startingPrice, uint256 endingPrice, uint256 duration, uint256 startedAt, bool isActive, address owner, address highestBidder) {\n', '      CollectibleSale memory sale = tokenIdToSale[_assetId];\n', '      require(_isOnSale(sale));\n', '      return (\n', '          sale.seller,\n', '          sale.startingPrice,\n', '          sale.endingPrice,\n', '          sale.duration,\n', '          sale.startedAt,\n', '          sale.isActive,\n', '          sale.buyer,\n', '          sale.highestBidder\n', '      );\n', '  }\n', '}\n', '\n', '/* Lucid Sight, Inc. ERC-721 Collectibles. \n', ' * @title LSNFT - Lucid Sight, Inc. Non-Fungible Token\n', ' * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\n', ' */\n', 'contract CSCRarePreSaleManager is CSCCollectibleSale {\n', '  event RefundClaimed(address owner);\n', '\n', '  bool CSCPreSaleInit = false;\n', '\n', '  /// @dev Constructor creates a reference to the NFT (ERC721) ownership contract\n', '  function CSCRarePreSaleManager() public {\n', '      require(msg.sender != address(0));\n', '      paused = true;\n', '      error = false;\n', '      gameManagerPrimary = msg.sender;\n', '  }\n', '\n', '  function addToApprovedAddress (address _newAddr) onlyGameManager {\n', '    require(_newAddr != address(0));\n', '    require(!approvedAddressList[_newAddr]);\n', '    approvedAddressList[_newAddr] = true;\n', '  }\n', '\n', '  function removeFromApprovedAddress (address _newAddr) onlyGameManager {\n', '    require(_newAddr != address(0));\n', '    require(approvedAddressList[_newAddr]);\n', '    approvedAddressList[_newAddr] = false;\n', '  }\n', '\n', '  function createPreSaleShip(string collectibleName, uint256 startingPrice, uint256 bidPrice) whenNotPaused returns (uint256){\n', '    require(approvedAddressList[msg.sender] || msg.sender == gameManagerPrimary || msg.sender == gameManagerSecondary);\n', '    \n', '    uint256 assetId = _createCollectible(stringToBytes32(collectibleName), address(this));\n', '\n', '    indexToPriceIncrement[assetId] = bidPrice;\n', '\n', '    _createSale(assetId, startingPrice, bidPrice, uint64(SALE_DURATION), address(this));\n', '  }\n', '\n', '  function() external payable {\n', '  }\n', '\n', '  /// @dev Bid Function which call the interncal bid function\n', '  /// after doing all the pre-checks required to initiate a bid\n', '  function bid(uint256 _assetId) external whenNotPaused payable {\n', '    require(msg.sender != address(0));\n', '    require(msg.sender != address(this));\n', '    CollectibleSale memory _sale = tokenIdToSale[_assetId];\n', '    require(_isOnSale(_sale));\n', '    \n', '    address seller = _sale.seller;\n', '\n', '    _bid(_assetId, msg.sender, msg.value);\n', '  }\n', '\n', '  /// @dev BuyNow Function which call the interncal buy function\n', '  /// after doing all the pre-checks required to initiate a buy\n', '  function buyNow(uint256 _assetId) external whenNotPaused payable {\n', '    require(msg.sender != address(0));\n', '    require(msg.sender != address(this));\n', '    CollectibleSale memory _sale = tokenIdToSale[_assetId];\n', '    require(_isOnSale(_sale));\n', '    \n', '    address seller = _sale.seller;\n', '\n', '    _buy(_assetId, msg.sender, msg.value);\n', '  }\n', '\n', '  /// @dev Override unpause so it requires all external contract addresses\n', '  ///  to be set before contract can be unpaused. Also, we can&#39;t have\n', '  ///  newContractAddress set either, because then the contract was upgraded.\n', '  /// @notice This is public rather than external so we can call super.unpause\n', '  ///  without using an expensive CALL.\n', '  function unpause() public onlyGameManager whenPaused {\n', '      // Actually unpause the contract.\n', '      super.unpause();\n', '  }\n', '\n', '  /// @dev Remove all Ether from the contract, which is the owner&#39;s cuts\n', '  ///  as well as any Ether sent directly to the contract address.\n', '  ///  Always transfers to the NFT (ERC721) contract, but can be called either by\n', '  ///  the owner or the NFT (ERC721) contract.\n', '  function withdrawBalance() onlyBanker {\n', '      // We are using this boolean method to make sure that even if one fails it will still work\n', '      bankManager.transfer(this.balance);\n', '  }\n', '  \n', '  function preSaleInit() onlyGameManager {\n', '    require(!CSCPreSaleInit);\n', '    require(allPreSaleItems.length == 0);\n', '      \n', '    CSCPreSaleInit = true;\n', '\n', '    bytes32[6] memory attributes = [bytes32(999), bytes32(999), bytes32(999), bytes32(999), bytes32(999), bytes32(999)];\n', '    //Fill in index 0 to null requests\n', '    RarePreSaleItem memory _Obj = RarePreSaleItem(stringToBytes32("Dummy"), 0, address(this), true);\n', '    allPreSaleItems.push(_Obj);\n', '  } \n', '}']
['pragma solidity ^0.4.19;\n', '\n', '/* Adapted from strings.sol created by Nick Johnson <arachnid@notdot.net>\n', ' * Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\n', ' * @title String & slice utility library for Solidity contracts.\n', ' * @author Nick Johnson <arachnid@notdot.net>\n', ' */\n', 'library strings {\n', '    \n', '    struct slice {\n', '        uint _len;\n', '        uint _ptr;\n', '    }\n', '\n', '    /*\n', '     * @dev Returns a slice containing the entire string.\n', '     * @param self The string to make a slice from.\n', '     * @return A newly allocated slice containing the entire string.\n', '     */\n', '    function toSlice(string self) internal pure returns (slice) {\n', '        uint ptr;\n', '        assembly {\n', '            ptr := add(self, 0x20)\n', '        }\n', '        return slice(bytes(self).length, ptr);\n', '    }\n', '\n', '    function memcpy(uint dest, uint src, uint len) private pure {\n', '        // Copy word-length chunks while possible\n', '        for(; len >= 32; len -= 32) {\n', '            assembly {\n', '                mstore(dest, mload(src))\n', '            }\n', '            dest += 32;\n', '            src += 32;\n', '        }\n', '\n', '        // Copy remaining bytes\n', '        uint mask = 256 ** (32 - len) - 1;\n', '        assembly {\n', '            let srcpart := and(mload(src), not(mask))\n', '            let destpart := and(mload(dest), mask)\n', '            mstore(dest, or(destpart, srcpart))\n', '        }\n', '    }\n', '\n', '    \n', '    function concat(slice self, slice other) internal returns (string) {\n', '        var ret = new string(self._len + other._len);\n', '        uint retptr;\n', '        assembly { retptr := add(ret, 32) }\n', '        memcpy(retptr, self._ptr, self._len);\n', '        memcpy(retptr + self._len, other._ptr, other._len);\n', '        return ret;\n', '    }\n', '\n', '    /*\n', '     * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.\n', '     * @param self The slice to search.\n', '     * @param needle The text to search for in `self`.\n', '     * @return The number of occurrences of `needle` found in `self`.\n', '     */\n', '    function count(slice self, slice needle) internal returns (uint cnt) {\n', '        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;\n', '        while (ptr <= self._ptr + self._len) {\n', '            cnt++;\n', '            ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;\n', '        }\n', '    }\n', '\n', '    // Returns the memory address of the first byte of the first occurrence of\n', '    // `needle` in `self`, or the first byte after `self` if not found.\n', '    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private returns (uint) {\n', '        uint ptr;\n', '        uint idx;\n', '\n', '        if (needlelen <= selflen) {\n', '            if (needlelen <= 32) {\n', '                // Optimized assembly for 68 gas per byte on short strings\n', '                assembly {\n', '                    let mask := not(sub(exp(2, mul(8, sub(32, needlelen))), 1))\n', '                    let needledata := and(mload(needleptr), mask)\n', '                    let end := add(selfptr, sub(selflen, needlelen))\n', '                    ptr := selfptr\n', '                    loop:\n', '                    jumpi(exit, eq(and(mload(ptr), mask), needledata))\n', '                    ptr := add(ptr, 1)\n', '                    jumpi(loop, lt(sub(ptr, 1), end))\n', '                    ptr := add(selfptr, selflen)\n', '                    exit:\n', '                }\n', '                return ptr;\n', '            } else {\n', '                // For long needles, use hashing\n', '                bytes32 hash;\n', '                assembly { hash := sha3(needleptr, needlelen) }\n', '                ptr = selfptr;\n', '                for (idx = 0; idx <= selflen - needlelen; idx++) {\n', '                    bytes32 testHash;\n', '                    assembly { testHash := sha3(ptr, needlelen) }\n', '                    if (hash == testHash)\n', '                        return ptr;\n', '                    ptr += 1;\n', '                }\n', '            }\n', '        }\n', '        return selfptr + selflen;\n', '    }\n', '\n', '    /*\n', '     * @dev Splits the slice, setting `self` to everything after the first\n', '     *      occurrence of `needle`, and `token` to everything before it. If\n', '     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n', '     *      and `token` is set to the entirety of `self`.\n', '     * @param self The slice to split.\n', '     * @param needle The text to search for in `self`.\n', '     * @param token An output parameter to which the first token is written.\n', '     * @return `token`.\n', '     */\n', '    function split(slice self, slice needle, slice token) internal returns (slice) {\n', '        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\n', '        token._ptr = self._ptr;\n', '        token._len = ptr - self._ptr;\n', '        if (ptr == self._ptr + self._len) {\n', '            // Not found\n', '            self._len = 0;\n', '        } else {\n', '            self._len -= token._len + needle._len;\n', '            self._ptr = ptr + needle._len;\n', '        }\n', '        return token;\n', '    }\n', '\n', '     /*\n', '     * @dev Splits the slice, setting `self` to everything after the first\n', '     *      occurrence of `needle`, and returning everything before it. If\n', '     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n', '     *      and the entirety of `self` is returned.\n', '     * @param self The slice to split.\n', '     * @param needle The text to search for in `self`.\n', '     * @return The part of `self` up to the first occurrence of `delim`.\n', '     */\n', '    function split(slice self, slice needle) internal returns (slice token) {\n', '        split(self, needle, token);\n', '    }\n', '\n', '    /*\n', '     * @dev Copies a slice to a new string.\n', '     * @param self The slice to copy.\n', "     * @return A newly allocated string containing the slice's text.\n", '     */\n', '    function toString(slice self) internal pure returns (string) {\n', '        var ret = new string(self._len);\n', '        uint retptr;\n', '        assembly { retptr := add(ret, 32) }\n', '\n', '        memcpy(retptr, self._ptr, self._len);\n', '        return ret;\n', '    }\n', '\n', '}\n', '\n', '/* Helper String Functions for Game Manager Contract\n', ' * @title String Healpers\n', ' * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\n', ' */\n', 'contract StringHelpers {\n', '    using strings for *;\n', '    \n', '    function stringToBytes32(string memory source) internal returns (bytes32 result) {\n', '        bytes memory tempEmptyStringTest = bytes(source);\n', '        if (tempEmptyStringTest.length == 0) {\n', '            return 0x0;\n', '        }\n', '    \n', '        assembly {\n', '            result := mload(add(source, 32))\n', '        }\n', '    }\n', '\n', '    function bytes32ToString(bytes32 x) constant internal returns (string) {\n', '        bytes memory bytesString = new bytes(32);\n', '        uint charCount = 0;\n', '        for (uint j = 0; j < 32; j++) {\n', '            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\n', '            if (char != 0) {\n', '                bytesString[charCount] = char;\n', '                charCount++;\n', '            }\n', '        }\n', '        bytes memory bytesStringTrimmed = new bytes(charCount);\n', '        for (j = 0; j < charCount; j++) {\n', '            bytesStringTrimmed[j] = bytesString[j];\n', '        }\n', '        return string(bytesStringTrimmed);\n', '    }\n', '}\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', '/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\n', 'contract ERC721 {\n', '  // Required methods\n', '  function balanceOf(address _owner) public view returns (uint256 balance);\n', '  function ownerOf(uint256 _assetId) public view returns (address owner);\n', '  function approve(address _to, uint256 _assetId) public;\n', '  function transfer(address _to, uint256 _assetId) public;\n', '  function transferFrom(address _from, address _to, uint256 _assetId) public;\n', '  function implementsERC721() public pure returns (bool);\n', '  function takeOwnership(uint256 _assetId) public;\n', '  function totalSupply() public view returns (uint256 total);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 tokenId);\n', '  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\n', '\n', '  // Optional\n', '  // function name() public view returns (string name);\n', '  // function symbol() public view returns (string symbol);\n', '  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\n', '  // function tokenMetadata(uint256 _assetId) public view returns (string infoUrl);\n', '\n', '  // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\n', '  function supportsInterface(bytes4 _interfaceID) external view returns (bool);\n', '}\n', '\n', '/* Controls game play state and access rights for game functions\n', ' * @title Operational Control\n', ' * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\n', ' * Inspired and adapted from contract created by OpenZeppelin\n', ' * Ref: https://github.com/OpenZeppelin/zeppelin-solidity/\n', ' */\n', 'contract OperationalControl {\n', '    // Facilitates access & control for the game.\n', '    // Roles:\n', '    //  -The Game Managers (Primary/Secondary): Has universal control of all game elements (No ability to withdraw)\n', '    //  -The Banker: The Bank can withdraw funds and adjust fees / prices.\n', '\n', '    /// @dev Emited when contract is upgraded\n', '    event ContractUpgrade(address newContract);\n', '\n', '    // The addresses of the accounts (or contracts) that can execute actions within each roles.\n', '    address public gameManagerPrimary;\n', '    address public gameManagerSecondary;\n', '    address public bankManager;\n', '\n', '    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n', '    bool public paused = false;\n', '\n', '    // @dev Keeps track whether the contract erroredOut. When that is true, most actions are blocked & refund can be claimed\n', '    bool public error = false;\n', '\n', '    /// @dev Operation modifiers for limiting access\n', '    modifier onlyGameManager() {\n', '        require(msg.sender == gameManagerPrimary || msg.sender == gameManagerSecondary);\n', '        _;\n', '    }\n', '\n', '    modifier onlyBanker() {\n', '        require(msg.sender == bankManager);\n', '        _;\n', '    }\n', '\n', '    modifier anyOperator() {\n', '        require(\n', '            msg.sender == gameManagerPrimary ||\n', '            msg.sender == gameManagerSecondary ||\n', '            msg.sender == bankManager\n', '        );\n', '        _;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the GM.\n', '    function setPrimaryGameManager(address _newGM) external onlyGameManager {\n', '        require(_newGM != address(0));\n', '\n', '        gameManagerPrimary = _newGM;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the GM.\n', '    function setSecondaryGameManager(address _newGM) external onlyGameManager {\n', '        require(_newGM != address(0));\n', '\n', '        gameManagerSecondary = _newGM;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the Banker.\n', '    function setBanker(address _newBK) external onlyGameManager {\n', '        require(_newBK != address(0));\n', '\n', '        bankManager = _newBK;\n', '    }\n', '\n', '    /*** Pausable functionality adapted from OpenZeppelin ***/\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS NOT paused\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS paused\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract has Error\n', '    modifier whenError {\n', '        require(error);\n', '        _;\n', '    }\n', '\n', '    /// @dev Called by any Operator role to pause the contract.\n', '    /// Used only if a bug or exploit is discovered (Here to limit losses / damage)\n', '    function pause() external onlyGameManager whenNotPaused {\n', '        paused = true;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the Game Master\n', '    /// @notice This is public rather than external so it can be called by derived contracts. \n', '    function unpause() public onlyGameManager whenPaused {\n', "        // can't unpause if contract was upgraded\n", '        paused = false;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the Game Master\n', '    /// @notice This is public rather than external so it can be called by derived contracts. \n', '    function hasError() public onlyGameManager whenPaused {\n', '        error = true;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the Game Master\n', '    /// @notice This is public rather than external so it can be called by derived contracts. \n', '    function noError() public onlyGameManager whenPaused {\n', '        error = false;\n', '    }\n', '}\n', '\n', 'contract CSCCollectibleBase is ERC721, OperationalControl, StringHelpers {\n', '\n', '  /*** EVENTS ***/\n', '  /// @dev The Created event is fired whenever a new collectible comes into existence.\n', '  event CollectibleCreated(address owner, uint256 collectibleId, bytes32 collectibleName, bool isRedeemed);\n', '  event Transfer(address from, address to, uint256 shipId);\n', '\n', '  /*** CONSTANTS ***/\n', '\n', '  /// @notice Name and symbol of the non fungible token, as defined in ERC721.\n', '  string public constant NAME = "CSCRareCollectiblePreSale";\n', '  string public constant SYMBOL = "CSCR";\n', "  bytes4 constant InterfaceSignature_ERC165 = bytes4(keccak256('supportsInterface(bytes4)'));\n", '  bytes4 constant InterfaceSignature_ERC721 =\n', "        bytes4(keccak256('name()')) ^\n", "        bytes4(keccak256('symbol()')) ^\n", "        bytes4(keccak256('totalSupply()')) ^\n", "        bytes4(keccak256('balanceOf(address)')) ^\n", "        bytes4(keccak256('ownerOf(uint256)')) ^\n", "        bytes4(keccak256('approve(address,uint256)')) ^\n", "        bytes4(keccak256('transfer(address,uint256)')) ^\n", "        bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n", "        bytes4(keccak256('tokensOfOwner(address)')) ^\n", "        bytes4(keccak256('tokenMetadata(uint256,string)'));\n", '\n', '  /// @dev CSC Pre Sale Struct, having details of the ship\n', '  struct RarePreSaleItem {\n', '\n', '    /// @dev name of the collectible stored in bytes\n', '    bytes32 collectibleName;\n', '\n', '    /// @dev Timestamp when bought\n', '    uint256 boughtTimestamp;\n', '\n', '    // @dev owner address\n', '    address owner;\n', '\n', '    // @dev redeeme flag (to help whether it got redeemed or not)\n', '    bool isRedeemed;\n', '  }\n', '\n', '  // @dev array of RarePreSaleItem type holding information on the Ships\n', '  RarePreSaleItem[] allPreSaleItems;\n', '\n', '  // @dev mapping which holds all the possible addresses which are allowed to interact with the contract\n', '  mapping (address => bool) approvedAddressList;\n', '\n', '  // @dev mapping holds the preSaleItem -> owner details\n', '  mapping (uint256 => address) public preSaleItemIndexToOwner;\n', '\n', '  // @dev A mapping from owner address to count of tokens that address owns.\n', '  //  Used internally inside balanceOf() to resolve ownership count.\n', '  mapping (address => uint256) private ownershipTokenCount;\n', '\n', '  /// @dev A mapping from preSaleItem to an address that has been approved to call\n', '  ///  transferFrom(). Each Ship can only have one approved address for transfer\n', '  ///  at any time. A zero value means no approval is outstanding.\n', '  mapping (uint256 => address) public preSaleItemIndexToApproved;\n', '\n', '  /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\n', '  ///  Returns true for any standardized interfaces implemented by this contract. We implement\n', '  ///  ERC-165 (obviously!) and ERC-721.\n', '  function supportsInterface(bytes4 _interfaceID) external view returns (bool)\n', '  {\n', '      // DEBUG ONLY\n', '      //require((InterfaceSignature_ERC165 == 0x01ffc9a7) && (InterfaceSignature_ERC721 == 0x9a20483d));\n', '      return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\n', '  }\n', '\n', '  /*** PUBLIC FUNCTIONS ***/\n', '  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\n', '  /// @param _to The address to be granted transfer approval. Pass address(0) to\n', '  ///  clear all approvals.\n', '  /// @param _assetId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function approve(address _to, uint256 _assetId) public {\n', '    // Caller must own token.\n', '    require(_owns(address(this), _assetId));\n', '    preSaleItemIndexToApproved[_assetId] = _to;\n', '\n', '    Approval(msg.sender, _to, _assetId);\n', '  }\n', '\n', '  /// For querying balance of a particular account\n', '  /// @param _owner The address for balance query\n', '  /// @dev Required for ERC-721 compliance.\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return ownershipTokenCount[_owner];\n', '  }\n', '\n', '  function implementsERC721() public pure returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  /// For querying owner of token\n', '  /// @param _assetId The tokenID for owner inquiry\n', '  /// @dev Required for ERC-721 compliance.\n', '  function ownerOf(uint256 _assetId) public view returns (address owner) {\n', '    owner = preSaleItemIndexToOwner[_assetId];\n', '    require(owner != address(0));\n', '  }\n', '\n', '  /// @dev Required for ERC-721 compliance.\n', '  function symbol() public pure returns (string) {\n', '    return SYMBOL;\n', '  }\n', '\n', '  /// @notice Allow pre-approved user to take ownership of a token\n', '  /// @param _assetId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function takeOwnership(uint256 _assetId) public {\n', '    address newOwner = msg.sender;\n', '    address oldOwner = preSaleItemIndexToOwner[_assetId];\n', '\n', '    // Safety check to prevent against an unexpected 0x0 default.\n', '    require(_addressNotNull(newOwner));\n', '\n', '    // Making sure transfer is approved\n', '    require(_approved(newOwner, _assetId));\n', '\n', '    _transfer(oldOwner, newOwner, _assetId);\n', '  }\n', '\n', '  /// @param _owner The owner whose ships tokens we are interested in.\n', "  /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\n", '  ///  expensive (it walks the entire CSCShips array looking for emojis belonging to owner),\n', '  ///  but it also returns a dynamic array, which is only supported for web3 calls, and\n', '  ///  not contract-to-contract calls.\n', '  function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\n', '    uint256 tokenCount = balanceOf(_owner);\n', '\n', '    if (tokenCount == 0) {\n', '        // Return an empty array\n', '        return new uint256[](0);\n', '    } else {\n', '        uint256[] memory result = new uint256[](tokenCount);\n', '        uint256 totalShips = totalSupply() + 1;\n', '        uint256 resultIndex = 0;\n', '\n', '        // We count on the fact that all CSC Ship Collectible have IDs starting at 0 and increasing\n', '        // sequentially up to the total count.\n', '        uint256 _assetId;\n', '\n', '        for (_assetId = 0; _assetId < totalShips; _assetId++) {\n', '            if (preSaleItemIndexToOwner[_assetId] == _owner) {\n', '                result[resultIndex] = _assetId;\n', '                resultIndex++;\n', '            }\n', '        }\n', '\n', '        return result;\n', '    }\n', '  }\n', '\n', '  /// For querying totalSupply of token\n', '  /// @dev Required for ERC-721 compliance.\n', '  function totalSupply() public view returns (uint256 total) {\n', '    return allPreSaleItems.length - 1; //Removed 0 index\n', '  }\n', '\n', '  /// Owner initates the transfer of the token to another account\n', '  /// @param _to The address for the token to be transferred to.\n', '  /// @param _assetId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function transfer(address _to, uint256 _assetId) public {\n', '    require(_addressNotNull(_to));\n', '    require(_owns(msg.sender, _assetId));\n', '\n', '    _transfer(msg.sender, _to, _assetId);\n', '  }\n', '\n', '  /// Third-party initiates transfer of token from address _from to address _to\n', '  /// @param _from The address for the token to be transferred from.\n', '  /// @param _to The address for the token to be transferred to.\n', '  /// @param _assetId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function transferFrom(address _from, address _to, uint256 _assetId) public {\n', '    require(_owns(_from, _assetId));\n', '    require(_approved(_to, _assetId));\n', '    require(_addressNotNull(_to));\n', '\n', '    _transfer(_from, _to, _assetId);\n', '  }\n', '\n', '  /*** PRIVATE FUNCTIONS ***/\n', '  /// @dev  Safety check on _to address to prevent against an unexpected 0x0 default.\n', '  function _addressNotNull(address _to) internal pure returns (bool) {\n', '    return _to != address(0);\n', '  }\n', '\n', '  /// @dev  For checking approval of transfer for address _to\n', '  function _approved(address _to, uint256 _assetId) internal view returns (bool) {\n', '    return preSaleItemIndexToApproved[_assetId] == _to;\n', '  }\n', '\n', '  /// @dev For creating CSC Collectible\n', '  function _createCollectible(bytes32 _collectibleName, address _owner) internal returns(uint256) {\n', '    \n', '    RarePreSaleItem memory _collectibleObj = RarePreSaleItem(\n', '      _collectibleName,\n', '      0,\n', '      address(0),\n', '      false\n', '    );\n', '\n', '    uint256 newCollectibleId = allPreSaleItems.push(_collectibleObj) - 1;\n', '    \n', '    // emit Created event\n', '    CollectibleCreated(_owner, newCollectibleId, _collectibleName, false);\n', '    \n', '    // This will assign ownership, and also emit the Transfer event as\n', '    // per ERC721 draft\n', '    _transfer(address(0), _owner, newCollectibleId);\n', '    \n', '    return newCollectibleId;\n', '  }\n', '\n', '  /// Check for token ownership\n', '  function _owns(address claimant, uint256 _assetId) internal view returns (bool) {\n', '    return claimant == preSaleItemIndexToOwner[_assetId];\n', '  }\n', '\n', '  /// @dev Assigns ownership of a specific Emoji to an address.\n', '  function _transfer(address _from, address _to, uint256 _assetId) internal {\n', '    // Updating the owner details of the ship\n', '    RarePreSaleItem memory _shipObj = allPreSaleItems[_assetId];\n', '    _shipObj.owner = _to;\n', '    allPreSaleItems[_assetId] = _shipObj;\n', '\n', "    // Since the number of emojis is capped to 2^32 we can't overflow this\n", '    ownershipTokenCount[_to]++;\n', '\n', '    //transfer ownership\n', '    preSaleItemIndexToOwner[_assetId] = _to;\n', '\n', "    // When creating new emojis _from is 0x0, but we can't account that address.\n", '    if (_from != address(0)) {\n', '      ownershipTokenCount[_from]--;\n', '      // clear any previously approved ownership exchange\n', '      delete preSaleItemIndexToApproved[_assetId];\n', '    }\n', '\n', '    // Emit the transfer event.\n', '    Transfer(_from, _to, _assetId);\n', '  }\n', '\n', '  /// @dev Checks if a given address currently has transferApproval for a particular RarePreSaleItem.\n', '  /// 0 is a valid value as it will be the starter\n', '  function _approvedFor(address _claimant, uint256 _assetId) internal view returns (bool) {\n', '      return preSaleItemIndexToApproved[_assetId] == _claimant;\n', '  }\n', '\n', '  function _getCollectibleDetails (uint256 _assetId) internal view returns(RarePreSaleItem) {\n', '    RarePreSaleItem storage _Obj = allPreSaleItems[_assetId];\n', '    return _Obj;\n', '  }\n', '\n', '  /// @dev Helps in fetching the attributes of the ship depending on the ship\n', '  /// assetId : The actual ERC721 Asset ID\n', '  /// sequenceId : Index w.r.t Ship type\n', '  function getShipDetails(uint256 _assetId) external view returns (\n', '    uint256 collectibleId,\n', '    string shipName,\n', '    uint256 boughtTimestamp,\n', '    address owner,\n', '    bool isRedeemed\n', '    ) {\n', '    RarePreSaleItem storage _collectibleObj = allPreSaleItems[_assetId];\n', '    collectibleId = _assetId;\n', '    shipName = bytes32ToString(_collectibleObj.collectibleName);\n', '    boughtTimestamp = _collectibleObj.boughtTimestamp;\n', '    owner = _collectibleObj.owner;\n', '    isRedeemed = _collectibleObj.isRedeemed;\n', '  }\n', '}\n', '\n', '/* Lucid Sight, Inc. ERC-721 CSC Collectilbe Sale Contract. \n', ' * @title CSCCollectibleSale\n', ' * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\n', ' */\n', 'contract CSCCollectibleSale is CSCCollectibleBase {\n', '  event SaleWinner(address owner, uint256 collectibleId, uint256 buyingPrice);\n', '  event CollectibleBidSuccess(address owner, uint256 collectibleId, uint256 newBidPrice, bool isActive);\n', '  event SaleCreated(uint256 tokenID, uint256 startingPrice, uint256 endingPrice, uint256 duration, uint64 startedAt, bool isActive, uint256 bidPrice);\n', '\n', '  //  SHIP DATATYPES & CONSTANTS\n', '  struct CollectibleSale {\n', '    // Current owner of NFT (ERC721)\n', '    address seller;\n', '    // Price (in wei) at beginning of sale (For Buying)\n', '    uint256 startingPrice;\n', '    // Price (in wei) at end of sale (For Buying)\n', '    uint256 endingPrice;\n', '    // Duration (in seconds) of sale\n', '    uint256 duration;\n', '    // Time when sale started\n', '    // NOTE: 0 if this sale has been concluded\n', '    uint64 startedAt;\n', '\n', '    // Flag denoting is the Sale stilla ctive\n', '    bool isActive;\n', '\n', '    // address of the wallet who had the maxBid\n', '    address highestBidder;\n', '\n', '    // address of the wallet who bought the asset\n', '    address buyer;\n', '\n', '    // ERC721 AssetID\n', '    uint256 tokenId;\n', '  }\n', '\n', '  // @dev ship Prices & price cap\n', '  uint256 public constant SALE_DURATION = 2592000;\n', '  \n', '  /// mapping holding details of the last person who had a successfull bid. used for giving back the last bid price until the asset is bought\n', '  mapping(uint256 => address) indexToBidderAddress;\n', '  mapping(address => mapping(uint256 => uint256)) addressToBidValue;\n', '\n', '  // A map from assetId to the bid increment\n', '  mapping ( uint256 => uint256 ) indexToPriceIncrement;\n', '  /// Map from assetId to bid price\n', '  mapping ( uint256 => uint256 ) indexToBidPrice;\n', '\n', '  // Map from token to their corresponding sale.\n', '  mapping (uint256 => CollectibleSale) tokenIdToSale;\n', '\n', '  /// @dev Adds an sale to the list of open sales. Also fires the\n', '  ///  SaleCreated event.\n', '  function _addSale(uint256 _assetId, CollectibleSale _sale) internal {\n', '      // Require that all sales have a duration of\n', '      // at least one minute.\n', '      require(_sale.duration >= 1 minutes);\n', '      \n', '      tokenIdToSale[_assetId] = _sale;\n', '      indexToBidPrice[_assetId] = _sale.endingPrice;\n', '\n', '      SaleCreated(\n', '          uint256(_assetId),\n', '          uint256(_sale.startingPrice),\n', '          uint256(_sale.endingPrice),\n', '          uint256(_sale.duration),\n', '          uint64(_sale.startedAt),\n', '          _sale.isActive,\n', '          indexToBidPrice[_assetId]\n', '      );\n', '  }\n', '\n', '  /// @dev Removes an sale from the list of open sales.\n', '  /// @param _assetId - ID of the token on sale\n', '  function _removeSale(uint256 _assetId) internal {\n', '      delete tokenIdToSale[_assetId];\n', '  }\n', '\n', '  function _bid(uint256 _assetId, address _buyer, uint256 _bidAmount) internal {\n', '    CollectibleSale storage _sale = tokenIdToSale[_assetId];\n', '    \n', '    require(_bidAmount >= indexToBidPrice[_assetId]);\n', '\n', '    uint256 _newBidPrice = _bidAmount + indexToPriceIncrement[_assetId];\n', '    indexToBidPrice[_assetId] = _newBidPrice;\n', '\n', '    _sale.highestBidder = _buyer;\n', '    _sale.endingPrice = _newBidPrice;\n', '\n', '    address lastBidder = indexToBidderAddress[_assetId];\n', '    \n', '    if(lastBidder != address(0)){\n', '      uint256 _value = addressToBidValue[lastBidder][_assetId];\n', '\n', '      indexToBidderAddress[_assetId] = _buyer;\n', '\n', '      addressToBidValue[lastBidder][_assetId] = 0;\n', '      addressToBidValue[_buyer][_assetId] = _bidAmount;\n', '\n', '      lastBidder.transfer(_value);\n', '    } else {\n', '      indexToBidderAddress[_assetId] = _buyer;\n', '      addressToBidValue[_buyer][_assetId] = _bidAmount;\n', '    }\n', '\n', '    // Check that the bid is greater than or equal to the current buyOut price\n', '    uint256 price = _currentPrice(_sale);\n', '\n', '    if(_bidAmount >= price) {\n', '      _sale.buyer = _buyer;\n', '      _sale.isActive = false;\n', '\n', '      _removeSale(_assetId);\n', '\n', '      uint256 bidExcess = _bidAmount - price;\n', '      _buyer.transfer(bidExcess);\n', '\n', '      SaleWinner(_buyer, _assetId, _bidAmount);\n', '      _transfer(address(this), _buyer, _assetId);\n', '    } else {\n', '      tokenIdToSale[_assetId] = _sale;\n', '\n', '      CollectibleBidSuccess(_buyer, _assetId, _sale.endingPrice, _sale.isActive);\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if the FT (ERC721) is on sale.\n', '  function _isOnSale(CollectibleSale memory _sale) internal view returns (bool) {\n', '      return (_sale.startedAt > 0 && _sale.isActive);\n', '  }\n', '\n', '  /// @dev Returns current price of a Collectible (ERC721) on sale. Broken into two\n', '  ///  functions (this one, that computes the duration from the sale\n', '  ///  structure, and the other that does the price computation) so we\n', '  ///  can easily test that the price computation works correctly.\n', '  function _currentPrice(CollectibleSale memory _sale) internal view returns (uint256) {\n', '      uint256 secondsPassed = 0;\n', '\n', '      // A bit of insurance against negative values (or wraparound).\n', '      // Probably not necessary (since Ethereum guarnatees that the\n', "      // now variable doesn't ever go backwards).\n", '      if (now > _sale.startedAt) {\n', '          secondsPassed = now - _sale.startedAt;\n', '      }\n', '\n', '      return _computeCurrentPrice(\n', '          _sale.startingPrice,\n', '          _sale.endingPrice,\n', '          _sale.duration,\n', '          secondsPassed\n', '      );\n', '  }\n', '\n', '  /// @dev Computes the current price of an sale. Factored out\n', '  ///  from _currentPrice so we can run extensive unit tests.\n', '  ///  When testing, make this function public and turn on\n', '  ///  `Current price computation` test suite.\n', '  function _computeCurrentPrice(uint256 _startingPrice, uint256 _endingPrice, uint256 _duration, uint256 _secondsPassed) internal pure returns (uint256) {\n', "      // NOTE: We don't use SafeMath (or similar) in this function because\n", '      //  all of our public functions carefully cap the maximum values for\n', '      //  time (at 64-bits) and currency (at 128-bits). _duration is\n', '      //  also known to be non-zero (see the require() statement in\n', '      //  _addSale())\n', '      if (_secondsPassed >= _duration) {\n', "          // We've reached the end of the dynamic pricing portion\n", '          // of the sale, just return the end price.\n', '          return _endingPrice;\n', '      } else {\n', '          // Starting price can be higher than ending price (and often is!), so\n', '          // this delta can be negative.\n', '          int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\n', '\n', "          // This multiplication can't overflow, _secondsPassed will easily fit within\n", '          // 64-bits, and totalPriceChange will easily fit within 128-bits, their product\n', '          // will always fit within 256-bits.\n', '          int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\n', '\n', '          // currentPriceChange can be negative, but if so, will have a magnitude\n', '          // less that _startingPrice. Thus, this result will always end up positive.\n', '          int256 currentPrice = int256(_startingPrice) + currentPriceChange;\n', '\n', '          return uint256(currentPrice);\n', '      }\n', '  }\n', '  \n', '  /// @dev Escrows the ERC721 Token, assigning ownership to this contract.\n', '  /// Throws if the escrow fails.\n', '  function _escrow(address _owner, uint256 _tokenId) internal {\n', '    transferFrom(_owner, this, _tokenId);\n', '  }\n', '\n', '  function getBuyPrice(uint256 _assetId) external view returns(uint256 _price){\n', '    CollectibleSale memory _sale = tokenIdToSale[_assetId];\n', '    \n', '    return _currentPrice(_sale);\n', '  }\n', '  \n', '  function getBidPrice(uint256 _assetId) external view returns(uint256 _price){\n', '    return indexToBidPrice[_assetId];\n', '  }\n', '\n', '  /// @dev Creates and begins a new sale.\n', '  function _createSale(uint256 _tokenId, uint256 _startingPrice, uint256 _endingPrice, uint64 _duration, address _seller) internal {\n', "      // Sanity check that no inputs overflow how many bits we've allocated\n", '      // to store them in the sale struct.\n', '      require(_startingPrice == uint256(uint128(_startingPrice)));\n', '      require(_endingPrice == uint256(uint128(_endingPrice)));\n', '      require(_duration == uint256(uint64(_duration)));\n', '\n', '      CollectibleSale memory sale = CollectibleSale(\n', '          _seller,\n', '          uint128(_startingPrice),\n', '          uint128(_endingPrice),\n', '          uint64(_duration),\n', '          uint64(now),\n', '          true,\n', '          address(this),\n', '          address(this),\n', '          uint256(_tokenId)\n', '      );\n', '      _addSale(_tokenId, sale);\n', '  }\n', '\n', '  function _buy(uint256 _assetId, address _buyer, uint256 _price) internal {\n', '\n', '    CollectibleSale storage _sale = tokenIdToSale[_assetId];\n', '    address lastBidder = indexToBidderAddress[_assetId];\n', '    \n', '    if(lastBidder != address(0)){\n', '      uint256 _value = addressToBidValue[lastBidder][_assetId];\n', '\n', '      indexToBidderAddress[_assetId] = _buyer;\n', '\n', '      addressToBidValue[lastBidder][_assetId] = 0;\n', '      addressToBidValue[_buyer][_assetId] = _price;\n', '\n', '      lastBidder.transfer(_value);\n', '    }\n', '\n', '    // Check that the bid is greater than or equal to the current buyOut price\n', '    uint256 currentPrice = _currentPrice(_sale);\n', '\n', '    require(_price >= currentPrice);\n', '    _sale.buyer = _buyer;\n', '    _sale.isActive = false;\n', '\n', '    _removeSale(_assetId);\n', '\n', '    uint256 bidExcess = _price - currentPrice;\n', '    _buyer.transfer(bidExcess);\n', '\n', '    SaleWinner(_buyer, _assetId, _price);\n', '    _transfer(address(this), _buyer, _assetId);\n', '  }\n', '\n', '  /// @dev Returns sales info for an CSLCollectibles (ERC721) on sale.\n', '  /// @param _assetId - ID of the token on sale\n', '  function getSale(uint256 _assetId) external view returns (address seller, uint256 startingPrice, uint256 endingPrice, uint256 duration, uint256 startedAt, bool isActive, address owner, address highestBidder) {\n', '      CollectibleSale memory sale = tokenIdToSale[_assetId];\n', '      require(_isOnSale(sale));\n', '      return (\n', '          sale.seller,\n', '          sale.startingPrice,\n', '          sale.endingPrice,\n', '          sale.duration,\n', '          sale.startedAt,\n', '          sale.isActive,\n', '          sale.buyer,\n', '          sale.highestBidder\n', '      );\n', '  }\n', '}\n', '\n', '/* Lucid Sight, Inc. ERC-721 Collectibles. \n', ' * @title LSNFT - Lucid Sight, Inc. Non-Fungible Token\n', ' * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\n', ' */\n', 'contract CSCRarePreSaleManager is CSCCollectibleSale {\n', '  event RefundClaimed(address owner);\n', '\n', '  bool CSCPreSaleInit = false;\n', '\n', '  /// @dev Constructor creates a reference to the NFT (ERC721) ownership contract\n', '  function CSCRarePreSaleManager() public {\n', '      require(msg.sender != address(0));\n', '      paused = true;\n', '      error = false;\n', '      gameManagerPrimary = msg.sender;\n', '  }\n', '\n', '  function addToApprovedAddress (address _newAddr) onlyGameManager {\n', '    require(_newAddr != address(0));\n', '    require(!approvedAddressList[_newAddr]);\n', '    approvedAddressList[_newAddr] = true;\n', '  }\n', '\n', '  function removeFromApprovedAddress (address _newAddr) onlyGameManager {\n', '    require(_newAddr != address(0));\n', '    require(approvedAddressList[_newAddr]);\n', '    approvedAddressList[_newAddr] = false;\n', '  }\n', '\n', '  function createPreSaleShip(string collectibleName, uint256 startingPrice, uint256 bidPrice) whenNotPaused returns (uint256){\n', '    require(approvedAddressList[msg.sender] || msg.sender == gameManagerPrimary || msg.sender == gameManagerSecondary);\n', '    \n', '    uint256 assetId = _createCollectible(stringToBytes32(collectibleName), address(this));\n', '\n', '    indexToPriceIncrement[assetId] = bidPrice;\n', '\n', '    _createSale(assetId, startingPrice, bidPrice, uint64(SALE_DURATION), address(this));\n', '  }\n', '\n', '  function() external payable {\n', '  }\n', '\n', '  /// @dev Bid Function which call the interncal bid function\n', '  /// after doing all the pre-checks required to initiate a bid\n', '  function bid(uint256 _assetId) external whenNotPaused payable {\n', '    require(msg.sender != address(0));\n', '    require(msg.sender != address(this));\n', '    CollectibleSale memory _sale = tokenIdToSale[_assetId];\n', '    require(_isOnSale(_sale));\n', '    \n', '    address seller = _sale.seller;\n', '\n', '    _bid(_assetId, msg.sender, msg.value);\n', '  }\n', '\n', '  /// @dev BuyNow Function which call the interncal buy function\n', '  /// after doing all the pre-checks required to initiate a buy\n', '  function buyNow(uint256 _assetId) external whenNotPaused payable {\n', '    require(msg.sender != address(0));\n', '    require(msg.sender != address(this));\n', '    CollectibleSale memory _sale = tokenIdToSale[_assetId];\n', '    require(_isOnSale(_sale));\n', '    \n', '    address seller = _sale.seller;\n', '\n', '    _buy(_assetId, msg.sender, msg.value);\n', '  }\n', '\n', '  /// @dev Override unpause so it requires all external contract addresses\n', "  ///  to be set before contract can be unpaused. Also, we can't have\n", '  ///  newContractAddress set either, because then the contract was upgraded.\n', '  /// @notice This is public rather than external so we can call super.unpause\n', '  ///  without using an expensive CALL.\n', '  function unpause() public onlyGameManager whenPaused {\n', '      // Actually unpause the contract.\n', '      super.unpause();\n', '  }\n', '\n', "  /// @dev Remove all Ether from the contract, which is the owner's cuts\n", '  ///  as well as any Ether sent directly to the contract address.\n', '  ///  Always transfers to the NFT (ERC721) contract, but can be called either by\n', '  ///  the owner or the NFT (ERC721) contract.\n', '  function withdrawBalance() onlyBanker {\n', '      // We are using this boolean method to make sure that even if one fails it will still work\n', '      bankManager.transfer(this.balance);\n', '  }\n', '  \n', '  function preSaleInit() onlyGameManager {\n', '    require(!CSCPreSaleInit);\n', '    require(allPreSaleItems.length == 0);\n', '      \n', '    CSCPreSaleInit = true;\n', '\n', '    bytes32[6] memory attributes = [bytes32(999), bytes32(999), bytes32(999), bytes32(999), bytes32(999), bytes32(999)];\n', '    //Fill in index 0 to null requests\n', '    RarePreSaleItem memory _Obj = RarePreSaleItem(stringToBytes32("Dummy"), 0, address(this), true);\n', '    allPreSaleItems.push(_Obj);\n', '  } \n', '}']
