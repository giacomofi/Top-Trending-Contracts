['pragma solidity ^0.4.24;\n', '\n', '/*\n', ' * Part of Daonomic platform (daonomic.io)\n', ' */\n', '\n', 'contract Whitelist {\n', '  function isInWhitelist(address addr) view public returns (bool);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract WhitelistImpl is Ownable, Whitelist {\n', '  mapping(address => bool) whitelist;\n', '  event WhitelistChange(address indexed addr, bool allow);\n', '\n', '  function isInWhitelist(address addr) constant public returns (bool) {\n', '    return whitelist[addr];\n', '  }\n', '\n', '  function addToWhitelist(address[] _addresses) onlyOwner public {\n', '    for (uint i = 0; i < _addresses.length; i++) {\n', '      setWhitelistInternal(_addresses[i], true);\n', '    }\n', '  }\n', '\n', '  function removeFromWhitelist(address[] _addresses) onlyOwner public {\n', '    for (uint i = 0; i < _addresses.length; i++) {\n', '      setWhitelistInternal(_addresses[i], false);\n', '    }\n', '  }\n', '\n', '  function setWhitelist(address addr, bool allow) onlyOwner public {\n', '    setWhitelistInternal(addr, allow);\n', '  }\n', '\n', '  function setWhitelistInternal(address addr, bool allow) internal {\n', '    whitelist[addr] = allow;\n', '    emit WhitelistChange(addr, allow);\n', '  }\n', '}']