['pragma solidity 0.4.24;\n', '\n', '// File: contracts/flavours/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/flavours/Whitelisted.sol\n', '\n', 'contract Whitelisted is Ownable {\n', '\n', '    /// @dev True if whitelist enabled\n', '    bool public whitelistEnabled = true;\n', '\n', '    /// @dev ICO whitelist\n', '    mapping(address => bool) public whitelist;\n', '\n', '    event ICOWhitelisted(address indexed addr);\n', '    event ICOBlacklisted(address indexed addr);\n', '\n', '    modifier onlyWhitelisted {\n', '        require(!whitelistEnabled || whitelist[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Add address to ICO whitelist\n', '     * @param address_ Investor address\n', '     */\n', '    function whitelist(address address_) external onlyOwner {\n', '        whitelist[address_] = true;\n', '        emit ICOWhitelisted(address_);\n', '    }\n', '\n', '    /**\n', '     * Remove address from ICO whitelist\n', '     * @param address_ Investor address\n', '     */\n', '    function blacklist(address address_) external onlyOwner {\n', '        delete whitelist[address_];\n', '        emit ICOBlacklisted(address_);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if given address in ICO whitelist\n', '     */\n', '    function whitelisted(address address_) public view returns (bool) {\n', '        if (whitelistEnabled) {\n', '            return whitelist[address_];\n', '        } else {\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Enable whitelisting\n', '     */\n', '    function enableWhitelist() public onlyOwner {\n', '        whitelistEnabled = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Disable whitelisting\n', '     */\n', '    function disableWhitelist() public onlyOwner {\n', '        whitelistEnabled = false;\n', '    }\n', '}\n', '\n', '// File: contracts/interface/ERC20Token.sol\n', '\n', 'interface ERC20Token {\n', '    function balanceOf(address owner_) external returns (uint);\n', '    function allowance(address owner_, address spender_) external returns (uint);\n', '    function transferFrom(address from_, address to_, uint value_) external returns (bool);\n', '}\n', '\n', '// File: contracts/base/BaseICO.sol\n', '\n', '/**\n', ' * @dev Base abstract smart contract for any ICO\n', ' */\n', 'contract BaseICO is Ownable, Whitelisted {\n', '\n', '    /// @dev ICO state\n', '    enum State {\n', '\n', '        // ICO is not active and not started\n', '        Inactive,\n', '\n', '        // ICO is active, tokens can be distributed among investors.\n', '        // ICO parameters (end date, hard/low caps) cannot be changed.\n', '        Active,\n', '\n', '        // ICO is suspended, tokens cannot be distributed among investors.\n', '        // ICO can be resumed to `Active state`.\n', '        // ICO parameters (end date, hard/low caps) may changed.\n', '        Suspended,\n', '\n', '        // ICO is terminated by owner, ICO cannot be resumed.\n', '        Terminated,\n', '\n', '        // ICO goals are not reached,\n', '        // ICO terminated and cannot be resumed.\n', '        NotCompleted,\n', '\n', '        // ICO completed, ICO goals reached successfully,\n', '        // ICO terminated and cannot be resumed.\n', '        Completed\n', '    }\n', '\n', '    /// @dev Token which controlled by this ICO\n', '    ERC20Token public token;\n', '\n', '    /// @dev Current ICO state.\n', '    State public state;\n', '\n', '    /// @dev ICO start date seconds since epoch.\n', '    uint public startAt;\n', '\n', '    /// @dev ICO end date seconds since epoch.\n', '    uint public endAt;\n', '\n', '    /// @dev Minimal amount of investments in wei needed for successful ICO\n', '    uint public lowCapWei;\n', '\n', '    /// @dev Maximal amount of investments in wei for this ICO.\n', '    /// If reached ICO will be in `Completed` state.\n', '    uint public hardCapWei;\n', '\n', '    /// @dev Minimal amount of investments in wei per investor.\n', '    uint public lowCapTxWei;\n', '\n', '    /// @dev Maximal amount of investments in wei per investor.\n', '    uint public hardCapTxWei;\n', '\n', '    /// @dev Number of investments collected by this ICO\n', '    uint public collectedWei;\n', '\n', '    /// @dev Number of sold tokens by this ICO\n', '    uint public tokensSold;\n', '\n', '    /// @dev Team wallet used to collect funds\n', '    address public teamWallet;\n', '\n', '    // ICO state transition events\n', '    event ICOStarted(uint indexed endAt, uint lowCapWei, uint hardCapWei, uint lowCapTxWei, uint hardCapTxWei);\n', '    event ICOResumed(uint indexed endAt, uint lowCapWei, uint hardCapWei, uint lowCapTxWei, uint hardCapTxWei);\n', '    event ICOSuspended();\n', '    event ICOTerminated();\n', '    event ICONotCompleted();\n', '    event ICOCompleted(uint collectedWei);\n', '    event ICOInvestment(address indexed from, uint investedWei, uint tokens, uint8 bonusPct);\n', '\n', '    modifier isSuspended() {\n', '        require(state == State.Suspended);\n', '        _;\n', '    }\n', '\n', '    modifier isActive() {\n', '        require(state == State.Active);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Trigger start of ICO.\n', '     * @param endAt_ ICO end date, seconds since epoch.\n', '     */\n', '    function start(uint endAt_) public onlyOwner {\n', '        require(endAt_ > block.timestamp && state == State.Inactive);\n', '        endAt = endAt_;\n', '        startAt = block.timestamp;\n', '        state = State.Active;\n', '        emit ICOStarted(endAt, lowCapWei, hardCapWei, lowCapTxWei, hardCapTxWei);\n', '    }\n', '\n', '    /**\n', '     * @dev Suspend this ICO.\n', '     * ICO can be activated later by calling `resume()` function.\n', '     * In suspend state, ICO owner can change basic ICO parameter using `tune()` function,\n', '     * tokens cannot be distributed among investors.\n', '     */\n', '    function suspend() public onlyOwner isActive {\n', '        state = State.Suspended;\n', '        emit ICOSuspended();\n', '    }\n', '\n', '    /**\n', '     * @dev Terminate the ICO.\n', '     * ICO goals are not reached, ICO terminated and cannot be resumed.\n', '     */\n', '    function terminate() public onlyOwner {\n', '        require(state != State.Terminated &&\n', '        state != State.NotCompleted &&\n', '        state != State.Completed);\n', '        state = State.Terminated;\n', '        emit ICOTerminated();\n', '    }\n', '\n', '    /**\n', '     * @dev Change basic ICO parameters. Can be done only during `Suspended` state.\n', '     * Any provided parameter is used only if it is not zero.\n', '     * @param endAt_ ICO end date seconds since epoch. Used if it is not zero.\n', '     * @param lowCapWei_ ICO low capacity. Used if it is not zero.\n', '     * @param hardCapWei_ ICO hard capacity. Used if it is not zero.\n', '     * @param lowCapTxWei_ Min limit for ICO per transaction\n', '     * @param hardCapTxWei_ Hard limit for ICO per transaction\n', '     */\n', '    function tune(uint endAt_,\n', '        uint lowCapWei_,\n', '        uint hardCapWei_,\n', '        uint lowCapTxWei_,\n', '        uint hardCapTxWei_) public onlyOwner isSuspended {\n', '        if (endAt_ > block.timestamp) {\n', '            endAt = endAt_;\n', '        }\n', '        if (lowCapWei_ > 0) {\n', '            lowCapWei = lowCapWei_;\n', '        }\n', '        if (hardCapWei_ > 0) {\n', '            hardCapWei = hardCapWei_;\n', '        }\n', '        if (lowCapTxWei_ > 0) {\n', '            lowCapTxWei = lowCapTxWei_;\n', '        }\n', '        if (hardCapTxWei_ > 0) {\n', '            hardCapTxWei = hardCapTxWei_;\n', '        }\n', '        require(lowCapWei <= hardCapWei && lowCapTxWei <= hardCapTxWei);\n', '        touch();\n', '    }\n', '\n', '    /**\n', '     * @dev Resume a previously suspended ICO.\n', '     */\n', '    function resume() public onlyOwner isSuspended {\n', '        state = State.Active;\n', '        emit ICOResumed(endAt, lowCapWei, hardCapWei, lowCapTxWei, hardCapTxWei);\n', '        touch();\n', '    }\n', '\n', '    /**\n', '     * @dev Recalculate ICO state based on current block time.\n', '     * Should be called periodically by ICO owner.\n', '     */\n', '    function touch() public;\n', '\n', '    /**\n', '     * @dev Buy tokens\n', '     */\n', '    function buyTokens() public payable;\n', '\n', '    /**\n', '     * @dev Send ether to the fund collection wallet\n', '     */\n', '    function forwardFunds() internal {\n', '        teamWallet.transfer(msg.value);\n', '    }\n', '}\n', '\n', '// File: contracts/commons/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '// File: contracts/IonChainICO.sol\n', '\n', '/**\n', ' * @title IONC tokens ICO contract.\n', ' */\n', 'contract IonChainICO is BaseICO {\n', '    using SafeMath for uint;\n', '\n', '    /// @dev 6 decimals for token\n', '    uint internal constant ONE_TOKEN = 1e6;\n', '\n', '    /// @dev 1e18 WEI == 1ETH == 125000 tokens\n', '    uint public constant ETH_TOKEN_EXCHANGE_RATIO = 125000;\n', '\n', '    /// @dev Token holder\n', '    address public tokenHolder;\n', '\n', '    // @dev personal cap for first 48 hours\n', '    uint public constant PERSONAL_CAP = 1.6 ether;\n', '\n', '    // @dev timestamp for end of personal cap\n', '    uint public personalCapEndAt;\n', '\n', '    // @dev purchases till personal cap limit end\n', '    mapping(address => uint) internal personalPurchases;\n', '\n', '    constructor(address icoToken_,\n', '            address teamWallet_,\n', '            address tokenHolder_,\n', '            uint lowCapWei_,\n', '            uint hardCapWei_,\n', '            uint lowCapTxWei_,\n', '            uint hardCapTxWei_) public {\n', '        require(icoToken_ != address(0) && teamWallet_ != address(0));\n', '        token = ERC20Token(icoToken_);\n', '        teamWallet = teamWallet_;\n', '        tokenHolder = tokenHolder_;\n', '        state = State.Inactive;\n', '        lowCapWei = lowCapWei_;\n', '        hardCapWei = hardCapWei_;\n', '        lowCapTxWei = lowCapTxWei_;\n', '        hardCapTxWei = hardCapTxWei_;\n', '    }\n', '\n', '    /**\n', '     * Accept direct payments\n', '     */\n', '    function() external payable {\n', '        buyTokens();\n', '    }\n', '\n', '\n', '    function start(uint endAt_) onlyOwner public {\n', '        uint requireTokens = hardCapWei.mul(ETH_TOKEN_EXCHANGE_RATIO).mul(ONE_TOKEN).div(1 ether);\n', '        require(token.balanceOf(tokenHolder) >= requireTokens\n', '            && token.allowance(tokenHolder, address(this)) >= requireTokens);\n', '        personalCapEndAt = block.timestamp + 48 hours;\n', '        super.start(endAt_);\n', '    }\n', '\n', '    /**\n', '     * @dev Recalculate ICO state based on current block time.\n', '     * Should be called periodically by ICO owner.\n', '     */\n', '    function touch() public {\n', '        if (state != State.Active && state != State.Suspended) {\n', '            return;\n', '        }\n', '        if (collectedWei >= hardCapWei) {\n', '            state = State.Completed;\n', '            endAt = block.timestamp;\n', '            emit ICOCompleted(collectedWei);\n', '        } else if (block.timestamp >= endAt) {\n', '            if (collectedWei < lowCapWei) {\n', '                state = State.NotCompleted;\n', '                emit ICONotCompleted();\n', '            } else {\n', '                state = State.Completed;\n', '                emit ICOCompleted(collectedWei);\n', '            }\n', '        }\n', '    }\n', '\n', '    function buyTokens() public onlyWhitelisted payable {\n', '        require(state == State.Active &&\n', '            block.timestamp <= endAt &&\n', '            msg.value >= lowCapTxWei &&\n', '            msg.value <= hardCapTxWei &&\n', '            collectedWei + msg.value <= hardCapWei);\n', '        uint amountWei = msg.value;\n', '\n', '        // check personal cap\n', '        if (block.timestamp <= personalCapEndAt) {\n', '            personalPurchases[msg.sender] = personalPurchases[msg.sender].add(amountWei);\n', '            require(personalPurchases[msg.sender] <= PERSONAL_CAP);\n', '        }\n', '\n', '        uint itokens = amountWei.mul(ETH_TOKEN_EXCHANGE_RATIO).mul(ONE_TOKEN).div(1 ether);\n', '        collectedWei = collectedWei.add(amountWei);\n', '\n', '        emit ICOInvestment(msg.sender, amountWei, itokens, 0);\n', '        // Transfer tokens to investor\n', '        token.transferFrom(tokenHolder, msg.sender, itokens);\n', '        forwardFunds();\n', '        touch();\n', '    }\n', '}']