['// Project: Proof of Toss - https://toss.pro\n', '// v12, 2018-04-23\n', '// Authors: Ivan Fedorov and Dmitry Borodin\n', '// Copying in whole or in part is prohibited.\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', '// (A1)\n', '// The main contract for the sale and management of rounds.\n', '// 0000000000000000000000000000000000000000000000000000000000000000\n', 'contract Crowdsale{\n', '\n', '    uint256 constant USER_UNPAUSE_TOKEN_TIMEOUT =  60 days;\n', '    uint256 constant FORCED_REFUND_TIMEOUT1     = 400 days;\n', '    uint256 constant FORCED_REFUND_TIMEOUT2     = 600 days;\n', '    uint256 constant ROUND_PROLONGATE           =   0 days;\n', '    uint256 constant BURN_TOKENS_TIME           =  90 days;\n', '\n', '    using SafeMath for uint256;\n', '\n', '    enum TokenSaleType {round1, round2}\n', '    TokenSaleType public TokenSale = TokenSaleType.round2;\n', '\n', '    //              0             1         2        3        4        5      6       7        8     9\n', '    enum Roles {beneficiary, accountant, manager, observer, bounty, company, team, founders, fund, fees}\n', '\n', '    Creator public creator;\n', '    bool creator2;\n', '    bool isBegin=false;\n', '    Token public token;\n', '    RefundVault public vault;\n', '    AllocationTOSS public allocation;\n', '\n', '    bool public isFinalized;\n', '    bool public isInitialized;\n', '    bool public isPausedCrowdsale;\n', '    bool public chargeBonuses;\n', '    bool public canFirstMint=true;\n', '\n', '    // Initially, all next 7+ roles/wallets are given to the Manager. The Manager is an employee of the company\n', '    // with knowledge of IT, who publishes the contract and sets it up. However, money and tokens require\n', '    // a Beneficiary and other roles (Accountant, Team, etc.). The Manager will not have the right\n', '    // to receive them. To enable this, the Manager must either enter specific wallets here, or perform\n', '    // this via method changeWallet. In the finalization methods it is written which wallet and\n', '    // what percentage of tokens are received.\n', '    address[10] public wallets = [\n', '\n', '        // Beneficiary\n', '        // Receives all the money (when finalizing Round1 & Round2)\n', '        0xAa951F7c52055B89d3F281c73d557275070cBBfb,\n', '\n', '        // Accountant\n', '        // Receives all the tokens for non-ETH investors (when finalizing Round1 & Round2)\n', '        0xD29f0aE1621F4Be48C4DF438038E38af546DA498,\n', '\n', '        // Manager\n', '        // All rights except the rights to receive tokens or money. Has the right to change any other\n', '        // wallets (Beneficiary, Accountant, ...), but only if the round has not started. Once the\n', '        // round is initialized, the Manager has lost all rights to change the wallets.\n', '        // If the TokenSale is conducted by one person, then nothing needs to be changed. Permit all 7 roles\n', '        // point to a single wallet.\n', '        msg.sender,\n', '\n', '        // Observer\n', '        // Has only the right to call paymentsInOtherCurrency (please read the document)\n', '        0x8a91aC199440Da0B45B2E278f3fE616b1bCcC494,\n', '\n', '        // Bounty - 7% tokens\n', '        0xd7AC0393e2B29D8aC6221CF69c27171aba6278c4,\n', '\n', '        // Company, White list 1%\n', '        0x765f60E314766Bc25eb2a9F66991Fe867D42A449,\n', '\n', '        // Team, 6%, freeze 1+1 year\n', '        0xF9f0c53c07803a2670a354F3de88482393ABdBac,\n', '\n', '        // Founders, 10% freeze 1+1 year\n', '        0x61628D884b5F137c3D3e0b04b90DaE4402f32510,\n', '\n', '        // Fund, 6%\n', '        0xd833899Ea1b84E980daA13553CE13D1512bF0774,\n', '\n', '        // Fees, 7% money\n', '        0xEB29e654AFF7658394C9d413dDC66711ADD44F59\n', '\n', '    ];\n', '\n', '\n', '\n', '    struct Bonus {\n', '        uint256 value;\n', '        uint256 procent;\n', '        uint256 freezeTime;\n', '    }\n', '\n', '    struct Profit {\n', '        uint256 percent;\n', '        uint256 duration;\n', '    }\n', '\n', '    struct Freezed {\n', '        uint256 value;\n', '        uint256 dateTo;\n', '    }\n', '\n', '    Bonus[] public bonuses;\n', '    Profit[] public profits;\n', '\n', '\n', '    uint256 public startTime= 1524560400;\n', '    uint256 public endTime  = 1529830799;\n', '    uint256 public renewal;\n', '\n', '    // How many tokens (excluding the bonus) are transferred to the investor in exchange for 1 ETH\n', '    // **QUINTILLIONS** 10^18 for human, *10**18 for Solidity, 1e18 for MyEtherWallet (MEW).\n', '    // Example: if 1ETH = 40.5 Token ==> use 40500 finney\n', '    uint256 public rate = 10000 ether;\n', '\n', '    // ETH/USD rate in US$\n', '    // **QUINTILLIONS** 10^18 / *10**18 / 1e18. Example: ETH/USD=$1000 ==> use 1000*10**18 (Solidity) or 1000 ether or 1000e18 (MEW)\n', '    uint256 public exchange  = 700 ether; // not in use\n', '\n', '    // If the round does not attain this value before the closing date, the round is recognized as a\n', '    // failure and investors take the money back (the founders will not interfere in any way).\n', '    // **QUINTILLIONS** 10^18 / *10**18 / 1e18. Example: softcap=15ETH ==> use 15*10**18 (Solidity) or 15e18 (MEW)\n', '    uint256 public softCap = 8500 ether;\n', '\n', '    // The maximum possible amount of income\n', '    // **QUINTILLIONS** 10^18 / *10**18 / 1e18. Example: hardcap=123.45ETH ==> use 123450*10**15 (Solidity) or 12345e15 (MEW)\n', '    uint256 public hardCap = 71500 ether;\n', '\n', '    // If the last payment is slightly higher than the hardcap, then the usual contracts do\n', '    // not accept it, because it goes beyond the hardcap. However it is more reasonable to accept the\n', '    // last payment, very slightly raising the hardcap. The value indicates by how many ETH the\n', '    // last payment can exceed the hardcap to allow it to be paid. Immediately after this payment, the\n', '    // round closes. The funders should write here a small number, not more than 1% of the CAP.\n', '    // Can be equal to zero, to cancel.\n', '    // **QUINTILLIONS** 10^18 / *10**18 / 1e18\n', '    uint256 public overLimit = 20 ether;\n', '\n', '    // The minimum possible payment from an investor in ETH. Payments below this value will be rejected.\n', '    // **QUINTILLIONS** 10^18 / *10**18 / 1e18. Example: minPay=0.1ETH ==> use 100*10**15 (Solidity) or 100e15 (MEW)\n', '    uint256 public minPay = 71 finney;\n', '\n', '    uint256 public maxAllProfit = 30;\n', '\n', '    uint256 public ethWeiRaised;\n', '    uint256 public nonEthWeiRaised;\n', '    uint256 public weiRound1;\n', '    uint256 public tokenReserved;\n', '\n', '    uint256 public totalSaledToken;\n', '\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    event Finalized();\n', '    event Initialized();\n', '\n', '    function Crowdsale(Creator _creator) public\n', '    {\n', '        creator2=true;\n', '        creator=_creator;\n', '    }\n', '\n', '    function onlyAdmin(bool forObserver) internal view {\n', '        require(wallets[uint8(Roles.manager)] == msg.sender || wallets[uint8(Roles.beneficiary)] == msg.sender ||\n', '            forObserver==true && wallets[uint8(Roles.observer)] == msg.sender);\n', '    }\n', '\n', '    // Setting of basic parameters, analog of class constructor\n', '    // @ Do I have to use the function      see your scenario\n', '    // @ When it is possible to call        before Round 1/2\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          admins\n', '    function begin() internal\n', '    {\n', '        if (isBegin) return;\n', '        isBegin=true;\n', '\n', '        token = creator.createToken();\n', '        if (creator2) {\n', '            vault = creator.createRefund();\n', '        }\n', '\n', '        token.setUnpausedWallet(wallets[uint8(Roles.accountant)], true);\n', '        token.setUnpausedWallet(wallets[uint8(Roles.manager)], true);\n', '        token.setUnpausedWallet(wallets[uint8(Roles.bounty)], true);\n', '        token.setUnpausedWallet(wallets[uint8(Roles.company)], true);\n', '        token.setUnpausedWallet(wallets[uint8(Roles.observer)], true);\n', '\n', '        bonuses.push(Bonus(71 ether, 30, 30*5 days));\n', '\n', '        profits.push(Profit(15,1 days));\n', '        profits.push(Profit(10,2 days));\n', '        profits.push(Profit(5, 4 days));\n', '\n', '    }\n', '\n', '\n', '\n', '    // Issue of tokens for the zero round, it is usually called: private pre-sale (Round 0)\n', '    // @ Do I have to use the function      may be\n', '    // @ When it is possible to call        before Round 1/2\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          admins\n', '    function firstMintRound0(uint256 _amount) public {\n', '        onlyAdmin(false);\n', '        require(canFirstMint);\n', '        begin();\n', '        token.mint(wallets[uint8(Roles.accountant)],_amount);\n', '    }\n', '\n', '    // info\n', '    function totalSupply() external view returns (uint256){\n', '        return token.totalSupply();\n', '    }\n', '\n', '    // Returns the name of the current round in plain text. Constant.\n', '    function getTokenSaleType() external view returns(string){\n', '        return (TokenSale == TokenSaleType.round1)?&#39;round1&#39;:&#39;round2&#39;;\n', '    }\n', '\n', '    // Transfers the funds of the investor to the contract of return of funds. Internal.\n', '    function forwardFunds() internal {\n', '        if(address(vault) != 0x0){\n', '            vault.deposit.value(msg.value)(msg.sender);\n', '        }else {\n', '            if(address(this).balance > 0){\n', '                wallets[uint8(Roles.beneficiary)].transfer(address(this).balance);\n', '            }\n', '        }\n', '\n', '    }\n', '\n', '    // Check for the possibility of buying tokens. Inside. Constant.\n', '    function validPurchase() internal view returns (bool) {\n', '\n', '        // The round started and did not end\n', '        bool withinPeriod = (now > startTime && now < endTime.add(renewal));\n', '\n', '        // Rate is greater than or equal to the minimum\n', '        bool nonZeroPurchase = msg.value >= minPay;\n', '\n', '        // hardCap is not reached, and in the event of a transaction, it will not be exceeded by more than OverLimit\n', '        bool withinCap = msg.value <= hardCap.sub(weiRaised()).add(overLimit);\n', '\n', '        // round is initialized and no "Pause of trading" is set\n', '        return withinPeriod && nonZeroPurchase && withinCap && isInitialized && !isPausedCrowdsale;\n', '    }\n', '\n', '    // Check for the ability to finalize the round. Constant.\n', '    function hasEnded() public view returns (bool) {\n', '\n', '        bool timeReached = now > endTime.add(renewal);\n', '\n', '        bool capReached = weiRaised() >= hardCap;\n', '\n', '        return (timeReached || capReached) && isInitialized;\n', '    }\n', '\n', '    // Finalize. Only available to the Manager and the Beneficiary. If the round failed, then\n', '    // anyone can call the finalization to unlock the return of funds to investors\n', '    // You must call a function to finalize each round (after the Round1 & after the Round2)\n', '    // @ Do I have to use the function      yes\n', '    // @ When it is possible to call        after end of Round1 & Round2\n', '    // @ When it is launched automatically  no\n', '    // @ Who can call the function          admins or anybody (if round is failed)\n', '    function finalize() public {\n', '\n', '        require(wallets[uint8(Roles.manager)] == msg.sender || wallets[uint8(Roles.beneficiary)] == msg.sender || !goalReached());\n', '        require(!isFinalized);\n', '        require(hasEnded() || ((wallets[uint8(Roles.manager)] == msg.sender || wallets[uint8(Roles.beneficiary)] == msg.sender) && goalReached()));\n', '\n', '        isFinalized = true;\n', '        finalization();\n', '        emit Finalized();\n', '    }\n', '\n', '    // The logic of finalization. Internal\n', '    // @ Do I have to use the function      no\n', '    // @ When it is possible to call        -\n', '    // @ When it is launched automatically  after end of round\n', '    // @ Who can call the function          -\n', '    function finalization() internal {\n', '\n', '        //uint256 feesValue;\n', '        // If the goal of the achievement\n', '        if (goalReached()) {\n', '\n', '            if(address(vault) != 0x0){\n', '                // Send ether to Beneficiary\n', '                vault.close(wallets[uint8(Roles.beneficiary)], wallets[uint8(Roles.fees)], ethWeiRaised.mul(7).div(100)); //7% for fees\n', '            }\n', '\n', '            // if there is anything to give\n', '            if (tokenReserved > 0) {\n', '\n', '                token.mint(wallets[uint8(Roles.accountant)],tokenReserved);\n', '\n', '                // Reset the counter\n', '                tokenReserved = 0;\n', '            }\n', '\n', '            // If the finalization is Round 1\n', '            if (TokenSale == TokenSaleType.round1) {\n', '\n', '                // Reset settings\n', '                isInitialized = false;\n', '                isFinalized = false;\n', '\n', '                // Switch to the second round (to Round2)\n', '                TokenSale = TokenSaleType.round2;\n', '\n', '                // Reset the collection counter\n', '                weiRound1 = weiRaised();\n', '                ethWeiRaised = 0;\n', '                nonEthWeiRaised = 0;\n', '\n', '\n', '\n', '            }\n', '            else // If the second round is finalized\n', '            {\n', '\n', '                // Permission to collect tokens to those who can pick them up\n', '                chargeBonuses = true;\n', '\n', '                totalSaledToken = token.totalSupply();\n', '\n', '            }\n', '\n', '        }\n', '        else if (address(vault) != 0x0) // If they failed round\n', '        {\n', '            // Allow investors to withdraw their funds\n', '\n', '            vault.enableRefunds();\n', '        }\n', '    }\n', '\n', '    // The Manager freezes the tokens for the Team.\n', '    // You must call a function to finalize Round 2 (only after the Round2)\n', '    // @ Do I have to use the function      yes\n', '    // @ When it is possible to call        Round2\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          admins\n', '    function finalize2() public {\n', '\n', '        onlyAdmin(false);\n', '        require(chargeBonuses);\n', '        chargeBonuses = false;\n', '\n', '        allocation = creator.createAllocation(token, now + 1 years /* stage N1 */, now + 2 years /* stage N2 */);\n', '        token.setUnpausedWallet(allocation, true);\n', '\n', '        // Team = 6%, Founders = 10%, Fund = 6%    TOTAL = 22%\n', '        allocation.addShare(wallets[uint8(Roles.team)],       6,  50); // only 50% - first year, stage N1  (and +50 for stage N2)\n', '        allocation.addShare(wallets[uint8(Roles.founders)],  10,  50); // only 50% - first year, stage N1  (and +50 for stage N2)\n', '        allocation.addShare(wallets[uint8(Roles.fund)],       6, 100); // 100% - first year\n', '\n', '        // 22% - tokens to freeze contract (Team+Founders+Fund)\n', '        token.mint(allocation, totalSaledToken.mul(22).div(70));\n', '\n', '        // 7% - tokens to Bounty wallet\n', '        token.mint(wallets[uint8(Roles.bounty)], totalSaledToken.mul(7).div(70));\n', '\n', '        // 1% - tokens to Company (White List) wallet\n', '        token.mint(wallets[uint8(Roles.company)], totalSaledToken.mul(1).div(70));\n', '\n', '    }\n', '\n', '\n', '\n', '    // Initializing the round. Available to the manager. After calling the function,\n', '    // the Manager loses all rights: Manager can not change the settings (setup), change\n', '    // wallets, prevent the beginning of the round, etc. You must call a function after setup\n', '    // for the initial round (before the Round1 and before the Round2)\n', '    // @ Do I have to use the function      yes\n', '    // @ When it is possible to call        before each round\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          admins\n', '    function initialize() public {\n', '\n', '        onlyAdmin(false);\n', '        // If not yet initialized\n', '        require(!isInitialized);\n', '        begin();\n', '\n', '\n', '        // And the specified start time has not yet come\n', '        // If initialization return an error, check the start date!\n', '        require(now <= startTime);\n', '\n', '        initialization();\n', '\n', '        emit Initialized();\n', '\n', '        isInitialized = true;\n', '        renewal = 0;\n', '        canFirstMint = false;\n', '    }\n', '\n', '    function initialization() internal {\n', '        if (address(vault) != 0x0 && vault.state() != RefundVault.State.Active){\n', '            vault.restart();\n', '        }\n', '    }\n', '\n', '    // At the request of the investor, we raise the funds (if the round has failed because of the hardcap)\n', '    // @ Do I have to use the function      no\n', '    // @ When it is possible to call        if round is failed (softcap not reached)\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          all investors\n', '    function claimRefund() external {\n', '        require(address(vault) != 0x0);\n', '        vault.refund(msg.sender);\n', '    }\n', '\n', '    // We check whether we collected the necessary minimum funds. Constant.\n', '    function goalReached() public view returns (bool) {\n', '        return weiRaised() >= softCap;\n', '    }\n', '\n', '\n', '    // Customize. The arguments are described in the constructor above.\n', '    // @ Do I have to use the function      yes\n', '    // @ When it is possible to call        before each rond\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          admins\n', '    function setup(uint256 _startTime, uint256 _endTime, uint256 _softCap, uint256 _hardCap,\n', '        uint256 _rate, uint256 _exchange,\n', '        uint256 _maxAllProfit, uint256 _overLimit, uint256 _minPay,\n', '        uint256[] _durationTB , uint256[] _percentTB, uint256[] _valueVB, uint256[] _percentVB, uint256[] _freezeTimeVB) public\n', '    {\n', '\n', '        onlyAdmin(false);\n', '        require(!isInitialized);\n', '\n', '        begin();\n', '\n', '        // Date and time are correct\n', '        require(now <= _startTime);\n', '        require(_startTime < _endTime);\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '\n', '        // The parameters are correct\n', '        require(_softCap <= _hardCap);\n', '        softCap = _softCap;\n', '        hardCap = _hardCap;\n', '\n', '        require(_rate > 0);\n', '        rate = _rate;\n', '\n', '        overLimit = _overLimit;\n', '        minPay = _minPay;\n', '        exchange = _exchange;\n', '        maxAllProfit = _maxAllProfit;\n', '\n', '        require(_valueVB.length == _percentVB.length && _valueVB.length == _freezeTimeVB.length);\n', '        bonuses.length = _valueVB.length;\n', '        for(uint256 i = 0; i < _valueVB.length; i++){\n', '            bonuses[i] = Bonus(_valueVB[i],_percentVB[i],_freezeTimeVB[i]);\n', '        }\n', '\n', '        require(_percentTB.length == _durationTB.length);\n', '        profits.length = _percentTB.length;\n', '        for( i = 0; i < _percentTB.length; i++){\n', '            profits[i] = Profit(_percentTB[i],_durationTB[i]);\n', '        }\n', '\n', '    }\n', '\n', '    // Collected funds for the current round. Constant.\n', '    function weiRaised() public constant returns(uint256){\n', '        return ethWeiRaised.add(nonEthWeiRaised);\n', '    }\n', '\n', '    // Returns the amount of fees for both phases. Constant.\n', '    function weiTotalRaised() external constant returns(uint256){\n', '        return weiRound1.add(weiRaised());\n', '    }\n', '\n', '    // Returns the percentage of the bonus on the current date. Constant.\n', '    function getProfitPercent() public constant returns (uint256){\n', '        return getProfitPercentForData(now);\n', '    }\n', '\n', '    // Returns the percentage of the bonus on the given date. Constant.\n', '    function getProfitPercentForData(uint256 _timeNow) public constant returns (uint256){\n', '        uint256 allDuration;\n', '        for(uint8 i = 0; i < profits.length; i++){\n', '            allDuration = allDuration.add(profits[i].duration);\n', '            if(_timeNow < startTime.add(allDuration)){\n', '                return profits[i].percent;\n', '            }\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    function getBonuses(uint256 _value) public constant returns (uint256,uint256,uint256){\n', '        if(bonuses.length == 0 || bonuses[0].value > _value){\n', '            return (0,0,0);\n', '        }\n', '        uint16 i = 1;\n', '        for(i; i < bonuses.length; i++){\n', '            if(bonuses[i].value > _value){\n', '                break;\n', '            }\n', '        }\n', '        return (bonuses[i-1].value,bonuses[i-1].procent,bonuses[i-1].freezeTime);\n', '    }\n', '\n', '    // Remove the "Pause of exchange". Available to the manager at any time. If the\n', '    // manager refuses to remove the pause, then 30-120 days after the successful\n', '    // completion of the TokenSale, anyone can remove a pause and allow the exchange to continue.\n', '    // The manager does not interfere and will not be able to delay the term.\n', '    // He can only cancel the pause before the appointed time.\n', '    // ***CHECK***SCENARIO***\n', '    // @ Do I have to use the function      YES YES YES\n', '    // @ When it is possible to call        after end of ICO (or any time - not necessary)\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          admins or anybody\n', '    function tokenUnpause() external {\n', '        require(wallets[uint8(Roles.manager)] == msg.sender\n', '            || (now > endTime.add(renewal).add(USER_UNPAUSE_TOKEN_TIMEOUT) && TokenSale == TokenSaleType.round2 && isFinalized && goalReached()));\n', '        token.setPause(false);\n', '    }\n', '\n', '    // Enable the "Pause of exchange". Available to the manager until the TokenSale is completed.\n', '    // The manager cannot turn on the pause, for example, 3 years after the end of the TokenSale.\n', '    // @ Do I have to use the function      no\n', '    // @ When it is possible to call        while Round2 not ended\n', '    // @ When it is launched automatically  before Round0\n', '    // @ Who can call the function          admins\n', '    function tokenPause() public {\n', '        onlyAdmin(false);\n', '        require(!isFinalized);\n', '        token.setPause(true);\n', '    }\n', '\n', '    // Pause of sale. Available to the manager.\n', '    // @ Do I have to use the function      no\n', '    // @ When it is possible to call        during active rounds\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          admins\n', '    function setCrowdsalePause(bool mode) public {\n', '        onlyAdmin(false);\n', '        isPausedCrowdsale = mode;\n', '    }\n', '\n', '    // For example - After 5 years of the project&#39;s existence, all of us suddenly decided collectively\n', '    // (company + investors) that it would be more profitable for everyone to switch to another smart\n', '    // contract responsible for tokens. The company then prepares a new token, investors\n', '    // disassemble, study, discuss, etc. After a general agreement, the manager allows any investor:\n', '    //      - to burn the tokens of the previous contract\n', '    //      - generate new tokens for a new contract\n', '    // It is understood that after a general solution through this function all investors\n', '    // will collectively (and voluntarily) move to a new token.\n', '    // @ Do I have to use the function      no\n', '    // @ When it is possible to call        only after ICO!\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          admins\n', '    function moveTokens(address _migrationAgent) public {\n', '        onlyAdmin(false);\n', '        token.setMigrationAgent(_migrationAgent);\n', '    }\n', '\n', '    // @ Do I have to use the function      no\n', '    // @ When it is possible to call        only after ICO!\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          admins\n', '    function migrateAll(address[] _holders) public {\n', '        onlyAdmin(false);\n', '        token.migrateAll(_holders);\n', '    }\n', '\n', '    // Change the address for the specified role.\n', '    // Available to any wallet owner except the observer.\n', '    // Available to the manager until the round is initialized.\n', '    // The Observer&#39;s wallet or his own manager can change at any time.\n', '    // @ Do I have to use the function      no\n', '    // @ When it is possible to call        depend...\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          staff (all 7+ roles)\n', '    function changeWallet(Roles _role, address _wallet) external\n', '    {\n', '        require(\n', '            (msg.sender == wallets[uint8(_role)] && _role != Roles.observer)\n', '            ||\n', '            (msg.sender == wallets[uint8(Roles.manager)] && (!isInitialized || _role == Roles.observer) && _role != Roles.fees )\n', '        );\n', '\n', '        wallets[uint8(_role)] = _wallet;\n', '    }\n', '\n', '\n', '    // The beneficiary at any time can take rights in all roles and prescribe his wallet in all the\n', '    // rollers. Thus, he will become the recipient of tokens for the role of Accountant,\n', '    // Team, etc. Works at any time.\n', '    // @ Do I have to use the function      no\n', '    // @ When it is possible to call        any time\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          only Beneficiary\n', '    function resetAllWallets() external{\n', '        address _beneficiary = wallets[uint8(Roles.beneficiary)];\n', '        require(msg.sender == _beneficiary);\n', '        for(uint8 i = 0; i < wallets.length; i++){\n', '            if(uint8(Roles.fees) == i || uint8(Roles.team) == i)\n', '                continue;\n', '\n', '            wallets[i] = _beneficiary;\n', '        }\n', '        token.setUnpausedWallet(_beneficiary, true);\n', '    }\n', '\n', '\n', '    // Burn the investor tokens, if provided by the ICO scenario. Limited time available - BURN_TOKENS_TIME\n', '    // ***CHECK***SCENARIO***\n', '    // @ Do I have to use the function      no\n', '    // @ When it is possible to call        any time\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          admin\n', '    function massBurnTokens(address[] _beneficiary, uint256[] _value) external {\n', '        onlyAdmin(false);\n', '        require(endTime.add(renewal).add(BURN_TOKENS_TIME) > now);\n', '        require(_beneficiary.length == _value.length);\n', '        for(uint16 i; i<_beneficiary.length; i++) {\n', '            token.burn(_beneficiary[i],_value[i]);\n', '        }\n', '    }\n', '\n', '    // Extend the round time, if provided by the script. Extend the round only for\n', '    // a limited number of days - ROUND_PROLONGATE\n', '    // ***CHECK***SCENARIO***\n', '    // @ Do I have to use the function      no\n', '    // @ When it is possible to call        during active round\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          admins\n', '    function prolong(uint256 _duration) external {\n', '        onlyAdmin(false);\n', '        require(now > startTime && now < endTime.add(renewal) && isInitialized);\n', '        renewal = renewal.add(_duration);\n', '        require(renewal <= ROUND_PROLONGATE);\n', '\n', '    }\n', '    // If a little more than a year has elapsed (Round2 start date + 400 days), a smart contract\n', '    // will allow you to send all the money to the Beneficiary, if any money is present. This is\n', '    // possible if you mistakenly launch the Round2 for 30 years (not 30 days), investors will transfer\n', '    // money there and you will not be able to pick them up within a reasonable time. It is also\n', '    // possible that in our checked script someone will make unforeseen mistakes, spoiling the\n', '    // finalization. Without finalization, money cannot be returned. This is a rescue option to\n', '    // get around this problem, but available only after a year (400 days).\n', '\n', '    // Another reason - the TokenSale was a failure, but not all ETH investors took their money during the year after.\n', '    // Some investors may have lost a wallet key, for example.\n', '\n', '    // The method works equally with the Round1 and Round2. When the Round1 starts, the time for unlocking\n', '    // the distructVault begins. If the TokenSale is then started, then the term starts anew from the first day of the TokenSale.\n', '\n', '    // Next, act independently, in accordance with obligations to investors.\n', '\n', '    // Within 400 days (FORCED_REFUND_TIMEOUT1) of the start of the Round, if it fails only investors can take money. After\n', '    // the deadline this can also include the company as well as investors, depending on who is the first to use the method.\n', '    // @ Do I have to use the function      no\n', '    // @ When it is possible to call        -\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          beneficiary & manager\n', '    function distructVault() public {\n', '        require(address(vault) != 0x0);\n', '        if (wallets[uint8(Roles.beneficiary)] == msg.sender && (now > startTime.add(FORCED_REFUND_TIMEOUT1))) {\n', '            vault.del(wallets[uint8(Roles.beneficiary)]);\n', '        }\n', '        if (wallets[uint8(Roles.manager)] == msg.sender && (now > startTime.add(FORCED_REFUND_TIMEOUT2))) {\n', '            vault.del(wallets[uint8(Roles.manager)]);\n', '        }\n', '    }\n', '\n', '\n', '    // We accept payments other than Ethereum (ETH) and other currencies, for example, Bitcoin (BTC).\n', '    // Perhaps other types of cryptocurrency - see the original terms in the white paper and on the TokenSale website.\n', '\n', '    // We release tokens on Ethereum. During the Round1 and Round2 with a smart contract, you directly transfer\n', '    // the tokens there and immediately, with the same transaction, receive tokens in your wallet.\n', '\n', '    // When paying in any other currency, for example in BTC, we accept your money via one common wallet.\n', '    // Our manager fixes the amount received for the bitcoin wallet and calls the method of the smart\n', '    // contract paymentsInOtherCurrency to inform him how much foreign currency has been received - on a daily basis.\n', '    // The smart contract pins the number of accepted ETH directly and the number of BTC. Smart contract\n', '    // monitors softcap and hardcap, so as not to go beyond this framework.\n', '\n', '    // In theory, it is possible that when approaching hardcap, we will receive a transfer (one or several\n', '    // transfers) to the wallet of BTC, that together with previously received money will exceed the hardcap in total.\n', '    // In this case, we will refund all the amounts above, in order not to exceed the hardcap.\n', '\n', '    // Collection of money in BTC will be carried out via one common wallet. The wallet&#39;s address will be published\n', '    // everywhere (in a white paper, on the TokenSale website, on Telegram, on Bitcointalk, in this code, etc.)\n', '    // Anyone interested can check that the administrator of the smart contract writes down exactly the amount\n', '    // in ETH (in equivalent for BTC) there. In theory, the ability to bypass a smart contract to accept money in\n', '    // BTC and not register them in ETH creates a possibility for manipulation by the company. Thanks to\n', '    // paymentsInOtherCurrency however, this threat is leveled.\n', '\n', '    // Any user can check the amounts in BTC and the variable of the smart contract that accounts for this\n', '    // (paymentsInOtherCurrency method). Any user can easily check the incoming transactions in a smart contract\n', '    // on a daily basis. Any hypothetical tricks on the part of the company can be exposed and panic during the TokenSale,\n', '    // simply pointing out the incompatibility of paymentsInOtherCurrency (ie, the amount of ETH + BTC collection)\n', '    // and the actual transactions in BTC. The company strictly adheres to the described principles of openness.\n', '\n', '    // The company administrator is required to synchronize paymentsInOtherCurrency every working day (but you\n', '    // cannot synchronize if there are no new BTC payments). In the case of unforeseen problems, such as\n', '    // brakes on the Ethereum network, this operation may be difficult. You should only worry if the\n', '    // administrator does not synchronize the amount for more than 96 hours in a row, and the BTC wallet\n', '    // receives significant amounts.\n', '\n', '    // This scenario ensures that for the sum of all fees in all currencies this value does not exceed hardcap.\n', '\n', '    // Addresses for other currencies:\n', '    // BTC Address: 3HiqVz6wFhSHZ3QUbX9C8GUPSjdDuksPJA\n', '\n', '    // ** QUINTILLIONS ** 10^18 / 1**18 / 1e18\n', '\n', '    // @ Do I have to use the function      no\n', '    // @ When it is possible to call        during active rounds\n', '    // @ When it is launched automatically  every day\n', '    // @ Who can call the function          admins + observer\n', '    function paymentsInOtherCurrency(uint256 _token, uint256 _value) public {\n', '        //require(wallets[uint8(Roles.observer)] == msg.sender || wallets[uint8(Roles.manager)] == msg.sender);\n', '        onlyAdmin(true);\n', '        bool withinPeriod = (now >= startTime && now <= endTime.add(renewal));\n', '\n', '        bool withinCap = _value.add(ethWeiRaised) <= hardCap.add(overLimit);\n', '        require(withinPeriod && withinCap && isInitialized);\n', '\n', '        nonEthWeiRaised = _value;\n', '        tokenReserved = _token;\n', '\n', '    }\n', '\n', '    function lokedMint(address _beneficiary, uint256 _value, uint256 _freezeTime) internal {\n', '        if(_freezeTime > 0){\n', '\n', '            uint256 totalBloked = token.freezedTokenOf(_beneficiary).add(_value);\n', '            uint256 pastDateUnfreeze = token.defrostDate(_beneficiary);\n', '            uint256 newDateUnfreeze = _freezeTime.add(now);\n', '            newDateUnfreeze = (pastDateUnfreeze > newDateUnfreeze ) ? pastDateUnfreeze : newDateUnfreeze;\n', '\n', '            token.freezeTokens(_beneficiary,totalBloked,newDateUnfreeze);\n', '        }\n', '        token.mint(_beneficiary,_value);\n', '    }\n', '\n', '\n', '    // The function for obtaining smart contract funds in ETH. If all the checks are true, the token is\n', '    // transferred to the buyer, taking into account the current bonus.\n', '    function buyTokens(address beneficiary) public payable {\n', '        require(beneficiary != 0x0);\n', '        require(validPurchase());\n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        uint256 ProfitProcent = getProfitPercent();\n', '\n', '        uint256 value;\n', '        uint256 percent;\n', '        uint256 freezeTime;\n', '\n', '        (value,\n', '        percent,\n', '        freezeTime) = getBonuses(weiAmount);\n', '\n', '        Bonus memory curBonus = Bonus(value,percent,freezeTime);\n', '\n', '        uint256 bonus = curBonus.procent;\n', '\n', '        // --------------------------------------------------------------------------------------------\n', '        // *** Scenario 1 - select max from all bonuses + check maxAllProfit\n', '        uint256 totalProfit = (ProfitProcent < bonus) ? bonus : ProfitProcent;\n', '\n', '        // --------------------------------------------------------------------------------------------\n', '        totalProfit = (totalProfit > maxAllProfit) ? maxAllProfit : totalProfit;\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = weiAmount.mul(rate).mul(totalProfit.add(100)).div(100 ether);\n', '\n', '        // update state\n', '        ethWeiRaised = ethWeiRaised.add(weiAmount);\n', '\n', '        lokedMint(beneficiary, tokens, curBonus.freezeTime);\n', '\n', '        emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '        forwardFunds();\n', '    }\n', '\n', '    // buyTokens alias\n', '    function () public payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' * This code is taken from openZeppelin without any changes.\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '// (A3)\n', '// Contract for freezing of investors&#39; funds. Hence, investors will be able to withdraw money if the\n', '// round does not attain the softcap. From here the wallet of the beneficiary will receive all the\n', '// money (namely, the beneficiary, not the manager&#39;s wallet).\n', 'contract RefundVault is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    enum State { Active, Refunding, Closed }\n', '\n', '    uint8 round;\n', '\n', '    mapping (uint8 => mapping (address => uint256)) public deposited;\n', '\n', '    State public state;\n', '\n', '    event Closed();\n', '    event RefundsEnabled();\n', '    event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '    event Deposited(address indexed beneficiary, uint256 weiAmount);\n', '\n', '    function RefundVault() public {\n', '        state = State.Active;\n', '    }\n', '\n', '    // Depositing funds on behalf of an TokenSale investor. Available to the owner of the contract (Crowdsale Contract).\n', '    function deposit(address investor) onlyOwner public payable {\n', '        require(state == State.Active);\n', '        deposited[round][investor] = deposited[round][investor].add(msg.value);\n', '        emit Deposited(investor,msg.value);\n', '    }\n', '\n', '    // Move the collected funds to a specified address. Available to the owner of the contract.\n', '    function close(address _wallet1, address _wallet2, uint256 _feesValue) onlyOwner public {\n', '        require(state == State.Active);\n', '        require(_wallet1 != 0x0);\n', '        state = State.Closed;\n', '        emit Closed();\n', '        if(_wallet2 != 0x0)\n', '            _wallet2.transfer(_feesValue);\n', '        _wallet1.transfer(address(this).balance);\n', '    }\n', '\n', '    // Allow refund to investors. Available to the owner of the contract.\n', '    function enableRefunds() onlyOwner public {\n', '        require(state == State.Active);\n', '        state = State.Refunding;\n', '        emit RefundsEnabled();\n', '    }\n', '\n', '    // Return the funds to a specified investor. In case of failure of the round, the investor\n', '    // should call this method of this contract (RefundVault) or call the method claimRefund of Crowdsale\n', '    // contract. This function should be called either by the investor himself, or the company\n', '    // (or anyone) can call this function in the loop to return funds to all investors en masse.\n', '    function refund(address investor) public {\n', '        require(state == State.Refunding);\n', '        uint256 depositedValue = deposited[round][investor];\n', '        require(depositedValue > 0);\n', '        deposited[round][investor] = 0;\n', '        investor.transfer(depositedValue);\n', '        emit Refunded(investor, depositedValue);\n', '    }\n', '\n', '    function restart() external onlyOwner {\n', '        require(state == State.Closed);\n', '        round++;\n', '        state = State.Active;\n', '\n', '    }\n', '\n', '    // Destruction of the contract with return of funds to the specified address. Available to\n', '    // the owner of the contract.\n', '    function del(address _wallet) external onlyOwner {\n', '        selfdestruct(_wallet);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' * This code is taken from openZeppelin without any changes.\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' * This code is taken from openZeppelin without any changes.\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' * This code is taken from openZeppelin without any changes.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '  /**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' * This code is taken from openZeppelin without any changes.\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' * This code is taken from openZeppelin without any changes.\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '\n', '  mapping (address => bool) public unpausedWallet;\n', '\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = true;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused(address _to) {\n', '    require(!paused||unpausedWallet[msg.sender]||unpausedWallet[_to]);\n', '    _;\n', '  }\n', '\n', '   // Add a wallet ignoring the "Exchange pause". Available to the owner of the contract.\n', '  function setUnpausedWallet(address _wallet, bool mode) public {\n', '       require(owner == msg.sender || msg.sender == Crowdsale(owner).wallets(uint8(Crowdsale.Roles.manager)));\n', '       unpausedWallet[_wallet] = mode;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function setPause(bool mode) public onlyOwner {\n', '    if (!paused && mode) {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '    if (paused && !mode) {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '    mapping (address => bool) public grantedToSetUnpausedWallet;\n', '\n', '    function transfer(address _to, uint256 _value) public whenNotPaused(_to) returns (bool) {\n', '      return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused(_to) returns (bool) {\n', '      return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function grantToSetUnpausedWallet(address _to, bool permission) public {\n', '        require(owner == msg.sender || msg.sender == Crowdsale(owner).wallets(uint8(Crowdsale.Roles.manager)));\n', '        grantedToSetUnpausedWallet[_to] = permission;\n', '    }\n', '\n', '    // Add a wallet ignoring the "Exchange pause". Available to the owner of the contract.\n', '    function setUnpausedWallet(address _wallet, bool mode) public {\n', '        require(owner == msg.sender || grantedToSetUnpausedWallet[msg.sender] || msg.sender == Crowdsale(owner).wallets(uint8(Crowdsale.Roles.manager)));\n', '        unpausedWallet[_wallet] = mode;\n', '    }\n', '}\n', '\n', '\n', 'contract MigratableToken is BasicToken,Ownable {\n', '\n', '    uint256 public totalMigrated;\n', '    address public migrationAgent;\n', '\n', '    event Migrate(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    function setMigrationAgent(address _migrationAgent) public onlyOwner {\n', '        require(migrationAgent == 0x0);\n', '        migrationAgent = _migrationAgent;\n', '    }\n', '\n', '    function migrateInternal(address _holder) internal {\n', '        require(migrationAgent != 0x0);\n', '\n', '        uint256 value = balances[_holder];\n', '        balances[_holder] = 0;\n', '\n', '        totalSupply_ = totalSupply_.sub(value);\n', '        totalMigrated = totalMigrated.add(value);\n', '\n', '        MigrationAgent(migrationAgent).migrateFrom(_holder, value);\n', '        emit Migrate(_holder,migrationAgent,value);\n', '    }\n', '\n', '    function migrateAll(address[] _holders) public onlyOwner {\n', '        for(uint i = 0; i < _holders.length; i++){\n', '            migrateInternal(_holders[i]);\n', '        }\n', '    }\n', '\n', '    // Reissue your tokens.\n', '    function migrate() public\n', '    {\n', '        require(balances[msg.sender] > 0);\n', '        migrateInternal(msg.sender);\n', '    }\n', '\n', '}\n', '\n', 'contract MigrationAgent\n', '{\n', '    function migrateFrom(address _from, uint256 _value) public;\n', '}\n', '\n', 'contract FreezingToken is PausableToken {\n', '    struct freeze {\n', '        uint256 amount;\n', '        uint256 when;\n', '    }\n', '\n', '\n', '    mapping (address => freeze) freezedTokens;\n', '\n', '\n', '    // @ Do I have to use the function      no\n', '    // @ When it is possible to call        any time\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          any\n', '    function freezedTokenOf(address _beneficiary) public view returns (uint256 amount){\n', '        freeze storage _freeze = freezedTokens[_beneficiary];\n', '        if(_freeze.when < now) return 0;\n', '        return _freeze.amount;\n', '    }\n', '\n', '    // @ Do I have to use the function      no\n', '    // @ When it is possible to call        any time\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          any\n', '    function defrostDate(address _beneficiary) public view returns (uint256 Date) {\n', '        freeze storage _freeze = freezedTokens[_beneficiary];\n', '        if(_freeze.when < now) return 0;\n', '        return _freeze.when;\n', '    }\n', '\n', '\n', '    // ***CHECK***SCENARIO***\n', '    function freezeTokens(address _beneficiary, uint256 _amount, uint256 _when) public onlyOwner {\n', '        freeze storage _freeze = freezedTokens[_beneficiary];\n', '        _freeze.amount = _amount;\n', '        _freeze.when = _when;\n', '    }\n', '\n', '    function transferAndFreeze(address _to, uint256 _value, uint256 _when) external {\n', '        require(unpausedWallet[msg.sender]);\n', '        if(_when > 0){\n', '            freeze storage _freeze = freezedTokens[_to];\n', '            _freeze.amount = _freeze.amount.add(_value);\n', '            _freeze.when = (_freeze.when > _when)? _freeze.when: _when;\n', '        }\n', '        transfer(_to,_value);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(balanceOf(msg.sender) >= freezedTokenOf(msg.sender).add(_value));\n', '        return super.transfer(_to,_value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(balanceOf(_from) >= freezedTokenOf(_from).add(_value));\n', '        return super.transferFrom( _from,_to,_value);\n', '    }\n', '\n', '\n', '\n', '}\n', '\n', 'contract BurnableToken is BasicToken, Ownable {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(address _beneficiary, uint256 _value) public onlyOwner {\n', '    require(_value <= balances[_beneficiary]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    balances[_beneficiary] = balances[_beneficiary].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_beneficiary, _value);\n', '    emit Transfer(_beneficiary, address(0), _value);\n', '  }\n', '}\n', '\n', '/*\n', '* Contract that is working with ERC223 tokens\n', '*/\n', 'contract ERC223ReceivingContract {\n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', '// (A2)\n', '// Contract token\n', 'contract Token is FreezingToken, MintableToken, MigratableToken, BurnableToken {\n', '    string public constant name = "TOSS";\n', '\n', '    string public constant symbol = "PROOF OF TOSS";\n', '\n', '    uint8 public constant decimals = 18;\n', '\n', '    mapping (address => mapping (address => bool)) public grantedToAllowBlocking; // Address of smart contract that can allow other contracts to block tokens\n', '    mapping (address => mapping (address => bool)) public allowedToBlocking; // Address of smart contract that can block tokens\n', '    mapping (address => mapping (address => uint256)) public blocked; // Blocked tokens per blocker\n', '\n', '    event TokenOperationEvent(string operation, address indexed from, address indexed to, uint256 value, address indexed _contract);\n', '\n', '\n', '    modifier contractOnly(address _to) {\n', '        uint256 codeLength;\n', '\n', '        assembly {\n', '        // Retrieve the size of the code on target address, this needs assembly .\n', '        codeLength := extcodesize(_to)\n', '        }\n', '\n', '        require(codeLength > 0);\n', '\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer the specified amount of tokens to the specified address.\n', '    * Invokes the `tokenFallback` function if the recipient is a contract.\n', '    * The token transfer fails if the recipient is a contract\n', '    * but does not implement the `tokenFallback` function\n', '    * or the fallback function to receive funds.\n', '    *\n', '    * @param _to Receiver address.\n', '    * @param _value Amount of tokens that will be transferred.\n', '    * @param _data Transaction metadata.\n', '    */\n', '\n', '    function transferToContract(address _to, uint256 _value, bytes _data) public contractOnly(_to) returns (bool) {\n', '        // Standard function transfer similar to ERC20 transfer with no _data .\n', '        // Added due to backwards compatibility reasons .\n', '\n', '\n', '        super.transfer(_to, _value);\n', '\n', '        ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '        receiver.tokenFallback(msg.sender, _value, _data);\n', '\n', '        return true;\n', '    }\n', '\n', '    // @brief Allow another contract to allow another contract to block tokens. Can be revoked\n', '    // @param _spender another contract address\n', '    // @param _value amount of approved tokens\n', '    function grantToAllowBlocking(address _contract, bool permission) contractOnly(_contract) public {\n', '\n', '\n', '        grantedToAllowBlocking[msg.sender][_contract] = permission;\n', '\n', '        emit TokenOperationEvent(&#39;grant_allow_blocking&#39;, msg.sender, _contract, 0, 0);\n', '    }\n', '\n', '    // @brief Allow another contract to block tokens. Can&#39;t be revoked\n', '    // @param _owner tokens owner\n', '    // @param _contract another contract address\n', '    function allowBlocking(address _owner, address _contract) contractOnly(_contract) public {\n', '\n', '\n', '        require(_contract != msg.sender && _contract != owner);\n', '\n', '        require(grantedToAllowBlocking[_owner][msg.sender]);\n', '\n', '        allowedToBlocking[_owner][_contract] = true;\n', '\n', '        emit TokenOperationEvent(&#39;allow_blocking&#39;, _owner, _contract, 0, msg.sender);\n', '    }\n', '\n', '    // @brief Blocks tokens\n', '    // @param _blocking The address of tokens which are being blocked\n', '    // @param _value The blocked token count\n', '    function blockTokens(address _blocking, uint256 _value) whenNotPaused(_blocking) public {\n', '        require(allowedToBlocking[_blocking][msg.sender]);\n', '\n', '        require(balanceOf(_blocking) >= freezedTokenOf(_blocking).add(_value) && _value > 0);\n', '\n', '        balances[_blocking] = balances[_blocking].sub(_value);\n', '        blocked[_blocking][msg.sender] = blocked[_blocking][msg.sender].add(_value);\n', '\n', '        emit Transfer(_blocking, address(0), _value);\n', '        emit TokenOperationEvent(&#39;block&#39;, _blocking, 0, _value, msg.sender);\n', '    }\n', '\n', '    // @brief Unblocks tokens and sends them to the given address (to _unblockTo)\n', '    // @param _blocking The address of tokens which are blocked\n', '    // @param _unblockTo The address to send to the blocked tokens after unblocking\n', '    // @param _value The blocked token count to unblock\n', '    function unblockTokens(address _blocking, address _unblockTo, uint256 _value) whenNotPaused(_unblockTo) public {\n', '        require(allowedToBlocking[_blocking][msg.sender]);\n', '        require(blocked[_blocking][msg.sender] >= _value && _value > 0);\n', '\n', '        blocked[_blocking][msg.sender] = blocked[_blocking][msg.sender].sub(_value);\n', '        balances[_unblockTo] = balances[_unblockTo].add(_value);\n', '\n', '        emit Transfer(address(0), _blocking, _value);\n', '\n', '        if (_blocking != _unblockTo) {\n', '            emit Transfer(_blocking, _unblockTo, _value);\n', '        }\n', '\n', '        emit TokenOperationEvent(&#39;unblock&#39;, _blocking, _unblockTo, _value, msg.sender);\n', '    }\n', '}\n', '\n', '// (B)\n', '// The contract for freezing tokens for the team..\n', 'contract AllocationTOSS is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    struct Share {\n', '        uint256 proportion;\n', '        uint256 forPart;\n', '    }\n', '\n', '    // How many days to freeze from the moment of finalizing ICO\n', '    uint256 public unlockPart1;\n', '    uint256 public unlockPart2;\n', '    uint256 public totalShare;\n', '\n', '    mapping(address => Share) public shares;\n', '\n', '    ERC20Basic public token;\n', '\n', '    address public owner;\n', '\n', '    // The contract takes the ERC20 coin address from which this contract will work and from the\n', '    // owner (Team wallet) who owns the funds.\n', '    function AllocationTOSS(ERC20Basic _token, uint256 _unlockPart1, uint256 _unlockPart2) public{\n', '        unlockPart1 = _unlockPart1;\n', '        unlockPart2 = _unlockPart2;\n', '        token = _token;\n', '    }\n', '\n', '    function addShare(address _beneficiary, uint256 _proportion, uint256 _percenForFirstPart) onlyOwner external {\n', '        shares[_beneficiary] = Share(shares[_beneficiary].proportion.add(_proportion),_percenForFirstPart);\n', '        totalShare = totalShare.add(_proportion);\n', '    }\n', '\n', '    // If the time of freezing expired will return the funds to the owner.\n', '    function unlockFor(address _owner) public {\n', '        require(now >= unlockPart1);\n', '        uint256 share = shares[_owner].proportion;\n', '        if (now < unlockPart2) {\n', '            share = share.mul(shares[_owner].forPart)/100;\n', '            shares[_owner].forPart = 0;\n', '        }\n', '        if (share > 0) {\n', '            uint256 unlockedToken = token.balanceOf(this).mul(share).div(totalShare);\n', '            shares[_owner].proportion = shares[_owner].proportion.sub(share);\n', '            totalShare = totalShare.sub(share);\n', '            token.transfer(_owner,unlockedToken);\n', '        }\n', '    }\n', '}\n', '\n', 'contract Creator{\n', '    Token public token = new Token();\n', '    RefundVault public refund = new RefundVault();\n', '\n', '    function createToken() external returns (Token) {\n', '        token.transferOwnership(msg.sender);\n', '        return token;\n', '    }\n', '\n', '    function createAllocation(Token _token, uint256 _unlockPart1, uint256 _unlockPart2) external returns (AllocationTOSS) {\n', '        AllocationTOSS allocation = new AllocationTOSS(_token,_unlockPart1,_unlockPart2);\n', '        allocation.transferOwnership(msg.sender);\n', '        return allocation;\n', '    }\n', '\n', '    function createRefund() external returns (RefundVault) {\n', '        refund.transferOwnership(msg.sender);\n', '        return refund;\n', '    }\n', '\n', '}']