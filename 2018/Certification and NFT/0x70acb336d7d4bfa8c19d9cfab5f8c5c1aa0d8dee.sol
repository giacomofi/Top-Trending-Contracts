['pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Contract that will work with ERC223 tokens.\n', ' */\n', ' \n', 'contract ERC223ReceivingContract {\n', '\n', '  struct TKN {\n', '    address sender;\n', '    uint value;\n', '    bytes data;\n', '    bytes4 sig;\n', '  }\n', '\n', '  /**\n', '   * @dev Standard ERC223 function that will handle incoming token transfers.\n', '   *\n', '   * @param _from  Token sender address.\n', '   * @param _value Amount of tokens.\n', '   * @param _data  Transaction metadata.\n', '   */\n', '  function tokenFallback(address _from, uint _value, bytes _data) public pure {\n', '    TKN memory tkn;\n', '    tkn.sender = _from;\n', '    tkn.value = _value;\n', '    tkn.data = _data;\n', '    if(_data.length > 0) {\n', '      uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n', '      tkn.sig = bytes4(u);\n', '    }\n', '\n', '    /* tkn variable is analogue of msg variable of Ether transaction\n', '    *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\n', '    *  tkn.value the number of tokens that were sent   (analogue of msg.value)\n', '    *  tkn.data is data of token transaction   (analogue of msg.data)\n', '    *  tkn.sig is 4 bytes signature of function\n', '    *  if data of token transaction is a function execution\n', '    */\n', '  }\n', '\n', '}\n', '\n', 'contract ERC223Interface {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) public view returns (uint);\n', '  function allowedAddressesOf(address who) public view returns (bool);\n', '  function getTotalSupply() public view returns (uint);\n', '\n', '  function transfer(address to, uint value) public returns (bool ok);\n', '  function transfer(address to, uint value, bytes data) public returns (bool ok);\n', '  function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint value, bytes data);\n', '  event TransferContract(address indexed from, address indexed to, uint value, bytes data);\n', '}\n', '\n', '/**\n', ' * @title Unity Token is ERC223 token.\n', ' * @author Vladimir Kovalchuk\n', ' */\n', '\n', 'contract UnityToken is ERC223Interface {\n', '  using SafeMath for uint;\n', '\n', '  string public constant name = "Unity Token";\n', '  string public constant symbol = "UNT";\n', '  uint8 public constant decimals = 18;\n', '\n', '\n', '  /* The supply is initially 100UNT to the precision of 18 decimals */\n', '  uint public constant INITIAL_SUPPLY = 100000 * (10 ** uint(decimals));\n', '\n', '  mapping(address => uint) balances; // List of user balances.\n', '  mapping(address => bool) allowedAddresses;\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function addAllowed(address newAddress) public onlyOwner {\n', '    allowedAddresses[newAddress] = true;\n', '  }\n', '\n', '  function removeAllowed(address remAddress) public onlyOwner {\n', '    allowedAddresses[remAddress] = false;\n', '  }\n', '\n', '\n', '  address public owner;\n', '\n', '  /* Constructor initializes the owner&#39;s balance and the supply  */\n', '  function UnityToken() public {\n', '    owner = msg.sender;\n', '    totalSupply = INITIAL_SUPPLY;\n', '    balances[owner] = INITIAL_SUPPLY;\n', '  }\n', '\n', '  function getTotalSupply() public view returns (uint) {\n', '    return totalSupply;\n', '  }\n', '\n', '  // Function that is called when a user or another contract wants to transfer funds .\n', '  function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success) {\n', '    if (isContract(_to)) {\n', '      require(allowedAddresses[_to]);\n', '      if (balanceOf(msg.sender) < _value)\n', '        revert();\n', '\n', '      balances[msg.sender] = balances[msg.sender].sub(_value);\n', '      balances[_to] = balances[_to].add(_value);\n', '      assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n', '      TransferContract(msg.sender, _to, _value, _data);\n', '      return true;\n', '    }\n', '    else {\n', '      return transferToAddress(_to, _value, _data);\n', '    }\n', '  }\n', '\n', '\n', '  // Function that is called when a user or another contract wants to transfer funds .\n', '  function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\n', '\n', '    if (isContract(_to)) {\n', '      return transferToContract(_to, _value, _data);\n', '    } else {\n', '      return transferToAddress(_to, _value, _data);\n', '    }\n', '  }\n', '\n', '  // Standard function transfer similar to ERC20 transfer with no _data .\n', '  // Added due to backwards compatibility reasons .\n', '  function transfer(address _to, uint _value) public returns (bool success) {\n', '    //standard function transfer similar to ERC20 transfer with no _data\n', '    //added due to backwards compatibility reasons\n', '    bytes memory empty;\n', '    if (isContract(_to)) {\n', '      return transferToContract(_to, _value, empty);\n', '    }\n', '    else {\n', '      return transferToAddress(_to, _value, empty);\n', '    }\n', '  }\n', '\n', '  //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '  function isContract(address _addr) private view returns (bool is_contract) {\n', '    uint length;\n', '    assembly {\n', '    //retrieve the size of the code on target address, this needs assembly\n', '      length := extcodesize(_addr)\n', '    }\n', '    return (length > 0);\n', '  }\n', '\n', '  //function that is called when transaction target is an address\n', '  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n', '    if (balanceOf(msg.sender) < _value)\n', '      revert();\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value, _data);\n', '    return true;\n', '  }\n', '\n', '  //function that is called when transaction target is a contract\n', '  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n', '    require(allowedAddresses[_to]);\n', '    if (balanceOf(msg.sender) < _value)\n', '      revert();\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '    receiver.tokenFallback(msg.sender, _value, _data);\n', '    TransferContract(msg.sender, _to, _value, _data);\n', '    return true;\n', '  }\n', '\n', '\n', '  function balanceOf(address _owner) public view returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function allowedAddressesOf(address _owner) public view returns (bool allowed) {\n', '    return allowedAddresses[_owner];\n', '  }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Contract that will work with ERC223 tokens.\n', ' */\n', ' \n', 'contract ERC223ReceivingContract {\n', '\n', '  struct TKN {\n', '    address sender;\n', '    uint value;\n', '    bytes data;\n', '    bytes4 sig;\n', '  }\n', '\n', '  /**\n', '   * @dev Standard ERC223 function that will handle incoming token transfers.\n', '   *\n', '   * @param _from  Token sender address.\n', '   * @param _value Amount of tokens.\n', '   * @param _data  Transaction metadata.\n', '   */\n', '  function tokenFallback(address _from, uint _value, bytes _data) public pure {\n', '    TKN memory tkn;\n', '    tkn.sender = _from;\n', '    tkn.value = _value;\n', '    tkn.data = _data;\n', '    if(_data.length > 0) {\n', '      uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n', '      tkn.sig = bytes4(u);\n', '    }\n', '\n', '    /* tkn variable is analogue of msg variable of Ether transaction\n', '    *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\n', '    *  tkn.value the number of tokens that were sent   (analogue of msg.value)\n', '    *  tkn.data is data of token transaction   (analogue of msg.data)\n', '    *  tkn.sig is 4 bytes signature of function\n', '    *  if data of token transaction is a function execution\n', '    */\n', '  }\n', '\n', '}\n', '\n', 'contract ERC223Interface {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) public view returns (uint);\n', '  function allowedAddressesOf(address who) public view returns (bool);\n', '  function getTotalSupply() public view returns (uint);\n', '\n', '  function transfer(address to, uint value) public returns (bool ok);\n', '  function transfer(address to, uint value, bytes data) public returns (bool ok);\n', '  function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint value, bytes data);\n', '  event TransferContract(address indexed from, address indexed to, uint value, bytes data);\n', '}\n', '\n', '/**\n', ' * @title Unity Token is ERC223 token.\n', ' * @author Vladimir Kovalchuk\n', ' */\n', '\n', 'contract UnityToken is ERC223Interface {\n', '  using SafeMath for uint;\n', '\n', '  string public constant name = "Unity Token";\n', '  string public constant symbol = "UNT";\n', '  uint8 public constant decimals = 18;\n', '\n', '\n', '  /* The supply is initially 100UNT to the precision of 18 decimals */\n', '  uint public constant INITIAL_SUPPLY = 100000 * (10 ** uint(decimals));\n', '\n', '  mapping(address => uint) balances; // List of user balances.\n', '  mapping(address => bool) allowedAddresses;\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function addAllowed(address newAddress) public onlyOwner {\n', '    allowedAddresses[newAddress] = true;\n', '  }\n', '\n', '  function removeAllowed(address remAddress) public onlyOwner {\n', '    allowedAddresses[remAddress] = false;\n', '  }\n', '\n', '\n', '  address public owner;\n', '\n', "  /* Constructor initializes the owner's balance and the supply  */\n", '  function UnityToken() public {\n', '    owner = msg.sender;\n', '    totalSupply = INITIAL_SUPPLY;\n', '    balances[owner] = INITIAL_SUPPLY;\n', '  }\n', '\n', '  function getTotalSupply() public view returns (uint) {\n', '    return totalSupply;\n', '  }\n', '\n', '  // Function that is called when a user or another contract wants to transfer funds .\n', '  function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success) {\n', '    if (isContract(_to)) {\n', '      require(allowedAddresses[_to]);\n', '      if (balanceOf(msg.sender) < _value)\n', '        revert();\n', '\n', '      balances[msg.sender] = balances[msg.sender].sub(_value);\n', '      balances[_to] = balances[_to].add(_value);\n', '      assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n', '      TransferContract(msg.sender, _to, _value, _data);\n', '      return true;\n', '    }\n', '    else {\n', '      return transferToAddress(_to, _value, _data);\n', '    }\n', '  }\n', '\n', '\n', '  // Function that is called when a user or another contract wants to transfer funds .\n', '  function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\n', '\n', '    if (isContract(_to)) {\n', '      return transferToContract(_to, _value, _data);\n', '    } else {\n', '      return transferToAddress(_to, _value, _data);\n', '    }\n', '  }\n', '\n', '  // Standard function transfer similar to ERC20 transfer with no _data .\n', '  // Added due to backwards compatibility reasons .\n', '  function transfer(address _to, uint _value) public returns (bool success) {\n', '    //standard function transfer similar to ERC20 transfer with no _data\n', '    //added due to backwards compatibility reasons\n', '    bytes memory empty;\n', '    if (isContract(_to)) {\n', '      return transferToContract(_to, _value, empty);\n', '    }\n', '    else {\n', '      return transferToAddress(_to, _value, empty);\n', '    }\n', '  }\n', '\n', '  //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '  function isContract(address _addr) private view returns (bool is_contract) {\n', '    uint length;\n', '    assembly {\n', '    //retrieve the size of the code on target address, this needs assembly\n', '      length := extcodesize(_addr)\n', '    }\n', '    return (length > 0);\n', '  }\n', '\n', '  //function that is called when transaction target is an address\n', '  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n', '    if (balanceOf(msg.sender) < _value)\n', '      revert();\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value, _data);\n', '    return true;\n', '  }\n', '\n', '  //function that is called when transaction target is a contract\n', '  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n', '    require(allowedAddresses[_to]);\n', '    if (balanceOf(msg.sender) < _value)\n', '      revert();\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '    receiver.tokenFallback(msg.sender, _value, _data);\n', '    TransferContract(msg.sender, _to, _value, _data);\n', '    return true;\n', '  }\n', '\n', '\n', '  function balanceOf(address _owner) public view returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function allowedAddressesOf(address _owner) public view returns (bool allowed) {\n', '    return allowedAddresses[_owner];\n', '  }\n', '}']
