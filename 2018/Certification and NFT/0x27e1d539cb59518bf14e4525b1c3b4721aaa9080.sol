['pragma solidity ^0.4.17;\n', '\n', '// File: contracts/helpers/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '  * @dev The Constructor sets the original owner of the contract to the\n', '  * sender account.\n', '  */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '  * @dev Throws if called by any other account other than owner.\n', '  */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/helpers/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/token/ERC20Interface.sol\n', '\n', 'contract ERC20Interface {\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '}\n', '\n', '// File: contracts/token/BaseToken.sol\n', '\n', 'contract BaseToken is ERC20Interface {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev Obtain total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    require(_spender != address(0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '    Transfer(_from, _to, _value);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/token/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is BaseToken, Ownable {\n', '\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/token/CappedToken.sol\n', '\n', 'contract CappedToken is MintableToken {\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedToken(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(totalSupply_.add(_amount) <= cap);\n', '\n', '    return super.mint(_to, _amount);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/helpers/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/token/PausableToken.sol\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev BaseToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is BaseToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '// File: contracts/token/SignedTransferToken.sol\n', '\n', '/**\n', '* @title SignedTransferToken\n', '* @dev The SignedTransferToken enables collection of fees for token transfers\n', '* in native token currency. User will provide a signature that allows the third\n', '* party to settle the transaction in his name and collect fee for provided\n', '* serivce.\n', '*/\n', 'contract SignedTransferToken is BaseToken {\n', '\n', '  event TransferPreSigned(\n', '    address indexed from,\n', '    address indexed to,\n', '    address indexed settler,\n', '    uint256 value,\n', '    uint256 fee\n', '  );\n', '\n', '  event TransferPreSignedMany(\n', '    address indexed from,\n', '    address indexed settler,\n', '    uint256 value,\n', '    uint256 fee\n', '  );\n', '\n', '\n', '  // Mapping of already executed settlements for a given address\n', '  mapping(address => mapping(bytes32 => bool)) executedSettlements;\n', '\n', '  /**\n', '  * @dev Will settle a pre-signed transfer\n', '  */\n', '  function transferPreSigned(address _from,\n', '                             address _to,\n', '                             uint256 _value,\n', '                             uint256 _fee,\n', '                             uint256 _nonce,\n', '                             uint8 _v,\n', '                             bytes32 _r,\n', '                             bytes32 _s) public returns (bool) {\n', '    uint256 total = _value.add(_fee);\n', '    bytes32 calcHash = calculateHash(_from, _to, _value, _fee, _nonce);\n', '\n', '    require(_to != address(0));\n', '    require(isValidSignature(_from, calcHash, _v, _r, _s));\n', '    require(balances[_from] >= total);\n', '    require(!executedSettlements[_from][calcHash]);\n', '\n', '    executedSettlements[_from][calcHash] = true;\n', '\n', '    // Move tokens\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(_from, _to, _value);\n', '\n', '    // Move fee\n', '    balances[_from] = balances[_from].sub(_fee);\n', '    balances[msg.sender] = balances[msg.sender].add(_fee);\n', '    Transfer(_from, msg.sender, _fee);\n', '\n', '    TransferPreSigned(_from, _to, msg.sender, _value, _fee);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Settle multiple transactions in a single call. Please note that\n', '  * should a single one fail the full state will be reverted. Your client\n', '  * implementation should always first check for balances, correct signatures\n', '  * and any other conditions that might result in failed transaction.\n', '  */\n', '  function transferPreSignedBulk(address[] _from,\n', '                                 address[] _to,\n', '                                 uint256[] _values,\n', '                                 uint256[] _fees,\n', '                                 uint256[] _nonces,\n', '                                 uint8[] _v,\n', '                                 bytes32[] _r,\n', '                                 bytes32[] _s) public returns (bool) {\n', '    // Make sure all the arrays are of the same length\n', '    require(_from.length == _to.length &&\n', '            _to.length ==_values.length &&\n', '            _values.length == _fees.length &&\n', '            _fees.length == _nonces.length &&\n', '            _nonces.length == _v.length &&\n', '            _v.length == _r.length &&\n', '            _r.length == _s.length);\n', '\n', '    for(uint i; i < _from.length; i++) {\n', '      transferPreSigned(_from[i],\n', '                        _to[i],\n', '                        _values[i],\n', '                        _fees[i],\n', '                        _nonces[i],\n', '                        _v[i],\n', '                        _r[i],\n', '                        _s[i]);\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '\n', '  function transferPreSignedMany(address _from,\n', '                                 address[] _tos,\n', '                                 uint256[] _values,\n', '                                 uint256 _fee,\n', '                                 uint256 _nonce,\n', '                                 uint8 _v,\n', '                                 bytes32 _r,\n', '                                 bytes32 _s) public returns (bool) {\n', '   require(_tos.length == _values.length);\n', '   uint256 total = getTotal(_tos, _values, _fee);\n', '\n', '   bytes32 calcHash = calculateManyHash(_from, _tos, _values, _fee, _nonce);\n', '\n', '   require(isValidSignature(_from, calcHash, _v, _r, _s));\n', '   require(balances[_from] >= total);\n', '   require(!executedSettlements[_from][calcHash]);\n', '\n', '   executedSettlements[_from][calcHash] = true;\n', '\n', '   // transfer to each recipient and take fee at the end\n', '   for(uint i; i < _tos.length; i++) {\n', '     // Move tokens\n', '     balances[_from] = balances[_from].sub(_values[i]);\n', '     balances[_tos[i]] = balances[_tos[i]].add(_values[i]);\n', '     Transfer(_from, _tos[i], _values[i]);\n', '   }\n', '\n', '   // Move fee\n', '   balances[_from] = balances[_from].sub(_fee);\n', '   balances[msg.sender] = balances[msg.sender].add(_fee);\n', '   Transfer(_from, msg.sender, _fee);\n', '\n', '   TransferPreSignedMany(_from, msg.sender, total, _fee);\n', '\n', '   return true;\n', '  }\n', '\n', '  function getTotal(address[] _tos, uint256[] _values, uint256 _fee) private view returns (uint256)  {\n', '    uint256 total = _fee;\n', '\n', '    for(uint i; i < _tos.length; i++) {\n', '      total = total.add(_values[i]); // sum of all the values + fee\n', '      require(_tos[i] != address(0)); // check that the recipient is a valid address\n', '    }\n', '\n', '    return total;\n', '  }\n', '\n', '  /**\n', '  * @dev Calculates transfer hash for transferPreSignedMany\n', '  */\n', '  function calculateManyHash(address _from, address[] _tos, uint256[] _values, uint256 _fee, uint256 _nonce) public view returns (bytes32) {\n', '    return keccak256(uint256(1), address(this), _from, _tos, _values, _fee, _nonce);\n', '  }\n', '\n', '  /**\n', '  * @dev Calculates transfer hash.\n', '  */\n', '  function calculateHash(address _from, address _to, uint256 _value, uint256 _fee, uint256 _nonce) public view returns (bytes32) {\n', '    return keccak256(uint256(0), address(this), _from, _to, _value, _fee, _nonce);\n', '  }\n', '\n', '  /**\n', '  * @dev Validates the signature\n', '  */\n', '  function isValidSignature(address _signer, bytes32 _hash, uint8 _v, bytes32 _r, bytes32 _s) public pure returns (bool) {\n', '    return _signer == ecrecover(\n', '            keccak256("\\x19Ethereum Signed Message:\\n32", _hash),\n', '            _v,\n', '            _r,\n', '            _s\n', '        );\n', '  }\n', '\n', '  /**\n', '  * @dev Allows you to check whether a certain transaction has been already\n', '  * settled or not.\n', '  */\n', '  function isTransactionAlreadySettled(address _from, bytes32 _calcHash) public view returns (bool) {\n', '    return executedSettlements[_from][_calcHash];\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/token/PausableSignedTransferToken.sol\n', '\n', 'contract PausableSignedTransferToken is SignedTransferToken, PausableToken {\n', '\n', '  function transferPreSigned(address _from,\n', '                             address _to,\n', '                             uint256 _value,\n', '                             uint256 _fee,\n', '                             uint256 _nonce,\n', '                             uint8 _v,\n', '                             bytes32 _r,\n', '                             bytes32 _s) public whenNotPaused returns (bool) {\n', '    return super.transferPreSigned(_from, _to, _value, _fee, _nonce, _v, _r, _s);\n', '  }\n', '\n', '  function transferPreSignedBulk(address[] _from,\n', '                                 address[] _to,\n', '                                 uint256[] _values,\n', '                                 uint256[] _fees,\n', '                                 uint256[] _nonces,\n', '                                 uint8[] _v,\n', '                                 bytes32[] _r,\n', '                                 bytes32[] _s) public whenNotPaused returns (bool) {\n', '    return super.transferPreSignedBulk(_from, _to, _values, _fees, _nonces, _v, _r, _s);\n', '  }\n', '\n', '  function transferPreSignedMany(address _from,\n', '                                 address[] _tos,\n', '                                 uint256[] _values,\n', '                                 uint256 _fee,\n', '                                 uint256 _nonce,\n', '                                 uint8 _v,\n', '                                 bytes32 _r,\n', '                                 bytes32 _s) public whenNotPaused returns (bool) {\n', '    return super.transferPreSignedMany(_from, _tos, _values, _fee, _nonce, _v, _r, _s);\n', '  }\n', '}\n', '\n', '// File: contracts/FourToken.sol\n', '\n', 'contract FourToken is CappedToken, PausableSignedTransferToken  {\n', '  string public name = &#39;The 4th Pillar Token&#39;;\n', '  string public symbol = &#39;FOUR&#39;;\n', '  uint256 public decimals = 18;\n', '\n', '  // Max supply of 400 million\n', '  uint256 public maxSupply = 400000000 * 10**decimals;\n', '\n', '  function FourToken()\n', '    CappedToken(maxSupply) public {\n', '      paused = true;\n', '  }\n', '\n', '  // @dev Recover any mistakenly sent ERC20 tokens to the Token address\n', '  function recoverERC20Tokens(address _erc20, uint256 _amount) public onlyOwner {\n', '    ERC20Interface(_erc20).transfer(msg.sender, _amount);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/crowdsale/Crowdsale.sol\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive. The contract requires a MintableToken that will be\n', ' * minted as contributions arrive, note that the crowdsale contract\n', ' * must be owner of the token in order to be able to mint it.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param tokens amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 tokens);\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps in UNIX.\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // how many tokens does a buyer get per wei\n', '  uint256 public rate;\n', '\n', '  // wallet where funds are forwarded\n', '  address public wallet;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '  // amount of sold tokens\n', '  uint256 public tokensSold;\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, address _token) public {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = MintableToken(_token);\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    tokensSold = tokensSold.add(tokens);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '  // Override this method to have a way to add business logic to your crowdsale when buying\n', '  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\n', '    return weiAmount.mul(rate);\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/crowdsale/FinalizableCrowdsale.sol\n', '\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  event Finalized();\n', '\n', '  bool public isFinalized = false;\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', '   * work. Calls the contract&#39;s finalization function.\n', '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/crowdsale/TokenCappedCrowdsale.sol\n', '\n', 'contract TokenCappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public tokenCap;\n', '\n', '  function TokenCappedCrowdsale(uint256 _tokenCap) public {\n', '    require(_tokenCap > 0);\n', '    tokenCap = _tokenCap;\n', '  }\n', '\n', '  function isCapReached() public view returns (bool) {\n', '    return tokensSold >= tokenCap;\n', '  }\n', '\n', '  function hasEnded() public view returns (bool) {\n', '    return isCapReached() || super.hasEnded();\n', '  }\n', '\n', '  // overriding Crowdsale#validPurchase to add extra cap logic\n', '  // @return true if investors can buy at the moment\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinCap = tokensSold.add(getTokenAmount(msg.value)) <= tokenCap;\n', '    return withinCap && super.validPurchase();\n', '  }\n', '}\n', '\n', '// File: contracts/crowdsale/WhitelistCrowdsale.sol\n', '\n', 'contract WhitelistCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  event WhitelistUpdated(uint256 timestamp, string operation, uint256 totalAddresses);\n', '\n', '  // Mapping of whitelisted addresses\n', '  mapping(address => bool) whitelisted;\n', '\n', '  // Total count of whitelisted participants\n', '  uint256 public whitelistedCount;\n', '\n', '  function isWhitelisted(address _addr) public view returns (bool) {\n', '    return whitelisted[_addr];\n', '  }\n', '\n', '  function addAddress(address _addr) external onlyOwner {\n', '    whitelisted[_addr] = true;\n', '    whitelistedCount++;\n', '    WhitelistUpdated(block.timestamp, "Added", whitelistedCount);\n', '  }\n', '\n', '  function addAddresses(address[] _addrs) external onlyOwner {\n', '    for (uint256 i = 0; i < _addrs.length; i++) {\n', '      whitelisted[_addrs[i]] = true;\n', '      whitelistedCount++;\n', '    }\n', '\n', '    WhitelistUpdated(block.timestamp, "Added", whitelistedCount);\n', '  }\n', '\n', '  function removeAddress(address _addr) external onlyOwner {\n', '    whitelisted[_addr] = false;\n', '    whitelistedCount--;\n', '    WhitelistUpdated(block.timestamp, "Removed", whitelistedCount);\n', '  }\n', '\n', '  function removeAddresses(address[] _addrs) external onlyOwner {\n', '    for (uint256 i = 0; i < _addrs.length; i++) {\n', '      whitelisted[_addrs[i]] = false;\n', '      whitelistedCount--;\n', '    }\n', '\n', '    WhitelistUpdated(block.timestamp, "Removed", whitelistedCount);\n', '  }\n', '\n', '  function validPurchase() internal view returns (bool) {\n', '    return isWhitelisted(msg.sender) && super.validPurchase();\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/FourCrowdsale.sol\n', '\n', 'contract FourCrowdsale is TokenCappedCrowdsale, WhitelistCrowdsale, FinalizableCrowdsale {\n', '  event RateChanged(uint256 newRate, string name);\n', '\n', '  uint256 private constant E18 = 10**18;\n', '\n', '  // Max tokens sold = 152 million\n', '  uint256 private TOKEN_SALE_CAP = 152000000 * E18;\n', '\n', '  uint256 public constant TEAM_TOKENS = 50000000 * E18;\n', '  address public constant TEAM_ADDRESS = 0x3EC2fC20c04656F4B0AA7372258A36FAfB1EF427;\n', '\n', '  // Vault tokens have been pre-minted\n', '//  uint256 public constant VAULT_TOKENS = 152000000 * E18;\n', '//  address public constant VAULT_ADDRESS = 0x545baa8e4Fff675711CB92Af33e5850aDD913b76;\n', '\n', '  uint256 public constant ADVISORS_AND_CONTRIBUTORS_TOKENS = 39000000 * E18;\n', '  address public constant ADVISORS_AND_CONTRIBUTORS_ADDRESS = 0x90adab6891514DC24411B9Adf2e11C0eD7739999;\n', '\n', '  // Bounty tokens have been pre-minted\n', '//  uint256 public constant BOUNTY_TOKENS = 7000000 * E18;\n', '//  address public constant BOUNTY_ADDRESS = 0x18f260a71c282bc4d5fe4ee1187658a06e9d1a59;\n', '\n', '  // Unsold tokens will be transfered to the VAULT\n', '  address public constant UNSOLD_ADDRESS = 0x4eC155995211C8639375Ae3106187bff3FF5DB46;\n', '\n', '  // Bonus amount. The first 24h there will be a bonus of 10%\n', '  uint256 public bonus;\n', '\n', '  function FourCrowdsale(uint256 _startTime,\n', '                         uint256 _endTime,\n', '                         uint256 _rate,\n', '                         uint256 _bonus,\n', '                         address _wallet,\n', '                         address _token)\n', '        TokenCappedCrowdsale(TOKEN_SALE_CAP)\n', '        Crowdsale(_startTime, _endTime, _rate, _wallet, _token) public {\n', '    bonus = _bonus;\n', '  }\n', '\n', '  function setCrowdsaleWallet(address _wallet) public onlyOwner {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '  }\n', '\n', '  function changeStartAndEndTime(uint256 _newStartTime, uint256 _newEndTime) public onlyOwner {\n', '    require(_newStartTime >= now);\n', '    require(_newEndTime >= _newStartTime);\n', '\n', '    startTime = _newStartTime;\n', '    endTime = _newEndTime;\n', '  }\n', '\n', '  function changeEndTime(uint256 _newEndTime) public onlyOwner {\n', '    require(_newEndTime > startTime);\n', '    endTime = _newEndTime;\n', '  }\n', '\n', '  function setRate(uint256 _rate) public onlyOwner  {\n', '    require(now < startTime); // cant change once the sale has started\n', '    rate = _rate;\n', '    RateChanged(_rate, &#39;rate&#39;);\n', '  }\n', '\n', '  function setBonus(uint256 _bonus) public onlyOwner  {\n', '    require(now < startTime); // cant change once the sale has started\n', '    bonus = _bonus;\n', '    RateChanged(_bonus, &#39;bonus&#39;);\n', '  }\n', '\n', '  function processPresaleOrEarlyContributors(address[] _beneficiaries, uint256[] _tokenAmounts) public onlyOwner {\n', '    // Cant process anymore after the crowdsale has finished\n', '    require(now <= endTime);\n', '\n', '    for (uint i = 0; i < _beneficiaries.length; i++) {\n', '      // update state\n', '      tokensSold = tokensSold.add(_tokenAmounts[i]);\n', '      token.mint(_beneficiaries[i], _tokenAmounts[i]);\n', '\n', '      TokenPurchase(msg.sender, _beneficiaries[i], 0, _tokenAmounts[i]);\n', '    }\n', '  }\n', '\n', '\n', '  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\n', '    uint256 actualRate = rate;\n', '\n', '    // For the first 24 hours of the crowdsale there is a bonus\n', '    if (now <= startTime + 1 days) {\n', '      actualRate = actualRate.add(bonus);\n', '    }\n', '\n', '    return weiAmount.mul(actualRate);\n', '  }\n', '\n', '  function finalization() internal {\n', '    // transfer tokens to team\n', '    token.mint(TEAM_ADDRESS, TEAM_TOKENS);\n', '\n', '    // transfer tokens to the 4th pillar vault\n', '    // already minted before crowdsale\n', '    // token.mint(VAULT_ADDRESS, VAULT_TOKENS);\n', '\n', '    // transfer advisors and contributors tokens\n', '    token.mint(ADVISORS_AND_CONTRIBUTORS_ADDRESS, ADVISORS_AND_CONTRIBUTORS_TOKENS);\n', '\n', '    // transfer bounty tokens\n', '    // already minted before crowdsale\n', '    //token.mint(BOUNTY_ADDRESS, BOUNTY_TOKENS);\n', '\n', '    // transfer all unsold tokens to the unsold address for the airdrop\n', '    uint256 unsold_tokens = TOKEN_SALE_CAP - tokensSold;\n', '    token.mint(UNSOLD_ADDRESS, unsold_tokens);\n', '\n', '    // finish minting\n', '    token.finishMinting();\n', '    // release ownership back to owner\n', '    token.transferOwnership(owner);\n', '    // finalize\n', '    super.finalization();\n', '  }\n', '\n', '  // @dev Recover any mistakenly sent ERC20 tokens to the Crowdsale address\n', '  function recoverERC20Tokens(address _erc20, uint256 _amount) public onlyOwner {\n', '    ERC20Interface(_erc20).transfer(msg.sender, _amount);\n', '  }\n', '\n', '  function releaseTokenOwnership() public onlyOwner {\n', '    token.transferOwnership(owner);\n', '  }\n', '}']
['pragma solidity ^0.4.17;\n', '\n', '// File: contracts/helpers/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '  * @dev The Constructor sets the original owner of the contract to the\n', '  * sender account.\n', '  */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '  * @dev Throws if called by any other account other than owner.\n', '  */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/helpers/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/token/ERC20Interface.sol\n', '\n', 'contract ERC20Interface {\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '}\n', '\n', '// File: contracts/token/BaseToken.sol\n', '\n', 'contract BaseToken is ERC20Interface {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev Obtain total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    require(_spender != address(0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '    Transfer(_from, _to, _value);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/token/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is BaseToken, Ownable {\n', '\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/token/CappedToken.sol\n', '\n', 'contract CappedToken is MintableToken {\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedToken(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(totalSupply_.add(_amount) <= cap);\n', '\n', '    return super.mint(_to, _amount);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/helpers/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/token/PausableToken.sol\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev BaseToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is BaseToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '// File: contracts/token/SignedTransferToken.sol\n', '\n', '/**\n', '* @title SignedTransferToken\n', '* @dev The SignedTransferToken enables collection of fees for token transfers\n', '* in native token currency. User will provide a signature that allows the third\n', '* party to settle the transaction in his name and collect fee for provided\n', '* serivce.\n', '*/\n', 'contract SignedTransferToken is BaseToken {\n', '\n', '  event TransferPreSigned(\n', '    address indexed from,\n', '    address indexed to,\n', '    address indexed settler,\n', '    uint256 value,\n', '    uint256 fee\n', '  );\n', '\n', '  event TransferPreSignedMany(\n', '    address indexed from,\n', '    address indexed settler,\n', '    uint256 value,\n', '    uint256 fee\n', '  );\n', '\n', '\n', '  // Mapping of already executed settlements for a given address\n', '  mapping(address => mapping(bytes32 => bool)) executedSettlements;\n', '\n', '  /**\n', '  * @dev Will settle a pre-signed transfer\n', '  */\n', '  function transferPreSigned(address _from,\n', '                             address _to,\n', '                             uint256 _value,\n', '                             uint256 _fee,\n', '                             uint256 _nonce,\n', '                             uint8 _v,\n', '                             bytes32 _r,\n', '                             bytes32 _s) public returns (bool) {\n', '    uint256 total = _value.add(_fee);\n', '    bytes32 calcHash = calculateHash(_from, _to, _value, _fee, _nonce);\n', '\n', '    require(_to != address(0));\n', '    require(isValidSignature(_from, calcHash, _v, _r, _s));\n', '    require(balances[_from] >= total);\n', '    require(!executedSettlements[_from][calcHash]);\n', '\n', '    executedSettlements[_from][calcHash] = true;\n', '\n', '    // Move tokens\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(_from, _to, _value);\n', '\n', '    // Move fee\n', '    balances[_from] = balances[_from].sub(_fee);\n', '    balances[msg.sender] = balances[msg.sender].add(_fee);\n', '    Transfer(_from, msg.sender, _fee);\n', '\n', '    TransferPreSigned(_from, _to, msg.sender, _value, _fee);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Settle multiple transactions in a single call. Please note that\n', '  * should a single one fail the full state will be reverted. Your client\n', '  * implementation should always first check for balances, correct signatures\n', '  * and any other conditions that might result in failed transaction.\n', '  */\n', '  function transferPreSignedBulk(address[] _from,\n', '                                 address[] _to,\n', '                                 uint256[] _values,\n', '                                 uint256[] _fees,\n', '                                 uint256[] _nonces,\n', '                                 uint8[] _v,\n', '                                 bytes32[] _r,\n', '                                 bytes32[] _s) public returns (bool) {\n', '    // Make sure all the arrays are of the same length\n', '    require(_from.length == _to.length &&\n', '            _to.length ==_values.length &&\n', '            _values.length == _fees.length &&\n', '            _fees.length == _nonces.length &&\n', '            _nonces.length == _v.length &&\n', '            _v.length == _r.length &&\n', '            _r.length == _s.length);\n', '\n', '    for(uint i; i < _from.length; i++) {\n', '      transferPreSigned(_from[i],\n', '                        _to[i],\n', '                        _values[i],\n', '                        _fees[i],\n', '                        _nonces[i],\n', '                        _v[i],\n', '                        _r[i],\n', '                        _s[i]);\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '\n', '  function transferPreSignedMany(address _from,\n', '                                 address[] _tos,\n', '                                 uint256[] _values,\n', '                                 uint256 _fee,\n', '                                 uint256 _nonce,\n', '                                 uint8 _v,\n', '                                 bytes32 _r,\n', '                                 bytes32 _s) public returns (bool) {\n', '   require(_tos.length == _values.length);\n', '   uint256 total = getTotal(_tos, _values, _fee);\n', '\n', '   bytes32 calcHash = calculateManyHash(_from, _tos, _values, _fee, _nonce);\n', '\n', '   require(isValidSignature(_from, calcHash, _v, _r, _s));\n', '   require(balances[_from] >= total);\n', '   require(!executedSettlements[_from][calcHash]);\n', '\n', '   executedSettlements[_from][calcHash] = true;\n', '\n', '   // transfer to each recipient and take fee at the end\n', '   for(uint i; i < _tos.length; i++) {\n', '     // Move tokens\n', '     balances[_from] = balances[_from].sub(_values[i]);\n', '     balances[_tos[i]] = balances[_tos[i]].add(_values[i]);\n', '     Transfer(_from, _tos[i], _values[i]);\n', '   }\n', '\n', '   // Move fee\n', '   balances[_from] = balances[_from].sub(_fee);\n', '   balances[msg.sender] = balances[msg.sender].add(_fee);\n', '   Transfer(_from, msg.sender, _fee);\n', '\n', '   TransferPreSignedMany(_from, msg.sender, total, _fee);\n', '\n', '   return true;\n', '  }\n', '\n', '  function getTotal(address[] _tos, uint256[] _values, uint256 _fee) private view returns (uint256)  {\n', '    uint256 total = _fee;\n', '\n', '    for(uint i; i < _tos.length; i++) {\n', '      total = total.add(_values[i]); // sum of all the values + fee\n', '      require(_tos[i] != address(0)); // check that the recipient is a valid address\n', '    }\n', '\n', '    return total;\n', '  }\n', '\n', '  /**\n', '  * @dev Calculates transfer hash for transferPreSignedMany\n', '  */\n', '  function calculateManyHash(address _from, address[] _tos, uint256[] _values, uint256 _fee, uint256 _nonce) public view returns (bytes32) {\n', '    return keccak256(uint256(1), address(this), _from, _tos, _values, _fee, _nonce);\n', '  }\n', '\n', '  /**\n', '  * @dev Calculates transfer hash.\n', '  */\n', '  function calculateHash(address _from, address _to, uint256 _value, uint256 _fee, uint256 _nonce) public view returns (bytes32) {\n', '    return keccak256(uint256(0), address(this), _from, _to, _value, _fee, _nonce);\n', '  }\n', '\n', '  /**\n', '  * @dev Validates the signature\n', '  */\n', '  function isValidSignature(address _signer, bytes32 _hash, uint8 _v, bytes32 _r, bytes32 _s) public pure returns (bool) {\n', '    return _signer == ecrecover(\n', '            keccak256("\\x19Ethereum Signed Message:\\n32", _hash),\n', '            _v,\n', '            _r,\n', '            _s\n', '        );\n', '  }\n', '\n', '  /**\n', '  * @dev Allows you to check whether a certain transaction has been already\n', '  * settled or not.\n', '  */\n', '  function isTransactionAlreadySettled(address _from, bytes32 _calcHash) public view returns (bool) {\n', '    return executedSettlements[_from][_calcHash];\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/token/PausableSignedTransferToken.sol\n', '\n', 'contract PausableSignedTransferToken is SignedTransferToken, PausableToken {\n', '\n', '  function transferPreSigned(address _from,\n', '                             address _to,\n', '                             uint256 _value,\n', '                             uint256 _fee,\n', '                             uint256 _nonce,\n', '                             uint8 _v,\n', '                             bytes32 _r,\n', '                             bytes32 _s) public whenNotPaused returns (bool) {\n', '    return super.transferPreSigned(_from, _to, _value, _fee, _nonce, _v, _r, _s);\n', '  }\n', '\n', '  function transferPreSignedBulk(address[] _from,\n', '                                 address[] _to,\n', '                                 uint256[] _values,\n', '                                 uint256[] _fees,\n', '                                 uint256[] _nonces,\n', '                                 uint8[] _v,\n', '                                 bytes32[] _r,\n', '                                 bytes32[] _s) public whenNotPaused returns (bool) {\n', '    return super.transferPreSignedBulk(_from, _to, _values, _fees, _nonces, _v, _r, _s);\n', '  }\n', '\n', '  function transferPreSignedMany(address _from,\n', '                                 address[] _tos,\n', '                                 uint256[] _values,\n', '                                 uint256 _fee,\n', '                                 uint256 _nonce,\n', '                                 uint8 _v,\n', '                                 bytes32 _r,\n', '                                 bytes32 _s) public whenNotPaused returns (bool) {\n', '    return super.transferPreSignedMany(_from, _tos, _values, _fee, _nonce, _v, _r, _s);\n', '  }\n', '}\n', '\n', '// File: contracts/FourToken.sol\n', '\n', 'contract FourToken is CappedToken, PausableSignedTransferToken  {\n', "  string public name = 'The 4th Pillar Token';\n", "  string public symbol = 'FOUR';\n", '  uint256 public decimals = 18;\n', '\n', '  // Max supply of 400 million\n', '  uint256 public maxSupply = 400000000 * 10**decimals;\n', '\n', '  function FourToken()\n', '    CappedToken(maxSupply) public {\n', '      paused = true;\n', '  }\n', '\n', '  // @dev Recover any mistakenly sent ERC20 tokens to the Token address\n', '  function recoverERC20Tokens(address _erc20, uint256 _amount) public onlyOwner {\n', '    ERC20Interface(_erc20).transfer(msg.sender, _amount);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/crowdsale/Crowdsale.sol\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive. The contract requires a MintableToken that will be\n', ' * minted as contributions arrive, note that the crowdsale contract\n', ' * must be owner of the token in order to be able to mint it.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param tokens amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 tokens);\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps in UNIX.\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // how many tokens does a buyer get per wei\n', '  uint256 public rate;\n', '\n', '  // wallet where funds are forwarded\n', '  address public wallet;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '  // amount of sold tokens\n', '  uint256 public tokensSold;\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, address _token) public {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = MintableToken(_token);\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    tokensSold = tokensSold.add(tokens);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '  // Override this method to have a way to add business logic to your crowdsale when buying\n', '  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\n', '    return weiAmount.mul(rate);\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/crowdsale/FinalizableCrowdsale.sol\n', '\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  event Finalized();\n', '\n', '  bool public isFinalized = false;\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/crowdsale/TokenCappedCrowdsale.sol\n', '\n', 'contract TokenCappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public tokenCap;\n', '\n', '  function TokenCappedCrowdsale(uint256 _tokenCap) public {\n', '    require(_tokenCap > 0);\n', '    tokenCap = _tokenCap;\n', '  }\n', '\n', '  function isCapReached() public view returns (bool) {\n', '    return tokensSold >= tokenCap;\n', '  }\n', '\n', '  function hasEnded() public view returns (bool) {\n', '    return isCapReached() || super.hasEnded();\n', '  }\n', '\n', '  // overriding Crowdsale#validPurchase to add extra cap logic\n', '  // @return true if investors can buy at the moment\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinCap = tokensSold.add(getTokenAmount(msg.value)) <= tokenCap;\n', '    return withinCap && super.validPurchase();\n', '  }\n', '}\n', '\n', '// File: contracts/crowdsale/WhitelistCrowdsale.sol\n', '\n', 'contract WhitelistCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  event WhitelistUpdated(uint256 timestamp, string operation, uint256 totalAddresses);\n', '\n', '  // Mapping of whitelisted addresses\n', '  mapping(address => bool) whitelisted;\n', '\n', '  // Total count of whitelisted participants\n', '  uint256 public whitelistedCount;\n', '\n', '  function isWhitelisted(address _addr) public view returns (bool) {\n', '    return whitelisted[_addr];\n', '  }\n', '\n', '  function addAddress(address _addr) external onlyOwner {\n', '    whitelisted[_addr] = true;\n', '    whitelistedCount++;\n', '    WhitelistUpdated(block.timestamp, "Added", whitelistedCount);\n', '  }\n', '\n', '  function addAddresses(address[] _addrs) external onlyOwner {\n', '    for (uint256 i = 0; i < _addrs.length; i++) {\n', '      whitelisted[_addrs[i]] = true;\n', '      whitelistedCount++;\n', '    }\n', '\n', '    WhitelistUpdated(block.timestamp, "Added", whitelistedCount);\n', '  }\n', '\n', '  function removeAddress(address _addr) external onlyOwner {\n', '    whitelisted[_addr] = false;\n', '    whitelistedCount--;\n', '    WhitelistUpdated(block.timestamp, "Removed", whitelistedCount);\n', '  }\n', '\n', '  function removeAddresses(address[] _addrs) external onlyOwner {\n', '    for (uint256 i = 0; i < _addrs.length; i++) {\n', '      whitelisted[_addrs[i]] = false;\n', '      whitelistedCount--;\n', '    }\n', '\n', '    WhitelistUpdated(block.timestamp, "Removed", whitelistedCount);\n', '  }\n', '\n', '  function validPurchase() internal view returns (bool) {\n', '    return isWhitelisted(msg.sender) && super.validPurchase();\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/FourCrowdsale.sol\n', '\n', 'contract FourCrowdsale is TokenCappedCrowdsale, WhitelistCrowdsale, FinalizableCrowdsale {\n', '  event RateChanged(uint256 newRate, string name);\n', '\n', '  uint256 private constant E18 = 10**18;\n', '\n', '  // Max tokens sold = 152 million\n', '  uint256 private TOKEN_SALE_CAP = 152000000 * E18;\n', '\n', '  uint256 public constant TEAM_TOKENS = 50000000 * E18;\n', '  address public constant TEAM_ADDRESS = 0x3EC2fC20c04656F4B0AA7372258A36FAfB1EF427;\n', '\n', '  // Vault tokens have been pre-minted\n', '//  uint256 public constant VAULT_TOKENS = 152000000 * E18;\n', '//  address public constant VAULT_ADDRESS = 0x545baa8e4Fff675711CB92Af33e5850aDD913b76;\n', '\n', '  uint256 public constant ADVISORS_AND_CONTRIBUTORS_TOKENS = 39000000 * E18;\n', '  address public constant ADVISORS_AND_CONTRIBUTORS_ADDRESS = 0x90adab6891514DC24411B9Adf2e11C0eD7739999;\n', '\n', '  // Bounty tokens have been pre-minted\n', '//  uint256 public constant BOUNTY_TOKENS = 7000000 * E18;\n', '//  address public constant BOUNTY_ADDRESS = 0x18f260a71c282bc4d5fe4ee1187658a06e9d1a59;\n', '\n', '  // Unsold tokens will be transfered to the VAULT\n', '  address public constant UNSOLD_ADDRESS = 0x4eC155995211C8639375Ae3106187bff3FF5DB46;\n', '\n', '  // Bonus amount. The first 24h there will be a bonus of 10%\n', '  uint256 public bonus;\n', '\n', '  function FourCrowdsale(uint256 _startTime,\n', '                         uint256 _endTime,\n', '                         uint256 _rate,\n', '                         uint256 _bonus,\n', '                         address _wallet,\n', '                         address _token)\n', '        TokenCappedCrowdsale(TOKEN_SALE_CAP)\n', '        Crowdsale(_startTime, _endTime, _rate, _wallet, _token) public {\n', '    bonus = _bonus;\n', '  }\n', '\n', '  function setCrowdsaleWallet(address _wallet) public onlyOwner {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '  }\n', '\n', '  function changeStartAndEndTime(uint256 _newStartTime, uint256 _newEndTime) public onlyOwner {\n', '    require(_newStartTime >= now);\n', '    require(_newEndTime >= _newStartTime);\n', '\n', '    startTime = _newStartTime;\n', '    endTime = _newEndTime;\n', '  }\n', '\n', '  function changeEndTime(uint256 _newEndTime) public onlyOwner {\n', '    require(_newEndTime > startTime);\n', '    endTime = _newEndTime;\n', '  }\n', '\n', '  function setRate(uint256 _rate) public onlyOwner  {\n', '    require(now < startTime); // cant change once the sale has started\n', '    rate = _rate;\n', "    RateChanged(_rate, 'rate');\n", '  }\n', '\n', '  function setBonus(uint256 _bonus) public onlyOwner  {\n', '    require(now < startTime); // cant change once the sale has started\n', '    bonus = _bonus;\n', "    RateChanged(_bonus, 'bonus');\n", '  }\n', '\n', '  function processPresaleOrEarlyContributors(address[] _beneficiaries, uint256[] _tokenAmounts) public onlyOwner {\n', '    // Cant process anymore after the crowdsale has finished\n', '    require(now <= endTime);\n', '\n', '    for (uint i = 0; i < _beneficiaries.length; i++) {\n', '      // update state\n', '      tokensSold = tokensSold.add(_tokenAmounts[i]);\n', '      token.mint(_beneficiaries[i], _tokenAmounts[i]);\n', '\n', '      TokenPurchase(msg.sender, _beneficiaries[i], 0, _tokenAmounts[i]);\n', '    }\n', '  }\n', '\n', '\n', '  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\n', '    uint256 actualRate = rate;\n', '\n', '    // For the first 24 hours of the crowdsale there is a bonus\n', '    if (now <= startTime + 1 days) {\n', '      actualRate = actualRate.add(bonus);\n', '    }\n', '\n', '    return weiAmount.mul(actualRate);\n', '  }\n', '\n', '  function finalization() internal {\n', '    // transfer tokens to team\n', '    token.mint(TEAM_ADDRESS, TEAM_TOKENS);\n', '\n', '    // transfer tokens to the 4th pillar vault\n', '    // already minted before crowdsale\n', '    // token.mint(VAULT_ADDRESS, VAULT_TOKENS);\n', '\n', '    // transfer advisors and contributors tokens\n', '    token.mint(ADVISORS_AND_CONTRIBUTORS_ADDRESS, ADVISORS_AND_CONTRIBUTORS_TOKENS);\n', '\n', '    // transfer bounty tokens\n', '    // already minted before crowdsale\n', '    //token.mint(BOUNTY_ADDRESS, BOUNTY_TOKENS);\n', '\n', '    // transfer all unsold tokens to the unsold address for the airdrop\n', '    uint256 unsold_tokens = TOKEN_SALE_CAP - tokensSold;\n', '    token.mint(UNSOLD_ADDRESS, unsold_tokens);\n', '\n', '    // finish minting\n', '    token.finishMinting();\n', '    // release ownership back to owner\n', '    token.transferOwnership(owner);\n', '    // finalize\n', '    super.finalization();\n', '  }\n', '\n', '  // @dev Recover any mistakenly sent ERC20 tokens to the Crowdsale address\n', '  function recoverERC20Tokens(address _erc20, uint256 _amount) public onlyOwner {\n', '    ERC20Interface(_erc20).transfer(msg.sender, _amount);\n', '  }\n', '\n', '  function releaseTokenOwnership() public onlyOwner {\n', '    token.transferOwnership(owner);\n', '  }\n', '}']
