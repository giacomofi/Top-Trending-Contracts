['pragma solidity ^0.4.19;\n', '\n', 'interface ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * Owned Contract\n', ' * \n', ' * This is a contract trait to inherit from. Contracts that inherit from Owned \n', ' * are able to modify functions to be only callable by the owner of the\n', ' * contract.\n', ' * \n', ' * By default it is impossible to change the owner of the contract.\n', ' */\n', 'contract Owned {\n', '    /**\n', '     * Contract owner.\n', '     * \n', '     * This value is set at contract creation time.\n', '     */\n', '    address owner;\n', '\n', '    /**\n', '     * Contract constructor.\n', '     * \n', '     * This sets the owner of the Owned contract at the time of contract\n', '     * creation.\n', '     */\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * Modify method to only allow the owner to call it.\n', '     */\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}\n', '\n', '/**\n', ' * Aethia Chi Token Sale\n', ' * \n', ' * This contract represent the 50% off sale for the in-game currency of Aethia.\n', ' * The normal exchange rate in-game is 0.001 ETH for 1 CHI. During the sale, the\n', ' * exchange rate will be 0.0005 ETH for 1 CHI.\n', ' * \n', ' * The contract only exchanges whole (integer) values of CHI. If the sender\n', ' * sends a value of 0.00051 ETH, the sender will get 1 CHI and 0.00001 ETH back.\n', ' * \n', " * In the case not enough CHI tokens remain to fully exchange the sender's value\n", ' * from ETH to CHI, the remaining CHI will be paid out, and the remaining ETH\n', ' * will be returned to the sender.\n', ' */\n', 'contract ChiSale is Owned {\n', '    /**\n', '     * The CHI token contract.\n', '     */\n', '    ERC20 chiTokenContract;\n', '\n', '    /**\n', '     * The start date of the CHI sale in seconds since the UNIX epoch.\n', '     * \n', '     * This is equivalent to February 17th, 12:00:00 UTC.\n', '     */\n', '    uint256 constant START_DATE = 1518868800;\n', '\n', '    /**\n', '     * The end date of the CHI sale in seconds since the UNIX epoch.\n', '     * \n', '     * This is equivalent to February 19th, 12:00:00 UTC.\n', '     */\n', '    uint256 constant END_DATE = 1519041600;\n', '\n', '    /**\n', '     * The price per CHI token in ETH.\n', '     */\n', '    uint256 tokenPrice = 0.0005 ether;\n', '    \n', '    /**\n', '     * The number of Chi tokens for sale.\n', '     */\n', '    uint256 tokensForSale = 10000000;\n', '\n', '    /**\n', '     * Chi token sale event.\n', '     * \n', '     * For audit and logging purposes, all chi token sales are logged by \n', '     * acquirer.\n', '     */\n', '    event LogChiSale(address indexed _acquirer, uint256 _amount);\n', '\n', '    /**\n', '     * Contract constructor.\n', '     * \n', '     * This passes the address of the Chi token contract address to the\n', '     * Chi sale contract. Additionally it sets the owner to the contract \n', '     * creator.\n', '     */\n', '    function ChiSale(address _chiTokenAddress) Owned() public {\n', '        chiTokenContract = ERC20(_chiTokenAddress);\n', '    }\n', '\n', '    /**\n', '     * Buy Chi tokens.\n', '     * \n', '     * The cost of a Chi token during the sale is 0.0005 ether per token. This\n', '     * contract accepts any amount equal to or above 0.0005 ether. It tries to\n', '     * exchange as many Chi tokens for the sent value as possible. The remaining\n', '     * ether is sent back.\n', '     *\n', '     * In the case where not enough Chi tokens are available for the to exchange\n', '     * for the entirety of the sent value, an attempt will be made to exchange\n', '     * as much as possible. The remaining ether is then sent back.\n', '     * \n', '     * The sale starts at February 17th, 12:00:00 UTC, and ends at February\n', '     * 19th, 12:00:00 UTC, lasting a total of 48 hours. Transactions that occur\n', '     * outside this time period are rejected.\n', '     */\n', '    function buy() payable external {\n', '        require(START_DATE <= now);\n', '        require(END_DATE >= now);\n', '        require(tokensForSale > 0);\n', '        require(msg.value >= tokenPrice);\n', '\n', '        uint256 tokens = msg.value / tokenPrice;\n', '        uint256 remainder;\n', '\n', "        // If there aren't enough tokens to exchange, try to exchange as many\n", '        // as possible, and pay out the remainder. Else, if there are enough\n', "        // tokens, pay the remaining ether that couldn't be exchanged for tokens \n", '        // back to the sender.\n', '        if (tokens > tokensForSale) {\n', '            tokens = tokensForSale;\n', '\n', '            remainder = msg.value - tokens * tokenPrice;\n', '        } else {\n', '            remainder = msg.value % tokenPrice;\n', '        }\n', '        \n', '        tokensForSale -= tokens;\n', '\n', '        LogChiSale(msg.sender, tokens);\n', '\n', '        chiTokenContract.transfer(msg.sender, tokens);\n', '\n', '        if (remainder > 0) {\n', '            msg.sender.transfer(remainder);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Fallback payable method.\n', '     *\n', '     * This is in the case someone calls the contract without specifying the\n', '     * correct method to call. This method will ensure the failure of a\n', '     * transaction that was wrongfully executed.\n', '     */\n', '    function () payable external {\n', '        revert();\n', '    }\n', '\n', '    /**\n', '     * Withdraw all funds from contract.\n', '     * \n', '     * Additionally, this moves all remaining Chi tokens back to the original\n', '     * owner to be used for redistribution.\n', '     */\n', '    function withdraw() onlyOwner external {\n', '        uint256 currentBalance = chiTokenContract.balanceOf(this);\n', '\n', '        chiTokenContract.transfer(owner, currentBalance);\n', '\n', '        owner.transfer(this.balance);\n', '    }\n', '    \n', '    function remainingTokens() external view returns (uint256) {\n', '        return tokensForSale;\n', '    }\n', '}']