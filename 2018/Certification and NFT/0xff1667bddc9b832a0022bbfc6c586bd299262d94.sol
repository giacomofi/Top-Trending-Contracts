['pragma solidity ^0.4.23;\n', '\n', 'contract Control {\n', '    address public owner;\n', '    bool public pause;\n', '\n', '    event PAUSED();\n', '    event STARTED();\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused {\n', '        require(pause);\n', '        _;\n', '    }\n', '\n', '    modifier whenNotPaused {\n', '        require(!pause);\n', '        _;\n', '    }\n', '\n', '    function setOwner(address _owner) onlyOwner public {\n', '        owner = _owner;\n', '    }\n', '\n', '    function setState(bool _pause) onlyOwner public {\n', '        pause = _pause;\n', '        if (pause) {\n', '            emit PAUSED();\n', '        } else {\n', '            emit STARTED();\n', '        }\n', '    }\n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '}\n', '\n', 'contract ERC20Token {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    function symbol() public constant returns (string);\n', '    function decimals() public constant returns (uint256);\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract Share {\n', '    function onIncome() public payable;\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Crowdsale is Control {\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    ERC20Token public token;\n', '\n', '    address public tokenFrom;\n', '    function setTokenFrom(address _from) onlyOwner public {\n', '        tokenFrom = _from;\n', '    }\n', '\n', '    // Address where funds are collected\n', '    Share public wallet;\n', '    function setWallet(Share _wallet) onlyOwner public {\n', '        wallet = _wallet;\n', '    }\n', '\n', '    // How many token units a buyer gets per wei.\n', '    // The rate is the conversion between wei and the smallest and indivisible token unit.\n', '    // So, if you are using a rate of 1 with a DetailedShare token with 3 decimals called TOK\n', '    // 1 wei will give you 1 unit, or 0.001 TOK.\n', '    uint256 public rate;\n', '    function adjustRate(uint256 _rate) onlyOwner public {\n', '        rate = _rate;\n', '    }\n', '\n', '    uint256 public weiRaiseLimit;\n', '    \n', '    function setWeiRaiseLimit(uint256 _limit) onlyOwner public {\n', '        weiRaiseLimit = _limit;\n', '    }\n', '    \n', '    // Amount of wei raised\n', '    uint256 public weiRaised;\n', '  \n', '    /**\n', '      * Event for token purchase logging\n', '      * @param purchaser who paid for the tokens\n', '      * @param beneficiary who got the tokens\n', '      * @param value weis paid for purchase\n', '      * @param amount amount of tokens purchased\n', '      */\n', '    event TokenPurchase (\n', '        address indexed purchaser,\n', '        address indexed beneficiary,\n', '        uint256 value,\n', '        uint256 amount\n', '    );\n', '\n', '    modifier onlyAllowed {\n', '        require(weiRaised < weiRaiseLimit);\n', '        _;\n', '    }\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  constructor(uint256 _rate, Share _wallet, ERC20Token _token, address _tokenFrom, uint256 _ethRaiseLimit) \n', '  public \n', '  {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    owner = msg.sender;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '    tokenFrom  = _tokenFrom;\n', '    weiRaiseLimit = _ethRaiseLimit * (10 ** 18);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable onlyAllowed whenNotPaused {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    if (weiAmount > weiRaiseLimit.sub(weiRaised)) {\n', '        weiAmount = weiRaiseLimit.sub(weiRaised);\n', '    }\n', '    \n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '    \n', '    if (address(wallet) != address(0)) {\n', '        wallet.onIncome.value(weiAmount)();\n', '    }\n', '    \n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    \n', '    emit TokenPurchase(\n', '      msg.sender,\n', '      _beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '    \n', '    if(msg.value.sub(weiAmount) > 0) {\n', '        msg.sender.transfer(msg.value.sub(weiAmount));\n', '    }\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    token.transferFrom(tokenFrom, _beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount)\n', '    internal view returns (uint256)\n', '  {\n', '    return _weiAmount / rate;\n', '  }\n', '  \n', '  function withdrawl() public {\n', '      owner.transfer(address(this).balance);\n', '  }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', 'contract Control {\n', '    address public owner;\n', '    bool public pause;\n', '\n', '    event PAUSED();\n', '    event STARTED();\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused {\n', '        require(pause);\n', '        _;\n', '    }\n', '\n', '    modifier whenNotPaused {\n', '        require(!pause);\n', '        _;\n', '    }\n', '\n', '    function setOwner(address _owner) onlyOwner public {\n', '        owner = _owner;\n', '    }\n', '\n', '    function setState(bool _pause) onlyOwner public {\n', '        pause = _pause;\n', '        if (pause) {\n', '            emit PAUSED();\n', '        } else {\n', '            emit STARTED();\n', '        }\n', '    }\n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '}\n', '\n', 'contract ERC20Token {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    function symbol() public constant returns (string);\n', '    function decimals() public constant returns (uint256);\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract Share {\n', '    function onIncome() public payable;\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Crowdsale is Control {\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    ERC20Token public token;\n', '\n', '    address public tokenFrom;\n', '    function setTokenFrom(address _from) onlyOwner public {\n', '        tokenFrom = _from;\n', '    }\n', '\n', '    // Address where funds are collected\n', '    Share public wallet;\n', '    function setWallet(Share _wallet) onlyOwner public {\n', '        wallet = _wallet;\n', '    }\n', '\n', '    // How many token units a buyer gets per wei.\n', '    // The rate is the conversion between wei and the smallest and indivisible token unit.\n', '    // So, if you are using a rate of 1 with a DetailedShare token with 3 decimals called TOK\n', '    // 1 wei will give you 1 unit, or 0.001 TOK.\n', '    uint256 public rate;\n', '    function adjustRate(uint256 _rate) onlyOwner public {\n', '        rate = _rate;\n', '    }\n', '\n', '    uint256 public weiRaiseLimit;\n', '    \n', '    function setWeiRaiseLimit(uint256 _limit) onlyOwner public {\n', '        weiRaiseLimit = _limit;\n', '    }\n', '    \n', '    // Amount of wei raised\n', '    uint256 public weiRaised;\n', '  \n', '    /**\n', '      * Event for token purchase logging\n', '      * @param purchaser who paid for the tokens\n', '      * @param beneficiary who got the tokens\n', '      * @param value weis paid for purchase\n', '      * @param amount amount of tokens purchased\n', '      */\n', '    event TokenPurchase (\n', '        address indexed purchaser,\n', '        address indexed beneficiary,\n', '        uint256 value,\n', '        uint256 amount\n', '    );\n', '\n', '    modifier onlyAllowed {\n', '        require(weiRaised < weiRaiseLimit);\n', '        _;\n', '    }\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  constructor(uint256 _rate, Share _wallet, ERC20Token _token, address _tokenFrom, uint256 _ethRaiseLimit) \n', '  public \n', '  {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    owner = msg.sender;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '    tokenFrom  = _tokenFrom;\n', '    weiRaiseLimit = _ethRaiseLimit * (10 ** 18);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable onlyAllowed whenNotPaused {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    if (weiAmount > weiRaiseLimit.sub(weiRaised)) {\n', '        weiAmount = weiRaiseLimit.sub(weiRaised);\n', '    }\n', '    \n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '    \n', '    if (address(wallet) != address(0)) {\n', '        wallet.onIncome.value(weiAmount)();\n', '    }\n', '    \n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    \n', '    emit TokenPurchase(\n', '      msg.sender,\n', '      _beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '    \n', '    if(msg.value.sub(weiAmount) > 0) {\n', '        msg.sender.transfer(msg.value.sub(weiAmount));\n', '    }\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    token.transferFrom(tokenFrom, _beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount)\n', '    internal view returns (uint256)\n', '  {\n', '    return _weiAmount / rate;\n', '  }\n', '  \n', '  function withdrawl() public {\n', '      owner.transfer(address(this).balance);\n', '  }\n', '}']
