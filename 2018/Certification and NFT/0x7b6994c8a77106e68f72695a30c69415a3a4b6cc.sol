['pragma solidity ^0.4.4;\n', '\n', '\n', '/// @title Golem Network Token (GNT) - crowdfunding code for Golem Project\n', 'contract GolemNetworkToken {\n', '    string public constant name = "BobbieCoin";\n', '    string public constant symbol = "BOBBIE";\n', '    uint8 public constant decimals = 18;  // 18 decimal places, the same as ETH.\n', '\n', '    uint256 public constant tokenCreationRate = 1000000000;\n', '\n', '    // The funding cap in weis.\n', '    uint256 public constant tokenCreationCap = 820000 ether * tokenCreationRate;\n', '    uint256 public constant tokenCreationMin = 150000 ether * tokenCreationRate;\n', '\n', '    uint256 public fundingStartBlock;\n', '    uint256 public fundingEndBlock;\n', '\n', '    // The flag indicates if the GNT contract is in Funding state.\n', '    bool public funding = true;\n', '\n', '    // Receives ETH and its own GNT endowment.\n', '    address public golemFactory;\n', '\n', '    // Has control over token migration to next version of token.\n', '    address public migrationMaster;\n', '\n', '  \n', '    // The current total token supply.\n', '    uint256 totalTokens;\n', '\n', '    mapping (address => uint256) balances;\n', '\n', '    address public migrationAgent;\n', '    uint256 public totalMigrated;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Migrate(address indexed _from, address indexed _to, uint256 _value);\n', '    event Refund(address indexed _from, uint256 _value);\n', '\n', '    function GolemNetworkToken(address _golemFactory,\n', '                               address _migrationMaster,\n', '                               uint256 _fundingStartBlock,\n', '                               uint256 _fundingEndBlock) {\n', '\n', '        if (_golemFactory == 0) throw;\n', '        if (_migrationMaster == 0) throw;\n', '        if (_fundingEndBlock   <= _fundingStartBlock) throw;\n', '\n', '        migrationMaster = _migrationMaster;\n', '        golemFactory = _golemFactory;\n', '        fundingStartBlock = _fundingStartBlock;\n', '        fundingEndBlock = _fundingEndBlock;\n', '                // For the Golem Factory:\n', '        balances[_golemFactory] = 1000000000; // 12/18 pp of 30000 allocations.\n', '\n', '    }\n', '\n', '    /// @notice Transfer `_value` GNT tokens from sender&#39;s account\n', '    /// `msg.sender` to provided account address `_to`.\n', '    /// @notice This function is disabled during the funding.\n', '    /// @dev Required state: Operational\n', '    /// @param _to The address of the tokens recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool) {\n', '\n', '        var senderBalance = balances[msg.sender];\n', '        if (senderBalance >= _value && _value > 0) {\n', '            senderBalance -= _value;\n', '            balances[msg.sender] = senderBalance;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function totalSupply() external constant returns (uint256) {\n', '        return totalTokens;\n', '    }\n', '\n', '    function balanceOf(address _owner) external constant returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    // Token migration support:\n', '\n', '    /// @notice Migrate tokens to the new token contract.\n', '    /// @dev Required state: Operational Migration\n', '    /// @param _value The amount of token to be migrated\n', '    function migrate(uint256 _value) external {\n', '        // Abort if not in Operational Migration state.\n', '        if (funding) throw;\n', '        if (migrationAgent == 0) throw;\n', '\n', '        // Validate input value.\n', '        if (_value == 0) throw;\n', '        if (_value > balances[msg.sender]) throw;\n', '\n', '        balances[msg.sender] -= _value;\n', '        totalTokens -= _value;\n', '        totalMigrated += _value;\n', '        MigrationAgent(migrationAgent).migrateFrom(msg.sender, _value);\n', '        Migrate(msg.sender, migrationAgent, _value);\n', '    }\n', '\n', '    /// @notice Set address of migration target contract and enable migration\n', '    /// process.\n', '    /// @dev Required state: Operational Normal\n', '    /// @dev State transition: -> Operational Migration\n', '    /// @param _agent The address of the MigrationAgent contract\n', '    function setMigrationAgent(address _agent) external {\n', '        // Abort if not in Operational Normal state.\n', '        if (funding) throw;\n', '        if (migrationAgent != 0) throw;\n', '        if (msg.sender != migrationMaster) throw;\n', '        migrationAgent = _agent;\n', '    }\n', '\n', '    function setMigrationMaster(address _master) external {\n', '        if (msg.sender != migrationMaster) throw;\n', '        if (_master == 0) throw;\n', '        migrationMaster = _master;\n', '    }\n', '\n', '    // Crowdfunding:\n', '\n', '    /// @notice Create tokens when funding is active.\n', '    /// @dev Required state: Funding Active\n', '    /// @dev State transition: -> Funding Success (only if cap reached)\n', '    function () payable external {\n', '        // Abort if not in Funding Active state.\n', '        // The checks are split (instead of using or operator) because it is\n', '        // cheaper this way.\n', '        if (!funding) throw;\n', '        if (block.number < fundingStartBlock) throw;\n', '        if (block.number > fundingEndBlock) throw;\n', '\n', '        // Do not allow creating 0 or more than the cap tokens.\n', '        if (msg.value == 0) throw;\n', '        if (msg.value > (tokenCreationCap - totalTokens) / tokenCreationRate)\n', '            throw;\n', '        if (!migrationMaster.send(msg.value)) throw;\n', '        \n', '        var numTokens = msg.value * tokenCreationRate;\n', '        totalTokens += numTokens;\n', '\n', '        // Assign new tokens to the sender\n', '        balances[msg.sender] += numTokens;\n', '\n', '        // Log token creation event\n', '        Transfer(0, msg.sender, numTokens);\n', '    }\n', '\n', '    /// @notice Finalize crowdfunding\n', '    /// @dev If cap was reached or crowdfunding has ended then:\n', '    /// create GNT for the Golem Factory and developer,\n', '    /// transfer ETH to the Golem Factory address.\n', '    /// @dev Required state: Funding Success\n', '    /// @dev State transition: -> Operational Normal\n', '    function finalize() external {\n', '        // Abort if not in Funding Success state.\n', '        if (!funding) throw;\n', '        if ((block.number <= fundingEndBlock ||\n', '             totalTokens < tokenCreationMin) &&\n', '            totalTokens < tokenCreationCap) throw;\n', '\n', '        // Switch to Operational state. This is the only place this can happen.\n', '        funding = false;\n', '    }\n', '\n', '    /// @notice Get back the ether sent during the funding in case the funding\n', '    /// has not reached the minimum level.\n', '    /// @dev Required state: Funding Failure\n', '    function refund() external {\n', '        // Abort if not in Funding Failure state.\n', '        if (!funding) throw;\n', '        if (block.number <= fundingEndBlock) throw;\n', '        if (totalTokens >= tokenCreationMin) throw;\n', '\n', '        var gntValue = balances[msg.sender];\n', '        if (gntValue == 0) throw;\n', '        balances[msg.sender] = 0;\n', '        totalTokens -= gntValue;\n', '\n', '        var ethValue = gntValue / tokenCreationRate;\n', '        Refund(msg.sender, ethValue);\n', '        if (!msg.sender.send(ethValue)) throw;\n', '    }\n', '}\n', '\n', '\n', '/// @title Migration Agent interface\n', 'contract MigrationAgent {\n', '    function migrateFrom(address _from, uint256 _value);\n', '}']
['pragma solidity ^0.4.4;\n', '\n', '\n', '/// @title Golem Network Token (GNT) - crowdfunding code for Golem Project\n', 'contract GolemNetworkToken {\n', '    string public constant name = "BobbieCoin";\n', '    string public constant symbol = "BOBBIE";\n', '    uint8 public constant decimals = 18;  // 18 decimal places, the same as ETH.\n', '\n', '    uint256 public constant tokenCreationRate = 1000000000;\n', '\n', '    // The funding cap in weis.\n', '    uint256 public constant tokenCreationCap = 820000 ether * tokenCreationRate;\n', '    uint256 public constant tokenCreationMin = 150000 ether * tokenCreationRate;\n', '\n', '    uint256 public fundingStartBlock;\n', '    uint256 public fundingEndBlock;\n', '\n', '    // The flag indicates if the GNT contract is in Funding state.\n', '    bool public funding = true;\n', '\n', '    // Receives ETH and its own GNT endowment.\n', '    address public golemFactory;\n', '\n', '    // Has control over token migration to next version of token.\n', '    address public migrationMaster;\n', '\n', '  \n', '    // The current total token supply.\n', '    uint256 totalTokens;\n', '\n', '    mapping (address => uint256) balances;\n', '\n', '    address public migrationAgent;\n', '    uint256 public totalMigrated;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Migrate(address indexed _from, address indexed _to, uint256 _value);\n', '    event Refund(address indexed _from, uint256 _value);\n', '\n', '    function GolemNetworkToken(address _golemFactory,\n', '                               address _migrationMaster,\n', '                               uint256 _fundingStartBlock,\n', '                               uint256 _fundingEndBlock) {\n', '\n', '        if (_golemFactory == 0) throw;\n', '        if (_migrationMaster == 0) throw;\n', '        if (_fundingEndBlock   <= _fundingStartBlock) throw;\n', '\n', '        migrationMaster = _migrationMaster;\n', '        golemFactory = _golemFactory;\n', '        fundingStartBlock = _fundingStartBlock;\n', '        fundingEndBlock = _fundingEndBlock;\n', '                // For the Golem Factory:\n', '        balances[_golemFactory] = 1000000000; // 12/18 pp of 30000 allocations.\n', '\n', '    }\n', '\n', "    /// @notice Transfer `_value` GNT tokens from sender's account\n", '    /// `msg.sender` to provided account address `_to`.\n', '    /// @notice This function is disabled during the funding.\n', '    /// @dev Required state: Operational\n', '    /// @param _to The address of the tokens recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool) {\n', '\n', '        var senderBalance = balances[msg.sender];\n', '        if (senderBalance >= _value && _value > 0) {\n', '            senderBalance -= _value;\n', '            balances[msg.sender] = senderBalance;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function totalSupply() external constant returns (uint256) {\n', '        return totalTokens;\n', '    }\n', '\n', '    function balanceOf(address _owner) external constant returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    // Token migration support:\n', '\n', '    /// @notice Migrate tokens to the new token contract.\n', '    /// @dev Required state: Operational Migration\n', '    /// @param _value The amount of token to be migrated\n', '    function migrate(uint256 _value) external {\n', '        // Abort if not in Operational Migration state.\n', '        if (funding) throw;\n', '        if (migrationAgent == 0) throw;\n', '\n', '        // Validate input value.\n', '        if (_value == 0) throw;\n', '        if (_value > balances[msg.sender]) throw;\n', '\n', '        balances[msg.sender] -= _value;\n', '        totalTokens -= _value;\n', '        totalMigrated += _value;\n', '        MigrationAgent(migrationAgent).migrateFrom(msg.sender, _value);\n', '        Migrate(msg.sender, migrationAgent, _value);\n', '    }\n', '\n', '    /// @notice Set address of migration target contract and enable migration\n', '    /// process.\n', '    /// @dev Required state: Operational Normal\n', '    /// @dev State transition: -> Operational Migration\n', '    /// @param _agent The address of the MigrationAgent contract\n', '    function setMigrationAgent(address _agent) external {\n', '        // Abort if not in Operational Normal state.\n', '        if (funding) throw;\n', '        if (migrationAgent != 0) throw;\n', '        if (msg.sender != migrationMaster) throw;\n', '        migrationAgent = _agent;\n', '    }\n', '\n', '    function setMigrationMaster(address _master) external {\n', '        if (msg.sender != migrationMaster) throw;\n', '        if (_master == 0) throw;\n', '        migrationMaster = _master;\n', '    }\n', '\n', '    // Crowdfunding:\n', '\n', '    /// @notice Create tokens when funding is active.\n', '    /// @dev Required state: Funding Active\n', '    /// @dev State transition: -> Funding Success (only if cap reached)\n', '    function () payable external {\n', '        // Abort if not in Funding Active state.\n', '        // The checks are split (instead of using or operator) because it is\n', '        // cheaper this way.\n', '        if (!funding) throw;\n', '        if (block.number < fundingStartBlock) throw;\n', '        if (block.number > fundingEndBlock) throw;\n', '\n', '        // Do not allow creating 0 or more than the cap tokens.\n', '        if (msg.value == 0) throw;\n', '        if (msg.value > (tokenCreationCap - totalTokens) / tokenCreationRate)\n', '            throw;\n', '        if (!migrationMaster.send(msg.value)) throw;\n', '        \n', '        var numTokens = msg.value * tokenCreationRate;\n', '        totalTokens += numTokens;\n', '\n', '        // Assign new tokens to the sender\n', '        balances[msg.sender] += numTokens;\n', '\n', '        // Log token creation event\n', '        Transfer(0, msg.sender, numTokens);\n', '    }\n', '\n', '    /// @notice Finalize crowdfunding\n', '    /// @dev If cap was reached or crowdfunding has ended then:\n', '    /// create GNT for the Golem Factory and developer,\n', '    /// transfer ETH to the Golem Factory address.\n', '    /// @dev Required state: Funding Success\n', '    /// @dev State transition: -> Operational Normal\n', '    function finalize() external {\n', '        // Abort if not in Funding Success state.\n', '        if (!funding) throw;\n', '        if ((block.number <= fundingEndBlock ||\n', '             totalTokens < tokenCreationMin) &&\n', '            totalTokens < tokenCreationCap) throw;\n', '\n', '        // Switch to Operational state. This is the only place this can happen.\n', '        funding = false;\n', '    }\n', '\n', '    /// @notice Get back the ether sent during the funding in case the funding\n', '    /// has not reached the minimum level.\n', '    /// @dev Required state: Funding Failure\n', '    function refund() external {\n', '        // Abort if not in Funding Failure state.\n', '        if (!funding) throw;\n', '        if (block.number <= fundingEndBlock) throw;\n', '        if (totalTokens >= tokenCreationMin) throw;\n', '\n', '        var gntValue = balances[msg.sender];\n', '        if (gntValue == 0) throw;\n', '        balances[msg.sender] = 0;\n', '        totalTokens -= gntValue;\n', '\n', '        var ethValue = gntValue / tokenCreationRate;\n', '        Refund(msg.sender, ethValue);\n', '        if (!msg.sender.send(ethValue)) throw;\n', '    }\n', '}\n', '\n', '\n', '/// @title Migration Agent interface\n', 'contract MigrationAgent {\n', '    function migrateFrom(address _from, uint256 _value);\n', '}']
