['pragma solidity ^0.4.18;\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal pure returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '// ERC20 token interface is implemented only partially.\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract NamiPool {\n', '    using SafeMath for uint256;\n', '    \n', '    function NamiPool(address _escrow, address _namiMultiSigWallet, address _namiAddress) public {\n', '        require(_namiMultiSigWallet != 0x0);\n', '        escrow = _escrow;\n', '        namiMultiSigWallet = _namiMultiSigWallet;\n', '        NamiAddr = _namiAddress;\n', '    }\n', '    \n', '    string public name = "Nami Pool";\n', '    \n', '    // escrow has exclusive priveleges to call administrative\n', '    // functions on this contract.\n', '    address public escrow;\n', '\n', '    // Gathered funds can be withdraw only to namimultisigwallet&#39;s address.\n', '    address public namiMultiSigWallet;\n', '    \n', '    /// address of Nami token\n', '    address public NamiAddr;\n', '    \n', '    modifier onlyEscrow() {\n', '        require(msg.sender == escrow);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyNami {\n', '        require(msg.sender == NamiAddr);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyNamiMultisig {\n', '        require(msg.sender == namiMultiSigWallet);\n', '        _;\n', '    }\n', '    \n', '    uint public currentRound = 1;\n', '    \n', '    struct ShareHolder {\n', '        uint stake;\n', '        bool isActive;\n', '        bool isWithdrawn;\n', '    }\n', '    \n', '    struct Round {\n', '        bool isOpen;\n', '        uint currentNAC;\n', '        uint finalNAC;\n', '        uint ethBalance;\n', '        bool withdrawable; //for user not in top\n', '        bool topWithdrawable;\n', '        bool isCompleteActive;\n', '        bool isCloseEthPool;\n', '    }\n', '    \n', '    mapping (uint => mapping (address => ShareHolder)) public namiPool;\n', '    mapping (uint => Round) public round;\n', '    \n', '    \n', '    // Events\n', '    event UpdateShareHolder(address indexed ShareHolderAddress, uint indexed RoundIndex, uint Stake, uint Time);\n', '    event Deposit(address sender,uint indexed RoundIndex, uint value);\n', '    event WithdrawPool(uint Amount, uint TimeWithdraw);\n', '    event UpdateActive(address indexed ShareHolderAddress, uint indexed RoundIndex, bool Status, uint Time);\n', '    event Withdraw(address indexed ShareHolderAddress, uint indexed RoundIndex, uint Ether, uint Nac, uint TimeWithdraw);\n', '    event ActivateRound(uint RoundIndex, uint TimeActive);\n', '    \n', '    \n', '    function changeEscrow(address _escrow)\n', '        onlyNamiMultisig\n', '        public\n', '    {\n', '        require(_escrow != 0x0);\n', '        escrow = _escrow;\n', '    }\n', '    \n', '    function withdrawEther(uint _amount) public\n', '        onlyEscrow\n', '    {\n', '        require(namiMultiSigWallet != 0x0);\n', '        // \n', '        if (this.balance > 0) {\n', '            namiMultiSigWallet.transfer(_amount);\n', '        }\n', '    }\n', '    \n', '    function withdrawNAC(uint _amount) public\n', '        onlyEscrow\n', '    {\n', '        require(namiMultiSigWallet != 0x0 && _amount != 0);\n', '        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\n', '        if (namiToken.balanceOf(this) > 0) {\n', '            namiToken.transfer(namiMultiSigWallet, _amount);\n', '        }\n', '    }\n', '    \n', '    \n', '    /*/\n', '     *  Admin function\n', '    /*/\n', '    \n', '    /*/ process of one round\n', '     * step 1: admin open one round by execute activateRound function\n', '     * step 2: now investor can invest Nac to Nac Pool until round closed\n', '     * step 3: admin close round, now investor cann&#39;t invest NAC to Pool\n', '     * step 4: admin activate top investor\n', '     * step 5: all top investor was activated, admin execute closeActive function to close active phrase\n', '     * step 6: admin open withdrawable for investor not in top to withdraw NAC\n', '     * step 7: admin deposit eth to eth pool\n', '     * step 8: close deposit eth to eth pool\n', '     * step 9: admin open withdrawable to investor in top\n', '     * step 10: investor in top now can withdraw NAC and ETH for this round\n', '    /*/\n', '    \n', '    // ------------------------------------------------ \n', '    /*\n', '    * Admin function\n', '    * Open and Close Round\n', '    *\n', '    */\n', '    function activateRound(uint _roundIndex) \n', '        onlyEscrow\n', '        public\n', '    {\n', '        require(round[_roundIndex].isOpen == false && round[_roundIndex].isCloseEthPool == false && round[_roundIndex].isCompleteActive == false);\n', '        round[_roundIndex].isOpen = true;\n', '        currentRound = _roundIndex;\n', '        ActivateRound(_roundIndex, now);\n', '    }\n', '    \n', '    function deactivateRound(uint _roundIndex)\n', '        onlyEscrow\n', '        public\n', '    {\n', '        require(round[_roundIndex].isOpen == true);\n', '        round[_roundIndex].isOpen = false;\n', '    }\n', '    \n', '    // ------------------------------------------------ \n', '    // this function add stake of ShareHolder\n', '    // investor can execute this function during round open\n', '    //\n', '    \n', '    function tokenFallbackExchange(address _from, uint _value, uint _price) onlyNami public returns (bool success) {\n', '        // only on currentRound and active user can add stake\n', '        require(round[_price].isOpen == true && _value > 0);\n', '        // add stake\n', '        namiPool[_price][_from].stake = namiPool[_price][_from].stake.add(_value);\n', '        round[_price].currentNAC = round[_price].currentNAC.add(_value);\n', '        UpdateShareHolder(_from, _price, namiPool[_price][_from].stake, now);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    /*\n', '    *\n', '    * Activate and deactivate user\n', '    * add or sub final Nac to compute stake to withdraw\n', '    */\n', '    function activateUser(address _shareAddress, uint _roundId)\n', '        onlyEscrow\n', '        public\n', '    {\n', '        require(namiPool[_roundId][_shareAddress].isActive == false && namiPool[_roundId][_shareAddress].stake > 0);\n', '        require(round[_roundId].isCompleteActive == false && round[_roundId].isOpen == false);\n', '        namiPool[_roundId][_shareAddress].isActive = true;\n', '        round[_roundId].finalNAC = round[_roundId].finalNAC.add(namiPool[_roundId][_shareAddress].stake);\n', '        UpdateActive(_shareAddress, _roundId ,namiPool[_roundId][_shareAddress].isActive, now);\n', '    }\n', '    \n', '    function deactivateUser(address _shareAddress, uint _roundId)\n', '        onlyEscrow\n', '        public\n', '    {\n', '        require(namiPool[_roundId][_shareAddress].isActive == true && namiPool[_roundId][_shareAddress].stake > 0);\n', '        require(round[_roundId].isCompleteActive == false && round[_roundId].isOpen == false);\n', '        namiPool[_roundId][_shareAddress].isActive = false;\n', '        round[_roundId].finalNAC = round[_roundId].finalNAC.sub(namiPool[_roundId][_shareAddress].stake);\n', '        UpdateActive(_shareAddress, _roundId ,namiPool[_roundId][_shareAddress].isActive, now);\n', '    }\n', '    \n', '    \n', '    // ------------------------------------------------ \n', '    // admin close activate phrase to \n', '    // \n', '    //\n', '    function closeActive(uint _roundId)\n', '        onlyEscrow\n', '        public\n', '    {\n', '        require(round[_roundId].isCompleteActive == false && round[_roundId].isOpen == false);\n', '        round[_roundId].isCompleteActive = true;\n', '    }\n', '    //\n', '    //\n', '    // change Withdrawable for one round after every month\n', '    // for investor not in top\n', '    //\n', '    function changeWithdrawable(uint _roundIndex)\n', '        onlyEscrow\n', '        public\n', '    {\n', '        require(round[_roundIndex].isCompleteActive == true && round[_roundIndex].isOpen == false);\n', '        round[_roundIndex].withdrawable = !round[_roundIndex].withdrawable;\n', '    }\n', '    \n', '    \n', '    \n', '    //\n', '    //\n', '    // change Withdrawable for one round after every month\n', '    // for investor in top\n', '    //\n', '    function changeTopWithdrawable(uint _roundIndex)\n', '        onlyEscrow\n', '        public\n', '    {\n', '        require(round[_roundIndex].isCompleteActive == true && round[_roundIndex].isOpen == false);\n', '        round[_roundIndex].topWithdrawable = !round[_roundIndex].topWithdrawable;\n', '    }\n', '    \n', '    \n', '    //\n', '    //\n', '    // after month admin deposit ETH to ETH Pool\n', '    // \n', '    //\n', '    function depositEthPool(uint _roundIndex)\n', '        payable public\n', '        onlyEscrow\n', '    {\n', '        require(msg.value > 0 && round[_roundIndex].isCloseEthPool == false && round[_roundIndex].isOpen == false);\n', '        if (msg.value > 0) {\n', '            round[_roundIndex].ethBalance = round[_roundIndex].ethBalance.add(msg.value);\n', '            Deposit(msg.sender, _roundIndex, msg.value);\n', '        }\n', '    }\n', '    \n', '    //\n', '    //\n', '    function withdrawEthPool(uint _roundIndex, uint _amount)\n', '        public\n', '        onlyEscrow\n', '    {\n', '        require(round[_roundIndex].isCloseEthPool == false && round[_roundIndex].isOpen == false);\n', '        require(namiMultiSigWallet != 0x0);\n', '        // \n', '        if (_amount > 0) {\n', '            namiMultiSigWallet.transfer(_amount);\n', '            round[_roundIndex].ethBalance = round[_roundIndex].ethBalance.sub(_amount);\n', '            WithdrawPool(_amount, now);\n', '        }\n', '    }\n', '    \n', '    //\n', '    // close phrase deposit ETH to Pool\n', '    // \n', '    function closeEthPool(uint _roundIndex)\n', '        public\n', '        onlyEscrow\n', '    {\n', '        require(round[_roundIndex].isCloseEthPool == false && round[_roundIndex].isCompleteActive == true && round[_roundIndex].isOpen == false);\n', '        round[_roundIndex].isCloseEthPool = true;\n', '    }\n', '    \n', '    //\n', '    //\n', '    // withdraw NAC for investor\n', '    // internal function only can run by this smartcontract\n', '    // \n', '    //\n', '    function _withdrawNAC(address _shareAddress, uint _roundIndex) internal {\n', '        require(namiPool[_roundIndex][_shareAddress].stake > 0);\n', '        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\n', '        uint previousBalances = namiToken.balanceOf(this);\n', '        namiToken.transfer(_shareAddress, namiPool[_roundIndex][_shareAddress].stake);\n', '        // update current Nac pool balance\n', '        round[_roundIndex].currentNAC = round[_roundIndex].currentNAC.sub(namiPool[_roundIndex][_shareAddress].stake);\n', '        \n', '        namiPool[_roundIndex][_shareAddress].stake = 0;\n', '        assert(previousBalances > namiToken.balanceOf(this));\n', '    }\n', '    \n', '    \n', '    //\n', '    //\n', '    // withdraw NAC and ETH for top investor\n', '    // \n', '    //\n', '    function withdrawTopForTeam(address _shareAddress, uint _roundIndex)\n', '        onlyEscrow\n', '        public\n', '    {\n', '        require(round[_roundIndex].isCompleteActive == true && round[_roundIndex].isCloseEthPool == true && round[_roundIndex].isOpen == false);\n', '        require(round[_roundIndex].topWithdrawable);\n', '        if(namiPool[_roundIndex][_shareAddress].isActive == true) {\n', '            require(namiPool[_roundIndex][_shareAddress].isWithdrawn == false);\n', '            assert(round[_roundIndex].finalNAC > namiPool[_roundIndex][_shareAddress].stake);\n', '            \n', '            // compute eth for invester\n', '            uint ethReturn = (round[_roundIndex].ethBalance.mul(namiPool[_roundIndex][_shareAddress].stake)).div(round[_roundIndex].finalNAC);\n', '            _shareAddress.transfer(ethReturn);\n', '            \n', '            // set user withdraw\n', '            namiPool[_roundIndex][_shareAddress].isWithdrawn = true;\n', '            Withdraw(_shareAddress, _roundIndex, ethReturn, namiPool[_roundIndex][_shareAddress].stake, now);\n', '            \n', '            // withdraw NAC\n', '            _withdrawNAC(_shareAddress, _roundIndex);\n', '        }\n', '    }\n', '    \n', '    \n', '    \n', '    \n', '    //\n', '    //\n', '    // withdraw NAC and ETH for non top investor\n', '    // execute by admin only\n', '    // \n', '    //\n', '    function withdrawNonTopForTeam(address _shareAddress, uint _roundIndex)\n', '        onlyEscrow\n', '        public\n', '    {\n', '        require(round[_roundIndex].isCompleteActive == true && round[_roundIndex].isOpen == false);\n', '        require(round[_roundIndex].withdrawable);\n', '        if(namiPool[_roundIndex][_shareAddress].isActive == false) {\n', '            require(namiPool[_roundIndex][_shareAddress].isWithdrawn == false);\n', '            // set state user withdraw\n', '            namiPool[_roundIndex][_shareAddress].isWithdrawn = true;\n', '            Withdraw(_shareAddress, _roundIndex, 0, namiPool[_roundIndex][_shareAddress].stake, now);\n', '            //\n', '            _withdrawNAC(_shareAddress, _roundIndex);\n', '        }\n', '    }\n', '    \n', '    \n', '    \n', '    //\n', '    //\n', '    // withdraw NAC and ETH for top investor\n', '    // execute by investor\n', '    // \n', '    //\n', '    function withdrawTop(uint _roundIndex)\n', '        public\n', '    {\n', '        require(round[_roundIndex].isCompleteActive == true && round[_roundIndex].isCloseEthPool == true && round[_roundIndex].isOpen == false);\n', '        require(round[_roundIndex].topWithdrawable);\n', '        if(namiPool[_roundIndex][msg.sender].isActive == true) {\n', '            require(namiPool[_roundIndex][msg.sender].isWithdrawn == false);\n', '            uint ethReturn = (round[_roundIndex].ethBalance.mul(namiPool[_roundIndex][msg.sender].stake)).div(round[_roundIndex].finalNAC);\n', '            msg.sender.transfer(ethReturn);\n', '            // set user withdraw\n', '            namiPool[_roundIndex][msg.sender].isWithdrawn = true;\n', '            //\n', '            Withdraw(msg.sender, _roundIndex, ethReturn, namiPool[_roundIndex][msg.sender].stake, now);\n', '            _withdrawNAC(msg.sender, _roundIndex);\n', '        }\n', '    }\n', '    \n', '    //\n', '    //\n', '    // withdraw NAC and ETH for non top investor\n', '    // execute by investor\n', '    // \n', '    //\n', '    function withdrawNonTop(uint _roundIndex)\n', '        public\n', '    {\n', '        require(round[_roundIndex].isCompleteActive == true && round[_roundIndex].isOpen == false);\n', '        require(round[_roundIndex].withdrawable);\n', '        if(namiPool[_roundIndex][msg.sender].isActive == false) {\n', '            require(namiPool[_roundIndex][msg.sender].isWithdrawn == false);\n', '            namiPool[_roundIndex][msg.sender].isWithdrawn = true;\n', '            //\n', '            Withdraw(msg.sender, _roundIndex, 0, namiPool[_roundIndex][msg.sender].stake, now);\n', '            _withdrawNAC(msg.sender, _roundIndex);\n', '        }\n', '    }\n', '    \n', '}\n', '\n', 'contract NamiCrowdSale {\n', '    using SafeMath for uint256;\n', '\n', '    /// NAC Broker Presale Token\n', '    /// @dev Constructor\n', '    function NamiCrowdSale(address _escrow, address _namiMultiSigWallet, address _namiPresale) public {\n', '        require(_namiMultiSigWallet != 0x0);\n', '        escrow = _escrow;\n', '        namiMultiSigWallet = _namiMultiSigWallet;\n', '        namiPresale = _namiPresale;\n', '    }\n', '\n', '\n', '    /*/\n', '     *  Constants\n', '    /*/\n', '\n', '    string public name = "Nami ICO";\n', '    string public  symbol = "NAC";\n', '    uint   public decimals = 18;\n', '\n', '    bool public TRANSFERABLE = false; // default not transferable\n', '\n', '    uint public constant TOKEN_SUPPLY_LIMIT = 1000000000 * (1 ether / 1 wei);\n', '    \n', '    uint public binary = 0;\n', '\n', '    /*/\n', '     *  Token state\n', '    /*/\n', '\n', '    enum Phase {\n', '        Created,\n', '        Running,\n', '        Paused,\n', '        Migrating,\n', '        Migrated\n', '    }\n', '\n', '    Phase public currentPhase = Phase.Created;\n', '    uint public totalSupply = 0; // amount of tokens already sold\n', '\n', '    // escrow has exclusive priveleges to call administrative\n', '    // functions on this contract.\n', '    address public escrow;\n', '\n', '    // Gathered funds can be withdraw only to namimultisigwallet&#39;s address.\n', '    address public namiMultiSigWallet;\n', '\n', '    // nami presale contract\n', '    address public namiPresale;\n', '\n', '    // Crowdsale manager has exclusive priveleges to burn presale tokens.\n', '    address public crowdsaleManager;\n', '    \n', '    // binary option address\n', '    address public binaryAddress;\n', '    \n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    modifier onlyCrowdsaleManager() {\n', '        require(msg.sender == crowdsaleManager); \n', '        _; \n', '    }\n', '\n', '    modifier onlyEscrow() {\n', '        require(msg.sender == escrow);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyTranferable() {\n', '        require(TRANSFERABLE);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyNamiMultisig() {\n', '        require(msg.sender == namiMultiSigWallet);\n', '        _;\n', '    }\n', '    \n', '    /*/\n', '     *  Events\n', '    /*/\n', '\n', '    event LogBuy(address indexed owner, uint value);\n', '    event LogBurn(address indexed owner, uint value);\n', '    event LogPhaseSwitch(Phase newPhase);\n', '    // Log migrate token\n', '    event LogMigrate(address _from, address _to, uint256 amount);\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /*/\n', '     *  Public functions\n', '    /*/\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    // Transfer the balance from owner&#39;s account to another account\n', '    // only escrow can send token (to send token private sale)\n', '    function transferForTeam(address _to, uint256 _value) public\n', '        onlyEscrow\n', '    {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '    \n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public\n', '        onlyTranferable\n', '    {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '    \n', '       /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) \n', '        public\n', '        onlyTranferable\n', '        returns (bool success)\n', '    {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        onlyTranferable\n', '        returns (bool success) \n', '    {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        onlyTranferable\n', '        returns (bool success) \n', '    {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    // allows transfer token\n', '    function changeTransferable () public\n', '        onlyEscrow\n', '    {\n', '        TRANSFERABLE = !TRANSFERABLE;\n', '    }\n', '    \n', '    // change escrow\n', '    function changeEscrow(address _escrow) public\n', '        onlyNamiMultisig\n', '    {\n', '        require(_escrow != 0x0);\n', '        escrow = _escrow;\n', '    }\n', '    \n', '    // change binary value\n', '    function changeBinary(uint _binary)\n', '        public\n', '        onlyEscrow\n', '    {\n', '        binary = _binary;\n', '    }\n', '    \n', '    // change binary address\n', '    function changeBinaryAddress(address _binaryAddress)\n', '        public\n', '        onlyEscrow\n', '    {\n', '        require(_binaryAddress != 0x0);\n', '        binaryAddress = _binaryAddress;\n', '    }\n', '    \n', '    /*\n', '    * price in ICO:\n', '    * first week: 1 ETH = 2400 NAC\n', '    * second week: 1 ETH = 23000 NAC\n', '    * 3rd week: 1 ETH = 2200 NAC\n', '    * 4th week: 1 ETH = 2100 NAC\n', '    * 5th week: 1 ETH = 2000 NAC\n', '    * 6th week: 1 ETH = 1900 NAC\n', '    * 7th week: 1 ETH = 1800 NAC\n', '    * 8th week: 1 ETH = 1700 nac\n', '    * time: \n', '    * 1517443200: Thursday, February 1, 2018 12:00:00 AM\n', '    * 1518048000: Thursday, February 8, 2018 12:00:00 AM\n', '    * 1518652800: Thursday, February 15, 2018 12:00:00 AM\n', '    * 1519257600: Thursday, February 22, 2018 12:00:00 AM\n', '    * 1519862400: Thursday, March 1, 2018 12:00:00 AM\n', '    * 1520467200: Thursday, March 8, 2018 12:00:00 AM\n', '    * 1521072000: Thursday, March 15, 2018 12:00:00 AM\n', '    * 1521676800: Thursday, March 22, 2018 12:00:00 AM\n', '    * 1522281600: Thursday, March 29, 2018 12:00:00 AM\n', '    */\n', '    function getPrice() public view returns (uint price) {\n', '        if (now < 1517443200) {\n', '            // presale\n', '            return 3450;\n', '        } else if (1517443200 < now && now <= 1518048000) {\n', '            // 1st week\n', '            return 2400;\n', '        } else if (1518048000 < now && now <= 1518652800) {\n', '            // 2nd week\n', '            return 2300;\n', '        } else if (1518652800 < now && now <= 1519257600) {\n', '            // 3rd week\n', '            return 2200;\n', '        } else if (1519257600 < now && now <= 1519862400) {\n', '            // 4th week\n', '            return 2100;\n', '        } else if (1519862400 < now && now <= 1520467200) {\n', '            // 5th week\n', '            return 2000;\n', '        } else if (1520467200 < now && now <= 1521072000) {\n', '            // 6th week\n', '            return 1900;\n', '        } else if (1521072000 < now && now <= 1521676800) {\n', '            // 7th week\n', '            return 1800;\n', '        } else if (1521676800 < now && now <= 1522281600) {\n', '            // 8th week\n', '            return 1700;\n', '        } else {\n', '            return binary;\n', '        }\n', '    }\n', '\n', '\n', '    function() payable public {\n', '        buy(msg.sender);\n', '    }\n', '    \n', '    \n', '    function buy(address _buyer) payable public {\n', '        // Available only if presale is running.\n', '        require(currentPhase == Phase.Running);\n', '        // require ICO time or binary option\n', '        require(now <= 1522281600 || msg.sender == binaryAddress);\n', '        require(msg.value != 0);\n', '        uint newTokens = msg.value * getPrice();\n', '        require (totalSupply + newTokens < TOKEN_SUPPLY_LIMIT);\n', '        // add new token to buyer\n', '        balanceOf[_buyer] = balanceOf[_buyer].add(newTokens);\n', '        // add new token to totalSupply\n', '        totalSupply = totalSupply.add(newTokens);\n', '        LogBuy(_buyer,newTokens);\n', '        Transfer(this,_buyer,newTokens);\n', '    }\n', '    \n', '\n', '    /// @dev Returns number of tokens owned by given address.\n', '    /// @param _owner Address of token owner.\n', '    function burnTokens(address _owner) public\n', '        onlyCrowdsaleManager\n', '    {\n', '        // Available only during migration phase\n', '        require(currentPhase == Phase.Migrating);\n', '\n', '        uint tokens = balanceOf[_owner];\n', '        require(tokens != 0);\n', '        balanceOf[_owner] = 0;\n', '        totalSupply -= tokens;\n', '        LogBurn(_owner, tokens);\n', '        Transfer(_owner, crowdsaleManager, tokens);\n', '\n', '        // Automatically switch phase when migration is done.\n', '        if (totalSupply == 0) {\n', '            currentPhase = Phase.Migrated;\n', '            LogPhaseSwitch(Phase.Migrated);\n', '        }\n', '    }\n', '\n', '\n', '    /*/\n', '     *  Administrative functions\n', '    /*/\n', '    function setPresalePhase(Phase _nextPhase) public\n', '        onlyEscrow\n', '    {\n', '        bool canSwitchPhase\n', '            =  (currentPhase == Phase.Created && _nextPhase == Phase.Running)\n', '            || (currentPhase == Phase.Running && _nextPhase == Phase.Paused)\n', '                // switch to migration phase only if crowdsale manager is set\n', '            || ((currentPhase == Phase.Running || currentPhase == Phase.Paused)\n', '                && _nextPhase == Phase.Migrating\n', '                && crowdsaleManager != 0x0)\n', '            || (currentPhase == Phase.Paused && _nextPhase == Phase.Running)\n', '                // switch to migrated only if everyting is migrated\n', '            || (currentPhase == Phase.Migrating && _nextPhase == Phase.Migrated\n', '                && totalSupply == 0);\n', '\n', '        require(canSwitchPhase);\n', '        currentPhase = _nextPhase;\n', '        LogPhaseSwitch(_nextPhase);\n', '    }\n', '\n', '\n', '    function withdrawEther(uint _amount) public\n', '        onlyEscrow\n', '    {\n', '        require(namiMultiSigWallet != 0x0);\n', '        // Available at any phase.\n', '        if (this.balance > 0) {\n', '            namiMultiSigWallet.transfer(_amount);\n', '        }\n', '    }\n', '    \n', '    function safeWithdraw(address _withdraw, uint _amount) public\n', '        onlyEscrow\n', '    {\n', '        NamiMultiSigWallet namiWallet = NamiMultiSigWallet(namiMultiSigWallet);\n', '        if (namiWallet.isOwner(_withdraw)) {\n', '            _withdraw.transfer(_amount);\n', '        }\n', '    }\n', '\n', '\n', '    function setCrowdsaleManager(address _mgr) public\n', '        onlyEscrow\n', '    {\n', '        // You can&#39;t change crowdsale contract when migration is in progress.\n', '        require(currentPhase != Phase.Migrating);\n', '        crowdsaleManager = _mgr;\n', '    }\n', '\n', '    // internal migrate migration tokens\n', '    function _migrateToken(address _from, address _to)\n', '        internal\n', '    {\n', '        PresaleToken presale = PresaleToken(namiPresale);\n', '        uint256 newToken = presale.balanceOf(_from);\n', '        require(newToken > 0);\n', '        // burn old token\n', '        presale.burnTokens(_from);\n', '        // add new token to _to\n', '        balanceOf[_to] = balanceOf[_to].add(newToken);\n', '        // add new token to totalSupply\n', '        totalSupply = totalSupply.add(newToken);\n', '        LogMigrate(_from, _to, newToken);\n', '        Transfer(this,_to,newToken);\n', '    }\n', '\n', '    // migate token function for Nami Team\n', '    function migrateToken(address _from, address _to) public\n', '        onlyEscrow\n', '    {\n', '        _migrateToken(_from, _to);\n', '    }\n', '\n', '    // migrate token for investor\n', '    function migrateForInvestor() public {\n', '        _migrateToken(msg.sender, msg.sender);\n', '    }\n', '\n', '    // Nami internal exchange\n', '    \n', '    // event for Nami exchange\n', '    event TransferToBuyer(address indexed _from, address indexed _to, uint _value, address indexed _seller);\n', '    event TransferToExchange(address indexed _from, address indexed _to, uint _value, uint _price);\n', '    \n', '    \n', '    /**\n', '     * @dev Transfer the specified amount of tokens to the NamiExchange address.\n', '     *      Invokes the `tokenFallbackExchange` function.\n', '     *      The token transfer fails if the recipient is a contract\n', '     *      but does not implement the `tokenFallbackExchange` function\n', '     *      or the fallback function to receive funds.\n', '     *\n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     * @param _price price to sell token.\n', '     */\n', '     \n', '    function transferToExchange(address _to, uint _value, uint _price) public {\n', '        uint codeLength;\n', '        \n', '        assembly {\n', '            codeLength := extcodesize(_to)\n', '        }\n', '        \n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        Transfer(msg.sender,_to,_value);\n', '        if (codeLength > 0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallbackExchange(msg.sender, _value, _price);\n', '            TransferToExchange(msg.sender, _to, _value, _price);\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @dev Transfer the specified amount of tokens to the NamiExchange address.\n', '     *      Invokes the `tokenFallbackBuyer` function.\n', '     *      The token transfer fails if the recipient is a contract\n', '     *      but does not implement the `tokenFallbackBuyer` function\n', '     *      or the fallback function to receive funds.\n', '     *\n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     * @param _buyer address of seller.\n', '     */\n', '     \n', '    function transferToBuyer(address _to, uint _value, address _buyer) public {\n', '        uint codeLength;\n', '        \n', '        assembly {\n', '            codeLength := extcodesize(_to)\n', '        }\n', '        \n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        Transfer(msg.sender,_to,_value);\n', '        if (codeLength > 0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallbackBuyer(msg.sender, _value, _buyer);\n', '            TransferToBuyer(msg.sender, _to, _value, _buyer);\n', '        }\n', '    }\n', '//-------------------------------------------------------------------------------------------------------\n', '}\n', '\n', '\n', '/*\n', '* Binary option smart contract-------------------------------\n', '*/\n', 'contract BinaryOption {\n', '    /*\n', '     * binary option controled by escrow to buy NAC with good price\n', '     */\n', '    // NamiCrowdSale address\n', '    address public namiCrowdSaleAddr;\n', '    address public escrow;\n', '    \n', '    // namiMultiSigWallet\n', '    address public namiMultiSigWallet;\n', '    \n', '    Session public session;\n', '    uint public timeInvestInMinute = 15;\n', '    uint public timeOneSession = 20;\n', '    uint public sessionId = 1;\n', '    uint public rateWin = 100;\n', '    uint public rateLoss = 20;\n', '    uint public rateFee = 5;\n', '    uint public constant MAX_INVESTOR = 20;\n', '    uint public minimunEth = 10000000000000000; // minimunEth = 0.01 eth\n', '    /**\n', '     * Events for binany option system\n', '     */\n', '    event SessionOpen(uint timeOpen, uint indexed sessionId);\n', '    event InvestClose(uint timeInvestClose, uint priceOpen, uint indexed sessionId);\n', '    event Invest(address indexed investor, bool choose, uint amount, uint timeInvest, uint indexed sessionId);\n', '    event SessionClose(uint timeClose, uint indexed sessionId, uint priceClose, uint nacPrice, uint rateWin, uint rateLoss, uint rateFee);\n', '\n', '    event Deposit(address indexed sender, uint value);\n', '    /// @dev Fallback function allows to deposit ether.\n', '    function() public payable {\n', '        if (msg.value > 0)\n', '            Deposit(msg.sender, msg.value);\n', '    }\n', '    // there is only one session available at one timeOpen\n', '    // priceOpen is price of ETH in USD\n', '    // priceClose is price of ETH in USD\n', '    // process of one Session\n', '    // 1st: escrow reset session by run resetSession()\n', '    // 2nd: escrow open session by run openSession() => save timeOpen at this time\n', '    // 3rd: all investor can invest by run invest(), send minimum 0.1 ETH\n', '    // 4th: escrow close invest and insert price open for this Session\n', '    // 5th: escrow close session and send NAC for investor\n', '    struct Session {\n', '        uint priceOpen;\n', '        uint priceClose;\n', '        uint timeOpen;\n', '        bool isReset;\n', '        bool isOpen;\n', '        bool investOpen;\n', '        uint investorCount;\n', '        mapping(uint => address) investor;\n', '        mapping(uint => bool) win;\n', '        mapping(uint => uint) amountInvest;\n', '    }\n', '    \n', '    function BinaryOption(address _namiCrowdSale, address _escrow, address _namiMultiSigWallet) public {\n', '        require(_namiCrowdSale != 0x0 && _escrow != 0x0);\n', '        namiCrowdSaleAddr = _namiCrowdSale;\n', '        escrow = _escrow;\n', '        namiMultiSigWallet = _namiMultiSigWallet;\n', '    }\n', '    \n', '    \n', '    modifier onlyEscrow() {\n', '        require(msg.sender==escrow);\n', '        _;\n', '    }\n', '    \n', '        \n', '    modifier onlyNamiMultisig() {\n', '        require(msg.sender == namiMultiSigWallet);\n', '        _;\n', '    }\n', '    \n', '    // change escrow\n', '    function changeEscrow(address _escrow) public\n', '        onlyNamiMultisig\n', '    {\n', '        require(_escrow != 0x0);\n', '        escrow = _escrow;\n', '    }\n', '    \n', '    // chagne minimunEth\n', '    function changeMinEth(uint _minimunEth) public \n', '        onlyEscrow\n', '    {\n', '        require(_minimunEth != 0);\n', '        minimunEth = _minimunEth;\n', '    }\n', '    \n', '    /// @dev Change time for investor can invest in one session, can only change at time not in session\n', '    /// @param _timeInvest time invest in minutes\n', '    ///---------------------------change time function------------------------------\n', '    function changeTimeInvest(uint _timeInvest)\n', '        public\n', '        onlyEscrow\n', '    {\n', '        require(!session.isOpen && _timeInvest < timeOneSession);\n', '        timeInvestInMinute = _timeInvest;\n', '    }\n', '\n', '    function changeTimeOneSession(uint _timeOneSession) \n', '        public\n', '        onlyEscrow\n', '    {\n', '        require(!session.isOpen && _timeOneSession > timeInvestInMinute);\n', '        timeOneSession = _timeOneSession;\n', '    }\n', '\n', '    /////------------------------change rate function-------------------------------\n', '    \n', '    function changeRateWin(uint _rateWin)\n', '        public\n', '        onlyEscrow\n', '    {\n', '        require(!session.isOpen);\n', '        rateWin = _rateWin;\n', '    }\n', '    \n', '    function changeRateLoss(uint _rateLoss)\n', '        public\n', '        onlyEscrow\n', '    {\n', '        require(!session.isOpen);\n', '        rateLoss = _rateLoss;\n', '    }\n', '    \n', '    function changeRateFee(uint _rateFee)\n', '        public\n', '        onlyEscrow\n', '    {\n', '        require(!session.isOpen);\n', '        rateFee = _rateFee;\n', '    }\n', '    \n', '    \n', '    /// @dev withdraw ether to nami multisignature wallet, only escrow can call\n', '    /// @param _amount value ether in wei to withdraw\n', '    function withdrawEther(uint _amount) public\n', '        onlyEscrow\n', '    {\n', '        require(namiMultiSigWallet != 0x0);\n', '        // Available at any phase.\n', '        if (this.balance > 0) {\n', '            namiMultiSigWallet.transfer(_amount);\n', '        }\n', '    }\n', '    \n', '    /// @dev safe withdraw Ether to one of owner of nami multisignature wallet\n', '    /// @param _withdraw address to withdraw\n', '    function safeWithdraw(address _withdraw, uint _amount) public\n', '        onlyEscrow\n', '    {\n', '        NamiMultiSigWallet namiWallet = NamiMultiSigWallet(namiMultiSigWallet);\n', '        if (namiWallet.isOwner(_withdraw)) {\n', '            _withdraw.transfer(_amount);\n', '        }\n', '    }\n', '    \n', '    // @dev Returns list of owners.\n', '    // @return List of owner addresses.\n', '    // MAX_INVESTOR = 20\n', '    function getInvestors()\n', '        public\n', '        view\n', '        returns (address[20])\n', '    {\n', '        address[20] memory listInvestor;\n', '        for (uint i = 0; i < MAX_INVESTOR; i++) {\n', '            listInvestor[i] = session.investor[i];\n', '        }\n', '        return listInvestor;\n', '    }\n', '    \n', '    function getChooses()\n', '        public\n', '        view\n', '        returns (bool[20])\n', '    {\n', '        bool[20] memory listChooses;\n', '        for (uint i = 0; i < MAX_INVESTOR; i++) {\n', '            listChooses[i] = session.win[i];\n', '        }\n', '        return listChooses;\n', '    }\n', '    \n', '    function getAmount()\n', '        public\n', '        view\n', '        returns (uint[20])\n', '    {\n', '        uint[20] memory listAmount;\n', '        for (uint i = 0; i < MAX_INVESTOR; i++) {\n', '            listAmount[i] = session.amountInvest[i];\n', '        }\n', '        return listAmount;\n', '    }\n', '    \n', '    /// @dev reset all data of previous session, must run before open new session\n', '    // only escrow can call\n', '    function resetSession()\n', '        public\n', '        onlyEscrow\n', '    {\n', '        require(!session.isReset && !session.isOpen);\n', '        session.priceOpen = 0;\n', '        session.priceClose = 0;\n', '        session.isReset = true;\n', '        session.isOpen = false;\n', '        session.investOpen = false;\n', '        session.investorCount = 0;\n', '        for (uint i = 0; i < MAX_INVESTOR; i++) {\n', '            session.investor[i] = 0x0;\n', '            session.win[i] = false;\n', '            session.amountInvest[i] = 0;\n', '        }\n', '    }\n', '    \n', '    /// @dev Open new session, only escrow can call\n', '    function openSession ()\n', '        public\n', '        onlyEscrow\n', '    {\n', '        require(session.isReset && !session.isOpen);\n', '        session.isReset = false;\n', '        // open invest\n', '        session.investOpen = true;\n', '        session.timeOpen = now;\n', '        session.isOpen = true;\n', '        SessionOpen(now, sessionId);\n', '    }\n', '    \n', '    /// @dev Fuction for investor, minimun ether send is 0.1, one address can call one time in one session\n', '    /// @param _choose choise of investor, true is call, false is put\n', '    function invest (bool _choose)\n', '        public\n', '        payable\n', '    {\n', '        require(msg.value >= minimunEth && session.investOpen); // msg.value >= 0.1 ether\n', '        require(now < (session.timeOpen + timeInvestInMinute * 1 minutes));\n', '        require(session.investorCount < MAX_INVESTOR);\n', '        session.investor[session.investorCount] = msg.sender;\n', '        session.win[session.investorCount] = _choose;\n', '        session.amountInvest[session.investorCount] = msg.value;\n', '        session.investorCount += 1;\n', '        Invest(msg.sender, _choose, msg.value, now, sessionId);\n', '    }\n', '    \n', '    /// @dev close invest for escrow\n', '    /// @param _priceOpen price ETH in USD\n', '    function closeInvest (uint _priceOpen) \n', '        public\n', '        onlyEscrow\n', '    {\n', '        require(_priceOpen != 0 && session.investOpen);\n', '        require(now > (session.timeOpen + timeInvestInMinute * 1 minutes));\n', '        session.investOpen = false;\n', '        session.priceOpen = _priceOpen;\n', '        InvestClose(now, _priceOpen, sessionId);\n', '    }\n', '    \n', '    /// @dev get amount of ether to buy NAC for investor\n', '    /// @param _ether amount ether which investor invest\n', '    /// @param _status true for investor win and false for investor loss\n', '    function getEtherToBuy (uint _ether, bool _status)\n', '        public\n', '        view\n', '        returns (uint)\n', '    {\n', '        if (_status) {\n', '            return _ether * rateWin / 100;\n', '        } else {\n', '            return _ether * rateLoss / 100;\n', '        }\n', '    }\n', '\n', '    /// @dev close session, only escrow can call\n', '    /// @param _priceClose price of ETH in USD\n', '    function closeSession (uint _priceClose)\n', '        public\n', '        onlyEscrow\n', '    {\n', '        require(_priceClose != 0 && now > (session.timeOpen + timeOneSession * 1 minutes));\n', '        require(!session.investOpen && session.isOpen);\n', '        session.priceClose = _priceClose;\n', '        bool result = (_priceClose>session.priceOpen)?true:false;\n', '        uint etherToBuy;\n', '        NamiCrowdSale namiContract = NamiCrowdSale(namiCrowdSaleAddr);\n', '        uint price = namiContract.getPrice();\n', '        require(price != 0);\n', '        for (uint i = 0; i < session.investorCount; i++) {\n', '            if (session.win[i]==result) {\n', '                etherToBuy = (session.amountInvest[i] - session.amountInvest[i] * rateFee / 100) * rateWin / 100;\n', '                uint etherReturn = session.amountInvest[i] - session.amountInvest[i] * rateFee / 100;\n', '                (session.investor[i]).transfer(etherReturn);\n', '            } else {\n', '                etherToBuy = (session.amountInvest[i] - session.amountInvest[i] * rateFee / 100) * rateLoss / 100;\n', '            }\n', '            namiContract.buy.value(etherToBuy)(session.investor[i]);\n', '            // reset investor\n', '            session.investor[i] = 0x0;\n', '            session.win[i] = false;\n', '            session.amountInvest[i] = 0;\n', '        }\n', '        session.isOpen = false;\n', '        SessionClose(now, sessionId, _priceClose, price, rateWin, rateLoss, rateFee);\n', '        sessionId += 1;\n', '        \n', '        // require(!session.isReset && !session.isOpen);\n', '        // reset state session\n', '        session.priceOpen = 0;\n', '        session.priceClose = 0;\n', '        session.isReset = true;\n', '        session.investOpen = false;\n', '        session.investorCount = 0;\n', '    }\n', '}\n', '\n', '\n', 'contract PresaleToken {\n', '    mapping (address => uint256) public balanceOf;\n', '    function burnTokens(address _owner) public;\n', '}\n', '\n', ' /*\n', ' * Contract that is working with ERC223 tokens\n', ' */\n', ' \n', ' /**\n', ' * @title Contract that will work with ERC223 tokens.\n', ' */\n', ' \n', 'contract ERC223ReceivingContract {\n', '/**\n', ' * @dev Standard ERC223 function that will handle incoming token transfers.\n', ' *\n', ' * @param _from  Token sender address.\n', ' * @param _value Amount of tokens.\n', ' * @param _data  Transaction metadata.\n', ' */\n', '    function tokenFallback(address _from, uint _value, bytes _data) public returns (bool success);\n', '    function tokenFallbackBuyer(address _from, uint _value, address _buyer) public returns (bool success);\n', '    function tokenFallbackExchange(address _from, uint _value, uint _price) public returns (bool success);\n', '}\n', '\n', '\n', ' /*\n', ' * Nami Internal Exchange smartcontract-----------------------------------------------------------------\n', ' *\n', ' */\n', '\n', 'contract NamiExchange {\n', '    using SafeMath for uint;\n', '    \n', '    function NamiExchange(address _namiAddress) public {\n', '        NamiAddr = _namiAddress;\n', '    }\n', '\n', '    event UpdateBid(address owner, uint price, uint balance);\n', '    event UpdateAsk(address owner, uint price, uint volume);\n', '    event BuyHistory(address indexed buyer, address indexed seller, uint price, uint volume, uint time);\n', '    event SellHistory(address indexed seller, address indexed buyer, uint price, uint volume, uint time);\n', '\n', '    \n', '    mapping(address => OrderBid) public bid;\n', '    mapping(address => OrderAsk) public ask;\n', '    string public name = "NacExchange";\n', '    \n', '    /// address of Nami token\n', '    address public NamiAddr;\n', '    \n', '    /// price of Nac = ETH/NAC\n', '    uint public price = 1;\n', '    // struct store order of user\n', '    struct OrderBid {\n', '        uint price;\n', '        uint eth;\n', '    }\n', '    \n', '    struct OrderAsk {\n', '        uint price;\n', '        uint volume;\n', '    }\n', '    \n', '        \n', '    // prevent lost ether\n', '    function() payable public {\n', '        require(msg.data.length != 0);\n', '        require(msg.value == 0);\n', '    }\n', '    \n', '    modifier onlyNami {\n', '        require(msg.sender == NamiAddr);\n', '        _;\n', '    }\n', '    \n', '    /////////////////\n', '    //---------------------------function about bid Order-----------------------------------------------------------\n', '    \n', '    function placeBuyOrder(uint _price) payable public {\n', '        require(_price > 0 && msg.value > 0 && bid[msg.sender].eth == 0);\n', '        if (msg.value > 0) {\n', '            bid[msg.sender].eth = (bid[msg.sender].eth).add(msg.value);\n', '            bid[msg.sender].price = _price;\n', '            UpdateBid(msg.sender, _price, bid[msg.sender].eth);\n', '        }\n', '    }\n', '    \n', '    function sellNac(uint _value, address _buyer, uint _price) public returns (bool success) {\n', '        require(_price == bid[_buyer].price && _buyer != msg.sender);\n', '        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\n', '        uint ethOfBuyer = bid[_buyer].eth;\n', '        uint maxToken = ethOfBuyer.mul(bid[_buyer].price);\n', '        require(namiToken.allowance(msg.sender, this) >= _value && _value > 0 && ethOfBuyer != 0 && _buyer != 0x0);\n', '        if (_value > maxToken) {\n', '            if (msg.sender.send(ethOfBuyer) && namiToken.transferFrom(msg.sender,_buyer,maxToken)) {\n', '                // update order\n', '                bid[_buyer].eth = 0;\n', '                UpdateBid(_buyer, bid[_buyer].price, bid[_buyer].eth);\n', '                BuyHistory(_buyer, msg.sender, bid[_buyer].price, maxToken, now);\n', '                return true;\n', '            } else {\n', '                // revert anything\n', '                revert();\n', '            }\n', '        } else {\n', '            uint eth = _value.div(bid[_buyer].price);\n', '            if (msg.sender.send(eth) && namiToken.transferFrom(msg.sender,_buyer,_value)) {\n', '                // update order\n', '                bid[_buyer].eth = (bid[_buyer].eth).sub(eth);\n', '                UpdateBid(_buyer, bid[_buyer].price, bid[_buyer].eth);\n', '                BuyHistory(_buyer, msg.sender, bid[_buyer].price, _value, now);\n', '                return true;\n', '            } else {\n', '                // revert anything\n', '                revert();\n', '            }\n', '        }\n', '    }\n', '    \n', '    function closeBidOrder() public {\n', '        require(bid[msg.sender].eth > 0 && bid[msg.sender].price > 0);\n', '        // transfer ETH\n', '        msg.sender.transfer(bid[msg.sender].eth);\n', '        // update order\n', '        bid[msg.sender].eth = 0;\n', '        UpdateBid(msg.sender, bid[msg.sender].price, bid[msg.sender].eth);\n', '    }\n', '    \n', '\n', '    ////////////////\n', '    //---------------------------function about ask Order-----------------------------------------------------------\n', '    \n', '    // place ask order by send NAC to Nami Exchange contract\n', '    // this function place sell order\n', '    function tokenFallbackExchange(address _from, uint _value, uint _price) onlyNami public returns (bool success) {\n', '        require(_price > 0 && _value > 0 && ask[_from].volume == 0);\n', '        if (_value > 0) {\n', '            ask[_from].volume = (ask[_from].volume).add(_value);\n', '            ask[_from].price = _price;\n', '            UpdateAsk(_from, _price, ask[_from].volume);\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    function closeAskOrder() public {\n', '        require(ask[msg.sender].volume > 0 && ask[msg.sender].price > 0);\n', '        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\n', '        uint previousBalances = namiToken.balanceOf(msg.sender);\n', '        // transfer token\n', '        namiToken.transfer(msg.sender, ask[msg.sender].volume);\n', '        // update order\n', '        ask[msg.sender].volume = 0;\n', '        UpdateAsk(msg.sender, ask[msg.sender].price, 0);\n', '        // check balance\n', '        assert(previousBalances < namiToken.balanceOf(msg.sender));\n', '    }\n', '    \n', '    function buyNac(address _seller, uint _price) payable public returns (bool success) {\n', '        require(msg.value > 0 && ask[_seller].volume > 0 && ask[_seller].price > 0);\n', '        require(_price == ask[_seller].price && _seller != msg.sender);\n', '        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\n', '        uint maxEth = (ask[_seller].volume).div(ask[_seller].price);\n', '        uint previousBalances = namiToken.balanceOf(msg.sender);\n', '        if (msg.value > maxEth) {\n', '            if (_seller.send(maxEth) && msg.sender.send(msg.value.sub(maxEth))) {\n', '                // transfer token\n', '                namiToken.transfer(msg.sender, ask[_seller].volume);\n', '                SellHistory(_seller, msg.sender, ask[_seller].price, ask[_seller].volume, now);\n', '                // update order\n', '                ask[_seller].volume = 0;\n', '                UpdateAsk(_seller, ask[_seller].price, 0);\n', '                assert(previousBalances < namiToken.balanceOf(msg.sender));\n', '                return true;\n', '            } else {\n', '                // revert anything\n', '                revert();\n', '            }\n', '        } else {\n', '            uint nac = (msg.value).mul(ask[_seller].price);\n', '            if (_seller.send(msg.value)) {\n', '                // transfer token\n', '                namiToken.transfer(msg.sender, nac);\n', '                // update order\n', '                ask[_seller].volume = (ask[_seller].volume).sub(nac);\n', '                UpdateAsk(_seller, ask[_seller].price, ask[_seller].volume);\n', '                SellHistory(_seller, msg.sender, ask[_seller].price, nac, now);\n', '                assert(previousBalances < namiToken.balanceOf(msg.sender));\n', '                return true;\n', '            } else {\n', '                // revert anything\n', '                revert();\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'contract ERC23 {\n', '  function balanceOf(address who) public constant returns (uint);\n', '  function transfer(address to, uint value) public returns (bool success);\n', '}\n', '\n', '\n', '\n', '/*\n', '* NamiMultiSigWallet smart contract-------------------------------\n', '*/\n', '/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\n', 'contract NamiMultiSigWallet {\n', '\n', '    uint constant public MAX_OWNER_COUNT = 50;\n', '\n', '    event Confirmation(address indexed sender, uint indexed transactionId);\n', '    event Revocation(address indexed sender, uint indexed transactionId);\n', '    event Submission(uint indexed transactionId);\n', '    event Execution(uint indexed transactionId);\n', '    event ExecutionFailure(uint indexed transactionId);\n', '    event Deposit(address indexed sender, uint value);\n', '    event OwnerAddition(address indexed owner);\n', '    event OwnerRemoval(address indexed owner);\n', '    event RequirementChange(uint required);\n', '\n', '    mapping (uint => Transaction) public transactions;\n', '    mapping (uint => mapping (address => bool)) public confirmations;\n', '    mapping (address => bool) public isOwner;\n', '    address[] public owners;\n', '    uint public required;\n', '    uint public transactionCount;\n', '\n', '    struct Transaction {\n', '        address destination;\n', '        uint value;\n', '        bytes data;\n', '        bool executed;\n', '    }\n', '\n', '    modifier onlyWallet() {\n', '        require(msg.sender == address(this));\n', '        _;\n', '    }\n', '\n', '    modifier ownerDoesNotExist(address owner) {\n', '        require(!isOwner[owner]);\n', '        _;\n', '    }\n', '\n', '    modifier ownerExists(address owner) {\n', '        require(isOwner[owner]);\n', '        _;\n', '    }\n', '\n', '    modifier transactionExists(uint transactionId) {\n', '        require(transactions[transactionId].destination != 0);\n', '        _;\n', '    }\n', '\n', '    modifier confirmed(uint transactionId, address owner) {\n', '        require(confirmations[transactionId][owner]);\n', '        _;\n', '    }\n', '\n', '    modifier notConfirmed(uint transactionId, address owner) {\n', '        require(!confirmations[transactionId][owner]);\n', '        _;\n', '    }\n', '\n', '    modifier notExecuted(uint transactionId) {\n', '        require(!transactions[transactionId].executed);\n', '        _;\n', '    }\n', '\n', '    modifier notNull(address _address) {\n', '        require(_address != 0);\n', '        _;\n', '    }\n', '\n', '    modifier validRequirement(uint ownerCount, uint _required) {\n', '        require(!(ownerCount > MAX_OWNER_COUNT\n', '            || _required > ownerCount\n', '            || _required == 0\n', '            || ownerCount == 0));\n', '        _;\n', '    }\n', '\n', '    /// @dev Fallback function allows to deposit ether.\n', '    function() public payable {\n', '        if (msg.value > 0)\n', '            Deposit(msg.sender, msg.value);\n', '    }\n', '\n', '    /*\n', '     * Public functions\n', '     */\n', '    /// @dev Contract constructor sets initial owners and required number of confirmations.\n', '    /// @param _owners List of initial owners.\n', '    /// @param _required Number of required confirmations.\n', '    function NamiMultiSigWallet(address[] _owners, uint _required)\n', '        public\n', '        validRequirement(_owners.length, _required)\n', '    {\n', '        for (uint i = 0; i < _owners.length; i++) {\n', '            require(!(isOwner[_owners[i]] || _owners[i] == 0));\n', '            isOwner[_owners[i]] = true;\n', '        }\n', '        owners = _owners;\n', '        required = _required;\n', '    }\n', '\n', '    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n', '    /// @param owner Address of new owner.\n', '    function addOwner(address owner)\n', '        public\n', '        onlyWallet\n', '        ownerDoesNotExist(owner)\n', '        notNull(owner)\n', '        validRequirement(owners.length + 1, required)\n', '    {\n', '        isOwner[owner] = true;\n', '        owners.push(owner);\n', '        OwnerAddition(owner);\n', '    }\n', '\n', '    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n', '    /// @param owner Address of owner.\n', '    function removeOwner(address owner)\n', '        public\n', '        onlyWallet\n', '        ownerExists(owner)\n', '    {\n', '        isOwner[owner] = false;\n', '        for (uint i=0; i<owners.length - 1; i++) {\n', '            if (owners[i] == owner) {\n', '                owners[i] = owners[owners.length - 1];\n', '                break;\n', '            }\n', '        }\n', '        owners.length -= 1;\n', '        if (required > owners.length)\n', '            changeRequirement(owners.length);\n', '        OwnerRemoval(owner);\n', '    }\n', '\n', '    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n', '    /// @param owner Address of owner to be replaced.\n', '    /// @param owner Address of new owner.\n', '    function replaceOwner(address owner, address newOwner)\n', '        public\n', '        onlyWallet\n', '        ownerExists(owner)\n', '        ownerDoesNotExist(newOwner)\n', '    {\n', '        for (uint i=0; i<owners.length; i++) {\n', '            if (owners[i] == owner) {\n', '                owners[i] = newOwner;\n', '                break;\n', '            }\n', '        }\n', '        isOwner[owner] = false;\n', '        isOwner[newOwner] = true;\n', '        OwnerRemoval(owner);\n', '        OwnerAddition(newOwner);\n', '    }\n', '\n', '    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n', '    /// @param _required Number of required confirmations.\n', '    function changeRequirement(uint _required)\n', '        public\n', '        onlyWallet\n', '        validRequirement(owners.length, _required)\n', '    {\n', '        required = _required;\n', '        RequirementChange(_required);\n', '    }\n', '\n', '    /// @dev Allows an owner to submit and confirm a transaction.\n', '    /// @param destination Transaction target address.\n', '    /// @param value Transaction ether value.\n', '    /// @param data Transaction data payload.\n', '    /// @return Returns transaction ID.\n', '    function submitTransaction(address destination, uint value, bytes data)\n', '        public\n', '        returns (uint transactionId)\n', '    {\n', '        transactionId = addTransaction(destination, value, data);\n', '        confirmTransaction(transactionId);\n', '    }\n', '\n', '    /// @dev Allows an owner to confirm a transaction.\n', '    /// @param transactionId Transaction ID.\n', '    function confirmTransaction(uint transactionId)\n', '        public\n', '        ownerExists(msg.sender)\n', '        transactionExists(transactionId)\n', '        notConfirmed(transactionId, msg.sender)\n', '    {\n', '        confirmations[transactionId][msg.sender] = true;\n', '        Confirmation(msg.sender, transactionId);\n', '        executeTransaction(transactionId);\n', '    }\n', '\n', '    /// @dev Allows an owner to revoke a confirmation for a transaction.\n', '    /// @param transactionId Transaction ID.\n', '    function revokeConfirmation(uint transactionId)\n', '        public\n', '        ownerExists(msg.sender)\n', '        confirmed(transactionId, msg.sender)\n', '        notExecuted(transactionId)\n', '    {\n', '        confirmations[transactionId][msg.sender] = false;\n', '        Revocation(msg.sender, transactionId);\n', '    }\n', '\n', '    /// @dev Allows anyone to execute a confirmed transaction.\n', '    /// @param transactionId Transaction ID.\n', '    function executeTransaction(uint transactionId)\n', '        public\n', '        notExecuted(transactionId)\n', '    {\n', '        if (isConfirmed(transactionId)) {\n', '            // Transaction tx = transactions[transactionId];\n', '            transactions[transactionId].executed = true;\n', '            // tx.executed = true;\n', '            if (transactions[transactionId].destination.call.value(transactions[transactionId].value)(transactions[transactionId].data)) {\n', '                Execution(transactionId);\n', '            } else {\n', '                ExecutionFailure(transactionId);\n', '                transactions[transactionId].executed = false;\n', '            }\n', '        }\n', '    }\n', '\n', '    /// @dev Returns the confirmation status of a transaction.\n', '    /// @param transactionId Transaction ID.\n', '    /// @return Confirmation status.\n', '    function isConfirmed(uint transactionId)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        uint count = 0;\n', '        for (uint i = 0; i < owners.length; i++) {\n', '            if (confirmations[transactionId][owners[i]])\n', '                count += 1;\n', '            if (count == required)\n', '                return true;\n', '        }\n', '    }\n', '\n', '    /*\n', '     * Internal functions\n', '     */\n', '    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n', '    /// @param destination Transaction target address.\n', '    /// @param value Transaction ether value.\n', '    /// @param data Transaction data payload.\n', '    /// @return Returns transaction ID.\n', '    function addTransaction(address destination, uint value, bytes data)\n', '        internal\n', '        notNull(destination)\n', '        returns (uint transactionId)\n', '    {\n', '        transactionId = transactionCount;\n', '        transactions[transactionId] = Transaction({\n', '            destination: destination, \n', '            value: value,\n', '            data: data,\n', '            executed: false\n', '        });\n', '        transactionCount += 1;\n', '        Submission(transactionId);\n', '    }\n', '\n', '    /*\n', '     * Web3 call functions\n', '     */\n', '    /// @dev Returns number of confirmations of a transaction.\n', '    /// @param transactionId Transaction ID.\n', '    /// @return Number of confirmations.\n', '    function getConfirmationCount(uint transactionId)\n', '        public\n', '        constant\n', '        returns (uint count)\n', '    {\n', '        for (uint i = 0; i < owners.length; i++) {\n', '            if (confirmations[transactionId][owners[i]])\n', '                count += 1;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns total number of transactions after filers are applied.\n', '    /// @param pending Include pending transactions.\n', '    /// @param executed Include executed transactions.\n', '    /// @return Total number of transactions after filters are applied.\n', '    function getTransactionCount(bool pending, bool executed)\n', '        public\n', '        constant\n', '        returns (uint count)\n', '    {\n', '        for (uint i = 0; i < transactionCount; i++) {\n', '            if (pending && !transactions[i].executed || executed && transactions[i].executed)\n', '                count += 1;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns list of owners.\n', '    /// @return List of owner addresses.\n', '    function getOwners()\n', '        public\n', '        constant\n', '        returns (address[])\n', '    {\n', '        return owners;\n', '    }\n', '\n', '    /// @dev Returns array with owner addresses, which confirmed transaction.\n', '    /// @param transactionId Transaction ID.\n', '    /// @return Returns array of owner addresses.\n', '    function getConfirmations(uint transactionId)\n', '        public\n', '        constant\n', '        returns (address[] _confirmations)\n', '    {\n', '        address[] memory confirmationsTemp = new address[](owners.length);\n', '        uint count = 0;\n', '        uint i;\n', '        for (i = 0; i < owners.length; i++) {\n', '            if (confirmations[transactionId][owners[i]]) {\n', '                confirmationsTemp[count] = owners[i];\n', '                count += 1;\n', '            }\n', '        }\n', '        _confirmations = new address[](count);\n', '        for (i = 0; i < count; i++) {\n', '            _confirmations[i] = confirmationsTemp[i];\n', '        }\n', '    }\n', '\n', '    /// @dev Returns list of transaction IDs in defined range.\n', '    /// @param from Index start position of transaction array.\n', '    /// @param to Index end position of transaction array.\n', '    /// @param pending Include pending transactions.\n', '    /// @param executed Include executed transactions.\n', '    /// @return Returns array of transaction IDs.\n', '    function getTransactionIds(uint from, uint to, bool pending, bool executed)\n', '        public\n', '        constant\n', '        returns (uint[] _transactionIds)\n', '    {\n', '        uint[] memory transactionIdsTemp = new uint[](transactionCount);\n', '        uint count = 0;\n', '        uint i;\n', '        for (i = 0; i < transactionCount; i++) {\n', '            if (pending && !transactions[i].executed || executed && transactions[i].executed) {\n', '                transactionIdsTemp[count] = i;\n', '                count += 1;\n', '            }\n', '        }\n', '        _transactionIds = new uint[](to - from);\n', '        for (i = from; i < to; i++) {\n', '            _transactionIds[i - from] = transactionIdsTemp[i];\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal pure returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '// ERC20 token interface is implemented only partially.\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract NamiPool {\n', '    using SafeMath for uint256;\n', '    \n', '    function NamiPool(address _escrow, address _namiMultiSigWallet, address _namiAddress) public {\n', '        require(_namiMultiSigWallet != 0x0);\n', '        escrow = _escrow;\n', '        namiMultiSigWallet = _namiMultiSigWallet;\n', '        NamiAddr = _namiAddress;\n', '    }\n', '    \n', '    string public name = "Nami Pool";\n', '    \n', '    // escrow has exclusive priveleges to call administrative\n', '    // functions on this contract.\n', '    address public escrow;\n', '\n', "    // Gathered funds can be withdraw only to namimultisigwallet's address.\n", '    address public namiMultiSigWallet;\n', '    \n', '    /// address of Nami token\n', '    address public NamiAddr;\n', '    \n', '    modifier onlyEscrow() {\n', '        require(msg.sender == escrow);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyNami {\n', '        require(msg.sender == NamiAddr);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyNamiMultisig {\n', '        require(msg.sender == namiMultiSigWallet);\n', '        _;\n', '    }\n', '    \n', '    uint public currentRound = 1;\n', '    \n', '    struct ShareHolder {\n', '        uint stake;\n', '        bool isActive;\n', '        bool isWithdrawn;\n', '    }\n', '    \n', '    struct Round {\n', '        bool isOpen;\n', '        uint currentNAC;\n', '        uint finalNAC;\n', '        uint ethBalance;\n', '        bool withdrawable; //for user not in top\n', '        bool topWithdrawable;\n', '        bool isCompleteActive;\n', '        bool isCloseEthPool;\n', '    }\n', '    \n', '    mapping (uint => mapping (address => ShareHolder)) public namiPool;\n', '    mapping (uint => Round) public round;\n', '    \n', '    \n', '    // Events\n', '    event UpdateShareHolder(address indexed ShareHolderAddress, uint indexed RoundIndex, uint Stake, uint Time);\n', '    event Deposit(address sender,uint indexed RoundIndex, uint value);\n', '    event WithdrawPool(uint Amount, uint TimeWithdraw);\n', '    event UpdateActive(address indexed ShareHolderAddress, uint indexed RoundIndex, bool Status, uint Time);\n', '    event Withdraw(address indexed ShareHolderAddress, uint indexed RoundIndex, uint Ether, uint Nac, uint TimeWithdraw);\n', '    event ActivateRound(uint RoundIndex, uint TimeActive);\n', '    \n', '    \n', '    function changeEscrow(address _escrow)\n', '        onlyNamiMultisig\n', '        public\n', '    {\n', '        require(_escrow != 0x0);\n', '        escrow = _escrow;\n', '    }\n', '    \n', '    function withdrawEther(uint _amount) public\n', '        onlyEscrow\n', '    {\n', '        require(namiMultiSigWallet != 0x0);\n', '        // \n', '        if (this.balance > 0) {\n', '            namiMultiSigWallet.transfer(_amount);\n', '        }\n', '    }\n', '    \n', '    function withdrawNAC(uint _amount) public\n', '        onlyEscrow\n', '    {\n', '        require(namiMultiSigWallet != 0x0 && _amount != 0);\n', '        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\n', '        if (namiToken.balanceOf(this) > 0) {\n', '            namiToken.transfer(namiMultiSigWallet, _amount);\n', '        }\n', '    }\n', '    \n', '    \n', '    /*/\n', '     *  Admin function\n', '    /*/\n', '    \n', '    /*/ process of one round\n', '     * step 1: admin open one round by execute activateRound function\n', '     * step 2: now investor can invest Nac to Nac Pool until round closed\n', "     * step 3: admin close round, now investor cann't invest NAC to Pool\n", '     * step 4: admin activate top investor\n', '     * step 5: all top investor was activated, admin execute closeActive function to close active phrase\n', '     * step 6: admin open withdrawable for investor not in top to withdraw NAC\n', '     * step 7: admin deposit eth to eth pool\n', '     * step 8: close deposit eth to eth pool\n', '     * step 9: admin open withdrawable to investor in top\n', '     * step 10: investor in top now can withdraw NAC and ETH for this round\n', '    /*/\n', '    \n', '    // ------------------------------------------------ \n', '    /*\n', '    * Admin function\n', '    * Open and Close Round\n', '    *\n', '    */\n', '    function activateRound(uint _roundIndex) \n', '        onlyEscrow\n', '        public\n', '    {\n', '        require(round[_roundIndex].isOpen == false && round[_roundIndex].isCloseEthPool == false && round[_roundIndex].isCompleteActive == false);\n', '        round[_roundIndex].isOpen = true;\n', '        currentRound = _roundIndex;\n', '        ActivateRound(_roundIndex, now);\n', '    }\n', '    \n', '    function deactivateRound(uint _roundIndex)\n', '        onlyEscrow\n', '        public\n', '    {\n', '        require(round[_roundIndex].isOpen == true);\n', '        round[_roundIndex].isOpen = false;\n', '    }\n', '    \n', '    // ------------------------------------------------ \n', '    // this function add stake of ShareHolder\n', '    // investor can execute this function during round open\n', '    //\n', '    \n', '    function tokenFallbackExchange(address _from, uint _value, uint _price) onlyNami public returns (bool success) {\n', '        // only on currentRound and active user can add stake\n', '        require(round[_price].isOpen == true && _value > 0);\n', '        // add stake\n', '        namiPool[_price][_from].stake = namiPool[_price][_from].stake.add(_value);\n', '        round[_price].currentNAC = round[_price].currentNAC.add(_value);\n', '        UpdateShareHolder(_from, _price, namiPool[_price][_from].stake, now);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    /*\n', '    *\n', '    * Activate and deactivate user\n', '    * add or sub final Nac to compute stake to withdraw\n', '    */\n', '    function activateUser(address _shareAddress, uint _roundId)\n', '        onlyEscrow\n', '        public\n', '    {\n', '        require(namiPool[_roundId][_shareAddress].isActive == false && namiPool[_roundId][_shareAddress].stake > 0);\n', '        require(round[_roundId].isCompleteActive == false && round[_roundId].isOpen == false);\n', '        namiPool[_roundId][_shareAddress].isActive = true;\n', '        round[_roundId].finalNAC = round[_roundId].finalNAC.add(namiPool[_roundId][_shareAddress].stake);\n', '        UpdateActive(_shareAddress, _roundId ,namiPool[_roundId][_shareAddress].isActive, now);\n', '    }\n', '    \n', '    function deactivateUser(address _shareAddress, uint _roundId)\n', '        onlyEscrow\n', '        public\n', '    {\n', '        require(namiPool[_roundId][_shareAddress].isActive == true && namiPool[_roundId][_shareAddress].stake > 0);\n', '        require(round[_roundId].isCompleteActive == false && round[_roundId].isOpen == false);\n', '        namiPool[_roundId][_shareAddress].isActive = false;\n', '        round[_roundId].finalNAC = round[_roundId].finalNAC.sub(namiPool[_roundId][_shareAddress].stake);\n', '        UpdateActive(_shareAddress, _roundId ,namiPool[_roundId][_shareAddress].isActive, now);\n', '    }\n', '    \n', '    \n', '    // ------------------------------------------------ \n', '    // admin close activate phrase to \n', '    // \n', '    //\n', '    function closeActive(uint _roundId)\n', '        onlyEscrow\n', '        public\n', '    {\n', '        require(round[_roundId].isCompleteActive == false && round[_roundId].isOpen == false);\n', '        round[_roundId].isCompleteActive = true;\n', '    }\n', '    //\n', '    //\n', '    // change Withdrawable for one round after every month\n', '    // for investor not in top\n', '    //\n', '    function changeWithdrawable(uint _roundIndex)\n', '        onlyEscrow\n', '        public\n', '    {\n', '        require(round[_roundIndex].isCompleteActive == true && round[_roundIndex].isOpen == false);\n', '        round[_roundIndex].withdrawable = !round[_roundIndex].withdrawable;\n', '    }\n', '    \n', '    \n', '    \n', '    //\n', '    //\n', '    // change Withdrawable for one round after every month\n', '    // for investor in top\n', '    //\n', '    function changeTopWithdrawable(uint _roundIndex)\n', '        onlyEscrow\n', '        public\n', '    {\n', '        require(round[_roundIndex].isCompleteActive == true && round[_roundIndex].isOpen == false);\n', '        round[_roundIndex].topWithdrawable = !round[_roundIndex].topWithdrawable;\n', '    }\n', '    \n', '    \n', '    //\n', '    //\n', '    // after month admin deposit ETH to ETH Pool\n', '    // \n', '    //\n', '    function depositEthPool(uint _roundIndex)\n', '        payable public\n', '        onlyEscrow\n', '    {\n', '        require(msg.value > 0 && round[_roundIndex].isCloseEthPool == false && round[_roundIndex].isOpen == false);\n', '        if (msg.value > 0) {\n', '            round[_roundIndex].ethBalance = round[_roundIndex].ethBalance.add(msg.value);\n', '            Deposit(msg.sender, _roundIndex, msg.value);\n', '        }\n', '    }\n', '    \n', '    //\n', '    //\n', '    function withdrawEthPool(uint _roundIndex, uint _amount)\n', '        public\n', '        onlyEscrow\n', '    {\n', '        require(round[_roundIndex].isCloseEthPool == false && round[_roundIndex].isOpen == false);\n', '        require(namiMultiSigWallet != 0x0);\n', '        // \n', '        if (_amount > 0) {\n', '            namiMultiSigWallet.transfer(_amount);\n', '            round[_roundIndex].ethBalance = round[_roundIndex].ethBalance.sub(_amount);\n', '            WithdrawPool(_amount, now);\n', '        }\n', '    }\n', '    \n', '    //\n', '    // close phrase deposit ETH to Pool\n', '    // \n', '    function closeEthPool(uint _roundIndex)\n', '        public\n', '        onlyEscrow\n', '    {\n', '        require(round[_roundIndex].isCloseEthPool == false && round[_roundIndex].isCompleteActive == true && round[_roundIndex].isOpen == false);\n', '        round[_roundIndex].isCloseEthPool = true;\n', '    }\n', '    \n', '    //\n', '    //\n', '    // withdraw NAC for investor\n', '    // internal function only can run by this smartcontract\n', '    // \n', '    //\n', '    function _withdrawNAC(address _shareAddress, uint _roundIndex) internal {\n', '        require(namiPool[_roundIndex][_shareAddress].stake > 0);\n', '        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\n', '        uint previousBalances = namiToken.balanceOf(this);\n', '        namiToken.transfer(_shareAddress, namiPool[_roundIndex][_shareAddress].stake);\n', '        // update current Nac pool balance\n', '        round[_roundIndex].currentNAC = round[_roundIndex].currentNAC.sub(namiPool[_roundIndex][_shareAddress].stake);\n', '        \n', '        namiPool[_roundIndex][_shareAddress].stake = 0;\n', '        assert(previousBalances > namiToken.balanceOf(this));\n', '    }\n', '    \n', '    \n', '    //\n', '    //\n', '    // withdraw NAC and ETH for top investor\n', '    // \n', '    //\n', '    function withdrawTopForTeam(address _shareAddress, uint _roundIndex)\n', '        onlyEscrow\n', '        public\n', '    {\n', '        require(round[_roundIndex].isCompleteActive == true && round[_roundIndex].isCloseEthPool == true && round[_roundIndex].isOpen == false);\n', '        require(round[_roundIndex].topWithdrawable);\n', '        if(namiPool[_roundIndex][_shareAddress].isActive == true) {\n', '            require(namiPool[_roundIndex][_shareAddress].isWithdrawn == false);\n', '            assert(round[_roundIndex].finalNAC > namiPool[_roundIndex][_shareAddress].stake);\n', '            \n', '            // compute eth for invester\n', '            uint ethReturn = (round[_roundIndex].ethBalance.mul(namiPool[_roundIndex][_shareAddress].stake)).div(round[_roundIndex].finalNAC);\n', '            _shareAddress.transfer(ethReturn);\n', '            \n', '            // set user withdraw\n', '            namiPool[_roundIndex][_shareAddress].isWithdrawn = true;\n', '            Withdraw(_shareAddress, _roundIndex, ethReturn, namiPool[_roundIndex][_shareAddress].stake, now);\n', '            \n', '            // withdraw NAC\n', '            _withdrawNAC(_shareAddress, _roundIndex);\n', '        }\n', '    }\n', '    \n', '    \n', '    \n', '    \n', '    //\n', '    //\n', '    // withdraw NAC and ETH for non top investor\n', '    // execute by admin only\n', '    // \n', '    //\n', '    function withdrawNonTopForTeam(address _shareAddress, uint _roundIndex)\n', '        onlyEscrow\n', '        public\n', '    {\n', '        require(round[_roundIndex].isCompleteActive == true && round[_roundIndex].isOpen == false);\n', '        require(round[_roundIndex].withdrawable);\n', '        if(namiPool[_roundIndex][_shareAddress].isActive == false) {\n', '            require(namiPool[_roundIndex][_shareAddress].isWithdrawn == false);\n', '            // set state user withdraw\n', '            namiPool[_roundIndex][_shareAddress].isWithdrawn = true;\n', '            Withdraw(_shareAddress, _roundIndex, 0, namiPool[_roundIndex][_shareAddress].stake, now);\n', '            //\n', '            _withdrawNAC(_shareAddress, _roundIndex);\n', '        }\n', '    }\n', '    \n', '    \n', '    \n', '    //\n', '    //\n', '    // withdraw NAC and ETH for top investor\n', '    // execute by investor\n', '    // \n', '    //\n', '    function withdrawTop(uint _roundIndex)\n', '        public\n', '    {\n', '        require(round[_roundIndex].isCompleteActive == true && round[_roundIndex].isCloseEthPool == true && round[_roundIndex].isOpen == false);\n', '        require(round[_roundIndex].topWithdrawable);\n', '        if(namiPool[_roundIndex][msg.sender].isActive == true) {\n', '            require(namiPool[_roundIndex][msg.sender].isWithdrawn == false);\n', '            uint ethReturn = (round[_roundIndex].ethBalance.mul(namiPool[_roundIndex][msg.sender].stake)).div(round[_roundIndex].finalNAC);\n', '            msg.sender.transfer(ethReturn);\n', '            // set user withdraw\n', '            namiPool[_roundIndex][msg.sender].isWithdrawn = true;\n', '            //\n', '            Withdraw(msg.sender, _roundIndex, ethReturn, namiPool[_roundIndex][msg.sender].stake, now);\n', '            _withdrawNAC(msg.sender, _roundIndex);\n', '        }\n', '    }\n', '    \n', '    //\n', '    //\n', '    // withdraw NAC and ETH for non top investor\n', '    // execute by investor\n', '    // \n', '    //\n', '    function withdrawNonTop(uint _roundIndex)\n', '        public\n', '    {\n', '        require(round[_roundIndex].isCompleteActive == true && round[_roundIndex].isOpen == false);\n', '        require(round[_roundIndex].withdrawable);\n', '        if(namiPool[_roundIndex][msg.sender].isActive == false) {\n', '            require(namiPool[_roundIndex][msg.sender].isWithdrawn == false);\n', '            namiPool[_roundIndex][msg.sender].isWithdrawn = true;\n', '            //\n', '            Withdraw(msg.sender, _roundIndex, 0, namiPool[_roundIndex][msg.sender].stake, now);\n', '            _withdrawNAC(msg.sender, _roundIndex);\n', '        }\n', '    }\n', '    \n', '}\n', '\n', 'contract NamiCrowdSale {\n', '    using SafeMath for uint256;\n', '\n', '    /// NAC Broker Presale Token\n', '    /// @dev Constructor\n', '    function NamiCrowdSale(address _escrow, address _namiMultiSigWallet, address _namiPresale) public {\n', '        require(_namiMultiSigWallet != 0x0);\n', '        escrow = _escrow;\n', '        namiMultiSigWallet = _namiMultiSigWallet;\n', '        namiPresale = _namiPresale;\n', '    }\n', '\n', '\n', '    /*/\n', '     *  Constants\n', '    /*/\n', '\n', '    string public name = "Nami ICO";\n', '    string public  symbol = "NAC";\n', '    uint   public decimals = 18;\n', '\n', '    bool public TRANSFERABLE = false; // default not transferable\n', '\n', '    uint public constant TOKEN_SUPPLY_LIMIT = 1000000000 * (1 ether / 1 wei);\n', '    \n', '    uint public binary = 0;\n', '\n', '    /*/\n', '     *  Token state\n', '    /*/\n', '\n', '    enum Phase {\n', '        Created,\n', '        Running,\n', '        Paused,\n', '        Migrating,\n', '        Migrated\n', '    }\n', '\n', '    Phase public currentPhase = Phase.Created;\n', '    uint public totalSupply = 0; // amount of tokens already sold\n', '\n', '    // escrow has exclusive priveleges to call administrative\n', '    // functions on this contract.\n', '    address public escrow;\n', '\n', "    // Gathered funds can be withdraw only to namimultisigwallet's address.\n", '    address public namiMultiSigWallet;\n', '\n', '    // nami presale contract\n', '    address public namiPresale;\n', '\n', '    // Crowdsale manager has exclusive priveleges to burn presale tokens.\n', '    address public crowdsaleManager;\n', '    \n', '    // binary option address\n', '    address public binaryAddress;\n', '    \n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    modifier onlyCrowdsaleManager() {\n', '        require(msg.sender == crowdsaleManager); \n', '        _; \n', '    }\n', '\n', '    modifier onlyEscrow() {\n', '        require(msg.sender == escrow);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyTranferable() {\n', '        require(TRANSFERABLE);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyNamiMultisig() {\n', '        require(msg.sender == namiMultiSigWallet);\n', '        _;\n', '    }\n', '    \n', '    /*/\n', '     *  Events\n', '    /*/\n', '\n', '    event LogBuy(address indexed owner, uint value);\n', '    event LogBurn(address indexed owner, uint value);\n', '    event LogPhaseSwitch(Phase newPhase);\n', '    // Log migrate token\n', '    event LogMigrate(address _from, address _to, uint256 amount);\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /*/\n', '     *  Public functions\n', '    /*/\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', "    // Transfer the balance from owner's account to another account\n", '    // only escrow can send token (to send token private sale)\n', '    function transferForTeam(address _to, uint256 _value) public\n', '        onlyEscrow\n', '    {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '    \n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public\n', '        onlyTranferable\n', '    {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '    \n', '       /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) \n', '        public\n', '        onlyTranferable\n', '        returns (bool success)\n', '    {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        onlyTranferable\n', '        returns (bool success) \n', '    {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        onlyTranferable\n', '        returns (bool success) \n', '    {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    // allows transfer token\n', '    function changeTransferable () public\n', '        onlyEscrow\n', '    {\n', '        TRANSFERABLE = !TRANSFERABLE;\n', '    }\n', '    \n', '    // change escrow\n', '    function changeEscrow(address _escrow) public\n', '        onlyNamiMultisig\n', '    {\n', '        require(_escrow != 0x0);\n', '        escrow = _escrow;\n', '    }\n', '    \n', '    // change binary value\n', '    function changeBinary(uint _binary)\n', '        public\n', '        onlyEscrow\n', '    {\n', '        binary = _binary;\n', '    }\n', '    \n', '    // change binary address\n', '    function changeBinaryAddress(address _binaryAddress)\n', '        public\n', '        onlyEscrow\n', '    {\n', '        require(_binaryAddress != 0x0);\n', '        binaryAddress = _binaryAddress;\n', '    }\n', '    \n', '    /*\n', '    * price in ICO:\n', '    * first week: 1 ETH = 2400 NAC\n', '    * second week: 1 ETH = 23000 NAC\n', '    * 3rd week: 1 ETH = 2200 NAC\n', '    * 4th week: 1 ETH = 2100 NAC\n', '    * 5th week: 1 ETH = 2000 NAC\n', '    * 6th week: 1 ETH = 1900 NAC\n', '    * 7th week: 1 ETH = 1800 NAC\n', '    * 8th week: 1 ETH = 1700 nac\n', '    * time: \n', '    * 1517443200: Thursday, February 1, 2018 12:00:00 AM\n', '    * 1518048000: Thursday, February 8, 2018 12:00:00 AM\n', '    * 1518652800: Thursday, February 15, 2018 12:00:00 AM\n', '    * 1519257600: Thursday, February 22, 2018 12:00:00 AM\n', '    * 1519862400: Thursday, March 1, 2018 12:00:00 AM\n', '    * 1520467200: Thursday, March 8, 2018 12:00:00 AM\n', '    * 1521072000: Thursday, March 15, 2018 12:00:00 AM\n', '    * 1521676800: Thursday, March 22, 2018 12:00:00 AM\n', '    * 1522281600: Thursday, March 29, 2018 12:00:00 AM\n', '    */\n', '    function getPrice() public view returns (uint price) {\n', '        if (now < 1517443200) {\n', '            // presale\n', '            return 3450;\n', '        } else if (1517443200 < now && now <= 1518048000) {\n', '            // 1st week\n', '            return 2400;\n', '        } else if (1518048000 < now && now <= 1518652800) {\n', '            // 2nd week\n', '            return 2300;\n', '        } else if (1518652800 < now && now <= 1519257600) {\n', '            // 3rd week\n', '            return 2200;\n', '        } else if (1519257600 < now && now <= 1519862400) {\n', '            // 4th week\n', '            return 2100;\n', '        } else if (1519862400 < now && now <= 1520467200) {\n', '            // 5th week\n', '            return 2000;\n', '        } else if (1520467200 < now && now <= 1521072000) {\n', '            // 6th week\n', '            return 1900;\n', '        } else if (1521072000 < now && now <= 1521676800) {\n', '            // 7th week\n', '            return 1800;\n', '        } else if (1521676800 < now && now <= 1522281600) {\n', '            // 8th week\n', '            return 1700;\n', '        } else {\n', '            return binary;\n', '        }\n', '    }\n', '\n', '\n', '    function() payable public {\n', '        buy(msg.sender);\n', '    }\n', '    \n', '    \n', '    function buy(address _buyer) payable public {\n', '        // Available only if presale is running.\n', '        require(currentPhase == Phase.Running);\n', '        // require ICO time or binary option\n', '        require(now <= 1522281600 || msg.sender == binaryAddress);\n', '        require(msg.value != 0);\n', '        uint newTokens = msg.value * getPrice();\n', '        require (totalSupply + newTokens < TOKEN_SUPPLY_LIMIT);\n', '        // add new token to buyer\n', '        balanceOf[_buyer] = balanceOf[_buyer].add(newTokens);\n', '        // add new token to totalSupply\n', '        totalSupply = totalSupply.add(newTokens);\n', '        LogBuy(_buyer,newTokens);\n', '        Transfer(this,_buyer,newTokens);\n', '    }\n', '    \n', '\n', '    /// @dev Returns number of tokens owned by given address.\n', '    /// @param _owner Address of token owner.\n', '    function burnTokens(address _owner) public\n', '        onlyCrowdsaleManager\n', '    {\n', '        // Available only during migration phase\n', '        require(currentPhase == Phase.Migrating);\n', '\n', '        uint tokens = balanceOf[_owner];\n', '        require(tokens != 0);\n', '        balanceOf[_owner] = 0;\n', '        totalSupply -= tokens;\n', '        LogBurn(_owner, tokens);\n', '        Transfer(_owner, crowdsaleManager, tokens);\n', '\n', '        // Automatically switch phase when migration is done.\n', '        if (totalSupply == 0) {\n', '            currentPhase = Phase.Migrated;\n', '            LogPhaseSwitch(Phase.Migrated);\n', '        }\n', '    }\n', '\n', '\n', '    /*/\n', '     *  Administrative functions\n', '    /*/\n', '    function setPresalePhase(Phase _nextPhase) public\n', '        onlyEscrow\n', '    {\n', '        bool canSwitchPhase\n', '            =  (currentPhase == Phase.Created && _nextPhase == Phase.Running)\n', '            || (currentPhase == Phase.Running && _nextPhase == Phase.Paused)\n', '                // switch to migration phase only if crowdsale manager is set\n', '            || ((currentPhase == Phase.Running || currentPhase == Phase.Paused)\n', '                && _nextPhase == Phase.Migrating\n', '                && crowdsaleManager != 0x0)\n', '            || (currentPhase == Phase.Paused && _nextPhase == Phase.Running)\n', '                // switch to migrated only if everyting is migrated\n', '            || (currentPhase == Phase.Migrating && _nextPhase == Phase.Migrated\n', '                && totalSupply == 0);\n', '\n', '        require(canSwitchPhase);\n', '        currentPhase = _nextPhase;\n', '        LogPhaseSwitch(_nextPhase);\n', '    }\n', '\n', '\n', '    function withdrawEther(uint _amount) public\n', '        onlyEscrow\n', '    {\n', '        require(namiMultiSigWallet != 0x0);\n', '        // Available at any phase.\n', '        if (this.balance > 0) {\n', '            namiMultiSigWallet.transfer(_amount);\n', '        }\n', '    }\n', '    \n', '    function safeWithdraw(address _withdraw, uint _amount) public\n', '        onlyEscrow\n', '    {\n', '        NamiMultiSigWallet namiWallet = NamiMultiSigWallet(namiMultiSigWallet);\n', '        if (namiWallet.isOwner(_withdraw)) {\n', '            _withdraw.transfer(_amount);\n', '        }\n', '    }\n', '\n', '\n', '    function setCrowdsaleManager(address _mgr) public\n', '        onlyEscrow\n', '    {\n', "        // You can't change crowdsale contract when migration is in progress.\n", '        require(currentPhase != Phase.Migrating);\n', '        crowdsaleManager = _mgr;\n', '    }\n', '\n', '    // internal migrate migration tokens\n', '    function _migrateToken(address _from, address _to)\n', '        internal\n', '    {\n', '        PresaleToken presale = PresaleToken(namiPresale);\n', '        uint256 newToken = presale.balanceOf(_from);\n', '        require(newToken > 0);\n', '        // burn old token\n', '        presale.burnTokens(_from);\n', '        // add new token to _to\n', '        balanceOf[_to] = balanceOf[_to].add(newToken);\n', '        // add new token to totalSupply\n', '        totalSupply = totalSupply.add(newToken);\n', '        LogMigrate(_from, _to, newToken);\n', '        Transfer(this,_to,newToken);\n', '    }\n', '\n', '    // migate token function for Nami Team\n', '    function migrateToken(address _from, address _to) public\n', '        onlyEscrow\n', '    {\n', '        _migrateToken(_from, _to);\n', '    }\n', '\n', '    // migrate token for investor\n', '    function migrateForInvestor() public {\n', '        _migrateToken(msg.sender, msg.sender);\n', '    }\n', '\n', '    // Nami internal exchange\n', '    \n', '    // event for Nami exchange\n', '    event TransferToBuyer(address indexed _from, address indexed _to, uint _value, address indexed _seller);\n', '    event TransferToExchange(address indexed _from, address indexed _to, uint _value, uint _price);\n', '    \n', '    \n', '    /**\n', '     * @dev Transfer the specified amount of tokens to the NamiExchange address.\n', '     *      Invokes the `tokenFallbackExchange` function.\n', '     *      The token transfer fails if the recipient is a contract\n', '     *      but does not implement the `tokenFallbackExchange` function\n', '     *      or the fallback function to receive funds.\n', '     *\n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     * @param _price price to sell token.\n', '     */\n', '     \n', '    function transferToExchange(address _to, uint _value, uint _price) public {\n', '        uint codeLength;\n', '        \n', '        assembly {\n', '            codeLength := extcodesize(_to)\n', '        }\n', '        \n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        Transfer(msg.sender,_to,_value);\n', '        if (codeLength > 0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallbackExchange(msg.sender, _value, _price);\n', '            TransferToExchange(msg.sender, _to, _value, _price);\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @dev Transfer the specified amount of tokens to the NamiExchange address.\n', '     *      Invokes the `tokenFallbackBuyer` function.\n', '     *      The token transfer fails if the recipient is a contract\n', '     *      but does not implement the `tokenFallbackBuyer` function\n', '     *      or the fallback function to receive funds.\n', '     *\n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     * @param _buyer address of seller.\n', '     */\n', '     \n', '    function transferToBuyer(address _to, uint _value, address _buyer) public {\n', '        uint codeLength;\n', '        \n', '        assembly {\n', '            codeLength := extcodesize(_to)\n', '        }\n', '        \n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        Transfer(msg.sender,_to,_value);\n', '        if (codeLength > 0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallbackBuyer(msg.sender, _value, _buyer);\n', '            TransferToBuyer(msg.sender, _to, _value, _buyer);\n', '        }\n', '    }\n', '//-------------------------------------------------------------------------------------------------------\n', '}\n', '\n', '\n', '/*\n', '* Binary option smart contract-------------------------------\n', '*/\n', 'contract BinaryOption {\n', '    /*\n', '     * binary option controled by escrow to buy NAC with good price\n', '     */\n', '    // NamiCrowdSale address\n', '    address public namiCrowdSaleAddr;\n', '    address public escrow;\n', '    \n', '    // namiMultiSigWallet\n', '    address public namiMultiSigWallet;\n', '    \n', '    Session public session;\n', '    uint public timeInvestInMinute = 15;\n', '    uint public timeOneSession = 20;\n', '    uint public sessionId = 1;\n', '    uint public rateWin = 100;\n', '    uint public rateLoss = 20;\n', '    uint public rateFee = 5;\n', '    uint public constant MAX_INVESTOR = 20;\n', '    uint public minimunEth = 10000000000000000; // minimunEth = 0.01 eth\n', '    /**\n', '     * Events for binany option system\n', '     */\n', '    event SessionOpen(uint timeOpen, uint indexed sessionId);\n', '    event InvestClose(uint timeInvestClose, uint priceOpen, uint indexed sessionId);\n', '    event Invest(address indexed investor, bool choose, uint amount, uint timeInvest, uint indexed sessionId);\n', '    event SessionClose(uint timeClose, uint indexed sessionId, uint priceClose, uint nacPrice, uint rateWin, uint rateLoss, uint rateFee);\n', '\n', '    event Deposit(address indexed sender, uint value);\n', '    /// @dev Fallback function allows to deposit ether.\n', '    function() public payable {\n', '        if (msg.value > 0)\n', '            Deposit(msg.sender, msg.value);\n', '    }\n', '    // there is only one session available at one timeOpen\n', '    // priceOpen is price of ETH in USD\n', '    // priceClose is price of ETH in USD\n', '    // process of one Session\n', '    // 1st: escrow reset session by run resetSession()\n', '    // 2nd: escrow open session by run openSession() => save timeOpen at this time\n', '    // 3rd: all investor can invest by run invest(), send minimum 0.1 ETH\n', '    // 4th: escrow close invest and insert price open for this Session\n', '    // 5th: escrow close session and send NAC for investor\n', '    struct Session {\n', '        uint priceOpen;\n', '        uint priceClose;\n', '        uint timeOpen;\n', '        bool isReset;\n', '        bool isOpen;\n', '        bool investOpen;\n', '        uint investorCount;\n', '        mapping(uint => address) investor;\n', '        mapping(uint => bool) win;\n', '        mapping(uint => uint) amountInvest;\n', '    }\n', '    \n', '    function BinaryOption(address _namiCrowdSale, address _escrow, address _namiMultiSigWallet) public {\n', '        require(_namiCrowdSale != 0x0 && _escrow != 0x0);\n', '        namiCrowdSaleAddr = _namiCrowdSale;\n', '        escrow = _escrow;\n', '        namiMultiSigWallet = _namiMultiSigWallet;\n', '    }\n', '    \n', '    \n', '    modifier onlyEscrow() {\n', '        require(msg.sender==escrow);\n', '        _;\n', '    }\n', '    \n', '        \n', '    modifier onlyNamiMultisig() {\n', '        require(msg.sender == namiMultiSigWallet);\n', '        _;\n', '    }\n', '    \n', '    // change escrow\n', '    function changeEscrow(address _escrow) public\n', '        onlyNamiMultisig\n', '    {\n', '        require(_escrow != 0x0);\n', '        escrow = _escrow;\n', '    }\n', '    \n', '    // chagne minimunEth\n', '    function changeMinEth(uint _minimunEth) public \n', '        onlyEscrow\n', '    {\n', '        require(_minimunEth != 0);\n', '        minimunEth = _minimunEth;\n', '    }\n', '    \n', '    /// @dev Change time for investor can invest in one session, can only change at time not in session\n', '    /// @param _timeInvest time invest in minutes\n', '    ///---------------------------change time function------------------------------\n', '    function changeTimeInvest(uint _timeInvest)\n', '        public\n', '        onlyEscrow\n', '    {\n', '        require(!session.isOpen && _timeInvest < timeOneSession);\n', '        timeInvestInMinute = _timeInvest;\n', '    }\n', '\n', '    function changeTimeOneSession(uint _timeOneSession) \n', '        public\n', '        onlyEscrow\n', '    {\n', '        require(!session.isOpen && _timeOneSession > timeInvestInMinute);\n', '        timeOneSession = _timeOneSession;\n', '    }\n', '\n', '    /////------------------------change rate function-------------------------------\n', '    \n', '    function changeRateWin(uint _rateWin)\n', '        public\n', '        onlyEscrow\n', '    {\n', '        require(!session.isOpen);\n', '        rateWin = _rateWin;\n', '    }\n', '    \n', '    function changeRateLoss(uint _rateLoss)\n', '        public\n', '        onlyEscrow\n', '    {\n', '        require(!session.isOpen);\n', '        rateLoss = _rateLoss;\n', '    }\n', '    \n', '    function changeRateFee(uint _rateFee)\n', '        public\n', '        onlyEscrow\n', '    {\n', '        require(!session.isOpen);\n', '        rateFee = _rateFee;\n', '    }\n', '    \n', '    \n', '    /// @dev withdraw ether to nami multisignature wallet, only escrow can call\n', '    /// @param _amount value ether in wei to withdraw\n', '    function withdrawEther(uint _amount) public\n', '        onlyEscrow\n', '    {\n', '        require(namiMultiSigWallet != 0x0);\n', '        // Available at any phase.\n', '        if (this.balance > 0) {\n', '            namiMultiSigWallet.transfer(_amount);\n', '        }\n', '    }\n', '    \n', '    /// @dev safe withdraw Ether to one of owner of nami multisignature wallet\n', '    /// @param _withdraw address to withdraw\n', '    function safeWithdraw(address _withdraw, uint _amount) public\n', '        onlyEscrow\n', '    {\n', '        NamiMultiSigWallet namiWallet = NamiMultiSigWallet(namiMultiSigWallet);\n', '        if (namiWallet.isOwner(_withdraw)) {\n', '            _withdraw.transfer(_amount);\n', '        }\n', '    }\n', '    \n', '    // @dev Returns list of owners.\n', '    // @return List of owner addresses.\n', '    // MAX_INVESTOR = 20\n', '    function getInvestors()\n', '        public\n', '        view\n', '        returns (address[20])\n', '    {\n', '        address[20] memory listInvestor;\n', '        for (uint i = 0; i < MAX_INVESTOR; i++) {\n', '            listInvestor[i] = session.investor[i];\n', '        }\n', '        return listInvestor;\n', '    }\n', '    \n', '    function getChooses()\n', '        public\n', '        view\n', '        returns (bool[20])\n', '    {\n', '        bool[20] memory listChooses;\n', '        for (uint i = 0; i < MAX_INVESTOR; i++) {\n', '            listChooses[i] = session.win[i];\n', '        }\n', '        return listChooses;\n', '    }\n', '    \n', '    function getAmount()\n', '        public\n', '        view\n', '        returns (uint[20])\n', '    {\n', '        uint[20] memory listAmount;\n', '        for (uint i = 0; i < MAX_INVESTOR; i++) {\n', '            listAmount[i] = session.amountInvest[i];\n', '        }\n', '        return listAmount;\n', '    }\n', '    \n', '    /// @dev reset all data of previous session, must run before open new session\n', '    // only escrow can call\n', '    function resetSession()\n', '        public\n', '        onlyEscrow\n', '    {\n', '        require(!session.isReset && !session.isOpen);\n', '        session.priceOpen = 0;\n', '        session.priceClose = 0;\n', '        session.isReset = true;\n', '        session.isOpen = false;\n', '        session.investOpen = false;\n', '        session.investorCount = 0;\n', '        for (uint i = 0; i < MAX_INVESTOR; i++) {\n', '            session.investor[i] = 0x0;\n', '            session.win[i] = false;\n', '            session.amountInvest[i] = 0;\n', '        }\n', '    }\n', '    \n', '    /// @dev Open new session, only escrow can call\n', '    function openSession ()\n', '        public\n', '        onlyEscrow\n', '    {\n', '        require(session.isReset && !session.isOpen);\n', '        session.isReset = false;\n', '        // open invest\n', '        session.investOpen = true;\n', '        session.timeOpen = now;\n', '        session.isOpen = true;\n', '        SessionOpen(now, sessionId);\n', '    }\n', '    \n', '    /// @dev Fuction for investor, minimun ether send is 0.1, one address can call one time in one session\n', '    /// @param _choose choise of investor, true is call, false is put\n', '    function invest (bool _choose)\n', '        public\n', '        payable\n', '    {\n', '        require(msg.value >= minimunEth && session.investOpen); // msg.value >= 0.1 ether\n', '        require(now < (session.timeOpen + timeInvestInMinute * 1 minutes));\n', '        require(session.investorCount < MAX_INVESTOR);\n', '        session.investor[session.investorCount] = msg.sender;\n', '        session.win[session.investorCount] = _choose;\n', '        session.amountInvest[session.investorCount] = msg.value;\n', '        session.investorCount += 1;\n', '        Invest(msg.sender, _choose, msg.value, now, sessionId);\n', '    }\n', '    \n', '    /// @dev close invest for escrow\n', '    /// @param _priceOpen price ETH in USD\n', '    function closeInvest (uint _priceOpen) \n', '        public\n', '        onlyEscrow\n', '    {\n', '        require(_priceOpen != 0 && session.investOpen);\n', '        require(now > (session.timeOpen + timeInvestInMinute * 1 minutes));\n', '        session.investOpen = false;\n', '        session.priceOpen = _priceOpen;\n', '        InvestClose(now, _priceOpen, sessionId);\n', '    }\n', '    \n', '    /// @dev get amount of ether to buy NAC for investor\n', '    /// @param _ether amount ether which investor invest\n', '    /// @param _status true for investor win and false for investor loss\n', '    function getEtherToBuy (uint _ether, bool _status)\n', '        public\n', '        view\n', '        returns (uint)\n', '    {\n', '        if (_status) {\n', '            return _ether * rateWin / 100;\n', '        } else {\n', '            return _ether * rateLoss / 100;\n', '        }\n', '    }\n', '\n', '    /// @dev close session, only escrow can call\n', '    /// @param _priceClose price of ETH in USD\n', '    function closeSession (uint _priceClose)\n', '        public\n', '        onlyEscrow\n', '    {\n', '        require(_priceClose != 0 && now > (session.timeOpen + timeOneSession * 1 minutes));\n', '        require(!session.investOpen && session.isOpen);\n', '        session.priceClose = _priceClose;\n', '        bool result = (_priceClose>session.priceOpen)?true:false;\n', '        uint etherToBuy;\n', '        NamiCrowdSale namiContract = NamiCrowdSale(namiCrowdSaleAddr);\n', '        uint price = namiContract.getPrice();\n', '        require(price != 0);\n', '        for (uint i = 0; i < session.investorCount; i++) {\n', '            if (session.win[i]==result) {\n', '                etherToBuy = (session.amountInvest[i] - session.amountInvest[i] * rateFee / 100) * rateWin / 100;\n', '                uint etherReturn = session.amountInvest[i] - session.amountInvest[i] * rateFee / 100;\n', '                (session.investor[i]).transfer(etherReturn);\n', '            } else {\n', '                etherToBuy = (session.amountInvest[i] - session.amountInvest[i] * rateFee / 100) * rateLoss / 100;\n', '            }\n', '            namiContract.buy.value(etherToBuy)(session.investor[i]);\n', '            // reset investor\n', '            session.investor[i] = 0x0;\n', '            session.win[i] = false;\n', '            session.amountInvest[i] = 0;\n', '        }\n', '        session.isOpen = false;\n', '        SessionClose(now, sessionId, _priceClose, price, rateWin, rateLoss, rateFee);\n', '        sessionId += 1;\n', '        \n', '        // require(!session.isReset && !session.isOpen);\n', '        // reset state session\n', '        session.priceOpen = 0;\n', '        session.priceClose = 0;\n', '        session.isReset = true;\n', '        session.investOpen = false;\n', '        session.investorCount = 0;\n', '    }\n', '}\n', '\n', '\n', 'contract PresaleToken {\n', '    mapping (address => uint256) public balanceOf;\n', '    function burnTokens(address _owner) public;\n', '}\n', '\n', ' /*\n', ' * Contract that is working with ERC223 tokens\n', ' */\n', ' \n', ' /**\n', ' * @title Contract that will work with ERC223 tokens.\n', ' */\n', ' \n', 'contract ERC223ReceivingContract {\n', '/**\n', ' * @dev Standard ERC223 function that will handle incoming token transfers.\n', ' *\n', ' * @param _from  Token sender address.\n', ' * @param _value Amount of tokens.\n', ' * @param _data  Transaction metadata.\n', ' */\n', '    function tokenFallback(address _from, uint _value, bytes _data) public returns (bool success);\n', '    function tokenFallbackBuyer(address _from, uint _value, address _buyer) public returns (bool success);\n', '    function tokenFallbackExchange(address _from, uint _value, uint _price) public returns (bool success);\n', '}\n', '\n', '\n', ' /*\n', ' * Nami Internal Exchange smartcontract-----------------------------------------------------------------\n', ' *\n', ' */\n', '\n', 'contract NamiExchange {\n', '    using SafeMath for uint;\n', '    \n', '    function NamiExchange(address _namiAddress) public {\n', '        NamiAddr = _namiAddress;\n', '    }\n', '\n', '    event UpdateBid(address owner, uint price, uint balance);\n', '    event UpdateAsk(address owner, uint price, uint volume);\n', '    event BuyHistory(address indexed buyer, address indexed seller, uint price, uint volume, uint time);\n', '    event SellHistory(address indexed seller, address indexed buyer, uint price, uint volume, uint time);\n', '\n', '    \n', '    mapping(address => OrderBid) public bid;\n', '    mapping(address => OrderAsk) public ask;\n', '    string public name = "NacExchange";\n', '    \n', '    /// address of Nami token\n', '    address public NamiAddr;\n', '    \n', '    /// price of Nac = ETH/NAC\n', '    uint public price = 1;\n', '    // struct store order of user\n', '    struct OrderBid {\n', '        uint price;\n', '        uint eth;\n', '    }\n', '    \n', '    struct OrderAsk {\n', '        uint price;\n', '        uint volume;\n', '    }\n', '    \n', '        \n', '    // prevent lost ether\n', '    function() payable public {\n', '        require(msg.data.length != 0);\n', '        require(msg.value == 0);\n', '    }\n', '    \n', '    modifier onlyNami {\n', '        require(msg.sender == NamiAddr);\n', '        _;\n', '    }\n', '    \n', '    /////////////////\n', '    //---------------------------function about bid Order-----------------------------------------------------------\n', '    \n', '    function placeBuyOrder(uint _price) payable public {\n', '        require(_price > 0 && msg.value > 0 && bid[msg.sender].eth == 0);\n', '        if (msg.value > 0) {\n', '            bid[msg.sender].eth = (bid[msg.sender].eth).add(msg.value);\n', '            bid[msg.sender].price = _price;\n', '            UpdateBid(msg.sender, _price, bid[msg.sender].eth);\n', '        }\n', '    }\n', '    \n', '    function sellNac(uint _value, address _buyer, uint _price) public returns (bool success) {\n', '        require(_price == bid[_buyer].price && _buyer != msg.sender);\n', '        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\n', '        uint ethOfBuyer = bid[_buyer].eth;\n', '        uint maxToken = ethOfBuyer.mul(bid[_buyer].price);\n', '        require(namiToken.allowance(msg.sender, this) >= _value && _value > 0 && ethOfBuyer != 0 && _buyer != 0x0);\n', '        if (_value > maxToken) {\n', '            if (msg.sender.send(ethOfBuyer) && namiToken.transferFrom(msg.sender,_buyer,maxToken)) {\n', '                // update order\n', '                bid[_buyer].eth = 0;\n', '                UpdateBid(_buyer, bid[_buyer].price, bid[_buyer].eth);\n', '                BuyHistory(_buyer, msg.sender, bid[_buyer].price, maxToken, now);\n', '                return true;\n', '            } else {\n', '                // revert anything\n', '                revert();\n', '            }\n', '        } else {\n', '            uint eth = _value.div(bid[_buyer].price);\n', '            if (msg.sender.send(eth) && namiToken.transferFrom(msg.sender,_buyer,_value)) {\n', '                // update order\n', '                bid[_buyer].eth = (bid[_buyer].eth).sub(eth);\n', '                UpdateBid(_buyer, bid[_buyer].price, bid[_buyer].eth);\n', '                BuyHistory(_buyer, msg.sender, bid[_buyer].price, _value, now);\n', '                return true;\n', '            } else {\n', '                // revert anything\n', '                revert();\n', '            }\n', '        }\n', '    }\n', '    \n', '    function closeBidOrder() public {\n', '        require(bid[msg.sender].eth > 0 && bid[msg.sender].price > 0);\n', '        // transfer ETH\n', '        msg.sender.transfer(bid[msg.sender].eth);\n', '        // update order\n', '        bid[msg.sender].eth = 0;\n', '        UpdateBid(msg.sender, bid[msg.sender].price, bid[msg.sender].eth);\n', '    }\n', '    \n', '\n', '    ////////////////\n', '    //---------------------------function about ask Order-----------------------------------------------------------\n', '    \n', '    // place ask order by send NAC to Nami Exchange contract\n', '    // this function place sell order\n', '    function tokenFallbackExchange(address _from, uint _value, uint _price) onlyNami public returns (bool success) {\n', '        require(_price > 0 && _value > 0 && ask[_from].volume == 0);\n', '        if (_value > 0) {\n', '            ask[_from].volume = (ask[_from].volume).add(_value);\n', '            ask[_from].price = _price;\n', '            UpdateAsk(_from, _price, ask[_from].volume);\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    function closeAskOrder() public {\n', '        require(ask[msg.sender].volume > 0 && ask[msg.sender].price > 0);\n', '        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\n', '        uint previousBalances = namiToken.balanceOf(msg.sender);\n', '        // transfer token\n', '        namiToken.transfer(msg.sender, ask[msg.sender].volume);\n', '        // update order\n', '        ask[msg.sender].volume = 0;\n', '        UpdateAsk(msg.sender, ask[msg.sender].price, 0);\n', '        // check balance\n', '        assert(previousBalances < namiToken.balanceOf(msg.sender));\n', '    }\n', '    \n', '    function buyNac(address _seller, uint _price) payable public returns (bool success) {\n', '        require(msg.value > 0 && ask[_seller].volume > 0 && ask[_seller].price > 0);\n', '        require(_price == ask[_seller].price && _seller != msg.sender);\n', '        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\n', '        uint maxEth = (ask[_seller].volume).div(ask[_seller].price);\n', '        uint previousBalances = namiToken.balanceOf(msg.sender);\n', '        if (msg.value > maxEth) {\n', '            if (_seller.send(maxEth) && msg.sender.send(msg.value.sub(maxEth))) {\n', '                // transfer token\n', '                namiToken.transfer(msg.sender, ask[_seller].volume);\n', '                SellHistory(_seller, msg.sender, ask[_seller].price, ask[_seller].volume, now);\n', '                // update order\n', '                ask[_seller].volume = 0;\n', '                UpdateAsk(_seller, ask[_seller].price, 0);\n', '                assert(previousBalances < namiToken.balanceOf(msg.sender));\n', '                return true;\n', '            } else {\n', '                // revert anything\n', '                revert();\n', '            }\n', '        } else {\n', '            uint nac = (msg.value).mul(ask[_seller].price);\n', '            if (_seller.send(msg.value)) {\n', '                // transfer token\n', '                namiToken.transfer(msg.sender, nac);\n', '                // update order\n', '                ask[_seller].volume = (ask[_seller].volume).sub(nac);\n', '                UpdateAsk(_seller, ask[_seller].price, ask[_seller].volume);\n', '                SellHistory(_seller, msg.sender, ask[_seller].price, nac, now);\n', '                assert(previousBalances < namiToken.balanceOf(msg.sender));\n', '                return true;\n', '            } else {\n', '                // revert anything\n', '                revert();\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'contract ERC23 {\n', '  function balanceOf(address who) public constant returns (uint);\n', '  function transfer(address to, uint value) public returns (bool success);\n', '}\n', '\n', '\n', '\n', '/*\n', '* NamiMultiSigWallet smart contract-------------------------------\n', '*/\n', '/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\n', 'contract NamiMultiSigWallet {\n', '\n', '    uint constant public MAX_OWNER_COUNT = 50;\n', '\n', '    event Confirmation(address indexed sender, uint indexed transactionId);\n', '    event Revocation(address indexed sender, uint indexed transactionId);\n', '    event Submission(uint indexed transactionId);\n', '    event Execution(uint indexed transactionId);\n', '    event ExecutionFailure(uint indexed transactionId);\n', '    event Deposit(address indexed sender, uint value);\n', '    event OwnerAddition(address indexed owner);\n', '    event OwnerRemoval(address indexed owner);\n', '    event RequirementChange(uint required);\n', '\n', '    mapping (uint => Transaction) public transactions;\n', '    mapping (uint => mapping (address => bool)) public confirmations;\n', '    mapping (address => bool) public isOwner;\n', '    address[] public owners;\n', '    uint public required;\n', '    uint public transactionCount;\n', '\n', '    struct Transaction {\n', '        address destination;\n', '        uint value;\n', '        bytes data;\n', '        bool executed;\n', '    }\n', '\n', '    modifier onlyWallet() {\n', '        require(msg.sender == address(this));\n', '        _;\n', '    }\n', '\n', '    modifier ownerDoesNotExist(address owner) {\n', '        require(!isOwner[owner]);\n', '        _;\n', '    }\n', '\n', '    modifier ownerExists(address owner) {\n', '        require(isOwner[owner]);\n', '        _;\n', '    }\n', '\n', '    modifier transactionExists(uint transactionId) {\n', '        require(transactions[transactionId].destination != 0);\n', '        _;\n', '    }\n', '\n', '    modifier confirmed(uint transactionId, address owner) {\n', '        require(confirmations[transactionId][owner]);\n', '        _;\n', '    }\n', '\n', '    modifier notConfirmed(uint transactionId, address owner) {\n', '        require(!confirmations[transactionId][owner]);\n', '        _;\n', '    }\n', '\n', '    modifier notExecuted(uint transactionId) {\n', '        require(!transactions[transactionId].executed);\n', '        _;\n', '    }\n', '\n', '    modifier notNull(address _address) {\n', '        require(_address != 0);\n', '        _;\n', '    }\n', '\n', '    modifier validRequirement(uint ownerCount, uint _required) {\n', '        require(!(ownerCount > MAX_OWNER_COUNT\n', '            || _required > ownerCount\n', '            || _required == 0\n', '            || ownerCount == 0));\n', '        _;\n', '    }\n', '\n', '    /// @dev Fallback function allows to deposit ether.\n', '    function() public payable {\n', '        if (msg.value > 0)\n', '            Deposit(msg.sender, msg.value);\n', '    }\n', '\n', '    /*\n', '     * Public functions\n', '     */\n', '    /// @dev Contract constructor sets initial owners and required number of confirmations.\n', '    /// @param _owners List of initial owners.\n', '    /// @param _required Number of required confirmations.\n', '    function NamiMultiSigWallet(address[] _owners, uint _required)\n', '        public\n', '        validRequirement(_owners.length, _required)\n', '    {\n', '        for (uint i = 0; i < _owners.length; i++) {\n', '            require(!(isOwner[_owners[i]] || _owners[i] == 0));\n', '            isOwner[_owners[i]] = true;\n', '        }\n', '        owners = _owners;\n', '        required = _required;\n', '    }\n', '\n', '    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n', '    /// @param owner Address of new owner.\n', '    function addOwner(address owner)\n', '        public\n', '        onlyWallet\n', '        ownerDoesNotExist(owner)\n', '        notNull(owner)\n', '        validRequirement(owners.length + 1, required)\n', '    {\n', '        isOwner[owner] = true;\n', '        owners.push(owner);\n', '        OwnerAddition(owner);\n', '    }\n', '\n', '    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n', '    /// @param owner Address of owner.\n', '    function removeOwner(address owner)\n', '        public\n', '        onlyWallet\n', '        ownerExists(owner)\n', '    {\n', '        isOwner[owner] = false;\n', '        for (uint i=0; i<owners.length - 1; i++) {\n', '            if (owners[i] == owner) {\n', '                owners[i] = owners[owners.length - 1];\n', '                break;\n', '            }\n', '        }\n', '        owners.length -= 1;\n', '        if (required > owners.length)\n', '            changeRequirement(owners.length);\n', '        OwnerRemoval(owner);\n', '    }\n', '\n', '    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n', '    /// @param owner Address of owner to be replaced.\n', '    /// @param owner Address of new owner.\n', '    function replaceOwner(address owner, address newOwner)\n', '        public\n', '        onlyWallet\n', '        ownerExists(owner)\n', '        ownerDoesNotExist(newOwner)\n', '    {\n', '        for (uint i=0; i<owners.length; i++) {\n', '            if (owners[i] == owner) {\n', '                owners[i] = newOwner;\n', '                break;\n', '            }\n', '        }\n', '        isOwner[owner] = false;\n', '        isOwner[newOwner] = true;\n', '        OwnerRemoval(owner);\n', '        OwnerAddition(newOwner);\n', '    }\n', '\n', '    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n', '    /// @param _required Number of required confirmations.\n', '    function changeRequirement(uint _required)\n', '        public\n', '        onlyWallet\n', '        validRequirement(owners.length, _required)\n', '    {\n', '        required = _required;\n', '        RequirementChange(_required);\n', '    }\n', '\n', '    /// @dev Allows an owner to submit and confirm a transaction.\n', '    /// @param destination Transaction target address.\n', '    /// @param value Transaction ether value.\n', '    /// @param data Transaction data payload.\n', '    /// @return Returns transaction ID.\n', '    function submitTransaction(address destination, uint value, bytes data)\n', '        public\n', '        returns (uint transactionId)\n', '    {\n', '        transactionId = addTransaction(destination, value, data);\n', '        confirmTransaction(transactionId);\n', '    }\n', '\n', '    /// @dev Allows an owner to confirm a transaction.\n', '    /// @param transactionId Transaction ID.\n', '    function confirmTransaction(uint transactionId)\n', '        public\n', '        ownerExists(msg.sender)\n', '        transactionExists(transactionId)\n', '        notConfirmed(transactionId, msg.sender)\n', '    {\n', '        confirmations[transactionId][msg.sender] = true;\n', '        Confirmation(msg.sender, transactionId);\n', '        executeTransaction(transactionId);\n', '    }\n', '\n', '    /// @dev Allows an owner to revoke a confirmation for a transaction.\n', '    /// @param transactionId Transaction ID.\n', '    function revokeConfirmation(uint transactionId)\n', '        public\n', '        ownerExists(msg.sender)\n', '        confirmed(transactionId, msg.sender)\n', '        notExecuted(transactionId)\n', '    {\n', '        confirmations[transactionId][msg.sender] = false;\n', '        Revocation(msg.sender, transactionId);\n', '    }\n', '\n', '    /// @dev Allows anyone to execute a confirmed transaction.\n', '    /// @param transactionId Transaction ID.\n', '    function executeTransaction(uint transactionId)\n', '        public\n', '        notExecuted(transactionId)\n', '    {\n', '        if (isConfirmed(transactionId)) {\n', '            // Transaction tx = transactions[transactionId];\n', '            transactions[transactionId].executed = true;\n', '            // tx.executed = true;\n', '            if (transactions[transactionId].destination.call.value(transactions[transactionId].value)(transactions[transactionId].data)) {\n', '                Execution(transactionId);\n', '            } else {\n', '                ExecutionFailure(transactionId);\n', '                transactions[transactionId].executed = false;\n', '            }\n', '        }\n', '    }\n', '\n', '    /// @dev Returns the confirmation status of a transaction.\n', '    /// @param transactionId Transaction ID.\n', '    /// @return Confirmation status.\n', '    function isConfirmed(uint transactionId)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        uint count = 0;\n', '        for (uint i = 0; i < owners.length; i++) {\n', '            if (confirmations[transactionId][owners[i]])\n', '                count += 1;\n', '            if (count == required)\n', '                return true;\n', '        }\n', '    }\n', '\n', '    /*\n', '     * Internal functions\n', '     */\n', '    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n', '    /// @param destination Transaction target address.\n', '    /// @param value Transaction ether value.\n', '    /// @param data Transaction data payload.\n', '    /// @return Returns transaction ID.\n', '    function addTransaction(address destination, uint value, bytes data)\n', '        internal\n', '        notNull(destination)\n', '        returns (uint transactionId)\n', '    {\n', '        transactionId = transactionCount;\n', '        transactions[transactionId] = Transaction({\n', '            destination: destination, \n', '            value: value,\n', '            data: data,\n', '            executed: false\n', '        });\n', '        transactionCount += 1;\n', '        Submission(transactionId);\n', '    }\n', '\n', '    /*\n', '     * Web3 call functions\n', '     */\n', '    /// @dev Returns number of confirmations of a transaction.\n', '    /// @param transactionId Transaction ID.\n', '    /// @return Number of confirmations.\n', '    function getConfirmationCount(uint transactionId)\n', '        public\n', '        constant\n', '        returns (uint count)\n', '    {\n', '        for (uint i = 0; i < owners.length; i++) {\n', '            if (confirmations[transactionId][owners[i]])\n', '                count += 1;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns total number of transactions after filers are applied.\n', '    /// @param pending Include pending transactions.\n', '    /// @param executed Include executed transactions.\n', '    /// @return Total number of transactions after filters are applied.\n', '    function getTransactionCount(bool pending, bool executed)\n', '        public\n', '        constant\n', '        returns (uint count)\n', '    {\n', '        for (uint i = 0; i < transactionCount; i++) {\n', '            if (pending && !transactions[i].executed || executed && transactions[i].executed)\n', '                count += 1;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns list of owners.\n', '    /// @return List of owner addresses.\n', '    function getOwners()\n', '        public\n', '        constant\n', '        returns (address[])\n', '    {\n', '        return owners;\n', '    }\n', '\n', '    /// @dev Returns array with owner addresses, which confirmed transaction.\n', '    /// @param transactionId Transaction ID.\n', '    /// @return Returns array of owner addresses.\n', '    function getConfirmations(uint transactionId)\n', '        public\n', '        constant\n', '        returns (address[] _confirmations)\n', '    {\n', '        address[] memory confirmationsTemp = new address[](owners.length);\n', '        uint count = 0;\n', '        uint i;\n', '        for (i = 0; i < owners.length; i++) {\n', '            if (confirmations[transactionId][owners[i]]) {\n', '                confirmationsTemp[count] = owners[i];\n', '                count += 1;\n', '            }\n', '        }\n', '        _confirmations = new address[](count);\n', '        for (i = 0; i < count; i++) {\n', '            _confirmations[i] = confirmationsTemp[i];\n', '        }\n', '    }\n', '\n', '    /// @dev Returns list of transaction IDs in defined range.\n', '    /// @param from Index start position of transaction array.\n', '    /// @param to Index end position of transaction array.\n', '    /// @param pending Include pending transactions.\n', '    /// @param executed Include executed transactions.\n', '    /// @return Returns array of transaction IDs.\n', '    function getTransactionIds(uint from, uint to, bool pending, bool executed)\n', '        public\n', '        constant\n', '        returns (uint[] _transactionIds)\n', '    {\n', '        uint[] memory transactionIdsTemp = new uint[](transactionCount);\n', '        uint count = 0;\n', '        uint i;\n', '        for (i = 0; i < transactionCount; i++) {\n', '            if (pending && !transactions[i].executed || executed && transactions[i].executed) {\n', '                transactionIdsTemp[count] = i;\n', '                count += 1;\n', '            }\n', '        }\n', '        _transactionIds = new uint[](to - from);\n', '        for (i = from; i < to; i++) {\n', '            _transactionIds[i - from] = transactionIdsTemp[i];\n', '        }\n', '    }\n', '}']
