['pragma solidity ^0.4.11;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'contract DeepToken is StandardToken {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    // data structures\n', '    enum States {\n', '    Initial, // deployment time\n', '    ValuationSet, // set ICO parameters\n', '    Ico, // whitelist addresses, accept funds, update balances\n', '    Operational, // manage contests\n', '    Paused // for contract upgrades\n', '    }\n', '\n', '    string public constant name = "DeepToken";\n', '\n', '    string public constant symbol = "DTA";\n', '\n', '    uint8 public constant decimals = 18;\n', '\n', '    uint256 public constant pointMultiplier = (10 ** uint256(decimals));\n', '\n', '    mapping (address => bool) public whitelist;\n', '\n', '    address public initialHolder;\n', '\n', '    address public stateControl;\n', '\n', '    address public whitelistControl;\n', '\n', '    address public withdrawControl;\n', '\n', '    address public usdCurrencyFunding;\n', '\n', '    States public state;\n', '\n', '    uint256 public tokenPriceInWei;\n', '\n', '    uint256 public percentForSale;\n', '\n', '    uint256 public totalNumberOfTokensForSale;\n', '\n', '    uint256 public silencePeriod;\n', '\n', '    uint256 public startAcceptingFundsBlock;\n', '\n', '    uint256 public endBlock;\n', '\n', '    uint256 public etherBalance;\n', '\n', '    uint256 public usdCentsBalance;\n', '\n', '    uint256 public tokensSold;\n', '\n', '    //this creates the contract and stores the owner. it also passes in 3 addresses to be used later during the lifetime of the contract.\n', '    function DeepToken(address _stateControl, address _whitelistControl, address _withdraw, address _initialHolder, address _usdCurrencyFunding) {\n', '        require (_initialHolder != address(0));\n', '        require (_stateControl != address(0));\n', '        require (_whitelistControl != address(0));\n', '        require (_withdraw != address(0));\n', '        require (_usdCurrencyFunding != address(0));\n', '        initialHolder = _initialHolder;\n', '        stateControl = _stateControl;\n', '        whitelistControl = _whitelistControl;\n', '        withdrawControl = _withdraw;\n', '        usdCurrencyFunding = _usdCurrencyFunding;\n', '        moveToState(States.Initial);\n', '        totalSupply = 0;\n', '        tokenPriceInWei = 0;\n', '        percentForSale = 0;\n', '        totalNumberOfTokensForSale = 0;\n', '        silencePeriod = 0;\n', '        startAcceptingFundsBlock = uint256(int256(-1));\n', '        endBlock = 0;\n', '        etherBalance = 0;\n', '        usdCentsBalance = 0;\n', '        tokensSold = 0;\n', '        balances[initialHolder] = totalSupply;\n', '    }\n', '\n', '    event Whitelisted(address addr);\n', '\n', '    event Dewhitelisted(address addr);\n', '\n', '    event Credited(address addr, uint balance, uint txAmount);\n', '\n', '    event USDCentsBalance(uint balance);\n', '\n', '    event TokenByFiatCredited(address addr, uint balance, uint txAmount, uint256 requestId);\n', '\n', '    event StateTransition(States oldState, States newState);\n', '\n', '    modifier onlyWhitelist() {\n', '        require(msg.sender == whitelistControl);\n', '        _;\n', '    }\n', '\n', '    modifier onlyStateControl() {\n', '        require(msg.sender == stateControl);\n', '        _;\n', '    }\n', '\n', '    modifier requireState(States _requiredState) {\n', '        require(state == _requiredState);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    BEGIN ICO functions\n', '    */\n', '\n', '    //this is the main funding function, it updates the balances of DeepTokens during the ICO.\n', '    //no particular incentive schemes have been implemented here\n', '    //it is only accessible during the "ICO" phase.\n', '    function() payable\n', '    requireState(States.Ico)\n', '    {\n', '        require(msg.sender != whitelistControl);\n', '        require(whitelist[msg.sender] == true);\n', '        uint256 deepTokenIncrease = (msg.value * pointMultiplier) / tokenPriceInWei;\n', '        require(getTokensAvailableForSale() >= deepTokenIncrease);\n', '        require(block.number < endBlock);\n', '        require(block.number >= startAcceptingFundsBlock);\n', '        etherBalance = etherBalance.add(msg.value);\n', '        balances[initialHolder] = balances[initialHolder].sub(deepTokenIncrease);\n', '        balances[msg.sender] = balances[msg.sender].add(deepTokenIncrease);\n', '        tokensSold = tokensSold.add(deepTokenIncrease);\n', '        withdrawControl.transfer(msg.value);\n', '        Credited(msg.sender, balances[msg.sender], msg.value);\n', '    }\n', '\n', '    function recordPayment(uint256 usdCentsAmount, uint256 tokenAmount, uint256 requestId)\n', '    onlyWhitelist\n', '    requireState(States.Ico)\n', '    {\n', '        require(getTokensAvailableForSale() >= tokenAmount);\n', '        require(block.number < endBlock);\n', '        require(block.number >= startAcceptingFundsBlock);\n', '\n', '        usdCentsBalance = usdCentsBalance.add(usdCentsAmount);\n', '        balances[initialHolder] = balances[initialHolder].sub(tokenAmount);\n', '        balances[usdCurrencyFunding] = balances[usdCurrencyFunding].add(tokenAmount);\n', '        tokensSold = tokensSold.add(tokenAmount);\n', '\n', '        USDCentsBalance(usdCentsBalance);\n', '        TokenByFiatCredited(usdCurrencyFunding, balances[usdCurrencyFunding], tokenAmount, requestId);\n', '    }\n', '\n', '    function moveToState(States _newState)\n', '    internal\n', '    {\n', '        StateTransition(state, _newState);\n', '        state = _newState;\n', '    }\n', '\n', '    function getTokensAvailableForSale()\n', '    constant\n', '    returns (uint256 tokensAvailableForSale)\n', '    {\n', '        return (totalNumberOfTokensForSale.sub(tokensSold));\n', '    }\n', '\n', '    // ICO contract configuration function\n', '    // _newTotalSupply is the number of tokens available\n', '    // _newTokenPriceInWei is the token price in wei\n', '    // _newPercentForSale is the percentage of _newTotalSupply available for sale\n', '    // _newsilencePeriod is a number of blocks to wait after starting the ICO. No funds are accepted during the silence period. It can be set to zero.\n', '    // _newEndBlock is the absolute block number at which the ICO must stop. It must be set after now + silence period.\n', '    function updateEthICOThresholds(uint256 _newTotalSupply, uint256 _newTokenPriceInWei, uint256 _newPercentForSale, uint256 _newSilencePeriod, uint256 _newEndBlock)\n', '    onlyStateControl\n', '    {\n', '        require(state == States.Initial || state == States.ValuationSet);\n', '        require(_newTotalSupply > 0);\n', '        require(_newTokenPriceInWei > 0);\n', '        require(_newPercentForSale > 0);\n', '        require(_newPercentForSale <= 100);\n', '        require((_newTotalSupply * _newPercentForSale / 100) > 0);\n', '        require(block.number < _newEndBlock);\n', '        require(block.number + _newSilencePeriod < _newEndBlock);\n', '\n', '        totalSupply = _newTotalSupply;\n', '        percentForSale = _newPercentForSale;\n', '        totalNumberOfTokensForSale = totalSupply.mul(percentForSale).div(100);\n', '        tokenPriceInWei = _newTokenPriceInWei;\n', '        silencePeriod = _newSilencePeriod;\n', '        endBlock = _newEndBlock;\n', '\n', '        balances[initialHolder] = totalSupply;\n', '\n', '        moveToState(States.ValuationSet);\n', '    }\n', '\n', '    function startICO()\n', '    onlyStateControl\n', '    requireState(States.ValuationSet)\n', '    {\n', '        require(block.number < endBlock);\n', '        require(block.number + silencePeriod < endBlock);\n', '        startAcceptingFundsBlock = block.number + silencePeriod;\n', '        moveToState(States.Ico);\n', '    }\n', '\n', '    function endICO()\n', '    onlyStateControl\n', '    requireState(States.Ico)\n', '    {\n', '        burnUnsoldCoins();\n', '        moveToState(States.Operational);\n', '    }\n', '\n', '    function anyoneEndICO()\n', '    requireState(States.Ico)\n', '    {\n', '        require(block.number > endBlock);\n', '        burnUnsoldCoins();\n', '        moveToState(States.Operational);\n', '    }\n', '\n', '    function burnUnsoldCoins()\n', '    internal\n', '    {\n', '        //slashing the initial supply, so that the ICO is selling percentForSale% total\n', '        totalSupply = tokensSold.mul(100).div(percentForSale);\n', '        balances[initialHolder] = totalSupply.sub(tokensSold);\n', '    }\n', '\n', '    function addToWhitelist(address _whitelisted)\n', '    onlyWhitelist\n', '    {\n', '        whitelist[_whitelisted] = true;\n', '        Whitelisted(_whitelisted);\n', '    }\n', '\n', '    function removeFromWhitelist(address _whitelisted)\n', '    onlyWhitelist\n', '    {\n', '        whitelist[_whitelisted] = false;\n', '        Dewhitelisted(_whitelisted);\n', '    }\n', '\n', '    //emergency pause for the ICO\n', '    function pause()\n', '    onlyStateControl\n', '    requireState(States.Ico)\n', '    {\n', '        moveToState(States.Paused);\n', '    }\n', '\n', '    //un-pause\n', '    function resumeICO()\n', '    onlyStateControl\n', '    requireState(States.Paused)\n', '    {\n', '        moveToState(States.Ico);\n', '    }\n', '    /**\n', '    END ICO functions\n', '    */\n', '\n', '    /**\n', '    BEGIN ERC20 functions\n', '    */\n', '\n', '    function transfer(address _to, uint256 _value)\n', '    returns (bool success) {\n', '        require((state == States.Ico) || (state == States.Operational));\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    returns (bool success) {\n', '        require((state == States.Ico) || (state == States.Operational));\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function balanceOf(address _account)\n', '    constant\n', '    returns (uint256 balance) {\n', '        return balances[_account];\n', '    }\n', '\n', '    /**\n', '    END ERC20 functions\n', '    */\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'contract DeepToken is StandardToken {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    // data structures\n', '    enum States {\n', '    Initial, // deployment time\n', '    ValuationSet, // set ICO parameters\n', '    Ico, // whitelist addresses, accept funds, update balances\n', '    Operational, // manage contests\n', '    Paused // for contract upgrades\n', '    }\n', '\n', '    string public constant name = "DeepToken";\n', '\n', '    string public constant symbol = "DTA";\n', '\n', '    uint8 public constant decimals = 18;\n', '\n', '    uint256 public constant pointMultiplier = (10 ** uint256(decimals));\n', '\n', '    mapping (address => bool) public whitelist;\n', '\n', '    address public initialHolder;\n', '\n', '    address public stateControl;\n', '\n', '    address public whitelistControl;\n', '\n', '    address public withdrawControl;\n', '\n', '    address public usdCurrencyFunding;\n', '\n', '    States public state;\n', '\n', '    uint256 public tokenPriceInWei;\n', '\n', '    uint256 public percentForSale;\n', '\n', '    uint256 public totalNumberOfTokensForSale;\n', '\n', '    uint256 public silencePeriod;\n', '\n', '    uint256 public startAcceptingFundsBlock;\n', '\n', '    uint256 public endBlock;\n', '\n', '    uint256 public etherBalance;\n', '\n', '    uint256 public usdCentsBalance;\n', '\n', '    uint256 public tokensSold;\n', '\n', '    //this creates the contract and stores the owner. it also passes in 3 addresses to be used later during the lifetime of the contract.\n', '    function DeepToken(address _stateControl, address _whitelistControl, address _withdraw, address _initialHolder, address _usdCurrencyFunding) {\n', '        require (_initialHolder != address(0));\n', '        require (_stateControl != address(0));\n', '        require (_whitelistControl != address(0));\n', '        require (_withdraw != address(0));\n', '        require (_usdCurrencyFunding != address(0));\n', '        initialHolder = _initialHolder;\n', '        stateControl = _stateControl;\n', '        whitelistControl = _whitelistControl;\n', '        withdrawControl = _withdraw;\n', '        usdCurrencyFunding = _usdCurrencyFunding;\n', '        moveToState(States.Initial);\n', '        totalSupply = 0;\n', '        tokenPriceInWei = 0;\n', '        percentForSale = 0;\n', '        totalNumberOfTokensForSale = 0;\n', '        silencePeriod = 0;\n', '        startAcceptingFundsBlock = uint256(int256(-1));\n', '        endBlock = 0;\n', '        etherBalance = 0;\n', '        usdCentsBalance = 0;\n', '        tokensSold = 0;\n', '        balances[initialHolder] = totalSupply;\n', '    }\n', '\n', '    event Whitelisted(address addr);\n', '\n', '    event Dewhitelisted(address addr);\n', '\n', '    event Credited(address addr, uint balance, uint txAmount);\n', '\n', '    event USDCentsBalance(uint balance);\n', '\n', '    event TokenByFiatCredited(address addr, uint balance, uint txAmount, uint256 requestId);\n', '\n', '    event StateTransition(States oldState, States newState);\n', '\n', '    modifier onlyWhitelist() {\n', '        require(msg.sender == whitelistControl);\n', '        _;\n', '    }\n', '\n', '    modifier onlyStateControl() {\n', '        require(msg.sender == stateControl);\n', '        _;\n', '    }\n', '\n', '    modifier requireState(States _requiredState) {\n', '        require(state == _requiredState);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    BEGIN ICO functions\n', '    */\n', '\n', '    //this is the main funding function, it updates the balances of DeepTokens during the ICO.\n', '    //no particular incentive schemes have been implemented here\n', '    //it is only accessible during the "ICO" phase.\n', '    function() payable\n', '    requireState(States.Ico)\n', '    {\n', '        require(msg.sender != whitelistControl);\n', '        require(whitelist[msg.sender] == true);\n', '        uint256 deepTokenIncrease = (msg.value * pointMultiplier) / tokenPriceInWei;\n', '        require(getTokensAvailableForSale() >= deepTokenIncrease);\n', '        require(block.number < endBlock);\n', '        require(block.number >= startAcceptingFundsBlock);\n', '        etherBalance = etherBalance.add(msg.value);\n', '        balances[initialHolder] = balances[initialHolder].sub(deepTokenIncrease);\n', '        balances[msg.sender] = balances[msg.sender].add(deepTokenIncrease);\n', '        tokensSold = tokensSold.add(deepTokenIncrease);\n', '        withdrawControl.transfer(msg.value);\n', '        Credited(msg.sender, balances[msg.sender], msg.value);\n', '    }\n', '\n', '    function recordPayment(uint256 usdCentsAmount, uint256 tokenAmount, uint256 requestId)\n', '    onlyWhitelist\n', '    requireState(States.Ico)\n', '    {\n', '        require(getTokensAvailableForSale() >= tokenAmount);\n', '        require(block.number < endBlock);\n', '        require(block.number >= startAcceptingFundsBlock);\n', '\n', '        usdCentsBalance = usdCentsBalance.add(usdCentsAmount);\n', '        balances[initialHolder] = balances[initialHolder].sub(tokenAmount);\n', '        balances[usdCurrencyFunding] = balances[usdCurrencyFunding].add(tokenAmount);\n', '        tokensSold = tokensSold.add(tokenAmount);\n', '\n', '        USDCentsBalance(usdCentsBalance);\n', '        TokenByFiatCredited(usdCurrencyFunding, balances[usdCurrencyFunding], tokenAmount, requestId);\n', '    }\n', '\n', '    function moveToState(States _newState)\n', '    internal\n', '    {\n', '        StateTransition(state, _newState);\n', '        state = _newState;\n', '    }\n', '\n', '    function getTokensAvailableForSale()\n', '    constant\n', '    returns (uint256 tokensAvailableForSale)\n', '    {\n', '        return (totalNumberOfTokensForSale.sub(tokensSold));\n', '    }\n', '\n', '    // ICO contract configuration function\n', '    // _newTotalSupply is the number of tokens available\n', '    // _newTokenPriceInWei is the token price in wei\n', '    // _newPercentForSale is the percentage of _newTotalSupply available for sale\n', '    // _newsilencePeriod is a number of blocks to wait after starting the ICO. No funds are accepted during the silence period. It can be set to zero.\n', '    // _newEndBlock is the absolute block number at which the ICO must stop. It must be set after now + silence period.\n', '    function updateEthICOThresholds(uint256 _newTotalSupply, uint256 _newTokenPriceInWei, uint256 _newPercentForSale, uint256 _newSilencePeriod, uint256 _newEndBlock)\n', '    onlyStateControl\n', '    {\n', '        require(state == States.Initial || state == States.ValuationSet);\n', '        require(_newTotalSupply > 0);\n', '        require(_newTokenPriceInWei > 0);\n', '        require(_newPercentForSale > 0);\n', '        require(_newPercentForSale <= 100);\n', '        require((_newTotalSupply * _newPercentForSale / 100) > 0);\n', '        require(block.number < _newEndBlock);\n', '        require(block.number + _newSilencePeriod < _newEndBlock);\n', '\n', '        totalSupply = _newTotalSupply;\n', '        percentForSale = _newPercentForSale;\n', '        totalNumberOfTokensForSale = totalSupply.mul(percentForSale).div(100);\n', '        tokenPriceInWei = _newTokenPriceInWei;\n', '        silencePeriod = _newSilencePeriod;\n', '        endBlock = _newEndBlock;\n', '\n', '        balances[initialHolder] = totalSupply;\n', '\n', '        moveToState(States.ValuationSet);\n', '    }\n', '\n', '    function startICO()\n', '    onlyStateControl\n', '    requireState(States.ValuationSet)\n', '    {\n', '        require(block.number < endBlock);\n', '        require(block.number + silencePeriod < endBlock);\n', '        startAcceptingFundsBlock = block.number + silencePeriod;\n', '        moveToState(States.Ico);\n', '    }\n', '\n', '    function endICO()\n', '    onlyStateControl\n', '    requireState(States.Ico)\n', '    {\n', '        burnUnsoldCoins();\n', '        moveToState(States.Operational);\n', '    }\n', '\n', '    function anyoneEndICO()\n', '    requireState(States.Ico)\n', '    {\n', '        require(block.number > endBlock);\n', '        burnUnsoldCoins();\n', '        moveToState(States.Operational);\n', '    }\n', '\n', '    function burnUnsoldCoins()\n', '    internal\n', '    {\n', '        //slashing the initial supply, so that the ICO is selling percentForSale% total\n', '        totalSupply = tokensSold.mul(100).div(percentForSale);\n', '        balances[initialHolder] = totalSupply.sub(tokensSold);\n', '    }\n', '\n', '    function addToWhitelist(address _whitelisted)\n', '    onlyWhitelist\n', '    {\n', '        whitelist[_whitelisted] = true;\n', '        Whitelisted(_whitelisted);\n', '    }\n', '\n', '    function removeFromWhitelist(address _whitelisted)\n', '    onlyWhitelist\n', '    {\n', '        whitelist[_whitelisted] = false;\n', '        Dewhitelisted(_whitelisted);\n', '    }\n', '\n', '    //emergency pause for the ICO\n', '    function pause()\n', '    onlyStateControl\n', '    requireState(States.Ico)\n', '    {\n', '        moveToState(States.Paused);\n', '    }\n', '\n', '    //un-pause\n', '    function resumeICO()\n', '    onlyStateControl\n', '    requireState(States.Paused)\n', '    {\n', '        moveToState(States.Ico);\n', '    }\n', '    /**\n', '    END ICO functions\n', '    */\n', '\n', '    /**\n', '    BEGIN ERC20 functions\n', '    */\n', '\n', '    function transfer(address _to, uint256 _value)\n', '    returns (bool success) {\n', '        require((state == States.Ico) || (state == States.Operational));\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    returns (bool success) {\n', '        require((state == States.Ico) || (state == States.Operational));\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function balanceOf(address _account)\n', '    constant\n', '    returns (uint256 balance) {\n', '        return balances[_account];\n', '    }\n', '\n', '    /**\n', '    END ERC20 functions\n', '    */\n', '}']
