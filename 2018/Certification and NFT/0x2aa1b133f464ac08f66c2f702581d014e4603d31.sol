['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Utility contract to allow pausing and unpausing of certain functions\n', ' */\n', 'contract Pausable {\n', '\n', '    event Pause(uint256 _timestammp);\n', '    event Unpause(uint256 _timestamp);\n', '\n', '    bool public paused = false;\n', '\n', '    /**\n', '    * @notice Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @notice Modifier to make a function callable only when the contract is paused.\n', '    */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '   /**\n', '    * @notice called by the owner to pause, triggers stopped state\n', '    */\n', '    function _pause() internal {\n', '        require(!paused);\n', '        paused = true;\n', '        emit Pause(now);\n', '    }\n', '\n', '    /**\n', '    * @notice called by the owner to unpause, returns to normal state\n', '    */\n', '    function _unpause() internal {\n', '        require(paused);\n', '        paused = false;\n', '        emit Unpause(now);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title DetailedERC20 token\n', ' * @dev The decimals are only for visualization purposes.\n', ' * All the operations are done using the smallest and indivisible token unit,\n', ' * just as on Ethereum all the operations are done in wei.\n', ' */\n', 'contract DetailedERC20 is ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  constructor(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Interface for the ST20 token standard\n', ' */\n', 'contract IST20 is StandardToken, DetailedERC20 {\n', '\n', '    // off-chain hash\n', '    string public tokenDetails;\n', '\n', '    //transfer, transferFrom must respect use respect the result of verifyTransfer\n', '    function verifyTransfer(address _from, address _to, uint256 _amount) public returns (bool success);\n', '\n', '    /**\n', '     * @notice mints new tokens and assigns them to the target _investor.\n', '     * Can only be called by the STO attached to the token (Or by the ST owner if there&#39;s no STO attached yet)\n', '     */\n', '    function mint(address _investor, uint256 _amount) public returns (bool success);\n', '\n', '    /**\n', '     * @notice Burn function used to burn the securityToken\n', '     * @param _value No. of token that get burned\n', '     */\n', '    function burn(uint256 _value) public;\n', '\n', '    event Minted(address indexed to, uint256 amount);\n', '    event Burnt(address indexed _burner, uint256 _value);\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Interface for all security tokens\n', ' */\n', 'contract ISecurityToken is IST20, Ownable {\n', '\n', '    uint8 public constant PERMISSIONMANAGER_KEY = 1;\n', '    uint8 public constant TRANSFERMANAGER_KEY = 2;\n', '    uint8 public constant STO_KEY = 3;\n', '    uint8 public constant CHECKPOINT_KEY = 4;\n', '    uint256 public granularity;\n', '\n', '    // Value of current checkpoint\n', '    uint256 public currentCheckpointId;\n', '\n', '    // Total number of non-zero token holders\n', '    uint256 public investorCount;\n', '\n', '    // List of token holders\n', '    address[] public investors;\n', '\n', '    // Permissions this to a Permission module, which has a key of 1\n', '    // If no Permission return false - note that IModule withPerm will allow ST owner all permissions anyway\n', '    // this allows individual modules to override this logic if needed (to not allow ST owner all permissions)\n', '    function checkPermission(address _delegate, address _module, bytes32 _perm) public view returns(bool);\n', '\n', '    /**\n', '     * @notice returns module list for a module type\n', '     * @param _moduleType is which type of module we are trying to remove\n', '     * @param _moduleIndex is the index of the module within the chosen type\n', '     */\n', '    function getModule(uint8 _moduleType, uint _moduleIndex) public view returns (bytes32, address);\n', '\n', '    /**\n', '     * @notice returns module list for a module name - will return first match\n', '     * @param _moduleType is which type of module we are trying to remove\n', '     * @param _name is the name of the module within the chosen type\n', '     */\n', '    function getModuleByName(uint8 _moduleType, bytes32 _name) public view returns (bytes32, address);\n', '\n', '    /**\n', '     * @notice Queries totalSupply as of a defined checkpoint\n', '     * @param _checkpointId Checkpoint ID to query as of\n', '     */\n', '    function totalSupplyAt(uint256 _checkpointId) public view returns(uint256);\n', '\n', '    /**\n', '     * @notice Queries balances as of a defined checkpoint\n', '     * @param _investor Investor to query balance for\n', '     * @param _checkpointId Checkpoint ID to query as of\n', '     */\n', '    function balanceOfAt(address _investor, uint256 _checkpointId) public view returns(uint256);\n', '\n', '    /**\n', '     * @notice Creates a checkpoint that can be used to query historical balances / totalSuppy\n', '     */\n', '    function createCheckpoint() public returns(uint256);\n', '\n', '    /**\n', '     * @notice gets length of investors array\n', '     * NB - this length may differ from investorCount if list has not been pruned of zero balance investors\n', '     * @return length\n', '     */\n', '    function getInvestorsLength() public view returns(uint256);\n', '\n', '}\n', '\n', '/**\n', ' * @title Interface that any module factory contract should implement\n', ' */\n', 'contract IModuleFactory is Ownable {\n', '\n', '    ERC20 public polyToken;\n', '    uint256 public setupCost;\n', '    uint256 public usageCost;\n', '    uint256 public monthlySubscriptionCost;\n', '\n', '    event LogChangeFactorySetupFee(uint256 _oldSetupcost, uint256 _newSetupCost, address _moduleFactory);\n', '    event LogChangeFactoryUsageFee(uint256 _oldUsageCost, uint256 _newUsageCost, address _moduleFactory);\n', '    event LogChangeFactorySubscriptionFee(uint256 _oldSubscriptionCost, uint256 _newMonthlySubscriptionCost, address _moduleFactory);\n', '    event LogGenerateModuleFromFactory(address _module, bytes32 indexed _moduleName, address indexed _moduleFactory, address _creator, uint256 _timestamp);\n', '\n', '    /**\n', '     * @notice Constructor\n', '     * @param _polyAddress Address of the polytoken\n', '     */\n', '    constructor (address _polyAddress, uint256 _setupCost, uint256 _usageCost, uint256 _subscriptionCost) public {\n', '      polyToken = ERC20(_polyAddress);\n', '      setupCost = _setupCost;\n', '      usageCost = _usageCost;\n', '      monthlySubscriptionCost = _subscriptionCost;\n', '    }\n', '\n', '    //Should create an instance of the Module, or throw\n', '    function deploy(bytes _data) external returns(address);\n', '\n', '    /**\n', '     * @notice Type of the Module factory\n', '     */\n', '    function getType() public view returns(uint8);\n', '\n', '    /**\n', '     * @notice Get the name of the Module\n', '     */\n', '    function getName() public view returns(bytes32);\n', '\n', '    /**\n', '     * @notice Get the description of the Module\n', '     */\n', '    function getDescription() public view returns(string);\n', '\n', '    /**\n', '     * @notice Get the title of the Module\n', '     */\n', '    function getTitle() public view returns(string);\n', '\n', '    /**\n', '     * @notice Get the Instructions that helped to used the module\n', '     */\n', '    function getInstructions() public view returns (string);\n', '\n', '    /**\n', '     * @notice Get the tags related to the module factory\n', '     */\n', '    function getTags() public view returns (bytes32[]);\n', '\n', '    //Pull function sig from _data\n', '    function getSig(bytes _data) internal pure returns (bytes4 sig) {\n', '        uint len = _data.length < 4 ? _data.length : 4;\n', '        for (uint i = 0; i < len; i++) {\n', '            sig = bytes4(uint(sig) + uint(_data[i]) * (2 ** (8 * (len - 1 - i))));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice used to change the fee of the setup cost\n', '     * @param _newSetupCost new setup cost\n', '     */\n', '    function changeFactorySetupFee(uint256 _newSetupCost) public onlyOwner {\n', '        emit LogChangeFactorySetupFee(setupCost, _newSetupCost, address(this));\n', '        setupCost = _newSetupCost;\n', '    }\n', '\n', '    /**\n', '     * @notice used to change the fee of the usage cost\n', '     * @param _newUsageCost new usage cost\n', '     */\n', '    function changeFactoryUsageFee(uint256 _newUsageCost) public onlyOwner {\n', '        emit LogChangeFactoryUsageFee(usageCost, _newUsageCost, address(this));\n', '        usageCost = _newUsageCost;\n', '    }\n', '\n', '    /**\n', '     * @notice used to change the fee of the subscription cost\n', '     * @param _newSubscriptionCost new subscription cost\n', '     */\n', '    function changeFactorySubscriptionFee(uint256 _newSubscriptionCost) public onlyOwner {\n', '        emit LogChangeFactorySubscriptionFee(monthlySubscriptionCost, _newSubscriptionCost, address(this));\n', '        monthlySubscriptionCost = _newSubscriptionCost;\n', '        \n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Interface that any module contract should implement\n', ' */\n', 'contract IModule {\n', '\n', '    address public factory;\n', '\n', '    address public securityToken;\n', '\n', '    bytes32 public constant FEE_ADMIN = "FEE_ADMIN";\n', '\n', '    ERC20 public polyToken;\n', '\n', '    /**\n', '     * @notice Constructor\n', '     * @param _securityToken Address of the security token\n', '     * @param _polyAddress Address of the polytoken\n', '     */\n', '    constructor (address _securityToken, address _polyAddress) public {\n', '        securityToken = _securityToken;\n', '        factory = msg.sender;\n', '        polyToken = ERC20(_polyAddress);\n', '    }\n', '\n', '    /**\n', '     * @notice This function returns the signature of configure function\n', '     */\n', '    function getInitFunction() public pure returns (bytes4);\n', '\n', '    //Allows owner, factory or permissioned delegate\n', '    modifier withPerm(bytes32 _perm) {\n', '        bool isOwner = msg.sender == ISecurityToken(securityToken).owner();\n', '        bool isFactory = msg.sender == factory;\n', '        require(isOwner||isFactory||ISecurityToken(securityToken).checkPermission(msg.sender, address(this), _perm), "Permission check failed");\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == ISecurityToken(securityToken).owner(), "Sender is not owner");\n', '        _;\n', '    }\n', '\n', '    modifier onlyFactory {\n', '        require(msg.sender == factory, "Sender is not factory");\n', '        _;\n', '    }\n', '\n', '    modifier onlyFactoryOwner {\n', '        require(msg.sender == IModuleFactory(factory).owner(), "Sender is not factory owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @notice Return the permissions flag that are associated with Module\n', '     */\n', '    function getPermissions() public view returns(bytes32[]);\n', '\n', '    /**\n', '     * @notice used to withdraw the fee by the factory owner\n', '     */\n', '    function takeFee(uint256 _amount) public withPerm(FEE_ADMIN) returns(bool) {\n', '        require(polyToken.transferFrom(address(this), IModuleFactory(factory).owner(), _amount), "Unable to take fee");\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Interface to be implemented by all STO modules\n', ' */\n', 'contract ISTO is IModule, Pausable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    enum FundraiseType { ETH, POLY }\n', '    FundraiseType public fundraiseType;\n', '\n', '    // Start time of the STO\n', '    uint256 public startTime;\n', '    // End time of the STO\n', '    uint256 public endTime;\n', '\n', '    /**\n', '     * @notice use to verify the investment, whether the investor provide the allowance to the STO or not.\n', '     * @param _beneficiary Ethereum address of the beneficiary, who wants to buy the st-20\n', '     * @param _fundsAmount Amount invested by the beneficiary\n', '     */\n', '    function verifyInvestment(address _beneficiary, uint256 _fundsAmount) public view returns(bool) {\n', '        return polyToken.allowance(_beneficiary, address(this)) >= _fundsAmount;\n', '    }\n', '\n', '    /**\n', '     * @notice Return ETH raised by the STO\n', '     */\n', '    function getRaisedEther() public view returns (uint256);\n', '\n', '    /**\n', '     * @notice Return POLY raised by the STO\n', '     */\n', '    function getRaisedPOLY() public view returns (uint256);\n', '\n', '    /**\n', '     * @notice Return the total no. of investors\n', '     */\n', '    function getNumberInvestors() public view returns (uint256);\n', '\n', '    /**\n', '     * @notice pause (overridden function)\n', '     */\n', '    function pause() public onlyOwner {\n', '        require(now < endTime);\n', '        super._pause();\n', '    }\n', '\n', '    /**\n', '     * @notice unpause (overridden function)\n', '     */\n', '    function unpause(uint256 _newEndDate) public onlyOwner {\n', '        require(_newEndDate >= endTime);\n', '        super._unpause();\n', '        endTime = _newEndDate;\n', '    }\n', '\n', '    /**\n', '    * @notice Reclaim ERC20Basic compatible tokens\n', '    * @param _tokenContract The address of the token contract\n', '    */\n', '    function reclaimERC20(address _tokenContract) external onlyOwner {\n', '        require(_tokenContract != address(0));\n', '        ERC20Basic token = ERC20Basic(_tokenContract);\n', '        uint256 balance = token.balanceOf(address(this));\n', '        require(token.transfer(msg.sender, balance));\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Helps contracts guard agains reentrancy attacks.\n', ' * @author Remco Bloemen <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="ddafb8b0beb29def">[email&#160;protected]</a>π.com>\n', ' * @notice If you mark a function `nonReentrant`, you should also\n', ' * mark it `external`.\n', ' */\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private reentrancyLock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!reentrancyLock);\n', '    reentrancyLock = true;\n', '    _;\n', '    reentrancyLock = false;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title STO module for standard capped crowdsale\n', ' */\n', 'contract CappedSTO is ISTO, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '\n', '    // Address where funds are collected and tokens are issued to\n', '    address public wallet;\n', '\n', '    // How many token units a buyer gets per wei / base unit of POLY\n', '    uint256 public rate;\n', '\n', '    // Amount of funds raised\n', '    uint256 public fundsRaised;\n', '\n', '    uint256 public investorCount;\n', '\n', '    // Amount of tokens sold\n', '    uint256 public tokensSold;\n', '\n', '    //How many tokens this STO will be allowed to sell to investors\n', '    uint256 public cap;\n', '\n', '    mapping (address => uint256) public investors;\n', '\n', '    /**\n', '    * Event for token purchase logging\n', '    * @param purchaser who paid for the tokens\n', '    * @param beneficiary who got the tokens\n', '    * @param value weis paid for purchase\n', '    * @param amount amount of tokens purchased\n', '    */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    constructor (address _securityToken, address _polyAddress) public\n', '    IModule(_securityToken, _polyAddress)\n', '    {\n', '    }\n', '\n', '    //////////////////////////////////\n', '    /**\n', '    * @notice fallback function ***DO NOT OVERRIDE***\n', '    */\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @notice Function used to intialize the contract variables\n', '     * @param _startTime Unix timestamp at which offering get started\n', '     * @param _endTime Unix timestamp at which offering get ended\n', '     * @param _cap Maximum No. of tokens for sale\n', '     * @param _rate Token units a buyer gets per wei / base unit of POLY\n', '     * @param _fundRaiseType Type of currency used to collect the funds\n', '     * @param _fundsReceiver Ethereum account address to hold the funds\n', '     */\n', '    function configure(\n', '        uint256 _startTime,\n', '        uint256 _endTime,\n', '        uint256 _cap,\n', '        uint256 _rate,\n', '        uint8 _fundRaiseType,\n', '        address _fundsReceiver\n', '    )\n', '    public\n', '    onlyFactory\n', '    {\n', '        require(_rate > 0, "Rate of token should be greater than 0");\n', '        require(_fundsReceiver != address(0), "Zero address is not permitted");\n', '        require(_startTime >= now && _endTime > _startTime, "Date parameters are not valid");\n', '        require(_cap > 0, "Cap should be greater than 0");\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '        cap = _cap;\n', '        rate = _rate;\n', '        wallet = _fundsReceiver;\n', '        _check(_fundRaiseType);\n', '    }\n', '\n', '    /**\n', '     * @notice This function returns the signature of configure function\n', '     */\n', '    function getInitFunction() public pure returns (bytes4) {\n', '        return bytes4(keccak256("configure(uint256,uint256,uint256,uint256,uint8,address)"));\n', '    }\n', '\n', '    /**\n', '      * @notice low level token purchase ***DO NOT OVERRIDE***\n', '      * @param _beneficiary Address performing the token purchase\n', '      */\n', '    function buyTokens(address _beneficiary) public payable nonReentrant {\n', '        require(!paused);\n', '        require(fundraiseType == FundraiseType.ETH, "ETH should be the mode of investment");\n', '\n', '        uint256 weiAmount = msg.value;\n', '        _processTx(_beneficiary, weiAmount);\n', '\n', '        _forwardFunds();\n', '        _postValidatePurchase(_beneficiary, weiAmount);\n', '    }\n', '\n', '    /**\n', '      * @notice low level token purchase\n', '      * @param _investedPOLY Amount of POLY invested\n', '      */\n', '    function buyTokensWithPoly(uint256 _investedPOLY) public nonReentrant{\n', '        require(!paused);\n', '        require(fundraiseType == FundraiseType.POLY, "POLY should be the mode of investment");\n', '        require(verifyInvestment(msg.sender, _investedPOLY), "Not valid Investment");\n', '        _processTx(msg.sender, _investedPOLY);\n', '        _forwardPoly(msg.sender, wallet, _investedPOLY);\n', '        _postValidatePurchase(msg.sender, _investedPOLY);\n', '    }\n', '\n', '    /**\n', '    * @notice Checks whether the cap has been reached.\n', '    * @return bool Whether the cap was reached\n', '    */\n', '    function capReached() public view returns (bool) {\n', '        return tokensSold >= cap;\n', '    }\n', '\n', '    /**\n', '     * @notice Return ETH raised by the STO\n', '     */\n', '    function getRaisedEther() public view returns (uint256) {\n', '        if (fundraiseType == FundraiseType.ETH)\n', '            return fundsRaised;\n', '        else\n', '            return 0;\n', '    }\n', '\n', '    /**\n', '     * @notice Return POLY raised by the STO\n', '     */\n', '    function getRaisedPOLY() public view returns (uint256) {\n', '        if (fundraiseType == FundraiseType.POLY)\n', '            return fundsRaised;\n', '        else\n', '            return 0;\n', '    }\n', '\n', '    /**\n', '     * @notice Return the total no. of investors\n', '     */\n', '    function getNumberInvestors() public view returns (uint256) {\n', '        return investorCount;\n', '    }\n', '\n', '    /**\n', '     * @notice Return the permissions flag that are associated with STO\n', '     */\n', '    function getPermissions() public view returns(bytes32[]) {\n', '        bytes32[] memory allPermissions = new bytes32[](0);\n', '        return allPermissions;\n', '    }\n', '\n', '    /**\n', '     * @notice Return the STO details\n', '     */\n', '    function getSTODetails() public view returns(uint256, uint256, uint256, uint256, uint256, uint256, uint256, bool) {\n', '        return (\n', '            startTime,\n', '            endTime,\n', '            cap,\n', '            rate,\n', '            fundsRaised,\n', '            investorCount,\n', '            tokensSold,\n', '            (fundraiseType == FundraiseType.POLY)\n', '        );\n', '    }\n', '\n', '    // -----------------------------------------\n', '    // Internal interface (extensible)\n', '    // -----------------------------------------\n', '    /**\n', '      * Processing the purchase as well as verify the required validations\n', '      * @param _beneficiary Address performing the token purchase\n', '      * @param _investedAmount Value in wei involved in the purchase\n', '    */\n', '    function _processTx(address _beneficiary, uint256 _investedAmount) internal {\n', '\n', '        _preValidatePurchase(_beneficiary, _investedAmount);\n', '        // calculate token amount to be created\n', '        uint256 tokens = _getTokenAmount(_investedAmount);\n', '\n', '        // update state\n', '        fundsRaised = fundsRaised.add(_investedAmount);\n', '        tokensSold = tokensSold.add(tokens);\n', '\n', '        _processPurchase(_beneficiary, tokens);\n', '        emit TokenPurchase(msg.sender, _beneficiary, _investedAmount, tokens);\n', '\n', '        _updatePurchasingState(_beneficiary, _investedAmount);\n', '    }\n', '\n', '    /**\n', '    * @notice Validation of an incoming purchase.\n', '      Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '    * @param _beneficiary Address performing the token purchase\n', '    * @param _investedAmount Value in wei involved in the purchase\n', '    */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _investedAmount) internal view {\n', '        require(_beneficiary != address(0), "Beneficiary address should not be 0x");\n', '        require(_investedAmount != 0, "Amount invested should not be equal to 0");\n', '        require(tokensSold.add(_getTokenAmount(_investedAmount)) <= cap, "Investment more than cap is not allowed");\n', '        require(now >= startTime && now <= endTime, "Offering is closed/Not yet started");\n', '    }\n', '\n', '    /**\n', '    * @notice Validation of an executed purchase.\n', '      Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '    */\n', '    function _postValidatePurchase(address /*_beneficiary*/, uint256 /*_investedAmount*/) internal pure {\n', '      // optional override\n', '    }\n', '\n', '    /**\n', '    * @notice Source of tokens.\n', '      Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '    * @param _beneficiary Address performing the token purchase\n', '    * @param _tokenAmount Number of tokens to be emitted\n', '    */\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '        require(IST20(securityToken).mint(_beneficiary, _tokenAmount), "Error in minting the tokens");\n', '    }\n', '\n', '    /**\n', '    * @notice Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '    * @param _beneficiary Address receiving the tokens\n', '    * @param _tokenAmount Number of tokens to be purchased\n', '    */\n', '    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '        if (investors[_beneficiary] == 0) {\n', '            investorCount = investorCount + 1;\n', '        }\n', '        investors[_beneficiary] = investors[_beneficiary].add(_tokenAmount);\n', '\n', '        _deliverTokens(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '    /**\n', '    * @notice Override for extensions that require an internal state to check for validity\n', '      (current user contributions, etc.)\n', '    */\n', '    function _updatePurchasingState(address /*_beneficiary*/, uint256 /*_investedAmount*/) internal pure {\n', '      // optional override\n', '    }\n', '\n', '    /**\n', '    * @notice Override to extend the way in which ether is converted to tokens.\n', '    * @param _investedAmount Value in wei to be converted into tokens\n', '    * @return Number of tokens that can be purchased with the specified _investedAmount\n', '    */\n', '    function _getTokenAmount(uint256 _investedAmount) internal view returns (uint256) {\n', '        return _investedAmount.mul(rate);\n', '    }\n', '\n', '    /**\n', '    * @notice Determines how ETH is stored/forwarded on purchases.\n', '    */\n', '    function _forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '    /**\n', '     * @notice Internal function used to check the type of fund raise currency\n', '     * @param _fundraiseType Type of currency used to collect the funds\n', '     */\n', '    function _check(uint8 _fundraiseType) internal {\n', '        require(_fundraiseType == 0 || _fundraiseType == 1, "Not a valid fundraise type");\n', '        if (_fundraiseType == 0) {\n', '            fundraiseType = FundraiseType.ETH;\n', '        }\n', '        if (_fundraiseType == 1) {\n', '            require(address(polyToken) != address(0), "Address of the polyToken should not be 0x");\n', '            fundraiseType = FundraiseType.POLY;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Internal function used to forward the POLY raised to beneficiary address\n', '     * @param _beneficiary Address of the funds reciever\n', '     * @param _to Address who wants to ST-20 tokens\n', '     * @param _fundsAmount Amount invested by _to\n', '     */\n', '    function _forwardPoly(address _beneficiary, address _to, uint256 _fundsAmount) internal {\n', '        polyToken.transferFrom(_beneficiary, _to, _fundsAmount);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Factory for deploying CappedSTO module\n', ' */\n', 'contract CappedSTOFactory is IModuleFactory {\n', '\n', '    /**\n', '     * @notice Constructor\n', '     * @param _polyAddress Address of the polytoken\n', '     */\n', '    constructor (address _polyAddress, uint256 _setupCost, uint256 _usageCost, uint256 _subscriptionCost) public\n', '      IModuleFactory(_polyAddress, _setupCost, _usageCost, _subscriptionCost)\n', '    {\n', '\n', '    }\n', '\n', '     /**\n', '     * @notice used to launch the Module with the help of factory\n', '     * @return address Contract address of the Module\n', '     */\n', '    function deploy(bytes _data) external returns(address) {\n', '        if(setupCost > 0)\n', '            require(polyToken.transferFrom(msg.sender, owner, setupCost), "Failed transferFrom because of sufficent Allowance is not provided");\n', '        //Check valid bytes - can only call module init function\n', '        CappedSTO cappedSTO = new CappedSTO(msg.sender, address(polyToken));\n', '        //Checks that _data is valid (not calling anything it shouldn&#39;t)\n', '        require(getSig(_data) == cappedSTO.getInitFunction(), "Provided data is not valid");\n', '        require(address(cappedSTO).call(_data), "Un-successfull call");\n', '        emit LogGenerateModuleFromFactory(address(cappedSTO), getName(), address(this), msg.sender, now);\n', '        return address(cappedSTO);\n', '    }\n', '\n', '    /**\n', '     * @notice Type of the Module factory\n', '     */\n', '    function getType() public view returns(uint8) {\n', '        return 3;\n', '    }\n', '\n', '    /**\n', '     * @notice Get the name of the Module\n', '     */\n', '    function getName() public view returns(bytes32) {\n', '        return "CappedSTO";\n', '    }\n', '\n', '    /**\n', '     * @notice Get the description of the Module\n', '     */\n', '    function getDescription() public view returns(string) {\n', '        return "Capped STO";\n', '    }\n', '\n', '    /**\n', '     * @notice Get the title of the Module\n', '     */\n', '    function getTitle() public view returns(string) {\n', '        return "Capped STO";\n', '    }\n', '\n', '    /**\n', '     * @notice Get the Instructions that helped to used the module\n', '     */\n', '    function getInstructions() public view returns(string) {\n', '        return "Initialises a capped STO. Init parameters are _startTime (time STO starts), _endTime (time STO ends), _cap (cap in tokens for STO), _rate (POLY/ETH to token rate), _fundRaiseType (whether you are raising in POLY or ETH), _polyToken (address of POLY token), _fundsReceiver (address which will receive funds)";\n', '    }\n', '\n', '    /**\n', '     * @notice Get the tags related to the module factory\n', '     */\n', '    function getTags() public view returns(bytes32[]) {\n', '        bytes32[] memory availableTags = new bytes32[](4);\n', '        availableTags[0] = "Capped";\n', '        availableTags[1] = "Non-refundable";\n', '        availableTags[2] = "POLY";\n', '        availableTags[3] = "ETH";\n', '        return availableTags;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Utility contract to allow pausing and unpausing of certain functions\n', ' */\n', 'contract Pausable {\n', '\n', '    event Pause(uint256 _timestammp);\n', '    event Unpause(uint256 _timestamp);\n', '\n', '    bool public paused = false;\n', '\n', '    /**\n', '    * @notice Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @notice Modifier to make a function callable only when the contract is paused.\n', '    */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '   /**\n', '    * @notice called by the owner to pause, triggers stopped state\n', '    */\n', '    function _pause() internal {\n', '        require(!paused);\n', '        paused = true;\n', '        emit Pause(now);\n', '    }\n', '\n', '    /**\n', '    * @notice called by the owner to unpause, returns to normal state\n', '    */\n', '    function _unpause() internal {\n', '        require(paused);\n', '        paused = false;\n', '        emit Unpause(now);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title DetailedERC20 token\n', ' * @dev The decimals are only for visualization purposes.\n', ' * All the operations are done using the smallest and indivisible token unit,\n', ' * just as on Ethereum all the operations are done in wei.\n', ' */\n', 'contract DetailedERC20 is ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  constructor(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Interface for the ST20 token standard\n', ' */\n', 'contract IST20 is StandardToken, DetailedERC20 {\n', '\n', '    // off-chain hash\n', '    string public tokenDetails;\n', '\n', '    //transfer, transferFrom must respect use respect the result of verifyTransfer\n', '    function verifyTransfer(address _from, address _to, uint256 _amount) public returns (bool success);\n', '\n', '    /**\n', '     * @notice mints new tokens and assigns them to the target _investor.\n', "     * Can only be called by the STO attached to the token (Or by the ST owner if there's no STO attached yet)\n", '     */\n', '    function mint(address _investor, uint256 _amount) public returns (bool success);\n', '\n', '    /**\n', '     * @notice Burn function used to burn the securityToken\n', '     * @param _value No. of token that get burned\n', '     */\n', '    function burn(uint256 _value) public;\n', '\n', '    event Minted(address indexed to, uint256 amount);\n', '    event Burnt(address indexed _burner, uint256 _value);\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Interface for all security tokens\n', ' */\n', 'contract ISecurityToken is IST20, Ownable {\n', '\n', '    uint8 public constant PERMISSIONMANAGER_KEY = 1;\n', '    uint8 public constant TRANSFERMANAGER_KEY = 2;\n', '    uint8 public constant STO_KEY = 3;\n', '    uint8 public constant CHECKPOINT_KEY = 4;\n', '    uint256 public granularity;\n', '\n', '    // Value of current checkpoint\n', '    uint256 public currentCheckpointId;\n', '\n', '    // Total number of non-zero token holders\n', '    uint256 public investorCount;\n', '\n', '    // List of token holders\n', '    address[] public investors;\n', '\n', '    // Permissions this to a Permission module, which has a key of 1\n', '    // If no Permission return false - note that IModule withPerm will allow ST owner all permissions anyway\n', '    // this allows individual modules to override this logic if needed (to not allow ST owner all permissions)\n', '    function checkPermission(address _delegate, address _module, bytes32 _perm) public view returns(bool);\n', '\n', '    /**\n', '     * @notice returns module list for a module type\n', '     * @param _moduleType is which type of module we are trying to remove\n', '     * @param _moduleIndex is the index of the module within the chosen type\n', '     */\n', '    function getModule(uint8 _moduleType, uint _moduleIndex) public view returns (bytes32, address);\n', '\n', '    /**\n', '     * @notice returns module list for a module name - will return first match\n', '     * @param _moduleType is which type of module we are trying to remove\n', '     * @param _name is the name of the module within the chosen type\n', '     */\n', '    function getModuleByName(uint8 _moduleType, bytes32 _name) public view returns (bytes32, address);\n', '\n', '    /**\n', '     * @notice Queries totalSupply as of a defined checkpoint\n', '     * @param _checkpointId Checkpoint ID to query as of\n', '     */\n', '    function totalSupplyAt(uint256 _checkpointId) public view returns(uint256);\n', '\n', '    /**\n', '     * @notice Queries balances as of a defined checkpoint\n', '     * @param _investor Investor to query balance for\n', '     * @param _checkpointId Checkpoint ID to query as of\n', '     */\n', '    function balanceOfAt(address _investor, uint256 _checkpointId) public view returns(uint256);\n', '\n', '    /**\n', '     * @notice Creates a checkpoint that can be used to query historical balances / totalSuppy\n', '     */\n', '    function createCheckpoint() public returns(uint256);\n', '\n', '    /**\n', '     * @notice gets length of investors array\n', '     * NB - this length may differ from investorCount if list has not been pruned of zero balance investors\n', '     * @return length\n', '     */\n', '    function getInvestorsLength() public view returns(uint256);\n', '\n', '}\n', '\n', '/**\n', ' * @title Interface that any module factory contract should implement\n', ' */\n', 'contract IModuleFactory is Ownable {\n', '\n', '    ERC20 public polyToken;\n', '    uint256 public setupCost;\n', '    uint256 public usageCost;\n', '    uint256 public monthlySubscriptionCost;\n', '\n', '    event LogChangeFactorySetupFee(uint256 _oldSetupcost, uint256 _newSetupCost, address _moduleFactory);\n', '    event LogChangeFactoryUsageFee(uint256 _oldUsageCost, uint256 _newUsageCost, address _moduleFactory);\n', '    event LogChangeFactorySubscriptionFee(uint256 _oldSubscriptionCost, uint256 _newMonthlySubscriptionCost, address _moduleFactory);\n', '    event LogGenerateModuleFromFactory(address _module, bytes32 indexed _moduleName, address indexed _moduleFactory, address _creator, uint256 _timestamp);\n', '\n', '    /**\n', '     * @notice Constructor\n', '     * @param _polyAddress Address of the polytoken\n', '     */\n', '    constructor (address _polyAddress, uint256 _setupCost, uint256 _usageCost, uint256 _subscriptionCost) public {\n', '      polyToken = ERC20(_polyAddress);\n', '      setupCost = _setupCost;\n', '      usageCost = _usageCost;\n', '      monthlySubscriptionCost = _subscriptionCost;\n', '    }\n', '\n', '    //Should create an instance of the Module, or throw\n', '    function deploy(bytes _data) external returns(address);\n', '\n', '    /**\n', '     * @notice Type of the Module factory\n', '     */\n', '    function getType() public view returns(uint8);\n', '\n', '    /**\n', '     * @notice Get the name of the Module\n', '     */\n', '    function getName() public view returns(bytes32);\n', '\n', '    /**\n', '     * @notice Get the description of the Module\n', '     */\n', '    function getDescription() public view returns(string);\n', '\n', '    /**\n', '     * @notice Get the title of the Module\n', '     */\n', '    function getTitle() public view returns(string);\n', '\n', '    /**\n', '     * @notice Get the Instructions that helped to used the module\n', '     */\n', '    function getInstructions() public view returns (string);\n', '\n', '    /**\n', '     * @notice Get the tags related to the module factory\n', '     */\n', '    function getTags() public view returns (bytes32[]);\n', '\n', '    //Pull function sig from _data\n', '    function getSig(bytes _data) internal pure returns (bytes4 sig) {\n', '        uint len = _data.length < 4 ? _data.length : 4;\n', '        for (uint i = 0; i < len; i++) {\n', '            sig = bytes4(uint(sig) + uint(_data[i]) * (2 ** (8 * (len - 1 - i))));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice used to change the fee of the setup cost\n', '     * @param _newSetupCost new setup cost\n', '     */\n', '    function changeFactorySetupFee(uint256 _newSetupCost) public onlyOwner {\n', '        emit LogChangeFactorySetupFee(setupCost, _newSetupCost, address(this));\n', '        setupCost = _newSetupCost;\n', '    }\n', '\n', '    /**\n', '     * @notice used to change the fee of the usage cost\n', '     * @param _newUsageCost new usage cost\n', '     */\n', '    function changeFactoryUsageFee(uint256 _newUsageCost) public onlyOwner {\n', '        emit LogChangeFactoryUsageFee(usageCost, _newUsageCost, address(this));\n', '        usageCost = _newUsageCost;\n', '    }\n', '\n', '    /**\n', '     * @notice used to change the fee of the subscription cost\n', '     * @param _newSubscriptionCost new subscription cost\n', '     */\n', '    function changeFactorySubscriptionFee(uint256 _newSubscriptionCost) public onlyOwner {\n', '        emit LogChangeFactorySubscriptionFee(monthlySubscriptionCost, _newSubscriptionCost, address(this));\n', '        monthlySubscriptionCost = _newSubscriptionCost;\n', '        \n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Interface that any module contract should implement\n', ' */\n', 'contract IModule {\n', '\n', '    address public factory;\n', '\n', '    address public securityToken;\n', '\n', '    bytes32 public constant FEE_ADMIN = "FEE_ADMIN";\n', '\n', '    ERC20 public polyToken;\n', '\n', '    /**\n', '     * @notice Constructor\n', '     * @param _securityToken Address of the security token\n', '     * @param _polyAddress Address of the polytoken\n', '     */\n', '    constructor (address _securityToken, address _polyAddress) public {\n', '        securityToken = _securityToken;\n', '        factory = msg.sender;\n', '        polyToken = ERC20(_polyAddress);\n', '    }\n', '\n', '    /**\n', '     * @notice This function returns the signature of configure function\n', '     */\n', '    function getInitFunction() public pure returns (bytes4);\n', '\n', '    //Allows owner, factory or permissioned delegate\n', '    modifier withPerm(bytes32 _perm) {\n', '        bool isOwner = msg.sender == ISecurityToken(securityToken).owner();\n', '        bool isFactory = msg.sender == factory;\n', '        require(isOwner||isFactory||ISecurityToken(securityToken).checkPermission(msg.sender, address(this), _perm), "Permission check failed");\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == ISecurityToken(securityToken).owner(), "Sender is not owner");\n', '        _;\n', '    }\n', '\n', '    modifier onlyFactory {\n', '        require(msg.sender == factory, "Sender is not factory");\n', '        _;\n', '    }\n', '\n', '    modifier onlyFactoryOwner {\n', '        require(msg.sender == IModuleFactory(factory).owner(), "Sender is not factory owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @notice Return the permissions flag that are associated with Module\n', '     */\n', '    function getPermissions() public view returns(bytes32[]);\n', '\n', '    /**\n', '     * @notice used to withdraw the fee by the factory owner\n', '     */\n', '    function takeFee(uint256 _amount) public withPerm(FEE_ADMIN) returns(bool) {\n', '        require(polyToken.transferFrom(address(this), IModuleFactory(factory).owner(), _amount), "Unable to take fee");\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Interface to be implemented by all STO modules\n', ' */\n', 'contract ISTO is IModule, Pausable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    enum FundraiseType { ETH, POLY }\n', '    FundraiseType public fundraiseType;\n', '\n', '    // Start time of the STO\n', '    uint256 public startTime;\n', '    // End time of the STO\n', '    uint256 public endTime;\n', '\n', '    /**\n', '     * @notice use to verify the investment, whether the investor provide the allowance to the STO or not.\n', '     * @param _beneficiary Ethereum address of the beneficiary, who wants to buy the st-20\n', '     * @param _fundsAmount Amount invested by the beneficiary\n', '     */\n', '    function verifyInvestment(address _beneficiary, uint256 _fundsAmount) public view returns(bool) {\n', '        return polyToken.allowance(_beneficiary, address(this)) >= _fundsAmount;\n', '    }\n', '\n', '    /**\n', '     * @notice Return ETH raised by the STO\n', '     */\n', '    function getRaisedEther() public view returns (uint256);\n', '\n', '    /**\n', '     * @notice Return POLY raised by the STO\n', '     */\n', '    function getRaisedPOLY() public view returns (uint256);\n', '\n', '    /**\n', '     * @notice Return the total no. of investors\n', '     */\n', '    function getNumberInvestors() public view returns (uint256);\n', '\n', '    /**\n', '     * @notice pause (overridden function)\n', '     */\n', '    function pause() public onlyOwner {\n', '        require(now < endTime);\n', '        super._pause();\n', '    }\n', '\n', '    /**\n', '     * @notice unpause (overridden function)\n', '     */\n', '    function unpause(uint256 _newEndDate) public onlyOwner {\n', '        require(_newEndDate >= endTime);\n', '        super._unpause();\n', '        endTime = _newEndDate;\n', '    }\n', '\n', '    /**\n', '    * @notice Reclaim ERC20Basic compatible tokens\n', '    * @param _tokenContract The address of the token contract\n', '    */\n', '    function reclaimERC20(address _tokenContract) external onlyOwner {\n', '        require(_tokenContract != address(0));\n', '        ERC20Basic token = ERC20Basic(_tokenContract);\n', '        uint256 balance = token.balanceOf(address(this));\n', '        require(token.transfer(msg.sender, balance));\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Helps contracts guard agains reentrancy attacks.\n', ' * @author Remco Bloemen <remco@2π.com>\n', ' * @notice If you mark a function `nonReentrant`, you should also\n', ' * mark it `external`.\n', ' */\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private reentrancyLock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!reentrancyLock);\n', '    reentrancyLock = true;\n', '    _;\n', '    reentrancyLock = false;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title STO module for standard capped crowdsale\n', ' */\n', 'contract CappedSTO is ISTO, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '\n', '    // Address where funds are collected and tokens are issued to\n', '    address public wallet;\n', '\n', '    // How many token units a buyer gets per wei / base unit of POLY\n', '    uint256 public rate;\n', '\n', '    // Amount of funds raised\n', '    uint256 public fundsRaised;\n', '\n', '    uint256 public investorCount;\n', '\n', '    // Amount of tokens sold\n', '    uint256 public tokensSold;\n', '\n', '    //How many tokens this STO will be allowed to sell to investors\n', '    uint256 public cap;\n', '\n', '    mapping (address => uint256) public investors;\n', '\n', '    /**\n', '    * Event for token purchase logging\n', '    * @param purchaser who paid for the tokens\n', '    * @param beneficiary who got the tokens\n', '    * @param value weis paid for purchase\n', '    * @param amount amount of tokens purchased\n', '    */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    constructor (address _securityToken, address _polyAddress) public\n', '    IModule(_securityToken, _polyAddress)\n', '    {\n', '    }\n', '\n', '    //////////////////////////////////\n', '    /**\n', '    * @notice fallback function ***DO NOT OVERRIDE***\n', '    */\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @notice Function used to intialize the contract variables\n', '     * @param _startTime Unix timestamp at which offering get started\n', '     * @param _endTime Unix timestamp at which offering get ended\n', '     * @param _cap Maximum No. of tokens for sale\n', '     * @param _rate Token units a buyer gets per wei / base unit of POLY\n', '     * @param _fundRaiseType Type of currency used to collect the funds\n', '     * @param _fundsReceiver Ethereum account address to hold the funds\n', '     */\n', '    function configure(\n', '        uint256 _startTime,\n', '        uint256 _endTime,\n', '        uint256 _cap,\n', '        uint256 _rate,\n', '        uint8 _fundRaiseType,\n', '        address _fundsReceiver\n', '    )\n', '    public\n', '    onlyFactory\n', '    {\n', '        require(_rate > 0, "Rate of token should be greater than 0");\n', '        require(_fundsReceiver != address(0), "Zero address is not permitted");\n', '        require(_startTime >= now && _endTime > _startTime, "Date parameters are not valid");\n', '        require(_cap > 0, "Cap should be greater than 0");\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '        cap = _cap;\n', '        rate = _rate;\n', '        wallet = _fundsReceiver;\n', '        _check(_fundRaiseType);\n', '    }\n', '\n', '    /**\n', '     * @notice This function returns the signature of configure function\n', '     */\n', '    function getInitFunction() public pure returns (bytes4) {\n', '        return bytes4(keccak256("configure(uint256,uint256,uint256,uint256,uint8,address)"));\n', '    }\n', '\n', '    /**\n', '      * @notice low level token purchase ***DO NOT OVERRIDE***\n', '      * @param _beneficiary Address performing the token purchase\n', '      */\n', '    function buyTokens(address _beneficiary) public payable nonReentrant {\n', '        require(!paused);\n', '        require(fundraiseType == FundraiseType.ETH, "ETH should be the mode of investment");\n', '\n', '        uint256 weiAmount = msg.value;\n', '        _processTx(_beneficiary, weiAmount);\n', '\n', '        _forwardFunds();\n', '        _postValidatePurchase(_beneficiary, weiAmount);\n', '    }\n', '\n', '    /**\n', '      * @notice low level token purchase\n', '      * @param _investedPOLY Amount of POLY invested\n', '      */\n', '    function buyTokensWithPoly(uint256 _investedPOLY) public nonReentrant{\n', '        require(!paused);\n', '        require(fundraiseType == FundraiseType.POLY, "POLY should be the mode of investment");\n', '        require(verifyInvestment(msg.sender, _investedPOLY), "Not valid Investment");\n', '        _processTx(msg.sender, _investedPOLY);\n', '        _forwardPoly(msg.sender, wallet, _investedPOLY);\n', '        _postValidatePurchase(msg.sender, _investedPOLY);\n', '    }\n', '\n', '    /**\n', '    * @notice Checks whether the cap has been reached.\n', '    * @return bool Whether the cap was reached\n', '    */\n', '    function capReached() public view returns (bool) {\n', '        return tokensSold >= cap;\n', '    }\n', '\n', '    /**\n', '     * @notice Return ETH raised by the STO\n', '     */\n', '    function getRaisedEther() public view returns (uint256) {\n', '        if (fundraiseType == FundraiseType.ETH)\n', '            return fundsRaised;\n', '        else\n', '            return 0;\n', '    }\n', '\n', '    /**\n', '     * @notice Return POLY raised by the STO\n', '     */\n', '    function getRaisedPOLY() public view returns (uint256) {\n', '        if (fundraiseType == FundraiseType.POLY)\n', '            return fundsRaised;\n', '        else\n', '            return 0;\n', '    }\n', '\n', '    /**\n', '     * @notice Return the total no. of investors\n', '     */\n', '    function getNumberInvestors() public view returns (uint256) {\n', '        return investorCount;\n', '    }\n', '\n', '    /**\n', '     * @notice Return the permissions flag that are associated with STO\n', '     */\n', '    function getPermissions() public view returns(bytes32[]) {\n', '        bytes32[] memory allPermissions = new bytes32[](0);\n', '        return allPermissions;\n', '    }\n', '\n', '    /**\n', '     * @notice Return the STO details\n', '     */\n', '    function getSTODetails() public view returns(uint256, uint256, uint256, uint256, uint256, uint256, uint256, bool) {\n', '        return (\n', '            startTime,\n', '            endTime,\n', '            cap,\n', '            rate,\n', '            fundsRaised,\n', '            investorCount,\n', '            tokensSold,\n', '            (fundraiseType == FundraiseType.POLY)\n', '        );\n', '    }\n', '\n', '    // -----------------------------------------\n', '    // Internal interface (extensible)\n', '    // -----------------------------------------\n', '    /**\n', '      * Processing the purchase as well as verify the required validations\n', '      * @param _beneficiary Address performing the token purchase\n', '      * @param _investedAmount Value in wei involved in the purchase\n', '    */\n', '    function _processTx(address _beneficiary, uint256 _investedAmount) internal {\n', '\n', '        _preValidatePurchase(_beneficiary, _investedAmount);\n', '        // calculate token amount to be created\n', '        uint256 tokens = _getTokenAmount(_investedAmount);\n', '\n', '        // update state\n', '        fundsRaised = fundsRaised.add(_investedAmount);\n', '        tokensSold = tokensSold.add(tokens);\n', '\n', '        _processPurchase(_beneficiary, tokens);\n', '        emit TokenPurchase(msg.sender, _beneficiary, _investedAmount, tokens);\n', '\n', '        _updatePurchasingState(_beneficiary, _investedAmount);\n', '    }\n', '\n', '    /**\n', '    * @notice Validation of an incoming purchase.\n', '      Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '    * @param _beneficiary Address performing the token purchase\n', '    * @param _investedAmount Value in wei involved in the purchase\n', '    */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _investedAmount) internal view {\n', '        require(_beneficiary != address(0), "Beneficiary address should not be 0x");\n', '        require(_investedAmount != 0, "Amount invested should not be equal to 0");\n', '        require(tokensSold.add(_getTokenAmount(_investedAmount)) <= cap, "Investment more than cap is not allowed");\n', '        require(now >= startTime && now <= endTime, "Offering is closed/Not yet started");\n', '    }\n', '\n', '    /**\n', '    * @notice Validation of an executed purchase.\n', '      Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '    */\n', '    function _postValidatePurchase(address /*_beneficiary*/, uint256 /*_investedAmount*/) internal pure {\n', '      // optional override\n', '    }\n', '\n', '    /**\n', '    * @notice Source of tokens.\n', '      Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '    * @param _beneficiary Address performing the token purchase\n', '    * @param _tokenAmount Number of tokens to be emitted\n', '    */\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '        require(IST20(securityToken).mint(_beneficiary, _tokenAmount), "Error in minting the tokens");\n', '    }\n', '\n', '    /**\n', '    * @notice Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '    * @param _beneficiary Address receiving the tokens\n', '    * @param _tokenAmount Number of tokens to be purchased\n', '    */\n', '    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '        if (investors[_beneficiary] == 0) {\n', '            investorCount = investorCount + 1;\n', '        }\n', '        investors[_beneficiary] = investors[_beneficiary].add(_tokenAmount);\n', '\n', '        _deliverTokens(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '    /**\n', '    * @notice Override for extensions that require an internal state to check for validity\n', '      (current user contributions, etc.)\n', '    */\n', '    function _updatePurchasingState(address /*_beneficiary*/, uint256 /*_investedAmount*/) internal pure {\n', '      // optional override\n', '    }\n', '\n', '    /**\n', '    * @notice Override to extend the way in which ether is converted to tokens.\n', '    * @param _investedAmount Value in wei to be converted into tokens\n', '    * @return Number of tokens that can be purchased with the specified _investedAmount\n', '    */\n', '    function _getTokenAmount(uint256 _investedAmount) internal view returns (uint256) {\n', '        return _investedAmount.mul(rate);\n', '    }\n', '\n', '    /**\n', '    * @notice Determines how ETH is stored/forwarded on purchases.\n', '    */\n', '    function _forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '    /**\n', '     * @notice Internal function used to check the type of fund raise currency\n', '     * @param _fundraiseType Type of currency used to collect the funds\n', '     */\n', '    function _check(uint8 _fundraiseType) internal {\n', '        require(_fundraiseType == 0 || _fundraiseType == 1, "Not a valid fundraise type");\n', '        if (_fundraiseType == 0) {\n', '            fundraiseType = FundraiseType.ETH;\n', '        }\n', '        if (_fundraiseType == 1) {\n', '            require(address(polyToken) != address(0), "Address of the polyToken should not be 0x");\n', '            fundraiseType = FundraiseType.POLY;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Internal function used to forward the POLY raised to beneficiary address\n', '     * @param _beneficiary Address of the funds reciever\n', '     * @param _to Address who wants to ST-20 tokens\n', '     * @param _fundsAmount Amount invested by _to\n', '     */\n', '    function _forwardPoly(address _beneficiary, address _to, uint256 _fundsAmount) internal {\n', '        polyToken.transferFrom(_beneficiary, _to, _fundsAmount);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Factory for deploying CappedSTO module\n', ' */\n', 'contract CappedSTOFactory is IModuleFactory {\n', '\n', '    /**\n', '     * @notice Constructor\n', '     * @param _polyAddress Address of the polytoken\n', '     */\n', '    constructor (address _polyAddress, uint256 _setupCost, uint256 _usageCost, uint256 _subscriptionCost) public\n', '      IModuleFactory(_polyAddress, _setupCost, _usageCost, _subscriptionCost)\n', '    {\n', '\n', '    }\n', '\n', '     /**\n', '     * @notice used to launch the Module with the help of factory\n', '     * @return address Contract address of the Module\n', '     */\n', '    function deploy(bytes _data) external returns(address) {\n', '        if(setupCost > 0)\n', '            require(polyToken.transferFrom(msg.sender, owner, setupCost), "Failed transferFrom because of sufficent Allowance is not provided");\n', '        //Check valid bytes - can only call module init function\n', '        CappedSTO cappedSTO = new CappedSTO(msg.sender, address(polyToken));\n', "        //Checks that _data is valid (not calling anything it shouldn't)\n", '        require(getSig(_data) == cappedSTO.getInitFunction(), "Provided data is not valid");\n', '        require(address(cappedSTO).call(_data), "Un-successfull call");\n', '        emit LogGenerateModuleFromFactory(address(cappedSTO), getName(), address(this), msg.sender, now);\n', '        return address(cappedSTO);\n', '    }\n', '\n', '    /**\n', '     * @notice Type of the Module factory\n', '     */\n', '    function getType() public view returns(uint8) {\n', '        return 3;\n', '    }\n', '\n', '    /**\n', '     * @notice Get the name of the Module\n', '     */\n', '    function getName() public view returns(bytes32) {\n', '        return "CappedSTO";\n', '    }\n', '\n', '    /**\n', '     * @notice Get the description of the Module\n', '     */\n', '    function getDescription() public view returns(string) {\n', '        return "Capped STO";\n', '    }\n', '\n', '    /**\n', '     * @notice Get the title of the Module\n', '     */\n', '    function getTitle() public view returns(string) {\n', '        return "Capped STO";\n', '    }\n', '\n', '    /**\n', '     * @notice Get the Instructions that helped to used the module\n', '     */\n', '    function getInstructions() public view returns(string) {\n', '        return "Initialises a capped STO. Init parameters are _startTime (time STO starts), _endTime (time STO ends), _cap (cap in tokens for STO), _rate (POLY/ETH to token rate), _fundRaiseType (whether you are raising in POLY or ETH), _polyToken (address of POLY token), _fundsReceiver (address which will receive funds)";\n', '    }\n', '\n', '    /**\n', '     * @notice Get the tags related to the module factory\n', '     */\n', '    function getTags() public view returns(bytes32[]) {\n', '        bytes32[] memory availableTags = new bytes32[](4);\n', '        availableTags[0] = "Capped";\n', '        availableTags[1] = "Non-refundable";\n', '        availableTags[2] = "POLY";\n', '        availableTags[3] = "ETH";\n', '        return availableTags;\n', '    }\n', '\n', '}']
