['pragma solidity 0.4.24;\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/ParkadeCoin.sol\n', '\n', '/**\n', '    @title A dividend-paying ERC20 token,\n', '    @dev Based on https://programtheblockchain.com/posts/2018/02/07/writing-a-simple-dividend-token-contract/\n', '          and https://programtheblockchain.com/posts/2018/02/13/writing-a-robust-dividend-token-contract/\n', '*/\n', 'contract ParkadeCoin is StandardToken, Ownable {\n', '  using SafeMath for uint256;\n', '  string public name = "Parkade Coin";\n', '  string public symbol = "PRKC";\n', '  uint8 public decimals = 18;\n', '\n', '\n', '  /**\n', '    There are a total of 400,000,000 tokens * 10^18 = 4 * 10^26 token units total\n', '    A scaling value of 1e10 means that a deposit of 0.04Eth will increase scaledDividendPerToken by 1.\n', '    A scaling value of 1e10 means that investors must wait until their scaledDividendBalances \n', '      is at least 1e10 before any withdrawals will credit their account.\n', '  */\n', '  uint256 public scaling = uint256(10) ** 10;\n', '\n', '  // Remainder value (in Wei) resulting from deposits\n', '  uint256 public scaledRemainder = 0;\n', '\n', '  // Amount of wei credited to an account, but not yet withdrawn\n', '  mapping(address => uint256) public scaledDividendBalances;\n', '  // Cumulative amount of Wei credited to an account, since the contract&#39;s deployment\n', '  mapping(address => uint256) public scaledDividendCreditedTo;\n', '  // Cumulative amount of Wei that each token has been entitled to. Independent of withdrawals\n', '  uint256 public scaledDividendPerToken = 0;\n', '\n', '  /**\n', '   * @dev Throws if transaction size is greater than the provided amount\n', '   * This is used to mitigate the Ethereum short address attack as described in https://tinyurl.com/y8jjvh8d\n', '   */\n', '  modifier onlyPayloadSize(uint size) { \n', '    assert(msg.data.length >= size + 4);\n', '    _;    \n', '  }\n', '\n', '  constructor() public {\n', '    // Total INITAL SUPPLY of 400 million tokens \n', '    totalSupply_ = uint256(400000000) * (uint256(10) ** decimals);\n', '    // Initially assign all tokens to the contract&#39;s creator.\n', '    balances[msg.sender] = totalSupply_;\n', '    emit Transfer(address(0), msg.sender, totalSupply_);\n', '  }\n', '\n', '  /**\n', '  * @dev Update the dividend balances associated with an account\n', '  * @param account The account address to update\n', '  */\n', '  function update(address account) \n', '  internal \n', '  {\n', '    // Calculate the amount "owed" to the account, in units of (wei / token) S\n', '    // Subtract Wei already credited to the account (per token) from the total Wei per token\n', '    uint256 owed = scaledDividendPerToken.sub(scaledDividendCreditedTo[account]);\n', '\n', '    // Update the dividends owed to the account (in Wei)\n', '    // # Tokens * (# Wei / token) = # Wei\n', '    scaledDividendBalances[account] = scaledDividendBalances[account].add(balances[account].mul(owed));\n', '    // Update the total (wei / token) amount credited to the account\n', '    scaledDividendCreditedTo[account] = scaledDividendPerToken;\n', '  }\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Deposit(uint256 value);\n', '  event Withdraw(uint256 paidOut, address indexed to);\n', '\n', '  mapping(address => mapping(address => uint256)) public allowance;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) \n', '  public \n', '  onlyPayloadSize(2*32) \n', '  returns (bool success) \n', '  {\n', '    require(balances[msg.sender] >= _value);\n', '\n', '    // Added to transfer - update the dividend balances for both sender and receiver before transfer of tokens\n', '    update(msg.sender);\n', '    update(_to);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '  public\n', '  onlyPayloadSize(3*32)\n', '  returns (bool success)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    // Added to transferFrom - update the dividend balances for both sender and receiver before transfer of tokens\n', '    update(_from);\n', '    update(_to);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev deposit Ether into the contract for dividend splitting\n', '  */\n', '  function deposit() \n', '  public \n', '  payable \n', '  onlyOwner \n', '  {\n', '    // Scale the deposit and add the previous remainder\n', '    uint256 available = (msg.value.mul(scaling)).add(scaledRemainder);\n', '\n', '    // Compute amount of Wei per token\n', '    scaledDividendPerToken = scaledDividendPerToken.add(available.div(totalSupply_));\n', '\n', '    // Compute the new remainder\n', '    scaledRemainder = available % totalSupply_;\n', '\n', '    emit Deposit(msg.value);\n', '  }\n', '\n', '  /**\n', '  * @dev withdraw dividends owed to an address\n', '  */\n', '  function withdraw() \n', '  public \n', '  {\n', '    // Update the dividend amount associated with the account\n', '    update(msg.sender);\n', '\n', '    // Compute amount owed to the investor\n', '    uint256 amount = scaledDividendBalances[msg.sender].div(scaling);\n', '    // Put back any remainder\n', '    scaledDividendBalances[msg.sender] %= scaling;\n', '\n', '    // Send investor the Wei dividends\n', '    msg.sender.transfer(amount);\n', '\n', '    emit Withdraw(amount, msg.sender);\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/Crowdsale.sol\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', ' * the methods to add functionality. Consider using &#39;super&#39; where appropiate to concatenate\n', ' * behavior.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  ERC20 public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  function Crowdsale(uint256 _rate, address _wallet, ERC20 _token) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(\n', '      msg.sender,\n', '      _beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    token.transfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol\n', '\n', '/**\n', ' * @title TimedCrowdsale\n', ' * @dev Crowdsale accepting contributions only within a time frame.\n', ' */\n', 'contract TimedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public openingTime;\n', '  uint256 public closingTime;\n', '\n', '  /**\n', '   * @dev Reverts if not in crowdsale time range.\n', '   */\n', '  modifier onlyWhileOpen {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor, takes crowdsale opening and closing times.\n', '   * @param _openingTime Crowdsale opening time\n', '   * @param _closingTime Crowdsale closing time\n', '   */\n', '  function TimedCrowdsale(uint256 _openingTime, uint256 _closingTime) public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_openingTime >= block.timestamp);\n', '    require(_closingTime >= _openingTime);\n', '\n', '    openingTime = _openingTime;\n', '    closingTime = _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    // solium-disable-next-line security/no-block-members\n', '    return block.timestamp > closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhileOpen {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is TimedCrowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', '   * work. Calls the contract&#39;s finalization function.\n', '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasClosed());\n', '\n', '    finalization();\n', '    emit Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/distribution/utils/RefundVault.sol\n', '\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  /**\n', '   * @param _wallet Vault address\n', '   */\n', '  function RefundVault(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  /**\n', '   * @param investor Investor address\n', '   */\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    emit Closed();\n', '    wallet.transfer(address(this).balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    emit RefundsEnabled();\n', '  }\n', '\n', '  /**\n', '   * @param investor Investor address\n', '   */\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    emit Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/distribution/RefundableCrowdsale.sol\n', '\n', '/**\n', ' * @title RefundableCrowdsale\n', ' * @dev Extension of Crowdsale contract that adds a funding goal, and\n', ' * the possibility of users getting a refund if goal is not met.\n', ' * Uses a RefundVault as the crowdsale&#39;s vault.\n', ' */\n', 'contract RefundableCrowdsale is FinalizableCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // minimum amount of funds to be raised in weis\n', '  uint256 public goal;\n', '\n', '  // refund vault used to hold funds while crowdsale is running\n', '  RefundVault public vault;\n', '\n', '  /**\n', '   * @dev Constructor, creates RefundVault.\n', '   * @param _goal Funding goal\n', '   */\n', '  function RefundableCrowdsale(uint256 _goal) public {\n', '    require(_goal > 0);\n', '    vault = new RefundVault(wallet);\n', '    goal = _goal;\n', '  }\n', '\n', '  /**\n', '   * @dev Investors can claim refunds here if crowdsale is unsuccessful\n', '   */\n', '  function claimRefund() public {\n', '    require(isFinalized);\n', '    require(!goalReached());\n', '\n', '    vault.refund(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether funding goal was reached.\n', '   * @return Whether funding goal was reached\n', '   */\n', '  function goalReached() public view returns (bool) {\n', '    return weiRaised >= goal;\n', '  }\n', '\n', '  /**\n', '   * @dev vault finalization task, called when owner calls finalize()\n', '   */\n', '  function finalization() internal {\n', '    if (goalReached()) {\n', '      vault.close();\n', '    } else {\n', '      vault.enableRefunds();\n', '    }\n', '\n', '    super.finalization();\n', '  }\n', '\n', '  /**\n', '   * @dev Overrides Crowdsale fund forwarding, sending funds to vault.\n', '   */\n', '  function _forwardFunds() internal {\n', '    vault.deposit.value(msg.value)(msg.sender);\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/validation/WhitelistedCrowdsale.sol\n', '\n', '/**\n', ' * @title WhitelistedCrowdsale\n', ' * @dev Crowdsale in which only whitelisted users can contribute.\n', ' */\n', 'contract WhitelistedCrowdsale is Crowdsale, Ownable {\n', '\n', '  mapping(address => bool) public whitelist;\n', '\n', '  /**\n', '   * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\n', '   */\n', '  modifier isWhitelisted(address _beneficiary) {\n', '    require(whitelist[_beneficiary]);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds single address to whitelist.\n', '   * @param _beneficiary Address to be added to the whitelist\n', '   */\n', '  function addToWhitelist(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\n', '   * @param _beneficiaries Addresses to be added to the whitelist\n', '   */\n', '  function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\n', '    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '      whitelist[_beneficiaries[i]] = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Removes single address from whitelist.\n', '   * @param _beneficiary Address to be removed to the whitelist\n', '   */\n', '  function removeFromWhitelist(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring beneficiary to be in whitelist.\n', '   * @param _beneficiary Token beneficiary\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal isWhitelisted(_beneficiary) {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/ParkadeCoinCrowdsale.sol\n', '\n', 'contract ParkadeCoinCrowdsale is TimedCrowdsale, RefundableCrowdsale, WhitelistedCrowdsale {\n', '  \n', '  // Discounted Rates. This is the amount of tokens (of the smallest possible denomination ie- 0.0000...0001PRKC) \n', '  // that a user will receive per Wei contributed to the sale.\n', '  uint256 public firstBonusRate = 1838;\n', '  uint256 public secondBonusRate = 1634;\n', '  uint256 public normalRate = 1470;\n', '\n', '  // Timestamp indicating when the crowdsale will open\n', '  // Aug 18, 2018 12:00:00 AM GMT\n', '  uint256 public openingTime = 1534550400;\n', '\n', '  // Timestamps indicating when the first and second bonus will end.\n', '  // Aug 25, 2018 11:59:59PM GMT\n', '  uint256 public firstBonusEnds = 1535155200;\n', '\n', '  // Sep 8, 2018 11:59:59PM GMT\n', '  uint256 public secondBonusEnds = 1536364800;\n', '\n', '  // Timestamp indicating when the crowdsale will close\n', '  // Sep 28, 2018 11:59:59PM GMT\n', '  uint256 public closingTime = 1538179199;\n', '\n', '  // A separate Ethereum address which only has the right to add addresses to the whitelist\n', '  // It is not permitted to access any other functionality, or to claim funds\n', '  // This is required for easier administration of the ParkadeCoin Crowdsale\n', '  address public executor;\n', '\n', '  // Whether refunds are allowed or not (regardless of if the tokensale&#39;s soft cap has been met)\n', '  // This functionality allows Parkade.IO to refund all investors at the end of the tokensale, even if\n', '  //  the soft cap is not met.\n', '  bool refundsAllowed;\n', '\n', '  // Address where unsold tokens will be sent upon finalization of the sale\n', '  address tokenTimelockContract;\n', '\n', '  constructor\n', '  (\n', '    uint256 _goal,\n', '    address _owner,\n', '    address _executor,\n', '    address _tokenTimelockContract,\n', '    StandardToken _token\n', '  )\n', '  public \n', '  Crowdsale(normalRate, _owner, _token) \n', '  TimedCrowdsale(openingTime, closingTime)\n', '  RefundableCrowdsale(_goal)\n', '  {\n', '    tokenTimelockContract = _tokenTimelockContract;\n', '    executor = _executor;\n', '    refundsAllowed = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner OR the executor.\n', '   */\n', '  modifier onlyOwnerOrExecutor() {\n', '    require(msg.sender == owner || msg.sender == executor);\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev Public function that allows users to determine the current price (in wei) per token\n', '  * @return Current price per token in wei\n', '  */\n', '  function currentRate() public view returns (uint256) {\n', '    if (block.timestamp < firstBonusEnds)\n', '    {\n', '      return firstBonusRate;\n', '    }\n', '    else if (block.timestamp >= firstBonusEnds && block.timestamp < secondBonusEnds)\n', '    {\n', '      return secondBonusRate;\n', '    }\n', '    else \n', '    {\n', '      return normalRate;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Function to change the contract&#39;s executor, which can then add addresses to the whitelist\n', '   * @param _newExec Address of new executor\n', '   */\n', '  function changeExecutor(address _newExec) external onlyOwnerOrExecutor {\n', '    require(_newExec != address(0));\n', '    executor = _newExec;\n', '  }\n', '\n', '  /**\n', '  * @dev Overriden token value function. Provides functionality for discounted rates in the tokensale\n', '  * @param _weiAmount Value in wei to be converted into tokens\n', '  * @return Number of tokens that can be purchased with the specified _weiAmount\n', '  */\n', '  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '    return _weiAmount.mul(currentRate());\n', '  }\n', '\n', '  /**\n', '  * @dev Adds single address to whitelist.\n', '  * @param _beneficiary Address to be added to the whitelist\n', '  */\n', '  function addToWhitelist(address _beneficiary) external onlyOwnerOrExecutor {\n', '    whitelist[_beneficiary] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\n', '   * @param _beneficiaries Addresses to be added to the whitelist\n', '   */\n', '  function addManyToWhitelist(address[] _beneficiaries) external onlyOwnerOrExecutor {\n', '    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '      whitelist[_beneficiaries[i]] = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Removes single address from whitelist.\n', '   * @param _beneficiary Address to be removed to the whitelist\n', '   */\n', '  function removeFromWhitelist(address _beneficiary) external onlyOwnerOrExecutor {\n', '    whitelist[_beneficiary] = false;\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev Validation of an incoming purchase. Overridden to ensure that the tokensale contains enough tokens to sell.\n', '  * @param _beneficiary Address performing the token purchase\n', '  * @param _weiAmount Value in wei involved in the purchase\n', '  */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    require(token.balanceOf(this) > _getTokenAmount(_weiAmount));\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '  /**\n', '  * @dev Investors can claim refunds here if crowdsale is unsuccessful (softcap not reached or as specified by owner)\n', '  */\n', '  function claimRefund() public {\n', '    // Cannot refund before tokensale is finished\n', '    require(hasClosed());\n', '\n', '    // If the goal has been reached, then double-check that refunds are allowed by owner&#39;s override\n', '    if (goalReached())\n', '    {\n', '      require(refundsAllowed);\n', '    }\n', '\n', '    vault.refund(msg.sender);\n', '  }\n', '\n', '  /**\n', '  * @dev Allow the tokensale owner to specify that refunds are allowed regardless of soft cap goal\n', '  */\n', '  function allowRefunds() external onlyOwner {\n', '    require(!isFinalized);\n', '    require(hasClosed());\n', '    refundsAllowed = true;\n', '    vault.enableRefunds();\n', '  }\n', '\n', '   /**\n', '   * @dev vault finalization task, called when owner calls finalize()\n', '   */\n', '  function finalization() internal {\n', '    require(!refundsAllowed);\n', '\n', '    // Send all unsold tokens to the Timelock contract for future vesting\n', '    token.transfer(tokenTimelockContract, token.balanceOf(this));\n', '   \n', '    super.finalization();\n', '  }\n', '}']