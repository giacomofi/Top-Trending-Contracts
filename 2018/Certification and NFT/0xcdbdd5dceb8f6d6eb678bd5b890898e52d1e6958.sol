['// OwnTheDay-Token Source code\n', '// copyright 2018 xeroblood <https://owntheday.io>\n', '\n', 'pragma solidity 0.4.19;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', '* @title Ownable\n', '* @dev The Ownable contract has an owner address, and provides basic authorization control\n', '* functions, this simplifies the implementation of "user permissions".\n', '*/\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '    /* Withdraw */\n', '    /*\n', '    NOTICE: These functions withdraw the developer&#39;s cut which is left\n', '    in the contract. User funds are immediately sent to the old\n', '    owner in `claimDay`, no user funds are left in the contract.\n', '    */\n', '    function withdrawAll() public onlyOwner {\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '    function withdrawAmount(uint256 _amount) public onlyOwner {\n', '        require(_amount <= this.balance);\n', '        owner.transfer(_amount);\n', '    }\n', '\n', '    function contractBalance() public view returns (uint256) {\n', '        return this.balance;\n', '    }\n', '}\n', '\n', '\n', '/**\n', '* @title Pausable\n', '* @dev Base contract which allows children to implement an emergency stop mechanism.\n', '*/\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is paused.\n', '    */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to pause, triggers stopped state\n', '    */\n', '    function pause() public onlyOwner whenNotPaused {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to unpause, returns to normal state\n', '    */\n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '}\n', '\n', '\n', '/**\n', '* @title Helps contracts guard agains reentrancy attacks.\n', '* @author Remco Bloemen <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="44362129272b0476">[email&#160;protected]</a>Ï€.com>\n', '* @notice If you mark a function `nonReentrant`, you should also\n', '* mark it `external`.\n', '*/\n', 'contract ReentrancyGuard {\n', '\n', '    /**\n', '    * @dev We use a single lock for the whole contract.\n', '    */\n', '    bool private reentrancyLock = false;\n', '\n', '    /**\n', '    * @dev Prevents a contract from calling itself, directly or indirectly.\n', '    * @notice If you mark a function `nonReentrant`, you should also\n', '    * mark it `external`. Calling one nonReentrant function from\n', '    * another is not supported. Instead, you can implement a\n', '    * `private` function doing the actual work, and a `external`\n', '    * wrapper marked as `nonReentrant`.\n', '    */\n', '    modifier nonReentrant() {\n', '        require(!reentrancyLock);\n', '        reentrancyLock = true;\n', '        _;\n', '        reentrancyLock = false;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', '* @title ERC721 interface\n', '* @dev see https://github.com/ethereum/eips/issues/721\n', '*/\n', 'contract ERC721 {\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 _balance);\n', '    function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '    function transfer(address _to, uint256 _tokenId) public;\n', '    function approve(address _to, uint256 _tokenId) public;\n', '    function takeOwnership(uint256 _tokenId) public;\n', '}\n', '\n', '\n', '/// @title Own the Day!\n', '/// @author xeroblood (https://owntheday.io)\n', 'contract OwnTheDayContract is ERC721, Pausable, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '\n', '    event Bought (uint256 indexed _dayIndex, address indexed _owner, uint256 _price);\n', '    event Sold (uint256 indexed _dayIndex, address indexed _owner, uint256 _price);\n', '\n', '    // Total amount of tokens\n', '    uint256 private totalTokens;\n', '    bool private mintingFinished = false;\n', '\n', '    // Mapping from token ID to owner\n', '    mapping (uint256 => address) public tokenOwner;\n', '\n', '    // Mapping from token ID to approved address\n', '    mapping (uint256 => address) public tokenApprovals;\n', '\n', '    // Mapping from owner to list of owned token IDs\n', '    mapping (address => uint256[]) public ownedTokens;\n', '\n', '    // Mapping from token ID to index of the owner tokens list\n', '    mapping(uint256 => uint256) public ownedTokensIndex;\n', '\n', '    /// @dev A mapping from Day Index to Current Price.\n', '    ///  Initial Price set at 1 finney (1/1000th of an ether).\n', '    mapping (uint256 => uint256) public dayIndexToPrice;\n', '\n', '    /// @dev A mapping from Day Index to the address owner. Days with\n', '    ///  no valid owner address are assigned to contract owner.\n', '    //mapping (uint256 => address) public dayIndexToOwner;      // <---  redundant with tokenOwner\n', '\n', '    /// @dev A mapping from Account Address to Nickname.\n', '    mapping (address => string) public ownerAddressToName;\n', '\n', '    /**\n', '    * @dev Guarantees msg.sender is owner of the given token\n', '    * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n', '    */\n', '    modifier onlyOwnerOf(uint256 _tokenId) {\n', '        require(ownerOf(_tokenId) == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    function name() public pure returns (string _name) {\n', '        return "OwnTheDay.io Days";\n', '    }\n', '\n', '    function symbol() public pure returns (string _symbol) {\n', '        return "DAYS";\n', '    }\n', '\n', '    /// @dev Creates the initial day tokens available (this is the minting process)\n', '    function createInitialDays(uint256 _count) public onlyOwner canMint {\n', '        require(totalTokens < 366 && _count > 0);\n', '        for (uint256 i = 0; i < _count && totalTokens < 366; i++) {\n', '            _mint(msg.sender, totalTokens);\n', '        }\n', '    }\n', '\n', '    /// @dev Assigns initial days to owners during minting period.\n', '    /// This is only used during migration from old contract to new contract (this one).\n', '    function assignInitialDays(address _to, uint256 _tokenId, uint256 _price) public onlyOwner canMint {\n', '        require(msg.sender != address(0));\n', '        require(_to != address(0));\n', '        require(_tokenId >= 0 && _tokenId < 366);\n', '        require(_price >= 1 finney);\n', '\n', '        tokenOwner[_tokenId] = _to;\n', '        uint256 length = balanceOf(_to);\n', '        ownedTokens[_to].push(_tokenId);\n', '        ownedTokensIndex[_tokenId] = length;\n', '        totalTokens = totalTokens.add(1);\n', '        dayIndexToPrice[_tokenId] = _price;\n', '        Transfer(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    function finishMinting() public onlyOwner {\n', '        require(!mintingFinished);\n', '        mintingFinished = true;\n', '    }\n', '\n', '    function isMintingFinished() public view returns (bool) {\n', '        return mintingFinished;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the total amount of tokens stored by the contract\n', '    * @return uint256 representing the total amount of tokens\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalTokens;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address\n', '    * @param _owner address to query the balance of\n', '    * @return uint256 representing the amount owned by the passed address\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return ownedTokens[_owner].length;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the list of tokens owned by a given address\n', '    * @param _owner address to query the tokens of\n', '    * @return uint256[] representing the list of tokens owned by the passed address\n', '    */\n', '    function tokensOf(address _owner) public view returns (uint256[]) {\n', '        return ownedTokens[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the owner of the specified token ID\n', '    * @param _tokenId uint256 ID of the token to query the owner of\n', '    * @return owner address currently marked as the owner of the given token ID\n', '    */\n', '    function ownerOf(uint256 _tokenId) public view returns (address) {\n', '        address owner = tokenOwner[_tokenId];\n', '        require(owner != address(0));\n', '        return owner;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the approved address to take ownership of a given token ID\n', '    * @param _tokenId uint256 ID of the token to query the approval of\n', '    * @return address currently approved to take ownership of the given token ID\n', '    */\n', '    function approvedFor(uint256 _tokenId) public view returns (address) {\n', '        return tokenApprovals[_tokenId];\n', '    }\n', '\n', '    /**\n', '    * @dev Transfers the ownership of a given token ID to another address\n', '    * @param _to address to receive the ownership of the given token ID\n', '    * @param _tokenId uint256 ID of the token to be transferred\n', '    */\n', '    function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n', '        clearApprovalAndTransfer(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    /**\n', '    * @dev Approves another address to claim for the ownership of the given token ID\n', '    * @param _to address to be approved for the given token ID\n', '    * @param _tokenId uint256 ID of the token to be approved\n', '    */\n', '    function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n', '        address owner = ownerOf(_tokenId);\n', '        require(_to != owner);\n', '        if (approvedFor(_tokenId) != 0 || _to != 0) {\n', '            tokenApprovals[_tokenId] = _to;\n', '            Approval(owner, _to, _tokenId);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Claims the ownership of a given token ID\n', '    * @param _tokenId uint256 ID of the token being claimed by the msg.sender\n', '    */\n', '    function takeOwnership(uint256 _tokenId) public {\n', '        require(isApprovedFor(msg.sender, _tokenId));\n', '        clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\n', '    }\n', '\n', '    /// @dev Calculate the Final Sale Price after the Owner-Cut has been calculated\n', '    function calculateOwnerCut(uint256 _price) public pure returns (uint256) {\n', '        if (_price > 5000 finney) {\n', '            return _price.mul(2).div(100);\n', '        } else if (_price > 500 finney) {\n', '            return _price.mul(3).div(100);\n', '        } else if (_price > 250 finney) {\n', '            return _price.mul(4).div(100);\n', '        }\n', '        return _price.mul(5).div(100);\n', '    }\n', '\n', '    /// @dev Calculate the Price Increase based on the current Purchase Price\n', '    function calculatePriceIncrease(uint256 _price) public pure returns (uint256) {\n', '        if (_price > 5000 finney) {\n', '            return _price.mul(15).div(100);\n', '        } else if (_price > 2500 finney) {\n', '            return _price.mul(18).div(100);\n', '        } else if (_price > 500 finney) {\n', '            return _price.mul(26).div(100);\n', '        } else if (_price > 250 finney) {\n', '            return _price.mul(36).div(100);\n', '        }\n', '        return _price; // 100% increase\n', '    }\n', '\n', '    /// @dev Gets the Current (or Default) Price of a Day\n', '    function getPriceByDayIndex(uint256 _dayIndex) public view returns (uint256) {\n', '        require(_dayIndex >= 0 && _dayIndex < 366);\n', '        uint256 price = dayIndexToPrice[_dayIndex];\n', '        if (price == 0) { price = 1 finney; }\n', '        return price;\n', '    }\n', '\n', '    /// @dev Sets the Nickname for an Account Address\n', '    function setAccountNickname(string _nickname) public whenNotPaused {\n', '        require(msg.sender != address(0));\n', '        require(bytes(_nickname).length > 0);\n', '        ownerAddressToName[msg.sender] = _nickname;\n', '    }\n', '\n', '    /// @dev Claim a Day for Your Very Own!\n', '    /// The Purchase Price is Paid to the Previous Owner\n', '    function claimDay(uint256 _dayIndex) public nonReentrant whenNotPaused payable {\n', '        require(msg.sender != address(0));\n', '        require(_dayIndex >= 0 && _dayIndex < 366);\n', '\n', '        address buyer = msg.sender;\n', '        address seller = tokenOwner[_dayIndex];\n', '        require(msg.sender != seller); // Prevent buying from self\n', '\n', '        uint256 amountPaid = msg.value;\n', '        uint256 purchasePrice = dayIndexToPrice[_dayIndex];\n', '        if (purchasePrice == 0) {\n', '            purchasePrice = 1 finney; // == 0.001 ether or 1000000000000000 wei\n', '        }\n', '        require(amountPaid >= purchasePrice);\n', '\n', '        // If too much was paid, track the change to be returned\n', '        uint256 changeToReturn = 0;\n', '        if (amountPaid > purchasePrice) {\n', '            changeToReturn = amountPaid.sub(purchasePrice);\n', '            amountPaid -= changeToReturn;\n', '        }\n', '\n', '        // Calculate New Purchase Price and update storage\n', '        uint256 priceIncrease = calculatePriceIncrease(purchasePrice);\n', '        uint256 newPurchasePrice = purchasePrice.add(priceIncrease);\n', '        dayIndexToPrice[_dayIndex] = newPurchasePrice;\n', '\n', '        // Calculate Sale Price after Dev-Cut\n', '        //  - Dev-Cut is left in the contract\n', '        //  - Sale Price is transfered to seller immediately\n', '        uint256 ownerCut = calculateOwnerCut(amountPaid);\n', '        uint256 salePrice = amountPaid.sub(ownerCut);\n', '\n', '        // Fire Claim Events\n', '        Bought(_dayIndex, buyer, purchasePrice);\n', '        Sold(_dayIndex, seller, purchasePrice);\n', '\n', '        // Transfer token\n', '        clearApprovalAndTransfer(seller, buyer, _dayIndex);\n', '\n', '        // Transfer Funds\n', '        if (seller != address(0)) {\n', '            seller.transfer(salePrice);\n', '        }\n', '        if (changeToReturn > 0) {\n', '            buyer.transfer(changeToReturn);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Mint token function\n', '    * @param _to The address that will own the minted token\n', '    * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '    */\n', '    function _mint(address _to, uint256 _tokenId) internal {\n', '        require(_to != address(0));\n', '        addToken(_to, _tokenId);\n', '        Transfer(0x0, _to, _tokenId);\n', '    }\n', '\n', '    /**\n', '    * @dev Tells whether the msg.sender is approved for the given token ID or not\n', '    * This function is not private so it can be extended in further implementations like the operatable ERC721\n', '    * @param _owner address of the owner to query the approval of\n', '    * @param _tokenId uint256 ID of the token to query the approval of\n', '    * @return bool whether the msg.sender is approved for the given token ID or not\n', '    */\n', '    function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\n', '        return approvedFor(_tokenId) == _owner;\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to clear current approval and transfer the ownership of a given token ID\n', '    * @param _from address which you want to send tokens from\n', '    * @param _to address which you want to transfer the token to\n', '    * @param _tokenId uint256 ID of the token to be transferred\n', '    */\n', '    function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\n', '        require(_to != address(0));\n', '        require(_to != ownerOf(_tokenId));\n', '        require(ownerOf(_tokenId) == _from);\n', '\n', '        clearApproval(_from, _tokenId);\n', '        removeToken(_from, _tokenId);\n', '        addToken(_to, _tokenId);\n', '        Transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to clear current approval of a given token ID\n', '    * @param _tokenId uint256 ID of the token to be transferred\n', '    */\n', '    function clearApproval(address _owner, uint256 _tokenId) private {\n', '        require(ownerOf(_tokenId) == _owner);\n', '        tokenApprovals[_tokenId] = 0;\n', '        Approval(_owner, 0, _tokenId);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to add a token ID to the list of a given address\n', '    * @param _to address representing the new owner of the given token ID\n', '    * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '    */\n', '    function addToken(address _to, uint256 _tokenId) private {\n', '        require(tokenOwner[_tokenId] == address(0));\n', '        tokenOwner[_tokenId] = _to;\n', '        uint256 length = balanceOf(_to);\n', '        ownedTokens[_to].push(_tokenId);\n', '        ownedTokensIndex[_tokenId] = length;\n', '        totalTokens = totalTokens.add(1);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to remove a token ID from the list of a given address\n', '    * @param _from address representing the previous owner of the given token ID\n', '    * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '    */\n', '    function removeToken(address _from, uint256 _tokenId) private {\n', '        require(ownerOf(_tokenId) == _from);\n', '\n', '        uint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '        uint256 lastTokenIndex = balanceOf(_from).sub(1);\n', '        uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '        tokenOwner[_tokenId] = 0;\n', '        ownedTokens[_from][tokenIndex] = lastToken;\n', '        ownedTokens[_from][lastTokenIndex] = 0;\n', '        // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are\n', '        // going to be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we\n', '        // are first swapping the lastToken to the first position, and then dropping the element placed in the last\n', '        // position of the list\n', '\n', '        ownedTokens[_from].length--;\n', '        ownedTokensIndex[_tokenId] = 0;\n', '        ownedTokensIndex[lastToken] = tokenIndex;\n', '        totalTokens = totalTokens.sub(1);\n', '    }\n', '}']
['// OwnTheDay-Token Source code\n', '// copyright 2018 xeroblood <https://owntheday.io>\n', '\n', 'pragma solidity 0.4.19;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', '* @title Ownable\n', '* @dev The Ownable contract has an owner address, and provides basic authorization control\n', '* functions, this simplifies the implementation of "user permissions".\n', '*/\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '    /* Withdraw */\n', '    /*\n', "    NOTICE: These functions withdraw the developer's cut which is left\n", '    in the contract. User funds are immediately sent to the old\n', '    owner in `claimDay`, no user funds are left in the contract.\n', '    */\n', '    function withdrawAll() public onlyOwner {\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '    function withdrawAmount(uint256 _amount) public onlyOwner {\n', '        require(_amount <= this.balance);\n', '        owner.transfer(_amount);\n', '    }\n', '\n', '    function contractBalance() public view returns (uint256) {\n', '        return this.balance;\n', '    }\n', '}\n', '\n', '\n', '/**\n', '* @title Pausable\n', '* @dev Base contract which allows children to implement an emergency stop mechanism.\n', '*/\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is paused.\n', '    */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to pause, triggers stopped state\n', '    */\n', '    function pause() public onlyOwner whenNotPaused {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to unpause, returns to normal state\n', '    */\n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '}\n', '\n', '\n', '/**\n', '* @title Helps contracts guard agains reentrancy attacks.\n', '* @author Remco Bloemen <remco@2Ï€.com>\n', '* @notice If you mark a function `nonReentrant`, you should also\n', '* mark it `external`.\n', '*/\n', 'contract ReentrancyGuard {\n', '\n', '    /**\n', '    * @dev We use a single lock for the whole contract.\n', '    */\n', '    bool private reentrancyLock = false;\n', '\n', '    /**\n', '    * @dev Prevents a contract from calling itself, directly or indirectly.\n', '    * @notice If you mark a function `nonReentrant`, you should also\n', '    * mark it `external`. Calling one nonReentrant function from\n', '    * another is not supported. Instead, you can implement a\n', '    * `private` function doing the actual work, and a `external`\n', '    * wrapper marked as `nonReentrant`.\n', '    */\n', '    modifier nonReentrant() {\n', '        require(!reentrancyLock);\n', '        reentrancyLock = true;\n', '        _;\n', '        reentrancyLock = false;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', '* @title ERC721 interface\n', '* @dev see https://github.com/ethereum/eips/issues/721\n', '*/\n', 'contract ERC721 {\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 _balance);\n', '    function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '    function transfer(address _to, uint256 _tokenId) public;\n', '    function approve(address _to, uint256 _tokenId) public;\n', '    function takeOwnership(uint256 _tokenId) public;\n', '}\n', '\n', '\n', '/// @title Own the Day!\n', '/// @author xeroblood (https://owntheday.io)\n', 'contract OwnTheDayContract is ERC721, Pausable, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '\n', '    event Bought (uint256 indexed _dayIndex, address indexed _owner, uint256 _price);\n', '    event Sold (uint256 indexed _dayIndex, address indexed _owner, uint256 _price);\n', '\n', '    // Total amount of tokens\n', '    uint256 private totalTokens;\n', '    bool private mintingFinished = false;\n', '\n', '    // Mapping from token ID to owner\n', '    mapping (uint256 => address) public tokenOwner;\n', '\n', '    // Mapping from token ID to approved address\n', '    mapping (uint256 => address) public tokenApprovals;\n', '\n', '    // Mapping from owner to list of owned token IDs\n', '    mapping (address => uint256[]) public ownedTokens;\n', '\n', '    // Mapping from token ID to index of the owner tokens list\n', '    mapping(uint256 => uint256) public ownedTokensIndex;\n', '\n', '    /// @dev A mapping from Day Index to Current Price.\n', '    ///  Initial Price set at 1 finney (1/1000th of an ether).\n', '    mapping (uint256 => uint256) public dayIndexToPrice;\n', '\n', '    /// @dev A mapping from Day Index to the address owner. Days with\n', '    ///  no valid owner address are assigned to contract owner.\n', '    //mapping (uint256 => address) public dayIndexToOwner;      // <---  redundant with tokenOwner\n', '\n', '    /// @dev A mapping from Account Address to Nickname.\n', '    mapping (address => string) public ownerAddressToName;\n', '\n', '    /**\n', '    * @dev Guarantees msg.sender is owner of the given token\n', '    * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n', '    */\n', '    modifier onlyOwnerOf(uint256 _tokenId) {\n', '        require(ownerOf(_tokenId) == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    function name() public pure returns (string _name) {\n', '        return "OwnTheDay.io Days";\n', '    }\n', '\n', '    function symbol() public pure returns (string _symbol) {\n', '        return "DAYS";\n', '    }\n', '\n', '    /// @dev Creates the initial day tokens available (this is the minting process)\n', '    function createInitialDays(uint256 _count) public onlyOwner canMint {\n', '        require(totalTokens < 366 && _count > 0);\n', '        for (uint256 i = 0; i < _count && totalTokens < 366; i++) {\n', '            _mint(msg.sender, totalTokens);\n', '        }\n', '    }\n', '\n', '    /// @dev Assigns initial days to owners during minting period.\n', '    /// This is only used during migration from old contract to new contract (this one).\n', '    function assignInitialDays(address _to, uint256 _tokenId, uint256 _price) public onlyOwner canMint {\n', '        require(msg.sender != address(0));\n', '        require(_to != address(0));\n', '        require(_tokenId >= 0 && _tokenId < 366);\n', '        require(_price >= 1 finney);\n', '\n', '        tokenOwner[_tokenId] = _to;\n', '        uint256 length = balanceOf(_to);\n', '        ownedTokens[_to].push(_tokenId);\n', '        ownedTokensIndex[_tokenId] = length;\n', '        totalTokens = totalTokens.add(1);\n', '        dayIndexToPrice[_tokenId] = _price;\n', '        Transfer(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    function finishMinting() public onlyOwner {\n', '        require(!mintingFinished);\n', '        mintingFinished = true;\n', '    }\n', '\n', '    function isMintingFinished() public view returns (bool) {\n', '        return mintingFinished;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the total amount of tokens stored by the contract\n', '    * @return uint256 representing the total amount of tokens\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalTokens;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address\n', '    * @param _owner address to query the balance of\n', '    * @return uint256 representing the amount owned by the passed address\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return ownedTokens[_owner].length;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the list of tokens owned by a given address\n', '    * @param _owner address to query the tokens of\n', '    * @return uint256[] representing the list of tokens owned by the passed address\n', '    */\n', '    function tokensOf(address _owner) public view returns (uint256[]) {\n', '        return ownedTokens[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the owner of the specified token ID\n', '    * @param _tokenId uint256 ID of the token to query the owner of\n', '    * @return owner address currently marked as the owner of the given token ID\n', '    */\n', '    function ownerOf(uint256 _tokenId) public view returns (address) {\n', '        address owner = tokenOwner[_tokenId];\n', '        require(owner != address(0));\n', '        return owner;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the approved address to take ownership of a given token ID\n', '    * @param _tokenId uint256 ID of the token to query the approval of\n', '    * @return address currently approved to take ownership of the given token ID\n', '    */\n', '    function approvedFor(uint256 _tokenId) public view returns (address) {\n', '        return tokenApprovals[_tokenId];\n', '    }\n', '\n', '    /**\n', '    * @dev Transfers the ownership of a given token ID to another address\n', '    * @param _to address to receive the ownership of the given token ID\n', '    * @param _tokenId uint256 ID of the token to be transferred\n', '    */\n', '    function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n', '        clearApprovalAndTransfer(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    /**\n', '    * @dev Approves another address to claim for the ownership of the given token ID\n', '    * @param _to address to be approved for the given token ID\n', '    * @param _tokenId uint256 ID of the token to be approved\n', '    */\n', '    function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n', '        address owner = ownerOf(_tokenId);\n', '        require(_to != owner);\n', '        if (approvedFor(_tokenId) != 0 || _to != 0) {\n', '            tokenApprovals[_tokenId] = _to;\n', '            Approval(owner, _to, _tokenId);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Claims the ownership of a given token ID\n', '    * @param _tokenId uint256 ID of the token being claimed by the msg.sender\n', '    */\n', '    function takeOwnership(uint256 _tokenId) public {\n', '        require(isApprovedFor(msg.sender, _tokenId));\n', '        clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\n', '    }\n', '\n', '    /// @dev Calculate the Final Sale Price after the Owner-Cut has been calculated\n', '    function calculateOwnerCut(uint256 _price) public pure returns (uint256) {\n', '        if (_price > 5000 finney) {\n', '            return _price.mul(2).div(100);\n', '        } else if (_price > 500 finney) {\n', '            return _price.mul(3).div(100);\n', '        } else if (_price > 250 finney) {\n', '            return _price.mul(4).div(100);\n', '        }\n', '        return _price.mul(5).div(100);\n', '    }\n', '\n', '    /// @dev Calculate the Price Increase based on the current Purchase Price\n', '    function calculatePriceIncrease(uint256 _price) public pure returns (uint256) {\n', '        if (_price > 5000 finney) {\n', '            return _price.mul(15).div(100);\n', '        } else if (_price > 2500 finney) {\n', '            return _price.mul(18).div(100);\n', '        } else if (_price > 500 finney) {\n', '            return _price.mul(26).div(100);\n', '        } else if (_price > 250 finney) {\n', '            return _price.mul(36).div(100);\n', '        }\n', '        return _price; // 100% increase\n', '    }\n', '\n', '    /// @dev Gets the Current (or Default) Price of a Day\n', '    function getPriceByDayIndex(uint256 _dayIndex) public view returns (uint256) {\n', '        require(_dayIndex >= 0 && _dayIndex < 366);\n', '        uint256 price = dayIndexToPrice[_dayIndex];\n', '        if (price == 0) { price = 1 finney; }\n', '        return price;\n', '    }\n', '\n', '    /// @dev Sets the Nickname for an Account Address\n', '    function setAccountNickname(string _nickname) public whenNotPaused {\n', '        require(msg.sender != address(0));\n', '        require(bytes(_nickname).length > 0);\n', '        ownerAddressToName[msg.sender] = _nickname;\n', '    }\n', '\n', '    /// @dev Claim a Day for Your Very Own!\n', '    /// The Purchase Price is Paid to the Previous Owner\n', '    function claimDay(uint256 _dayIndex) public nonReentrant whenNotPaused payable {\n', '        require(msg.sender != address(0));\n', '        require(_dayIndex >= 0 && _dayIndex < 366);\n', '\n', '        address buyer = msg.sender;\n', '        address seller = tokenOwner[_dayIndex];\n', '        require(msg.sender != seller); // Prevent buying from self\n', '\n', '        uint256 amountPaid = msg.value;\n', '        uint256 purchasePrice = dayIndexToPrice[_dayIndex];\n', '        if (purchasePrice == 0) {\n', '            purchasePrice = 1 finney; // == 0.001 ether or 1000000000000000 wei\n', '        }\n', '        require(amountPaid >= purchasePrice);\n', '\n', '        // If too much was paid, track the change to be returned\n', '        uint256 changeToReturn = 0;\n', '        if (amountPaid > purchasePrice) {\n', '            changeToReturn = amountPaid.sub(purchasePrice);\n', '            amountPaid -= changeToReturn;\n', '        }\n', '\n', '        // Calculate New Purchase Price and update storage\n', '        uint256 priceIncrease = calculatePriceIncrease(purchasePrice);\n', '        uint256 newPurchasePrice = purchasePrice.add(priceIncrease);\n', '        dayIndexToPrice[_dayIndex] = newPurchasePrice;\n', '\n', '        // Calculate Sale Price after Dev-Cut\n', '        //  - Dev-Cut is left in the contract\n', '        //  - Sale Price is transfered to seller immediately\n', '        uint256 ownerCut = calculateOwnerCut(amountPaid);\n', '        uint256 salePrice = amountPaid.sub(ownerCut);\n', '\n', '        // Fire Claim Events\n', '        Bought(_dayIndex, buyer, purchasePrice);\n', '        Sold(_dayIndex, seller, purchasePrice);\n', '\n', '        // Transfer token\n', '        clearApprovalAndTransfer(seller, buyer, _dayIndex);\n', '\n', '        // Transfer Funds\n', '        if (seller != address(0)) {\n', '            seller.transfer(salePrice);\n', '        }\n', '        if (changeToReturn > 0) {\n', '            buyer.transfer(changeToReturn);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Mint token function\n', '    * @param _to The address that will own the minted token\n', '    * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '    */\n', '    function _mint(address _to, uint256 _tokenId) internal {\n', '        require(_to != address(0));\n', '        addToken(_to, _tokenId);\n', '        Transfer(0x0, _to, _tokenId);\n', '    }\n', '\n', '    /**\n', '    * @dev Tells whether the msg.sender is approved for the given token ID or not\n', '    * This function is not private so it can be extended in further implementations like the operatable ERC721\n', '    * @param _owner address of the owner to query the approval of\n', '    * @param _tokenId uint256 ID of the token to query the approval of\n', '    * @return bool whether the msg.sender is approved for the given token ID or not\n', '    */\n', '    function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\n', '        return approvedFor(_tokenId) == _owner;\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to clear current approval and transfer the ownership of a given token ID\n', '    * @param _from address which you want to send tokens from\n', '    * @param _to address which you want to transfer the token to\n', '    * @param _tokenId uint256 ID of the token to be transferred\n', '    */\n', '    function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\n', '        require(_to != address(0));\n', '        require(_to != ownerOf(_tokenId));\n', '        require(ownerOf(_tokenId) == _from);\n', '\n', '        clearApproval(_from, _tokenId);\n', '        removeToken(_from, _tokenId);\n', '        addToken(_to, _tokenId);\n', '        Transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to clear current approval of a given token ID\n', '    * @param _tokenId uint256 ID of the token to be transferred\n', '    */\n', '    function clearApproval(address _owner, uint256 _tokenId) private {\n', '        require(ownerOf(_tokenId) == _owner);\n', '        tokenApprovals[_tokenId] = 0;\n', '        Approval(_owner, 0, _tokenId);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to add a token ID to the list of a given address\n', '    * @param _to address representing the new owner of the given token ID\n', '    * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '    */\n', '    function addToken(address _to, uint256 _tokenId) private {\n', '        require(tokenOwner[_tokenId] == address(0));\n', '        tokenOwner[_tokenId] = _to;\n', '        uint256 length = balanceOf(_to);\n', '        ownedTokens[_to].push(_tokenId);\n', '        ownedTokensIndex[_tokenId] = length;\n', '        totalTokens = totalTokens.add(1);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to remove a token ID from the list of a given address\n', '    * @param _from address representing the previous owner of the given token ID\n', '    * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '    */\n', '    function removeToken(address _from, uint256 _tokenId) private {\n', '        require(ownerOf(_tokenId) == _from);\n', '\n', '        uint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '        uint256 lastTokenIndex = balanceOf(_from).sub(1);\n', '        uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '        tokenOwner[_tokenId] = 0;\n', '        ownedTokens[_from][tokenIndex] = lastToken;\n', '        ownedTokens[_from][lastTokenIndex] = 0;\n', '        // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are\n', '        // going to be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we\n', '        // are first swapping the lastToken to the first position, and then dropping the element placed in the last\n', '        // position of the list\n', '\n', '        ownedTokens[_from].length--;\n', '        ownedTokensIndex[_tokenId] = 0;\n', '        ownedTokensIndex[lastToken] = tokenIndex;\n', '        totalTokens = totalTokens.sub(1);\n', '    }\n', '}']
