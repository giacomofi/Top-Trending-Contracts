['pragma solidity ^0.4.22;\n', '\n', 'contract MultiEthSender {\n', '\n', '  uint256 constant private ethInWei = 10**18;\n', '  mapping(address => uint256) private balance;\n', '  address public owner;\n', '\n', '  event Send(uint256 _amount, address indexed receiver);\n', '\n', '  constructor() public payable {\n', '    owner = msg.sender;\n', '    balance[msg.sender] = msg.value;\n', '  }\n', '\n', '  function multiSendEth(uint256 amount, address[] list) public returns (bool) {\n', '    uint256 amountInWei = amount * ethInWei;\n', '    require(amountInWei * list.length <= balance[msg.sender], "the contract balance is not enough");\n', '    for (uint256 i = 0; i < list.length; i++) {\n', '      emit Send(amount, list[i]);\n', '      uint256 res = balance[msg.sender];\n', '      balance[msg.sender] = res - amountInWei;\n', '      list[i].transfer(amountInWei);\n', '    }\n', '    return true;\n', '  }\n', '\n', '  function deposit() public payable returns (uint256) {\n', '    balance[msg.sender] += msg.value;\n', '    return balance[msg.sender];\n', '  }\n', '\n', '  function getBalance() public constant returns (uint256) {\n', '      return balance[msg.sender];\n', '  }\n', '\n', '  function() public payable { }\n', '}']