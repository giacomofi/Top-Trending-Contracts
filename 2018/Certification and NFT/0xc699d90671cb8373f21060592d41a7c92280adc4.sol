['pragma solidity ^0.4.18;\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Token {\n', '  function totalSupply() constant public returns (uint256 supply);\n', '\n', '  function balanceOf(address _owner) constant public returns (uint256 balance);\n', '  function transfer(address _to, uint256 _value) public  returns (bool success) ;\n', '  function transferFrom(address _from, address _to, uint256 _value) public  returns (bool success) ;\n', '  function approve(address _spender, uint256 _value) public  returns (bool success) ;\n', '  function allowance(address _owner, address _spender) constant public  returns (uint256 remaining) ;\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '  uint public decimals;\n', '  string public name;\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where Contributors can make\n', ' * token Contributions and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive. The contract requires a MintableToken that will be\n', ' * minted as contributions arrive, note that the crowdsale contract\n', ' * must be owner of the token in order to be able to mint it.\n', ' */\n', 'contract Crowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '  // totalTokens\n', '  uint256 public totalTokens;\n', '  // soft cap\n', '  uint softcap;\n', '  // hard cap\n', '  uint hardcap;  \n', '  Token public token;\n', '  // balances for softcap\n', '  mapping(address => uint) public balances;\n', '  // balances for softcap\n', '  mapping(address => uint) public balancesToken;  \n', '  // The token being offered\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  \n', '  //pre-sale\n', '    //start\n', '  uint256 public startPreSale;\n', '    //end\n', '  uint256 public endPreSale;\n', '\n', '  //ico\n', '    //start\n', '  uint256 public startIco;\n', '    //end \n', '  uint256 public endIco;    \n', '\n', '  //token distribution\n', '  uint256 public maxPreSale;\n', '  uint256 public maxIco;\n', '\n', '  uint256 public totalPreSale;\n', '  uint256 public totalIco;\n', '  \n', '  // how many token units a Contributor gets per wei\n', '  uint256 public ratePreSale;\n', '  uint256 public rateIco;   \n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // minimum quantity values\n', '  uint256 public minQuanValues; \n', '  uint256 public maxQuanValues; \n', '\n', '/**\n', '* event for token Procurement logging\n', '* @param contributor who Pledged for the tokens\n', '* @param beneficiary who got the tokens\n', '* @param value weis Contributed for Procurement\n', '* @param amount amount of tokens Procured\n', '*/\n', '  event TokenProcurement(address indexed contributor, address indexed beneficiary, uint256 value, uint256 amount);\n', '  function Crowdsale() public {\n', '    \n', '    //soft cap\n', '    softcap = 5000 * 1 ether; \n', '    hardcap = 20000 * 1 ether;  \t\n', '    // min quantity values\n', '    minQuanValues = 100000000000000000; //0.1 eth\n', '    // max quantity values\n', '    maxQuanValues = 27 * 1 ether; //    \n', '    // start and end timestamps where investments are allowed\n', '    //Pre-sale\n', '      //start\n', '    startPreSale = 1523260800;//09 Apr 2018 08:00:00 +0000\n', '      //end\n', '    endPreSale = 1525507200;//05 May 2018 08:00:00 +0000\n', '  \n', '    //ico\n', '      //start\n', '    startIco = 1525507200;//05 May 2018 08:00:00 +0000\n', '      //end \n', '    endIco = startIco + 6 * 7 * 1 days;   \n', '\n', '    // rate;\n', '    ratePreSale = 382;\n', '    rateIco = 191; \n', '    \n', '    // restrictions on amounts during the crowdfunding event stages\n', '    maxPreSale = 30000000 * 1 ether;\n', '    maxIco =     60000000 * 1 ether;    \n', '    \n', '    // address where funds are collected\n', '    wallet = 0x04cFbFa64917070d7AEECd20225782240E8976dc;\n', '  }\n', '\n', '  function setratePreSale(uint _ratePreSale) public onlyOwner  {\n', '    ratePreSale = _ratePreSale;\n', '  }\n', ' \n', '  function setrateIco(uint _rateIco) public onlyOwner  {\n', '    rateIco = _rateIco;\n', '  }   \n', '  \n', '\n', '\n', '  // fallback function can be used to Procure tokens\n', '  function () external payable {\n', '    procureTokens(msg.sender);\n', '  }\n', '  \n', '  function setToken(address _address) public onlyOwner {\n', '      token = Token(_address);\n', '  }\n', '    \n', '  // low level token Pledge function\n', '  function procureTokens(address beneficiary) public payable {\n', '    uint256 tokens;\n', '    uint256 weiAmount = msg.value;\n', '    uint256 backAmount;\n', '    require(beneficiary != address(0));\n', '    //minimum amount in ETH\n', '    require(weiAmount >= minQuanValues);\n', '    //maximum amount in ETH\n', '    require(weiAmount.add(balances[msg.sender]) <= maxQuanValues);    \n', '    //hard cap\n', '    address _this = this;\n', '    require(hardcap > _this.balance);\n', '\n', '    //Pre-sale\n', '    if (now >= startPreSale && now < endPreSale && totalPreSale < maxPreSale){\n', '      tokens = weiAmount.mul(ratePreSale);\n', '\t  if (maxPreSale.sub(totalPreSale) <= tokens){\n', '\t    endPreSale = now;\n', '\t    startIco = now;\n', '\t    endIco = startIco + 6 * 7 * 1 days; \n', '\t  }\n', '      if (maxPreSale.sub(totalPreSale) < tokens){\n', '        tokens = maxPreSale.sub(totalPreSale); \n', '        weiAmount = tokens.div(ratePreSale);\n', '        backAmount = msg.value.sub(weiAmount);\n', '      }\n', '      totalPreSale = totalPreSale.add(tokens);\n', '    }\n', '       \n', '    //ico   \n', '    if (now >= startIco && now < endIco && totalIco < maxIco){\n', '      tokens = weiAmount.mul(rateIco);\n', '      if (maxIco.sub(totalIco) < tokens){\n', '        tokens = maxIco.sub(totalIco); \n', '        weiAmount = tokens.div(rateIco);\n', '        backAmount = msg.value.sub(weiAmount);\n', '      }\n', '      totalIco = totalIco.add(tokens);\n', '    }        \n', '\n', '    require(tokens > 0);\n', '    balances[msg.sender] = balances[msg.sender].add(msg.value);\n', '    balancesToken[msg.sender] = balancesToken[msg.sender].add(tokens);\n', '    \n', '    if (backAmount > 0){\n', '      msg.sender.transfer(backAmount);    \n', '    }\n', '    emit TokenProcurement(msg.sender, beneficiary, weiAmount, tokens);\n', '  }\n', '  function getToken() public{\n', '    address _this = this;\n', '    require(_this.balance >= softcap && now > endIco); \n', '    uint value = balancesToken[msg.sender];\n', '    balancesToken[msg.sender] = 0;\n', '    token.transfer(msg.sender, value);\n', '  }\n', '  \n', '  function refund() public{\n', '    address _this = this;\n', '    require(_this.balance < softcap && now > endIco);\n', '    require(balances[msg.sender] > 0);\n', '    uint value = balances[msg.sender];\n', '    balances[msg.sender] = 0;\n', '    msg.sender.transfer(value);\n', '  }\n', '  \n', '  function transferTokenToMultisig(address _address) public onlyOwner {\n', '    address _this = this;\n', '    require(_this.balance >= softcap && now > endIco);  \n', '    token.transfer(_address, token.balanceOf(_this));\n', '  }   \n', '  \n', '  function transferEthToMultisig() public onlyOwner {\n', '    address _this = this;\n', '    require(_this.balance >= softcap && now > endIco);  \n', '    wallet.transfer(_this.balance);\n', '  }  \n', '}']
['pragma solidity ^0.4.18;\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Token {\n', '  function totalSupply() constant public returns (uint256 supply);\n', '\n', '  function balanceOf(address _owner) constant public returns (uint256 balance);\n', '  function transfer(address _to, uint256 _value) public  returns (bool success) ;\n', '  function transferFrom(address _from, address _to, uint256 _value) public  returns (bool success) ;\n', '  function approve(address _spender, uint256 _value) public  returns (bool success) ;\n', '  function allowance(address _owner, address _spender) constant public  returns (uint256 remaining) ;\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '  uint public decimals;\n', '  string public name;\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where Contributors can make\n', ' * token Contributions and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive. The contract requires a MintableToken that will be\n', ' * minted as contributions arrive, note that the crowdsale contract\n', ' * must be owner of the token in order to be able to mint it.\n', ' */\n', 'contract Crowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '  // totalTokens\n', '  uint256 public totalTokens;\n', '  // soft cap\n', '  uint softcap;\n', '  // hard cap\n', '  uint hardcap;  \n', '  Token public token;\n', '  // balances for softcap\n', '  mapping(address => uint) public balances;\n', '  // balances for softcap\n', '  mapping(address => uint) public balancesToken;  \n', '  // The token being offered\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  \n', '  //pre-sale\n', '    //start\n', '  uint256 public startPreSale;\n', '    //end\n', '  uint256 public endPreSale;\n', '\n', '  //ico\n', '    //start\n', '  uint256 public startIco;\n', '    //end \n', '  uint256 public endIco;    \n', '\n', '  //token distribution\n', '  uint256 public maxPreSale;\n', '  uint256 public maxIco;\n', '\n', '  uint256 public totalPreSale;\n', '  uint256 public totalIco;\n', '  \n', '  // how many token units a Contributor gets per wei\n', '  uint256 public ratePreSale;\n', '  uint256 public rateIco;   \n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // minimum quantity values\n', '  uint256 public minQuanValues; \n', '  uint256 public maxQuanValues; \n', '\n', '/**\n', '* event for token Procurement logging\n', '* @param contributor who Pledged for the tokens\n', '* @param beneficiary who got the tokens\n', '* @param value weis Contributed for Procurement\n', '* @param amount amount of tokens Procured\n', '*/\n', '  event TokenProcurement(address indexed contributor, address indexed beneficiary, uint256 value, uint256 amount);\n', '  function Crowdsale() public {\n', '    \n', '    //soft cap\n', '    softcap = 5000 * 1 ether; \n', '    hardcap = 20000 * 1 ether;  \t\n', '    // min quantity values\n', '    minQuanValues = 100000000000000000; //0.1 eth\n', '    // max quantity values\n', '    maxQuanValues = 27 * 1 ether; //    \n', '    // start and end timestamps where investments are allowed\n', '    //Pre-sale\n', '      //start\n', '    startPreSale = 1523260800;//09 Apr 2018 08:00:00 +0000\n', '      //end\n', '    endPreSale = 1525507200;//05 May 2018 08:00:00 +0000\n', '  \n', '    //ico\n', '      //start\n', '    startIco = 1525507200;//05 May 2018 08:00:00 +0000\n', '      //end \n', '    endIco = startIco + 6 * 7 * 1 days;   \n', '\n', '    // rate;\n', '    ratePreSale = 382;\n', '    rateIco = 191; \n', '    \n', '    // restrictions on amounts during the crowdfunding event stages\n', '    maxPreSale = 30000000 * 1 ether;\n', '    maxIco =     60000000 * 1 ether;    \n', '    \n', '    // address where funds are collected\n', '    wallet = 0x04cFbFa64917070d7AEECd20225782240E8976dc;\n', '  }\n', '\n', '  function setratePreSale(uint _ratePreSale) public onlyOwner  {\n', '    ratePreSale = _ratePreSale;\n', '  }\n', ' \n', '  function setrateIco(uint _rateIco) public onlyOwner  {\n', '    rateIco = _rateIco;\n', '  }   \n', '  \n', '\n', '\n', '  // fallback function can be used to Procure tokens\n', '  function () external payable {\n', '    procureTokens(msg.sender);\n', '  }\n', '  \n', '  function setToken(address _address) public onlyOwner {\n', '      token = Token(_address);\n', '  }\n', '    \n', '  // low level token Pledge function\n', '  function procureTokens(address beneficiary) public payable {\n', '    uint256 tokens;\n', '    uint256 weiAmount = msg.value;\n', '    uint256 backAmount;\n', '    require(beneficiary != address(0));\n', '    //minimum amount in ETH\n', '    require(weiAmount >= minQuanValues);\n', '    //maximum amount in ETH\n', '    require(weiAmount.add(balances[msg.sender]) <= maxQuanValues);    \n', '    //hard cap\n', '    address _this = this;\n', '    require(hardcap > _this.balance);\n', '\n', '    //Pre-sale\n', '    if (now >= startPreSale && now < endPreSale && totalPreSale < maxPreSale){\n', '      tokens = weiAmount.mul(ratePreSale);\n', '\t  if (maxPreSale.sub(totalPreSale) <= tokens){\n', '\t    endPreSale = now;\n', '\t    startIco = now;\n', '\t    endIco = startIco + 6 * 7 * 1 days; \n', '\t  }\n', '      if (maxPreSale.sub(totalPreSale) < tokens){\n', '        tokens = maxPreSale.sub(totalPreSale); \n', '        weiAmount = tokens.div(ratePreSale);\n', '        backAmount = msg.value.sub(weiAmount);\n', '      }\n', '      totalPreSale = totalPreSale.add(tokens);\n', '    }\n', '       \n', '    //ico   \n', '    if (now >= startIco && now < endIco && totalIco < maxIco){\n', '      tokens = weiAmount.mul(rateIco);\n', '      if (maxIco.sub(totalIco) < tokens){\n', '        tokens = maxIco.sub(totalIco); \n', '        weiAmount = tokens.div(rateIco);\n', '        backAmount = msg.value.sub(weiAmount);\n', '      }\n', '      totalIco = totalIco.add(tokens);\n', '    }        \n', '\n', '    require(tokens > 0);\n', '    balances[msg.sender] = balances[msg.sender].add(msg.value);\n', '    balancesToken[msg.sender] = balancesToken[msg.sender].add(tokens);\n', '    \n', '    if (backAmount > 0){\n', '      msg.sender.transfer(backAmount);    \n', '    }\n', '    emit TokenProcurement(msg.sender, beneficiary, weiAmount, tokens);\n', '  }\n', '  function getToken() public{\n', '    address _this = this;\n', '    require(_this.balance >= softcap && now > endIco); \n', '    uint value = balancesToken[msg.sender];\n', '    balancesToken[msg.sender] = 0;\n', '    token.transfer(msg.sender, value);\n', '  }\n', '  \n', '  function refund() public{\n', '    address _this = this;\n', '    require(_this.balance < softcap && now > endIco);\n', '    require(balances[msg.sender] > 0);\n', '    uint value = balances[msg.sender];\n', '    balances[msg.sender] = 0;\n', '    msg.sender.transfer(value);\n', '  }\n', '  \n', '  function transferTokenToMultisig(address _address) public onlyOwner {\n', '    address _this = this;\n', '    require(_this.balance >= softcap && now > endIco);  \n', '    token.transfer(_address, token.balanceOf(_this));\n', '  }   \n', '  \n', '  function transferEthToMultisig() public onlyOwner {\n', '    address _this = this;\n', '    require(_this.balance >= softcap && now > endIco);  \n', '    wallet.transfer(_this.balance);\n', '  }  \n', '}']
