['pragma solidity ^0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/Distribute.sol\n', '\n', 'contract Distribute {\n', '\n', '    using SafeMath for SafeMath;\n', '\n', '    address public netAddress = 0x88888888c84198BCc5CEb4160d13726F22c151Ab;\n', '\n', '    address public otherAddress = 0x8e83D33aB48b110B7C3DF8C6F5D02191aF9b80FD;\n', '\n', '    uint proportionA = 94;\n', '    uint proportionB = 6;\n', '    uint base = 100;\n', '\n', '    constructor() public {\n', '\n', '    }\n', '\n', '    function() payable public {\n', '        require(msg.value > 0);\n', '\n', '        netAddress.transfer(SafeMath.div(SafeMath.mul(msg.value, proportionA), base));\n', '        otherAddress.transfer(SafeMath.div(SafeMath.mul(msg.value, proportionB), base));\n', '\n', '    }\n', '\n', '\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/Distribute.sol\n', '\n', 'contract Distribute {\n', '\n', '    using SafeMath for SafeMath;\n', '\n', '    address public netAddress = 0x88888888c84198BCc5CEb4160d13726F22c151Ab;\n', '\n', '    address public otherAddress = 0x8e83D33aB48b110B7C3DF8C6F5D02191aF9b80FD;\n', '\n', '    uint proportionA = 94;\n', '    uint proportionB = 6;\n', '    uint base = 100;\n', '\n', '    constructor() public {\n', '\n', '    }\n', '\n', '    function() payable public {\n', '        require(msg.value > 0);\n', '\n', '        netAddress.transfer(SafeMath.div(SafeMath.mul(msg.value, proportionA), base));\n', '        otherAddress.transfer(SafeMath.div(SafeMath.mul(msg.value, proportionB), base));\n', '\n', '    }\n', '\n', '\n', '}']
