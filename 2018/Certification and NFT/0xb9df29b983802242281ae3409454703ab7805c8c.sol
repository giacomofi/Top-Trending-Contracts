['pragma solidity 0.4.19;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract PrivateSale {\n', '  using SafeMath for uint256;\n', '\n', '  // Address of owner\n', '  address public owner;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  // Flag to accept or reject payments\n', '  bool public isAcceptingPayments;\n', '\n', '  // List of admins who can edit the whitelist\n', '  mapping (address => bool) public whitelistAdmins;\n', '\n', '  // List of addresses that are whitelisted for private sale\n', '  mapping (address => bool) public whitelist;\n', '  uint256 public whitelistCount;\n', '\n', '  // List of addresses that have made payments\n', '  mapping (address => uint256) public weiPaid;\n', '\n', '  uint256 public HARD_CAP = 6666 ether;\n', '\n', '  // modifier to check owner\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  // modifier to check whitelist admin status\n', '  modifier onlyWhitelistAdmin() {\n', '    require(whitelistAdmins[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  // modifier to check if whitelisted address\n', '  modifier isWhitelisted() {\n', '    require(whitelist[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  // modifier to check if payments being accepted\n', '  modifier acceptingPayments() {\n', '    require(isAcceptingPayments);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * Constructor\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   */\n', '  function PrivateSale(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    owner = msg.sender;\n', '    wallet = _wallet;\n', '    whitelistAdmins[msg.sender] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev fallback function\n', '   */\n', '  function () isWhitelisted acceptingPayments payable public {\n', '    require(msg.value >= 0.2 ether);\n', '    require(msg.value <= 500 ether);\n', '    require(msg.sender != address(0));\n', '    \n', '    uint256 contribution = msg.value;\n', '    // add to sender&#39;s weiPaid record\n', '    weiPaid[msg.sender] += msg.value;\n', '\n', '    // add to amount raised\n', '    weiRaised = weiRaised.add(msg.value);\n', '\n', '    if (weiRaised > HARD_CAP) {\n', '      uint256 refundAmount = weiRaised.sub(HARD_CAP);\n', '      msg.sender.transfer(refundAmount);\n', '      contribution = contribution.sub(refundAmount);\n', '      refundAmount = 0;\n', '      weiRaised = HARD_CAP;\n', '      isAcceptingPayments = false;\n', '    }\n', '\n', '    // transfer funds to external wallet\n', '    wallet.transfer(contribution);\n', '  }\n', '\n', '  /**\n', '   * @dev Start accepting payments\n', '   */\n', '  function acceptPayments() onlyOwner public  {\n', '    isAcceptingPayments = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Stop accepting payments\n', '   */\n', '  function rejectPayments() onlyOwner public  {\n', '    isAcceptingPayments = false;\n', '  }\n', '\n', '  /**\n', '   *  @dev Add a user to the whitelist admins\n', '   */\n', '  function addWhitelistAdmin(address _admin) onlyOwner public {\n', '    whitelistAdmins[_admin] = true;\n', '  }\n', '\n', '  /**\n', '   *  @dev Remove a user from the whitelist admins\n', '   */\n', '  function removeWhitelistAdmin(address _admin) onlyOwner public {\n', '    whitelistAdmins[_admin] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Add an address to the whitelist\n', '   * @param _user The address of the contributor\n', '   */\n', '  function whitelistAddress(address _user) onlyWhitelistAdmin public  {\n', '    whitelist[_user] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Add multiple addresses to the whitelist\n', '   * @param _users The addresses of the contributor\n', '   */\n', '  function whitelistAddresses(address[] _users) onlyWhitelistAdmin public {\n', '    for (uint256 i = 0; i < _users.length; i++) {\n', '      whitelist[_users[i]] = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Remove an addresses from the whitelist\n', '   * @param _user The addresses of the contributor\n', '   */\n', '  function unWhitelistAddress(address _user) onlyWhitelistAdmin public  {\n', '    whitelist[_user] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Remove multiple addresses from the whitelist\n', '   * @param _users The addresses of the contributor\n', '   */\n', '  function unWhitelistAddresses(address[] _users) onlyWhitelistAdmin public {\n', '    for (uint256 i = 0; i < _users.length; i++) {\n', '      whitelist[_users[i]] = false;\n', '    }\n', '  }\n', '}']