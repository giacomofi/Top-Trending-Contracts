['pragma solidity ^0.4.21;\n', '\n', 'interface ERC223ReceivingContract { \n', '    function tokenFallback(address _from, uint _value, bytes _data) external;\n', '}\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract AlphaToken is Ownable {\n', '    using SafeMath for uint256;\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '\n', '    mapping(address => uint) balances; // List of user balances.\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    string _name;\n', '    string _symbol;\n', '    uint8 DECIMALS = 18;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 _totalSupply;\n', '    uint256 _saledTotal = 0;\n', '    uint256 _amounToSale = 0;\n', '    uint _buyPrice = 4500;\n', '    uint256 _totalEther = 0;\n', '\n', '    function AlphaToken(\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public \n', '    {\n', '        _totalSupply = 4000000000 * 10 ** uint256(DECIMALS);  // 实际供应总量\n', '        _amounToSale = _totalSupply;\n', '        _saledTotal = 0;\n', '        _name = tokenName;                                       // 设置Token名字\n', '        _symbol = tokenSymbol;                                   // 设置Token符号\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function name() public constant returns (string) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public constant returns (string) {\n', '        return _symbol;\n', '    }\n', '\n', '    function totalSupply() public constant returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function buyPrice() public constant returns (uint256) {\n', '        return _buyPrice;\n', '    }\n', '    \n', '    function decimals() public constant returns (uint8) {\n', '        return DECIMALS;\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint _value, bytes _data) internal {\n', '        uint codeLength;\n', '        require (_to != 0x0);\n', '        require(balances[_from]>=_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        if (codeLength>0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, _data);\n', '        }\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      Invokes the `tokenFallback` function if the recipient is a contract.\n', '     *      The token transfer fails if the recipient is a contract\n', '     *      but does not implement the `tokenFallback` function\n', '     *      or the fallback function to receive funds.\n', '     *\n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     * @param _data  Transaction metadata.\n', '     */\n', '    function transfer(address _to, uint _value, bytes _data) public returns (bool ok) {\n', '        // Standard function transfer similar to ERC20 transfer with no _data .\n', '        // Added due to backwards compatibility reasons .\n', '        _transfer(msg.sender, _to, _value, _data);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      This function works the same with the previous one\n', '     *      but doesn&#39;t contain `_data` param.\n', '     *      Added due to backwards compatibility reasons.\n', '     *\n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     */\n', '    function transfer(address _to, uint _value) public returns(bool ok) {\n', '        bytes memory empty;\n', '        _transfer(msg.sender, _to, _value, empty);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        require(balances[msg.sender]>=tokens);\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint _value) onlyOwner public returns (bool success) {\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        bytes memory empty;\n', '        _transfer(_from, _to, _value, empty);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Returns balance of the `_owner`.\n', '     *\n', '     * @param _owner   The address whose balance will be returned.\n', '     * @return balance Balance of the `_owner`.\n', '     */\n', '    function balanceOf(address _owner) public constant returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function setPrices(uint256 newBuyPrice) onlyOwner public {\n', '        _buyPrice = newBuyPrice;\n', '    }\n', '\n', '    /// @notice Buy tokens from contract by sending ether\n', '    function buyCoin() payable public returns (bool ok) {\n', '        uint amount = ((msg.value * _buyPrice) * 10 ** uint256(DECIMALS))/1000000000000000000;               // calculates the amount\n', '        require ((_amounToSale - _saledTotal)>=amount);\n', '        balances[msg.sender] = balances[msg.sender].add(amount);\n', '        _saledTotal = _saledTotal.add(amount);\n', '        _totalEther += msg.value;\n', '        return true;\n', '    }\n', '\n', '    function dispatchTo(address target, uint256 amount) onlyOwner public returns (bool ok) {\n', '        require ((_amounToSale - _saledTotal)>=amount);\n', '        balances[target] = balances[target].add(amount);\n', '        _saledTotal = _saledTotal.add(amount);\n', '        return true;\n', '    }\n', '\n', '    function withdrawTo(address _target, uint256 _value) onlyOwner public returns (bool ok) {\n', '        require(_totalEther <= _value);\n', '        _totalEther -= _value;\n', '        _target.transfer(_value);\n', '        return true;\n', '    }\n', '    \n', '    function () payable public {\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'interface ERC223ReceivingContract { \n', '    function tokenFallback(address _from, uint _value, bytes _data) external;\n', '}\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract AlphaToken is Ownable {\n', '    using SafeMath for uint256;\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '\n', '    mapping(address => uint) balances; // List of user balances.\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    string _name;\n', '    string _symbol;\n', '    uint8 DECIMALS = 18;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 _totalSupply;\n', '    uint256 _saledTotal = 0;\n', '    uint256 _amounToSale = 0;\n', '    uint _buyPrice = 4500;\n', '    uint256 _totalEther = 0;\n', '\n', '    function AlphaToken(\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public \n', '    {\n', '        _totalSupply = 4000000000 * 10 ** uint256(DECIMALS);  // 实际供应总量\n', '        _amounToSale = _totalSupply;\n', '        _saledTotal = 0;\n', '        _name = tokenName;                                       // 设置Token名字\n', '        _symbol = tokenSymbol;                                   // 设置Token符号\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function name() public constant returns (string) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public constant returns (string) {\n', '        return _symbol;\n', '    }\n', '\n', '    function totalSupply() public constant returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function buyPrice() public constant returns (uint256) {\n', '        return _buyPrice;\n', '    }\n', '    \n', '    function decimals() public constant returns (uint8) {\n', '        return DECIMALS;\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint _value, bytes _data) internal {\n', '        uint codeLength;\n', '        require (_to != 0x0);\n', '        require(balances[_from]>=_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        if (codeLength>0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, _data);\n', '        }\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      Invokes the `tokenFallback` function if the recipient is a contract.\n', '     *      The token transfer fails if the recipient is a contract\n', '     *      but does not implement the `tokenFallback` function\n', '     *      or the fallback function to receive funds.\n', '     *\n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     * @param _data  Transaction metadata.\n', '     */\n', '    function transfer(address _to, uint _value, bytes _data) public returns (bool ok) {\n', '        // Standard function transfer similar to ERC20 transfer with no _data .\n', '        // Added due to backwards compatibility reasons .\n', '        _transfer(msg.sender, _to, _value, _data);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      This function works the same with the previous one\n', "     *      but doesn't contain `_data` param.\n", '     *      Added due to backwards compatibility reasons.\n', '     *\n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     */\n', '    function transfer(address _to, uint _value) public returns(bool ok) {\n', '        bytes memory empty;\n', '        _transfer(msg.sender, _to, _value, empty);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        require(balances[msg.sender]>=tokens);\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint _value) onlyOwner public returns (bool success) {\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        bytes memory empty;\n', '        _transfer(_from, _to, _value, empty);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Returns balance of the `_owner`.\n', '     *\n', '     * @param _owner   The address whose balance will be returned.\n', '     * @return balance Balance of the `_owner`.\n', '     */\n', '    function balanceOf(address _owner) public constant returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function setPrices(uint256 newBuyPrice) onlyOwner public {\n', '        _buyPrice = newBuyPrice;\n', '    }\n', '\n', '    /// @notice Buy tokens from contract by sending ether\n', '    function buyCoin() payable public returns (bool ok) {\n', '        uint amount = ((msg.value * _buyPrice) * 10 ** uint256(DECIMALS))/1000000000000000000;               // calculates the amount\n', '        require ((_amounToSale - _saledTotal)>=amount);\n', '        balances[msg.sender] = balances[msg.sender].add(amount);\n', '        _saledTotal = _saledTotal.add(amount);\n', '        _totalEther += msg.value;\n', '        return true;\n', '    }\n', '\n', '    function dispatchTo(address target, uint256 amount) onlyOwner public returns (bool ok) {\n', '        require ((_amounToSale - _saledTotal)>=amount);\n', '        balances[target] = balances[target].add(amount);\n', '        _saledTotal = _saledTotal.add(amount);\n', '        return true;\n', '    }\n', '\n', '    function withdrawTo(address _target, uint256 _value) onlyOwner public returns (bool ok) {\n', '        require(_totalEther <= _value);\n', '        _totalEther -= _value;\n', '        _target.transfer(_value);\n', '        return true;\n', '    }\n', '    \n', '    function () payable public {\n', '    }\n', '\n', '}']
