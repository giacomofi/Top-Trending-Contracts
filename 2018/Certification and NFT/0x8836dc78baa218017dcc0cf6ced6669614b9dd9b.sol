['pragma solidity ^0.4.24;\n', '\n', 'interface token {\n', '    function transfer(address receiver, uint amount) external returns (bool);\n', '    function balanceOf(address who) external returns (uint256);\n', '}\n', '\n', 'contract MoatAddress {\n', '\n', '    event eSetAddr(string AddrName, address TargetAddr);\n', '\n', '    mapping(bytes32 => address) internal addressBook;\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == getAddr("admin"));\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        addressBook[keccak256("owner")] = msg.sender;\n', '        addressBook[keccak256("admin")] = msg.sender;\n', '    }\n', '\n', '    function setAddr(string AddrName, address Addr) public {\n', '        require(\n', '            msg.sender == getAddr("owner") ||\n', '            msg.sender == getAddr("admin")\n', '        );\n', '        addressBook[keccak256(AddrName)] = Addr;\n', '        emit eSetAddr(AddrName, Addr);\n', '    }\n', '\n', '    function getAddr(string AddrName) public view returns(address AssignedAddress) {\n', '        address realAddress = addressBook[keccak256(AddrName)];\n', '        require(realAddress != address(0));\n', '        return realAddress;\n', '    }\n', '\n', '    function SendERC20ToAsset(address tokenAddress) onlyAdmin public {\n', '        token tokenFunctions = token(tokenAddress);\n', '        uint256 tokenBal = tokenFunctions.balanceOf(address(this));\n', '        tokenFunctions.transfer(getAddr("asset"), tokenBal);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'interface token {\n', '    function transfer(address receiver, uint amount) external returns (bool);\n', '    function balanceOf(address who) external returns (uint256);\n', '}\n', '\n', 'contract MoatAddress {\n', '\n', '    event eSetAddr(string AddrName, address TargetAddr);\n', '\n', '    mapping(bytes32 => address) internal addressBook;\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == getAddr("admin"));\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        addressBook[keccak256("owner")] = msg.sender;\n', '        addressBook[keccak256("admin")] = msg.sender;\n', '    }\n', '\n', '    function setAddr(string AddrName, address Addr) public {\n', '        require(\n', '            msg.sender == getAddr("owner") ||\n', '            msg.sender == getAddr("admin")\n', '        );\n', '        addressBook[keccak256(AddrName)] = Addr;\n', '        emit eSetAddr(AddrName, Addr);\n', '    }\n', '\n', '    function getAddr(string AddrName) public view returns(address AssignedAddress) {\n', '        address realAddress = addressBook[keccak256(AddrName)];\n', '        require(realAddress != address(0));\n', '        return realAddress;\n', '    }\n', '\n', '    function SendERC20ToAsset(address tokenAddress) onlyAdmin public {\n', '        token tokenFunctions = token(tokenAddress);\n', '        uint256 tokenBal = tokenFunctions.balanceOf(address(this));\n', '        tokenFunctions.transfer(getAddr("asset"), tokenBal);\n', '    }\n', '\n', '}']
