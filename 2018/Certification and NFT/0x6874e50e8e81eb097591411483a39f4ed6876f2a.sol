['pragma solidity 0.4.25; /*\n', '\n', '___________________________________________________________________\n', '  _      _                                        ______           \n', '  |  |  /          /                                /              \n', '--|-/|-/-----__---/----__----__---_--_----__-------/-------__------\n', "  |/ |/    /___) /   /   ' /   ) / /  ) /___)     /      /   )     \n", '__/__|____(___ _/___(___ _(___/_/_/__/_(___ _____/______(___/__o_o_\n', '\n', '\n', '\n', '##    ## ######## ##      ##    ########  ######## ##     ## \n', '##   ##  ##       ##  ##  ##    ##     ## ##        ##   ##  \n', '##  ##   ##       ##  ##  ##    ##     ## ##         ## ##   \n', '#####    ######   ##  ##  ##    ##     ## ######      ###    \n', '##  ##   ##       ##  ##  ##    ##     ## ##         ## ##   \n', '##   ##  ##       ##  ##  ##    ##     ## ##        ##   ##  \n', '##    ## ########  ###  ###     ########  ######## ##     ## \n', '\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', "// 'KewDex' Token contract with following functionalities:\n", '//      => In-built ICO functionality\n', '//      => ERC20 Compliance\n', '//      => Higher control of ICO by owner\n', '//      => selfdestruct functionality\n', '//      => SafeMath implementation \n', '//      => Air-drop\n', '//      => User whitelisting\n', '//      => Minting/Burning tokens by owner\n', '//\n', '// Name             : KewDex\n', '// Symbol           : KEW\n', '// Total supply     : 75,000,000,000 (75 Billion)\n', '// Reserved for ICO : 60,000,000,000  (60 Billion)\n', '// Decimals         : 8\n', '//\n', '// Copyright (c) 2018 KewDex Inc. ( https://KewDex.com ) The MIT Licence.\n', '// Contract designed by: EtherAuthority ( https://EtherAuthority.io ) \n', '// ----------------------------------------------------------------------------\n', '*/ \n', '\n', '\n', '//*******************************************************************//\n', '//------------------------ SafeMath Library -------------------------//\n', '//*******************************************************************//\n', '    /**\n', '     * @title SafeMath\n', '     * @dev Math operations with safety checks that throw on error\n', '     */\n', '    library SafeMath {\n', '      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '          return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '      }\n', '    \n', '      function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '      }\n', '    \n', '      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '      }\n', '    \n', '      function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '      }\n', '    }\n', '\n', '\n', '//*******************************************************************//\n', '//------------------ Contract to Manage Ownership -------------------//\n', '//*******************************************************************//\n', '    \n', '    contract owned {\n', '        address public owner;\n', '        \n', '         constructor () public {\n', '            owner = msg.sender;\n', '        }\n', '    \n', '        modifier onlyOwner {\n', '            require(msg.sender == owner);\n', '            _;\n', '        }\n', '    \n', '        function transferOwnership(address newOwner) onlyOwner public {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '    \n', '    interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', '\n', '//***************************************************************//\n', '//------------------ ERC20 Standard Template -------------------//\n', '//***************************************************************//\n', '    \n', '    contract TokenERC20 {\n', '        // Public variables of the token\n', '        using SafeMath for uint256;\n', '        string public name;\n', '        string public symbol;\n', '        uint256 public decimals = 8; \n', '        uint256 public totalSupply;\n', '        uint256 public reservedForICO;\n', '        bool public safeguard = false;  //putting safeguard on will halt all non-owner functions\n', '    \n', '        // This creates an array with all balances\n', '        mapping (address => uint256) public balanceOf;\n', '        mapping (address => mapping (address => uint256)) public allowance;\n', '    \n', '        // This generates a public event on the blockchain that will notify clients\n', '        event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '        // This notifies clients about the amount burnt\n', '        event Burn(address indexed from, uint256 value);\n', '    \n', '        /**\n', '         * Constrctor function\n', '         *\n', '         * Initializes contract with initial supply tokens to the creator of the contract\n', '         */\n', '        constructor (\n', '            uint256 initialSupply,\n', '            uint256 allocatedForICO,\n', '            string tokenName,\n', '            string tokenSymbol\n', '        ) public {\n', '            totalSupply = initialSupply * (1e8);       // Update total supply with the decimal amount\n', '            reservedForICO = allocatedForICO * (1e8);   // Tokens reserved For ICO\n', '            balanceOf[this] = reservedForICO;               // 60 Billion Tokens will remain in the contract\n', '            balanceOf[msg.sender] = totalSupply - reservedForICO; // Rest of tokens will be sent to owner\n', '            name = tokenName;                               // Set the name for display purposes\n', '            symbol = tokenSymbol;                           // Set the symbol for display purposes\n', '        }\n', '    \n', '        /**\n', '         * Internal transfer, only can be called by this contract\n', '         */\n', '        function _transfer(address _from, address _to, uint _value) internal {\n', '            require(!safeguard);\n', '            // Prevent transfer to 0x0 address. Use burn() instead\n', '            require(_to != 0x0);\n', '            // Check if the sender has enough\n', '            require(balanceOf[_from] >= _value);\n', '            // Check for overflows\n', '            require(balanceOf[_to].add(_value) > balanceOf[_to]);\n', '            // Save this for an assertion in the future\n', '            uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\n', '            // Subtract from the sender\n', '            balanceOf[_from] = balanceOf[_from].sub(_value);\n', '            // Add the same to the recipient\n', '            balanceOf[_to] = balanceOf[_to].add(_value);\n', '            emit Transfer(_from, _to, _value);\n', '            // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '            assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n', '        }\n', '    \n', '        /**\n', '         * Transfer tokens\n', '         *\n', '         * Send `_value` tokens to `_to` from your account\n', '         *\n', '         * @param _to The address of the recipient\n', '         * @param _value the amount to send\n', '         */\n', '        function transfer(address _to, uint256 _value) public returns (bool success) {\n', '            _transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * Transfer tokens from other address\n', '         *\n', '         * Send `_value` tokens to `_to` in behalf of `_from`\n', '         *\n', '         * @param _from The address of the sender\n', '         * @param _to The address of the recipient\n', '         * @param _value the amount to send\n', '         */\n', '        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '            require(!safeguard);\n', '            require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '            _transfer(_from, _to, _value);\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * Set allowance for other address\n', '         *\n', '         * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '         *\n', '         * @param _spender The address authorized to spend\n', '         * @param _value the max amount they can spend\n', '         */\n', '        function approve(address _spender, uint256 _value) public\n', '            returns (bool success) {\n', '            require(!safeguard);\n', '            allowance[msg.sender][_spender] = _value;\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * Set allowance for other address and notify\n', '         *\n', '         * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '         *\n', '         * @param _spender The address authorized to spend\n', '         * @param _value the max amount they can spend\n', '         * @param _extraData some extra information to send to the approved contract\n', '         */\n', '        function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '            public\n', '            returns (bool success) {\n', '            require(!safeguard);\n', '            tokenRecipient spender = tokenRecipient(_spender);\n', '            if (approve(_spender, _value)) {\n', '                spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '                return true;\n', '            }\n', '        }\n', '    \n', '        /**\n', '         * Destroy tokens\n', '         *\n', '         * Remove `_value` tokens from the system irreversibly\n', '         *\n', '         * @param _value the amount of money to burn\n', '         */\n', '        function burn(uint256 _value) public returns (bool success) {\n', '            require(!safeguard);\n', '            require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);            // Subtract from the sender\n', '            totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\n', '            emit Burn(msg.sender, _value);\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * Destroy tokens from other account\n', '         *\n', '         * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '         *\n', '         * @param _from the address of the sender\n', '         * @param _value the amount of money to burn\n', '         */\n', '        function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '            require(!safeguard);\n', '            require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '            require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '            balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the targeted balance\n', "            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);             // Subtract from the sender's allowance\n", '            totalSupply = totalSupply.sub(_value);                              // Update totalSupply\n', '            emit  Burn(_from, _value);\n', '            return true;\n', '        }\n', '        \n', '    }\n', '    \n', '//************************************************************************//\n', '//---------------------  KEWDEX MAIN CODE STARTS HERE --------------------//\n', '//************************************************************************//\n', '    \n', '    contract KewDex is owned, TokenERC20 {\n', '        \n', '        /*************************************/\n', '        /*  User whitelisting functionality  */\n', '        /*************************************/\n', '        bool public whitelistingStatus = false;\n', '        mapping (address => bool) public whitelisted;\n', '        \n', '        /**\n', '         * Change whitelisting status on or off\n', '         *\n', '         * When whitelisting is true, then crowdsale will only accept investors who are whitelisted.\n', '         */\n', '        function changeWhitelistingStatus() onlyOwner public{\n', '            if (whitelistingStatus == false){\n', '                whitelistingStatus = true;\n', '            }\n', '            else{\n', '                whitelistingStatus = false;    \n', '            }\n', '        }\n', '        \n', '        /**\n', '         * Whitelist any user address - only Owner can do this\n', '         *\n', '         * It will add user address in whitelisted mapping\n', '         */\n', '        function whitelistUser(address userAddress) onlyOwner public{\n', '            require(whitelistingStatus == true);\n', '            require(userAddress != 0x0);\n', '            whitelisted[userAddress] = true;\n', '        }\n', '        \n', '        /**\n', '         * Whitelist Many user address at once - only Owner can do this\n', '         * It will require maximum of 150 addresses to prevent block gas limit max-out and DoS attack\n', '         * It will add user address in whitelisted mapping\n', '         */\n', '        function whitelistManyUsers(address[] userAddresses) onlyOwner public{\n', '            require(whitelistingStatus == true);\n', '            uint256 addressCount = userAddresses.length;\n', '            require(addressCount <= 150);\n', '            for(uint256 i = 0; i < addressCount; i++){\n', '                require(userAddresses[i] != 0x0);\n', '                whitelisted[userAddresses[i]] = true;\n', '            }\n', '        }\n', '        \n', '        \n', '        \n', '        /********************************/\n', '        /* Code for the ERC20 KEW Token */\n', '        /********************************/\n', '    \n', '        /* Public variables of the token */\n', '        string private tokenName = "KewDex";\n', '        string private tokenSymbol = "KEW";\n', '        uint256 private initialSupply = 75000000000;     // 75 Billion\n', '        uint256 private allocatedForICO = 60000000000;   // 60 Billion\n', '        \n', '        \n', '        /* Records for the fronzen accounts */\n', '        mapping (address => bool) public frozenAccount;\n', '        \n', '        /* This generates a public event on the blockchain that will notify clients */\n', '        event FrozenFunds(address target, bool frozen);\n', '    \n', '        /* Initializes contract with initial supply tokens to the creator of the contract */\n', '        constructor () TokenERC20(initialSupply, allocatedForICO, tokenName, tokenSymbol) public {}\n', '\n', '        /* Internal transfer, only can be called by this contract */\n', '        function _transfer(address _from, address _to, uint _value) internal {\n', '            require(!safeguard);\n', '            require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n', '            require (balanceOf[_from] >= _value);               // Check if the sender has enough\n', '            require (balanceOf[_to].add(_value) >= balanceOf[_to]); // Check for overflows\n', '            require(!frozenAccount[_from]);                     // Check if sender is frozen\n', '            require(!frozenAccount[_to]);                       // Check if recipient is frozen\n', '            balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the sender\n', '            balanceOf[_to] = balanceOf[_to].add(_value);        // Add the same to the recipient\n', '            emit Transfer(_from, _to, _value);\n', '        }\n', '        \n', '        /// @notice Create `mintedAmount` tokens and send it to `target`\n', '        /// @param target Address to receive the tokens\n', '        /// @param mintedAmount the amount of tokens it will receive\n', '        function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '            balanceOf[target] = balanceOf[target].add(mintedAmount);\n', '            totalSupply = totalSupply.add(mintedAmount);\n', '            emit Transfer(0, this, mintedAmount);\n', '            emit Transfer(this, target, mintedAmount);\n', '        }\n', '\n', '        /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '        /// @param target Address to be frozen\n', '        /// @param freeze either to freeze it or not\n', '        function freezeAccount(address target, bool freeze) onlyOwner public {\n', '                frozenAccount[target] = freeze;\n', '            emit  FrozenFunds(target, freeze);\n', '        }\n', '\n', '        /******************************/\n', '        /* Code for the KEW Crowdsale */\n', '        /******************************/\n', '        \n', '        /* TECHNICAL SPECIFICATIONS:\n', '        \n', '        => ICO starts           :  Will be specified by owner\n', '        => ICO Ends             :  Will be specified by owner\n', '        => Token Exchange Rate  :  1 ETH = 45,000,000 Tokens \n', '        => Bonus                :  66%   \n', '        => Coins reserved for ICO : 60,000,000,000  (60 Billion)\n', '        => Contribution Limits  : No minimum or maximum Contribution \n', '        => Ether Withdrawal     : Ether can only be transfered after ICO is over\n', '\n', '        */\n', '\n', '        //public variables for the Crowdsale\n', '        uint256 public icoStartDate = 123 ;         // ICO start timestamp will be updated by owner after contract deployment\n', '        uint256 public icoEndDate   = 999999999999; // ICO end timestamp will be updated by owner after contract deployment\n', '        uint256 public exchangeRate = 45000000;     // 1 ETH = 45 Million Tokens \n', '        uint256 public tokensSold = 0;              // How many tokens sold through crowdsale\n', '        uint256 public purchaseBonus = 66;          // Purchase Bonus purcentage - 66%\n', '        \n', '        //@dev fallback function, only accepts ether if pre-sale or ICO is running or Reject\n', '        function () payable external {\n', '            require(!safeguard);\n', '            require(!frozenAccount[msg.sender]);\n', '            if(whitelistingStatus == true) { require(whitelisted[msg.sender]); }\n', '            require(icoStartDate < now && icoEndDate > now);\n', '            // calculate token amount to be sent\n', '            uint256 token = msg.value.mul(exchangeRate).div(1e10);              //weiamount * exchangeRate\n', '            uint256 finalTokens = token.add(calculatePurchaseBonus(token));     //add bonus if available\n', '            tokensSold = tokensSold.add(finalTokens);\n', '            _transfer(this, msg.sender, finalTokens);                           //makes the transfers\n', '            \n', '        }\n', '\n', '        \n', '        //calculating purchase bonus\n', '        //SafeMath library is not used here at some places intentionally, as overflow is impossible here\n', '        //And thus it saves gas cost if we avoid using SafeMath in such cases\n', '        function calculatePurchaseBonus(uint256 token) internal view returns(uint256){\n', '            if(purchaseBonus > 0){\n', '                return token.mul(purchaseBonus).div(100);  //66% bonus\n', '            }\n', '            else{\n', '                return 0;\n', '            }\n', '        }\n', '        \n', '\n', '        //Function to update an ICO parameter.\n', '        //It requires: timestamp of start and end date, exchange rate (1 ETH = ? Tokens)\n', '        //Owner need to make sure the contract has enough tokens for ICO. \n', '        //If not enough, then he needs to transfer some tokens into contract addresss from his wallet\n', '        //If there are no tokens in smart contract address, then ICO will not work.\n', '        function updateCrowdsale(uint256 icoStartDateNew, uint256 icoEndDateNew, uint256 exchangeRateNew) onlyOwner public {\n', '            require(icoStartDateNew < icoEndDateNew);\n', '            icoStartDate = icoStartDateNew;\n', '            icoEndDate = icoEndDateNew;\n', '            exchangeRate = exchangeRateNew;\n', '        }\n', '        \n', '        //Stops an ICO.\n', '        //It will just set the ICO end date to zero and thus it will stop an ICO\n', '        function stopICO() onlyOwner public{\n', '            icoEndDate = 0;\n', '        }\n', '        \n', '        //function to check wheter ICO is running or not. \n', '        //It will return current state of the crowdsale\n', '        function icoStatus() public view returns(string){\n', '            if(icoStartDate < now && icoEndDate > now ){\n', '                return "ICO is running";\n', '            }else if(icoStartDate > now){\n', '                return "ICO has not started yet";\n', '            }else{\n', '                return "ICO is over";\n', '            }\n', '        }\n', '        \n', '        //Function to set ICO Exchange rate. \n', '        //1 ETH = How many Tokens ?\n', '        function setICOExchangeRate(uint256 newExchangeRate) onlyOwner public {\n', '            exchangeRate=newExchangeRate;\n', '        }\n', '        \n', '        //Function to update ICO Purchase Bonus. \n', '        //Enter percentage of the bonus. eg, 66 for 66% bonus\n', '        function updatePurchaseBonus(uint256 newPurchaseBonus) onlyOwner public {\n', '            purchaseBonus=newPurchaseBonus;\n', '        }\n', '        \n', '        //Just in case, owner wants to transfer Tokens from contract to owner address\n', '        function manualWithdrawToken(uint256 _amount) onlyOwner public {\n', '            uint256 tokenAmount = _amount * (1e8);\n', '            _transfer(this, msg.sender, tokenAmount);\n', '        }\n', '          \n', '        //When owner wants to transfer Ether from contract to owner address\n', '        //ICO must be over in order to do the ether transfer\n', '        //Entire Ether balance will be transfered to owner address\n', '        function manualWithdrawEther() onlyOwner public{\n', "            require(icoEndDate < now, 'ICO is not over!');\n", '            address(owner).transfer(address(this).balance);\n', '        }\n', '        \n', '        //selfdestruct function. just in case owner decided to destruct this contract.\n', '        function destructContract() onlyOwner public{\n', '            selfdestruct(owner);\n', '        }\n', '        \n', '        /**\n', '         * Change safeguard status on or off\n', '         *\n', '         * When safeguard is true, then all the non-owner functions will stop working.\n', '         * When safeguard is false, then all the functions will resume working back again!\n', '         */\n', '        function changeSafeguardStatus() onlyOwner public{\n', '            if (safeguard == false){\n', '                safeguard = true;\n', '            }\n', '            else{\n', '                safeguard = false;    \n', '            }\n', '        }\n', '        \n', '        \n', '        /********************************/\n', '        /* Code for the Air drop of KEW */\n', '        /********************************/\n', '        \n', '        /**\n', '         * Run an Air-Drop\n', '         *\n', '         * It requires an array of all the addresses and amount of tokens to distribute\n', '         * It will only process first 150 recipients. That limit is fixed to prevent gas limit\n', '         */\n', '        function airdrop(address[] recipients,uint tokenAmount) public onlyOwner {\n', '            uint256 addressCount = recipients.length;\n', '            require(addressCount <= 150);\n', '            for(uint i = 0; i < addressCount; i++)\n', '            {\n', '                  //This will loop through all the recipients and send them the specified tokens\n', '                  _transfer(this, recipients[i], tokenAmount * (1e8));\n', '            }\n', '        }\n', '}']