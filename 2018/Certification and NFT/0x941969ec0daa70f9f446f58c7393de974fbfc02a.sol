['pragma solidity 0.4.15;\n', '\n', 'contract Ambi2 {\n', '    function claimFor(address _address, address _owner) returns(bool);\n', '    function hasRole(address _from, bytes32 _role, address _to) constant returns(bool);\n', '    function isOwner(address _node, address _owner) constant returns(bool);\n', '}\n', '\n', 'contract Ambi2Enabled {\n', '    Ambi2 ambi2;\n', '\n', '    modifier onlyRole(bytes32 _role) {\n', '        if (address(ambi2) != 0x0 && ambi2.hasRole(this, _role, msg.sender)) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    // Perform only after claiming the node, or claim in the same tx.\n', '    function setupAmbi2(Ambi2 _ambi2) returns(bool) {\n', '        if (address(ambi2) != 0x0) {\n', '            return false;\n', '        }\n', '\n', '        ambi2 = _ambi2;\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract Ambi2EnabledFull is Ambi2Enabled {\n', '    // Setup and claim atomically.\n', '    function setupAmbi2(Ambi2 _ambi2) returns(bool) {\n', '        if (address(ambi2) != 0x0) {\n', '            return false;\n', '        }\n', '        if (!_ambi2.claimFor(this, msg.sender) && !_ambi2.isOwner(this, msg.sender)) {\n', '            return false;\n', '        }\n', '\n', '        ambi2 = _ambi2;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract AssetProxyInterface {\n', '    function transferFromWithReference(address _from, address _to, uint _value, string _reference) returns(bool);\n', '}\n', '\n', 'contract DeviceDataStorage is Ambi2EnabledFull {\n', '\n', '    uint fee;\n', '    address feeReceiver;\n', '\n', '    AssetProxyInterface public assetProxy;\n', '\n', '    struct Storage {\n', '        address device;\n', '        bytes32 description;\n', '        uint number;\n', '        string additionalInfo;\n', '    }\n', '\n', '    mapping (address => uint) public recordId;\n', '    mapping (address => mapping (uint => Storage)) public recording;\n', '\n', '    event DataWasRecorded(address device, uint id, bytes32 description, uint number, string additionalInfo);\n', '\n', "    function setAssetProxy(AssetProxyInterface _assetProxy) onlyRole('admin') returns(bool) {\n", '        assetProxy = AssetProxyInterface(_assetProxy);\n', '        return true;\n', '    }\n', '\n', "    function setFeeRecieverValue(uint _fee, address _feeReceiver) onlyRole('admin') returns(bool) {\n", '        fee = _fee;\n', '        feeReceiver = _feeReceiver;\n', '        return true;\n', '    }\n', '\n', '    function recordInfo(bytes32 _description, uint _number, string _additionalInfo) returns(bool) {\n', "        require(assetProxy.transferFromWithReference(msg.sender, feeReceiver, fee, 'storage'));\n", '\n', '        recording[msg.sender][recordId[msg.sender]].device = msg.sender;\n', '        recording[msg.sender][recordId[msg.sender]].description = _description;\n', '        recording[msg.sender][recordId[msg.sender]].number = _number;\n', '        recording[msg.sender][recordId[msg.sender]].additionalInfo = _additionalInfo;\n', '        DataWasRecorded(msg.sender, recordId[msg.sender], _description, _number, _additionalInfo);\n', '        recordId[msg.sender]++;\n', '        return true;\n', '    }\n', '\n', '    function deleteRecording(uint _id) returns(bool) {\n', '        delete recording[msg.sender][_id];\n', '        return true;\n', '    }\n', '\n', '    function getRecording(address _device, uint _id) constant returns(address, bytes32, uint, string) {\n', '        Storage memory stor = recording[_device][_id];\n', '        return (stor.device, stor.description, stor.number, stor.additionalInfo);\n', '    }\n', '}']