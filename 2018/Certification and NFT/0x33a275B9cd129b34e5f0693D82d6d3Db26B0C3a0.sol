['pragma solidity ^0.4.18;\n', '\n', '\n', 'contract InterfaceContentCreatorUniverse {\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function priceOf(uint256 _tokenId) public view returns (uint256 price);\n', '  function getNextPrice(uint price, uint _tokenId) public pure returns (uint);\n', '  function lastSubTokenBuyerOf(uint tokenId) public view returns(address);\n', '  function lastSubTokenCreatorOf(uint tokenId) public view returns(address);\n', '\n', '  //\n', '  function createCollectible(uint256 tokenId, uint256 _price, address creator, address owner) external ;\n', '}\n', '\n', 'contract InterfaceYCC {\n', '  function payForUpgrade(address user, uint price) external  returns (bool success);\n', '  function mintCoinsForOldCollectibles(address to, uint256 amount, address universeOwner) external  returns (bool success);\n', '  function tradePreToken(uint price, address buyer, address seller, uint burnPercent, address universeOwner) external;\n', '  function payoutForMining(address user, uint amount) external;\n', '  uint256 public totalSupply;\n', '}\n', '\n', 'contract InterfaceMining {\n', '  function createMineForToken(uint tokenId, uint level, uint xp, uint nextLevelBreak, uint blocknumber) external;\n', '  function payoutMining(uint tokenId, address owner, address newOwner) external;\n', '  function levelUpMining(uint tokenId) external;\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Owned {\n', '  // The addresses of the accounts (or contracts) that can execute actions within each roles.\n', '  address public ceoAddress;\n', '  address public cooAddress;\n', '  address private newCeoAddress;\n', '  address private newCooAddress;\n', '\n', '\n', '  function Owned() public {\n', '      ceoAddress = msg.sender;\n', '      cooAddress = msg.sender;\n', '  }\n', '\n', '  /*** ACCESS MODIFIERS ***/\n', '  /// @dev Access modifier for CEO-only functionality\n', '  modifier onlyCEO() {\n', '    require(msg.sender == ceoAddress);\n', '    _;\n', '  }\n', '\n', '  /// @dev Access modifier for COO-only functionality\n', '  modifier onlyCOO() {\n', '    require(msg.sender == cooAddress);\n', '    _;\n', '  }\n', '\n', '  /// Access modifier for contract owner only functionality\n', '  modifier onlyCLevel() {\n', '    require(\n', '      msg.sender == ceoAddress ||\n', '      msg.sender == cooAddress\n', '    );\n', '    _;\n', '  }\n', '\n', '  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n', '  /// @param _newCEO The address of the new CEO\n', '  function setCEO(address _newCEO) public onlyCEO {\n', '    require(_newCEO != address(0));\n', '    newCeoAddress = _newCEO;\n', '  }\n', '\n', '  /// @dev Assigns a new address to act as the COO. Only available to the current COO.\n', '  /// @param _newCOO The address of the new COO\n', '  function setCOO(address _newCOO) public onlyCEO {\n', '    require(_newCOO != address(0));\n', '    newCooAddress = _newCOO;\n', '  }\n', '\n', '  function acceptCeoOwnership() public {\n', '      require(msg.sender == newCeoAddress);\n', '      require(address(0) != newCeoAddress);\n', '      ceoAddress = newCeoAddress;\n', '      newCeoAddress = address(0);\n', '  }\n', '\n', '  function acceptCooOwnership() public {\n', '      require(msg.sender == newCooAddress);\n', '      require(address(0) != newCooAddress);\n', '      cooAddress = newCooAddress;\n', '      newCooAddress = address(0);\n', '  }\n', '\n', '  mapping (address => bool) public youCollectContracts;\n', '  function addYouCollectContract(address contractAddress, bool active) public onlyCOO {\n', '    youCollectContracts[contractAddress] = active;\n', '  }\n', '  modifier onlyYCC() {\n', '    require(youCollectContracts[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  InterfaceYCC ycc;\n', '  InterfaceContentCreatorUniverse yct;\n', '  InterfaceMining ycm;\n', '  function setMainYouCollectContractAddresses(address yccContract, address yctContract, address ycmContract, address[] otherContracts) public onlyCOO {\n', '    ycc = InterfaceYCC(yccContract);\n', '    yct = InterfaceContentCreatorUniverse(yctContract);\n', '    ycm = InterfaceMining(ycmContract);\n', '    youCollectContracts[yccContract] = true;\n', '    youCollectContracts[yctContract] = true;\n', '    youCollectContracts[ycmContract] = true;\n', '    for (uint16 index = 0; index < otherContracts.length; index++) {\n', '      youCollectContracts[otherContracts[index]] = true;\n', '    }\n', '  }\n', '  function setYccContractAddress(address yccContract) public onlyCOO {\n', '    ycc = InterfaceYCC(yccContract);\n', '    youCollectContracts[yccContract] = true;\n', '  }\n', '  function setYctContractAddress(address yctContract) public onlyCOO {\n', '    yct = InterfaceContentCreatorUniverse(yctContract);\n', '    youCollectContracts[yctContract] = true;\n', '  }\n', '  function setYcmContractAddress(address ycmContract) public onlyCOO {\n', '    ycm = InterfaceMining(ycmContract);\n', '    youCollectContracts[ycmContract] = true;\n', '  }\n', '\n', '}\n', '\n', 'contract TransferInterfaceERC721YC {\n', '  function transferToken(address to, uint256 tokenId) public returns (bool success);\n', '}\n', 'contract TransferInterfaceERC20 {\n', '  function transfer(address to, uint tokens) public returns (bool success);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ConsenSys/Tokens/blob/master/contracts/eip20/EIP20.sol\n', '// ----------------------------------------------------------------------------\n', 'contract YouCollectBase is Owned {\n', '  using SafeMath for uint256;\n', '\n', '  event RedButton(uint value, uint totalSupply);\n', '\n', '  // Payout\n', '  function payout(address _to) public onlyCLevel {\n', '    _payout(_to, this.balance);\n', '  }\n', '  function payout(address _to, uint amount) public onlyCLevel {\n', '    if (amount>this.balance)\n', '      amount = this.balance;\n', '    _payout(_to, amount);\n', '  }\n', '  function _payout(address _to, uint amount) private {\n', '    if (_to == address(0)) {\n', '      ceoAddress.transfer(amount);\n', '    } else {\n', '      _to.transfer(amount);\n', '    }\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Owner can transfer out any accidentally sent ERC20 tokens\n', '  // ------------------------------------------------------------------------\n', '  function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyCEO returns (bool success) {\n', '      return TransferInterfaceERC20(tokenAddress).transfer(ceoAddress, tokens);\n', '  }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', 'contract ERC721YC is YouCollectBase {\n', '  //\n', '  // ERC721\n', '\n', '    /*** STORAGE ***/\n', '    string public constant NAME = "YouCollectTokens";\n', '    string public constant SYMBOL = "YCT";\n', '    uint256[] public tokens;\n', '\n', '    /// @dev A mapping from collectible IDs to the address that owns them. All collectibles have\n', '    ///  some valid owner address.\n', '    mapping (uint256 => address) public tokenIndexToOwner;\n', '\n', '    /// @dev A mapping from CollectibleIDs to an address that has been approved to call\n', '    ///  transferFrom(). Each Collectible can only have one approved address for transfer\n', '    ///  at any time. A zero value means no approval is outstanding.\n', '    mapping (uint256 => address) public tokenIndexToApproved;\n', '\n', '    // @dev A mapping from CollectibleIDs to the price of the token.\n', '    mapping (uint256 => uint256) public tokenIndexToPrice;\n', '\n', '    /*** EVENTS ***/\n', '    /// @dev The Birth event is fired whenever a new collectible comes into existence.\n', '    event Birth(uint256 tokenId, uint256 startPrice);\n', '    /// @dev The TokenSold event is fired whenever a token is sold.\n', '    event TokenSold(uint256 indexed tokenId, uint256 price, address prevOwner, address winner);\n', '    // ERC721 Transfer\n', '    event Transfer(address indexed from, address indexed to, uint256 tokenId);\n', '    // ERC721 Approval\n', '    event Approval(address indexed owner, address indexed approved, uint256 tokenId);\n', '\n', '    /*** PUBLIC FUNCTIONS ***/\n', '    /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\n', '    /// @param _to The address to be granted transfer approval. Pass address(0) to\n', '    ///  clear all approvals.\n', '    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function approveToken(\n', '      address _to,\n', '      uint256 _tokenId\n', '    ) public returns (bool) {\n', '      // Caller must own token.\n', '      require(_ownsToken(msg.sender, _tokenId));\n', '\n', '      tokenIndexToApproved[_tokenId] = _to;\n', '\n', '      Approval(msg.sender, _to, _tokenId);\n', '      return true;\n', '    }\n', '\n', '\n', '    function getTotalSupply() public view returns (uint) {\n', '      return tokens.length;\n', '    }\n', '\n', '    function implementsERC721() public pure returns (bool) {\n', '      return true;\n', '    }\n', '\n', '\n', '    /// For querying owner of token\n', '    /// @param _tokenId The tokenID for owner inquiry\n', '    /// @dev Required for ERC-721 compliance.\n', '    function ownerOf(uint256 _tokenId)\n', '      public\n', '      view\n', '      returns (address owner)\n', '    {\n', '      owner = tokenIndexToOwner[_tokenId];\n', '    }\n', '\n', '\n', '    function priceOf(uint256 _tokenId) public view returns (uint256 price) {\n', '      price = tokenIndexToPrice[_tokenId];\n', '    }\n', '\n', '\n', '    /// @notice Allow pre-approved user to take ownership of a token\n', '    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function takeOwnership(uint256 _tokenId) public {\n', '      address newOwner = msg.sender;\n', '      address oldOwner = tokenIndexToOwner[_tokenId];\n', '\n', '      // Safety check to prevent against an unexpected 0x0 default.\n', '      require(newOwner != address(0));\n', '\n', '      // Making sure transfer is approved\n', '      require(_approved(newOwner, _tokenId));\n', '\n', '      _transfer(oldOwner, newOwner, _tokenId);\n', '    }\n', '\n', '    /// Owner initates the transfer of the token to another account\n', '    /// @param _to The address for the token to be transferred to.\n', '    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function transfer(\n', '      address _to,\n', '      uint256 _tokenId\n', '    ) public returns (bool) {\n', '      require(_ownsToken(msg.sender, _tokenId));\n', '      _transfer(msg.sender, _to, _tokenId);\n', '      return true;\n', '    }\n', '\n', '    /// Third-party initiates transfer of token from address _from to address _to\n', '    /// @param _from The address for the token to be transferred from.\n', '    /// @param _to The address for the token to be transferred to.\n', '    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function transferFrom(\n', '      address _from,\n', '      address _to,\n', '      uint256 _tokenId\n', '    ) public returns (bool) {\n', '      require(_ownsToken(_from, _tokenId));\n', '      require(_approved(_to, _tokenId));\n', '\n', '      _transfer(_from, _to, _tokenId);\n', '      return true;\n', '    }\n', '\n', '\n', '    /// For checking approval of transfer for address _to\n', '    function _approved(address _to, uint256 _tokenId) private view returns (bool) {\n', '      return tokenIndexToApproved[_tokenId] == _to;\n', '    }\n', '\n', '    /// Check for token ownership\n', '    function _ownsToken(address claimant, uint256 _tokenId) internal view returns (bool) {\n', '      return claimant == tokenIndexToOwner[_tokenId];\n', '    }\n', '    // For Upcoming Price Change Features\n', '    function changeTokenPrice(uint256 newPrice, uint256 _tokenId) external onlyYCC {\n', '      tokenIndexToPrice[_tokenId] = newPrice;\n', '    }\n', '\n', '    /// For querying balance of a particular account\n', '    /// @param _owner The address for balance query\n', '    /// @dev Required for ERC-721 compliance.\n', '    function balanceOf(address _owner) public view returns (uint256 result) {\n', '        uint256 totalTokens = tokens.length;\n', '        uint256 tokenIndex;\n', '        uint256 tokenId;\n', '        result = 0;\n', '        for (tokenIndex = 0; tokenIndex < totalTokens; tokenIndex++) {\n', '          tokenId = tokens[tokenIndex];\n', '          if (tokenIndexToOwner[tokenId] == _owner) {\n', '            result++;\n', '          }\n', '        }\n', '        return result;\n', '    }\n', '\n', '    /// @dev Assigns ownership of a specific Collectible to an address.\n', '    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n', '      //transfer ownership\n', '      tokenIndexToOwner[_tokenId] = _to;\n', '\n', "      // When creating new collectibles _from is 0x0, but we can't account that address.\n", '      if (_from != address(0)) {\n', '        // clear any previously approved ownership exchange\n', '        delete tokenIndexToApproved[_tokenId];\n', '      }\n', '\n', '      // Emit the transfer event.\n', '      Transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '\n', '    /// @param _owner The owner whose celebrity tokens we are interested in.\n', "    /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\n", '    ///  expensive (it walks the entire tokens array looking for tokens belonging to owner),\n', '    ///  but it also returns a dynamic array, which is only supported for web3 calls, and\n', '    ///  not contract-to-contract calls.\n', '    function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\n', '      uint256 tokenCount = balanceOf(_owner);\n', '      if (tokenCount == 0) {\n', '          // Return an empty array\n', '        return new uint256[](0);\n', '      } else {\n', '        uint256[] memory result = new uint256[](tokenCount);\n', '        uint256 totalTokens = getTotalSupply();\n', '        uint256 resultIndex = 0;\n', '\n', '        uint256 tokenIndex;\n', '        uint256 tokenId;\n', '        for (tokenIndex = 0; tokenIndex < totalTokens; tokenIndex++) {\n', '          tokenId = tokens[tokenIndex];\n', '          if (tokenIndexToOwner[tokenId] == _owner) {\n', '            result[resultIndex] = tokenId;\n', '            resultIndex = resultIndex.add(1);\n', '          }\n', '        }\n', '        return result;\n', '      }\n', '    }\n', '\n', '\n', '      // uint256[] storage _result = new uint256[]();\n', '      // uint256 totalTokens = getTotalSupply();\n', '\n', '      // for (uint256 tokenIndex = 0; tokenIndex < totalTokens; tokenIndex++) {\n', '      //   if (tokenIndexToOwner[tokens[tokenIndex]] == _owner) {\n', '      //     _result.push(tokens[tokenIndex]);\n', '      //   }\n', '      // }\n', '      // return _result;\n', '\n', '\n', '    /// @dev returns an array with all token ids\n', '    function getTokenIds() public view returns(uint256[]) {\n', '      return tokens;\n', '    }\n', '\n', '  //\n', '  //  ERC721 end\n', '  //\n', '}\n', '\n', 'contract Universe is ERC721YC {\n', '\n', '  mapping (uint => address) private subTokenCreator;\n', '  mapping (uint => address) private lastSubTokenBuyer;\n', '\n', '  uint16 constant MAX_WORLD_INDEX = 1000;\n', '  uint24 constant MAX_CONTINENT_INDEX = 10000000;\n', '  uint64 constant MAX_SUBCONTINENT_INDEX = 10000000000000;\n', '  uint64 constant MAX_COUNTRY_INDEX = 10000000000000000000;\n', '  uint128 constant FIFTY_TOKENS_INDEX = 100000000000000000000000000000000;\n', '  uint256 constant TRIBLE_TOKENS_INDEX = 1000000000000000000000000000000000000000000000;\n', '  uint256 constant DOUBLE_TOKENS_INDEX = 10000000000000000000000000000000000000000000000000000000000;\n', '  uint8 constant UNIVERSE_TOKEN_ID = 0;\n', '  uint public minSelfBuyPrice = 10 ether;\n', '  uint public minPriceForMiningUpgrade = 5 ether;\n', '\n', '  /*** CONSTRUCTOR ***/\n', '  function Universe() public {\n', '  }\n', '\n', '  function changePriceLimits(uint _minSelfBuyPrice, uint _minPriceForMiningUpgrade) public onlyCOO {\n', '    minSelfBuyPrice = _minSelfBuyPrice;\n', '    minPriceForMiningUpgrade = _minPriceForMiningUpgrade;\n', '  }\n', '\n', '  function getNextPrice(uint price, uint _tokenId) public pure returns (uint) {\n', '    if (_tokenId>DOUBLE_TOKENS_INDEX)\n', '      return price.mul(2);\n', '    if (_tokenId>TRIBLE_TOKENS_INDEX)\n', '      return price.mul(3);\n', '    if (_tokenId>FIFTY_TOKENS_INDEX)\n', '      return price.mul(3).div(2);\n', '    if (price < 1.2 ether)\n', '      return price.mul(200).div(91);\n', '    if (price < 5 ether)\n', '      return price.mul(150).div(91);\n', '    return price.mul(120).div(91);\n', '  }\n', '\n', '\n', '  function buyToken(uint _tokenId) public payable {\n', '    address oldOwner = tokenIndexToOwner[_tokenId];\n', '    uint256 sellingPrice = tokenIndexToPrice[_tokenId];\n', '    require(oldOwner!=msg.sender || sellingPrice > minSelfBuyPrice);\n', '    require(msg.value >= sellingPrice);\n', '    require(sellingPrice > 0);\n', '\n', '    uint256 purchaseExcess = msg.value.sub(sellingPrice);\n', '    uint256 payment = sellingPrice.mul(91).div(100);\n', '    uint256 feeOnce = sellingPrice.sub(payment).div(9);\n', '\n', '    // Update prices\n', '    tokenIndexToPrice[_tokenId] = getNextPrice(sellingPrice, _tokenId);\n', '    // Transfers the Token\n', '    tokenIndexToOwner[_tokenId] = msg.sender;\n', '    // clear any previously approved ownership exchange\n', '    delete tokenIndexToApproved[_tokenId];\n', '    // payout mining reward\n', '    if (_tokenId>MAX_SUBCONTINENT_INDEX) {\n', '      ycm.payoutMining(_tokenId, oldOwner, msg.sender);\n', '      if (sellingPrice > minPriceForMiningUpgrade)\n', '        ycm.levelUpMining(_tokenId);\n', '    }\n', '\n', '    if (_tokenId > 0) {\n', '      // Taxes for Universe owner\n', '      if (tokenIndexToOwner[UNIVERSE_TOKEN_ID]!=address(0))\n', '        tokenIndexToOwner[UNIVERSE_TOKEN_ID].transfer(feeOnce);\n', '      if (_tokenId > MAX_WORLD_INDEX) {\n', '        // Taxes for world owner\n', '        if (tokenIndexToOwner[_tokenId % MAX_WORLD_INDEX]!=address(0))\n', '          tokenIndexToOwner[_tokenId % MAX_WORLD_INDEX].transfer(feeOnce);\n', '        if (_tokenId > MAX_CONTINENT_INDEX) {\n', '          // Taxes for continent owner\n', '          if (tokenIndexToOwner[_tokenId % MAX_CONTINENT_INDEX]!=address(0))\n', '            tokenIndexToOwner[_tokenId % MAX_CONTINENT_INDEX].transfer(feeOnce);\n', '          if (_tokenId > MAX_SUBCONTINENT_INDEX) {\n', '            // Taxes for subcontinent owner\n', '            if (tokenIndexToOwner[_tokenId % MAX_SUBCONTINENT_INDEX]!=address(0))\n', '              tokenIndexToOwner[_tokenId % MAX_SUBCONTINENT_INDEX].transfer(feeOnce);\n', '            if (_tokenId > MAX_COUNTRY_INDEX) {\n', '              // Taxes for country owner\n', '              if (tokenIndexToOwner[_tokenId % MAX_COUNTRY_INDEX]!=address(0))\n', '                tokenIndexToOwner[_tokenId % MAX_COUNTRY_INDEX].transfer(feeOnce);\n', '              lastSubTokenBuyer[UNIVERSE_TOKEN_ID] = msg.sender;\n', '              lastSubTokenBuyer[_tokenId % MAX_WORLD_INDEX] = msg.sender;\n', '              lastSubTokenBuyer[_tokenId % MAX_CONTINENT_INDEX] = msg.sender;\n', '              lastSubTokenBuyer[_tokenId % MAX_SUBCONTINENT_INDEX] = msg.sender;\n', '              lastSubTokenBuyer[_tokenId % MAX_COUNTRY_INDEX] = msg.sender;\n', '            } else {\n', '              if (lastSubTokenBuyer[_tokenId] != address(0))\n', '                lastSubTokenBuyer[_tokenId].transfer(feeOnce*2);\n', '            }\n', '          } else {\n', '            if (lastSubTokenBuyer[_tokenId] != address(0))\n', '              lastSubTokenBuyer[_tokenId].transfer(feeOnce*2);\n', '          }\n', '        } else {\n', '          if (lastSubTokenBuyer[_tokenId] != address(0))\n', '            lastSubTokenBuyer[_tokenId].transfer(feeOnce*2);\n', '        }\n', '      } else {\n', '        if (lastSubTokenBuyer[_tokenId] != address(0))\n', '          lastSubTokenBuyer[_tokenId].transfer(feeOnce*2);\n', '      }\n', '    } else {\n', '      if (lastSubTokenBuyer[_tokenId] != address(0))\n', '        lastSubTokenBuyer[_tokenId].transfer(feeOnce*2);\n', '    }\n', '    // Taxes for collectible creator (first owner)\n', '    if (subTokenCreator[_tokenId]!=address(0))\n', '      subTokenCreator[_tokenId].transfer(feeOnce);\n', '    // Payment for old owner\n', '    if (oldOwner != address(0)) {\n', '      oldOwner.transfer(payment);\n', '    }\n', '\n', '    TokenSold(_tokenId, sellingPrice, oldOwner, msg.sender);\n', '    Transfer(oldOwner, msg.sender, _tokenId);\n', '    // refund when paid too much\n', '    if (purchaseExcess>0)\n', '      msg.sender.transfer(purchaseExcess);\n', '  }\n', '  \n', '  /// For creating Collectible\n', '  function createCollectible(uint256 tokenId, uint256 _price, address creator, address owner) external onlyYCC {\n', '    tokenIndexToPrice[tokenId] = _price;\n', '    tokenIndexToOwner[tokenId] = owner;\n', '    subTokenCreator[tokenId] = creator;\n', '    Birth(tokenId, _price);\n', '    tokens.push(tokenId);\n', '  }\n', '\n', '  function lastSubTokenBuyerOf(uint tokenId) public view returns(address) {\n', '    return lastSubTokenBuyer[tokenId];\n', '  }\n', '  function lastSubTokenCreatorOf(uint tokenId) public view returns(address) {\n', '    return subTokenCreator[tokenId];\n', '  }\n', '\n', '}']