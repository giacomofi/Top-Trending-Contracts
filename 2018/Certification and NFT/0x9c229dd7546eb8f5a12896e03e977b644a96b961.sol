['// Ethertote - Team Eth timelocked smart contract\n', '//\n', '// The following contract offers peace of mind to investors as the\n', '// Eth that will go to the members of the Ethertote team\n', '// will be time-locked over a 12-month period, whereby the \n', '// withdraw functions can only be called when the current timestamp is \n', '// greater than the time specified in each functions\n', '// ----------------------------------------------------------------------------\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '///////////////////////////////////////////////////////////////////////////////\n', '// SafeMath Library \n', '///////////////////////////////////////////////////////////////////////////////\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '///////////////////////////////////////////////////////////////////////////////\n', '// Main contract\n', '//////////////////////////////////////////////////////////////////////////////\n', '\n', 'contract TeamEth {\n', '    using SafeMath for uint256;\n', '\n', '    address public thisContractAddress;\n', '    address public admin;\n', '    \n', '    // time expressed in seconds of 3 months (1 quarter of a year)\n', '    uint public oneQuarterInSeconds = 7890000;\n', '    \n', '    \n', '    // the first team withdrawal can be made after:\n', '    // GMT: Saturday, 1 December 2018 00:00:00\n', '    // expressed as Unix epoch time \n', '    // https://www.epochconverter.com/\n', '    uint256 public unlockDate1 = 1543622400;\n', '    \n', '    uint256 public unlockDate2 = unlockDate1.add(oneQuarterInSeconds);\n', '    uint256 public unlockDate3 = unlockDate2.add(oneQuarterInSeconds);\n', '    uint256 public unlockDate4 = unlockDate3.add(oneQuarterInSeconds);\n', '    \n', '    uint256 public createdAt;\n', '    \n', '    // amount of eth that will be claimed\n', '    uint public ethToBeClaimed;\n', '    \n', '    // percentage that the team can withdraw Eth\n', '    // it can naturally be inferred that quarter4 will be 25%\n', '    uint public percentageQuarter1 = 25;\n', '    uint public percentageQuarter2 = 25;\n', '    uint public percentageQuarter3 = 25;\n', '    \n', '    // 100%\n', '    uint public hundredPercent = 100;\n', '    \n', '    // calculating the number used as the divider\n', '    uint public quarter1 = hundredPercent.div(percentageQuarter1);\n', '    uint public quarter2 = hundredPercent.div(percentageQuarter2);\n', '    uint public quarter3 = hundredPercent.div(percentageQuarter3);\n', '    \n', '    bool public withdraw_1Completed;\n', '    bool public withdraw_2Completed;\n', '    bool public withdraw_3Completed;\n', '\n', '    event Received(address from, uint256 amount);\n', '    event Withdrew(address to, uint256 amount);\n', '    \n', '    modifier onlyAdmin {\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    constructor () public {\n', '        admin = msg.sender;\n', '        thisContractAddress = address(this);\n', '        createdAt = now;\n', '    }\n', '\n', '    // fallback to store all the ether sent to this address\n', '    function() payable public { \n', '    }\n', '    \n', '    function thisContractBalance() public view returns(uint) {\n', '        return address(this).balance;\n', '    }\n', '    \n', '    function setEthToBeClaimed() onlyAdmin public {\n', '        ethToBeClaimed = address(this).balance;\n', '    }\n', '\n', '    // team withdrawal after specified time\n', '    function withdraw_1() onlyAdmin public {\n', '       require(ethToBeClaimed > 0);\n', '       require(withdraw_1Completed == false);\n', '       require(now >= unlockDate1);\n', '       // now allow a percentage of the balance to be claimed\n', '       msg.sender.transfer(ethToBeClaimed.div(quarter1));\n', '       emit Withdrew(msg.sender, ethToBeClaimed.div(quarter1));    // 25%\n', '       withdraw_1Completed = true;\n', '    }\n', '    \n', '    // team withdrawal after specified time\n', '    function withdraw_2() onlyAdmin public {\n', '       require(ethToBeClaimed > 0);\n', '       require(withdraw_2Completed == false);\n', '       require(now >= unlockDate2);\n', '       // now allow a percentage of the balance to be claimed\n', '       msg.sender.transfer(ethToBeClaimed.div(quarter2));\n', '       emit Withdrew(msg.sender, ethToBeClaimed.div(quarter2));    // 25%\n', '       withdraw_2Completed = true;\n', '    }\n', '    \n', '    // team withdrawal after specified time\n', '    function withdraw_3() onlyAdmin public {\n', '       require(ethToBeClaimed > 0);\n', '       require(withdraw_3Completed == false);\n', '       require(now >= unlockDate3);\n', '       // now allow a percentage of the balance to be claimed\n', '       msg.sender.transfer(ethToBeClaimed.div(quarter3));\n', '       emit Withdrew(msg.sender, ethToBeClaimed.div(quarter3));    // 25%\n', '       withdraw_3Completed = true;\n', '    }\n', '    \n', '    // team withdrawal after specified time\n', '    function withdraw_4() onlyAdmin public {\n', '       require(now >= unlockDate4);\n', '       // now allow all remaining balance to be claimed\n', '       msg.sender.transfer(address(this).balance);\n', '       emit Withdrew(msg.sender, address(this).balance);    // all remaining balance\n', '    }\n', '\n', '}']