['pragma solidity 0.4.21;\n', '\n', '// File: contracts/BytesDeserializer.sol\n', '\n', '/*\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' */\n', '\n', '/*\n', ' * Deserialize bytes payloads.\n', ' *\n', ' * Values are in big-endian byte order.\n', ' *\n', ' */\n', 'library BytesDeserializer {\n', '\n', '  /*\n', '   * Extract 256-bit worth of data from the bytes stream.\n', '   */\n', '  function slice32(bytes b, uint offset) public pure returns (bytes32) {\n', '    bytes32 out;\n', '\n', '    for (uint i = 0; i < 32; i++) {\n', '      out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);\n', '    }\n', '    return out;\n', '  }\n', '\n', '  /*\n', '   * Extract Ethereum address worth of data from the bytes stream.\n', '   */\n', '  function sliceAddress(bytes b, uint offset) public pure returns (address) {\n', '    bytes32 out;\n', '\n', '    for (uint i = 0; i < 20; i++) {\n', '      out |= bytes32(b[offset + i] & 0xFF) >> ((i+12) * 8);\n', '    }\n', '    return address(uint(out));\n', '  }\n', '\n', '  /*\n', '   * Extract 128-bit worth of data from the bytes stream.\n', '   */\n', '  function slice16(bytes b, uint offset) public pure returns (bytes16) {\n', '    bytes16 out;\n', '\n', '    for (uint i = 0; i < 16; i++) {\n', '      out |= bytes16(b[offset + i] & 0xFF) >> (i * 8);\n', '    }\n', '    return out;\n', '  }\n', '\n', '  /*\n', '   * Extract 32-bit worth of data from the bytes stream.\n', '   */\n', '  function slice4(bytes b, uint offset) public pure returns (bytes4) {\n', '    bytes4 out;\n', '\n', '    for (uint i = 0; i < 4; i++) {\n', '      out |= bytes4(b[offset + i] & 0xFF) >> (i * 8);\n', '    }\n', '    return out;\n', '  }\n', '\n', '  /*\n', '   * Extract 16-bit worth of data from the bytes stream.\n', '   */\n', '  function slice2(bytes b, uint offset) public pure returns (bytes2) {\n', '    bytes2 out;\n', '\n', '    for (uint i = 0; i < 2; i++) {\n', '      out |= bytes2(b[offset + i] & 0xFF) >> (i * 8);\n', '    }\n', '    return out;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/KYCPayloadDeserializer.sol\n', '\n', '/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' */\n', '\n', '\n', '/**\n', ' * A mix-in contract to decode AML payloads.\n', ' *\n', ' * @notice This should be a library, but for the complexity and toolchain fragility risks involving of linking library inside library, we put this as a mix-in.\n', ' */\n', 'contract KYCPayloadDeserializer {\n', '\n', '  using BytesDeserializer for bytes;\n', '\n', '  /**\n', '   * This function takes the dataframe and unpacks it\n', '   * We have the users ETH address for verification that they are using their own signature\n', '   * CustomerID so we can track customer purchases\n', '   * Min/Max ETH to invest for AML/CTF purposes - this can be supplied by the user OR by the back-end.\n', '   */\n', '  function getKYCPayload(bytes dataframe) public pure returns(address whitelistedAddress, uint128 customerId, uint32 minEth, uint32 maxEth) {\n', '    address _whitelistedAddress = dataframe.sliceAddress(0);\n', '    uint128 _customerId = uint128(dataframe.slice16(20));\n', '    uint32 _minETH = uint32(dataframe.slice4(36));\n', '    uint32 _maxETH = uint32(dataframe.slice4(40));\n', '    return (_whitelistedAddress, _customerId, _minETH, _maxETH);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '// File: contracts/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/ReleasableToken.sol\n', '\n', '/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' *\n', ' * Some of this code has been updated by Pickeringware ltd to faciliatte the new solidity compilation requirements\n', ' */\n', '\n', 'pragma solidity 0.4.21;\n', '\n', '\n', '\n', '\n', '/**\n', ' * Define interface for releasing the token transfer after a successful crowdsale.\n', ' */\n', 'contract ReleasableToken is StandardToken, Ownable {\n', '\n', '  /* The finalizer contract that allows unlift the transfer limits on this token */\n', '  address public releaseAgent;\n', '\n', '  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\n', '  bool public released = false;\n', '\n', '  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\n', '  mapping (address => bool) public transferAgents;\n', '\n', '  /**\n', '   * Limit token transfer until the crowdsale is over.\n', '   *\n', '   */\n', '  modifier canTransfer(address _sender) {\n', '    if(!released) {\n', '        if(!transferAgents[_sender]) {\n', '            revert();\n', '        }\n', '    }\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * Set the contract that can call release and make the token transferable.\n', '   *\n', '   * Design choice. Allow reset the release agent to fix fat finger mistakes.\n', '   */\n', '  function setReleaseAgent() onlyOwner inReleaseState(false) public {\n', '\n', '    // We don&#39;t do interface check here as we might want to a normal wallet address to act as a release agent\n', '    releaseAgent = owner;\n', '  }\n', '\n', '  /**\n', '   * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\n', '   */\n', '  function setTransferAgent(address addr, bool state) onlyReleaseAgent inReleaseState(false) public {\n', '    transferAgents[addr] = state;\n', '  }\n', '\n', '  /**\n', '   * One way function to release the tokens to the wild.\n', '   *\n', '   * Can be called only from the release agent that is the final ICO contract. It is only called if the crowdsale has been success (first milestone reached).\n', '   */\n', '  function releaseTokenTransfer() public onlyReleaseAgent {\n', '    released = true;\n', '  }\n', '\n', '  /** The function can be called only before or after the tokens have been releasesd */\n', '  modifier inReleaseState(bool releaseState) {\n', '    if(releaseState != released) {\n', '        revert();\n', '    }\n', '    _;\n', '  }\n', '\n', '  /** The function can be called only by a whitelisted release agent. */\n', '  modifier onlyReleaseAgent() {\n', '    if(msg.sender != releaseAgent) {\n', '        revert();\n', '    }\n', '    _;\n', '  }\n', '\n', '  function transfer(address _to, uint _value) canTransfer(msg.sender) public returns (bool success) {\n', '    // Call StandardToken.transfer()\n', '   return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) canTransfer(_from) public returns (bool success) {\n', '    // Call StandardToken.transferForm()\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' * \n', ' * Some of this code has been changed by Pickeringware ltd to facilitate solidities new compilation requirements\n', ' */\n', '\n', 'contract MintableToken is ReleasableToken {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts/AMLToken.sol\n', '\n', '/**\n', ' * This contract has been written by Pickeringware ltd in some areas to facilitate custom crwodsale features\n', ' */\n', '\n', 'pragma solidity 0.4.21;\n', '\n', '\n', '\n', '/**\n', ' * The AML Token\n', ' *\n', ' * This subset of MintableCrowdsaleToken gives the Owner a possibility to\n', ' * reclaim tokens from a participant before the token is released\n', ' * after a participant has failed a prolonged AML process.\n', ' *\n', ' * It is assumed that the anti-money laundering process depends on blockchain data.\n', ' * The data is not available before the transaction and not for the smart contract.\n', ' * Thus, we need to implement logic to handle AML failure cases post payment.\n', ' * We give a time window before the token release for the token sale owners to\n', ' * complete the AML and claw back all token transactions that were\n', ' * caused by rejected purchases.\n', ' */\n', 'contract AMLToken is MintableToken {\n', '\n', '  // An event when the owner has reclaimed non-released tokens\n', '  event ReclaimedAllAndBurned(address claimedBy, address fromWhom, uint amount);\n', '\n', '    // An event when the owner has reclaimed non-released tokens\n', '  event ReclaimAndBurned(address claimedBy, address fromWhom, uint amount);\n', '\n', '  /// @dev Here the owner can reclaim the tokens from a participant if\n', '  ///      the token is not released yet. Refund will be handled in sale contract.\n', '  /// We also burn the tokens in the interest of economic value to the token holder\n', '  /// @param fromWhom address of the participant whose tokens we want to claim\n', '  function reclaimAllAndBurn(address fromWhom) public onlyReleaseAgent inReleaseState(false) {\n', '    uint amount = balanceOf(fromWhom);    \n', '    balances[fromWhom] = 0;\n', '    totalSupply = totalSupply.sub(amount);\n', '    \n', '    ReclaimedAllAndBurned(msg.sender, fromWhom, amount);\n', '  }\n', '\n', '  /// @dev Here the owner can reclaim the tokens from a participant if\n', '  ///      the token is not released yet. Refund will be handled in sale contract.\n', '  /// We also burn the tokens in the interest of economic value to the token holder\n', '  /// @param fromWhom address of the participant whose tokens we want to claim\n', '  function reclaimAndBurn(address fromWhom, uint256 amount) public onlyReleaseAgent inReleaseState(false) {       \n', '    balances[fromWhom] = balances[fromWhom].sub(amount);\n', '    totalSupply = totalSupply.sub(amount);\n', '    \n', '    ReclaimAndBurned(msg.sender, fromWhom, amount);\n', '  }\n', '}\n', '\n', '// File: contracts/PickToken.sol\n', '\n', '/*\n', ' * This token is part of Pickeringware ltds smart contracts\n', ' * It is used to specify certain details about the token upon release\n', ' */\n', '\n', '\n', 'contract PickToken is AMLToken {\n', '  string public name = "AX1 Mining token";\n', '  string public symbol = "AX1";\n', '  uint8 public decimals = 5;\n', '}\n', '\n', '// File: contracts/Stoppable.sol\n', '\n', 'contract Stoppable is Ownable {\n', '  bool public halted;\n', '\n', '  event SaleStopped(address owner, uint256 datetime);\n', '\n', '  modifier stopInEmergency {\n', '    require(!halted);\n', '    _;\n', '  }\n', '\n', '  function hasHalted() internal view returns (bool isHalted) {\n', '  \treturn halted;\n', '  }\n', '\n', '   // called by the owner on emergency, triggers stopped state\n', '  function stopICO() external onlyOwner {\n', '    halted = true;\n', '    SaleStopped(msg.sender, now);\n', '  }\n', '}\n', '\n', '// File: contracts/Crowdsale.sol\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' *\n', ' * This base contract has been changed in certain areas by Pickeringware ltd to facilitate extra functionality\n', ' */\n', 'contract Crowdsale is Stoppable {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  PickToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '  address public contractAddr;\n', '  \n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '  uint256 public presaleWeiRaised;\n', '\n', '  // amount of tokens sent\n', '  uint256 public tokensSent;\n', '\n', '  // These store balances of participants by ID, address and in wei, pre-sale wei and tokens\n', '  mapping(uint128 => uint256) public balancePerID;\n', '  mapping(address => uint256) public balanceOf;\n', '  mapping(address => uint256) public presaleBalanceOf;\n', '  mapping(address => uint256) public tokenBalanceOf;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount, uint256 datetime);\n', '\n', '  /*\n', '   * Contructor\n', '   * This initialises the basic crowdsale data\n', '   * It transfers ownership of this token to the chosen beneficiary \n', '  */\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, PickToken _token) public {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '\n', '    token = _token;\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    transferOwnership(_wallet);\n', '  }\n', '\n', '  /*\n', '   * This method has been changed by Pickeringware ltd\n', '   * We have split this method down into overidable functions which may affect how users purchase tokens\n', '   * We also take in a customerID (UUiD v4) which we store in our back-end in order to track users participation\n', '  */ \n', '  function buyTokens(uint128 buyer) internal stopInEmergency {\n', '    require(buyer != 0);\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = tokensToRecieve(weiAmount);\n', '\n', '    // MUST DO REQUIRE AFTER tokens are calculated to check for cap restrictions in stages\n', '    require(validPurchase(tokens));\n', '\n', '    // We move the participants sliders before we mint the tokens to prevent re-entrancy\n', '    finalizeSale(weiAmount, tokens, buyer);\n', '    produceTokens(msg.sender, weiAmount, tokens);\n', '  }\n', '\n', '  // This function was created to be overridden by a parent contract\n', '  function produceTokens(address buyer, uint256 weiAmount, uint256 tokens) internal {\n', '    token.mint(buyer, tokens);\n', '    TokenPurchase(msg.sender, buyer, weiAmount, tokens, now);\n', '  }\n', '\n', '  // This was created to be overriden by stages implementation\n', '  // It will adjust the stage sliders accordingly if needed\n', '  function finalizeSale(uint256 _weiAmount, uint256 _tokens, uint128 _buyer) internal {\n', '    // Collect ETH and send them a token in return\n', '    balanceOf[msg.sender] = balanceOf[msg.sender].add(_weiAmount);\n', '    tokenBalanceOf[msg.sender] = tokenBalanceOf[msg.sender].add(_tokens);\n', '    balancePerID[_buyer] = balancePerID[_buyer].add(_weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(_weiAmount);\n', '    tokensSent = tokensSent.add(_tokens);\n', '  }\n', '  \n', '  // This was created to be overridden by the stages implementation\n', '  // Again, this is dependent on the price of tokens which may or may not be collected in stages\n', '  function tokensToRecieve(uint256 _wei) internal view returns (uint256 tokens) {\n', '    return _wei.div(rate);\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function successfulWithdraw() external onlyOwner stopInEmergency {\n', '    require(hasEnded());\n', '\n', '    owner.transfer(weiRaised);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  // Receives tokens to send as variable for custom stage implementation\n', '  // Has an unused variable _tokens which is necessary for capped sale implementation\n', '  function validPurchase(uint256 _tokens) internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '}\n', '\n', '// File: contracts/CappedCrowdsale.sol\n', '\n', '/**\n', ' * @title CappedCrowdsale\n', ' * @dev Extension of Crowdsale with a max amount of funds raised\n', ' */\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public softCap;\n', '  uint256 public hardCap;\n', '  uint256 public withdrawn;\n', '  bool public canWithdraw;\n', '  address public beneficiary;\n', '\n', '  event BeneficiaryWithdrawal(address admin, uint256 amount, uint256 datetime);\n', '\n', '  // Changed implentation to include soft/hard caps\n', '  function CappedCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, address _beneficiary, uint256 _softCap, uint256 _hardCap, PickToken _token) \n', '    Crowdsale(_startTime, _endTime, _rate, _wallet, _token)\n', '      public {\n', '\n', '    require(_hardCap > 0 && _softCap > 0 && _softCap < _hardCap);\n', '\n', '    softCap = _softCap;\n', '    hardCap = _hardCap;\n', '    withdrawn = 0;\n', '    canWithdraw = false;\n', '    beneficiary = _beneficiary;\n', '  }\n', '\n', '  // overriding Crowdsale#validPurchase to add extra cap logic\n', '  // @return true if investors can buy at the moment\n', '  function validPurchase(uint256 _tokens) internal view returns (bool) {\n', '    bool withinCap = tokensSent.add(_tokens) <= hardCap;\n', '    return super.validPurchase(_tokens) && withinCap;\n', '  }\n', '  \n', '  // overriding Crowdsale#hasEnded to add cap logic\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    bool capReached = tokensSent >= hardCap;\n', '    return super.hasEnded() || capReached;\n', '  }\n', '\n', '  // overriding Crowdsale#successfulWithdraw to add cap logic\n', '  // only allow beneficiary to withdraw if softcap has been reached\n', '  // Uses withdrawn incase a parent contract requires withdrawing softcap early\n', '  function successfulWithdraw() external onlyOwner stopInEmergency {\n', '    require(hasEnded());\n', '    // This is used for extra functionality if necessary, i.e. KYC checks\n', '    require(canWithdraw);\n', '    require(tokensSent > softCap);\n', '\n', '    uint256 withdrawalAmount = weiRaised.sub(withdrawn);\n', '\n', '    withdrawn = withdrawn.add(withdrawalAmount);\n', '\n', '    beneficiary.transfer(withdrawalAmount);\n', '\n', '    BeneficiaryWithdrawal(msg.sender, withdrawalAmount, now);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/SaleStagesLib.sol\n', '\n', '/*\n', ' * SaleStagesLib is a part of Pickeringware ltd&#39;s smart contracts\n', ' * Its intended use is to abstract the implementation of stages away from a contract to ease deployment and codel length\n', ' * It uses a stage struct to store specific details about each stage\n', ' * It has several functions which are used to get/change this data\n', '*/\n', '\n', 'library SaleStagesLib {\n', '\tusing SafeMath for uint256;\n', '\n', '\t// Stores Stage implementation\n', '\tstruct Stage{\n', '        uint256 deadline;\n', '        uint256 tokenPrice;\n', '        uint256 tokensSold;\n', '        uint256 minimumBuy;\n', '        uint256 cap;\n', '\t}\n', '\n', '\t// The struct that is stored by the contract\n', '\t// Contains counter to iterate through map of stages\n', '\tstruct StageStorage {\n', ' \t\tmapping(uint8 => Stage) stages;\n', ' \t\tuint8 stageCount;\n', '\t}\n', '\n', '\t// Initiliase the stagecount to 0\n', '\tfunction init(StageStorage storage self) public {\n', '\t\tself.stageCount = 0;\n', '\t}\n', '\n', '\t// Create stage adds new stage to stages map and increments stage count\n', '\tfunction createStage(\n', '\t\tStageStorage storage self, \n', '\t\tuint8 _stage, \n', '\t\tuint256 _deadline, \n', '\t\tuint256 _price,\n', '\t\tuint256 _minimum,\n', '\t\tuint256 _cap\n', '\t) internal {\n', '        // Ensures stages cannot overlap each other\n', '        uint8 prevStage = _stage - 1;\n', '        require(self.stages[prevStage].deadline < _deadline);\n', '\t\t\n', '        self.stages[_stage].deadline = _deadline;\n', '\t\tself.stages[_stage].tokenPrice = _price;\n', '\t\tself.stages[_stage].tokensSold = 0;\n', '\t\tself.stages[_stage].minimumBuy = _minimum;\n', '\t\tself.stages[_stage].cap = _cap;\n', '\t\tself.stageCount = self.stageCount + 1;\n', '\t}\n', '\n', '   /*\n', '    * Crowdfund state machine management.\n', '    *\n', '    * We make it a function and do not assign the result to a variable, so there is no chance of the variable being stale.\n', '    * Each one of these conditions checks if the time has passed into another stage and therefore, act as appropriate\n', '    */\n', '    function getStage(StageStorage storage self) public view returns (uint8 stage) {\n', '        uint8 thisStage = self.stageCount + 1;\n', '\n', '        for (uint8 i = 0; i < thisStage; i++) {\n', '            if(now <= self.stages[i].deadline){\n', '                return i;\n', '            }\n', '        }\n', '\n', '        return thisStage;\n', '    }\n', '\n', '    // Both of the below are checked on the overridden validPurchase() function\n', '    // Check to see if the tokens they&#39;re about to purchase is above the minimum for this stage\n', '    function checkMinimum(StageStorage storage self, uint8 _stage, uint256 _tokens) internal view returns (bool isValid) {\n', '    \tif(_tokens < self.stages[_stage].minimumBuy){\n', '    \t\treturn false;\n', '    \t} else {\n', '    \t\treturn true;\n', '    \t}\n', '    }\n', '\n', '    // Both of the below are checked on the overridden validPurchase() function\n', '    // Check to see if the tokens they&#39;re about to purchase is above the minimum for this stage\n', '    function changeDeadline(StageStorage storage self, uint8 _stage, uint256 _deadline) internal {\n', '        require(self.stages[_stage].deadline > now);\n', '        self.stages[_stage].deadline = _deadline;\n', '    }\n', '\n', '    // Checks to see if the tokens they&#39;re about to purchase is below the cap for this stage\n', '    function checkCap(StageStorage storage self, uint8 _stage, uint256 _tokens) internal view returns (bool isValid) {\n', '    \tuint256 totalTokens = self.stages[_stage].tokensSold.add(_tokens);\n', '\n', '    \tif(totalTokens > self.stages[_stage].cap){\n', '    \t\treturn false;\n', '    \t} else {\n', '    \t\treturn true;\n', '    \t}\n', '    }\n', '\n', '    // Refund a particular participant, by moving the sliders of stages he participated in\n', '    function refundParticipant(StageStorage storage self, uint256 stage1, uint256 stage2, uint256 stage3, uint256 stage4) internal {\n', '        self.stages[1].tokensSold = self.stages[1].tokensSold.sub(stage1);\n', '        self.stages[2].tokensSold = self.stages[2].tokensSold.sub(stage2);\n', '        self.stages[3].tokensSold = self.stages[3].tokensSold.sub(stage3);\n', '        self.stages[4].tokensSold = self.stages[4].tokensSold.sub(stage4);\n', '    }\n', '    \n', '\t// Both of the below are checked on the overridden validPurchase() function\n', '    // Check to see if the tokens they&#39;re about to purchase is above the minimum for this stage\n', '    function changePrice(StageStorage storage self, uint8 _stage, uint256 _tokenPrice) internal {\n', '        require(self.stages[_stage].deadline > now);\n', '\n', '        self.stages[_stage].tokenPrice = _tokenPrice;\n', '    }\n', '}\n', '\n', '// File: contracts/PickCrowdsale.sol\n', '\n', '/*\n', ' * PickCrowdsale and PickToken are a part of Pickeringware ltd&#39;s smart contracts\n', ' * This uses the SaleStageLib which is also a part of Pickeringware ltd&#39;s smart contracts\n', ' * We create the stages initially in the constructor such that stages cannot be added after the sale has started\n', ' * We then pre-allocate necessary accounts prior to the sale starting\n', ' * This contract implements the stages lib functionality with overriding functions for stages implementation\n', '*/\n', 'contract PickCrowdsale is CappedCrowdsale {\n', '\n', '  using SaleStagesLib for SaleStagesLib.StageStorage;\n', '  using SafeMath for uint256;\n', '\n', '  SaleStagesLib.StageStorage public stages;\n', '\n', '  bool preallocated = false;\n', '  bool stagesSet = false;\n', '  address private founders;\n', '  address private bounty;\n', '  address private buyer;\n', '  uint256 public burntBounty;\n', '  uint256 public burntFounder;\n', '\n', '  event ParticipantWithdrawal(address participant, uint256 amount, uint256 datetime);\n', '  event StagePriceChanged(address admin, uint8 stage, uint256 price);\n', '  event ExtendedStart(uint256 oldStart, uint256 newStart);\n', '\n', '  modifier onlyOnce(bool _check) {\n', '    if(_check) {\n', '      revert();\n', '    }\n', '    _;\n', '  }\n', '\n', '  function PickCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, address _beneficiary, address _buyer, address _founders, address _bounty, uint256 _softCap, uint256 _hardCap, PickToken _token)\n', '  \tCappedCrowdsale(_startTime, _endTime, _rate, _wallet, _beneficiary, _softCap, _hardCap, _token)\n', '     public { \n', '    stages.init();\n', '    stages.createStage(0, _startTime, 0, 0, 0);\n', '    founders = _founders;\n', '    bounty = _bounty;\n', '    buyer = _buyer;\n', '  }\n', '\n', '  function setPreallocations() external onlyOwner onlyOnce(preallocated) {\n', '    preallocate(buyer, 1250000, 10000000000);\n', '    preallocate(founders, 1777777, 0);\n', '    preallocate(bounty, 444445, 0);\n', '    preallocated = true;\n', '  }\n', '\n', '  function setStages() external onlyOwner onlyOnce(stagesSet) {\n', '    stages.createStage(1, startTime.add(1 days), 10000000000, 10000000, 175000000000);  //Deadline 1 day (86400)  after start - price: 0.001  - min: 90 - cap: 1,250,000\n', '    stages.createStage(2, startTime.add(2 days), 11000000000, 5000000, 300000000000); //Deadline 2 days (172800) after start - price: 0.0011 - min: 60 - cap: 3,000,000 \n', '    stages.createStage(3, startTime.add(3 days), 12000000000, 2500000, 575000000000);  //Deadline 4 days (345600) after start - price: 0.0012 - cap: 5,750,000 \n', '    stages.createStage(4, endTime, 15000000000, 1000000, 2000000000000);               //Deadline 1 week after start - price: 0.0015 - cap: 20,000,000 \n', '    stagesSet = true;\n', '  }\n', '\n', '  // Creates new stage for the crowdsale\n', '  // Can ONLY be called by the owner of the contract as should never change after creating them on initialisation\n', '  function createStage(uint8 _stage, uint256 _deadline, uint256 _price, uint256 _minimum, uint256 _cap ) internal onlyOwner {\n', '    stages.createStage(_stage, _deadline, _price, _minimum, _cap);\n', '  }\n', '\n', '  // Creates new stage for the crowdsale\n', '  // Can ONLY be called by the owner of the contract as should never change after creating them on initialisation\n', '  function changePrice(uint8 _stage, uint256 _price) public onlyOwner {\n', '    stages.changePrice(_stage, _price);\n', '    StagePriceChanged(msg.sender, _stage, _price);\n', '  }\n', '\n', '  // Get stage is required to rethen the stage we are currently in\n', '  // This is necessary to check the stage details listed in the below functions\n', '  function getStage() public view returns (uint8 stage) {\n', '    return stages.getStage();\n', '  }\n', '\n', '  function getStageDeadline(uint8 _stage) public view returns (uint256 deadline) { \n', '    return stages.stages[_stage].deadline;\n', '  }\n', '\n', '  function getStageTokensSold(uint8 _stage) public view returns (uint256 sold) { \n', '    return stages.stages[_stage].tokensSold;\n', '  }\n', '\n', '  function getStageCap(uint8 _stage) public view returns (uint256 cap) { \n', '    return stages.stages[_stage].cap;\n', '  }\n', '\n', '  function getStageMinimum(uint8 _stage) public view returns (uint256 min) { \n', '    return stages.stages[_stage].minimumBuy;\n', '  }\n', '\n', '  function getStagePrice(uint8 _stage) public view returns (uint256 price) { \n', '    return stages.stages[_stage].tokenPrice;\n', '  }\n', '\n', '  // This is used for extending the sales start time (and the deadlines of each stage) accordingly\n', '  function extendStart(uint256 _newStart) external onlyOwner {\n', '    require(_newStart > startTime);\n', '    require(_newStart > now); \n', '    require(now < startTime);\n', '\n', '    uint256 difference = _newStart - startTime;\n', '    uint256 oldStart = startTime;\n', '    startTime = _newStart;\n', '    endTime = endTime + difference;\n', '\n', '    // Loop through every stage in the sale\n', '    for (uint8 i = 0; i < 4; i++) {\n', '      // Extend that stages deadline accordingly\n', '      uint256 temp = stages.stages[i].deadline;\n', '      temp = temp + difference;\n', '\n', '      stages.changeDeadline(i, temp);\n', '    }\n', '\n', '    ExtendedStart(oldStart, _newStart);\n', '  }\n', '\n', '  // @Override crowdsale contract to check the current stage price\n', '  // @return tokens investors are due to recieve\n', '  function tokensToRecieve(uint256 _wei) internal view returns (uint256 tokens) {\n', '    uint8 stage = getStage();\n', '    uint256 price = getStagePrice(stage);\n', '\n', '    return _wei.div(price);\n', '  }\n', '\n', '  // overriding Crowdsale validPurchase to add extra stage logic\n', '  // @return true if investors can buy at the moment\n', '  function validPurchase(uint256 _tokens) internal view returns (bool) {\n', '    bool isValid = false;\n', '    uint8 stage = getStage();\n', '\n', '    if(stages.checkMinimum(stage, _tokens) && stages.checkCap(stage, _tokens)){\n', '      isValid = true;\n', '    }\n', '\n', '    return super.validPurchase(_tokens) && isValid;\n', '  }\n', '\n', '  // Override crowdsale finalizeSale function to log balance change plus tokens sold in that stage\n', '  function finalizeSale(uint256 _weiAmount, uint256 _tokens, uint128 _buyer) internal {\n', '    // Collect ETH and send them a token in return\n', '    balanceOf[msg.sender] = balanceOf[msg.sender].add(_weiAmount);\n', '    tokenBalanceOf[msg.sender] = tokenBalanceOf[msg.sender].add(_tokens);\n', '    balancePerID[_buyer] = balancePerID[_buyer].add(_weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(_weiAmount);\n', '    tokensSent = tokensSent.add(_tokens);\n', '\n', '    uint8 stage = getStage();\n', '    stages.stages[stage].tokensSold = stages.stages[stage].tokensSold.add(_tokens);\n', '  }\n', '\n', '  /**\n', '   * Preallocate tokens for the early investors.\n', '   */\n', '  function preallocate(address receiver, uint tokens, uint weiPrice) internal {\n', '    uint decimals = token.decimals();\n', '    uint tokenAmount = tokens * 10 ** decimals;\n', '    uint weiAmount = weiPrice * tokens; \n', '\n', '    presaleWeiRaised = presaleWeiRaised.add(weiAmount);\n', '    tokensSent = tokensSent.add(tokenAmount);\n', '    tokenBalanceOf[receiver] = tokenBalanceOf[receiver].add(tokenAmount);\n', '\n', '    presaleBalanceOf[receiver] = presaleBalanceOf[receiver].add(weiAmount);\n', '\n', '    produceTokens(receiver, weiAmount, tokenAmount);\n', '  }\n', '\n', '  // If the sale is unsuccessful (has halted or reached deadline and didnt reach softcap)\n', '  // Allows participants to withdraw their balance\n', '  function unsuccessfulWithdrawal() external {\n', '      require(balanceOf[msg.sender] > 0);\n', '      require(hasEnded() && tokensSent < softCap || hasHalted());\n', '      uint256 withdrawalAmount;\n', '\n', '      withdrawalAmount = balanceOf[msg.sender];\n', '      balanceOf[msg.sender] = 0; \n', '\n', '      msg.sender.transfer(withdrawalAmount);\n', '      assert(balanceOf[msg.sender] == 0);\n', '\n', '      ParticipantWithdrawal(msg.sender, withdrawalAmount, now);\n', '  }\n', '\n', '  // Burn the percentage of tokens not sold from the founders and bounty wallets\n', '  // Must do it this way as solidity doesnt deal with decimals\n', '  function burnFoundersTokens(uint256 _bounty, uint256 _founders) internal {\n', '      require(_founders < 177777700000);\n', '      require(_bounty < 44444500000);\n', '\n', '      // Calculate the number of tokens to burn from founders and bounty wallet\n', '      burntFounder = _founders;\n', '      burntBounty = _bounty;\n', '\n', '      token.reclaimAndBurn(founders, burntFounder);\n', '      token.reclaimAndBurn(bounty, burntBounty);\n', '  }\n', '}\n', '\n', '// File: contracts/KYCCrowdsale.sol\n', '\n', '/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' *\n', ' * Some implementation has been changed by Pickeringware ltd to achieve custom features\n', ' */\n', '\n', '\n', '\n', '/*\n', ' * A crowdsale that allows only signed payload with server-side specified buy in limits.\n', ' *\n', ' * The token distribution happens as in the allocated crowdsale contract\n', ' */\n', 'contract KYCCrowdsale is KYCPayloadDeserializer, PickCrowdsale {\n', '\n', '  /* Server holds the private key to this address to decide if the AML payload is valid or not. */\n', '  address public signerAddress;\n', '  mapping(address => uint256) public refundable;\n', '  mapping(address => bool) public refunded;\n', '  mapping(address => bool) public blacklist;\n', '\n', '  /* A new server-side signer key was set to be effective */\n', '  event SignerChanged(address signer);\n', '  event TokensReclaimed(address user, uint256 amount, uint256 datetime);\n', '  event AddedToBlacklist(address user, uint256 datetime);\n', '  event RemovedFromBlacklist(address user, uint256 datetime);\n', '  event RefundCollected(address user, uint256 datetime);\n', '  event TokensReleased(address agent, uint256 datetime, uint256 bounty, uint256 founders);\n', '\n', '  /*\n', '   * Constructor.\n', '   */\n', '  function KYCCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, address _beneficiary, address _buyer, address _founders, address _bounty, uint256 _softCap, uint256 _hardCap, PickToken _token) public\n', '  PickCrowdsale(_startTime, _endTime, _rate, _wallet, _beneficiary, _buyer, _founders, _bounty, _softCap, _hardCap, _token)\n', '  {}\n', '\n', '  // This sets the token agent to the contract, allowing the contract to reclaim and burn tokens if necessary\n', '  function setTokenAgent() external onlyOwner {\n', '    // contractAddr = token.owner();\n', '    // Give the sale contract rights to reclaim tokens\n', '    token.setReleaseAgent();\n', '  }\n', '\n', ' /* \n', '  * This function was written by Pickeringware ltd to facilitate a refund action upon failure of KYC analysis\n', '  * \n', '  * It simply allows the participant to withdraw his ether from the sale\n', '  * Moves the crowdsale sliders accordingly\n', '  * Reclaims the users tokens and burns them\n', '  * Blacklists the user to prevent them from buying any more tokens\n', '  *\n', '  * Stage 1, 2, 3, & 4 are all collected from the database prior to calling this function\n', '  * It allows us to calculate how many tokens need to be taken from each individual stage\n', '  */\n', '  function refundParticipant(address participant, uint256 _stage1, uint256 _stage2, uint256 _stage3, uint256 _stage4) external onlyOwner {\n', '    require(balanceOf[participant] > 0);\n', '\n', '    uint256 balance = balanceOf[participant];\n', '    uint256 tokens = tokenBalanceOf[participant];\n', '\n', '    balanceOf[participant] = 0;\n', '    tokenBalanceOf[participant] = 0;\n', '\n', '    // Refund the participant\n', '    refundable[participant] = balance;\n', '\n', '    // Move the crowdsale sliders\n', '    weiRaised = weiRaised.sub(balance);\n', '    tokensSent = tokensSent.sub(tokens);\n', '\n', '    // Reclaim the participants tokens and burn them\n', '    token.reclaimAllAndBurn(participant);\n', '\n', '    // Blacklist participant so they cannot make further purchases\n', '    blacklist[participant] = true;\n', '    AddedToBlacklist(participant, now);\n', '\n', '    stages.refundParticipant(_stage1, _stage2, _stage3, _stage4);\n', '\n', '    TokensReclaimed(participant, tokens, now);\n', '  }\n', '\n', '  // Allows only the beneficiary to release tokens to people\n', '  // This is needed as the token is owned by the contract, in order to mint tokens\n', '  // therefore, the owner essentially gives permission for the contract to release tokens\n', '  function releaseTokens(uint256 _bounty, uint256 _founders) onlyOwner external {\n', '      // Unless the hardcap was reached, theremust be tokens to burn\n', '      require(_bounty > 0 || tokensSent == hardCap);\n', '      require(_founders > 0 || tokensSent == hardCap);\n', '\n', '      burnFoundersTokens(_bounty, _founders);\n', '\n', '      token.releaseTokenTransfer();\n', '\n', '      canWithdraw = true;\n', '\n', '      TokensReleased(msg.sender, now, _bounty, _founders);\n', '  }\n', '  \n', '  // overriding Crowdsale#validPurchase to add extra KYC blacklist logic\n', '  // @return true if investors can buy at the moment\n', '  function validPurchase(uint256 _tokens) internal view returns (bool) {\n', '    bool onBlackList;\n', '\n', '    if(blacklist[msg.sender] == true){\n', '      onBlackList = true;\n', '    } else {\n', '      onBlackList = false;\n', '    }\n', '    return super.validPurchase(_tokens) && !onBlackList;\n', '  }\n', '\n', '  // This is necessary for the blacklisted user to pull his ether from the contract upon being refunded\n', '  function collectRefund() external {\n', '    require(refundable[msg.sender] > 0);\n', '    require(refunded[msg.sender] == false);\n', '\n', '    uint256 theirwei = refundable[msg.sender];\n', '    refundable[msg.sender] = 0;\n', '    refunded[msg.sender] == true;\n', '\n', '    msg.sender.transfer(theirwei);\n', '\n', '    RefundCollected(msg.sender, now);\n', '  }\n', '\n', '  /*\n', '   * A token purchase with anti-money laundering and KYC checks\n', '   * This function takes in a dataframe and EC signature to verify if the purchaser has been verified\n', '   * on the server side of our application and has therefore, participated in KYC. \n', '   * Upon registering to the site, users are supplied with a signature allowing them to purchase tokens, \n', '   * which can be revoked at any time, this containst their ETH address, a unique ID and the min and max \n', '   * ETH that user has stated they will purchase. (Any more than the max may be subject to AML checks).\n', '   */\n', '  function buyWithKYCData(bytes dataframe, uint8 v, bytes32 r, bytes32 s) public payable {\n', '\n', '      bytes32 hash = sha256(dataframe);\n', '\n', '      address whitelistedAddress;\n', '      uint128 customerId;\n', '      uint32 minETH;\n', '      uint32 maxETH;\n', '      \n', '      (whitelistedAddress, customerId, minETH, maxETH) = getKYCPayload(dataframe);\n', '\n', '      // Check that the KYC data is signed by our server\n', '      require(ecrecover(hash, v, r, s) == signerAddress);\n', '\n', '      // Check that the user is using his own signature\n', '      require(whitelistedAddress == msg.sender);\n', '\n', '      // Check they are buying within their limits - THIS IS ONLY NEEDED IF SPECIFIED BY REGULATORS\n', '      uint256 weiAmount = msg.value;\n', '      uint256 max = maxETH;\n', '      uint256 min = minETH;\n', '\n', '      require(weiAmount < (max * 1 ether));\n', '      require(weiAmount > (min * 1 ether));\n', '\n', '      buyTokens(customerId);\n', '  }  \n', '\n', '  /// @dev This function can set the server side address\n', '  /// @param _signerAddress The address derived from server&#39;s private key\n', '  function setSignerAddress(address _signerAddress) external onlyOwner {\n', '    // EC rcover returns 0 in case of error therefore, this CANNOT be 0.\n', '    require(_signerAddress != 0);\n', '    signerAddress = _signerAddress;\n', '    SignerChanged(signerAddress);\n', '  }\n', '\n', '  function removeFromBlacklist(address _blacklisted) external onlyOwner {\n', '    require(blacklist[_blacklisted] == true);\n', '    blacklist[_blacklisted] = false;\n', '    RemovedFromBlacklist(_blacklisted, now);\n', '  }\n', '\n', '}']