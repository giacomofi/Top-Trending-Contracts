['pragma solidity ^0.4.24;\n', '\n', '// DO YOU HATE 0xBTC?\n', '// LETS SUMMARIZE 0xBTC\n', '// > NO REAL USE CASES \n', '// > PoW WITHOUT CONSENSUS\n', '// > PAID SHILLS\n', '// > ETH SUCKS, BUILDS ON ETH\n', '// UPLOAD YOUR REASON WHY YOU HATE 0xBTC AND GET FREE 0xBTCHATE TOKENS! \n', '// (also check the Transfer address in the IHate0xBTC function)\n', '\n', 'contract ZEROxBTCHate {\n', '\n', '    string public name = "0xBTCHate";      //  token name\n', '    string public symbol = "0xBTCHate";           //  token symbol\n', '    uint256 public decimals = 18;            //  token digit\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    \n', '    mapping (uint => bool) public ZEROxBTCHaters;\n', '    \n', '\n', '    uint256 public totalSupply = 0;\n', '\n', '    modifier validAddress {\n', '        assert(0x0 != msg.sender);\n', '        _;\n', '    }\n', '    \n', '    // MINE YOUR OWN 0xBTCHATE FUNCTIONS!!\n', '    // DIFFICULTY ALWAYS... 0! (but it will rise slightly because you cannot mine strings which other people submitted, or you just found a hash collission!!)\n', '    \n', '    function IHate0xBTC(string reason) public {\n', '        uint hash = uint(keccak256(bytes(reason)));\n', '        if (!ZEROxBTCHaters[hash]){\n', '            // congratulations we found new hate for 0xBTC!\n', '            // reward: an 0xBTC hate token \n', '            ZEROxBTCHaters[hash] = true; \n', '            balanceOf[msg.sender] += (10 ** 18);\n', '            emit Transfer(0xe05dEadE05deADe05deAde05dEADe05dEeeEAAAd, msg.sender, 10**18); // kek \n', '            emit New0xBTCHate(msg.sender, reason);\n', '            totalSupply += (10 ** 18); // CANNOT OVERFLOW THIS BECAUSE WE ONLY HAVE UINT HASHES (HACKERS BTFO)\n', '        }\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public validAddress returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public validAddress returns (bool success) {\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        balanceOf[_to] += _value;\n', '        balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public validAddress returns (bool success) {\n', '        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event New0xBTCHate(address who, string reason);\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '// DO YOU HATE 0xBTC?\n', '// LETS SUMMARIZE 0xBTC\n', '// > NO REAL USE CASES \n', '// > PoW WITHOUT CONSENSUS\n', '// > PAID SHILLS\n', '// > ETH SUCKS, BUILDS ON ETH\n', '// UPLOAD YOUR REASON WHY YOU HATE 0xBTC AND GET FREE 0xBTCHATE TOKENS! \n', '// (also check the Transfer address in the IHate0xBTC function)\n', '\n', 'contract ZEROxBTCHate {\n', '\n', '    string public name = "0xBTCHate";      //  token name\n', '    string public symbol = "0xBTCHate";           //  token symbol\n', '    uint256 public decimals = 18;            //  token digit\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    \n', '    mapping (uint => bool) public ZEROxBTCHaters;\n', '    \n', '\n', '    uint256 public totalSupply = 0;\n', '\n', '    modifier validAddress {\n', '        assert(0x0 != msg.sender);\n', '        _;\n', '    }\n', '    \n', '    // MINE YOUR OWN 0xBTCHATE FUNCTIONS!!\n', '    // DIFFICULTY ALWAYS... 0! (but it will rise slightly because you cannot mine strings which other people submitted, or you just found a hash collission!!)\n', '    \n', '    function IHate0xBTC(string reason) public {\n', '        uint hash = uint(keccak256(bytes(reason)));\n', '        if (!ZEROxBTCHaters[hash]){\n', '            // congratulations we found new hate for 0xBTC!\n', '            // reward: an 0xBTC hate token \n', '            ZEROxBTCHaters[hash] = true; \n', '            balanceOf[msg.sender] += (10 ** 18);\n', '            emit Transfer(0xe05dEadE05deADe05deAde05dEADe05dEeeEAAAd, msg.sender, 10**18); // kek \n', '            emit New0xBTCHate(msg.sender, reason);\n', '            totalSupply += (10 ** 18); // CANNOT OVERFLOW THIS BECAUSE WE ONLY HAVE UINT HASHES (HACKERS BTFO)\n', '        }\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public validAddress returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public validAddress returns (bool success) {\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        balanceOf[_to] += _value;\n', '        balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public validAddress returns (bool success) {\n', '        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event New0xBTCHate(address who, string reason);\n', '}']
