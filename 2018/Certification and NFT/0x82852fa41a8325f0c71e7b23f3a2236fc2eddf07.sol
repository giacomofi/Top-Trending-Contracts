['pragma solidity ^0.4.24;\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '///@title Dremabridge Payment contract\n', '///@author Arq\n', '///@notice Simple payment contract that checks an address for an "Operating Threshold" which is a set balance of ether, the remaining balance to another Address called Cold Storage.\n', '\n', 'contract paymentContract {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    address operatingAddress;\n', '    address coldStorage;\n', '\n', '    uint public opThreshold;\n', '    \n', '///@author Arq\n', '///@notice Constructor function determines the payment parties and threshold.\n', '///@param _operatingAddress - The Address that will be refilled by payments to this contract.\n', '///@param _coldStorage - The Address of the Cold Storage wallet, where overflow funds are sent.\n', '///@param _threshold - The level to which this contract will replenish the funds in the operatingAddress wallet.\n', '    constructor(address _operatingAddress, address _coldStorage, uint _threshold) public {\n', '        operatingAddress = _operatingAddress;\n', '        coldStorage = _coldStorage;\n', '        opThreshold = _threshold * 1 ether;\n', '    }\n', '///@author Arq\n', '///@notice The Fallback Function that accepts payments.\n', '///@dev Contract can be used as a payment source.\n', '    function () public payable {\n', '        distribute();\n', '    }\n', '\n', '    ///@author Arq\n', '    ///@notice Function that sends funds to either Cold Storage, Operating Address, or both based on the Operating Threshold.\n', '    ///@dev opThreshold determines what the balance in the operatingAddress should be, at a minimum.\n', '        function distribute() internal {\n', '            if(operatingAddress.balance < opThreshold) {\n', '                if(address(this).balance < (opThreshold - operatingAddress.balance)){\n', '                    operatingAddress.transfer(address(this).balance);\n', '                } else {\n', '                    operatingAddress.transfer(opThreshold - operatingAddress.balance);\n', '                    coldStorage.transfer(address(this).balance);\n', '                }\n', '            } else {\n', '                coldStorage.transfer(address(this).balance);\n', '            }\n', '        }\n', '}']
['pragma solidity ^0.4.24;\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '///@title Dremabridge Payment contract\n', '///@author Arq\n', '///@notice Simple payment contract that checks an address for an "Operating Threshold" which is a set balance of ether, the remaining balance to another Address called Cold Storage.\n', '\n', 'contract paymentContract {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    address operatingAddress;\n', '    address coldStorage;\n', '\n', '    uint public opThreshold;\n', '    \n', '///@author Arq\n', '///@notice Constructor function determines the payment parties and threshold.\n', '///@param _operatingAddress - The Address that will be refilled by payments to this contract.\n', '///@param _coldStorage - The Address of the Cold Storage wallet, where overflow funds are sent.\n', '///@param _threshold - The level to which this contract will replenish the funds in the operatingAddress wallet.\n', '    constructor(address _operatingAddress, address _coldStorage, uint _threshold) public {\n', '        operatingAddress = _operatingAddress;\n', '        coldStorage = _coldStorage;\n', '        opThreshold = _threshold * 1 ether;\n', '    }\n', '///@author Arq\n', '///@notice The Fallback Function that accepts payments.\n', '///@dev Contract can be used as a payment source.\n', '    function () public payable {\n', '        distribute();\n', '    }\n', '\n', '    ///@author Arq\n', '    ///@notice Function that sends funds to either Cold Storage, Operating Address, or both based on the Operating Threshold.\n', '    ///@dev opThreshold determines what the balance in the operatingAddress should be, at a minimum.\n', '        function distribute() internal {\n', '            if(operatingAddress.balance < opThreshold) {\n', '                if(address(this).balance < (opThreshold - operatingAddress.balance)){\n', '                    operatingAddress.transfer(address(this).balance);\n', '                } else {\n', '                    operatingAddress.transfer(opThreshold - operatingAddress.balance);\n', '                    coldStorage.transfer(address(this).balance);\n', '                }\n', '            } else {\n', '                coldStorage.transfer(address(this).balance);\n', '            }\n', '        }\n', '}']
