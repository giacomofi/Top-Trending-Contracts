['pragma solidity ^0.4.21;\n', '\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '  public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '  public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math   with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * mul\n', '     * @dev Safe math multiply function\n', '     */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256){\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  /**\n', '   * add\n', '   * @dev Safe math addition function\n', '   */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '    /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev Ownable has an owner address to simplify "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  /**\n', '   * Ownable\n', '   * @dev Ownable constructor sets the `owner` of the contract to sender\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * ownerOnly\n', '   * @dev Throws an error if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * transferOwnership\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title LavevelICO\n', ' * @dev LavevelICO contract is Ownable\n', ' **/\n', 'contract AFDTICO is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '  // ERC20 basic token contract being held\n', '  ERC20Basic public token;\n', '  using SafeMath for uint256;\n', ' \n', '  uint256 public RATE = 2188; // 以太兑换AFDT比例\n', '  uint256 public minimum = 10000000000000000;   //0.01ETH\n', '//   uint256 public constant initialTokens = 1000000 * 10**8; // Initial number of tokens available\n', '  address public constant FAVOREE = 0x57f3495D0eb2257F1B0Dbbc77a8A49E4AcAC82f5; //受益人账号\n', '  uint256 public raisedAmount = 0; //合约以太数量\n', '  \n', '  /**\n', '   * BoughtTokens\n', '   * @dev Log tokens bought onto the blockchain\n', '   */\n', '  event BoughtTokens(address indexed to, uint256 value, uint256 tokens);\n', '\n', '  constructor(ERC20Basic _token) public {\n', '      token = _token;\n', '  }\n', '\n', '  /**\n', '   * @dev Fallback function if ether is sent to address insted of buyTokens function\n', '   **/\n', '  function () public payable {\n', '\n', '    buyTokens();\n', '  }\n', '\n', '  /**\n', '   * buyTokens\n', '   * @dev function that sells available tokens\n', '   **/\n', '  function buyTokens() public payable {\n', '    require(msg.value >= minimum);\n', '    uint256 tokens = msg.value.mul(RATE).div(10**10);  //应得AFDT数量\n', '    uint256 balance = token.balanceOf(this);     //合约拥有AFDT数量\n', '    if (tokens > balance){                       //如果应得数量大于合约拥有数量返还ETH\n', '        msg.sender.transfer(msg.value);\n', '    }\n', '    \n', '    else{\n', '        token.transfer(msg.sender, tokens); // Send tokens to buyer\n', '        emit BoughtTokens(msg.sender, msg.value, tokens);\n', '        raisedAmount = raisedAmount.add(msg.value);\n', '    }\n', ' }\n', '\n', '  /**\n', '   * tokensAvailable\n', '   * @dev returns the number of tokens allocated to this contract\n', '   **/\n', '  function tokensAvailable() public constant returns (uint256) {\n', '    return token.balanceOf(this);\n', '  }\n', '\n', '  function ratio(uint256 _RATE) onlyOwner public {\n', '      RATE = _RATE;\n', '  }\n', '  \n', '  function withdrawals() onlyOwner public {\n', '      FAVOREE.transfer(raisedAmount);\n', '      raisedAmount = 0;\n', '  }\n', '  \n', '  function adjust_eth(uint256 _minimum) onlyOwner  public {\n', '      minimum = _minimum;\n', '  }\n', '  /**\n', '   * destroy\n', '   * @notice Terminate contract and refund to owner\n', '   **/\n', '  function destroy() onlyOwner public {\n', '    // Transfer tokens back to owner\n', '    uint256 balance = token.balanceOf(this);\n', '    assert(balance > 0);\n', '    token.transfer(FAVOREE, balance);\n', '    // There should be no ether in the contract but just in case\n', '    selfdestruct(FAVOREE); \n', '  }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '  public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '  public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math   with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * mul\n', '     * @dev Safe math multiply function\n', '     */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256){\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  /**\n', '   * add\n', '   * @dev Safe math addition function\n', '   */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '    /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev Ownable has an owner address to simplify "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  /**\n', '   * Ownable\n', '   * @dev Ownable constructor sets the `owner` of the contract to sender\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * ownerOnly\n', '   * @dev Throws an error if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * transferOwnership\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title LavevelICO\n', ' * @dev LavevelICO contract is Ownable\n', ' **/\n', 'contract AFDTICO is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '  // ERC20 basic token contract being held\n', '  ERC20Basic public token;\n', '  using SafeMath for uint256;\n', ' \n', '  uint256 public RATE = 2188; // 以太兑换AFDT比例\n', '  uint256 public minimum = 10000000000000000;   //0.01ETH\n', '//   uint256 public constant initialTokens = 1000000 * 10**8; // Initial number of tokens available\n', '  address public constant FAVOREE = 0x57f3495D0eb2257F1B0Dbbc77a8A49E4AcAC82f5; //受益人账号\n', '  uint256 public raisedAmount = 0; //合约以太数量\n', '  \n', '  /**\n', '   * BoughtTokens\n', '   * @dev Log tokens bought onto the blockchain\n', '   */\n', '  event BoughtTokens(address indexed to, uint256 value, uint256 tokens);\n', '\n', '  constructor(ERC20Basic _token) public {\n', '      token = _token;\n', '  }\n', '\n', '  /**\n', '   * @dev Fallback function if ether is sent to address insted of buyTokens function\n', '   **/\n', '  function () public payable {\n', '\n', '    buyTokens();\n', '  }\n', '\n', '  /**\n', '   * buyTokens\n', '   * @dev function that sells available tokens\n', '   **/\n', '  function buyTokens() public payable {\n', '    require(msg.value >= minimum);\n', '    uint256 tokens = msg.value.mul(RATE).div(10**10);  //应得AFDT数量\n', '    uint256 balance = token.balanceOf(this);     //合约拥有AFDT数量\n', '    if (tokens > balance){                       //如果应得数量大于合约拥有数量返还ETH\n', '        msg.sender.transfer(msg.value);\n', '    }\n', '    \n', '    else{\n', '        token.transfer(msg.sender, tokens); // Send tokens to buyer\n', '        emit BoughtTokens(msg.sender, msg.value, tokens);\n', '        raisedAmount = raisedAmount.add(msg.value);\n', '    }\n', ' }\n', '\n', '  /**\n', '   * tokensAvailable\n', '   * @dev returns the number of tokens allocated to this contract\n', '   **/\n', '  function tokensAvailable() public constant returns (uint256) {\n', '    return token.balanceOf(this);\n', '  }\n', '\n', '  function ratio(uint256 _RATE) onlyOwner public {\n', '      RATE = _RATE;\n', '  }\n', '  \n', '  function withdrawals() onlyOwner public {\n', '      FAVOREE.transfer(raisedAmount);\n', '      raisedAmount = 0;\n', '  }\n', '  \n', '  function adjust_eth(uint256 _minimum) onlyOwner  public {\n', '      minimum = _minimum;\n', '  }\n', '  /**\n', '   * destroy\n', '   * @notice Terminate contract and refund to owner\n', '   **/\n', '  function destroy() onlyOwner public {\n', '    // Transfer tokens back to owner\n', '    uint256 balance = token.balanceOf(this);\n', '    assert(balance > 0);\n', '    token.transfer(FAVOREE, balance);\n', '    // There should be no ether in the contract but just in case\n', '    selfdestruct(FAVOREE); \n', '  }\n', '}']
