['pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' * @dev Based on https://github.com/OpenZeppelin/zeppelin-soliditysettable\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "Can only be called by the owner");\n', '        _;\n', '    }\n', '\n', '    modifier onlyValidAddress(address addr) {\n', '        require(addr != address(0), "Address cannot be zero");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner)\n', '        public\n', '        onlyOwner\n', '        onlyValidAddress(newOwner)\n', '    {\n', '        emit OwnershipTransferred(owner, newOwner);\n', '\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Truffle Migrations contract\n', ' * @dev It violates standard naming convention for compatibility with Truffle suite\n', ' * @dev It extends standard implementation with changeable owner.\n', ' */\n', 'contract Migrations is Ownable {\n', '    // solhint-disable-next-line var-name-mixedcase\n', '    uint256 public last_completed_migration;\n', '\n', '    function setCompleted(uint256 completed) public onlyOwner {\n', '        last_completed_migration = completed;\n', '    }\n', '\n', '    // solhint-disable-next-line func-param-name-mixedcase\n', '    function upgrade(address new_address) public onlyOwner {\n', '        Migrations upgraded = Migrations(new_address);\n', '        upgraded.setCompleted(last_completed_migration);\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' * @dev Based on https://github.com/OpenZeppelin/zeppelin-soliditysettable\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "Can only be called by the owner");\n', '        _;\n', '    }\n', '\n', '    modifier onlyValidAddress(address addr) {\n', '        require(addr != address(0), "Address cannot be zero");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner)\n', '        public\n', '        onlyOwner\n', '        onlyValidAddress(newOwner)\n', '    {\n', '        emit OwnershipTransferred(owner, newOwner);\n', '\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Truffle Migrations contract\n', ' * @dev It violates standard naming convention for compatibility with Truffle suite\n', ' * @dev It extends standard implementation with changeable owner.\n', ' */\n', 'contract Migrations is Ownable {\n', '    // solhint-disable-next-line var-name-mixedcase\n', '    uint256 public last_completed_migration;\n', '\n', '    function setCompleted(uint256 completed) public onlyOwner {\n', '        last_completed_migration = completed;\n', '    }\n', '\n', '    // solhint-disable-next-line func-param-name-mixedcase\n', '    function upgrade(address new_address) public onlyOwner {\n', '        Migrations upgraded = Migrations(new_address);\n', '        upgraded.setCompleted(last_completed_migration);\n', '    }\n', '}']
