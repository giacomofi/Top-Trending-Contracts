['pragma solidity ^0.4.24;\n', '\n', 'pragma experimental "v0.5.0";\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a && c >= b);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || b == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(a > 0 && b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'contract BasicTokenInterface{\n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    event ApprovalReceived(address indexed from, uint256 indexed amount, address indexed tokenAddr, bytes data);\n', '    function receiveApproval(address from, uint256 amount, address tokenAddr, bytes data) public{\n', '        emit ApprovalReceived(from, amount, tokenAddr, data);\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20TokenInterface is BasicTokenInterface, ApproveAndCallFallBack{\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);   \n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '    function transferTokens(address token, uint amount) public returns (bool success);\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract BasicToken is BasicTokenInterface{\n', '    using SafeMath for uint;\n', '    \n', '    string public name;                   //fancy name: eg Simon Bucks\n', '    uint8 public decimals;                //How many decimals to show.\n', '    string public symbol;                 //An identifier: eg SBX\n', '    uint public totalSupply;\n', '    mapping (address => uint256) internal balances;\n', '    \n', '    modifier checkpayloadsize(uint size) {\n', '        assert(msg.data.length >= size + 4);\n', '        _;\n', '    } \n', '\n', '    function transfer(address _to, uint256 _value) public checkpayloadsize(2*32) returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        success = true;\n', '        balances[msg.sender] -= _value;\n', '\n', '        //If sent to contract address reduce the supply\n', '        if(_to == address(this)){\n', '            totalSupply = totalSupply.sub(_value);\n', '        }else{\n', '            balances[_to] += _value;\n', '        }\n', '        emit Transfer(msg.sender, _to, _value); //solhint-disable-line indent, no-unused-vars\n', '        return success;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', 'contract ManagedToken is BasicToken {\n', '    address manager;\n', '    modifier restricted(){\n', '        require(msg.sender == manager,"Function can only be used by manager");\n', '        _;\n', '    }\n', '\n', '    function setManager(address newManager) public restricted{\n', '        balances[newManager] = balances[manager];\n', '        balances[manager] = 0;\n', '        manager = newManager;\n', '    }\n', '\n', '}\n', '\n', 'contract ERC20Token is ERC20TokenInterface, ManagedToken{\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from,address _to,uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '    * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account. The `spender` contract function\n', '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address _owner,address _spender) public view returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    //Permit manager to sweep any tokens that landed here\n', '    function transferTokens(address token,uint _value) public restricted returns (bool success){\n', '        return ERC20Token(token).transfer(msg.sender,_value);\n', '    }\n', '\n', '\n', '\n', '}\n', '\n', 'contract SweepsToken is ERC20Token{\n', '\n', '    uint weiRatePerToken;\n', '    uint weiRatePerTicket;\n', '    uint currentDay;\n', '    uint[28] prizes; //offset == currentDay;\n', '    uint jackpot;\n', '    uint soldToday;\n', '    uint totalSold;\n', '\n', '    event Winner(uint ticketNumber, address indexed user, uint indexed amount);\n', '    event DrawResult(uint indexed day, uint[20] results);\n', '    event TicketsPurchased(address indexed user, uint indexed amount, uint start, uint stop);\n', '    event PreDrawCompleted(uint blockHeight);\n', '    event DrawingCompleted();\n', '    event DailyResetComplete();\n', '    event ImportBalanceEvent(address last);\n', '    event ImportWinnersEvent(address last);\n', '    event AirDropEvent(address last);\n', '\n', '\n', '    constructor() public payable {\n', '        require(gasleft() >= 4000000, "Contract needs at least 4000000");\n', '        name = "World&#39;s 1st Blockchain Sweepstakes";                                   // Set the name for display purposes\n', '        decimals = 0;                                       // Amount of decimals for display purposes\n', '        symbol = "SPRIZE";                               // Set the symbol for display purposes\n', '        currentDay = 0;\n', '        \n', '        manager = 0x0d505edb01e222110806ffc91da89ae7b2696e11;\n', '        totalSupply = 2;\n', '        weiRatePerToken = 10000000000000000;\n', '        weiRatePerTicket = 10000000000000000;\n', '        prizes = [\n', '            //week 1\n', '            2000,  //mon\n', '            2000,  //tue\n', '            2000,  //wed\n', '            2000,  //thu\n', '            2000,  //fri\n', '            4000,  //sat\n', '            10000, //sun\n', '            //week 2\n', '            2000,  //mon\n', '            2000,  //tue\n', '            2000,  //wed\n', '            2000,  //thu\n', '            2000,  //fri\n', '            4000,  //sat\n', '            10000, //sun\n', '            //week 3\n', '            4000,  //mon\n', '            4000,  //tue\n', '            4000,  //wed\n', '            4000,  //thu\n', '            4000,  //fri\n', '            8000,  //sat\n', '            20000, //sun\n', '            //week 4\n', '            8000,  //mon\n', '            8000,  //tue\n', '            8000,  //wed\n', '            8000,  //thu\n', '            8000,  //fri\n', '            20000,  //sat\n', '            50000 //sun\n', '        ];\n', '        jackpot = 0;\n', '        balances[manager] = 1;\n', '        \n', '        emit Transfer(address(this),manager, 1);\n', '       \n', '    }\n', '\n', '    //Default fallback function, but requires contract active\n', '    function() external payable {\n', '        require(currentDay <= prizes.length - 1, "Sorry this contest is over, please visit our site to learn about the next contest.");\n', '        buyTokens();\n', '    }\n', '\n', '    function dailyReset() public restricted returns (bool complete){\n', '        soldToday = 0;\n', '        \n', '        jackpot = 0;\n', '    \n', '        currentDay++;\n', '\n', '        emit DailyResetComplete();\n', '        return complete;\n', '    }\n', '\n', '    function setPrizes(uint[28] _prizes) public restricted{\n', '        prizes = _prizes;\n', '    }\n', '\n', '    //Reset currentDay to 0 and other housekeeping functions\n', '    function reset() public  restricted returns (bool complete){\n', '        \n', '        complete = false;\n', '        if((address(this).balance >= 1 wei)){\n', '            manager.transfer(address(this).balance);\n', '        }\n', '        \n', '        currentDay = 0;\n', '        jackpot = 0;\n', '        soldToday = 0;\n', '        totalSold = 0;\n', '        return (complete);\n', '\n', '    }\n', '\n', '    function setManager(address newManager) public restricted{\n', '        manager = newManager;\n', '    }\n', '\n', '    function getCurrentDay() public view returns (uint){\n', '        return currentDay;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public checkpayloadsize(2*32) returns (bool success) {\n', '        if(msg.sender == manager && _to == address(this)){\n', '            if(address(this).balance > 42000){\n', '                msg.sender.transfer(address(this).balance);\n', '                success = true;\n', '            }\n', '        }else{\n', '            if(_to != address(this)){\n', '                success = super.transfer(_to, _value);\n', '            }\n', '        }\n', '        return success;\n', '    }\n', '\n', '    function setTokenPrice(uint price) public  restricted returns (bool success){\n', '        weiRatePerToken = price;\n', '        success = true;\n', '        return success;\n', '    }\n', '\n', '    function setTicketPrice(uint price) public  restricted returns (bool success){\n', '        weiRatePerTicket = price;\n', '        success = true;\n', '        return success;\n', '    }\n', '\n', '    function getTicketPrice() public view returns (uint){\n', '        return weiRatePerTicket;\n', '    }\n', '\n', '    function getTokenPrice() public view returns (uint){\n', '        return weiRatePerToken;\n', '    }\n', '\n', '    function getTicketsSoldToday() public view returns (uint){\n', '        return soldToday;\n', '    }\n', '\n', '    //Does what it says on the tin\n', '    function buyTokens() public payable {\n', '        require(gasleft() >= 110000, "Requires at least 110000 gas, reverting to avoid wasting your gas"); \n', '        uint tokensBought = msg.value.div(weiRatePerToken);\n', '        uint ticketsBought = msg.value.div(weiRatePerTicket);\n', '        require(tokensBought > 0 && ticketsBought > 0,"Requires minimum payment purchase");\n', '        \n', '        //Handle Tickets\n', '        giveTix(ticketsBought,msg.sender);\n', '\n', '        //Handle Tokens & jackpot\n', '        totalSupply += tokensBought;\n', '        jackpot += (tokensBought / 2);\n', '        balances[msg.sender] += tokensBought;\n', '        emit Transfer(address(this),msg.sender,tokensBought);\n', '        \n', '    }\n', '\n', '    function giveTix(uint ticketsBought, address customer) internal{\n', '        //customer side      \n', '        uint oldsold = totalSold + 1;\n', '        soldToday += ticketsBought;\n', '        totalSold += ticketsBought;\n', '        //Emit required events\n', '        emit TicketsPurchased(customer, ticketsBought, oldsold, totalSold);\n', '    }\n', '\n', '    function getJackpot() public view returns (uint value){\n', '        return jackpot + prizes[currentDay];\n', '    }\n', '\n', '    function rand(uint min, uint max, uint nonce) public pure returns (uint){\n', '        return uint(keccak256(abi.encodePacked(nonce)))%(min+max)-min;\n', '    }\n', '\n', '    //Allow us to bring in winners from the previous contract this replaces\n', '    function importPreviousWinners(uint[] tickets, address[] winners, uint[] amounts) public restricted{\n', '        //TODO:  Complete this, make sure it emits winners correctly, but do not credit\n', '        address winner;\n', '        uint amount;\n', '        uint ticket;\n', '        uint cursor = 0;\n', '        while(cursor <= winners.length - 1 && gasleft() > 42000){\n', '            winner = winners[cursor];\n', '            amount = amounts[cursor];\n', '            ticket = tickets[cursor];\n', '            emit Winner(ticket, winner, amount);\n', '            cursor++;\n', '        }\n', '        emit ImportWinnersEvent(winners[cursor - 1]);\n', '    }\n', '\n', '    function importBalances(address oldContract,address[] customers) public restricted{\n', '        address customer;\n', '        uint balance;\n', '        uint cursor = 0;\n', '        while(cursor <= customers.length - 1 && gasleft() > 42000){\n', '            customer = customers[cursor];\n', '            balance = BasicToken(oldContract).balanceOf(customer);\n', '            balances[customer] = balance;\n', '            totalSupply += balance;\n', '            emit Transfer(address(this),customer,balance);\n', '            cursor++;\n', '        }\n', '        emit ImportBalanceEvent(customers[cursor - 1]);\n', '    }\n', '    \n', '    function airDrop(address[] customers, uint amount) public restricted{\n', '        uint cursor = 0;\n', '        address customer;\n', '        while(cursor <= customers.length - 1 && gasleft() > 42000){\n', '            customer = customers[cursor];\n', '            balances[customer] += amount;\n', '            emit Transfer(address(this),customer,amount);\n', '            giveTix(amount,customer);\n', '            cursor++;\n', '        }\n', '        if(cursor == customers.length - 1){\n', '            totalSupply += amount;\n', '        }\n', '        emit AirDropEvent(customers[cursor - 1]);\n', '    }\n', '    function payWinners(address[20] winners,uint[20] tickets) public restricted{\n', '        uint prize = prizes[currentDay].add(jackpot);\n', '        totalSupply += prize;\n', '        uint payout = 0;\n', '        for(uint y = 0; y <= winners.length - 1; y++){\n', '            address winner = winners[y];\n', '            require(winner != address(0),"Something impossible happened!  Refusing to burn these tokens!");\n', '            uint ticketNum = tickets[y];\n', '\n', '            //switch y for %\n', '            if(y == 0){\n', '                payout = prize / 2; //0.50\n', '            }\n', '\n', '            if(y == 1){\n', '                payout = prize / 7; //Closest possible fraction to 0.14\n', '            }\n', '\n', '            if(y >= 2 && y <= 20){\n', '                payout = prize / 50; //18 prizes of 0.02\n', '            }\n', '\n', '            balances[winner] += payout;\n', '            emit Winner(ticketNum, winner, payout);\n', '            emit Transfer(address(this),winner,payout);\n', '        }\n', '        dailyReset();\n', '    }\n', '    \n', '    function draw(uint seed) public restricted {\n', '        require(gasleft() > 60000,"Function requires at least 60000 GAS");\n', '        manager.transfer(address(this).balance);\n', '        uint[20] memory mypicks;\n', '        require(currentDay <= prizes.length - 1, "Sorry this contest is over, please visit our site to learn about the next contest.");\n', '        uint low = (totalSold - soldToday) + 1;\n', '        low = low < 1 ? 1 : low;\n', '        for(uint pick = 0; pick <= 19; pick++){\n', '            mypicks[pick] = rand(low,totalSold,pick+currentDay+seed);\n', '        }\n', '        emit DrawResult(currentDay, mypicks);\n', '    }\n', '}']