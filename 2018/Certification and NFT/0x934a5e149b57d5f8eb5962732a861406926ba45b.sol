['pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/*\n', ' * Manager that stores permitted addresses \n', ' */\n', 'contract PermissionManager is Ownable {\n', '    mapping (address => bool) permittedAddresses;\n', '\n', '    function addAddress(address newAddress) public onlyOwner {\n', '        permittedAddresses[newAddress] = true;\n', '    }\n', '\n', '    function removeAddress(address remAddress) public onlyOwner {\n', '        permittedAddresses[remAddress] = false;\n', '    }\n', '\n', '    function isPermitted(address pAddress) public view returns(bool) {\n', '        if (permittedAddresses[pAddress]) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/*\n', ' * Manager that stores permitted addresses \n', ' */\n', 'contract PermissionManager is Ownable {\n', '    mapping (address => bool) permittedAddresses;\n', '\n', '    function addAddress(address newAddress) public onlyOwner {\n', '        permittedAddresses[newAddress] = true;\n', '    }\n', '\n', '    function removeAddress(address remAddress) public onlyOwner {\n', '        permittedAddresses[remAddress] = false;\n', '    }\n', '\n', '    function isPermitted(address pAddress) public view returns(bool) {\n', '        if (permittedAddresses[pAddress]) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '}']
