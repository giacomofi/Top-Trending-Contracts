['/*\n', '    CryptoMines game via Ethereum Smart Contract\n', '\n', '\tIn the game you can buy, sell and upgrade mines from 1 to 14 levels. Upgrade 13 level mine to the last 14 level also give you BONUS - 12 new mines differrent levels.\n', '\tYou can mining the resources needed to upgrade mines. Resources can also be traded to other gamers for their mines upgrade.\n', '\tThe cost of production of new mines takes place on a strict mathematical formula and depends on the real USD currency value.\n', '\t\n', '\tWebsite: https://cryptomines.pro\n', '\t\n', '\t@author Valeriy Antonov\n', '*/\t\n', '\t\n', '\t\n', 'pragma solidity ^0.4.19;\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Payments is Ownable {\n', '  mapping(address => uint256) public payments; \n', '  \n', '  function getBalance() public constant onlyOwner returns(uint256) {\n', '\t return payments[msg.sender];\n', '  }    \n', '  \n', '\n', '  function withdrawPayments() public onlyOwner {\n', '\taddress payee = msg.sender;\n', '\tuint256 payment = payments[payee];\n', '\n', '\trequire(payment != 0);\n', '\trequire(this.balance >= payment);\n', '\n', '\tpayments[payee] = 0;\n', '\n', '\tassert(payee.send(payment));\n', '  }  \n', '    \n', '}\n', '\n', 'contract Resources {\n', '    //ResoursId->ResourceOwner->amount\n', '\tmapping(uint8 => mapping(address => uint256) ) public ResourcesOwner; \n', '}\n', '\n', 'contract Mines is Resources {\n', '\tmapping(uint256 => address) public MineOwner; \n', '\tmapping(uint256 => uint8) public MineLevel; \n', '\tmapping(uint256 => uint256) public MineCooldown; \n', '\tuint256 public nextMineId = 15;\n', '\tuint256 public nextMineEvent = 1;\n', '\t\n', '\tevent MineAffected(uint256 indexed AffectId, uint256 MineId);\n', '\n', '\tfunction createNewMine(uint8 _MineLVL) internal {\n', '        MineOwner[nextMineId] = msg.sender;\n', '        MineLevel[nextMineId] = _MineLVL;\n', '        MineCooldown[nextMineId] = now;\n', '\t\t\n', '\t\tnextMineId++;\n', '\t}\n', '\t\n', '\tfunction StartMiningByIdArray(uint256[] _MineIds) public {\n', '\t    uint256 MinesCount = _MineIds.length;\n', '\t\t\n', '\t\trequire(MinesCount>0);\n', '\t\t\n', '\t\tfor (uint256 key=0; key < MinesCount; key++) {\n', '\t\t\tif (MineOwner[_MineIds[key]]==msg.sender)\n', '\t\t\t\tStartMiningById(_MineIds[key]); \n', '\t\t}\n', '\t}\n', '\t\n', '\tfunction StartMiningById(uint256 _MineId) internal {\n', '\t    \n', '\t\tuint8 MineLVL=MineLevel[_MineId];\n', '\t\t\n', '\t\tassert (MineLVL>0 && MineOwner[_MineId]==msg.sender);\t\n', '\t\t\n', '\t    uint256 MiningDays = (now - MineCooldown[_MineId])/86400;\n', '\t\t\n', '\t\tassert (MiningDays>0);\n', '\n', '\t\tuint256 newCooldown = MineCooldown[_MineId] + MiningDays*86400;\n', '\t\t\n', '\t\tif (MineLVL==14) {\n', '\t\t\t//14 (high) level mining x2 resources then 13 level\n', '\t\t\tMineLVL = 13;\n', '\t\t\tMiningDays = MiningDays*2;\n', '\t\t}\n', '\t\t//start mining\t\t\t\n', '\t\tfor (uint8 lvl=1; lvl<=MineLVL; lvl++) {\n', '\t\t\tResourcesOwner[lvl][msg.sender] +=  (MineLVL-lvl+1)*MiningDays;\n', '\t\t}\n', '\t\n', '\t\tMineCooldown[_MineId] = newCooldown;\n', '\t}\t\n', '\t\n', '\tfunction UpMineLVL(uint256 _MineId) public {\t\n', '\t\tuint8 MineLVL=MineLevel[_MineId];\n', '\t\t\n', '\t\trequire (MineLVL>0 && MineLVL<=13 && MineOwner[_MineId]==msg.sender);\t\n', '\t\t\n', '\t\tfor (uint8 lvl=1; lvl<=MineLVL; lvl++) {\n', '\t\t    require (ResourcesOwner[lvl][msg.sender] >= (MineLVL-lvl+2)*15);\n', '\t\t}\n', '\n', '\t\tfor (lvl=1; lvl<=MineLVL; lvl++) {\n', '\t\t    ResourcesOwner[lvl][msg.sender] -= (MineLVL-lvl+2)*15;\n', '\t\t\t//super bonus for the creation high level mine\n', '\t\t\tif (MineLVL==13 && lvl<=12) \n', '\t\t\t    createNewMine(lvl);\n', '\t\t}\n', '\t\t\n', '\t\tMineLevel[_MineId]++;\n', '\t\t\n', '\t\tMineAffected(nextMineEvent,_MineId);\n', '\t\tnextMineEvent++;\t\t\n', '\t}\n', '}\n', '\n', 'contract Trading is Mines, Payments {\n', '\n', '    struct tradeStruct {\n', '        address Seller;\n', '        uint8 ResourceId;\n', '        uint256 ResourceAmount;\n', '        uint256 MineId;\n', '        uint128 Price;\n', '    }\n', '    //tradeId->tradeOwner->cost\n', '    mapping(uint256 => tradeStruct) public TradeList; \n', '\tuint128[13] public minesPrice;\n', '\tuint256 public TradeId = 1;\n', '\tuint256 public nextTradeEvent = 1;\n', '\t\n', '\tevent TradeAffected(uint256 indexed AffectId, uint256 TradeId);\n', '\t\n', '  \tfunction buyMine(uint8 _MineLVL) public payable {\n', '\t    \n', '\t\trequire(_MineLVL>0 && _MineLVL<=13 && msg.value==minesPrice[_MineLVL-1]);\n', '\t    \n', '        createNewMine(_MineLVL);\n', '\t\tpayments[owner]+=msg.value;\n', '\t\t\n', '\t} \n', '\t\n', '    function startSelling(uint8 _sellResourceId, uint256 _ResourcesAmount, uint256 _sellMineId, uint128 _sellPrice) public {\n', '\t\trequire ( (_sellResourceId==0 || _sellMineId==0) && (_sellResourceId>0 || _sellMineId>0) && _sellPrice>0 );\n', '\t\t_sellPrice = _sellPrice - _sellPrice%1000; //fix price, some time it was added a few wei.\n', '\t\tif (_sellResourceId>0) {\n', '\t\t\trequire (_ResourcesAmount>0 && ResourcesOwner[_sellResourceId][msg.sender]>=_ResourcesAmount);\n', '\t\t\tResourcesOwner[_sellResourceId][msg.sender] -= _ResourcesAmount;\n', '\t\t\tTradeList[TradeId]=tradeStruct({Seller: msg.sender, ResourceId: _sellResourceId, ResourceAmount: _ResourcesAmount, MineId: _sellMineId, Price: _sellPrice});\n', '\t\t}\n', '\t\t\n', '\t\tif (_sellMineId>0) {\t\t\n', '\t\t    require (MineOwner[_sellMineId]==msg.sender);\n', '\t\t\tTradeList[TradeId]=tradeStruct({Seller: msg.sender, ResourceId: _sellResourceId, ResourceAmount: _ResourcesAmount, MineId: _sellMineId, Price: _sellPrice});\n', '\t\t}\n', '        \n', '\t\tTradeId++;\n', '\t}\n', '\t\n', '    function stopSelling(uint256 _TradeId) public {\t\n', '\t\trequire (_TradeId>0);\n', '\t\ttradeStruct TradeLot = TradeList[_TradeId];\t\n', '        require (TradeLot.Seller==msg.sender && TradeLot.Price>0);\n', '\t\tif (TradeLot.ResourceId>0) {\n', '\t\t\tResourcesOwner[TradeLot.ResourceId][TradeLot.Seller] += TradeLot.ResourceAmount;\n', '\t\t}\n', '\t\t//stop trade\n', '\t\tTradeLot.Price=0;\n', '\t\tTradeAffected(nextTradeEvent,_TradeId);\t\t\n', '\t\tnextTradeEvent++;\n', '\t}\n', '\t\n', '    function changeSellingPrice(uint256 _TradeId, uint128 _newPrice) public {\t\n', '\t\trequire (_TradeId>0 && _newPrice>0);\n', '\t\ttradeStruct TradeLot = TradeList[_TradeId];\t\n', '        require (TradeLot.Seller==msg.sender && TradeLot.Price>0);\n', '\t\tTradeLot.Price=_newPrice;\n', '\t\t\n', '\t\tTradeAffected(nextTradeEvent,_TradeId);\t\t\n', '\t\tnextTradeEvent++;\n', '\t}\n', '\t\n', '    \n', '\tfunction startBuying(uint256 _TradeId) public payable {\n', '\t\ttradeStruct TradeLot = TradeList[_TradeId];\n', '\t\trequire (TradeLot.Price==msg.value && msg.value>0);\n', '\t\t \n', '\t\tif (TradeLot.ResourceId>0) {\n', '\t\t\tResourcesOwner[TradeLot.ResourceId][msg.sender] += TradeLot.ResourceAmount;\n', '\t\t}\n', '\t\t \n', '\t\tif (TradeLot.MineId>0) {\n', '\t\t\tMineOwner[TradeLot.MineId]=msg.sender;\n', '\t\t\tMineAffected(nextMineEvent,TradeLot.MineId);\n', '\t\t\tnextMineEvent++;\t\t\t\t\t\n', '\t\t}\n', '\t\t \n', '\t\taddress payee = TradeLot.Seller;\n', '\t\tpayee.transfer(msg.value);\n', '\n', '\t\t//stop trade\n', '\t\tTradeLot.Price=0;\n', '\t\t\n', '\t\tTradeAffected(nextTradeEvent,_TradeId);\t\t\n', '\t\tnextTradeEvent++;\n', '\t\t\n', '\t}\n', '\t\n', '}\n', '\n', 'contract FiatContract {\n', '  function ETH(uint _id) constant returns (uint256);\n', '  function USD(uint _id) constant returns (uint256);\n', '  function EUR(uint _id) constant returns (uint256);\n', '  function GBP(uint _id) constant returns (uint256);\n', '  function updatedAt(uint _id) constant returns (uint);\n', '}\n', '\n', '\n', 'contract MinesFactory is Trading {\n', '\n', '\n', '    function MinesFactory() { //constructon\n', '\t\tsetMinesPrice ();\n', '\t}\n', '\n', '\tfunction setMinesPrice () public {\n', '\t\t// mine level 1 price = getUSD()*10 = 10 USD;\n', '\t    var lvl1MinePrice = getUSD()*10; \n', '\t\t\n', '\t    for (uint8 lvl=0; lvl<13; lvl++) {\n', '\t\t\tif (lvl<=2)\n', '\t\t\t\tminesPrice[lvl] = (lvl+1)*lvl1MinePrice;\n', '\t\t\telse\n', '\t\t\t    minesPrice[lvl] = minesPrice[lvl-1]+minesPrice[lvl-2];\n', '\t\t}\n', '\t}\n', '\t\n', '\tfunction getMinesInfo(uint256[] _MineIds) public constant returns(address[32], uint8[32], uint256[32]) {\n', '\t    address[32] memory MinesOwners_;\n', '\t    uint8[32] memory MinesLevels_;\n', '\t    uint256[32] memory MinesCooldowns_;\n', '\n', '\t\tuint256 MinesCount=_MineIds.length;\n', '\t\trequire (MinesCount>0 && MinesCount<=32);\n', '\t\t\n', '\t\tfor (uint256 key=0; key < MinesCount; key++) {\n', '\t\t\tMinesOwners_[key]=MineOwner[_MineIds[key]];\n', '\t\t\tMinesLevels_[key]=MineLevel[_MineIds[key]];\n', '\t\t\tMinesCooldowns_[key]=MineCooldown[_MineIds[key]];\n', '\t\t}\n', '\t\treturn (MinesOwners_, MinesLevels_, MinesCooldowns_);\n', '\t}\n', '\n', '\tfunction getResourcesInfo(address _resourcesOwner) public constant returns(uint256[13]) {\n', '\t    uint256[13] memory ResourcesAmount_;\n', '\t\tfor (uint8 key=0; key <= 12; key++) {\n', '\t\t\tResourcesAmount_[key]=ResourcesOwner[key+1][_resourcesOwner];\n', '\t\t}\n', '\t\treturn ResourcesAmount_;\n', '\t}\t\n', '\t\n', '\tfunction getMineCooldown(uint256 _MineId) public constant returns(uint256) {\n', '\t    return now - MineCooldown[_MineId];\n', '\t}\n', '\t\n', '    function getUSD() constant returns (uint128) {\n', '\t\t//Fiat Currency value from https://fiatcontract.com/\n', '\t\t//Get Fiat Currency value within an Ethereum Contract\n', '\t\t//$0.01 USD/EURO/GBP in ETH to fit your conversion\n', '\t\t\n', '\t\tFiatContract price;\n', '\t\t\n', '\t\tprice = FiatContract(0x8055d0504666e2B6942BeB8D6014c964658Ca591); //mainnet\n', '\t\trequire (price.USD(0) > 10000000000);\n', '\t\tvar USDtoWEIrounded = uint128((price.USD(0) - price.USD(0) % 10000000000) * 100);\n', '\t\t\n', '\t\t//return 1 USD currency value in WEI ;\n', '\t\treturn USDtoWEIrounded;\n', '    }\t\n', '\t\n', '}']