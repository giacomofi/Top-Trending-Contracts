['pragma solidity ^0.4.24;\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts/MyanmarDonations.sol\n', '\n', '// ----------------------------------------------------------------------------\n', '// MyanmarDonations - Donations Contract to help people due to Myanmar flood\n', '//\n', '// Copyright (c) 2018 InfoCorp Technologies Pte Ltd.\n', '// http://www.sentinel-chain.org/\n', '//\n', '// The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', 'contract MyanmarDonations is Ownable {\n', '\n', '    // SENC Token Address\n', '    address public SENC_CONTRACT_ADDRESS = 0xA13f0743951B4f6E3e3AA039f682E17279f52bc3;\n', '    // Exchange Wallet Address\n', '    address public DONATION_WALLET = 0xB4ea16258020993520F59cC786c80175C1b807D7;\n', '    // Foundation Wallet Address\n', '    address public FOUNDATION_WALLET = 0x2c76E65d3b3E38602CAa2fAB56e0640D0182D8F8;\n', '    // Start date: 2018-08-08 10:00:00 (GMT +8)\n', '    uint256 public START_DATE = 1533693600;\n', '    // End date:   2018-08-10 18:00:00 (GMT +8)\n', '    uint256 public END_DATE = 1533895200;\n', '    // Ether hard cap\n', '    uint256 public ETHER_HARD_CAP = 30 ether;\n', '    // InfoCorp donation\n', '    uint256 public INFOCORP_DONATION = 30 ether;\n', '    // Total Ether hard cap to receive\n', '    uint256 public TOTAL_ETHER_HARD_CAP = ETHER_HARD_CAP + INFOCORP_DONATION;\n', '    // SENC-ETH pegged rate based on EOD rate of the 2nd August from coingecko in Wei\n', '    uint256 constant public FIXED_RATE = 41369152116499 wei;\n', '    // 30 is the max cap in Ether\n', '    uint256 public SENC_HARD_CAP = ETHER_HARD_CAP * 10 ** 18 / FIXED_RATE;\n', '    // Total of SENC collected at the end of the donation\n', '    uint256 public totalSencCollected;\n', '    // Marks the end of the donation.\n', '    bool public finalized = false;\n', '\n', '    modifier onlyDonationAddress() {\n', '        require(msg.sender == DONATION_WALLET);\n', '        _;\n', '    }\n', '\n', '    /// @notice Receive initial funds.\n', '    function() public payable {\n', '        require(msg.value == TOTAL_ETHER_HARD_CAP);\n', '        require(\n', '            address(this).balance <= TOTAL_ETHER_HARD_CAP,\n', '            "Contract balance hardcap reachead"\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @notice The `finalize()` should only be called after donation\n', '     * hard cap reached or the campaign reached the final day.\n', '     */\n', '    function finalize() public onlyDonationAddress returns (bool) {\n', '        require(getSencBalance() >= SENC_HARD_CAP || now >= END_DATE, "SENC hard cap rached OR End date reached");\n', '        require(!finalized, "Donation not already finalized");\n', '        // The Ether balance collected in Wei\n', '        totalSencCollected = getSencBalance();\n', '        if (totalSencCollected >= SENC_HARD_CAP) {\n', '            // Transfer of donations to the donations address\n', '            DONATION_WALLET.transfer(address(this).balance);\n', '        } else {\n', '            uint256 totalDonatedEthers = convertToEther(totalSencCollected) + INFOCORP_DONATION;\n', '            // Transfer of donations to the donations address\n', '            DONATION_WALLET.transfer(totalDonatedEthers);\n', '            // Transfer ETH remaining to foundation\n', '            claimTokens(address(0), FOUNDATION_WALLET);\n', '        }\n', '        // Transfer SENC to foundation\n', '        claimTokens(SENC_CONTRACT_ADDRESS, FOUNDATION_WALLET);\n', '        finalized = true;\n', '        return finalized;\n', '    }\n', '\n', '    /**\n', '     * @notice The `claimTokens()` should only be called after donation\n', '     * ends or if a security issue is found.\n', '     * @param _to the recipient that receives the tokens.\n', '     */\n', '    function claimTokens(address _token, address _to) public onlyDonationAddress {\n', '        require(_to != address(0), "Wallet format error");\n', '        if (_token == address(0)) {\n', '            _to.transfer(address(this).balance);\n', '            return;\n', '        }\n', '\n', '        ERC20Basic token = ERC20Basic(_token);\n', '        uint256 balance = token.balanceOf(this);\n', '        require(token.transfer(_to, balance), "Token transfer unsuccessful");\n', '    }\n', '\n', '    /// @notice The `sencToken()` is the getter for the SENC Token.\n', '    function sencToken() public view returns (ERC20Basic) {\n', '        return ERC20Basic(SENC_CONTRACT_ADDRESS);\n', '    }\n', '\n', '    /// @notice The `getSencBalance()` retrieve the SENC balance of the contract in Wei.\n', '    function getSencBalance() public view returns (uint256) {\n', '        return sencToken().balanceOf(address(this));\n', '    }\n', '\n', '    /// @notice The `getTotalDonations()` retrieve the Ether balance collected so far in Wei.\n', '    function getTotalDonations() public view returns (uint256) {\n', '        return convertToEther(finalized ? totalSencCollected : getSencBalance());\n', '    }\n', '    \n', '    /// @notice The `setEndDate()` changes unit timestamp on wich de donations ends.\n', '    function setEndDate(uint256 _endDate) external onlyOwner returns (bool){\n', '        END_DATE = _endDate;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice The `convertToEther()` converts value of SENC Tokens to Ether based on pegged rate.\n', '     * @param _value the amount of SENC to be converted.\n', '     */\n', '    function convertToEther(uint256 _value) private pure returns (uint256) {\n', '        return _value * FIXED_RATE / 10 ** 18;\n', '    }\n', '\n', '}']