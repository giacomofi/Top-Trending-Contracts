['pragma solidity 0.4.18;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract IController is Pausable {\n', '    event SetContractInfo(bytes32 id, address contractAddress, bytes20 gitCommitHash);\n', '\n', '    function setContractInfo(bytes32 _id, address _contractAddress, bytes20 _gitCommitHash) external;\n', '    function updateController(bytes32 _id, address _controller) external;\n', '    function getContract(bytes32 _id) public view returns (address);\n', '}\n', '\n', 'contract IManager {\n', '    event SetController(address controller);\n', '    event ParameterUpdate(string param);\n', '\n', '    function setController(address _controller) external;\n', '}\n', '\n', 'contract Manager is IManager {\n', '    // Controller that contract is registered with\n', '    IController public controller;\n', '\n', '    // Check if sender is controller\n', '    modifier onlyController() {\n', '        require(msg.sender == address(controller));\n', '        _;\n', '    }\n', '\n', '    // Check if sender is controller owner\n', '    modifier onlyControllerOwner() {\n', '        require(msg.sender == controller.owner());\n', '        _;\n', '    }\n', '\n', '    // Check if controller is not paused\n', '    modifier whenSystemNotPaused() {\n', '        require(!controller.paused());\n', '        _;\n', '    }\n', '\n', '    // Check if controller is paused\n', '    modifier whenSystemPaused() {\n', '        require(controller.paused());\n', '        _;\n', '    }\n', '\n', '    function Manager(address _controller) public {\n', '        controller = IController(_controller);\n', '    }\n', '\n', '    /*\n', '     * @dev Set controller. Only callable by current controller\n', '     * @param _controller Controller contract address\n', '     */\n', '    function setController(address _controller) external onlyController {\n', '        controller = IController(_controller);\n', '\n', '        SetController(_controller);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ManagerProxyTarget\n', ' * @dev The base contract that target contracts used by a proxy contract should inherit from\n', ' * Note: Both the target contract and the proxy contract (implemented as ManagerProxy) MUST inherit from ManagerProxyTarget in order to guarantee\n', ' * that both contracts have the same storage layout. Differing storage layouts in a proxy contract and target contract can\n', ' * potentially break the delegate proxy upgradeability mechanism\n', ' */\n', 'contract ManagerProxyTarget is Manager {\n', "    // Used to look up target contract address in controller's registry\n", '    bytes32 public targetContractId;\n', '}\n', '\n', '/**\n', ' * @title ManagerProxy\n', ' * @dev A proxy contract that uses delegatecall to execute function calls on a target contract using its own storage context.\n', ' * The target contract is a Manager contract that is registered with the Controller.\n', ' * Note: Both this proxy contract and its target contract MUST inherit from ManagerProxyTarget in order to guarantee\n', ' * that both contracts have the same storage layout. Differing storage layouts in a proxy contract and target contract can\n', ' * potentially break the delegate proxy upgradeability mechanism\n', ' */\n', 'contract ManagerProxy is ManagerProxyTarget {\n', '    /**\n', '     * @dev ManagerProxy constructor. Invokes constructor of base Manager contract with provided Controller address.\n', '     * Also, sets the contract ID of the target contract that function calls will be executed on.\n', '     * @param _controller Address of Controller that this contract will be registered with\n', '     * @param _targetContractId contract ID of the target contract\n', '     */\n', '    function ManagerProxy(address _controller, bytes32 _targetContractId) public Manager(_controller) {\n', '        targetContractId = _targetContractId;\n', '    }\n', '\n', '    /**\n', "     * @dev Uses delegatecall to execute function calls on this proxy contract's target contract using its own storage context.\n", '     * This fallback function will look up the address of the target contract using the Controller and the target contract ID.\n', '     * It will then use the calldata for a function call as the data payload for a delegatecall on the target contract. The return value\n', '     * of the executed function call will also be returned\n', '     */\n', '    function() public payable {\n', '        address target = controller.getContract(targetContractId);\n', '        // Target contract must be registered\n', '        require(target > 0);\n', '\n', '        assembly {\n', '            // Solidity keeps a free memory pointer at position 0x40 in memory\n', '            let freeMemoryPtrPosition := 0x40\n', '            // Load the free memory pointer\n', '            let calldataMemoryOffset := mload(freeMemoryPtrPosition)\n', '            // Update free memory pointer to after memory space we reserve for calldata\n', '            mstore(freeMemoryPtrPosition, add(calldataMemoryOffset, calldatasize))\n', '            // Copy calldata (method signature and params of the call) to memory\n', '            calldatacopy(calldataMemoryOffset, 0x0, calldatasize)\n', '\n', '            // Call method on target contract using calldata which is loaded into memory\n', '            let ret := delegatecall(gas, target, calldataMemoryOffset, calldatasize, 0, 0)\n', '\n', '            // Load the free memory pointer\n', '            let returndataMemoryOffset := mload(freeMemoryPtrPosition)\n', '            // Update free memory pointer to after memory space we reserve for returndata\n', '            mstore(freeMemoryPtrPosition, add(returndataMemoryOffset, returndatasize))\n', '            // Copy returndata (result of the method invoked by the delegatecall) to memory\n', '            returndatacopy(returndataMemoryOffset, 0x0, returndatasize)\n', '\n', '            switch ret\n', '            case 0 {\n', '                // Method call failed - revert\n', '                // Return any error message stored in mem[returndataMemoryOffset..(returndataMemoryOffset + returndatasize)]\n', '                revert(returndataMemoryOffset, returndatasize)\n', '            } default {\n', '                // Return result of method call stored in mem[returndataMemoryOffset..(returndataMemoryOffset + returndatasize)]\n', '                return(returndataMemoryOffset, returndatasize)\n', '            }\n', '        }\n', '    }\n', '}']