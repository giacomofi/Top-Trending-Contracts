['pragma solidity ^0.4.20;\n', '/**\n', '* @title ICO SALE CONTRACT\n', '* @dev ERC-20 Token Standard Compliant\n', '*/\n', '\n', '/**\n', '* @title SafeMath by OpenZeppelin\n', '* @dev Math operations with safety checks that throw on error\n', '*/\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '}\n', '\n', '/**\n', '* @title Fiat currency contract\n', '* @dev This contract will return the value of 0.01$ ETH in wei\n', '*/\n', 'contract FiatContract {\n', ' \n', '  function EUR(uint _id) constant public returns (uint256);\n', '\n', '}\n', '\n', '/**\n', '* @title DateTime contract\n', '* @dev This contract will return the unix value of any date\n', '*/\n', 'contract DateTimeAPI {\n', '        \n', '    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) constant public returns (uint timestamp);\n', '\n', '}\n', '\n', '/**\n', '* @title ERC20 Token interface\n', '*/\n', 'contract token {\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '}\n', '\n', '/**\n', '* @title NETRico sale main contract\n', '*/\n', 'contract NETRico {\n', '\n', '    FiatContract price = FiatContract(0x8055d0504666e2B6942BeB8D6014c964658Ca591); // MAINNET ADDRESS\n', '\n', '    DateTimeAPI dateTimeContract = DateTimeAPI(0x1a6184CD4C5Bea62B0116de7962EE7315B7bcBce);//Main\n', '\n', '    using SafeMath for uint256;\n', '    //This sale have 5 stages\n', '    enum State {\n', '        Stage1,\n', '        Stage2,\n', '        Stage3,\n', '        Stage4,\n', '        Successful\n', '    }\n', '    //public variables\n', '    State public state = State.Stage1; //Set initial stage\n', '    uint256 public startTime = dateTimeContract.toTimestamp(2018,4,1,0); //From Apr 1 2018 00:00\n', '    uint256 public deadline = dateTimeContract.toTimestamp(2019,3,27,0); //Stop Mar 27 2019 00:00\n', '    uint256 public totalRaised; //eth in wei\n', '    uint256 public totalDistributed; //tokens distributed\n', '    uint256 public completedAt; //Time stamp when the sale finish\n', '    token public tokenReward; //Address of the valid token used as reward\n', '    address public creator; //Address of the contract deployer\n', '    string public campaignUrl; //Web site of the campaign\n', '    string public version = &#39;2&#39;;\n', '\n', '    //events for log\n', '    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\n', '    event LogBeneficiaryPaid(address _beneficiaryAddress);\n', '    event LogFundingSuccessful(uint _totalRaised);\n', '    event LogFunderInitialized(\n', '        address _creator,\n', '        string _url);\n', '    event LogContributorsPayout(address _addr, uint _amount);\n', '\n', '    modifier notFinished() {\n', '        require(state != State.Successful);\n', '        _;\n', '    }\n', '    /**\n', '    * @notice NETRico constructor\n', '    * @param _campaignUrl is the ICO _url\n', '    * @param _addressOfTokenUsedAsReward is the token totalDistributed\n', '    */\n', '    function NETRico (string _campaignUrl, token _addressOfTokenUsedAsReward) public {\n', '        creator = 0xB987B463c7573f0B7b6eD7cc8E5Fab9042272065;\n', '        //creator = msg.sender;\n', '        campaignUrl = _campaignUrl;\n', '        tokenReward = token(_addressOfTokenUsedAsReward);\n', '\n', '        emit LogFunderInitialized(\n', '            creator,\n', '            campaignUrl\n', '            );\n', '    }\n', '\n', '    /**\n', '    * @notice contribution handler\n', '    */\n', '    function contribute() public notFinished payable {\n', '        require(now >= startTime);\n', '\n', '        uint256 tokenBought; //Variable to store amount of tokens bought\n', '        uint256 tokenPrice = price.EUR(0); //1 cent value in wei\n', '\n', '        totalRaised = totalRaised.add(msg.value); //Save the total eth totalRaised (in wei)\n', '\n', '        tokenPrice = tokenPrice.mul(2); //0.02$ EUR value in wei \n', '        tokenPrice = tokenPrice.div(10 ** 8); //Change base 18 to 10\n', '\n', '        tokenBought = msg.value.div(tokenPrice); //Base 18/ Base 10 = Base 8\n', '        tokenBought = tokenBought.mul(10 ** 10); //Base 8 to Base 18\n', '\n', '        require(tokenBought >= 100 * 10 ** 18); //Minimum 100 base tokens \n', '        \n', '        //Bonus calculation\n', '        if (state == State.Stage1){\n', '            tokenBought = tokenBought.mul(2); //+100%\n', '        } else if (state == State.Stage2){\n', '            tokenBought = tokenBought.mul(175);\n', '            tokenBought = tokenBought.div(100); //+75%\n', '        } else if (state == State.Stage3){\n', '            tokenBought = tokenBought.mul(15);\n', '            tokenBought = tokenBought.div(10); //+50%\n', '        } else if (state == State.Stage4){\n', '            tokenBought = tokenBought.mul(125);\n', '            tokenBought = tokenBought.div(100); //+25%\n', '        }\n', '\n', '        totalDistributed = totalDistributed.add(tokenBought); //Save to total tokens distributed\n', '        \n', '        tokenReward.transfer(msg.sender,tokenBought); //Send Tokens\n', '        \n', '        creator.transfer(msg.value); // Send ETH to creator\n', '        emit LogBeneficiaryPaid(creator);\n', '        \n', '        //LOGS\n', '        emit LogFundingReceived(msg.sender, msg.value, totalRaised);\n', '        emit  LogContributorsPayout(msg.sender,tokenBought);\n', '\n', '        checkIfFundingCompleteOrExpired();\n', '    }\n', '\n', '    /**\n', '    * @notice check status\n', '    */\n', '    function checkIfFundingCompleteOrExpired() public {\n', '\n', '        if(now > deadline && state != State.Successful){\n', '\n', '            state = State.Successful; //Sale becomes Successful\n', '            completedAt = now; //ICO finished\n', '\n', '            emit LogFundingSuccessful(totalRaised); //we log the finish\n', '\n', '            finished();\n', '        } else if(state == State.Stage3 && now > dateTimeContract.toTimestamp(2018,12,27,0)){\n', '\n', '            state = State.Stage4;\n', '            \n', '        } else if(state == State.Stage2 && now > dateTimeContract.toTimestamp(2018,9,28,0)){\n', '\n', '            state = State.Stage3;\n', '            \n', '        } else if(state == State.Stage1 && now > dateTimeContract.toTimestamp(2018,6,30,0)){\n', '\n', '            state = State.Stage2;\n', '\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @notice Function for closure handle\n', '    */\n', '    function finished() public { //When finished eth are transfered to creator\n', '        require(state == State.Successful); //Only when sale finish\n', '        \n', '        uint256 remainder = tokenReward.balanceOf(this); //Remaining tokens on contract\n', '        //Funds send to creator if any\n', '        if(address(this).balance > 0) {\n', '            creator.transfer(address(this).balance);\n', '            emit LogBeneficiaryPaid(creator);\n', '        }\n', ' \n', '        tokenReward.transfer(creator,remainder); //remainder tokens send to creator\n', '        emit LogContributorsPayout(creator, remainder);\n', '\n', '    }\n', '\n', '    /**\n', '    * @notice Function to claim any token stuck on contract\n', '    */\n', '    function claimTokens(token _address) public{\n', '        require(state == State.Successful); //Only when sale finish\n', '        require(msg.sender == creator);\n', '\n', '        uint256 remainder = _address.balanceOf(this); //Check remainder tokens\n', '        _address.transfer(creator,remainder); //Transfer tokens to creator\n', '        \n', '    }\n', '\n', '    /**\n', '    * @notice Function to handle eth transfers\n', '    * @dev BEWARE: if a call to this functions doesn&#39;t have\n', '    * enought gas, transaction could not be finished\n', '    */\n', '    function() public payable {\n', '        contribute();\n', '    }\n', '    \n', '}']
['pragma solidity ^0.4.20;\n', '/**\n', '* @title ICO SALE CONTRACT\n', '* @dev ERC-20 Token Standard Compliant\n', '*/\n', '\n', '/**\n', '* @title SafeMath by OpenZeppelin\n', '* @dev Math operations with safety checks that throw on error\n', '*/\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '}\n', '\n', '/**\n', '* @title Fiat currency contract\n', '* @dev This contract will return the value of 0.01$ ETH in wei\n', '*/\n', 'contract FiatContract {\n', ' \n', '  function EUR(uint _id) constant public returns (uint256);\n', '\n', '}\n', '\n', '/**\n', '* @title DateTime contract\n', '* @dev This contract will return the unix value of any date\n', '*/\n', 'contract DateTimeAPI {\n', '        \n', '    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) constant public returns (uint timestamp);\n', '\n', '}\n', '\n', '/**\n', '* @title ERC20 Token interface\n', '*/\n', 'contract token {\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '}\n', '\n', '/**\n', '* @title NETRico sale main contract\n', '*/\n', 'contract NETRico {\n', '\n', '    FiatContract price = FiatContract(0x8055d0504666e2B6942BeB8D6014c964658Ca591); // MAINNET ADDRESS\n', '\n', '    DateTimeAPI dateTimeContract = DateTimeAPI(0x1a6184CD4C5Bea62B0116de7962EE7315B7bcBce);//Main\n', '\n', '    using SafeMath for uint256;\n', '    //This sale have 5 stages\n', '    enum State {\n', '        Stage1,\n', '        Stage2,\n', '        Stage3,\n', '        Stage4,\n', '        Successful\n', '    }\n', '    //public variables\n', '    State public state = State.Stage1; //Set initial stage\n', '    uint256 public startTime = dateTimeContract.toTimestamp(2018,4,1,0); //From Apr 1 2018 00:00\n', '    uint256 public deadline = dateTimeContract.toTimestamp(2019,3,27,0); //Stop Mar 27 2019 00:00\n', '    uint256 public totalRaised; //eth in wei\n', '    uint256 public totalDistributed; //tokens distributed\n', '    uint256 public completedAt; //Time stamp when the sale finish\n', '    token public tokenReward; //Address of the valid token used as reward\n', '    address public creator; //Address of the contract deployer\n', '    string public campaignUrl; //Web site of the campaign\n', "    string public version = '2';\n", '\n', '    //events for log\n', '    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\n', '    event LogBeneficiaryPaid(address _beneficiaryAddress);\n', '    event LogFundingSuccessful(uint _totalRaised);\n', '    event LogFunderInitialized(\n', '        address _creator,\n', '        string _url);\n', '    event LogContributorsPayout(address _addr, uint _amount);\n', '\n', '    modifier notFinished() {\n', '        require(state != State.Successful);\n', '        _;\n', '    }\n', '    /**\n', '    * @notice NETRico constructor\n', '    * @param _campaignUrl is the ICO _url\n', '    * @param _addressOfTokenUsedAsReward is the token totalDistributed\n', '    */\n', '    function NETRico (string _campaignUrl, token _addressOfTokenUsedAsReward) public {\n', '        creator = 0xB987B463c7573f0B7b6eD7cc8E5Fab9042272065;\n', '        //creator = msg.sender;\n', '        campaignUrl = _campaignUrl;\n', '        tokenReward = token(_addressOfTokenUsedAsReward);\n', '\n', '        emit LogFunderInitialized(\n', '            creator,\n', '            campaignUrl\n', '            );\n', '    }\n', '\n', '    /**\n', '    * @notice contribution handler\n', '    */\n', '    function contribute() public notFinished payable {\n', '        require(now >= startTime);\n', '\n', '        uint256 tokenBought; //Variable to store amount of tokens bought\n', '        uint256 tokenPrice = price.EUR(0); //1 cent value in wei\n', '\n', '        totalRaised = totalRaised.add(msg.value); //Save the total eth totalRaised (in wei)\n', '\n', '        tokenPrice = tokenPrice.mul(2); //0.02$ EUR value in wei \n', '        tokenPrice = tokenPrice.div(10 ** 8); //Change base 18 to 10\n', '\n', '        tokenBought = msg.value.div(tokenPrice); //Base 18/ Base 10 = Base 8\n', '        tokenBought = tokenBought.mul(10 ** 10); //Base 8 to Base 18\n', '\n', '        require(tokenBought >= 100 * 10 ** 18); //Minimum 100 base tokens \n', '        \n', '        //Bonus calculation\n', '        if (state == State.Stage1){\n', '            tokenBought = tokenBought.mul(2); //+100%\n', '        } else if (state == State.Stage2){\n', '            tokenBought = tokenBought.mul(175);\n', '            tokenBought = tokenBought.div(100); //+75%\n', '        } else if (state == State.Stage3){\n', '            tokenBought = tokenBought.mul(15);\n', '            tokenBought = tokenBought.div(10); //+50%\n', '        } else if (state == State.Stage4){\n', '            tokenBought = tokenBought.mul(125);\n', '            tokenBought = tokenBought.div(100); //+25%\n', '        }\n', '\n', '        totalDistributed = totalDistributed.add(tokenBought); //Save to total tokens distributed\n', '        \n', '        tokenReward.transfer(msg.sender,tokenBought); //Send Tokens\n', '        \n', '        creator.transfer(msg.value); // Send ETH to creator\n', '        emit LogBeneficiaryPaid(creator);\n', '        \n', '        //LOGS\n', '        emit LogFundingReceived(msg.sender, msg.value, totalRaised);\n', '        emit  LogContributorsPayout(msg.sender,tokenBought);\n', '\n', '        checkIfFundingCompleteOrExpired();\n', '    }\n', '\n', '    /**\n', '    * @notice check status\n', '    */\n', '    function checkIfFundingCompleteOrExpired() public {\n', '\n', '        if(now > deadline && state != State.Successful){\n', '\n', '            state = State.Successful; //Sale becomes Successful\n', '            completedAt = now; //ICO finished\n', '\n', '            emit LogFundingSuccessful(totalRaised); //we log the finish\n', '\n', '            finished();\n', '        } else if(state == State.Stage3 && now > dateTimeContract.toTimestamp(2018,12,27,0)){\n', '\n', '            state = State.Stage4;\n', '            \n', '        } else if(state == State.Stage2 && now > dateTimeContract.toTimestamp(2018,9,28,0)){\n', '\n', '            state = State.Stage3;\n', '            \n', '        } else if(state == State.Stage1 && now > dateTimeContract.toTimestamp(2018,6,30,0)){\n', '\n', '            state = State.Stage2;\n', '\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @notice Function for closure handle\n', '    */\n', '    function finished() public { //When finished eth are transfered to creator\n', '        require(state == State.Successful); //Only when sale finish\n', '        \n', '        uint256 remainder = tokenReward.balanceOf(this); //Remaining tokens on contract\n', '        //Funds send to creator if any\n', '        if(address(this).balance > 0) {\n', '            creator.transfer(address(this).balance);\n', '            emit LogBeneficiaryPaid(creator);\n', '        }\n', ' \n', '        tokenReward.transfer(creator,remainder); //remainder tokens send to creator\n', '        emit LogContributorsPayout(creator, remainder);\n', '\n', '    }\n', '\n', '    /**\n', '    * @notice Function to claim any token stuck on contract\n', '    */\n', '    function claimTokens(token _address) public{\n', '        require(state == State.Successful); //Only when sale finish\n', '        require(msg.sender == creator);\n', '\n', '        uint256 remainder = _address.balanceOf(this); //Check remainder tokens\n', '        _address.transfer(creator,remainder); //Transfer tokens to creator\n', '        \n', '    }\n', '\n', '    /**\n', '    * @notice Function to handle eth transfers\n', "    * @dev BEWARE: if a call to this functions doesn't have\n", '    * enought gas, transaction could not be finished\n', '    */\n', '    function() public payable {\n', '        contribute();\n', '    }\n', '    \n', '}']
