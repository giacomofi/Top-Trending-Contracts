['pragma solidity 0.4.23;\n', '\n', '//////////////////////////////\n', '///// ERC20Basic\n', '//////////////////////////////\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '//////////////////////////////\n', '///// ERC20 Interface\n', '//////////////////////////////\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '//////////////////////////////\n', '///// ERC20 Basic\n', '//////////////////////////////\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '//////////////////////////////\n', '///// DetailedERC20\n', '//////////////////////////////\n', '\n', 'contract DetailedERC20 is ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}\n', '\n', '//////////////////////////////\n', '///// Standard Token\n', '//////////////////////////////\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '//////////////////////////////\n', '///// SafeMath\n', '//////////////////////////////\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '//////////////////////////////\n', '///// AddressArrayUtil\n', '//////////////////////////////\n', '\n', '/**\n', ' * @title AddressArrayUtil\n', ' */\n', 'library AddressArrayUtils {\n', '  function hasValue(address[] addresses, address value) internal returns (bool) {\n', '    for (uint i = 0; i < addresses.length; i++) {\n', '      if (addresses[i] == value) {\n', '        return true;\n', '      }\n', '    }\n', '\n', '    return false;\n', '  }\n', '\n', '  function removeByIndex(address[] storage a, uint256 index) internal returns (uint256) {\n', '    a[index] = a[a.length - 1];\n', '    a.length -= 1;\n', '  }\n', '}\n', '\n', '\n', '//////////////////////////////\n', '///// Set Interface\n', '//////////////////////////////\n', '\n', '/**\n', ' * @title Set interface\n', ' */\n', 'contract SetInterface {\n', '\n', '  /**\n', '   * @dev Function to convert component into {Set} Tokens\n', '   *\n', '   * Please note that the user&#39;s ERC20 component must be approved by\n', '   * their ERC20 contract to transfer their components to this contract.\n', '   *\n', '   * @param _quantity uint The quantity of Sets desired to issue in Wei as a multiple of naturalUnit\n', '   */\n', '  function issue(uint _quantity) public returns (bool success);\n', '  \n', '  /**\n', '   * @dev Function to convert {Set} Tokens into underlying components\n', '   *\n', '   * The ERC20 components do not need to be approved to call this function\n', '   *\n', '   * @param _quantity uint The quantity of Sets desired to redeem in Wei as a multiple of naturalUnit\n', '   */\n', '  function redeem(uint _quantity) public returns (bool success);\n', '\n', '  event LogIssuance(\n', '    address indexed _sender,\n', '    uint _quantity\n', '  );\n', '\n', '  event LogRedemption(\n', '    address indexed _sender,\n', '    uint _quantity\n', '  );\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title {Set}\n', ' * @author Felix Feng\n', ' * @dev Implementation of the basic {Set} token.\n', ' */\n', 'contract SetToken is StandardToken, DetailedERC20("Decentralized Exchange Set", "DEX", 18), SetInterface {\n', '  using SafeMath for uint256;\n', '  using AddressArrayUtils for address[];\n', '\n', '  ///////////////////////////////////////////////////////////\n', '  /// Data Structures\n', '  ///////////////////////////////////////////////////////////\n', '  struct Component {\n', '    address address_;\n', '    uint unit_;\n', '  }\n', '\n', '  ///////////////////////////////////////////////////////////\n', '  /// States\n', '  ///////////////////////////////////////////////////////////\n', '  uint public naturalUnit;\n', '  Component[] public components;\n', '\n', '  // Mapping of componentHash to isComponent\n', '  mapping(bytes32 => bool) internal isComponent;\n', '  // Mapping of index of component -> user address -> balance\n', '  mapping(uint => mapping(address => uint)) internal unredeemedBalances;\n', '\n', '\n', '  ///////////////////////////////////////////////////////////\n', '  /// Events\n', '  ///////////////////////////////////////////////////////////\n', '  event LogPartialRedemption(\n', '    address indexed _sender,\n', '    uint _quantity,\n', '    bytes32 _excludedComponents\n', '  );\n', '\n', '  event LogRedeemExcluded(\n', '    address indexed _sender,\n', '    bytes32 _components\n', '  );\n', '\n', '  ///////////////////////////////////////////////////////////\n', '  /// Modifiers\n', '  ///////////////////////////////////////////////////////////\n', '  modifier hasSufficientBalance(uint quantity) {\n', '    // Check that the sender has sufficient components\n', '    // Since the component length is defined ahead of time, this is not\n', '    // an unbounded loop\n', '    require(balances[msg.sender] >= quantity, "User does not have sufficient balance");\n', '    _;\n', '  }\n', '\n', '  modifier validDestination(address _to) {\n', '    require(_to != address(0));\n', '    require(_to != address(this));\n', '    _;\n', '  }\n', '\n', '  modifier isMultipleOfNaturalUnit(uint _quantity) {\n', '    require((_quantity % naturalUnit) == 0);\n', '    _;\n', '  }\n', '\n', '  modifier isNonZero(uint _quantity) {\n', '    require(_quantity > 0);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor Function for the issuance of an {Set} token\n', '   * @param _components address[] A list of component address which you want to include\n', '   * @param _units uint[] A list of quantities in gWei of each component (corresponds to the {Set} of _components)\n', '   */\n', '  constructor(address[] _components, uint[] _units, uint _naturalUnit)\n', '    isNonZero(_naturalUnit)\n', '    public {\n', '    // There must be component present\n', '    require(_components.length > 0, "Component length needs to be great than 0");\n', '\n', '    // There must be an array of units\n', '    require(_units.length > 0, "Units must be greater than 0");\n', '\n', '    // The number of components must equal the number of units\n', '    require(_components.length == _units.length, "Component and unit lengths must be the same");\n', '\n', '    naturalUnit = _naturalUnit;\n', '\n', '    // As looping operations are expensive, checking for duplicates will be\n', '    // on the onus of the application developer\n', '\n', '    // NOTE: It will be the onus of developers to check whether the addressExists\n', '    // are in fact ERC20 addresses\n', '    for (uint16 i = 0; i < _units.length; i++) {\n', '      // Check that all units are non-zero. Negative numbers will underflow\n', '      uint currentUnits = _units[i];\n', '      require(currentUnits > 0, "Unit declarations must be non-zero");\n', '\n', '      // Check that all addresses are non-zero\n', '      address currentComponent = _components[i];\n', '      require(currentComponent != address(0), "Components must have non-zero address");\n', '\n', '      // Check the component has not already been added\n', '      require(!tokenIsComponent(currentComponent));\n', '\n', '      // add component to isComponent mapping\n', '      isComponent[keccak256(currentComponent)] = true;\n', '\n', '      components.push(Component({\n', '        address_: currentComponent,\n', '        unit_: currentUnits\n', '      }));\n', '    }\n', '  }\n', '\n', '  ///////////////////////////////////////////////////////////\n', '  /// Set Functions\n', '  ///////////////////////////////////////////////////////////\n', '\n', '  /**\n', '   * @dev Function to convert component into {Set} Tokens\n', '   *\n', '   * Please note that the user&#39;s ERC20 component must be approved by\n', '   * their ERC20 contract to transfer their components to this contract.\n', '   *\n', '   * @param _quantity uint The quantity of Sets desired to issue in Wei as a multiple of naturalUnit\n', '   */\n', '  function issue(uint _quantity)\n', '    isMultipleOfNaturalUnit(_quantity)\n', '    isNonZero(_quantity)\n', '    public returns (bool success) {\n', '    // Transfers the sender&#39;s components to the contract\n', '    // Since the component length is defined ahead of time, this is not\n', '    // an unbounded loop\n', '    for (uint16 i = 0; i < components.length; i++) {\n', '      address currentComponent = components[i].address_;\n', '      uint currentUnits = components[i].unit_;\n', '\n', '      uint preTransferBalance = ERC20(currentComponent).balanceOf(this);\n', '\n', '      uint transferValue = calculateTransferValue(currentUnits, _quantity);\n', '      require(ERC20(currentComponent).transferFrom(msg.sender, this, transferValue));\n', '\n', '      // Check that preTransferBalance + transfer value is the same as postTransferBalance\n', '      uint postTransferBalance = ERC20(currentComponent).balanceOf(this);\n', '      assert(preTransferBalance.add(transferValue) == postTransferBalance);\n', '    }\n', '\n', '    mint(_quantity);\n', '\n', '    emit LogIssuance(msg.sender, _quantity);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to convert {Set} Tokens into underlying components\n', '   *\n', '   * The ERC20 components do not need to be approved to call this function\n', '   *\n', '   * @param _quantity uint The quantity of Sets desired to redeem in Wei as a multiple of naturalUnit\n', '   */\n', '  function redeem(uint _quantity)\n', '    public\n', '    isMultipleOfNaturalUnit(_quantity)\n', '    hasSufficientBalance(_quantity)\n', '    isNonZero(_quantity)\n', '    returns (bool success)\n', '  {\n', '    burn(_quantity);\n', '\n', '    for (uint16 i = 0; i < components.length; i++) {\n', '      address currentComponent = components[i].address_;\n', '      uint currentUnits = components[i].unit_;\n', '\n', '      uint preTransferBalance = ERC20(currentComponent).balanceOf(this);\n', '\n', '      uint transferValue = calculateTransferValue(currentUnits, _quantity);\n', '      require(ERC20(currentComponent).transfer(msg.sender, transferValue));\n', '\n', '      // Check that preTransferBalance + transfer value is the same as postTransferBalance\n', '      uint postTransferBalance = ERC20(currentComponent).balanceOf(this);\n', '      assert(preTransferBalance.sub(transferValue) == postTransferBalance);\n', '    }\n', '\n', '    emit LogRedemption(msg.sender, _quantity);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to withdraw a portion of the component tokens of a Set\n', '   *\n', '   * This function should be used in the event that a component token has been\n', '   * paused for transfer temporarily or permanently. This allows users a\n', '   * method to withdraw tokens in the event that one token has been frozen.\n', '   *\n', '   * The mask can be computed by summing the powers of 2 of indexes of components to exclude.\n', '   * For example, to exclude the 0th, 1st, and 3rd components, we pass in the hex of\n', '   * 1 + 2 + 8 = 11, padded to length 32 i.e. 0x000000000000000000000000000000000000000000000000000000000000000b\n', '   *\n', '   * @param _quantity uint The quantity of Sets desired to redeem in Wei\n', '   * @param _componentsToExclude bytes32 Hex of bitmask of components to exclude\n', '   */\n', '  function partialRedeem(uint _quantity, bytes32 _componentsToExclude)\n', '    public\n', '    isMultipleOfNaturalUnit(_quantity)\n', '    isNonZero(_quantity)\n', '    hasSufficientBalance(_quantity)\n', '    returns (bool success)\n', '  {\n', '    // Excluded tokens should be less than the number of components\n', '    // Otherwise, use the normal redeem function\n', '    require(_componentsToExclude > 0, "Excluded components must be non-zero");\n', '\n', '    burn(_quantity);\n', '\n', '    for (uint16 i = 0; i < components.length; i++) {\n', '      uint transferValue = calculateTransferValue(components[i].unit_, _quantity);\n', '\n', '      // Exclude tokens if 2 raised to the power of their indexes in the components\n', '      // array results in a non zero value following a bitwise AND\n', '      if (_componentsToExclude & bytes32(2 ** i) > 0) {\n', '        unredeemedBalances[i][msg.sender] += transferValue;\n', '      } else {\n', '        uint preTransferBalance = ERC20(components[i].address_).balanceOf(this);\n', '\n', '        require(ERC20(components[i].address_).transfer(msg.sender, transferValue));\n', '\n', '        // Check that preTransferBalance + transfer value is the same as postTransferBalance\n', '        uint postTransferBalance = ERC20(components[i].address_).balanceOf(this);\n', '        assert(preTransferBalance.sub(transferValue) == postTransferBalance);\n', '      }\n', '    }\n', '\n', '    emit LogPartialRedemption(msg.sender, _quantity, _componentsToExclude);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to withdraw tokens that have previously been excluded when calling\n', '   * the partialRedeem method\n', '\n', '   * The mask can be computed by summing the powers of 2 of indexes of components to redeem.\n', '   * For example, to redeem the 0th, 1st, and 3rd components, we pass in the hex of\n', '   * 1 + 2 + 8 = 11, padded to length 32 i.e. 0x000000000000000000000000000000000000000000000000000000000000000b\n', '   *\n', '   * @param _componentsToRedeem bytes32 Hex of bitmask of components to redeem\n', '   */\n', '  function redeemExcluded(bytes32 _componentsToRedeem)\n', '    public\n', '    returns (bool success)\n', '  {\n', '    require(_componentsToRedeem > 0, "Components to redeem must be non-zero");\n', '\n', '    for (uint16 i = 0; i < components.length; i++) {\n', '      if (_componentsToRedeem & bytes32(2 ** i) > 0) {\n', '        address currentComponent = components[i].address_;\n', '        uint remainingBalance = unredeemedBalances[i][msg.sender];\n', '\n', '        // To prevent re-entrancy attacks, decrement the user&#39;s Set balance\n', '        unredeemedBalances[i][msg.sender] = 0;\n', '\n', '        require(ERC20(currentComponent).transfer(msg.sender, remainingBalance));\n', '      }\n', '    }\n', '\n', '    emit LogRedeemExcluded(msg.sender, _componentsToRedeem);\n', '\n', '    return true;\n', '  }\n', '\n', '  ///////////////////////////////////////////////////////////\n', '  /// Getters\n', '  ///////////////////////////////////////////////////////////\n', '  function getComponents() public view returns(address[]) {\n', '    address[] memory componentAddresses = new address[](components.length);\n', '    for (uint16 i = 0; i < components.length; i++) {\n', '        componentAddresses[i] = components[i].address_;\n', '    }\n', '    return componentAddresses;\n', '  }\n', '\n', '  function getUnits() public view returns(uint[]) {\n', '    uint[] memory units = new uint[](components.length);\n', '    for (uint16 i = 0; i < components.length; i++) {\n', '        units[i] = components[i].unit_;\n', '    }\n', '    return units;\n', '  }\n', '\n', '  function getUnredeemedBalance(address _componentAddress, address _userAddress) public view returns (uint256) {\n', '    require(tokenIsComponent(_componentAddress));\n', '\n', '    uint componentIndex;\n', '\n', '    for (uint i = 0; i < components.length; i++) {\n', '      if (components[i].address_ == _componentAddress) {\n', '        componentIndex = i;\n', '      }\n', '    }\n', '\n', '    return unredeemedBalances[componentIndex][_userAddress];\n', '  }\n', '\n', '  ///////////////////////////////////////////////////////////\n', '  /// Transfer Updates\n', '  ///////////////////////////////////////////////////////////\n', '  function transfer(address _to, uint256 _value) validDestination(_to) public returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) validDestination(_to) public returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  ///////////////////////////////////////////////////////////\n', '  /// Private Function\n', '  ///////////////////////////////////////////////////////////\n', '\n', '  function tokenIsComponent(address _tokenAddress) view internal returns (bool) {\n', '    return isComponent[keccak256(_tokenAddress)];\n', '  }\n', '\n', '  function calculateTransferValue(uint componentUnits, uint quantity) view internal returns(uint) {\n', '    return quantity.div(naturalUnit).mul(componentUnits);\n', '  }\n', '\n', '  function mint(uint quantity) internal {\n', '    balances[msg.sender] = balances[msg.sender].add(quantity);\n', '    totalSupply_ = totalSupply_.add(quantity);\n', '    emit Transfer(address(0), msg.sender, quantity);\n', '  }\n', '\n', '  function burn(uint quantity) internal {\n', '    balances[msg.sender] = balances[msg.sender].sub(quantity);\n', '    totalSupply_ = totalSupply_.sub(quantity);\n', '    emit Transfer(msg.sender, address(0), quantity);\n', '  }\n', '}']
['pragma solidity 0.4.23;\n', '\n', '//////////////////////////////\n', '///// ERC20Basic\n', '//////////////////////////////\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '//////////////////////////////\n', '///// ERC20 Interface\n', '//////////////////////////////\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '//////////////////////////////\n', '///// ERC20 Basic\n', '//////////////////////////////\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '//////////////////////////////\n', '///// DetailedERC20\n', '//////////////////////////////\n', '\n', 'contract DetailedERC20 is ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}\n', '\n', '//////////////////////////////\n', '///// Standard Token\n', '//////////////////////////////\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '//////////////////////////////\n', '///// SafeMath\n', '//////////////////////////////\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '//////////////////////////////\n', '///// AddressArrayUtil\n', '//////////////////////////////\n', '\n', '/**\n', ' * @title AddressArrayUtil\n', ' */\n', 'library AddressArrayUtils {\n', '  function hasValue(address[] addresses, address value) internal returns (bool) {\n', '    for (uint i = 0; i < addresses.length; i++) {\n', '      if (addresses[i] == value) {\n', '        return true;\n', '      }\n', '    }\n', '\n', '    return false;\n', '  }\n', '\n', '  function removeByIndex(address[] storage a, uint256 index) internal returns (uint256) {\n', '    a[index] = a[a.length - 1];\n', '    a.length -= 1;\n', '  }\n', '}\n', '\n', '\n', '//////////////////////////////\n', '///// Set Interface\n', '//////////////////////////////\n', '\n', '/**\n', ' * @title Set interface\n', ' */\n', 'contract SetInterface {\n', '\n', '  /**\n', '   * @dev Function to convert component into {Set} Tokens\n', '   *\n', "   * Please note that the user's ERC20 component must be approved by\n", '   * their ERC20 contract to transfer their components to this contract.\n', '   *\n', '   * @param _quantity uint The quantity of Sets desired to issue in Wei as a multiple of naturalUnit\n', '   */\n', '  function issue(uint _quantity) public returns (bool success);\n', '  \n', '  /**\n', '   * @dev Function to convert {Set} Tokens into underlying components\n', '   *\n', '   * The ERC20 components do not need to be approved to call this function\n', '   *\n', '   * @param _quantity uint The quantity of Sets desired to redeem in Wei as a multiple of naturalUnit\n', '   */\n', '  function redeem(uint _quantity) public returns (bool success);\n', '\n', '  event LogIssuance(\n', '    address indexed _sender,\n', '    uint _quantity\n', '  );\n', '\n', '  event LogRedemption(\n', '    address indexed _sender,\n', '    uint _quantity\n', '  );\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title {Set}\n', ' * @author Felix Feng\n', ' * @dev Implementation of the basic {Set} token.\n', ' */\n', 'contract SetToken is StandardToken, DetailedERC20("Decentralized Exchange Set", "DEX", 18), SetInterface {\n', '  using SafeMath for uint256;\n', '  using AddressArrayUtils for address[];\n', '\n', '  ///////////////////////////////////////////////////////////\n', '  /// Data Structures\n', '  ///////////////////////////////////////////////////////////\n', '  struct Component {\n', '    address address_;\n', '    uint unit_;\n', '  }\n', '\n', '  ///////////////////////////////////////////////////////////\n', '  /// States\n', '  ///////////////////////////////////////////////////////////\n', '  uint public naturalUnit;\n', '  Component[] public components;\n', '\n', '  // Mapping of componentHash to isComponent\n', '  mapping(bytes32 => bool) internal isComponent;\n', '  // Mapping of index of component -> user address -> balance\n', '  mapping(uint => mapping(address => uint)) internal unredeemedBalances;\n', '\n', '\n', '  ///////////////////////////////////////////////////////////\n', '  /// Events\n', '  ///////////////////////////////////////////////////////////\n', '  event LogPartialRedemption(\n', '    address indexed _sender,\n', '    uint _quantity,\n', '    bytes32 _excludedComponents\n', '  );\n', '\n', '  event LogRedeemExcluded(\n', '    address indexed _sender,\n', '    bytes32 _components\n', '  );\n', '\n', '  ///////////////////////////////////////////////////////////\n', '  /// Modifiers\n', '  ///////////////////////////////////////////////////////////\n', '  modifier hasSufficientBalance(uint quantity) {\n', '    // Check that the sender has sufficient components\n', '    // Since the component length is defined ahead of time, this is not\n', '    // an unbounded loop\n', '    require(balances[msg.sender] >= quantity, "User does not have sufficient balance");\n', '    _;\n', '  }\n', '\n', '  modifier validDestination(address _to) {\n', '    require(_to != address(0));\n', '    require(_to != address(this));\n', '    _;\n', '  }\n', '\n', '  modifier isMultipleOfNaturalUnit(uint _quantity) {\n', '    require((_quantity % naturalUnit) == 0);\n', '    _;\n', '  }\n', '\n', '  modifier isNonZero(uint _quantity) {\n', '    require(_quantity > 0);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor Function for the issuance of an {Set} token\n', '   * @param _components address[] A list of component address which you want to include\n', '   * @param _units uint[] A list of quantities in gWei of each component (corresponds to the {Set} of _components)\n', '   */\n', '  constructor(address[] _components, uint[] _units, uint _naturalUnit)\n', '    isNonZero(_naturalUnit)\n', '    public {\n', '    // There must be component present\n', '    require(_components.length > 0, "Component length needs to be great than 0");\n', '\n', '    // There must be an array of units\n', '    require(_units.length > 0, "Units must be greater than 0");\n', '\n', '    // The number of components must equal the number of units\n', '    require(_components.length == _units.length, "Component and unit lengths must be the same");\n', '\n', '    naturalUnit = _naturalUnit;\n', '\n', '    // As looping operations are expensive, checking for duplicates will be\n', '    // on the onus of the application developer\n', '\n', '    // NOTE: It will be the onus of developers to check whether the addressExists\n', '    // are in fact ERC20 addresses\n', '    for (uint16 i = 0; i < _units.length; i++) {\n', '      // Check that all units are non-zero. Negative numbers will underflow\n', '      uint currentUnits = _units[i];\n', '      require(currentUnits > 0, "Unit declarations must be non-zero");\n', '\n', '      // Check that all addresses are non-zero\n', '      address currentComponent = _components[i];\n', '      require(currentComponent != address(0), "Components must have non-zero address");\n', '\n', '      // Check the component has not already been added\n', '      require(!tokenIsComponent(currentComponent));\n', '\n', '      // add component to isComponent mapping\n', '      isComponent[keccak256(currentComponent)] = true;\n', '\n', '      components.push(Component({\n', '        address_: currentComponent,\n', '        unit_: currentUnits\n', '      }));\n', '    }\n', '  }\n', '\n', '  ///////////////////////////////////////////////////////////\n', '  /// Set Functions\n', '  ///////////////////////////////////////////////////////////\n', '\n', '  /**\n', '   * @dev Function to convert component into {Set} Tokens\n', '   *\n', "   * Please note that the user's ERC20 component must be approved by\n", '   * their ERC20 contract to transfer their components to this contract.\n', '   *\n', '   * @param _quantity uint The quantity of Sets desired to issue in Wei as a multiple of naturalUnit\n', '   */\n', '  function issue(uint _quantity)\n', '    isMultipleOfNaturalUnit(_quantity)\n', '    isNonZero(_quantity)\n', '    public returns (bool success) {\n', "    // Transfers the sender's components to the contract\n", '    // Since the component length is defined ahead of time, this is not\n', '    // an unbounded loop\n', '    for (uint16 i = 0; i < components.length; i++) {\n', '      address currentComponent = components[i].address_;\n', '      uint currentUnits = components[i].unit_;\n', '\n', '      uint preTransferBalance = ERC20(currentComponent).balanceOf(this);\n', '\n', '      uint transferValue = calculateTransferValue(currentUnits, _quantity);\n', '      require(ERC20(currentComponent).transferFrom(msg.sender, this, transferValue));\n', '\n', '      // Check that preTransferBalance + transfer value is the same as postTransferBalance\n', '      uint postTransferBalance = ERC20(currentComponent).balanceOf(this);\n', '      assert(preTransferBalance.add(transferValue) == postTransferBalance);\n', '    }\n', '\n', '    mint(_quantity);\n', '\n', '    emit LogIssuance(msg.sender, _quantity);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to convert {Set} Tokens into underlying components\n', '   *\n', '   * The ERC20 components do not need to be approved to call this function\n', '   *\n', '   * @param _quantity uint The quantity of Sets desired to redeem in Wei as a multiple of naturalUnit\n', '   */\n', '  function redeem(uint _quantity)\n', '    public\n', '    isMultipleOfNaturalUnit(_quantity)\n', '    hasSufficientBalance(_quantity)\n', '    isNonZero(_quantity)\n', '    returns (bool success)\n', '  {\n', '    burn(_quantity);\n', '\n', '    for (uint16 i = 0; i < components.length; i++) {\n', '      address currentComponent = components[i].address_;\n', '      uint currentUnits = components[i].unit_;\n', '\n', '      uint preTransferBalance = ERC20(currentComponent).balanceOf(this);\n', '\n', '      uint transferValue = calculateTransferValue(currentUnits, _quantity);\n', '      require(ERC20(currentComponent).transfer(msg.sender, transferValue));\n', '\n', '      // Check that preTransferBalance + transfer value is the same as postTransferBalance\n', '      uint postTransferBalance = ERC20(currentComponent).balanceOf(this);\n', '      assert(preTransferBalance.sub(transferValue) == postTransferBalance);\n', '    }\n', '\n', '    emit LogRedemption(msg.sender, _quantity);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to withdraw a portion of the component tokens of a Set\n', '   *\n', '   * This function should be used in the event that a component token has been\n', '   * paused for transfer temporarily or permanently. This allows users a\n', '   * method to withdraw tokens in the event that one token has been frozen.\n', '   *\n', '   * The mask can be computed by summing the powers of 2 of indexes of components to exclude.\n', '   * For example, to exclude the 0th, 1st, and 3rd components, we pass in the hex of\n', '   * 1 + 2 + 8 = 11, padded to length 32 i.e. 0x000000000000000000000000000000000000000000000000000000000000000b\n', '   *\n', '   * @param _quantity uint The quantity of Sets desired to redeem in Wei\n', '   * @param _componentsToExclude bytes32 Hex of bitmask of components to exclude\n', '   */\n', '  function partialRedeem(uint _quantity, bytes32 _componentsToExclude)\n', '    public\n', '    isMultipleOfNaturalUnit(_quantity)\n', '    isNonZero(_quantity)\n', '    hasSufficientBalance(_quantity)\n', '    returns (bool success)\n', '  {\n', '    // Excluded tokens should be less than the number of components\n', '    // Otherwise, use the normal redeem function\n', '    require(_componentsToExclude > 0, "Excluded components must be non-zero");\n', '\n', '    burn(_quantity);\n', '\n', '    for (uint16 i = 0; i < components.length; i++) {\n', '      uint transferValue = calculateTransferValue(components[i].unit_, _quantity);\n', '\n', '      // Exclude tokens if 2 raised to the power of their indexes in the components\n', '      // array results in a non zero value following a bitwise AND\n', '      if (_componentsToExclude & bytes32(2 ** i) > 0) {\n', '        unredeemedBalances[i][msg.sender] += transferValue;\n', '      } else {\n', '        uint preTransferBalance = ERC20(components[i].address_).balanceOf(this);\n', '\n', '        require(ERC20(components[i].address_).transfer(msg.sender, transferValue));\n', '\n', '        // Check that preTransferBalance + transfer value is the same as postTransferBalance\n', '        uint postTransferBalance = ERC20(components[i].address_).balanceOf(this);\n', '        assert(preTransferBalance.sub(transferValue) == postTransferBalance);\n', '      }\n', '    }\n', '\n', '    emit LogPartialRedemption(msg.sender, _quantity, _componentsToExclude);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to withdraw tokens that have previously been excluded when calling\n', '   * the partialRedeem method\n', '\n', '   * The mask can be computed by summing the powers of 2 of indexes of components to redeem.\n', '   * For example, to redeem the 0th, 1st, and 3rd components, we pass in the hex of\n', '   * 1 + 2 + 8 = 11, padded to length 32 i.e. 0x000000000000000000000000000000000000000000000000000000000000000b\n', '   *\n', '   * @param _componentsToRedeem bytes32 Hex of bitmask of components to redeem\n', '   */\n', '  function redeemExcluded(bytes32 _componentsToRedeem)\n', '    public\n', '    returns (bool success)\n', '  {\n', '    require(_componentsToRedeem > 0, "Components to redeem must be non-zero");\n', '\n', '    for (uint16 i = 0; i < components.length; i++) {\n', '      if (_componentsToRedeem & bytes32(2 ** i) > 0) {\n', '        address currentComponent = components[i].address_;\n', '        uint remainingBalance = unredeemedBalances[i][msg.sender];\n', '\n', "        // To prevent re-entrancy attacks, decrement the user's Set balance\n", '        unredeemedBalances[i][msg.sender] = 0;\n', '\n', '        require(ERC20(currentComponent).transfer(msg.sender, remainingBalance));\n', '      }\n', '    }\n', '\n', '    emit LogRedeemExcluded(msg.sender, _componentsToRedeem);\n', '\n', '    return true;\n', '  }\n', '\n', '  ///////////////////////////////////////////////////////////\n', '  /// Getters\n', '  ///////////////////////////////////////////////////////////\n', '  function getComponents() public view returns(address[]) {\n', '    address[] memory componentAddresses = new address[](components.length);\n', '    for (uint16 i = 0; i < components.length; i++) {\n', '        componentAddresses[i] = components[i].address_;\n', '    }\n', '    return componentAddresses;\n', '  }\n', '\n', '  function getUnits() public view returns(uint[]) {\n', '    uint[] memory units = new uint[](components.length);\n', '    for (uint16 i = 0; i < components.length; i++) {\n', '        units[i] = components[i].unit_;\n', '    }\n', '    return units;\n', '  }\n', '\n', '  function getUnredeemedBalance(address _componentAddress, address _userAddress) public view returns (uint256) {\n', '    require(tokenIsComponent(_componentAddress));\n', '\n', '    uint componentIndex;\n', '\n', '    for (uint i = 0; i < components.length; i++) {\n', '      if (components[i].address_ == _componentAddress) {\n', '        componentIndex = i;\n', '      }\n', '    }\n', '\n', '    return unredeemedBalances[componentIndex][_userAddress];\n', '  }\n', '\n', '  ///////////////////////////////////////////////////////////\n', '  /// Transfer Updates\n', '  ///////////////////////////////////////////////////////////\n', '  function transfer(address _to, uint256 _value) validDestination(_to) public returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) validDestination(_to) public returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  ///////////////////////////////////////////////////////////\n', '  /// Private Function\n', '  ///////////////////////////////////////////////////////////\n', '\n', '  function tokenIsComponent(address _tokenAddress) view internal returns (bool) {\n', '    return isComponent[keccak256(_tokenAddress)];\n', '  }\n', '\n', '  function calculateTransferValue(uint componentUnits, uint quantity) view internal returns(uint) {\n', '    return quantity.div(naturalUnit).mul(componentUnits);\n', '  }\n', '\n', '  function mint(uint quantity) internal {\n', '    balances[msg.sender] = balances[msg.sender].add(quantity);\n', '    totalSupply_ = totalSupply_.add(quantity);\n', '    emit Transfer(address(0), msg.sender, quantity);\n', '  }\n', '\n', '  function burn(uint quantity) internal {\n', '    balances[msg.sender] = balances[msg.sender].sub(quantity);\n', '    totalSupply_ = totalSupply_.sub(quantity);\n', '    emit Transfer(msg.sender, address(0), quantity);\n', '  }\n', '}']
