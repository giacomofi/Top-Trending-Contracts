['pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '}\n', '\n', '  /**\n', '  * @title ForeignToken\n', '  * @dev Enables smart contract to hold and send other ERC20 tokens.\n', '  */\n', 'contract ForeignToken {\n', '  function balanceOf(address _owner) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '}\n', '\n', '  contract Eurno is ERC20Basic, Ownable, ForeignToken {\n', '    using SafeMath for uint256;\n', '\n', '    string public constant name = "Eurno";\n', '    string public constant symbol = "ENO";\n', '    uint public constant decimals = 8;\n', '    uint256 public totalSupply = 28e14;\n', '    uint256 internal functAttempts;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value); // Define the transfer event\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping (address => uint256)) internal allowed;\n', '   \n', '    /**\n', '     * @dev modifier to limit the number of times a function can be called to once. \n', '     */\n', '    modifier onlyOnce(){\n', '        require(functAttempts <= 0);\n', '        _;\n', '    }\n', '\n', '  /**\n', '  * @dev Constructor function to start the Eurno token chain.\n', '  * Transfer&#39;s the owner&#39;s wallet with the development fund of 5 million tokens.\n', '  */\n', '  constructor() public {\n', '    balances[msg.sender] = balances[msg.sender].add(totalSupply); // Update balances on the Ledger.\n', '    emit Transfer(this, owner, totalSupply); // Transfer owner 5 mil dev fund.\n', '  }\n', '  \n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address.\n', '  * \n', '  * Using onlyPayloadSize to prevent short address attack\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  \n', '  /**\n', '   * @dev Allows the owner of the contract to distribute to other contracts. \n', '   * Used, for example, to distribute the airdrop balance to the airdrop contract.\n', '   * \n', '   * @param _to is the address of the contract.\n', '   * @param _value is the amount of ENO to send to it.\n', '   */\n', '  function distAirdrop(address _to, uint256 _value) onlyOwner onlyOnce public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    functAttempts = 1;\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '  \n', '  /**\n', '   * @dev Function to withdraw foreign tokens stored in this contract.\n', '   * \n', '   * @param _tokenContract is the smart contract address of the token to be withdrawn.\n', '   */ \n', '  function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\n', '    ForeignToken token = ForeignToken(_tokenContract);\n', '    uint256 amount = token.balanceOf(address(this));\n', '    return token.transfer(owner, amount);\n', '    }\n', '\n', '  /**\n', '   * @dev Fallback function to allow the contract to accept Eth donations.\n', '   */\n', '  function() public payable {\n', '  }\n', '  \n', '  /**\n', '   * @dev Function to allow contract owner to withdraw Ethereum deposited to the Eurno contract.\n', '   */\n', '  function withdraw() onlyOwner public {\n', '    uint256 etherBalance = address(this).balance;\n', '    owner.transfer(etherBalance);\n', '    }\n', '    \n', '  /**\n', '   * @dev Burns a specific amount of tokens. Can only be called by contract owner.\n', '   * \n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) onlyOwner public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '  \n', '  /**\n', '   * @dev actual function to burn tokens.\n', '   * \n', '   * @param _who is the address of the person burning tokens.\n', '   * @param _value is the number of tokens burned.\n', '   */\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '\n', '}']
['pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '}\n', '\n', '  /**\n', '  * @title ForeignToken\n', '  * @dev Enables smart contract to hold and send other ERC20 tokens.\n', '  */\n', 'contract ForeignToken {\n', '  function balanceOf(address _owner) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '}\n', '\n', '  contract Eurno is ERC20Basic, Ownable, ForeignToken {\n', '    using SafeMath for uint256;\n', '\n', '    string public constant name = "Eurno";\n', '    string public constant symbol = "ENO";\n', '    uint public constant decimals = 8;\n', '    uint256 public totalSupply = 28e14;\n', '    uint256 internal functAttempts;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value); // Define the transfer event\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping (address => uint256)) internal allowed;\n', '   \n', '    /**\n', '     * @dev modifier to limit the number of times a function can be called to once. \n', '     */\n', '    modifier onlyOnce(){\n', '        require(functAttempts <= 0);\n', '        _;\n', '    }\n', '\n', '  /**\n', '  * @dev Constructor function to start the Eurno token chain.\n', "  * Transfer's the owner's wallet with the development fund of 5 million tokens.\n", '  */\n', '  constructor() public {\n', '    balances[msg.sender] = balances[msg.sender].add(totalSupply); // Update balances on the Ledger.\n', '    emit Transfer(this, owner, totalSupply); // Transfer owner 5 mil dev fund.\n', '  }\n', '  \n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address.\n', '  * \n', '  * Using onlyPayloadSize to prevent short address attack\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  \n', '  /**\n', '   * @dev Allows the owner of the contract to distribute to other contracts. \n', '   * Used, for example, to distribute the airdrop balance to the airdrop contract.\n', '   * \n', '   * @param _to is the address of the contract.\n', '   * @param _value is the amount of ENO to send to it.\n', '   */\n', '  function distAirdrop(address _to, uint256 _value) onlyOwner onlyOnce public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    functAttempts = 1;\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '  \n', '  /**\n', '   * @dev Function to withdraw foreign tokens stored in this contract.\n', '   * \n', '   * @param _tokenContract is the smart contract address of the token to be withdrawn.\n', '   */ \n', '  function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\n', '    ForeignToken token = ForeignToken(_tokenContract);\n', '    uint256 amount = token.balanceOf(address(this));\n', '    return token.transfer(owner, amount);\n', '    }\n', '\n', '  /**\n', '   * @dev Fallback function to allow the contract to accept Eth donations.\n', '   */\n', '  function() public payable {\n', '  }\n', '  \n', '  /**\n', '   * @dev Function to allow contract owner to withdraw Ethereum deposited to the Eurno contract.\n', '   */\n', '  function withdraw() onlyOwner public {\n', '    uint256 etherBalance = address(this).balance;\n', '    owner.transfer(etherBalance);\n', '    }\n', '    \n', '  /**\n', '   * @dev Burns a specific amount of tokens. Can only be called by contract owner.\n', '   * \n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) onlyOwner public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '  \n', '  /**\n', '   * @dev actual function to burn tokens.\n', '   * \n', '   * @param _who is the address of the person burning tokens.\n', '   * @param _value is the number of tokens burned.\n', '   */\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '\n', '}']
