['pragma solidity 0.4.21;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value)\n', '    internal\n', '  {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens\n', ' * @author SylTi\n', ' * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n', ' * This will prevent any accidental loss of tokens.\n', ' */\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.safeTransfer(owner, balance);\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/// @dev Right now, the Biddable application is responsible for being the arbitrator to all escrows.\n', '///  This means, the Biddable application has to enforce boundaries such that auction houses can\n', '///  only release escrows for users on their platform. This is done via the shared secret that is\n', '///  provisioned for each platform that onboards with the service.\n', 'contract BiddableEscrow is CanReclaimToken {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  // Mapping of escrows. Key is a UUID generated by Biddable\n', '  mapping (string => EscrowDeposit) private escrows;\n', '\n', '  // The arbitrator that is responsible for releasing escrow.\n', '  // At this time this is the Biddable service.\n', '  // This should be separate key than the one used for the creation of the contract.\n', '  address public arbitrator;\n', '\n', '  // Gas fees that have accumulated in this contract to reimburse the arbitrator\n', '  // for paying fees for releasing escrow. These are stored locally to avoid having to\n', '  // pay additional gas costs for transfer during each release.\n', '  uint256 public accumulatedGasFees;\n', '\n', '  struct EscrowDeposit {\n', '    // Used to avoid collisions\n', '    bool exists;\n', '\n', '    // Address of the bidder\n', '    address bidder;\n', '\n', '    // Encrypted data of the escrow\n', '    // This is the ownership data of the escrow in the context of the auction house platform\n', '    // It holds the platformId, auctionId, and the userId on the platform\n', '    bytes data;\n', '\n', '    // The amount in the escrow\n', '    uint256 amount;\n', '  }\n', '\n', '  modifier onlyArbitrator() {\n', '    require(msg.sender == arbitrator);\n', '    _;\n', '  }\n', '\n', '  /// @dev Constructor for the smart contract\n', '  /// @param _arbitrator Address for an arbitrator that is responsible for signing the transaction data\n', '  function BiddableEscrow(address _arbitrator) public {\n', '    arbitrator = _arbitrator;\n', '    accumulatedGasFees = 0;\n', '  }\n', '\n', '  /// @notice Sets a new arbitrator. Only callable by the owner\n', '  /// @param _newArbitrator Address for the new arbitrator\n', '  function setArbitrator(address _newArbitrator) external onlyOwner {\n', '    arbitrator = _newArbitrator;\n', '  }\n', '\n', '  /// @dev This event is emitted when funds have been deposited into a new escrow.\n', '  ///  The data is an encrypted blob that contains the user&#39;s userId so that the\n', '  ///  Biddable service can tell the calling platform which user to approve for bidding.\n', '  event Created(address indexed sender, string id, bytes data);\n', '\n', '  /// @notice Deposit ether into escrow. The data must be signed by the Biddable service.\n', '  /// @dev We don&#39;t use an &#39;onlyArbitrator&#39; modifier because the transaction itself is sent by the bidder,\n', '  ///  but the data must be signed by the Biddable service. Thus, the function must be available to call\n', '  ///  by anyone.\n', '  /// @param _id Is the unique identifier of the escrow\n', '  /// @param _depositAmount The deposit required to be in escrow for approval\n', '  /// @param _data The encrypted deposit data\n', '  /// @param _v Recovery number\n', '  /// @param _r First part of the signature\n', '  /// @param _s Second part of the signature\n', '  function deposit(\n', '    string _id,\n', '    uint256 _depositAmount,\n', '    bytes _data,\n', '    uint8 _v,\n', '    bytes32 _r,\n', '    bytes32 _s)\n', '    external payable\n', '  {\n', '    // Throw if the amount sent doesn&#39;t mean the deposit amount\n', '    require(msg.value == _depositAmount);\n', '\n', '    // Throw if a deposit with this id already exists\n', '    require(!escrows[_id].exists);\n', '\n', '    bytes32 hash = keccak256(_id, _depositAmount, _data);\n', '    bytes memory prefix = "\\x19Ethereum Signed Message:\\n32";\n', '\n', '    address recoveredAddress = ecrecover(\n', '      keccak256(prefix, hash),\n', '      _v,\n', '      _r,\n', '      _s\n', '    );\n', '\n', '    // Throw if the signature wasn&#39;t created by the arbitrator\n', '    require(recoveredAddress == arbitrator);\n', '\n', '    escrows[_id] = EscrowDeposit(\n', '      true,\n', '      msg.sender,\n', '      _data,\n', '      msg.value);\n', '\n', '    emit Created(msg.sender, _id, _data);\n', '  }\n', '\n', '  uint256 public constant RELEASE_GAS_FEES = 45989;\n', '\n', '  /// @dev This event is emitted when funds have been released from escrow at which time\n', '  ///  the escrow will be removed from storage (i.e., destroyed).\n', '  event Released(address indexed sender, address indexed bidder, uint256 value, string id);\n', '\n', '  /// @notice Release ether from escrow. Only the arbitrator is able to perform this action.\n', '  /// @param _id Is the unique identifier of the escrow\n', '  function release(string _id) external onlyArbitrator {\n', '    // Throw if this deposit doesn&#39;t exist\n', '    require(escrows[_id].exists);\n', '\n', '    EscrowDeposit storage escrowDeposit = escrows[_id];\n', '\n', '    // Shouldn&#39;t need to use SafeMath here because this should never cause an overflow\n', '    uint256 gasFees = RELEASE_GAS_FEES.mul(tx.gasprice);\n', '    uint256 amount = escrowDeposit.amount.sub(gasFees);\n', '    address bidder = escrowDeposit.bidder;\n', '\n', '    // Remove the deposit from storage\n', '    delete escrows[_id];\n', '\n', '    accumulatedGasFees = accumulatedGasFees.add(gasFees);\n', '    bidder.transfer(amount);\n', '\n', '    emit Released(\n', '      msg.sender,\n', '      bidder,\n', '      amount,\n', '      _id);\n', '  }\n', '\n', '  /// @notice Withdraw accumulated gas fees from the arbitratror releasing escrow.\n', '  ///  Only callable by the owner\n', '  function withdrawAccumulatedFees(address _to) external onlyOwner {\n', '    uint256 transferAmount = accumulatedGasFees;\n', '    accumulatedGasFees = 0;\n', '\n', '    _to.transfer(transferAmount);\n', '  }\n', '\n', '  /// @dev This accessor method is needed because the compiler is not able to create one with a string mapping\n', '  /// @notice Gets the EscrowDeposit based on the input id. Throws if the deposit doesn&#39;t exist.\n', '  /// @param _id The unique identifier of the escrow\n', '  function getEscrowDeposit(string _id) external view returns (address bidder, bytes data, uint256 amount) {\n', '    // Throw if this deposit doesn&#39;t exist\n', '    require(escrows[_id].exists);\n', '\n', '    EscrowDeposit storage escrowDeposit = escrows[_id];\n', '\n', '    bidder = escrowDeposit.bidder;\n', '    data = escrowDeposit.data;\n', '    amount = escrowDeposit.amount;\n', '  }\n', '}']
['pragma solidity 0.4.21;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value)\n', '    internal\n', '  {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens\n', ' * @author SylTi\n', ' * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n', ' * This will prevent any accidental loss of tokens.\n', ' */\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.safeTransfer(owner, balance);\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/// @dev Right now, the Biddable application is responsible for being the arbitrator to all escrows.\n', '///  This means, the Biddable application has to enforce boundaries such that auction houses can\n', '///  only release escrows for users on their platform. This is done via the shared secret that is\n', '///  provisioned for each platform that onboards with the service.\n', 'contract BiddableEscrow is CanReclaimToken {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  // Mapping of escrows. Key is a UUID generated by Biddable\n', '  mapping (string => EscrowDeposit) private escrows;\n', '\n', '  // The arbitrator that is responsible for releasing escrow.\n', '  // At this time this is the Biddable service.\n', '  // This should be separate key than the one used for the creation of the contract.\n', '  address public arbitrator;\n', '\n', '  // Gas fees that have accumulated in this contract to reimburse the arbitrator\n', '  // for paying fees for releasing escrow. These are stored locally to avoid having to\n', '  // pay additional gas costs for transfer during each release.\n', '  uint256 public accumulatedGasFees;\n', '\n', '  struct EscrowDeposit {\n', '    // Used to avoid collisions\n', '    bool exists;\n', '\n', '    // Address of the bidder\n', '    address bidder;\n', '\n', '    // Encrypted data of the escrow\n', '    // This is the ownership data of the escrow in the context of the auction house platform\n', '    // It holds the platformId, auctionId, and the userId on the platform\n', '    bytes data;\n', '\n', '    // The amount in the escrow\n', '    uint256 amount;\n', '  }\n', '\n', '  modifier onlyArbitrator() {\n', '    require(msg.sender == arbitrator);\n', '    _;\n', '  }\n', '\n', '  /// @dev Constructor for the smart contract\n', '  /// @param _arbitrator Address for an arbitrator that is responsible for signing the transaction data\n', '  function BiddableEscrow(address _arbitrator) public {\n', '    arbitrator = _arbitrator;\n', '    accumulatedGasFees = 0;\n', '  }\n', '\n', '  /// @notice Sets a new arbitrator. Only callable by the owner\n', '  /// @param _newArbitrator Address for the new arbitrator\n', '  function setArbitrator(address _newArbitrator) external onlyOwner {\n', '    arbitrator = _newArbitrator;\n', '  }\n', '\n', '  /// @dev This event is emitted when funds have been deposited into a new escrow.\n', "  ///  The data is an encrypted blob that contains the user's userId so that the\n", '  ///  Biddable service can tell the calling platform which user to approve for bidding.\n', '  event Created(address indexed sender, string id, bytes data);\n', '\n', '  /// @notice Deposit ether into escrow. The data must be signed by the Biddable service.\n', "  /// @dev We don't use an 'onlyArbitrator' modifier because the transaction itself is sent by the bidder,\n", '  ///  but the data must be signed by the Biddable service. Thus, the function must be available to call\n', '  ///  by anyone.\n', '  /// @param _id Is the unique identifier of the escrow\n', '  /// @param _depositAmount The deposit required to be in escrow for approval\n', '  /// @param _data The encrypted deposit data\n', '  /// @param _v Recovery number\n', '  /// @param _r First part of the signature\n', '  /// @param _s Second part of the signature\n', '  function deposit(\n', '    string _id,\n', '    uint256 _depositAmount,\n', '    bytes _data,\n', '    uint8 _v,\n', '    bytes32 _r,\n', '    bytes32 _s)\n', '    external payable\n', '  {\n', "    // Throw if the amount sent doesn't mean the deposit amount\n", '    require(msg.value == _depositAmount);\n', '\n', '    // Throw if a deposit with this id already exists\n', '    require(!escrows[_id].exists);\n', '\n', '    bytes32 hash = keccak256(_id, _depositAmount, _data);\n', '    bytes memory prefix = "\\x19Ethereum Signed Message:\\n32";\n', '\n', '    address recoveredAddress = ecrecover(\n', '      keccak256(prefix, hash),\n', '      _v,\n', '      _r,\n', '      _s\n', '    );\n', '\n', "    // Throw if the signature wasn't created by the arbitrator\n", '    require(recoveredAddress == arbitrator);\n', '\n', '    escrows[_id] = EscrowDeposit(\n', '      true,\n', '      msg.sender,\n', '      _data,\n', '      msg.value);\n', '\n', '    emit Created(msg.sender, _id, _data);\n', '  }\n', '\n', '  uint256 public constant RELEASE_GAS_FEES = 45989;\n', '\n', '  /// @dev This event is emitted when funds have been released from escrow at which time\n', '  ///  the escrow will be removed from storage (i.e., destroyed).\n', '  event Released(address indexed sender, address indexed bidder, uint256 value, string id);\n', '\n', '  /// @notice Release ether from escrow. Only the arbitrator is able to perform this action.\n', '  /// @param _id Is the unique identifier of the escrow\n', '  function release(string _id) external onlyArbitrator {\n', "    // Throw if this deposit doesn't exist\n", '    require(escrows[_id].exists);\n', '\n', '    EscrowDeposit storage escrowDeposit = escrows[_id];\n', '\n', "    // Shouldn't need to use SafeMath here because this should never cause an overflow\n", '    uint256 gasFees = RELEASE_GAS_FEES.mul(tx.gasprice);\n', '    uint256 amount = escrowDeposit.amount.sub(gasFees);\n', '    address bidder = escrowDeposit.bidder;\n', '\n', '    // Remove the deposit from storage\n', '    delete escrows[_id];\n', '\n', '    accumulatedGasFees = accumulatedGasFees.add(gasFees);\n', '    bidder.transfer(amount);\n', '\n', '    emit Released(\n', '      msg.sender,\n', '      bidder,\n', '      amount,\n', '      _id);\n', '  }\n', '\n', '  /// @notice Withdraw accumulated gas fees from the arbitratror releasing escrow.\n', '  ///  Only callable by the owner\n', '  function withdrawAccumulatedFees(address _to) external onlyOwner {\n', '    uint256 transferAmount = accumulatedGasFees;\n', '    accumulatedGasFees = 0;\n', '\n', '    _to.transfer(transferAmount);\n', '  }\n', '\n', '  /// @dev This accessor method is needed because the compiler is not able to create one with a string mapping\n', "  /// @notice Gets the EscrowDeposit based on the input id. Throws if the deposit doesn't exist.\n", '  /// @param _id The unique identifier of the escrow\n', '  function getEscrowDeposit(string _id) external view returns (address bidder, bytes data, uint256 amount) {\n', "    // Throw if this deposit doesn't exist\n", '    require(escrows[_id].exists);\n', '\n', '    EscrowDeposit storage escrowDeposit = escrows[_id];\n', '\n', '    bidder = escrowDeposit.bidder;\n', '    data = escrowDeposit.data;\n', '    amount = escrowDeposit.amount;\n', '  }\n', '}']
