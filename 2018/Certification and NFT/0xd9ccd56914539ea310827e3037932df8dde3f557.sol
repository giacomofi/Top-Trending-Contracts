['pragma solidity 0.4.21;\n', '\n', '// How fast can you get to 100 points and win the prize?\n', '// First person to deposit 0.1 eth (100 finney) wins the entire prize!\n', '// 1 finney = 1 point\n', '\n', 'contract RACEFORETH {\n', '    // 100 points to win!\n', '    uint256 public SCORE_TO_WIN = 100 finney;\n', '    uint256 public PRIZE;\n', '    \n', '    // 100 points = 0.1 ether\n', '    // Speed limit: 0.05 eth to prevent insta-win\n', '    // Prevents people from going too fast!\n', '    uint256 public speed_limit = 50 finney;\n', '    \n', '    // Keep track of everyone&#39;s score\n', '    mapping (address => uint256) racerScore;\n', '    mapping (address => uint256) racerSpeedLimit;\n', '    \n', '    uint256 latestTimestamp;\n', '    address owner;\n', '    \n', '    function RACEFORETH () public payable {\n', '        PRIZE = msg.value;\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function race() public payable {\n', '        if (racerSpeedLimit[msg.sender] == 0) { racerSpeedLimit[msg.sender] = speed_limit; }\n', '        require(msg.value <= racerSpeedLimit[msg.sender] && msg.value > 1 wei);\n', '        \n', '        racerScore[msg.sender] += msg.value;\n', '        racerSpeedLimit[msg.sender] = (racerSpeedLimit[msg.sender] / 2);\n', '        \n', '        latestTimestamp = now;\n', '    \n', '        // YOU WON\n', '        if (racerScore[msg.sender] >= SCORE_TO_WIN) {\n', '            msg.sender.transfer(PRIZE);\n', '        }\n', '    }\n', '    \n', '    function () public payable {\n', '        race();\n', '    }\n', '    \n', '    // Pull the prize if no one has raced in 3 days :(\n', '    function endRace() public {\n', '        require(msg.sender == owner);\n', '        require(now > latestTimestamp + 3 days);\n', '        \n', '        msg.sender.transfer(this.balance);\n', '    }\n', '}']
['pragma solidity 0.4.21;\n', '\n', '// How fast can you get to 100 points and win the prize?\n', '// First person to deposit 0.1 eth (100 finney) wins the entire prize!\n', '// 1 finney = 1 point\n', '\n', 'contract RACEFORETH {\n', '    // 100 points to win!\n', '    uint256 public SCORE_TO_WIN = 100 finney;\n', '    uint256 public PRIZE;\n', '    \n', '    // 100 points = 0.1 ether\n', '    // Speed limit: 0.05 eth to prevent insta-win\n', '    // Prevents people from going too fast!\n', '    uint256 public speed_limit = 50 finney;\n', '    \n', "    // Keep track of everyone's score\n", '    mapping (address => uint256) racerScore;\n', '    mapping (address => uint256) racerSpeedLimit;\n', '    \n', '    uint256 latestTimestamp;\n', '    address owner;\n', '    \n', '    function RACEFORETH () public payable {\n', '        PRIZE = msg.value;\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function race() public payable {\n', '        if (racerSpeedLimit[msg.sender] == 0) { racerSpeedLimit[msg.sender] = speed_limit; }\n', '        require(msg.value <= racerSpeedLimit[msg.sender] && msg.value > 1 wei);\n', '        \n', '        racerScore[msg.sender] += msg.value;\n', '        racerSpeedLimit[msg.sender] = (racerSpeedLimit[msg.sender] / 2);\n', '        \n', '        latestTimestamp = now;\n', '    \n', '        // YOU WON\n', '        if (racerScore[msg.sender] >= SCORE_TO_WIN) {\n', '            msg.sender.transfer(PRIZE);\n', '        }\n', '    }\n', '    \n', '    function () public payable {\n', '        race();\n', '    }\n', '    \n', '    // Pull the prize if no one has raced in 3 days :(\n', '    function endRace() public {\n', '        require(msg.sender == owner);\n', '        require(now > latestTimestamp + 3 days);\n', '        \n', '        msg.sender.transfer(this.balance);\n', '    }\n', '}']
