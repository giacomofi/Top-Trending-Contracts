['pragma solidity ^0.4.19;\n', '\n', '/* CONTRACT */\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '// END_OF_contract_SafeMath\n', '//_______________________________________________\n', '//\n', '/* INTERFACE */\n', 'interface token {\n', '\n', '    function buyCoinsCrowdSale(address buyer, uint payment, address crowdSaleContr) public returns(bool success, uint retPayment);\n', '}\n', '//_______________________________________________\n', '//\n', 'interface ICO {\n', '    \n', '    function getPrices() public returns(uint buyPrice_,  uint redeemPrice_, uint sellPrice_);\n', '}\n', '//________________________________________________\n', '//\n', '/* CONTRACT */\n', 'contract CrowdSaleMacroansyA is SafeMath {\n', '\n', '    address internal beneficiaryFunds;\n', '    address internal owner; \n', '    address internal tkn_addr;    \n', '    address internal ico_addr;\n', '    //\n', '    uint internal fundingGoal;\n', '    uint internal amountRaised;\n', '    uint internal deadline;\n', '    uint internal amountWithdrawn;\n', '    //\n', '    mapping(address => uint256) public balanceOf;\n', '    //\n', '    bool internal fundingGoalReached;\n', '    bool internal crowdsaleClosed; \n', '    bool internal crowdsaleStart;\n', '    bool internal unlockFundersBalance; \n', '    bool internal saleParamSet;\n', '    //\n', '    event GoalReached(address recipient, uint totalAmountRaised);\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '    event FundOrPaymentTransfer(address beneficiary, uint amount);\n', '//________________________________________________________\n', '//\n', '    /**\n', '     * Constrctor function\n', '     */\n', '    function CrowdSaleMacroansyA() public {\n', '\n', '        owner = msg.sender;\n', '        beneficiaryFunds = owner;\n', '        saleParamSet = false;\n', '        fundingGoalReached = false;\n', '        crowdsaleStart = false;\n', '        crowdsaleClosed = false; \n', '        unlockFundersBalance = false; \n', '\n', '    }\n', '//_________________________________________________________\n', '//\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    } \n', '//_________________________________________________________\n', '//\n', '    function transferOr(address _Or) public onlyOwner {\n', '        owner = _Or;\n', '    }     \n', '//_________________________________________________________\n', '//\n', '    function setContrAddr(address tkn_ma_addr, address ico_ma_addr) public onlyOwner returns(bool success){\n', '       tkn_addr = tkn_ma_addr; ico_addr = ico_ma_addr;\n', '       return true;\n', '    } \n', '//_________________________________________________________\n', '//\n', '    function _getTknAddr() internal returns(address tkn_ma_addr){ return tkn_addr; }\n', '    function _getIcoAddr() internal returns(address ico_ma_addr){  return ico_addr; }\n', '//_________________________________________________________\n', '//    \n', '    function setFundingGoal(uint fundingGoalInEthers, bool resetForUnexpected) public onlyOwner returns(bool success){\n', '            \n', '            if(saleParamSet == false || resetForUnexpected == true ){\n', '\n', '                fundingGoal = fundingGoalInEthers * 1 ether;\n', '                saleParamSet = true;\n', '            }\n', '            return true;\n', '    } \n', '//_________________________________________________________\n', '//\n', '    function startOrHoldCrowdSale(bool setStartCrowdSale, bool crowdsaleStart_, bool setDuration, uint durationInMinutes, bool resetAmountRaisedAndWithdrawnToZero) public onlyOwner returns(bool success) {\n', '        \n', '        if( setDuration == true) deadline = now + durationInMinutes * 1 minutes;\n', '\n', '        if( setStartCrowdSale == true ) {\n', '            crowdsaleStart = crowdsaleStart_;\n', '            crowdsaleClosed = false;                 \n', '            unlockFundersBalance = false; \n', '        }\n', '\n', '        if(resetAmountRaisedAndWithdrawnToZero == true) { \n', '        \tamountRaised = 0;\n', '        \tamountWithdrawn = 0;\n', '        }\n', '        return true;\n', '    }\n', '//_________________________________________________________\n', '//\n', '    function viewAllControls(bool show) view onlyOwner public returns(bool saleParamSet_, bool crowdsaleStart_, bool crowdsaleClosed_, bool fundingGoalReached_, bool unlockFundersBalance_){\n', '        if(show == true) {\n', '            return ( saleParamSet, crowdsaleStart, crowdsaleClosed, fundingGoalReached, unlockFundersBalance);\n', '        }\n', '    }\n', '//_________________________________________________________\n', '//\n', '    function unlockFundrBal( bool unlockFundersBalance_) public onlyOwner afterDeadline returns(bool success){\n', '\n', '        unlockFundersBalance = unlockFundersBalance_ ;\n', '        return true;\n', '    }\n', '//_________________________________________________________\n', '//           \n', '    /**\n', '     * Fallback function\n', '     */\n', '    function() payable public {\n', '\n', '      if(msg.sender != owner){\n', '\n', '        require(crowdsaleClosed == false && crowdsaleStart == true);\n', '\n', '        token t = token( _getTknAddr() );\n', '\n', '        bool sucsBuyCoinAtToken; uint retPayment;\n', '        ( sucsBuyCoinAtToken, retPayment) = t.buyCoinsCrowdSale(msg.sender, msg.value, this);\n', '        require(sucsBuyCoinAtToken == true);\n', '\n', '        // return payment to buyer \n', '            if( retPayment > 0 ) {\n', '                    \n', '              bool sucsTrPaymnt;\n', '              sucsTrPaymnt = _safeTransferPaymnt( msg.sender, retPayment );\n', '              require(sucsTrPaymnt == true );\n', '            }\n', '\n', '        uint amount = safeSub( msg.value , retPayment);\n', '        balanceOf[msg.sender] = safeAdd( balanceOf[msg.sender] , amount);\n', '        amountRaised = safeAdd( amountRaised, amount);        \n', '\n', '        FundTransfer(msg.sender, amount, true);\n', '      }\n', '    }\n', '//________________________________________________\n', '//\n', '    function viewCrowdSaleLive(bool show, bool showFundsInWei) public view returns(uint fundingGoal_, uint fundRaised, uint fundWithDrawn, uint timeRemainingInMin, uint tokenPriceInWei, bool fundingGoalReached_ ){\n', '        \n', '        if(show == true && crowdsaleStart == true){\n', '            \n', '            if( deadline >= now ) timeRemainingInMin = safeSub( deadline, now) / 60;\n', '            if( now > deadline ) timeRemainingInMin == 0;\n', '            \n', '            ICO ico = ICO(_getIcoAddr());\n', '            uint buyPrice_; \n', '            (buyPrice_,) = ico.getPrices();\n', '\n', '            if(showFundsInWei == false){\n', '\t            return( safeDiv(fundingGoal,10**18), safeDiv(amountRaised,10**18), safeDiv(amountWithdrawn, 10**18) , timeRemainingInMin, buyPrice_, fundingGoalReached );\n', '            }\n', '            //\n', '            if(showFundsInWei == true){\n', '\t            return( fundingGoal, amountRaised, amountWithdrawn , timeRemainingInMin, buyPrice_, fundingGoalReached);\n', '            }            \n', '        }\n', '    }\n', '//_______________________________________________\n', '//\n', '    function viewMyContribution(bool show) public view returns(uint yourContributionInWEI){\n', '        if(show == true && crowdsaleStart == true){\n', '\n', '            return(balanceOf[msg.sender]);\n', '        }\n', '    }\n', '//________________________________________________\n', '//\n', '    modifier afterDeadline() { if (now >= deadline) _; }\n', '//________________________________________________\n', '//\n', '    /**\n', '     * Check Crowdsale Goal and Dead Line\n', '     */\n', '    function checkGoalReached() afterDeadline public {\n', '\n', '       if(crowdsaleStart == true){\n', '\n', '            if (amountRaised >= fundingGoal){\n', '                fundingGoalReached = true;\n', '                GoalReached(beneficiaryFunds, amountRaised);\n', '                crowdsaleClosed = true;               \n', '            } \n', '            //\n', '             if (amountRaised < fundingGoal)  fundingGoalReached = false;             \n', '       }\n', '    }\n', '//________________________________________________\n', '//\n', '    /**\n', '     * Fund withdraw to backers if crowdsale not successful\n', '     *\n', '     */\n', '    function safeWithdrawal() afterDeadline public {\n', '\n', '        if ( (!fundingGoalReached || unlockFundersBalance == true) && msg.sender != owner) {\n', '            uint amount = balanceOf[msg.sender];\n', '            balanceOf[msg.sender] = 0;\n', '            if (amount > 0) {\n', '                require(this.balance >= amount );\n', '                if (msg.sender.send(amount)) {\n', '                    FundTransfer(msg.sender, amount, false);\n', '                    amountWithdrawn = safeAdd( amountWithdrawn, amount); \n', '                } else {\n', '                    balanceOf[msg.sender] = amount;\n', '                  }\n', '            }\n', '        }\n', '    }\n', '//________________________________________________\n', '//\n', '    /*\n', '    * @notice Withdraw Payments to beneficiary if crowdsale successful\n', '    * @param withdrawAmount the amount withdrawn in wei\n', '    */\n', '    function withdrawFund(uint withdrawAmount, bool withdrawTotalAmountBalance) onlyOwner public returns(bool success) {\n', '      \n', '        if (fundingGoalReached && beneficiaryFunds == msg.sender && unlockFundersBalance == false ) {\n', '                      \n', '            if( withdrawTotalAmountBalance == true ) withdrawAmount = safeSub( amountRaised, amountWithdrawn);\n', '            require(this.balance >= withdrawAmount );\n', '            amountWithdrawn = safeAdd( amountWithdrawn, withdrawAmount); \n', '            success = _withdraw(withdrawAmount);   \n', '            require(success == true); \n', '            \n', '        }\n', '      \n', '        return success;      \n', '    }   \n', '//_________________________________________________________\n', '     /*internal function can be called by this contract only\n', '     */\n', '    function _withdraw(uint _withdrawAmount) internal returns(bool success) {\n', '\n', '        bool sucsTrPaymnt = _safeTransferPaymnt( beneficiaryFunds, _withdrawAmount); \n', '        require(sucsTrPaymnt == true);         \n', '        return true;     \n', '    }  \n', '//________________________________________________\n', '//\n', '    function _safeTransferPaymnt( address paymentBenfcry, uint payment) internal returns(bool sucsTrPaymnt){\n', '              \n', '          uint pA = payment; \n', '          uint paymentTemp = pA;\n', '          pA = 0;\n', '          paymentBenfcry.transfer(paymentTemp); \n', '          FundOrPaymentTransfer(paymentBenfcry, paymentTemp);                       \n', '          paymentTemp = 0; \n', '          \n', '          return true;\n', '    }      \n', '//________________________________________________\n', '//              \n', '            bool private isEndOk;\n', '                function endOfRewards(bool isEndNow) public onlyOwner {\n', '\n', '                        isEndOk == isEndNow;\n', '                }\n', '                //\n', '                function endOfRewardsConfirmed(bool isEndNow) public onlyOwner{\n', '\n', '                    if(isEndOk == true && isEndNow == true) selfdestruct(owner);\n', '                }\n', '//________________________________________________\n', '}\n', '// END_OF_CONTRACT']
['pragma solidity ^0.4.19;\n', '\n', '/* CONTRACT */\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '// END_OF_contract_SafeMath\n', '//_______________________________________________\n', '//\n', '/* INTERFACE */\n', 'interface token {\n', '\n', '    function buyCoinsCrowdSale(address buyer, uint payment, address crowdSaleContr) public returns(bool success, uint retPayment);\n', '}\n', '//_______________________________________________\n', '//\n', 'interface ICO {\n', '    \n', '    function getPrices() public returns(uint buyPrice_,  uint redeemPrice_, uint sellPrice_);\n', '}\n', '//________________________________________________\n', '//\n', '/* CONTRACT */\n', 'contract CrowdSaleMacroansyA is SafeMath {\n', '\n', '    address internal beneficiaryFunds;\n', '    address internal owner; \n', '    address internal tkn_addr;    \n', '    address internal ico_addr;\n', '    //\n', '    uint internal fundingGoal;\n', '    uint internal amountRaised;\n', '    uint internal deadline;\n', '    uint internal amountWithdrawn;\n', '    //\n', '    mapping(address => uint256) public balanceOf;\n', '    //\n', '    bool internal fundingGoalReached;\n', '    bool internal crowdsaleClosed; \n', '    bool internal crowdsaleStart;\n', '    bool internal unlockFundersBalance; \n', '    bool internal saleParamSet;\n', '    //\n', '    event GoalReached(address recipient, uint totalAmountRaised);\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '    event FundOrPaymentTransfer(address beneficiary, uint amount);\n', '//________________________________________________________\n', '//\n', '    /**\n', '     * Constrctor function\n', '     */\n', '    function CrowdSaleMacroansyA() public {\n', '\n', '        owner = msg.sender;\n', '        beneficiaryFunds = owner;\n', '        saleParamSet = false;\n', '        fundingGoalReached = false;\n', '        crowdsaleStart = false;\n', '        crowdsaleClosed = false; \n', '        unlockFundersBalance = false; \n', '\n', '    }\n', '//_________________________________________________________\n', '//\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    } \n', '//_________________________________________________________\n', '//\n', '    function transferOr(address _Or) public onlyOwner {\n', '        owner = _Or;\n', '    }     \n', '//_________________________________________________________\n', '//\n', '    function setContrAddr(address tkn_ma_addr, address ico_ma_addr) public onlyOwner returns(bool success){\n', '       tkn_addr = tkn_ma_addr; ico_addr = ico_ma_addr;\n', '       return true;\n', '    } \n', '//_________________________________________________________\n', '//\n', '    function _getTknAddr() internal returns(address tkn_ma_addr){ return tkn_addr; }\n', '    function _getIcoAddr() internal returns(address ico_ma_addr){  return ico_addr; }\n', '//_________________________________________________________\n', '//    \n', '    function setFundingGoal(uint fundingGoalInEthers, bool resetForUnexpected) public onlyOwner returns(bool success){\n', '            \n', '            if(saleParamSet == false || resetForUnexpected == true ){\n', '\n', '                fundingGoal = fundingGoalInEthers * 1 ether;\n', '                saleParamSet = true;\n', '            }\n', '            return true;\n', '    } \n', '//_________________________________________________________\n', '//\n', '    function startOrHoldCrowdSale(bool setStartCrowdSale, bool crowdsaleStart_, bool setDuration, uint durationInMinutes, bool resetAmountRaisedAndWithdrawnToZero) public onlyOwner returns(bool success) {\n', '        \n', '        if( setDuration == true) deadline = now + durationInMinutes * 1 minutes;\n', '\n', '        if( setStartCrowdSale == true ) {\n', '            crowdsaleStart = crowdsaleStart_;\n', '            crowdsaleClosed = false;                 \n', '            unlockFundersBalance = false; \n', '        }\n', '\n', '        if(resetAmountRaisedAndWithdrawnToZero == true) { \n', '        \tamountRaised = 0;\n', '        \tamountWithdrawn = 0;\n', '        }\n', '        return true;\n', '    }\n', '//_________________________________________________________\n', '//\n', '    function viewAllControls(bool show) view onlyOwner public returns(bool saleParamSet_, bool crowdsaleStart_, bool crowdsaleClosed_, bool fundingGoalReached_, bool unlockFundersBalance_){\n', '        if(show == true) {\n', '            return ( saleParamSet, crowdsaleStart, crowdsaleClosed, fundingGoalReached, unlockFundersBalance);\n', '        }\n', '    }\n', '//_________________________________________________________\n', '//\n', '    function unlockFundrBal( bool unlockFundersBalance_) public onlyOwner afterDeadline returns(bool success){\n', '\n', '        unlockFundersBalance = unlockFundersBalance_ ;\n', '        return true;\n', '    }\n', '//_________________________________________________________\n', '//           \n', '    /**\n', '     * Fallback function\n', '     */\n', '    function() payable public {\n', '\n', '      if(msg.sender != owner){\n', '\n', '        require(crowdsaleClosed == false && crowdsaleStart == true);\n', '\n', '        token t = token( _getTknAddr() );\n', '\n', '        bool sucsBuyCoinAtToken; uint retPayment;\n', '        ( sucsBuyCoinAtToken, retPayment) = t.buyCoinsCrowdSale(msg.sender, msg.value, this);\n', '        require(sucsBuyCoinAtToken == true);\n', '\n', '        // return payment to buyer \n', '            if( retPayment > 0 ) {\n', '                    \n', '              bool sucsTrPaymnt;\n', '              sucsTrPaymnt = _safeTransferPaymnt( msg.sender, retPayment );\n', '              require(sucsTrPaymnt == true );\n', '            }\n', '\n', '        uint amount = safeSub( msg.value , retPayment);\n', '        balanceOf[msg.sender] = safeAdd( balanceOf[msg.sender] , amount);\n', '        amountRaised = safeAdd( amountRaised, amount);        \n', '\n', '        FundTransfer(msg.sender, amount, true);\n', '      }\n', '    }\n', '//________________________________________________\n', '//\n', '    function viewCrowdSaleLive(bool show, bool showFundsInWei) public view returns(uint fundingGoal_, uint fundRaised, uint fundWithDrawn, uint timeRemainingInMin, uint tokenPriceInWei, bool fundingGoalReached_ ){\n', '        \n', '        if(show == true && crowdsaleStart == true){\n', '            \n', '            if( deadline >= now ) timeRemainingInMin = safeSub( deadline, now) / 60;\n', '            if( now > deadline ) timeRemainingInMin == 0;\n', '            \n', '            ICO ico = ICO(_getIcoAddr());\n', '            uint buyPrice_; \n', '            (buyPrice_,) = ico.getPrices();\n', '\n', '            if(showFundsInWei == false){\n', '\t            return( safeDiv(fundingGoal,10**18), safeDiv(amountRaised,10**18), safeDiv(amountWithdrawn, 10**18) , timeRemainingInMin, buyPrice_, fundingGoalReached );\n', '            }\n', '            //\n', '            if(showFundsInWei == true){\n', '\t            return( fundingGoal, amountRaised, amountWithdrawn , timeRemainingInMin, buyPrice_, fundingGoalReached);\n', '            }            \n', '        }\n', '    }\n', '//_______________________________________________\n', '//\n', '    function viewMyContribution(bool show) public view returns(uint yourContributionInWEI){\n', '        if(show == true && crowdsaleStart == true){\n', '\n', '            return(balanceOf[msg.sender]);\n', '        }\n', '    }\n', '//________________________________________________\n', '//\n', '    modifier afterDeadline() { if (now >= deadline) _; }\n', '//________________________________________________\n', '//\n', '    /**\n', '     * Check Crowdsale Goal and Dead Line\n', '     */\n', '    function checkGoalReached() afterDeadline public {\n', '\n', '       if(crowdsaleStart == true){\n', '\n', '            if (amountRaised >= fundingGoal){\n', '                fundingGoalReached = true;\n', '                GoalReached(beneficiaryFunds, amountRaised);\n', '                crowdsaleClosed = true;               \n', '            } \n', '            //\n', '             if (amountRaised < fundingGoal)  fundingGoalReached = false;             \n', '       }\n', '    }\n', '//________________________________________________\n', '//\n', '    /**\n', '     * Fund withdraw to backers if crowdsale not successful\n', '     *\n', '     */\n', '    function safeWithdrawal() afterDeadline public {\n', '\n', '        if ( (!fundingGoalReached || unlockFundersBalance == true) && msg.sender != owner) {\n', '            uint amount = balanceOf[msg.sender];\n', '            balanceOf[msg.sender] = 0;\n', '            if (amount > 0) {\n', '                require(this.balance >= amount );\n', '                if (msg.sender.send(amount)) {\n', '                    FundTransfer(msg.sender, amount, false);\n', '                    amountWithdrawn = safeAdd( amountWithdrawn, amount); \n', '                } else {\n', '                    balanceOf[msg.sender] = amount;\n', '                  }\n', '            }\n', '        }\n', '    }\n', '//________________________________________________\n', '//\n', '    /*\n', '    * @notice Withdraw Payments to beneficiary if crowdsale successful\n', '    * @param withdrawAmount the amount withdrawn in wei\n', '    */\n', '    function withdrawFund(uint withdrawAmount, bool withdrawTotalAmountBalance) onlyOwner public returns(bool success) {\n', '      \n', '        if (fundingGoalReached && beneficiaryFunds == msg.sender && unlockFundersBalance == false ) {\n', '                      \n', '            if( withdrawTotalAmountBalance == true ) withdrawAmount = safeSub( amountRaised, amountWithdrawn);\n', '            require(this.balance >= withdrawAmount );\n', '            amountWithdrawn = safeAdd( amountWithdrawn, withdrawAmount); \n', '            success = _withdraw(withdrawAmount);   \n', '            require(success == true); \n', '            \n', '        }\n', '      \n', '        return success;      \n', '    }   \n', '//_________________________________________________________\n', '     /*internal function can be called by this contract only\n', '     */\n', '    function _withdraw(uint _withdrawAmount) internal returns(bool success) {\n', '\n', '        bool sucsTrPaymnt = _safeTransferPaymnt( beneficiaryFunds, _withdrawAmount); \n', '        require(sucsTrPaymnt == true);         \n', '        return true;     \n', '    }  \n', '//________________________________________________\n', '//\n', '    function _safeTransferPaymnt( address paymentBenfcry, uint payment) internal returns(bool sucsTrPaymnt){\n', '              \n', '          uint pA = payment; \n', '          uint paymentTemp = pA;\n', '          pA = 0;\n', '          paymentBenfcry.transfer(paymentTemp); \n', '          FundOrPaymentTransfer(paymentBenfcry, paymentTemp);                       \n', '          paymentTemp = 0; \n', '          \n', '          return true;\n', '    }      \n', '//________________________________________________\n', '//              \n', '            bool private isEndOk;\n', '                function endOfRewards(bool isEndNow) public onlyOwner {\n', '\n', '                        isEndOk == isEndNow;\n', '                }\n', '                //\n', '                function endOfRewardsConfirmed(bool isEndNow) public onlyOwner{\n', '\n', '                    if(isEndOk == true && isEndNow == true) selfdestruct(owner);\n', '                }\n', '//________________________________________________\n', '}\n', '// END_OF_CONTRACT']
