['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract SealTokenSale is Pausable {\n', '  using SafeMath for uint256;\n', '\n', '  /**\n', '  * @dev Supporter struct to allow tracking supporters KYC status and referrer address\n', '  */\n', '  struct Supporter {\n', '    bool hasKYC;\n', '    address referrerAddress;\n', '  }\n', '\n', '  /**\n', '  * @dev External Supporter struct to allow tracking reserved amounts by supporter\n', '  */\n', '  struct ExternalSupporter {\n', '    uint256 reservedAmount;\n', '  }\n', '\n', '  /**\n', '   * @dev Token Sale States\n', '   */\n', '  enum TokenSaleState {Private, Pre, Main, Finished}\n', '\n', '  // Variables\n', '  mapping(address => Supporter) public supportersMap; // Mapping with all the Token Sale participants (Private excluded)\n', '  mapping(address => ExternalSupporter) public externalSupportersMap; // Mapping with external supporters\n', '  SealToken public token; // ERC20 Token contract address\n', '  address public vaultWallet; // Wallet address to which ETH and Company Reserve Tokens get forwarded\n', '  address public airdropWallet; // Wallet address to which Unsold Tokens get forwarded\n', '  address public kycWallet; // Wallet address for the KYC server\n', '  uint256 public tokensSold; // How many tokens have been sold\n', '  uint256 public tokensReserved; // How many tokens have been reserved\n', '  uint256 public maxTxGasPrice; // Maximum transaction gas price allowed for fair-chance transactions\n', '  TokenSaleState public currentState; // current Sale state\n', '\n', '  uint256 public constant ONE_MILLION = 10 ** 6; // One million for token cap calculation reference\n', '  uint256 public constant PRE_SALE_TOKEN_CAP = 384 * ONE_MILLION * 10 ** 18; // Maximum amount that can be sold during the Pre Sale period\n', '  uint256 public constant TOKEN_SALE_CAP = 492 * ONE_MILLION * 10 ** 18; // Maximum amount of tokens that can be sold by this contract\n', '  uint256 public constant TOTAL_TOKENS_SUPPLY = 1200 * ONE_MILLION * 10 ** 18; // Total supply that will be minted\n', '  uint256 public constant MIN_ETHER = 0.1 ether; // Minimum ETH Contribution allowed during the crowd sale\n', '\n', '  /* Minimum PreSale Contributions in Ether */\n', '  uint256 public constant PRE_SALE_MIN_ETHER = 1 ether; // Minimum to get 10% Bonus Tokens\n', '  uint256 public constant PRE_SALE_15_BONUS_MIN = 60 ether; // Minimum to get 15% Bonus Tokens\n', '  uint256 public constant PRE_SALE_20_BONUS_MIN = 300 ether; // Minimum to get 20% Bonus Tokens\n', '  uint256 public constant PRE_SALE_30_BONUS_MIN = 1200 ether; // Minimum to get 30% Bonus Tokens\n', '\n', '  /* Rate */\n', '  uint256 public tokenBaseRate; // Base rate\n', '\n', '  uint256 public referrerBonusRate; // Referrer Bonus Rate with 2 decimals (250 for 2.5% bonus for example)\n', '  uint256 public referredBonusRate; // Referred Bonus Rate with 2 decimals (250 for 2.5% bonus for example)\n', '\n', '  /**\n', '    * @dev Modifier to only allow Owner or KYC Wallet to execute a function\n', '    */\n', '  modifier onlyOwnerOrKYCWallet() {\n', '    require(msg.sender == owner || msg.sender == kycWallet);\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * Event for token purchase logging\n', '  * @param purchaser The wallet address that bought the tokens\n', '  * @param value How many Weis were paid for the purchase\n', '  * @param amount The amount of tokens purchased\n', '  */\n', '  event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\n', '\n', '  /**\n', '  * Event for token reservation \n', '  * @param wallet The beneficiary wallet address\n', '  * @param amount The amount of tokens\n', '  */\n', '  event TokenReservation(address indexed wallet, uint256 amount);\n', '\n', '  /**\n', '  * Event for token reservation confirmation\n', '  * @param wallet The beneficiary wallet address\n', '  * @param amount The amount of tokens\n', '  */\n', '  event TokenReservationConfirmation(address indexed wallet, uint256 amount);\n', '\n', '  /**\n', '  * Event for token reservation cancellation\n', '  * @param wallet The beneficiary wallet address\n', '  * @param amount The amount of tokens\n', '  */\n', '  event TokenReservationCancellation(address indexed wallet, uint256 amount);\n', '\n', '  /**\n', '   * Event for kyc status change logging\n', '   * @param user User address\n', '   * @param isApproved KYC approval state\n', '   */\n', '  event KYC(address indexed user, bool isApproved);\n', '\n', '  /**\n', '   * Event for referrer set\n', '   * @param user User address\n', '   * @param referrerAddress Referrer address\n', '   */\n', '  event ReferrerSet(address indexed user, address indexed referrerAddress);\n', '\n', '  /**\n', '   * Event for referral bonus incomplete\n', '   * @param userAddress User address\n', '   * @param missingAmount Missing Amount\n', '   */\n', '  event ReferralBonusIncomplete(address indexed userAddress, uint256 missingAmount);\n', '\n', '  /**\n', '   * Event for referral bonus minted\n', '   * @param userAddress User address\n', '   * @param amount Amount minted\n', '   */\n', '  event ReferralBonusMinted(address indexed userAddress, uint256 amount);\n', '\n', '  /**\n', '   * Constructor\n', '   * @param _vaultWallet Vault address\n', '   * @param _airdropWallet Airdrop wallet address\n', '   * @param _kycWallet KYC address\n', '   * @param _tokenBaseRate Token Base rate (Tokens/ETH)\n', '   * @param _referrerBonusRate Referrer Bonus rate (2 decimals, ex 250 for 2.5%)\n', '   * @param _referredBonusRate Referred Bonus rate (2 decimals, ex 250 for 2.5%)\n', '   * @param _maxTxGasPrice Maximum gas price allowed when buying tokens\n', '   */\n', '  function SealTokenSale(\n', '    address _vaultWallet,\n', '    address _airdropWallet,\n', '    address _kycWallet,\n', '    uint256 _tokenBaseRate,\n', '    uint256 _referrerBonusRate,\n', '    uint256 _referredBonusRate,\n', '    uint256 _maxTxGasPrice\n', '  )\n', '  public\n', '  {\n', '    require(_vaultWallet != address(0));\n', '    require(_airdropWallet != address(0));\n', '    require(_kycWallet != address(0));\n', '    require(_tokenBaseRate > 0);\n', '    require(_referrerBonusRate > 0);\n', '    require(_referredBonusRate > 0);\n', '    require(_maxTxGasPrice > 0);\n', '\n', '    vaultWallet = _vaultWallet;\n', '    airdropWallet = _airdropWallet;\n', '    kycWallet = _kycWallet;\n', '    tokenBaseRate = _tokenBaseRate;\n', '    referrerBonusRate = _referrerBonusRate;\n', '    referredBonusRate = _referredBonusRate;\n', '    maxTxGasPrice = _maxTxGasPrice;\n', '\n', '    tokensSold = 0;\n', '    tokensReserved = 0;\n', '\n', '    token = new SealToken();\n', '\n', '    // init sale state;\n', '    currentState = TokenSaleState.Private;\n', '  }\n', '\n', '  /* fallback function can be used to buy tokens */\n', '  function() public payable {\n', '    buyTokens();\n', '  }\n', '\n', '  /* low level token purchase function */\n', '  function buyTokens() public payable whenNotPaused {\n', '    // Do not allow if gasprice is bigger than the maximum\n', '    // This is for fair-chance for all contributors, so no one can\n', '    // set a too-high transaction price and be able to buy earlier\n', '    require(tx.gasprice <= maxTxGasPrice);\n', '\n', '    // make sure we&#39;re in pre or main sale period\n', '    require(isPublicTokenSaleRunning());\n', '\n', '    // check if KYC ok\n', '    require(userHasKYC(msg.sender));\n', '\n', '    // check user is sending enough Wei for the stage&#39;s rules\n', '    require(aboveMinimumPurchase());\n', '\n', '    address sender = msg.sender;\n', '    uint256 weiAmountSent = msg.value;\n', '\n', '    // calculate token amount\n', '    uint256 bonusMultiplier = getBonusMultiplier(weiAmountSent);\n', '    uint256 newTokens = weiAmountSent.mul(tokenBaseRate).mul(bonusMultiplier).div(100);\n', '\n', '    // check totals and mint the tokens\n', '    checkTotalsAndMintTokens(sender, newTokens, false);\n', '\n', '    // Log Event\n', '    TokenPurchase(sender, weiAmountSent, newTokens);\n', '\n', '    // forward the funds to the vault wallet\n', '    vaultWallet.transfer(msg.value);\n', '  }\n', '\n', '  /**\n', '  * @dev Reserve Tokens\n', '  * @param _wallet Destination Address\n', '  * @param _amount Amount of tokens\n', '  */\n', '  function reserveTokens(address _wallet, uint256 _amount) public onlyOwner {\n', '    // check amount positive\n', '    require(_amount > 0);\n', '    // check destination address not null\n', '    require(_wallet != address(0));\n', '\n', '    // make sure that we&#39;re in private sale or presale\n', '    require(isPrivateSaleRunning() || isPreSaleRunning());\n', '\n', '    // check cap\n', '    uint256 totalTokensReserved = tokensReserved.add(_amount);\n', '    require(tokensSold + totalTokensReserved <= PRE_SALE_TOKEN_CAP);\n', '\n', '    // update total reserved\n', '    tokensReserved = totalTokensReserved;\n', '\n', '    // save user reservation\n', '    externalSupportersMap[_wallet].reservedAmount = externalSupportersMap[_wallet].reservedAmount.add(_amount);\n', '\n', '    // Log Event\n', '    TokenReservation(_wallet, _amount);\n', '  }\n', '\n', '  /**\n', '  * @dev Confirm Reserved Tokens\n', '  * @param _wallet Destination Address\n', '  * @param _amount Amount of tokens\n', '  */\n', '  function confirmReservedTokens(address _wallet, uint256 _amount) public onlyOwner {\n', '    // check amount positive\n', '    require(_amount > 0);\n', '    // check destination address not null\n', '    require(_wallet != address(0));\n', '\n', '    // make sure the sale hasn&#39;t ended yet\n', '    require(!hasEnded());\n', '\n', '    // check amount not more than reserved\n', '    require(_amount <= externalSupportersMap[_wallet].reservedAmount);\n', '\n', '    // check totals and mint the tokens\n', '    checkTotalsAndMintTokens(_wallet, _amount, true);\n', '\n', '    // Log Event\n', '    TokenReservationConfirmation(_wallet, _amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Cancel Reserved Tokens\n', '   * @param _wallet Destination Address\n', '   * @param _amount Amount of tokens\n', '   */\n', '  function cancelReservedTokens(address _wallet, uint256 _amount) public onlyOwner {\n', '    // check amount positive\n', '    require(_amount > 0);\n', '    // check destination address not null\n', '    require(_wallet != address(0));\n', '\n', '    // make sure the sale hasn&#39;t ended yet\n', '    require(!hasEnded());\n', '\n', '    // check amount not more than reserved\n', '    require(_amount <= externalSupportersMap[_wallet].reservedAmount);\n', '\n', '    // update total reserved\n', '    tokensReserved = tokensReserved.sub(_amount);\n', '\n', '    // update user reservation\n', '    externalSupportersMap[_wallet].reservedAmount = externalSupportersMap[_wallet].reservedAmount.sub(_amount);\n', '\n', '    // Log Event\n', '    TokenReservationCancellation(_wallet, _amount);\n', '  }\n', '\n', '  /**\n', '  * @dev Check totals and Mint tokens\n', '  * @param _wallet Destination Address\n', '  * @param _amount Amount of tokens\n', '  */\n', '  function checkTotalsAndMintTokens(address _wallet, uint256 _amount, bool _fromReservation) private {\n', '    // check that we have not yet reached the cap\n', '    uint256 totalTokensSold = tokensSold.add(_amount);\n', '\n', '    uint256 totalTokensReserved = tokensReserved;\n', '    if (_fromReservation) {\n', '      totalTokensReserved = totalTokensReserved.sub(_amount);\n', '    }\n', '\n', '    if (isMainSaleRunning()) {\n', '      require(totalTokensSold + totalTokensReserved <= TOKEN_SALE_CAP);\n', '    } else {\n', '      require(totalTokensSold + totalTokensReserved <= PRE_SALE_TOKEN_CAP);\n', '    }\n', '\n', '    // update contract state\n', '    tokensSold = totalTokensSold;\n', '\n', '    if (_fromReservation) {\n', '      externalSupportersMap[_wallet].reservedAmount = externalSupportersMap[_wallet].reservedAmount.sub(_amount);\n', '      tokensReserved = totalTokensReserved;\n', '    }\n', '\n', '    // mint the tokens\n', '    token.mint(_wallet, _amount);\n', '\n', '    address userReferrer = getUserReferrer(_wallet);\n', '\n', '    if (userReferrer != address(0)) {\n', '      // Mint Referrer bonus\n', '      mintReferralShare(_amount, userReferrer, referrerBonusRate);\n', '\n', '      // Mint Referred bonus\n', '      mintReferralShare(_amount, _wallet, referredBonusRate);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Mint Referral Share\n', '   * @param _amount Amount of tokens\n', '   * @param _userAddress User Address\n', '   * @param _bonusRate Bonus rate (2 decimals)\n', '   */\n', '  function mintReferralShare(uint256 _amount, address _userAddress, uint256 _bonusRate) private {\n', '    // calculate max tokens available\n', '    uint256 currentCap;\n', '\n', '    if (isMainSaleRunning()) {\n', '      currentCap = TOKEN_SALE_CAP;\n', '    } else {\n', '      currentCap = PRE_SALE_TOKEN_CAP;\n', '    }\n', '\n', '    uint256 maxTokensAvailable = currentCap - tokensSold - tokensReserved;\n', '\n', '    // check if we have enough tokens\n', '    uint256 fullShare = _amount.mul(_bonusRate).div(10000);\n', '    if (fullShare <= maxTokensAvailable) {\n', '      // mint the tokens\n', '      token.mint(_userAddress, fullShare);\n', '\n', '      // update state\n', '      tokensSold = tokensSold.add(fullShare);\n', '\n', '      // log event\n', '      ReferralBonusMinted(_userAddress, fullShare);\n', '    }\n', '    else {\n', '      // mint the available tokens\n', '      token.mint(_userAddress, maxTokensAvailable);\n', '\n', '      // update state\n', '      tokensSold = tokensSold.add(maxTokensAvailable);\n', '\n', '      // log events\n', '\n', '      ReferralBonusMinted(_userAddress, maxTokensAvailable);\n', '      ReferralBonusIncomplete(_userAddress, fullShare - maxTokensAvailable);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Start Presale\n', '  */\n', '  function startPreSale() public onlyOwner {\n', '    // make sure we&#39;re in the private sale state\n', '    require(currentState == TokenSaleState.Private);\n', '\n', '    // move to presale\n', '    currentState = TokenSaleState.Pre;\n', '  }\n', '\n', '  /**\n', '  * @dev Go back to private sale\n', '  */\n', '  function goBackToPrivateSale() public onlyOwner {\n', '    // make sure we&#39;re in the pre sale\n', '    require(currentState == TokenSaleState.Pre);\n', '\n', '    // go back to private\n', '    currentState = TokenSaleState.Private;\n', '  }\n', '\n', '  /**\n', '  * @dev Start Main sale\n', '  */\n', '  function startMainSale() public onlyOwner {\n', '    // make sure we&#39;re in the presale state\n', '    require(currentState == TokenSaleState.Pre);\n', '\n', '    // move to main sale\n', '    currentState = TokenSaleState.Main;\n', '  }\n', '\n', '  /**\n', '  * @dev Go back to Presale\n', '  */\n', '  function goBackToPreSale() public onlyOwner {\n', '    // make sure we&#39;re in the main sale\n', '    require(currentState == TokenSaleState.Main);\n', '\n', '    // go back to presale\n', '    currentState = TokenSaleState.Pre;\n', '  }\n', '\n', '  /**\n', '  * @dev Ends the operation of the contract\n', '  */\n', '  function finishContract() public onlyOwner {\n', '    // make sure we&#39;re in the main sale\n', '    require(currentState == TokenSaleState.Main);\n', '\n', '    // make sure there are no pending reservations\n', '    require(tokensReserved == 0);\n', '\n', '    // mark sale as finished\n', '    currentState = TokenSaleState.Finished;\n', '\n', '    // send the unsold tokens to the airdrop wallet\n', '    uint256 unsoldTokens = TOKEN_SALE_CAP.sub(tokensSold);\n', '    token.mint(airdropWallet, unsoldTokens);\n', '\n', '    // send the company reserve tokens to the vault wallet\n', '    uint256 notForSaleTokens = TOTAL_TOKENS_SUPPLY.sub(TOKEN_SALE_CAP);\n', '    token.mint(vaultWallet, notForSaleTokens);\n', '\n', '    // finish the minting of the token, so that transfers are allowed\n', '    token.finishMinting();\n', '\n', '    // transfer ownership of the token contract to the owner,\n', '    // so it isn&#39;t locked to be a child of the crowd sale contract\n', '    token.transferOwnership(owner);\n', '  }\n', '\n', '  /**\n', '  * @dev Updates the maximum allowed gas price that can be used when calling buyTokens()\n', '  * @param _newMaxTxGasPrice The new maximum gas price\n', '  */\n', '  function updateMaxTxGasPrice(uint256 _newMaxTxGasPrice) public onlyOwner {\n', '    require(_newMaxTxGasPrice > 0);\n', '    maxTxGasPrice = _newMaxTxGasPrice;\n', '  }\n', '\n', '  /**\n', '   * @dev Updates the token baserate\n', '   * @param _tokenBaseRate The new token baserate in tokens/eth\n', '   */\n', '  function updateTokenBaseRate(uint256 _tokenBaseRate) public onlyOwner {\n', '    require(_tokenBaseRate > 0);\n', '    tokenBaseRate = _tokenBaseRate;\n', '  }\n', '\n', '  /**\n', '   * @dev Updates the Vault Wallet address\n', '   * @param _vaultWallet The new vault wallet\n', '   */\n', '  function updateVaultWallet(address _vaultWallet) public onlyOwner {\n', '    require(_vaultWallet != address(0));\n', '    vaultWallet = _vaultWallet;\n', '  }\n', '\n', '  /**\n', '   * @dev Updates the KYC Wallet address\n', '   * @param _kycWallet The new kyc wallet\n', '   */\n', '  function updateKYCWallet(address _kycWallet) public onlyOwner {\n', '    require(_kycWallet != address(0));\n', '    kycWallet = _kycWallet;\n', '  }\n', '\n', '  /**\n', '  * @dev Approve user&#39;s KYC\n', '  * @param _user User Address\n', '  */\n', '  function approveUserKYC(address _user) onlyOwnerOrKYCWallet public {\n', '    require(_user != address(0));\n', '\n', '    Supporter storage sup = supportersMap[_user];\n', '    sup.hasKYC = true;\n', '    KYC(_user, true);\n', '  }\n', '\n', '  /**\n', '   * @dev Disapprove user&#39;s KYC\n', '   * @param _user User Address\n', '   */\n', '  function disapproveUserKYC(address _user) onlyOwnerOrKYCWallet public {\n', '    require(_user != address(0));\n', '\n', '    Supporter storage sup = supportersMap[_user];\n', '    sup.hasKYC = false;\n', '    KYC(_user, false);\n', '  }\n', '\n', '  /**\n', '   * @dev Approve user&#39;s KYC and sets referrer\n', '   * @param _user User Address\n', '   * @param _referrerAddress Referrer Address\n', '   */\n', '  function approveUserKYCAndSetReferrer(address _user, address _referrerAddress) onlyOwnerOrKYCWallet public {\n', '    require(_user != address(0));\n', '\n', '    Supporter storage sup = supportersMap[_user];\n', '    sup.hasKYC = true;\n', '    sup.referrerAddress = _referrerAddress;\n', '\n', '    // log events\n', '    KYC(_user, true);\n', '    ReferrerSet(_user, _referrerAddress);\n', '  }\n', '\n', '  /**\n', '  * @dev check if private sale is running\n', '  */\n', '  function isPrivateSaleRunning() public view returns (bool) {\n', '    return (currentState == TokenSaleState.Private);\n', '  }\n', '\n', '  /**\n', '  * @dev check if pre sale or main sale are running\n', '  */\n', '  function isPublicTokenSaleRunning() public view returns (bool) {\n', '    return (isPreSaleRunning() || isMainSaleRunning());\n', '  }\n', '\n', '  /**\n', '  * @dev check if pre sale is running\n', '  */\n', '  function isPreSaleRunning() public view returns (bool) {\n', '    return (currentState == TokenSaleState.Pre);\n', '  }\n', '\n', '  /**\n', '  * @dev check if main sale is running\n', '  */\n', '  function isMainSaleRunning() public view returns (bool) {\n', '    return (currentState == TokenSaleState.Main);\n', '  }\n', '\n', '  /**\n', '  * @dev check if sale has ended\n', '  */\n', '  function hasEnded() public view returns (bool) {\n', '    return (currentState == TokenSaleState.Finished);\n', '  }\n', '\n', '  /**\n', '  * @dev Check if user has passed KYC\n', '  * @param _user User Address\n', '  */\n', '  function userHasKYC(address _user) public view returns (bool) {\n', '    return supportersMap[_user].hasKYC;\n', '  }\n', '\n', '  /**\n', '  * @dev Get User&#39;s referrer address\n', '  * @param _user User Address\n', '  */\n', '  function getUserReferrer(address _user) public view returns (address) {\n', '    return supportersMap[_user].referrerAddress;\n', '  }\n', '\n', '  /**\n', '  * @dev Get User&#39;s reserved amount\n', '  * @param _user User Address\n', '  */\n', '  function getReservedAmount(address _user) public view returns (uint256) {\n', '    return externalSupportersMap[_user].reservedAmount;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the bonus multiplier to calculate the purchase rate\n', '   * @param _weiAmount Purchase amount\n', '   */\n', '  function getBonusMultiplier(uint256 _weiAmount) internal view returns (uint256) {\n', '    if (isMainSaleRunning()) {\n', '      return 100;\n', '    }\n', '    else if (isPreSaleRunning()) {\n', '      if (_weiAmount >= PRE_SALE_30_BONUS_MIN) {\n', '        // 30% bonus\n', '        return 130;\n', '      }\n', '      else if (_weiAmount >= PRE_SALE_20_BONUS_MIN) {\n', '        // 20% bonus\n', '        return 120;\n', '      }\n', '      else if (_weiAmount >= PRE_SALE_15_BONUS_MIN) {\n', '        // 15% bonus\n', '        return 115;\n', '      }\n', '      else if (_weiAmount >= PRE_SALE_MIN_ETHER) {\n', '        // 10% bonus\n', '        return 110;\n', '      }\n', '      else {\n', '        // Safeguard but this should never happen as aboveMinimumPurchase checks the minimum\n', '        revert();\n', '      }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Check if the user is buying above the required minimum\n', '   */\n', '  function aboveMinimumPurchase() internal view returns (bool) {\n', '    if (isMainSaleRunning()) {\n', '      return msg.value >= MIN_ETHER;\n', '    }\n', '    else if (isPreSaleRunning()) {\n', '      return msg.value >= PRE_SALE_MIN_ETHER;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract SealToken is MintableToken {\n', '    // Constants\n', '    string public constant name = "SealToken";\n', '    string public constant symbol = "SEAL";\n', '    uint8 public constant decimals = 18;\n', '\n', '    /**\n', '    * @dev Modifier to only allow transfers after the minting has been done\n', '    */\n', '    modifier onlyWhenTransferEnabled() {\n', '        require(mintingFinished);\n', '        _;\n', '    }\n', '\n', '    modifier validDestination(address _to) {\n', '        require(_to != address(0x0));\n', '        require(_to != address(this));\n', '        _;\n', '    }\n', '\n', '    function SealToken() public {\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public        \n', '        onlyWhenTransferEnabled\n', '        validDestination(_to)         \n', '        returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        onlyWhenTransferEnabled         \n', '        returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval (address _spender, uint _addedValue) public\n', '        onlyWhenTransferEnabled         \n', '        returns (bool) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval (address _spender, uint _subtractedValue) public\n', '        onlyWhenTransferEnabled         \n', '        returns (bool) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public\n', '        onlyWhenTransferEnabled\n', '        validDestination(_to)         \n', '        returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract SealTokenSale is Pausable {\n', '  using SafeMath for uint256;\n', '\n', '  /**\n', '  * @dev Supporter struct to allow tracking supporters KYC status and referrer address\n', '  */\n', '  struct Supporter {\n', '    bool hasKYC;\n', '    address referrerAddress;\n', '  }\n', '\n', '  /**\n', '  * @dev External Supporter struct to allow tracking reserved amounts by supporter\n', '  */\n', '  struct ExternalSupporter {\n', '    uint256 reservedAmount;\n', '  }\n', '\n', '  /**\n', '   * @dev Token Sale States\n', '   */\n', '  enum TokenSaleState {Private, Pre, Main, Finished}\n', '\n', '  // Variables\n', '  mapping(address => Supporter) public supportersMap; // Mapping with all the Token Sale participants (Private excluded)\n', '  mapping(address => ExternalSupporter) public externalSupportersMap; // Mapping with external supporters\n', '  SealToken public token; // ERC20 Token contract address\n', '  address public vaultWallet; // Wallet address to which ETH and Company Reserve Tokens get forwarded\n', '  address public airdropWallet; // Wallet address to which Unsold Tokens get forwarded\n', '  address public kycWallet; // Wallet address for the KYC server\n', '  uint256 public tokensSold; // How many tokens have been sold\n', '  uint256 public tokensReserved; // How many tokens have been reserved\n', '  uint256 public maxTxGasPrice; // Maximum transaction gas price allowed for fair-chance transactions\n', '  TokenSaleState public currentState; // current Sale state\n', '\n', '  uint256 public constant ONE_MILLION = 10 ** 6; // One million for token cap calculation reference\n', '  uint256 public constant PRE_SALE_TOKEN_CAP = 384 * ONE_MILLION * 10 ** 18; // Maximum amount that can be sold during the Pre Sale period\n', '  uint256 public constant TOKEN_SALE_CAP = 492 * ONE_MILLION * 10 ** 18; // Maximum amount of tokens that can be sold by this contract\n', '  uint256 public constant TOTAL_TOKENS_SUPPLY = 1200 * ONE_MILLION * 10 ** 18; // Total supply that will be minted\n', '  uint256 public constant MIN_ETHER = 0.1 ether; // Minimum ETH Contribution allowed during the crowd sale\n', '\n', '  /* Minimum PreSale Contributions in Ether */\n', '  uint256 public constant PRE_SALE_MIN_ETHER = 1 ether; // Minimum to get 10% Bonus Tokens\n', '  uint256 public constant PRE_SALE_15_BONUS_MIN = 60 ether; // Minimum to get 15% Bonus Tokens\n', '  uint256 public constant PRE_SALE_20_BONUS_MIN = 300 ether; // Minimum to get 20% Bonus Tokens\n', '  uint256 public constant PRE_SALE_30_BONUS_MIN = 1200 ether; // Minimum to get 30% Bonus Tokens\n', '\n', '  /* Rate */\n', '  uint256 public tokenBaseRate; // Base rate\n', '\n', '  uint256 public referrerBonusRate; // Referrer Bonus Rate with 2 decimals (250 for 2.5% bonus for example)\n', '  uint256 public referredBonusRate; // Referred Bonus Rate with 2 decimals (250 for 2.5% bonus for example)\n', '\n', '  /**\n', '    * @dev Modifier to only allow Owner or KYC Wallet to execute a function\n', '    */\n', '  modifier onlyOwnerOrKYCWallet() {\n', '    require(msg.sender == owner || msg.sender == kycWallet);\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * Event for token purchase logging\n', '  * @param purchaser The wallet address that bought the tokens\n', '  * @param value How many Weis were paid for the purchase\n', '  * @param amount The amount of tokens purchased\n', '  */\n', '  event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\n', '\n', '  /**\n', '  * Event for token reservation \n', '  * @param wallet The beneficiary wallet address\n', '  * @param amount The amount of tokens\n', '  */\n', '  event TokenReservation(address indexed wallet, uint256 amount);\n', '\n', '  /**\n', '  * Event for token reservation confirmation\n', '  * @param wallet The beneficiary wallet address\n', '  * @param amount The amount of tokens\n', '  */\n', '  event TokenReservationConfirmation(address indexed wallet, uint256 amount);\n', '\n', '  /**\n', '  * Event for token reservation cancellation\n', '  * @param wallet The beneficiary wallet address\n', '  * @param amount The amount of tokens\n', '  */\n', '  event TokenReservationCancellation(address indexed wallet, uint256 amount);\n', '\n', '  /**\n', '   * Event for kyc status change logging\n', '   * @param user User address\n', '   * @param isApproved KYC approval state\n', '   */\n', '  event KYC(address indexed user, bool isApproved);\n', '\n', '  /**\n', '   * Event for referrer set\n', '   * @param user User address\n', '   * @param referrerAddress Referrer address\n', '   */\n', '  event ReferrerSet(address indexed user, address indexed referrerAddress);\n', '\n', '  /**\n', '   * Event for referral bonus incomplete\n', '   * @param userAddress User address\n', '   * @param missingAmount Missing Amount\n', '   */\n', '  event ReferralBonusIncomplete(address indexed userAddress, uint256 missingAmount);\n', '\n', '  /**\n', '   * Event for referral bonus minted\n', '   * @param userAddress User address\n', '   * @param amount Amount minted\n', '   */\n', '  event ReferralBonusMinted(address indexed userAddress, uint256 amount);\n', '\n', '  /**\n', '   * Constructor\n', '   * @param _vaultWallet Vault address\n', '   * @param _airdropWallet Airdrop wallet address\n', '   * @param _kycWallet KYC address\n', '   * @param _tokenBaseRate Token Base rate (Tokens/ETH)\n', '   * @param _referrerBonusRate Referrer Bonus rate (2 decimals, ex 250 for 2.5%)\n', '   * @param _referredBonusRate Referred Bonus rate (2 decimals, ex 250 for 2.5%)\n', '   * @param _maxTxGasPrice Maximum gas price allowed when buying tokens\n', '   */\n', '  function SealTokenSale(\n', '    address _vaultWallet,\n', '    address _airdropWallet,\n', '    address _kycWallet,\n', '    uint256 _tokenBaseRate,\n', '    uint256 _referrerBonusRate,\n', '    uint256 _referredBonusRate,\n', '    uint256 _maxTxGasPrice\n', '  )\n', '  public\n', '  {\n', '    require(_vaultWallet != address(0));\n', '    require(_airdropWallet != address(0));\n', '    require(_kycWallet != address(0));\n', '    require(_tokenBaseRate > 0);\n', '    require(_referrerBonusRate > 0);\n', '    require(_referredBonusRate > 0);\n', '    require(_maxTxGasPrice > 0);\n', '\n', '    vaultWallet = _vaultWallet;\n', '    airdropWallet = _airdropWallet;\n', '    kycWallet = _kycWallet;\n', '    tokenBaseRate = _tokenBaseRate;\n', '    referrerBonusRate = _referrerBonusRate;\n', '    referredBonusRate = _referredBonusRate;\n', '    maxTxGasPrice = _maxTxGasPrice;\n', '\n', '    tokensSold = 0;\n', '    tokensReserved = 0;\n', '\n', '    token = new SealToken();\n', '\n', '    // init sale state;\n', '    currentState = TokenSaleState.Private;\n', '  }\n', '\n', '  /* fallback function can be used to buy tokens */\n', '  function() public payable {\n', '    buyTokens();\n', '  }\n', '\n', '  /* low level token purchase function */\n', '  function buyTokens() public payable whenNotPaused {\n', '    // Do not allow if gasprice is bigger than the maximum\n', '    // This is for fair-chance for all contributors, so no one can\n', '    // set a too-high transaction price and be able to buy earlier\n', '    require(tx.gasprice <= maxTxGasPrice);\n', '\n', "    // make sure we're in pre or main sale period\n", '    require(isPublicTokenSaleRunning());\n', '\n', '    // check if KYC ok\n', '    require(userHasKYC(msg.sender));\n', '\n', "    // check user is sending enough Wei for the stage's rules\n", '    require(aboveMinimumPurchase());\n', '\n', '    address sender = msg.sender;\n', '    uint256 weiAmountSent = msg.value;\n', '\n', '    // calculate token amount\n', '    uint256 bonusMultiplier = getBonusMultiplier(weiAmountSent);\n', '    uint256 newTokens = weiAmountSent.mul(tokenBaseRate).mul(bonusMultiplier).div(100);\n', '\n', '    // check totals and mint the tokens\n', '    checkTotalsAndMintTokens(sender, newTokens, false);\n', '\n', '    // Log Event\n', '    TokenPurchase(sender, weiAmountSent, newTokens);\n', '\n', '    // forward the funds to the vault wallet\n', '    vaultWallet.transfer(msg.value);\n', '  }\n', '\n', '  /**\n', '  * @dev Reserve Tokens\n', '  * @param _wallet Destination Address\n', '  * @param _amount Amount of tokens\n', '  */\n', '  function reserveTokens(address _wallet, uint256 _amount) public onlyOwner {\n', '    // check amount positive\n', '    require(_amount > 0);\n', '    // check destination address not null\n', '    require(_wallet != address(0));\n', '\n', "    // make sure that we're in private sale or presale\n", '    require(isPrivateSaleRunning() || isPreSaleRunning());\n', '\n', '    // check cap\n', '    uint256 totalTokensReserved = tokensReserved.add(_amount);\n', '    require(tokensSold + totalTokensReserved <= PRE_SALE_TOKEN_CAP);\n', '\n', '    // update total reserved\n', '    tokensReserved = totalTokensReserved;\n', '\n', '    // save user reservation\n', '    externalSupportersMap[_wallet].reservedAmount = externalSupportersMap[_wallet].reservedAmount.add(_amount);\n', '\n', '    // Log Event\n', '    TokenReservation(_wallet, _amount);\n', '  }\n', '\n', '  /**\n', '  * @dev Confirm Reserved Tokens\n', '  * @param _wallet Destination Address\n', '  * @param _amount Amount of tokens\n', '  */\n', '  function confirmReservedTokens(address _wallet, uint256 _amount) public onlyOwner {\n', '    // check amount positive\n', '    require(_amount > 0);\n', '    // check destination address not null\n', '    require(_wallet != address(0));\n', '\n', "    // make sure the sale hasn't ended yet\n", '    require(!hasEnded());\n', '\n', '    // check amount not more than reserved\n', '    require(_amount <= externalSupportersMap[_wallet].reservedAmount);\n', '\n', '    // check totals and mint the tokens\n', '    checkTotalsAndMintTokens(_wallet, _amount, true);\n', '\n', '    // Log Event\n', '    TokenReservationConfirmation(_wallet, _amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Cancel Reserved Tokens\n', '   * @param _wallet Destination Address\n', '   * @param _amount Amount of tokens\n', '   */\n', '  function cancelReservedTokens(address _wallet, uint256 _amount) public onlyOwner {\n', '    // check amount positive\n', '    require(_amount > 0);\n', '    // check destination address not null\n', '    require(_wallet != address(0));\n', '\n', "    // make sure the sale hasn't ended yet\n", '    require(!hasEnded());\n', '\n', '    // check amount not more than reserved\n', '    require(_amount <= externalSupportersMap[_wallet].reservedAmount);\n', '\n', '    // update total reserved\n', '    tokensReserved = tokensReserved.sub(_amount);\n', '\n', '    // update user reservation\n', '    externalSupportersMap[_wallet].reservedAmount = externalSupportersMap[_wallet].reservedAmount.sub(_amount);\n', '\n', '    // Log Event\n', '    TokenReservationCancellation(_wallet, _amount);\n', '  }\n', '\n', '  /**\n', '  * @dev Check totals and Mint tokens\n', '  * @param _wallet Destination Address\n', '  * @param _amount Amount of tokens\n', '  */\n', '  function checkTotalsAndMintTokens(address _wallet, uint256 _amount, bool _fromReservation) private {\n', '    // check that we have not yet reached the cap\n', '    uint256 totalTokensSold = tokensSold.add(_amount);\n', '\n', '    uint256 totalTokensReserved = tokensReserved;\n', '    if (_fromReservation) {\n', '      totalTokensReserved = totalTokensReserved.sub(_amount);\n', '    }\n', '\n', '    if (isMainSaleRunning()) {\n', '      require(totalTokensSold + totalTokensReserved <= TOKEN_SALE_CAP);\n', '    } else {\n', '      require(totalTokensSold + totalTokensReserved <= PRE_SALE_TOKEN_CAP);\n', '    }\n', '\n', '    // update contract state\n', '    tokensSold = totalTokensSold;\n', '\n', '    if (_fromReservation) {\n', '      externalSupportersMap[_wallet].reservedAmount = externalSupportersMap[_wallet].reservedAmount.sub(_amount);\n', '      tokensReserved = totalTokensReserved;\n', '    }\n', '\n', '    // mint the tokens\n', '    token.mint(_wallet, _amount);\n', '\n', '    address userReferrer = getUserReferrer(_wallet);\n', '\n', '    if (userReferrer != address(0)) {\n', '      // Mint Referrer bonus\n', '      mintReferralShare(_amount, userReferrer, referrerBonusRate);\n', '\n', '      // Mint Referred bonus\n', '      mintReferralShare(_amount, _wallet, referredBonusRate);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Mint Referral Share\n', '   * @param _amount Amount of tokens\n', '   * @param _userAddress User Address\n', '   * @param _bonusRate Bonus rate (2 decimals)\n', '   */\n', '  function mintReferralShare(uint256 _amount, address _userAddress, uint256 _bonusRate) private {\n', '    // calculate max tokens available\n', '    uint256 currentCap;\n', '\n', '    if (isMainSaleRunning()) {\n', '      currentCap = TOKEN_SALE_CAP;\n', '    } else {\n', '      currentCap = PRE_SALE_TOKEN_CAP;\n', '    }\n', '\n', '    uint256 maxTokensAvailable = currentCap - tokensSold - tokensReserved;\n', '\n', '    // check if we have enough tokens\n', '    uint256 fullShare = _amount.mul(_bonusRate).div(10000);\n', '    if (fullShare <= maxTokensAvailable) {\n', '      // mint the tokens\n', '      token.mint(_userAddress, fullShare);\n', '\n', '      // update state\n', '      tokensSold = tokensSold.add(fullShare);\n', '\n', '      // log event\n', '      ReferralBonusMinted(_userAddress, fullShare);\n', '    }\n', '    else {\n', '      // mint the available tokens\n', '      token.mint(_userAddress, maxTokensAvailable);\n', '\n', '      // update state\n', '      tokensSold = tokensSold.add(maxTokensAvailable);\n', '\n', '      // log events\n', '\n', '      ReferralBonusMinted(_userAddress, maxTokensAvailable);\n', '      ReferralBonusIncomplete(_userAddress, fullShare - maxTokensAvailable);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Start Presale\n', '  */\n', '  function startPreSale() public onlyOwner {\n', "    // make sure we're in the private sale state\n", '    require(currentState == TokenSaleState.Private);\n', '\n', '    // move to presale\n', '    currentState = TokenSaleState.Pre;\n', '  }\n', '\n', '  /**\n', '  * @dev Go back to private sale\n', '  */\n', '  function goBackToPrivateSale() public onlyOwner {\n', "    // make sure we're in the pre sale\n", '    require(currentState == TokenSaleState.Pre);\n', '\n', '    // go back to private\n', '    currentState = TokenSaleState.Private;\n', '  }\n', '\n', '  /**\n', '  * @dev Start Main sale\n', '  */\n', '  function startMainSale() public onlyOwner {\n', "    // make sure we're in the presale state\n", '    require(currentState == TokenSaleState.Pre);\n', '\n', '    // move to main sale\n', '    currentState = TokenSaleState.Main;\n', '  }\n', '\n', '  /**\n', '  * @dev Go back to Presale\n', '  */\n', '  function goBackToPreSale() public onlyOwner {\n', "    // make sure we're in the main sale\n", '    require(currentState == TokenSaleState.Main);\n', '\n', '    // go back to presale\n', '    currentState = TokenSaleState.Pre;\n', '  }\n', '\n', '  /**\n', '  * @dev Ends the operation of the contract\n', '  */\n', '  function finishContract() public onlyOwner {\n', "    // make sure we're in the main sale\n", '    require(currentState == TokenSaleState.Main);\n', '\n', '    // make sure there are no pending reservations\n', '    require(tokensReserved == 0);\n', '\n', '    // mark sale as finished\n', '    currentState = TokenSaleState.Finished;\n', '\n', '    // send the unsold tokens to the airdrop wallet\n', '    uint256 unsoldTokens = TOKEN_SALE_CAP.sub(tokensSold);\n', '    token.mint(airdropWallet, unsoldTokens);\n', '\n', '    // send the company reserve tokens to the vault wallet\n', '    uint256 notForSaleTokens = TOTAL_TOKENS_SUPPLY.sub(TOKEN_SALE_CAP);\n', '    token.mint(vaultWallet, notForSaleTokens);\n', '\n', '    // finish the minting of the token, so that transfers are allowed\n', '    token.finishMinting();\n', '\n', '    // transfer ownership of the token contract to the owner,\n', "    // so it isn't locked to be a child of the crowd sale contract\n", '    token.transferOwnership(owner);\n', '  }\n', '\n', '  /**\n', '  * @dev Updates the maximum allowed gas price that can be used when calling buyTokens()\n', '  * @param _newMaxTxGasPrice The new maximum gas price\n', '  */\n', '  function updateMaxTxGasPrice(uint256 _newMaxTxGasPrice) public onlyOwner {\n', '    require(_newMaxTxGasPrice > 0);\n', '    maxTxGasPrice = _newMaxTxGasPrice;\n', '  }\n', '\n', '  /**\n', '   * @dev Updates the token baserate\n', '   * @param _tokenBaseRate The new token baserate in tokens/eth\n', '   */\n', '  function updateTokenBaseRate(uint256 _tokenBaseRate) public onlyOwner {\n', '    require(_tokenBaseRate > 0);\n', '    tokenBaseRate = _tokenBaseRate;\n', '  }\n', '\n', '  /**\n', '   * @dev Updates the Vault Wallet address\n', '   * @param _vaultWallet The new vault wallet\n', '   */\n', '  function updateVaultWallet(address _vaultWallet) public onlyOwner {\n', '    require(_vaultWallet != address(0));\n', '    vaultWallet = _vaultWallet;\n', '  }\n', '\n', '  /**\n', '   * @dev Updates the KYC Wallet address\n', '   * @param _kycWallet The new kyc wallet\n', '   */\n', '  function updateKYCWallet(address _kycWallet) public onlyOwner {\n', '    require(_kycWallet != address(0));\n', '    kycWallet = _kycWallet;\n', '  }\n', '\n', '  /**\n', "  * @dev Approve user's KYC\n", '  * @param _user User Address\n', '  */\n', '  function approveUserKYC(address _user) onlyOwnerOrKYCWallet public {\n', '    require(_user != address(0));\n', '\n', '    Supporter storage sup = supportersMap[_user];\n', '    sup.hasKYC = true;\n', '    KYC(_user, true);\n', '  }\n', '\n', '  /**\n', "   * @dev Disapprove user's KYC\n", '   * @param _user User Address\n', '   */\n', '  function disapproveUserKYC(address _user) onlyOwnerOrKYCWallet public {\n', '    require(_user != address(0));\n', '\n', '    Supporter storage sup = supportersMap[_user];\n', '    sup.hasKYC = false;\n', '    KYC(_user, false);\n', '  }\n', '\n', '  /**\n', "   * @dev Approve user's KYC and sets referrer\n", '   * @param _user User Address\n', '   * @param _referrerAddress Referrer Address\n', '   */\n', '  function approveUserKYCAndSetReferrer(address _user, address _referrerAddress) onlyOwnerOrKYCWallet public {\n', '    require(_user != address(0));\n', '\n', '    Supporter storage sup = supportersMap[_user];\n', '    sup.hasKYC = true;\n', '    sup.referrerAddress = _referrerAddress;\n', '\n', '    // log events\n', '    KYC(_user, true);\n', '    ReferrerSet(_user, _referrerAddress);\n', '  }\n', '\n', '  /**\n', '  * @dev check if private sale is running\n', '  */\n', '  function isPrivateSaleRunning() public view returns (bool) {\n', '    return (currentState == TokenSaleState.Private);\n', '  }\n', '\n', '  /**\n', '  * @dev check if pre sale or main sale are running\n', '  */\n', '  function isPublicTokenSaleRunning() public view returns (bool) {\n', '    return (isPreSaleRunning() || isMainSaleRunning());\n', '  }\n', '\n', '  /**\n', '  * @dev check if pre sale is running\n', '  */\n', '  function isPreSaleRunning() public view returns (bool) {\n', '    return (currentState == TokenSaleState.Pre);\n', '  }\n', '\n', '  /**\n', '  * @dev check if main sale is running\n', '  */\n', '  function isMainSaleRunning() public view returns (bool) {\n', '    return (currentState == TokenSaleState.Main);\n', '  }\n', '\n', '  /**\n', '  * @dev check if sale has ended\n', '  */\n', '  function hasEnded() public view returns (bool) {\n', '    return (currentState == TokenSaleState.Finished);\n', '  }\n', '\n', '  /**\n', '  * @dev Check if user has passed KYC\n', '  * @param _user User Address\n', '  */\n', '  function userHasKYC(address _user) public view returns (bool) {\n', '    return supportersMap[_user].hasKYC;\n', '  }\n', '\n', '  /**\n', "  * @dev Get User's referrer address\n", '  * @param _user User Address\n', '  */\n', '  function getUserReferrer(address _user) public view returns (address) {\n', '    return supportersMap[_user].referrerAddress;\n', '  }\n', '\n', '  /**\n', "  * @dev Get User's reserved amount\n", '  * @param _user User Address\n', '  */\n', '  function getReservedAmount(address _user) public view returns (uint256) {\n', '    return externalSupportersMap[_user].reservedAmount;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the bonus multiplier to calculate the purchase rate\n', '   * @param _weiAmount Purchase amount\n', '   */\n', '  function getBonusMultiplier(uint256 _weiAmount) internal view returns (uint256) {\n', '    if (isMainSaleRunning()) {\n', '      return 100;\n', '    }\n', '    else if (isPreSaleRunning()) {\n', '      if (_weiAmount >= PRE_SALE_30_BONUS_MIN) {\n', '        // 30% bonus\n', '        return 130;\n', '      }\n', '      else if (_weiAmount >= PRE_SALE_20_BONUS_MIN) {\n', '        // 20% bonus\n', '        return 120;\n', '      }\n', '      else if (_weiAmount >= PRE_SALE_15_BONUS_MIN) {\n', '        // 15% bonus\n', '        return 115;\n', '      }\n', '      else if (_weiAmount >= PRE_SALE_MIN_ETHER) {\n', '        // 10% bonus\n', '        return 110;\n', '      }\n', '      else {\n', '        // Safeguard but this should never happen as aboveMinimumPurchase checks the minimum\n', '        revert();\n', '      }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Check if the user is buying above the required minimum\n', '   */\n', '  function aboveMinimumPurchase() internal view returns (bool) {\n', '    if (isMainSaleRunning()) {\n', '      return msg.value >= MIN_ETHER;\n', '    }\n', '    else if (isPreSaleRunning()) {\n', '      return msg.value >= PRE_SALE_MIN_ETHER;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract SealToken is MintableToken {\n', '    // Constants\n', '    string public constant name = "SealToken";\n', '    string public constant symbol = "SEAL";\n', '    uint8 public constant decimals = 18;\n', '\n', '    /**\n', '    * @dev Modifier to only allow transfers after the minting has been done\n', '    */\n', '    modifier onlyWhenTransferEnabled() {\n', '        require(mintingFinished);\n', '        _;\n', '    }\n', '\n', '    modifier validDestination(address _to) {\n', '        require(_to != address(0x0));\n', '        require(_to != address(this));\n', '        _;\n', '    }\n', '\n', '    function SealToken() public {\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public        \n', '        onlyWhenTransferEnabled\n', '        validDestination(_to)         \n', '        returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        onlyWhenTransferEnabled         \n', '        returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval (address _spender, uint _addedValue) public\n', '        onlyWhenTransferEnabled         \n', '        returns (bool) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval (address _spender, uint _subtractedValue) public\n', '        onlyWhenTransferEnabled         \n', '        returns (bool) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public\n', '        onlyWhenTransferEnabled\n', '        validDestination(_to)         \n', '        returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '}']
