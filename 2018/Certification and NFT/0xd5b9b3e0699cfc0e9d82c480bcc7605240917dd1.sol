['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Roles\n', ' * @author Francisco Giordano (@frangio)\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' *      See RBAC.sol for example usage.\n', ' */\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an address access to this role\n', '   */\n', '  function add(Role storage role, address addr)\n', '    internal\n', '  {\n', '    role.bearer[addr] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address&#39; access to this role\n', '   */\n', '  function remove(Role storage role, address addr)\n', '    internal\n', '  {\n', '    role.bearer[addr] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * // reverts\n', '   */\n', '  function check(Role storage role, address addr)\n', '    view\n', '    internal\n', '  {\n', '    require(has(role, addr));\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address addr)\n', '    view\n', '    internal\n', '    returns (bool)\n', '  {\n', '    return role.bearer[addr];\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title RBAC (Role-Based Access Control)\n', ' * @author Matt Condon (@Shrugs)\n', ' * @dev Stores and provides setters and getters for roles and addresses.\n', ' * @dev Supports unlimited numbers of roles and addresses.\n', ' * @dev See //contracts/mocks/RBACMock.sol for an example of usage.\n', ' * This RBAC method uses strings to key roles. It may be beneficial\n', ' *  for you to write your own implementation of this interface using Enums or similar.\n', ' * It&#39;s also recommended that you define constants in the contract, like ROLE_ADMIN below,\n', ' *  to avoid typos.\n', ' */\n', 'contract RBAC {\n', '  using Roles for Roles.Role;\n', '\n', '  mapping (string => Roles.Role) private roles;\n', '\n', '  event RoleAdded(address addr, string roleName);\n', '  event RoleRemoved(address addr, string roleName);\n', '\n', '  /**\n', '   * @dev reverts if addr does not have role\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   * // reverts\n', '   */\n', '  function checkRole(address addr, string roleName)\n', '    view\n', '    public\n', '  {\n', '    roles[roleName].check(addr);\n', '  }\n', '\n', '  /**\n', '   * @dev determine if addr has role\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   * @return bool\n', '   */\n', '  function hasRole(address addr, string roleName)\n', '    view\n', '    public\n', '    returns (bool)\n', '  {\n', '    return roles[roleName].has(addr);\n', '  }\n', '\n', '  /**\n', '   * @dev add a role to an address\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   */\n', '  function addRole(address addr, string roleName)\n', '    internal\n', '  {\n', '    roles[roleName].add(addr);\n', '    emit RoleAdded(addr, roleName);\n', '  }\n', '\n', '  /**\n', '   * @dev remove a role from an address\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   */\n', '  function removeRole(address addr, string roleName)\n', '    internal\n', '  {\n', '    roles[roleName].remove(addr);\n', '    emit RoleRemoved(addr, roleName);\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n', '   * @param roleName the name of the role\n', '   * // reverts\n', '   */\n', '  modifier onlyRole(string roleName)\n', '  {\n', '    checkRole(msg.sender, roleName);\n', '    _;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Interface of Price oracle\n', ' * @dev Implements methods of price oracle used in the crowdsale\n', ' * @author OnGrid Systems\n', ' */\n', 'contract PriceOracleIface {\n', '  uint256 public ethPriceInCents;\n', '\n', '  function getUsdCentsFromWei(uint256 _wei) public view returns (uint256) {\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Interface of ERC-20 token\n', ' * @dev Implements transfer methods and event used throughout crowdsale\n', ' * @author OnGrid Systems\n', ' */\n', 'contract TransferableTokenIface {\n', '  function transfer(address to, uint256 value) public returns (bool) {\n', '  }\n', '\n', '  function balanceOf(address who) public view returns (uint256) {\n', '  }\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title CrowdSale contract for Vera.jobs\n', ' * @dev Keep the list of investors passed KYC, receive ethers to fallback,\n', ' * calculate correspinding amount of tokens, add bonus (depending on the deposit size)\n', ' * then transfers tokens to the investor&#39;s account\n', ' * @author OnGrid Systems\n', ' */\n', 'contract VeraCrowdsale is RBAC {\n', '  using SafeMath for uint256;\n', '\n', '  // Price of one token (1.00000...) in USD cents\n', '  uint256 public tokenPriceInCents = 200;\n', '\n', '  // Minimal amount of USD cents to invest. Transactions of less value will be reverted.\n', '  uint256 public minDepositInCents = 800000;\n', '\n', '  // Amount of USD cents raised. Continuously increments on each transaction.\n', '  // Note: may be irrelevant because the actual amount of harvested ethers depends on ETH/USD price at the moment.\n', '  uint256 public centsRaised;\n', '\n', '  // Amount of tokens distributed by this contract.\n', '  // Note: doesn&#39;t include previous phases of tokensale.\n', '  uint256 public tokensSold;\n', '\n', '  // Address of VERA ERC-20 token contract\n', '  TransferableTokenIface public token;\n', '\n', '  // Address of ETH price feed\n', '  PriceOracleIface public priceOracle;\n', '\n', '  // Wallet address collecting received ETH\n', '  address public wallet;\n', '\n', '  // constants defining roles for access control\n', '  string public constant ROLE_ADMIN = "admin";\n', '  string public constant ROLE_BACKEND = "backend";\n', '  string public constant ROLE_KYC_VERIFIED_INVESTOR = "kycVerified";\n', '\n', '  // Value bonus configuration\n', '  struct AmountBonus {\n', '\n', '    // To understand which bonuses were applied bonus contains binary flag.\n', '    // If several bonuses applied ids get summarized in resulting event.\n', '    // Use values with a single 1-bit like 0x01, 0x02, 0x04, 0x08\n', '    uint256 id;\n', '\n', '    // amountFrom and amountTo define deposit value range.\n', '    // Bonus percentage applies if deposit amount in cents is within the boundaries\n', '    uint256 amountFrom;\n', '    uint256 amountTo;\n', '    uint256 bonusPercent;\n', '  }\n', '\n', '  // The list of available bonuses. Filled by the constructor on contract initialization\n', '  AmountBonus[] public amountBonuses;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param investor who received tokens\n', '   * @param ethPriceInCents ETH price at the moment of purchase\n', '   * @param valueInCents deposit calculated to USD cents\n', '   * @param bonusPercent total bonus percent (sum of all bonuses)\n', '   * @param bonusIds flags of all the bonuses applied to the purchase\n', '   */\n', '  event TokenPurchase(\n', '    address indexed investor,\n', '    uint256 ethPriceInCents,\n', '    uint256 valueInCents,\n', '    uint256 bonusPercent,\n', '    uint256 bonusIds\n', '  );\n', '\n', '  /**\n', '   * @dev modifier to scope access to admins\n', '   * // reverts if called not by admin\n', '   */\n', '  modifier onlyAdmin()\n', '  {\n', '    checkRole(msg.sender, ROLE_ADMIN);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access of backend keys stored on\n', '   * investor&#39;s portal\n', '   * // reverts if called not by backend\n', '   */\n', '  modifier onlyBackend()\n', '  {\n', '    checkRole(msg.sender, ROLE_BACKEND);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier allowing calls from investors successfully passed KYC verification\n', '   * // reverts if called by investor who didn&#39;t pass KYC via investor&#39;s portal\n', '   */\n', '  modifier onlyKYCVerifiedInvestor()\n', '  {\n', '    checkRole(msg.sender, ROLE_KYC_VERIFIED_INVESTOR);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor initializing Crowdsale contract\n', '   * @param _token address of the token ERC-20 contract.\n', '   * @param _priceOracle ETH price feed\n', '   * @param _wallet address where received ETH get forwarded\n', '   */\n', '  constructor(\n', '    TransferableTokenIface _token,\n', '    PriceOracleIface _priceOracle,\n', '    address _wallet\n', '  )\n', '    public\n', '  {\n', '    require(_token != address(0), "Need token contract address");\n', '    require(_priceOracle != address(0), "Need price oracle contract address");\n', '    require(_wallet != address(0), "Need wallet address");\n', '    addRole(msg.sender, ROLE_ADMIN);\n', '    token = _token;\n', '    priceOracle = _priceOracle;\n', '    wallet = _wallet;\n', '    // solium-disable-next-line arg-overflow\n', '    amountBonuses.push(AmountBonus(0x1, 800000, 1999999, 20));\n', '    // solium-disable-next-line arg-overflow\n', '    amountBonuses.push(AmountBonus(0x2, 2000000, 2**256 - 1, 30));\n', '  }\n', '\n', '  /**\n', '   * @dev Fallback function receiving ETH sent to the contract address\n', '   * sender must be KYC (Know Your Customer) verified investor.\n', '   */\n', '  function ()\n', '    external\n', '    payable\n', '    onlyKYCVerifiedInvestor\n', '  {\n', '    uint256 valueInCents = priceOracle.getUsdCentsFromWei(msg.value);\n', '    buyTokens(msg.sender, valueInCents);\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  /**\n', '   * @dev Withdraws all remaining (not sold) tokens from the crowdsale contract\n', '   * @param _to address of tokens receiver\n', '   */\n', '  function withdrawTokens(address _to) public onlyAdmin {\n', '    uint256 amount = token.balanceOf(address(this));\n', '    require(amount > 0, "no tokens on the contract");\n', '    token.transfer(_to, amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Called when investor&#39;s portal (backend) receives non-ethereum payment\n', '   * @param _investor address of investor\n', '   * @param _cents received deposit amount in cents\n', '   */\n', '  function buyTokensViaBackend(address _investor, uint256 _cents)\n', '    public\n', '    onlyBackend\n', '  {\n', '    if (! RBAC.hasRole(_investor, ROLE_KYC_VERIFIED_INVESTOR)) {\n', '      addKycVerifiedInvestor(_investor);\n', '    }\n', '    buyTokens(_investor, _cents);\n', '  }\n', '\n', '  /**\n', '   * @dev Computes total bonuses amount by value\n', '   * @param _cents deposit amount in USD cents\n', '   * @return total bonus percent (sum of applied bonus percents), bonusIds (sum of applied bonus flags)\n', '   */\n', '  function computeBonuses(uint256 _cents)\n', '    public\n', '    view\n', '    returns (uint256, uint256)\n', '  {\n', '    uint256 bonusTotal;\n', '    uint256 bonusIds;\n', '    for (uint i = 0; i < amountBonuses.length; i++) {\n', '      if (_cents >= amountBonuses[i].amountFrom &&\n', '      _cents <= amountBonuses[i].amountTo) {\n', '        bonusTotal += amountBonuses[i].bonusPercent;\n', '        bonusIds += amountBonuses[i].id;\n', '      }\n', '    }\n', '    return (bonusTotal, bonusIds);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates amount of tokens by cents\n', '   * @param _cents deposit amount in USD cents\n', '   * @return amount of tokens investor receive for the deposit\n', '   */\n', '  function computeTokens(uint256 _cents) public view returns (uint256) {\n', '    uint256 tokens = _cents.mul(10 ** 18).div(tokenPriceInCents);\n', '    (uint256 bonusPercent, ) = computeBonuses(_cents);\n', '    uint256 bonusTokens = tokens.mul(bonusPercent).div(100);\n', '    if (_cents >= minDepositInCents) {\n', '      return tokens.add(bonusTokens);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Add admin role to an address\n', '   * @param addr address\n', '   */\n', '  function addAdmin(address addr)\n', '    public\n', '    onlyAdmin\n', '  {\n', '    addRole(addr, ROLE_ADMIN);\n', '  }\n', '\n', '  /**\n', '   * @dev Revoke admin privileges from an address\n', '   * @param addr address\n', '   */\n', '  function delAdmin(address addr)\n', '    public\n', '    onlyAdmin\n', '  {\n', '    removeRole(addr, ROLE_ADMIN);\n', '  }\n', '\n', '  /**\n', '   * @dev Add backend privileges to an address\n', '   * @param addr address\n', '   */\n', '  function addBackend(address addr)\n', '    public\n', '    onlyAdmin\n', '  {\n', '    addRole(addr, ROLE_BACKEND);\n', '  }\n', '\n', '  /**\n', '   * @dev Revoke backend privileges from an address\n', '   * @param addr address\n', '   */\n', '  function delBackend(address addr)\n', '    public\n', '    onlyAdmin\n', '  {\n', '    removeRole(addr, ROLE_BACKEND);\n', '  }\n', '\n', '  /**\n', '   * @dev Mark investor&#39;s address as KYC-verified person\n', '   * @param addr address\n', '   */\n', '  function addKycVerifiedInvestor(address addr)\n', '    public\n', '    onlyBackend\n', '  {\n', '    addRole(addr, ROLE_KYC_VERIFIED_INVESTOR);\n', '  }\n', '\n', '  /**\n', '   * @dev Revoke KYC verification from the person\n', '   * @param addr address\n', '   */\n', '  function delKycVerifiedInvestor(address addr)\n', '    public\n', '    onlyBackend\n', '  {\n', '    removeRole(addr, ROLE_KYC_VERIFIED_INVESTOR);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates and applies bonuses and implements actual token transfer and events\n', '   * @param _investor address of the beneficiary receiving tokens\n', '   * @param _cents amount of deposit in cents\n', '   */\n', '  function buyTokens(address _investor, uint256 _cents) internal {\n', '    (uint256 bonusPercent, uint256 bonusIds) = computeBonuses(_cents);\n', '    uint256 tokens = computeTokens(_cents);\n', '    require(tokens > 0, "value is not enough");\n', '    token.transfer(_investor, tokens);\n', '    centsRaised = centsRaised.add(_cents);\n', '    tokensSold = tokensSold.add(tokens);\n', '    emit TokenPurchase(\n', '      _investor,\n', '      priceOracle.ethPriceInCents(),\n', '      _cents,\n', '      bonusPercent,\n', '      bonusIds\n', '    );\n', '  }\n', '}']