['pragma solidity 0.4.15;\n', '\n', 'contract EToken2Interface {\n', '    function changeOwnership(bytes32 _symbol, address _newOwner) returns(bool);\n', '}\n', '\n', 'contract TAAS {\n', '    function recoverTokens(uint _value) returns(bool);\n', '    function transfer(address _to, uint _value) returns(bool);\n', '}\n', '\n', 'contract TAASOwner {\n', '    TAAS public constant TAAS_CONTRACT = TAAS(0xE7775A6e9Bcf904eb39DA2b68c5efb4F9360e08C);\n', '    EToken2Interface public constant ETOKEN2 = EToken2Interface(0x331d077518216c07C87f4f18bA64cd384c411F84);\n', '    address public constant TAAS_VAULT = 0xecd7DA67e6563bbddfc2ddff9BA2632c721aF181;\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == TAAS_VAULT);\n', '        _;\n', '    }\n', '\n', '    function recoverTokensTo(address _to, uint _value) onlyOwner public returns(bool) {\n', '        require(TAAS_CONTRACT.recoverTokens(_value));\n', '        require(TAAS_CONTRACT.transfer(_to, _value));\n', '        return true;\n', '    }\n', '\n', '    function returnOwnership() onlyOwner public returns(bool) {\n', '        require(ETOKEN2.changeOwnership(&#39;TAAS&#39;, TAAS_VAULT));\n', '        return true;\n', '    }\n', '}']