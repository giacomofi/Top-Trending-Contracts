['pragma solidity ^0.4.16;\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// contract WhiteListAccess\n', '// ----------------------------------------------------------------------------\n', 'contract WhiteListAccess {\n', '    \n', '    function WhiteListAccess() public {\n', '        owner = msg.sender;\n', '        whitelist[owner] = true;\n', '        whitelist[address(this)] = true;\n', '    }\n', '    \n', '    address public owner;\n', '    mapping (address => bool) whitelist;\n', '\n', '    modifier onlyOwner {require(msg.sender == owner); _;}\n', '    modifier onlyWhitelisted {require(whitelist[msg.sender]); _;}\n', '\n', '    function addToWhiteList(address trusted) public onlyOwner() {\n', '        whitelist[trusted] = true;\n', '    }\n', '\n', '    function removeFromWhiteList(address untrusted) public onlyOwner() {\n', '        whitelist[untrusted] = false;\n', '    }\n', '\n', '}\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// CNT_Common contract\n', '// ----------------------------------------------------------------------------\n', 'contract CNT_Common is WhiteListAccess {\n', '    string  public name;\n', '    \n', '    function CNT_Common() public {  }\n', '\n', '    // Deployment\n', '    address public SALE_address;   // CNT_Crowdsale\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and an\n', '// initial fixed supply\n', '// ----------------------------------------------------------------------------\n', 'contract Token is ERC20Interface, CNT_Common {\n', '    using SafeMath for uint;\n', '\n', '    bool    public   freezed;\n', '    bool    public   initialized;\n', '    uint8   public   decimals;\n', '    uint    public   totSupply;\n', '    string  public   symbol;\n', '\n', '    mapping(address => uint) public balances;\n', '    mapping(address => mapping(address => uint)) public allowed;\n', '\n', '    address public ICO_PRE_SALE = address(0x1);\n', '    address public ICO_TEAM = address(0x2);\n', '    address public ICO_PROMO_REWARDS = address(0x3);\n', '    address public ICO_EOS_AIRDROP = address(0x4);\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    \n', '    function Token(uint8 _decimals, uint _thousands, string _name, string _sym) public {\n', '        owner = msg.sender;\n', '        symbol = _sym;\n', '        name = _name;\n', '        decimals = _decimals;\n', '        totSupply = _thousands * 10**3 * 10**uint(decimals);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return totSupply;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from token owner&#39;s account to `to` account\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        require(!freezed);\n', '        require(initialized);\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account\n', '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces \n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    function desapprove(address spender) public returns (bool success) {\n', '        allowed[msg.sender][spender] = 0;\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    // \n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        require(!freezed);\n', '        require(initialized);\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account. The `spender` contract function\n', '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Don&#39;t accept ETH\n', '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // \n', '    function init(address _sale) public {\n', '        require(!initialized);\n', '        // we need to know the CNTTokenSale and NewRichOnTheBlock Contract address before distribute to them\n', '        SALE_address = _sale;\n', '        whitelist[SALE_address] = true;\n', '        initialized = true;\n', '        freezed = true;\n', '    }\n', '\n', '    function ico_distribution(address to, uint tokens) public onlyWhitelisted() {\n', '        require(initialized);\n', '        balances[ICO_PRE_SALE] = balances[ICO_PRE_SALE].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        Transfer(ICO_PRE_SALE, to, tokens);\n', '    }\n', '\n', '    function ico_promo_reward(address to, uint tokens) public onlyWhitelisted() {\n', '        require(initialized);\n', '        balances[ICO_PROMO_REWARDS] = balances[ICO_PROMO_REWARDS].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        Transfer(ICO_PROMO_REWARDS, to, tokens);\n', '    }\n', '\n', '    function balanceOfMine() constant public returns (uint) {\n', '        return balances[msg.sender];\n', '    }\n', '\n', '    function rename(string _name) public onlyOwner() {\n', '        name = _name;\n', '    }    \n', '\n', '    function unfreeze() public onlyOwner() {\n', '        freezed = false;\n', '    }\n', '\n', '    function refreeze() public onlyOwner() {\n', '        freezed = true;\n', '    }\n', '    \n', '}\n', '\n', 'contract CNT_Token is Token(18, 500000, "Chip", "CNT") {\n', '    function CNT_Token() public {\n', '        uint _millons = 10**6 * 10**18;\n', '        balances[ICO_PRE_SALE]       = 300 * _millons; // 60% - PRE-SALE / DA-ICO\n', '        balances[ICO_TEAM]           =  90 * _millons; // 18% - reserved for the TEAM\n', '        balances[ICO_PROMO_REWARDS]  =  10 * _millons; //  2% - project promotion (Steem followers rewards and influencers sponsorship)\n', '        balances[ICO_EOS_AIRDROP]    = 100 * _millons; // 20% - AIRDROP over EOS token holders\n', '        balances[address(this)]      = 0;\n', '        Transfer(address(this), ICO_PRE_SALE, balances[ICO_PRE_SALE]);\n', '        Transfer(address(this), ICO_TEAM, balances[ICO_TEAM]);\n', '        Transfer(address(this), ICO_PROMO_REWARDS, balances[ICO_PROMO_REWARDS]);\n', '        Transfer(address(this), ICO_EOS_AIRDROP, balances[ICO_EOS_AIRDROP]);\n', '    }\n', '}\n', '\n', 'contract BGB_Token is Token(18, 500000, "BG-Coin", "BGB") {\n', '    function BGB_Token() public {\n', '        uint _millons = 10**6 * 10**18;\n', '        balances[ICO_PRE_SALE]      = 250 * _millons; // 50% - PRE-SALE\n', '        balances[ICO_TEAM]          = 200 * _millons; // 40% - reserved for the TEAM\n', '        balances[ICO_PROMO_REWARDS] =  50 * _millons; // 10% - project promotion (Steem followers rewards and influencers sponsorship)\n', '        balances[address(this)] =   0;\n', '        Transfer(address(this), ICO_PRE_SALE, balances[ICO_PRE_SALE]);\n', '        Transfer(address(this), ICO_TEAM, balances[ICO_TEAM]);\n', '        Transfer(address(this), ICO_PROMO_REWARDS, balances[ICO_PROMO_REWARDS]);\n', '    }\n', '}\n', '\n', 'contract VPE_Token is Token(18, 1000, "Vapaee", "VPE") {\n', '    function VPE_Token() public {\n', '        uint _thousands = 10**3 * 10**18;\n', '        balances[ICO_PRE_SALE]  = 500 * _thousands; // 50% - PRE-SALE\n', '        balances[ICO_TEAM]      = 500 * _thousands; // 50% - reserved for the TEAM\n', '        balances[address(this)] =   0;\n', '        Transfer(address(this), ICO_PRE_SALE, balances[ICO_PRE_SALE]);\n', '        Transfer(address(this), ICO_TEAM, balances[ICO_TEAM]);\n', '    }\n', '}\n', '\n', 'contract GVPE_Token is Token(18, 100, "Golden Vapaee", "GVPE") {\n', '    function GVPE_Token() public {\n', '        uint _thousands = 10**3 * 10**18;\n', '        balances[ICO_PRE_SALE]  = 100 * _thousands; // 100% - PRE-SALE\n', '        balances[address(this)] = 0;\n', '        Transfer(address(this), ICO_PRE_SALE, balances[ICO_PRE_SALE]);\n', '    }\n', '}']