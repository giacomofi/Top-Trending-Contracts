['pragma solidity ^0.4.20;\n', '\n', 'interface Token {\n', '    function transfer(address _to, uint _value) returns (bool success);\n', '}\n', '\n', 'contract Crowdsale {\n', '\n', '    address public beneficiary;\n', '    uint public softCap;\n', '    uint public hardCap;\n', '    uint public amountRaised;\n', '    uint public deadline;\n', '    uint public price;\n', '    Token public tokenReward;\n', '    mapping(address => uint256) public balanceOf;\n', '\n', '    bool softCapReached = false;\n', '    bool crowdsaleClosed = false;\n', '    uint softCapInEther =  500 ether;\n', '    uint hardCapInEther =  3200 ether;\n', '    uint priceInEther =  0.0002 ether;\n', '    uint tokenDecimal =  18;\n', '    uint duration = 120 days;\n', '    uint startDate = 1524762900; //unix\n', '\n', '    event GoalReached(address recipient, uint totalAmountRaised);\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '\n', '  \n', '    function Crowdsale(\n', '        address ifSuccessfulSendTo,\n', '        address addressOfTokenUsedAsReward\n', '    ) {\n', '        beneficiary = ifSuccessfulSendTo;\n', '        softCap = softCapInEther;\n', '        hardCap = hardCapInEther;\n', '        deadline = startDate + duration;\n', '        price = priceInEther;\n', '        tokenReward = Token(addressOfTokenUsedAsReward);\n', '    }\n', '\n', '  \n', '    function () payable {\n', '\n', '        require(!crowdsaleClosed);\n', '        require(hardCap >= amountRaised);\n', '\n', '        uint amount = msg.value;\n', '        balanceOf[msg.sender] += amount;\n', '        amountRaised += amount;\n', '        tokenReward.transfer(msg.sender, amount * 10 ** uint256(tokenDecimal) / price);\n', '        FundTransfer(msg.sender, amount, true);\n', '    }\n', '\n', '    modifier afterDeadline() { if (now >= deadline) _; }\n', '\n', '  \n', '    function checkGoalReached() afterDeadline {\n', '        if (amountRaised >= softCap){\n', '            softCapReached = true;\n', '            GoalReached(beneficiary, amountRaised);\n', '        }\n', '        crowdsaleClosed = true;\n', '    }\n', '\n', '\n', '    \n', '    function safeWithdrawal() afterDeadline {\n', '\n', '        if (!softCapReached) {\n', '            uint amount = balanceOf[msg.sender];\n', '            balanceOf[msg.sender] = 0;\n', '            if (amount > 0) {\n', '                if (msg.sender.send(amount)) {\n', '                    FundTransfer(msg.sender, amount, false);\n', '                } else {\n', '                    balanceOf[msg.sender] = amount;\n', '                }\n', '            }\n', '        }\n', '\n', '        if (softCapReached && beneficiary == msg.sender) {\n', '            if (beneficiary.send(amountRaised)) {\n', '                FundTransfer(beneficiary, amountRaised, false);\n', '            } else {\n', '                //If we fail to send the funds to beneficiary, unlock funders balance\n', '                softCapReached = false;\n', '            }\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.20;\n', '\n', 'interface Token {\n', '    function transfer(address _to, uint _value) returns (bool success);\n', '}\n', '\n', 'contract Crowdsale {\n', '\n', '    address public beneficiary;\n', '    uint public softCap;\n', '    uint public hardCap;\n', '    uint public amountRaised;\n', '    uint public deadline;\n', '    uint public price;\n', '    Token public tokenReward;\n', '    mapping(address => uint256) public balanceOf;\n', '\n', '    bool softCapReached = false;\n', '    bool crowdsaleClosed = false;\n', '    uint softCapInEther =  500 ether;\n', '    uint hardCapInEther =  3200 ether;\n', '    uint priceInEther =  0.0002 ether;\n', '    uint tokenDecimal =  18;\n', '    uint duration = 120 days;\n', '    uint startDate = 1524762900; //unix\n', '\n', '    event GoalReached(address recipient, uint totalAmountRaised);\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '\n', '  \n', '    function Crowdsale(\n', '        address ifSuccessfulSendTo,\n', '        address addressOfTokenUsedAsReward\n', '    ) {\n', '        beneficiary = ifSuccessfulSendTo;\n', '        softCap = softCapInEther;\n', '        hardCap = hardCapInEther;\n', '        deadline = startDate + duration;\n', '        price = priceInEther;\n', '        tokenReward = Token(addressOfTokenUsedAsReward);\n', '    }\n', '\n', '  \n', '    function () payable {\n', '\n', '        require(!crowdsaleClosed);\n', '        require(hardCap >= amountRaised);\n', '\n', '        uint amount = msg.value;\n', '        balanceOf[msg.sender] += amount;\n', '        amountRaised += amount;\n', '        tokenReward.transfer(msg.sender, amount * 10 ** uint256(tokenDecimal) / price);\n', '        FundTransfer(msg.sender, amount, true);\n', '    }\n', '\n', '    modifier afterDeadline() { if (now >= deadline) _; }\n', '\n', '  \n', '    function checkGoalReached() afterDeadline {\n', '        if (amountRaised >= softCap){\n', '            softCapReached = true;\n', '            GoalReached(beneficiary, amountRaised);\n', '        }\n', '        crowdsaleClosed = true;\n', '    }\n', '\n', '\n', '    \n', '    function safeWithdrawal() afterDeadline {\n', '\n', '        if (!softCapReached) {\n', '            uint amount = balanceOf[msg.sender];\n', '            balanceOf[msg.sender] = 0;\n', '            if (amount > 0) {\n', '                if (msg.sender.send(amount)) {\n', '                    FundTransfer(msg.sender, amount, false);\n', '                } else {\n', '                    balanceOf[msg.sender] = amount;\n', '                }\n', '            }\n', '        }\n', '\n', '        if (softCapReached && beneficiary == msg.sender) {\n', '            if (beneficiary.send(amountRaised)) {\n', '                FundTransfer(beneficiary, amountRaised, false);\n', '            } else {\n', '                //If we fail to send the funds to beneficiary, unlock funders balance\n', '                softCapReached = false;\n', '            }\n', '        }\n', '    }\n', '}']
