['pragma solidity ^0.4.24;\n', '\n', '// File: node_modules/zos-lib/contracts/application/versioning/ImplementationProvider.sol\n', '\n', '/**\n', ' * @title ImplementationProvider\n', ' * @dev Interface for providing implementation addresses for other contracts by name.\n', ' */\n', 'interface ImplementationProvider {\n', '  /**\n', '   * @dev Abstract function to return the implementation address of a contract.\n', '   * @param contractName Name of the contract.\n', '   * @return Implementation address of the contract.\n', '   */\n', '  function getImplementation(string contractName) public view returns (address);\n', '}\n', '\n', '// File: node_modules/zos-lib/contracts/upgradeability/Proxy.sol\n', '\n', '/**\n', ' * @title Proxy\n', ' * @dev Implements delegation of calls to other contracts, with proper\n', ' * forwarding of return values and bubbling of failures.\n', ' * It defines a fallback function that delegates all calls to the address\n', ' * returned by the abstract _implementation() internal function.\n', ' */\n', 'contract Proxy {\n', '  /**\n', '   * @dev Fallback function.\n', '   * Implemented entirely in `_fallback`.\n', '   */\n', '  function () payable external {\n', '    _fallback();\n', '  }\n', '\n', '  /**\n', '   * @return The Address of the implementation.\n', '   */\n', '  function _implementation() internal view returns (address);\n', '\n', '  /**\n', '   * @dev Delegates execution to an implementation contract.\n', "   * This is a low level function that doesn't return to its internal call site.\n", '   * It will return to the external caller whatever the implementation returns.\n', '   * @param implementation Address to delegate.\n', '   */\n', '  function _delegate(address implementation) internal {\n', '    assembly {\n', '      // Copy msg.data. We take full control of memory in this inline assembly\n', '      // block because it will not return to Solidity code. We overwrite the\n', '      // Solidity scratch pad at memory position 0.\n', '      calldatacopy(0, 0, calldatasize)\n', '\n', '      // Call the implementation.\n', "      // out and outsize are 0 because we don't know the size yet.\n", '      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n', '\n', '      // Copy the returned data.\n', '      returndatacopy(0, 0, returndatasize)\n', '\n', '      switch result\n', '      // delegatecall returns 0 on error.\n', '      case 0 { revert(0, returndatasize) }\n', '      default { return(0, returndatasize) }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Function that is run as the first thing in the fallback function.\n', '   * Can be redefined in derived contracts to add functionality.\n', '   * Redefinitions must call super._willFallback().\n', '   */\n', '  function _willFallback() internal {\n', '  }\n', '\n', '  /**\n', '   * @dev fallback implementation.\n', '   * Extracted to enable manual triggering.\n', '   */\n', '  function _fallback() internal {\n', '    _willFallback();\n', '    _delegate(_implementation());\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/AddressUtils.sol\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library AddressUtils {\n', '\n', '  /**\n', '   * Returns whether the target address is a contract\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   * as the code is not actually created until after the constructor finishes.\n', '   * @param _addr address to check\n', '   * @return whether the target address is a contract\n', '   */\n', '  function isContract(address _addr) internal view returns (bool) {\n', '    uint256 size;\n', '    // XXX Currently there is no better way to check if there is a contract in an address\n', '    // than to check the size of the code at that address.\n', '    // See https://ethereum.stackexchange.com/a/14016/36603\n', '    // for more details about how this works.\n', '    // TODO Check this again before the Serenity release, because all addresses will be\n', '    // contracts then.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly { size := extcodesize(_addr) }\n', '    return size > 0;\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules/zos-lib/contracts/upgradeability/UpgradeabilityProxy.sol\n', '\n', '/**\n', ' * @title UpgradeabilityProxy\n', ' * @dev This contract implements a proxy that allows to change the\n', ' * implementation address to which it will delegate.\n', ' * Such a change is called an implementation upgrade.\n', ' */\n', 'contract UpgradeabilityProxy is Proxy {\n', '  /**\n', '   * @dev Emitted when the implementation is upgraded.\n', '   * @param implementation Address of the new implementation.\n', '   */\n', '  event Upgraded(address implementation);\n', '\n', '  /**\n', '   * @dev Storage slot with the address of the current implementation.\n', '   * This is the keccak-256 hash of "org.zeppelinos.proxy.implementation", and is\n', '   * validated in the constructor.\n', '   */\n', '  bytes32 private constant IMPLEMENTATION_SLOT = 0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\n', '\n', '  /**\n', '   * @dev Contract constructor.\n', '   * @param _implementation Address of the initial implementation.\n', '   */\n', '  constructor(address _implementation) public {\n', '    assert(IMPLEMENTATION_SLOT == keccak256("org.zeppelinos.proxy.implementation"));\n', '\n', '    _setImplementation(_implementation);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the current implementation.\n', '   * @return Address of the current implementation\n', '   */\n', '  function _implementation() internal view returns (address impl) {\n', '    bytes32 slot = IMPLEMENTATION_SLOT;\n', '    assembly {\n', '      impl := sload(slot)\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Upgrades the proxy to a new implementation.\n', '   * @param newImplementation Address of the new implementation.\n', '   */\n', '  function _upgradeTo(address newImplementation) internal {\n', '    _setImplementation(newImplementation);\n', '    emit Upgraded(newImplementation);\n', '  }\n', '\n', '  /**\n', '   * @dev Sets the implementation address of the proxy.\n', '   * @param newImplementation Address of the new implementation.\n', '   */\n', '  function _setImplementation(address newImplementation) private {\n', '    require(AddressUtils.isContract(newImplementation), "Cannot set a proxy implementation to a non-contract address");\n', '\n', '    bytes32 slot = IMPLEMENTATION_SLOT;\n', '\n', '    assembly {\n', '      sstore(slot, newImplementation)\n', '    }\n', '  }\n', '}\n', '\n', '// File: node_modules/zos-lib/contracts/upgradeability/AdminUpgradeabilityProxy.sol\n', '\n', '/**\n', ' * @title AdminUpgradeabilityProxy\n', ' * @dev This contract combines an upgradeability proxy with an authorization\n', ' * mechanism for administrative tasks.\n', ' * All external functions in this contract must be guarded by the\n', ' * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\n', ' * feature proposal that would enable this to be done automatically.\n', ' */\n', 'contract AdminUpgradeabilityProxy is UpgradeabilityProxy {\n', '  /**\n', '   * @dev Emitted when the administration has been transferred.\n', '   * @param previousAdmin Address of the previous admin.\n', '   * @param newAdmin Address of the new admin.\n', '   */\n', '  event AdminChanged(address previousAdmin, address newAdmin);\n', '\n', '  /**\n', '   * @dev Storage slot with the admin of the contract.\n', '   * This is the keccak-256 hash of "org.zeppelinos.proxy.admin", and is\n', '   * validated in the constructor.\n', '   */\n', '  bytes32 private constant ADMIN_SLOT = 0x10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b;\n', '\n', '  /**\n', '   * @dev Modifier to check whether the `msg.sender` is the admin.\n', '   * If it is, it will run the function. Otherwise, it will delegate the call\n', '   * to the implementation.\n', '   */\n', '  modifier ifAdmin() {\n', '    if (msg.sender == _admin()) {\n', '      _;\n', '    } else {\n', '      _fallback();\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Contract constructor.\n', '   * It sets the `msg.sender` as the proxy administrator.\n', '   * @param _implementation address of the initial implementation.\n', '   */\n', '  constructor(address _implementation) UpgradeabilityProxy(_implementation) public {\n', '    assert(ADMIN_SLOT == keccak256("org.zeppelinos.proxy.admin"));\n', '\n', '    _setAdmin(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @return The address of the proxy admin.\n', '   */\n', '  function admin() external view ifAdmin returns (address) {\n', '    return _admin();\n', '  }\n', '\n', '  /**\n', '   * @return The address of the implementation.\n', '   */\n', '  function implementation() external view ifAdmin returns (address) {\n', '    return _implementation();\n', '  }\n', '\n', '  /**\n', '   * @dev Changes the admin of the proxy.\n', '   * Only the current admin can call this function.\n', '   * @param newAdmin Address to transfer proxy administration to.\n', '   */\n', '  function changeAdmin(address newAdmin) external ifAdmin {\n', '    require(newAdmin != address(0), "Cannot change the admin of a proxy to the zero address");\n', '    emit AdminChanged(_admin(), newAdmin);\n', '    _setAdmin(newAdmin);\n', '  }\n', '\n', '  /**\n', '   * @dev Upgrade the backing implementation of the proxy.\n', '   * Only the admin can call this function.\n', '   * @param newImplementation Address of the new implementation.\n', '   */\n', '  function upgradeTo(address newImplementation) external ifAdmin {\n', '    _upgradeTo(newImplementation);\n', '  }\n', '\n', '  /**\n', '   * @dev Upgrade the backing implementation of the proxy and call a function\n', '   * on the new implementation.\n', '   * This is useful to initialize the proxied contract.\n', '   * @param newImplementation Address of the new implementation.\n', '   * @param data Data to send as msg.data in the low level call.\n', '   * It should include the signature and the parameters of the function to be\n', '   * called, as described in\n', '   * https://solidity.readthedocs.io/en/develop/abi-spec.html#function-selector-and-argument-encoding.\n', '   */\n', '  function upgradeToAndCall(address newImplementation, bytes data) payable external ifAdmin {\n', '    _upgradeTo(newImplementation);\n', '    require(address(this).call.value(msg.value)(data));\n', '  }\n', '\n', '  /**\n', '   * @return The admin slot.\n', '   */\n', '  function _admin() internal view returns (address adm) {\n', '    bytes32 slot = ADMIN_SLOT;\n', '    assembly {\n', '      adm := sload(slot)\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Sets the address of the proxy admin.\n', '   * @param newAdmin Address of the new proxy admin.\n', '   */\n', '  function _setAdmin(address newAdmin) internal {\n', '    bytes32 slot = ADMIN_SLOT;\n', '\n', '    assembly {\n', '      sstore(slot, newAdmin)\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Only fall back when the sender is not the admin.\n', '   */\n', '  function _willFallback() internal {\n', '    require(msg.sender != _admin(), "Cannot call fallback function from the proxy admin");\n', '    super._willFallback();\n', '  }\n', '}\n', '\n', '// File: node_modules/zos-lib/contracts/upgradeability/UpgradeabilityProxyFactory.sol\n', '\n', '/**\n', ' * @title UpgradeabilityProxyFactory\n', ' * @dev Factory to create upgradeability proxies.\n', ' */\n', 'contract UpgradeabilityProxyFactory {\n', '  /**\n', '   * @dev Emitted when a new proxy is created.\n', '   * @param proxy Address of the created proxy.\n', '   */\n', '  event ProxyCreated(address proxy);\n', '\n', '  /**\n', '   * @dev Creates an upgradeability proxy with an initial implementation.\n', '   * @param admin Address of the proxy admin.\n', '   * @param implementation Address of the initial implementation.\n', '   * @return Address of the new proxy.\n', '   */\n', '  function createProxy(address admin, address implementation) public returns (AdminUpgradeabilityProxy) {\n', '    AdminUpgradeabilityProxy proxy = _createProxy(implementation);\n', '    proxy.changeAdmin(admin);\n', '    return proxy;\n', '  }\n', '\n', '  /**\n', '   * @dev Creates an upgradeability proxy with an initial implementation and calls it.\n', '   * This is useful to initialize the proxied contract.\n', '   * @param admin Address of the proxy admin.\n', '   * @param implementation Address of the initial implementation.\n', '   * @param data Data to send as msg.data in the low level call.\n', '   * It should include the signature and the parameters of the function to be\n', '   * called, as described in\n', '   * https://solidity.readthedocs.io/en/develop/abi-spec.html#function-selector-and-argument-encoding.\n', '   * @return Address of the new proxy.\n', '   */\n', '  function createProxyAndCall(address admin, address implementation, bytes data) public payable returns (AdminUpgradeabilityProxy) {\n', '    AdminUpgradeabilityProxy proxy = _createProxy(implementation);\n', '    proxy.changeAdmin(admin);\n', '    require(address(proxy).call.value(msg.value)(data));\n', '    return proxy;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to create an upgradeable proxy.\n', '   * @param implementation Address of the initial implementation.\n', '   * @return Address of the new proxy.\n', '   */\n', '  function _createProxy(address implementation) internal returns (AdminUpgradeabilityProxy) {\n', '    AdminUpgradeabilityProxy proxy = new AdminUpgradeabilityProxy(implementation);\n', '    emit ProxyCreated(proxy);\n', '    return proxy;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: node_modules/zos-lib/contracts/application/BaseApp.sol\n', '\n', '/**\n', ' * @title BaseApp\n', ' * @dev Abstract base contract for upgradeable applications.\n', ' * It handles the creation and upgrading of proxies.\n', ' */\n', 'contract BaseApp is Ownable {\n', '  /// @dev Factory that creates proxies.\n', '  UpgradeabilityProxyFactory public factory;\n', '\n', '  /**\n', '   * @dev Constructor function\n', '   * @param _factory Proxy factory\n', '   */\n', '  constructor(UpgradeabilityProxyFactory _factory) public {\n', '    require(address(_factory) != address(0), "Cannot set the proxy factory of an app to the zero address");\n', '    factory = _factory;\n', '  }\n', '\n', '  /**\n', '   * @dev Abstract function to return the implementation provider.\n', '   * @return The implementation provider.\n', '   */\n', '  function getProvider() internal view returns (ImplementationProvider);\n', '\n', '  /**\n', '   * @dev Returns the implementation address for a given contract name, provided by the `ImplementationProvider`.\n', '   * @param contractName Name of the contract.\n', '   * @return Address where the contract is implemented.\n', '   */\n', '  function getImplementation(string contractName) public view returns (address) {\n', '    return getProvider().getImplementation(contractName);\n', '  }\n', '\n', '  /**\n', '   * @dev Creates a new proxy for the given contract.\n', '   * @param contractName Name of the contract.\n', '   * @return Address of the new proxy.\n', '   */\n', '  function create(string contractName) public returns (AdminUpgradeabilityProxy) {\n', '    address implementation = getImplementation(contractName);\n', '    return factory.createProxy(this, implementation);\n', '  }\n', '\n', '  /**\n', '   * @dev Creates a new proxy for the given contract and forwards a function call to it.\n', '   * This is useful to initialize the proxied contract.\n', '   * @param contractName Name of the contract.\n', '   * @param data Data to send as msg.data in the low level call.\n', '   * It should include the signature and the parameters of the function to be\n', '   * called, as described in\n', '   * https://solidity.readthedocs.io/en/develop/abi-spec.html#function-selector-and-argument-encoding.\n', '   * @return Address of the new proxy.\n', '   */\n', '   function createAndCall(string contractName, bytes data) payable public returns (AdminUpgradeabilityProxy) {\n', '    address implementation = getImplementation(contractName);\n', '    return factory.createProxyAndCall.value(msg.value)(this, implementation, data);\n', '  }\n', '\n', '  /**\n', '   * @dev Upgrades a proxy to the newest implementation of a contract.\n', '   * @param proxy Proxy to be upgraded.\n', '   * @param contractName Name of the contract.\n', '   */\n', '  function upgrade(AdminUpgradeabilityProxy proxy, string contractName) public onlyOwner {\n', '    address implementation = getImplementation(contractName);\n', '    proxy.upgradeTo(implementation);\n', '  }\n', '\n', '  /**\n', '   * @dev Upgrades a proxy to the newest implementation of a contract and forwards a function call to it.\n', '   * This is useful to initialize the proxied contract.\n', '   * @param proxy Proxy to be upgraded.\n', '   * @param contractName Name of the contract.\n', '   * @param data Data to send as msg.data in the low level call.\n', '   * It should include the signature and the parameters of the function to be\n', '   * called, as described in\n', '   * https://solidity.readthedocs.io/en/develop/abi-spec.html#function-selector-and-argument-encoding.\n', '   */\n', '  function upgradeAndCall(AdminUpgradeabilityProxy proxy, string contractName, bytes data) payable public onlyOwner {\n', '    address implementation = getImplementation(contractName);\n', '    proxy.upgradeToAndCall.value(msg.value)(implementation, data);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the current implementation of a proxy.\n', '   * This is needed because only the proxy admin can query it.\n', '   * @return The address of the current implementation of the proxy.\n', '   */\n', '  function getProxyImplementation(AdminUpgradeabilityProxy proxy) public view returns (address) {\n', '    return proxy.implementation();\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the admin of a proxy.\n', '   * Only the admin can query it.\n', '   * @return The address of the current admin of the proxy.\n', '   */\n', '  function getProxyAdmin(AdminUpgradeabilityProxy proxy) public view returns (address) {\n', '    return proxy.admin();\n', '  }\n', '\n', '  /**\n', '   * @dev Changes the admin of a proxy.\n', '   * @param proxy Proxy to change admin.\n', '   * @param newAdmin Address to transfer proxy administration to.\n', '   */\n', '  function changeProxyAdmin(AdminUpgradeabilityProxy proxy, address newAdmin) public onlyOwner {\n', '    proxy.changeAdmin(newAdmin);\n', '  }\n', '}\n', '\n', '// File: node_modules/zos-lib/contracts/application/versioning/Package.sol\n', '\n', '/**\n', ' * @title Package\n', ' * @dev Collection of contracts grouped into versions.\n', ' * Contracts with the same name can have different implementation addresses in different versions.\n', ' */\n', 'contract Package is Ownable {\n', '  /**\n', '   * @dev Emitted when a version is added to the package.\n', '   * XXX The version is not indexed due to truffle testing constraints.\n', '   * @param version Name of the added version.\n', '   * @param provider ImplementationProvider associated with the version.\n', '   */\n', '  event VersionAdded(string version, ImplementationProvider provider);\n', '\n', '  /*\n', '   * @dev Mapping associating versions and their implementation providers.\n', '   */\n', '  mapping (string => ImplementationProvider) internal versions;\n', '\n', '  /**\n', '   * @dev Returns the implementation provider of a version.\n', '   * @param version Name of the version.\n', '   * @return The implementation provider of the version.\n', '   */\n', '  function getVersion(string version) public view returns (ImplementationProvider) {\n', '    ImplementationProvider provider = versions[version];\n', '    return provider;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds the implementation provider of a new version to the package.\n', '   * @param version Name of the version.\n', '   * @param provider ImplementationProvider associated with the version.\n', '   */\n', '  function addVersion(string version, ImplementationProvider provider) public onlyOwner {\n', '    require(!hasVersion(version), "Given version is already registered in package");\n', '    versions[version] = provider;\n', '    emit VersionAdded(version, provider);\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether a version is present in the package.\n', '   * @param version Name of the version.\n', '   * @return true if the version is already in the package, false otherwise.\n', '   */\n', '  function hasVersion(string version) public view returns (bool) {\n', '    return address(versions[version]) != address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the implementation address for a given version and contract name.\n', '   * @param version Name of the version.\n', '   * @param contractName Name of the contract.\n', '   * @return Address where the contract is implemented.\n', '   */\n', '  function getImplementation(string version, string contractName) public view returns (address) {\n', '    ImplementationProvider provider = getVersion(version);\n', '    return provider.getImplementation(contractName);\n', '  }\n', '}\n', '\n', '// File: node_modules/zos-lib/contracts/application/PackagedApp.sol\n', '\n', '/**\n', ' * @title PackagedApp\n', ' * @dev App for an upgradeable project that can use different versions.\n', ' * This is the standard entry point for an upgradeable app.\n', ' */\n', 'contract PackagedApp is BaseApp {\n', '  /// @dev Package that stores the contract implementation addresses.\n', '  Package public package;\n', '  /// @dev App version.\n', '  string public version;\n', '\n', '  /**\n', '   * @dev Constructor function.\n', '   * @param _package Package that stores the contract implementation addresses.\n', '   * @param _version Initial version of the app.\n', '   * @param _factory Proxy factory.\n', '   */\n', '  constructor(Package _package, string _version, UpgradeabilityProxyFactory _factory) BaseApp(_factory) public {\n', '    require(address(_package) != address(0), "Cannot set the package of an app to the zero address");\n', '    require(_package.hasVersion(_version), "The requested version must be registered in the given package");\n', '    package = _package;\n', '    version = _version;\n', '  }\n', '\n', '  /**\n', '   * @dev Sets the current version of the application.\n', '   * Contract implementations for the given version must already be registered in the package.\n', '   * @param newVersion Name of the new version.\n', '   */\n', '  function setVersion(string newVersion) public onlyOwner {\n', '    require(package.hasVersion(newVersion), "The requested version must be registered in the given package");\n', '    version = newVersion;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the provider for the current version.\n', '   * @return The provider for the current version.\n', '   */\n', '  function getProvider() internal view returns (ImplementationProvider) {\n', '    return package.getVersion(version);\n', '  }\n', '}']