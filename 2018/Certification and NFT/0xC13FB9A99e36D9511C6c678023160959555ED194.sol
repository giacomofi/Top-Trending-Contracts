['pragma solidity ^0.4.24;\n', '\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '    event OwnerChanged(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale is Ownable {\n', '    using SafeMath for uint256;\n', '    // address where funds are collected\n', '    address public wallet;\n', '\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '\n', '    uint256 public tokenAllocated;\n', '\n', '    uint256 public hardCap = 60000 ether;\n', '\n', '    constructor (address _wallet) public {\n', '        require(_wallet != address(0));\n', '        wallet = _wallet;\n', '    }\n', '}\n', '\n', 'interface IContractErc20Token {\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n', '\n', '    function balanceOf(address _owner) external constant returns (uint256 balance);\n', '    function mint(address _to, uint256 _amount, address _owner) external returns (bool);\n', '}\n', '\n', '\n', 'contract CryptoCasherCrowdsale is Ownable, Crowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    IContractErc20Token public tokenContract;\n', '\n', '    mapping (address => uint256) public deposited;\n', '    mapping(address => bool) public whitelist;\n', '    // List of admins\n', '    mapping (address => bool) public contractAdmins;\n', '    mapping (address => uint256) public paidTokens;\n', '    uint8 constant decimals = 18;\n', '\n', '    uint256 fundForSale = 525 * 10**5 * (10 ** uint256(decimals));\n', '\n', '    address addressFundNonKYCReserv = 0x7AEcFB881B6Ff010E4b7fb582C562aa3FCCb2170;\n', '    address addressFundBlchainReferal = 0x2F9092Fe1dACafF1165b080BfF3afFa6165e339a;\n', '\n', '    uint256[] discount  = [200, 150, 75, 50, 25, 10];\n', '\n', '    uint256 weiMinSale = 0.1 ether;\n', '\n', '    uint256 priceToken = 714;\n', '\n', '    uint256 public countInvestor;\n', '    uint256 percentReferal = 5;\n', '\n', '    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\n', '    event TokenLimitReached(uint256 tokenRaised, uint256 purchasedToken);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event NonWhitelistPurchase(address indexed _buyer, uint256 _tokens);\n', '    event HardCapReached();\n', '\n', '    constructor (address _owner, address _wallet) public\n', '    Crowdsale(_wallet)\n', '    {\n', '        uint256 fundAdvisors = 6 * 10**6 * (10 ** uint256(decimals));\n', '        uint256 fundBountyRefferal = 525 * 10**4 * (10 ** uint256(decimals));\n', '        uint256 fundTeam = 1125 * 10**4 * (10 ** 18);\n', '\n', '        require(_owner != address(0));\n', '        require(_wallet != address(0));\n', '        owner = _owner;\n', '        //owner = msg.sender; //for test&#39;s\n', '\n', '        tokenAllocated = tokenAllocated.add(fundAdvisors).add(fundBountyRefferal).add(fundTeam);\n', '    }\n', '\n', '    function setContractErc20Token(address _addressContract) public {\n', '        require(_addressContract != address(0));\n', '        tokenContract = IContractErc20Token(_addressContract);\n', '    }\n', '\n', '    // fallback function can be used to buy tokens\n', '    function() payable public {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    function setPriceToken(uint256 _newPrice) public onlyOwner {\n', '        require(_newPrice > 0);\n', '        priceToken = _newPrice;\n', '    }\n', '\n', '    // low level token purchase function\n', '    function buyTokens(address _investor) public payable returns (uint256){\n', '        require(_investor != address(0));\n', '        uint256 weiAmount = msg.value;\n', '        uint256 tokens = validPurchaseTokens(weiAmount);\n', '        if (tokens == 0) {revert();}\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        tokenAllocated = tokenAllocated.add(tokens);\n', '        if(whitelist[_investor]) {\n', '            tokenContract.mint(_investor, tokens, owner);\n', '        } else {\n', '            tokenContract.mint(addressFundNonKYCReserv, tokens, owner);\n', '            paidTokens[_investor] = paidTokens[_investor].add(tokens);\n', '            emit NonWhitelistPurchase(_investor, tokens);\n', '        }\n', '        emit TokenPurchase(_investor, weiAmount, tokens);\n', '        if (deposited[_investor] == 0) {\n', '            countInvestor = countInvestor.add(1);\n', '        }\n', '        deposit(_investor);\n', '        checkReferalLink(tokens);\n', '        wallet.transfer(weiAmount);\n', '        return tokens;\n', '    }\n', '\n', '    function getTotalAmountOfTokens(uint256 _weiAmount) internal view returns (uint256) {\n', '        uint256 currentDate = now;\n', '        uint256 currentPeriod = getPeriod(currentDate);\n', '        uint256 amountOfTokens = 0;\n', '        if(0 <= currentPeriod && currentPeriod < 7 && _weiAmount >= weiMinSale){\n', '            amountOfTokens = _weiAmount.mul(priceToken).mul(discount[currentPeriod] + 1000).div(1000);\n', '        }\n', '        return amountOfTokens;\n', '    }\n', '\n', '    function getPeriod(uint256 _currentDate) public pure returns (uint) {\n', '        //1538488800 - Tuesday, 2. October 2018 14:00:00 GMT && 1538499600 - Tuesday, 2. October 2018 17:00:00 GMT\n', '        if( 1538488800 <= _currentDate && _currentDate <= 1538499600){\n', '            return 0;\n', '        }\n', '        //1538499601  - Tuesday, 2. October 2018 17:00:01 GMT GMT && 1541167200 - Friday, 2. November 2018 14:00:00 GMT\n', '        if( 1538499601  <= _currentDate && _currentDate <= 1541167200){\n', '            return 1;\n', '        }\n', '\n', '        //1541167201 - Friday, 2. November 2018 14:00:01 GMT && 1543759200 - Sunday, 2. December 2018 14:00:00 GMT\n', '        if( 1541167201 <= _currentDate && _currentDate <= 1543759200){\n', '            return 2;\n', '        }\n', '        //1543759201 - Sunday, 2. December 2018 14:00:01 GMT && 1546437600 - Wednesday, 2. January 2019 14:00:00 GMT\n', '        if( 1543759201 <= _currentDate && _currentDate <= 1546437600){\n', '            return 3;\n', '        }\n', '        //1546437601 - Wednesday, 2. January 2019 14:00:01 GMT && 1549116000 - Saturday, 2. February 2019 14:00:00 GMT\n', '        if( 1546437601 <= _currentDate && _currentDate <= 1549116000){\n', '            return 4;\n', '        }\n', '        //1549116001 - Saturday, 2. February 2019 14:00:01 GMT && 1551535200 - Saturday, 2. March 2019 14:00:00\n', '        if( 1549116001 <= _currentDate && _currentDate <= 1551535200){\n', '            return 5;\n', '        }\n', '\n', '        return 10;\n', '    }\n', '\n', '    function deposit(address investor) internal {\n', '        deposited[investor] = deposited[investor].add(msg.value);\n', '    }\n', '\n', '    function checkReferalLink(uint256 _amountToken) internal returns(uint256 _refererTokens) {\n', '        _refererTokens = 0;\n', '        if(msg.data.length == 20) {\n', '            address referer = bytesToAddress(bytes(msg.data));\n', '            require(referer != msg.sender);\n', '            _refererTokens = _amountToken.mul(percentReferal).div(100);\n', '            if(tokenContract.balanceOf(addressFundBlchainReferal) >= _refererTokens.mul(2)) {\n', '                tokenContract.mint(referer, _refererTokens, addressFundBlchainReferal);\n', '                tokenContract.mint(msg.sender, _refererTokens, addressFundBlchainReferal);\n', '            }\n', '        }\n', '    }\n', '\n', '    function bytesToAddress(bytes source) internal pure returns(address) {\n', '        uint result;\n', '        uint mul = 1;\n', '        for(uint i = 20; i > 0; i--) {\n', '            result += uint8(source[i-1])*mul;\n', '            mul = mul*256;\n', '        }\n', '        return address(result);\n', '    }\n', '\n', '    function validPurchaseTokens(uint256 _weiAmount) public returns (uint256) {\n', '        uint256 addTokens = getTotalAmountOfTokens(_weiAmount);\n', '        if (tokenAllocated.add(addTokens) > fundForSale) {\n', '            emit TokenLimitReached(tokenAllocated, addTokens);\n', '            return 0;\n', '        }\n', '        if (weiRaised.add(_weiAmount) > hardCap) {\n', '            emit HardCapReached();\n', '            return 0;\n', '        }\n', '        return addTokens;\n', '    }\n', '\n', '    /**\n', '    * @dev Add an contract admin\n', '    */\n', '    function setContractAdmin(address _admin, bool _isAdmin) external onlyOwner {\n', '        require(_admin != address(0));\n', '        contractAdmins[_admin] = _isAdmin;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds single address to whitelist.\n', '    * @param _beneficiary Address to be added to the whitelist\n', '    */\n', '    function addToWhitelist(address _beneficiary) external onlyOwnerOrAnyAdmin {\n', '        whitelist[_beneficiary] = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\n', '     * @param _beneficiaries Addresses to be added to the whitelist\n', '     */\n', '    function addManyToWhitelist(address[] _beneficiaries) external onlyOwnerOrAnyAdmin {\n', '        require(_beneficiaries.length < 101);\n', '        for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '            whitelist[_beneficiaries[i]] = true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes single address from whitelist.\n', '     * @param _beneficiary Address to be removed to the whitelist\n', '     */\n', '    function removeFromWhitelist(address _beneficiary) external onlyOwnerOrAnyAdmin {\n', '        whitelist[_beneficiary] = false;\n', '    }\n', '\n', '    modifier onlyOwnerOrAnyAdmin() {\n', '        require(msg.sender == owner || contractAdmins[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Peterson&#39;s Law Protection\n', '     * Claim tokens\n', '     */\n', '    function claimTokens(address _token) public onlyOwner {\n', '        if (_token == 0x0) {\n', '            owner.transfer(address(this).balance);\n', '            return;\n', '        }\n', '\n', '        uint256 balance = tokenContract.balanceOf(this);\n', '        tokenContract.transfer(owner, balance);\n', '        emit Transfer(_token, owner, balance);\n', '    }\n', '\n', '    modifier onlyFundNonKYCReserv() {\n', '        require(msg.sender == addressFundNonKYCReserv);\n', '        _;\n', '    }\n', '\n', '    function batchTransferPaidTokens(address[] _recipients, uint256[] _values) external onlyFundNonKYCReserv returns (bool) {\n', '        require( _recipients.length > 0 && _recipients.length == _values.length);\n', '        uint256 total = 0;\n', '        for(uint i = 0; i < _values.length; i++){\n', '            total = total.add(_values[i]);\n', '        }\n', '        require(total <= tokenContract.balanceOf(msg.sender));\n', '        for(uint j = 0; j < _recipients.length; j++){\n', '            require(0 <= _values[j]);\n', '            require(_values[j] <= paidTokens[_recipients[j]]);\n', '            paidTokens[_recipients[j]].sub(_values[j]);\n', '            tokenContract.transferFrom(addressFundNonKYCReserv, _recipients[j], _values[j]);\n', '            emit Transfer(msg.sender, _recipients[j], _values[j]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        require(_owner != address(0));\n', '        return tokenContract.balanceOf(_owner);\n', '    }\n', '\n', '    function balanceOfNonKYC(address _owner) public view returns (uint256) {\n', '        require(_owner != address(0));\n', '        return paidTokens[_owner];\n', '    }\n', '}']