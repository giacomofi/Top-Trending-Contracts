['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', '  *  Whitelist contract\n', '  */\n', 'contract Whitelist is Ownable {\n', '\n', '   mapping (address => bool) public whitelist;\n', '   event Registered(address indexed _addr);\n', '   event Unregistered(address indexed _addr);\n', '\n', '   modifier onlyWhitelisted(address _addr) {\n', '     require(whitelist[_addr]);\n', '     _;\n', '   }\n', '\n', '   function isWhitelist(address _addr) public view returns (bool listed) {\n', '     return whitelist[_addr];\n', '   }\n', '\n', '   function registerAddress(address _addr) public onlyOwner {\n', '     require(_addr != address(0) && whitelist[_addr] == false);\n', '     whitelist[_addr] = true;\n', '     Registered(_addr);\n', '   }\n', '\n', '   function registerAddresses(address[] _addrs) public onlyOwner {\n', '     for(uint256 i = 0; i < _addrs.length; i++) {\n', '       require(_addrs[i] != address(0) && whitelist[_addrs[i]] == false);\n', '       whitelist[_addrs[i]] = true;\n', '       Registered(_addrs[i]);\n', '     }\n', '   }\n', '\n', '   function unregisterAddress(address _addr) public onlyOwner onlyWhitelisted(_addr) {\n', '       whitelist[_addr] = false;\n', '       Unregistered(_addr);\n', '   }\n', '\n', '   function unregisterAddresses(address[] _addrs) public onlyOwner {\n', '     for(uint256 i = 0; i < _addrs.length; i++) {\n', '       require(whitelist[_addrs[i]]);\n', '       whitelist[_addrs[i]] = false;\n', '       Unregistered(_addrs[i]);\n', '     }\n', '   }\n', '\n', '}']