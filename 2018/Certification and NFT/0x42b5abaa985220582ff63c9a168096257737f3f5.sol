['pragma solidity ^0.4.24;\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract VenaCoin is ERC20Interface, Owned{\n', '    using SafeMath for uint;\n', '    \n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint _totalSupply;\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    mapping(address => uint256) investments;\n', '    address[] contributors;\n', '    address[] contestContributors = new address[](50);\n', '    uint256 public rate; // How many token units a buyer gets per wei\n', '    uint256 public weiRaised;  // Amount of wei raised\n', '    uint value;\n', '    uint _ICOTokensLimit;\n', '    uint _ownerTokensLimit;\n', '    uint bonusPercentage;\n', '    uint256 public openingTime;\n', '    uint256 public closingTime;\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '    /**\n', '    * Reverts if not in crowdsale time range. \n', '    */\n', '    modifier onlyWhileOpen {\n', '       require(now >= openingTime && now <= closingTime, "Sale open");\n', '        _;\n', '    }\n', '    \n', '    modifier icoClose{\n', '       require(now > closingTime);\n', '        _;\n', '    }\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor(address _owner) public{\n', '        openingTime = 1528644600; // 10 june, 2018 3:30pm GMT\n', '        closingTime = 1539185400; // 10 Oct, 2018 3:30 pm GMT\n', '        symbol = "VENA";\n', '        name = "VenaCoin";\n', '        decimals = 18;\n', '        rate = 1961; //tokens per wei ... 0.3$/vena on rate of 1eth = $589\n', '        owner = _owner;\n', '        _totalSupply = totalSupply();\n', '        _ICOTokensLimit = _icoTokens();\n', '        _ownerTokensLimit = _ownersTokens();\n', '        balances[owner] = _ownerTokensLimit;\n', '        balances[this] = _ICOTokensLimit;\n', '        emit Transfer(address(0),owner,_ownerTokensLimit);\n', '        emit Transfer(address(0),this,_ICOTokensLimit);\n', '    }\n', '    \n', '    function _icoTokens() internal constant returns(uint){\n', '        return 1700000000 * 10**uint(decimals); //1.7 billion\n', '    }\n', '    \n', '    function _ownersTokens() internal constant returns(uint){\n', '        return 300000000 * 10**uint(decimals); //300 million\n', '    }\n', '    \n', '    function totalSupply() public constant returns (uint){\n', '       return 2000000000 * 10**uint(decimals); //2 billion\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from token owner&#39;s account to `to` account\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        // prevent transfer to 0x0, use burn instead\n', '        require(to != 0x0);\n', '        require(balances[msg.sender] >= tokens );\n', '        require(balances[to] + tokens >= balances[to]);\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender,to,tokens);\n', '        return true;\n', '    }\n', '    \n', '    function _transfer(address _to, uint _tokens) internal returns (bool success){\n', '        // prevent transfer to 0x0, use burn instead\n', '        require(_to != 0x0);\n', '        require(balances[this] >= _tokens );\n', '        require(balances[_to] + _tokens >= balances[_to]);\n', '        balances[this] = balances[this].sub(_tokens);\n', '        balances[_to] = balances[_to].add(_tokens);\n', '        emit Transfer(this,_to,_tokens);\n', '        return true;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success){\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender,spender,tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    // \n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success){\n', '        require(tokens <= allowed[from][msg.sender]); //check allowance\n', '        require(balances[from] >= tokens);\n', '        balances[from] = balances[from].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        emit Transfer(from,to,tokens);\n', '        return true;\n', '    }\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '    \n', '    function () external payable{\n', '        buyTokens(msg.sender);\n', '    }\n', '    \n', '    function buyTokens(address _beneficiary) public payable onlyWhileOpen{\n', '        \n', '        uint256 weiAmount = msg.value;\n', '        uint investmentAmount;\n', '        _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = _getTokenAmount(weiAmount);\n', '        \n', '        contributors.push(msg.sender);\n', '        if(investments[msg.sender] != 0 ){\n', '            investmentAmount = investments[msg.sender] + weiAmount;\n', '            investments[msg.sender] = investmentAmount;\n', '        }else{\n', '            investmentAmount = weiAmount;\n', '            investments[msg.sender] = weiAmount;\n', '        }\n', '        _registerContributors(investmentAmount,msg.sender);\n', '        if(contributors.length <=5000){\n', '            bonusPercentage = 100;\n', '        }\n', '        else if(contributors.length >5000 && contributors.length <=10000){\n', '            bonusPercentage = 50;\n', '        }\n', '        else if(contributors.length >10000 && contributors.length <=15000){\n', '            bonusPercentage = 30;\n', '        }\n', '        else {\n', '            bonusPercentage = 15;\n', '        }\n', '        \n', '        uint p = tokens.mul(bonusPercentage.mul(100));\n', '        p = p.div(10000);\n', '        tokens = tokens.add(p);\n', '        \n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        _processPurchase(_beneficiary, tokens);\n', '        TokenPurchase(this, _beneficiary, weiAmount, tokens);\n', '\n', '        _forwardFunds();\n', '    }\n', '  \n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        require(_beneficiary != address(0x0));\n', '        require(_weiAmount != 0);\n', '    }\n', '  \n', '    function _getTokenAmount(uint256 _weiAmount) internal returns (uint256) {\n', '        return _weiAmount.mul(rate);\n', '    }\n', '  \n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '        _transfer(_beneficiary,_tokenAmount);\n', '    }\n', '\n', '    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '        _deliverTokens(_beneficiary, _tokenAmount);\n', '    }\n', '  \n', '    function _forwardFunds() internal {\n', '        owner.transfer(msg.value);\n', '    }\n', '    \n', '    function _registerContributors(uint256 _weiamount, address _sender) internal {\n', '        \n', '        for (uint index = 0; index<50; index++){\n', '            if(_weiamount > investments[contestContributors[index]]){\n', '                _lowerDown(index + 1,_sender);\n', '                contestContributors[index] = _sender;\n', '                index = 50;\n', '            }\n', '        }\n', '    }\n', '    \n', '    function distributeContest() public onlyOwner icoClose{\n', '        uint index =0;\n', '        while(index!=50){\n', '            address _beneficiary = contestContributors[index];\n', '            if(_beneficiary != 0x0){\n', '              \n', '                if(index == 0 ){ //1st top contributor\n', '                    _transfer(_beneficiary, 300000);\n', '                }\n', '                else if(index == 1){ //2nd contributor\n', '                    _transfer(_beneficiary, 200000);\n', '                }\n', '                else if(index == 2){ //3rd contributor\n', '                    _transfer(_beneficiary, 100000);\n', '                }\n', '                else if(index == 3){ //4th contributor\n', '                    _transfer(_beneficiary, 50000);\n', '                }\n', '                else if(index == 4){ //5th contributor\n', '                    _transfer(_beneficiary, 30000);\n', '                }\n', '                else if(index >= 5 && index <=49){ //6th to 50th contributor\n', '                    _transfer(_beneficiary, 7000);\n', '                }\n', '            }\n', '            index++;\n', '        }\n', '        \n', '    }\n', '    \n', '    function _lowerDown(uint index,address sender) internal{\n', '        address newContributor = contestContributors[index-1];\n', '        address previousContributor;\n', '        for(uint i=index; i<=49; i++){\n', '            if(newContributor != sender){\n', '                previousContributor = newContributor;\n', '                newContributor = contestContributors[i];\n', '                contestContributors[i] = previousContributor;\n', '            }\n', '            else{\n', '                i = 50;\n', '            }\n', '        }\n', '    }\n', '    \n', '    function isItOpen() public view returns(string status){\n', '        if(now > openingTime && now < closingTime){\n', '            return "SALE OPEN";\n', '        }\n', '        else{\n', '            return "SALE CLOSE";\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract VenaCoin is ERC20Interface, Owned{\n', '    using SafeMath for uint;\n', '    \n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint _totalSupply;\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    mapping(address => uint256) investments;\n', '    address[] contributors;\n', '    address[] contestContributors = new address[](50);\n', '    uint256 public rate; // How many token units a buyer gets per wei\n', '    uint256 public weiRaised;  // Amount of wei raised\n', '    uint value;\n', '    uint _ICOTokensLimit;\n', '    uint _ownerTokensLimit;\n', '    uint bonusPercentage;\n', '    uint256 public openingTime;\n', '    uint256 public closingTime;\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '    /**\n', '    * Reverts if not in crowdsale time range. \n', '    */\n', '    modifier onlyWhileOpen {\n', '       require(now >= openingTime && now <= closingTime, "Sale open");\n', '        _;\n', '    }\n', '    \n', '    modifier icoClose{\n', '       require(now > closingTime);\n', '        _;\n', '    }\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor(address _owner) public{\n', '        openingTime = 1528644600; // 10 june, 2018 3:30pm GMT\n', '        closingTime = 1539185400; // 10 Oct, 2018 3:30 pm GMT\n', '        symbol = "VENA";\n', '        name = "VenaCoin";\n', '        decimals = 18;\n', '        rate = 1961; //tokens per wei ... 0.3$/vena on rate of 1eth = $589\n', '        owner = _owner;\n', '        _totalSupply = totalSupply();\n', '        _ICOTokensLimit = _icoTokens();\n', '        _ownerTokensLimit = _ownersTokens();\n', '        balances[owner] = _ownerTokensLimit;\n', '        balances[this] = _ICOTokensLimit;\n', '        emit Transfer(address(0),owner,_ownerTokensLimit);\n', '        emit Transfer(address(0),this,_ICOTokensLimit);\n', '    }\n', '    \n', '    function _icoTokens() internal constant returns(uint){\n', '        return 1700000000 * 10**uint(decimals); //1.7 billion\n', '    }\n', '    \n', '    function _ownersTokens() internal constant returns(uint){\n', '        return 300000000 * 10**uint(decimals); //300 million\n', '    }\n', '    \n', '    function totalSupply() public constant returns (uint){\n', '       return 2000000000 * 10**uint(decimals); //2 billion\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to `to` account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        // prevent transfer to 0x0, use burn instead\n', '        require(to != 0x0);\n', '        require(balances[msg.sender] >= tokens );\n', '        require(balances[to] + tokens >= balances[to]);\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender,to,tokens);\n', '        return true;\n', '    }\n', '    \n', '    function _transfer(address _to, uint _tokens) internal returns (bool success){\n', '        // prevent transfer to 0x0, use burn instead\n', '        require(_to != 0x0);\n', '        require(balances[this] >= _tokens );\n', '        require(balances[_to] + _tokens >= balances[_to]);\n', '        balances[this] = balances[this].sub(_tokens);\n', '        balances[_to] = balances[_to].add(_tokens);\n', '        emit Transfer(this,_to,_tokens);\n', '        return true;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account\n", '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success){\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender,spender,tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    // \n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success){\n', '        require(tokens <= allowed[from][msg.sender]); //check allowance\n', '        require(balances[from] >= tokens);\n', '        balances[from] = balances[from].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        emit Transfer(from,to,tokens);\n', '        return true;\n', '    }\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '    \n', '    function () external payable{\n', '        buyTokens(msg.sender);\n', '    }\n', '    \n', '    function buyTokens(address _beneficiary) public payable onlyWhileOpen{\n', '        \n', '        uint256 weiAmount = msg.value;\n', '        uint investmentAmount;\n', '        _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = _getTokenAmount(weiAmount);\n', '        \n', '        contributors.push(msg.sender);\n', '        if(investments[msg.sender] != 0 ){\n', '            investmentAmount = investments[msg.sender] + weiAmount;\n', '            investments[msg.sender] = investmentAmount;\n', '        }else{\n', '            investmentAmount = weiAmount;\n', '            investments[msg.sender] = weiAmount;\n', '        }\n', '        _registerContributors(investmentAmount,msg.sender);\n', '        if(contributors.length <=5000){\n', '            bonusPercentage = 100;\n', '        }\n', '        else if(contributors.length >5000 && contributors.length <=10000){\n', '            bonusPercentage = 50;\n', '        }\n', '        else if(contributors.length >10000 && contributors.length <=15000){\n', '            bonusPercentage = 30;\n', '        }\n', '        else {\n', '            bonusPercentage = 15;\n', '        }\n', '        \n', '        uint p = tokens.mul(bonusPercentage.mul(100));\n', '        p = p.div(10000);\n', '        tokens = tokens.add(p);\n', '        \n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        _processPurchase(_beneficiary, tokens);\n', '        TokenPurchase(this, _beneficiary, weiAmount, tokens);\n', '\n', '        _forwardFunds();\n', '    }\n', '  \n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        require(_beneficiary != address(0x0));\n', '        require(_weiAmount != 0);\n', '    }\n', '  \n', '    function _getTokenAmount(uint256 _weiAmount) internal returns (uint256) {\n', '        return _weiAmount.mul(rate);\n', '    }\n', '  \n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '        _transfer(_beneficiary,_tokenAmount);\n', '    }\n', '\n', '    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '        _deliverTokens(_beneficiary, _tokenAmount);\n', '    }\n', '  \n', '    function _forwardFunds() internal {\n', '        owner.transfer(msg.value);\n', '    }\n', '    \n', '    function _registerContributors(uint256 _weiamount, address _sender) internal {\n', '        \n', '        for (uint index = 0; index<50; index++){\n', '            if(_weiamount > investments[contestContributors[index]]){\n', '                _lowerDown(index + 1,_sender);\n', '                contestContributors[index] = _sender;\n', '                index = 50;\n', '            }\n', '        }\n', '    }\n', '    \n', '    function distributeContest() public onlyOwner icoClose{\n', '        uint index =0;\n', '        while(index!=50){\n', '            address _beneficiary = contestContributors[index];\n', '            if(_beneficiary != 0x0){\n', '              \n', '                if(index == 0 ){ //1st top contributor\n', '                    _transfer(_beneficiary, 300000);\n', '                }\n', '                else if(index == 1){ //2nd contributor\n', '                    _transfer(_beneficiary, 200000);\n', '                }\n', '                else if(index == 2){ //3rd contributor\n', '                    _transfer(_beneficiary, 100000);\n', '                }\n', '                else if(index == 3){ //4th contributor\n', '                    _transfer(_beneficiary, 50000);\n', '                }\n', '                else if(index == 4){ //5th contributor\n', '                    _transfer(_beneficiary, 30000);\n', '                }\n', '                else if(index >= 5 && index <=49){ //6th to 50th contributor\n', '                    _transfer(_beneficiary, 7000);\n', '                }\n', '            }\n', '            index++;\n', '        }\n', '        \n', '    }\n', '    \n', '    function _lowerDown(uint index,address sender) internal{\n', '        address newContributor = contestContributors[index-1];\n', '        address previousContributor;\n', '        for(uint i=index; i<=49; i++){\n', '            if(newContributor != sender){\n', '                previousContributor = newContributor;\n', '                newContributor = contestContributors[i];\n', '                contestContributors[i] = previousContributor;\n', '            }\n', '            else{\n', '                i = 50;\n', '            }\n', '        }\n', '    }\n', '    \n', '    function isItOpen() public view returns(string status){\n', '        if(now > openingTime && now < closingTime){\n', '            return "SALE OPEN";\n', '        }\n', '        else{\n', '            return "SALE CLOSE";\n', '        }\n', '    }\n', '}']
