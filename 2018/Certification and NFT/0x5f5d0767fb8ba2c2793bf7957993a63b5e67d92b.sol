['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', 'contract Extension is Ownable {\n', '\n', '    mapping(address => bool) extensions;\n', '\n', '    function addExtension(address _contract) public onlyOwner {\n', '        extensions[_contract] = true;\n', '    }\n', '\n', '    function hasExtension(address _contract) public view returns (bool){\n', '        return extensions[_contract];\n', '    }\n', '\n', '    function removeExtension(address _contract) public onlyOwner {\n', '        delete extensions[_contract];\n', '    }\n', '\n', '    modifier onlyExtension() {\n', '        require(extensions[msg.sender] == true);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract CryptoBotsIdleToken is Ownable, Extension {\n', '\n', '    string public name = "CryptoBots: Idle Token";\n', '    string public symbol = "CBIT";\n', '    uint8 public decimals = 2;\n', '\n', '    uint256 public totalSupply;\n', '\n', '    mapping(address => uint256) public balances;\n', '    mapping(address => mapping(address => uint256)) public allowed;\n', '\n', '    //Event which is triggered to log all transfers to this contract&#39;s event log\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    //Event which is triggered whenever an owner approves a new allowance for a spender.\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function batchTransfer(address[] _to, uint256 _value) public {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], safeMul(_to.length, _value));\n', '\n', '        for (uint i = 0; i < _to.length; i++) {\n', '            balances[_to[i]] += safeAdd(balances[_to[i]], _value);\n', '            emit Transfer(msg.sender, _to[i], _value);\n', '        }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        balances[_from] = safeSub(balances[_from], _value);\n', '\n', '        if (hasExtension(_to) == false && hasExtension(_from) == false) {\n', '            allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\n', '        }\n', '\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function withdraw() public onlyOwner {\n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '\n', '    function create(uint _amount) public onlyOwner {\n', '        balances[msg.sender] = safeAdd(balances[msg.sender], _amount);\n', '        totalSupply = safeAdd(totalSupply, _amount);\n', '    }\n', '\n', '    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', 'contract Extension is Ownable {\n', '\n', '    mapping(address => bool) extensions;\n', '\n', '    function addExtension(address _contract) public onlyOwner {\n', '        extensions[_contract] = true;\n', '    }\n', '\n', '    function hasExtension(address _contract) public view returns (bool){\n', '        return extensions[_contract];\n', '    }\n', '\n', '    function removeExtension(address _contract) public onlyOwner {\n', '        delete extensions[_contract];\n', '    }\n', '\n', '    modifier onlyExtension() {\n', '        require(extensions[msg.sender] == true);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract CryptoBotsIdleToken is Ownable, Extension {\n', '\n', '    string public name = "CryptoBots: Idle Token";\n', '    string public symbol = "CBIT";\n', '    uint8 public decimals = 2;\n', '\n', '    uint256 public totalSupply;\n', '\n', '    mapping(address => uint256) public balances;\n', '    mapping(address => mapping(address => uint256)) public allowed;\n', '\n', "    //Event which is triggered to log all transfers to this contract's event log\n", '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    //Event which is triggered whenever an owner approves a new allowance for a spender.\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function batchTransfer(address[] _to, uint256 _value) public {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], safeMul(_to.length, _value));\n', '\n', '        for (uint i = 0; i < _to.length; i++) {\n', '            balances[_to[i]] += safeAdd(balances[_to[i]], _value);\n', '            emit Transfer(msg.sender, _to[i], _value);\n', '        }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        balances[_from] = safeSub(balances[_from], _value);\n', '\n', '        if (hasExtension(_to) == false && hasExtension(_from) == false) {\n', '            allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\n', '        }\n', '\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function withdraw() public onlyOwner {\n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '\n', '    function create(uint _amount) public onlyOwner {\n', '        balances[msg.sender] = safeAdd(balances[msg.sender], _amount);\n', '        totalSupply = safeAdd(totalSupply, _amount);\n', '    }\n', '\n', '    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '}']
