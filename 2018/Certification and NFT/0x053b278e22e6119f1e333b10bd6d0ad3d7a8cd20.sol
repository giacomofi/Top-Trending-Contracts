['pragma solidity ^0.4.18;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/ReturnVestingRegistry.sol\n', '\n', 'contract ReturnVestingRegistry is Ownable {\n', '\n', '  mapping (address => address) public returnAddress;\n', '\n', '  function record(address from, address to) onlyOwner public {\n', '    require(from != 0);\n', '\n', '    returnAddress[from] = to;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/TerraformReserve.sol\n', '\n', 'contract TerraformReserve is Ownable {\n', '\n', '  /* Storing a balance for each user */\n', '  mapping (address => uint256) public lockedBalance;\n', '\n', '  /* Store the total sum locked */\n', '  uint public totalLocked;\n', '\n', '  /* Reference to the token */\n', '  ERC20 public manaToken;\n', '\n', '  /* Contract that will assign the LAND and burn/return tokens */\n', '  address public landClaim;\n', '\n', '  /* Prevent the token from accepting deposits */\n', '  bool public acceptingDeposits;\n', '\n', '  event LockedBalance(address user, uint mana);\n', '  event LandClaimContractSet(address target);\n', '  event LandClaimExecuted(address user, uint value, bytes data);\n', '  event AcceptingDepositsChanged(bool _acceptingDeposits);\n', '\n', '  function TerraformReserve(address _token) {\n', '    require(_token != 0);\n', '    manaToken = ERC20(_token);\n', '    acceptingDeposits = true;\n', '  }\n', '\n', '  /**\n', '   * Lock MANA into the contract.\n', '   * This contract does not have another way to take the tokens out other than\n', '   * through the target contract.\n', '   */\n', '  function lockMana(address _from, uint256 mana) public {\n', '    require(acceptingDeposits);\n', '    require(mana >= 1000 * 1e18);\n', '    require(manaToken.transferFrom(_from, this, mana));\n', '\n', '    lockedBalance[_from] += mana;\n', '    totalLocked += mana;\n', '    LockedBalance(_from, mana);\n', '  }\n', '\n', '  /**\n', '   * Allows the owner of the contract to pause acceptingDeposits\n', '   */\n', '  function changeContractState(bool _acceptingDeposits) public onlyOwner {\n', '    acceptingDeposits = _acceptingDeposits;\n', '    AcceptingDepositsChanged(acceptingDeposits);\n', '  }\n', '\n', '  /**\n', '   * Set the contract that can move the staked MANA.\n', '   * Calls the `approve` function of the ERC20 token with the total amount.\n', '   */\n', '  function setTargetContract(address target) public onlyOwner {\n', '    landClaim = target;\n', '    manaToken.approve(landClaim, totalLocked);\n', '    LandClaimContractSet(target);\n', '  }\n', '\n', '  /**\n', '   * Prevent payments to the contract\n', '   */\n', '  function () public payable {\n', '    revert();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/Math.sol\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '// File: contracts/TokenVesting.sol\n', '\n', '/**\n', ' * @title TokenVesting\n', ' * @dev A token holder contract that can release its token balance gradually like a\n', ' * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n', ' * owner.\n', ' */\n', 'contract TokenVesting is Ownable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20;\n', '\n', '  event Released(uint256 amount);\n', '  event Revoked();\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  uint256 public cliff;\n', '  uint256 public start;\n', '  uint256 public duration;\n', '\n', '  bool public revocable;\n', '  bool public revoked;\n', '\n', '  uint256 public released;\n', '\n', '  ERC20 public token;\n', '\n', '  /**\n', '   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n', '   * of the balance will have vested.\n', '   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n', '   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n', '   * @param _duration duration in seconds of the period in which the tokens will vest\n', '   * @param _revocable whether the vesting is revocable or not\n', '   * @param _token address of the ERC20 token contract\n', '   */\n', '  function TokenVesting(\n', '    address _beneficiary,\n', '    uint256 _start,\n', '    uint256 _cliff,\n', '    uint256 _duration,\n', '    bool    _revocable,\n', '    address _token\n', '  ) {\n', '    require(_beneficiary != 0x0);\n', '    require(_cliff <= _duration);\n', '\n', '    beneficiary = _beneficiary;\n', '    start       = _start;\n', '    cliff       = _start.add(_cliff);\n', '    duration    = _duration;\n', '    revocable   = _revocable;\n', '    token       = ERC20(_token);\n', '  }\n', '\n', '  /**\n', '   * @notice Only allow calls from the beneficiary of the vesting contract\n', '   */\n', '  modifier onlyBeneficiary() {\n', '    require(msg.sender == beneficiary);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @notice Allow the beneficiary to change its address\n', '   * @param target the address to transfer the right to\n', '   */\n', '  function changeBeneficiary(address target) onlyBeneficiary public {\n', '    require(target != 0);\n', '    beneficiary = target;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers vested tokens to beneficiary.\n', '   */\n', '  function release() onlyBeneficiary public {\n', '    require(now >= cliff);\n', '    _releaseTo(beneficiary);\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers vested tokens to a target address.\n', '   * @param target the address to send the tokens to\n', '   */\n', '  function releaseTo(address target) onlyBeneficiary public {\n', '    require(now >= cliff);\n', '    _releaseTo(target);\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers vested tokens to beneficiary.\n', '   */\n', '  function _releaseTo(address target) internal {\n', '    uint256 unreleased = releasableAmount();\n', '\n', '    released = released.add(unreleased);\n', '\n', '    token.safeTransfer(target, unreleased);\n', '\n', '    Released(released);\n', '  }\n', '\n', '  /**\n', '   * @notice Allows the owner to revoke the vesting. Tokens already vested are sent to the beneficiary.\n', '   */\n', '  function revoke() onlyOwner public {\n', '    require(revocable);\n', '    require(!revoked);\n', '\n', '    // Release all vested tokens\n', '    _releaseTo(beneficiary);\n', '\n', '    // Send the remainder to the owner\n', '    token.safeTransfer(owner, token.balanceOf(this));\n', '\n', '    revoked = true;\n', '\n', '    Revoked();\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested but hasn&#39;t been released yet.\n', '   */\n', '  function releasableAmount() public constant returns (uint256) {\n', '    return vestedAmount().sub(released);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested.\n', '   */\n', '  function vestedAmount() public constant returns (uint256) {\n', '    uint256 currentBalance = token.balanceOf(this);\n', '    uint256 totalBalance = currentBalance.add(released);\n', '\n', '    if (now < cliff) {\n', '      return 0;\n', '    } else if (now >= start.add(duration) || revoked) {\n', '      return totalBalance;\n', '    } else {\n', '      return totalBalance.mul(now.sub(start)).div(duration);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @notice Allow withdrawing any token other than the relevant one\n', '   */\n', '  function releaseForeignToken(ERC20 _token, uint256 amount) onlyOwner {\n', '    require(_token != token);\n', '    _token.transfer(owner, amount);\n', '  }\n', '}\n', '\n', '// File: contracts/DecentralandVesting.sol\n', '\n', 'contract DecentralandVesting is TokenVesting {\n', '  using SafeERC20 for ERC20;\n', '\n', '  event LockedMANA(uint256 amount);\n', '\n', '  ReturnVestingRegistry public returnVesting;\n', '  TerraformReserve public terraformReserve;\n', '\n', '  function DecentralandVesting(\n', '    address               _beneficiary,\n', '    uint256               _start,\n', '    uint256               _cliff,\n', '    uint256               _duration,\n', '    bool                  _revocable,\n', '    ERC20                 _token,\n', '    ReturnVestingRegistry _returnVesting,\n', '    TerraformReserve      _terraformReserve\n', '  )\n', '    TokenVesting(_beneficiary, _start, _cliff, _duration, _revocable, _token)\n', '  {\n', '    returnVesting    = ReturnVestingRegistry(_returnVesting);\n', '    terraformReserve = TerraformReserve(_terraformReserve);\n', '  }\n', '\n', '  function lockMana(uint256 amount) onlyBeneficiary public {\n', '    // Require allowance to be enough\n', '    require(token.allowance(beneficiary, terraformReserve) >= amount);\n', '\n', '    // Check the balance of the vesting contract\n', '    require(amount <= token.balanceOf(this));\n', '\n', '    // Check the registry of the beneficiary is fixed to return to this contract\n', '    require(returnVesting.returnAddress(beneficiary) == address(this));\n', '\n', '    // Transfer and lock\n', '    token.safeTransfer(beneficiary, amount);\n', '    terraformReserve.lockMana(beneficiary, amount);\n', '\n', '    LockedMANA(amount);\n', '  }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/ReturnVestingRegistry.sol\n', '\n', 'contract ReturnVestingRegistry is Ownable {\n', '\n', '  mapping (address => address) public returnAddress;\n', '\n', '  function record(address from, address to) onlyOwner public {\n', '    require(from != 0);\n', '\n', '    returnAddress[from] = to;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/TerraformReserve.sol\n', '\n', 'contract TerraformReserve is Ownable {\n', '\n', '  /* Storing a balance for each user */\n', '  mapping (address => uint256) public lockedBalance;\n', '\n', '  /* Store the total sum locked */\n', '  uint public totalLocked;\n', '\n', '  /* Reference to the token */\n', '  ERC20 public manaToken;\n', '\n', '  /* Contract that will assign the LAND and burn/return tokens */\n', '  address public landClaim;\n', '\n', '  /* Prevent the token from accepting deposits */\n', '  bool public acceptingDeposits;\n', '\n', '  event LockedBalance(address user, uint mana);\n', '  event LandClaimContractSet(address target);\n', '  event LandClaimExecuted(address user, uint value, bytes data);\n', '  event AcceptingDepositsChanged(bool _acceptingDeposits);\n', '\n', '  function TerraformReserve(address _token) {\n', '    require(_token != 0);\n', '    manaToken = ERC20(_token);\n', '    acceptingDeposits = true;\n', '  }\n', '\n', '  /**\n', '   * Lock MANA into the contract.\n', '   * This contract does not have another way to take the tokens out other than\n', '   * through the target contract.\n', '   */\n', '  function lockMana(address _from, uint256 mana) public {\n', '    require(acceptingDeposits);\n', '    require(mana >= 1000 * 1e18);\n', '    require(manaToken.transferFrom(_from, this, mana));\n', '\n', '    lockedBalance[_from] += mana;\n', '    totalLocked += mana;\n', '    LockedBalance(_from, mana);\n', '  }\n', '\n', '  /**\n', '   * Allows the owner of the contract to pause acceptingDeposits\n', '   */\n', '  function changeContractState(bool _acceptingDeposits) public onlyOwner {\n', '    acceptingDeposits = _acceptingDeposits;\n', '    AcceptingDepositsChanged(acceptingDeposits);\n', '  }\n', '\n', '  /**\n', '   * Set the contract that can move the staked MANA.\n', '   * Calls the `approve` function of the ERC20 token with the total amount.\n', '   */\n', '  function setTargetContract(address target) public onlyOwner {\n', '    landClaim = target;\n', '    manaToken.approve(landClaim, totalLocked);\n', '    LandClaimContractSet(target);\n', '  }\n', '\n', '  /**\n', '   * Prevent payments to the contract\n', '   */\n', '  function () public payable {\n', '    revert();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/Math.sol\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '// File: contracts/TokenVesting.sol\n', '\n', '/**\n', ' * @title TokenVesting\n', ' * @dev A token holder contract that can release its token balance gradually like a\n', ' * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n', ' * owner.\n', ' */\n', 'contract TokenVesting is Ownable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20;\n', '\n', '  event Released(uint256 amount);\n', '  event Revoked();\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  uint256 public cliff;\n', '  uint256 public start;\n', '  uint256 public duration;\n', '\n', '  bool public revocable;\n', '  bool public revoked;\n', '\n', '  uint256 public released;\n', '\n', '  ERC20 public token;\n', '\n', '  /**\n', '   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n', '   * of the balance will have vested.\n', '   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n', '   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n', '   * @param _duration duration in seconds of the period in which the tokens will vest\n', '   * @param _revocable whether the vesting is revocable or not\n', '   * @param _token address of the ERC20 token contract\n', '   */\n', '  function TokenVesting(\n', '    address _beneficiary,\n', '    uint256 _start,\n', '    uint256 _cliff,\n', '    uint256 _duration,\n', '    bool    _revocable,\n', '    address _token\n', '  ) {\n', '    require(_beneficiary != 0x0);\n', '    require(_cliff <= _duration);\n', '\n', '    beneficiary = _beneficiary;\n', '    start       = _start;\n', '    cliff       = _start.add(_cliff);\n', '    duration    = _duration;\n', '    revocable   = _revocable;\n', '    token       = ERC20(_token);\n', '  }\n', '\n', '  /**\n', '   * @notice Only allow calls from the beneficiary of the vesting contract\n', '   */\n', '  modifier onlyBeneficiary() {\n', '    require(msg.sender == beneficiary);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @notice Allow the beneficiary to change its address\n', '   * @param target the address to transfer the right to\n', '   */\n', '  function changeBeneficiary(address target) onlyBeneficiary public {\n', '    require(target != 0);\n', '    beneficiary = target;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers vested tokens to beneficiary.\n', '   */\n', '  function release() onlyBeneficiary public {\n', '    require(now >= cliff);\n', '    _releaseTo(beneficiary);\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers vested tokens to a target address.\n', '   * @param target the address to send the tokens to\n', '   */\n', '  function releaseTo(address target) onlyBeneficiary public {\n', '    require(now >= cliff);\n', '    _releaseTo(target);\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers vested tokens to beneficiary.\n', '   */\n', '  function _releaseTo(address target) internal {\n', '    uint256 unreleased = releasableAmount();\n', '\n', '    released = released.add(unreleased);\n', '\n', '    token.safeTransfer(target, unreleased);\n', '\n', '    Released(released);\n', '  }\n', '\n', '  /**\n', '   * @notice Allows the owner to revoke the vesting. Tokens already vested are sent to the beneficiary.\n', '   */\n', '  function revoke() onlyOwner public {\n', '    require(revocable);\n', '    require(!revoked);\n', '\n', '    // Release all vested tokens\n', '    _releaseTo(beneficiary);\n', '\n', '    // Send the remainder to the owner\n', '    token.safeTransfer(owner, token.balanceOf(this));\n', '\n', '    revoked = true;\n', '\n', '    Revoked();\n', '  }\n', '\n', '\n', '  /**\n', "   * @dev Calculates the amount that has already vested but hasn't been released yet.\n", '   */\n', '  function releasableAmount() public constant returns (uint256) {\n', '    return vestedAmount().sub(released);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested.\n', '   */\n', '  function vestedAmount() public constant returns (uint256) {\n', '    uint256 currentBalance = token.balanceOf(this);\n', '    uint256 totalBalance = currentBalance.add(released);\n', '\n', '    if (now < cliff) {\n', '      return 0;\n', '    } else if (now >= start.add(duration) || revoked) {\n', '      return totalBalance;\n', '    } else {\n', '      return totalBalance.mul(now.sub(start)).div(duration);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @notice Allow withdrawing any token other than the relevant one\n', '   */\n', '  function releaseForeignToken(ERC20 _token, uint256 amount) onlyOwner {\n', '    require(_token != token);\n', '    _token.transfer(owner, amount);\n', '  }\n', '}\n', '\n', '// File: contracts/DecentralandVesting.sol\n', '\n', 'contract DecentralandVesting is TokenVesting {\n', '  using SafeERC20 for ERC20;\n', '\n', '  event LockedMANA(uint256 amount);\n', '\n', '  ReturnVestingRegistry public returnVesting;\n', '  TerraformReserve public terraformReserve;\n', '\n', '  function DecentralandVesting(\n', '    address               _beneficiary,\n', '    uint256               _start,\n', '    uint256               _cliff,\n', '    uint256               _duration,\n', '    bool                  _revocable,\n', '    ERC20                 _token,\n', '    ReturnVestingRegistry _returnVesting,\n', '    TerraformReserve      _terraformReserve\n', '  )\n', '    TokenVesting(_beneficiary, _start, _cliff, _duration, _revocable, _token)\n', '  {\n', '    returnVesting    = ReturnVestingRegistry(_returnVesting);\n', '    terraformReserve = TerraformReserve(_terraformReserve);\n', '  }\n', '\n', '  function lockMana(uint256 amount) onlyBeneficiary public {\n', '    // Require allowance to be enough\n', '    require(token.allowance(beneficiary, terraformReserve) >= amount);\n', '\n', '    // Check the balance of the vesting contract\n', '    require(amount <= token.balanceOf(this));\n', '\n', '    // Check the registry of the beneficiary is fixed to return to this contract\n', '    require(returnVesting.returnAddress(beneficiary) == address(this));\n', '\n', '    // Transfer and lock\n', '    token.safeTransfer(beneficiary, amount);\n', '    terraformReserve.lockMana(beneficiary, amount);\n', '\n', '    LockedMANA(amount);\n', '  }\n', '}']
