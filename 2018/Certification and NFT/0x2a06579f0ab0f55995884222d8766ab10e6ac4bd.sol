['pragma solidity ^0.4.18;\n', '\n', '// DragonKingConfig v2.0 2e59d4\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/DragonKingConfig.sol\n', '\n', '/**\n', ' * DragonKing game configuration contract\n', '**/\n', '\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', 'contract DragonKingConfig is Ownable {\n', '\n', '  struct PurchaseRequirement {\n', '    address[] tokens;\n', '    uint256[] amounts;\n', '  }\n', '\n', '  /**\n', '   * creates Configuration for the DragonKing game\n', '   * tokens array should be in the following order:\n', '      0    1    2    3     4    5    6    7     8\n', '     [tpt, ndc, skl, xper, mag, stg, dex, luck, gift]\n', '  */\n', '  constructor(uint8 characterFee, uint8 eruptionThresholdInHours, uint8 percentageOfCharactersToKill, uint128[] charactersCosts, address[] tokens) public {\n', '    fee = characterFee;\n', '    for (uint8 i = 0; i < charactersCosts.length; i++) {\n', '      costs.push(uint128(charactersCosts[i]) * 1 finney);\n', '      values.push(costs[i] - costs[i] / 100 * fee);\n', '    }\n', '    eruptionThreshold = uint256(eruptionThresholdInHours) * 60 * 60; // convert to seconds\n', '    castleLootDistributionThreshold = 1 days; // once per day\n', '    percentageToKill = percentageOfCharactersToKill;\n', '    maxCharacters = 600;\n', '    teleportPrice = 1000000000000000000;\n', '    protectionPrice = 1000000000000000000;\n', '    luckThreshold = 4200;\n', '    fightFactor = 4;\n', '    giftTokenAmount = 1000000000000000000;\n', '    giftToken = ERC20(tokens[8]);\n', '    // purchase requirements\n', '    // knights\n', '    purchaseRequirements[7].tokens = [tokens[5]]; // 5 STG\n', '    purchaseRequirements[7].amounts = [250];\n', '    purchaseRequirements[8].tokens = [tokens[5]]; // 5 STG\n', '    purchaseRequirements[8].amounts = [5*(10**2)];\n', '    purchaseRequirements[9].tokens = [tokens[5]]; // 10 STG\n', '    purchaseRequirements[9].amounts = [10*(10**2)];\n', '    purchaseRequirements[10].tokens = [tokens[5]]; // 20 STG\n', '    purchaseRequirements[10].amounts = [20*(10**2)];\n', '    purchaseRequirements[11].tokens = [tokens[5]]; // 50 STG\n', '    purchaseRequirements[11].amounts = [50*(10**2)];\n', '    // wizards\n', '    purchaseRequirements[15].tokens = [tokens[2], tokens[3]]; // 5 SKL % 10 XPER\n', '    purchaseRequirements[15].amounts = [25*(10**17), 5*(10**2)];\n', '    purchaseRequirements[16].tokens = [tokens[2], tokens[3], tokens[4]]; // 5 SKL & 10 XPER & 2.5 MAG\n', '    purchaseRequirements[16].amounts = [5*(10**18), 10*(10**2), 250];\n', '    purchaseRequirements[17].tokens = [tokens[2], tokens[3], tokens[4]]; // 10 SKL & 20 XPER & 5 MAG\n', '    purchaseRequirements[17].amounts = [10*(10**18), 20*(10**2), 5*(10**2)];\n', '    purchaseRequirements[18].tokens = [tokens[2], tokens[3], tokens[4]]; // 25 SKL & 50 XP & 10 MAG\n', '    purchaseRequirements[18].amounts = [25*(10**18), 50*(10**2), 10*(10**2)];\n', '    purchaseRequirements[19].tokens = [tokens[2], tokens[3], tokens[4]]; // 50 SKL & 100 XP & 20 MAG\n', '    purchaseRequirements[19].amounts = [50*(10**18), 100*(10**2), 20*(10**2)]; \n', '    purchaseRequirements[20].tokens = [tokens[2], tokens[3], tokens[4]]; // 100 SKL & 200 XP & 50 MAG \n', '    purchaseRequirements[20].amounts = [100*(10**18), 200*(10**2), 50*(10**2)];\n', '    // archers\n', '    purchaseRequirements[21].tokens = [tokens[2], tokens[3]]; // 2.5 SKL & 5 XPER\n', '    purchaseRequirements[21].amounts = [25*(10**17), 5*(10**2)];\n', '    purchaseRequirements[22].tokens = [tokens[2], tokens[3], tokens[6]]; // 5 SKL & 10 XPER & 2.5 DEX\n', '    purchaseRequirements[22].amounts = [5*(10**18), 10*(10**2), 250];\n', '    purchaseRequirements[23].tokens = [tokens[2], tokens[3], tokens[6]]; // 10 SKL & 20 XPER & 5 DEX\n', '    purchaseRequirements[23].amounts = [10*(10**18), 20*(10**2), 5*(10**2)];\n', '    purchaseRequirements[24].tokens = [tokens[2], tokens[3], tokens[6]]; // 25 SKL & 50 XP & 10 DEX\n', '    purchaseRequirements[24].amounts = [25*(10**18), 50*(10**2), 10*(10**2)];\n', '    purchaseRequirements[25].tokens = [tokens[2], tokens[3], tokens[6]]; // 50 SKL & 100 XP & 20 DEX\n', '    purchaseRequirements[25].amounts = [50*(10**18), 100*(10**2), 20*(10**2)]; \n', '    purchaseRequirements[26].tokens = [tokens[2], tokens[3], tokens[6]]; // 100 SKL & 200 XP & 50 DEX \n', '    purchaseRequirements[26].amounts = [100*(10**18), 200*(10**2), 50*(10**2)];\n', '  }\n', '\n', '  /** the Gift token contract **/\n', '  ERC20 public giftToken;\n', '  /** amount of gift tokens to send **/\n', '  uint256 public giftTokenAmount;\n', '  /** purchase requirements for each type of character **/\n', '  PurchaseRequirement[30] purchaseRequirements; \n', '  /** the cost of each character type */\n', '  uint128[] public costs;\n', '  /** the value of each character type (cost - fee), so it&#39;s not necessary to compute it each time*/\n', '  uint128[] public values;\n', '  /** the fee to be paid each time an character is bought in percent*/\n', '  uint8 fee;\n', '  /** The maximum of characters allowed in the game */\n', '  uint16 public maxCharacters;\n', '  /** the amount of time that should pass since last eruption **/\n', '  uint256 public eruptionThreshold;\n', '  /** the amount of time that should pass ince last castle loot distribution **/\n', '  uint256 public castleLootDistributionThreshold;\n', '  /** how many characters to kill in %, e.g. 20 will stand for 20%, should be < 100 **/\n', '  uint8 public percentageToKill;\n', '  /* Cooldown threshold */\n', '  uint256 public constant CooldownThreshold = 1 days;\n', '  /** fight factor, used to compute extra probability in fight **/\n', '  uint8 public fightFactor;\n', '\n', '  /** the price for teleportation*/\n', '  uint256 public teleportPrice;\n', '  /** the price for protection */\n', '  uint256 public protectionPrice;\n', '  /** the luck threshold */\n', '  uint256 public luckThreshold;\n', '\n', '  function hasEnoughTokensToPurchase(address buyer, uint8 characterType) external returns (bool canBuy) {\n', '    for (uint256 i = 0; i < purchaseRequirements[characterType].tokens.length; i++) {\n', '      if (ERC20(purchaseRequirements[characterType].tokens[i]).balanceOf(buyer) < purchaseRequirements[characterType].amounts[i]) {\n', '        return false;\n', '      }\n', '    }\n', '    return true;\n', '  }\n', '\n', '\n', '  function setPurchaseRequirements(uint8 characterType, address[] tokens, uint256[] amounts) external {\n', '    purchaseRequirements[characterType].tokens = tokens;\n', '    purchaseRequirements[characterType].amounts = amounts;\n', '  } \n', '\n', '  function getPurchaseRequirements(uint8 characterType) view external returns (address[] tokens, uint256[] amounts) {\n', '    tokens = purchaseRequirements[characterType].tokens;\n', '    amounts = purchaseRequirements[characterType].amounts;\n', '  }\n', '\n', '  /**\n', '   * sets the prices of the character types\n', '   * @param prices the prices in finney\n', '   * */\n', '  function setPrices(uint16[] prices) external onlyOwner {\n', '    for (uint8 i = 0; i < prices.length; i++) {\n', '      costs[i] = uint128(prices[i]) * 1 finney;\n', '      values[i] = costs[i] - costs[i] / 100 * fee;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * sets the eruption threshold\n', '   * @param _value the threshold in seconds, e.g. 24 hours = 25*60*60\n', '   * */\n', '  function setEruptionThreshold(uint256 _value) external onlyOwner {\n', '    eruptionThreshold = _value;\n', '  }\n', '\n', '  /**\n', '   * sets the castle loot distribution threshold\n', '   * @param _value the threshold in seconds, e.g. 24 hours = 25*60*60\n', '   * */\n', '  function setCastleLootDistributionThreshold(uint256 _value) external onlyOwner {\n', '    castleLootDistributionThreshold = _value;\n', '  }\n', '\n', '  /**\n', '   * sets the fee\n', '   * @param _value for the fee, e.g. 3% = 3\n', '   * */\n', '  function setFee(uint8 _value) external onlyOwner {\n', '    fee = _value;\n', '  }\n', '\n', '  /**\n', '   * sets the percentage of characters to kill on eruption\n', '   * @param _value the percentage, e.g. 10% = 10\n', '   * */\n', '  function setPercentageToKill(uint8 _value) external onlyOwner {\n', '    percentageToKill = _value;\n', '  }\n', '\n', '  /**\n', '   * sets the maximum amount of characters allowed to be present in the game\n', '   * @param _value characters limit, e.g 600\n', '   * */\n', '  function setMaxCharacters(uint16 _value) external onlyOwner {\n', '    maxCharacters = _value;\n', '  }\n', '\n', '  /**\n', '   * sets the fight factor\n', '   * @param _value fight factor, e.g 4\n', '   * */\n', '  function setFightFactor(uint8 _value) external onlyOwner {\n', '    fightFactor = _value;\n', '  }\n', '\n', '  /**\n', '   * sets the teleport price\n', '   * @param _value base amount of TPT to transfer on teleport, e.g 10e18\n', '   * */\n', '  function setTeleportPrice(uint256 _value) external onlyOwner {\n', '    teleportPrice = _value;\n', '  }\n', '\n', '  /**\n', '   * sets the protection price\n', '   * @param _value base amount of NDC to transfer on protection, e.g 10e18\n', '   * */\n', '  function setProtectionPrice(uint256 _value) external onlyOwner {\n', '    protectionPrice = _value;\n', '  }\n', '\n', '  /**\n', '   * sets the luck threshold\n', '   * @param _value the minimum amount of luck tokens required for the second roll\n', '   * */\n', '  function setLuckThreshold(uint256 _value) external onlyOwner {\n', '    luckThreshold = _value;\n', '  }\n', '\n', '  /**\n', '   * sets the amount of tokens to gift threshold\n', '   * @param _value new value of the amount to gift\n', '   * */\n', '  function setGiftTokenAmount(uint256 _value) {\n', '    giftTokenAmount = _value;\n', '  }\n', '\n', '  /**\n', '   * sets the gift token address\n', '   * @param _value new gift token address\n', '   * */\n', '  function setGiftToken(address _value) {\n', '    giftToken = ERC20(_value);\n', '  }\n', '\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// DragonKingConfig v2.0 2e59d4\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/DragonKingConfig.sol\n', '\n', '/**\n', ' * DragonKing game configuration contract\n', '**/\n', '\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', 'contract DragonKingConfig is Ownable {\n', '\n', '  struct PurchaseRequirement {\n', '    address[] tokens;\n', '    uint256[] amounts;\n', '  }\n', '\n', '  /**\n', '   * creates Configuration for the DragonKing game\n', '   * tokens array should be in the following order:\n', '      0    1    2    3     4    5    6    7     8\n', '     [tpt, ndc, skl, xper, mag, stg, dex, luck, gift]\n', '  */\n', '  constructor(uint8 characterFee, uint8 eruptionThresholdInHours, uint8 percentageOfCharactersToKill, uint128[] charactersCosts, address[] tokens) public {\n', '    fee = characterFee;\n', '    for (uint8 i = 0; i < charactersCosts.length; i++) {\n', '      costs.push(uint128(charactersCosts[i]) * 1 finney);\n', '      values.push(costs[i] - costs[i] / 100 * fee);\n', '    }\n', '    eruptionThreshold = uint256(eruptionThresholdInHours) * 60 * 60; // convert to seconds\n', '    castleLootDistributionThreshold = 1 days; // once per day\n', '    percentageToKill = percentageOfCharactersToKill;\n', '    maxCharacters = 600;\n', '    teleportPrice = 1000000000000000000;\n', '    protectionPrice = 1000000000000000000;\n', '    luckThreshold = 4200;\n', '    fightFactor = 4;\n', '    giftTokenAmount = 1000000000000000000;\n', '    giftToken = ERC20(tokens[8]);\n', '    // purchase requirements\n', '    // knights\n', '    purchaseRequirements[7].tokens = [tokens[5]]; // 5 STG\n', '    purchaseRequirements[7].amounts = [250];\n', '    purchaseRequirements[8].tokens = [tokens[5]]; // 5 STG\n', '    purchaseRequirements[8].amounts = [5*(10**2)];\n', '    purchaseRequirements[9].tokens = [tokens[5]]; // 10 STG\n', '    purchaseRequirements[9].amounts = [10*(10**2)];\n', '    purchaseRequirements[10].tokens = [tokens[5]]; // 20 STG\n', '    purchaseRequirements[10].amounts = [20*(10**2)];\n', '    purchaseRequirements[11].tokens = [tokens[5]]; // 50 STG\n', '    purchaseRequirements[11].amounts = [50*(10**2)];\n', '    // wizards\n', '    purchaseRequirements[15].tokens = [tokens[2], tokens[3]]; // 5 SKL % 10 XPER\n', '    purchaseRequirements[15].amounts = [25*(10**17), 5*(10**2)];\n', '    purchaseRequirements[16].tokens = [tokens[2], tokens[3], tokens[4]]; // 5 SKL & 10 XPER & 2.5 MAG\n', '    purchaseRequirements[16].amounts = [5*(10**18), 10*(10**2), 250];\n', '    purchaseRequirements[17].tokens = [tokens[2], tokens[3], tokens[4]]; // 10 SKL & 20 XPER & 5 MAG\n', '    purchaseRequirements[17].amounts = [10*(10**18), 20*(10**2), 5*(10**2)];\n', '    purchaseRequirements[18].tokens = [tokens[2], tokens[3], tokens[4]]; // 25 SKL & 50 XP & 10 MAG\n', '    purchaseRequirements[18].amounts = [25*(10**18), 50*(10**2), 10*(10**2)];\n', '    purchaseRequirements[19].tokens = [tokens[2], tokens[3], tokens[4]]; // 50 SKL & 100 XP & 20 MAG\n', '    purchaseRequirements[19].amounts = [50*(10**18), 100*(10**2), 20*(10**2)]; \n', '    purchaseRequirements[20].tokens = [tokens[2], tokens[3], tokens[4]]; // 100 SKL & 200 XP & 50 MAG \n', '    purchaseRequirements[20].amounts = [100*(10**18), 200*(10**2), 50*(10**2)];\n', '    // archers\n', '    purchaseRequirements[21].tokens = [tokens[2], tokens[3]]; // 2.5 SKL & 5 XPER\n', '    purchaseRequirements[21].amounts = [25*(10**17), 5*(10**2)];\n', '    purchaseRequirements[22].tokens = [tokens[2], tokens[3], tokens[6]]; // 5 SKL & 10 XPER & 2.5 DEX\n', '    purchaseRequirements[22].amounts = [5*(10**18), 10*(10**2), 250];\n', '    purchaseRequirements[23].tokens = [tokens[2], tokens[3], tokens[6]]; // 10 SKL & 20 XPER & 5 DEX\n', '    purchaseRequirements[23].amounts = [10*(10**18), 20*(10**2), 5*(10**2)];\n', '    purchaseRequirements[24].tokens = [tokens[2], tokens[3], tokens[6]]; // 25 SKL & 50 XP & 10 DEX\n', '    purchaseRequirements[24].amounts = [25*(10**18), 50*(10**2), 10*(10**2)];\n', '    purchaseRequirements[25].tokens = [tokens[2], tokens[3], tokens[6]]; // 50 SKL & 100 XP & 20 DEX\n', '    purchaseRequirements[25].amounts = [50*(10**18), 100*(10**2), 20*(10**2)]; \n', '    purchaseRequirements[26].tokens = [tokens[2], tokens[3], tokens[6]]; // 100 SKL & 200 XP & 50 DEX \n', '    purchaseRequirements[26].amounts = [100*(10**18), 200*(10**2), 50*(10**2)];\n', '  }\n', '\n', '  /** the Gift token contract **/\n', '  ERC20 public giftToken;\n', '  /** amount of gift tokens to send **/\n', '  uint256 public giftTokenAmount;\n', '  /** purchase requirements for each type of character **/\n', '  PurchaseRequirement[30] purchaseRequirements; \n', '  /** the cost of each character type */\n', '  uint128[] public costs;\n', "  /** the value of each character type (cost - fee), so it's not necessary to compute it each time*/\n", '  uint128[] public values;\n', '  /** the fee to be paid each time an character is bought in percent*/\n', '  uint8 fee;\n', '  /** The maximum of characters allowed in the game */\n', '  uint16 public maxCharacters;\n', '  /** the amount of time that should pass since last eruption **/\n', '  uint256 public eruptionThreshold;\n', '  /** the amount of time that should pass ince last castle loot distribution **/\n', '  uint256 public castleLootDistributionThreshold;\n', '  /** how many characters to kill in %, e.g. 20 will stand for 20%, should be < 100 **/\n', '  uint8 public percentageToKill;\n', '  /* Cooldown threshold */\n', '  uint256 public constant CooldownThreshold = 1 days;\n', '  /** fight factor, used to compute extra probability in fight **/\n', '  uint8 public fightFactor;\n', '\n', '  /** the price for teleportation*/\n', '  uint256 public teleportPrice;\n', '  /** the price for protection */\n', '  uint256 public protectionPrice;\n', '  /** the luck threshold */\n', '  uint256 public luckThreshold;\n', '\n', '  function hasEnoughTokensToPurchase(address buyer, uint8 characterType) external returns (bool canBuy) {\n', '    for (uint256 i = 0; i < purchaseRequirements[characterType].tokens.length; i++) {\n', '      if (ERC20(purchaseRequirements[characterType].tokens[i]).balanceOf(buyer) < purchaseRequirements[characterType].amounts[i]) {\n', '        return false;\n', '      }\n', '    }\n', '    return true;\n', '  }\n', '\n', '\n', '  function setPurchaseRequirements(uint8 characterType, address[] tokens, uint256[] amounts) external {\n', '    purchaseRequirements[characterType].tokens = tokens;\n', '    purchaseRequirements[characterType].amounts = amounts;\n', '  } \n', '\n', '  function getPurchaseRequirements(uint8 characterType) view external returns (address[] tokens, uint256[] amounts) {\n', '    tokens = purchaseRequirements[characterType].tokens;\n', '    amounts = purchaseRequirements[characterType].amounts;\n', '  }\n', '\n', '  /**\n', '   * sets the prices of the character types\n', '   * @param prices the prices in finney\n', '   * */\n', '  function setPrices(uint16[] prices) external onlyOwner {\n', '    for (uint8 i = 0; i < prices.length; i++) {\n', '      costs[i] = uint128(prices[i]) * 1 finney;\n', '      values[i] = costs[i] - costs[i] / 100 * fee;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * sets the eruption threshold\n', '   * @param _value the threshold in seconds, e.g. 24 hours = 25*60*60\n', '   * */\n', '  function setEruptionThreshold(uint256 _value) external onlyOwner {\n', '    eruptionThreshold = _value;\n', '  }\n', '\n', '  /**\n', '   * sets the castle loot distribution threshold\n', '   * @param _value the threshold in seconds, e.g. 24 hours = 25*60*60\n', '   * */\n', '  function setCastleLootDistributionThreshold(uint256 _value) external onlyOwner {\n', '    castleLootDistributionThreshold = _value;\n', '  }\n', '\n', '  /**\n', '   * sets the fee\n', '   * @param _value for the fee, e.g. 3% = 3\n', '   * */\n', '  function setFee(uint8 _value) external onlyOwner {\n', '    fee = _value;\n', '  }\n', '\n', '  /**\n', '   * sets the percentage of characters to kill on eruption\n', '   * @param _value the percentage, e.g. 10% = 10\n', '   * */\n', '  function setPercentageToKill(uint8 _value) external onlyOwner {\n', '    percentageToKill = _value;\n', '  }\n', '\n', '  /**\n', '   * sets the maximum amount of characters allowed to be present in the game\n', '   * @param _value characters limit, e.g 600\n', '   * */\n', '  function setMaxCharacters(uint16 _value) external onlyOwner {\n', '    maxCharacters = _value;\n', '  }\n', '\n', '  /**\n', '   * sets the fight factor\n', '   * @param _value fight factor, e.g 4\n', '   * */\n', '  function setFightFactor(uint8 _value) external onlyOwner {\n', '    fightFactor = _value;\n', '  }\n', '\n', '  /**\n', '   * sets the teleport price\n', '   * @param _value base amount of TPT to transfer on teleport, e.g 10e18\n', '   * */\n', '  function setTeleportPrice(uint256 _value) external onlyOwner {\n', '    teleportPrice = _value;\n', '  }\n', '\n', '  /**\n', '   * sets the protection price\n', '   * @param _value base amount of NDC to transfer on protection, e.g 10e18\n', '   * */\n', '  function setProtectionPrice(uint256 _value) external onlyOwner {\n', '    protectionPrice = _value;\n', '  }\n', '\n', '  /**\n', '   * sets the luck threshold\n', '   * @param _value the minimum amount of luck tokens required for the second roll\n', '   * */\n', '  function setLuckThreshold(uint256 _value) external onlyOwner {\n', '    luckThreshold = _value;\n', '  }\n', '\n', '  /**\n', '   * sets the amount of tokens to gift threshold\n', '   * @param _value new value of the amount to gift\n', '   * */\n', '  function setGiftTokenAmount(uint256 _value) {\n', '    giftTokenAmount = _value;\n', '  }\n', '\n', '  /**\n', '   * sets the gift token address\n', '   * @param _value new gift token address\n', '   * */\n', '  function setGiftToken(address _value) {\n', '    giftToken = ERC20(_value);\n', '  }\n', '\n', '\n', '}']
