['pragma solidity 0.4.23;\n', '\n', 'contract AssetInterface {\n', '    function _performTransferWithReference(address _to, uint _value, string _reference, address _sender) public returns(bool);\n', '    function _performTransferToICAPWithReference(bytes32 _icap, uint _value, string _reference, address _sender) public returns(bool);\n', '    function _performApprove(address _spender, uint _value, address _sender) public returns(bool);\n', '    function _performTransferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) public returns(bool);\n', '    function _performTransferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference, address _sender) public returns(bool);\n', '    function _performGeneric(bytes, address) public payable {\n', '        revert();\n', '    }\n', '}\n', '\n', 'contract ERC20Interface {\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed from, address indexed spender, uint256 value);\n', '\n', '    function totalSupply() public view returns(uint256 supply);\n', '    function balanceOf(address _owner) public view returns(uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns(bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success);\n', '    function approve(address _spender, uint256 _value) public returns(bool success);\n', '    function allowance(address _owner, address _spender) public view returns(uint256 remaining);\n', '\n', '    function decimals() public view returns(uint8);\n', '}\n', '\n', 'contract AssetProxy is ERC20Interface {\n', '    function _forwardApprove(address _spender, uint _value, address _sender) public returns(bool);\n', '    function _forwardTransferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) public returns(bool);\n', '    function _forwardTransferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference, address _sender) public returns(bool);\n', '}\n', '\n', 'contract Bytes32 {\n', '    function _bytes32(string _input) internal pure returns(bytes32 result) {\n', '        assembly {\n', '            result := mload(add(_input, 32))\n', '        }\n', '    }\n', '}\n', '\n', 'contract ReturnData {\n', '    function _returnReturnData(bool _success) internal pure {\n', '        assembly {\n', '            let returndatastart := 0\n', '            returndatacopy(returndatastart, 0, returndatasize)\n', '            switch _success case 0 { revert(returndatastart, returndatasize) } default { return(returndatastart, returndatasize) }\n', '        }\n', '    }\n', '\n', '    function _assemblyCall(address _destination, uint _value, bytes _data) internal returns(bool success) {\n', '        assembly {\n', '            success := call(gas, _destination, _value, add(_data, 32), mload(_data), 0, 0)\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title EToken2 Asset implementation contract.\n', ' *\n', ' * Basic asset implementation contract, without any additional logic.\n', ' * Every other asset implementation contracts should derive from this one.\n', ' * Receives calls from the proxy, and calls back immediately without arguments modification.\n', ' *\n', ' * Note: all the non constant functions return false instead of throwing in case if state change\n', ' * didn&#39;t happen yet.\n', ' */\n', 'contract Asset is AssetInterface, Bytes32, ReturnData {\n', '    // Assigned asset proxy contract, immutable.\n', '    AssetProxy public proxy;\n', '\n', '    /**\n', '     * Only assigned proxy is allowed to call.\n', '     */\n', '    modifier onlyProxy() {\n', '        if (proxy == msg.sender) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Sets asset proxy address.\n', '     *\n', '     * Can be set only once.\n', '     *\n', '     * @param _proxy asset proxy contract address.\n', '     *\n', '     * @return success.\n', '     * @dev function is final, and must not be overridden.\n', '     */\n', '    function init(AssetProxy _proxy) public returns(bool) {\n', '        if (address(proxy) != 0x0) {\n', '            return false;\n', '        }\n', '        proxy = _proxy;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Passes execution into virtual function.\n', '     *\n', '     * Can only be called by assigned asset proxy.\n', '     *\n', '     * @return success.\n', '     * @dev function is final, and must not be overridden.\n', '     */\n', '    function _performTransferWithReference(address _to, uint _value, string _reference, address _sender) public onlyProxy() returns(bool) {\n', '        if (isICAP(_to)) {\n', '            return _transferToICAPWithReference(bytes32(_to) << 96, _value, _reference, _sender);\n', '        }\n', '        return _transferWithReference(_to, _value, _reference, _sender);\n', '    }\n', '\n', '    /**\n', '     * Calls back without modifications.\n', '     *\n', '     * @return success.\n', '     * @dev function is virtual, and meant to be overridden.\n', '     */\n', '    function _transferWithReference(address _to, uint _value, string _reference, address _sender) internal returns(bool) {\n', '        return proxy._forwardTransferFromWithReference(_sender, _to, _value, _reference, _sender);\n', '    }\n', '\n', '    /**\n', '     * Passes execution into virtual function.\n', '     *\n', '     * Can only be called by assigned asset proxy.\n', '     *\n', '     * @return success.\n', '     * @dev function is final, and must not be overridden.\n', '     */\n', '    function _performTransferToICAPWithReference(bytes32 _icap, uint _value, string _reference, address _sender) public onlyProxy() returns(bool) {\n', '        return _transferToICAPWithReference(_icap, _value, _reference, _sender);\n', '    }\n', '\n', '    /**\n', '     * Calls back without modifications.\n', '     *\n', '     * @return success.\n', '     * @dev function is virtual, and meant to be overridden.\n', '     */\n', '    function _transferToICAPWithReference(bytes32 _icap, uint _value, string _reference, address _sender) internal returns(bool) {\n', '        return proxy._forwardTransferFromToICAPWithReference(_sender, _icap, _value, _reference, _sender);\n', '    }\n', '\n', '    /**\n', '     * Passes execution into virtual function.\n', '     *\n', '     * Can only be called by assigned asset proxy.\n', '     *\n', '     * @return success.\n', '     * @dev function is final, and must not be overridden.\n', '     */\n', '    function _performTransferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) public onlyProxy() returns(bool) {\n', '        if (isICAP(_to)) {\n', '            return _transferFromToICAPWithReference(_from, bytes32(_to) << 96, _value, _reference, _sender);\n', '        }\n', '        return _transferFromWithReference(_from, _to, _value, _reference, _sender);\n', '    }\n', '\n', '    /**\n', '     * Calls back without modifications.\n', '     *\n', '     * @return success.\n', '     * @dev function is virtual, and meant to be overridden.\n', '     */\n', '    function _transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) internal returns(bool) {\n', '        return proxy._forwardTransferFromWithReference(_from, _to, _value, _reference, _sender);\n', '    }\n', '\n', '    /**\n', '     * Passes execution into virtual function.\n', '     *\n', '     * Can only be called by assigned asset proxy.\n', '     *\n', '     * @return success.\n', '     * @dev function is final, and must not be overridden.\n', '     */\n', '    function _performTransferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference, address _sender) public onlyProxy() returns(bool) {\n', '        return _transferFromToICAPWithReference(_from, _icap, _value, _reference, _sender);\n', '    }\n', '\n', '    /**\n', '     * Calls back without modifications.\n', '     *\n', '     * @return success.\n', '     * @dev function is virtual, and meant to be overridden.\n', '     */\n', '    function _transferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference, address _sender) internal returns(bool) {\n', '        return proxy._forwardTransferFromToICAPWithReference(_from, _icap, _value, _reference, _sender);\n', '    }\n', '\n', '    /**\n', '     * Passes execution into virtual function.\n', '     *\n', '     * Can only be called by assigned asset proxy.\n', '     *\n', '     * @return success.\n', '     * @dev function is final, and must not be overridden.\n', '     */\n', '    function _performApprove(address _spender, uint _value, address _sender) public onlyProxy() returns(bool) {\n', '        return _approve(_spender, _value, _sender);\n', '    }\n', '\n', '    /**\n', '     * Calls back without modifications.\n', '     *\n', '     * @return success.\n', '     * @dev function is virtual, and meant to be overridden.\n', '     */\n', '    function _approve(address _spender, uint _value, address _sender) internal returns(bool) {\n', '        return proxy._forwardApprove(_spender, _value, _sender);\n', '    }\n', '\n', '    /**\n', '     * Passes execution into virtual function.\n', '     *\n', '     * Can only be called by assigned asset proxy.\n', '     *\n', '     * @return bytes32 result.\n', '     * @dev function is final, and must not be overridden.\n', '     */\n', '    function _performGeneric(bytes _data, address _sender) public payable onlyProxy() {\n', '        _generic(_data, msg.value, _sender);\n', '    }\n', '\n', '    modifier onlyMe() {\n', '        if (this == msg.sender) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    // Most probably the following should never be redefined in child contracts.\n', '    address public genericSender;\n', '    function _generic(bytes _data, uint _value, address _msgSender) internal {\n', '        // Restrict reentrancy.\n', '        require(genericSender == 0x0);\n', '        genericSender = _msgSender;\n', '        bool success = _assemblyCall(address(this), _value, _data);\n', '        delete genericSender;\n', '        _returnReturnData(success);\n', '    }\n', '\n', '    // Decsendants should use _sender() instead of msg.sender to properly process proxied calls.\n', '    function _sender() internal view returns(address) {\n', '        return this == msg.sender ? genericSender : msg.sender;\n', '    }\n', '\n', '    // Interface functions to allow specifying ICAP addresses as strings.\n', '    function transferToICAP(string _icap, uint _value) public returns(bool) {\n', '        return transferToICAPWithReference(_icap, _value, &#39;&#39;);\n', '    }\n', '\n', '    function transferToICAPWithReference(string _icap, uint _value, string _reference) public returns(bool) {\n', '        return _transferToICAPWithReference(_bytes32(_icap), _value, _reference, _sender());\n', '    }\n', '\n', '    function transferFromToICAP(address _from, string _icap, uint _value) public returns(bool) {\n', '        return transferFromToICAPWithReference(_from, _icap, _value, &#39;&#39;);\n', '    }\n', '\n', '    function transferFromToICAPWithReference(address _from, string _icap, uint _value, string _reference) public returns(bool) {\n', '        return _transferFromToICAPWithReference(_from, _bytes32(_icap), _value, _reference, _sender());\n', '    }\n', '\n', '    function isICAP(address _address) public pure returns(bool) {\n', '        bytes32 a = bytes32(_address) << 96;\n', '        if (a[0] != &#39;X&#39; || a[1] != &#39;E&#39;) {\n', '            return false;\n', '        }\n', '        if (a[2] < 48 || a[2] > 57 || a[3] < 48 || a[3] > 57) {\n', '            return false;\n', '        }\n', '        for (uint i = 4; i < 20; i++) {\n', '            uint char = uint(a[i]);\n', '            if (char < 48 || char > 90 || (char > 57 && char < 65)) {\n', '                return false;\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Ambi2 {\n', '    function claimFor(address _address, address _owner) public returns(bool);\n', '    function hasRole(address _from, bytes32 _role, address _to) public view returns(bool);\n', '    function isOwner(address _node, address _owner) public view returns(bool);\n', '}\n', '\n', 'contract Ambi2Enabled {\n', '    Ambi2 ambi2;\n', '\n', '    modifier onlyRole(bytes32 _role) {\n', '        if (address(ambi2) != 0x0 && ambi2.hasRole(this, _role, msg.sender)) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    // Perform only after claiming the node, or claim in the same tx.\n', '    function setupAmbi2(Ambi2 _ambi2) public returns(bool) {\n', '        if (address(ambi2) != 0x0) {\n', '            return false;\n', '        }\n', '\n', '        ambi2 = _ambi2;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Ambi2EnabledFull is Ambi2Enabled {\n', '    // Setup and claim atomically.\n', '    function setupAmbi2(Ambi2 _ambi2) public returns(bool) {\n', '        if (address(ambi2) != 0x0) {\n', '            return false;\n', '        }\n', '        if (!_ambi2.claimFor(this, msg.sender) && !_ambi2.isOwner(this, msg.sender)) {\n', '            return false;\n', '        }\n', '\n', '        ambi2 = _ambi2;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract AssetWithAmbi is Asset, Ambi2EnabledFull {\n', '    modifier onlyRole(bytes32 _role) {\n', '        if (address(ambi2) != 0x0 && (ambi2.hasRole(this, _role, _sender()))) {\n', '            _;\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title EToken2 Asset with whitelist implementation contract.\n', ' */\n', 'contract AssetWithWhitelist is AssetWithAmbi {\n', '    mapping(address => bool) public whitelist;\n', '    uint public restrictionExpiraton;\n', '    bool public restrictionRemoved;\n', '\n', '    event Error(bytes32 _errorText);\n', '\n', '    function allowTransferFrom(address _from) public onlyRole(&#39;admin&#39;) returns(bool) {\n', '        whitelist[_from] = true;\n', '        return true;\n', '    }\n', '\n', '    function blockTransferFrom(address _from) public onlyRole(&#39;admin&#39;) returns(bool) {\n', '        whitelist[_from] = false;\n', '        return true;\n', '    }\n', '\n', '    function transferIsAllowed(address _from) public view returns(bool) {\n', '        return restrictionRemoved || whitelist[_from] || (now >= restrictionExpiraton);\n', '    }\n', '\n', '    function removeRestriction() public onlyRole(&#39;admin&#39;) returns(bool) {\n', '        restrictionRemoved = true;\n', '        return true;\n', '    }\n', '\n', '    modifier transferAllowed(address _sender) {\n', '        if (!transferIsAllowed(_sender)) {\n', '            emit Error(&#39;Transfer not allowed&#39;);\n', '            return;\n', '        }\n', '        _;\n', '    }\n', '\n', '    function setExpiration(uint _time) public onlyRole(&#39;admin&#39;) returns(bool) {\n', '        if (restrictionExpiraton != 0) {\n', '            emit Error(&#39;Expiration time already set&#39;);\n', '            return false;\n', '        }\n', '        if (_time < now) {\n', '            emit Error(&#39;Expiration time invalid&#39;);\n', '            return false;\n', '        }\n', '        restrictionExpiraton = _time;\n', '        return true;\n', '    }\n', '\n', '    // Transfers\n', '    function _transferWithReference(address _to, uint _value, string _reference, address _sender)\n', '        transferAllowed(_sender)\n', '        internal\n', '        returns(bool)\n', '    {\n', '        return super._transferWithReference(_to, _value, _reference, _sender);\n', '    }\n', '\n', '    function _transferToICAPWithReference(bytes32 _icap, uint _value, string _reference, address _sender)\n', '        transferAllowed(_sender)\n', '        internal\n', '        returns(bool)\n', '    {\n', '        return super._transferToICAPWithReference(_icap, _value, _reference, _sender);\n', '    }\n', '\n', '    function _transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender)\n', '        transferAllowed(_from)\n', '        internal\n', '        returns(bool)\n', '    {\n', '        return super._transferFromWithReference(_from, _to, _value, _reference, _sender);\n', '    }\n', '\n', '    function _transferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference, address _sender)\n', '        transferAllowed(_from)\n', '        internal\n', '        returns(bool)\n', '    {\n', '        return super._transferFromToICAPWithReference(_from, _icap, _value, _reference, _sender);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title EToken2 Asset with per holder timelock implementation contract.\n', ' *\n', ' * Locks can only be set by the sender with &#39;locker&#39; role and to the\n', ' * recepients who allowed to set locks on them.\n', ' *\n', ' * Once the lock is set, it cannot be changed, and all the tokens on the locked address\n', ' * will become available when unlock date comes.\n', ' */\n', 'contract AssetWithTimelock is AssetWithAmbi {\n', '    mapping(address => uint) public unlockDate;\n', '\n', '    event Error(bytes32 message);\n', '    event TimelockAllowed(address addr);\n', '    event Timelocked(address addr, uint unlockDate);\n', '\n', '    function isTimelockAllowed(address _address) public view returns(bool) {\n', '        return unlockDate[_address] > 0;\n', '    }\n', '\n', '    function isTimelocked(address _address) public view returns(bool) {\n', '        return unlockDate[_address] > 1;\n', '    }\n', '\n', '    function isTransferAllowed(address _from) public view returns(bool) {\n', '        return now > unlockDate[_from];\n', '    }\n', '\n', '    function allowTimelock() public returns(bool) {\n', '        _allowTimelock(_sender());\n', '        return true;\n', '    }\n', '\n', '    function _allowTimelock(address _address) internal {\n', '        if (isTimelockAllowed(_address)) {\n', '            return;\n', '        }\n', '        unlockDate[_address] = 1;\n', '        emit TimelockAllowed(_address);\n', '    }\n', '\n', '    function () public {\n', '        require(msg.data.length == 0);\n', '        allowTimelock();\n', '    }\n', '\n', '    function transferWithLock(address _to, uint _value, uint _unlockDate) onlyRole(&#39;locker&#39;) public returns(bool) {\n', '        address sender = _sender();\n', '        if (_unlockDate == 0) {\n', '            emit Error(&#39;Invalid unlock date&#39;);\n', '            return false;\n', '        }\n', '        if (not(isTimelockAllowed(_to))) {\n', '            emit Error(&#39;Timelock not allowed&#39;);\n', '            return false;\n', '        }\n', '        if (not(_transferWithReference(_to, _value, &#39;Timelocked&#39;, sender))) {\n', '            emit Error(&#39;Failed transfer with lock&#39;);\n', '            return false;\n', '        }\n', '        if (not(isTimelocked(_to))) {\n', '            unlockDate[_to] = _unlockDate;\n', '            emit Timelocked(_to, _unlockDate);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    modifier onlyUnlocked(address _from) {\n', '        if (not(isTransferAllowed(_from))) {\n', '            emit Error(&#39;Sender is timelocked&#39;);\n', '            return;\n', '        }\n', '        _;\n', '    }\n', '\n', '    function not(bool _condition) internal pure returns(bool) {\n', '        return !_condition;\n', '    }\n', '\n', '    // Transfers\n', '    function _transferWithReference(address _to, uint _value, string _reference, address _sender)\n', '        onlyUnlocked(_sender)\n', '        internal\n', '        returns(bool)\n', '    {\n', '        if (_value == 0) {\n', '            _allowTimelock(_sender);\n', '            return true;\n', '        }\n', '        return super._transferWithReference(_to, _value, _reference, _sender);\n', '    }\n', '\n', '    function _transferToICAPWithReference(bytes32 _icap, uint _value, string _reference, address _sender)\n', '        onlyUnlocked(_sender)\n', '        internal\n', '        returns(bool)\n', '    {\n', '        return super._transferToICAPWithReference(_icap, _value, _reference, _sender);\n', '    }\n', '\n', '    function _transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender)\n', '        onlyUnlocked(_from)\n', '        internal\n', '        returns(bool)\n', '    {\n', '        return super._transferFromWithReference(_from, _to, _value, _reference, _sender);\n', '    }\n', '\n', '    function _transferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference, address _sender)\n', '        onlyUnlocked(_from)\n', '        internal\n', '        returns(bool)\n', '    {\n', '        return super._transferFromToICAPWithReference(_from, _icap, _value, _reference, _sender);\n', '    }\n', '}\n', '\n', 'contract AssetWithTimelockAndWhitelist is AssetWithWhitelist, AssetWithTimelock {}']
['pragma solidity 0.4.23;\n', '\n', 'contract AssetInterface {\n', '    function _performTransferWithReference(address _to, uint _value, string _reference, address _sender) public returns(bool);\n', '    function _performTransferToICAPWithReference(bytes32 _icap, uint _value, string _reference, address _sender) public returns(bool);\n', '    function _performApprove(address _spender, uint _value, address _sender) public returns(bool);\n', '    function _performTransferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) public returns(bool);\n', '    function _performTransferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference, address _sender) public returns(bool);\n', '    function _performGeneric(bytes, address) public payable {\n', '        revert();\n', '    }\n', '}\n', '\n', 'contract ERC20Interface {\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed from, address indexed spender, uint256 value);\n', '\n', '    function totalSupply() public view returns(uint256 supply);\n', '    function balanceOf(address _owner) public view returns(uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns(bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success);\n', '    function approve(address _spender, uint256 _value) public returns(bool success);\n', '    function allowance(address _owner, address _spender) public view returns(uint256 remaining);\n', '\n', '    function decimals() public view returns(uint8);\n', '}\n', '\n', 'contract AssetProxy is ERC20Interface {\n', '    function _forwardApprove(address _spender, uint _value, address _sender) public returns(bool);\n', '    function _forwardTransferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) public returns(bool);\n', '    function _forwardTransferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference, address _sender) public returns(bool);\n', '}\n', '\n', 'contract Bytes32 {\n', '    function _bytes32(string _input) internal pure returns(bytes32 result) {\n', '        assembly {\n', '            result := mload(add(_input, 32))\n', '        }\n', '    }\n', '}\n', '\n', 'contract ReturnData {\n', '    function _returnReturnData(bool _success) internal pure {\n', '        assembly {\n', '            let returndatastart := 0\n', '            returndatacopy(returndatastart, 0, returndatasize)\n', '            switch _success case 0 { revert(returndatastart, returndatasize) } default { return(returndatastart, returndatasize) }\n', '        }\n', '    }\n', '\n', '    function _assemblyCall(address _destination, uint _value, bytes _data) internal returns(bool success) {\n', '        assembly {\n', '            success := call(gas, _destination, _value, add(_data, 32), mload(_data), 0, 0)\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title EToken2 Asset implementation contract.\n', ' *\n', ' * Basic asset implementation contract, without any additional logic.\n', ' * Every other asset implementation contracts should derive from this one.\n', ' * Receives calls from the proxy, and calls back immediately without arguments modification.\n', ' *\n', ' * Note: all the non constant functions return false instead of throwing in case if state change\n', " * didn't happen yet.\n", ' */\n', 'contract Asset is AssetInterface, Bytes32, ReturnData {\n', '    // Assigned asset proxy contract, immutable.\n', '    AssetProxy public proxy;\n', '\n', '    /**\n', '     * Only assigned proxy is allowed to call.\n', '     */\n', '    modifier onlyProxy() {\n', '        if (proxy == msg.sender) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Sets asset proxy address.\n', '     *\n', '     * Can be set only once.\n', '     *\n', '     * @param _proxy asset proxy contract address.\n', '     *\n', '     * @return success.\n', '     * @dev function is final, and must not be overridden.\n', '     */\n', '    function init(AssetProxy _proxy) public returns(bool) {\n', '        if (address(proxy) != 0x0) {\n', '            return false;\n', '        }\n', '        proxy = _proxy;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Passes execution into virtual function.\n', '     *\n', '     * Can only be called by assigned asset proxy.\n', '     *\n', '     * @return success.\n', '     * @dev function is final, and must not be overridden.\n', '     */\n', '    function _performTransferWithReference(address _to, uint _value, string _reference, address _sender) public onlyProxy() returns(bool) {\n', '        if (isICAP(_to)) {\n', '            return _transferToICAPWithReference(bytes32(_to) << 96, _value, _reference, _sender);\n', '        }\n', '        return _transferWithReference(_to, _value, _reference, _sender);\n', '    }\n', '\n', '    /**\n', '     * Calls back without modifications.\n', '     *\n', '     * @return success.\n', '     * @dev function is virtual, and meant to be overridden.\n', '     */\n', '    function _transferWithReference(address _to, uint _value, string _reference, address _sender) internal returns(bool) {\n', '        return proxy._forwardTransferFromWithReference(_sender, _to, _value, _reference, _sender);\n', '    }\n', '\n', '    /**\n', '     * Passes execution into virtual function.\n', '     *\n', '     * Can only be called by assigned asset proxy.\n', '     *\n', '     * @return success.\n', '     * @dev function is final, and must not be overridden.\n', '     */\n', '    function _performTransferToICAPWithReference(bytes32 _icap, uint _value, string _reference, address _sender) public onlyProxy() returns(bool) {\n', '        return _transferToICAPWithReference(_icap, _value, _reference, _sender);\n', '    }\n', '\n', '    /**\n', '     * Calls back without modifications.\n', '     *\n', '     * @return success.\n', '     * @dev function is virtual, and meant to be overridden.\n', '     */\n', '    function _transferToICAPWithReference(bytes32 _icap, uint _value, string _reference, address _sender) internal returns(bool) {\n', '        return proxy._forwardTransferFromToICAPWithReference(_sender, _icap, _value, _reference, _sender);\n', '    }\n', '\n', '    /**\n', '     * Passes execution into virtual function.\n', '     *\n', '     * Can only be called by assigned asset proxy.\n', '     *\n', '     * @return success.\n', '     * @dev function is final, and must not be overridden.\n', '     */\n', '    function _performTransferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) public onlyProxy() returns(bool) {\n', '        if (isICAP(_to)) {\n', '            return _transferFromToICAPWithReference(_from, bytes32(_to) << 96, _value, _reference, _sender);\n', '        }\n', '        return _transferFromWithReference(_from, _to, _value, _reference, _sender);\n', '    }\n', '\n', '    /**\n', '     * Calls back without modifications.\n', '     *\n', '     * @return success.\n', '     * @dev function is virtual, and meant to be overridden.\n', '     */\n', '    function _transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) internal returns(bool) {\n', '        return proxy._forwardTransferFromWithReference(_from, _to, _value, _reference, _sender);\n', '    }\n', '\n', '    /**\n', '     * Passes execution into virtual function.\n', '     *\n', '     * Can only be called by assigned asset proxy.\n', '     *\n', '     * @return success.\n', '     * @dev function is final, and must not be overridden.\n', '     */\n', '    function _performTransferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference, address _sender) public onlyProxy() returns(bool) {\n', '        return _transferFromToICAPWithReference(_from, _icap, _value, _reference, _sender);\n', '    }\n', '\n', '    /**\n', '     * Calls back without modifications.\n', '     *\n', '     * @return success.\n', '     * @dev function is virtual, and meant to be overridden.\n', '     */\n', '    function _transferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference, address _sender) internal returns(bool) {\n', '        return proxy._forwardTransferFromToICAPWithReference(_from, _icap, _value, _reference, _sender);\n', '    }\n', '\n', '    /**\n', '     * Passes execution into virtual function.\n', '     *\n', '     * Can only be called by assigned asset proxy.\n', '     *\n', '     * @return success.\n', '     * @dev function is final, and must not be overridden.\n', '     */\n', '    function _performApprove(address _spender, uint _value, address _sender) public onlyProxy() returns(bool) {\n', '        return _approve(_spender, _value, _sender);\n', '    }\n', '\n', '    /**\n', '     * Calls back without modifications.\n', '     *\n', '     * @return success.\n', '     * @dev function is virtual, and meant to be overridden.\n', '     */\n', '    function _approve(address _spender, uint _value, address _sender) internal returns(bool) {\n', '        return proxy._forwardApprove(_spender, _value, _sender);\n', '    }\n', '\n', '    /**\n', '     * Passes execution into virtual function.\n', '     *\n', '     * Can only be called by assigned asset proxy.\n', '     *\n', '     * @return bytes32 result.\n', '     * @dev function is final, and must not be overridden.\n', '     */\n', '    function _performGeneric(bytes _data, address _sender) public payable onlyProxy() {\n', '        _generic(_data, msg.value, _sender);\n', '    }\n', '\n', '    modifier onlyMe() {\n', '        if (this == msg.sender) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    // Most probably the following should never be redefined in child contracts.\n', '    address public genericSender;\n', '    function _generic(bytes _data, uint _value, address _msgSender) internal {\n', '        // Restrict reentrancy.\n', '        require(genericSender == 0x0);\n', '        genericSender = _msgSender;\n', '        bool success = _assemblyCall(address(this), _value, _data);\n', '        delete genericSender;\n', '        _returnReturnData(success);\n', '    }\n', '\n', '    // Decsendants should use _sender() instead of msg.sender to properly process proxied calls.\n', '    function _sender() internal view returns(address) {\n', '        return this == msg.sender ? genericSender : msg.sender;\n', '    }\n', '\n', '    // Interface functions to allow specifying ICAP addresses as strings.\n', '    function transferToICAP(string _icap, uint _value) public returns(bool) {\n', "        return transferToICAPWithReference(_icap, _value, '');\n", '    }\n', '\n', '    function transferToICAPWithReference(string _icap, uint _value, string _reference) public returns(bool) {\n', '        return _transferToICAPWithReference(_bytes32(_icap), _value, _reference, _sender());\n', '    }\n', '\n', '    function transferFromToICAP(address _from, string _icap, uint _value) public returns(bool) {\n', "        return transferFromToICAPWithReference(_from, _icap, _value, '');\n", '    }\n', '\n', '    function transferFromToICAPWithReference(address _from, string _icap, uint _value, string _reference) public returns(bool) {\n', '        return _transferFromToICAPWithReference(_from, _bytes32(_icap), _value, _reference, _sender());\n', '    }\n', '\n', '    function isICAP(address _address) public pure returns(bool) {\n', '        bytes32 a = bytes32(_address) << 96;\n', "        if (a[0] != 'X' || a[1] != 'E') {\n", '            return false;\n', '        }\n', '        if (a[2] < 48 || a[2] > 57 || a[3] < 48 || a[3] > 57) {\n', '            return false;\n', '        }\n', '        for (uint i = 4; i < 20; i++) {\n', '            uint char = uint(a[i]);\n', '            if (char < 48 || char > 90 || (char > 57 && char < 65)) {\n', '                return false;\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Ambi2 {\n', '    function claimFor(address _address, address _owner) public returns(bool);\n', '    function hasRole(address _from, bytes32 _role, address _to) public view returns(bool);\n', '    function isOwner(address _node, address _owner) public view returns(bool);\n', '}\n', '\n', 'contract Ambi2Enabled {\n', '    Ambi2 ambi2;\n', '\n', '    modifier onlyRole(bytes32 _role) {\n', '        if (address(ambi2) != 0x0 && ambi2.hasRole(this, _role, msg.sender)) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    // Perform only after claiming the node, or claim in the same tx.\n', '    function setupAmbi2(Ambi2 _ambi2) public returns(bool) {\n', '        if (address(ambi2) != 0x0) {\n', '            return false;\n', '        }\n', '\n', '        ambi2 = _ambi2;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Ambi2EnabledFull is Ambi2Enabled {\n', '    // Setup and claim atomically.\n', '    function setupAmbi2(Ambi2 _ambi2) public returns(bool) {\n', '        if (address(ambi2) != 0x0) {\n', '            return false;\n', '        }\n', '        if (!_ambi2.claimFor(this, msg.sender) && !_ambi2.isOwner(this, msg.sender)) {\n', '            return false;\n', '        }\n', '\n', '        ambi2 = _ambi2;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract AssetWithAmbi is Asset, Ambi2EnabledFull {\n', '    modifier onlyRole(bytes32 _role) {\n', '        if (address(ambi2) != 0x0 && (ambi2.hasRole(this, _role, _sender()))) {\n', '            _;\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title EToken2 Asset with whitelist implementation contract.\n', ' */\n', 'contract AssetWithWhitelist is AssetWithAmbi {\n', '    mapping(address => bool) public whitelist;\n', '    uint public restrictionExpiraton;\n', '    bool public restrictionRemoved;\n', '\n', '    event Error(bytes32 _errorText);\n', '\n', "    function allowTransferFrom(address _from) public onlyRole('admin') returns(bool) {\n", '        whitelist[_from] = true;\n', '        return true;\n', '    }\n', '\n', "    function blockTransferFrom(address _from) public onlyRole('admin') returns(bool) {\n", '        whitelist[_from] = false;\n', '        return true;\n', '    }\n', '\n', '    function transferIsAllowed(address _from) public view returns(bool) {\n', '        return restrictionRemoved || whitelist[_from] || (now >= restrictionExpiraton);\n', '    }\n', '\n', "    function removeRestriction() public onlyRole('admin') returns(bool) {\n", '        restrictionRemoved = true;\n', '        return true;\n', '    }\n', '\n', '    modifier transferAllowed(address _sender) {\n', '        if (!transferIsAllowed(_sender)) {\n', "            emit Error('Transfer not allowed');\n", '            return;\n', '        }\n', '        _;\n', '    }\n', '\n', "    function setExpiration(uint _time) public onlyRole('admin') returns(bool) {\n", '        if (restrictionExpiraton != 0) {\n', "            emit Error('Expiration time already set');\n", '            return false;\n', '        }\n', '        if (_time < now) {\n', "            emit Error('Expiration time invalid');\n", '            return false;\n', '        }\n', '        restrictionExpiraton = _time;\n', '        return true;\n', '    }\n', '\n', '    // Transfers\n', '    function _transferWithReference(address _to, uint _value, string _reference, address _sender)\n', '        transferAllowed(_sender)\n', '        internal\n', '        returns(bool)\n', '    {\n', '        return super._transferWithReference(_to, _value, _reference, _sender);\n', '    }\n', '\n', '    function _transferToICAPWithReference(bytes32 _icap, uint _value, string _reference, address _sender)\n', '        transferAllowed(_sender)\n', '        internal\n', '        returns(bool)\n', '    {\n', '        return super._transferToICAPWithReference(_icap, _value, _reference, _sender);\n', '    }\n', '\n', '    function _transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender)\n', '        transferAllowed(_from)\n', '        internal\n', '        returns(bool)\n', '    {\n', '        return super._transferFromWithReference(_from, _to, _value, _reference, _sender);\n', '    }\n', '\n', '    function _transferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference, address _sender)\n', '        transferAllowed(_from)\n', '        internal\n', '        returns(bool)\n', '    {\n', '        return super._transferFromToICAPWithReference(_from, _icap, _value, _reference, _sender);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title EToken2 Asset with per holder timelock implementation contract.\n', ' *\n', " * Locks can only be set by the sender with 'locker' role and to the\n", ' * recepients who allowed to set locks on them.\n', ' *\n', ' * Once the lock is set, it cannot be changed, and all the tokens on the locked address\n', ' * will become available when unlock date comes.\n', ' */\n', 'contract AssetWithTimelock is AssetWithAmbi {\n', '    mapping(address => uint) public unlockDate;\n', '\n', '    event Error(bytes32 message);\n', '    event TimelockAllowed(address addr);\n', '    event Timelocked(address addr, uint unlockDate);\n', '\n', '    function isTimelockAllowed(address _address) public view returns(bool) {\n', '        return unlockDate[_address] > 0;\n', '    }\n', '\n', '    function isTimelocked(address _address) public view returns(bool) {\n', '        return unlockDate[_address] > 1;\n', '    }\n', '\n', '    function isTransferAllowed(address _from) public view returns(bool) {\n', '        return now > unlockDate[_from];\n', '    }\n', '\n', '    function allowTimelock() public returns(bool) {\n', '        _allowTimelock(_sender());\n', '        return true;\n', '    }\n', '\n', '    function _allowTimelock(address _address) internal {\n', '        if (isTimelockAllowed(_address)) {\n', '            return;\n', '        }\n', '        unlockDate[_address] = 1;\n', '        emit TimelockAllowed(_address);\n', '    }\n', '\n', '    function () public {\n', '        require(msg.data.length == 0);\n', '        allowTimelock();\n', '    }\n', '\n', "    function transferWithLock(address _to, uint _value, uint _unlockDate) onlyRole('locker') public returns(bool) {\n", '        address sender = _sender();\n', '        if (_unlockDate == 0) {\n', "            emit Error('Invalid unlock date');\n", '            return false;\n', '        }\n', '        if (not(isTimelockAllowed(_to))) {\n', "            emit Error('Timelock not allowed');\n", '            return false;\n', '        }\n', "        if (not(_transferWithReference(_to, _value, 'Timelocked', sender))) {\n", "            emit Error('Failed transfer with lock');\n", '            return false;\n', '        }\n', '        if (not(isTimelocked(_to))) {\n', '            unlockDate[_to] = _unlockDate;\n', '            emit Timelocked(_to, _unlockDate);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    modifier onlyUnlocked(address _from) {\n', '        if (not(isTransferAllowed(_from))) {\n', "            emit Error('Sender is timelocked');\n", '            return;\n', '        }\n', '        _;\n', '    }\n', '\n', '    function not(bool _condition) internal pure returns(bool) {\n', '        return !_condition;\n', '    }\n', '\n', '    // Transfers\n', '    function _transferWithReference(address _to, uint _value, string _reference, address _sender)\n', '        onlyUnlocked(_sender)\n', '        internal\n', '        returns(bool)\n', '    {\n', '        if (_value == 0) {\n', '            _allowTimelock(_sender);\n', '            return true;\n', '        }\n', '        return super._transferWithReference(_to, _value, _reference, _sender);\n', '    }\n', '\n', '    function _transferToICAPWithReference(bytes32 _icap, uint _value, string _reference, address _sender)\n', '        onlyUnlocked(_sender)\n', '        internal\n', '        returns(bool)\n', '    {\n', '        return super._transferToICAPWithReference(_icap, _value, _reference, _sender);\n', '    }\n', '\n', '    function _transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender)\n', '        onlyUnlocked(_from)\n', '        internal\n', '        returns(bool)\n', '    {\n', '        return super._transferFromWithReference(_from, _to, _value, _reference, _sender);\n', '    }\n', '\n', '    function _transferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference, address _sender)\n', '        onlyUnlocked(_from)\n', '        internal\n', '        returns(bool)\n', '    {\n', '        return super._transferFromToICAPWithReference(_from, _icap, _value, _reference, _sender);\n', '    }\n', '}\n', '\n', 'contract AssetWithTimelockAndWhitelist is AssetWithWhitelist, AssetWithTimelock {}']
