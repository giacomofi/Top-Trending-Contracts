['pragma solidity ^0.4.21;\n', '\n', '\n', 'contract AuctusWhitelist {\n', '\taddress public owner;\n', '\tuint256 public timeThatFinishGuaranteedPeriod = 1522245600; //2018-03-28 2 PM UTC\n', '\tuint256 public maximumValueAfterGuaranteedPeriod = 15000 ether; //too high value\n', '\tuint256 public maximumValueDuringGuaranteedPeriod;\n', '\tuint256 public maximumValueWithoutProofOfAddress;\n', '\n', '\tmapping(address => WhitelistInfo) public whitelist;\n', '\tmapping(address => bool) public canListAddress;\n', '\n', '\tstruct WhitelistInfo {\n', '\t\tbool _whitelisted;\n', '\t\tbool _unlimited;\n', '\t\tbool _doubleValue;\n', '\t\tbool _shouldWaitGuaranteedPeriod;\n', '\t}\n', '\n', '\tfunction AuctusWhitelist(uint256 maximumValueToGuaranteedPeriod, uint256 maximumValueForProofOfAddress) public {\n', '\t\towner = msg.sender;\n', '\t\tcanListAddress[msg.sender] = true;\n', '\t\tmaximumValueDuringGuaranteedPeriod = maximumValueToGuaranteedPeriod;\n', '\t\tmaximumValueWithoutProofOfAddress = maximumValueForProofOfAddress;\n', '\t}\n', '\n', '\tmodifier onlyOwner() {\n', '\t\trequire(owner == msg.sender);\n', '\t\t_;\n', '\t}\n', '\n', '\tfunction transferOwnership(address newOwner) onlyOwner public {\n', '\t\trequire(newOwner != address(0));\n', '\t\towner = newOwner;\n', '\t}\n', '\n', '\tfunction changeMaximumValueDuringGuaranteedPeriod(uint256 maximumValue) onlyOwner public {\n', '\t\trequire(maximumValue > 0);\n', '\t\tmaximumValueDuringGuaranteedPeriod = maximumValue;\n', '\t}\n', '\n', '\tfunction changeMaximumValueWithoutProofOfAddress(uint256 maximumValue) onlyOwner public {\n', '\t\trequire(maximumValue > 0);\n', '\t\tmaximumValueWithoutProofOfAddress = maximumValue;\n', '\t}\n', '\n', '\tfunction setAddressesThatCanList(bool canList, address[] _addresses) onlyOwner public {\n', '\t\tfor (uint256 i = 0; i < _addresses.length; i++) {\n', '\t\t\tcanListAddress[_addresses[i]] = canList;\n', '\t\t}\n', '\t}\n', '\n', '\tfunction listAddresses(bool whitelisted, bool unlimited, bool doubleValue, bool shouldWait, address[] _addresses) public {\n', '\t\trequire(canListAddress[msg.sender]);\n', '\t\tfor (uint256 i = 0; i < _addresses.length; i++) {\n', '\t\t\twhitelist[_addresses[i]] = WhitelistInfo(whitelisted, unlimited, doubleValue, shouldWait);\n', '\t\t}\n', '\t}\n', '\n', '\tfunction getAllowedAmountToContribute(address addr) view public returns(uint256) {\n', '\t\tif (!whitelist[addr]._whitelisted) {\n', '\t\t\treturn 0;\n', '\t\t} else if (now <= timeThatFinishGuaranteedPeriod) {\n', '\t\t\tif (whitelist[addr]._shouldWaitGuaranteedPeriod) {\n', '\t\t\t\treturn 0;\n', '\t\t\t} else {\n', '\t\t\t\tif (whitelist[addr]._doubleValue) {\n', '\t\t\t\t\tuint256 amount = maximumValueDuringGuaranteedPeriod * 2;\n', '\t\t\t\t\tif (whitelist[addr]._unlimited || amount < maximumValueWithoutProofOfAddress) {\n', '\t\t\t\t\t\treturn amount;\n', '\t\t\t\t\t} else {\n', '\t\t\t\t\t\treturn maximumValueWithoutProofOfAddress;\n', '\t\t\t\t\t}\n', '\t\t\t\t} else {\n', '\t\t\t\t\treturn maximumValueDuringGuaranteedPeriod;\n', '\t\t\t\t}\n', '\t\t\t}\n', '\t\t} else {\n', '\t\t\tif (whitelist[addr]._unlimited) {\n', '\t\t\t\treturn maximumValueAfterGuaranteedPeriod;\n', '\t\t\t} else {\n', '\t\t\t\treturn maximumValueWithoutProofOfAddress;\n', '\t\t\t}\n', '\t\t}\n', '\t}\n', '}']