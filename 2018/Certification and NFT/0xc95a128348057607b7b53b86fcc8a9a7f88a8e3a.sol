['pragma solidity ^0.4.24;\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}\n', '\n', '\n', 'contract Authorize is Ownable {\n', '    /* Define variable owner of the type address */\n', '    address public backEndOperator = msg.sender;\n', '\n', '    mapping(address=>bool) public whitelist;\n', '\n', '    event Authorized(address wlCandidate, uint timestamp);\n', '\n', '    event Revoked(address wlCandidate, uint timestamp);\n', '\n', '\n', '    modifier backEnd() {\n', '        require(msg.sender == backEndOperator || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function setBackEndAddress(address newBackEndOperator) public onlyOwner {\n', '        backEndOperator = newBackEndOperator;\n', '    }\n', '\n', '\n', '    function authorize(address wlCandidate) public backEnd  {\n', '        require(wlCandidate != address(0x0));\n', '        require(!isWhitelisted(wlCandidate));\n', '        whitelist[wlCandidate] = true;\n', '        emit Authorized(wlCandidate, now);\n', '    }\n', '\n', '    function revoke(address wlCandidate) public  onlyOwner {\n', '        whitelist[wlCandidate] = false;\n', '        emit Revoked(wlCandidate, now);\n', '    }\n', '\n', '    function isWhitelisted(address wlCandidate) public view returns(bool) {\n', '        return whitelist[wlCandidate];\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}\n', '\n', '\n', 'contract Authorize is Ownable {\n', '    /* Define variable owner of the type address */\n', '    address public backEndOperator = msg.sender;\n', '\n', '    mapping(address=>bool) public whitelist;\n', '\n', '    event Authorized(address wlCandidate, uint timestamp);\n', '\n', '    event Revoked(address wlCandidate, uint timestamp);\n', '\n', '\n', '    modifier backEnd() {\n', '        require(msg.sender == backEndOperator || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function setBackEndAddress(address newBackEndOperator) public onlyOwner {\n', '        backEndOperator = newBackEndOperator;\n', '    }\n', '\n', '\n', '    function authorize(address wlCandidate) public backEnd  {\n', '        require(wlCandidate != address(0x0));\n', '        require(!isWhitelisted(wlCandidate));\n', '        whitelist[wlCandidate] = true;\n', '        emit Authorized(wlCandidate, now);\n', '    }\n', '\n', '    function revoke(address wlCandidate) public  onlyOwner {\n', '        whitelist[wlCandidate] = false;\n', '        emit Revoked(wlCandidate, now);\n', '    }\n', '\n', '    function isWhitelisted(address wlCandidate) public view returns(bool) {\n', '        return whitelist[wlCandidate];\n', '    }\n', '\n', '}']
